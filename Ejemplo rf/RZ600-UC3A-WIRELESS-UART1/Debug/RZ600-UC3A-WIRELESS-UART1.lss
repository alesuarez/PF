
RZ600-UC3A-WIRELESS-UART1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000040e8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80006200  80006200  00006600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000019c  80006400  80006400  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000659c  8000659c  0000699c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000668  00000008  800065a0  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000c38  00000670  00000670  00000000  2**2
                  ALLOC
  9 .heap         0000dd58  000012a8  000012a8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c40  00000000  00000000  000072a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001caf  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000209a6  00000000  00000000  00009b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000037de  00000000  00000000  0002a535  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c374  00000000  00000000  0002dd13  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001dc0  00000000  00000000  0003a088  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008578  00000000  00000000  0003be48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000053aa  00000000  00000000  000443c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 010d4a16  00000000  00000000  0004976a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000ea0  00000000  00000000  0111e180  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cb 0c 	sub	pc,pc,-13556

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf eb 10 	sub	pc,pc,-5360

Disassembly of section .text:

80002008 <board_init>:
80002008:	d4 01       	pushm	lr
8000200a:	30 3b       	mov	r11,3
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200c:	34 9c       	mov	r12,73
8000200e:	f0 1f 00 0e 	mcall	80002044 <board_init+0x3c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002012:	30 3b       	mov	r11,3
80002014:	35 cc       	mov	r12,92
80002016:	f0 1f 00 0c 	mcall	80002044 <board_init+0x3c>
        {AT86RFX_SPI_MOSI_PIN, AT86RFX_SPI_MOSI_FUNCTION},
        {AT86RFX_SPI_NPCS_PIN, AT86RFX_SPI_NPCS_FUNCTION}
    };

	// Assign GPIO to SPI.
	gpio_enable_module(AT86RFX_SPI_GPIO_MAP, sizeof(AT86RFX_SPI_GPIO_MAP) / sizeof(AT86RFX_SPI_GPIO_MAP[0]));
8000201a:	30 4b       	mov	r11,4
8000201c:	48 bc       	lddpc	r12,80002048 <board_init+0x40>
8000201e:	f0 1f 00 0c 	mcall	8000204c <board_init+0x44>

	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
80002022:	30 1b       	mov	r11,1
80002024:	31 4c       	mov	r12,20
80002026:	f0 1f 00 0b 	mcall	80002050 <board_init+0x48>
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
8000202a:	31 4c       	mov	r12,20
8000202c:	f0 1f 00 0a 	mcall	80002054 <board_init+0x4c>

	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002030:	30 3b       	mov	r11,3
80002032:	31 1c       	mov	r12,17
80002034:	f0 1f 00 04 	mcall	80002044 <board_init+0x3c>
	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002038:	30 3b       	mov	r11,3
8000203a:	31 3c       	mov	r12,19
8000203c:	f0 1f 00 02 	mcall	80002044 <board_init+0x3c>
#endif

}
80002040:	d8 02       	popm	pc
80002042:	00 00       	add	r0,r0
80002044:	80 00       	ld.sh	r0,r0[0x0]
80002046:	21 5c       	sub	r12,21
80002048:	00 00       	add	r0,r0
8000204a:	00 08       	add	r8,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	21 2c       	sub	r12,18
80002050:	80 00       	ld.sh	r0,r0[0x0]
80002052:	22 40       	sub	r0,36
80002054:	80 00       	ld.sh	r0,r0[0x0]
80002056:	22 9c       	sub	r12,41

80002058 <LED_Toggle>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002058:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
8000205c:	49 08       	lddpc	r8,8000209c <LED_Toggle+0x44>
8000205e:	70 09       	ld.w	r9,r8[0x0]
80002060:	f9 e9 20 09 	eor	r9,r12,r9
80002064:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002066:	58 0c       	cp.w	r12,0
80002068:	5e 0c       	reteq	r12
8000206a:	48 e8       	lddpc	r8,800020a0 <LED_Toggle+0x48>
8000206c:	20 88       	sub	r8,8
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
8000206e:	18 9a       	mov	r10,r12
80002070:	5c 9a       	brev	r10
80002072:	f4 0a 12 00 	clz	r10,r10
80002076:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002078:	f0 0a 00 38 	add	r8,r8,r10<<0x3
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000207c:	70 09       	ld.w	r9,r8[0x0]
8000207e:	a9 69       	lsl	r9,0x8
80002080:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
80002084:	70 1b       	ld.w	r11,r8[0x4]
80002086:	f3 4b 00 5c 	st.w	r9[92],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000208a:	70 1b       	ld.w	r11,r8[0x4]
8000208c:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002090:	70 1b       	ld.w	r11,r8[0x4]
80002092:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002094:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002098:	ce b1       	brne	8000206e <LED_Toggle+0x16>
8000209a:	5e fc       	retal	r12
8000209c:	00 00       	add	r0,r0
8000209e:	00 28       	rsub	r8,r0
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	64 00       	ld.w	r0,r2[0x0]

800020a4 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800020a4:	fe 68 14 00 	mov	r8,-125952
800020a8:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800020aa:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800020ae:	91 09       	st.w	r8[0x0],r9
}
800020b0:	5e fc       	retal	r12
800020b2:	d7 03       	nop

800020b4 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800020b4:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800020b6:	e0 68 50 ff 	mov	r8,20735
800020ba:	ea 18 02 25 	orh	r8,0x225
800020be:	10 3c       	cp.w	r12,r8
800020c0:	e0 88 00 06 	brls	800020cc <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800020c4:	30 1c       	mov	r12,1
800020c6:	f0 1f 00 04 	mcall	800020d4 <flashc_set_bus_freq+0x20>
800020ca:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800020cc:	30 0c       	mov	r12,0
800020ce:	f0 1f 00 02 	mcall	800020d4 <flashc_set_bus_freq+0x20>
800020d2:	d8 02       	popm	pc
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	20 a4       	sub	r4,10

800020d8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d8:	f8 08 16 05 	lsr	r8,r12,0x5
800020dc:	a9 68       	lsl	r8,0x8
800020de:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800020e2:	58 1b       	cp.w	r11,1
800020e4:	c0 d0       	breq	800020fe <gpio_enable_module_pin+0x26>
800020e6:	c0 63       	brcs	800020f2 <gpio_enable_module_pin+0x1a>
800020e8:	58 2b       	cp.w	r11,2
800020ea:	c1 00       	breq	8000210a <gpio_enable_module_pin+0x32>
800020ec:	58 3b       	cp.w	r11,3
800020ee:	c1 40       	breq	80002116 <gpio_enable_module_pin+0x3e>
800020f0:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020f2:	30 19       	mov	r9,1
800020f4:	f2 0c 09 49 	lsl	r9,r9,r12
800020f8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020fa:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800020fc:	c1 28       	rjmp	80002120 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020fe:	30 19       	mov	r9,1
80002100:	f2 0c 09 49 	lsl	r9,r9,r12
80002104:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002106:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002108:	c0 c8       	rjmp	80002120 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000210a:	30 19       	mov	r9,1
8000210c:	f2 0c 09 49 	lsl	r9,r9,r12
80002110:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002112:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002114:	c0 68       	rjmp	80002120 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002116:	30 19       	mov	r9,1
80002118:	f2 0c 09 49 	lsl	r9,r9,r12
8000211c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000211e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 4c 	lsl	r12,r9,r12
80002126:	91 2c       	st.w	r8[0x8],r12
80002128:	5e fd       	retal	0
8000212a:	d7 03       	nop

8000212c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000212c:	d4 21       	pushm	r4-r7,lr
8000212e:	18 97       	mov	r7,r12
80002130:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002132:	58 0b       	cp.w	r11,0
80002134:	c0 31       	brne	8000213a <gpio_enable_module+0xe>
80002136:	30 05       	mov	r5,0
80002138:	c0 d8       	rjmp	80002152 <gpio_enable_module+0x26>
8000213a:	30 06       	mov	r6,0
8000213c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000213e:	6e 1b       	ld.w	r11,r7[0x4]
80002140:	6e 0c       	ld.w	r12,r7[0x0]
80002142:	f0 1f 00 06 	mcall	80002158 <gpio_enable_module+0x2c>
80002146:	18 45       	or	r5,r12
		gpiomap++;
80002148:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000214a:	2f f6       	sub	r6,-1
8000214c:	0c 34       	cp.w	r4,r6
8000214e:	fe 9b ff f8 	brhi	8000213e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002152:	0a 9c       	mov	r12,r5
80002154:	d8 22       	popm	r4-r7,pc
80002156:	00 00       	add	r0,r0
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	20 d8       	sub	r8,13

8000215c <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000215c:	f8 08 16 05 	lsr	r8,r12,0x5
80002160:	a9 68       	lsl	r8,0x8
80002162:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002166:	16 99       	mov	r9,r11
80002168:	e2 19 00 04 	andl	r9,0x4,COH
8000216c:	c0 70       	breq	8000217a <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
8000216e:	30 19       	mov	r9,1
80002170:	f2 0c 09 49 	lsl	r9,r9,r12
80002174:	f1 49 00 74 	st.w	r8[116],r9
80002178:	c0 68       	rjmp	80002184 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
8000217a:	30 19       	mov	r9,1
8000217c:	f2 0c 09 49 	lsl	r9,r9,r12
80002180:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002184:	16 99       	mov	r9,r11
80002186:	e2 19 00 80 	andl	r9,0x80,COH
8000218a:	c2 40       	breq	800021d2 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
8000218c:	16 99       	mov	r9,r11
8000218e:	e2 19 01 80 	andl	r9,0x180,COH
80002192:	c0 90       	breq	800021a4 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002194:	30 19       	mov	r9,1
80002196:	f2 0c 09 49 	lsl	r9,r9,r12
8000219a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000219e:	f1 49 00 b8 	st.w	r8[184],r9
800021a2:	c1 88       	rjmp	800021d2 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800021a4:	16 99       	mov	r9,r11
800021a6:	e2 19 02 80 	andl	r9,0x280,COH
800021aa:	c0 90       	breq	800021bc <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800021ac:	30 19       	mov	r9,1
800021ae:	f2 0c 09 49 	lsl	r9,r9,r12
800021b2:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800021b6:	f1 49 00 b8 	st.w	r8[184],r9
800021ba:	c0 c8       	rjmp	800021d2 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
800021bc:	16 99       	mov	r9,r11
800021be:	e2 19 03 80 	andl	r9,0x380,COH
800021c2:	c0 80       	breq	800021d2 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800021c4:	30 19       	mov	r9,1
800021c6:	f2 0c 09 49 	lsl	r9,r9,r12
800021ca:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800021ce:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800021d2:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021d6:	c1 50       	breq	80002200 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800021d8:	e2 1b 00 02 	andl	r11,0x2,COH
800021dc:	c0 70       	breq	800021ea <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800021de:	30 19       	mov	r9,1
800021e0:	f2 0c 09 49 	lsl	r9,r9,r12
800021e4:	f1 49 00 54 	st.w	r8[84],r9
800021e8:	c0 68       	rjmp	800021f4 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800021ea:	30 19       	mov	r9,1
800021ec:	f2 0c 09 49 	lsl	r9,r9,r12
800021f0:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800021f4:	30 19       	mov	r9,1
800021f6:	f2 0c 09 49 	lsl	r9,r9,r12
800021fa:	f1 49 00 44 	st.w	r8[68],r9
800021fe:	c0 68       	rjmp	8000220a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002200:	30 19       	mov	r9,1
80002202:	f2 0c 09 49 	lsl	r9,r9,r12
80002206:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000220a:	30 19       	mov	r9,1
8000220c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002210:	91 1c       	st.w	r8[0x4],r12
}
80002212:	5e fc       	retal	r12

80002214 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002214:	f8 08 16 05 	lsr	r8,r12,0x5
80002218:	a9 68       	lsl	r8,0x8
8000221a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000221e:	30 19       	mov	r9,1
80002220:	f2 0c 09 4c 	lsl	r12,r9,r12
80002224:	f1 4c 00 54 	st.w	r8[84],r12
}
80002228:	5e fc       	retal	r12

8000222a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000222a:	f8 08 16 05 	lsr	r8,r12,0x5
8000222e:	a9 68       	lsl	r8,0x8
80002230:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002234:	30 19       	mov	r9,1
80002236:	f2 0c 09 4c 	lsl	r12,r9,r12
8000223a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000223e:	5e fc       	retal	r12

80002240 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002240:	f8 08 16 05 	lsr	r8,r12,0x5
80002244:	a9 68       	lsl	r8,0x8
80002246:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000224a:	30 19       	mov	r9,1
8000224c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002250:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80002254:	12 3b       	cp.w	r11,r9
80002256:	c0 a0       	breq	8000226a <gpio_enable_pin_interrupt+0x2a>
80002258:	c0 43       	brcs	80002260 <gpio_enable_pin_interrupt+0x20>
8000225a:	58 2b       	cp.w	r11,2
8000225c:	c1 11       	brne	8000227e <gpio_enable_pin_interrupt+0x3e>
8000225e:	c0 b8       	rjmp	80002274 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002260:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002264:	f1 4c 00 b8 	st.w	r8[184],r12
80002268:	c0 c8       	rjmp	80002280 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
8000226a:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000226e:	f1 4c 00 b8 	st.w	r8[184],r12
80002272:	c0 78       	rjmp	80002280 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002274:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
80002278:	f1 4c 00 b4 	st.w	r8[180],r12
8000227c:	c0 28       	rjmp	80002280 <gpio_enable_pin_interrupt+0x40>
8000227e:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002280:	f1 4c 00 94 	st.w	r8[148],r12
80002284:	5e fd       	retal	0

80002286 <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002286:	f8 08 16 05 	lsr	r8,r12,0x5
8000228a:	a9 68       	lsl	r8,0x8
8000228c:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->ierc = 1 << (pin & 0x1F);
80002290:	30 19       	mov	r9,1
80002292:	f2 0c 09 4c 	lsl	r12,r9,r12
80002296:	f1 4c 00 98 	st.w	r8[152],r12
}
8000229a:	5e fc       	retal	r12

8000229c <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000229c:	f8 08 16 05 	lsr	r8,r12,0x5
800022a0:	a9 68       	lsl	r8,0x8
800022a2:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800022a6:	30 19       	mov	r9,1
800022a8:	f2 0c 09 4c 	lsl	r12,r9,r12
800022ac:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
800022b0:	5e fc       	retal	r12

800022b2 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800022b2:	c0 08       	rjmp	800022b2 <_unhandled_interrupt>

800022b4 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800022b4:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800022b8:	49 99       	lddpc	r9,8000231c <INTC_register_interrupt+0x68>
800022ba:	f2 08 00 39 	add	r9,r9,r8<<0x3
800022be:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800022c2:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800022c4:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800022c8:	58 0a       	cp.w	r10,0
800022ca:	c0 91       	brne	800022dc <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800022cc:	49 59       	lddpc	r9,80002320 <INTC_register_interrupt+0x6c>
800022ce:	49 6a       	lddpc	r10,80002324 <INTC_register_interrupt+0x70>
800022d0:	12 1a       	sub	r10,r9
800022d2:	fe 79 08 00 	mov	r9,-63488
800022d6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800022da:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800022dc:	58 1a       	cp.w	r10,1
800022de:	c0 a1       	brne	800022f2 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800022e0:	49 09       	lddpc	r9,80002320 <INTC_register_interrupt+0x6c>
800022e2:	49 2a       	lddpc	r10,80002328 <INTC_register_interrupt+0x74>
800022e4:	12 1a       	sub	r10,r9
800022e6:	bf aa       	sbr	r10,0x1e
800022e8:	fe 79 08 00 	mov	r9,-63488
800022ec:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800022f0:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800022f2:	58 2a       	cp.w	r10,2
800022f4:	c0 a1       	brne	80002308 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800022f6:	48 b9       	lddpc	r9,80002320 <INTC_register_interrupt+0x6c>
800022f8:	48 da       	lddpc	r10,8000232c <INTC_register_interrupt+0x78>
800022fa:	12 1a       	sub	r10,r9
800022fc:	bf ba       	sbr	r10,0x1f
800022fe:	fe 79 08 00 	mov	r9,-63488
80002302:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002306:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002308:	48 69       	lddpc	r9,80002320 <INTC_register_interrupt+0x6c>
8000230a:	48 aa       	lddpc	r10,80002330 <INTC_register_interrupt+0x7c>
8000230c:	12 1a       	sub	r10,r9
8000230e:	ea 1a c0 00 	orh	r10,0xc000
80002312:	fe 79 08 00 	mov	r9,-63488
80002316:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000231a:	5e fc       	retal	r12
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	64 10       	ld.w	r0,r2[0x4]
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	62 00       	ld.w	r0,r1[0x0]
80002324:	80 00       	ld.sh	r0,r0[0x0]
80002326:	63 04       	ld.w	r4,r1[0x40]
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	63 12       	ld.w	r2,r1[0x44]
8000232c:	80 00       	ld.sh	r0,r0[0x0]
8000232e:	63 20       	ld.w	r0,r1[0x48]
80002330:	80 00       	ld.sh	r0,r0[0x0]
80002332:	63 2e       	ld.w	lr,r1[0x48]

80002334 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002334:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002336:	49 18       	lddpc	r8,80002378 <INTC_init_interrupts+0x44>
80002338:	e3 b8 00 01 	mtsr	0x4,r8
8000233c:	49 0e       	lddpc	lr,8000237c <INTC_init_interrupts+0x48>
8000233e:	30 07       	mov	r7,0
80002340:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002342:	49 0c       	lddpc	r12,80002380 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002344:	49 05       	lddpc	r5,80002384 <INTC_init_interrupts+0x50>
80002346:	10 15       	sub	r5,r8
80002348:	fe 76 08 00 	mov	r6,-63488
8000234c:	c1 08       	rjmp	8000236c <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000234e:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002350:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002352:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002354:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002358:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000235a:	10 3a       	cp.w	r10,r8
8000235c:	fe 9b ff fc 	brhi	80002354 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002360:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002364:	2f f7       	sub	r7,-1
80002366:	2f 8e       	sub	lr,-8
80002368:	59 e7       	cp.w	r7,30
8000236a:	c0 50       	breq	80002374 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000236c:	7c 08       	ld.w	r8,lr[0x0]
8000236e:	58 08       	cp.w	r8,0
80002370:	ce f1       	brne	8000234e <INTC_init_interrupts+0x1a>
80002372:	cf 7b       	rjmp	80002360 <INTC_init_interrupts+0x2c>
80002374:	d8 22       	popm	r4-r7,pc
80002376:	00 00       	add	r0,r0
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	62 00       	ld.w	r0,r1[0x0]
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	64 10       	ld.w	r0,r2[0x4]
80002380:	80 00       	ld.sh	r0,r0[0x0]
80002382:	22 b2       	sub	r2,43
80002384:	80 00       	ld.sh	r0,r0[0x0]
80002386:	63 04       	ld.w	r4,r1[0x40]

80002388 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002388:	fe 78 08 00 	mov	r8,-63488
8000238c:	e0 69 00 83 	mov	r9,131
80002390:	f2 0c 01 0c 	sub	r12,r9,r12
80002394:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002398:	f2 ca ff c0 	sub	r10,r9,-64
8000239c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800023a0:	58 08       	cp.w	r8,0
800023a2:	c0 21       	brne	800023a6 <_get_interrupt_handler+0x1e>
800023a4:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800023a6:	f0 08 12 00 	clz	r8,r8
800023aa:	48 5a       	lddpc	r10,800023bc <_get_interrupt_handler+0x34>
800023ac:	f4 09 00 39 	add	r9,r10,r9<<0x3
800023b0:	f0 08 11 1f 	rsub	r8,r8,31
800023b4:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800023b6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800023ba:	5e fc       	retal	r12
800023bc:	80 00       	ld.sh	r0,r0[0x0]
800023be:	64 10       	ld.w	r0,r2[0x4]

800023c0 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800023c0:	f8 c8 00 01 	sub	r8,r12,1
800023c4:	f0 0b 00 0b 	add	r11,r8,r11
800023c8:	f6 0c 0d 0a 	divu	r10,r11,r12
800023cc:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800023ce:	f4 c8 00 01 	sub	r8,r10,1
800023d2:	e0 48 00 fe 	cp.w	r8,254
800023d6:	e0 88 00 03 	brls	800023dc <getBaudDiv+0x1c>
800023da:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800023dc:	5c 8c       	casts.h	r12
}
800023de:	5e fc       	retal	r12

800023e0 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800023e0:	78 18       	ld.w	r8,r12[0x4]
800023e2:	ea 18 00 0f 	orh	r8,0xf
800023e6:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800023e8:	78 18       	ld.w	r8,r12[0x4]
800023ea:	e2 18 00 04 	andl	r8,0x4,COH
800023ee:	c0 f0       	breq	8000240c <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800023f0:	30 e8       	mov	r8,14
800023f2:	f0 0b 18 00 	cp.b	r11,r8
800023f6:	e0 8b 00 19 	brhi	80002428 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800023fa:	78 18       	ld.w	r8,r12[0x4]
800023fc:	b1 6b       	lsl	r11,0x10
800023fe:	ea 1b ff f0 	orh	r11,0xfff0
80002402:	e8 1b ff ff 	orl	r11,0xffff
80002406:	10 6b       	and	r11,r8
80002408:	99 1b       	st.w	r12[0x4],r11
8000240a:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000240c:	30 38       	mov	r8,3
8000240e:	f0 0b 18 00 	cp.b	r11,r8
80002412:	e0 8b 00 0b 	brhi	80002428 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002416:	78 18       	ld.w	r8,r12[0x4]
80002418:	2f 0b       	sub	r11,-16
8000241a:	30 19       	mov	r9,1
8000241c:	f2 0b 09 4b 	lsl	r11,r9,r11
80002420:	5c db       	com	r11
80002422:	10 6b       	and	r11,r8
80002424:	99 1b       	st.w	r12[0x4],r11
80002426:	5e fd       	retal	0
80002428:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000242a:	5e fc       	retal	r12

8000242c <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000242c:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002430:	c0 58       	rjmp	8000243a <spi_unselectChip+0xe>
		if (!timeout--) {
80002432:	58 08       	cp.w	r8,0
80002434:	c0 21       	brne	80002438 <spi_unselectChip+0xc>
80002436:	5e ff       	retal	1
80002438:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000243a:	78 49       	ld.w	r9,r12[0x10]
8000243c:	e2 19 02 00 	andl	r9,0x200,COH
80002440:	cf 90       	breq	80002432 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002442:	78 18       	ld.w	r8,r12[0x4]
80002444:	ea 18 00 0f 	orh	r8,0xf
80002448:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000244a:	fc 18 01 00 	movh	r8,0x100
8000244e:	99 08       	st.w	r12[0x0],r8
80002450:	5e fd       	retal	0

80002452 <spi_enable>:
	return SPI_OK;
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002452:	30 18       	mov	r8,1
80002454:	99 08       	st.w	r12[0x0],r8
}
80002456:	5e fc       	retal	r12

80002458 <udd_detach>:
}


void udd_detach(void)
{
	otg_unfreeze_clock();
80002458:	fe 68 08 00 	mov	r8,-129024
8000245c:	70 09       	ld.w	r9,r8[0x0]
8000245e:	af c9       	cbr	r9,0xe
80002460:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80002462:	fe 69 00 00 	mov	r9,-131072
80002466:	72 0a       	ld.w	r10,r9[0x0]
80002468:	a9 aa       	sbr	r10,0x8
8000246a:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
8000246c:	70 09       	ld.w	r9,r8[0x0]
8000246e:	af a9       	sbr	r9,0xe
80002470:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
}
80002472:	5e fc       	retal	r12

80002474 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
80002474:	fe 68 08 04 	mov	r8,-129020
80002478:	70 08       	ld.w	r8,r8[0x0]
8000247a:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
#else
	return false;
#endif
}
8000247e:	5f 1c       	srne	r12
80002480:	5e fc       	retal	r12

80002482 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80002482:	fe 68 00 00 	mov	r8,-131072
80002486:	70 09       	ld.w	r9,r8[0x0]
80002488:	a7 d9       	cbr	r9,0x7
8000248a:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000248c:	70 09       	ld.w	r9,r8[0x0]
8000248e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002492:	e0 19 ff 80 	andl	r9,0xff80
80002496:	f9 e9 10 09 	or	r9,r12,r9
8000249a:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000249c:	70 09       	ld.w	r9,r8[0x0]
8000249e:	a7 b9       	sbr	r9,0x7
800024a0:	91 09       	st.w	r8[0x0],r9
}
800024a2:	5e fc       	retal	r12

800024a4 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800024a4:	fe 68 00 00 	mov	r8,-131072
800024a8:	70 0c       	ld.w	r12,r8[0x0]
}
800024aa:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800024ae:	5e fc       	retal	r12

800024b0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800024b0:	fe 68 00 20 	mov	r8,-131040
800024b4:	70 0c       	ld.w	r12,r8[0x0]
}
800024b6:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800024ba:	5e fc       	retal	r12

800024bc <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800024bc:	fe 68 00 00 	mov	r8,-131072
800024c0:	70 8c       	ld.w	r12,r8[0x20]
}
800024c2:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800024c6:	5e fc       	retal	r12

800024c8 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800024c8:	48 28       	lddpc	r8,800024d0 <udd_set_setup_payload+0x8>
800024ca:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800024cc:	b0 6b       	st.h	r8[0xc],r11
}
800024ce:	5e fc       	retal	r12
800024d0:	00 00       	add	r0,r0
800024d2:	12 04       	add	r4,r9

800024d4 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800024d4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800024d8:	a3 68       	lsl	r8,0x2
800024da:	e0 38 fe 40 	sub	r8,130624
800024de:	70 0c       	ld.w	r12,r8[0x0]
}
800024e0:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
800024e4:	5e fc       	retal	r12
800024e6:	d7 03       	nop

800024e8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
800024e8:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
800024ea:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
800024ee:	30 39       	mov	r9,3
800024f0:	f2 08 18 00 	cp.b	r8,r9
800024f4:	e0 8b 00 49 	brhi	80002586 <udd_ep_set_halt+0x9e>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
800024f8:	f0 09 15 02 	lsl	r9,r8,0x2
800024fc:	fe 6e 01 c0 	mov	lr,-130624
80002500:	f2 0e 00 0a 	add	r10,r9,lr
80002504:	74 0a       	ld.w	r10,r10[0x0]
80002506:	e6 1a 00 08 	andh	r10,0x8,COH
8000250a:	c3 f1       	brne	80002588 <udd_ep_set_halt+0xa0>

	if (USB_DEVICE_MAX_EP < index) {
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
8000250c:	f0 ca 00 01 	sub	r10,r8,1
80002510:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80002514:	49 eb       	lddpc	r11,8000258c <udd_ep_set_halt+0xa4>
80002516:	f6 0a 00 2a 	add	r10,r11,r10<<0x2

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
8000251a:	74 0b       	ld.w	r11,r10[0x0]
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000251c:	16 9e       	mov	lr,r11
8000251e:	e6 1e 20 00 	andh	lr,0x2000,COH
80002522:	c3 31       	brne	80002588 <udd_ep_set_halt+0xa0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
80002524:	58 0b       	cp.w	r11,0
80002526:	c3 05       	brlt	80002586 <udd_ep_set_halt+0x9e>
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80002528:	30 0b       	mov	r11,0
8000252a:	f6 0c 18 00 	cp.b	r12,r11
8000252e:	c1 94       	brge	80002560 <udd_ep_set_halt+0x78>
80002530:	fe 6c 01 30 	mov	r12,-130768
80002534:	f2 0c 00 0b 	add	r11,r9,r12
80002538:	76 0b       	ld.w	r11,r11[0x0]
8000253a:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
8000253e:	c1 10       	breq	80002560 <udd_ep_set_halt+0x78>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80002540:	74 0b       	ld.w	r11,r10[0x0]
80002542:	30 1c       	mov	r12,1
80002544:	f7 dc d3 a1 	bfins	r11,r12,0x1d,0x1
80002548:	95 0b       	st.w	r10[0x0],r11
			udd_enable_bank_interrupt(index);
8000254a:	e0 39 fe 10 	sub	r9,130576
8000254e:	e0 6a 10 00 	mov	r10,4096
80002552:	93 0a       	st.w	r9[0x0],r10
			udd_enable_endpoint_interrupt(index);
80002554:	f4 08 09 48 	lsl	r8,r10,r8
80002558:	fe 69 00 00 	mov	r9,-131072
8000255c:	93 68       	st.w	r9[0x18],r8
			return true;
8000255e:	d8 02       	popm	pc
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80002560:	fe 6a 01 00 	mov	r10,-130816
80002564:	f2 0a 00 08 	add	r8,r9,r10
80002568:	70 0a       	ld.w	r10,r8[0x0]
8000256a:	a9 da       	cbr	r10,0x9
8000256c:	91 0a       	st.w	r8[0x0],r10
	udd_ack_stall(index);
8000256e:	fe 6e 01 60 	mov	lr,-130720
80002572:	f2 0e 00 08 	add	r8,r9,lr
80002576:	34 0a       	mov	r10,64
80002578:	91 0a       	st.w	r8[0x0],r10
	udd_enable_stall_handshake(index);
8000257a:	e0 39 fe 10 	sub	r9,130576
8000257e:	e8 68 00 00 	mov	r8,524288
80002582:	93 08       	st.w	r9[0x0],r8
80002584:	da 0a       	popm	pc,r12=1
	return true;
80002586:	d8 0a       	popm	pc,r12=0
80002588:	da 0a       	popm	pc,r12=1
8000258a:	00 00       	add	r0,r0
8000258c:	00 00       	add	r0,r0
8000258e:	07 84       	ld.ub	r4,r3[0x0]

80002590 <udd_ep_clear_halt>:
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002590:	d4 01       	pushm	lr
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002592:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002596:	30 38       	mov	r8,3
80002598:	f0 0c 18 00 	cp.b	r12,r8
8000259c:	e0 88 00 03 	brls	800025a2 <udd_ep_clear_halt+0x12>
800025a0:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
800025a2:	18 99       	mov	r9,r12
800025a4:	f8 c8 00 01 	sub	r8,r12,1
800025a8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800025ac:	4a aa       	lddpc	r10,80002654 <udd_ep_clear_halt+0xc4>
800025ae:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (ptr_job->stall_requested) {
800025b2:	70 0a       	ld.w	r10,r8[0x0]
800025b4:	e6 1a 20 00 	andh	r10,0x2000,COH
800025b8:	c0 31       	brne	800025be <udd_ep_clear_halt+0x2e>
800025ba:	30 0b       	mov	r11,0
800025bc:	c1 38       	rjmp	800025e2 <udd_ep_clear_halt+0x52>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
800025be:	70 0a       	ld.w	r10,r8[0x0]
800025c0:	30 0b       	mov	r11,0
800025c2:	f5 db d3 a1 	bfins	r10,r11,0x1d,0x1
800025c6:	91 0a       	st.w	r8[0x0],r10
		udd_disable_bank_interrupt(ep);
800025c8:	f8 0b 15 02 	lsl	r11,r12,0x2
800025cc:	e0 3b fd e0 	sub	r11,130528
800025d0:	e0 6a 10 00 	mov	r10,4096
800025d4:	97 0a       	st.w	r11[0x0],r10
		udd_disable_endpoint_interrupt(ep);
800025d6:	f4 0c 09 4c 	lsl	r12,r10,r12
800025da:	fe 6b 00 00 	mov	r11,-131072
800025de:	97 5c       	st.w	r11[0x14],r12
800025e0:	30 1b       	mov	r11,1
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
800025e2:	a3 69       	lsl	r9,0x2
800025e4:	fe 6c 01 c0 	mov	r12,-130624
800025e8:	f2 0c 00 0a 	add	r10,r9,r12
800025ec:	74 0a       	ld.w	r10,r10[0x0]
800025ee:	e6 1a 00 08 	andh	r10,0x8,COH
800025f2:	c2 30       	breq	80002638 <udd_ep_clear_halt+0xa8>
		if (Is_udd_stall(ep)) {
800025f4:	fe 6b 01 30 	mov	r11,-130768
800025f8:	f2 0b 00 0a 	add	r10,r9,r11
800025fc:	74 0a       	ld.w	r10,r10[0x0]
800025fe:	e2 1a 00 40 	andl	r10,0x40,COH
80002602:	c0 e0       	breq	8000261e <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep);
80002604:	fe 6c 01 60 	mov	r12,-130720
80002608:	f2 0c 00 0a 	add	r10,r9,r12
8000260c:	34 0b       	mov	r11,64
8000260e:	95 0b       	st.w	r10[0x0],r11
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80002610:	fe 6b 01 f0 	mov	r11,-130576
80002614:	f2 0b 00 0a 	add	r10,r9,r11
80002618:	e4 6b 00 00 	mov	r11,262144
8000261c:	95 0b       	st.w	r10[0x0],r11
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000261e:	fe 6c 02 20 	mov	r12,-130528
80002622:	f2 0c 00 0a 	add	r10,r9,r12
80002626:	e8 6b 00 00 	mov	r11,524288
8000262a:	95 0b       	st.w	r10[0x0],r11
		udd_enable_endpoint_bank_autoswitch(ep);
8000262c:	e0 39 ff 00 	sub	r9,130816
80002630:	72 0a       	ld.w	r10,r9[0x0]
80002632:	a9 ba       	sbr	r10,0x9
80002634:	93 0a       	st.w	r9[0x0],r10
80002636:	c0 38       	rjmp	8000263c <udd_ep_clear_halt+0xac>
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
80002638:	58 0b       	cp.w	r11,0
8000263a:	c0 b0       	breq	80002650 <udd_ep_clear_halt+0xc0>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000263c:	70 09       	ld.w	r9,r8[0x0]
8000263e:	58 09       	cp.w	r9,0
80002640:	c0 84       	brge	80002650 <udd_ep_clear_halt+0xc0>
			ptr_job->busy = false;
80002642:	30 0a       	mov	r10,0
80002644:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80002648:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
8000264a:	70 48       	ld.w	r8,r8[0x10]
8000264c:	5d 18       	icall	r8
8000264e:	da 0a       	popm	pc,r12=1
80002650:	da 0a       	popm	pc,r12=1
80002652:	00 00       	add	r0,r0
80002654:	00 00       	add	r0,r0
80002656:	07 84       	ld.ub	r4,r3[0x0]

80002658 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
80002658:	fe 68 00 00 	mov	r8,-131072
8000265c:	70 09       	ld.w	r9,r8[0x0]
8000265e:	e0 19 f3 ff 	andl	r9,0xf3ff
80002662:	ab b9       	sbr	r9,0xb
80002664:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
80002666:	70 09       	ld.w	r9,r8[0x0]
80002668:	ad b9       	sbr	r9,0xd
8000266a:	91 09       	st.w	r8[0x0],r9
}
8000266c:	5e fc       	retal	r12

8000266e <udd_test_mode_k>:


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
8000266e:	fe 68 00 00 	mov	r8,-131072
80002672:	70 09       	ld.w	r9,r8[0x0]
80002674:	e0 19 f3 ff 	andl	r9,0xf3ff
80002678:	ab b9       	sbr	r9,0xb
8000267a:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
8000267c:	70 09       	ld.w	r9,r8[0x0]
8000267e:	af a9       	sbr	r9,0xe
80002680:	91 09       	st.w	r8[0x0],r9
}
80002682:	5e fc       	retal	r12

80002684 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
80002684:	fe 68 00 00 	mov	r8,-131072
80002688:	70 09       	ld.w	r9,r8[0x0]
8000268a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000268e:	ab b9       	sbr	r9,0xb
80002690:	91 09       	st.w	r8[0x0],r9
}
80002692:	5e fc       	retal	r12

80002694 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002694:	30 59       	mov	r9,5
80002696:	48 58       	lddpc	r8,800026a8 <udd_ctrl_stall_data+0x14>
80002698:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000269a:	e8 69 00 00 	mov	r9,524288
8000269e:	fe 68 01 f0 	mov	r8,-130576
800026a2:	91 09       	st.w	r8[0x0],r9
}
800026a4:	5e fc       	retal	r12
800026a6:	00 00       	add	r0,r0
800026a8:	00 00       	add	r0,r0
800026aa:	07 c4       	ld.ub	r4,r3[0x4]

800026ac <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
800026ac:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
800026ae:	48 48       	lddpc	r8,800026bc <udd_ctrl_endofrequest+0x10>
800026b0:	70 48       	ld.w	r8,r8[0x10]
800026b2:	58 08       	cp.w	r8,0
800026b4:	c0 20       	breq	800026b8 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
800026b6:	5d 18       	icall	r8
800026b8:	d8 02       	popm	pc
800026ba:	00 00       	add	r0,r0
800026bc:	00 00       	add	r0,r0
800026be:	12 04       	add	r4,r9

800026c0 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
800026c0:	d4 01       	pushm	lr
800026c2:	16 99       	mov	r9,r11
	if (ptr_job->busy == false) {
800026c4:	78 08       	ld.w	r8,r12[0x0]
800026c6:	58 08       	cp.w	r8,0
800026c8:	c1 84       	brge	800026f8 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
800026ca:	30 0b       	mov	r11,0
800026cc:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
800026d0:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans) {
800026d2:	78 48       	ld.w	r8,r12[0x10]
800026d4:	58 08       	cp.w	r8,0
800026d6:	c1 10       	breq	800026f8 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
800026d8:	f4 0b 15 02 	lsl	r11,r10,0x2
800026dc:	e0 3b ff 00 	sub	r11,130816
800026e0:	76 0b       	ld.w	r11,r11[0x0]
800026e2:	e2 1b 01 00 	andl	r11,0x100,COH
800026e6:	c0 60       	breq	800026f2 <udd_ep_finish_job+0x32>
		ep_num |= USB_EP_DIR_IN;
800026e8:	ea 1a ff ff 	orh	r10,0xffff
800026ec:	e8 1a ff 80 	orl	r10,0xff80
800026f0:	5c 5a       	castu.b	r10
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800026f2:	78 2b       	ld.w	r11,r12[0x8]
800026f4:	12 9c       	mov	r12,r9
800026f6:	5d 18       	icall	r8
800026f8:	d8 02       	popm	pc
800026fa:	d7 03       	nop

800026fc <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
800026fc:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
800026fe:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80002702:	f4 cc 00 01 	sub	r12,r10,1
80002706:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000270a:	30 1b       	mov	r11,1
8000270c:	48 38       	lddpc	r8,80002718 <udd_ep_abort_job+0x1c>
8000270e:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80002712:	f0 1f 00 03 	mcall	8000271c <udd_ep_abort_job+0x20>
}
80002716:	d8 02       	popm	pc
80002718:	00 00       	add	r0,r0
8000271a:	07 84       	ld.ub	r4,r3[0x0]
8000271c:	80 00       	ld.sh	r0,r0[0x0]
8000271e:	26 c0       	sub	r0,108

80002720 <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
80002720:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002722:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
80002726:	f2 c8 00 01 	sub	r8,r9,1
8000272a:	fc 1a 02 00 	movh	r10,0x200
8000272e:	f4 08 09 4a 	lsl	r10,r10,r8
80002732:	fe 68 00 00 	mov	r8,-131072
80002736:	91 5a       	st.w	r8[0x14],r10
	udd_endpoint_dma_set_control(index, 0);
80002738:	f2 0a 15 04 	lsl	r10,r9,0x4
8000273c:	e0 3a fd 00 	sub	r10,130304
80002740:	30 0b       	mov	r11,0
80002742:	95 2b       	st.w	r10[0x8],r11
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80002744:	e0 6a 10 00 	mov	r10,4096
80002748:	f4 09 09 4a 	lsl	r10,r10,r9
8000274c:	91 5a       	st.w	r8[0x14],r10
	while (udd_nb_busy_bank(index)) {
8000274e:	a3 69       	lsl	r9,0x2
80002750:	fe 68 01 30 	mov	r8,-130768
80002754:	f2 08 00 0a 	add	r10,r9,r8
		udd_kill_last_in_bank(index);
80002758:	fe 68 01 f0 	mov	r8,-130576
8000275c:	f2 08 00 0e 	add	lr,r9,r8
80002760:	e0 6b 20 00 	mov	r11,8192
		while(Is_udd_killing_last_in_bank(index));
80002764:	e0 39 fe 40 	sub	r9,130624
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80002768:	c0 68       	rjmp	80002774 <udd_ep_abort+0x54>
		udd_kill_last_in_bank(index);
8000276a:	9d 0b       	st.w	lr[0x0],r11
		while(Is_udd_killing_last_in_bank(index));
8000276c:	72 08       	ld.w	r8,r9[0x0]
8000276e:	e2 18 20 00 	andl	r8,0x2000,COH
80002772:	cf d1       	brne	8000276c <udd_ep_abort+0x4c>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80002774:	74 08       	ld.w	r8,r10[0x0]
80002776:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8000277a:	cf 81       	brne	8000276a <udd_ep_abort+0x4a>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000277c:	f0 1f 00 02 	mcall	80002784 <udd_ep_abort+0x64>
}
80002780:	d8 02       	popm	pc
80002782:	00 00       	add	r0,r0
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	26 fc       	sub	r12,111

80002788 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002788:	eb cd 40 80 	pushm	r7,lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000278c:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80002790:	30 38       	mov	r8,3
80002792:	f0 07 18 00 	cp.b	r7,r8
80002796:	e0 8b 00 1f 	brhi	800027d4 <udd_ep_free+0x4c>
		return;
	}
	udd_disable_endpoint(index);
8000279a:	fe 68 00 00 	mov	r8,-131072
8000279e:	70 7a       	ld.w	r10,r8[0x1c]
800027a0:	30 19       	mov	r9,1
800027a2:	f2 07 09 49 	lsl	r9,r9,r7
800027a6:	5c d9       	com	r9
800027a8:	14 69       	and	r9,r10
800027aa:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
800027ac:	ee 08 15 02 	lsl	r8,r7,0x2
800027b0:	e0 38 ff 00 	sub	r8,130816
800027b4:	70 09       	ld.w	r9,r8[0x0]
800027b6:	a1 d9       	cbr	r9,0x1
800027b8:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
800027ba:	f0 1f 00 08 	mcall	800027d8 <udd_ep_free+0x50>
	udd_ep_job[index - 1].stall_requested = false;
800027be:	20 17       	sub	r7,1
800027c0:	ee 07 00 27 	add	r7,r7,r7<<0x2
800027c4:	48 68       	lddpc	r8,800027dc <udd_ep_free+0x54>
800027c6:	f0 07 00 27 	add	r7,r8,r7<<0x2
800027ca:	6e 08       	ld.w	r8,r7[0x0]
800027cc:	30 09       	mov	r9,0
800027ce:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
800027d2:	8f 08       	st.w	r7[0x0],r8
800027d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	26 fc       	sub	r12,111
800027dc:	00 00       	add	r0,r0
800027de:	07 84       	ld.ub	r4,r3[0x0]

800027e0 <udd_test_mode_packet>:
	udd_enable_hs_test_mode();
}


void udd_test_mode_packet(void)
{
800027e0:	d4 01       	pushm	lr
800027e2:	20 ed       	sub	sp,56
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
800027e4:	4a f8       	lddpc	r8,800028a0 <udd_test_mode_packet+0xc0>
800027e6:	1a 99       	mov	r9,sp
800027e8:	f0 ea 00 00 	ld.d	r10,r8[0]
800027ec:	fa eb 00 00 	st.d	sp[0],r10
800027f0:	f0 ea 00 08 	ld.d	r10,r8[8]
800027f4:	fa eb 00 08 	st.d	sp[8],r10
800027f8:	f0 ea 00 10 	ld.d	r10,r8[16]
800027fc:	fa eb 00 10 	st.d	sp[16],r10
80002800:	f0 ea 00 18 	ld.d	r10,r8[24]
80002804:	fa eb 00 18 	st.d	sp[24],r10
80002808:	f0 ea 00 20 	ld.d	r10,r8[32]
8000280c:	fa eb 00 20 	st.d	sp[32],r10
80002810:	f0 ea 00 28 	ld.d	r10,r8[40]
80002814:	fa eb 00 28 	st.d	sp[40],r10
80002818:	70 ca       	ld.w	r10,r8[0x30]
8000281a:	50 ca       	stdsp	sp[0x30],r10
8000281c:	f1 38 00 34 	ld.ub	r8,r8[52]
80002820:	fb 68 00 34 	st.b	sp[52],r8

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
80002824:	fe 68 00 00 	mov	r8,-131072
80002828:	70 7a       	ld.w	r10,r8[0x1c]
8000282a:	a1 ca       	cbr	r10,0x0
8000282c:	91 7a       	st.w	r8[0x1c],r10
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000282e:	fe 6a 01 00 	mov	r10,-130816
80002832:	74 0c       	ld.w	r12,r10[0x0]
80002834:	30 8e       	mov	lr,8
80002836:	34 0b       	mov	r11,64
80002838:	f6 0e 0c 4b 	max	r11,r11,lr
8000283c:	e0 6e 04 00 	mov	lr,1024
80002840:	f6 0e 0d 4b 	min	r11,r11,lr
80002844:	a1 7b       	lsl	r11,0x1
80002846:	20 1b       	sub	r11,1
80002848:	f6 0b 12 00 	clz	r11,r11
8000284c:	e0 1c e6 83 	andl	r12,0xe683
80002850:	e8 1c 11 00 	orl	r12,0x1100
80002854:	f6 0b 11 1c 	rsub	r11,r11,28
80002858:	a5 6b       	lsl	r11,0x4
8000285a:	e2 1b 08 7c 	andl	r11,0x87c,COH
8000285e:	f9 eb 10 0b 	or	r11,r12,r11
80002862:	95 0b       	st.w	r10[0x0],r11
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
80002864:	74 0b       	ld.w	r11,r10[0x0]
80002866:	a1 bb       	sbr	r11,0x1
80002868:	95 0b       	st.w	r10[0x0],r11
	udd_enable_endpoint(0);
8000286a:	70 7a       	ld.w	r10,r8[0x1c]
8000286c:	a1 aa       	sbr	r10,0x0
8000286e:	91 7a       	st.w	r8[0x1c],r10

	udd_enable_hs_test_mode();
80002870:	70 0a       	ld.w	r10,r8[0x0]
80002872:	e0 1a f3 ff 	andl	r10,0xf3ff
80002876:	ab ba       	sbr	r10,0xb
80002878:	91 0a       	st.w	r8[0x0],r10
	udd_enable_hs_test_mode_packet();
8000287a:	70 0a       	ld.w	r10,r8[0x0]
8000287c:	af ba       	sbr	r10,0xf
8000287e:	91 0a       	st.w	r8[0x0],r10
80002880:	fc 18 e0 00 	movh	r8,0xe000
	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
		*ptr_dest++ = *ptr_src++;
80002884:	13 3a       	ld.ub	r10,r9++
80002886:	10 ca       	st.b	r8++,r10

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
80002888:	33 5a       	mov	r10,53
8000288a:	ea 1a e0 00 	orh	r10,0xe000
8000288e:	14 38       	cp.w	r8,r10
80002890:	cf a1       	brne	80002884 <udd_test_mode_packet+0xa4>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
80002892:	e0 69 40 00 	mov	r9,16384
80002896:	fe 68 02 20 	mov	r8,-130528
8000289a:	91 09       	st.w	r8[0x0],r9
}
8000289c:	2f 2d       	sub	sp,-56
8000289e:	d8 02       	popm	pc
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	65 00       	ld.w	r0,r2[0x40]

800028a4 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
800028a4:	eb cd 40 c0 	pushm	r6-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
800028a8:	18 99       	mov	r9,r12
800028aa:	f8 c8 00 01 	sub	r8,r12,1
800028ae:	f0 08 00 28 	add	r8,r8,r8<<0x2
800028b2:	4d 1a       	lddpc	r10,800029f4 <udd_ep_trans_done+0x150>
800028b4:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (!ptr_job->busy) {
800028b8:	70 0a       	ld.w	r10,r8[0x0]
800028ba:	58 0a       	cp.w	r10,0
800028bc:	e0 84 00 99 	brge	800029ee <udd_ep_trans_done+0x14a>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
800028c0:	70 3a       	ld.w	r10,r8[0xc]
800028c2:	70 2b       	ld.w	r11,r8[0x8]
800028c4:	16 3a       	cp.w	r10,r11
800028c6:	c6 10       	breq	80002988 <udd_ep_trans_done+0xe4>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
800028c8:	f6 0a 01 0a 	sub	r10,r11,r10

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
800028cc:	e0 5a 00 00 	cp.w	r10,65536
800028d0:	e0 88 00 06 	brls	800028dc <udd_ep_trans_done+0x38>
800028d4:	e0 7a 00 00 	mov	r10,65536
800028d8:	30 0e       	mov	lr,0
800028da:	c0 38       	rjmp	800028e0 <udd_ep_trans_done+0x3c>
			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
800028dc:	f4 0e 15 10 	lsl	lr,r10,0x10
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
800028e0:	f2 0b 15 02 	lsl	r11,r9,0x2
800028e4:	e0 3b ff 00 	sub	r11,130816
800028e8:	76 07       	ld.w	r7,r11[0x0]
800028ea:	e2 17 01 00 	andl	r7,0x100,COH
800028ee:	c1 20       	breq	80002912 <udd_ep_trans_done+0x6e>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
800028f0:	76 0b       	ld.w	r11,r11[0x0]
800028f2:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800028f6:	30 87       	mov	r7,8
800028f8:	ee 0b 09 4b 	lsl	r11,r7,r11
800028fc:	20 1b       	sub	r11,1
800028fe:	f5 eb 00 0b 	and	r11,r10,r11
80002902:	c1 80       	breq	80002932 <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80002904:	0e 4e       	or	lr,r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80002906:	70 0b       	ld.w	r11,r8[0x0]
80002908:	30 07       	mov	r7,0
8000290a:	f7 d7 d3 c1 	bfins	r11,r7,0x1e,0x1
8000290e:	91 0b       	st.w	r8[0x0],r11
80002910:	c1 18       	rjmp	80002932 <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80002912:	76 07       	ld.w	r7,r11[0x0]
80002914:	ef d7 c1 62 	bfextu	r7,r7,0xb,0x2
80002918:	58 17       	cp.w	r7,1
8000291a:	c0 a1       	brne	8000292e <udd_ep_trans_done+0x8a>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000291c:	76 0b       	ld.w	r11,r11[0x0]
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000291e:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80002922:	30 87       	mov	r7,8
80002924:	ee 0b 09 4b 	lsl	r11,r7,r11
80002928:	16 3a       	cp.w	r10,r11
8000292a:	e0 8b 00 04 	brhi	80002932 <udd_ep_trans_done+0x8e>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000292e:	e8 1e 00 14 	orl	lr,0x14
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80002932:	f2 0b 15 04 	lsl	r11,r9,0x4
80002936:	e0 3b fd 00 	sub	r11,130304
8000293a:	70 16       	ld.w	r6,r8[0x4]
8000293c:	70 37       	ld.w	r7,r8[0xc]
8000293e:	ec 07 00 07 	add	r7,r6,r7
80002942:	97 17       	st.w	r11[0x4],r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002944:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002948:	d3 03       	ssrf	0x10
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
8000294a:	76 37       	ld.w	r7,r11[0xc]
8000294c:	e2 17 00 10 	andl	r7,0x10,COH
80002950:	c1 61       	brne	8000297c <udd_ep_trans_done+0xd8>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80002952:	e8 1e 00 21 	orl	lr,0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80002956:	97 2e       	st.w	r11[0x8],lr
			ptr_job->nb_trans += next_trans;
80002958:	70 39       	ld.w	r9,r8[0xc]
8000295a:	f2 0a 00 0a 	add	r10,r9,r10
8000295e:	91 3a       	st.w	r8[0xc],r10
			udd_enable_endpoint_dma_interrupt(ep);
80002960:	20 1c       	sub	r12,1
80002962:	fc 18 02 00 	movh	r8,0x200
80002966:	f0 0c 09 4c 	lsl	r12,r8,r12
8000296a:	fe 68 00 00 	mov	r8,-131072
8000296e:	91 6c       	st.w	r8[0x18],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002970:	e6 16 00 01 	andh	r6,0x1,COH
80002974:	c0 21       	brne	80002978 <udd_ep_trans_done+0xd4>
      cpu_irq_enable();
80002976:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
80002978:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000297c:	e6 16 00 01 	andh	r6,0x1,COH
80002980:	c0 21       	brne	80002984 <udd_ep_trans_done+0xe0>
      cpu_irq_enable();
80002982:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80002984:	70 3a       	ld.w	r10,r8[0xc]
80002986:	91 2a       	st.w	r8[0x8],r10
	}
	if (Is_udd_endpoint_in(ep)) {
80002988:	a3 69       	lsl	r9,0x2
8000298a:	fe 6b 01 00 	mov	r11,-130816
8000298e:	f2 0b 00 0a 	add	r10,r9,r11
80002992:	74 0a       	ld.w	r10,r10[0x0]
80002994:	e2 1a 01 00 	andl	r10,0x100,COH
80002998:	c2 60       	breq	800029e4 <udd_ep_trans_done+0x140>
		if (ptr_job->b_shortpacket) {
8000299a:	70 0a       	ld.w	r10,r8[0x0]
8000299c:	e6 1a 40 00 	andh	r10,0x4000,COH
800029a0:	c2 20       	breq	800029e4 <udd_ep_trans_done+0x140>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
800029a2:	fe 6a 01 60 	mov	r10,-130720
800029a6:	f2 0a 00 08 	add	r8,r9,r10
800029aa:	30 1a       	mov	r10,1
800029ac:	91 0a       	st.w	r8[0x0],r10
			if (Is_udd_write_enabled(ep)) {
800029ae:	fe 6b 01 30 	mov	r11,-130768
800029b2:	f2 0b 00 08 	add	r8,r9,r11
800029b6:	70 08       	ld.w	r8,r8[0x0]
800029b8:	e6 18 00 01 	andh	r8,0x1,COH
800029bc:	c0 70       	breq	800029ca <udd_ep_trans_done+0x126>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
800029be:	fe 6a 01 90 	mov	r10,-130672
800029c2:	f2 0a 00 08 	add	r8,r9,r10
800029c6:	30 1a       	mov	r10,1
800029c8:	91 0a       	st.w	r8[0x0],r10
			}
			udd_enable_in_send_interrupt(ep);
800029ca:	e0 39 fe 10 	sub	r9,130576
800029ce:	30 18       	mov	r8,1
800029d0:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint_interrupt(ep);
800029d2:	e0 68 10 00 	mov	r8,4096
800029d6:	f0 0c 09 4c 	lsl	r12,r8,r12
800029da:	fe 68 00 00 	mov	r8,-131072
800029de:	91 6c       	st.w	r8[0x18],r12
			return;
800029e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
800029e4:	18 9a       	mov	r10,r12
800029e6:	30 0b       	mov	r11,0
800029e8:	10 9c       	mov	r12,r8
800029ea:	f0 1f 00 04 	mcall	800029f8 <udd_ep_trans_done+0x154>
800029ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800029f2:	00 00       	add	r0,r0
800029f4:	00 00       	add	r0,r0
800029f6:	07 84       	ld.ub	r4,r3[0x0]
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	26 c0       	sub	r0,108

800029fc <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800029fc:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80002a00:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80002a04:	30 3e       	mov	lr,3
80002a06:	fc 0c 18 00 	cp.b	r12,lr
80002a0a:	e0 8b 00 40 	brhi	80002a8a <udd_ep_run+0x8e>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002a0e:	fe 6e 00 00 	mov	lr,-131072
80002a12:	7c 77       	ld.w	r7,lr[0x1c]
80002a14:	18 96       	mov	r6,r12
80002a16:	30 1e       	mov	lr,1
80002a18:	fc 0c 09 4e 	lsl	lr,lr,r12
80002a1c:	0e 6e       	and	lr,r7
80002a1e:	c3 60       	breq	80002a8a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80002a20:	f8 0e 15 02 	lsl	lr,r12,0x2
80002a24:	e0 3e fe 40 	sub	lr,130624
80002a28:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002a2a:	e6 1e 00 08 	andh	lr,0x8,COH
80002a2e:	c2 e1       	brne	80002a8a <udd_ep_run+0x8e>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002a30:	20 1c       	sub	r12,1
80002a32:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002a36:	49 77       	lddpc	r7,80002a90 <udd_ep_run+0x94>
80002a38:	ee 0c 00 2e 	add	lr,r7,r12<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80002a3c:	7c 0c       	ld.w	r12,lr[0x0]
80002a3e:	e6 1c 20 00 	andh	r12,0x2000,COH
80002a42:	c2 41       	brne	80002a8a <udd_ep_run+0x8e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a44:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
80002a48:	d3 03       	ssrf	0x10
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002a4a:	7c 07       	ld.w	r7,lr[0x0]
80002a4c:	58 07       	cp.w	r7,0
80002a4e:	c0 74       	brge	80002a5c <udd_ep_run+0x60>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002a50:	e6 1c 00 01 	andh	r12,0x1,COH
80002a54:	c0 21       	brne	80002a58 <udd_ep_run+0x5c>
      cpu_irq_enable();
80002a56:	d5 03       	csrf	0x10
   }

	barrier();
80002a58:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80002a5c:	7c 07       	ld.w	r7,lr[0x0]
80002a5e:	30 15       	mov	r5,1
80002a60:	ef d5 d3 e1 	bfins	r7,r5,0x1f,0x1
80002a64:	9d 07       	st.w	lr[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002a66:	e6 1c 00 01 	andh	r12,0x1,COH
80002a6a:	c0 21       	brne	80002a6e <udd_ep_run+0x72>
      cpu_irq_enable();
80002a6c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80002a6e:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
80002a70:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
80002a72:	30 09       	mov	r9,0
80002a74:	9d 39       	st.w	lr[0xc],r9
	ptr_job->call_trans = callback;
80002a76:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
80002a78:	7c 08       	ld.w	r8,lr[0x0]
80002a7a:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002a7e:	9d 08       	st.w	lr[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80002a80:	0c 9c       	mov	r12,r6
80002a82:	f0 1f 00 05 	mcall	80002a94 <udd_ep_run+0x98>
80002a86:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80002a8a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002a8e:	00 00       	add	r0,r0
80002a90:	00 00       	add	r0,r0
80002a92:	07 84       	ld.ub	r4,r3[0x0]
80002a94:	80 00       	ld.sh	r0,r0[0x0]
80002a96:	28 a4       	sub	r4,-118

80002a98 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002a98:	d4 31       	pushm	r0-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80002a9a:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
80002a9e:	30 38       	mov	r8,3
80002aa0:	f0 07 18 00 	cp.b	r7,r8
80002aa4:	e0 8b 00 ae 	brhi	80002c00 <udd_ep_alloc+0x168>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
80002aa8:	fe 68 00 00 	mov	r8,-131072
80002aac:	70 78       	ld.w	r8,r8[0x1c]
80002aae:	30 15       	mov	r5,1
80002ab0:	ea 07 09 45 	lsl	r5,r5,r7
80002ab4:	eb e8 00 08 	and	r8,r5,r8
80002ab8:	e0 81 00 a4 	brne	80002c00 <udd_ep_alloc+0x168>
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002abc:	f1 db c0 02 	bfextu	r8,r11,0x0,0x2
80002ac0:	58 18       	cp.w	r8,1
80002ac2:	e0 85 00 9f 	brlt	80002c00 <udd_ep_alloc+0x168>
80002ac6:	58 28       	cp.w	r8,2
80002ac8:	e0 8a 00 07 	brle	80002ad6 <udd_ep_alloc+0x3e>
80002acc:	58 38       	cp.w	r8,3
80002ace:	e0 81 00 99 	brne	80002c00 <udd_ep_alloc+0x168>
80002ad2:	30 09       	mov	r9,0
80002ad4:	c0 28       	rjmp	80002ad8 <udd_ep_alloc+0x40>
80002ad6:	30 19       	mov	r9,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002ad8:	ee 08 15 02 	lsl	r8,r7,0x2
80002adc:	e0 38 ff 00 	sub	r8,130816
80002ae0:	70 0e       	ld.w	lr,r8[0x0]
80002ae2:	5c 7a       	castu.h	r10
80002ae4:	30 86       	mov	r6,8
80002ae6:	f4 06 0c 4a 	max	r10,r10,r6
80002aea:	e0 66 04 00 	mov	r6,1024
80002aee:	f4 06 0d 4a 	min	r10,r10,r6
80002af2:	a1 7a       	lsl	r10,0x1
80002af4:	20 1a       	sub	r10,1
80002af6:	f4 0a 12 00 	clz	r10,r10
80002afa:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80002afe:	ab 7b       	lsl	r11,0xb
80002b00:	e2 1b 18 00 	andl	r11,0x1800,COH
80002b04:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
80002b08:	f4 0c 11 1c 	rsub	r12,r10,28
80002b0c:	f7 ec 10 4c 	or	r12,r11,r12<<0x4
80002b10:	f9 e9 10 29 	or	r9,r12,r9<<0x2
80002b14:	e2 19 19 7c 	andl	r9,0x197c,COH
80002b18:	1c 9a       	mov	r10,lr
80002b1a:	e0 1a e6 83 	andl	r10,0xe683
80002b1e:	14 49       	or	r9,r10
80002b20:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002b22:	5c 85       	casts.h	r5

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002b24:	30 28       	mov	r8,2
80002b26:	f0 07 18 00 	cp.b	r7,r8
80002b2a:	e0 8b 00 1d 	brhi	80002b64 <udd_ep_alloc+0xcc>
80002b2e:	fe 69 01 0c 	mov	r9,-130804
80002b32:	30 38       	mov	r8,3
		if (Is_udd_endpoint_enabled(i)) {
80002b34:	fe 6b 00 00 	mov	r11,-131072
80002b38:	30 1e       	mov	lr,1
80002b3a:	76 7c       	ld.w	r12,r11[0x1c]
80002b3c:	fc 08 09 4a 	lsl	r10,lr,r8
80002b40:	f5 ec 00 0c 	and	r12,r10,r12
80002b44:	c0 b0       	breq	80002b5a <udd_ep_alloc+0xc2>
			ep_allocated |= 1 << i;
80002b46:	f5 e5 10 05 	or	r5,r10,r5
80002b4a:	5c 85       	casts.h	r5
			udd_disable_endpoint(i);
80002b4c:	76 7c       	ld.w	r12,r11[0x1c]
80002b4e:	5c da       	com	r10
80002b50:	18 6a       	and	r10,r12
80002b52:	97 7a       	st.w	r11[0x1c],r10
			udd_unallocate_memory(i);
80002b54:	72 0a       	ld.w	r10,r9[0x0]
80002b56:	a1 da       	cbr	r10,0x1
80002b58:	93 0a       	st.w	r9[0x0],r10
80002b5a:	20 18       	sub	r8,1
80002b5c:	20 49       	sub	r9,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002b5e:	f0 07 18 00 	cp.b	r7,r8
80002b62:	ce c3       	brcs	80002b3a <udd_ep_alloc+0xa2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80002b64:	5c 75       	castu.h	r5
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80002b66:	4a 83       	lddpc	r3,80002c04 <udd_ep_alloc+0x16c>
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;
80002b68:	30 02       	mov	r2,0

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
80002b6a:	fe 64 00 00 	mov	r4,-131072
80002b6e:	30 11       	mov	r1,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002b70:	30 36       	mov	r6,3
		if (ep_allocated & (1 << i)) {
80002b72:	0e 9c       	mov	r12,r7
80002b74:	ea 07 08 48 	asr	r8,r5,r7
80002b78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b7c:	c3 b0       	breq	80002bf2 <udd_ep_alloc+0x15a>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80002b7e:	ee ce 00 01 	sub	lr,r7,1
80002b82:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80002b86:	e6 0e 00 2e 	add	lr,r3,lr<<0x2
			bool b_restart = ptr_job->busy;
80002b8a:	7c 0a       	ld.w	r10,lr[0x0]
			ptr_job->busy = false;
80002b8c:	14 98       	mov	r8,r10
80002b8e:	f1 d2 d3 e1 	bfins	r8,r2,0x1f,0x1
80002b92:	9d 08       	st.w	lr[0x0],r8

			udd_allocate_memory(i);
80002b94:	ee 08 15 02 	lsl	r8,r7,0x2
80002b98:	fe 6b 01 00 	mov	r11,-130816
80002b9c:	f0 0b 00 09 	add	r9,r8,r11
80002ba0:	72 0b       	ld.w	r11,r9[0x0]
80002ba2:	a1 bb       	sbr	r11,0x1
80002ba4:	93 0b       	st.w	r9[0x0],r11
			udd_enable_endpoint(i);
80002ba6:	68 7b       	ld.w	r11,r4[0x1c]
80002ba8:	e2 07 09 40 	lsl	r0,r1,r7
80002bac:	e1 eb 10 0b 	or	r11,r0,r11
80002bb0:	89 7b       	st.w	r4[0x1c],r11
			if (!Is_udd_endpoint_configured(i)) {
80002bb2:	e0 38 fe d0 	sub	r8,130768
80002bb6:	70 08       	ld.w	r8,r8[0x0]
80002bb8:	e6 18 00 04 	andh	r8,0x4,COH
80002bbc:	c0 e1       	brne	80002bd8 <udd_ep_alloc+0x140>
				if (NULL == ptr_job->call_trans) {
80002bbe:	7c 48       	ld.w	r8,lr[0x10]
80002bc0:	58 08       	cp.w	r8,0
80002bc2:	c1 f0       	breq	80002c00 <udd_ep_alloc+0x168>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
80002bc4:	72 09       	ld.w	r9,r9[0x0]
80002bc6:	e2 19 01 00 	andl	r9,0x100,COH
80002bca:	c0 20       	breq	80002bce <udd_ep_alloc+0x136>
					i |= USB_EP_DIR_IN;
80002bcc:	a7 b7       	sbr	r7,0x7
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80002bce:	0e 9a       	mov	r10,r7
80002bd0:	7c 2b       	ld.w	r11,lr[0x8]
80002bd2:	30 1c       	mov	r12,1
80002bd4:	5d 18       	icall	r8
80002bd6:	d8 3a       	popm	r0-r7,pc,r12=0
						ptr_job->buf_size, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
80002bd8:	72 08       	ld.w	r8,r9[0x0]
80002bda:	a9 b8       	sbr	r8,0x9
80002bdc:	93 08       	st.w	r9[0x0],r8
			if (b_restart) {
80002bde:	58 0a       	cp.w	r10,0
80002be0:	c0 94       	brge	80002bf2 <udd_ep_alloc+0x15a>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80002be2:	7c 0b       	ld.w	r11,lr[0x0]
80002be4:	7c 48       	ld.w	r8,lr[0x10]
80002be6:	7c 29       	ld.w	r9,lr[0x8]
80002be8:	7c 1a       	ld.w	r10,lr[0x4]
80002bea:	f7 db c3 c1 	bfextu	r11,r11,0x1e,0x1
80002bee:	f0 1f 00 07 	mcall	80002c08 <udd_ep_alloc+0x170>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002bf2:	2f f7       	sub	r7,-1
80002bf4:	5c 57       	castu.b	r7
80002bf6:	ec 07 18 00 	cp.b	r7,r6
80002bfa:	fe 98 ff bc 	brls	80002b72 <udd_ep_alloc+0xda>
80002bfe:	da 3a       	popm	r0-r7,pc,r12=1
80002c00:	d8 3a       	popm	r0-r7,pc,r12=0
80002c02:	00 00       	add	r0,r0
80002c04:	00 00       	add	r0,r0
80002c06:	07 84       	ld.ub	r4,r3[0x0]
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	29 fc       	sub	r12,-97

80002c0c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002c0c:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c10:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002c14:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
	otg_unfreeze_clock();
80002c16:	fe 69 08 00 	mov	r9,-129024
80002c1a:	72 08       	ld.w	r8,r9[0x0]
80002c1c:	af c8       	cbr	r8,0xe
80002c1e:	93 08       	st.w	r9[0x0],r8
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
80002c20:	fe 68 00 00 	mov	r8,-131072
80002c24:	70 0a       	ld.w	r10,r8[0x0]
80002c26:	a9 ca       	cbr	r10,0x8
80002c28:	91 0a       	st.w	r8[0x0],r10

	// Enable USB line events
	udd_enable_reset_interrupt();
80002c2a:	fe 68 00 18 	mov	r8,-131048
80002c2e:	30 87       	mov	r7,8
80002c30:	91 07       	st.w	r8[0x0],r7
	udd_enable_suspend_interrupt();
80002c32:	30 1b       	mov	r11,1
80002c34:	91 0b       	st.w	r8[0x0],r11
	udd_enable_wake_up_interrupt();
80002c36:	31 0a       	mov	r10,16
80002c38:	91 0a       	st.w	r8[0x0],r10
	udd_enable_sof_interrupt();
80002c3a:	30 4e       	mov	lr,4
80002c3c:	91 0e       	st.w	r8[0x0],lr
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
80002c3e:	30 2c       	mov	r12,2
80002c40:	91 0c       	st.w	r8[0x0],r12
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80002c42:	fe 68 00 08 	mov	r8,-131064
80002c46:	91 07       	st.w	r8[0x0],r7
	udd_ack_sof();
80002c48:	91 0e       	st.w	r8[0x0],lr
	udd_ack_msof();
80002c4a:	91 0c       	st.w	r8[0x0],r12

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002c4c:	91 0b       	st.w	r8[0x0],r11
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002c4e:	91 0a       	st.w	r8[0x0],r10
	otg_freeze_clock();
80002c50:	72 08       	ld.w	r8,r9[0x0]
80002c52:	af a8       	sbr	r8,0xe
80002c54:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c56:	0c 98       	mov	r8,r6
80002c58:	e6 18 00 01 	andh	r8,0x1,COH
80002c5c:	c0 21       	brne	80002c60 <udd_attach+0x54>
      cpu_irq_enable();
80002c5e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002c60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80002c64 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002c64:	30 39       	mov	r9,3
80002c66:	48 b8       	lddpc	r8,80002c90 <udd_ctrl_send_zlp_in+0x2c>
80002c68:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c6a:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002c6e:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002c70:	fe 6a 01 60 	mov	r10,-130720
80002c74:	30 19       	mov	r9,1
80002c76:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80002c78:	fe 68 01 f0 	mov	r8,-130576
80002c7c:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002c7e:	30 89       	mov	r9,8
80002c80:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
80002c82:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c84:	16 98       	mov	r8,r11
80002c86:	e6 18 00 01 	andh	r8,0x1,COH
80002c8a:	c0 21       	brne	80002c8e <udd_ctrl_send_zlp_in+0x2a>
      cpu_irq_enable();
80002c8c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002c8e:	5e fc       	retal	r12
80002c90:	00 00       	add	r0,r0
80002c92:	07 c4       	ld.ub	r4,r3[0x4]

80002c94 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c94:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002c98:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002c9a:	30 1a       	mov	r10,1
80002c9c:	fe 69 02 20 	mov	r9,-130528
80002ca0:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ca2:	e6 18 00 01 	andh	r8,0x1,COH
80002ca6:	c0 21       	brne	80002caa <udd_ctrl_init+0x16>
      cpu_irq_enable();
80002ca8:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002caa:	30 29       	mov	r9,2
80002cac:	fe 68 01 60 	mov	r8,-130720
80002cb0:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002cb2:	48 59       	lddpc	r9,80002cc4 <udd_ctrl_init+0x30>
80002cb4:	30 08       	mov	r8,0
80002cb6:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002cb8:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002cba:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002cbc:	48 39       	lddpc	r9,80002cc8 <udd_ctrl_init+0x34>
80002cbe:	93 08       	st.w	r9[0x0],r8
}
80002cc0:	5e fc       	retal	r12
80002cc2:	00 00       	add	r0,r0
80002cc4:	00 00       	add	r0,r0
80002cc6:	12 04       	add	r4,r9
80002cc8:	00 00       	add	r0,r0
80002cca:	07 c4       	ld.ub	r4,r3[0x4]

80002ccc <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80002ccc:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002cd0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002cd4:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80002cd6:	30 1a       	mov	r10,1
80002cd8:	fe 69 02 20 	mov	r9,-130528
80002cdc:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002cde:	e6 18 00 01 	andh	r8,0x1,COH
80002ce2:	c0 21       	brne	80002ce6 <udd_ctrl_in_sent+0x1a>
      cpu_irq_enable();
80002ce4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002ce6:	4c 38       	lddpc	r8,80002df0 <udd_ctrl_in_sent+0x124>
80002ce8:	70 08       	ld.w	r8,r8[0x0]
80002cea:	58 38       	cp.w	r8,3
80002cec:	c0 71       	brne	80002cfa <udd_ctrl_in_sent+0x2e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80002cee:	f0 1f 00 42 	mcall	80002df4 <udd_ctrl_in_sent+0x128>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002cf2:	f0 1f 00 42 	mcall	80002df8 <udd_ctrl_in_sent+0x12c>
		return;
80002cf6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002cfa:	4c 18       	lddpc	r8,80002dfc <udd_ctrl_in_sent+0x130>
80002cfc:	90 08       	ld.sh	r8,r8[0x0]
80002cfe:	4c 19       	lddpc	r9,80002e00 <udd_ctrl_in_sent+0x134>
80002d00:	92 67       	ld.sh	r7,r9[0xc]
80002d02:	10 17       	sub	r7,r8
80002d04:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002d06:	c3 01       	brne	80002d66 <udd_ctrl_in_sent+0x9a>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002d08:	4b f9       	lddpc	r9,80002e04 <udd_ctrl_in_sent+0x138>
80002d0a:	92 0a       	ld.sh	r10,r9[0x0]
80002d0c:	f4 08 00 08 	add	r8,r10,r8
80002d10:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80002d12:	4b c9       	lddpc	r9,80002e00 <udd_ctrl_in_sent+0x134>
80002d14:	92 39       	ld.sh	r9,r9[0x6]
80002d16:	f0 09 19 00 	cp.h	r9,r8
80002d1a:	c0 70       	breq	80002d28 <udd_ctrl_in_sent+0x5c>
80002d1c:	4b b8       	lddpc	r8,80002e08 <udd_ctrl_in_sent+0x13c>
80002d1e:	11 89       	ld.ub	r9,r8[0x0]
80002d20:	30 08       	mov	r8,0
80002d22:	f0 09 18 00 	cp.b	r9,r8
80002d26:	c1 50       	breq	80002d50 <udd_ctrl_in_sent+0x84>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002d28:	30 49       	mov	r9,4
80002d2a:	4b 28       	lddpc	r8,80002df0 <udd_ctrl_in_sent+0x124>
80002d2c:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d2e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d32:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002d34:	31 08       	mov	r8,16
80002d36:	fe 6a 01 60 	mov	r10,-130720
80002d3a:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002d3c:	fe 6a 01 f0 	mov	r10,-130576
80002d40:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002d42:	12 98       	mov	r8,r9
80002d44:	e6 18 00 01 	andh	r8,0x1,COH
80002d48:	c0 21       	brne	80002d4c <udd_ctrl_in_sent+0x80>
      cpu_irq_enable();
80002d4a:	d5 03       	csrf	0x10
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002d4c:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80002d50:	4a c8       	lddpc	r8,80002e00 <udd_ctrl_in_sent+0x134>
80002d52:	70 5c       	ld.w	r12,r8[0x14]
80002d54:	58 0c       	cp.w	r12,0
80002d56:	c1 20       	breq	80002d7a <udd_ctrl_in_sent+0xae>
80002d58:	5d 1c       	icall	r12
80002d5a:	c1 00       	breq	80002d7a <udd_ctrl_in_sent+0xae>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80002d5c:	30 09       	mov	r9,0
80002d5e:	4a 88       	lddpc	r8,80002dfc <udd_ctrl_in_sent+0x130>
80002d60:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002d62:	4a 88       	lddpc	r8,80002e00 <udd_ctrl_in_sent+0x134>
80002d64:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80002d66:	33 f8       	mov	r8,63
80002d68:	f0 07 19 00 	cp.h	r7,r8
80002d6c:	e0 88 00 07 	brls	80002d7a <udd_ctrl_in_sent+0xae>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80002d70:	30 09       	mov	r9,0
80002d72:	4a 68       	lddpc	r8,80002e08 <udd_ctrl_in_sent+0x13c>
80002d74:	b0 89       	st.b	r8[0x0],r9
80002d76:	34 07       	mov	r7,64
80002d78:	c0 48       	rjmp	80002d80 <udd_ctrl_in_sent+0xb4>
	} else {
		b_shortpacket = true;
80002d7a:	30 19       	mov	r9,1
80002d7c:	4a 38       	lddpc	r8,80002e08 <udd_ctrl_in_sent+0x13c>
80002d7e:	b0 89       	st.b	r8[0x0],r9
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002d80:	4a 08       	lddpc	r8,80002e00 <udd_ctrl_in_sent+0x134>
80002d82:	70 2a       	ld.w	r10,r8[0x8]
80002d84:	49 e8       	lddpc	r8,80002dfc <udd_ctrl_in_sent+0x130>
80002d86:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d88:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002d8c:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002d8e:	fe 68 01 30 	mov	r8,-130768
80002d92:	70 08       	ld.w	r8,r8[0x0]
80002d94:	e2 18 00 02 	andl	r8,0x2,COH
80002d98:	c0 41       	brne	80002da0 <udd_ctrl_in_sent+0xd4>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002d9a:	58 07       	cp.w	r7,0
80002d9c:	c0 b1       	brne	80002db2 <udd_ctrl_in_sent+0xe6>
80002d9e:	c1 68       	rjmp	80002dca <udd_ctrl_in_sent+0xfe>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002da0:	e6 1b 00 01 	andh	r11,0x1,COH
80002da4:	c0 21       	brne	80002da8 <udd_ctrl_in_sent+0xdc>
      cpu_irq_enable();
80002da6:	d5 03       	csrf	0x10
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002da8:	30 49       	mov	r9,4
80002daa:	49 28       	lddpc	r8,80002df0 <udd_ctrl_in_sent+0x124>
80002dac:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
80002dae:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002db2:	5c 79       	castu.h	r9
80002db4:	f4 09 00 09 	add	r9,r10,r9
80002db8:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
80002dbc:	13 3a       	ld.ub	r10,r9++
80002dbe:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002dc0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002dc4:	ee 0a 19 00 	cp.h	r10,r7
80002dc8:	cf a3       	brcs	80002dbc <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80002dca:	48 d8       	lddpc	r8,80002dfc <udd_ctrl_in_sent+0x130>
80002dcc:	90 09       	ld.sh	r9,r8[0x0]
80002dce:	f2 07 00 07 	add	r7,r9,r7
80002dd2:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80002dd4:	30 18       	mov	r8,1
80002dd6:	fe 69 01 60 	mov	r9,-130720
80002dda:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80002ddc:	fe 69 01 f0 	mov	r9,-130576
80002de0:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002de2:	e6 1b 00 01 	andh	r11,0x1,COH
80002de6:	c0 21       	brne	80002dea <udd_ctrl_in_sent+0x11e>
      cpu_irq_enable();
80002de8:	d5 03       	csrf	0x10
   }

	barrier();
80002dea:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dee:	00 00       	add	r0,r0
80002df0:	00 00       	add	r0,r0
80002df2:	07 c4       	ld.ub	r4,r3[0x4]
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	26 ac       	sub	r12,106
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2c 94       	sub	r4,-55
80002dfc:	00 00       	add	r0,r0
80002dfe:	07 c0       	ld.ub	r0,r3[0x4]
80002e00:	00 00       	add	r0,r0
80002e02:	12 04       	add	r4,r9
80002e04:	00 00       	add	r0,r0
80002e06:	07 80       	ld.ub	r0,r3[0x0]
80002e08:	00 00       	add	r0,r0
80002e0a:	07 c8       	ld.ub	r8,r3[0x4]

80002e0c <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002e0c:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e10:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80002e14:	d3 03       	ssrf	0x10
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80002e16:	f0 1f 00 2d 	mcall	80002ec8 <udd_enable+0xbc>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80002e1a:	30 0a       	mov	r10,0
80002e1c:	e0 6b 02 20 	mov	r11,544
80002e20:	4a bc       	lddpc	r12,80002ecc <udd_enable+0xc0>
80002e22:	f0 1f 00 2c 	mcall	80002ed0 <udd_enable+0xc4>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80002e26:	fe 78 0c 00 	mov	r8,-62464
80002e2a:	f0 f9 01 44 	ld.w	r9,r8[324]
80002e2e:	a1 a9       	sbr	r9,0x0
80002e30:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80002e34:	fe 68 08 00 	mov	r8,-129024
80002e38:	70 09       	ld.w	r9,r8[0x0]
80002e3a:	b9 c9       	cbr	r9,0x18
80002e3c:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80002e3e:	70 09       	ld.w	r9,r8[0x0]
80002e40:	b9 b9       	sbr	r9,0x19
80002e42:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80002e44:	70 09       	ld.w	r9,r8[0x0]
80002e46:	ad a9       	sbr	r9,0xc
80002e48:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80002e4a:	70 09       	ld.w	r9,r8[0x0]
80002e4c:	af b9       	sbr	r9,0xf
80002e4e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80002e50:	70 09       	ld.w	r9,r8[0x0]
80002e52:	af c9       	cbr	r9,0xe
80002e54:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80002e56:	70 08       	ld.w	r8,r8[0x0]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002e58:	49 f8       	lddpc	r8,80002ed4 <udd_enable+0xc8>
80002e5a:	70 0a       	ld.w	r10,r8[0x0]
80002e5c:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002e5e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002e62:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
80002e66:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002e68:	70 5a       	ld.w	r10,r8[0x14]
		udd_ep_job[i].stall_requested = false;
80002e6a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002e6e:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
80002e72:	91 5a       	st.w	r8[0x14],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002e74:	70 aa       	ld.w	r10,r8[0x28]
		udd_ep_job[i].stall_requested = false;
80002e76:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002e7a:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
80002e7e:	91 aa       	st.w	r8[0x28],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002e80:	fe 68 00 00 	mov	r8,-131072
80002e84:	70 09       	ld.w	r9,r8[0x0]
80002e86:	ad c9       	cbr	r9,0xc
80002e88:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80002e8a:	70 09       	ld.w	r9,r8[0x0]
80002e8c:	e0 19 f3 ff 	andl	r9,0xf3ff
80002e90:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80002e92:	30 29       	mov	r9,2
80002e94:	fe 68 08 08 	mov	r8,-129016
80002e98:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80002e9a:	fe 68 08 04 	mov	r8,-129020
80002e9e:	70 08       	ld.w	r8,r8[0x0]
80002ea0:	e2 18 08 00 	andl	r8,0x800,COH
80002ea4:	c0 40       	breq	80002eac <udd_enable+0xa0>
		otg_raise_vbus_transition();
80002ea6:	fe 68 08 0c 	mov	r8,-129012
80002eaa:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80002eac:	fe 68 08 00 	mov	r8,-129024
80002eb0:	70 09       	ld.w	r9,r8[0x0]
80002eb2:	a1 b9       	sbr	r9,0x1
80002eb4:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80002eb6:	70 09       	ld.w	r9,r8[0x0]
80002eb8:	af a9       	sbr	r9,0xe
80002eba:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ebc:	e6 17 00 01 	andh	r7,0x1,COH
80002ec0:	c0 21       	brne	80002ec4 <udd_enable+0xb8>
      cpu_irq_enable();
80002ec2:	d5 03       	csrf	0x10
	udd_b_idle = false;
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002ec4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ec8:	80 00       	ld.sh	r0,r0[0x0]
80002eca:	40 d8       	lddsp	r8,sp[0x34]
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	2e d8       	sub	r8,-19
80002ed0:	80 00       	ld.sh	r0,r0[0x0]
80002ed2:	22 b4       	sub	r4,43
80002ed4:	00 00       	add	r0,r0
80002ed6:	07 84       	ld.ub	r4,r3[0x0]

80002ed8 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80002ed8:	eb cd 40 fe 	pushm	r1-r7,lr
	if (Is_udd_sof()) {
80002edc:	fe 68 00 04 	mov	r8,-131068
80002ee0:	70 08       	ld.w	r8,r8[0x0]
80002ee2:	e2 18 00 04 	andl	r8,0x4,COH
80002ee6:	c1 00       	breq	80002f06 <udd_interrupt+0x2e>
		udd_ack_sof();
80002ee8:	30 49       	mov	r9,4
80002eea:	fe 68 00 08 	mov	r8,-131064
80002eee:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80002ef0:	fe 68 08 04 	mov	r8,-129020
80002ef4:	70 08       	ld.w	r8,r8[0x0]
80002ef6:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002efa:	e0 81 02 c9 	brne	8000348c <udd_interrupt+0x5b4>
			udc_sof_notify();
80002efe:	f0 1f 01 6d 	mcall	800034b0 <udd_interrupt+0x5d8>
80002f02:	e0 8f 02 c5 	bral	8000348c <udd_interrupt+0x5b4>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002f06:	fe 68 00 04 	mov	r8,-131068
80002f0a:	70 08       	ld.w	r8,r8[0x0]
80002f0c:	e2 18 00 02 	andl	r8,0x2,COH
80002f10:	c0 90       	breq	80002f22 <udd_interrupt+0x4a>
		udd_ack_msof();
80002f12:	30 29       	mov	r9,2
80002f14:	fe 68 00 08 	mov	r8,-131064
80002f18:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80002f1a:	f0 1f 01 66 	mcall	800034b0 <udd_interrupt+0x5d8>
		goto udd_interrupt_end;
80002f1e:	e0 8f 02 b7 	bral	8000348c <udd_interrupt+0x5b4>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002f22:	fe 68 00 00 	mov	r8,-131072
80002f26:	70 18       	ld.w	r8,r8[0x4]
80002f28:	e2 18 10 00 	andl	r8,0x1000,COH
80002f2c:	e0 80 01 6d 	breq	80003206 <udd_interrupt+0x32e>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002f30:	fe 68 02 20 	mov	r8,-130528
80002f34:	31 09       	mov	r9,16
80002f36:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002f38:	30 89       	mov	r9,8
80002f3a:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002f3c:	fe 68 01 30 	mov	r8,-130768
80002f40:	70 08       	ld.w	r8,r8[0x0]
80002f42:	e2 18 00 04 	andl	r8,0x4,COH
80002f46:	e0 80 00 81 	breq	80003048 <udd_interrupt+0x170>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002f4a:	fe f8 05 6a 	ld.w	r8,pc[1386]
80002f4e:	70 08       	ld.w	r8,r8[0x0]
80002f50:	58 08       	cp.w	r8,0
80002f52:	c0 50       	breq	80002f5c <udd_interrupt+0x84>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002f54:	f0 1f 01 59 	mcall	800034b8 <udd_interrupt+0x5e0>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80002f58:	f0 1f 01 59 	mcall	800034bc <udd_interrupt+0x5e4>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002f5c:	fe 68 01 30 	mov	r8,-130768
80002f60:	70 08       	ld.w	r8,r8[0x0]
80002f62:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002f66:	58 88       	cp.w	r8,8
80002f68:	c0 90       	breq	80002f7a <udd_interrupt+0xa2>
		udd_ctrl_stall_data();
80002f6a:	f0 1f 01 56 	mcall	800034c0 <udd_interrupt+0x5e8>
		udd_ack_setup_received(0);
80002f6e:	30 49       	mov	r9,4
80002f70:	fe 68 01 60 	mov	r8,-130720
80002f74:	91 09       	st.w	r8[0x0],r9
80002f76:	e0 8f 02 8b 	bral	8000348c <udd_interrupt+0x5b4>
80002f7a:	fc 18 e0 00 	movh	r8,0xe000
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002f7e:	fe fc 05 46 	ld.w	r12,pc[1350]
80002f82:	fc 1b 20 00 	movh	r11,0x2000
80002f86:	f0 0c 00 09 	add	r9,r8,r12
80002f8a:	11 3a       	ld.ub	r10,r8++
80002f8c:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002f90:	30 8a       	mov	r10,8
80002f92:	ea 1a e0 00 	orh	r10,0xe000
80002f96:	14 38       	cp.w	r8,r10
80002f98:	cf 71       	brne	80002f86 <udd_interrupt+0xae>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002f9a:	fe f8 05 2a 	ld.w	r8,pc[1322]
80002f9e:	90 19       	ld.sh	r9,r8[0x2]
80002fa0:	5c c9       	swap.bh	r9
80002fa2:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002fa4:	90 29       	ld.sh	r9,r8[0x4]
80002fa6:	5c c9       	swap.bh	r9
80002fa8:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002faa:	90 39       	ld.sh	r9,r8[0x6]
80002fac:	5c c9       	swap.bh	r9
80002fae:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002fb0:	f0 1f 01 46 	mcall	800034c8 <udd_interrupt+0x5f0>
80002fb4:	c0 91       	brne	80002fc6 <udd_interrupt+0xee>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80002fb6:	f0 1f 01 43 	mcall	800034c0 <udd_interrupt+0x5e8>
		udd_ack_setup_received(0);
80002fba:	30 49       	mov	r9,4
80002fbc:	fe 68 01 60 	mov	r8,-130720
80002fc0:	91 09       	st.w	r8[0x0],r9
80002fc2:	e0 8f 02 65 	bral	8000348c <udd_interrupt+0x5b4>
		return;
	}
	udd_ack_setup_received(0);
80002fc6:	30 49       	mov	r9,4
80002fc8:	fe 68 01 60 	mov	r8,-130720
80002fcc:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002fce:	fe f8 04 f6 	ld.w	r8,pc[1270]
80002fd2:	11 89       	ld.ub	r9,r8[0x0]
80002fd4:	30 08       	mov	r8,0
80002fd6:	f0 09 18 00 	cp.b	r9,r8
80002fda:	c1 04       	brge	80002ffa <udd_interrupt+0x122>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002fdc:	30 08       	mov	r8,0
80002fde:	fe f9 04 ee 	ld.w	r9,pc[1262]
80002fe2:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002fe4:	fe f9 04 ec 	ld.w	r9,pc[1260]
80002fe8:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002fea:	30 29       	mov	r9,2
80002fec:	fe f8 04 c8 	ld.w	r8,pc[1224]
80002ff0:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80002ff2:	f0 1f 01 39 	mcall	800034d4 <udd_interrupt+0x5fc>
80002ff6:	e0 8f 02 4b 	bral	8000348c <udd_interrupt+0x5b4>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002ffa:	fe f8 04 ca 	ld.w	r8,pc[1226]
80002ffe:	90 39       	ld.sh	r9,r8[0x6]
80003000:	30 08       	mov	r8,0
80003002:	f0 09 19 00 	cp.h	r9,r8
80003006:	c0 51       	brne	80003010 <udd_interrupt+0x138>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80003008:	f0 1f 01 34 	mcall	800034d8 <udd_interrupt+0x600>
8000300c:	e0 8f 02 40 	bral	8000348c <udd_interrupt+0x5b4>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003010:	30 08       	mov	r8,0
80003012:	fe f9 04 ba 	ld.w	r9,pc[1210]
80003016:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003018:	fe f9 04 b8 	ld.w	r9,pc[1208]
8000301c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000301e:	30 19       	mov	r9,1
80003020:	fe f8 04 94 	ld.w	r8,pc[1172]
80003024:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80003026:	31 08       	mov	r8,16
80003028:	fe 69 01 60 	mov	r9,-130720
8000302c:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000302e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003032:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80003034:	fe 6a 01 f0 	mov	r10,-130576
80003038:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000303a:	12 98       	mov	r8,r9
8000303c:	e6 18 00 01 	andh	r8,0x1,COH
80003040:	c0 21       	brne	80003044 <udd_interrupt+0x16c>
      cpu_irq_enable();
80003042:	d5 03       	csrf	0x10
   }

	barrier();
80003044:	e0 8f 02 24 	bral	8000348c <udd_interrupt+0x5b4>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80003048:	fe 68 01 30 	mov	r8,-130768
8000304c:	70 08       	ld.w	r8,r8[0x0]
8000304e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003052:	c0 b0       	breq	80003068 <udd_interrupt+0x190>
80003054:	fe 68 01 c0 	mov	r8,-130624
80003058:	70 08       	ld.w	r8,r8[0x0]
8000305a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000305e:	c0 50       	breq	80003068 <udd_interrupt+0x190>
		// IN packet sent
		udd_ctrl_in_sent();
80003060:	f0 1f 01 1d 	mcall	800034d4 <udd_interrupt+0x5fc>
80003064:	e0 8f 02 14 	bral	8000348c <udd_interrupt+0x5b4>
		return true;
	}
	if (Is_udd_out_received(0)) {
80003068:	fe 68 01 30 	mov	r8,-130768
8000306c:	70 08       	ld.w	r8,r8[0x0]
8000306e:	e2 18 00 02 	andl	r8,0x2,COH
80003072:	e0 80 00 a7 	breq	800031c0 <udd_interrupt+0x2e8>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80003076:	fe f8 04 3e 	ld.w	r8,pc[1086]
8000307a:	70 08       	ld.w	r8,r8[0x0]
8000307c:	58 18       	cp.w	r8,1
8000307e:	c1 10       	breq	800030a0 <udd_interrupt+0x1c8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80003080:	58 28       	cp.w	r8,2
80003082:	5f 09       	sreq	r9
80003084:	58 48       	cp.w	r8,4
80003086:	5f 08       	sreq	r8
80003088:	f3 e8 10 08 	or	r8,r9,r8
8000308c:	c0 40       	breq	80003094 <udd_interrupt+0x1bc>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000308e:	f0 1f 01 0b 	mcall	800034b8 <udd_interrupt+0x5e0>
80003092:	c0 38       	rjmp	80003098 <udd_interrupt+0x1c0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80003094:	f0 1f 01 0b 	mcall	800034c0 <udd_interrupt+0x5e8>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003098:	f0 1f 01 09 	mcall	800034bc <udd_interrupt+0x5e4>
8000309c:	e0 8f 01 f8 	bral	8000348c <udd_interrupt+0x5b4>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
800030a0:	fe 68 01 30 	mov	r8,-130768
800030a4:	70 0b       	ld.w	r11,r8[0x0]
800030a6:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
800030aa:	fe f8 04 1a 	ld.w	r8,pc[1050]
800030ae:	90 69       	ld.sh	r9,r8[0xc]
800030b0:	fe f8 04 20 	ld.w	r8,pc[1056]
800030b4:	90 08       	ld.sh	r8,r8[0x0]
800030b6:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
800030ba:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800030be:	f6 0a 00 0a 	add	r10,r11,r10
800030c2:	14 3c       	cp.w	r12,r10
800030c4:	c0 44       	brge	800030cc <udd_interrupt+0x1f4>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
800030c6:	10 19       	sub	r9,r8
800030c8:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800030cc:	fe f9 03 f8 	ld.w	r9,pc[1016]
800030d0:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
800030d2:	58 0b       	cp.w	r11,0
800030d4:	e0 80 01 e3 	breq	8000349a <udd_interrupt+0x5c2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800030d8:	5c 78       	castu.h	r8
800030da:	10 09       	add	r9,r8
800030dc:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
800030e0:	11 3a       	ld.ub	r10,r8++
800030e2:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
800030e4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800030e8:	f6 0a 19 00 	cp.h	r10,r11
800030ec:	cf a3       	brcs	800030e0 <udd_interrupt+0x208>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800030ee:	fe f9 03 e2 	ld.w	r9,pc[994]
800030f2:	92 08       	ld.sh	r8,r9[0x0]
800030f4:	16 08       	add	r8,r11
800030f6:	5c 88       	casts.h	r8
800030f8:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800030fa:	34 09       	mov	r9,64
800030fc:	f2 0b 19 00 	cp.h	r11,r9
80003100:	c0 e1       	brne	8000311c <udd_interrupt+0x244>
80003102:	fe f9 03 c2 	ld.w	r9,pc[962]
80003106:	92 ba       	ld.uh	r10,r9[0x6]
80003108:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000310c:	fe f9 03 c0 	ld.w	r9,pc[960]
80003110:	92 89       	ld.uh	r9,r9[0x0]
80003112:	f6 09 00 09 	add	r9,r11,r9
80003116:	12 3a       	cp.w	r10,r9
80003118:	e0 89 00 1a 	brgt	8000314c <udd_interrupt+0x274>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
8000311c:	fe f9 03 a8 	ld.w	r9,pc[936]
80003120:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80003122:	72 5c       	ld.w	r12,r9[0x14]
80003124:	58 0c       	cp.w	r12,0
80003126:	c0 b0       	breq	8000313c <udd_interrupt+0x264>
			if (!udd_g_ctrlreq.over_under_run()) {
80003128:	5d 1c       	icall	r12
8000312a:	c0 91       	brne	8000313c <udd_interrupt+0x264>
				// Stall ZLP
				udd_ctrl_stall_data();
8000312c:	f0 1f 00 e5 	mcall	800034c0 <udd_interrupt+0x5e8>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80003130:	30 29       	mov	r9,2
80003132:	fe 68 01 60 	mov	r8,-130720
80003136:	91 09       	st.w	r8[0x0],r9
80003138:	e0 8f 01 aa 	bral	8000348c <udd_interrupt+0x5b4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000313c:	30 29       	mov	r9,2
8000313e:	fe 68 01 60 	mov	r8,-130720
80003142:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80003144:	f0 1f 00 e5 	mcall	800034d8 <udd_interrupt+0x600>
80003148:	e0 8f 01 a2 	bral	8000348c <udd_interrupt+0x5b4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000314c:	fe f9 03 78 	ld.w	r9,pc[888]
80003150:	92 69       	ld.sh	r9,r9[0xc]
80003152:	f0 09 19 00 	cp.h	r9,r8
80003156:	c2 31       	brne	8000319c <udd_interrupt+0x2c4>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80003158:	fe f8 03 6c 	ld.w	r8,pc[876]
8000315c:	70 5c       	ld.w	r12,r8[0x14]
8000315e:	58 0c       	cp.w	r12,0
80003160:	c0 91       	brne	80003172 <udd_interrupt+0x29a>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80003162:	f0 1f 00 d8 	mcall	800034c0 <udd_interrupt+0x5e8>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003166:	30 29       	mov	r9,2
80003168:	fe 68 01 60 	mov	r8,-130720
8000316c:	91 09       	st.w	r8[0x0],r9
8000316e:	e0 8f 01 8f 	bral	8000348c <udd_interrupt+0x5b4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80003172:	5d 1c       	icall	r12
80003174:	c0 91       	brne	80003186 <udd_interrupt+0x2ae>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80003176:	f0 1f 00 d3 	mcall	800034c0 <udd_interrupt+0x5e8>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000317a:	30 29       	mov	r9,2
8000317c:	fe 68 01 60 	mov	r8,-130720
80003180:	91 09       	st.w	r8[0x0],r9
80003182:	e0 8f 01 85 	bral	8000348c <udd_interrupt+0x5b4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80003186:	fe f9 03 46 	ld.w	r9,pc[838]
8000318a:	fe f8 03 46 	ld.w	r8,pc[838]
8000318e:	90 0b       	ld.sh	r11,r8[0x0]
80003190:	92 0a       	ld.sh	r10,r9[0x0]
80003192:	f6 0a 00 0a 	add	r10,r11,r10
80003196:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80003198:	30 09       	mov	r9,0
8000319a:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000319c:	fe 69 01 60 	mov	r9,-130720
800031a0:	30 28       	mov	r8,2
800031a2:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
800031a4:	31 08       	mov	r8,16
800031a6:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800031a8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800031ac:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
800031ae:	fe 6a 01 f0 	mov	r10,-130576
800031b2:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800031b4:	12 98       	mov	r8,r9
800031b6:	e6 18 00 01 	andh	r8,0x1,COH
800031ba:	c0 21       	brne	800031be <udd_interrupt+0x2e6>
      cpu_irq_enable();
800031bc:	d5 03       	csrf	0x10
   }

	barrier();
800031be:	c6 79       	rjmp	8000348c <udd_interrupt+0x5b4>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
800031c0:	fe 68 01 30 	mov	r8,-130768
800031c4:	70 08       	ld.w	r8,r8[0x0]
800031c6:	e2 18 00 08 	andl	r8,0x8,COH
800031ca:	c1 80       	breq	800031fa <udd_interrupt+0x322>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800031cc:	30 89       	mov	r9,8
800031ce:	fe 68 01 60 	mov	r8,-130720
800031d2:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
800031d4:	fe 68 01 30 	mov	r8,-130768
800031d8:	70 08       	ld.w	r8,r8[0x0]
800031da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031de:	e0 81 01 57 	brne	8000348c <udd_interrupt+0x5b4>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800031e2:	fe f8 02 d2 	ld.w	r8,pc[722]
800031e6:	70 08       	ld.w	r8,r8[0x0]
800031e8:	58 38       	cp.w	r8,3
800031ea:	e0 81 01 51 	brne	8000348c <udd_interrupt+0x5b4>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800031ee:	e8 69 00 00 	mov	r9,524288
800031f2:	fe 68 01 f0 	mov	r8,-130576
800031f6:	91 09       	st.w	r8[0x0],r9
800031f8:	c4 a9       	rjmp	8000348c <udd_interrupt+0x5b4>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
800031fa:	fe 68 01 30 	mov	r8,-130768
800031fe:	70 08       	ld.w	r8,r8[0x0]
80003200:	e2 18 00 10 	andl	r8,0x10,COH
80003204:	c0 e1       	brne	80003220 <udd_interrupt+0x348>
80003206:	fe f7 02 d6 	ld.w	r7,pc[726]
8000320a:	0e 96       	mov	r6,r7
8000320c:	fe 6b 01 34 	mov	r11,-130764
80003210:	30 05       	mov	r5,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003212:	fe 6a 00 00 	mov	r10,-131072
80003216:	fc 14 02 00 	movh	r4,0x200
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000321a:	e0 63 10 00 	mov	r3,4096
8000321e:	c1 e8       	rjmp	8000325a <udd_interrupt+0x382>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80003220:	31 09       	mov	r9,16
80003222:	fe 68 01 60 	mov	r8,-130720
80003226:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80003228:	fe 68 01 30 	mov	r8,-130768
8000322c:	70 08       	ld.w	r8,r8[0x0]
8000322e:	e2 18 00 02 	andl	r8,0x2,COH
80003232:	e0 81 01 2d 	brne	8000348c <udd_interrupt+0x5b4>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80003236:	fe f8 02 7e 	ld.w	r8,pc[638]
8000323a:	70 08       	ld.w	r8,r8[0x0]
8000323c:	58 18       	cp.w	r8,1
8000323e:	c0 41       	brne	80003246 <udd_interrupt+0x36e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80003240:	f0 1f 00 a6 	mcall	800034d8 <udd_interrupt+0x600>
80003244:	c2 49       	rjmp	8000348c <udd_interrupt+0x5b4>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80003246:	58 48       	cp.w	r8,4
80003248:	e0 81 01 22 	brne	8000348c <udd_interrupt+0x5b4>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000324c:	e8 69 00 00 	mov	r9,524288
80003250:	fe 68 01 f0 	mov	r8,-130576
80003254:	91 09       	st.w	r8[0x0],r9
80003256:	c1 b9       	rjmp	8000348c <udd_interrupt+0x5b4>
80003258:	12 95       	mov	r5,r9
8000325a:	ea c9 ff ff 	sub	r9,r5,-1
8000325e:	0c 98       	mov	r8,r6
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003260:	74 4e       	ld.w	lr,r10[0x10]
80003262:	12 9c       	mov	r12,r9
80003264:	e8 05 09 45 	lsl	r5,r4,r5
80003268:	eb ee 00 0e 	and	lr,r5,lr
8000326c:	c1 d0       	breq	800032a6 <udd_interrupt+0x3ce>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000326e:	74 1e       	ld.w	lr,r10[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003270:	eb ee 00 0e 	and	lr,r5,lr
80003274:	c1 90       	breq	800032a6 <udd_interrupt+0x3ce>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
80003276:	a5 69       	lsl	r9,0x4
80003278:	e0 39 fd 00 	sub	r9,130304
8000327c:	72 3a       	ld.w	r10,r9[0xc]
8000327e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80003282:	e0 81 01 05 	brne	8000348c <udd_interrupt+0x5b4>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
80003286:	fe 6a 00 00 	mov	r10,-131072
8000328a:	95 55       	st.w	r10[0x14],r5
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000328c:	72 39       	ld.w	r9,r9[0xc]
8000328e:	b1 89       	lsr	r9,0x10
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
80003290:	ed fa 10 03 	ld.wne	r10,r6[0xc]
80003294:	f5 d9 e1 19 	subne	r9,r10,r9
80003298:	f1 f9 1a 03 	st.wne	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000329c:	f1 f9 1a 02 	st.wne	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
800032a0:	f0 1f 00 90 	mcall	800034e0 <udd_interrupt+0x608>
800032a4:	cf 48       	rjmp	8000348c <udd_interrupt+0x5b4>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
800032a6:	74 45       	ld.w	r5,r10[0x10]
800032a8:	e6 0c 09 4e 	lsl	lr,r3,r12
800032ac:	fd e5 00 05 	and	r5,lr,r5
800032b0:	c4 80       	breq	80003340 <udd_interrupt+0x468>
800032b2:	e0 75 fe d0 	mov	r5,130768
800032b6:	f6 05 00 01 	add	r1,r11,r5
800032ba:	f6 c5 ff 70 	sub	r5,r11,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
800032be:	6a 02       	ld.w	r2,r5[0x0]
800032c0:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800032c4:	c1 70       	breq	800032f2 <udd_interrupt+0x41a>
800032c6:	76 02       	ld.w	r2,r11[0x0]
800032c8:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800032cc:	c1 30       	breq	800032f2 <udd_interrupt+0x41a>
				udd_disable_in_send_interrupt(ep);
800032ce:	fe 6a 02 20 	mov	r10,-130528
800032d2:	e2 0a 00 09 	add	r9,r1,r10
800032d6:	30 1a       	mov	r10,1
800032d8:	93 0a       	st.w	r9[0x0],r10
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
800032da:	e0 31 fe a0 	sub	r1,130720
800032de:	83 0a       	st.w	r1[0x0],r10
				udd_ack_fifocon(ep);
800032e0:	e0 6a 40 00 	mov	r10,16384
800032e4:	93 0a       	st.w	r9[0x0],r10
				udd_ep_finish_job(ptr_job, false, ep);
800032e6:	18 9a       	mov	r10,r12
800032e8:	30 0b       	mov	r11,0
800032ea:	10 9c       	mov	r12,r8
800032ec:	f0 1f 00 7e 	mcall	800034e4 <udd_interrupt+0x60c>
800032f0:	cc e8       	rjmp	8000348c <udd_interrupt+0x5b4>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
800032f2:	6a 0c       	ld.w	r12,r5[0x0]
800032f4:	e2 1c 10 00 	andl	r12,0x1000,COH
800032f8:	c2 40       	breq	80003340 <udd_interrupt+0x468>
800032fa:	76 0c       	ld.w	r12,r11[0x0]
800032fc:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
80003300:	c2 01       	brne	80003340 <udd_interrupt+0x468>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003302:	fe 65 02 20 	mov	r5,-130528
80003306:	e2 05 00 09 	add	r9,r1,r5
8000330a:	e0 6a 10 00 	mov	r10,4096
8000330e:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_interrupt(ep);
80003310:	fe 69 00 00 	mov	r9,-131072
80003314:	93 5e       	st.w	r9[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80003316:	70 09       	ld.w	r9,r8[0x0]
80003318:	30 0a       	mov	r10,0
8000331a:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
8000331e:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_bank_autoswitch(ep);
80003320:	fe 6a 01 00 	mov	r10,-130816
80003324:	e2 0a 00 08 	add	r8,r1,r10
80003328:	70 09       	ld.w	r9,r8[0x0]
8000332a:	a9 d9       	cbr	r9,0x9
8000332c:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000332e:	e0 31 fe 10 	sub	r1,130576
80003332:	e8 68 00 00 	mov	r8,524288
80003336:	83 08       	st.w	r1[0x0],r8
				udd_reset_data_toggle(ep);
80003338:	e4 68 00 00 	mov	r8,262144
8000333c:	83 08       	st.w	r1[0x0],r8
8000333e:	ca 78       	rjmp	8000348c <udd_interrupt+0x5b4>
80003340:	2e c6       	sub	r6,-20
80003342:	2f cb       	sub	r11,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80003344:	58 39       	cp.w	r9,3
80003346:	c8 91       	brne	80003258 <udd_interrupt+0x380>
80003348:	ca d8       	rjmp	800034a2 <udd_interrupt+0x5ca>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
8000334a:	30 89       	mov	r9,8
8000334c:	fe 68 00 08 	mov	r8,-131064
80003350:	91 09       	st.w	r8[0x0],r9
80003352:	30 06       	mov	r6,0
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80003354:	30 15       	mov	r5,1
#  ifdef FREERTOS_USED
#    include "FreeRTOS.h"
#    include "task.h"
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80003356:	2f f6       	sub	r6,-1
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80003358:	0c 9a       	mov	r10,r6
8000335a:	0a 9b       	mov	r11,r5
8000335c:	0e 9c       	mov	r12,r7
8000335e:	f0 1f 00 62 	mcall	800034e4 <udd_interrupt+0x60c>
80003362:	2e c7       	sub	r7,-20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80003364:	58 36       	cp.w	r6,3
80003366:	cf 81       	brne	80003356 <udd_interrupt+0x47e>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80003368:	f0 1f 00 60 	mcall	800034e8 <udd_interrupt+0x610>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000336c:	fe 68 00 00 	mov	r8,-131072
80003370:	70 09       	ld.w	r9,r8[0x0]
80003372:	e0 19 ff 80 	andl	r9,0xff80
80003376:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80003378:	70 09       	ld.w	r9,r8[0x0]
8000337a:	a7 b9       	sbr	r9,0x7
8000337c:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000337e:	fe 69 01 00 	mov	r9,-130816
80003382:	72 0a       	ld.w	r10,r9[0x0]
80003384:	30 8c       	mov	r12,8
80003386:	34 0b       	mov	r11,64
80003388:	f6 0c 0c 4b 	max	r11,r11,r12
8000338c:	e0 6c 04 00 	mov	r12,1024
80003390:	f6 0c 0d 4b 	min	r11,r11,r12
80003394:	a1 7b       	lsl	r11,0x1
80003396:	20 1b       	sub	r11,1
80003398:	f6 0b 12 00 	clz	r11,r11
8000339c:	f6 0b 11 1c 	rsub	r11,r11,28
800033a0:	a5 6b       	lsl	r11,0x4
800033a2:	e2 1b 19 7c 	andl	r11,0x197c,COH
800033a6:	e0 1a e6 83 	andl	r10,0xe683
800033aa:	f7 ea 10 0a 	or	r10,r11,r10
800033ae:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
800033b0:	72 0a       	ld.w	r10,r9[0x0]
800033b2:	a1 ba       	sbr	r10,0x1
800033b4:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
800033b6:	70 79       	ld.w	r9,r8[0x1c]
800033b8:	a1 a9       	sbr	r9,0x0
800033ba:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033bc:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800033c0:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
800033c2:	fe 69 01 f0 	mov	r9,-130576
800033c6:	30 4b       	mov	r11,4
800033c8:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
800033ca:	30 2b       	mov	r11,2
800033cc:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
800033ce:	e0 69 10 00 	mov	r9,4096
800033d2:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800033d4:	14 98       	mov	r8,r10
800033d6:	e6 18 00 01 	andh	r8,0x1,COH
800033da:	c0 21       	brne	800033de <udd_interrupt+0x506>
      cpu_irq_enable();
800033dc:	d5 03       	csrf	0x10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
800033de:	f0 1f 00 38 	mcall	800034bc <udd_interrupt+0x5e4>
		goto udd_interrupt_end;
800033e2:	c5 58       	rjmp	8000348c <udd_interrupt+0x5b4>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800033e4:	fe 68 00 10 	mov	r8,-131056
800033e8:	70 08       	ld.w	r8,r8[0x0]
800033ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033ee:	c1 80       	breq	8000341e <udd_interrupt+0x546>
800033f0:	fe 68 00 04 	mov	r8,-131068
800033f4:	70 08       	ld.w	r8,r8[0x0]
800033f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033fa:	c1 20       	breq	8000341e <udd_interrupt+0x546>
		otg_unfreeze_clock();
800033fc:	fe 68 08 00 	mov	r8,-129024
80003400:	70 09       	ld.w	r9,r8[0x0]
80003402:	af c9       	cbr	r9,0xe
80003404:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80003406:	30 1a       	mov	r10,1
80003408:	fe 69 00 14 	mov	r9,-131052
8000340c:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
8000340e:	31 0a       	mov	r10,16
80003410:	fe 69 00 18 	mov	r9,-131048
80003414:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80003416:	70 09       	ld.w	r9,r8[0x0]
80003418:	af a9       	sbr	r9,0xe
8000341a:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
8000341c:	c3 88       	rjmp	8000348c <udd_interrupt+0x5b4>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000341e:	fe 68 00 10 	mov	r8,-131056
80003422:	70 08       	ld.w	r8,r8[0x0]
80003424:	e2 18 00 10 	andl	r8,0x10,COH
80003428:	c1 50       	breq	80003452 <udd_interrupt+0x57a>
8000342a:	fe 68 00 04 	mov	r8,-131068
8000342e:	70 08       	ld.w	r8,r8[0x0]
80003430:	e2 18 00 10 	andl	r8,0x10,COH
80003434:	c0 f0       	breq	80003452 <udd_interrupt+0x57a>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003436:	fe 68 08 00 	mov	r8,-129024
8000343a:	70 09       	ld.w	r9,r8[0x0]
8000343c:	af c9       	cbr	r9,0xe
8000343e:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80003440:	31 09       	mov	r9,16
80003442:	fe 68 00 14 	mov	r8,-131052
80003446:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80003448:	30 19       	mov	r9,1
8000344a:	fe 68 00 18 	mov	r8,-131048
8000344e:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80003450:	c1 e8       	rjmp	8000348c <udd_interrupt+0x5b4>
	}

	if (Is_otg_vbus_transition()) {
80003452:	fe 68 08 04 	mov	r8,-129020
80003456:	70 08       	ld.w	r8,r8[0x0]
80003458:	e2 18 00 02 	andl	r8,0x2,COH
8000345c:	c1 80       	breq	8000348c <udd_interrupt+0x5b4>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
8000345e:	fe 68 08 00 	mov	r8,-129024
80003462:	70 09       	ld.w	r9,r8[0x0]
80003464:	af c9       	cbr	r9,0xe
80003466:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80003468:	30 2a       	mov	r10,2
8000346a:	fe 69 08 08 	mov	r9,-129016
8000346e:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80003470:	70 09       	ld.w	r9,r8[0x0]
80003472:	af a9       	sbr	r9,0xe
80003474:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
80003476:	fe 68 08 04 	mov	r8,-129020
8000347a:	70 08       	ld.w	r8,r8[0x0]
8000347c:	e2 18 08 00 	andl	r8,0x800,COH
80003480:	c0 40       	breq	80003488 <udd_interrupt+0x5b0>
			udd_attach();
80003482:	f0 1f 00 1b 	mcall	800034ec <udd_interrupt+0x614>
80003486:	c0 38       	rjmp	8000348c <udd_interrupt+0x5b4>
		} else {
			udd_detach();
80003488:	f0 1f 00 1a 	mcall	800034f0 <udd_interrupt+0x618>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
8000348c:	fe 68 00 00 	mov	r8,-131072
80003490:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80003494:	e3 cd 40 fe 	ldm	sp++,r1-r7,lr
80003498:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000349a:	48 e9       	lddpc	r9,800034d0 <udd_interrupt+0x5f8>
8000349c:	b2 08       	st.h	r9[0x0],r8
8000349e:	fe 9f fe 3f 	bral	8000311c <udd_interrupt+0x244>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800034a2:	fe 68 00 04 	mov	r8,-131068
800034a6:	70 08       	ld.w	r8,r8[0x0]
800034a8:	e2 18 00 08 	andl	r8,0x8,COH
800034ac:	c9 c0       	breq	800033e4 <udd_interrupt+0x50c>
800034ae:	c4 eb       	rjmp	8000334a <udd_interrupt+0x472>
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	4b 2c       	lddpc	r12,80003578 <switch_pll_on+0x20>
800034b4:	00 00       	add	r0,r0
800034b6:	07 c4       	ld.ub	r4,r3[0x4]
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	26 ac       	sub	r12,106
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	2c 94       	sub	r4,-55
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	26 94       	sub	r4,105
800034c4:	00 00       	add	r0,r0
800034c6:	12 04       	add	r4,r9
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	4d ac       	lddpc	r12,80003630 <set_trx_state+0x48>
800034cc:	00 00       	add	r0,r0
800034ce:	07 80       	ld.ub	r0,r3[0x0]
800034d0:	00 00       	add	r0,r0
800034d2:	07 c0       	ld.ub	r0,r3[0x4]
800034d4:	80 00       	ld.sh	r0,r0[0x0]
800034d6:	2c cc       	sub	r12,-52
800034d8:	80 00       	ld.sh	r0,r0[0x0]
800034da:	2c 64       	sub	r4,-58
800034dc:	00 00       	add	r0,r0
800034de:	07 84       	ld.ub	r4,r3[0x0]
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	28 a4       	sub	r4,-118
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	26 c0       	sub	r0,108
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	4d 4c       	lddpc	r12,80003638 <set_trx_state+0x50>
800034ec:	80 00       	ld.sh	r0,r0[0x0]
800034ee:	2c 0c       	sub	r12,-64
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	24 58       	sub	r8,69

800034f4 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800034f4:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800034f8:	fe c0 d2 f8 	sub	r0,pc,-11528

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800034fc:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003500:	d5 53       	csrf	0x15
  cp      r0, r1
80003502:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003504:	e0 61 06 70 	mov	r1,1648
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003508:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000350a:	c0 72       	brcc	80003518 <idata_load_loop_end>
  cp      r0, r1
8000350c:	fe c2 cf 6c 	sub	r2,pc,-12436

80003510 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003510:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003512:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003514:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003516:	cf d3       	brcs	80003510 <idata_load_loop>

80003518 <idata_load_loop_end>:
  mov     r2, 0
80003518:	e0 60 06 70 	mov	r0,1648
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000351c:	e0 61 12 a8 	mov	r1,4776
  cp      r0, r1
  brlo    udata_clear_loop
80003520:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003522:	c0 62       	brcc	8000352e <udata_clear_loop_end>
80003524:	30 02       	mov	r2,0
80003526:	30 03       	mov	r3,0

80003528 <udata_clear_loop>:
80003528:	a1 22       	st.d	r0++,r2
8000352a:	02 30       	cp.w	r0,r1
8000352c:	cf e3       	brcs	80003528 <udata_clear_loop>

8000352e <udata_clear_loop_end>:
8000352e:	fe cf df d2 	sub	pc,pc,-8238
80003532:	d7 03       	nop

80003534 <handle_tal_state>:

	set_trx_state(CMD_RX_ON);
}

void handle_tal_state(void)
{
80003534:	d4 01       	pushm	lr
	/* Handle the TAL state machines */
	switch (tal_state) {
80003536:	48 78       	lddpc	r8,80003550 <handle_tal_state+0x1c>
80003538:	11 89       	ld.ub	r9,r8[0x0]
8000353a:	30 28       	mov	r8,2
8000353c:	f0 09 18 00 	cp.b	r9,r8
80003540:	c0 71       	brne	8000354e <handle_tal_state+0x1a>
	}
}

static void tx_end_handling(void)
{
	tal_state = TAL_IDLE;
80003542:	30 09       	mov	r9,0
80003544:	48 38       	lddpc	r8,80003550 <handle_tal_state+0x1c>
80003546:	b0 89       	st.b	r8[0x0],r9

	/* call back function is called based on tx status */
	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		AT86RFX_TX_STATUS_NOTIFY(AT86RFX_SUCCESS);
80003548:	30 0c       	mov	r12,0
8000354a:	f0 1f 00 03 	mcall	80003554 <handle_tal_state+0x20>
8000354e:	d8 02       	popm	pc
80003550:	00 00       	add	r0,r0
80003552:	07 c9       	ld.ub	r9,r3[0x4]
80003554:	80 00       	ld.sh	r0,r0[0x0]
80003556:	55 10       	stdsp	sp[0x144],r0

80003558 <switch_pll_on>:

	return TRX_SUCCESS;
}

static void switch_pll_on(void)
{
80003558:	d4 21       	pushm	r4-r7,lr
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure is applicable */
	if (pal_trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
8000355a:	30 0a       	mov	r10,0
8000355c:	31 fb       	mov	r11,31
8000355e:	30 1c       	mov	r12,1
80003560:	f0 1f 00 1e 	mcall	800035d8 <switch_pll_on+0x80>
80003564:	30 88       	mov	r8,8
80003566:	f0 0c 18 00 	cp.b	r12,r8
8000356a:	c3 51       	brne	800035d4 <switch_pll_on+0x7c>
		Assert("Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	pal_trx_reg_read(RG_IRQ_STATUS);	/* clear PLL lock bit */
8000356c:	30 fc       	mov	r12,15
8000356e:	f0 1f 00 1c 	mcall	800035dc <switch_pll_on+0x84>

	/* Switch PLL on */
	pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
80003572:	30 9b       	mov	r11,9
80003574:	30 2c       	mov	r12,2
80003576:	f0 1f 00 1b 	mcall	800035e0 <switch_pll_on+0x88>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000357a:	ee 78 42 40 	mov	r8,1000000
8000357e:	30 09       	mov	r9,0
80003580:	e0 6a 46 3f 	mov	r10,17983
80003584:	ea 1a 12 d7 	orh	r10,0x12d7
80003588:	30 3b       	mov	r11,3
8000358a:	f0 1f 00 17 	mcall	800035e4 <switch_pll_on+0x8c>
8000358e:	14 94       	mov	r4,r10
80003590:	30 07       	mov	r7,0

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t) pal_trx_reg_read(RG_IRQ_STATUS);
80003592:	30 f5       	mov	r5,15

		/* Wait a time interval of typical value for state change. */
		DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
80003594:	30 36       	mov	r6,3
	/* Switch PLL on */
	pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t) pal_trx_reg_read(RG_IRQ_STATUS);
80003596:	0a 9c       	mov	r12,r5
80003598:	f0 1f 00 11 	mcall	800035dc <switch_pll_on+0x84>

		if (irq_status & TRX_IRQ_PLL_LOCK) {
8000359c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800035a0:	c1 a1       	brne	800035d4 <switch_pll_on+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800035a2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800035a6:	f0 04 00 0a 	add	r10,r8,r4
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035aa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035ae:	14 38       	cp.w	r8,r10
800035b0:	e0 88 00 08 	brls	800035c0 <switch_pll_on+0x68>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035b4:	12 38       	cp.w	r8,r9
800035b6:	fe 98 ff fa 	brls	800035aa <switch_pll_on+0x52>
800035ba:	12 3a       	cp.w	r10,r9
800035bc:	c0 73       	brcs	800035ca <switch_pll_on+0x72>
800035be:	cf 6b       	rjmp	800035aa <switch_pll_on+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035c0:	12 38       	cp.w	r8,r9
800035c2:	e0 8b 00 04 	brhi	800035ca <switch_pll_on+0x72>
800035c6:	12 3a       	cp.w	r10,r9
800035c8:	cf 12       	brcc	800035aa <switch_pll_on+0x52>
		}

		/* Wait a time interval of typical value for state change. */
		DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);

		poll_counter++;
800035ca:	2f f7       	sub	r7,-1
800035cc:	5c 57       	castu.b	r7
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
800035ce:	ec 07 18 00 	cp.b	r7,r6
800035d2:	ce 21       	brne	80003596 <switch_pll_on+0x3e>
800035d4:	d8 22       	popm	r4-r7,pc
800035d6:	00 00       	add	r0,r0
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	3f 9c       	mov	r12,-7
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	3e b0       	mov	r0,-21
800035e0:	80 00       	ld.sh	r0,r0[0x0]
800035e2:	3d dc       	mov	r12,-35
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	56 44       	stdsp	sp[0x190],r4

800035e8 <set_trx_state>:
	/* The TRX_END interrupt of the transceiver is enabled. */
	pal_trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
}

static tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
800035e8:	eb cd 40 f8 	pushm	r3-r7,lr
800035ec:	18 97       	mov	r7,r12
	tal_trx_status = (tal_trx_status_t) pal_trx_bit_read(SR_TRX_STATUS);
800035ee:	30 0a       	mov	r10,0
800035f0:	31 fb       	mov	r11,31
800035f2:	30 1c       	mov	r12,1
800035f4:	f0 1f 00 64 	mcall	80003784 <set_trx_state+0x19c>
800035f8:	4e 48       	lddpc	r8,80003788 <set_trx_state+0x1a0>
800035fa:	b0 8c       	st.b	r8[0x0],r12
	/*
	 * State transition is handled among FORCE_TRX_OFF, RX_ON and PLL_ON.
	 * These are the essential states required for a basic transmission
	 * and reception.
	 */
	switch (trx_cmd) {	/* requested state */
800035fc:	30 68       	mov	r8,6
800035fe:	f0 07 18 00 	cp.b	r7,r8
80003602:	c6 10       	breq	800036c4 <set_trx_state+0xdc>
80003604:	30 98       	mov	r8,9
80003606:	f0 07 18 00 	cp.b	r7,r8
8000360a:	c2 f0       	breq	80003668 <set_trx_state+0x80>
8000360c:	30 38       	mov	r8,3
8000360e:	f0 07 18 00 	cp.b	r7,r8
80003612:	e0 81 00 a8 	brne	80003762 <set_trx_state+0x17a>
	case CMD_FORCE_TRX_OFF:
		/* Handling FORCE_TRX_OFF state */
		switch (tal_trx_status) {
80003616:	30 88       	mov	r8,8
80003618:	f0 0c 18 00 	cp.b	r12,r8
8000361c:	e0 80 00 a3 	breq	80003762 <set_trx_state+0x17a>
		case TRX_OFF:
			/* Do nothing - maintain the previous state */
			break;

		default:
			pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
80003620:	30 3b       	mov	r11,3
80003622:	30 2c       	mov	r12,2
80003624:	f0 1f 00 5a 	mcall	8000378c <set_trx_state+0x1a4>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003628:	ee 78 42 40 	mov	r8,1000000
8000362c:	30 09       	mov	r9,0
8000362e:	e0 6a 56 bf 	mov	r10,22207
80003632:	ea 1a 03 fe 	orh	r10,0x3fe
80003636:	30 0b       	mov	r11,0
80003638:	f0 1f 00 56 	mcall	80003790 <set_trx_state+0x1a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000363c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003640:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003644:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003648:	14 38       	cp.w	r8,r10
8000364a:	e0 88 00 09 	brls	8000365c <set_trx_state+0x74>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000364e:	12 38       	cp.w	r8,r9
80003650:	fe 98 ff fa 	brls	80003644 <set_trx_state+0x5c>
80003654:	12 3a       	cp.w	r10,r9
80003656:	e0 83 00 86 	brlo	80003762 <set_trx_state+0x17a>
8000365a:	cf 5b       	rjmp	80003644 <set_trx_state+0x5c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000365c:	12 38       	cp.w	r8,r9
8000365e:	e0 8b 00 82 	brhi	80003762 <set_trx_state+0x17a>
80003662:	12 3a       	cp.w	r10,r9
80003664:	c7 f3       	brcs	80003762 <set_trx_state+0x17a>
80003666:	ce fb       	rjmp	80003644 <set_trx_state+0x5c>
		}
		break;

	case CMD_PLL_ON:
		/* Handling PLL_ON state */
		switch (tal_trx_status) {
80003668:	30 68       	mov	r8,6
8000366a:	f0 0c 18 00 	cp.b	r12,r8
8000366e:	c0 80       	breq	8000367e <set_trx_state+0x96>
80003670:	30 88       	mov	r8,8
80003672:	f0 0c 18 00 	cp.b	r12,r8
80003676:	c7 61       	brne	80003762 <set_trx_state+0x17a>
		case PLL_ON:
			/* Do nothing - maintain the previous state */
			break;

		case TRX_OFF:
			switch_pll_on();
80003678:	f0 1f 00 47 	mcall	80003794 <set_trx_state+0x1ac>
			break;
8000367c:	c7 38       	rjmp	80003762 <set_trx_state+0x17a>

		case RX_ON:
			pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
8000367e:	30 9b       	mov	r11,9
80003680:	30 2c       	mov	r12,2
80003682:	f0 1f 00 43 	mcall	8000378c <set_trx_state+0x1a4>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003686:	ee 78 42 40 	mov	r8,1000000
8000368a:	30 09       	mov	r9,0
8000368c:	e0 6a 56 bf 	mov	r10,22207
80003690:	ea 1a 03 fe 	orh	r10,0x3fe
80003694:	30 0b       	mov	r11,0
80003696:	f0 1f 00 3f 	mcall	80003790 <set_trx_state+0x1a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000369a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000369e:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800036a2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800036a6:	14 38       	cp.w	r8,r10
800036a8:	e0 88 00 08 	brls	800036b8 <set_trx_state+0xd0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800036ac:	12 38       	cp.w	r8,r9
800036ae:	fe 98 ff fa 	brls	800036a2 <set_trx_state+0xba>
800036b2:	12 3a       	cp.w	r10,r9
800036b4:	c5 73       	brcs	80003762 <set_trx_state+0x17a>
800036b6:	cf 6b       	rjmp	800036a2 <set_trx_state+0xba>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800036b8:	12 38       	cp.w	r8,r9
800036ba:	e0 8b 00 54 	brhi	80003762 <set_trx_state+0x17a>
800036be:	12 3a       	cp.w	r10,r9
800036c0:	c5 13       	brcs	80003762 <set_trx_state+0x17a>
800036c2:	cf 0b       	rjmp	800036a2 <set_trx_state+0xba>
		}
		break;

	case CMD_RX_ON:
		/* Handling the RX_ON state */
		switch (tal_trx_status) {
800036c4:	30 88       	mov	r8,8
800036c6:	f0 0c 18 00 	cp.b	r12,r8
800036ca:	c2 80       	breq	8000371a <set_trx_state+0x132>
800036cc:	30 98       	mov	r8,9
800036ce:	f0 0c 18 00 	cp.b	r12,r8
800036d2:	c4 81       	brne	80003762 <set_trx_state+0x17a>
		case RX_ON:
			/* Do nothing - maintain the previous state */
			break;

		case PLL_ON:
			pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
800036d4:	30 6b       	mov	r11,6
800036d6:	30 2c       	mov	r12,2
800036d8:	f0 1f 00 2d 	mcall	8000378c <set_trx_state+0x1a4>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800036dc:	ee 78 42 40 	mov	r8,1000000
800036e0:	30 09       	mov	r9,0
800036e2:	e0 6a 56 bf 	mov	r10,22207
800036e6:	ea 1a 03 fe 	orh	r10,0x3fe
800036ea:	30 0b       	mov	r11,0
800036ec:	f0 1f 00 29 	mcall	80003790 <set_trx_state+0x1a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036f0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036f4:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800036f8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800036fc:	14 38       	cp.w	r8,r10
800036fe:	e0 88 00 08 	brls	8000370e <set_trx_state+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003702:	12 38       	cp.w	r8,r9
80003704:	fe 98 ff fa 	brls	800036f8 <set_trx_state+0x110>
80003708:	12 3a       	cp.w	r10,r9
8000370a:	c2 c3       	brcs	80003762 <set_trx_state+0x17a>
8000370c:	cf 6b       	rjmp	800036f8 <set_trx_state+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000370e:	12 38       	cp.w	r8,r9
80003710:	e0 8b 00 29 	brhi	80003762 <set_trx_state+0x17a>
80003714:	12 3a       	cp.w	r10,r9
80003716:	c2 63       	brcs	80003762 <set_trx_state+0x17a>
80003718:	cf 0b       	rjmp	800036f8 <set_trx_state+0x110>
			PAL_WAIT_1_US();
			break;

		case TRX_OFF:
			switch_pll_on();
8000371a:	f0 1f 00 1f 	mcall	80003794 <set_trx_state+0x1ac>
			pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
8000371e:	30 6b       	mov	r11,6
80003720:	30 2c       	mov	r12,2
80003722:	f0 1f 00 1b 	mcall	8000378c <set_trx_state+0x1a4>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003726:	ee 78 42 40 	mov	r8,1000000
8000372a:	30 09       	mov	r9,0
8000372c:	e0 6a 56 bf 	mov	r10,22207
80003730:	ea 1a 03 fe 	orh	r10,0x3fe
80003734:	30 0b       	mov	r11,0
80003736:	f0 1f 00 17 	mcall	80003790 <set_trx_state+0x1a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000373a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000373e:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003742:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003746:	14 38       	cp.w	r8,r10
80003748:	e0 88 00 08 	brls	80003758 <set_trx_state+0x170>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000374c:	12 38       	cp.w	r8,r9
8000374e:	fe 98 ff fa 	brls	80003742 <set_trx_state+0x15a>
80003752:	12 3a       	cp.w	r10,r9
80003754:	c0 73       	brcs	80003762 <set_trx_state+0x17a>
80003756:	cf 6b       	rjmp	80003742 <set_trx_state+0x15a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003758:	12 38       	cp.w	r8,r9
8000375a:	e0 8b 00 04 	brhi	80003762 <set_trx_state+0x17a>
8000375e:	12 3a       	cp.w	r10,r9
80003760:	cf 12       	brcc	80003742 <set_trx_state+0x15a>
		break;
	}

	/* Hold till the state transition is complete */
	do {
		tal_trx_status = (tal_trx_status_t)
80003762:	30 06       	mov	r6,0
80003764:	31 f5       	mov	r5,31
80003766:	30 14       	mov	r4,1
80003768:	48 83       	lddpc	r3,80003788 <set_trx_state+0x1a0>
				pal_trx_bit_read(SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
8000376a:	31 f7       	mov	r7,31
		break;
	}

	/* Hold till the state transition is complete */
	do {
		tal_trx_status = (tal_trx_status_t)
8000376c:	0c 9a       	mov	r10,r6
8000376e:	0a 9b       	mov	r11,r5
80003770:	08 9c       	mov	r12,r4
80003772:	f0 1f 00 05 	mcall	80003784 <set_trx_state+0x19c>
80003776:	a6 8c       	st.b	r3[0x0],r12
				pal_trx_bit_read(SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
80003778:	ee 0c 18 00 	cp.b	r12,r7
8000377c:	cf 80       	breq	8000376c <set_trx_state+0x184>

	return tal_trx_status;
}
8000377e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003782:	00 00       	add	r0,r0
80003784:	80 00       	ld.sh	r0,r0[0x0]
80003786:	3f 9c       	mov	r12,-7
80003788:	00 00       	add	r0,r0
8000378a:	07 ca       	ld.ub	r10,r3[0x4]
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	3d dc       	mov	r12,-35
80003790:	80 00       	ld.sh	r0,r0[0x0]
80003792:	56 44       	stdsp	sp[0x190],r4
80003794:	80 00       	ld.sh	r0,r0[0x0]
80003796:	35 58       	mov	r8,85

80003798 <tx_frame_config>:
	 */
	set_trx_state(CMD_RX_ON);
}

void tx_frame_config(void)
{
80003798:	eb cd 40 c0 	pushm	r6-r7,lr
	tal_trx_status_t trx_status;

	/* Set trx to PLL_ON state to initiate transmission procedure */
	do {
		trx_status = set_trx_state(CMD_PLL_ON);
8000379c:	30 96       	mov	r6,9
	} while (trx_status != PLL_ON);
8000379e:	30 97       	mov	r7,9
{
	tal_trx_status_t trx_status;

	/* Set trx to PLL_ON state to initiate transmission procedure */
	do {
		trx_status = set_trx_state(CMD_PLL_ON);
800037a0:	0c 9c       	mov	r12,r6
800037a2:	f0 1f 00 0a 	mcall	800037c8 <tx_frame_config+0x30>
	} while (trx_status != PLL_ON);
800037a6:	ee 0c 18 00 	cp.b	r12,r7
800037aa:	cf b1       	brne	800037a0 <tx_frame_config+0x8>

	tal_state = TAL_TX_AUTO;
800037ac:	30 19       	mov	r9,1
800037ae:	48 88       	lddpc	r8,800037cc <tx_frame_config+0x34>
800037b0:	b0 89       	st.b	r8[0x0],r9

	/* Toggle the SLP_TR pin triggering transmission. */
	SLP_TR_HIGH();
800037b2:	31 3c       	mov	r12,19
800037b4:	f0 1f 00 07 	mcall	800037d0 <tx_frame_config+0x38>
	WAIT_65_NS();
800037b8:	d7 03       	nop
800037ba:	d7 03       	nop
	SLP_TR_LOW();
800037bc:	31 3c       	mov	r12,19
800037be:	f0 1f 00 06 	mcall	800037d4 <tx_frame_config+0x3c>
}
800037c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037c6:	00 00       	add	r0,r0
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	35 e8       	mov	r8,94
800037cc:	00 00       	add	r0,r0
800037ce:	07 c9       	ld.ub	r9,r3[0x4]
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	22 14       	sub	r4,33
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	22 2a       	sub	r10,34

800037d8 <trx_irq_handler_cb>:

	return tal_trx_status;
}

void trx_irq_handler_cb(void)
{
800037d8:	d4 01       	pushm	lr
800037da:	20 1d       	sub	sp,4
	trx_irq_reason_t trx_irq_cause;

	trx_irq_cause = (trx_irq_reason_t) pal_trx_reg_read(RG_IRQ_STATUS);
800037dc:	30 fc       	mov	r12,15
800037de:	f0 1f 00 19 	mcall	80003840 <trx_irq_handler_cb+0x68>

	if (trx_irq_cause & TRX_IRQ_TRX_END) {
800037e2:	e2 1c 00 08 	andl	r12,0x8,COH
800037e6:	c2 b0       	breq	8000383c <trx_irq_handler_cb+0x64>
		/*
		 * TRX_END reason depends on if the trx is currently used for
		 * transmission or reception.
		 */
		if (tal_state == TAL_TX_AUTO) {
800037e8:	49 78       	lddpc	r8,80003844 <trx_irq_handler_cb+0x6c>
800037ea:	11 89       	ld.ub	r9,r8[0x0]
800037ec:	30 18       	mov	r8,1
800037ee:	f0 09 18 00 	cp.b	r9,r8
800037f2:	c0 81       	brne	80003802 <trx_irq_handler_cb+0x2a>
}

static void handle_tx_end_irq(void)
{
	// Trx has handled the entire transmission incl. CSMA
	tal_state = TAL_TX_END;	// Further handling is done by tx_end_handling()
800037f4:	30 29       	mov	r9,2
800037f6:	49 48       	lddpc	r8,80003844 <trx_irq_handler_cb+0x6c>
800037f8:	b0 89       	st.b	r8[0x0],r9

	/*
	 * After transmission has finished, switch receiver on again.
	 */
	set_trx_state(CMD_RX_ON);
800037fa:	30 6c       	mov	r12,6
800037fc:	f0 1f 00 13 	mcall	80003848 <trx_irq_handler_cb+0x70>
80003800:	c1 e8       	rjmp	8000383c <trx_irq_handler_cb+0x64>
	uint8_t phy_frame_len;

	uint8_t *rx_frame_ptr = at86rfx_rx_buffer;

	/* Perform FCS check for frame validation */
	if (CRC16_NOT_VALID == pal_trx_bit_read(SR_RX_CRC_VALID)) {
80003802:	30 7a       	mov	r10,7
80003804:	e0 6b 00 80 	mov	r11,128
80003808:	30 6c       	mov	r12,6
8000380a:	f0 1f 00 11 	mcall	8000384c <trx_irq_handler_cb+0x74>
8000380e:	c1 70       	breq	8000383c <trx_irq_handler_cb+0x64>
		return;
	}

	/* Get frame length from transceiver. */
	pal_trx_frame_read(&phy_frame_len, LENGTH_FIELD_LEN);
80003810:	30 1b       	mov	r11,1
80003812:	fa cc ff fd 	sub	r12,sp,-3
80003816:	f0 1f 00 0f 	mcall	80003850 <trx_irq_handler_cb+0x78>

	/* Check for valid frame length. */
	if (phy_frame_len > PHY_MAX_LENGTH) {
8000381a:	1b b8       	ld.ub	r8,sp[0x3]
8000381c:	30 09       	mov	r9,0
8000381e:	f2 08 18 00 	cp.b	r8,r9
80003822:	c0 d5       	brlt	8000383c <trx_irq_handler_cb+0x64>
		return;
	}

	/* Frame read from transceiver buffer. */
	pal_trx_frame_read(rx_frame_ptr, LENGTH_FIELD_LEN + phy_frame_len);
80003824:	2f f8       	sub	r8,-1
80003826:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000382a:	48 bc       	lddpc	r12,80003854 <trx_irq_handler_cb+0x7c>
8000382c:	f0 1f 00 09 	mcall	80003850 <trx_irq_handler_cb+0x78>

	/* Set flag indicating received frame to be handled. */
	at86rfx_frame_rx = true;
80003830:	30 19       	mov	r9,1
80003832:	48 a8       	lddpc	r8,80003858 <trx_irq_handler_cb+0x80>
80003834:	b0 89       	st.b	r8[0x0],r9

	set_trx_state(CMD_RX_ON);
80003836:	30 6c       	mov	r12,6
80003838:	f0 1f 00 04 	mcall	80003848 <trx_irq_handler_cb+0x70>
		} else {	/* Other tal_state than TAL_TX_... */
			/* Handle rx interrupt. */
			handle_received_frame_irq();
		}
	}
}
8000383c:	2f fd       	sub	sp,-4
8000383e:	d8 02       	popm	pc
80003840:	80 00       	ld.sh	r0,r0[0x0]
80003842:	3e b0       	mov	r0,-21
80003844:	00 00       	add	r0,r0
80003846:	07 c9       	ld.ub	r9,r3[0x4]
80003848:	80 00       	ld.sh	r0,r0[0x0]
8000384a:	35 e8       	mov	r8,94
8000384c:	80 00       	ld.sh	r0,r0[0x0]
8000384e:	3f 9c       	mov	r12,-7
80003850:	80 00       	ld.sh	r0,r0[0x0]
80003852:	3e 48       	mov	r8,-28
80003854:	00 00       	add	r0,r0
80003856:	12 1c       	sub	r12,r9
80003858:	00 00       	add	r0,r0
8000385a:	07 cb       	ld.ub	r11,r3[0x4]

8000385c <tal_init>:
 */
static void tx_end_handling(void);


trx_retval_t tal_init(void)
{
8000385c:	d4 31       	pushm	r0-r7,lr
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* Ensure control lines have correct levels. */
	RST_HIGH();
8000385e:	31 1c       	mov	r12,17
80003860:	f0 1f 00 e5 	mcall	80003bf4 <tal_init+0x398>
	SLP_TR_LOW();
80003864:	31 3c       	mov	r12,19
80003866:	f0 1f 00 e5 	mcall	80003bf8 <tal_init+0x39c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000386a:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000386e:	e0 65 01 4a 	mov	r5,330
80003872:	e0 69 14 80 	mov	r9,5248
80003876:	ea 19 03 ef 	orh	r9,0x3ef
8000387a:	f2 05 06 44 	mulu.d	r4,r9,r5
8000387e:	ee 78 42 40 	mov	r8,1000000
80003882:	30 09       	mov	r9,0
80003884:	ee 7a 42 3f 	mov	r10,999999
80003888:	30 0b       	mov	r11,0
8000388a:	e8 0a 00 0a 	add	r10,r4,r10
8000388e:	ea 0b 00 4b 	adc	r11,r5,r11
80003892:	f0 1f 00 db 	mcall	80003bfc <tal_init+0x3a0>
80003896:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000389a:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000389e:	14 37       	cp.w	r7,r10
800038a0:	e0 88 00 09 	brls	800038b2 <tal_init+0x56>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800038a4:	10 37       	cp.w	r7,r8
800038a6:	fe 98 ff fa 	brls	8000389a <tal_init+0x3e>
800038aa:	10 3a       	cp.w	r10,r8
800038ac:	e0 83 01 3b 	brlo	80003b22 <tal_init+0x2c6>
800038b0:	cf 5b       	rjmp	8000389a <tal_init+0x3e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800038b2:	10 37       	cp.w	r7,r8
800038b4:	e0 8b 01 37 	brhi	80003b22 <tal_init+0x2c6>
800038b8:	10 3a       	cp.w	r10,r8
800038ba:	e0 83 01 34 	brlo	80003b22 <tal_init+0x2c6>
800038be:	ce eb       	rjmp	8000389a <tal_init+0x3e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800038c0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800038c4:	14 38       	cp.w	r8,r10
800038c6:	e0 88 00 09 	brls	800038d8 <tal_init+0x7c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800038ca:	12 38       	cp.w	r8,r9
800038cc:	fe 98 ff fa 	brls	800038c0 <tal_init+0x64>
800038d0:	12 3a       	cp.w	r10,r9
800038d2:	e0 83 01 42 	brlo	80003b56 <tal_init+0x2fa>
800038d6:	cf 5b       	rjmp	800038c0 <tal_init+0x64>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800038d8:	12 38       	cp.w	r8,r9
800038da:	e0 8b 01 3e 	brhi	80003b56 <tal_init+0x2fa>
800038de:	12 3a       	cp.w	r10,r9
800038e0:	e0 83 01 3b 	brlo	80003b56 <tal_init+0x2fa>
800038e4:	ce eb       	rjmp	800038c0 <tal_init+0x64>
		if (poll_counter == P_ON_TO_CLKM_ATTEMPTS) {
			return TRX_FAILURE;
		}
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);
		poll_counter++;
800038e6:	2f f5       	sub	r5,-1
800038e8:	5c 55       	castu.b	r5
	RST_HIGH();

	/* Verify that TRX_OFF can be written */
	do {
		/* Wait not more than max. value of TR1. */
		if (poll_counter == P_ON_TO_CLKM_ATTEMPTS) {
800038ea:	e8 05 18 00 	cp.b	r5,r4
800038ee:	e0 80 01 19 	breq	80003b20 <tal_init+0x2c4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800038f2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800038f6:	f0 02 00 0a 	add	r10,r8,r2
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800038fa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800038fe:	14 38       	cp.w	r8,r10
80003900:	e0 88 00 09 	brls	80003912 <tal_init+0xb6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003904:	12 38       	cp.w	r8,r9
80003906:	fe 98 ff fa 	brls	800038fa <tal_init+0x9e>
8000390a:	12 3a       	cp.w	r10,r9
8000390c:	e0 83 01 45 	brlo	80003b96 <tal_init+0x33a>
80003910:	cf 5b       	rjmp	800038fa <tal_init+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003912:	12 38       	cp.w	r8,r9
80003914:	e0 8b 01 41 	brhi	80003b96 <tal_init+0x33a>
80003918:	12 3a       	cp.w	r10,r9
8000391a:	e0 83 01 3e 	brlo	80003b96 <tal_init+0x33a>
8000391e:	ce eb       	rjmp	800038fa <tal_init+0x9e>
		/* Check if AT86RF212 is connected; omit manufacturer id check */
	}
	while (pal_trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF212);

	/* Set trx to off mode */
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
80003920:	30 3b       	mov	r11,3
80003922:	30 2c       	mov	r12,2
80003924:	f0 1f 00 b7 	mcall	80003c00 <tal_init+0x3a4>
80003928:	30 07       	mov	r7,0
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);

		trx_status = (tal_trx_status_t) pal_trx_bit_read(SR_TRX_STATUS);
8000392a:	0e 95       	mov	r5,r7
8000392c:	31 f4       	mov	r4,31
8000392e:	30 13       	mov	r3,1

		/* Wait not more than max attempts for state transition */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
80003930:	30 a6       	mov	r6,10
			return TRX_FAILURE;
		}
		poll_counter++;
	} while (trx_status != TRX_OFF);
80003932:	30 80       	mov	r0,8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003934:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003938:	e4 08 00 0a 	add	r10,r2,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000393c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003940:	14 38       	cp.w	r8,r10
80003942:	e0 88 00 09 	brls	80003954 <tal_init+0xf8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003946:	12 38       	cp.w	r8,r9
80003948:	fe 98 ff fa 	brls	8000393c <tal_init+0xe0>
8000394c:	12 3a       	cp.w	r10,r9
8000394e:	e0 83 01 2c 	brlo	80003ba6 <tal_init+0x34a>
80003952:	cf 5b       	rjmp	8000393c <tal_init+0xe0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003954:	12 38       	cp.w	r8,r9
80003956:	e0 8b 01 28 	brhi	80003ba6 <tal_init+0x34a>
8000395a:	12 3a       	cp.w	r10,r9
8000395c:	e0 83 01 25 	brlo	80003ba6 <tal_init+0x34a>
80003960:	ce eb       	rjmp	8000393c <tal_init+0xe0>
80003962:	e0 0c 18 00 	cp.b	r12,r0
80003966:	c0 40       	breq	8000396e <tal_init+0x112>

		/* Wait not more than max attempts for state transition */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
			return TRX_FAILURE;
		}
		poll_counter++;
80003968:	2f f7       	sub	r7,-1
8000396a:	5c 57       	castu.b	r7
8000396c:	ce 4b       	rjmp	80003934 <tal_init+0xd8>
	} while (trx_status != TRX_OFF);

	tal_trx_status = TRX_OFF;
8000396e:	30 89       	mov	r9,8
80003970:	fe f8 02 94 	ld.w	r8,pc[660]
80003974:	b0 89       	st.b	r8[0x0],r9
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	SLP_TR_LOW();
80003976:	31 3c       	mov	r12,19
80003978:	f0 1f 00 a0 	mcall	80003bf8 <tal_init+0x39c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000397c:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003980:	e0 68 01 7c 	mov	r8,380
80003984:	e0 66 14 80 	mov	r6,5248
80003988:	ea 16 03 ef 	orh	r6,0x3ef
8000398c:	ec 08 06 4a 	mulu.d	r10,r6,r8
80003990:	30 09       	mov	r9,0
80003992:	f0 09 03 4b 	mac	r11,r8,r9
80003996:	ee 78 42 40 	mov	r8,1000000
8000399a:	30 09       	mov	r9,0
8000399c:	ee 74 42 3f 	mov	r4,999999
800039a0:	30 05       	mov	r5,0
800039a2:	08 0a       	add	r10,r4
800039a4:	f6 05 00 4b 	adc	r11,r11,r5
800039a8:	f0 1f 00 95 	mcall	80003bfc <tal_init+0x3a0>
800039ac:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800039b0:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800039b4:	14 37       	cp.w	r7,r10
800039b6:	e0 88 00 09 	brls	800039c8 <tal_init+0x16c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800039ba:	10 37       	cp.w	r7,r8
800039bc:	fe 98 ff fa 	brls	800039b0 <tal_init+0x154>
800039c0:	10 3a       	cp.w	r10,r8
800039c2:	e0 83 00 fc 	brlo	80003bba <tal_init+0x35e>
800039c6:	cf 5b       	rjmp	800039b0 <tal_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800039c8:	10 37       	cp.w	r7,r8
800039ca:	e0 8b 00 f8 	brhi	80003bba <tal_init+0x35e>
800039ce:	10 3a       	cp.w	r10,r8
800039d0:	e0 83 00 f5 	brlo	80003bba <tal_init+0x35e>
800039d4:	ce eb       	rjmp	800039b0 <tal_init+0x154>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800039d6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800039da:	02 38       	cp.w	r8,r1
800039dc:	e0 88 00 09 	brls	800039ee <tal_init+0x192>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800039e0:	12 38       	cp.w	r8,r9
800039e2:	fe 98 ff fa 	brls	800039d6 <tal_init+0x17a>
800039e6:	12 31       	cp.w	r1,r9
800039e8:	e0 83 00 f1 	brlo	80003bca <tal_init+0x36e>
800039ec:	cf 5b       	rjmp	800039d6 <tal_init+0x17a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800039ee:	12 38       	cp.w	r8,r9
800039f0:	e0 8b 00 ed 	brhi	80003bca <tal_init+0x36e>
800039f4:	12 31       	cp.w	r1,r9
800039f6:	e0 83 00 ea 	brlo	80003bca <tal_init+0x36e>
800039fa:	ce eb       	rjmp	800039d6 <tal_init+0x17a>

		/* Wait not more than max. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
			return TRX_FAILURE;
		}
		poll_counter++;
800039fc:	2f f7       	sub	r7,-1
800039fe:	5c 57       	castu.b	r7
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003a00:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003a04:	e4 08 00 0a 	add	r10,r2,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003a08:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003a0c:	14 38       	cp.w	r8,r10
80003a0e:	e0 88 00 09 	brls	80003a20 <tal_init+0x1c4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003a12:	12 38       	cp.w	r8,r9
80003a14:	fe 98 ff fa 	brls	80003a08 <tal_init+0x1ac>
80003a18:	12 3a       	cp.w	r10,r9
80003a1a:	e0 83 00 e2 	brlo	80003bde <tal_init+0x382>
80003a1e:	cf 5b       	rjmp	80003a08 <tal_init+0x1ac>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003a20:	12 38       	cp.w	r8,r9
80003a22:	e0 8b 00 de 	brhi	80003bde <tal_init+0x382>
80003a26:	12 3a       	cp.w	r10,r9
80003a28:	e0 83 00 db 	brlo	80003bde <tal_init+0x382>
80003a2c:	ce eb       	rjmp	80003a08 <tal_init+0x1ac>
	} while (trx_status != TRX_OFF);
80003a2e:	e2 0c 18 00 	cp.b	r12,r1
80003a32:	ce 51       	brne	800039fc <tal_init+0x1a0>

	tal_trx_status = TRX_OFF;
80003a34:	30 89       	mov	r9,8
80003a36:	4f 48       	lddpc	r8,80003c04 <tal_init+0x3a8>
80003a38:	b0 89       	st.b	r8[0x0],r9
}

static void trx_config(void)
{
	/* Set pin driver strength */
	pal_trx_bit_write(SR_PAD_IO_CLKM, PAD_CLKM_2_MA);
80003a3a:	30 09       	mov	r9,0
80003a3c:	30 4a       	mov	r10,4
80003a3e:	33 0b       	mov	r11,48
80003a40:	30 3c       	mov	r12,3
80003a42:	f0 1f 00 72 	mcall	80003c08 <tal_init+0x3ac>
	pal_trx_bit_write(SR_CLKM_SHA_SEL, CLKM_SHA_DISABLE);
80003a46:	30 09       	mov	r9,0
80003a48:	30 3a       	mov	r10,3
80003a4a:	30 8b       	mov	r11,8
80003a4c:	14 9c       	mov	r12,r10
80003a4e:	f0 1f 00 6f 	mcall	80003c08 <tal_init+0x3ac>
	pal_trx_bit_write(SR_CLKM_CTRL, CLKM_1MHZ);
80003a52:	30 19       	mov	r9,1
80003a54:	30 0a       	mov	r10,0
80003a56:	30 7b       	mov	r11,7
80003a58:	30 3c       	mov	r12,3
80003a5a:	f0 1f 00 6c 	mcall	80003c08 <tal_init+0x3ac>

	/* ACKs for data requests, indicate pending data */
	pal_trx_bit_write(SR_AACK_SET_PD, SET_PD);
80003a5e:	30 19       	mov	r9,1
80003a60:	30 5a       	mov	r10,5
80003a62:	32 0b       	mov	r11,32
80003a64:	32 ec       	mov	r12,46
80003a66:	f0 1f 00 69 	mcall	80003c08 <tal_init+0x3ac>

	/* Enable buffer protection mode */
	pal_trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE);
80003a6a:	30 19       	mov	r9,1
80003a6c:	30 7a       	mov	r10,7
80003a6e:	e0 6b 00 80 	mov	r11,128
80003a72:	30 cc       	mov	r12,12
80003a74:	f0 1f 00 65 	mcall	80003c08 <tal_init+0x3ac>

	/* Enable poll mode */
	pal_trx_bit_write(SR_IRQ_MASK_MODE, IRQ_MASK_MODE_ON);
80003a78:	30 19       	mov	r9,1
80003a7a:	12 9a       	mov	r10,r9
80003a7c:	30 2b       	mov	r11,2
80003a7e:	30 4c       	mov	r12,4
80003a80:	f0 1f 00 62 	mcall	80003c08 <tal_init+0x3ac>

	/* The TRX_END interrupt of the transceiver is enabled. */
	pal_trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
80003a84:	30 8b       	mov	r11,8
80003a86:	30 ec       	mov	r12,14
80003a88:	f0 1f 00 5e 	mcall	80003c00 <tal_init+0x3a4>
static void generate_rand_seed(void)
{
	uint16_t seed = 0;
	uint8_t cur_random_val = 0;

	set_trx_state(CMD_RX_ON);
80003a8c:	30 6c       	mov	r12,6
80003a8e:	f0 1f 00 60 	mcall	80003c0c <tal_init+0x3b0>

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	ENTER_TRX_REGION();
80003a92:	31 4c       	mov	r12,20
80003a94:	f0 1f 00 5f 	mcall	80003c10 <tal_init+0x3b4>
80003a98:	30 07       	mov	r7,0
80003a9a:	0e 96       	mov	r6,r7
	/*
	 * The 16-bit random value is generated from various 2-bit random values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = pal_trx_bit_read(SR_RND_VALUE);
80003a9c:	30 54       	mov	r4,5
80003a9e:	36 03       	mov	r3,96
80003aa0:	30 62       	mov	r2,6
	ENTER_TRX_REGION();

	/*
	 * The 16-bit random value is generated from various 2-bit random values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
80003aa2:	30 85       	mov	r5,8
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = pal_trx_bit_read(SR_RND_VALUE);
80003aa4:	08 9a       	mov	r10,r4
80003aa6:	06 9b       	mov	r11,r3
80003aa8:	04 9c       	mov	r12,r2
80003aaa:	f0 1f 00 5b 	mcall	80003c14 <tal_init+0x3b8>
		seed = seed << 2;
		seed |= cur_random_val;
80003aae:	f9 e6 10 26 	or	r6,r12,r6<<0x2
80003ab2:	5c 86       	casts.h	r6
	ENTER_TRX_REGION();

	/*
	 * The 16-bit random value is generated from various 2-bit random values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
80003ab4:	2f f7       	sub	r7,-1
80003ab6:	5c 57       	castu.b	r7
80003ab8:	ea 07 18 00 	cp.b	r7,r5
80003abc:	cf 41       	brne	80003aa4 <tal_init+0x248>
		cur_random_val = pal_trx_bit_read(SR_RND_VALUE);
		seed = seed << 2;
		seed |= cur_random_val;
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
80003abe:	30 3c       	mov	r12,3
80003ac0:	f0 1f 00 53 	mcall	80003c0c <tal_init+0x3b0>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	pal_trx_reg_read(RG_IRQ_STATUS);
80003ac4:	30 fc       	mov	r12,15
80003ac6:	f0 1f 00 55 	mcall	80003c18 <tal_init+0x3bc>
	CLEAR_TRX_IRQ();
80003aca:	31 4c       	mov	r12,20
80003acc:	f0 1f 00 54 	mcall	80003c1c <tal_init+0x3c0>
	LEAVE_TRX_REGION();
80003ad0:	30 1b       	mov	r11,1
80003ad2:	31 4c       	mov	r12,20
80003ad4:	f0 1f 00 53 	mcall	80003c20 <tal_init+0x3c4>

	/* Set the seed for the random number generator. */
	srand(seed);
80003ad8:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80003adc:	f0 1f 00 52 	mcall	80003c24 <tal_init+0x3c8>
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	generate_rand_seed();

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
80003ae0:	30 09       	mov	r9,0
80003ae2:	4d 28       	lddpc	r8,80003c28 <tal_init+0x3cc>
80003ae4:	b0 89       	st.b	r8[0x0],r9
	if (internal_tal_reset() != TRX_SUCCESS) {
		return TRX_FAILURE;
	}

	/* Set the default CCA mode. */
	pal_trx_bit_write(SR_CCA_MODE, CCA_MODE_DEFAULT);
80003ae6:	30 19       	mov	r9,1
80003ae8:	30 5a       	mov	r10,5
80003aea:	36 0b       	mov	r11,96
80003aec:	30 8c       	mov	r12,8
80003aee:	f0 1f 00 47 	mcall	80003c08 <tal_init+0x3ac>

	/* Default configuration to perform auto CSMA-CA */
	pal_trx_reg_write(RG_CSMA_BE, ((MAXBE_DEFAULT << 4) | MINBE_DEFAULT));
80003af2:	35 3b       	mov	r11,83
80003af4:	32 fc       	mov	r12,47
80003af6:	f0 1f 00 43 	mcall	80003c00 <tal_init+0x3a4>
	pal_trx_bit_write(SR_MAX_CSMA_RETRIES, MAX_CSMA_BACKOFFS_DEFAULT);
80003afa:	30 49       	mov	r9,4
80003afc:	30 1a       	mov	r10,1
80003afe:	30 eb       	mov	r11,14
80003b00:	32 cc       	mov	r12,44
80003b02:	f0 1f 00 42 	mcall	80003c08 <tal_init+0x3ac>

	/* Set the trx in promiscuous mode to receive all frame with CRC OK */
	pal_trx_bit_write(SR_AACK_PROM_MODE, PROM_MODE_ENABLE);
80003b06:	30 19       	mov	r9,1
80003b08:	12 9a       	mov	r10,r9
80003b0a:	30 2b       	mov	r11,2
80003b0c:	31 7c       	mov	r12,23
80003b0e:	f0 1f 00 3f 	mcall	80003c08 <tal_init+0x3ac>

	/* Configuration to perform auto CRC for transmission */
	pal_trx_bit_write(SR_TX_AUTO_CRC_ON, TX_AUTO_CRC_ENABLE);
80003b12:	30 19       	mov	r9,1
80003b14:	30 5a       	mov	r10,5
80003b16:	32 0b       	mov	r11,32
80003b18:	30 4c       	mov	r12,4
80003b1a:	f0 1f 00 3c 	mcall	80003c08 <tal_init+0x3ac>
80003b1e:	d8 3a       	popm	r0-r7,pc,r12=0

	return TRX_SUCCESS;
80003b20:	da 3a       	popm	r0-r7,pc,r12=1

	/* Wait typical time. */
	DELAY_US(P_ON_TO_CLKM_AVAILABLE_TYP_US);

	/* Apply reset pulse */
	RST_LOW();
80003b22:	31 1c       	mov	r12,17
80003b24:	f0 1f 00 35 	mcall	80003bf8 <tal_init+0x39c>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003b28:	ee 78 42 40 	mov	r8,1000000
80003b2c:	30 09       	mov	r9,0
80003b2e:	ee 7a 42 3f 	mov	r10,999999
80003b32:	30 0b       	mov	r11,0
80003b34:	e0 66 14 80 	mov	r6,5248
80003b38:	ea 16 03 ef 	orh	r6,0x3ef
80003b3c:	30 07       	mov	r7,0
80003b3e:	ec 0a 00 0a 	add	r10,r6,r10
80003b42:	ee 0b 00 4b 	adc	r11,r7,r11
80003b46:	f0 1f 00 2e 	mcall	80003bfc <tal_init+0x3a0>
80003b4a:	14 91       	mov	r1,r10
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003b4c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003b50:	f0 0a 00 0a 	add	r10,r8,r10
80003b54:	cb 6a       	rjmp	800038c0 <tal_init+0x64>
	DELAY_US(RST_PULSE_WIDTH_US);
	RST_HIGH();
80003b56:	31 1c       	mov	r12,17
80003b58:	f0 1f 00 27 	mcall	80003bf4 <tal_init+0x398>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003b5c:	30 06       	mov	r6,0
80003b5e:	ec 08 10 64 	mul	r8,r6,100
80003b62:	36 4b       	mov	r11,100
80003b64:	e0 69 14 80 	mov	r9,5248
80003b68:	ea 19 03 ef 	orh	r9,0x3ef
80003b6c:	f2 0b 06 4a 	mulu.d	r10,r9,r11
80003b70:	f0 0b 00 0b 	add	r11,r8,r11
80003b74:	ee 78 42 40 	mov	r8,1000000
80003b78:	30 09       	mov	r9,0
80003b7a:	ee 76 42 3f 	mov	r6,999999
80003b7e:	30 07       	mov	r7,0
80003b80:	0c 0a       	add	r10,r6
80003b82:	f6 07 00 4b 	adc	r11,r11,r7
80003b86:	f0 1f 00 1e 	mcall	80003bfc <tal_init+0x3a0>
80003b8a:	14 92       	mov	r2,r10
80003b8c:	30 05       	mov	r5,0
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);
		poll_counter++;
		/* Check if AT86RF212 is connected; omit manufacturer id check */
	}
	while (pal_trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF212);
80003b8e:	31 c6       	mov	r6,28
80003b90:	30 77       	mov	r7,7
	RST_HIGH();

	/* Verify that TRX_OFF can be written */
	do {
		/* Wait not more than max. value of TR1. */
		if (poll_counter == P_ON_TO_CLKM_ATTEMPTS) {
80003b92:	30 a4       	mov	r4,10
80003b94:	ca fa       	rjmp	800038f2 <tal_init+0x96>
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);
		poll_counter++;
		/* Check if AT86RF212 is connected; omit manufacturer id check */
	}
	while (pal_trx_reg_read(RG_PART_NUM) != PART_NUM_AT86RF212);
80003b96:	0c 9c       	mov	r12,r6
80003b98:	f0 1f 00 20 	mcall	80003c18 <tal_init+0x3bc>
80003b9c:	ee 0c 18 00 	cp.b	r12,r7
80003ba0:	fe 91 fe a3 	brne	800038e6 <tal_init+0x8a>
80003ba4:	cb ea       	rjmp	80003920 <tal_init+0xc4>
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);

		trx_status = (tal_trx_status_t) pal_trx_bit_read(SR_TRX_STATUS);
80003ba6:	0a 9a       	mov	r10,r5
80003ba8:	08 9b       	mov	r11,r4
80003baa:	06 9c       	mov	r12,r3
80003bac:	f0 1f 00 1a 	mcall	80003c14 <tal_init+0x3b8>

		/* Wait not more than max attempts for state transition */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
80003bb0:	ec 07 18 00 	cp.b	r7,r6
80003bb4:	fe 91 fe d7 	brne	80003962 <tal_init+0x106>
80003bb8:	cb 4b       	rjmp	80003b20 <tal_init+0x2c4>
	/* trx might sleep, so wake it up */
	SLP_TR_LOW();
	DELAY_US(SLEEP_TO_TRX_OFF_TYP_US);

	/* Apply reset pulse */
	RST_LOW();
80003bba:	31 1c       	mov	r12,17
80003bbc:	f0 1f 00 0f 	mcall	80003bf8 <tal_init+0x39c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003bc0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003bc4:	f0 01 00 01 	add	r1,r8,r1
80003bc8:	c0 7b       	rjmp	800039d6 <tal_init+0x17a>
	DELAY_US(RST_PULSE_WIDTH_US);
	RST_HIGH();
80003bca:	31 1c       	mov	r12,17
80003bcc:	f0 1f 00 0a 	mcall	80003bf4 <tal_init+0x398>
80003bd0:	30 07       	mov	r7,0
	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);

		trx_status = (tal_trx_status_t) pal_trx_bit_read(SR_TRX_STATUS);
80003bd2:	0e 95       	mov	r5,r7
80003bd4:	31 f4       	mov	r4,31
80003bd6:	30 13       	mov	r3,1

		/* Wait not more than max. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
80003bd8:	30 a6       	mov	r6,10
			return TRX_FAILURE;
		}
		poll_counter++;
	} while (trx_status != TRX_OFF);
80003bda:	30 81       	mov	r1,8
80003bdc:	c1 2b       	rjmp	80003a00 <tal_init+0x1a4>
	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		DELAY_US(TRX_POLL_WAIT_TIME_US);

		trx_status = (tal_trx_status_t) pal_trx_bit_read(SR_TRX_STATUS);
80003bde:	0a 9a       	mov	r10,r5
80003be0:	08 9b       	mov	r11,r4
80003be2:	06 9c       	mov	r12,r3
80003be4:	f0 1f 00 0c 	mcall	80003c14 <tal_init+0x3b8>

		/* Wait not more than max. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
80003be8:	ec 07 18 00 	cp.b	r7,r6
80003bec:	fe 91 ff 21 	brne	80003a2e <tal_init+0x1d2>
80003bf0:	c9 8b       	rjmp	80003b20 <tal_init+0x2c4>
80003bf2:	00 00       	add	r0,r0
80003bf4:	80 00       	ld.sh	r0,r0[0x0]
80003bf6:	22 14       	sub	r4,33
80003bf8:	80 00       	ld.sh	r0,r0[0x0]
80003bfa:	22 2a       	sub	r10,34
80003bfc:	80 00       	ld.sh	r0,r0[0x0]
80003bfe:	56 44       	stdsp	sp[0x190],r4
80003c00:	80 00       	ld.sh	r0,r0[0x0]
80003c02:	3d dc       	mov	r12,-35
80003c04:	00 00       	add	r0,r0
80003c06:	07 ca       	ld.ub	r10,r3[0x4]
80003c08:	80 00       	ld.sh	r0,r0[0x0]
80003c0a:	3f 24       	mov	r4,-14
80003c0c:	80 00       	ld.sh	r0,r0[0x0]
80003c0e:	35 e8       	mov	r8,94
80003c10:	80 00       	ld.sh	r0,r0[0x0]
80003c12:	22 86       	sub	r6,40
80003c14:	80 00       	ld.sh	r0,r0[0x0]
80003c16:	3f 9c       	mov	r12,-7
80003c18:	80 00       	ld.sh	r0,r0[0x0]
80003c1a:	3e b0       	mov	r0,-21
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	22 9c       	sub	r12,41
80003c20:	80 00       	ld.sh	r0,r0[0x0]
80003c22:	22 40       	sub	r0,36
80003c24:	80 00       	ld.sh	r0,r0[0x0]
80003c26:	59 f0       	cp.w	r0,31
80003c28:	00 00       	add	r0,r0
80003c2a:	07 c9       	ld.ub	r9,r3[0x4]

80003c2c <pal_trx_init>:

	return AT86RFX_SUCCESS;
}

void pal_trx_init(void)
{
80003c2c:	eb cd 40 e0 	pushm	r5-r7,lr
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003c30:	30 5b       	mov	r11,5
80003c32:	30 2c       	mov	r12,2
80003c34:	f0 1f 00 27 	mcall	80003cd0 <pal_trx_init+0xa4>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003c38:	fe 77 24 00 	mov	r7,-56320
80003c3c:	e0 68 00 80 	mov	r8,128
80003c40:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
80003c42:	6e 18       	ld.w	r8,r7[0x4]
80003c44:	30 15       	mov	r5,1
80003c46:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80003c4a:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
80003c4c:	6e 18       	ld.w	r8,r7[0x4]
80003c4e:	f1 d5 d0 81 	bfins	r8,r5,0x4,0x1
80003c52:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
80003c54:	6e 18       	ld.w	r8,r7[0x4]
80003c56:	30 0a       	mov	r10,0
80003c58:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80003c5c:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
80003c5e:	6e 18       	ld.w	r8,r7[0x4]
80003c60:	30 f9       	mov	r9,15
80003c62:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003c66:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
80003c68:	6e 18       	ld.w	r8,r7[0x4]
80003c6a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80003c6e:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
80003c70:	6e 18       	ld.w	r8,r7[0x4]
80003c72:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80003c76:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
80003c78:	6e 18       	ld.w	r8,r7[0x4]
80003c7a:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80003c7e:	8f 18       	st.w	r7[0x4],r8
	/* Initialize SPI in master mode to access the transceiver */
	spi_master_init(AT86RFX_SPI);
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
80003c80:	49 56       	lddpc	r6,80003cd4 <pal_trx_init+0xa8>
80003c82:	14 98       	mov	r8,r10
80003c84:	e0 69 c6 c0 	mov	r9,50880
80003c88:	ea 19 00 2d 	orh	r9,0x2d
80003c8c:	0c 9b       	mov	r11,r6
80003c8e:	0e 9c       	mov	r12,r7
80003c90:	f0 1f 00 12 	mcall	80003cd8 <pal_trx_init+0xac>
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
80003c94:	0e 9c       	mov	r12,r7
80003c96:	f0 1f 00 12 	mcall	80003cdc <pal_trx_init+0xb0>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003c9a:	0d 8b       	ld.ub	r11,r6[0x0]
80003c9c:	0e 9c       	mov	r12,r7
80003c9e:	f0 1f 00 11 	mcall	80003ce0 <pal_trx_init+0xb4>
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Initialize EXT_INT as interrupt for transceiver */
	gpio_enable_pin_interrupt(EXT_INT, GPIO_RISING_EDGE);
80003ca2:	0a 9b       	mov	r11,r5
80003ca4:	31 4c       	mov	r12,20
80003ca6:	f0 1f 00 10 	mcall	80003ce4 <pal_trx_init+0xb8>
	gpio_clear_pin_interrupt_flag(EXT_INT);
80003caa:	31 4c       	mov	r12,20
80003cac:	f0 1f 00 0f 	mcall	80003ce8 <pal_trx_init+0xbc>
	irq_register_handler(ext_int_isr, AVR32_GPIO_IRQ_2,
80003cb0:	0a 9a       	mov	r10,r5
80003cb2:	34 2b       	mov	r11,66
80003cb4:	48 ec       	lddpc	r12,80003cec <pal_trx_init+0xc0>
80003cb6:	f0 1f 00 0f 	mcall	80003cf0 <pal_trx_init+0xc4>
			EXT_INT_ISR_PRIORITY);

	/* Initialize TRX_RST and SLP_TR as GPIO. */
	gpio_configure_pin(TRX_RST, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003cba:	30 3b       	mov	r11,3
80003cbc:	31 1c       	mov	r12,17
80003cbe:	f0 1f 00 0e 	mcall	80003cf4 <pal_trx_init+0xc8>
	gpio_configure_pin(SLP_TR, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003cc2:	30 3b       	mov	r11,3
80003cc4:	31 3c       	mov	r12,19
80003cc6:	f0 1f 00 0c 	mcall	80003cf4 <pal_trx_init+0xc8>
}
80003cca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003cce:	00 00       	add	r0,r0
80003cd0:	80 00       	ld.sh	r0,r0[0x0]
80003cd2:	40 50       	lddsp	r0,sp[0x14]
80003cd4:	00 00       	add	r0,r0
80003cd6:	07 cc       	ld.ub	r12,r3[0x4]
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	41 b0       	lddsp	r0,sp[0x6c]
80003cdc:	80 00       	ld.sh	r0,r0[0x0]
80003cde:	24 52       	sub	r2,69
80003ce0:	80 00       	ld.sh	r0,r0[0x0]
80003ce2:	24 2c       	sub	r12,66
80003ce4:	80 00       	ld.sh	r0,r0[0x0]
80003ce6:	22 40       	sub	r0,36
80003ce8:	80 00       	ld.sh	r0,r0[0x0]
80003cea:	22 9c       	sub	r12,41
80003cec:	80 00       	ld.sh	r0,r0[0x0]
80003cee:	3c f8       	mov	r8,-49
80003cf0:	80 00       	ld.sh	r0,r0[0x0]
80003cf2:	22 b4       	sub	r4,43
80003cf4:	80 00       	ld.sh	r0,r0[0x0]
80003cf6:	21 5c       	sub	r12,21

80003cf8 <ext_int_isr>:

/**
 * \brief ISR for transceiver's main interrupt
 */
ISR(ext_int_isr, EXT_INT_ISR_GROUP, EXT_INT_ISR_PRIORITY)
{
80003cf8:	d4 01       	pushm	lr
	/*Clearing the AT86RFx interrupt */
	CLEAR_TRX_IRQ();
80003cfa:	31 4c       	mov	r12,20
80003cfc:	f0 1f 00 03 	mcall	80003d08 <ext_int_isr+0x10>
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
80003d00:	f0 1f 00 03 	mcall	80003d0c <ext_int_isr+0x14>
}
80003d04:	d4 02       	popm	lr
80003d06:	d6 03       	rete
80003d08:	80 00       	ld.sh	r0,r0[0x0]
80003d0a:	22 9c       	sub	r12,41
80003d0c:	80 00       	ld.sh	r0,r0[0x0]
80003d0e:	37 d8       	mov	r8,125

80003d10 <at86rfx_task>:
	new_value |= current_reg_value;
	pal_trx_reg_write(reg_addr, new_value);
}

void at86rfx_task(void)
{
80003d10:	d4 01       	pushm	lr
	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the rf buffer, frame needs to be processed further in application.
	 */
	if (at86rfx_frame_rx) {
80003d12:	48 88       	lddpc	r8,80003d30 <at86rfx_task+0x20>
80003d14:	11 89       	ld.ub	r9,r8[0x0]
80003d16:	30 08       	mov	r8,0
80003d18:	f0 09 18 00 	cp.b	r9,r8
80003d1c:	c0 70       	breq	80003d2a <at86rfx_task+0x1a>
		AT86RFX_RX_NOTIFY(at86rfx_rx_buffer);
80003d1e:	48 6c       	lddpc	r12,80003d34 <at86rfx_task+0x24>
80003d20:	f0 1f 00 06 	mcall	80003d38 <at86rfx_task+0x28>
		at86rfx_frame_rx = false;
80003d24:	30 09       	mov	r9,0
80003d26:	48 38       	lddpc	r8,80003d30 <at86rfx_task+0x20>
80003d28:	b0 89       	st.b	r8[0x0],r9
	}

	handle_tal_state();
80003d2a:	f0 1f 00 05 	mcall	80003d3c <at86rfx_task+0x2c>
}
80003d2e:	d8 02       	popm	pc
80003d30:	00 00       	add	r0,r0
80003d32:	07 cb       	ld.ub	r11,r3[0x4]
80003d34:	00 00       	add	r0,r0
80003d36:	12 1c       	sub	r12,r9
80003d38:	80 00       	ld.sh	r0,r0[0x0]
80003d3a:	54 f4       	stdsp	sp[0x13c],r4
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	35 34       	mov	r4,83

80003d40 <pal_trx_frame_write>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_write(uint8_t * data, uint8_t length)
{
80003d40:	eb cd 40 78 	pushm	r3-r6,lr
80003d44:	20 1d       	sub	sp,4
80003d46:	18 94       	mov	r4,r12
80003d48:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80003d4a:	e1 b3 00 00 	mfsr	r3,0x0
80003d4e:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80003d50:	49 16       	lddpc	r6,80003d94 <pal_trx_frame_write+0x54>
80003d52:	0d 8b       	ld.ub	r11,r6[0x0]
80003d54:	fe 7c 24 00 	mov	r12,-56320
80003d58:	f0 1f 00 10 	mcall	80003d98 <pal_trx_frame_write+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FW;
80003d5c:	fa cb ff fc 	sub	r11,sp,-4
80003d60:	36 08       	mov	r8,96
80003d62:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80003d64:	30 1a       	mov	r10,1
80003d66:	fe 7c 24 00 	mov	r12,-56320
80003d6a:	f0 1f 00 0d 	mcall	80003d9c <pal_trx_frame_write+0x5c>

	spi_write_packet(AT86RFX_SPI, data, length);
80003d6e:	0a 9a       	mov	r10,r5
80003d70:	08 9b       	mov	r11,r4
80003d72:	fe 7c 24 00 	mov	r12,-56320
80003d76:	f0 1f 00 0a 	mcall	80003d9c <pal_trx_frame_write+0x5c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003d7a:	0d 8b       	ld.ub	r11,r6[0x0]
80003d7c:	fe 7c 24 00 	mov	r12,-56320
80003d80:	f0 1f 00 08 	mcall	80003da0 <pal_trx_frame_write+0x60>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003d84:	e6 13 00 01 	andh	r3,0x1,COH
80003d88:	c0 21       	brne	80003d8c <pal_trx_frame_write+0x4c>
80003d8a:	d5 03       	csrf	0x10
}
80003d8c:	2f fd       	sub	sp,-4
80003d8e:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80003d92:	00 00       	add	r0,r0
80003d94:	00 00       	add	r0,r0
80003d96:	07 cc       	ld.ub	r12,r3[0x4]
80003d98:	80 00       	ld.sh	r0,r0[0x0]
80003d9a:	23 e0       	sub	r0,62
80003d9c:	80 00       	ld.sh	r0,r0[0x0]
80003d9e:	41 84       	lddsp	r4,sp[0x60]
80003da0:	80 00       	ld.sh	r0,r0[0x0]
80003da2:	24 2c       	sub	r12,66

80003da4 <at86rfx_tx_frame>:
	gpio_configure_pin(TRX_RST, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	gpio_configure_pin(SLP_TR, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
}

void at86rfx_tx_frame(uint8_t * frame_tx)
{
80003da4:	eb cd 40 80 	pushm	r7,lr
80003da8:	18 97       	mov	r7,r12
	DISABLE_TRX_IRQ();
80003daa:	31 4c       	mov	r12,20
80003dac:	f0 1f 00 08 	mcall	80003dcc <at86rfx_tx_frame+0x28>

	tx_frame_config();
80003db0:	f0 1f 00 08 	mcall	80003dd0 <at86rfx_tx_frame+0x2c>
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS. Shall be added automatically
	 */
	pal_trx_frame_write(frame_tx, frame_tx[0] - LENGTH_FIELD_LEN);
80003db4:	0f 8b       	ld.ub	r11,r7[0x0]
80003db6:	20 1b       	sub	r11,1
80003db8:	5c 5b       	castu.b	r11
80003dba:	0e 9c       	mov	r12,r7
80003dbc:	f0 1f 00 06 	mcall	80003dd4 <at86rfx_tx_frame+0x30>

	ENABLE_TRX_IRQ();
80003dc0:	30 1b       	mov	r11,1
80003dc2:	31 4c       	mov	r12,20
80003dc4:	f0 1f 00 05 	mcall	80003dd8 <at86rfx_tx_frame+0x34>
}
80003dc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dcc:	80 00       	ld.sh	r0,r0[0x0]
80003dce:	22 86       	sub	r6,40
80003dd0:	80 00       	ld.sh	r0,r0[0x0]
80003dd2:	37 98       	mov	r8,121
80003dd4:	80 00       	ld.sh	r0,r0[0x0]
80003dd6:	3d 40       	mov	r0,-44
80003dd8:	80 00       	ld.sh	r0,r0[0x0]
80003dda:	22 40       	sub	r0,36

80003ddc <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80003ddc:	eb cd 40 c0 	pushm	r6-r7,lr
80003de0:	20 2d       	sub	sp,8
80003de2:	ba cc       	st.b	sp[0x4],r12
80003de4:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80003de6:	e1 b6 00 00 	mfsr	r6,0x0
80003dea:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80003dec:	1b c8       	ld.ub	r8,sp[0x4]
80003dee:	ea 18 ff ff 	orh	r8,0xffff
80003df2:	e8 18 ff c0 	orl	r8,0xffc0
80003df6:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80003df8:	49 07       	lddpc	r7,80003e38 <pal_trx_reg_write+0x5c>
80003dfa:	0f 8b       	ld.ub	r11,r7[0x0]
80003dfc:	fe 7c 24 00 	mov	r12,-56320
80003e00:	f0 1f 00 0f 	mcall	80003e3c <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80003e04:	30 1a       	mov	r10,1
80003e06:	fa cb ff fc 	sub	r11,sp,-4
80003e0a:	fe 7c 24 00 	mov	r12,-56320
80003e0e:	f0 1f 00 0d 	mcall	80003e40 <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80003e12:	30 1a       	mov	r10,1
80003e14:	1a 9b       	mov	r11,sp
80003e16:	fe 7c 24 00 	mov	r12,-56320
80003e1a:	f0 1f 00 0a 	mcall	80003e40 <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003e1e:	0f 8b       	ld.ub	r11,r7[0x0]
80003e20:	fe 7c 24 00 	mov	r12,-56320
80003e24:	f0 1f 00 08 	mcall	80003e44 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003e28:	e6 16 00 01 	andh	r6,0x1,COH
80003e2c:	c0 21       	brne	80003e30 <pal_trx_reg_write+0x54>
80003e2e:	d5 03       	csrf	0x10
}
80003e30:	2f ed       	sub	sp,-8
80003e32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003e36:	00 00       	add	r0,r0
80003e38:	00 00       	add	r0,r0
80003e3a:	07 cc       	ld.ub	r12,r3[0x4]
80003e3c:	80 00       	ld.sh	r0,r0[0x0]
80003e3e:	23 e0       	sub	r0,62
80003e40:	80 00       	ld.sh	r0,r0[0x0]
80003e42:	41 84       	lddsp	r4,sp[0x60]
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	24 2c       	sub	r12,66

80003e48 <pal_trx_frame_read>:

void pal_trx_frame_read(uint8_t * data, uint8_t length)
{
80003e48:	eb cd 40 78 	pushm	r3-r6,lr
80003e4c:	20 1d       	sub	sp,4
80003e4e:	18 94       	mov	r4,r12
80003e50:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80003e52:	e1 b3 00 00 	mfsr	r3,0x0
80003e56:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80003e58:	49 16       	lddpc	r6,80003e9c <pal_trx_frame_read+0x54>
80003e5a:	0d 8b       	ld.ub	r11,r6[0x0]
80003e5c:	fe 7c 24 00 	mov	r12,-56320
80003e60:	f0 1f 00 10 	mcall	80003ea0 <pal_trx_frame_read+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FR;
80003e64:	fa cb ff fc 	sub	r11,sp,-4
80003e68:	32 08       	mov	r8,32
80003e6a:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80003e6c:	30 1a       	mov	r10,1
80003e6e:	fe 7c 24 00 	mov	r12,-56320
80003e72:	f0 1f 00 0d 	mcall	80003ea4 <pal_trx_frame_read+0x5c>

	spi_read_packet(AT86RFX_SPI, data, length);
80003e76:	0a 9a       	mov	r10,r5
80003e78:	08 9b       	mov	r11,r4
80003e7a:	fe 7c 24 00 	mov	r12,-56320
80003e7e:	f0 1f 00 0b 	mcall	80003ea8 <pal_trx_frame_read+0x60>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003e82:	0d 8b       	ld.ub	r11,r6[0x0]
80003e84:	fe 7c 24 00 	mov	r12,-56320
80003e88:	f0 1f 00 09 	mcall	80003eac <pal_trx_frame_read+0x64>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003e8c:	e6 13 00 01 	andh	r3,0x1,COH
80003e90:	c0 21       	brne	80003e94 <pal_trx_frame_read+0x4c>
80003e92:	d5 03       	csrf	0x10
}
80003e94:	2f fd       	sub	sp,-4
80003e96:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80003e9a:	00 00       	add	r0,r0
80003e9c:	00 00       	add	r0,r0
80003e9e:	07 cc       	ld.ub	r12,r3[0x4]
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	23 e0       	sub	r0,62
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	41 84       	lddsp	r4,sp[0x60]
80003ea8:	80 00       	ld.sh	r0,r0[0x0]
80003eaa:	41 34       	lddsp	r4,sp[0x4c]
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	24 2c       	sub	r12,66

80003eb0 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80003eb0:	eb cd 40 c0 	pushm	r6-r7,lr
80003eb4:	20 2d       	sub	sp,8
80003eb6:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80003eb8:	30 08       	mov	r8,0
80003eba:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80003ebc:	e1 b6 00 00 	mfsr	r6,0x0
80003ec0:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80003ec2:	1b 88       	ld.ub	r8,sp[0x0]
80003ec4:	ea 18 ff ff 	orh	r8,0xffff
80003ec8:	e8 18 ff 80 	orl	r8,0xff80
80003ecc:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80003ece:	49 17       	lddpc	r7,80003f10 <pal_trx_reg_read+0x60>
80003ed0:	0f 8b       	ld.ub	r11,r7[0x0]
80003ed2:	fe 7c 24 00 	mov	r12,-56320
80003ed6:	f0 1f 00 10 	mcall	80003f14 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80003eda:	30 1a       	mov	r10,1
80003edc:	1a 9b       	mov	r11,sp
80003ede:	fe 7c 24 00 	mov	r12,-56320
80003ee2:	f0 1f 00 0e 	mcall	80003f18 <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80003ee6:	30 1a       	mov	r10,1
80003ee8:	fa cb ff f9 	sub	r11,sp,-7
80003eec:	fe 7c 24 00 	mov	r12,-56320
80003ef0:	f0 1f 00 0b 	mcall	80003f1c <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003ef4:	0f 8b       	ld.ub	r11,r7[0x0]
80003ef6:	fe 7c 24 00 	mov	r12,-56320
80003efa:	f0 1f 00 0a 	mcall	80003f20 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003efe:	e6 16 00 01 	andh	r6,0x1,COH
80003f02:	c0 21       	brne	80003f06 <pal_trx_reg_read+0x56>
80003f04:	d5 03       	csrf	0x10

	return register_value;
}
80003f06:	1b fc       	ld.ub	r12,sp[0x7]
80003f08:	2f ed       	sub	sp,-8
80003f0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003f0e:	00 00       	add	r0,r0
80003f10:	00 00       	add	r0,r0
80003f12:	07 cc       	ld.ub	r12,r3[0x4]
80003f14:	80 00       	ld.sh	r0,r0[0x0]
80003f16:	23 e0       	sub	r0,62
80003f18:	80 00       	ld.sh	r0,r0[0x0]
80003f1a:	41 84       	lddsp	r4,sp[0x60]
80003f1c:	80 00       	ld.sh	r0,r0[0x0]
80003f1e:	41 34       	lddsp	r4,sp[0x4c]
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	24 2c       	sub	r12,66

80003f24 <pal_trx_bit_write>:
	return ret;
}

void pal_trx_bit_write(uint8_t reg_addr, uint8_t mask, uint8_t pos,
		uint8_t new_value)
{
80003f24:	d4 21       	pushm	r4-r7,lr
80003f26:	18 94       	mov	r4,r12
80003f28:	16 97       	mov	r7,r11
80003f2a:	14 95       	mov	r5,r10
80003f2c:	12 96       	mov	r6,r9
	uint8_t current_reg_value;
	current_reg_value = pal_trx_reg_read(reg_addr);
80003f2e:	f0 1f 00 0a 	mcall	80003f54 <pal_trx_bit_write+0x30>
	current_reg_value &= ~mask;
80003f32:	ee 08 11 ff 	rsub	r8,r7,-1
	new_value <<= pos;
80003f36:	ec 05 09 46 	lsl	r6,r6,r5
80003f3a:	5c 56       	castu.b	r6
	new_value &= mask;
80003f3c:	ed e7 00 07 	and	r7,r6,r7
	new_value |= current_reg_value;
	pal_trx_reg_write(reg_addr, new_value);
80003f40:	f9 e8 00 08 	and	r8,r12,r8
80003f44:	10 47       	or	r7,r8
80003f46:	0e 9b       	mov	r11,r7
80003f48:	5c 5b       	castu.b	r11
80003f4a:	08 9c       	mov	r12,r4
80003f4c:	f0 1f 00 03 	mcall	80003f58 <pal_trx_bit_write+0x34>
}
80003f50:	d8 22       	popm	r4-r7,pc
80003f52:	00 00       	add	r0,r0
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	3e b0       	mov	r0,-21
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	3d dc       	mov	r12,-35

80003f5c <at86rfx_init>:

	handle_tal_state();
}

at86rfx_retval_t at86rfx_init(void)
{
80003f5c:	d4 01       	pushm	lr
	pal_trx_init();
80003f5e:	f0 1f 00 0b 	mcall	80003f88 <at86rfx_init+0x2c>

	if (tal_init() != TRX_SUCCESS) {
80003f62:	f0 1f 00 0b 	mcall	80003f8c <at86rfx_init+0x30>
80003f66:	c0 20       	breq	80003f6a <at86rfx_init+0xe>
80003f68:	da 0a       	popm	pc,r12=1
		return AT86RFX_FAILURE;
	}

	pal_trx_bit_write(SR_CHANNEL, CURRENT_CHANNEL_DEFAULT);
80003f6a:	30 19       	mov	r9,1
80003f6c:	30 0a       	mov	r10,0
80003f6e:	31 fb       	mov	r11,31
80003f70:	30 8c       	mov	r12,8
80003f72:	f0 1f 00 08 	mcall	80003f90 <at86rfx_init+0x34>

	/* Enable transceiver interrupts. */
	ENABLE_TRX_IRQ();
80003f76:	30 1b       	mov	r11,1
80003f78:	31 4c       	mov	r12,20
80003f7a:	f0 1f 00 07 	mcall	80003f94 <at86rfx_init+0x38>

	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
80003f7e:	30 6b       	mov	r11,6
80003f80:	30 2c       	mov	r12,2
80003f82:	f0 1f 00 06 	mcall	80003f98 <at86rfx_init+0x3c>
80003f86:	d8 0a       	popm	pc,r12=0
80003f88:	80 00       	ld.sh	r0,r0[0x0]
80003f8a:	3c 2c       	mov	r12,-62
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	38 5c       	mov	r12,-123
80003f90:	80 00       	ld.sh	r0,r0[0x0]
80003f92:	3f 24       	mov	r4,-14
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	22 40       	sub	r0,36
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	3d dc       	mov	r12,-35

80003f9c <pal_trx_bit_read>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

uint8_t pal_trx_bit_read(uint8_t addr, uint8_t mask, uint8_t pos)
{
80003f9c:	eb cd 40 c0 	pushm	r6-r7,lr
80003fa0:	16 96       	mov	r6,r11
80003fa2:	14 97       	mov	r7,r10
	uint8_t ret;
	ret = pal_trx_reg_read(addr);
80003fa4:	f0 1f 00 06 	mcall	80003fbc <pal_trx_bit_read+0x20>
	ret &= mask;
	ret >>= pos;
80003fa8:	f9 e6 00 06 	and	r6,r12,r6
80003fac:	5c 56       	castu.b	r6
80003fae:	ec 07 08 46 	asr	r6,r6,r7
80003fb2:	0c 97       	mov	r7,r6
	return ret;
}
80003fb4:	f9 d6 c0 08 	bfextu	r12,r6,0x0,0x8
80003fb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003fbc:	80 00       	ld.sh	r0,r0[0x0]
80003fbe:	3e b0       	mov	r0,-21

80003fc0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80003fc0:	d4 01       	pushm	lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003fc2:	fe 78 0c 00 	mov	r8,-62464
80003fc6:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80003fc8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fcc:	c2 91       	brne	8000401e <sysclk_init+0x5e>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80003fce:	fe 78 0c 00 	mov	r8,-62464
80003fd2:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80003fd4:	e2 18 00 80 	andl	r8,0x80,COH
80003fd8:	c1 71       	brne	80004006 <sysclk_init+0x46>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003fda:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003fde:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80003fe0:	fe 78 0c 00 	mov	r8,-62464
80003fe4:	e0 6a 03 07 	mov	r10,775
80003fe8:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80003fea:	70 0a       	ld.w	r10,r8[0x0]
80003fec:	a3 aa       	sbr	r10,0x2
80003fee:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ff0:	12 98       	mov	r8,r9
80003ff2:	e6 18 00 01 	andh	r8,0x1,COH
80003ff6:	c0 21       	brne	80003ffa <sysclk_init+0x3a>
      cpu_irq_enable();
80003ff8:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80003ffa:	fe 79 0c 00 	mov	r9,-62464
80003ffe:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80004000:	e2 18 00 80 	andl	r8,0x80,COH
80004004:	cf d0       	breq	80003ffe <sysclk_init+0x3e>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80004006:	fe 78 0c 00 	mov	r8,-62464
8000400a:	e0 69 02 05 	mov	r9,517
8000400e:	ea 19 3f 0a 	orh	r9,0x3f0a
80004012:	91 89       	st.w	r8[0x20],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80004014:	10 99       	mov	r9,r8
80004016:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80004018:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000401c:	cf d0       	breq	80004016 <sysclk_init+0x56>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000401e:	e0 6c 14 80 	mov	r12,5248
80004022:	ea 1c 03 ef 	orh	r12,0x3ef
80004026:	f0 1f 00 0a 	mcall	8000404c <sysclk_init+0x8c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000402a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000402e:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80004030:	fe 78 0c 00 	mov	r8,-62464
80004034:	70 0a       	ld.w	r10,r8[0x0]
80004036:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000403a:	a1 ba       	sbr	r10,0x1
	AVR32_PM.mcctrl = mcctrl;
8000403c:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000403e:	12 98       	mov	r8,r9
80004040:	e6 18 00 01 	andh	r8,0x1,COH
80004044:	c0 21       	brne	80004048 <sysclk_init+0x88>
      cpu_irq_enable();
80004046:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80004048:	d8 02       	popm	pc
8000404a:	00 00       	add	r0,r0
8000404c:	80 00       	ld.sh	r0,r0[0x0]
8000404e:	20 b4       	sub	r4,11

80004050 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004050:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80004054:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80004056:	fe 78 0c 00 	mov	r8,-62464
8000405a:	71 59       	ld.w	r9,r8[0x54]
8000405c:	e2 19 00 40 	andl	r9,0x40,COH
80004060:	cf d0       	breq	8000405a <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80004062:	a3 6c       	lsl	r12,0x2
80004064:	e0 2c f3 f8 	sub	r12,62456
80004068:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
8000406a:	30 19       	mov	r9,1
8000406c:	f2 0b 09 4b 	lsl	r11,r9,r11
80004070:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80004072:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004074:	14 98       	mov	r8,r10
80004076:	e6 18 00 01 	andh	r8,0x1,COH
8000407a:	c0 21       	brne	8000407e <sysclk_priv_enable_module+0x2e>
      cpu_irq_enable();
8000407c:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000407e:	5e fc       	retal	r12

80004080 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80004080:	eb cd 40 e0 	pushm	r5-r7,lr
80004084:	18 96       	mov	r6,r12
80004086:	58 9c       	cp.w	r12,9
80004088:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000408a:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000408e:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80004090:	49 08       	lddpc	r8,800040d0 <sysclk_enable_pbb_module+0x50>
80004092:	f0 07 07 09 	ld.ub	r9,r8[r7]
80004096:	30 08       	mov	r8,0
80004098:	f0 09 18 00 	cp.b	r9,r8
8000409c:	c0 a1       	brne	800040b0 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000409e:	ee 0b 15 01 	lsl	r11,r7,0x1
800040a2:	f9 bb 01 06 	movne	r11,6
800040a6:	f9 bb 00 02 	moveq	r11,2
800040aa:	30 1c       	mov	r12,1
800040ac:	f0 1f 00 0a 	mcall	800040d4 <sysclk_enable_pbb_module+0x54>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
800040b0:	48 88       	lddpc	r8,800040d0 <sysclk_enable_pbb_module+0x50>
800040b2:	f0 07 07 09 	ld.ub	r9,r8[r7]
800040b6:	2f f9       	sub	r9,-1
800040b8:	f0 07 0b 09 	st.b	r8[r7],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800040bc:	e6 15 00 01 	andh	r5,0x1,COH
800040c0:	c0 21       	brne	800040c4 <sysclk_enable_pbb_module+0x44>
      cpu_irq_enable();
800040c2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800040c4:	0c 9b       	mov	r11,r6
800040c6:	30 3c       	mov	r12,3
800040c8:	f0 1f 00 03 	mcall	800040d4 <sysclk_enable_pbb_module+0x54>
}
800040cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800040d0:	00 00       	add	r0,r0
800040d2:	07 d0       	ld.ub	r0,r3[0x5]
800040d4:	80 00       	ld.sh	r0,r0[0x0]
800040d6:	40 50       	lddsp	r0,sp[0x14]

800040d8 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800040d8:	d4 01       	pushm	lr
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800040da:	30 1c       	mov	r12,1
800040dc:	f0 1f 00 14 	mcall	8000412c <sysclk_enable_usb+0x54>
800040e0:	30 3b       	mov	r11,3
800040e2:	30 1c       	mov	r12,1
800040e4:	f0 1f 00 13 	mcall	80004130 <sysclk_enable_usb+0x58>
800040e8:	fe 78 0c 00 	mov	r8,-62464
800040ec:	71 58       	ld.w	r8,r8[0x54]
static inline void genclk_enable_source(enum genclk_source src)
{
	switch (src) {
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
800040ee:	e2 18 00 80 	andl	r8,0x80,COH
800040f2:	c1 71       	brne	80004120 <sysclk_enable_usb+0x48>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800040f4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800040f8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800040fa:	fe 78 0c 00 	mov	r8,-62464
800040fe:	e0 6a 03 07 	mov	r10,775
80004102:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80004104:	70 0a       	ld.w	r10,r8[0x0]
80004106:	a3 aa       	sbr	r10,0x2
80004108:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000410a:	12 98       	mov	r8,r9
8000410c:	e6 18 00 01 	andh	r8,0x1,COH
80004110:	c0 21       	brne	80004114 <sysclk_enable_usb+0x3c>
      cpu_irq_enable();
80004112:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80004114:	fe 78 0c 00 	mov	r8,-62464
80004118:	71 59       	ld.w	r9,r8[0x54]
8000411a:	e2 19 00 80 	andl	r9,0x80,COH
8000411e:	cf d0       	breq	80004118 <sysclk_enable_usb+0x40>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80004120:	30 49       	mov	r9,4
80004122:	fe 78 0c 00 	mov	r8,-62464
80004126:	f1 49 00 70 	st.w	r8[112],r9
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
8000412a:	d8 02       	popm	pc
8000412c:	80 00       	ld.sh	r0,r0[0x0]
8000412e:	40 80       	lddsp	r0,sp[0x20]
80004130:	80 00       	ld.sh	r0,r0[0x0]
80004132:	40 50       	lddsp	r0,sp[0x14]

80004134 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80004134:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80004138:	58 0a       	cp.w	r10,0
8000413a:	c0 61       	brne	80004146 <spi_read_packet+0x12>
8000413c:	c2 28       	rjmp	80004180 <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
8000413e:	58 08       	cp.w	r8,0
80004140:	c1 d0       	breq	8000417a <spi_read_packet+0x46>
80004142:	20 18       	sub	r8,1
80004144:	c0 68       	rjmp	80004150 <spi_read_packet+0x1c>
80004146:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000414a:	e0 67 00 ff 	mov	r7,255
8000414e:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80004150:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80004152:	e2 19 00 02 	andl	r9,0x2,COH
80004156:	cf 40       	breq	8000413e <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80004158:	99 37       	st.w	r12[0xc],r7
8000415a:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
8000415c:	c0 48       	rjmp	80004164 <spi_read_packet+0x30>
			if (!timeout--) {
8000415e:	58 08       	cp.w	r8,0
80004160:	c0 d0       	breq	8000417a <spi_read_packet+0x46>
80004162:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80004164:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80004166:	e2 19 02 01 	andl	r9,0x201,COH
8000416a:	e0 49 02 01 	cp.w	r9,513
8000416e:	cf 81       	brne	8000415e <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80004170:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80004172:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80004174:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80004176:	ce c1       	brne	8000414e <spi_read_packet+0x1a>
80004178:	c0 48       	rjmp	80004180 <spi_read_packet+0x4c>
8000417a:	3f dc       	mov	r12,-3
8000417c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004180:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80004184 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80004184:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80004186:	58 0a       	cp.w	r10,0
80004188:	c0 81       	brne	80004198 <spi_write_packet+0x14>
8000418a:	c1 28       	rjmp	800041ae <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
8000418c:	58 08       	cp.w	r8,0
8000418e:	c0 31       	brne	80004194 <spi_write_packet+0x10>
80004190:	3f dc       	mov	r12,-3
80004192:	d8 02       	popm	pc
80004194:	20 18       	sub	r8,1
80004196:	c0 48       	rjmp	8000419e <spi_write_packet+0x1a>
80004198:	e0 6e 3a 98 	mov	lr,15000
8000419c:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8000419e:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
800041a0:	e2 19 00 02 	andl	r9,0x2,COH
800041a4:	cf 40       	breq	8000418c <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800041a6:	17 38       	ld.ub	r8,r11++
800041a8:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
800041aa:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
800041ac:	cf 81       	brne	8000419c <spi_write_packet+0x18>
800041ae:	d8 0a       	popm	pc,r12=0

800041b0 <spi_master_setup_device>:
#endif

void spi_master_setup_device(volatile avr32_spi_t *spi,
		struct spi_device *device, spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
800041b0:	eb cd 40 e0 	pushm	r5-r7,lr
800041b4:	18 97       	mov	r7,r12
800041b6:	16 96       	mov	r6,r11
800041b8:	14 95       	mov	r5,r10
static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
		uint8_t chip_select, uint8_t delay)
{
	Assert(chip_select <= 3);

	switch (chip_select) {
800041ba:	17 88       	ld.ub	r8,r11[0x0]
800041bc:	30 1a       	mov	r10,1
800041be:	f4 08 18 00 	cp.b	r8,r10
800041c2:	c1 10       	breq	800041e4 <spi_master_setup_device+0x34>
800041c4:	c0 a3       	brcs	800041d8 <spi_master_setup_device+0x28>
800041c6:	30 2a       	mov	r10,2
800041c8:	f4 08 18 00 	cp.b	r8,r10
800041cc:	c1 20       	breq	800041f0 <spi_master_setup_device+0x40>
800041ce:	30 3a       	mov	r10,3
800041d0:	f4 08 18 00 	cp.b	r8,r10
800041d4:	c1 91       	brne	80004206 <spi_master_setup_device+0x56>
800041d6:	c1 38       	rjmp	800041fc <spi_master_setup_device+0x4c>
	case 0:
		spi->CSR0.dlybct = delay;
800041d8:	78 c8       	ld.w	r8,r12[0x30]
800041da:	30 0a       	mov	r10,0
800041dc:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800041e0:	99 c8       	st.w	r12[0x30],r8
800041e2:	c1 28       	rjmp	80004206 <spi_master_setup_device+0x56>
		break;

	case 1:
		spi->CSR1.dlybct  = delay;
800041e4:	78 d8       	ld.w	r8,r12[0x34]
800041e6:	30 0a       	mov	r10,0
800041e8:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800041ec:	99 d8       	st.w	r12[0x34],r8
800041ee:	c0 c8       	rjmp	80004206 <spi_master_setup_device+0x56>
		break;

	case 2:
		spi->CSR2.dlybct  = delay;
800041f0:	78 e8       	ld.w	r8,r12[0x38]
800041f2:	30 0a       	mov	r10,0
800041f4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800041f8:	99 e8       	st.w	r12[0x38],r8
800041fa:	c0 68       	rjmp	80004206 <spi_master_setup_device+0x56>
		break;

	case 3:
		spi->CSR3.dlybct  = delay;
800041fc:	78 f8       	ld.w	r8,r12[0x3c]
800041fe:	30 0a       	mov	r10,0
80004200:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80004204:	99 f8       	st.w	r12[0x3c],r8
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
		uint8_t chip_select, uint8_t delay)
{
	Assert(chip_select <= 3);

	switch (chip_select) {
80004206:	0d 88       	ld.ub	r8,r6[0x0]
80004208:	30 1a       	mov	r10,1
8000420a:	f4 08 18 00 	cp.b	r8,r10
8000420e:	c1 10       	breq	80004230 <spi_master_setup_device+0x80>
80004210:	c0 a3       	brcs	80004224 <spi_master_setup_device+0x74>
80004212:	30 2a       	mov	r10,2
80004214:	f4 08 18 00 	cp.b	r8,r10
80004218:	c1 20       	breq	8000423c <spi_master_setup_device+0x8c>
8000421a:	30 3a       	mov	r10,3
8000421c:	f4 08 18 00 	cp.b	r8,r10
80004220:	c1 91       	brne	80004252 <spi_master_setup_device+0xa2>
80004222:	c1 38       	rjmp	80004248 <spi_master_setup_device+0x98>
	case 0:
		spi->CSR0.dlybs = delay;
80004224:	6e c8       	ld.w	r8,r7[0x30]
80004226:	30 0a       	mov	r10,0
80004228:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8000422c:	8f c8       	st.w	r7[0x30],r8
8000422e:	c1 28       	rjmp	80004252 <spi_master_setup_device+0xa2>
		break;

	case 1:
		spi->CSR1.dlybs  = delay;
80004230:	6e d8       	ld.w	r8,r7[0x34]
80004232:	30 0a       	mov	r10,0
80004234:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
80004238:	8f d8       	st.w	r7[0x34],r8
8000423a:	c0 c8       	rjmp	80004252 <spi_master_setup_device+0xa2>
		break;

	case 2:
		spi->CSR2.dlybs  = delay;
8000423c:	6e e8       	ld.w	r8,r7[0x38]
8000423e:	30 0a       	mov	r10,0
80004240:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
80004244:	8f e8       	st.w	r7[0x38],r8
80004246:	c0 68       	rjmp	80004252 <spi_master_setup_device+0xa2>
		break;

	case 3:
		spi->CSR3.dlybs  = delay;
80004248:	6e f8       	ld.w	r8,r7[0x3c]
8000424a:	30 0a       	mov	r10,0
8000424c:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
80004250:	8f f8       	st.w	r7[0x3c],r8
		uint8_t chip_select,
		uint8_t len)
{
	Assert((len >= 8) && (len <= 16));

	switch (chip_select) {
80004252:	0d 88       	ld.ub	r8,r6[0x0]
80004254:	30 1a       	mov	r10,1
80004256:	f4 08 18 00 	cp.b	r8,r10
8000425a:	c1 10       	breq	8000427c <spi_master_setup_device+0xcc>
8000425c:	c0 a3       	brcs	80004270 <spi_master_setup_device+0xc0>
8000425e:	30 2a       	mov	r10,2
80004260:	f4 08 18 00 	cp.b	r8,r10
80004264:	c1 20       	breq	80004288 <spi_master_setup_device+0xd8>
80004266:	30 3a       	mov	r10,3
80004268:	f4 08 18 00 	cp.b	r8,r10
8000426c:	c1 91       	brne	8000429e <spi_master_setup_device+0xee>
8000426e:	c1 38       	rjmp	80004294 <spi_master_setup_device+0xe4>
	case 0:
		spi->CSR0.bits = len - 8;
80004270:	6e c8       	ld.w	r8,r7[0x30]
80004272:	30 0a       	mov	r10,0
80004274:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80004278:	8f c8       	st.w	r7[0x30],r8
8000427a:	c1 28       	rjmp	8000429e <spi_master_setup_device+0xee>
		break;

	case 1:
		spi->CSR1.bits  = len - 8;
8000427c:	6e d8       	ld.w	r8,r7[0x34]
8000427e:	30 0a       	mov	r10,0
80004280:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80004284:	8f d8       	st.w	r7[0x34],r8
80004286:	c0 c8       	rjmp	8000429e <spi_master_setup_device+0xee>
		break;

	case 2:
		spi->CSR2.bits  = len - 8;
80004288:	6e e8       	ld.w	r8,r7[0x38]
8000428a:	30 0a       	mov	r10,0
8000428c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80004290:	8f e8       	st.w	r7[0x38],r8
80004292:	c0 68       	rjmp	8000429e <spi_master_setup_device+0xee>
		break;

	case 3:
		spi->CSR3.bits  = len - 8;
80004294:	6e f8       	ld.w	r8,r7[0x3c]
80004296:	30 0a       	mov	r10,0
80004298:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8000429c:	8f f8       	st.w	r7[0x3c],r8
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
8000429e:	fe 57 10 00 	cp.w	r7,-61440
800042a2:	c7 50       	breq	8000438c <spi_master_setup_device+0x1dc>
800042a4:	e0 8b 00 37 	brhi	80004312 <spi_master_setup_device+0x162>
800042a8:	fe 47 20 00 	cp.w	r7,-122880
800042ac:	c7 50       	breq	80004396 <spi_master_setup_device+0x1e6>
800042ae:	e0 8b 00 19 	brhi	800042e0 <spi_master_setup_device+0x130>
800042b2:	fe 47 00 00 	cp.w	r7,-131072
800042b6:	c7 00       	breq	80004396 <spi_master_setup_device+0x1e6>
800042b8:	e0 8b 00 0a 	brhi	800042cc <spi_master_setup_device+0x11c>
800042bc:	fc 18 ff 10 	movh	r8,0xff10
800042c0:	10 37       	cp.w	r7,r8
800042c2:	c6 00       	breq	80004382 <spi_master_setup_device+0x1d2>
800042c4:	fc 57 00 00 	cp.w	r7,-196608
800042c8:	c5 b1       	brne	8000437e <spi_master_setup_device+0x1ce>
800042ca:	c6 68       	rjmp	80004396 <spi_master_setup_device+0x1e6>
800042cc:	fe 47 14 00 	cp.w	r7,-125952
800042d0:	c6 30       	breq	80004396 <spi_master_setup_device+0x1e6>
800042d2:	fe 47 1c 00 	cp.w	r7,-123904
800042d6:	c6 00       	breq	80004396 <spi_master_setup_device+0x1e6>
800042d8:	fe 47 10 00 	cp.w	r7,-126976
800042dc:	c5 11       	brne	8000437e <spi_master_setup_device+0x1ce>
800042de:	c5 c8       	rjmp	80004396 <spi_master_setup_device+0x1e6>
800042e0:	fe 47 80 00 	cp.w	r7,-98304
800042e4:	c5 90       	breq	80004396 <spi_master_setup_device+0x1e6>
800042e6:	e0 8b 00 0c 	brhi	800042fe <spi_master_setup_device+0x14e>
800042ea:	fe 47 28 00 	cp.w	r7,-120832
800042ee:	c5 40       	breq	80004396 <spi_master_setup_device+0x1e6>
800042f0:	fe 47 40 00 	cp.w	r7,-114688
800042f4:	c5 10       	breq	80004396 <spi_master_setup_device+0x1e6>
800042f6:	fe 47 24 00 	cp.w	r7,-121856
800042fa:	c4 21       	brne	8000437e <spi_master_setup_device+0x1ce>
800042fc:	c4 d8       	rjmp	80004396 <spi_master_setup_device+0x1e6>
800042fe:	fe 57 08 00 	cp.w	r7,-63488
80004302:	c4 50       	breq	8000438c <spi_master_setup_device+0x1dc>
80004304:	fe 57 0c 00 	cp.w	r7,-62464
80004308:	c4 20       	breq	8000438c <spi_master_setup_device+0x1dc>
8000430a:	fe 57 00 00 	cp.w	r7,-65536
8000430e:	c3 81       	brne	8000437e <spi_master_setup_device+0x1ce>
80004310:	c3 e8       	rjmp	8000438c <spi_master_setup_device+0x1dc>
80004312:	fe 57 30 00 	cp.w	r7,-53248
80004316:	c3 b0       	breq	8000438c <spi_master_setup_device+0x1dc>
80004318:	e0 8b 00 1b 	brhi	8000434e <spi_master_setup_device+0x19e>
8000431c:	fe 57 20 00 	cp.w	r7,-57344
80004320:	c3 60       	breq	8000438c <spi_master_setup_device+0x1dc>
80004322:	e0 8b 00 0c 	brhi	8000433a <spi_master_setup_device+0x18a>
80004326:	fe 57 18 00 	cp.w	r7,-59392
8000432a:	c3 10       	breq	8000438c <spi_master_setup_device+0x1dc>
8000432c:	fe 57 1c 00 	cp.w	r7,-58368
80004330:	c2 e0       	breq	8000438c <spi_master_setup_device+0x1dc>
80004332:	fe 57 14 00 	cp.w	r7,-60416
80004336:	c2 41       	brne	8000437e <spi_master_setup_device+0x1ce>
80004338:	c2 a8       	rjmp	8000438c <spi_master_setup_device+0x1dc>
8000433a:	fe 57 28 00 	cp.w	r7,-55296
8000433e:	c2 70       	breq	8000438c <spi_master_setup_device+0x1dc>
80004340:	fe 57 2c 00 	cp.w	r7,-54272
80004344:	c2 40       	breq	8000438c <spi_master_setup_device+0x1dc>
80004346:	fe 57 24 00 	cp.w	r7,-56320
8000434a:	c1 a1       	brne	8000437e <spi_master_setup_device+0x1ce>
8000434c:	c2 08       	rjmp	8000438c <spi_master_setup_device+0x1dc>
8000434e:	fe 57 40 00 	cp.w	r7,-49152
80004352:	c1 d0       	breq	8000438c <spi_master_setup_device+0x1dc>
80004354:	e0 8b 00 0c 	brhi	8000436c <spi_master_setup_device+0x1bc>
80004358:	fe 57 38 00 	cp.w	r7,-51200
8000435c:	c1 80       	breq	8000438c <spi_master_setup_device+0x1dc>
8000435e:	fe 57 3c 00 	cp.w	r7,-50176
80004362:	c1 50       	breq	8000438c <spi_master_setup_device+0x1dc>
80004364:	fe 57 34 00 	cp.w	r7,-52224
80004368:	c0 b1       	brne	8000437e <spi_master_setup_device+0x1ce>
8000436a:	c1 18       	rjmp	8000438c <spi_master_setup_device+0x1dc>
8000436c:	fe 57 50 00 	cp.w	r7,-45056
80004370:	c0 e0       	breq	8000438c <spi_master_setup_device+0x1dc>
80004372:	fe 57 54 00 	cp.w	r7,-44032
80004376:	c0 b0       	breq	8000438c <spi_master_setup_device+0x1dc>
80004378:	fe 57 44 00 	cp.w	r7,-48128
8000437c:	c0 80       	breq	8000438c <spi_master_setup_device+0x1dc>
8000437e:	30 0b       	mov	r11,0
80004380:	c0 f8       	rjmp	8000439e <spi_master_setup_device+0x1ee>
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80004382:	e0 6b 14 80 	mov	r11,5248
80004386:	ea 1b 03 ef 	orh	r11,0x3ef
8000438a:	c0 a8       	rjmp	8000439e <spi_master_setup_device+0x1ee>
8000438c:	e0 6b 14 80 	mov	r11,5248
80004390:	ea 1b 03 ef 	orh	r11,0x3ef
80004394:	c0 58       	rjmp	8000439e <spi_master_setup_device+0x1ee>
80004396:	e0 6b 14 80 	mov	r11,5248
8000439a:	ea 1b 03 ef 	orh	r11,0x3ef
	spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
	spi_set_bits_per_transfer(spi,device->id,
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_register(spi,device->id,
			getBaudDiv(baud_rate, sysclk_get_peripheral_bus_hz(spi)));
8000439e:	12 9c       	mov	r12,r9
800043a0:	f0 1f 00 4a 	mcall	800044c8 <spi_master_setup_device+0x318>
{
	spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
	spi_set_bits_per_transfer(spi,device->id,
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_register(spi,device->id,
800043a4:	5c 5c       	castu.b	r12
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,
		uint8_t chip_select,
		uint8_t scbr)
{
	switch (chip_select) {
800043a6:	0d 88       	ld.ub	r8,r6[0x0]
800043a8:	30 19       	mov	r9,1
800043aa:	f2 08 18 00 	cp.b	r8,r9
800043ae:	c1 00       	breq	800043ce <spi_master_setup_device+0x21e>
800043b0:	c0 a3       	brcs	800043c4 <spi_master_setup_device+0x214>
800043b2:	30 29       	mov	r9,2
800043b4:	f2 08 18 00 	cp.b	r8,r9
800043b8:	c1 00       	breq	800043d8 <spi_master_setup_device+0x228>
800043ba:	30 39       	mov	r9,3
800043bc:	f2 08 18 00 	cp.b	r8,r9
800043c0:	c1 51       	brne	800043ea <spi_master_setup_device+0x23a>
800043c2:	c1 08       	rjmp	800043e2 <spi_master_setup_device+0x232>
	case 0:
		spi->CSR0.scbr = scbr;
800043c4:	6e c8       	ld.w	r8,r7[0x30]
800043c6:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
800043ca:	8f c8       	st.w	r7[0x30],r8
800043cc:	c0 f8       	rjmp	800043ea <spi_master_setup_device+0x23a>
		break;

	case 1:
		spi->CSR1.scbr  = scbr;
800043ce:	6e d8       	ld.w	r8,r7[0x34]
800043d0:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
800043d4:	8f d8       	st.w	r7[0x34],r8
800043d6:	c0 a8       	rjmp	800043ea <spi_master_setup_device+0x23a>
		break;

	case 2:
		spi->CSR2.scbr  = scbr;
800043d8:	6e e8       	ld.w	r8,r7[0x38]
800043da:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
800043de:	8f e8       	st.w	r7[0x38],r8
800043e0:	c0 58       	rjmp	800043ea <spi_master_setup_device+0x23a>
		break;

	case 3:
		spi->CSR3.scbr  = scbr;
800043e2:	6e f8       	ld.w	r8,r7[0x3c]
800043e4:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
800043e8:	8f f8       	st.w	r7[0x3c],r8
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	switch (chip_select) {
800043ea:	0d 88       	ld.ub	r8,r6[0x0]
800043ec:	30 19       	mov	r9,1
800043ee:	f2 08 18 00 	cp.b	r8,r9
800043f2:	c1 10       	breq	80004414 <spi_master_setup_device+0x264>
800043f4:	c0 a3       	brcs	80004408 <spi_master_setup_device+0x258>
800043f6:	30 29       	mov	r9,2
800043f8:	f2 08 18 00 	cp.b	r8,r9
800043fc:	c1 20       	breq	80004420 <spi_master_setup_device+0x270>
800043fe:	30 39       	mov	r9,3
80004400:	f2 08 18 00 	cp.b	r8,r9
80004404:	c1 91       	brne	80004436 <spi_master_setup_device+0x286>
80004406:	c1 38       	rjmp	8000442c <spi_master_setup_device+0x27c>
	case 0:
		spi->CSR0.csaat = 1;
80004408:	6e c8       	ld.w	r8,r7[0x30]
8000440a:	30 19       	mov	r9,1
8000440c:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80004410:	8f c8       	st.w	r7[0x30],r8
80004412:	c1 28       	rjmp	80004436 <spi_master_setup_device+0x286>
		break;

	case 1:
		spi->CSR1.csaat  = 1;
80004414:	6e d8       	ld.w	r8,r7[0x34]
80004416:	30 19       	mov	r9,1
80004418:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8000441c:	8f d8       	st.w	r7[0x34],r8
8000441e:	c0 c8       	rjmp	80004436 <spi_master_setup_device+0x286>
		break;

	case 2:
		spi->CSR2.csaat  = 1;
80004420:	6e e8       	ld.w	r8,r7[0x38]
80004422:	30 19       	mov	r9,1
80004424:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80004428:	8f e8       	st.w	r7[0x38],r8
8000442a:	c0 68       	rjmp	80004436 <spi_master_setup_device+0x286>
		break;

	case 3:
		spi->CSR3.csaat  = 1;
8000442c:	6e f8       	ld.w	r8,r7[0x3c]
8000442e:	30 19       	mov	r9,1
80004430:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80004434:	8f f8       	st.w	r7[0x3c],r8
			getBaudDiv(baud_rate, sysclk_get_peripheral_bus_hz(spi)));
	spi_enable_active_mode(spi,device->id);
	spi_set_mode(spi,device->id,flags);
80004436:	0a 9a       	mov	r10,r5
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi, uint8_t chip_select,
		uint8_t flags)
{
	switch (chip_select) {
80004438:	0d 88       	ld.ub	r8,r6[0x0]
8000443a:	30 19       	mov	r9,1
8000443c:	f2 08 18 00 	cp.b	r8,r9
80004440:	c1 90       	breq	80004472 <spi_master_setup_device+0x2c2>
80004442:	c0 a3       	brcs	80004456 <spi_master_setup_device+0x2a6>
80004444:	30 29       	mov	r9,2
80004446:	f2 08 18 00 	cp.b	r8,r9
8000444a:	c2 20       	breq	8000448e <spi_master_setup_device+0x2de>
8000444c:	30 39       	mov	r9,3
8000444e:	f2 08 18 00 	cp.b	r8,r9
80004452:	c3 81       	brne	800044c2 <spi_master_setup_device+0x312>
80004454:	c2 b8       	rjmp	800044aa <spi_master_setup_device+0x2fa>
	case 0:
		spi->CSR0.cpol = flags >> 1;
80004456:	eb d5 c0 21 	bfextu	r5,r5,0x1,0x1
8000445a:	6e c8       	ld.w	r8,r7[0x30]
8000445c:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80004460:	8f c8       	st.w	r7[0x30],r8
		spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
80004462:	ec 1a 00 01 	eorl	r10,0x1
80004466:	6e c8       	ld.w	r8,r7[0x30]
80004468:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8000446c:	8f c8       	st.w	r7[0x30],r8
8000446e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		break;

	case 1:
		spi->CSR1.cpol  = flags >> 1;
80004472:	eb d5 c0 21 	bfextu	r5,r5,0x1,0x1
80004476:	6e d8       	ld.w	r8,r7[0x34]
80004478:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
8000447c:	8f d8       	st.w	r7[0x34],r8
		spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8000447e:	ec 1a 00 01 	eorl	r10,0x1
80004482:	6e d8       	ld.w	r8,r7[0x34]
80004484:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80004488:	8f d8       	st.w	r7[0x34],r8
8000448a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		break;

	case 2:
		spi->CSR2.cpol  = flags >> 1;
8000448e:	eb d5 c0 21 	bfextu	r5,r5,0x1,0x1
80004492:	6e e8       	ld.w	r8,r7[0x38]
80004494:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80004498:	8f e8       	st.w	r7[0x38],r8
		spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8000449a:	ec 1a 00 01 	eorl	r10,0x1
8000449e:	6e e8       	ld.w	r8,r7[0x38]
800044a0:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
800044a4:	8f e8       	st.w	r7[0x38],r8
800044a6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		break;

	case 3:
		spi->CSR3.cpol  = flags >> 1;
800044aa:	eb d5 c0 21 	bfextu	r5,r5,0x1,0x1
800044ae:	6e f8       	ld.w	r8,r7[0x3c]
800044b0:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
800044b4:	8f f8       	st.w	r7[0x3c],r8
		spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
800044b6:	ec 1a 00 01 	eorl	r10,0x1
800044ba:	6e f8       	ld.w	r8,r7[0x3c]
800044bc:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
800044c0:	8f f8       	st.w	r7[0x3c],r8
800044c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800044c6:	00 00       	add	r0,r0
800044c8:	80 00       	ld.sh	r0,r0[0x0]
800044ca:	23 c0       	sub	r0,60

800044cc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
800044cc:	48 38       	lddpc	r8,800044d8 <udi_cdc_comm_disable+0xc>
800044ce:	11 89       	ld.ub	r9,r8[0x0]
800044d0:	20 19       	sub	r9,1
800044d2:	b0 89       	st.b	r8[0x0],r9
}
800044d4:	5e fc       	retal	r12
800044d6:	00 00       	add	r0,r0
800044d8:	00 00       	add	r0,r0
800044da:	0b ec       	ld.ub	r12,r5[0x6]

800044dc <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
800044dc:	5e fd       	retal	0

800044de <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
800044de:	5e fd       	retal	0

800044e0 <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
800044e0:	5e fd       	retal	0
800044e2:	d7 03       	nop

800044e4 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
800044e4:	d4 01       	pushm	lr
	uint8_t port = udi_cdc_setup_to_port();
800044e6:	f0 1f 00 25 	mcall	80004578 <udi_cdc_comm_setup+0x94>

	if (Udd_setup_is_in()) {
800044ea:	4a 58       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
800044ec:	11 88       	ld.ub	r8,r8[0x0]
800044ee:	30 09       	mov	r9,0
800044f0:	f2 08 18 00 	cp.b	r8,r9
800044f4:	c1 d4       	brge	8000452e <udi_cdc_comm_setup+0x4a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800044f6:	e2 18 00 60 	andl	r8,0x60,COH
800044fa:	e0 48 00 20 	cp.w	r8,32
800044fe:	c3 c1       	brne	80004576 <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80004500:	49 f8       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
80004502:	11 99       	ld.ub	r9,r8[0x1]
80004504:	32 18       	mov	r8,33
80004506:	f0 09 18 00 	cp.b	r9,r8
8000450a:	c3 61       	brne	80004576 <udi_cdc_comm_setup+0x92>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000450c:	49 c8       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
8000450e:	90 39       	ld.sh	r9,r8[0x6]
80004510:	30 78       	mov	r8,7
80004512:	f0 09 19 00 	cp.h	r9,r8
80004516:	c3 01       	brne	80004576 <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
80004518:	49 98       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
8000451a:	f8 09 15 03 	lsl	r9,r12,0x3
8000451e:	f2 0c 01 0c 	sub	r12,r9,r12
80004522:	49 89       	lddpc	r9,80004580 <udi_cdc_comm_setup+0x9c>
80004524:	18 09       	add	r9,r12
80004526:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80004528:	30 79       	mov	r9,7
8000452a:	b0 69       	st.h	r8[0xc],r9
8000452c:	da 0a       	popm	pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000452e:	e2 18 00 60 	andl	r8,0x60,COH
80004532:	e0 48 00 20 	cp.w	r8,32
80004536:	c2 01       	brne	80004576 <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80004538:	49 18       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
8000453a:	11 98       	ld.ub	r8,r8[0x1]
8000453c:	32 09       	mov	r9,32
8000453e:	f2 08 18 00 	cp.b	r8,r9
80004542:	c0 60       	breq	8000454e <udi_cdc_comm_setup+0x6a>
80004544:	32 29       	mov	r9,34
80004546:	f2 08 18 00 	cp.b	r8,r9
8000454a:	c1 61       	brne	80004576 <udi_cdc_comm_setup+0x92>
8000454c:	da 0a       	popm	pc,r12=1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000454e:	48 c8       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
80004550:	90 39       	ld.sh	r9,r8[0x6]
80004552:	30 78       	mov	r8,7
80004554:	f0 09 19 00 	cp.h	r9,r8
80004558:	c0 f1       	brne	80004576 <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
8000455a:	48 98       	lddpc	r8,8000457c <udi_cdc_comm_setup+0x98>
8000455c:	48 a9       	lddpc	r9,80004584 <udi_cdc_comm_setup+0xa0>
8000455e:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80004560:	f8 09 15 03 	lsl	r9,r12,0x3
80004564:	f2 0c 01 0c 	sub	r12,r9,r12
80004568:	48 69       	lddpc	r9,80004580 <udi_cdc_comm_setup+0x9c>
8000456a:	f2 0c 00 0c 	add	r12,r9,r12
8000456e:	91 2c       	st.w	r8[0x8],r12
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80004570:	30 79       	mov	r9,7
80004572:	b0 69       	st.h	r8[0xc],r9
80004574:	da 0a       	popm	pc,r12=1
						sizeof(usb_cdc_line_coding_t);
				return true;
80004576:	d8 0a       	popm	pc,r12=0
80004578:	80 00       	ld.sh	r0,r0[0x0]
8000457a:	44 e0       	lddsp	r0,sp[0x138]
8000457c:	00 00       	add	r0,r0
8000457e:	12 04       	add	r4,r9
80004580:	00 00       	add	r0,r0
80004582:	07 d4       	ld.ub	r4,r3[0x5]
80004584:	80 00       	ld.sh	r0,r0[0x0]
80004586:	45 88       	lddsp	r8,sp[0x160]

80004588 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
80004588:	5e fc       	retal	r12
8000458a:	d7 03       	nop

8000458c <udi_cdc_multi_get_free_tx_buffer>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000458c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004590:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80004592:	49 28       	lddpc	r8,800045d8 <udi_cdc_multi_get_free_tx_buffer+0x4c>
80004594:	11 88       	ld.ub	r8,r8[0x0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80004596:	49 2a       	lddpc	r10,800045dc <udi_cdc_multi_get_free_tx_buffer+0x50>
80004598:	f4 08 05 1c 	ld.uh	r12,r10[r8<<0x1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
8000459c:	e0 4c 02 00 	cp.w	r12,512
800045a0:	c1 11       	brne	800045c2 <udi_cdc_multi_get_free_tx_buffer+0x36>
		if ((!udi_cdc_tx_trans_ongoing[port])
800045a2:	49 0a       	lddpc	r10,800045e0 <udi_cdc_multi_get_free_tx_buffer+0x54>
800045a4:	15 8a       	ld.ub	r10,r10[0x0]
800045a6:	58 0a       	cp.w	r10,0
800045a8:	c0 d1       	brne	800045c2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
800045aa:	48 fa       	lddpc	r10,800045e4 <udi_cdc_multi_get_free_tx_buffer+0x58>
800045ac:	15 8a       	ld.ub	r10,r10[0x0]
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
800045ae:	58 0a       	cp.w	r10,0
800045b0:	c0 91       	brne	800045c2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
800045b2:	30 1b       	mov	r11,1
800045b4:	48 ca       	lddpc	r10,800045e4 <udi_cdc_multi_get_free_tx_buffer+0x58>
800045b6:	b4 8b       	st.b	r10[0x0],r11
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
800045b8:	58 08       	cp.w	r8,0
800045ba:	5f 0a       	sreq	r10
800045bc:	48 78       	lddpc	r8,800045d8 <udi_cdc_multi_get_free_tx_buffer+0x4c>
800045be:	b0 8a       	st.b	r8[0x0],r10
800045c0:	30 0c       	mov	r12,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800045c2:	12 98       	mov	r8,r9
800045c4:	e6 18 00 01 	andh	r8,0x1,COH
800045c8:	c0 21       	brne	800045cc <udi_cdc_multi_get_free_tx_buffer+0x40>
      cpu_irq_enable();
800045ca:	d5 03       	csrf	0x10
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
800045cc:	e0 68 02 00 	mov	r8,512
800045d0:	f0 0c 01 0c 	sub	r12,r8,r12
800045d4:	5e fc       	retal	r12
800045d6:	00 00       	add	r0,r0
800045d8:	00 00       	add	r0,r0
800045da:	07 e0       	ld.ub	r0,r3[0x6]
800045dc:	00 00       	add	r0,r0
800045de:	07 e4       	ld.ub	r4,r3[0x6]
800045e0:	00 00       	add	r0,r0
800045e2:	0b fc       	ld.ub	r12,r5[0x7]
800045e4:	00 00       	add	r0,r0
800045e6:	10 10       	sub	r0,r8

800045e8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
800045e8:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
800045ea:	f0 1f 00 03 	mcall	800045f4 <udi_cdc_multi_is_tx_ready+0xc>
}
800045ee:	5f 1c       	srne	r12
800045f0:	d8 02       	popm	pc
800045f2:	00 00       	add	r0,r0
800045f4:	80 00       	ld.sh	r0,r0[0x0]
800045f6:	45 8c       	lddsp	r12,sp[0x160]

800045f8 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
800045f8:	d4 31       	pushm	r0-r7,lr
800045fa:	20 1d       	sub	sp,4
800045fc:	14 97       	mov	r7,r10

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
800045fe:	4a 08       	lddpc	r8,8000467c <udi_cdc_multi_write_buf+0x84>
80004600:	11 e9       	ld.ub	r9,r8[0x6]
80004602:	30 98       	mov	r8,9
80004604:	f0 09 18 00 	cp.b	r9,r8
80004608:	c0 21       	brne	8000460c <udi_cdc_multi_write_buf+0x14>
		size *=2;
8000460a:	a1 77       	lsl	r7,0x1
{
	irqflags_t flags;
	uint8_t buf_sel;
	uint16_t buf_nb;
	iram_size_t copy_nb;
	uint8_t *ptr_buf = (uint8_t *)buf;
8000460c:	16 92       	mov	r2,r11
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
8000460e:	30 03       	mov	r3,0
		if (!udi_cdc_data_running) {
80004610:	49 c1       	lddpc	r1,80004680 <udi_cdc_multi_write_buf+0x88>
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80004612:	49 d0       	lddpc	r0,80004684 <udi_cdc_multi_write_buf+0x8c>
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80004614:	06 9c       	mov	r12,r3
80004616:	f0 1f 00 1d 	mcall	80004688 <udi_cdc_multi_write_buf+0x90>
8000461a:	c0 51       	brne	80004624 <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
8000461c:	03 88       	ld.ub	r8,r1[0x0]
8000461e:	58 08       	cp.w	r8,0
80004620:	cf a1       	brne	80004614 <udi_cdc_multi_write_buf+0x1c>
80004622:	c2 98       	rjmp	80004674 <udi_cdc_multi_write_buf+0x7c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004624:	e1 b8 00 00 	mfsr	r8,0x0
80004628:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000462a:	d3 03       	ssrf	0x10
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
8000462c:	49 88       	lddpc	r8,8000468c <udi_cdc_multi_write_buf+0x94>
8000462e:	11 85       	ld.ub	r5,r8[0x0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80004630:	e0 05 04 14 	ld.sh	r4,r0[r5<<0x1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
80004634:	08 98       	mov	r8,r4
80004636:	5c 78       	castu.h	r8
80004638:	e0 66 02 00 	mov	r6,512
8000463c:	10 16       	sub	r6,r8
8000463e:	0c 37       	cp.w	r7,r6
80004640:	ee 06 17 80 	movls	r6,r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
80004644:	ea 0c 15 09 	lsl	r12,r5,0x9
80004648:	f0 0c 00 0c 	add	r12,r8,r12
8000464c:	0c 9a       	mov	r10,r6
8000464e:	04 9b       	mov	r11,r2
80004650:	49 08       	lddpc	r8,80004690 <udi_cdc_multi_write_buf+0x98>
80004652:	f0 0c 00 0c 	add	r12,r8,r12
80004656:	f0 1f 00 10 	mcall	80004694 <udi_cdc_multi_write_buf+0x9c>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
8000465a:	ec 04 00 04 	add	r4,r6,r4
8000465e:	e0 05 0a 14 	st.h	r0[r5<<0x1],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004662:	40 08       	lddsp	r8,sp[0x0]
80004664:	e6 18 00 01 	andh	r8,0x1,COH
80004668:	c0 21       	brne	8000466c <udi_cdc_multi_write_buf+0x74>
      cpu_irq_enable();
8000466a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
	size -= copy_nb;
8000466c:	0c 17       	sub	r7,r6

	if (size) {
8000466e:	c0 30       	breq	80004674 <udi_cdc_multi_write_buf+0x7c>
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
80004670:	0c 02       	add	r2,r6
80004672:	cd 1b       	rjmp	80004614 <udi_cdc_multi_write_buf+0x1c>
	if (size) {
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
80004674:	0e 9c       	mov	r12,r7
80004676:	2f fd       	sub	sp,-4
80004678:	d8 32       	popm	r0-r7,pc
8000467a:	00 00       	add	r0,r0
8000467c:	00 00       	add	r0,r0
8000467e:	07 d4       	ld.ub	r4,r3[0x5]
80004680:	00 00       	add	r0,r0
80004682:	0b f2       	ld.ub	r2,r5[0x7]
80004684:	00 00       	add	r0,r0
80004686:	07 e4       	ld.ub	r4,r3[0x6]
80004688:	80 00       	ld.sh	r0,r0[0x0]
8000468a:	45 e8       	lddsp	r8,sp[0x178]
8000468c:	00 00       	add	r0,r0
8000468e:	07 e0       	ld.ub	r0,r3[0x6]
80004690:	00 00       	add	r0,r0
80004692:	07 e8       	ld.ub	r8,r3[0x6]
80004694:	80 00       	ld.sh	r0,r0[0x0]
80004696:	58 a8       	cp.w	r8,10

80004698 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
80004698:	d4 01       	pushm	lr
	return udi_cdc_multi_write_buf(0, buf, size);
8000469a:	16 9a       	mov	r10,r11
8000469c:	18 9b       	mov	r11,r12
8000469e:	30 0c       	mov	r12,0
800046a0:	f0 1f 00 02 	mcall	800046a8 <udi_cdc_write_buf+0x10>
}
800046a4:	d8 02       	popm	pc
800046a6:	00 00       	add	r0,r0
800046a8:	80 00       	ld.sh	r0,r0[0x0]
800046aa:	45 f8       	lddsp	r8,sp[0x17c]

800046ac <udi_cdc_multi_get_nb_received_data>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800046ac:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800046b0:	d3 03       	ssrf	0x10

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
800046b2:	48 88       	lddpc	r8,800046d0 <udi_cdc_multi_get_nb_received_data+0x24>
800046b4:	90 08       	ld.sh	r8,r8[0x0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
800046b6:	48 8a       	lddpc	r10,800046d4 <udi_cdc_multi_get_nb_received_data+0x28>
800046b8:	15 8b       	ld.ub	r11,r10[0x0]
800046ba:	48 8a       	lddpc	r10,800046d8 <udi_cdc_multi_get_nb_received_data+0x2c>
800046bc:	f4 0b 04 1c 	ld.sh	r12,r10[r11<<0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800046c0:	e6 19 00 01 	andh	r9,0x1,COH
800046c4:	c0 21       	brne	800046c8 <udi_cdc_multi_get_nb_received_data+0x1c>
      cpu_irq_enable();
800046c6:	d5 03       	csrf	0x10
   }

	barrier();
800046c8:	5c 7c       	castu.h	r12
800046ca:	5c 78       	castu.h	r8
	cpu_irq_restore(flags);
	return nb_received;
}
800046cc:	10 1c       	sub	r12,r8
800046ce:	5e fc       	retal	r12
800046d0:	00 00       	add	r0,r0
800046d2:	0b ee       	ld.ub	lr,r5[0x6]
800046d4:	00 00       	add	r0,r0
800046d6:	0b f4       	ld.ub	r4,r5[0x7]
800046d8:	00 00       	add	r0,r0
800046da:	0b e8       	ld.ub	r8,r5[0x6]

800046dc <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
800046dc:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
800046de:	f0 1f 00 03 	mcall	800046e8 <udi_cdc_multi_is_rx_ready+0xc>
}
800046e2:	5f 1c       	srne	r12
800046e4:	d8 02       	popm	pc
800046e6:	00 00       	add	r0,r0
800046e8:	80 00       	ld.sh	r0,r0[0x0]
800046ea:	46 ac       	lddsp	r12,sp[0x1a8]

800046ec <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
800046ec:	d4 01       	pushm	lr
	return udi_cdc_multi_is_rx_ready(0);
800046ee:	30 0c       	mov	r12,0
800046f0:	f0 1f 00 02 	mcall	800046f8 <udi_cdc_is_rx_ready+0xc>
}
800046f4:	d8 02       	popm	pc
800046f6:	00 00       	add	r0,r0
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	46 dc       	lddsp	r12,sp[0x1b4]

800046fc <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
800046fc:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004700:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80004704:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
80004706:	49 b9       	lddpc	r9,80004770 <udi_cdc_rx_start+0x74>
80004708:	13 87       	ld.ub	r7,r9[0x0]
	if (udi_cdc_rx_trans_ongoing[port] ||
8000470a:	49 b9       	lddpc	r9,80004774 <udi_cdc_rx_start+0x78>
8000470c:	13 89       	ld.ub	r9,r9[0x0]
8000470e:	58 09       	cp.w	r9,0
80004710:	c0 a1       	brne	80004724 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
80004712:	49 a9       	lddpc	r9,80004778 <udi_cdc_rx_start+0x7c>
80004714:	92 09       	ld.sh	r9,r9[0x0]
80004716:	49 aa       	lddpc	r10,8000477c <udi_cdc_rx_start+0x80>
80004718:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
8000471c:	f2 0a 19 00 	cp.h	r10,r9
80004720:	e0 88 00 08 	brls	80004730 <udi_cdc_rx_start+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004724:	e6 18 00 01 	andh	r8,0x1,COH
80004728:	c0 21       	brne	8000472c <udi_cdc_rx_start+0x30>
      cpu_irq_enable();
8000472a:	d5 03       	csrf	0x10
   }

	barrier();
8000472c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
80004730:	30 0a       	mov	r10,0
80004732:	49 29       	lddpc	r9,80004778 <udi_cdc_rx_start+0x7c>
80004734:	b2 0a       	st.h	r9[0x0],r10
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80004736:	58 07       	cp.w	r7,0
80004738:	5f 0a       	sreq	r10
8000473a:	48 e9       	lddpc	r9,80004770 <udi_cdc_rx_start+0x74>
8000473c:	b2 8a       	st.b	r9[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
8000473e:	30 1a       	mov	r10,1
80004740:	48 d9       	lddpc	r9,80004774 <udi_cdc_rx_start+0x78>
80004742:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004744:	e6 18 00 01 	andh	r8,0x1,COH
80004748:	c0 21       	brne	8000474c <udi_cdc_rx_start+0x50>
      cpu_irq_enable();
8000474a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
8000474c:	30 0c       	mov	r12,0
8000474e:	f0 1f 00 0d 	mcall	80004780 <udi_cdc_rx_start+0x84>
80004752:	c0 30       	breq	80004758 <udi_cdc_rx_start+0x5c>
		UDI_CDC_RX_NOTIFY(port);
80004754:	f0 1f 00 0c 	mcall	80004784 <udi_cdc_rx_start+0x88>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
80004758:	a9 77       	lsl	r7,0x9
8000475a:	48 c8       	lddpc	r8,80004788 <udi_cdc_rx_start+0x8c>
8000475c:	e0 69 02 00 	mov	r9,512
80004760:	48 ba       	lddpc	r10,8000478c <udi_cdc_rx_start+0x90>
80004762:	0e 0a       	add	r10,r7
80004764:	30 1b       	mov	r11,1
80004766:	30 2c       	mov	r12,2
80004768:	f0 1f 00 0a 	mcall	80004790 <udi_cdc_rx_start+0x94>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
8000476c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004770:	00 00       	add	r0,r0
80004772:	0b f4       	ld.ub	r4,r5[0x7]
80004774:	00 00       	add	r0,r0
80004776:	10 0c       	add	r12,r8
80004778:	00 00       	add	r0,r0
8000477a:	0b ee       	ld.ub	lr,r5[0x6]
8000477c:	00 00       	add	r0,r0
8000477e:	0b e8       	ld.ub	r8,r5[0x6]
80004780:	80 00       	ld.sh	r0,r0[0x0]
80004782:	46 dc       	lddsp	r12,sp[0x1b4]
80004784:	80 00       	ld.sh	r0,r0[0x0]
80004786:	54 e8       	stdsp	sp[0x138],r8
80004788:	80 00       	ld.sh	r0,r0[0x0]
8000478a:	48 2c       	lddpc	r12,80004790 <udi_cdc_rx_start+0x94>
8000478c:	00 00       	add	r0,r0
8000478e:	0c 0c       	add	r12,r6
80004790:	80 00       	ld.sh	r0,r0[0x0]
80004792:	29 fc       	sub	r12,-97

80004794 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
80004794:	d4 31       	pushm	r0-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80004796:	49 b8       	lddpc	r8,80004800 <udi_cdc_multi_getc+0x6c>
80004798:	11 e9       	ld.ub	r9,r8[0x6]
8000479a:	30 98       	mov	r8,9
8000479c:	f0 09 18 00 	cp.b	r9,r8
800047a0:	5f 02       	sreq	r2
800047a2:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
800047a4:	49 87       	lddpc	r7,80004804 <udi_cdc_multi_getc+0x70>
	buf_sel = udi_cdc_rx_buf_sel[port];
800047a6:	49 95       	lddpc	r5,80004808 <udi_cdc_multi_getc+0x74>
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
800047a8:	49 96       	lddpc	r6,8000480c <udi_cdc_multi_getc+0x78>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
800047aa:	49 a0       	lddpc	r0,80004810 <udi_cdc_multi_getc+0x7c>
	udi_cdc_rx_pos[port] = pos+1;

	udi_cdc_rx_start(port);
800047ac:	06 91       	mov	r1,r3
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
	buf_sel = udi_cdc_rx_buf_sel[port];
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
		if (!udi_cdc_data_running) {
800047ae:	49 a4       	lddpc	r4,80004814 <udi_cdc_multi_getc+0x80>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800047b0:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800047b4:	d3 03       	ssrf	0x10
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
800047b6:	8e 08       	ld.sh	r8,r7[0x0]
	buf_sel = udi_cdc_rx_buf_sel[port];
800047b8:	0b 89       	ld.ub	r9,r5[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800047ba:	e6 1a 00 01 	andh	r10,0x1,COH
800047be:	c0 21       	brne	800047c2 <udi_cdc_multi_getc+0x2e>
      cpu_irq_enable();
800047c0:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
800047c2:	ec 09 04 1a 	ld.sh	r10,r6[r9<<0x1]
800047c6:	f0 0a 19 00 	cp.h	r10,r8
800047ca:	e0 8b 00 06 	brhi	800047d6 <udi_cdc_multi_getc+0x42>
		if (!udi_cdc_data_running) {
800047ce:	09 88       	ld.ub	r8,r4[0x0]
800047d0:	58 08       	cp.w	r8,0
800047d2:	ce f1       	brne	800047b0 <udi_cdc_multi_getc+0x1c>
800047d4:	c1 28       	rjmp	800047f8 <udi_cdc_multi_getc+0x64>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
800047d6:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800047da:	a9 79       	lsl	r9,0x9
800047dc:	14 09       	add	r9,r10
800047de:	e0 09 07 09 	ld.ub	r9,r0[r9]
800047e2:	12 43       	or	r3,r9
	udi_cdc_rx_pos[port] = pos+1;
800047e4:	2f f8       	sub	r8,-1
800047e6:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start(port);
800047e8:	02 9c       	mov	r12,r1
800047ea:	f0 1f 00 0c 	mcall	80004818 <udi_cdc_multi_getc+0x84>

	if (b_databit_9) {
800047ee:	58 02       	cp.w	r2,0
800047f0:	c0 50       	breq	800047fa <udi_cdc_multi_getc+0x66>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
800047f2:	a9 63       	lsl	r3,0x8
800047f4:	02 92       	mov	r2,r1
800047f6:	cd db       	rjmp	800047b0 <udi_cdc_multi_getc+0x1c>
		goto udi_cdc_getc_process_one_byte;
800047f8:	30 03       	mov	r3,0
	}
	return rx_data;
}
800047fa:	06 9c       	mov	r12,r3
800047fc:	d8 32       	popm	r0-r7,pc
800047fe:	00 00       	add	r0,r0
80004800:	00 00       	add	r0,r0
80004802:	07 d4       	ld.ub	r4,r3[0x5]
80004804:	00 00       	add	r0,r0
80004806:	0b ee       	ld.ub	lr,r5[0x6]
80004808:	00 00       	add	r0,r0
8000480a:	0b f4       	ld.ub	r4,r5[0x7]
8000480c:	00 00       	add	r0,r0
8000480e:	0b e8       	ld.ub	r8,r5[0x6]
80004810:	00 00       	add	r0,r0
80004812:	0c 0c       	add	r12,r6
80004814:	00 00       	add	r0,r0
80004816:	0b f2       	ld.ub	r2,r5[0x7]
80004818:	80 00       	ld.sh	r0,r0[0x0]
8000481a:	46 fc       	lddsp	r12,sp[0x1bc]

8000481c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
8000481c:	d4 01       	pushm	lr
	return udi_cdc_multi_getc(0);
8000481e:	30 0c       	mov	r12,0
80004820:	f0 1f 00 02 	mcall	80004828 <udi_cdc_getc+0xc>
}
80004824:	d8 02       	popm	pc
80004826:	00 00       	add	r0,r0
80004828:	80 00       	ld.sh	r0,r0[0x0]
8000482a:	47 94       	lddsp	r4,sp[0x1e4]

8000482c <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
8000482c:	d4 01       	pushm	lr
8000482e:	14 9e       	mov	lr,r10
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80004830:	58 0c       	cp.w	r12,0
80004832:	c1 d1       	brne	8000486c <udi_cdc_data_received+0x40>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80004834:	48 f8       	lddpc	r8,80004870 <udi_cdc_data_received+0x44>
80004836:	11 88       	ld.ub	r8,r8[0x0]
80004838:	58 08       	cp.w	r8,0
8000483a:	5f 0a       	sreq	r10
	if (!n) {
8000483c:	58 0b       	cp.w	r11,0
8000483e:	c0 e1       	brne	8000485a <udi_cdc_data_received+0x2e>
		udd_ep_run( ep,
80004840:	a9 7a       	lsl	r10,0x9
80004842:	fe c8 00 16 	sub	r8,pc,22
80004846:	e0 69 02 00 	mov	r9,512
8000484a:	48 bb       	lddpc	r11,80004874 <udi_cdc_data_received+0x48>
8000484c:	f6 0a 00 0a 	add	r10,r11,r10
80004850:	30 1b       	mov	r11,1
80004852:	1c 9c       	mov	r12,lr
80004854:	f0 1f 00 09 	mcall	80004878 <udi_cdc_data_received+0x4c>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
80004858:	d8 02       	popm	pc
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
8000485a:	48 98       	lddpc	r8,8000487c <udi_cdc_data_received+0x50>
8000485c:	f0 0a 0a 1b 	st.h	r8[r10<<0x1],r11
	udi_cdc_rx_trans_ongoing[port] = false;
80004860:	30 09       	mov	r9,0
80004862:	48 88       	lddpc	r8,80004880 <udi_cdc_data_received+0x54>
80004864:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start(port);
80004866:	30 0c       	mov	r12,0
80004868:	f0 1f 00 07 	mcall	80004884 <udi_cdc_data_received+0x58>
8000486c:	d8 02       	popm	pc
8000486e:	00 00       	add	r0,r0
80004870:	00 00       	add	r0,r0
80004872:	0b f4       	ld.ub	r4,r5[0x7]
80004874:	00 00       	add	r0,r0
80004876:	0c 0c       	add	r12,r6
80004878:	80 00       	ld.sh	r0,r0[0x0]
8000487a:	29 fc       	sub	r12,-97
8000487c:	00 00       	add	r0,r0
8000487e:	0b e8       	ld.ub	r8,r5[0x6]
80004880:	00 00       	add	r0,r0
80004882:	10 0c       	add	r12,r8
80004884:	80 00       	ld.sh	r0,r0[0x0]
80004886:	46 fc       	lddsp	r12,sp[0x1bc]

80004888 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
80004888:	eb cd 40 e0 	pushm	r5-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
8000488c:	4c 18       	lddpc	r8,80004990 <udi_cdc_tx_send+0x108>
8000488e:	11 88       	ld.ub	r8,r8[0x0]
80004890:	58 08       	cp.w	r8,0
80004892:	e0 81 00 7c 	brne	8000498a <udi_cdc_tx_send+0x102>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80004896:	f0 1f 00 40 	mcall	80004994 <udi_cdc_tx_send+0x10c>
8000489a:	c0 a0       	breq	800048ae <udi_cdc_tx_send+0x26>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
8000489c:	4b f8       	lddpc	r8,80004998 <udi_cdc_tx_send+0x110>
8000489e:	90 07       	ld.sh	r7,r8[0x0]
800048a0:	f0 1f 00 3f 	mcall	8000499c <udi_cdc_tx_send+0x114>
800048a4:	f8 07 19 00 	cp.h	r7,r12
800048a8:	c0 a1       	brne	800048bc <udi_cdc_tx_send+0x34>
800048aa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
800048ae:	4b b8       	lddpc	r8,80004998 <udi_cdc_tx_send+0x110>
800048b0:	90 07       	ld.sh	r7,r8[0x0]
800048b2:	f0 1f 00 3c 	mcall	800049a0 <udi_cdc_tx_send+0x118>
800048b6:	f8 07 19 00 	cp.h	r7,r12
800048ba:	c6 80       	breq	8000498a <udi_cdc_tx_send+0x102>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800048bc:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800048c0:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
800048c2:	4b 98       	lddpc	r8,800049a4 <udi_cdc_tx_send+0x11c>
800048c4:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
800048c6:	4b 98       	lddpc	r8,800049a8 <udi_cdc_tx_send+0x120>
800048c8:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
800048cc:	30 08       	mov	r8,0
800048ce:	f0 09 19 00 	cp.h	r9,r8
800048d2:	c2 01       	brne	80004912 <udi_cdc_tx_send+0x8a>
		sof_zlp_counter++;
800048d4:	4b 68       	lddpc	r8,800049ac <udi_cdc_tx_send+0x124>
800048d6:	90 09       	ld.sh	r9,r8[0x0]
800048d8:	2f f9       	sub	r9,-1
800048da:	b0 09       	st.h	r8[0x0],r9
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
800048dc:	f0 1f 00 2e 	mcall	80004994 <udi_cdc_tx_send+0x10c>
800048e0:	c0 81       	brne	800048f0 <udi_cdc_tx_send+0x68>
800048e2:	4b 38       	lddpc	r8,800049ac <udi_cdc_tx_send+0x124>
800048e4:	90 09       	ld.sh	r9,r8[0x0]
800048e6:	36 38       	mov	r8,99
800048e8:	f0 09 19 00 	cp.h	r9,r8
800048ec:	e0 88 00 0d 	brls	80004906 <udi_cdc_tx_send+0x7e>
800048f0:	f0 1f 00 29 	mcall	80004994 <udi_cdc_tx_send+0x10c>
800048f4:	c0 f0       	breq	80004912 <udi_cdc_tx_send+0x8a>
800048f6:	4a e8       	lddpc	r8,800049ac <udi_cdc_tx_send+0x124>
800048f8:	90 09       	ld.sh	r9,r8[0x0]
800048fa:	e0 68 03 1f 	mov	r8,799
800048fe:	f0 09 19 00 	cp.h	r9,r8
80004902:	e0 8b 00 08 	brhi	80004912 <udi_cdc_tx_send+0x8a>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004906:	e6 16 00 01 	andh	r6,0x1,COH
8000490a:	c0 21       	brne	8000490e <udi_cdc_tx_send+0x86>
      cpu_irq_enable();
8000490c:	d5 03       	csrf	0x10
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
8000490e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		}
	}
	sof_zlp_counter = 0;
80004912:	30 09       	mov	r9,0
80004914:	4a 68       	lddpc	r8,800049ac <udi_cdc_tx_send+0x124>
80004916:	b0 09       	st.h	r8[0x0],r9

	if (!udi_cdc_tx_both_buf_to_send[port]) {
80004918:	4a 68       	lddpc	r8,800049b0 <udi_cdc_tx_send+0x128>
8000491a:	11 88       	ld.ub	r8,r8[0x0]
8000491c:	58 08       	cp.w	r8,0
8000491e:	c0 61       	brne	8000492a <udi_cdc_tx_send+0xa2>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80004920:	58 07       	cp.w	r7,0
80004922:	5f 09       	sreq	r9
80004924:	4a 08       	lddpc	r8,800049a4 <udi_cdc_tx_send+0x11c>
80004926:	b0 89       	st.b	r8[0x0],r9
80004928:	c0 38       	rjmp	8000492e <udi_cdc_tx_send+0xa6>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000492a:	58 07       	cp.w	r7,0
8000492c:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing[port] = true;
8000492e:	30 19       	mov	r9,1
80004930:	49 88       	lddpc	r8,80004990 <udi_cdc_tx_send+0x108>
80004932:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004934:	e6 16 00 01 	andh	r6,0x1,COH
80004938:	c0 21       	brne	8000493c <udi_cdc_tx_send+0xb4>
      cpu_irq_enable();
8000493a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
8000493c:	0e 95       	mov	r5,r7
8000493e:	49 b8       	lddpc	r8,800049a8 <udi_cdc_tx_send+0x120>
80004940:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80004944:	e0 68 02 00 	mov	r8,512
80004948:	f0 09 19 00 	cp.h	r9,r8
8000494c:	5f 16       	srne	r6
	if (b_short_packet) {
8000494e:	58 06       	cp.w	r6,0
80004950:	c0 e0       	breq	8000496c <udi_cdc_tx_send+0xe4>
		if (udd_is_high_speed()) {
80004952:	f0 1f 00 11 	mcall	80004994 <udi_cdc_tx_send+0x10c>
80004956:	c0 60       	breq	80004962 <udi_cdc_tx_send+0xda>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
80004958:	f0 1f 00 11 	mcall	8000499c <udi_cdc_tx_send+0x114>
8000495c:	48 f8       	lddpc	r8,80004998 <udi_cdc_tx_send+0x110>
8000495e:	b0 0c       	st.h	r8[0x0],r12
80004960:	c0 98       	rjmp	80004972 <udi_cdc_tx_send+0xea>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
80004962:	f0 1f 00 10 	mcall	800049a0 <udi_cdc_tx_send+0x118>
80004966:	48 d8       	lddpc	r8,80004998 <udi_cdc_tx_send+0x110>
80004968:	b0 0c       	st.h	r8[0x0],r12
8000496a:	c0 48       	rjmp	80004972 <udi_cdc_tx_send+0xea>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
8000496c:	30 09       	mov	r9,0
8000496e:	48 b8       	lddpc	r8,80004998 <udi_cdc_tx_send+0x110>
80004970:	b0 09       	st.h	r8[0x0],r9
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80004972:	a9 77       	lsl	r7,0x9
80004974:	49 08       	lddpc	r8,800049b4 <udi_cdc_tx_send+0x12c>
80004976:	48 d9       	lddpc	r9,800049a8 <udi_cdc_tx_send+0x120>
80004978:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
8000497c:	48 fa       	lddpc	r10,800049b8 <udi_cdc_tx_send+0x130>
8000497e:	0e 0a       	add	r10,r7
80004980:	0c 9b       	mov	r11,r6
80004982:	e0 6c 00 81 	mov	r12,129
80004986:	f0 1f 00 0e 	mcall	800049bc <udi_cdc_tx_send+0x134>
8000498a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000498e:	00 00       	add	r0,r0
80004990:	00 00       	add	r0,r0
80004992:	0b fc       	ld.ub	r12,r5[0x7]
80004994:	80 00       	ld.sh	r0,r0[0x0]
80004996:	24 74       	sub	r4,71
80004998:	00 00       	add	r0,r0
8000499a:	0b f0       	ld.ub	r0,r5[0x7]
8000499c:	80 00       	ld.sh	r0,r0[0x0]
8000499e:	24 bc       	sub	r12,75
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	24 b0       	sub	r0,75
800049a4:	00 00       	add	r0,r0
800049a6:	07 e0       	ld.ub	r0,r3[0x6]
800049a8:	00 00       	add	r0,r0
800049aa:	07 e4       	ld.ub	r4,r3[0x6]
800049ac:	00 00       	add	r0,r0
800049ae:	07 dc       	ld.ub	r12,r3[0x5]
800049b0:	00 00       	add	r0,r0
800049b2:	10 10       	sub	r0,r8
800049b4:	80 00       	ld.sh	r0,r0[0x0]
800049b6:	49 d0       	lddpc	r0,80004a28 <udi_cdc_data_enable+0x18>
800049b8:	00 00       	add	r0,r0
800049ba:	07 e8       	ld.ub	r8,r3[0x6]
800049bc:	80 00       	ld.sh	r0,r0[0x0]
800049be:	29 fc       	sub	r12,-97

800049c0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800049c0:	d4 01       	pushm	lr
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
800049c2:	30 0c       	mov	r12,0
800049c4:	f0 1f 00 02 	mcall	800049cc <udi_cdc_data_sof_notify+0xc>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
800049c8:	d8 02       	popm	pc
800049ca:	00 00       	add	r0,r0
800049cc:	80 00       	ld.sh	r0,r0[0x0]
800049ce:	48 88       	lddpc	r8,800049ec <udi_cdc_data_sent+0x1c>

800049d0 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
800049d0:	d4 01       	pushm	lr
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
800049d2:	58 0c       	cp.w	r12,0
800049d4:	c1 21       	brne	800049f8 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
800049d6:	48 a8       	lddpc	r8,800049fc <udi_cdc_data_sent+0x2c>
800049d8:	11 88       	ld.ub	r8,r8[0x0]
800049da:	58 08       	cp.w	r8,0
800049dc:	f9 b9 01 00 	movne	r9,0
800049e0:	f9 b9 00 02 	moveq	r9,2
800049e4:	30 08       	mov	r8,0
800049e6:	48 7a       	lddpc	r10,80004a00 <udi_cdc_data_sent+0x30>
800049e8:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
800049ec:	48 69       	lddpc	r9,80004a04 <udi_cdc_data_sent+0x34>
800049ee:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing[port] = false;
800049f0:	48 69       	lddpc	r9,80004a08 <udi_cdc_data_sent+0x38>
800049f2:	b2 88       	st.b	r9[0x0],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
800049f4:	f0 1f 00 06 	mcall	80004a0c <udi_cdc_data_sent+0x3c>
800049f8:	d8 02       	popm	pc
800049fa:	00 00       	add	r0,r0
800049fc:	00 00       	add	r0,r0
800049fe:	07 e0       	ld.ub	r0,r3[0x6]
80004a00:	00 00       	add	r0,r0
80004a02:	07 e4       	ld.ub	r4,r3[0x6]
80004a04:	00 00       	add	r0,r0
80004a06:	10 10       	sub	r0,r8
80004a08:	00 00       	add	r0,r0
80004a0a:	0b fc       	ld.ub	r12,r5[0x7]
80004a0c:	80 00       	ld.sh	r0,r0[0x0]
80004a0e:	48 88       	lddpc	r8,80004a2c <udi_cdc_data_enable+0x1c>

80004a10 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
80004a10:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
80004a14:	30 07       	mov	r7,0
80004a16:	49 88       	lddpc	r8,80004a74 <udi_cdc_data_enable+0x64>
80004a18:	b0 87       	st.b	r8[0x0],r7
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80004a1a:	49 88       	lddpc	r8,80004a78 <udi_cdc_data_enable+0x68>
80004a1c:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_both_buf_to_send[port] = false;
80004a1e:	49 88       	lddpc	r8,80004a7c <udi_cdc_data_enable+0x6c>
80004a20:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_sel[port] = 0;
80004a22:	49 88       	lddpc	r8,80004a80 <udi_cdc_data_enable+0x70>
80004a24:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_nb[port][0] = 0;
80004a26:	49 88       	lddpc	r8,80004a84 <udi_cdc_data_enable+0x74>
80004a28:	30 06       	mov	r6,0
80004a2a:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_buf_nb[port][1] = 0;
80004a2c:	b0 16       	st.h	r8[0x2],r6
	udi_cdc_tx_sof_num[port] = 0;
80004a2e:	49 78       	lddpc	r8,80004a88 <udi_cdc_data_enable+0x78>
80004a30:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_send(port);
80004a32:	30 0c       	mov	r12,0
80004a34:	f0 1f 00 16 	mcall	80004a8c <udi_cdc_data_enable+0x7c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80004a38:	49 68       	lddpc	r8,80004a90 <udi_cdc_data_enable+0x80>
80004a3a:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_sel[port] = 0;
80004a3c:	49 68       	lddpc	r8,80004a94 <udi_cdc_data_enable+0x84>
80004a3e:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_nb[port][0] = 0;
80004a40:	49 68       	lddpc	r8,80004a98 <udi_cdc_data_enable+0x88>
80004a42:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_rx_pos[port] = 0;
80004a44:	49 68       	lddpc	r8,80004a9c <udi_cdc_data_enable+0x8c>
80004a46:	b0 06       	st.h	r8[0x0],r6
	if (!udi_cdc_rx_start(port)) {
80004a48:	30 0c       	mov	r12,0
80004a4a:	f0 1f 00 16 	mcall	80004aa0 <udi_cdc_data_enable+0x90>
80004a4e:	c1 00       	breq	80004a6e <udi_cdc_data_enable+0x5e>
		return false;
	}
	udi_cdc_nb_data_enabled++;
80004a50:	48 98       	lddpc	r8,80004a74 <udi_cdc_data_enable+0x64>
80004a52:	11 89       	ld.ub	r9,r8[0x0]
80004a54:	2f f9       	sub	r9,-1
80004a56:	b0 89       	st.b	r8[0x0],r9
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80004a58:	11 89       	ld.ub	r9,r8[0x0]
80004a5a:	30 18       	mov	r8,1
80004a5c:	f0 09 18 00 	cp.b	r9,r8
80004a60:	c0 30       	breq	80004a66 <udi_cdc_data_enable+0x56>
80004a62:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
		udi_cdc_data_running = true;
80004a66:	30 19       	mov	r9,1
80004a68:	48 f8       	lddpc	r8,80004aa4 <udi_cdc_data_enable+0x94>
80004a6a:	b0 89       	st.b	r8[0x0],r9
80004a6c:	30 1c       	mov	r12,1
	}
	return true;
}
80004a6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004a72:	00 00       	add	r0,r0
80004a74:	00 00       	add	r0,r0
80004a76:	0b f8       	ld.ub	r8,r5[0x7]
80004a78:	00 00       	add	r0,r0
80004a7a:	0b fc       	ld.ub	r12,r5[0x7]
80004a7c:	00 00       	add	r0,r0
80004a7e:	10 10       	sub	r0,r8
80004a80:	00 00       	add	r0,r0
80004a82:	07 e0       	ld.ub	r0,r3[0x6]
80004a84:	00 00       	add	r0,r0
80004a86:	07 e4       	ld.ub	r4,r3[0x6]
80004a88:	00 00       	add	r0,r0
80004a8a:	0b f0       	ld.ub	r0,r5[0x7]
80004a8c:	80 00       	ld.sh	r0,r0[0x0]
80004a8e:	48 88       	lddpc	r8,80004aac <udi_cdc_data_disable+0x4>
80004a90:	00 00       	add	r0,r0
80004a92:	10 0c       	add	r12,r8
80004a94:	00 00       	add	r0,r0
80004a96:	0b f4       	ld.ub	r4,r5[0x7]
80004a98:	00 00       	add	r0,r0
80004a9a:	0b e8       	ld.ub	r8,r5[0x6]
80004a9c:	00 00       	add	r0,r0
80004a9e:	0b ee       	ld.ub	lr,r5[0x6]
80004aa0:	80 00       	ld.sh	r0,r0[0x0]
80004aa2:	46 fc       	lddsp	r12,sp[0x1bc]
80004aa4:	00 00       	add	r0,r0
80004aa6:	0b f2       	ld.ub	r2,r5[0x7]

80004aa8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
80004aa8:	d4 01       	pushm	lr
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
80004aaa:	48 68       	lddpc	r8,80004ac0 <udi_cdc_data_disable+0x18>
80004aac:	11 89       	ld.ub	r9,r8[0x0]
80004aae:	20 19       	sub	r9,1
80004ab0:	b0 89       	st.b	r8[0x0],r9
	port = udi_cdc_nb_data_enabled;
80004ab2:	11 88       	ld.ub	r8,r8[0x0]
	UDI_CDC_DISABLE_EXT(port);
80004ab4:	f0 1f 00 04 	mcall	80004ac4 <udi_cdc_data_disable+0x1c>
	udi_cdc_data_running = false;
80004ab8:	30 09       	mov	r9,0
80004aba:	48 48       	lddpc	r8,80004ac8 <udi_cdc_data_disable+0x20>
80004abc:	b0 89       	st.b	r8[0x0],r9
}
80004abe:	d8 02       	popm	pc
80004ac0:	00 00       	add	r0,r0
80004ac2:	0b f8       	ld.ub	r8,r5[0x7]
80004ac4:	80 00       	ld.sh	r0,r0[0x0]
80004ac6:	54 dc       	stdsp	sp[0x134],r12
80004ac8:	00 00       	add	r0,r0
80004aca:	0b f2       	ld.ub	r2,r5[0x7]

80004acc <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
80004acc:	d4 01       	pushm	lr
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
80004ace:	30 0a       	mov	r10,0
80004ad0:	49 28       	lddpc	r8,80004b18 <udi_cdc_comm_enable+0x4c>
80004ad2:	b0 8a       	st.b	r8[0x0],r10
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
80004ad4:	30 09       	mov	r9,0
80004ad6:	49 28       	lddpc	r8,80004b1c <udi_cdc_comm_enable+0x50>
80004ad8:	b0 09       	st.h	r8[0x0],r9

	uid_cdc_state_msg[port].header.bmRequestType =
80004ada:	49 28       	lddpc	r8,80004b20 <udi_cdc_comm_enable+0x54>
80004adc:	3a 1b       	mov	r11,-95
80004ade:	b0 8b       	st.b	r8[0x0],r11
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
80004ae0:	32 0b       	mov	r11,32
80004ae2:	b0 9b       	st.b	r8[0x1],r11
	uid_cdc_state_msg[port].header.wValue = LE16(0);
80004ae4:	b0 19       	st.h	r8[0x2],r9
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
80004ae6:	b0 29       	st.h	r8[0x4],r9
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80004ae8:	e0 6b 02 00 	mov	r11,512
80004aec:	b0 3b       	st.h	r8[0x6],r11
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
80004aee:	b0 49       	st.h	r8[0x8],r9

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80004af0:	48 d8       	lddpc	r8,80004b24 <udi_cdc_comm_enable+0x58>
80004af2:	e0 69 01 00 	mov	r9,256
80004af6:	ea 19 00 c2 	orh	r9,0xc2
80004afa:	91 09       	st.w	r8[0x0],r9
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80004afc:	b0 ca       	st.b	r8[0x4],r10
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
80004afe:	b0 da       	st.b	r8[0x5],r10
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
80004b00:	30 89       	mov	r9,8
80004b02:	b0 e9       	st.b	r8[0x6],r9
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
80004b04:	f0 1f 00 09 	mcall	80004b28 <udi_cdc_comm_enable+0x5c>
80004b08:	c0 60       	breq	80004b14 <udi_cdc_comm_enable+0x48>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
80004b0a:	48 48       	lddpc	r8,80004b18 <udi_cdc_comm_enable+0x4c>
80004b0c:	11 89       	ld.ub	r9,r8[0x0]
80004b0e:	2f f9       	sub	r9,-1
80004b10:	b0 89       	st.b	r8[0x0],r9
80004b12:	30 1c       	mov	r12,1
	return true;
}
80004b14:	d8 02       	popm	pc
80004b16:	00 00       	add	r0,r0
80004b18:	00 00       	add	r0,r0
80004b1a:	0b ec       	ld.ub	r12,r5[0x6]
80004b1c:	00 00       	add	r0,r0
80004b1e:	10 14       	sub	r4,r8
80004b20:	00 00       	add	r0,r0
80004b22:	0c 00       	add	r0,r6
80004b24:	00 00       	add	r0,r0
80004b26:	07 d4       	ld.ub	r4,r3[0x5]
80004b28:	80 00       	ld.sh	r0,r0[0x0]
80004b2a:	54 d0       	stdsp	sp[0x134],r0

80004b2c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80004b2c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80004b30:	49 18       	lddpc	r8,80004b74 <udc_sof_notify+0x48>
80004b32:	11 89       	ld.ub	r9,r8[0x0]
80004b34:	30 08       	mov	r8,0
80004b36:	f0 09 18 00 	cp.b	r9,r8
80004b3a:	c1 b0       	breq	80004b70 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004b3c:	48 f8       	lddpc	r8,80004b78 <udc_sof_notify+0x4c>
80004b3e:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80004b40:	70 09       	ld.w	r9,r8[0x0]
80004b42:	13 ca       	ld.ub	r10,r9[0x4]
80004b44:	30 09       	mov	r9,0
80004b46:	f2 0a 18 00 	cp.b	r10,r9
80004b4a:	c1 30       	breq	80004b70 <udc_sof_notify+0x44>
80004b4c:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004b4e:	48 b6       	lddpc	r6,80004b78 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80004b50:	70 18       	ld.w	r8,r8[0x4]
80004b52:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80004b56:	70 48       	ld.w	r8,r8[0x10]
80004b58:	58 08       	cp.w	r8,0
80004b5a:	c0 20       	breq	80004b5e <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80004b5c:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004b5e:	2f f7       	sub	r7,-1
80004b60:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004b62:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80004b64:	70 09       	ld.w	r9,r8[0x0]
80004b66:	13 c9       	ld.ub	r9,r9[0x4]
80004b68:	ee 09 18 00 	cp.b	r9,r7
80004b6c:	fe 9b ff f2 	brhi	80004b50 <udc_sof_notify+0x24>
80004b70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004b74:	00 00       	add	r0,r0
80004b76:	10 24       	rsub	r4,r8
80004b78:	00 00       	add	r0,r0
80004b7a:	10 18       	sub	r8,r8

80004b7c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80004b7c:	48 78       	lddpc	r8,80004b98 <udc_get_eof_conf+0x1c>
80004b7e:	70 08       	ld.w	r8,r8[0x0]
80004b80:	70 08       	ld.w	r8,r8[0x0]
80004b82:	11 aa       	ld.ub	r10,r8[0x2]
80004b84:	11 b9       	ld.ub	r9,r8[0x3]
80004b86:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80004b8a:	5c c9       	swap.bh	r9
80004b8c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80004b90:	f0 0c 00 0c 	add	r12,r8,r12
80004b94:	5e fc       	retal	r12
80004b96:	00 00       	add	r0,r0
80004b98:	00 00       	add	r0,r0
80004b9a:	10 18       	sub	r8,r8

80004b9c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80004b9c:	eb cd 40 e0 	pushm	r5-r7,lr
80004ba0:	18 97       	mov	r7,r12
80004ba2:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80004ba4:	49 b8       	lddpc	r8,80004c10 <udc_update_iface_desc+0x74>
80004ba6:	11 89       	ld.ub	r9,r8[0x0]
80004ba8:	30 08       	mov	r8,0
80004baa:	f0 09 18 00 	cp.b	r9,r8
80004bae:	c2 f0       	breq	80004c0c <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80004bb0:	49 98       	lddpc	r8,80004c14 <udc_update_iface_desc+0x78>
80004bb2:	70 08       	ld.w	r8,r8[0x0]
80004bb4:	70 08       	ld.w	r8,r8[0x0]
80004bb6:	11 c9       	ld.ub	r9,r8[0x4]
80004bb8:	18 9e       	mov	lr,r12
80004bba:	f8 09 18 00 	cp.b	r9,r12
80004bbe:	e0 88 00 27 	brls	80004c0c <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80004bc2:	49 65       	lddpc	r5,80004c18 <udc_update_iface_desc+0x7c>
80004bc4:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80004bc6:	f0 1f 00 16 	mcall	80004c1c <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80004bca:	6a 08       	ld.w	r8,r5[0x0]
80004bcc:	10 3c       	cp.w	r12,r8
80004bce:	e0 88 00 1f 	brls	80004c0c <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80004bd2:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80004bd4:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80004bd6:	11 9a       	ld.ub	r10,r8[0x1]
80004bd8:	f6 0a 18 00 	cp.b	r10,r11
80004bdc:	c0 a1       	brne	80004bf0 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80004bde:	11 aa       	ld.ub	r10,r8[0x2]
80004be0:	0e 9e       	mov	lr,r7
80004be2:	ee 0a 18 00 	cp.b	r10,r7
80004be6:	c0 51       	brne	80004bf0 <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80004be8:	11 ba       	ld.ub	r10,r8[0x3]
80004bea:	ec 0a 18 00 	cp.b	r10,r6
80004bee:	c0 b0       	breq	80004c04 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80004bf0:	13 88       	ld.ub	r8,r9[0x0]
80004bf2:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80004bf6:	10 3c       	cp.w	r12,r8
80004bf8:	fe 9b ff ee 	brhi	80004bd4 <udc_update_iface_desc+0x38>
80004bfc:	48 79       	lddpc	r9,80004c18 <udc_update_iface_desc+0x7c>
80004bfe:	93 08       	st.w	r9[0x0],r8
80004c00:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004c04:	48 59       	lddpc	r9,80004c18 <udc_update_iface_desc+0x7c>
80004c06:	93 08       	st.w	r9[0x0],r8
80004c08:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004c0c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004c10:	00 00       	add	r0,r0
80004c12:	10 24       	rsub	r4,r8
80004c14:	00 00       	add	r0,r0
80004c16:	10 18       	sub	r8,r8
80004c18:	00 00       	add	r0,r0
80004c1a:	10 28       	rsub	r8,r8
80004c1c:	80 00       	ld.sh	r0,r0[0x0]
80004c1e:	4b 7c       	lddpc	r12,80004cf8 <udc_iface_disable+0x10>

80004c20 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80004c20:	eb cd 40 c0 	pushm	r6-r7,lr
80004c24:	18 96       	mov	r6,r12
80004c26:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80004c28:	f0 1f 00 11 	mcall	80004c6c <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80004c2c:	0d 88       	ld.ub	r8,r6[0x0]
80004c2e:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80004c30:	0c 3c       	cp.w	r12,r6
80004c32:	e0 88 00 19 	brls	80004c64 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80004c36:	0d 98       	ld.ub	r8,r6[0x1]
80004c38:	30 49       	mov	r9,4
80004c3a:	f2 08 18 00 	cp.b	r8,r9
80004c3e:	c1 30       	breq	80004c64 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80004c40:	ee 08 18 00 	cp.b	r8,r7
80004c44:	c0 a1       	brne	80004c58 <udc_next_desc_in_iface+0x38>
80004c46:	c1 08       	rjmp	80004c66 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80004c48:	0d 98       	ld.ub	r8,r6[0x1]
80004c4a:	f2 08 18 00 	cp.b	r8,r9
80004c4e:	c0 b0       	breq	80004c64 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80004c50:	ee 08 18 00 	cp.b	r8,r7
80004c54:	c0 31       	brne	80004c5a <udc_next_desc_in_iface+0x3a>
80004c56:	c0 88       	rjmp	80004c66 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80004c58:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80004c5a:	0d 88       	ld.ub	r8,r6[0x0]
80004c5c:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80004c5e:	0c 3c       	cp.w	r12,r6
80004c60:	fe 9b ff f4 	brhi	80004c48 <udc_next_desc_in_iface+0x28>
80004c64:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80004c66:	0c 9c       	mov	r12,r6
80004c68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	4b 7c       	lddpc	r12,80004d48 <udc_iface_disable+0x60>

80004c70 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80004c70:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80004c72:	48 48       	lddpc	r8,80004c80 <udc_valid_address+0x10>
80004c74:	11 bc       	ld.ub	r12,r8[0x3]
80004c76:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80004c7a:	f0 1f 00 03 	mcall	80004c84 <udc_valid_address+0x14>
}
80004c7e:	d8 02       	popm	pc
80004c80:	00 00       	add	r0,r0
80004c82:	12 04       	add	r4,r9
80004c84:	80 00       	ld.sh	r0,r0[0x0]
80004c86:	24 82       	sub	r2,72

80004c88 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80004c88:	eb cd 40 e0 	pushm	r5-r7,lr
80004c8c:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80004c8e:	f0 1f 00 12 	mcall	80004cd4 <udc_iface_enable+0x4c>
80004c92:	c1 f0       	breq	80004cd0 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004c94:	49 18       	lddpc	r8,80004cd8 <udc_iface_enable+0x50>
80004c96:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004c98:	30 56       	mov	r6,5
80004c9a:	0c 9b       	mov	r11,r6
80004c9c:	0e 9c       	mov	r12,r7
80004c9e:	f0 1f 00 10 	mcall	80004cdc <udc_iface_enable+0x54>
80004ca2:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80004ca4:	c0 d0       	breq	80004cbe <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80004ca6:	19 ca       	ld.ub	r10,r12[0x4]
80004ca8:	19 d8       	ld.ub	r8,r12[0x5]
80004caa:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80004cae:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80004cb0:	5c 7a       	castu.h	r10
80004cb2:	19 bb       	ld.ub	r11,r12[0x3]
80004cb4:	19 ac       	ld.ub	r12,r12[0x2]
80004cb6:	f0 1f 00 0b 	mcall	80004ce0 <udc_iface_enable+0x58>
80004cba:	cf 01       	brne	80004c9a <udc_iface_enable+0x12>
80004cbc:	c0 a8       	rjmp	80004cd0 <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80004cbe:	48 a8       	lddpc	r8,80004ce4 <udc_iface_enable+0x5c>
80004cc0:	70 08       	ld.w	r8,r8[0x0]
80004cc2:	70 18       	ld.w	r8,r8[0x4]
80004cc4:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80004cc8:	70 0c       	ld.w	r12,r8[0x0]
80004cca:	5d 1c       	icall	r12
80004ccc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004cd0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004cd4:	80 00       	ld.sh	r0,r0[0x0]
80004cd6:	4b 9c       	lddpc	r12,80004db8 <udc_process_setup+0xc>
80004cd8:	00 00       	add	r0,r0
80004cda:	10 28       	rsub	r8,r8
80004cdc:	80 00       	ld.sh	r0,r0[0x0]
80004cde:	4c 20       	lddpc	r0,80004de4 <udc_process_setup+0x38>
80004ce0:	80 00       	ld.sh	r0,r0[0x0]
80004ce2:	2a 98       	sub	r8,-87
80004ce4:	00 00       	add	r0,r0
80004ce6:	10 18       	sub	r8,r8

80004ce8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80004ce8:	eb cd 40 e0 	pushm	r5-r7,lr
80004cec:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80004cee:	18 97       	mov	r7,r12
80004cf0:	30 0b       	mov	r11,0
80004cf2:	f0 1f 00 12 	mcall	80004d38 <udc_iface_disable+0x50>
80004cf6:	c1 e0       	breq	80004d32 <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80004cf8:	49 18       	lddpc	r8,80004d3c <udc_iface_disable+0x54>
80004cfa:	70 08       	ld.w	r8,r8[0x0]
80004cfc:	70 18       	ld.w	r8,r8[0x4]
80004cfe:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80004d02:	6a 3c       	ld.w	r12,r5[0xc]
80004d04:	5d 1c       	icall	r12
80004d06:	18 9b       	mov	r11,r12
80004d08:	0c 9c       	mov	r12,r6
80004d0a:	f0 1f 00 0c 	mcall	80004d38 <udc_iface_disable+0x50>
80004d0e:	c1 20       	breq	80004d32 <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004d10:	48 c8       	lddpc	r8,80004d40 <udc_iface_disable+0x58>
80004d12:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004d14:	30 56       	mov	r6,5
80004d16:	0c 9b       	mov	r11,r6
80004d18:	0e 9c       	mov	r12,r7
80004d1a:	f0 1f 00 0b 	mcall	80004d44 <udc_iface_disable+0x5c>
80004d1e:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80004d20:	c0 50       	breq	80004d2a <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80004d22:	19 ac       	ld.ub	r12,r12[0x2]
80004d24:	f0 1f 00 09 	mcall	80004d48 <udc_iface_disable+0x60>
		}
80004d28:	cf 7b       	rjmp	80004d16 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80004d2a:	6a 18       	ld.w	r8,r5[0x4]
80004d2c:	5d 18       	icall	r8
80004d2e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80004d32:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004d36:	00 00       	add	r0,r0
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	4b 9c       	lddpc	r12,80004e1c <udc_process_setup+0x70>
80004d3c:	00 00       	add	r0,r0
80004d3e:	10 18       	sub	r8,r8
80004d40:	00 00       	add	r0,r0
80004d42:	10 28       	rsub	r8,r8
80004d44:	80 00       	ld.sh	r0,r0[0x0]
80004d46:	4c 20       	lddpc	r0,80004e4c <udc_process_setup+0xa0>
80004d48:	80 00       	ld.sh	r0,r0[0x0]
80004d4a:	27 88       	sub	r8,120

80004d4c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80004d4c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80004d50:	49 38       	lddpc	r8,80004d9c <udc_reset+0x50>
80004d52:	11 89       	ld.ub	r9,r8[0x0]
80004d54:	30 08       	mov	r8,0
80004d56:	f0 09 18 00 	cp.b	r9,r8
80004d5a:	c1 70       	breq	80004d88 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004d5c:	49 18       	lddpc	r8,80004da0 <udc_reset+0x54>
80004d5e:	70 08       	ld.w	r8,r8[0x0]
80004d60:	70 08       	ld.w	r8,r8[0x0]
80004d62:	11 c9       	ld.ub	r9,r8[0x4]
80004d64:	30 08       	mov	r8,0
80004d66:	f0 09 18 00 	cp.b	r9,r8
80004d6a:	c0 f0       	breq	80004d88 <udc_reset+0x3c>
80004d6c:	30 07       	mov	r7,0
80004d6e:	48 d6       	lddpc	r6,80004da0 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
80004d70:	0e 9c       	mov	r12,r7
80004d72:	f0 1f 00 0d 	mcall	80004da4 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004d76:	2f f7       	sub	r7,-1
80004d78:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004d7a:	6c 08       	ld.w	r8,r6[0x0]
80004d7c:	70 08       	ld.w	r8,r8[0x0]
80004d7e:	11 c8       	ld.ub	r8,r8[0x4]
80004d80:	ee 08 18 00 	cp.b	r8,r7
80004d84:	fe 9b ff f6 	brhi	80004d70 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80004d88:	30 09       	mov	r9,0
80004d8a:	48 58       	lddpc	r8,80004d9c <udc_reset+0x50>
80004d8c:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80004d8e:	e0 69 01 00 	mov	r9,256
80004d92:	48 68       	lddpc	r8,80004da8 <udc_reset+0x5c>
80004d94:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80004d96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004d9a:	00 00       	add	r0,r0
80004d9c:	00 00       	add	r0,r0
80004d9e:	10 24       	rsub	r4,r8
80004da0:	00 00       	add	r0,r0
80004da2:	10 18       	sub	r8,r8
80004da4:	80 00       	ld.sh	r0,r0[0x0]
80004da6:	4c e8       	lddpc	r8,80004edc <udc_process_setup+0x130>
80004da8:	00 00       	add	r0,r0
80004daa:	10 22       	rsub	r2,r8

80004dac <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80004dac:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80004db0:	fe f8 06 a8 	ld.w	r8,pc[1704]
80004db4:	30 09       	mov	r9,0
80004db6:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80004db8:	30 0a       	mov	r10,0
80004dba:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80004dbc:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80004dbe:	11 88       	ld.ub	r8,r8[0x0]
80004dc0:	10 9a       	mov	r10,r8
80004dc2:	f2 08 18 00 	cp.b	r8,r9
80004dc6:	c0 94       	brge	80004dd8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
80004dc8:	fe f9 06 90 	ld.w	r9,pc[1680]
80004dcc:	92 3b       	ld.sh	r11,r9[0x6]
80004dce:	30 09       	mov	r9,0
80004dd0:	f2 0b 19 00 	cp.h	r11,r9
80004dd4:	e0 80 03 3e 	breq	80005450 <udc_process_setup+0x6a4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80004dd8:	10 99       	mov	r9,r8
80004dda:	e2 19 00 60 	andl	r9,0x60,COH
80004dde:	e0 81 02 e2 	brne	800053a2 <udc_process_setup+0x5f6>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80004de2:	f2 0a 18 00 	cp.b	r10,r9
80004de6:	e0 84 01 8f 	brge	80005104 <udc_process_setup+0x358>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80004dea:	fe f9 06 6e 	ld.w	r9,pc[1646]
80004dee:	92 39       	ld.sh	r9,r9[0x6]
80004df0:	58 09       	cp.w	r9,0
80004df2:	e0 80 02 d8 	breq	800053a2 <udc_process_setup+0x5f6>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80004df6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004dfa:	e0 81 01 28 	brne	8000504a <udc_process_setup+0x29e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80004dfe:	fe fa 06 5a 	ld.w	r10,pc[1626]
80004e02:	15 9a       	ld.ub	r10,r10[0x1]
80004e04:	30 6b       	mov	r11,6
80004e06:	f6 0a 18 00 	cp.b	r10,r11
80004e0a:	c1 a0       	breq	80004e3e <udc_process_setup+0x92>
80004e0c:	30 8b       	mov	r11,8
80004e0e:	f6 0a 18 00 	cp.b	r10,r11
80004e12:	e0 80 01 0d 	breq	8000502c <udc_process_setup+0x280>
80004e16:	30 0b       	mov	r11,0
80004e18:	f6 0a 18 00 	cp.b	r10,r11
80004e1c:	e0 81 01 17 	brne	8000504a <udc_process_setup+0x29e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80004e20:	30 28       	mov	r8,2
80004e22:	f0 09 19 00 	cp.h	r9,r8
80004e26:	c0 40       	breq	80004e2e <udc_process_setup+0x82>
80004e28:	30 0c       	mov	r12,0
80004e2a:	e0 8f 02 ba 	bral	8000539e <udc_process_setup+0x5f2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80004e2e:	30 2b       	mov	r11,2
80004e30:	fe fc 06 2c 	ld.w	r12,pc[1580]
80004e34:	f0 1f 01 8b 	mcall	80005460 <udc_process_setup+0x6b4>
80004e38:	30 1c       	mov	r12,1
80004e3a:	e0 8f 02 b2 	bral	8000539e <udc_process_setup+0x5f2>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80004e3e:	fe f8 06 1a 	ld.w	r8,pc[1562]
80004e42:	90 19       	ld.sh	r9,r8[0x2]
80004e44:	ef d9 c0 08 	bfextu	r7,r9,0x0,0x8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80004e48:	f2 08 16 08 	lsr	r8,r9,0x8
80004e4c:	30 3a       	mov	r10,3
80004e4e:	f4 08 18 00 	cp.b	r8,r10
80004e52:	e0 80 00 b1 	breq	80004fb4 <udc_process_setup+0x208>
80004e56:	e0 8b 00 0c 	brhi	80004e6e <udc_process_setup+0xc2>
80004e5a:	30 19       	mov	r9,1
80004e5c:	f2 08 18 00 	cp.b	r8,r9
80004e60:	c1 60       	breq	80004e8c <udc_process_setup+0xe0>
80004e62:	30 29       	mov	r9,2
80004e64:	f2 08 18 00 	cp.b	r8,r9
80004e68:	e0 81 00 df 	brne	80005026 <udc_process_setup+0x27a>
80004e6c:	c2 18       	rjmp	80004eae <udc_process_setup+0x102>
80004e6e:	30 79       	mov	r9,7
80004e70:	f2 08 18 00 	cp.b	r8,r9
80004e74:	c5 c0       	breq	80004f2c <udc_process_setup+0x180>
80004e76:	30 f9       	mov	r9,15
80004e78:	f2 08 18 00 	cp.b	r8,r9
80004e7c:	e0 80 00 90 	breq	80004f9c <udc_process_setup+0x1f0>
80004e80:	30 69       	mov	r9,6
80004e82:	f2 08 18 00 	cp.b	r8,r9
80004e86:	e0 81 00 d0 	brne	80005026 <udc_process_setup+0x27a>
80004e8a:	c4 a8       	rjmp	80004f1e <udc_process_setup+0x172>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
80004e8c:	f0 1f 01 76 	mcall	80005464 <udc_process_setup+0x6b8>
80004e90:	c0 81       	brne	80004ea0 <udc_process_setup+0xf4>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
80004e92:	fe f8 05 d6 	ld.w	r8,pc[1494]
80004e96:	70 2c       	ld.w	r12,r8[0x8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
80004e98:	19 8b       	ld.ub	r11,r12[0x0]
80004e9a:	f0 1f 01 72 	mcall	80005460 <udc_process_setup+0x6b4>
80004e9e:	cb 38       	rjmp	80005004 <udc_process_setup+0x258>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80004ea0:	fe f8 05 c8 	ld.w	r8,pc[1480]
80004ea4:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80004ea6:	19 8b       	ld.ub	r11,r12[0x0]
80004ea8:	f0 1f 01 6e 	mcall	80005460 <udc_process_setup+0x6b4>
80004eac:	ca c8       	rjmp	80005004 <udc_process_setup+0x258>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
80004eae:	f0 1f 01 6e 	mcall	80005464 <udc_process_setup+0x6b8>
80004eb2:	c1 90       	breq	80004ee4 <udc_process_setup+0x138>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
80004eb4:	fe f8 05 b4 	ld.w	r8,pc[1460]
80004eb8:	70 28       	ld.w	r8,r8[0x8]
80004eba:	f1 38 00 11 	ld.ub	r8,r8[17]
80004ebe:	ee 08 18 00 	cp.b	r8,r7
80004ec2:	e0 88 00 b2 	brls	80005026 <udc_process_setup+0x27a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
80004ec6:	fe f8 05 a2 	ld.w	r8,pc[1442]
80004eca:	70 48       	ld.w	r8,r8[0x10]
80004ecc:	f0 07 03 3c 	ld.w	r12,r8[r7<<0x3]
80004ed0:	19 a9       	ld.ub	r9,r12[0x2]
80004ed2:	19 b8       	ld.ub	r8,r12[0x3]
80004ed4:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004ed8:	5c c8       	swap.bh	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80004eda:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80004ede:	f0 1f 01 61 	mcall	80005460 <udc_process_setup+0x6b4>
80004ee2:	c1 88       	rjmp	80004f12 <udc_process_setup+0x166>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80004ee4:	fe f8 05 84 	ld.w	r8,pc[1412]
80004ee8:	70 08       	ld.w	r8,r8[0x0]
80004eea:	f1 38 00 11 	ld.ub	r8,r8[17]
80004eee:	ee 08 18 00 	cp.b	r8,r7
80004ef2:	e0 88 00 9a 	brls	80005026 <udc_process_setup+0x27a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80004ef6:	fe f8 05 72 	ld.w	r8,pc[1394]
80004efa:	70 18       	ld.w	r8,r8[0x4]
80004efc:	f0 07 03 3c 	ld.w	r12,r8[r7<<0x3]
80004f00:	19 a9       	ld.ub	r9,r12[0x2]
80004f02:	19 b8       	ld.ub	r8,r12[0x3]
80004f04:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004f08:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80004f0a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80004f0e:	f0 1f 01 55 	mcall	80005460 <udc_process_setup+0x6b4>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80004f12:	fe f8 05 46 	ld.w	r8,pc[1350]
80004f16:	70 28       	ld.w	r8,r8[0x8]
80004f18:	30 29       	mov	r9,2
80004f1a:	b0 99       	st.b	r8[0x1],r9
80004f1c:	c7 48       	rjmp	80005004 <udc_process_setup+0x258>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
80004f1e:	fe f8 05 4a 	ld.w	r8,pc[1354]
80004f22:	70 3c       	ld.w	r12,r8[0xc]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
80004f24:	19 8b       	ld.ub	r11,r12[0x0]
80004f26:	f0 1f 01 4f 	mcall	80005460 <udc_process_setup+0x6b4>
80004f2a:	c6 d8       	rjmp	80005004 <udc_process_setup+0x258>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
80004f2c:	f0 1f 01 4e 	mcall	80005464 <udc_process_setup+0x6b8>
80004f30:	c1 91       	brne	80004f62 <udc_process_setup+0x1b6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
80004f32:	fe f8 05 36 	ld.w	r8,pc[1334]
80004f36:	70 28       	ld.w	r8,r8[0x8]
80004f38:	f1 38 00 11 	ld.ub	r8,r8[17]
80004f3c:	ee 08 18 00 	cp.b	r8,r7
80004f40:	e0 88 00 73 	brls	80005026 <udc_process_setup+0x27a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
80004f44:	fe f8 05 24 	ld.w	r8,pc[1316]
80004f48:	70 48       	ld.w	r8,r8[0x10]
80004f4a:	f0 07 03 3c 	ld.w	r12,r8[r7<<0x3]
80004f4e:	19 a9       	ld.ub	r9,r12[0x2]
80004f50:	19 b8       	ld.ub	r8,r12[0x3]
80004f52:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004f56:	5c c8       	swap.bh	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80004f58:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80004f5c:	f0 1f 01 41 	mcall	80005460 <udc_process_setup+0x6b4>
80004f60:	c1 88       	rjmp	80004f90 <udc_process_setup+0x1e4>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80004f62:	fe f8 05 06 	ld.w	r8,pc[1286]
80004f66:	70 08       	ld.w	r8,r8[0x0]
80004f68:	f1 38 00 11 	ld.ub	r8,r8[17]
80004f6c:	ee 08 18 00 	cp.b	r8,r7
80004f70:	e0 88 00 5b 	brls	80005026 <udc_process_setup+0x27a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80004f74:	fe f8 04 f4 	ld.w	r8,pc[1268]
80004f78:	70 18       	ld.w	r8,r8[0x4]
80004f7a:	f0 07 03 3c 	ld.w	r12,r8[r7<<0x3]
80004f7e:	19 a9       	ld.ub	r9,r12[0x2]
80004f80:	19 b8       	ld.ub	r8,r12[0x3]
80004f82:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004f86:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80004f88:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80004f8c:	f0 1f 01 35 	mcall	80005460 <udc_process_setup+0x6b4>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80004f90:	fe f8 04 c8 	ld.w	r8,pc[1224]
80004f94:	70 28       	ld.w	r8,r8[0x8]
80004f96:	30 79       	mov	r9,7
80004f98:	b0 99       	st.b	r8[0x1],r9
80004f9a:	c3 58       	rjmp	80005004 <udc_process_setup+0x258>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
80004f9c:	fe f8 04 cc 	ld.w	r8,pc[1228]
80004fa0:	70 5c       	ld.w	r12,r8[0x14]
80004fa2:	58 0c       	cp.w	r12,0
80004fa4:	c4 10       	breq	80005026 <udc_process_setup+0x27a>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
80004fa6:	19 ab       	ld.ub	r11,r12[0x2]
80004fa8:	19 b8       	ld.ub	r8,r12[0x3]
80004faa:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80004fae:	f0 1f 01 2d 	mcall	80005460 <udc_process_setup+0x6b4>
80004fb2:	c2 98       	rjmp	80005004 <udc_process_setup+0x258>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80004fb4:	5c 59       	castu.b	r9
80004fb6:	58 19       	cp.w	r9,1
80004fb8:	c1 00       	breq	80004fd8 <udc_process_setup+0x22c>
80004fba:	58 29       	cp.w	r9,2
80004fbc:	c0 40       	breq	80004fc4 <udc_process_setup+0x218>
80004fbe:	58 09       	cp.w	r9,0
80004fc0:	c0 60       	breq	80004fcc <udc_process_setup+0x220>
80004fc2:	c3 28       	rjmp	80005026 <udc_process_setup+0x27a>
80004fc4:	fe fc 04 a8 	ld.w	r12,pc[1192]
80004fc8:	30 fb       	mov	r11,15
80004fca:	c0 a8       	rjmp	80004fde <udc_process_setup+0x232>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80004fcc:	30 4b       	mov	r11,4
80004fce:	fe fc 04 a2 	ld.w	r12,pc[1186]
80004fd2:	f0 1f 01 24 	mcall	80005460 <udc_process_setup+0x6b4>
80004fd6:	c1 78       	rjmp	80005004 <udc_process_setup+0x258>
80004fd8:	fe fc 04 9c 	ld.w	r12,pc[1180]
80004fdc:	30 9b       	mov	r11,9
80004fde:	fe fa 04 9a 	ld.w	r10,pc[1178]
80004fe2:	2f ea       	sub	r10,-2
80004fe4:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80004fe6:	11 39       	ld.ub	r9,r8++
80004fe8:	5c c9       	swap.bh	r9
80004fea:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80004fec:	f0 0c 01 09 	sub	r9,r8,r12
80004ff0:	f6 09 18 00 	cp.b	r9,r11
80004ff4:	cf 93       	brcs	80004fe6 <udc_process_setup+0x23a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80004ff6:	a1 7b       	lsl	r11,0x1
80004ff8:	2f eb       	sub	r11,-2
80004ffa:	fe fc 04 7e 	ld.w	r12,pc[1150]
80004ffe:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80005000:	f0 1f 01 18 	mcall	80005460 <udc_process_setup+0x6b4>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80005004:	fe f8 04 54 	ld.w	r8,pc[1108]
80005008:	90 39       	ld.sh	r9,r8[0x6]
8000500a:	90 68       	ld.sh	r8,r8[0xc]
8000500c:	f2 08 19 00 	cp.h	r8,r9
80005010:	e0 8b 00 05 	brhi	8000501a <udc_process_setup+0x26e>
80005014:	30 1c       	mov	r12,1
80005016:	e0 8f 01 c4 	bral	8000539e <udc_process_setup+0x5f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000501a:	fe f8 04 3e 	ld.w	r8,pc[1086]
8000501e:	b0 69       	st.h	r8[0xc],r9
80005020:	30 1c       	mov	r12,1
80005022:	e0 8f 01 be 	bral	8000539e <udc_process_setup+0x5f2>
80005026:	30 0c       	mov	r12,0
80005028:	e0 8f 01 bb 	bral	8000539e <udc_process_setup+0x5f2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
8000502c:	30 18       	mov	r8,1
8000502e:	f0 09 19 00 	cp.h	r9,r8
80005032:	c0 40       	breq	8000503a <udc_process_setup+0x28e>
80005034:	30 0c       	mov	r12,0
80005036:	e0 8f 01 b4 	bral	8000539e <udc_process_setup+0x5f2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000503a:	30 1b       	mov	r11,1
8000503c:	fe fc 04 40 	ld.w	r12,pc[1088]
80005040:	f0 1f 01 08 	mcall	80005460 <udc_process_setup+0x6b4>
80005044:	30 1c       	mov	r12,1
80005046:	e0 8f 01 ac 	bral	8000539e <udc_process_setup+0x5f2>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000504a:	58 18       	cp.w	r8,1
8000504c:	c3 81       	brne	800050bc <udc_process_setup+0x310>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000504e:	fe fa 04 0a 	ld.w	r10,pc[1034]
80005052:	15 9b       	ld.ub	r11,r10[0x1]
80005054:	30 aa       	mov	r10,10
80005056:	f4 0b 18 00 	cp.b	r11,r10
8000505a:	c3 11       	brne	800050bc <udc_process_setup+0x310>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000505c:	f0 09 19 00 	cp.h	r9,r8
80005060:	c2 b1       	brne	800050b6 <udc_process_setup+0x30a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80005062:	fe f8 04 1a 	ld.w	r8,pc[1050]
80005066:	11 89       	ld.ub	r9,r8[0x0]
80005068:	30 08       	mov	r8,0
8000506a:	f0 09 18 00 	cp.b	r9,r8
8000506e:	c2 40       	breq	800050b6 <udc_process_setup+0x30a>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80005070:	fe f8 03 e8 	ld.w	r8,pc[1000]
80005074:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80005076:	fe f8 04 0a 	ld.w	r8,pc[1034]
8000507a:	70 08       	ld.w	r8,r8[0x0]
8000507c:	70 08       	ld.w	r8,r8[0x0]
8000507e:	11 c8       	ld.ub	r8,r8[0x4]
80005080:	ee 08 18 00 	cp.b	r8,r7
80005084:	e0 88 00 19 	brls	800050b6 <udc_process_setup+0x30a>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80005088:	30 0b       	mov	r11,0
8000508a:	0e 9c       	mov	r12,r7
8000508c:	f0 1f 00 fe 	mcall	80005484 <udc_process_setup+0x6d8>
80005090:	c1 30       	breq	800050b6 <udc_process_setup+0x30a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80005092:	fe f8 03 ee 	ld.w	r8,pc[1006]
80005096:	70 08       	ld.w	r8,r8[0x0]
80005098:	70 18       	ld.w	r8,r8[0x4]
8000509a:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
8000509e:	70 3c       	ld.w	r12,r8[0xc]
800050a0:	5d 1c       	icall	r12
800050a2:	fe f8 03 e6 	ld.w	r8,pc[998]
800050a6:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800050a8:	30 1b       	mov	r11,1
800050aa:	10 9c       	mov	r12,r8
800050ac:	f0 1f 00 ed 	mcall	80005460 <udc_process_setup+0x6b4>
800050b0:	30 1c       	mov	r12,1
800050b2:	e0 8f 01 76 	bral	8000539e <udc_process_setup+0x5f2>
800050b6:	30 0c       	mov	r12,0
800050b8:	e0 8f 01 73 	bral	8000539e <udc_process_setup+0x5f2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800050bc:	58 28       	cp.w	r8,2
800050be:	e0 81 01 72 	brne	800053a2 <udc_process_setup+0x5f6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800050c2:	fe f8 03 96 	ld.w	r8,pc[918]
800050c6:	11 9a       	ld.ub	r10,r8[0x1]
800050c8:	30 08       	mov	r8,0
800050ca:	f0 0a 18 00 	cp.b	r10,r8
800050ce:	e0 81 01 67 	brne	8000539c <udc_process_setup+0x5f0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
800050d2:	30 28       	mov	r8,2
800050d4:	f0 09 19 00 	cp.h	r9,r8
800050d8:	c0 40       	breq	800050e0 <udc_process_setup+0x334>
800050da:	30 0c       	mov	r12,0
800050dc:	e0 8f 01 61 	bral	8000539e <udc_process_setup+0x5f2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800050e0:	fe f8 03 78 	ld.w	r8,pc[888]
800050e4:	11 dc       	ld.ub	r12,r8[0x5]
800050e6:	f0 1f 00 ea 	mcall	8000548c <udc_process_setup+0x6e0>
800050ea:	e0 68 01 00 	mov	r8,256
800050ee:	f9 b8 00 00 	moveq	r8,0
800050f2:	fe fc 03 9e 	ld.w	r12,pc[926]
800050f6:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
800050f8:	30 2b       	mov	r11,2
800050fa:	f0 1f 00 da 	mcall	80005460 <udc_process_setup+0x6b4>
800050fe:	30 1c       	mov	r12,1
80005100:	e0 8f 01 4f 	bral	8000539e <udc_process_setup+0x5f2>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80005104:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005108:	e0 81 00 f1 	brne	800052ea <udc_process_setup+0x53e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000510c:	fe f9 03 4c 	ld.w	r9,pc[844]
80005110:	13 99       	ld.ub	r9,r9[0x1]
80005112:	30 3a       	mov	r10,3
80005114:	f4 09 18 00 	cp.b	r9,r10
80005118:	c3 a0       	breq	8000518c <udc_process_setup+0x3e0>
8000511a:	e0 8b 00 08 	brhi	8000512a <udc_process_setup+0x37e>
8000511e:	30 1a       	mov	r10,1
80005120:	f4 09 18 00 	cp.b	r9,r10
80005124:	e0 81 00 e3 	brne	800052ea <udc_process_setup+0x53e>
80005128:	c1 b8       	rjmp	8000515e <udc_process_setup+0x3b2>
8000512a:	30 5a       	mov	r10,5
8000512c:	f4 09 18 00 	cp.b	r9,r10
80005130:	c0 70       	breq	8000513e <udc_process_setup+0x392>
80005132:	30 9a       	mov	r10,9
80005134:	f4 09 18 00 	cp.b	r9,r10
80005138:	e0 81 00 d9 	brne	800052ea <udc_process_setup+0x53e>
8000513c:	c7 58       	rjmp	80005226 <udc_process_setup+0x47a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000513e:	fe f8 03 1a 	ld.w	r8,pc[794]
80005142:	90 39       	ld.sh	r9,r8[0x6]
80005144:	30 08       	mov	r8,0
80005146:	f0 09 19 00 	cp.h	r9,r8
8000514a:	c0 30       	breq	80005150 <udc_process_setup+0x3a4>
8000514c:	30 0c       	mov	r12,0
8000514e:	c2 89       	rjmp	8000539e <udc_process_setup+0x5f2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80005150:	fe f9 03 44 	ld.w	r9,pc[836]
80005154:	fe f8 03 04 	ld.w	r8,pc[772]
80005158:	91 49       	st.w	r8[0x10],r9
8000515a:	30 1c       	mov	r12,1
8000515c:	c2 19       	rjmp	8000539e <udc_process_setup+0x5f2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000515e:	fe f8 02 fa 	ld.w	r8,pc[762]
80005162:	90 39       	ld.sh	r9,r8[0x6]
80005164:	30 08       	mov	r8,0
80005166:	f0 09 19 00 	cp.h	r9,r8
8000516a:	c0 f1       	brne	80005188 <udc_process_setup+0x3dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000516c:	fe f8 02 ec 	ld.w	r8,pc[748]
80005170:	90 19       	ld.sh	r9,r8[0x2]
80005172:	30 18       	mov	r8,1
80005174:	f0 09 19 00 	cp.h	r9,r8
80005178:	c0 81       	brne	80005188 <udc_process_setup+0x3dc>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000517a:	fe f8 02 e2 	ld.w	r8,pc[738]
8000517e:	90 09       	ld.sh	r9,r8[0x0]
80005180:	a9 d9       	cbr	r9,0x9
80005182:	b0 09       	st.h	r8[0x0],r9
80005184:	30 1c       	mov	r12,1
80005186:	c0 c9       	rjmp	8000539e <udc_process_setup+0x5f2>
80005188:	30 0c       	mov	r12,0
8000518a:	c0 a9       	rjmp	8000539e <udc_process_setup+0x5f2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000518c:	fe f8 02 cc 	ld.w	r8,pc[716]
80005190:	90 39       	ld.sh	r9,r8[0x6]
80005192:	30 08       	mov	r8,0
80005194:	f0 09 19 00 	cp.h	r9,r8
80005198:	c4 51       	brne	80005222 <udc_process_setup+0x476>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000519a:	fe f8 02 be 	ld.w	r8,pc[702]
8000519e:	90 19       	ld.sh	r9,r8[0x2]
800051a0:	30 28       	mov	r8,2
800051a2:	f0 09 19 00 	cp.h	r9,r8
800051a6:	c3 e1       	brne	80005222 <udc_process_setup+0x476>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
800051a8:	f0 1f 00 af 	mcall	80005464 <udc_process_setup+0x6b8>
800051ac:	c3 b0       	breq	80005222 <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
800051ae:	fe f8 02 aa 	ld.w	r8,pc[682]
800051b2:	11 d8       	ld.ub	r8,r8[0x5]
800051b4:	58 08       	cp.w	r8,0
800051b6:	c3 61       	brne	80005222 <udc_process_setup+0x476>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
800051b8:	f0 1f 00 b8 	mcall	80005498 <udc_process_setup+0x6ec>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
800051bc:	fe f8 02 9c 	ld.w	r8,pc[668]
800051c0:	11 c8       	ld.ub	r8,r8[0x4]
800051c2:	30 29       	mov	r9,2
800051c4:	f2 08 19 00 	cp.h	r8,r9
800051c8:	c1 80       	breq	800051f8 <udc_process_setup+0x44c>
800051ca:	e0 8b 00 07 	brhi	800051d8 <udc_process_setup+0x42c>
800051ce:	30 19       	mov	r9,1
800051d0:	f2 08 19 00 	cp.h	r8,r9
800051d4:	c2 71       	brne	80005222 <udc_process_setup+0x476>
800051d6:	c0 a8       	rjmp	800051ea <udc_process_setup+0x43e>
800051d8:	30 39       	mov	r9,3
800051da:	f2 08 19 00 	cp.h	r8,r9
800051de:	c1 40       	breq	80005206 <udc_process_setup+0x45a>
800051e0:	30 49       	mov	r9,4
800051e2:	f2 08 19 00 	cp.h	r8,r9
800051e6:	c1 e1       	brne	80005222 <udc_process_setup+0x476>
800051e8:	c1 68       	rjmp	80005214 <udc_process_setup+0x468>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
800051ea:	fe f9 02 b2 	ld.w	r9,pc[690]
800051ee:	fe f8 02 6a 	ld.w	r8,pc[618]
800051f2:	91 49       	st.w	r8[0x10],r9
800051f4:	30 1c       	mov	r12,1
800051f6:	cd 48       	rjmp	8000539e <udc_process_setup+0x5f2>
			return true;

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
800051f8:	fe f9 02 a8 	ld.w	r9,pc[680]
800051fc:	fe f8 02 5c 	ld.w	r8,pc[604]
80005200:	91 49       	st.w	r8[0x10],r9
80005202:	30 1c       	mov	r12,1
80005204:	cc d8       	rjmp	8000539e <udc_process_setup+0x5f2>
			return true;

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
80005206:	fe f9 02 9e 	ld.w	r9,pc[670]
8000520a:	fe f8 02 4e 	ld.w	r8,pc[590]
8000520e:	91 49       	st.w	r8[0x10],r9
80005210:	30 1c       	mov	r12,1
80005212:	cc 68       	rjmp	8000539e <udc_process_setup+0x5f2>
			return true;

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
80005214:	fe f9 02 94 	ld.w	r9,pc[660]
80005218:	fe f8 02 40 	ld.w	r8,pc[576]
8000521c:	91 49       	st.w	r8[0x10],r9
8000521e:	30 1c       	mov	r12,1
80005220:	cb f8       	rjmp	8000539e <udc_process_setup+0x5f2>
80005222:	30 0c       	mov	r12,0
80005224:	cb d8       	rjmp	8000539e <udc_process_setup+0x5f2>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80005226:	fe f8 02 32 	ld.w	r8,pc[562]
8000522a:	90 39       	ld.sh	r9,r8[0x6]
8000522c:	30 08       	mov	r8,0
8000522e:	f0 09 19 00 	cp.h	r9,r8
80005232:	c5 81       	brne	800052e2 <udc_process_setup+0x536>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80005234:	f0 1f 00 9e 	mcall	800054ac <udc_process_setup+0x700>
80005238:	c5 50       	breq	800052e2 <udc_process_setup+0x536>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000523a:	f0 1f 00 8b 	mcall	80005464 <udc_process_setup+0x6b8>
8000523e:	c0 d0       	breq	80005258 <udc_process_setup+0x4ac>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80005240:	fe f8 02 18 	ld.w	r8,pc[536]
80005244:	11 b9       	ld.ub	r9,r8[0x3]
80005246:	fe f8 02 22 	ld.w	r8,pc[546]
8000524a:	70 28       	ld.w	r8,r8[0x8]
8000524c:	f1 38 00 11 	ld.ub	r8,r8[17]
80005250:	10 39       	cp.w	r9,r8
80005252:	e0 8a 00 0e 	brle	8000526e <udc_process_setup+0x4c2>
80005256:	c4 68       	rjmp	800052e2 <udc_process_setup+0x536>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80005258:	fe f8 02 00 	ld.w	r8,pc[512]
8000525c:	11 b9       	ld.ub	r9,r8[0x3]
8000525e:	fe f8 02 0a 	ld.w	r8,pc[522]
80005262:	70 08       	ld.w	r8,r8[0x0]
80005264:	f1 38 00 11 	ld.ub	r8,r8[17]
80005268:	10 39       	cp.w	r9,r8
8000526a:	e0 89 00 3c 	brgt	800052e2 <udc_process_setup+0x536>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000526e:	f0 1f 00 8b 	mcall	80005498 <udc_process_setup+0x6ec>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80005272:	4f a8       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
80005274:	11 b8       	ld.ub	r8,r8[0x3]
80005276:	fe f9 02 06 	ld.w	r9,pc[518]
8000527a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000527c:	58 08       	cp.w	r8,0
8000527e:	c3 40       	breq	800052e6 <udc_process_setup+0x53a>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
80005280:	f0 1f 00 79 	mcall	80005464 <udc_process_setup+0x6b8>
80005284:	c1 30       	breq	800052aa <udc_process_setup+0x4fe>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
80005286:	4f e8       	lddpc	r8,8000547c <udc_process_setup+0x6d0>
80005288:	11 89       	ld.ub	r9,r8[0x0]
8000528a:	20 19       	sub	r9,1
8000528c:	4f 78       	lddpc	r8,80005468 <udc_process_setup+0x6bc>
8000528e:	70 48       	ld.w	r8,r8[0x10]
80005290:	f0 09 00 39 	add	r9,r8,r9<<0x3
80005294:	4f b8       	lddpc	r8,80005480 <udc_process_setup+0x6d4>
80005296:	91 09       	st.w	r8[0x0],r9
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80005298:	4f a8       	lddpc	r8,80005480 <udc_process_setup+0x6d4>
8000529a:	70 08       	ld.w	r8,r8[0x0]
8000529c:	70 08       	ld.w	r8,r8[0x0]
8000529e:	11 c9       	ld.ub	r9,r8[0x4]
800052a0:	30 08       	mov	r8,0
800052a2:	f0 09 18 00 	cp.b	r9,r8
800052a6:	c0 c1       	brne	800052be <udc_process_setup+0x512>
800052a8:	c1 f8       	rjmp	800052e6 <udc_process_setup+0x53a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800052aa:	4f 58       	lddpc	r8,8000547c <udc_process_setup+0x6d0>
800052ac:	11 89       	ld.ub	r9,r8[0x0]
800052ae:	20 19       	sub	r9,1
800052b0:	4e e8       	lddpc	r8,80005468 <udc_process_setup+0x6bc>
800052b2:	70 18       	ld.w	r8,r8[0x4]
800052b4:	f0 09 00 39 	add	r9,r8,r9<<0x3
800052b8:	4f 28       	lddpc	r8,80005480 <udc_process_setup+0x6d4>
800052ba:	91 09       	st.w	r8[0x0],r9
800052bc:	ce eb       	rjmp	80005298 <udc_process_setup+0x4ec>
800052be:	30 07       	mov	r7,0
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800052c0:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800052c2:	4f 06       	lddpc	r6,80005480 <udc_process_setup+0x6d4>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800052c4:	0a 9b       	mov	r11,r5
800052c6:	0e 9c       	mov	r12,r7
800052c8:	f0 1f 00 7a 	mcall	800054b0 <udc_process_setup+0x704>
800052cc:	c0 b0       	breq	800052e2 <udc_process_setup+0x536>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800052ce:	2f f7       	sub	r7,-1
800052d0:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800052d2:	6c 08       	ld.w	r8,r6[0x0]
800052d4:	70 08       	ld.w	r8,r8[0x0]
800052d6:	11 c8       	ld.ub	r8,r8[0x4]
800052d8:	ee 08 18 00 	cp.b	r8,r7
800052dc:	fe 9b ff f4 	brhi	800052c4 <udc_process_setup+0x518>
800052e0:	c0 38       	rjmp	800052e6 <udc_process_setup+0x53a>
800052e2:	30 0c       	mov	r12,0
800052e4:	c5 d8       	rjmp	8000539e <udc_process_setup+0x5f2>
800052e6:	30 1c       	mov	r12,1
800052e8:	c5 b8       	rjmp	8000539e <udc_process_setup+0x5f2>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800052ea:	58 18       	cp.w	r8,1
800052ec:	c2 21       	brne	80005330 <udc_process_setup+0x584>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800052ee:	4d b9       	lddpc	r9,80005458 <udc_process_setup+0x6ac>
800052f0:	13 9a       	ld.ub	r10,r9[0x1]
800052f2:	30 b9       	mov	r9,11
800052f4:	f2 0a 18 00 	cp.b	r10,r9
800052f8:	c1 c1       	brne	80005330 <udc_process_setup+0x584>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800052fa:	4d 88       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
800052fc:	90 39       	ld.sh	r9,r8[0x6]
800052fe:	30 08       	mov	r8,0
80005300:	f0 09 19 00 	cp.h	r9,r8
80005304:	c1 41       	brne	8000532c <udc_process_setup+0x580>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80005306:	4d e8       	lddpc	r8,8000547c <udc_process_setup+0x6d0>
80005308:	11 89       	ld.ub	r9,r8[0x0]
8000530a:	30 08       	mov	r8,0
8000530c:	f0 09 18 00 	cp.b	r9,r8
80005310:	c0 e0       	breq	8000532c <udc_process_setup+0x580>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80005312:	4d 28       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
80005314:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
80005316:	11 d7       	ld.ub	r7,r8[0x5]
80005318:	0e 9c       	mov	r12,r7
8000531a:	f0 1f 00 67 	mcall	800054b4 <udc_process_setup+0x708>
8000531e:	c0 70       	breq	8000532c <udc_process_setup+0x580>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80005320:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80005324:	0e 9c       	mov	r12,r7
80005326:	f0 1f 00 63 	mcall	800054b0 <udc_process_setup+0x704>
8000532a:	c3 a8       	rjmp	8000539e <udc_process_setup+0x5f2>
8000532c:	30 0c       	mov	r12,0
8000532e:	c3 88       	rjmp	8000539e <udc_process_setup+0x5f2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80005330:	58 28       	cp.w	r8,2
80005332:	c3 81       	brne	800053a2 <udc_process_setup+0x5f6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80005334:	4c 98       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
80005336:	11 98       	ld.ub	r8,r8[0x1]
80005338:	30 19       	mov	r9,1
8000533a:	f2 08 18 00 	cp.b	r8,r9
8000533e:	c0 60       	breq	8000534a <udc_process_setup+0x59e>
80005340:	30 39       	mov	r9,3
80005342:	f2 08 18 00 	cp.b	r8,r9
80005346:	c2 b1       	brne	8000539c <udc_process_setup+0x5f0>
80005348:	c1 48       	rjmp	80005370 <udc_process_setup+0x5c4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000534a:	4c 48       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
8000534c:	90 39       	ld.sh	r9,r8[0x6]
8000534e:	30 08       	mov	r8,0
80005350:	f0 09 19 00 	cp.h	r9,r8
80005354:	c0 c1       	brne	8000536c <udc_process_setup+0x5c0>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80005356:	4c 18       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
80005358:	90 19       	ld.sh	r9,r8[0x2]
8000535a:	30 08       	mov	r8,0
8000535c:	f0 09 19 00 	cp.h	r9,r8
80005360:	c0 61       	brne	8000536c <udc_process_setup+0x5c0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80005362:	4b e8       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
80005364:	11 dc       	ld.ub	r12,r8[0x5]
80005366:	f0 1f 00 55 	mcall	800054b8 <udc_process_setup+0x70c>
8000536a:	c1 a8       	rjmp	8000539e <udc_process_setup+0x5f2>
8000536c:	30 0c       	mov	r12,0
8000536e:	c1 88       	rjmp	8000539e <udc_process_setup+0x5f2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80005370:	4b a8       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
80005372:	90 39       	ld.sh	r9,r8[0x6]
80005374:	30 08       	mov	r8,0
80005376:	f0 09 19 00 	cp.h	r9,r8
8000537a:	c0 f1       	brne	80005398 <udc_process_setup+0x5ec>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000537c:	4b 78       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
8000537e:	90 19       	ld.sh	r9,r8[0x2]
80005380:	30 08       	mov	r8,0
80005382:	f0 09 19 00 	cp.h	r9,r8
80005386:	c0 91       	brne	80005398 <udc_process_setup+0x5ec>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80005388:	4b 47       	lddpc	r7,80005458 <udc_process_setup+0x6ac>
8000538a:	0f dc       	ld.ub	r12,r7[0x5]
8000538c:	f0 1f 00 4c 	mcall	800054bc <udc_process_setup+0x710>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80005390:	0f dc       	ld.ub	r12,r7[0x5]
80005392:	f0 1f 00 4c 	mcall	800054c0 <udc_process_setup+0x714>
80005396:	c0 48       	rjmp	8000539e <udc_process_setup+0x5f2>
80005398:	30 0c       	mov	r12,0
8000539a:	c0 28       	rjmp	8000539e <udc_process_setup+0x5f2>
8000539c:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
8000539e:	58 0c       	cp.w	r12,0
800053a0:	c5 a1       	brne	80005454 <udc_process_setup+0x6a8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
800053a2:	4a e8       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
800053a4:	11 88       	ld.ub	r8,r8[0x0]
800053a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800053aa:	58 18       	cp.w	r8,1
800053ac:	c2 61       	brne	800053f8 <udc_process_setup+0x64c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800053ae:	4b 48       	lddpc	r8,8000547c <udc_process_setup+0x6d0>
800053b0:	11 89       	ld.ub	r9,r8[0x0]
800053b2:	30 08       	mov	r8,0
800053b4:	f0 09 18 00 	cp.b	r9,r8
800053b8:	c2 00       	breq	800053f8 <udc_process_setup+0x64c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800053ba:	4a 88       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
800053bc:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800053be:	4b 18       	lddpc	r8,80005480 <udc_process_setup+0x6d4>
800053c0:	70 08       	ld.w	r8,r8[0x0]
800053c2:	70 08       	ld.w	r8,r8[0x0]
800053c4:	11 c8       	ld.ub	r8,r8[0x4]
800053c6:	ee 08 18 00 	cp.b	r8,r7
800053ca:	e0 88 00 17 	brls	800053f8 <udc_process_setup+0x64c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800053ce:	0e 96       	mov	r6,r7
800053d0:	30 0b       	mov	r11,0
800053d2:	0e 9c       	mov	r12,r7
800053d4:	f0 1f 00 2c 	mcall	80005484 <udc_process_setup+0x6d8>
800053d8:	c1 00       	breq	800053f8 <udc_process_setup+0x64c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800053da:	4a a8       	lddpc	r8,80005480 <udc_process_setup+0x6d4>
800053dc:	70 08       	ld.w	r8,r8[0x0]
800053de:	70 18       	ld.w	r8,r8[0x4]
800053e0:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800053e4:	6e 3c       	ld.w	r12,r7[0xc]
800053e6:	5d 1c       	icall	r12
800053e8:	18 9b       	mov	r11,r12
800053ea:	0c 9c       	mov	r12,r6
800053ec:	f0 1f 00 26 	mcall	80005484 <udc_process_setup+0x6d8>
800053f0:	c0 40       	breq	800053f8 <udc_process_setup+0x64c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
800053f2:	6e 2c       	ld.w	r12,r7[0x8]
800053f4:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
800053f6:	c2 f1       	brne	80005454 <udc_process_setup+0x6a8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
800053f8:	49 88       	lddpc	r8,80005458 <udc_process_setup+0x6ac>
800053fa:	11 88       	ld.ub	r8,r8[0x0]
800053fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005400:	58 28       	cp.w	r8,2
80005402:	c2 71       	brne	80005450 <udc_process_setup+0x6a4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80005404:	49 e8       	lddpc	r8,8000547c <udc_process_setup+0x6d0>
80005406:	11 89       	ld.ub	r9,r8[0x0]
80005408:	30 08       	mov	r8,0
8000540a:	f0 09 18 00 	cp.b	r9,r8
8000540e:	c2 10       	breq	80005450 <udc_process_setup+0x6a4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80005410:	49 c8       	lddpc	r8,80005480 <udc_process_setup+0x6d4>
80005412:	70 08       	ld.w	r8,r8[0x0]
80005414:	70 09       	ld.w	r9,r8[0x0]
80005416:	13 ca       	ld.ub	r10,r9[0x4]
80005418:	30 09       	mov	r9,0
8000541a:	f2 0a 18 00 	cp.b	r10,r9
8000541e:	c1 90       	breq	80005450 <udc_process_setup+0x6a4>
80005420:	30 07       	mov	r7,0
80005422:	49 85       	lddpc	r5,80005480 <udc_process_setup+0x6d4>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
80005424:	70 18       	ld.w	r8,r8[0x4]
80005426:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000542a:	6c 3c       	ld.w	r12,r6[0xc]
8000542c:	5d 1c       	icall	r12
8000542e:	18 9b       	mov	r11,r12
80005430:	0e 9c       	mov	r12,r7
80005432:	f0 1f 00 15 	mcall	80005484 <udc_process_setup+0x6d8>
80005436:	c0 d0       	breq	80005450 <udc_process_setup+0x6a4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
80005438:	6c 2c       	ld.w	r12,r6[0x8]
8000543a:	5d 1c       	icall	r12
8000543c:	c0 c1       	brne	80005454 <udc_process_setup+0x6a8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000543e:	2f f7       	sub	r7,-1
80005440:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80005442:	6a 08       	ld.w	r8,r5[0x0]
80005444:	70 09       	ld.w	r9,r8[0x0]
80005446:	13 c9       	ld.ub	r9,r9[0x4]
80005448:	ee 09 18 00 	cp.b	r9,r7
8000544c:	fe 9b ff ec 	brhi	80005424 <udc_process_setup+0x678>
80005450:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80005454:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80005458:	00 00       	add	r0,r0
8000545a:	12 04       	add	r4,r9
8000545c:	00 00       	add	r0,r0
8000545e:	10 22       	rsub	r2,r8
80005460:	80 00       	ld.sh	r0,r0[0x0]
80005462:	24 c8       	sub	r8,76
80005464:	80 00       	ld.sh	r0,r0[0x0]
80005466:	24 74       	sub	r4,71
80005468:	00 00       	add	r0,r0
8000546a:	00 b4       	st.h	r0++,r4
8000546c:	00 00       	add	r0,r0
8000546e:	01 2c       	ld.uh	r12,r0++
80005470:	00 00       	add	r0,r0
80005472:	01 68       	ld.uh	r8,--r0
80005474:	00 00       	add	r0,r0
80005476:	01 3c       	ld.ub	r12,r0++
80005478:	00 00       	add	r0,r0
8000547a:	01 48       	ld.w	r8,--r0
8000547c:	00 00       	add	r0,r0
8000547e:	10 24       	rsub	r4,r8
80005480:	00 00       	add	r0,r0
80005482:	10 18       	sub	r8,r8
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	4b 9c       	lddpc	r12,80005568 <main+0xc>
80005488:	00 00       	add	r0,r0
8000548a:	10 1c       	sub	r12,r8
8000548c:	80 00       	ld.sh	r0,r0[0x0]
8000548e:	24 d4       	sub	r4,77
80005490:	00 00       	add	r0,r0
80005492:	10 20       	rsub	r0,r8
80005494:	80 00       	ld.sh	r0,r0[0x0]
80005496:	4c 70       	lddpc	r0,800055b0 <main+0x54>
80005498:	80 00       	ld.sh	r0,r0[0x0]
8000549a:	4d 4c       	lddpc	r12,800055e8 <main+0x8c>
8000549c:	80 00       	ld.sh	r0,r0[0x0]
8000549e:	26 58       	sub	r8,101
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	26 6e       	sub	lr,102
800054a4:	80 00       	ld.sh	r0,r0[0x0]
800054a6:	26 84       	sub	r4,104
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	27 e0       	sub	r0,126
800054ac:	80 00       	ld.sh	r0,r0[0x0]
800054ae:	24 a4       	sub	r4,74
800054b0:	80 00       	ld.sh	r0,r0[0x0]
800054b2:	4c 88       	lddpc	r8,800055d0 <main+0x74>
800054b4:	80 00       	ld.sh	r0,r0[0x0]
800054b6:	4c e8       	lddpc	r8,800055ec <main+0x90>
800054b8:	80 00       	ld.sh	r0,r0[0x0]
800054ba:	25 90       	sub	r0,89
800054bc:	80 00       	ld.sh	r0,r0[0x0]
800054be:	27 20       	sub	r0,114
800054c0:	80 00       	ld.sh	r0,r0[0x0]
800054c2:	24 e8       	sub	r8,78

800054c4 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
800054c4:	d4 01       	pushm	lr
	udd_enable();
800054c6:	f0 1f 00 02 	mcall	800054cc <udc_start+0x8>
}
800054ca:	d8 02       	popm	pc
800054cc:	80 00       	ld.sh	r0,r0[0x0]
800054ce:	2e 0c       	sub	r12,-32

800054d0 <main_cdc_enable>:
}

bool main_cdc_enable(void)
{
	/* Indication to application when CDC is enabled successfully */
	main_b_cdc_enable = true;
800054d0:	30 19       	mov	r9,1
800054d2:	48 28       	lddpc	r8,800054d8 <main_cdc_enable+0x8>
800054d4:	b0 89       	st.b	r8[0x0],r9
	return true;
}
800054d6:	5e ff       	retal	1
800054d8:	00 00       	add	r0,r0
800054da:	11 c8       	ld.ub	r8,r8[0x4]

800054dc <main_cdc_disable>:

void main_cdc_disable(void)
{
	main_b_cdc_enable = false;
800054dc:	30 09       	mov	r9,0
800054de:	48 28       	lddpc	r8,800054e4 <main_cdc_disable+0x8>
800054e0:	b0 89       	st.b	r8[0x0],r9
}
800054e2:	5e fc       	retal	r12
800054e4:	00 00       	add	r0,r0
800054e6:	11 c8       	ld.ub	r8,r8[0x4]

800054e8 <usb_rx_notify>:

void usb_rx_notify(void)
{
	/* Flag to indicate byte(s) reception in USB. */
	usb_rx_byte_rcvd = true;
800054e8:	30 19       	mov	r9,1
800054ea:	48 28       	lddpc	r8,800054f0 <usb_rx_notify+0x8>
800054ec:	b0 89       	st.b	r8[0x0],r9
}
800054ee:	5e fc       	retal	r12
800054f0:	00 00       	add	r0,r0
800054f2:	10 2c       	rsub	r12,r8

800054f4 <at86rfx_tal_rx_frame_cb>:
		at86rfx_task();
	}
}

void at86rfx_tal_rx_frame_cb(uint8_t * rx_frame_array)
{
800054f4:	d4 01       	pushm	lr
	/* Frame received from transceiver is sent to terminal through USB. */
	udi_cdc_write_buf((const int *)&rx_frame_array[1],
800054f6:	19 3b       	ld.ub	r11,r12++
800054f8:	20 2b       	sub	r11,2
800054fa:	f0 1f 00 04 	mcall	80005508 <at86rfx_tal_rx_frame_cb+0x14>
			rx_frame_array[0] - FCS_LEN);
	/* LED indication for frame reception. */
	LED_Toggle(LED0);
800054fe:	30 1c       	mov	r12,1
80005500:	f0 1f 00 03 	mcall	8000550c <at86rfx_tal_rx_frame_cb+0x18>
}
80005504:	d8 02       	popm	pc
80005506:	00 00       	add	r0,r0
80005508:	80 00       	ld.sh	r0,r0[0x0]
8000550a:	46 98       	lddsp	r8,sp[0x1a4]
8000550c:	80 00       	ld.sh	r0,r0[0x0]
8000550e:	20 58       	sub	r8,5

80005510 <at86rfx_tal_tx_status_cb>:

void at86rfx_tal_tx_status_cb(uint8_t status)
{
80005510:	d4 01       	pushm	lr
	if (status == AT86RFX_SUCCESS) {
80005512:	58 0c       	cp.w	r12,0
80005514:	c0 d1       	brne	8000552e <at86rfx_tal_tx_status_cb+0x1e>
		/* LED indication for successful frame transmission. */
		LED_Toggle(LED1);
80005516:	30 2c       	mov	r12,2
80005518:	f0 1f 00 0c 	mcall	80005548 <at86rfx_tal_tx_status_cb+0x38>
		udi_cdc_write_buf((const int *)&tx_buffer[1],
8000551c:	48 cc       	lddpc	r12,8000554c <at86rfx_tal_tx_status_cb+0x3c>
8000551e:	19 3b       	ld.ub	r11,r12++
80005520:	20 2b       	sub	r11,2
80005522:	f0 1f 00 0c 	mcall	80005550 <at86rfx_tal_tx_status_cb+0x40>
				tx_buffer[0] - FCS_LEN);
		tx_state = TX_IDLE;
80005526:	30 09       	mov	r9,0
80005528:	48 b8       	lddpc	r8,80005554 <at86rfx_tal_tx_status_cb+0x44>
8000552a:	91 09       	st.w	r8[0x0],r9
8000552c:	d8 02       	popm	pc
	} else if (status == AT86RFX_CHANNEL_ACCESS_FAILURE) {
8000552e:	30 28       	mov	r8,2
80005530:	f0 0c 18 00 	cp.b	r12,r8
80005534:	c0 51       	brne	8000553e <at86rfx_tal_tx_status_cb+0x2e>
		 * Channel access failure is the only transmission failure that is handled
		 * within this application.
		 *
		 * In case of channel access failure the frame is retransmitted
		 */
		at86rfx_tx_frame(tx_buffer);
80005536:	48 6c       	lddpc	r12,8000554c <at86rfx_tal_tx_status_cb+0x3c>
80005538:	f0 1f 00 08 	mcall	80005558 <at86rfx_tal_tx_status_cb+0x48>
8000553c:	d8 02       	popm	pc
		/*
		 * Other transmission status codes are not handled
		 * within this application.
		 * The transmission is considered as been completed for this frame.
		 */
		tx_state = TX_IDLE;
8000553e:	30 09       	mov	r9,0
80005540:	48 58       	lddpc	r8,80005554 <at86rfx_tal_tx_status_cb+0x44>
80005542:	91 09       	st.w	r8[0x0],r9
80005544:	d8 02       	popm	pc
80005546:	00 00       	add	r0,r0
80005548:	80 00       	ld.sh	r0,r0[0x0]
8000554a:	20 58       	sub	r8,5
8000554c:	00 00       	add	r0,r0
8000554e:	10 30       	cp.w	r0,r8
80005550:	80 00       	ld.sh	r0,r0[0x0]
80005552:	46 98       	lddsp	r8,sp[0x1a4]
80005554:	00 00       	add	r0,r0
80005556:	11 c4       	ld.ub	r4,r8[0x4]
80005558:	80 00       	ld.sh	r0,r0[0x0]
8000555a:	3d a4       	mov	r4,-38

8000555c <main>:
static uint8_t usb_rx_buff_len = 0;


/*! \brief Main function. Execution starts here. */
int main(void)
{
8000555c:	eb cd 40 fe 	pushm	r1-r7,lr
	/* System clock is initialized. */
	sysclk_init();
80005560:	f0 1f 00 29 	mcall	80005604 <main+0xa8>

	/* Board related init such as SPI and GPIO. */
	board_init();
80005564:	f0 1f 00 29 	mcall	80005608 <main+0xac>

	/* IRQs init. */
	irq_initialize_vectors();
80005568:	f0 1f 00 29 	mcall	8000560c <main+0xb0>

	/* Transceiver init. */
	if (at86rfx_init() != AT86RFX_SUCCESS) {
8000556c:	f0 1f 00 29 	mcall	80005610 <main+0xb4>
		Assert("Transceiver initialization failed" == 0);
	}

	/* Interrupt enabled before USB init as it uses IRQ for enumeration. */
	cpu_irq_enable();
80005570:	d5 03       	csrf	0x10

	/* Start USB stack */
	udc_start();
80005572:	f0 1f 00 29 	mcall	80005614 <main+0xb8>
	}
}

static void usb_task(void)
{
	if (main_b_cdc_enable) {
80005576:	4a 94       	lddpc	r4,80005618 <main+0xbc>
				temp = udi_cdc_getc();

				/* Introducing critical section to avoid buffer corruption. */
				cpu_irq_disable();

				usb_rx_buffer[usb_rx_buff_len] = temp;
80005578:	4a 97       	lddpc	r7,8000561c <main+0xc0>
8000557a:	4a a5       	lddpc	r5,80005620 <main+0xc4>
				usb_rx_buff_len++;

				cpu_irq_enable();

				if (usb_rx_buff_len >= BUFFER_SIZE) {
8000557c:	3c 76       	mov	r6,-57
				temp = udi_cdc_getc();

				/* Introducing critical section to avoid buffer corruption. */
				cpu_irq_disable();

				usb_rx_buffer[usb_rx_buff_len] = temp;
8000557e:	0a 92       	mov	r2,r5
			if (usb_rx_buff_len > (PHY_MAX_LENGTH - FCS_LEN)) {
				usb_rx_buff_len = PHY_MAX_LENGTH - FCS_LEN;
			}

			/* Update ppdu length within frame. */
			tx_buffer[0] = usb_rx_buff_len + FCS_LEN;
80005580:	4a 93       	lddpc	r3,80005624 <main+0xc8>

			/*
			 * Copy PSDU (actual PHY payload) into frame.
			 * Length of frame has to be first byte during transmission.
			*/
			memcpy(&tx_buffer[1], usb_rx_buffer, usb_rx_buff_len);
80005582:	e6 c1 ff ff 	sub	r1,r3,-1
	}
}

static void usb_task(void)
{
	if (main_b_cdc_enable) {
80005586:	09 88       	ld.ub	r8,r4[0x0]
80005588:	58 08       	cp.w	r8,0
8000558a:	c1 a0       	breq	800055be <main+0x62>
		/* Check for any previous call back for Rx from USB. */
		if (usb_rx_byte_rcvd) {
8000558c:	4a 78       	lddpc	r8,80005628 <main+0xcc>
8000558e:	11 88       	ld.ub	r8,r8[0x0]
80005590:	58 08       	cp.w	r8,0
80005592:	c1 01       	brne	800055b2 <main+0x56>
80005594:	c1 58       	rjmp	800055be <main+0x62>
			/* Loop to get all the bytes from the USB to application buffer. */
			while (udi_cdc_is_rx_ready()) {
				uint8_t temp;
				temp = udi_cdc_getc();
80005596:	f0 1f 00 26 	mcall	8000562c <main+0xd0>

				/* Introducing critical section to avoid buffer corruption. */
				cpu_irq_disable();
8000559a:	d3 03       	ssrf	0x10

				usb_rx_buffer[usb_rx_buff_len] = temp;
8000559c:	0f 88       	ld.ub	r8,r7[0x0]
8000559e:	ea 08 0b 0c 	st.b	r5[r8],r12
				usb_rx_buff_len++;
800055a2:	2f f8       	sub	r8,-1
800055a4:	ae 88       	st.b	r7[0x0],r8

				cpu_irq_enable();
800055a6:	d5 03       	csrf	0x10

				if (usb_rx_buff_len >= BUFFER_SIZE) {
800055a8:	0f 88       	ld.ub	r8,r7[0x0]
800055aa:	ec 08 18 00 	cp.b	r8,r6
800055ae:	e0 8b 00 05 	brhi	800055b8 <main+0x5c>
{
	if (main_b_cdc_enable) {
		/* Check for any previous call back for Rx from USB. */
		if (usb_rx_byte_rcvd) {
			/* Loop to get all the bytes from the USB to application buffer. */
			while (udi_cdc_is_rx_ready()) {
800055b2:	f0 1f 00 20 	mcall	80005630 <main+0xd4>
800055b6:	cf 01       	brne	80005596 <main+0x3a>
				if (usb_rx_buff_len >= BUFFER_SIZE) {
					break;
				}
			}
			/* Restore the flag after successful copy to application buffer. */
			usb_rx_byte_rcvd = false;
800055b8:	30 09       	mov	r9,0
800055ba:	49 c8       	lddpc	r8,80005628 <main+0xcc>
800055bc:	b0 89       	st.b	r8[0x0],r9
	}
}

static void app_task(void)
{
	if (tx_state == TX_IDLE) {
800055be:	49 e8       	lddpc	r8,80005634 <main+0xd8>
800055c0:	70 08       	ld.w	r8,r8[0x0]
800055c2:	58 08       	cp.w	r8,0
800055c4:	c1 d1       	brne	800055fe <main+0xa2>
		/* If bytes are received via USB, transmit the bytes.  */
		if (usb_rx_buff_len > 0) {
800055c6:	0f 89       	ld.ub	r9,r7[0x0]
800055c8:	f0 09 18 00 	cp.b	r9,r8
800055cc:	c1 90       	breq	800055fe <main+0xa2>
			tx_state = TX_ONGOING;
800055ce:	30 19       	mov	r9,1
800055d0:	49 98       	lddpc	r8,80005634 <main+0xd8>
800055d2:	91 09       	st.w	r8[0x0],r9

			/* Introducing critical section to avoid buffer corruption. */
			cpu_irq_disable();
800055d4:	d3 03       	ssrf	0x10

			/* Check for maximum allowed frame length as per IEEE 802.15.4. */
			if (usb_rx_buff_len > (PHY_MAX_LENGTH - FCS_LEN)) {
800055d6:	0f 89       	ld.ub	r9,r7[0x0]
800055d8:	37 d8       	mov	r8,125
				usb_rx_buff_len = PHY_MAX_LENGTH - FCS_LEN;
800055da:	f0 09 18 00 	cp.b	r9,r8
800055de:	ef f8 be 00 	st.bhi	r7[0x0],r8
			}

			/* Update ppdu length within frame. */
			tx_buffer[0] = usb_rx_buff_len + FCS_LEN;
800055e2:	0f 8a       	ld.ub	r10,r7[0x0]
800055e4:	f4 c8 ff fe 	sub	r8,r10,-2
800055e8:	a6 88       	st.b	r3[0x0],r8

			/*
			 * Copy PSDU (actual PHY payload) into frame.
			 * Length of frame has to be first byte during transmission.
			*/
			memcpy(&tx_buffer[1], usb_rx_buffer, usb_rx_buff_len);
800055ea:	04 9b       	mov	r11,r2
800055ec:	02 9c       	mov	r12,r1
800055ee:	f0 1f 00 13 	mcall	80005638 <main+0xdc>
			usb_rx_buff_len = 0;
800055f2:	30 08       	mov	r8,0
800055f4:	ae 88       	st.b	r7[0x0],r8

			cpu_irq_enable();
800055f6:	d5 03       	csrf	0x10

			/* AT86RFx API to transmit the frame. */
			at86rfx_tx_frame(tx_buffer);
800055f8:	06 9c       	mov	r12,r3
800055fa:	f0 1f 00 11 	mcall	8000563c <main+0xe0>

	/* Continuous looping of available tasks, starts here. */
	while (true) {
		usb_task();
		app_task();
		at86rfx_task();
800055fe:	f0 1f 00 11 	mcall	80005640 <main+0xe4>
	}
80005602:	cc 2b       	rjmp	80005586 <main+0x2a>
80005604:	80 00       	ld.sh	r0,r0[0x0]
80005606:	3f c0       	mov	r0,-4
80005608:	80 00       	ld.sh	r0,r0[0x0]
8000560a:	20 08       	sub	r8,0
8000560c:	80 00       	ld.sh	r0,r0[0x0]
8000560e:	23 34       	sub	r4,51
80005610:	80 00       	ld.sh	r0,r0[0x0]
80005612:	3f 5c       	mov	r12,-11
80005614:	80 00       	ld.sh	r0,r0[0x0]
80005616:	54 c4       	stdsp	sp[0x130],r4
80005618:	00 00       	add	r0,r0
8000561a:	11 c8       	ld.ub	r8,r8[0x4]
8000561c:	00 00       	add	r0,r0
8000561e:	10 f8       	st.b	--r8,r8
80005620:	00 00       	add	r0,r0
80005622:	10 fc       	st.b	--r8,r12
80005624:	00 00       	add	r0,r0
80005626:	10 30       	cp.w	r0,r8
80005628:	00 00       	add	r0,r0
8000562a:	10 2c       	rsub	r12,r8
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	48 1c       	lddpc	r12,80005630 <main+0xd4>
80005630:	80 00       	ld.sh	r0,r0[0x0]
80005632:	46 ec       	lddsp	r12,sp[0x1b8]
80005634:	00 00       	add	r0,r0
80005636:	11 c4       	ld.ub	r4,r8[0x4]
80005638:	80 00       	ld.sh	r0,r0[0x0]
8000563a:	58 a8       	cp.w	r8,10
8000563c:	80 00       	ld.sh	r0,r0[0x0]
8000563e:	3d a4       	mov	r4,-38
80005640:	80 00       	ld.sh	r0,r0[0x0]
80005642:	3d 10       	mov	r0,-47

80005644 <__avr32_udiv64>:
80005644:	d4 31       	pushm	r0-r7,lr
80005646:	1a 97       	mov	r7,sp
80005648:	20 3d       	sub	sp,12
8000564a:	10 9c       	mov	r12,r8
8000564c:	12 9e       	mov	lr,r9
8000564e:	14 93       	mov	r3,r10
80005650:	58 09       	cp.w	r9,0
80005652:	e0 81 00 bd 	brne	800057cc <__avr32_udiv64+0x188>
80005656:	16 38       	cp.w	r8,r11
80005658:	e0 88 00 40 	brls	800056d8 <__avr32_udiv64+0x94>
8000565c:	f0 08 12 00 	clz	r8,r8
80005660:	c0 d0       	breq	8000567a <__avr32_udiv64+0x36>
80005662:	f6 08 09 4b 	lsl	r11,r11,r8
80005666:	f0 09 11 20 	rsub	r9,r8,32
8000566a:	f8 08 09 4c 	lsl	r12,r12,r8
8000566e:	f4 09 0a 49 	lsr	r9,r10,r9
80005672:	f4 08 09 43 	lsl	r3,r10,r8
80005676:	f3 eb 10 0b 	or	r11,r9,r11
8000567a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000567e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005682:	f6 0e 0d 00 	divu	r0,r11,lr
80005686:	e6 0b 16 10 	lsr	r11,r3,0x10
8000568a:	00 99       	mov	r9,r0
8000568c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005690:	e0 0a 02 48 	mul	r8,r0,r10
80005694:	10 3b       	cp.w	r11,r8
80005696:	c0 a2       	brcc	800056aa <__avr32_udiv64+0x66>
80005698:	20 19       	sub	r9,1
8000569a:	18 0b       	add	r11,r12
8000569c:	18 3b       	cp.w	r11,r12
8000569e:	c0 63       	brcs	800056aa <__avr32_udiv64+0x66>
800056a0:	10 3b       	cp.w	r11,r8
800056a2:	f7 b9 03 01 	sublo	r9,1
800056a6:	f7 dc e3 0b 	addcs	r11,r11,r12
800056aa:	f6 08 01 01 	sub	r1,r11,r8
800056ae:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800056b2:	e2 0e 0d 00 	divu	r0,r1,lr
800056b6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800056ba:	00 98       	mov	r8,r0
800056bc:	e0 0a 02 4a 	mul	r10,r0,r10
800056c0:	14 33       	cp.w	r3,r10
800056c2:	c0 82       	brcc	800056d2 <__avr32_udiv64+0x8e>
800056c4:	20 18       	sub	r8,1
800056c6:	18 03       	add	r3,r12
800056c8:	18 33       	cp.w	r3,r12
800056ca:	c0 43       	brcs	800056d2 <__avr32_udiv64+0x8e>
800056cc:	14 33       	cp.w	r3,r10
800056ce:	f7 b8 03 01 	sublo	r8,1
800056d2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800056d6:	cd f8       	rjmp	80005894 <__avr32_udiv64+0x250>
800056d8:	58 08       	cp.w	r8,0
800056da:	c0 51       	brne	800056e4 <__avr32_udiv64+0xa0>
800056dc:	30 19       	mov	r9,1
800056de:	f2 08 0d 08 	divu	r8,r9,r8
800056e2:	10 9c       	mov	r12,r8
800056e4:	f8 06 12 00 	clz	r6,r12
800056e8:	c0 41       	brne	800056f0 <__avr32_udiv64+0xac>
800056ea:	18 1b       	sub	r11,r12
800056ec:	30 19       	mov	r9,1
800056ee:	c4 08       	rjmp	8000576e <__avr32_udiv64+0x12a>
800056f0:	ec 01 11 20 	rsub	r1,r6,32
800056f4:	f4 01 0a 49 	lsr	r9,r10,r1
800056f8:	f8 06 09 4c 	lsl	r12,r12,r6
800056fc:	f6 06 09 48 	lsl	r8,r11,r6
80005700:	f6 01 0a 41 	lsr	r1,r11,r1
80005704:	f3 e8 10 08 	or	r8,r9,r8
80005708:	f8 03 16 10 	lsr	r3,r12,0x10
8000570c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80005710:	e2 03 0d 00 	divu	r0,r1,r3
80005714:	f0 0b 16 10 	lsr	r11,r8,0x10
80005718:	00 9e       	mov	lr,r0
8000571a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000571e:	e0 05 02 49 	mul	r9,r0,r5
80005722:	12 3b       	cp.w	r11,r9
80005724:	c0 a2       	brcc	80005738 <__avr32_udiv64+0xf4>
80005726:	20 1e       	sub	lr,1
80005728:	18 0b       	add	r11,r12
8000572a:	18 3b       	cp.w	r11,r12
8000572c:	c0 63       	brcs	80005738 <__avr32_udiv64+0xf4>
8000572e:	12 3b       	cp.w	r11,r9
80005730:	f7 be 03 01 	sublo	lr,1
80005734:	f7 dc e3 0b 	addcs	r11,r11,r12
80005738:	12 1b       	sub	r11,r9
8000573a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000573e:	f6 03 0d 02 	divu	r2,r11,r3
80005742:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80005746:	04 99       	mov	r9,r2
80005748:	e4 05 02 4b 	mul	r11,r2,r5
8000574c:	16 38       	cp.w	r8,r11
8000574e:	c0 a2       	brcc	80005762 <__avr32_udiv64+0x11e>
80005750:	20 19       	sub	r9,1
80005752:	18 08       	add	r8,r12
80005754:	18 38       	cp.w	r8,r12
80005756:	c0 63       	brcs	80005762 <__avr32_udiv64+0x11e>
80005758:	16 38       	cp.w	r8,r11
8000575a:	f7 b9 03 01 	sublo	r9,1
8000575e:	f1 dc e3 08 	addcs	r8,r8,r12
80005762:	f4 06 09 43 	lsl	r3,r10,r6
80005766:	f0 0b 01 0b 	sub	r11,r8,r11
8000576a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000576e:	f8 06 16 10 	lsr	r6,r12,0x10
80005772:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80005776:	f6 06 0d 00 	divu	r0,r11,r6
8000577a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000577e:	00 9a       	mov	r10,r0
80005780:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005784:	e0 0e 02 48 	mul	r8,r0,lr
80005788:	10 3b       	cp.w	r11,r8
8000578a:	c0 a2       	brcc	8000579e <__avr32_udiv64+0x15a>
8000578c:	20 1a       	sub	r10,1
8000578e:	18 0b       	add	r11,r12
80005790:	18 3b       	cp.w	r11,r12
80005792:	c0 63       	brcs	8000579e <__avr32_udiv64+0x15a>
80005794:	10 3b       	cp.w	r11,r8
80005796:	f7 ba 03 01 	sublo	r10,1
8000579a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000579e:	f6 08 01 01 	sub	r1,r11,r8
800057a2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800057a6:	e2 06 0d 00 	divu	r0,r1,r6
800057aa:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800057ae:	00 98       	mov	r8,r0
800057b0:	e0 0e 02 4b 	mul	r11,r0,lr
800057b4:	16 33       	cp.w	r3,r11
800057b6:	c0 82       	brcc	800057c6 <__avr32_udiv64+0x182>
800057b8:	20 18       	sub	r8,1
800057ba:	18 03       	add	r3,r12
800057bc:	18 33       	cp.w	r3,r12
800057be:	c0 43       	brcs	800057c6 <__avr32_udiv64+0x182>
800057c0:	16 33       	cp.w	r3,r11
800057c2:	f7 b8 03 01 	sublo	r8,1
800057c6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800057ca:	c6 98       	rjmp	8000589c <__avr32_udiv64+0x258>
800057cc:	16 39       	cp.w	r9,r11
800057ce:	e0 8b 00 65 	brhi	80005898 <__avr32_udiv64+0x254>
800057d2:	f2 09 12 00 	clz	r9,r9
800057d6:	c0 b1       	brne	800057ec <__avr32_udiv64+0x1a8>
800057d8:	10 3a       	cp.w	r10,r8
800057da:	5f 2a       	srhs	r10
800057dc:	1c 3b       	cp.w	r11,lr
800057de:	5f b8       	srhi	r8
800057e0:	10 4a       	or	r10,r8
800057e2:	f2 0a 18 00 	cp.b	r10,r9
800057e6:	c5 90       	breq	80005898 <__avr32_udiv64+0x254>
800057e8:	30 18       	mov	r8,1
800057ea:	c5 98       	rjmp	8000589c <__avr32_udiv64+0x258>
800057ec:	f0 09 09 46 	lsl	r6,r8,r9
800057f0:	f2 03 11 20 	rsub	r3,r9,32
800057f4:	fc 09 09 4e 	lsl	lr,lr,r9
800057f8:	f0 03 0a 48 	lsr	r8,r8,r3
800057fc:	f6 09 09 4c 	lsl	r12,r11,r9
80005800:	f4 03 0a 42 	lsr	r2,r10,r3
80005804:	ef 46 ff f4 	st.w	r7[-12],r6
80005808:	f6 03 0a 43 	lsr	r3,r11,r3
8000580c:	18 42       	or	r2,r12
8000580e:	f1 ee 10 0c 	or	r12,r8,lr
80005812:	f8 01 16 10 	lsr	r1,r12,0x10
80005816:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000581a:	e6 01 0d 04 	divu	r4,r3,r1
8000581e:	e4 03 16 10 	lsr	r3,r2,0x10
80005822:	08 9e       	mov	lr,r4
80005824:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80005828:	e8 06 02 48 	mul	r8,r4,r6
8000582c:	10 33       	cp.w	r3,r8
8000582e:	c0 a2       	brcc	80005842 <__avr32_udiv64+0x1fe>
80005830:	20 1e       	sub	lr,1
80005832:	18 03       	add	r3,r12
80005834:	18 33       	cp.w	r3,r12
80005836:	c0 63       	brcs	80005842 <__avr32_udiv64+0x1fe>
80005838:	10 33       	cp.w	r3,r8
8000583a:	f7 be 03 01 	sublo	lr,1
8000583e:	e7 dc e3 03 	addcs	r3,r3,r12
80005842:	10 13       	sub	r3,r8
80005844:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80005848:	e6 01 0d 00 	divu	r0,r3,r1
8000584c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005850:	00 98       	mov	r8,r0
80005852:	e0 06 02 46 	mul	r6,r0,r6
80005856:	0c 3b       	cp.w	r11,r6
80005858:	c0 a2       	brcc	8000586c <__avr32_udiv64+0x228>
8000585a:	20 18       	sub	r8,1
8000585c:	18 0b       	add	r11,r12
8000585e:	18 3b       	cp.w	r11,r12
80005860:	c0 63       	brcs	8000586c <__avr32_udiv64+0x228>
80005862:	0c 3b       	cp.w	r11,r6
80005864:	f7 dc e3 0b 	addcs	r11,r11,r12
80005868:	f7 b8 03 01 	sublo	r8,1
8000586c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80005870:	ee f4 ff f4 	ld.w	r4,r7[-12]
80005874:	0c 1b       	sub	r11,r6
80005876:	f0 04 06 42 	mulu.d	r2,r8,r4
8000587a:	06 95       	mov	r5,r3
8000587c:	16 35       	cp.w	r5,r11
8000587e:	e0 8b 00 0a 	brhi	80005892 <__avr32_udiv64+0x24e>
80005882:	5f 0b       	sreq	r11
80005884:	f4 09 09 49 	lsl	r9,r10,r9
80005888:	12 32       	cp.w	r2,r9
8000588a:	5f b9       	srhi	r9
8000588c:	f7 e9 00 09 	and	r9,r11,r9
80005890:	c0 60       	breq	8000589c <__avr32_udiv64+0x258>
80005892:	20 18       	sub	r8,1
80005894:	30 09       	mov	r9,0
80005896:	c0 38       	rjmp	8000589c <__avr32_udiv64+0x258>
80005898:	30 09       	mov	r9,0
8000589a:	12 98       	mov	r8,r9
8000589c:	10 9a       	mov	r10,r8
8000589e:	12 93       	mov	r3,r9
800058a0:	10 92       	mov	r2,r8
800058a2:	12 9b       	mov	r11,r9
800058a4:	2f dd       	sub	sp,-12
800058a6:	d8 32       	popm	r0-r7,pc

800058a8 <memcpy>:
800058a8:	58 8a       	cp.w	r10,8
800058aa:	c2 f5       	brlt	80005908 <memcpy+0x60>
800058ac:	f9 eb 10 09 	or	r9,r12,r11
800058b0:	e2 19 00 03 	andl	r9,0x3,COH
800058b4:	e0 81 00 97 	brne	800059e2 <memcpy+0x13a>
800058b8:	e0 4a 00 20 	cp.w	r10,32
800058bc:	c3 b4       	brge	80005932 <memcpy+0x8a>
800058be:	f4 08 14 02 	asr	r8,r10,0x2
800058c2:	f0 09 11 08 	rsub	r9,r8,8
800058c6:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800058ca:	76 69       	ld.w	r9,r11[0x18]
800058cc:	99 69       	st.w	r12[0x18],r9
800058ce:	76 59       	ld.w	r9,r11[0x14]
800058d0:	99 59       	st.w	r12[0x14],r9
800058d2:	76 49       	ld.w	r9,r11[0x10]
800058d4:	99 49       	st.w	r12[0x10],r9
800058d6:	76 39       	ld.w	r9,r11[0xc]
800058d8:	99 39       	st.w	r12[0xc],r9
800058da:	76 29       	ld.w	r9,r11[0x8]
800058dc:	99 29       	st.w	r12[0x8],r9
800058de:	76 19       	ld.w	r9,r11[0x4]
800058e0:	99 19       	st.w	r12[0x4],r9
800058e2:	76 09       	ld.w	r9,r11[0x0]
800058e4:	99 09       	st.w	r12[0x0],r9
800058e6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800058ea:	f8 08 00 28 	add	r8,r12,r8<<0x2
800058ee:	e0 1a 00 03 	andl	r10,0x3
800058f2:	f4 0a 11 04 	rsub	r10,r10,4
800058f6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800058fa:	17 a9       	ld.ub	r9,r11[0x2]
800058fc:	b0 a9       	st.b	r8[0x2],r9
800058fe:	17 99       	ld.ub	r9,r11[0x1]
80005900:	b0 99       	st.b	r8[0x1],r9
80005902:	17 89       	ld.ub	r9,r11[0x0]
80005904:	b0 89       	st.b	r8[0x0],r9
80005906:	5e fc       	retal	r12
80005908:	f4 0a 11 09 	rsub	r10,r10,9
8000590c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80005910:	17 f9       	ld.ub	r9,r11[0x7]
80005912:	b8 f9       	st.b	r12[0x7],r9
80005914:	17 e9       	ld.ub	r9,r11[0x6]
80005916:	b8 e9       	st.b	r12[0x6],r9
80005918:	17 d9       	ld.ub	r9,r11[0x5]
8000591a:	b8 d9       	st.b	r12[0x5],r9
8000591c:	17 c9       	ld.ub	r9,r11[0x4]
8000591e:	b8 c9       	st.b	r12[0x4],r9
80005920:	17 b9       	ld.ub	r9,r11[0x3]
80005922:	b8 b9       	st.b	r12[0x3],r9
80005924:	17 a9       	ld.ub	r9,r11[0x2]
80005926:	b8 a9       	st.b	r12[0x2],r9
80005928:	17 99       	ld.ub	r9,r11[0x1]
8000592a:	b8 99       	st.b	r12[0x1],r9
8000592c:	17 89       	ld.ub	r9,r11[0x0]
8000592e:	b8 89       	st.b	r12[0x0],r9
80005930:	5e fc       	retal	r12
80005932:	eb cd 40 c0 	pushm	r6-r7,lr
80005936:	18 99       	mov	r9,r12
80005938:	22 0a       	sub	r10,32
8000593a:	b7 07       	ld.d	r6,r11++
8000593c:	b3 26       	st.d	r9++,r6
8000593e:	b7 07       	ld.d	r6,r11++
80005940:	b3 26       	st.d	r9++,r6
80005942:	b7 07       	ld.d	r6,r11++
80005944:	b3 26       	st.d	r9++,r6
80005946:	b7 07       	ld.d	r6,r11++
80005948:	b3 26       	st.d	r9++,r6
8000594a:	22 0a       	sub	r10,32
8000594c:	cf 74       	brge	8000593a <memcpy+0x92>
8000594e:	2f 0a       	sub	r10,-16
80005950:	c0 65       	brlt	8000595c <memcpy+0xb4>
80005952:	b7 07       	ld.d	r6,r11++
80005954:	b3 26       	st.d	r9++,r6
80005956:	b7 07       	ld.d	r6,r11++
80005958:	b3 26       	st.d	r9++,r6
8000595a:	21 0a       	sub	r10,16
8000595c:	5c 3a       	neg	r10
8000595e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80005962:	d7 03       	nop
80005964:	d7 03       	nop
80005966:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000596a:	f3 66 00 0e 	st.b	r9[14],r6
8000596e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80005972:	f3 66 00 0d 	st.b	r9[13],r6
80005976:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000597a:	f3 66 00 0c 	st.b	r9[12],r6
8000597e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80005982:	f3 66 00 0b 	st.b	r9[11],r6
80005986:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000598a:	f3 66 00 0a 	st.b	r9[10],r6
8000598e:	f7 36 00 09 	ld.ub	r6,r11[9]
80005992:	f3 66 00 09 	st.b	r9[9],r6
80005996:	f7 36 00 08 	ld.ub	r6,r11[8]
8000599a:	f3 66 00 08 	st.b	r9[8],r6
8000599e:	f7 36 00 07 	ld.ub	r6,r11[7]
800059a2:	f3 66 00 07 	st.b	r9[7],r6
800059a6:	f7 36 00 06 	ld.ub	r6,r11[6]
800059aa:	f3 66 00 06 	st.b	r9[6],r6
800059ae:	f7 36 00 05 	ld.ub	r6,r11[5]
800059b2:	f3 66 00 05 	st.b	r9[5],r6
800059b6:	f7 36 00 04 	ld.ub	r6,r11[4]
800059ba:	f3 66 00 04 	st.b	r9[4],r6
800059be:	f7 36 00 03 	ld.ub	r6,r11[3]
800059c2:	f3 66 00 03 	st.b	r9[3],r6
800059c6:	f7 36 00 02 	ld.ub	r6,r11[2]
800059ca:	f3 66 00 02 	st.b	r9[2],r6
800059ce:	f7 36 00 01 	ld.ub	r6,r11[1]
800059d2:	f3 66 00 01 	st.b	r9[1],r6
800059d6:	f7 36 00 00 	ld.ub	r6,r11[0]
800059da:	f3 66 00 00 	st.b	r9[0],r6
800059de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800059e2:	20 1a       	sub	r10,1
800059e4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800059e8:	f8 0a 0b 09 	st.b	r12[r10],r9
800059ec:	cf b1       	brne	800059e2 <memcpy+0x13a>
800059ee:	5e fc       	retal	r12

800059f0 <srand>:
800059f0:	d4 21       	pushm	r4-r7,lr
800059f2:	e0 67 02 5c 	mov	r7,604
800059f6:	18 95       	mov	r5,r12
800059f8:	6e 06       	ld.w	r6,r7[0x0]
800059fa:	6c e8       	ld.w	r8,r6[0x38]
800059fc:	58 08       	cp.w	r8,0
800059fe:	c1 91       	brne	80005a30 <srand+0x40>
80005a00:	31 8c       	mov	r12,24
80005a02:	c1 fc       	rcall	80005a40 <malloc>
80005a04:	e0 69 33 0e 	mov	r9,13070
80005a08:	8d ec       	st.w	r6[0x38],r12
80005a0a:	6e 08       	ld.w	r8,r7[0x0]
80005a0c:	70 e8       	ld.w	r8,r8[0x38]
80005a0e:	b0 09       	st.h	r8[0x0],r9
80005a10:	fe 79 ab cd 	mov	r9,-21555
80005a14:	b0 19       	st.h	r8[0x2],r9
80005a16:	e0 69 12 34 	mov	r9,4660
80005a1a:	b0 29       	st.h	r8[0x4],r9
80005a1c:	fe 79 e6 6d 	mov	r9,-6547
80005a20:	b0 39       	st.h	r8[0x6],r9
80005a22:	fe 79 de ec 	mov	r9,-8468
80005a26:	b0 49       	st.h	r8[0x8],r9
80005a28:	30 59       	mov	r9,5
80005a2a:	b0 59       	st.h	r8[0xa],r9
80005a2c:	30 b9       	mov	r9,11
80005a2e:	b0 69       	st.h	r8[0xc],r9
80005a30:	e0 68 02 5c 	mov	r8,604
80005a34:	30 09       	mov	r9,0
80005a36:	70 08       	ld.w	r8,r8[0x0]
80005a38:	70 e8       	ld.w	r8,r8[0x38]
80005a3a:	91 55       	st.w	r8[0x14],r5
80005a3c:	91 49       	st.w	r8[0x10],r9
80005a3e:	d8 22       	popm	r4-r7,pc

80005a40 <malloc>:
80005a40:	d4 01       	pushm	lr
80005a42:	e0 68 02 5c 	mov	r8,604
80005a46:	18 9b       	mov	r11,r12
80005a48:	70 0c       	ld.w	r12,r8[0x0]
80005a4a:	c0 3c       	rcall	80005a50 <_malloc_r>
80005a4c:	d8 02       	popm	pc
80005a4e:	d7 03       	nop

80005a50 <_malloc_r>:
80005a50:	d4 31       	pushm	r0-r7,lr
80005a52:	f6 c8 ff f5 	sub	r8,r11,-11
80005a56:	18 95       	mov	r5,r12
80005a58:	10 97       	mov	r7,r8
80005a5a:	e0 17 ff f8 	andl	r7,0xfff8
80005a5e:	59 68       	cp.w	r8,22
80005a60:	f9 b7 08 10 	movls	r7,16
80005a64:	16 37       	cp.w	r7,r11
80005a66:	5f 38       	srlo	r8
80005a68:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80005a6c:	c0 50       	breq	80005a76 <_malloc_r+0x26>
80005a6e:	30 c8       	mov	r8,12
80005a70:	99 38       	st.w	r12[0xc],r8
80005a72:	e0 8f 01 f4 	bral	80005e5a <_malloc_r+0x40a>
80005a76:	e0 a0 02 01 	rcall	80005e78 <__malloc_lock>
80005a7a:	e0 47 01 f7 	cp.w	r7,503
80005a7e:	e0 8b 00 1d 	brhi	80005ab8 <_malloc_r+0x68>
80005a82:	ee 03 16 03 	lsr	r3,r7,0x3
80005a86:	e0 68 02 60 	mov	r8,608
80005a8a:	f0 03 00 38 	add	r8,r8,r3<<0x3
80005a8e:	70 36       	ld.w	r6,r8[0xc]
80005a90:	10 36       	cp.w	r6,r8
80005a92:	c0 61       	brne	80005a9e <_malloc_r+0x4e>
80005a94:	ec c8 ff f8 	sub	r8,r6,-8
80005a98:	70 36       	ld.w	r6,r8[0xc]
80005a9a:	10 36       	cp.w	r6,r8
80005a9c:	c0 c0       	breq	80005ab4 <_malloc_r+0x64>
80005a9e:	6c 18       	ld.w	r8,r6[0x4]
80005aa0:	e0 18 ff fc 	andl	r8,0xfffc
80005aa4:	6c 3a       	ld.w	r10,r6[0xc]
80005aa6:	ec 08 00 09 	add	r9,r6,r8
80005aaa:	0a 9c       	mov	r12,r5
80005aac:	6c 28       	ld.w	r8,r6[0x8]
80005aae:	95 28       	st.w	r10[0x8],r8
80005ab0:	91 3a       	st.w	r8[0xc],r10
80005ab2:	c4 78       	rjmp	80005b40 <_malloc_r+0xf0>
80005ab4:	2f e3       	sub	r3,-2
80005ab6:	c4 d8       	rjmp	80005b50 <_malloc_r+0x100>
80005ab8:	ee 03 16 09 	lsr	r3,r7,0x9
80005abc:	c0 41       	brne	80005ac4 <_malloc_r+0x74>
80005abe:	ee 03 16 03 	lsr	r3,r7,0x3
80005ac2:	c2 68       	rjmp	80005b0e <_malloc_r+0xbe>
80005ac4:	58 43       	cp.w	r3,4
80005ac6:	e0 8b 00 06 	brhi	80005ad2 <_malloc_r+0x82>
80005aca:	ee 03 16 06 	lsr	r3,r7,0x6
80005ace:	2c 83       	sub	r3,-56
80005ad0:	c1 f8       	rjmp	80005b0e <_malloc_r+0xbe>
80005ad2:	59 43       	cp.w	r3,20
80005ad4:	e0 8b 00 04 	brhi	80005adc <_malloc_r+0x8c>
80005ad8:	2a 53       	sub	r3,-91
80005ada:	c1 a8       	rjmp	80005b0e <_malloc_r+0xbe>
80005adc:	e0 43 00 54 	cp.w	r3,84
80005ae0:	e0 8b 00 06 	brhi	80005aec <_malloc_r+0x9c>
80005ae4:	ee 03 16 0c 	lsr	r3,r7,0xc
80005ae8:	29 23       	sub	r3,-110
80005aea:	c1 28       	rjmp	80005b0e <_malloc_r+0xbe>
80005aec:	e0 43 01 54 	cp.w	r3,340
80005af0:	e0 8b 00 06 	brhi	80005afc <_malloc_r+0xac>
80005af4:	ee 03 16 0f 	lsr	r3,r7,0xf
80005af8:	28 93       	sub	r3,-119
80005afa:	c0 a8       	rjmp	80005b0e <_malloc_r+0xbe>
80005afc:	e0 43 05 54 	cp.w	r3,1364
80005b00:	e0 88 00 04 	brls	80005b08 <_malloc_r+0xb8>
80005b04:	37 e3       	mov	r3,126
80005b06:	c0 48       	rjmp	80005b0e <_malloc_r+0xbe>
80005b08:	ee 03 16 12 	lsr	r3,r7,0x12
80005b0c:	28 43       	sub	r3,-124
80005b0e:	e0 6a 02 60 	mov	r10,608
80005b12:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80005b16:	74 36       	ld.w	r6,r10[0xc]
80005b18:	c1 98       	rjmp	80005b4a <_malloc_r+0xfa>
80005b1a:	6c 19       	ld.w	r9,r6[0x4]
80005b1c:	e0 19 ff fc 	andl	r9,0xfffc
80005b20:	f2 07 01 0b 	sub	r11,r9,r7
80005b24:	58 fb       	cp.w	r11,15
80005b26:	e0 8a 00 04 	brle	80005b2e <_malloc_r+0xde>
80005b2a:	20 13       	sub	r3,1
80005b2c:	c1 18       	rjmp	80005b4e <_malloc_r+0xfe>
80005b2e:	6c 38       	ld.w	r8,r6[0xc]
80005b30:	58 0b       	cp.w	r11,0
80005b32:	c0 b5       	brlt	80005b48 <_malloc_r+0xf8>
80005b34:	6c 2a       	ld.w	r10,r6[0x8]
80005b36:	ec 09 00 09 	add	r9,r6,r9
80005b3a:	0a 9c       	mov	r12,r5
80005b3c:	91 2a       	st.w	r8[0x8],r10
80005b3e:	95 38       	st.w	r10[0xc],r8
80005b40:	72 18       	ld.w	r8,r9[0x4]
80005b42:	a1 a8       	sbr	r8,0x0
80005b44:	93 18       	st.w	r9[0x4],r8
80005b46:	cb c8       	rjmp	80005cbe <_malloc_r+0x26e>
80005b48:	10 96       	mov	r6,r8
80005b4a:	14 36       	cp.w	r6,r10
80005b4c:	ce 71       	brne	80005b1a <_malloc_r+0xca>
80005b4e:	2f f3       	sub	r3,-1
80005b50:	e0 6a 02 60 	mov	r10,608
80005b54:	f4 cc ff f8 	sub	r12,r10,-8
80005b58:	78 26       	ld.w	r6,r12[0x8]
80005b5a:	18 36       	cp.w	r6,r12
80005b5c:	c6 c0       	breq	80005c34 <_malloc_r+0x1e4>
80005b5e:	6c 19       	ld.w	r9,r6[0x4]
80005b60:	e0 19 ff fc 	andl	r9,0xfffc
80005b64:	f2 07 01 08 	sub	r8,r9,r7
80005b68:	58 f8       	cp.w	r8,15
80005b6a:	e0 89 00 8f 	brgt	80005c88 <_malloc_r+0x238>
80005b6e:	99 3c       	st.w	r12[0xc],r12
80005b70:	99 2c       	st.w	r12[0x8],r12
80005b72:	58 08       	cp.w	r8,0
80005b74:	c0 55       	brlt	80005b7e <_malloc_r+0x12e>
80005b76:	ec 09 00 09 	add	r9,r6,r9
80005b7a:	0a 9c       	mov	r12,r5
80005b7c:	ce 2b       	rjmp	80005b40 <_malloc_r+0xf0>
80005b7e:	e0 49 01 ff 	cp.w	r9,511
80005b82:	e0 8b 00 13 	brhi	80005ba8 <_malloc_r+0x158>
80005b86:	a3 99       	lsr	r9,0x3
80005b88:	f4 09 00 38 	add	r8,r10,r9<<0x3
80005b8c:	70 2b       	ld.w	r11,r8[0x8]
80005b8e:	8d 38       	st.w	r6[0xc],r8
80005b90:	8d 2b       	st.w	r6[0x8],r11
80005b92:	97 36       	st.w	r11[0xc],r6
80005b94:	91 26       	st.w	r8[0x8],r6
80005b96:	a3 49       	asr	r9,0x2
80005b98:	74 18       	ld.w	r8,r10[0x4]
80005b9a:	30 1b       	mov	r11,1
80005b9c:	f6 09 09 49 	lsl	r9,r11,r9
80005ba0:	f1 e9 10 09 	or	r9,r8,r9
80005ba4:	95 19       	st.w	r10[0x4],r9
80005ba6:	c4 78       	rjmp	80005c34 <_malloc_r+0x1e4>
80005ba8:	f2 0a 16 09 	lsr	r10,r9,0x9
80005bac:	58 4a       	cp.w	r10,4
80005bae:	e0 8b 00 07 	brhi	80005bbc <_malloc_r+0x16c>
80005bb2:	f2 0a 16 06 	lsr	r10,r9,0x6
80005bb6:	2c 8a       	sub	r10,-56
80005bb8:	c2 08       	rjmp	80005bf8 <_malloc_r+0x1a8>
80005bba:	d7 03       	nop
80005bbc:	59 4a       	cp.w	r10,20
80005bbe:	e0 8b 00 04 	brhi	80005bc6 <_malloc_r+0x176>
80005bc2:	2a 5a       	sub	r10,-91
80005bc4:	c1 a8       	rjmp	80005bf8 <_malloc_r+0x1a8>
80005bc6:	e0 4a 00 54 	cp.w	r10,84
80005bca:	e0 8b 00 06 	brhi	80005bd6 <_malloc_r+0x186>
80005bce:	f2 0a 16 0c 	lsr	r10,r9,0xc
80005bd2:	29 2a       	sub	r10,-110
80005bd4:	c1 28       	rjmp	80005bf8 <_malloc_r+0x1a8>
80005bd6:	e0 4a 01 54 	cp.w	r10,340
80005bda:	e0 8b 00 06 	brhi	80005be6 <_malloc_r+0x196>
80005bde:	f2 0a 16 0f 	lsr	r10,r9,0xf
80005be2:	28 9a       	sub	r10,-119
80005be4:	c0 a8       	rjmp	80005bf8 <_malloc_r+0x1a8>
80005be6:	e0 4a 05 54 	cp.w	r10,1364
80005bea:	e0 88 00 04 	brls	80005bf2 <_malloc_r+0x1a2>
80005bee:	37 ea       	mov	r10,126
80005bf0:	c0 48       	rjmp	80005bf8 <_malloc_r+0x1a8>
80005bf2:	f2 0a 16 12 	lsr	r10,r9,0x12
80005bf6:	28 4a       	sub	r10,-124
80005bf8:	e0 6b 02 60 	mov	r11,608
80005bfc:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80005c00:	68 28       	ld.w	r8,r4[0x8]
80005c02:	08 38       	cp.w	r8,r4
80005c04:	c0 e1       	brne	80005c20 <_malloc_r+0x1d0>
80005c06:	76 19       	ld.w	r9,r11[0x4]
80005c08:	a3 4a       	asr	r10,0x2
80005c0a:	30 1e       	mov	lr,1
80005c0c:	fc 0a 09 4a 	lsl	r10,lr,r10
80005c10:	f3 ea 10 0a 	or	r10,r9,r10
80005c14:	10 99       	mov	r9,r8
80005c16:	97 1a       	st.w	r11[0x4],r10
80005c18:	c0 a8       	rjmp	80005c2c <_malloc_r+0x1dc>
80005c1a:	70 28       	ld.w	r8,r8[0x8]
80005c1c:	08 38       	cp.w	r8,r4
80005c1e:	c0 60       	breq	80005c2a <_malloc_r+0x1da>
80005c20:	70 1a       	ld.w	r10,r8[0x4]
80005c22:	e0 1a ff fc 	andl	r10,0xfffc
80005c26:	14 39       	cp.w	r9,r10
80005c28:	cf 93       	brcs	80005c1a <_malloc_r+0x1ca>
80005c2a:	70 39       	ld.w	r9,r8[0xc]
80005c2c:	8d 39       	st.w	r6[0xc],r9
80005c2e:	8d 28       	st.w	r6[0x8],r8
80005c30:	91 36       	st.w	r8[0xc],r6
80005c32:	93 26       	st.w	r9[0x8],r6
80005c34:	e6 08 14 02 	asr	r8,r3,0x2
80005c38:	30 1b       	mov	r11,1
80005c3a:	e0 64 02 60 	mov	r4,608
80005c3e:	f6 08 09 4b 	lsl	r11,r11,r8
80005c42:	68 18       	ld.w	r8,r4[0x4]
80005c44:	10 3b       	cp.w	r11,r8
80005c46:	e0 8b 00 69 	brhi	80005d18 <_malloc_r+0x2c8>
80005c4a:	f7 e8 00 09 	and	r9,r11,r8
80005c4e:	c0 b1       	brne	80005c64 <_malloc_r+0x214>
80005c50:	e0 13 ff fc 	andl	r3,0xfffc
80005c54:	a1 7b       	lsl	r11,0x1
80005c56:	2f c3       	sub	r3,-4
80005c58:	c0 38       	rjmp	80005c5e <_malloc_r+0x20e>
80005c5a:	2f c3       	sub	r3,-4
80005c5c:	a1 7b       	lsl	r11,0x1
80005c5e:	f7 e8 00 09 	and	r9,r11,r8
80005c62:	cf c0       	breq	80005c5a <_malloc_r+0x20a>
80005c64:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80005c68:	06 92       	mov	r2,r3
80005c6a:	1c 91       	mov	r1,lr
80005c6c:	62 36       	ld.w	r6,r1[0xc]
80005c6e:	c2 d8       	rjmp	80005cc8 <_malloc_r+0x278>
80005c70:	6c 1a       	ld.w	r10,r6[0x4]
80005c72:	e0 1a ff fc 	andl	r10,0xfffc
80005c76:	f4 07 01 08 	sub	r8,r10,r7
80005c7a:	58 f8       	cp.w	r8,15
80005c7c:	e0 8a 00 15 	brle	80005ca6 <_malloc_r+0x256>
80005c80:	6c 3a       	ld.w	r10,r6[0xc]
80005c82:	6c 29       	ld.w	r9,r6[0x8]
80005c84:	95 29       	st.w	r10[0x8],r9
80005c86:	93 3a       	st.w	r9[0xc],r10
80005c88:	0e 99       	mov	r9,r7
80005c8a:	ec 07 00 07 	add	r7,r6,r7
80005c8e:	a1 a9       	sbr	r9,0x0
80005c90:	99 37       	st.w	r12[0xc],r7
80005c92:	99 27       	st.w	r12[0x8],r7
80005c94:	8d 19       	st.w	r6[0x4],r9
80005c96:	ee 08 09 08 	st.w	r7[r8],r8
80005c9a:	8f 2c       	st.w	r7[0x8],r12
80005c9c:	8f 3c       	st.w	r7[0xc],r12
80005c9e:	a1 a8       	sbr	r8,0x0
80005ca0:	0a 9c       	mov	r12,r5
80005ca2:	8f 18       	st.w	r7[0x4],r8
80005ca4:	c0 d8       	rjmp	80005cbe <_malloc_r+0x26e>
80005ca6:	6c 39       	ld.w	r9,r6[0xc]
80005ca8:	58 08       	cp.w	r8,0
80005caa:	c0 e5       	brlt	80005cc6 <_malloc_r+0x276>
80005cac:	ec 0a 00 0a 	add	r10,r6,r10
80005cb0:	74 18       	ld.w	r8,r10[0x4]
80005cb2:	a1 a8       	sbr	r8,0x0
80005cb4:	0a 9c       	mov	r12,r5
80005cb6:	95 18       	st.w	r10[0x4],r8
80005cb8:	6c 28       	ld.w	r8,r6[0x8]
80005cba:	93 28       	st.w	r9[0x8],r8
80005cbc:	91 39       	st.w	r8[0xc],r9
80005cbe:	cd ec       	rcall	80005e7a <__malloc_unlock>
80005cc0:	ec cc ff f8 	sub	r12,r6,-8
80005cc4:	d8 32       	popm	r0-r7,pc
80005cc6:	12 96       	mov	r6,r9
80005cc8:	02 36       	cp.w	r6,r1
80005cca:	cd 31       	brne	80005c70 <_malloc_r+0x220>
80005ccc:	2f f2       	sub	r2,-1
80005cce:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80005cd2:	c0 30       	breq	80005cd8 <_malloc_r+0x288>
80005cd4:	2f 81       	sub	r1,-8
80005cd6:	cc bb       	rjmp	80005c6c <_malloc_r+0x21c>
80005cd8:	1c 98       	mov	r8,lr
80005cda:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80005cde:	c0 81       	brne	80005cee <_malloc_r+0x29e>
80005ce0:	68 19       	ld.w	r9,r4[0x4]
80005ce2:	f6 08 11 ff 	rsub	r8,r11,-1
80005ce6:	f3 e8 00 08 	and	r8,r9,r8
80005cea:	89 18       	st.w	r4[0x4],r8
80005cec:	c0 78       	rjmp	80005cfa <_malloc_r+0x2aa>
80005cee:	f0 c9 00 08 	sub	r9,r8,8
80005cf2:	20 13       	sub	r3,1
80005cf4:	70 08       	ld.w	r8,r8[0x0]
80005cf6:	12 38       	cp.w	r8,r9
80005cf8:	cf 10       	breq	80005cda <_malloc_r+0x28a>
80005cfa:	a1 7b       	lsl	r11,0x1
80005cfc:	68 18       	ld.w	r8,r4[0x4]
80005cfe:	10 3b       	cp.w	r11,r8
80005d00:	e0 8b 00 0c 	brhi	80005d18 <_malloc_r+0x2c8>
80005d04:	58 0b       	cp.w	r11,0
80005d06:	c0 90       	breq	80005d18 <_malloc_r+0x2c8>
80005d08:	04 93       	mov	r3,r2
80005d0a:	c0 38       	rjmp	80005d10 <_malloc_r+0x2c0>
80005d0c:	2f c3       	sub	r3,-4
80005d0e:	a1 7b       	lsl	r11,0x1
80005d10:	f7 e8 00 09 	and	r9,r11,r8
80005d14:	ca 81       	brne	80005c64 <_malloc_r+0x214>
80005d16:	cf bb       	rjmp	80005d0c <_malloc_r+0x2bc>
80005d18:	68 23       	ld.w	r3,r4[0x8]
80005d1a:	66 12       	ld.w	r2,r3[0x4]
80005d1c:	e0 12 ff fc 	andl	r2,0xfffc
80005d20:	0e 32       	cp.w	r2,r7
80005d22:	5f 39       	srlo	r9
80005d24:	e4 07 01 08 	sub	r8,r2,r7
80005d28:	58 f8       	cp.w	r8,15
80005d2a:	5f aa       	srle	r10
80005d2c:	f5 e9 10 09 	or	r9,r10,r9
80005d30:	e0 80 00 96 	breq	80005e5c <_malloc_r+0x40c>
80005d34:	e0 68 11 d4 	mov	r8,4564
80005d38:	70 01       	ld.w	r1,r8[0x0]
80005d3a:	e0 68 06 6c 	mov	r8,1644
80005d3e:	2f 01       	sub	r1,-16
80005d40:	70 08       	ld.w	r8,r8[0x0]
80005d42:	0e 01       	add	r1,r7
80005d44:	5b f8       	cp.w	r8,-1
80005d46:	c0 40       	breq	80005d4e <_malloc_r+0x2fe>
80005d48:	28 11       	sub	r1,-127
80005d4a:	e0 11 ff 80 	andl	r1,0xff80
80005d4e:	02 9b       	mov	r11,r1
80005d50:	0a 9c       	mov	r12,r5
80005d52:	c9 5c       	rcall	80005e7c <_sbrk_r>
80005d54:	18 96       	mov	r6,r12
80005d56:	5b fc       	cp.w	r12,-1
80005d58:	c7 30       	breq	80005e3e <_malloc_r+0x3ee>
80005d5a:	e6 02 00 08 	add	r8,r3,r2
80005d5e:	10 3c       	cp.w	r12,r8
80005d60:	c0 32       	brcc	80005d66 <_malloc_r+0x316>
80005d62:	08 33       	cp.w	r3,r4
80005d64:	c6 d1       	brne	80005e3e <_malloc_r+0x3ee>
80005d66:	e0 6a 11 d8 	mov	r10,4568
80005d6a:	74 09       	ld.w	r9,r10[0x0]
80005d6c:	e2 09 00 09 	add	r9,r1,r9
80005d70:	95 09       	st.w	r10[0x0],r9
80005d72:	10 36       	cp.w	r6,r8
80005d74:	c0 a1       	brne	80005d88 <_malloc_r+0x338>
80005d76:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80005d7a:	c0 71       	brne	80005d88 <_malloc_r+0x338>
80005d7c:	e2 02 00 02 	add	r2,r1,r2
80005d80:	68 28       	ld.w	r8,r4[0x8]
80005d82:	a1 a2       	sbr	r2,0x0
80005d84:	91 12       	st.w	r8[0x4],r2
80005d86:	c4 d8       	rjmp	80005e20 <_malloc_r+0x3d0>
80005d88:	e0 6a 06 6c 	mov	r10,1644
80005d8c:	74 0b       	ld.w	r11,r10[0x0]
80005d8e:	5b fb       	cp.w	r11,-1
80005d90:	c0 31       	brne	80005d96 <_malloc_r+0x346>
80005d92:	95 06       	st.w	r10[0x0],r6
80005d94:	c0 78       	rjmp	80005da2 <_malloc_r+0x352>
80005d96:	ec 09 00 09 	add	r9,r6,r9
80005d9a:	e0 6a 11 d8 	mov	r10,4568
80005d9e:	10 19       	sub	r9,r8
80005da0:	95 09       	st.w	r10[0x0],r9
80005da2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80005da6:	f0 09 11 08 	rsub	r9,r8,8
80005daa:	58 08       	cp.w	r8,0
80005dac:	f2 08 17 10 	movne	r8,r9
80005db0:	ed d8 e1 06 	addne	r6,r6,r8
80005db4:	28 08       	sub	r8,-128
80005db6:	ec 01 00 01 	add	r1,r6,r1
80005dba:	0a 9c       	mov	r12,r5
80005dbc:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80005dc0:	f0 01 01 01 	sub	r1,r8,r1
80005dc4:	02 9b       	mov	r11,r1
80005dc6:	c5 bc       	rcall	80005e7c <_sbrk_r>
80005dc8:	e0 68 11 d8 	mov	r8,4568
80005dcc:	5b fc       	cp.w	r12,-1
80005dce:	ec 0c 17 00 	moveq	r12,r6
80005dd2:	f9 b1 00 00 	moveq	r1,0
80005dd6:	70 09       	ld.w	r9,r8[0x0]
80005dd8:	0c 1c       	sub	r12,r6
80005dda:	89 26       	st.w	r4[0x8],r6
80005ddc:	02 0c       	add	r12,r1
80005dde:	12 01       	add	r1,r9
80005de0:	a1 ac       	sbr	r12,0x0
80005de2:	91 01       	st.w	r8[0x0],r1
80005de4:	8d 1c       	st.w	r6[0x4],r12
80005de6:	08 33       	cp.w	r3,r4
80005de8:	c1 c0       	breq	80005e20 <_malloc_r+0x3d0>
80005dea:	58 f2       	cp.w	r2,15
80005dec:	e0 8b 00 05 	brhi	80005df6 <_malloc_r+0x3a6>
80005df0:	30 18       	mov	r8,1
80005df2:	8d 18       	st.w	r6[0x4],r8
80005df4:	c2 58       	rjmp	80005e3e <_malloc_r+0x3ee>
80005df6:	30 59       	mov	r9,5
80005df8:	20 c2       	sub	r2,12
80005dfa:	e0 12 ff f8 	andl	r2,0xfff8
80005dfe:	e6 02 00 08 	add	r8,r3,r2
80005e02:	91 29       	st.w	r8[0x8],r9
80005e04:	91 19       	st.w	r8[0x4],r9
80005e06:	66 18       	ld.w	r8,r3[0x4]
80005e08:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005e0c:	e5 e8 10 08 	or	r8,r2,r8
80005e10:	87 18       	st.w	r3[0x4],r8
80005e12:	58 f2       	cp.w	r2,15
80005e14:	e0 88 00 06 	brls	80005e20 <_malloc_r+0x3d0>
80005e18:	e6 cb ff f8 	sub	r11,r3,-8
80005e1c:	0a 9c       	mov	r12,r5
80005e1e:	ca 7c       	rcall	80005f6c <_free_r>
80005e20:	e0 69 11 d0 	mov	r9,4560
80005e24:	72 0a       	ld.w	r10,r9[0x0]
80005e26:	e0 68 11 d8 	mov	r8,4568
80005e2a:	70 08       	ld.w	r8,r8[0x0]
80005e2c:	14 38       	cp.w	r8,r10
80005e2e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80005e32:	e0 69 11 cc 	mov	r9,4556
80005e36:	72 0a       	ld.w	r10,r9[0x0]
80005e38:	14 38       	cp.w	r8,r10
80005e3a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80005e3e:	68 28       	ld.w	r8,r4[0x8]
80005e40:	70 18       	ld.w	r8,r8[0x4]
80005e42:	e0 18 ff fc 	andl	r8,0xfffc
80005e46:	0e 38       	cp.w	r8,r7
80005e48:	5f 39       	srlo	r9
80005e4a:	0e 18       	sub	r8,r7
80005e4c:	58 f8       	cp.w	r8,15
80005e4e:	5f aa       	srle	r10
80005e50:	f5 e9 10 09 	or	r9,r10,r9
80005e54:	c0 40       	breq	80005e5c <_malloc_r+0x40c>
80005e56:	0a 9c       	mov	r12,r5
80005e58:	c1 1c       	rcall	80005e7a <__malloc_unlock>
80005e5a:	d8 3a       	popm	r0-r7,pc,r12=0
80005e5c:	68 26       	ld.w	r6,r4[0x8]
80005e5e:	a1 a8       	sbr	r8,0x0
80005e60:	0e 99       	mov	r9,r7
80005e62:	a1 a9       	sbr	r9,0x0
80005e64:	8d 19       	st.w	r6[0x4],r9
80005e66:	ec 07 00 07 	add	r7,r6,r7
80005e6a:	0a 9c       	mov	r12,r5
80005e6c:	89 27       	st.w	r4[0x8],r7
80005e6e:	8f 18       	st.w	r7[0x4],r8
80005e70:	c0 5c       	rcall	80005e7a <__malloc_unlock>
80005e72:	ec cc ff f8 	sub	r12,r6,-8
80005e76:	d8 32       	popm	r0-r7,pc

80005e78 <__malloc_lock>:
80005e78:	5e fc       	retal	r12

80005e7a <__malloc_unlock>:
80005e7a:	5e fc       	retal	r12

80005e7c <_sbrk_r>:
80005e7c:	d4 21       	pushm	r4-r7,lr
80005e7e:	30 08       	mov	r8,0
80005e80:	18 97       	mov	r7,r12
80005e82:	e0 66 12 a0 	mov	r6,4768
80005e86:	16 9c       	mov	r12,r11
80005e88:	8d 08       	st.w	r6[0x0],r8
80005e8a:	c0 9c       	rcall	80005e9c <_sbrk>
80005e8c:	5b fc       	cp.w	r12,-1
80005e8e:	c0 51       	brne	80005e98 <_sbrk_r+0x1c>
80005e90:	6c 08       	ld.w	r8,r6[0x0]
80005e92:	58 08       	cp.w	r8,0
80005e94:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005e98:	d8 22       	popm	r4-r7,pc
80005e9a:	d7 03       	nop

80005e9c <_sbrk>:
80005e9c:	d4 01       	pushm	lr
80005e9e:	e0 68 12 00 	mov	r8,4608
80005ea2:	70 09       	ld.w	r9,r8[0x0]
80005ea4:	58 09       	cp.w	r9,0
80005ea6:	c0 41       	brne	80005eae <_sbrk+0x12>
80005ea8:	e0 69 12 a8 	mov	r9,4776
80005eac:	91 09       	st.w	r8[0x0],r9
80005eae:	e0 69 12 00 	mov	r9,4608
80005eb2:	e0 6a f0 00 	mov	r10,61440
80005eb6:	72 08       	ld.w	r8,r9[0x0]
80005eb8:	f0 0c 00 0c 	add	r12,r8,r12
80005ebc:	14 3c       	cp.w	r12,r10
80005ebe:	e0 8b 00 04 	brhi	80005ec6 <_sbrk+0x2a>
80005ec2:	93 0c       	st.w	r9[0x0],r12
80005ec4:	c0 58       	rjmp	80005ece <_sbrk+0x32>
80005ec6:	c0 7c       	rcall	80005ed4 <__errno>
80005ec8:	30 c8       	mov	r8,12
80005eca:	99 08       	st.w	r12[0x0],r8
80005ecc:	3f f8       	mov	r8,-1
80005ece:	10 9c       	mov	r12,r8
80005ed0:	d8 02       	popm	pc
80005ed2:	d7 03       	nop

80005ed4 <__errno>:
80005ed4:	e0 68 02 5c 	mov	r8,604
80005ed8:	70 0c       	ld.w	r12,r8[0x0]
80005eda:	2f 4c       	sub	r12,-12
80005edc:	5e fc       	retal	r12
80005ede:	d7 03       	nop

80005ee0 <_malloc_trim_r>:
80005ee0:	d4 21       	pushm	r4-r7,lr
80005ee2:	16 95       	mov	r5,r11
80005ee4:	18 97       	mov	r7,r12
80005ee6:	cc 9f       	rcall	80005e78 <__malloc_lock>
80005ee8:	e0 64 02 60 	mov	r4,608
80005eec:	68 28       	ld.w	r8,r4[0x8]
80005eee:	70 16       	ld.w	r6,r8[0x4]
80005ef0:	e0 16 ff fc 	andl	r6,0xfffc
80005ef4:	ec c8 ff 91 	sub	r8,r6,-111
80005ef8:	f0 05 01 05 	sub	r5,r8,r5
80005efc:	e0 15 ff 80 	andl	r5,0xff80
80005f00:	ea c5 00 80 	sub	r5,r5,128
80005f04:	e0 45 00 7f 	cp.w	r5,127
80005f08:	e0 8a 00 22 	brle	80005f4c <_malloc_trim_r+0x6c>
80005f0c:	30 0b       	mov	r11,0
80005f0e:	0e 9c       	mov	r12,r7
80005f10:	cb 6f       	rcall	80005e7c <_sbrk_r>
80005f12:	68 28       	ld.w	r8,r4[0x8]
80005f14:	0c 08       	add	r8,r6
80005f16:	10 3c       	cp.w	r12,r8
80005f18:	c1 a1       	brne	80005f4c <_malloc_trim_r+0x6c>
80005f1a:	ea 0b 11 00 	rsub	r11,r5,0
80005f1e:	0e 9c       	mov	r12,r7
80005f20:	ca ef       	rcall	80005e7c <_sbrk_r>
80005f22:	5b fc       	cp.w	r12,-1
80005f24:	c1 71       	brne	80005f52 <_malloc_trim_r+0x72>
80005f26:	30 0b       	mov	r11,0
80005f28:	0e 9c       	mov	r12,r7
80005f2a:	ca 9f       	rcall	80005e7c <_sbrk_r>
80005f2c:	68 28       	ld.w	r8,r4[0x8]
80005f2e:	f8 08 01 09 	sub	r9,r12,r8
80005f32:	58 f9       	cp.w	r9,15
80005f34:	e0 8a 00 0c 	brle	80005f4c <_malloc_trim_r+0x6c>
80005f38:	a1 a9       	sbr	r9,0x0
80005f3a:	91 19       	st.w	r8[0x4],r9
80005f3c:	e0 68 06 6c 	mov	r8,1644
80005f40:	70 09       	ld.w	r9,r8[0x0]
80005f42:	e0 68 11 d8 	mov	r8,4568
80005f46:	f8 09 01 09 	sub	r9,r12,r9
80005f4a:	91 09       	st.w	r8[0x0],r9
80005f4c:	0e 9c       	mov	r12,r7
80005f4e:	c9 6f       	rcall	80005e7a <__malloc_unlock>
80005f50:	d8 2a       	popm	r4-r7,pc,r12=0
80005f52:	68 28       	ld.w	r8,r4[0x8]
80005f54:	0a 16       	sub	r6,r5
80005f56:	a1 a6       	sbr	r6,0x0
80005f58:	91 16       	st.w	r8[0x4],r6
80005f5a:	e0 68 11 d8 	mov	r8,4568
80005f5e:	70 09       	ld.w	r9,r8[0x0]
80005f60:	0a 19       	sub	r9,r5
80005f62:	0e 9c       	mov	r12,r7
80005f64:	91 09       	st.w	r8[0x0],r9
80005f66:	c8 af       	rcall	80005e7a <__malloc_unlock>
80005f68:	da 2a       	popm	r4-r7,pc,r12=1
80005f6a:	d7 03       	nop

80005f6c <_free_r>:
80005f6c:	d4 21       	pushm	r4-r7,lr
80005f6e:	16 96       	mov	r6,r11
80005f70:	18 97       	mov	r7,r12
80005f72:	58 0b       	cp.w	r11,0
80005f74:	e0 80 00 bd 	breq	800060ee <_free_r+0x182>
80005f78:	c8 0f       	rcall	80005e78 <__malloc_lock>
80005f7a:	20 86       	sub	r6,8
80005f7c:	e0 6a 02 60 	mov	r10,608
80005f80:	6c 18       	ld.w	r8,r6[0x4]
80005f82:	74 2e       	ld.w	lr,r10[0x8]
80005f84:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80005f88:	a1 c8       	cbr	r8,0x0
80005f8a:	ec 08 00 09 	add	r9,r6,r8
80005f8e:	72 1b       	ld.w	r11,r9[0x4]
80005f90:	e0 1b ff fc 	andl	r11,0xfffc
80005f94:	1c 39       	cp.w	r9,lr
80005f96:	c1 d1       	brne	80005fd0 <_free_r+0x64>
80005f98:	f6 08 00 08 	add	r8,r11,r8
80005f9c:	58 0c       	cp.w	r12,0
80005f9e:	c0 81       	brne	80005fae <_free_r+0x42>
80005fa0:	6c 09       	ld.w	r9,r6[0x0]
80005fa2:	12 16       	sub	r6,r9
80005fa4:	12 08       	add	r8,r9
80005fa6:	6c 3b       	ld.w	r11,r6[0xc]
80005fa8:	6c 29       	ld.w	r9,r6[0x8]
80005faa:	97 29       	st.w	r11[0x8],r9
80005fac:	93 3b       	st.w	r9[0xc],r11
80005fae:	10 99       	mov	r9,r8
80005fb0:	95 26       	st.w	r10[0x8],r6
80005fb2:	a1 a9       	sbr	r9,0x0
80005fb4:	8d 19       	st.w	r6[0x4],r9
80005fb6:	e0 69 06 68 	mov	r9,1640
80005fba:	72 09       	ld.w	r9,r9[0x0]
80005fbc:	12 38       	cp.w	r8,r9
80005fbe:	c0 63       	brcs	80005fca <_free_r+0x5e>
80005fc0:	e0 68 11 d4 	mov	r8,4564
80005fc4:	0e 9c       	mov	r12,r7
80005fc6:	70 0b       	ld.w	r11,r8[0x0]
80005fc8:	c8 cf       	rcall	80005ee0 <_malloc_trim_r>
80005fca:	0e 9c       	mov	r12,r7
80005fcc:	c5 7f       	rcall	80005e7a <__malloc_unlock>
80005fce:	d8 22       	popm	r4-r7,pc
80005fd0:	93 1b       	st.w	r9[0x4],r11
80005fd2:	58 0c       	cp.w	r12,0
80005fd4:	c0 30       	breq	80005fda <_free_r+0x6e>
80005fd6:	30 0c       	mov	r12,0
80005fd8:	c1 08       	rjmp	80005ff8 <_free_r+0x8c>
80005fda:	6c 0e       	ld.w	lr,r6[0x0]
80005fdc:	f4 c5 ff f8 	sub	r5,r10,-8
80005fe0:	1c 16       	sub	r6,lr
80005fe2:	1c 08       	add	r8,lr
80005fe4:	6c 2e       	ld.w	lr,r6[0x8]
80005fe6:	0a 3e       	cp.w	lr,r5
80005fe8:	f9 bc 00 01 	moveq	r12,1
80005fec:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80005ff0:	eb fe 1a 02 	st.wne	r5[0x8],lr
80005ff4:	fd f5 1a 03 	st.wne	lr[0xc],r5
80005ff8:	f2 0b 00 0e 	add	lr,r9,r11
80005ffc:	7c 1e       	ld.w	lr,lr[0x4]
80005ffe:	ed be 00 00 	bld	lr,0x0
80006002:	c1 40       	breq	8000602a <_free_r+0xbe>
80006004:	16 08       	add	r8,r11
80006006:	58 0c       	cp.w	r12,0
80006008:	c0 d1       	brne	80006022 <_free_r+0xb6>
8000600a:	e0 6e 02 60 	mov	lr,608
8000600e:	72 2b       	ld.w	r11,r9[0x8]
80006010:	2f 8e       	sub	lr,-8
80006012:	1c 3b       	cp.w	r11,lr
80006014:	c0 71       	brne	80006022 <_free_r+0xb6>
80006016:	97 36       	st.w	r11[0xc],r6
80006018:	97 26       	st.w	r11[0x8],r6
8000601a:	8d 2b       	st.w	r6[0x8],r11
8000601c:	8d 3b       	st.w	r6[0xc],r11
8000601e:	30 1c       	mov	r12,1
80006020:	c0 58       	rjmp	8000602a <_free_r+0xbe>
80006022:	72 2b       	ld.w	r11,r9[0x8]
80006024:	72 39       	ld.w	r9,r9[0xc]
80006026:	93 2b       	st.w	r9[0x8],r11
80006028:	97 39       	st.w	r11[0xc],r9
8000602a:	10 99       	mov	r9,r8
8000602c:	ec 08 09 08 	st.w	r6[r8],r8
80006030:	a1 a9       	sbr	r9,0x0
80006032:	8d 19       	st.w	r6[0x4],r9
80006034:	58 0c       	cp.w	r12,0
80006036:	c5 a1       	brne	800060ea <_free_r+0x17e>
80006038:	e0 48 01 ff 	cp.w	r8,511
8000603c:	e0 8b 00 13 	brhi	80006062 <_free_r+0xf6>
80006040:	a3 98       	lsr	r8,0x3
80006042:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006046:	72 2b       	ld.w	r11,r9[0x8]
80006048:	8d 39       	st.w	r6[0xc],r9
8000604a:	8d 2b       	st.w	r6[0x8],r11
8000604c:	97 36       	st.w	r11[0xc],r6
8000604e:	93 26       	st.w	r9[0x8],r6
80006050:	a3 48       	asr	r8,0x2
80006052:	74 19       	ld.w	r9,r10[0x4]
80006054:	30 1b       	mov	r11,1
80006056:	f6 08 09 48 	lsl	r8,r11,r8
8000605a:	f3 e8 10 08 	or	r8,r9,r8
8000605e:	95 18       	st.w	r10[0x4],r8
80006060:	c4 58       	rjmp	800060ea <_free_r+0x17e>
80006062:	f0 0b 16 09 	lsr	r11,r8,0x9
80006066:	58 4b       	cp.w	r11,4
80006068:	e0 8b 00 06 	brhi	80006074 <_free_r+0x108>
8000606c:	f0 0b 16 06 	lsr	r11,r8,0x6
80006070:	2c 8b       	sub	r11,-56
80006072:	c2 08       	rjmp	800060b2 <_free_r+0x146>
80006074:	59 4b       	cp.w	r11,20
80006076:	e0 8b 00 04 	brhi	8000607e <_free_r+0x112>
8000607a:	2a 5b       	sub	r11,-91
8000607c:	c1 b8       	rjmp	800060b2 <_free_r+0x146>
8000607e:	e0 4b 00 54 	cp.w	r11,84
80006082:	e0 8b 00 06 	brhi	8000608e <_free_r+0x122>
80006086:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000608a:	29 2b       	sub	r11,-110
8000608c:	c1 38       	rjmp	800060b2 <_free_r+0x146>
8000608e:	e0 4b 01 54 	cp.w	r11,340
80006092:	e0 8b 00 06 	brhi	8000609e <_free_r+0x132>
80006096:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000609a:	28 9b       	sub	r11,-119
8000609c:	c0 b8       	rjmp	800060b2 <_free_r+0x146>
8000609e:	e0 4b 05 54 	cp.w	r11,1364
800060a2:	e0 88 00 05 	brls	800060ac <_free_r+0x140>
800060a6:	37 eb       	mov	r11,126
800060a8:	c0 58       	rjmp	800060b2 <_free_r+0x146>
800060aa:	d7 03       	nop
800060ac:	f0 0b 16 12 	lsr	r11,r8,0x12
800060b0:	28 4b       	sub	r11,-124
800060b2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800060b6:	78 29       	ld.w	r9,r12[0x8]
800060b8:	18 39       	cp.w	r9,r12
800060ba:	c0 e1       	brne	800060d6 <_free_r+0x16a>
800060bc:	74 18       	ld.w	r8,r10[0x4]
800060be:	a3 4b       	asr	r11,0x2
800060c0:	30 1c       	mov	r12,1
800060c2:	f8 0b 09 4b 	lsl	r11,r12,r11
800060c6:	f1 eb 10 0b 	or	r11,r8,r11
800060ca:	12 98       	mov	r8,r9
800060cc:	95 1b       	st.w	r10[0x4],r11
800060ce:	c0 a8       	rjmp	800060e2 <_free_r+0x176>
800060d0:	72 29       	ld.w	r9,r9[0x8]
800060d2:	18 39       	cp.w	r9,r12
800060d4:	c0 60       	breq	800060e0 <_free_r+0x174>
800060d6:	72 1a       	ld.w	r10,r9[0x4]
800060d8:	e0 1a ff fc 	andl	r10,0xfffc
800060dc:	14 38       	cp.w	r8,r10
800060de:	cf 93       	brcs	800060d0 <_free_r+0x164>
800060e0:	72 38       	ld.w	r8,r9[0xc]
800060e2:	8d 38       	st.w	r6[0xc],r8
800060e4:	8d 29       	st.w	r6[0x8],r9
800060e6:	93 36       	st.w	r9[0xc],r6
800060e8:	91 26       	st.w	r8[0x8],r6
800060ea:	0e 9c       	mov	r12,r7
800060ec:	cc 7e       	rcall	80005e7a <__malloc_unlock>
800060ee:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80006200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80006200:	c0 08       	rjmp	80006200 <_evba>
	...

80006204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80006204:	c0 08       	rjmp	80006204 <_handle_TLB_Multiple_Hit>
	...

80006208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80006208:	c0 08       	rjmp	80006208 <_handle_Bus_Error_Data_Fetch>
	...

8000620c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000620c:	c0 08       	rjmp	8000620c <_handle_Bus_Error_Instruction_Fetch>
	...

80006210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80006210:	c0 08       	rjmp	80006210 <_handle_NMI>
	...

80006214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80006214:	c0 08       	rjmp	80006214 <_handle_Instruction_Address>
	...

80006218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80006218:	c0 08       	rjmp	80006218 <_handle_ITLB_Protection>
	...

8000621c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000621c:	c0 08       	rjmp	8000621c <_handle_Breakpoint>
	...

80006220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80006220:	c0 08       	rjmp	80006220 <_handle_Illegal_Opcode>
	...

80006224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80006224:	c0 08       	rjmp	80006224 <_handle_Unimplemented_Instruction>
	...

80006228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80006228:	c0 08       	rjmp	80006228 <_handle_Privilege_Violation>
	...

8000622c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000622c:	c0 08       	rjmp	8000622c <_handle_Floating_Point>
	...

80006230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80006230:	c0 08       	rjmp	80006230 <_handle_Coprocessor_Absent>
	...

80006234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80006234:	c0 08       	rjmp	80006234 <_handle_Data_Address_Read>
	...

80006238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80006238:	c0 08       	rjmp	80006238 <_handle_Data_Address_Write>
	...

8000623c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000623c:	c0 08       	rjmp	8000623c <_handle_DTLB_Protection_Read>
	...

80006240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80006240:	c0 08       	rjmp	80006240 <_handle_DTLB_Protection_Write>
	...

80006244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80006244:	c0 08       	rjmp	80006244 <_handle_DTLB_Modified>
	...

80006250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80006250:	c0 08       	rjmp	80006250 <_handle_ITLB_Miss>
	...

80006260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80006260:	c0 08       	rjmp	80006260 <_handle_DTLB_Miss_Read>
	...

80006270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80006270:	c0 08       	rjmp	80006270 <_handle_DTLB_Miss_Write>
	...

80006300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80006300:	c0 08       	rjmp	80006300 <_handle_Supervisor_Call>
80006302:	d7 03       	nop

80006304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006304:	30 0c       	mov	r12,0
80006306:	fe b0 e0 41 	rcall	80002388 <_get_interrupt_handler>
8000630a:	58 0c       	cp.w	r12,0
8000630c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80006310:	d6 03       	rete

80006312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006312:	30 1c       	mov	r12,1
80006314:	fe b0 e0 3a 	rcall	80002388 <_get_interrupt_handler>
80006318:	58 0c       	cp.w	r12,0
8000631a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000631e:	d6 03       	rete

80006320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006320:	30 2c       	mov	r12,2
80006322:	fe b0 e0 33 	rcall	80002388 <_get_interrupt_handler>
80006326:	58 0c       	cp.w	r12,0
80006328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000632c:	d6 03       	rete

8000632e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000632e:	30 3c       	mov	r12,3
80006330:	fe b0 e0 2c 	rcall	80002388 <_get_interrupt_handler>
80006334:	58 0c       	cp.w	r12,0
80006336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000633a:	d6 03       	rete
8000633c:	d7 03       	nop
8000633e:	d7 03       	nop
80006340:	d7 03       	nop
80006342:	d7 03       	nop
80006344:	d7 03       	nop
80006346:	d7 03       	nop
80006348:	d7 03       	nop
8000634a:	d7 03       	nop
8000634c:	d7 03       	nop
8000634e:	d7 03       	nop
80006350:	d7 03       	nop
80006352:	d7 03       	nop
80006354:	d7 03       	nop
80006356:	d7 03       	nop
80006358:	d7 03       	nop
8000635a:	d7 03       	nop
8000635c:	d7 03       	nop
8000635e:	d7 03       	nop
80006360:	d7 03       	nop
80006362:	d7 03       	nop
80006364:	d7 03       	nop
80006366:	d7 03       	nop
80006368:	d7 03       	nop
8000636a:	d7 03       	nop
8000636c:	d7 03       	nop
8000636e:	d7 03       	nop
80006370:	d7 03       	nop
80006372:	d7 03       	nop
80006374:	d7 03       	nop
80006376:	d7 03       	nop
80006378:	d7 03       	nop
8000637a:	d7 03       	nop
8000637c:	d7 03       	nop
8000637e:	d7 03       	nop
80006380:	d7 03       	nop
80006382:	d7 03       	nop
80006384:	d7 03       	nop
80006386:	d7 03       	nop
80006388:	d7 03       	nop
8000638a:	d7 03       	nop
8000638c:	d7 03       	nop
8000638e:	d7 03       	nop
80006390:	d7 03       	nop
80006392:	d7 03       	nop
80006394:	d7 03       	nop
80006396:	d7 03       	nop
80006398:	d7 03       	nop
8000639a:	d7 03       	nop
8000639c:	d7 03       	nop
8000639e:	d7 03       	nop
800063a0:	d7 03       	nop
800063a2:	d7 03       	nop
800063a4:	d7 03       	nop
800063a6:	d7 03       	nop
800063a8:	d7 03       	nop
800063aa:	d7 03       	nop
800063ac:	d7 03       	nop
800063ae:	d7 03       	nop
800063b0:	d7 03       	nop
800063b2:	d7 03       	nop
800063b4:	d7 03       	nop
800063b6:	d7 03       	nop
800063b8:	d7 03       	nop
800063ba:	d7 03       	nop
800063bc:	d7 03       	nop
800063be:	d7 03       	nop
800063c0:	d7 03       	nop
800063c2:	d7 03       	nop
800063c4:	d7 03       	nop
800063c6:	d7 03       	nop
800063c8:	d7 03       	nop
800063ca:	d7 03       	nop
800063cc:	d7 03       	nop
800063ce:	d7 03       	nop
800063d0:	d7 03       	nop
800063d2:	d7 03       	nop
800063d4:	d7 03       	nop
800063d6:	d7 03       	nop
800063d8:	d7 03       	nop
800063da:	d7 03       	nop
800063dc:	d7 03       	nop
800063de:	d7 03       	nop
800063e0:	d7 03       	nop
800063e2:	d7 03       	nop
800063e4:	d7 03       	nop
800063e6:	d7 03       	nop
800063e8:	d7 03       	nop
800063ea:	d7 03       	nop
800063ec:	d7 03       	nop
800063ee:	d7 03       	nop
800063f0:	d7 03       	nop
800063f2:	d7 03       	nop
800063f4:	d7 03       	nop
800063f6:	d7 03       	nop
800063f8:	d7 03       	nop
800063fa:	d7 03       	nop
800063fc:	d7 03       	nop
800063fe:	d7 03       	nop
