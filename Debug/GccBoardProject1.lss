
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007560  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009600  80009600  00009a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000b60  80009800  80009800  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000524  00000008  8000a360  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000052c  8000a884  0000ad2c  2**0
                  ALLOC
  8 .bss          000002f0  00000530  00000530  00000000  2**2
                  ALLOC
  9 .heap         000027e0  00000820  00000820  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d98  00000000  00000000  0000ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001adc  00000000  00000000  0000baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000285e6  00000000  00000000  0000d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000582c  00000000  00000000  00035bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ec6b  00000000  00000000  0003b3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002058  00000000  00000000  0004a054  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000558d  00000000  00000000  0004c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a6e5  00000000  00000000  00051639  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00797142  00000000  00000000  0005bd1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001008  00000000  00000000  007f2e60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 b0 	sub	pc,pc,-3408

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	05 30       	ld.ub	r0,r2++
800020c0:	00 00       	add	r0,r0
800020c2:	05 44       	ld.w	r4,--r2
800020c4:	00 00       	add	r0,r0
800020c6:	05 3c       	ld.ub	r12,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 48       	ld.w	r8,--r2
800020cc:	00 00       	add	r0,r0
800020ce:	05 34       	ld.ub	r4,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 38       	ld.ub	r8,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 50       	ld.sh	r0,--r2
800020d8:	00 00       	add	r0,r0
800020da:	05 40       	ld.w	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 4c       	ld.w	r12,--r2

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	05 30       	ld.ub	r0,r2++

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	05 30       	ld.ub	r0,r2++
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	05 40       	ld.w	r0,--r2
80002200:	00 00       	add	r0,r0
80002202:	05 50       	ld.sh	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 48       	ld.w	r8,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 3c       	ld.ub	r12,r2++
8000220c:	00 00       	add	r0,r0
8000220e:	05 44       	ld.w	r4,--r2
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	18 96       	mov	r6,r12
80002236:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002238:	30 28       	mov	r8,2
8000223a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000223c:	4b 78       	lddpc	r8,80002318 <twim_read_packet+0xe8>
8000223e:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002240:	f0 1f 00 37 	mcall	8000231c <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002244:	6e 29       	ld.w	r9,r7[0x8]
80002246:	4b 78       	lddpc	r8,80002320 <twim_read_packet+0xf0>
80002248:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224a:	6e 39       	ld.w	r9,r7[0xc]
8000224c:	4b 68       	lddpc	r8,80002324 <twim_read_packet+0xf4>
8000224e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002250:	30 08       	mov	r8,0
80002252:	4b 6a       	lddpc	r10,80002328 <twim_read_packet+0xf8>
80002254:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002256:	30 0b       	mov	r11,0
80002258:	4b 5a       	lddpc	r10,8000232c <twim_read_packet+0xfc>
8000225a:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
8000225c:	0f fa       	ld.ub	r10,r7[0x7]
8000225e:	f0 0a 18 00 	cp.b	r10,r8
80002262:	c2 50       	breq	800022ac <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002264:	4a d8       	lddpc	r8,80002318 <twim_read_packet+0xe8>
80002266:	70 08       	ld.w	r8,r8[0x0]
80002268:	30 19       	mov	r9,1
8000226a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226c:	e0 69 00 80 	mov	r9,128
80002270:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002272:	30 29       	mov	r9,2
80002274:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002276:	ee ca ff fc 	sub	r10,r7,-4
8000227a:	4a e9       	lddpc	r9,80002330 <twim_read_packet+0x100>
8000227c:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000227e:	0f f9       	ld.ub	r9,r7[0x7]
80002280:	4a da       	lddpc	r10,80002334 <twim_read_packet+0x104>
80002282:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002284:	e0 6b 07 03 	mov	r11,1795
80002288:	4a ca       	lddpc	r10,80002338 <twim_read_packet+0x108>
8000228a:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000228c:	6e 0a       	ld.w	r10,r7[0x0]
8000228e:	a1 7a       	lsl	r10,0x1
80002290:	e8 1a a0 00 	orl	r10,0xa000
80002294:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002298:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229a:	6e 0a       	ld.w	r10,r7[0x0]
8000229c:	6e 39       	ld.w	r9,r7[0xc]
8000229e:	b1 69       	lsl	r9,0x10
800022a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a4:	e8 19 e0 01 	orl	r9,0xe001
800022a8:	91 49       	st.w	r8[0x10],r9
800022aa:	c1 18       	rjmp	800022cc <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022ac:	30 0a       	mov	r10,0
800022ae:	4a 28       	lddpc	r8,80002334 <twim_read_packet+0x104>
800022b0:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b2:	e0 6a 07 01 	mov	r10,1793
800022b6:	4a 18       	lddpc	r8,80002338 <twim_read_packet+0x108>
800022b8:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022ba:	49 88       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022bc:	70 08       	ld.w	r8,r8[0x0]
800022be:	6e 0a       	ld.w	r10,r7[0x0]
800022c0:	b1 69       	lsl	r9,0x10
800022c2:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022c6:	e8 19 e0 01 	orl	r9,0xe001
800022ca:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022cc:	49 38       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	49 a9       	lddpc	r9,80002338 <twim_read_packet+0x108>
800022d2:	72 09       	ld.w	r9,r9[0x0]
800022d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022d6:	30 18       	mov	r8,1
800022d8:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022da:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022dc:	49 48       	lddpc	r8,8000232c <twim_read_packet+0xfc>
800022de:	70 08       	ld.w	r8,r8[0x0]
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 80       	breq	800022f2 <twim_read_packet+0xc2>
800022e4:	c0 b8       	rjmp	800022fa <twim_read_packet+0xca>
		cpu_relax();
800022e6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ea:	6e 08       	ld.w	r8,r7[0x0]
800022ec:	58 08       	cp.w	r8,0
800022ee:	c0 30       	breq	800022f4 <twim_read_packet+0xc4>
800022f0:	c0 58       	rjmp	800022fa <twim_read_packet+0xca>
800022f2:	48 f7       	lddpc	r7,8000232c <twim_read_packet+0xfc>
800022f4:	f0 1f 00 12 	mcall	8000233c <twim_read_packet+0x10c>
800022f8:	cf 70       	breq	800022e6 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fa:	30 28       	mov	r8,2
800022fc:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022fe:	48 c8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002300:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002302:	5b c8       	cp.w	r8,-4
80002304:	c0 70       	breq	80002312 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002306:	48 a8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002308:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230a:	5b e8       	cp.w	r8,-2
8000230c:	c0 30       	breq	80002312 <twim_read_packet+0xe2>
8000230e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002312:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002316:	00 00       	add	r0,r0
80002318:	00 00       	add	r0,r0
8000231a:	05 30       	ld.ub	r0,r2++
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 54       	sub	r4,21
80002320:	00 00       	add	r0,r0
80002322:	05 34       	ld.ub	r4,r2++
80002324:	00 00       	add	r0,r0
80002326:	05 38       	ld.ub	r8,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 48       	ld.w	r8,--r2
8000232c:	00 00       	add	r0,r0
8000232e:	05 3c       	ld.ub	r12,r2++
80002330:	00 00       	add	r0,r0
80002332:	05 40       	ld.w	r0,--r2
80002334:	00 00       	add	r0,r0
80002336:	05 50       	ld.sh	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 44       	ld.w	r4,--r2
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 44       	sub	r4,20

80002340 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002340:	eb cd 40 e0 	pushm	r5-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002348:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000234c:	30 0a       	mov	r10,0
8000234e:	4a 69       	lddpc	r9,800023e4 <twim_master_init+0xa4>
80002350:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002352:	e6 18 00 01 	andh	r8,0x1,COH
80002356:	c0 b1       	brne	8000236c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002358:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235a:	3f f8       	mov	r8,-1
8000235c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000235e:	30 18       	mov	r8,1
80002360:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002362:	e0 68 00 80 	mov	r8,128
80002366:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002368:	d5 03       	csrf	0x10
8000236a:	c0 88       	rjmp	8000237a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000236c:	3f f8       	mov	r8,-1
8000236e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002370:	30 18       	mov	r8,1
80002372:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002374:	e0 68 00 80 	mov	r8,128
80002378:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237a:	3f f8       	mov	r8,-1
8000237c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000237e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002382:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002384:	30 1a       	mov	r10,1
80002386:	e0 6b 02 80 	mov	r11,640
8000238a:	49 8c       	lddpc	r12,800023e8 <twim_master_init+0xa8>
8000238c:	f0 1f 00 18 	mcall	800023ec <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002390:	e6 16 00 01 	andh	r6,0x1,COH
80002394:	c0 21       	brne	80002398 <twim_master_init+0x58>
      cpu_irq_enable();
80002396:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002398:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000239c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000239e:	f0 09 18 00 	cp.b	r9,r8
800023a2:	f9 b8 01 10 	movne	r8,16
800023a6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023aa:	f9 b8 01 ff 	movne	r8,-1
800023ae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b2:	6a 0a       	ld.w	r10,r5[0x0]
800023b4:	6a 1b       	ld.w	r11,r5[0x4]
800023b6:	0e 9c       	mov	r12,r7
800023b8:	f0 1f 00 0e 	mcall	800023f0 <twim_master_init+0xb0>
800023bc:	5b 8c       	cp.w	r12,-8
800023be:	c1 00       	breq	800023de <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c0:	6a 2b       	ld.w	r11,r5[0x8]
800023c2:	0e 9c       	mov	r12,r7
800023c4:	f0 1f 00 0c 	mcall	800023f4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023c8:	48 78       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023cc:	5b c8       	cp.w	r8,-4
800023ce:	c0 70       	breq	800023dc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d0:	48 58       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d4:	5b e8       	cp.w	r8,-2
800023d6:	c0 30       	breq	800023dc <twim_master_init+0x9c>
800023d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023dc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	00 00       	add	r0,r0
800023e6:	05 3c       	ld.ub	r12,r2++
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	20 04       	sub	r4,0
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	26 dc       	sub	r12,109
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 e0       	sub	r0,14
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 14       	sub	r4,33

800023f8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023f8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800023fc:	58 0a       	cp.w	r10,0
800023fe:	c6 30       	breq	800024c4 <eic_init+0xcc>
80002400:	30 08       	mov	r8,0
80002402:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002404:	30 19       	mov	r9,1
80002406:	30 1e       	mov	lr,1
80002408:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000240c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002410:	11 96       	ld.ub	r6,r8[0x1]
80002412:	f2 06 18 00 	cp.b	r6,r9
80002416:	c0 71       	brne	80002424 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002418:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241a:	11 86       	ld.ub	r6,r8[0x0]
8000241c:	fc 06 09 46 	lsl	r6,lr,r6
80002420:	0a 46       	or	r6,r5
80002422:	c0 78       	rjmp	80002430 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002424:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002426:	11 86       	ld.ub	r6,r8[0x0]
80002428:	fc 06 09 46 	lsl	r6,lr,r6
8000242c:	5c d6       	com	r6
8000242e:	0a 66       	and	r6,r5
80002430:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002432:	11 a6       	ld.ub	r6,r8[0x2]
80002434:	f2 06 18 00 	cp.b	r6,r9
80002438:	c0 71       	brne	80002446 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000243c:	11 86       	ld.ub	r6,r8[0x0]
8000243e:	fc 06 09 46 	lsl	r6,lr,r6
80002442:	0a 46       	or	r6,r5
80002444:	c0 78       	rjmp	80002452 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002446:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002448:	11 86       	ld.ub	r6,r8[0x0]
8000244a:	fc 06 09 46 	lsl	r6,lr,r6
8000244e:	5c d6       	com	r6
80002450:	0a 66       	and	r6,r5
80002452:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002454:	11 b6       	ld.ub	r6,r8[0x3]
80002456:	f2 06 18 00 	cp.b	r6,r9
8000245a:	c0 71       	brne	80002468 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000245c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000245e:	11 86       	ld.ub	r6,r8[0x0]
80002460:	fc 06 09 46 	lsl	r6,lr,r6
80002464:	0a 46       	or	r6,r5
80002466:	c0 78       	rjmp	80002474 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002468:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246a:	11 86       	ld.ub	r6,r8[0x0]
8000246c:	fc 06 09 46 	lsl	r6,lr,r6
80002470:	5c d6       	com	r6
80002472:	0a 66       	and	r6,r5
80002474:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002476:	11 c6       	ld.ub	r6,r8[0x4]
80002478:	f2 06 18 00 	cp.b	r6,r9
8000247c:	c0 71       	brne	8000248a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000247e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002480:	11 86       	ld.ub	r6,r8[0x0]
80002482:	fc 06 09 46 	lsl	r6,lr,r6
80002486:	0a 46       	or	r6,r5
80002488:	c0 78       	rjmp	80002496 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000248c:	11 86       	ld.ub	r6,r8[0x0]
8000248e:	fc 06 09 46 	lsl	r6,lr,r6
80002492:	5c d6       	com	r6
80002494:	0a 66       	and	r6,r5
80002496:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002498:	11 d6       	ld.ub	r6,r8[0x5]
8000249a:	f2 06 18 00 	cp.b	r6,r9
8000249e:	c0 71       	brne	800024ac <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a2:	11 88       	ld.ub	r8,r8[0x0]
800024a4:	fc 08 09 48 	lsl	r8,lr,r8
800024a8:	0c 48       	or	r8,r6
800024aa:	c0 78       	rjmp	800024b8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024ac:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024ae:	11 88       	ld.ub	r8,r8[0x0]
800024b0:	fc 08 09 48 	lsl	r8,lr,r8
800024b4:	5c d8       	com	r8
800024b6:	0c 68       	and	r8,r6
800024b8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024ba:	2f f7       	sub	r7,-1
800024bc:	0e 98       	mov	r8,r7
800024be:	0e 3a       	cp.w	r10,r7
800024c0:	fe 9b ff a4 	brhi	80002408 <eic_init+0x10>
800024c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024c8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024c8:	30 18       	mov	r8,1
800024ca:	f0 0b 09 48 	lsl	r8,r8,r11
800024ce:	99 c8       	st.w	r12[0x30],r8
}
800024d0:	5e fc       	retal	r12

800024d2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d2:	30 18       	mov	r8,1
800024d4:	f0 0b 09 48 	lsl	r8,r8,r11
800024d8:	99 08       	st.w	r12[0x0],r8
}
800024da:	5e fc       	retal	r12

800024dc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800024e8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ea:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024ec:	e6 18 00 01 	andh	r8,0x1,COH
800024f0:	c0 21       	brne	800024f4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f4:	5e fc       	retal	r12
800024f6:	d7 03       	nop

800024f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 78       	lsl	r8,0x9
800024fe:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002502:	58 7b       	cp.w	r11,7
80002504:	e0 8b 00 05 	brhi	8000250e <gpio_enable_module_pin+0x16>
80002508:	4a 09       	lddpc	r9,80002588 <gpio_enable_module_pin+0x90>
8000250a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000250e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002510:	30 19       	mov	r9,1
80002512:	f2 0c 09 49 	lsl	r9,r9,r12
80002516:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002518:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000251c:	c3 18       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251e:	30 19       	mov	r9,1
80002520:	f2 0c 09 49 	lsl	r9,r9,r12
80002524:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002526:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002528:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252a:	c2 a8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000252c:	30 19       	mov	r9,1
8000252e:	f2 0c 09 49 	lsl	r9,r9,r12
80002532:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002534:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002536:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002538:	c2 38       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002542:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002544:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002546:	c1 c8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002548:	30 19       	mov	r9,1
8000254a:	f2 0c 09 49 	lsl	r9,r9,r12
8000254e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002550:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002552:	91 d9       	st.w	r8[0x34],r9
		break;
80002554:	c1 58       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002556:	30 19       	mov	r9,1
80002558:	f2 0c 09 49 	lsl	r9,r9,r12
8000255c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000255e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002560:	91 d9       	st.w	r8[0x34],r9
		break;
80002562:	c0 e8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002564:	30 19       	mov	r9,1
80002566:	f2 0c 09 49 	lsl	r9,r9,r12
8000256a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000256c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000256e:	91 d9       	st.w	r8[0x34],r9
		break;
80002570:	c0 78       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002572:	30 19       	mov	r9,1
80002574:	f2 0c 09 49 	lsl	r9,r9,r12
80002578:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000257c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000257e:	30 19       	mov	r9,1
80002580:	f2 0c 09 4c 	lsl	r12,r9,r12
80002584:	91 2c       	st.w	r8[0x8],r12
80002586:	5e fd       	retal	0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	98 00       	ld.sh	r0,r12[0x0]

8000258c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000258c:	d4 21       	pushm	r4-r7,lr
8000258e:	18 97       	mov	r7,r12
80002590:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002592:	58 0b       	cp.w	r11,0
80002594:	c0 31       	brne	8000259a <gpio_enable_module+0xe>
80002596:	30 05       	mov	r5,0
80002598:	c0 d8       	rjmp	800025b2 <gpio_enable_module+0x26>
8000259a:	30 06       	mov	r6,0
8000259c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000259e:	6e 1b       	ld.w	r11,r7[0x4]
800025a0:	6e 0c       	ld.w	r12,r7[0x0]
800025a2:	f0 1f 00 06 	mcall	800025b8 <gpio_enable_module+0x2c>
800025a6:	18 45       	or	r5,r12
		gpiomap++;
800025a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025aa:	2f f6       	sub	r6,-1
800025ac:	0c 34       	cp.w	r4,r6
800025ae:	fe 9b ff f8 	brhi	8000259e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b2:	0a 9c       	mov	r12,r5
800025b4:	d8 22       	popm	r4-r7,pc
800025b6:	00 00       	add	r0,r0
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	24 f8       	sub	r8,79

800025bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025bc:	f8 08 16 05 	lsr	r8,r12,0x5
800025c0:	a9 78       	lsl	r8,0x9
800025c2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025c6:	16 99       	mov	r9,r11
800025c8:	e2 19 00 04 	andl	r9,0x4,COH
800025cc:	c0 70       	breq	800025da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025ce:	30 19       	mov	r9,1
800025d0:	f2 0c 09 49 	lsl	r9,r9,r12
800025d4:	f1 49 00 74 	st.w	r8[116],r9
800025d8:	c0 68       	rjmp	800025e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025da:	30 19       	mov	r9,1
800025dc:	f2 0c 09 49 	lsl	r9,r9,r12
800025e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e4:	16 99       	mov	r9,r11
800025e6:	e2 19 00 80 	andl	r9,0x80,COH
800025ea:	c2 40       	breq	80002632 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025ec:	16 99       	mov	r9,r11
800025ee:	e2 19 01 80 	andl	r9,0x180,COH
800025f2:	c0 90       	breq	80002604 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 49 	lsl	r9,r9,r12
800025fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 49 00 b8 	st.w	r8[184],r9
80002602:	c1 88       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002604:	16 99       	mov	r9,r11
80002606:	e2 19 02 80 	andl	r9,0x280,COH
8000260a:	c0 90       	breq	8000261c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000260c:	30 19       	mov	r9,1
8000260e:	f2 0c 09 49 	lsl	r9,r9,r12
80002612:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002616:	f1 49 00 b8 	st.w	r8[184],r9
8000261a:	c0 c8       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000261c:	16 99       	mov	r9,r11
8000261e:	e2 19 03 80 	andl	r9,0x380,COH
80002622:	c0 80       	breq	80002632 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002624:	30 19       	mov	r9,1
80002626:	f2 0c 09 49 	lsl	r9,r9,r12
8000262a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000262e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002632:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002636:	c1 50       	breq	80002660 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002638:	e2 1b 00 02 	andl	r11,0x2,COH
8000263c:	c0 70       	breq	8000264a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000263e:	30 19       	mov	r9,1
80002640:	f2 0c 09 49 	lsl	r9,r9,r12
80002644:	f1 49 00 54 	st.w	r8[84],r9
80002648:	c0 68       	rjmp	80002654 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264a:	30 19       	mov	r9,1
8000264c:	f2 0c 09 49 	lsl	r9,r9,r12
80002650:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 49 	lsl	r9,r9,r12
8000265a:	f1 49 00 44 	st.w	r8[68],r9
8000265e:	c0 68       	rjmp	8000266a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002660:	30 19       	mov	r9,1
80002662:	f2 0c 09 49 	lsl	r9,r9,r12
80002666:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266a:	30 19       	mov	r9,1
8000266c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002670:	91 1c       	st.w	r8[0x4],r12
}
80002672:	5e fc       	retal	r12

80002674 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002674:	f8 08 16 05 	lsr	r8,r12,0x5
80002678:	a9 78       	lsl	r8,0x9
8000267a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000267e:	30 19       	mov	r9,1
80002680:	f2 0c 09 4c 	lsl	r12,r9,r12
80002684:	f1 4c 00 54 	st.w	r8[84],r12
}
80002688:	5e fc       	retal	r12

8000268a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268a:	f8 08 16 05 	lsr	r8,r12,0x5
8000268e:	a9 78       	lsl	r8,0x9
80002690:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002694:	30 19       	mov	r9,1
80002696:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000269e:	5e fc       	retal	r12

800026a0 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026a0:	f8 08 16 05 	lsr	r8,r12,0x5
800026a4:	a9 78       	lsl	r8,0x9
800026a6:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800026aa:	30 19       	mov	r9,1
800026ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800026b0:	f1 4c 00 5c 	st.w	r8[92],r12
}
800026b4:	5e fc       	retal	r12

800026b6 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026b6:	f8 08 16 05 	lsr	r8,r12,0x5
800026ba:	a9 78       	lsl	r8,0x9
800026bc:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
800026c0:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
800026c4:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800026c8:	30 1a       	mov	r10,1
800026ca:	f4 0c 09 4c 	lsl	r12,r10,r12
800026ce:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026d2:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026d6:	5e fc       	retal	r12

800026d8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026d8:	c0 08       	rjmp	800026d8 <_unhandled_interrupt>
800026da:	d7 03       	nop

800026dc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026dc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026e0:	49 99       	lddpc	r9,80002744 <INTC_register_interrupt+0x68>
800026e2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026e6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026ea:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026ec:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026f0:	58 0a       	cp.w	r10,0
800026f2:	c0 91       	brne	80002704 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026f4:	49 59       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
800026f6:	49 6a       	lddpc	r10,8000274c <INTC_register_interrupt+0x70>
800026f8:	12 1a       	sub	r10,r9
800026fa:	fe 79 10 00 	mov	r9,-61440
800026fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002702:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002704:	58 1a       	cp.w	r10,1
80002706:	c0 a1       	brne	8000271a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002708:	49 09       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
8000270a:	49 2a       	lddpc	r10,80002750 <INTC_register_interrupt+0x74>
8000270c:	12 1a       	sub	r10,r9
8000270e:	bf aa       	sbr	r10,0x1e
80002710:	fe 79 10 00 	mov	r9,-61440
80002714:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002718:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000271a:	58 2a       	cp.w	r10,2
8000271c:	c0 a1       	brne	80002730 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000271e:	48 b9       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002720:	48 da       	lddpc	r10,80002754 <INTC_register_interrupt+0x78>
80002722:	12 1a       	sub	r10,r9
80002724:	bf ba       	sbr	r10,0x1f
80002726:	fe 79 10 00 	mov	r9,-61440
8000272a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000272e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002730:	48 69       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002732:	48 aa       	lddpc	r10,80002758 <INTC_register_interrupt+0x7c>
80002734:	12 1a       	sub	r10,r9
80002736:	ea 1a c0 00 	orh	r10,0xc000
8000273a:	fe 79 10 00 	mov	r9,-61440
8000273e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002742:	5e fc       	retal	r12
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	98 20       	ld.sh	r0,r12[0x4]
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	96 00       	ld.sh	r0,r11[0x0]
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	97 04       	st.w	r11[0x0],r4
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	97 12       	st.w	r11[0x4],r2
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	97 20       	st.w	r11[0x8],r0
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	97 2e       	st.w	r11[0x8],lr

8000275c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000275c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000275e:	49 18       	lddpc	r8,800027a0 <INTC_init_interrupts+0x44>
80002760:	e3 b8 00 01 	mtsr	0x4,r8
80002764:	49 0e       	lddpc	lr,800027a4 <INTC_init_interrupts+0x48>
80002766:	30 07       	mov	r7,0
80002768:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000276a:	49 0c       	lddpc	r12,800027a8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000276c:	49 05       	lddpc	r5,800027ac <INTC_init_interrupts+0x50>
8000276e:	10 15       	sub	r5,r8
80002770:	fe 76 10 00 	mov	r6,-61440
80002774:	c1 08       	rjmp	80002794 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002776:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002778:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000277a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000277c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002780:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002782:	10 3a       	cp.w	r10,r8
80002784:	fe 9b ff fc 	brhi	8000277c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002788:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000278c:	2f f7       	sub	r7,-1
8000278e:	2f 8e       	sub	lr,-8
80002790:	59 f7       	cp.w	r7,31
80002792:	c0 50       	breq	8000279c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002794:	7c 08       	ld.w	r8,lr[0x0]
80002796:	58 08       	cp.w	r8,0
80002798:	ce f1       	brne	80002776 <INTC_init_interrupts+0x1a>
8000279a:	cf 7b       	rjmp	80002788 <INTC_init_interrupts+0x2c>
8000279c:	d8 22       	popm	r4-r7,pc
8000279e:	00 00       	add	r0,r0
800027a0:	80 00       	ld.sh	r0,r0[0x0]
800027a2:	96 00       	ld.sh	r0,r11[0x0]
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	98 20       	ld.sh	r0,r12[0x4]
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	26 d8       	sub	r8,109
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	97 04       	st.w	r11[0x0],r4

800027b0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800027b0:	fe 78 10 00 	mov	r8,-61440
800027b4:	e0 69 00 83 	mov	r9,131
800027b8:	f2 0c 01 0c 	sub	r12,r9,r12
800027bc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800027c0:	f2 ca ff c0 	sub	r10,r9,-64
800027c4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027c8:	58 08       	cp.w	r8,0
800027ca:	c0 21       	brne	800027ce <_get_interrupt_handler+0x1e>
800027cc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027ce:	f0 08 12 00 	clz	r8,r8
800027d2:	48 5a       	lddpc	r10,800027e4 <_get_interrupt_handler+0x34>
800027d4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027d8:	f0 08 11 1f 	rsub	r8,r8,31
800027dc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027de:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027e2:	5e fc       	retal	r12
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	98 20       	ld.sh	r0,r12[0x4]

800027e8 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027e8:	f8 c8 00 01 	sub	r8,r12,1
800027ec:	f0 0b 00 0b 	add	r11,r8,r11
800027f0:	f6 0c 0d 0a 	divu	r10,r11,r12
800027f4:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027f6:	f4 c8 00 01 	sub	r8,r10,1
800027fa:	e0 48 00 fe 	cp.w	r8,254
800027fe:	e0 88 00 03 	brls	80002804 <getBaudDiv+0x1c>
80002802:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002804:	5c 8c       	casts.h	r12
}
80002806:	5e fc       	retal	r12

80002808 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002808:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000280a:	30 18       	mov	r8,1
8000280c:	f0 0b 18 00 	cp.b	r11,r8
80002810:	5f be       	srhi	lr
80002812:	f0 0a 18 00 	cp.b	r10,r8
80002816:	5f b8       	srhi	r8
80002818:	fd e8 10 08 	or	r8,lr,r8
8000281c:	c0 30       	breq	80002822 <spi_selectionMode+0x1a>
8000281e:	30 2c       	mov	r12,2
80002820:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002822:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002824:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002828:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000282c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002830:	99 18       	st.w	r12[0x4],r8
80002832:	d8 0a       	popm	pc,r12=0

80002834 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002834:	78 18       	ld.w	r8,r12[0x4]
80002836:	ea 18 00 0f 	orh	r8,0xf
8000283a:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000283c:	78 18       	ld.w	r8,r12[0x4]
8000283e:	e2 18 00 04 	andl	r8,0x4,COH
80002842:	c0 f0       	breq	80002860 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002844:	30 e8       	mov	r8,14
80002846:	f0 0b 18 00 	cp.b	r11,r8
8000284a:	e0 8b 00 19 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000284e:	78 18       	ld.w	r8,r12[0x4]
80002850:	b1 6b       	lsl	r11,0x10
80002852:	ea 1b ff f0 	orh	r11,0xfff0
80002856:	e8 1b ff ff 	orl	r11,0xffff
8000285a:	10 6b       	and	r11,r8
8000285c:	99 1b       	st.w	r12[0x4],r11
8000285e:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002860:	30 38       	mov	r8,3
80002862:	f0 0b 18 00 	cp.b	r11,r8
80002866:	e0 8b 00 0b 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000286a:	78 18       	ld.w	r8,r12[0x4]
8000286c:	2f 0b       	sub	r11,-16
8000286e:	30 19       	mov	r9,1
80002870:	f2 0b 09 4b 	lsl	r11,r9,r11
80002874:	5c db       	com	r11
80002876:	10 6b       	and	r11,r8
80002878:	99 1b       	st.w	r12[0x4],r11
8000287a:	5e fd       	retal	0
8000287c:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000287e:	5e fc       	retal	r12

80002880 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002880:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002884:	c0 58       	rjmp	8000288e <spi_unselectChip+0xe>
		if (!timeout--) {
80002886:	58 08       	cp.w	r8,0
80002888:	c0 21       	brne	8000288c <spi_unselectChip+0xc>
8000288a:	5e ff       	retal	1
8000288c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000288e:	78 49       	ld.w	r9,r12[0x10]
80002890:	e2 19 02 00 	andl	r9,0x200,COH
80002894:	cf 90       	breq	80002886 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002896:	78 18       	ld.w	r8,r12[0x4]
80002898:	ea 18 00 0f 	orh	r8,0xf
8000289c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000289e:	fc 18 01 00 	movh	r8,0x100
800028a2:	99 08       	st.w	r12[0x0],r8
800028a4:	5e fd       	retal	0
800028a6:	d7 03       	nop

800028a8 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a8:	eb cd 40 f8 	pushm	r3-r7,lr
800028ac:	18 95       	mov	r5,r12
800028ae:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028b0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800028b4:	30 38       	mov	r8,3
800028b6:	f0 06 18 00 	cp.b	r6,r8
800028ba:	e0 8b 00 4d 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800028be:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028c2:	30 18       	mov	r8,1
800028c4:	f0 04 18 00 	cp.b	r4,r8
800028c8:	e0 8b 00 46 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028cc:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028d0:	30 78       	mov	r8,7
800028d2:	f0 03 18 00 	cp.b	r3,r8
800028d6:	e0 88 00 3f 	brls	80002954 <spi_setupChipReg+0xac>
800028da:	31 08       	mov	r8,16
800028dc:	f0 03 18 00 	cp.b	r3,r8
800028e0:	e0 8b 00 3a 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028e4:	14 9b       	mov	r11,r10
800028e6:	6e 1c       	ld.w	r12,r7[0x4]
800028e8:	f0 1f 00 1d 	mcall	8000295c <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028ec:	c3 45       	brlt	80002954 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028ee:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028f0:	ec 09 16 01 	lsr	r9,r6,0x1
800028f4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028f8:	ec 16 00 01 	eorl	r6,0x1
800028fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002900:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002904:	20 83       	sub	r3,8
80002906:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000290a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000290e:	ef 39 00 09 	ld.ub	r9,r7[9]
80002912:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002916:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000291a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000291e:	0f 89       	ld.ub	r9,r7[0x0]
80002920:	30 1a       	mov	r10,1
80002922:	f4 09 18 00 	cp.b	r9,r10
80002926:	c0 e0       	breq	80002942 <spi_setupChipReg+0x9a>
80002928:	c0 a3       	brcs	8000293c <spi_setupChipReg+0x94>
8000292a:	30 2a       	mov	r10,2
8000292c:	f4 09 18 00 	cp.b	r9,r10
80002930:	c0 c0       	breq	80002948 <spi_setupChipReg+0xa0>
80002932:	30 3a       	mov	r10,3
80002934:	f4 09 18 00 	cp.b	r9,r10
80002938:	c0 e1       	brne	80002954 <spi_setupChipReg+0xac>
8000293a:	c0 a8       	rjmp	8000294e <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000293c:	8b c8       	st.w	r5[0x30],r8
8000293e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002942:	8b d8       	st.w	r5[0x34],r8
80002944:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002948:	8b e8       	st.w	r5[0x38],r8
8000294a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000294e:	8b f8       	st.w	r5[0x3c],r8
80002950:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002954:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002956:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000295a:	00 00       	add	r0,r0
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	27 e8       	sub	r8,126

80002960 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002960:	30 18       	mov	r8,1
80002962:	99 08       	st.w	r12[0x0],r8
}
80002964:	5e fc       	retal	r12

80002966 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002966:	76 09       	ld.w	r9,r11[0x0]
80002968:	58 29       	cp.w	r9,2
8000296a:	e0 88 00 03 	brls	80002970 <tc_init_waveform+0xa>
8000296e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002970:	76 18       	ld.w	r8,r11[0x4]
80002972:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002976:	af ba       	sbr	r10,0xf
80002978:	10 9b       	mov	r11,r8
8000297a:	e6 1b c0 00 	andh	r11,0xc000,COH
8000297e:	16 4a       	or	r10,r11
80002980:	10 9b       	mov	r11,r8
80002982:	e6 1b 30 00 	andh	r11,0x3000,COH
80002986:	16 4a       	or	r10,r11
80002988:	10 9b       	mov	r11,r8
8000298a:	e6 1b 0c 00 	andh	r11,0xc00,COH
8000298e:	16 4a       	or	r10,r11
80002990:	10 9b       	mov	r11,r8
80002992:	e6 1b 03 00 	andh	r11,0x300,COH
80002996:	16 4a       	or	r10,r11
80002998:	10 9b       	mov	r11,r8
8000299a:	e6 1b 00 c0 	andh	r11,0xc0,COH
8000299e:	16 4a       	or	r10,r11
800029a0:	10 9b       	mov	r11,r8
800029a2:	e6 1b 00 30 	andh	r11,0x30,COH
800029a6:	16 4a       	or	r10,r11
800029a8:	10 9b       	mov	r11,r8
800029aa:	e6 1b 00 0c 	andh	r11,0xc,COH
800029ae:	16 4a       	or	r10,r11
800029b0:	10 9b       	mov	r11,r8
800029b2:	e6 1b 00 03 	andh	r11,0x3,COH
800029b6:	16 4a       	or	r10,r11
800029b8:	10 9b       	mov	r11,r8
800029ba:	e2 1b 60 00 	andl	r11,0x6000,COH
800029be:	16 4a       	or	r10,r11
800029c0:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
800029c4:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800029c8:	10 9b       	mov	r11,r8
800029ca:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029ce:	16 4a       	or	r10,r11
800029d0:	10 9b       	mov	r11,r8
800029d2:	e2 1b 03 00 	andl	r11,0x300,COH
800029d6:	16 4a       	or	r10,r11
800029d8:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029dc:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029e0:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029e4:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029e8:	10 9b       	mov	r11,r8
800029ea:	e2 1b 00 30 	andl	r11,0x30,COH
800029ee:	16 4a       	or	r10,r11
800029f0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029f4:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029f8:	a5 69       	lsl	r9,0x4
800029fa:	2f f9       	sub	r9,-1
800029fc:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a00:	5e fd       	retal	0

80002a02 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a02:	58 2b       	cp.w	r11,2
80002a04:	e0 88 00 03 	brls	80002a0a <tc_start+0x8>
80002a08:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002a0a:	a7 6b       	lsl	r11,0x6
80002a0c:	16 0c       	add	r12,r11
80002a0e:	30 58       	mov	r8,5
80002a10:	99 08       	st.w	r12[0x0],r8
80002a12:	5e fd       	retal	0

80002a14 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a14:	58 2b       	cp.w	r11,2
80002a16:	e0 88 00 03 	brls	80002a1c <tc_stop+0x8>
80002a1a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80002a1c:	a7 6b       	lsl	r11,0x6
80002a1e:	16 0c       	add	r12,r11
80002a20:	30 28       	mov	r8,2
80002a22:	99 08       	st.w	r12[0x0],r8
80002a24:	5e fd       	retal	0

80002a26 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a26:	58 2b       	cp.w	r11,2
80002a28:	e0 88 00 03 	brls	80002a2e <tc_read_sr+0x8>
80002a2c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a2e:	a7 6b       	lsl	r11,0x6
80002a30:	2e 0b       	sub	r11,-32
80002a32:	16 0c       	add	r12,r11
80002a34:	78 0c       	ld.w	r12,r12[0x0]
}
80002a36:	5e fc       	retal	r12

80002a38 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a38:	58 2b       	cp.w	r11,2
80002a3a:	e0 88 00 03 	brls	80002a40 <tc_write_rc+0x8>
80002a3e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a40:	f6 08 15 04 	lsl	r8,r11,0x4
80002a44:	2f f8       	sub	r8,-1
80002a46:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a4a:	e2 18 80 00 	andl	r8,0x8000,COH
80002a4e:	c0 c0       	breq	80002a66 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a50:	a7 6b       	lsl	r11,0x6
80002a52:	16 0c       	add	r12,r11
80002a54:	2e 4c       	sub	r12,-28
80002a56:	78 08       	ld.w	r8,r12[0x0]
80002a58:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a5c:	e0 18 00 00 	andl	r8,0x0
80002a60:	f3 e8 10 08 	or	r8,r9,r8
80002a64:	99 08       	st.w	r12[0x0],r8

  return value;
80002a66:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a6a:	5e fc       	retal	r12

80002a6c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a6c:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a70:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a74:	58 2b       	cp.w	r11,2
80002a76:	e0 88 00 04 	brls	80002a7e <tc_configure_interrupts+0x12>
80002a7a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a7e:	ee 19 00 01 	eorh	r9,0x1
80002a82:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a86:	74 08       	ld.w	r8,r10[0x0]
80002a88:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a8c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a90:	a7 6e       	lsl	lr,0x6
80002a92:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a96:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a9a:	0e 4e       	or	lr,r7
80002a9c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002aa0:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002aa4:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002aa8:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002aac:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002ab0:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002ab4:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002ab8:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002abc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002ac0:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002ac4:	f6 0e 15 06 	lsl	lr,r11,0x6
80002ac8:	f8 0e 00 0e 	add	lr,r12,lr
80002acc:	2d ce       	sub	lr,-36
80002ace:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002ad0:	58 09       	cp.w	r9,0
80002ad2:	c0 20       	breq	80002ad6 <tc_configure_interrupts+0x6a>
80002ad4:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002ad6:	74 08       	ld.w	r8,r10[0x0]
80002ad8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002adc:	e0 65 00 80 	mov	r5,128
80002ae0:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002ae4:	74 08       	ld.w	r8,r10[0x0]
80002ae6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002aea:	f9 b4 00 40 	moveq	r4,64
80002aee:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002af2:	74 08       	ld.w	r8,r10[0x0]
80002af4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002af8:	f9 b3 00 20 	moveq	r3,32
80002afc:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002b00:	74 08       	ld.w	r8,r10[0x0]
80002b02:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002b06:	f9 b2 00 10 	moveq	r2,16
80002b0a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002b0e:	74 08       	ld.w	r8,r10[0x0]
80002b10:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002b14:	f9 b6 00 08 	moveq	r6,8
80002b18:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002b1c:	74 08       	ld.w	r8,r10[0x0]
80002b1e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002b22:	f9 b7 00 04 	moveq	r7,4
80002b26:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002b2a:	74 08       	ld.w	r8,r10[0x0]
80002b2c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b30:	f9 be 00 02 	moveq	lr,2
80002b34:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b38:	74 08       	ld.w	r8,r10[0x0]
80002b3a:	ec 18 00 01 	eorl	r8,0x1
80002b3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b42:	eb e8 10 08 	or	r8,r5,r8
80002b46:	08 48       	or	r8,r4
80002b48:	06 48       	or	r8,r3
80002b4a:	04 48       	or	r8,r2
80002b4c:	0c 48       	or	r8,r6
80002b4e:	0e 48       	or	r8,r7
80002b50:	1c 48       	or	r8,lr
80002b52:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b56:	f8 0a 00 0a 	add	r10,r12,r10
80002b5a:	2d 8a       	sub	r10,-40
80002b5c:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b5e:	a7 6b       	lsl	r11,0x6
80002b60:	2e 0b       	sub	r11,-32
80002b62:	16 0c       	add	r12,r11
80002b64:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b66:	58 09       	cp.w	r9,0
80002b68:	c0 31       	brne	80002b6e <tc_configure_interrupts+0x102>
80002b6a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b6e:	d5 03       	csrf	0x10
80002b70:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b74 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b74:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b76:	f6 08 15 04 	lsl	r8,r11,0x4
80002b7a:	14 38       	cp.w	r8,r10
80002b7c:	f9 b8 08 10 	movls	r8,16
80002b80:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b84:	f0 0b 02 4b 	mul	r11,r8,r11
80002b88:	f6 09 16 01 	lsr	r9,r11,0x1
80002b8c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b90:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b94:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b98:	f2 cb 00 01 	sub	r11,r9,1
80002b9c:	e0 4b ff fe 	cp.w	r11,65534
80002ba0:	e0 88 00 03 	brls	80002ba6 <usart_set_async_baudrate+0x32>
80002ba4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002ba6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002ba8:	e8 6e 00 00 	mov	lr,524288
80002bac:	59 08       	cp.w	r8,16
80002bae:	fc 08 17 10 	movne	r8,lr
80002bb2:	f9 b8 00 00 	moveq	r8,0
80002bb6:	e4 1b ff f7 	andh	r11,0xfff7
80002bba:	e0 1b fe cf 	andl	r11,0xfecf
80002bbe:	16 48       	or	r8,r11
80002bc0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002bc2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002bc6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002bca:	99 89       	st.w	r12[0x20],r9
80002bcc:	d8 0a       	popm	pc,r12=0

80002bce <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002bce:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002bd0:	e2 18 00 02 	andl	r8,0x2,COH
80002bd4:	c0 31       	brne	80002bda <usart_write_char+0xc>
80002bd6:	30 2c       	mov	r12,2
80002bd8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bda:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bde:	99 7b       	st.w	r12[0x1c],r11
80002be0:	5e fd       	retal	0
80002be2:	d7 03       	nop

80002be4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002be4:	eb cd 40 e0 	pushm	r5-r7,lr
80002be8:	18 96       	mov	r6,r12
80002bea:	16 95       	mov	r5,r11
80002bec:	e0 67 27 0f 	mov	r7,9999
80002bf0:	c0 68       	rjmp	80002bfc <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bf2:	58 07       	cp.w	r7,0
80002bf4:	c0 31       	brne	80002bfa <usart_putchar+0x16>
80002bf6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bfa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bfc:	0a 9b       	mov	r11,r5
80002bfe:	0c 9c       	mov	r12,r6
80002c00:	f0 1f 00 03 	mcall	80002c0c <usart_putchar+0x28>
80002c04:	cf 71       	brne	80002bf2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002c06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2b ce       	sub	lr,-68

80002c10 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, uint8_t *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002c10:	78 58       	ld.w	r8,r12[0x14]
80002c12:	e2 18 00 e0 	andl	r8,0xe0,COH
80002c16:	c0 30       	breq	80002c1c <usart_read_char+0xc>
80002c18:	30 4c       	mov	r12,4
80002c1a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002c1c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002c1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002c22:	f9 bc 00 03 	moveq	r12,3
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002c26:	f9 f8 10 06 	ld.wne	r8,r12[0x18]
80002c2a:	f7 f8 1e 00 	st.bne	r11[0x0],r8
80002c2e:	f9 bc 01 00 	movne	r12,0
    return USART_SUCCESS;
  }
  else
    return USART_RX_EMPTY;
}
80002c32:	5e fc       	retal	r12

80002c34 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c34:	eb cd 40 c0 	pushm	r6-r7,lr
80002c38:	18 96       	mov	r6,r12
80002c3a:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c3c:	17 8b       	ld.ub	r11,r11[0x0]
80002c3e:	58 0b       	cp.w	r11,0
80002c40:	c0 80       	breq	80002c50 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c42:	2f f7       	sub	r7,-1
80002c44:	0c 9c       	mov	r12,r6
80002c46:	f0 1f 00 04 	mcall	80002c54 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c4a:	0f 8b       	ld.ub	r11,r7[0x0]
80002c4c:	58 0b       	cp.w	r11,0
80002c4e:	cf a1       	brne	80002c42 <usart_write_line+0xe>
80002c50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	2b e4       	sub	r4,-66

80002c58 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c58:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c5c:	e6 18 00 01 	andh	r8,0x1,COH
80002c60:	c0 71       	brne	80002c6e <usart_reset+0x16>
80002c62:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c64:	3f f8       	mov	r8,-1
80002c66:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c68:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c6a:	d5 03       	csrf	0x10
80002c6c:	c0 48       	rjmp	80002c74 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c6e:	3f f8       	mov	r8,-1
80002c70:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c72:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c74:	30 08       	mov	r8,0
80002c76:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c78:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c7a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c7c:	e8 68 61 0c 	mov	r8,549132
80002c80:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c82:	5e fc       	retal	r12

80002c84 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c84:	eb cd 40 e0 	pushm	r5-r7,lr
80002c88:	18 96       	mov	r6,r12
80002c8a:	16 97       	mov	r7,r11
80002c8c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c8e:	f0 1f 00 2f 	mcall	80002d48 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c92:	58 07       	cp.w	r7,0
80002c94:	c5 80       	breq	80002d44 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c96:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c98:	30 49       	mov	r9,4
80002c9a:	f2 08 18 00 	cp.b	r8,r9
80002c9e:	e0 88 00 53 	brls	80002d44 <usart_init_rs232+0xc0>
80002ca2:	30 99       	mov	r9,9
80002ca4:	f2 08 18 00 	cp.b	r8,r9
80002ca8:	e0 8b 00 4e 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002cac:	0f d9       	ld.ub	r9,r7[0x5]
80002cae:	30 78       	mov	r8,7
80002cb0:	f0 09 18 00 	cp.b	r9,r8
80002cb4:	e0 8b 00 48 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002cb8:	8e 39       	ld.sh	r9,r7[0x6]
80002cba:	e0 68 01 01 	mov	r8,257
80002cbe:	f0 09 19 00 	cp.h	r9,r8
80002cc2:	e0 8b 00 41 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002cc6:	ef 39 00 08 	ld.ub	r9,r7[8]
80002cca:	30 38       	mov	r8,3
80002ccc:	f0 09 18 00 	cp.b	r9,r8
80002cd0:	e0 8b 00 3a 	brhi	80002d44 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002cd4:	0a 9a       	mov	r10,r5
80002cd6:	6e 0b       	ld.w	r11,r7[0x0]
80002cd8:	0c 9c       	mov	r12,r6
80002cda:	f0 1f 00 1d 	mcall	80002d4c <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cde:	58 1c       	cp.w	r12,1
80002ce0:	c3 20       	breq	80002d44 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002ce2:	0f c8       	ld.ub	r8,r7[0x4]
80002ce4:	30 99       	mov	r9,9
80002ce6:	f2 08 18 00 	cp.b	r8,r9
80002cea:	c0 51       	brne	80002cf4 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cec:	6c 18       	ld.w	r8,r6[0x4]
80002cee:	b1 b8       	sbr	r8,0x11
80002cf0:	8d 18       	st.w	r6[0x4],r8
80002cf2:	c0 68       	rjmp	80002cfe <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002cf4:	6c 19       	ld.w	r9,r6[0x4]
80002cf6:	20 58       	sub	r8,5
80002cf8:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cfc:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cfe:	6c 19       	ld.w	r9,r6[0x4]
80002d00:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002d04:	0f d8       	ld.ub	r8,r7[0x5]
80002d06:	a9 78       	lsl	r8,0x9
80002d08:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002d0c:	12 48       	or	r8,r9
80002d0e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002d10:	8e 38       	ld.sh	r8,r7[0x6]
80002d12:	30 29       	mov	r9,2
80002d14:	f2 08 19 00 	cp.h	r8,r9
80002d18:	e0 88 00 09 	brls	80002d2a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002d1c:	6c 18       	ld.w	r8,r6[0x4]
80002d1e:	ad b8       	sbr	r8,0xd
80002d20:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002d22:	8e b8       	ld.uh	r8,r7[0x6]
80002d24:	20 28       	sub	r8,2
80002d26:	8d a8       	st.w	r6[0x28],r8
80002d28:	c0 68       	rjmp	80002d34 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002d2a:	6c 19       	ld.w	r9,r6[0x4]
80002d2c:	5c 78       	castu.h	r8
80002d2e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d32:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d34:	6c 18       	ld.w	r8,r6[0x4]
80002d36:	e0 18 ff f0 	andl	r8,0xfff0
80002d3a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d3c:	35 08       	mov	r8,80
80002d3e:	8d 08       	st.w	r6[0x0],r8
80002d40:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d44:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2c 58       	sub	r8,-59
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2b 74       	sub	r4,-73

80002d50 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d50:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d54:	fe c0 97 54 	sub	r0,pc,-26796

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d58:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d5c:	d5 53       	csrf	0x15
  cp      r0, r1
80002d5e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d60:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d64:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d66:	c0 72       	brcc	80002d74 <idata_load_loop_end>
  cp      r0, r1
80002d68:	fe c2 8a 08 	sub	r2,pc,-30200

80002d6c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d6c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d6e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d70:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d72:	cf d3       	brcs	80002d6c <idata_load_loop>

80002d74 <idata_load_loop_end>:
  mov     r2, 0
80002d74:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d78:	e0 61 08 20 	mov	r1,2080
  cp      r0, r1
  brlo    udata_clear_loop
80002d7c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d7e:	c0 62       	brcc	80002d8a <udata_clear_loop_end>
80002d80:	30 02       	mov	r2,0
80002d82:	30 03       	mov	r3,0

80002d84 <udata_clear_loop>:
80002d84:	a1 22       	st.d	r0++,r2
80002d86:	02 30       	cp.w	r0,r1
80002d88:	cf e3       	brcs	80002d84 <udata_clear_loop>

80002d8a <udata_clear_loop_end>:
80002d8a:	fe cf f4 3a 	sub	pc,pc,-3014
80002d8e:	d7 03       	nop

80002d90 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002d90:	eb cd 40 c0 	pushm	r6-r7,lr
80002d94:	20 2d       	sub	sp,8
80002d96:	ba cc       	st.b	sp[0x4],r12
80002d98:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d9a:	e1 b6 00 00 	mfsr	r6,0x0
80002d9e:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002da0:	1b c8       	ld.ub	r8,sp[0x4]
80002da2:	ea 18 ff ff 	orh	r8,0xffff
80002da6:	e8 18 ff c0 	orl	r8,0xffc0
80002daa:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002dac:	49 07       	lddpc	r7,80002dec <pal_trx_reg_write+0x5c>
80002dae:	0f 8b       	ld.ub	r11,r7[0x0]
80002db0:	fe 7c 40 00 	mov	r12,-49152
80002db4:	f0 1f 00 0f 	mcall	80002df0 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002db8:	30 1a       	mov	r10,1
80002dba:	fa cb ff fc 	sub	r11,sp,-4
80002dbe:	fe 7c 40 00 	mov	r12,-49152
80002dc2:	f0 1f 00 0d 	mcall	80002df4 <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002dc6:	30 1a       	mov	r10,1
80002dc8:	1a 9b       	mov	r11,sp
80002dca:	fe 7c 40 00 	mov	r12,-49152
80002dce:	f0 1f 00 0a 	mcall	80002df4 <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002dd2:	0f 8b       	ld.ub	r11,r7[0x0]
80002dd4:	fe 7c 40 00 	mov	r12,-49152
80002dd8:	f0 1f 00 08 	mcall	80002df8 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002ddc:	e6 16 00 01 	andh	r6,0x1,COH
80002de0:	c0 21       	brne	80002de4 <pal_trx_reg_write+0x54>
80002de2:	d5 03       	csrf	0x10
}
80002de4:	2f ed       	sub	sp,-8
80002de6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dea:	00 00       	add	r0,r0
80002dec:	00 00       	add	r0,r0
80002dee:	00 08       	add	r8,r0
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	28 34       	sub	r4,-125
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2f 0a       	sub	r10,-16
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	28 80       	sub	r0,-120

80002dfc <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002dfc:	eb cd 40 c0 	pushm	r6-r7,lr
80002e00:	20 2d       	sub	sp,8
80002e02:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002e04:	30 08       	mov	r8,0
80002e06:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e08:	e1 b6 00 00 	mfsr	r6,0x0
80002e0c:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002e0e:	1b 88       	ld.ub	r8,sp[0x0]
80002e10:	ea 18 ff ff 	orh	r8,0xffff
80002e14:	e8 18 ff 80 	orl	r8,0xff80
80002e18:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e1a:	49 17       	lddpc	r7,80002e5c <pal_trx_reg_read+0x60>
80002e1c:	0f 8b       	ld.ub	r11,r7[0x0]
80002e1e:	fe 7c 40 00 	mov	r12,-49152
80002e22:	f0 1f 00 10 	mcall	80002e60 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002e26:	30 1a       	mov	r10,1
80002e28:	1a 9b       	mov	r11,sp
80002e2a:	fe 7c 40 00 	mov	r12,-49152
80002e2e:	f0 1f 00 0e 	mcall	80002e64 <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002e32:	30 1a       	mov	r10,1
80002e34:	fa cb ff f9 	sub	r11,sp,-7
80002e38:	fe 7c 40 00 	mov	r12,-49152
80002e3c:	f0 1f 00 0b 	mcall	80002e68 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e40:	0f 8b       	ld.ub	r11,r7[0x0]
80002e42:	fe 7c 40 00 	mov	r12,-49152
80002e46:	f0 1f 00 0a 	mcall	80002e6c <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e4a:	e6 16 00 01 	andh	r6,0x1,COH
80002e4e:	c0 21       	brne	80002e52 <pal_trx_reg_read+0x56>
80002e50:	d5 03       	csrf	0x10

	return register_value;
}
80002e52:	1b fc       	ld.ub	r12,sp[0x7]
80002e54:	2f ed       	sub	sp,-8
80002e56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e5a:	00 00       	add	r0,r0
80002e5c:	00 00       	add	r0,r0
80002e5e:	00 08       	add	r8,r0
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	28 34       	sub	r4,-125
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	2f 0a       	sub	r10,-16
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	2e ba       	sub	r10,-21
80002e6c:	80 00       	ld.sh	r0,r0[0x0]
80002e6e:	28 80       	sub	r0,-120

80002e70 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e70:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002e74:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e76:	e6 18 00 01 	andh	r8,0x1,COH
80002e7a:	c0 21       	brne	80002e7e <sysclk_init+0xe>
      cpu_irq_enable();
80002e7c:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002e7e:	5e fc       	retal	r12

80002e80 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002e80:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e82:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002e86:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002e88:	a3 6c       	lsl	r12,0x2
80002e8a:	fe 7a 14 20 	mov	r10,-60384
80002e8e:	f8 0a 00 08 	add	r8,r12,r10
80002e92:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002e94:	30 1e       	mov	lr,1
80002e96:	fc 0b 09 4b 	lsl	r11,lr,r11
80002e9a:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e9c:	32 0a       	mov	r10,32
80002e9e:	ea 1a aa 00 	orh	r10,0xaa00
80002ea2:	14 0c       	add	r12,r10
80002ea4:	fe 7a 14 00 	mov	r10,-60416
80002ea8:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002eac:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002eae:	12 98       	mov	r8,r9
80002eb0:	e6 18 00 01 	andh	r8,0x1,COH
80002eb4:	c0 21       	brne	80002eb8 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002eb6:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002eb8:	d8 02       	popm	pc

80002eba <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002eba:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002ebe:	58 0a       	cp.w	r10,0
80002ec0:	c0 61       	brne	80002ecc <spi_read_packet+0x12>
80002ec2:	c2 28       	rjmp	80002f06 <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002ec4:	58 08       	cp.w	r8,0
80002ec6:	c1 d0       	breq	80002f00 <spi_read_packet+0x46>
80002ec8:	20 18       	sub	r8,1
80002eca:	c0 68       	rjmp	80002ed6 <spi_read_packet+0x1c>
80002ecc:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ed0:	e0 67 00 ff 	mov	r7,255
80002ed4:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002ed6:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002ed8:	e2 19 00 02 	andl	r9,0x2,COH
80002edc:	cf 40       	breq	80002ec4 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ede:	99 37       	st.w	r12[0xc],r7
80002ee0:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002ee2:	c0 48       	rjmp	80002eea <spi_read_packet+0x30>
			if (!timeout--) {
80002ee4:	58 08       	cp.w	r8,0
80002ee6:	c0 d0       	breq	80002f00 <spi_read_packet+0x46>
80002ee8:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002eea:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002eec:	e2 19 02 01 	andl	r9,0x201,COH
80002ef0:	e0 49 02 01 	cp.w	r9,513
80002ef4:	cf 81       	brne	80002ee4 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002ef6:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002ef8:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002efa:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002efc:	ce c1       	brne	80002ed4 <spi_read_packet+0x1a>
80002efe:	c0 48       	rjmp	80002f06 <spi_read_packet+0x4c>
80002f00:	3f dc       	mov	r12,-3
80002f02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f06:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002f0a <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002f0a:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f0c:	58 0a       	cp.w	r10,0
80002f0e:	c0 81       	brne	80002f1e <spi_write_packet+0x14>
80002f10:	c1 28       	rjmp	80002f34 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002f12:	58 08       	cp.w	r8,0
80002f14:	c0 31       	brne	80002f1a <spi_write_packet+0x10>
80002f16:	3f dc       	mov	r12,-3
80002f18:	d8 02       	popm	pc
80002f1a:	20 18       	sub	r8,1
80002f1c:	c0 48       	rjmp	80002f24 <spi_write_packet+0x1a>
80002f1e:	e0 6e 3a 98 	mov	lr,15000
80002f22:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002f24:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002f26:	e2 19 00 02 	andl	r9,0x2,COH
80002f2a:	cf 40       	breq	80002f12 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f2c:	17 38       	ld.ub	r8,r11++
80002f2e:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002f30:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f32:	cf 81       	brne	80002f22 <spi_write_packet+0x18>
80002f34:	d8 0a       	popm	pc,r12=0
80002f36:	d7 03       	nop
	...

80002f44 <getStateAT86RF212>:
{
	pal_trx_reg_write(RG_TRX_STATE, state);
	DELAY_US(time);
}
uint8_t getStateAT86RF212(void)
{
80002f44:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80002f46:	30 1c       	mov	r12,1
80002f48:	f0 1f 00 03 	mcall	80002f54 <getStateAT86RF212+0x10>
}
80002f4c:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002f50:	d8 02       	popm	pc
80002f52:	00 00       	add	r0,r0
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	2d fc       	sub	r12,-33

80002f58 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002f58:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002f5a:	30 0b       	mov	r11,0
80002f5c:	fe 7c 5c 00 	mov	r12,-41984
80002f60:	f0 1f 00 17 	mcall	80002fbc <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002f64:	49 78       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002f66:	70 09       	ld.w	r9,r8[0x0]
80002f68:	2f f9       	sub	r9,-1
80002f6a:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002f6c:	70 08       	ld.w	r8,r8[0x0]
80002f6e:	59 38       	cp.w	r8,19
80002f70:	e0 8b 00 0c 	brhi	80002f88 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002f74:	32 9c       	mov	r12,41
80002f76:	f0 1f 00 14 	mcall	80002fc4 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002f7a:	30 4c       	mov	r12,4
80002f7c:	f0 1f 00 12 	mcall	80002fc4 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002f80:	30 bc       	mov	r12,11
80002f82:	f0 1f 00 11 	mcall	80002fc4 <tc_irq+0x6c>
		return;
80002f86:	c1 98       	rjmp	80002fb8 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002f88:	48 e8       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002f8a:	70 08       	ld.w	r8,r8[0x0]
80002f8c:	59 58       	cp.w	r8,21
80002f8e:	c0 41       	brne	80002f96 <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002f90:	32 9c       	mov	r12,41
80002f92:	f0 1f 00 0d 	mcall	80002fc4 <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002f96:	48 b8       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002f98:	70 08       	ld.w	r8,r8[0x0]
80002f9a:	59 68       	cp.w	r8,22
80002f9c:	c0 41       	brne	80002fa4 <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002f9e:	30 4c       	mov	r12,4
80002fa0:	f0 1f 00 09 	mcall	80002fc4 <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002fa4:	48 78       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	59 78       	cp.w	r8,23
80002faa:	c0 71       	brne	80002fb8 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002fac:	30 bc       	mov	r12,11
80002fae:	f0 1f 00 06 	mcall	80002fc4 <tc_irq+0x6c>
		tc_tick = 1;
80002fb2:	30 19       	mov	r9,1
80002fb4:	48 38       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002fb6:	91 09       	st.w	r8[0x0],r9
	}
}
80002fb8:	d4 02       	popm	lr
80002fba:	d6 03       	rete
80002fbc:	80 00       	ld.sh	r0,r0[0x0]
80002fbe:	2a 26       	sub	r6,-94
80002fc0:	00 00       	add	r0,r0
80002fc2:	00 1c       	sub	r12,r0
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	26 a0       	sub	r0,106

80002fc8 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80002fc8:	d4 01       	pushm	lr
80002fca:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80002fcc:	30 0b       	mov	r11,0
80002fce:	49 b8       	lddpc	r8,80003038 <usart_int_handler_RS232+0x70>
80002fd0:	70 0c       	ld.w	r12,r8[0x0]
80002fd2:	f0 1f 00 1b 	mcall	8000303c <usart_int_handler_RS232+0x74>
	
	uint8_t c=0;
80002fd6:	fa cb ff fc 	sub	r11,sp,-4
80002fda:	30 08       	mov	r8,0
80002fdc:	16 f8       	st.b	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80002fde:	fe 7c 38 00 	mov	r12,-51200
80002fe2:	f0 1f 00 18 	mcall	80003040 <usart_int_handler_RS232+0x78>
80002fe6:	c2 61       	brne	80003032 <usart_int_handler_RS232+0x6a>
		return;
	
	cola_PC[cola_PC_nw] = c;
80002fe8:	49 78       	lddpc	r8,80003044 <usart_int_handler_RS232+0x7c>
80002fea:	11 88       	ld.ub	r8,r8[0x0]
80002fec:	1b b9       	ld.ub	r9,sp[0x3]
80002fee:	49 7a       	lddpc	r10,80003048 <usart_int_handler_RS232+0x80>
80002ff0:	f4 08 0b 09 	st.b	r10[r8],r9
	
	if (cola_PC[cola_PC_nw] == 0x01)
80002ff4:	30 1a       	mov	r10,1
80002ff6:	f4 09 18 00 	cp.b	r9,r10
80002ffa:	c0 c1       	brne	80003012 <usart_int_handler_RS232+0x4a>
	{	
		if (!configuracion){
80002ffc:	49 49       	lddpc	r9,8000304c <usart_int_handler_RS232+0x84>
80002ffe:	13 8a       	ld.ub	r10,r9[0x0]
80003000:	30 09       	mov	r9,0
80003002:	f2 0a 18 00 	cp.b	r10,r9
80003006:	c0 31       	brne	8000300c <usart_int_handler_RS232+0x44>
			pConfiguracion = cola_PC_nw;
80003008:	49 29       	lddpc	r9,80003050 <usart_int_handler_RS232+0x88>
8000300a:	b2 88       	st.b	r9[0x0],r8
		}
		configuracion = true;
8000300c:	30 1a       	mov	r10,1
8000300e:	49 09       	lddpc	r9,8000304c <usart_int_handler_RS232+0x84>
80003010:	b2 8a       	st.b	r9[0x0],r10
		
	}
	cola_PC_nw++;
80003012:	2f f8       	sub	r8,-1
80003014:	48 c9       	lddpc	r9,80003044 <usart_int_handler_RS232+0x7c>
80003016:	b2 88       	st.b	r9[0x0],r8
	
	if (cola_PC_nw >= tamano_cola)
80003018:	3c 79       	mov	r9,-57
8000301a:	f2 08 18 00 	cp.b	r8,r9
8000301e:	e0 88 00 05 	brls	80003028 <usart_int_handler_RS232+0x60>
	cola_PC_nw = 0;
80003022:	30 09       	mov	r9,0
80003024:	48 88       	lddpc	r8,80003044 <usart_int_handler_RS232+0x7c>
80003026:	b0 89       	st.b	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003028:	30 0b       	mov	r11,0
8000302a:	48 48       	lddpc	r8,80003038 <usart_int_handler_RS232+0x70>
8000302c:	70 0c       	ld.w	r12,r8[0x0]
8000302e:	f0 1f 00 0a 	mcall	80003054 <usart_int_handler_RS232+0x8c>
	return;

	
}
80003032:	2f fd       	sub	sp,-4
80003034:	d4 02       	popm	lr
80003036:	d6 03       	rete
80003038:	00 00       	add	r0,r0
8000303a:	00 18       	sub	r8,r0
8000303c:	80 00       	ld.sh	r0,r0[0x0]
8000303e:	2a 14       	sub	r4,-95
80003040:	80 00       	ld.sh	r0,r0[0x0]
80003042:	2c 10       	sub	r0,-63
80003044:	00 00       	add	r0,r0
80003046:	06 37       	cp.w	r7,r3
80003048:	00 00       	add	r0,r0
8000304a:	07 4c       	ld.w	r12,--r3
8000304c:	00 00       	add	r0,r0
8000304e:	06 34       	cp.w	r4,r3
80003050:	00 00       	add	r0,r0
80003052:	06 38       	cp.w	r8,r3
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	2a 02       	sub	r2,-96

80003058 <promiscuous_mode>:
		pal_trx_frame_write(RG_TRX_STATE,CMD_RX_ON);
	}
	
}
void promiscuous_mode()
{
80003058:	eb cd 40 e0 	pushm	r5-r7,lr
	
	for (address=0x20; address<0x2C; address++)
8000305c:	32 09       	mov	r9,32
8000305e:	48 f8       	lddpc	r8,80003098 <promiscuous_mode+0x40>
80003060:	b0 89       	st.b	r8[0x0],r9
80003062:	32 0c       	mov	r12,32
	{
		pal_trx_reg_write(address, 0x00);
80003064:	30 05       	mov	r5,0
	
}
void promiscuous_mode()
{
	
	for (address=0x20; address<0x2C; address++)
80003066:	10 97       	mov	r7,r8
80003068:	32 b6       	mov	r6,43
	{
		pal_trx_reg_write(address, 0x00);
8000306a:	0a 9b       	mov	r11,r5
8000306c:	f0 1f 00 0c 	mcall	8000309c <promiscuous_mode+0x44>
	
}
void promiscuous_mode()
{
	
	for (address=0x20; address<0x2C; address++)
80003070:	0f 8c       	ld.ub	r12,r7[0x0]
80003072:	2f fc       	sub	r12,-1
80003074:	5c 5c       	castu.b	r12
80003076:	ae 8c       	st.b	r7[0x0],r12
80003078:	ec 0c 18 00 	cp.b	r12,r6
8000307c:	fe 98 ff f7 	brls	8000306a <promiscuous_mode+0x12>
	{
		pal_trx_reg_write(address, 0x00);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
80003080:	30 2b       	mov	r11,2
80003082:	31 7c       	mov	r12,23
80003084:	f0 1f 00 06 	mcall	8000309c <promiscuous_mode+0x44>
//	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_CSMA_SEED_1, 0xD2); // AACK_DIS_ACK = 1 && AACK_FVN_MODE = 3
80003088:	e0 6b 00 d2 	mov	r11,210
8000308c:	32 ec       	mov	r12,46
8000308e:	f0 1f 00 04 	mcall	8000309c <promiscuous_mode+0x44>
//	PAL_WAIT_1_US();
	
}
80003092:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003096:	00 00       	add	r0,r0
80003098:	00 00       	add	r0,r0
8000309a:	07 40       	ld.w	r0,--r3
8000309c:	80 00       	ld.sh	r0,r0[0x0]
8000309e:	2d 90       	sub	r0,-39

800030a0 <setStateAT86RF212>:
	
	else
		sprintf(temps,"%s","X");
}
void setStateAT86RF212(uint8_t state, uint8_t time)
{
800030a0:	d4 21       	pushm	r4-r7,lr
800030a2:	16 96       	mov	r6,r11
	pal_trx_reg_write(RG_TRX_STATE, state);
800030a4:	18 9b       	mov	r11,r12
800030a6:	30 2c       	mov	r12,2
800030a8:	f0 1f 00 14 	mcall	800030f8 <setStateAT86RF212+0x58>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030ac:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030b0:	e0 75 c1 38 	mov	r5,115000
800030b4:	ec 05 06 44 	mulu.d	r4,r6,r5
800030b8:	ee 78 42 40 	mov	r8,1000000
800030bc:	30 09       	mov	r9,0
800030be:	ee 7a 42 3f 	mov	r10,999999
800030c2:	30 0b       	mov	r11,0
800030c4:	e8 0a 00 0a 	add	r10,r4,r10
800030c8:	ea 0b 00 4b 	adc	r11,r5,r11
800030cc:	f0 1f 00 0c 	mcall	800030fc <setStateAT86RF212+0x5c>
800030d0:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030d4:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030d8:	14 37       	cp.w	r7,r10
800030da:	e0 88 00 08 	brls	800030ea <setStateAT86RF212+0x4a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030de:	10 37       	cp.w	r7,r8
800030e0:	fe 98 ff fa 	brls	800030d4 <setStateAT86RF212+0x34>
800030e4:	10 3a       	cp.w	r10,r8
800030e6:	c0 73       	brcs	800030f4 <setStateAT86RF212+0x54>
800030e8:	cf 6b       	rjmp	800030d4 <setStateAT86RF212+0x34>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030ea:	10 37       	cp.w	r7,r8
800030ec:	e0 8b 00 04 	brhi	800030f4 <setStateAT86RF212+0x54>
800030f0:	10 3a       	cp.w	r10,r8
800030f2:	cf 12       	brcc	800030d4 <setStateAT86RF212+0x34>
800030f4:	d8 22       	popm	r4-r7,pc
800030f6:	00 00       	add	r0,r0
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	2d 90       	sub	r0,-39
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	3f 52       	mov	r2,-11

80003100 <reset>:
	DELAY_US(RST_PULSE_WIDTH_NS);
	RST_HIGH();
	delay_ms(1);
}
void reset()
{
80003100:	d4 01       	pushm	lr
	SLP_TR_LOW();
80003102:	32 7c       	mov	r12,39
80003104:	f0 1f 00 1e 	mcall	8000317c <reset+0x7c>
	RST_HIGH();
80003108:	32 8c       	mov	r12,40
8000310a:	f0 1f 00 1e 	mcall	80003180 <reset+0x80>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000310e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003112:	f0 ca ff d2 	sub	r10,r8,-46
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003116:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000311a:	14 38       	cp.w	r8,r10
8000311c:	e0 88 00 08 	brls	8000312c <reset+0x2c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003120:	12 38       	cp.w	r8,r9
80003122:	fe 98 ff fa 	brls	80003116 <reset+0x16>
80003126:	12 3a       	cp.w	r10,r9
80003128:	c1 93       	brcs	8000315a <reset+0x5a>
8000312a:	cf 6b       	rjmp	80003116 <reset+0x16>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000312c:	12 38       	cp.w	r8,r9
8000312e:	e0 8b 00 16 	brhi	8000315a <reset+0x5a>
80003132:	12 3a       	cp.w	r10,r9
80003134:	c1 33       	brcs	8000315a <reset+0x5a>
80003136:	cf 0b       	rjmp	80003116 <reset+0x16>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003138:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000313c:	14 38       	cp.w	r8,r10
8000313e:	e0 88 00 08 	brls	8000314e <reset+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003142:	12 38       	cp.w	r8,r9
80003144:	fe 98 ff fa 	brls	80003138 <reset+0x38>
80003148:	12 3a       	cp.w	r10,r9
8000314a:	c1 03       	brcs	8000316a <reset+0x6a>
8000314c:	cf 6b       	rjmp	80003138 <reset+0x38>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000314e:	12 38       	cp.w	r8,r9
80003150:	e0 8b 00 0d 	brhi	8000316a <reset+0x6a>
80003154:	12 3a       	cp.w	r10,r9
80003156:	c0 a3       	brcs	8000316a <reset+0x6a>
80003158:	cf 0b       	rjmp	80003138 <reset+0x38>
	DELAY_US(400);
	RST_LOW();
8000315a:	32 8c       	mov	r12,40
8000315c:	f0 1f 00 08 	mcall	8000317c <reset+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003160:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003164:	f0 ca ff f8 	sub	r10,r8,-8
80003168:	ce 8b       	rjmp	80003138 <reset+0x38>
	DELAY_US(63);
	RST_LOW();
8000316a:	32 8c       	mov	r12,40
8000316c:	f0 1f 00 04 	mcall	8000317c <reset+0x7c>
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
80003170:	30 8b       	mov	r11,8
80003172:	30 3c       	mov	r12,3
80003174:	f0 1f 00 04 	mcall	80003184 <reset+0x84>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
80003178:	d8 02       	popm	pc
8000317a:	00 00       	add	r0,r0
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	26 8a       	sub	r10,104
80003180:	80 00       	ld.sh	r0,r0[0x0]
80003182:	26 74       	sub	r4,103
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	2d 90       	sub	r0,-39

80003188 <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
80003188:	eb cd 40 80 	pushm	r7,lr
8000318c:	20 6d       	sub	sp,24
8000318e:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80003190:	30 08       	mov	r8,0
80003192:	ba 98       	st.b	sp[0x1],r8
80003194:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
80003196:	34 89       	mov	r9,72
80003198:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
8000319a:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
8000319c:	30 29       	mov	r9,2
8000319e:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
800031a0:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
800031a4:	30 18       	mov	r8,1
800031a6:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
800031aa:	fa cb ff fc 	sub	r11,sp,-4
800031ae:	fe 7c 44 00 	mov	r12,-48128
800031b2:	f0 1f 00 39 	mcall	80003294 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
800031b6:	c6 61       	brne	80003282 <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
800031b8:	1b 89       	ld.ub	r9,sp[0x0]
800031ba:	1b 98       	ld.ub	r8,sp[0x1]
800031bc:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800031c0:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
800031c2:	30 09       	mov	r9,0
800031c4:	f2 08 19 00 	cp.h	r8,r9
800031c8:	c0 35       	brlt	800031ce <leer_temp+0x46>
800031ca:	30 1b       	mov	r11,1
800031cc:	c0 58       	rjmp	800031d6 <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
800031ce:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800031d2:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
800031d6:	4b 19       	lddpc	r9,80003298 <leer_temp+0x110>
800031d8:	13 89       	ld.ub	r9,r9[0x0]
800031da:	30 1a       	mov	r10,1
800031dc:	f4 09 18 00 	cp.b	r9,r10
800031e0:	c1 c0       	breq	80003218 <leer_temp+0x90>
800031e2:	58 09       	cp.w	r9,0
800031e4:	c0 b0       	breq	800031fa <leer_temp+0x72>
800031e6:	30 2a       	mov	r10,2
800031e8:	f4 09 18 00 	cp.b	r9,r10
800031ec:	c2 50       	breq	80003236 <leer_temp+0xae>
800031ee:	30 3a       	mov	r10,3
800031f0:	f4 09 18 00 	cp.b	r9,r10
800031f4:	c3 00       	breq	80003254 <leer_temp+0xcc>
800031f6:	30 0c       	mov	r12,0
800031f8:	c3 c8       	rjmp	80003270 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
800031fa:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
800031fe:	5c 6b       	casts.b	r11
80003200:	f0 0b 02 4c 	mul	r12,r8,r11
80003204:	f0 1f 00 26 	mcall	8000329c <leer_temp+0x114>
80003208:	30 08       	mov	r8,0
8000320a:	fc 19 3f e0 	movh	r9,0x3fe0
8000320e:	f0 1f 00 25 	mcall	800032a0 <leer_temp+0x118>
80003212:	f0 1f 00 25 	mcall	800032a4 <leer_temp+0x11c>
			break;
80003216:	c2 d8       	rjmp	80003270 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
80003218:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
8000321c:	5c 6b       	casts.b	r11
8000321e:	f0 0b 02 4c 	mul	r12,r8,r11
80003222:	f0 1f 00 1f 	mcall	8000329c <leer_temp+0x114>
80003226:	30 08       	mov	r8,0
80003228:	fc 19 3f d0 	movh	r9,0x3fd0
8000322c:	f0 1f 00 1d 	mcall	800032a0 <leer_temp+0x118>
80003230:	f0 1f 00 1d 	mcall	800032a4 <leer_temp+0x11c>
			break;
80003234:	c1 e8       	rjmp	80003270 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
80003236:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
8000323a:	5c 6b       	casts.b	r11
8000323c:	f0 0b 02 4c 	mul	r12,r8,r11
80003240:	f0 1f 00 17 	mcall	8000329c <leer_temp+0x114>
80003244:	30 08       	mov	r8,0
80003246:	fc 19 3f c0 	movh	r9,0x3fc0
8000324a:	f0 1f 00 16 	mcall	800032a0 <leer_temp+0x118>
8000324e:	f0 1f 00 16 	mcall	800032a4 <leer_temp+0x11c>
			break;
80003252:	c0 f8       	rjmp	80003270 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
80003254:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
80003258:	5c 6b       	casts.b	r11
8000325a:	f0 0b 02 4c 	mul	r12,r8,r11
8000325e:	f0 1f 00 10 	mcall	8000329c <leer_temp+0x114>
80003262:	30 08       	mov	r8,0
80003264:	fc 19 3f b0 	movh	r9,0x3fb0
80003268:	f0 1f 00 0e 	mcall	800032a0 <leer_temp+0x118>
8000326c:	f0 1f 00 0e 	mcall	800032a4 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
80003270:	f0 1f 00 0e 	mcall	800032a8 <leer_temp+0x120>
80003274:	bb 2b       	st.d	--sp,r10
80003276:	48 eb       	lddpc	r11,800032ac <leer_temp+0x124>
80003278:	0e 9c       	mov	r12,r7
8000327a:	f0 1f 00 0e 	mcall	800032b0 <leer_temp+0x128>
8000327e:	2f ed       	sub	sp,-8
80003280:	c0 68       	rjmp	8000328c <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
80003282:	30 2a       	mov	r10,2
80003284:	48 cb       	lddpc	r11,800032b4 <leer_temp+0x12c>
80003286:	0e 9c       	mov	r12,r7
80003288:	f0 1f 00 0c 	mcall	800032b8 <leer_temp+0x130>
}
8000328c:	2f ad       	sub	sp,-24
8000328e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003292:	00 00       	add	r0,r0
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	22 30       	sub	r0,35
80003298:	00 00       	add	r0,r0
8000329a:	00 26       	rsub	r6,r0
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	3d 88       	mov	r8,-40
800032a0:	80 00       	ld.sh	r0,r0[0x0]
800032a2:	3b ac       	mov	r12,-70
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	3e c8       	mov	r8,-20
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	3e 68       	mov	r8,-26
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	99 ac       	st.w	r12[0x28],r12
800032b0:	80 00       	ld.sh	r0,r0[0x0]
800032b2:	43 0c       	lddsp	r12,sp[0xc0]
800032b4:	80 00       	ld.sh	r0,r0[0x0]
800032b6:	99 b4       	st.w	r12[0x2c],r4
800032b8:	80 00       	ld.sh	r0,r0[0x0]
800032ba:	41 b6       	lddsp	r6,sp[0x6c]

800032bc <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800032bc:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800032be:	18 9b       	mov	r11,r12
800032c0:	30 2c       	mov	r12,2
800032c2:	f0 1f 00 02 	mcall	800032c8 <sysclk_enable_pba_module+0xc>
}
800032c6:	d8 02       	popm	pc
800032c8:	80 00       	ld.sh	r0,r0[0x0]
800032ca:	2e 80       	sub	r0,-24

800032cc <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800032cc:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800032ce:	30 bc       	mov	r12,11
800032d0:	f0 1f 00 05 	mcall	800032e4 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
800032d4:	e0 7a c1 38 	mov	r10,115000
800032d8:	48 4b       	lddpc	r11,800032e8 <rs_232_init_usart+0x1c>
800032da:	fe 7c 38 00 	mov	r12,-51200
800032de:	f0 1f 00 04 	mcall	800032ec <rs_232_init_usart+0x20>
	return estado_usart2;
}
800032e2:	d8 02       	popm	pc
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	32 bc       	mov	r12,43
800032e8:	00 00       	add	r0,r0
800032ea:	00 0c       	add	r12,r0
800032ec:	80 00       	ld.sh	r0,r0[0x0]
800032ee:	2c 84       	sub	r4,-56

800032f0 <rs_232_init_pins>:
	//

}

void rs_232_init_pins(void)
{
800032f0:	d4 01       	pushm	lr
800032f2:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
800032f4:	48 88       	lddpc	r8,80003314 <rs_232_init_pins+0x24>
800032f6:	1a 9c       	mov	r12,sp
800032f8:	70 09       	ld.w	r9,r8[0x0]
800032fa:	50 09       	stdsp	sp[0x0],r9
800032fc:	70 19       	ld.w	r9,r8[0x4]
800032fe:	50 19       	stdsp	sp[0x4],r9
80003300:	70 29       	ld.w	r9,r8[0x8]
80003302:	50 29       	stdsp	sp[0x8],r9
80003304:	70 38       	ld.w	r8,r8[0xc]
80003306:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
80003308:	30 2b       	mov	r11,2
8000330a:	f0 1f 00 04 	mcall	80003318 <rs_232_init_pins+0x28>
}
8000330e:	2f cd       	sub	sp,-16
80003310:	d8 02       	popm	pc
80003312:	00 00       	add	r0,r0
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	9d b8       	st.w	lr[0x2c],r8
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	25 8c       	sub	r12,88

8000331c <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
8000331c:	d4 01       	pushm	lr
8000331e:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003320:	48 88       	lddpc	r8,80003340 <init_i2c_pins+0x24>
80003322:	1a 9c       	mov	r12,sp
80003324:	70 09       	ld.w	r9,r8[0x0]
80003326:	50 09       	stdsp	sp[0x0],r9
80003328:	70 19       	ld.w	r9,r8[0x4]
8000332a:	50 19       	stdsp	sp[0x4],r9
8000332c:	70 29       	ld.w	r9,r8[0x8]
8000332e:	50 29       	stdsp	sp[0x8],r9
80003330:	70 38       	ld.w	r8,r8[0xc]
80003332:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003334:	30 2b       	mov	r11,2
80003336:	f0 1f 00 04 	mcall	80003344 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000333a:	2f cd       	sub	sp,-16
8000333c:	d8 02       	popm	pc
8000333e:	00 00       	add	r0,r0
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	99 9c       	st.w	r12[0x24],r12
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	25 8c       	sub	r12,88

80003348 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
80003348:	d4 01       	pushm	lr
8000334a:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
8000334c:	48 d8       	lddpc	r8,80003380 <spi_init_pins+0x38>
8000334e:	1a 9c       	mov	r12,sp
80003350:	70 09       	ld.w	r9,r8[0x0]
80003352:	50 09       	stdsp	sp[0x0],r9
80003354:	70 19       	ld.w	r9,r8[0x4]
80003356:	50 19       	stdsp	sp[0x4],r9
80003358:	70 29       	ld.w	r9,r8[0x8]
8000335a:	50 29       	stdsp	sp[0x8],r9
8000335c:	70 39       	ld.w	r9,r8[0xc]
8000335e:	50 39       	stdsp	sp[0xc],r9
80003360:	fa c9 ff f0 	sub	r9,sp,-16
80003364:	2f 08       	sub	r8,-16
80003366:	70 0a       	ld.w	r10,r8[0x0]
80003368:	93 0a       	st.w	r9[0x0],r10
8000336a:	70 1a       	ld.w	r10,r8[0x4]
8000336c:	93 1a       	st.w	r9[0x4],r10
8000336e:	70 2a       	ld.w	r10,r8[0x8]
80003370:	93 2a       	st.w	r9[0x8],r10
80003372:	70 38       	ld.w	r8,r8[0xc]
80003374:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
80003376:	30 4b       	mov	r11,4
80003378:	f0 1f 00 03 	mcall	80003384 <spi_init_pins+0x3c>
}
8000337c:	2f 8d       	sub	sp,-32
8000337e:	d8 02       	popm	pc
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	9d 90       	st.w	lr[0x24],r0
80003384:	80 00       	ld.sh	r0,r0[0x0]
80003386:	25 8c       	sub	r12,88

80003388 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
80003388:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
8000338a:	30 5b       	mov	r11,5
8000338c:	30 4c       	mov	r12,4
8000338e:	f0 1f 00 06 	mcall	800033a4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
80003392:	30 5b       	mov	r11,5
80003394:	30 bc       	mov	r12,11
80003396:	f0 1f 00 04 	mcall	800033a4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
8000339a:	30 5b       	mov	r11,5
8000339c:	32 9c       	mov	r12,41
8000339e:	f0 1f 00 02 	mcall	800033a4 <led_init_pins+0x1c>
}
800033a2:	d8 02       	popm	pc
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	25 bc       	sub	r12,91

800033a8 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
800033a8:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800033aa:	f0 1f 00 08 	mcall	800033c8 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800033ae:	30 4b       	mov	r11,4
800033b0:	30 dc       	mov	r12,13
800033b2:	f0 1f 00 07 	mcall	800033cc <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800033b6:	30 6b       	mov	r11,6
800033b8:	30 dc       	mov	r12,13
800033ba:	f0 1f 00 06 	mcall	800033d0 <init_rf_pins+0x28>
	//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
800033be:	30 dc       	mov	r12,13
800033c0:	f0 1f 00 05 	mcall	800033d4 <init_rf_pins+0x2c>

	// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	//

}
800033c4:	d8 02       	popm	pc
800033c6:	00 00       	add	r0,r0
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	33 48       	mov	r8,52
800033cc:	80 00       	ld.sh	r0,r0[0x0]
800033ce:	25 bc       	sub	r12,91
800033d0:	80 00       	ld.sh	r0,r0[0x0]
800033d2:	24 f8       	sub	r8,79
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	26 b6       	sub	r6,107

800033d8 <escribir_linea_pc>:
// 		return false; //el LRC del paquete y el calculado no coinciden
// 	}
// }

void escribir_linea_pc (char *str)
{
800033d8:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800033da:	18 9b       	mov	r11,r12
800033dc:	fe 7c 38 00 	mov	r12,-51200
800033e0:	f0 1f 00 02 	mcall	800033e8 <escribir_linea_pc+0x10>
}
800033e4:	d8 02       	popm	pc
800033e6:	00 00       	add	r0,r0
800033e8:	80 00       	ld.sh	r0,r0[0x0]
800033ea:	2c 34       	sub	r4,-61

800033ec <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
800033ec:	eb cd 40 80 	pushm	r7,lr
	
	IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS) & 0x0C;
800033f0:	30 fc       	mov	r12,15
800033f2:	f0 1f 00 2a 	mcall	80003498 <eic_int_handler2+0xac>
800033f6:	e2 1c 00 0c 	andl	r12,0xc,COH
800033fa:	4a 98       	lddpc	r8,8000349c <eic_int_handler2+0xb0>
800033fc:	b0 8c       	st.b	r8[0x0],r12
	
	variable1=pal_trx_reg_read(RG_IRQ_STATUS);
800033fe:	30 fc       	mov	r12,15
80003400:	f0 1f 00 26 	mcall	80003498 <eic_int_handler2+0xac>
80003404:	4a 78       	lddpc	r8,800034a0 <eic_int_handler2+0xb4>
80003406:	b0 8c       	st.b	r8[0x0],r12
	variable2=pal_trx_reg_read(RG_IRQ_MASK);
80003408:	30 ec       	mov	r12,14
8000340a:	f0 1f 00 24 	mcall	80003498 <eic_int_handler2+0xac>
8000340e:	4a 68       	lddpc	r8,800034a4 <eic_int_handler2+0xb8>
80003410:	b0 8c       	st.b	r8[0x0],r12
		
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
80003412:	30 2b       	mov	r11,2
80003414:	fe 7c 24 00 	mov	r12,-56320
80003418:	f0 1f 00 24 	mcall	800034a8 <eic_int_handler2+0xbc>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		//IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
		//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
		//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		if (contadorRX>25){
8000341c:	4a 48       	lddpc	r8,800034ac <eic_int_handler2+0xc0>
8000341e:	11 89       	ld.ub	r9,r8[0x0]
80003420:	31 98       	mov	r8,25
80003422:	f0 09 18 00 	cp.b	r9,r8
80003426:	e0 88 00 0f 	brls	80003444 <eic_int_handler2+0x58>
			escribir_linea_pc("\n\n a \n\n");
8000342a:	4a 27       	lddpc	r7,800034b0 <eic_int_handler2+0xc4>
8000342c:	0e 9c       	mov	r12,r7
8000342e:	f0 1f 00 22 	mcall	800034b4 <eic_int_handler2+0xc8>
			escribir_linea_pc(colaRX);
80003432:	4a 2c       	lddpc	r12,800034b8 <eic_int_handler2+0xcc>
80003434:	f0 1f 00 20 	mcall	800034b4 <eic_int_handler2+0xc8>
			escribir_linea_pc("\n\n a \n\n");
80003438:	0e 9c       	mov	r12,r7
8000343a:	f0 1f 00 1f 	mcall	800034b4 <eic_int_handler2+0xc8>
 			 contadorRX=0;
8000343e:	30 09       	mov	r9,0
80003440:	49 b8       	lddpc	r8,800034ac <eic_int_handler2+0xc0>
80003442:	b0 89       	st.b	r8[0x0],r9
		}
		switch (IRQ_STATUS){
80003444:	49 68       	lddpc	r8,8000349c <eic_int_handler2+0xb0>
80003446:	11 88       	ld.ub	r8,r8[0x0]
80003448:	30 49       	mov	r9,4
8000344a:	f2 08 18 00 	cp.b	r8,r9
8000344e:	c1 40       	breq	80003476 <eic_int_handler2+0x8a>
80003450:	30 89       	mov	r9,8
80003452:	f2 08 18 00 	cp.b	r8,r9
80003456:	c1 e1       	brne	80003492 <eic_int_handler2+0xa6>
			case TRX_IRQ_TRX_END:
				escribir_linea_pc("\n\n --> Trama enviada :) :) \r\n");
80003458:	49 9c       	lddpc	r12,800034bc <eic_int_handler2+0xd0>
8000345a:	f0 1f 00 17 	mcall	800034b4 <eic_int_handler2+0xc8>
				spi_read_single(&AVR32_SPI,&colaRX[contadorRX++]);
8000345e:	49 49       	lddpc	r9,800034ac <eic_int_handler2+0xc0>
80003460:	13 88       	ld.ub	r8,r9[0x0]
80003462:	f0 ca ff ff 	sub	r10,r8,-1
80003466:	b2 8a       	st.b	r9[0x0],r10
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80003468:	fe 79 40 00 	mov	r9,-49152
8000346c:	72 2a       	ld.w	r10,r9[0x8]
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(spi);
8000346e:	49 39       	lddpc	r9,800034b8 <eic_int_handler2+0xcc>
80003470:	f2 08 0b 0a 	st.b	r9[r8],r10
80003474:	c0 f8       	rjmp	80003492 <eic_int_handler2+0xa6>
						
			break;
			case TRX_IRQ_RX_START:
			escribir_linea_pc("\n\n --> Trama recibida :) :) \r\n");
80003476:	49 3c       	lddpc	r12,800034c0 <eic_int_handler2+0xd4>
80003478:	f0 1f 00 0f 	mcall	800034b4 <eic_int_handler2+0xc8>
				spi_read_single(&AVR32_SPI,&colaRX[contadorRX++]);
8000347c:	48 c9       	lddpc	r9,800034ac <eic_int_handler2+0xc0>
8000347e:	13 88       	ld.ub	r8,r9[0x0]
80003480:	f0 ca ff ff 	sub	r10,r8,-1
80003484:	b2 8a       	st.b	r9[0x0],r10
80003486:	fe 79 40 00 	mov	r9,-49152
8000348a:	72 2a       	ld.w	r10,r9[0x8]
8000348c:	48 b9       	lddpc	r9,800034b8 <eic_int_handler2+0xcc>
8000348e:	f2 08 0b 0a 	st.b	r9[r8],r10
			break;
		}
}
80003492:	e3 cd 40 80 	ldm	sp++,r7,lr
80003496:	d6 03       	rete
80003498:	80 00       	ld.sh	r0,r0[0x0]
8000349a:	2d fc       	sub	r12,-33
8000349c:	00 00       	add	r0,r0
8000349e:	08 15       	sub	r5,r4
800034a0:	00 00       	add	r0,r0
800034a2:	07 41       	ld.w	r1,--r3
800034a4:	00 00       	add	r0,r0
800034a6:	07 42       	ld.w	r2,--r3
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	24 dc       	sub	r12,77
800034ac:	00 00       	add	r0,r0
800034ae:	06 39       	cp.w	r9,r3
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	99 b8       	st.w	r12[0x2c],r8
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	33 d8       	mov	r8,61
800034b8:	00 00       	add	r0,r0
800034ba:	06 78       	tst	r8,r3
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	99 c0       	st.w	r12[0x30],r0
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	99 e0       	st.w	r12[0x38],r0

800034c4 <modeConfig>:
	Enable_global_interrupt();
	
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
}
void modeConfig()
{
800034c4:	d4 01       	pushm	lr
// cuando esta en modo de configuracion no hace nada, solo espera que le lleguen los datos
	uint8_t tam=8;
	while(cola_PC_nw < (pConfiguracion + 0x09));
800034c6:	49 48       	lddpc	r8,80003514 <modeConfig+0x50>
800034c8:	11 89       	ld.ub	r9,r8[0x0]
800034ca:	49 48       	lddpc	r8,80003518 <modeConfig+0x54>
800034cc:	11 8a       	ld.ub	r10,r8[0x0]
800034ce:	f2 c8 ff f7 	sub	r8,r9,-9
800034d2:	10 3a       	cp.w	r10,r8
800034d4:	c1 e5       	brlt	80003510 <modeConfig+0x4c>
	// comprobar CRC
//	if (check_pack(tam)){
	// solo si pasa el crc sigo la configuracion
		tramaConfiguracion.crc = cola_PC[pConfiguracion+8];
800034d6:	49 28       	lddpc	r8,8000351c <modeConfig+0x58>
800034d8:	49 2a       	lddpc	r10,80003520 <modeConfig+0x5c>
800034da:	f4 09 00 09 	add	r9,r10,r9
	
		// fin comprobacion
		
		tramaConfiguracion.cmd = cola_PC[pConfiguracion+3];
800034de:	13 ba       	ld.ub	r10,r9[0x3]
800034e0:	b0 9a       	st.b	r8[0x1],r10
	
		tramaConfiguracion.payload[0] = cola_PC[pConfiguracion+5];	
800034e2:	13 db       	ld.ub	r11,r9[0x5]
800034e4:	b0 ab       	st.b	r8[0x2],r11
		tramaConfiguracion.payload[1] = cola_PC[pConfiguracion+6];
800034e6:	13 eb       	ld.ub	r11,r9[0x6]
800034e8:	b0 bb       	st.b	r8[0x3],r11
		tramaConfiguracion.payload[2] = cola_PC[pConfiguracion+7];
800034ea:	13 f9       	ld.ub	r9,r9[0x7]
800034ec:	b0 c9       	st.b	r8[0x4],r9
	
		switch (tramaConfiguracion.cmd){
800034ee:	33 18       	mov	r8,49
800034f0:	f0 0a 18 00 	cp.b	r10,r8
800034f4:	c0 60       	breq	80003500 <modeConfig+0x3c>
800034f6:	33 28       	mov	r8,50
800034f8:	f0 0a 18 00 	cp.b	r10,r8
800034fc:	c0 b1       	brne	80003512 <modeConfig+0x4e>
800034fe:	c0 58       	rjmp	80003508 <modeConfig+0x44>
			case BAUDRATE:
				escribir_linea_pc("\r\nConfiguracion del baud rate\n");
80003500:	48 9c       	lddpc	r12,80003524 <modeConfig+0x60>
80003502:	f0 1f 00 0a 	mcall	80003528 <modeConfig+0x64>
			break;
80003506:	d8 02       	popm	pc
			case TEMPERATURA:
				escribir_linea_pc("\r\nVeo la temperatura\n");
80003508:	48 9c       	lddpc	r12,8000352c <modeConfig+0x68>
8000350a:	f0 1f 00 08 	mcall	80003528 <modeConfig+0x64>
8000350e:	d8 02       	popm	pc
80003510:	c0 08       	rjmp	80003510 <modeConfig+0x4c>
80003512:	d8 02       	popm	pc
80003514:	00 00       	add	r0,r0
80003516:	06 38       	cp.w	r8,r3
80003518:	00 00       	add	r0,r0
8000351a:	06 37       	cp.w	r7,r3
8000351c:	00 00       	add	r0,r0
8000351e:	07 43       	ld.w	r3,--r3
80003520:	00 00       	add	r0,r0
80003522:	07 4c       	ld.w	r12,--r3
80003524:	80 00       	ld.sh	r0,r0[0x0]
80003526:	9a 00       	ld.sh	r0,sp[0x0]
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	33 d8       	mov	r8,61
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	9a 20       	ld.sh	r0,sp[0x4]

80003530 <init_AT86RF212>:
	}
	delay_ms(1);
}

uint8_t init_AT86RF212(void)
{
80003530:	eb cd 40 80 	pushm	r7,lr
	escribir_linea_pc("\n Inicializando AT86RF212 \n\n");
80003534:	4f cc       	lddpc	r12,80003724 <init_AT86RF212+0x1f4>
80003536:	f0 1f 00 7d 	mcall	80003728 <init_AT86RF212+0x1f8>
	Disable_global_interrupt();
8000353a:	d3 03       	ssrf	0x10
	
	//SLP_TR_LOW();
	
	
	//estadoPorPc();
	reset();
8000353c:	f0 1f 00 7c 	mcall	8000372c <init_AT86RF212+0x1fc>
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
80003540:	30 0b       	mov	r11,0
80003542:	30 ec       	mov	r12,14
80003544:	f0 1f 00 7b 	mcall	80003730 <init_AT86RF212+0x200>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003548:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000354c:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003550:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003554:	14 38       	cp.w	r8,r10
80003556:	e0 88 00 09 	brls	80003568 <init_AT86RF212+0x38>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000355a:	12 38       	cp.w	r8,r9
8000355c:	fe 98 ff fa 	brls	80003550 <init_AT86RF212+0x20>
80003560:	12 3a       	cp.w	r10,r9
80003562:	e0 83 00 a7 	brlo	800036b0 <init_AT86RF212+0x180>
80003566:	cf 5b       	rjmp	80003550 <init_AT86RF212+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003568:	12 38       	cp.w	r8,r9
8000356a:	e0 8b 00 a3 	brhi	800036b0 <init_AT86RF212+0x180>
8000356e:	12 3a       	cp.w	r10,r9
80003570:	e0 83 00 a0 	brlo	800036b0 <init_AT86RF212+0x180>
80003574:	ce eb       	rjmp	80003550 <init_AT86RF212+0x20>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003576:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000357a:	14 38       	cp.w	r8,r10
8000357c:	e0 88 00 08 	brls	8000358c <init_AT86RF212+0x5c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003580:	12 38       	cp.w	r8,r9
80003582:	fe 98 ff fa 	brls	80003576 <init_AT86RF212+0x46>
80003586:	12 3a       	cp.w	r10,r9
80003588:	c0 73       	brcs	80003596 <init_AT86RF212+0x66>
8000358a:	cf 6b       	rjmp	80003576 <init_AT86RF212+0x46>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000358c:	12 38       	cp.w	r8,r9
8000358e:	e0 8b 00 04 	brhi	80003596 <init_AT86RF212+0x66>
80003592:	12 3a       	cp.w	r10,r9
80003594:	cf 12       	brcc	80003576 <init_AT86RF212+0x46>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	
	//variable1=getStateAT86RF212();
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
80003596:	30 87       	mov	r7,8
80003598:	f0 1f 00 67 	mcall	80003734 <init_AT86RF212+0x204>
8000359c:	ee 0c 18 00 	cp.b	r12,r7
800035a0:	cf c1       	brne	80003598 <init_AT86RF212+0x68>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800035a2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800035a6:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035aa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035ae:	14 38       	cp.w	r8,r10
800035b0:	e0 88 00 09 	brls	800035c2 <init_AT86RF212+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035b4:	12 38       	cp.w	r8,r9
800035b6:	fe 98 ff fa 	brls	800035aa <init_AT86RF212+0x7a>
800035ba:	12 3a       	cp.w	r10,r9
800035bc:	e0 83 00 83 	brlo	800036c2 <init_AT86RF212+0x192>
800035c0:	cf 5b       	rjmp	800035aa <init_AT86RF212+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035c2:	12 38       	cp.w	r8,r9
800035c4:	e0 8b 00 7f 	brhi	800036c2 <init_AT86RF212+0x192>
800035c8:	12 3a       	cp.w	r10,r9
800035ca:	c7 c3       	brcs	800036c2 <init_AT86RF212+0x192>
800035cc:	ce fb       	rjmp	800035aa <init_AT86RF212+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035ce:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035d2:	14 38       	cp.w	r8,r10
800035d4:	e0 88 00 08 	brls	800035e4 <init_AT86RF212+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035d8:	12 38       	cp.w	r8,r9
800035da:	fe 98 ff fa 	brls	800035ce <init_AT86RF212+0x9e>
800035de:	12 3a       	cp.w	r10,r9
800035e0:	c7 a3       	brcs	800036d4 <init_AT86RF212+0x1a4>
800035e2:	cf 6b       	rjmp	800035ce <init_AT86RF212+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035e4:	12 38       	cp.w	r8,r9
800035e6:	e0 8b 00 77 	brhi	800036d4 <init_AT86RF212+0x1a4>
800035ea:	12 3a       	cp.w	r10,r9
800035ec:	c7 43       	brcs	800036d4 <init_AT86RF212+0x1a4>
800035ee:	cf 0b       	rjmp	800035ce <init_AT86RF212+0x9e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035f0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035f4:	14 38       	cp.w	r8,r10
800035f6:	e0 88 00 08 	brls	80003606 <init_AT86RF212+0xd6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035fa:	12 38       	cp.w	r8,r9
800035fc:	fe 98 ff fa 	brls	800035f0 <init_AT86RF212+0xc0>
80003600:	12 3a       	cp.w	r10,r9
80003602:	c7 23       	brcs	800036e6 <init_AT86RF212+0x1b6>
80003604:	cf 6b       	rjmp	800035f0 <init_AT86RF212+0xc0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003606:	12 38       	cp.w	r8,r9
80003608:	e0 8b 00 6f 	brhi	800036e6 <init_AT86RF212+0x1b6>
8000360c:	12 3a       	cp.w	r10,r9
8000360e:	c6 c3       	brcs	800036e6 <init_AT86RF212+0x1b6>
80003610:	cf 0b       	rjmp	800035f0 <init_AT86RF212+0xc0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003612:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003616:	14 38       	cp.w	r8,r10
80003618:	e0 88 00 08 	brls	80003628 <init_AT86RF212+0xf8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000361c:	12 38       	cp.w	r8,r9
8000361e:	fe 98 ff fa 	brls	80003612 <init_AT86RF212+0xe2>
80003622:	12 3a       	cp.w	r10,r9
80003624:	c6 a3       	brcs	800036f8 <init_AT86RF212+0x1c8>
80003626:	cf 6b       	rjmp	80003612 <init_AT86RF212+0xe2>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003628:	12 38       	cp.w	r8,r9
8000362a:	e0 8b 00 67 	brhi	800036f8 <init_AT86RF212+0x1c8>
8000362e:	12 3a       	cp.w	r10,r9
80003630:	c6 43       	brcs	800036f8 <init_AT86RF212+0x1c8>
80003632:	cf 0b       	rjmp	80003612 <init_AT86RF212+0xe2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003634:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003638:	14 38       	cp.w	r8,r10
8000363a:	e0 88 00 08 	brls	8000364a <init_AT86RF212+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000363e:	12 38       	cp.w	r8,r9
80003640:	fe 98 ff fa 	brls	80003634 <init_AT86RF212+0x104>
80003644:	12 3a       	cp.w	r10,r9
80003646:	c5 e3       	brcs	80003702 <init_AT86RF212+0x1d2>
80003648:	cf 6b       	rjmp	80003634 <init_AT86RF212+0x104>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000364a:	12 38       	cp.w	r8,r9
8000364c:	e0 8b 00 5b 	brhi	80003702 <init_AT86RF212+0x1d2>
80003650:	12 3a       	cp.w	r10,r9
80003652:	c5 83       	brcs	80003702 <init_AT86RF212+0x1d2>
80003654:	cf 0b       	rjmp	80003634 <init_AT86RF212+0x104>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003656:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000365a:	14 38       	cp.w	r8,r10
8000365c:	e0 88 00 08 	brls	8000366c <init_AT86RF212+0x13c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003660:	12 38       	cp.w	r8,r9
80003662:	fe 98 ff fa 	brls	80003656 <init_AT86RF212+0x126>
80003666:	12 3a       	cp.w	r10,r9
80003668:	c5 43       	brcs	80003710 <init_AT86RF212+0x1e0>
8000366a:	cf 6b       	rjmp	80003656 <init_AT86RF212+0x126>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000366c:	12 38       	cp.w	r8,r9
8000366e:	e0 8b 00 51 	brhi	80003710 <init_AT86RF212+0x1e0>
80003672:	12 3a       	cp.w	r10,r9
80003674:	c4 e3       	brcs	80003710 <init_AT86RF212+0x1e0>
80003676:	cf 0b       	rjmp	80003656 <init_AT86RF212+0x126>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003678:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000367c:	14 38       	cp.w	r8,r10
8000367e:	e0 88 00 08 	brls	8000368e <init_AT86RF212+0x15e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003682:	12 38       	cp.w	r8,r9
80003684:	fe 98 ff fa 	brls	80003678 <init_AT86RF212+0x148>
80003688:	12 3a       	cp.w	r10,r9
8000368a:	c0 73       	brcs	80003698 <init_AT86RF212+0x168>
8000368c:	cf 6b       	rjmp	80003678 <init_AT86RF212+0x148>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000368e:	12 38       	cp.w	r8,r9
80003690:	e0 8b 00 04 	brhi	80003698 <init_AT86RF212+0x168>
80003694:	12 3a       	cp.w	r10,r9
80003696:	cf 12       	brcc	80003678 <init_AT86RF212+0x148>
	promiscuous_mode();
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en 
// 	variable1=getStateAT86RF212();
	DELAY_US(TIME_TRX_OFF_PLL_ON );
 	while (getStateAT86RF212()!=CMD_PLL_ON);
80003698:	30 97       	mov	r7,9
8000369a:	f0 1f 00 27 	mcall	80003734 <init_AT86RF212+0x204>
8000369e:	ee 0c 18 00 	cp.b	r12,r7
800036a2:	cf c1       	brne	8000369a <init_AT86RF212+0x16a>
// 	DELAY_US(TIME_PLL_ON_RX_ON);
// 
// 	while (getStateAT86RF212()!=CMD_RX_ON);
// 	
	//cpu_irq_enable();
	Enable_global_interrupt();
800036a4:	d5 03       	csrf	0x10
	
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
800036a6:	4a 5c       	lddpc	r12,80003738 <init_AT86RF212+0x208>
800036a8:	f0 1f 00 20 	mcall	80003728 <init_AT86RF212+0x1f8>
}
800036ac:	e3 cd 80 80 	ldm	sp++,r7,pc
	//estadoPorPc();
	reset();
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
800036b0:	30 3b       	mov	r11,3
800036b2:	30 2c       	mov	r12,2
800036b4:	f0 1f 00 1f 	mcall	80003730 <init_AT86RF212+0x200>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036b8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036bc:	f0 ca ff ff 	sub	r10,r8,-1
800036c0:	c5 bb       	rjmp	80003576 <init_AT86RF212+0x46>
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	
	//variable1=getStateAT86RF212();
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_CTRL_0, 0x08);
800036c2:	30 8b       	mov	r11,8
800036c4:	30 3c       	mov	r12,3
800036c6:	f0 1f 00 1b 	mcall	80003730 <init_AT86RF212+0x200>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036ca:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036ce:	f0 ca ff ff 	sub	r10,r8,-1
800036d2:	c7 eb       	rjmp	800035ce <init_AT86RF212+0x9e>
	//pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz set channel ->
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_CTRL_1, 0x22); // 1 -> TX AUTO_CRC && 1-> IRQ_MASK_MODE
800036d4:	32 2b       	mov	r11,34
800036d6:	30 4c       	mov	r12,4
800036d8:	f0 1f 00 16 	mcall	80003730 <init_AT86RF212+0x200>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036dc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036e0:	f0 ca ff ff 	sub	r10,r8,-1
800036e4:	c8 6b       	rjmp	800035f0 <init_AT86RF212+0xc0>
	PAL_WAIT_1_US();
	//pal_trx_reg_write(RG_RX_CTRL, 0x20);
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
800036e6:	30 cb       	mov	r11,12
800036e8:	30 ec       	mov	r12,14
800036ea:	f0 1f 00 12 	mcall	80003730 <init_AT86RF212+0x200>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036ee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036f2:	f0 ca ff ff 	sub	r10,r8,-1
800036f6:	c8 eb       	rjmp	80003612 <init_AT86RF212+0xe2>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036f8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036fc:	f0 ca ff ff 	sub	r10,r8,-1
80003700:	c9 ab       	rjmp	80003634 <init_AT86RF212+0x104>
//	pal_trx_reg_write(RG_TRX_CTRL_2, 0x00); // configuracion de velocidad y frec
	PAL_WAIT_1_US();
	//pal_trx_reg_write(RG_XOSC_CTRL, 0x40); // manejo del cristal externo y capacitores se muere cuando se activa
	PAL_WAIT_1_US();
	promiscuous_mode();
80003702:	f0 1f 00 0f 	mcall	8000373c <init_AT86RF212+0x20c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003706:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000370a:	f0 ca ff ff 	sub	r10,r8,-1
8000370e:	ca 4b       	rjmp	80003656 <init_AT86RF212+0x126>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en 
80003710:	30 4b       	mov	r11,4
80003712:	30 2c       	mov	r12,2
80003714:	f0 1f 00 07 	mcall	80003730 <init_AT86RF212+0x200>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003718:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000371c:	f0 ca ff f3 	sub	r10,r8,-13
80003720:	ca cb       	rjmp	80003678 <init_AT86RF212+0x148>
80003722:	00 00       	add	r0,r0
80003724:	80 00       	ld.sh	r0,r0[0x0]
80003726:	9a 38       	ld.sh	r8,sp[0x6]
80003728:	80 00       	ld.sh	r0,r0[0x0]
8000372a:	33 d8       	mov	r8,61
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	31 00       	mov	r0,16
80003730:	80 00       	ld.sh	r0,r0[0x0]
80003732:	2d 90       	sub	r0,-39
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	2f 44       	sub	r4,-12
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	9a 58       	ld.sh	r8,sp[0xa]
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	30 58       	mov	r8,5

80003740 <estadoPorPc>:
	RST_LOW();
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
80003740:	d4 01       	pushm	lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003742:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003746:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000374a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000374e:	14 38       	cp.w	r8,r10
80003750:	e0 88 00 08 	brls	80003760 <estadoPorPc+0x20>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003754:	12 38       	cp.w	r8,r9
80003756:	fe 98 ff fa 	brls	8000374a <estadoPorPc+0xa>
8000375a:	12 3a       	cp.w	r10,r9
8000375c:	c5 13       	brcs	800037fe <estadoPorPc+0xbe>
8000375e:	cf 6b       	rjmp	8000374a <estadoPorPc+0xa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003760:	12 38       	cp.w	r8,r9
80003762:	e0 8b 00 4e 	brhi	800037fe <estadoPorPc+0xbe>
80003766:	12 3a       	cp.w	r10,r9
80003768:	c4 b3       	brcs	800037fe <estadoPorPc+0xbe>
8000376a:	cf 0b       	rjmp	8000374a <estadoPorPc+0xa>
	delay_ms(1);
	switch (getStateAT86RF212()){
		case P_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado ON\n");
8000376c:	4a 9c       	lddpc	r12,80003810 <estadoPorPc+0xd0>
8000376e:	f0 1f 00 2a 	mcall	80003814 <estadoPorPc+0xd4>
		break;
80003772:	c3 18       	rjmp	800037d4 <estadoPorPc+0x94>
		case BUSY_RX:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX\n");
80003774:	4a 9c       	lddpc	r12,80003818 <estadoPorPc+0xd8>
80003776:	f0 1f 00 28 	mcall	80003814 <estadoPorPc+0xd4>
		break;
8000377a:	c2 d8       	rjmp	800037d4 <estadoPorPc+0x94>
		case RX_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX\n");
8000377c:	4a 8c       	lddpc	r12,8000381c <estadoPorPc+0xdc>
8000377e:	f0 1f 00 26 	mcall	80003814 <estadoPorPc+0xd4>
		break;
80003782:	c2 98       	rjmp	800037d4 <estadoPorPc+0x94>
		case TRX_OFF:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_OFF \n");
80003784:	4a 7c       	lddpc	r12,80003820 <estadoPorPc+0xe0>
80003786:	f0 1f 00 24 	mcall	80003814 <estadoPorPc+0xd4>
		break;
8000378a:	c2 58       	rjmp	800037d4 <estadoPorPc+0x94>
		case PLL_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado PLL_ON\n");
8000378c:	4a 6c       	lddpc	r12,80003824 <estadoPorPc+0xe4>
8000378e:	f0 1f 00 22 	mcall	80003814 <estadoPorPc+0xd4>
		break;
80003792:	c2 18       	rjmp	800037d4 <estadoPorPc+0x94>
		case TRX_SLEEP:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_SLEEP \n");
80003794:	4a 5c       	lddpc	r12,80003828 <estadoPorPc+0xe8>
80003796:	f0 1f 00 20 	mcall	80003814 <estadoPorPc+0xd4>
		break;
8000379a:	c1 d8       	rjmp	800037d4 <estadoPorPc+0x94>
		case BUSY_RX_AACK:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX_AACK\n");
8000379c:	4a 4c       	lddpc	r12,8000382c <estadoPorPc+0xec>
8000379e:	f0 1f 00 1e 	mcall	80003814 <estadoPorPc+0xd4>
		break;
800037a2:	c1 98       	rjmp	800037d4 <estadoPorPc+0x94>
		case BUSY_TX_ARET:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_TX_ARET \n");
800037a4:	4a 3c       	lddpc	r12,80003830 <estadoPorPc+0xf0>
800037a6:	f0 1f 00 1c 	mcall	80003814 <estadoPorPc+0xd4>
		break;
800037aa:	c1 58       	rjmp	800037d4 <estadoPorPc+0x94>
		case RX_AACK_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON\n");
800037ac:	4a 2c       	lddpc	r12,80003834 <estadoPorPc+0xf4>
800037ae:	f0 1f 00 1a 	mcall	80003814 <estadoPorPc+0xd4>
		break;
800037b2:	c1 18       	rjmp	800037d4 <estadoPorPc+0x94>
		case CMD_TX_ARET_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado TX_ARET_ON\n");
800037b4:	4a 1c       	lddpc	r12,80003838 <estadoPorPc+0xf8>
800037b6:	f0 1f 00 18 	mcall	80003814 <estadoPorPc+0xd4>
		case RX_ON_NOCLK :
		escribir_linea_pc("\r\n AT86RF212 en estado RX_ON_NOCLK \n");
800037ba:	4a 1c       	lddpc	r12,8000383c <estadoPorPc+0xfc>
800037bc:	f0 1f 00 16 	mcall	80003814 <estadoPorPc+0xd4>
		case RX_AACK_ON_NOCLK:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON_NOCLK \n");
800037c0:	4a 0c       	lddpc	r12,80003840 <estadoPorPc+0x100>
800037c2:	f0 1f 00 15 	mcall	80003814 <estadoPorPc+0xd4>
		case STATE_TRANSITION_IN_PROGRESS:
		escribir_linea_pc("\r\n :'(  STATE_TRANSITION_IN_PROGRESS ");
800037c6:	4a 0c       	lddpc	r12,80003844 <estadoPorPc+0x104>
800037c8:	f0 1f 00 13 	mcall	80003814 <estadoPorPc+0xd4>
		break;
800037cc:	c0 48       	rjmp	800037d4 <estadoPorPc+0x94>
		
		default:
		escribir_linea_pc("\r\n estado no contemplado");
800037ce:	49 fc       	lddpc	r12,80003848 <estadoPorPc+0x108>
800037d0:	f0 1f 00 11 	mcall	80003814 <estadoPorPc+0xd4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800037d4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800037d8:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800037dc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800037e0:	14 38       	cp.w	r8,r10
800037e2:	e0 88 00 08 	brls	800037f2 <estadoPorPc+0xb2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800037e6:	12 38       	cp.w	r8,r9
800037e8:	fe 98 ff fa 	brls	800037dc <estadoPorPc+0x9c>
800037ec:	12 3a       	cp.w	r10,r9
800037ee:	c1 03       	brcs	8000380e <estadoPorPc+0xce>
800037f0:	cf 6b       	rjmp	800037dc <estadoPorPc+0x9c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800037f2:	12 38       	cp.w	r8,r9
800037f4:	e0 8b 00 0d 	brhi	8000380e <estadoPorPc+0xce>
800037f8:	12 3a       	cp.w	r10,r9
800037fa:	c0 a3       	brcs	8000380e <estadoPorPc+0xce>
800037fc:	cf 0b       	rjmp	800037dc <estadoPorPc+0x9c>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
	delay_ms(1);
	switch (getStateAT86RF212()){
800037fe:	f0 1f 00 14 	mcall	8000384c <estadoPorPc+0x10c>
80003802:	59 fc       	cp.w	r12,31
80003804:	fe 9b ff e5 	brhi	800037ce <estadoPorPc+0x8e>
80003808:	49 28       	lddpc	r8,80003850 <estadoPorPc+0x110>
8000380a:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
8000380e:	d8 02       	popm	pc
80003810:	80 00       	ld.sh	r0,r0[0x0]
80003812:	9a 80       	ld.uh	r0,sp[0x0]
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	33 d8       	mov	r8,61
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	9a 9c       	ld.uh	r12,sp[0x2]
8000381c:	80 00       	ld.sh	r0,r0[0x0]
8000381e:	9a bc       	ld.uh	r12,sp[0x6]
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	9a d8       	ld.uh	r8,sp[0xa]
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	9a fc       	ld.uh	r12,sp[0xe]
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	9b 1c       	st.w	sp[0x4],r12
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	9b 40       	st.w	sp[0x10],r0
80003830:	80 00       	ld.sh	r0,r0[0x0]
80003832:	9b 68       	st.w	sp[0x18],r8
80003834:	80 00       	ld.sh	r0,r0[0x0]
80003836:	9b 90       	st.w	sp[0x24],r0
80003838:	80 00       	ld.sh	r0,r0[0x0]
8000383a:	9b b4       	st.w	sp[0x2c],r4
8000383c:	80 00       	ld.sh	r0,r0[0x0]
8000383e:	9b d8       	st.w	sp[0x34],r8
80003840:	80 00       	ld.sh	r0,r0[0x0]
80003842:	9c 00       	ld.sh	r0,lr[0x0]
80003844:	80 00       	ld.sh	r0,r0[0x0]
80003846:	9c 2c       	ld.sh	r12,lr[0x4]
80003848:	80 00       	ld.sh	r0,r0[0x0]
8000384a:	9c 54       	ld.sh	r4,lr[0xa]
8000384c:	80 00       	ld.sh	r0,r0[0x0]
8000384e:	2f 44       	sub	r4,-12
80003850:	80 00       	ld.sh	r0,r0[0x0]
80003852:	99 18       	st.w	r12[0x4],r8

80003854 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003854:	d4 01       	pushm	lr
80003856:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003858:	30 eb       	mov	r11,14
8000385a:	30 2c       	mov	r12,2
8000385c:	f0 1f 00 0e 	mcall	80003894 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
80003860:	e0 78 c1 38 	mov	r8,115000
80003864:	50 08       	stdsp	sp[0x0],r8
80003866:	e0 68 27 10 	mov	r8,10000
8000386a:	50 18       	stdsp	sp[0x4],r8
8000386c:	34 88       	mov	r8,72
8000386e:	50 28       	stdsp	sp[0x8],r8
80003870:	30 08       	mov	r8,0
80003872:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
80003876:	1a 9b       	mov	r11,sp
80003878:	fe 7c 44 00 	mov	r12,-48128
8000387c:	f0 1f 00 07 	mcall	80003898 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003880:	c0 51       	brne	8000388a <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
80003882:	48 7c       	lddpc	r12,8000389c <init_i2c_module+0x48>
80003884:	f0 1f 00 07 	mcall	800038a0 <init_i2c_module+0x4c>
80003888:	c0 48       	rjmp	80003890 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
8000388a:	48 7c       	lddpc	r12,800038a4 <init_i2c_module+0x50>
8000388c:	f0 1f 00 05 	mcall	800038a0 <init_i2c_module+0x4c>
	}
} 
80003890:	2f cd       	sub	sp,-16
80003892:	d8 02       	popm	pc
80003894:	80 00       	ld.sh	r0,r0[0x0]
80003896:	2e 80       	sub	r0,-24
80003898:	80 00       	ld.sh	r0,r0[0x0]
8000389a:	23 40       	sub	r0,52
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	9d 14       	st.w	lr[0x4],r4
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	33 d8       	mov	r8,61
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	9d 28       	st.w	lr[0x8],r8

800038a8 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
800038a8:	eb cd 40 e0 	pushm	r5-r7,lr
800038ac:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800038ae:	4a 48       	lddpc	r8,8000393c <spi_init_module+0x94>
800038b0:	1a 95       	mov	r5,sp
800038b2:	70 09       	ld.w	r9,r8[0x0]
800038b4:	50 09       	stdsp	sp[0x0],r9
800038b6:	70 19       	ld.w	r9,r8[0x4]
800038b8:	50 19       	stdsp	sp[0x4],r9
800038ba:	70 29       	ld.w	r9,r8[0x8]
800038bc:	50 29       	stdsp	sp[0x8],r9
800038be:	70 38       	ld.w	r8,r8[0xc]
800038c0:	50 38       	stdsp	sp[0xc],r8
800038c2:	30 db       	mov	r11,13
800038c4:	30 2c       	mov	r12,2
800038c6:	f0 1f 00 1f 	mcall	80003940 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800038ca:	fe 77 40 00 	mov	r7,-49152
800038ce:	e0 68 00 80 	mov	r8,128
800038d2:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800038d4:	6e 18       	ld.w	r8,r7[0x4]
800038d6:	30 19       	mov	r9,1
800038d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800038dc:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
800038de:	6e 18       	ld.w	r8,r7[0x4]
800038e0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800038e4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
800038e6:	6e 18       	ld.w	r8,r7[0x4]
800038e8:	30 06       	mov	r6,0
800038ea:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
800038ee:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
800038f0:	6e 18       	ld.w	r8,r7[0x4]
800038f2:	30 f9       	mov	r9,15
800038f4:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800038f8:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
800038fa:	6e 18       	ld.w	r8,r7[0x4]
800038fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003900:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
80003902:	6e 18       	ld.w	r8,r7[0x4]
80003904:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003908:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
8000390a:	6e 18       	ld.w	r8,r7[0x4]
8000390c:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003910:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
80003912:	30 38       	mov	r8,3
80003914:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
80003916:	e0 7a c1 38 	mov	r10,115000
8000391a:	1a 9b       	mov	r11,sp
8000391c:	0e 9c       	mov	r12,r7
8000391e:	f0 1f 00 0a 	mcall	80003944 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
80003922:	0c 99       	mov	r9,r6
80003924:	0c 9a       	mov	r10,r6
80003926:	0c 9b       	mov	r11,r6
80003928:	0e 9c       	mov	r12,r7
8000392a:	f0 1f 00 08 	mcall	80003948 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
8000392e:	0e 9c       	mov	r12,r7
80003930:	f0 1f 00 07 	mcall	8000394c <spi_init_module+0xa4>
}
80003934:	2f cd       	sub	sp,-16
80003936:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000393a:	00 00       	add	r0,r0
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	9d c8       	st.w	lr[0x30],r8
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	2e 80       	sub	r0,-24
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	28 a8       	sub	r8,-118
80003948:	80 00       	ld.sh	r0,r0[0x0]
8000394a:	28 08       	sub	r8,-128
8000394c:	80 00       	ld.sh	r0,r0[0x0]
8000394e:	29 60       	sub	r0,-106

80003950 <main>:
//	} //ver que onda cuando sale de aca, si falla el LRC no hace nada, quiza deberia hacer algo?
	return;
}

int main (void)
{
80003950:	d4 31       	pushm	r0-r7,lr
80003952:	20 3d       	sub	sp,12
	char temps[10] = "\0";
80003954:	4e a8       	lddpc	r8,80003afc <main+0x1ac>
80003956:	90 08       	ld.sh	r8,r8[0x0]
80003958:	ba 08       	st.h	sp[0x0],r8
8000395a:	30 8a       	mov	r10,8
8000395c:	30 0b       	mov	r11,0
8000395e:	fa cc ff fe 	sub	r12,sp,-2
80003962:	f0 1f 00 68 	mcall	80003b00 <main+0x1b0>
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
80003966:	f0 1f 00 68 	mcall	80003b04 <main+0x1b4>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
8000396a:	f0 1f 00 68 	mcall	80003b08 <main+0x1b8>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
8000396e:	f0 1f 00 68 	mcall	80003b0c <main+0x1bc>
	
	//Configuracion pins para RF
	init_rf_pins();
80003972:	f0 1f 00 68 	mcall	80003b10 <main+0x1c0>
	
	//Inicializacion del SPI
	spi_init_module();
80003976:	f0 1f 00 68 	mcall	80003b14 <main+0x1c4>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
8000397a:	f0 1f 00 68 	mcall	80003b18 <main+0x1c8>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
8000397e:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003980:	f0 1f 00 67 	mcall	80003b1c <main+0x1cc>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003984:	30 0a       	mov	r10,0
80003986:	e0 6b 02 20 	mov	r11,544
8000398a:	4e 6c       	lddpc	r12,80003b20 <main+0x1d0>
8000398c:	f0 1f 00 66 	mcall	80003b24 <main+0x1d4>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
80003990:	30 2a       	mov	r10,2
80003992:	e0 6b 01 61 	mov	r11,353
80003996:	4e 5c       	lddpc	r12,80003b28 <main+0x1d8>
80003998:	f0 1f 00 63 	mcall	80003b24 <main+0x1d4>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
8000399c:	30 3a       	mov	r10,3
8000399e:	e0 6b 03 40 	mov	r11,832
800039a2:	4e 3c       	lddpc	r12,80003b2c <main+0x1dc>
800039a4:	f0 1f 00 60 	mcall	80003b24 <main+0x1d4>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
800039a8:	30 1a       	mov	r10,1
800039aa:	4e 2b       	lddpc	r11,80003b30 <main+0x1e0>
800039ac:	fe 7c 24 00 	mov	r12,-56320
800039b0:	f0 1f 00 61 	mcall	80003b34 <main+0x1e4>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
800039b4:	30 2b       	mov	r11,2
800039b6:	fe 7c 24 00 	mov	r12,-56320
800039ba:	f0 1f 00 60 	mcall	80003b38 <main+0x1e8>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
800039be:	30 2b       	mov	r11,2
800039c0:	fe 7c 24 00 	mov	r12,-56320
800039c4:	f0 1f 00 5e 	mcall	80003b3c <main+0x1ec>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
800039c8:	30 19       	mov	r9,1
800039ca:	fe 78 38 00 	mov	r8,-51200
800039ce:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
800039d0:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
800039d2:	4d c8       	lddpc	r8,80003b40 <main+0x1f0>
800039d4:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800039d6:	4d cb       	lddpc	r11,80003b44 <main+0x1f4>
800039d8:	0e 9c       	mov	r12,r7
800039da:	f0 1f 00 5c 	mcall	80003b48 <main+0x1f8>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
800039de:	e0 6a 00 b3 	mov	r10,179
800039e2:	30 0b       	mov	r11,0
800039e4:	0e 9c       	mov	r12,r7
800039e6:	f0 1f 00 5a 	mcall	80003b4c <main+0x1fc>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
800039ea:	4d aa       	lddpc	r10,80003b50 <main+0x200>
800039ec:	30 0b       	mov	r11,0
800039ee:	0e 9c       	mov	r12,r7
800039f0:	f0 1f 00 59 	mcall	80003b54 <main+0x204>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
800039f4:	30 0b       	mov	r11,0
800039f6:	0e 9c       	mov	r12,r7
800039f8:	f0 1f 00 58 	mcall	80003b58 <main+0x208>
// 	while (at86rfx_init() != AT86RFX_SUCCESS) {
//  	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
//  	 	}
//  		escribir_linea_pc("Modulo RF:\tPASS\r\n");
 
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
800039fc:	31 cc       	mov	r12,28
800039fe:	f0 1f 00 58 	mcall	80003b5c <main+0x20c>
80003a02:	4d 88       	lddpc	r8,80003b60 <main+0x210>
80003a04:	b0 8c       	st.b	r8[0x0],r12
	
	if (register_value == PART_NUM_AT86RF212) 
80003a06:	30 78       	mov	r8,7
80003a08:	f0 0c 18 00 	cp.b	r12,r8
80003a0c:	c0 51       	brne	80003a16 <main+0xc6>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
80003a0e:	4d 6c       	lddpc	r12,80003b64 <main+0x214>
80003a10:	f0 1f 00 56 	mcall	80003b68 <main+0x218>
80003a14:	c0 48       	rjmp	80003a1c <main+0xcc>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
80003a16:	4d 6c       	lddpc	r12,80003b6c <main+0x21c>
80003a18:	f0 1f 00 54 	mcall	80003b68 <main+0x218>
	escribir_linea_pc(register_value);
80003a1c:	4d 18       	lddpc	r8,80003b60 <main+0x210>
80003a1e:	11 8c       	ld.ub	r12,r8[0x0]
80003a20:	f0 1f 00 52 	mcall	80003b68 <main+0x218>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
80003a24:	f0 1f 00 53 	mcall	80003b70 <main+0x220>
	init_i2c_module();
80003a28:	f0 1f 00 53 	mcall	80003b74 <main+0x224>
	// inicializacion del tran
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_PLL_ON);

	

	init_AT86RF212();
80003a2c:	f0 1f 00 53 	mcall	80003b78 <main+0x228>
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r\n");
80003a30:	4d 3c       	lddpc	r12,80003b7c <main+0x22c>
80003a32:	f0 1f 00 4e 	mcall	80003b68 <main+0x218>
	
	setStateAT86RF212(CMD_RX_ON, TIME_PLL_ON_RX_ON);// seteo el tran en RX
80003a36:	30 1b       	mov	r11,1
80003a38:	30 6c       	mov	r12,6
80003a3a:	f0 1f 00 52 	mcall	80003b80 <main+0x230>
	//pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003a3e:	4d 27       	lddpc	r7,80003b84 <main+0x234>
80003a40:	4d 24       	lddpc	r4,80003b88 <main+0x238>
		{
			if (cola_PC[cola_PC_nr] == 't')
80003a42:	4d 31       	lddpc	r1,80003b8c <main+0x23c>
80003a44:	37 40       	mov	r0,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			
			if (cola_PC_nr >= tamano_cola)
80003a46:	3c 73       	mov	r3,-57
				cola_PC_nr = 0;
				
			if (configuracion && (cola_PC_nr >= pConfiguracion + 4))
80003a48:	4d 22       	lddpc	r2,80003b90 <main+0x240>
80003a4a:	30 05       	mov	r5,0
	
	setStateAT86RF212(CMD_RX_ON, TIME_PLL_ON_RX_ON);// seteo el tran en RX
	//pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003a4c:	0f 88       	ld.ub	r8,r7[0x0]
80003a4e:	09 89       	ld.ub	r9,r4[0x0]
80003a50:	f0 09 18 00 	cp.b	r9,r8
80003a54:	c3 b0       	breq	80003aca <main+0x17a>
		{
			if (cola_PC[cola_PC_nr] == 't')
80003a56:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003a5a:	e0 08 18 00 	cp.b	r8,r0
80003a5e:	c0 d1       	brne	80003a78 <main+0x128>
			{
				leer_temp(temps);
80003a60:	1a 9c       	mov	r12,sp
80003a62:	f0 1f 00 4d 	mcall	80003b94 <main+0x244>
				escribir_linea_pc("Temp: ");
80003a66:	4c dc       	lddpc	r12,80003b98 <main+0x248>
80003a68:	f0 1f 00 40 	mcall	80003b68 <main+0x218>
				escribir_linea_pc(temps);
80003a6c:	1a 9c       	mov	r12,sp
80003a6e:	f0 1f 00 3f 	mcall	80003b68 <main+0x218>
				escribir_linea_pc("*C\r\n");
80003a72:	4c bc       	lddpc	r12,80003b9c <main+0x24c>
80003a74:	f0 1f 00 3d 	mcall	80003b68 <main+0x218>
			}
			cola_PC_nr++;
80003a78:	0f 88       	ld.ub	r8,r7[0x0]
80003a7a:	2f f8       	sub	r8,-1
			
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
80003a7c:	f0 03 18 00 	cp.b	r3,r8
80003a80:	ea 08 17 30 	movlo	r8,r5
80003a84:	ae 88       	st.b	r7[0x0],r8
				
			if (configuracion && (cola_PC_nr >= pConfiguracion + 4))
80003a86:	05 88       	ld.ub	r8,r2[0x0]
80003a88:	ea 08 18 00 	cp.b	r8,r5
80003a8c:	c1 f0       	breq	80003aca <main+0x17a>
80003a8e:	4c 5a       	lddpc	r10,80003ba0 <main+0x250>
80003a90:	15 88       	ld.ub	r8,r10[0x0]
80003a92:	0f 8a       	ld.ub	r10,r7[0x0]
80003a94:	f0 c9 ff fc 	sub	r9,r8,-4
80003a98:	12 3a       	cp.w	r10,r9
80003a9a:	c1 85       	brlt	80003aca <main+0x17a>
			{
				if ((cola_PC[pConfiguracion] & cola_PC[pConfiguracion+1] & cola_PC[pConfiguracion+2]) == 0x01)
80003a9c:	e2 08 00 09 	add	r9,r1,r8
80003aa0:	13 9a       	ld.ub	r10,r9[0x1]
80003aa2:	13 a9       	ld.ub	r9,r9[0x2]
80003aa4:	f5 e9 00 09 	and	r9,r10,r9
80003aa8:	e2 08 07 0a 	ld.ub	r10,r1[r8]
80003aac:	14 69       	and	r9,r10
80003aae:	30 1a       	mov	r10,1
80003ab0:	f4 09 18 00 	cp.b	r9,r10
80003ab4:	c0 a1       	brne	80003ac8 <main+0x178>
				{
					if (cola_PC[pConfiguracion+3] == ADDRESS)
80003ab6:	e2 08 00 08 	add	r8,r1,r8
80003aba:	11 b9       	ld.ub	r9,r8[0x3]
80003abc:	33 18       	mov	r8,49
80003abe:	f0 09 18 00 	cp.b	r9,r8
80003ac2:	c0 31       	brne	80003ac8 <main+0x178>
					{
						modeConfig();
80003ac4:	f0 1f 00 38 	mcall	80003ba4 <main+0x254>
					}
					
				}
				configuracion = false;
80003ac8:	a4 85       	st.b	r2[0x0],r5
		}
		//at86rfx_tx_frame(tx_buffer);
		//txTramaManual(tx_buffer);
		//txTramachibi(tx_buffer);
		//txTramachibi(tx_buffer);
		estadoPorPc();
80003aca:	f0 1f 00 38 	mcall	80003ba8 <main+0x258>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003ace:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003ad2:	e0 69 e0 9c 	mov	r9,57500
80003ad6:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003ada:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003ade:	14 38       	cp.w	r8,r10
80003ae0:	e0 88 00 08 	brls	80003af0 <main+0x1a0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003ae4:	12 38       	cp.w	r8,r9
80003ae6:	fe 98 ff fa 	brls	80003ada <main+0x18a>
80003aea:	12 3a       	cp.w	r10,r9
80003aec:	cb 03       	brcs	80003a4c <main+0xfc>
80003aee:	cf 6b       	rjmp	80003ada <main+0x18a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003af0:	12 38       	cp.w	r8,r9
80003af2:	fe 9b ff ad 	brhi	80003a4c <main+0xfc>
80003af6:	12 3a       	cp.w	r10,r9
80003af8:	ca a3       	brcs	80003a4c <main+0xfc>
80003afa:	cf 0b       	rjmp	80003ada <main+0x18a>
80003afc:	80 00       	ld.sh	r0,r0[0x0]
80003afe:	2f 38       	sub	r8,-13
80003b00:	80 00       	ld.sh	r0,r0[0x0]
80003b02:	42 fe       	lddsp	lr,sp[0xbc]
80003b04:	80 00       	ld.sh	r0,r0[0x0]
80003b06:	2e 70       	sub	r0,-25
80003b08:	80 00       	ld.sh	r0,r0[0x0]
80003b0a:	33 88       	mov	r8,56
80003b0c:	80 00       	ld.sh	r0,r0[0x0]
80003b0e:	32 f0       	mov	r0,47
80003b10:	80 00       	ld.sh	r0,r0[0x0]
80003b12:	33 a8       	mov	r8,58
80003b14:	80 00       	ld.sh	r0,r0[0x0]
80003b16:	38 a8       	mov	r8,-118
80003b18:	80 00       	ld.sh	r0,r0[0x0]
80003b1a:	32 cc       	mov	r12,44
80003b1c:	80 00       	ld.sh	r0,r0[0x0]
80003b1e:	27 5c       	sub	r12,117
80003b20:	80 00       	ld.sh	r0,r0[0x0]
80003b22:	2f c8       	sub	r8,-4
80003b24:	80 00       	ld.sh	r0,r0[0x0]
80003b26:	26 dc       	sub	r12,109
80003b28:	80 00       	ld.sh	r0,r0[0x0]
80003b2a:	33 ec       	mov	r12,62
80003b2c:	80 00       	ld.sh	r0,r0[0x0]
80003b2e:	2f 58       	sub	r8,-11
80003b30:	00 00       	add	r0,r0
80003b32:	00 20       	rsub	r0,r0
80003b34:	80 00       	ld.sh	r0,r0[0x0]
80003b36:	23 f8       	sub	r8,63
80003b38:	80 00       	ld.sh	r0,r0[0x0]
80003b3a:	24 c8       	sub	r8,76
80003b3c:	80 00       	ld.sh	r0,r0[0x0]
80003b3e:	24 d2       	sub	r2,77
80003b40:	00 00       	add	r0,r0
80003b42:	00 18       	sub	r8,r0
80003b44:	80 00       	ld.sh	r0,r0[0x0]
80003b46:	9d b0       	st.w	lr[0x2c],r0
80003b48:	80 00       	ld.sh	r0,r0[0x0]
80003b4a:	29 66       	sub	r6,-106
80003b4c:	80 00       	ld.sh	r0,r0[0x0]
80003b4e:	2a 38       	sub	r8,-93
80003b50:	80 00       	ld.sh	r0,r0[0x0]
80003b52:	99 98       	st.w	r12[0x24],r8
80003b54:	80 00       	ld.sh	r0,r0[0x0]
80003b56:	2a 6c       	sub	r12,-90
80003b58:	80 00       	ld.sh	r0,r0[0x0]
80003b5a:	2a 02       	sub	r2,-96
80003b5c:	80 00       	ld.sh	r0,r0[0x0]
80003b5e:	2d fc       	sub	r12,-33
80003b60:	00 00       	add	r0,r0
80003b62:	06 35       	cp.w	r5,r3
80003b64:	80 00       	ld.sh	r0,r0[0x0]
80003b66:	9d 40       	st.w	lr[0x10],r0
80003b68:	80 00       	ld.sh	r0,r0[0x0]
80003b6a:	33 d8       	mov	r8,61
80003b6c:	80 00       	ld.sh	r0,r0[0x0]
80003b6e:	9d 54       	st.w	lr[0x14],r4
80003b70:	80 00       	ld.sh	r0,r0[0x0]
80003b72:	33 1c       	mov	r12,49
80003b74:	80 00       	ld.sh	r0,r0[0x0]
80003b76:	38 54       	mov	r4,-123
80003b78:	80 00       	ld.sh	r0,r0[0x0]
80003b7a:	35 30       	mov	r0,83
80003b7c:	80 00       	ld.sh	r0,r0[0x0]
80003b7e:	9d 68       	st.w	lr[0x18],r8
80003b80:	80 00       	ld.sh	r0,r0[0x0]
80003b82:	30 a0       	mov	r0,10
80003b84:	00 00       	add	r0,r0
80003b86:	06 36       	cp.w	r6,r3
80003b88:	00 00       	add	r0,r0
80003b8a:	06 37       	cp.w	r7,r3
80003b8c:	00 00       	add	r0,r0
80003b8e:	07 4c       	ld.w	r12,--r3
80003b90:	00 00       	add	r0,r0
80003b92:	06 34       	cp.w	r4,r3
80003b94:	80 00       	ld.sh	r0,r0[0x0]
80003b96:	31 88       	mov	r8,24
80003b98:	80 00       	ld.sh	r0,r0[0x0]
80003b9a:	9d 80       	st.w	lr[0x20],r0
80003b9c:	80 00       	ld.sh	r0,r0[0x0]
80003b9e:	9d 88       	st.w	lr[0x20],r8
80003ba0:	00 00       	add	r0,r0
80003ba2:	06 38       	cp.w	r8,r3
80003ba4:	80 00       	ld.sh	r0,r0[0x0]
80003ba6:	34 c4       	mov	r4,76
80003ba8:	80 00       	ld.sh	r0,r0[0x0]
80003baa:	37 40       	mov	r0,116

80003bac <__avr32_f64_mul>:
80003bac:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003bb0:	e0 80 00 dc 	breq	80003d68 <__avr32_f64_mul_op1_zero>
80003bb4:	d4 21       	pushm	r4-r7,lr
80003bb6:	f7 e9 20 0e 	eor	lr,r11,r9
80003bba:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003bbe:	30 15       	mov	r5,1
80003bc0:	c4 30       	breq	80003c46 <__avr32_f64_mul_op1_subnormal>
80003bc2:	ab 6b       	lsl	r11,0xa
80003bc4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003bc8:	ab 6a       	lsl	r10,0xa
80003bca:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003bce:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003bd2:	c5 c0       	breq	80003c8a <__avr32_f64_mul_op2_subnormal>
80003bd4:	a1 78       	lsl	r8,0x1
80003bd6:	5c f9       	rol	r9
80003bd8:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003bdc:	e0 47 07 ff 	cp.w	r7,2047
80003be0:	c7 70       	breq	80003cce <__avr32_f64_mul_op_nan_or_inf>
80003be2:	e0 46 07 ff 	cp.w	r6,2047
80003be6:	c7 40       	breq	80003cce <__avr32_f64_mul_op_nan_or_inf>
80003be8:	ee 06 00 0c 	add	r12,r7,r6
80003bec:	e0 2c 03 fe 	sub	r12,1022
80003bf0:	f6 08 06 44 	mulu.d	r4,r11,r8
80003bf4:	f4 09 07 44 	macu.d	r4,r10,r9
80003bf8:	f4 08 06 46 	mulu.d	r6,r10,r8
80003bfc:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003c00:	08 07       	add	r7,r4
80003c02:	f4 05 00 4a 	adc	r10,r10,r5
80003c06:	5c 0b       	acr	r11
80003c08:	ed bb 00 14 	bld	r11,0x14
80003c0c:	c0 50       	breq	80003c16 <__avr32_f64_mul+0x6a>
80003c0e:	a1 77       	lsl	r7,0x1
80003c10:	5c fa       	rol	r10
80003c12:	5c fb       	rol	r11
80003c14:	20 1c       	sub	r12,1
80003c16:	58 0c       	cp.w	r12,0
80003c18:	e0 8a 00 6f 	brle	80003cf6 <__avr32_f64_mul_res_subnormal>
80003c1c:	e0 4c 07 ff 	cp.w	r12,2047
80003c20:	e0 84 00 9c 	brge	80003d58 <__avr32_f64_mul_res_inf>
80003c24:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003c28:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003c2c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003c30:	ee 17 80 00 	eorh	r7,0x8000
80003c34:	f1 b7 04 20 	satu	r7,0x1
80003c38:	0e 0a       	add	r10,r7
80003c3a:	5c 0b       	acr	r11
80003c3c:	ed be 00 1f 	bld	lr,0x1f
80003c40:	ef bb 00 1f 	bst	r11,0x1f
80003c44:	d8 22       	popm	r4-r7,pc

80003c46 <__avr32_f64_mul_op1_subnormal>:
80003c46:	e4 1b 00 0f 	andh	r11,0xf
80003c4a:	f4 0c 12 00 	clz	r12,r10
80003c4e:	f6 06 12 00 	clz	r6,r11
80003c52:	f7 bc 03 e1 	sublo	r12,-31
80003c56:	f8 06 17 30 	movlo	r6,r12
80003c5a:	f7 b6 02 01 	subhs	r6,1
80003c5e:	e0 46 00 20 	cp.w	r6,32
80003c62:	c0 d4       	brge	80003c7c <__avr32_f64_mul_op1_subnormal+0x36>
80003c64:	ec 0c 11 20 	rsub	r12,r6,32
80003c68:	f6 06 09 4b 	lsl	r11,r11,r6
80003c6c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003c70:	18 4b       	or	r11,r12
80003c72:	f4 06 09 4a 	lsl	r10,r10,r6
80003c76:	20 b6       	sub	r6,11
80003c78:	0c 17       	sub	r7,r6
80003c7a:	ca ab       	rjmp	80003bce <__avr32_f64_mul+0x22>
80003c7c:	f4 06 09 4b 	lsl	r11,r10,r6
80003c80:	c6 40       	breq	80003d48 <__avr32_f64_mul_res_zero>
80003c82:	30 0a       	mov	r10,0
80003c84:	20 b6       	sub	r6,11
80003c86:	0c 17       	sub	r7,r6
80003c88:	ca 3b       	rjmp	80003bce <__avr32_f64_mul+0x22>

80003c8a <__avr32_f64_mul_op2_subnormal>:
80003c8a:	e4 19 00 0f 	andh	r9,0xf
80003c8e:	f0 0c 12 00 	clz	r12,r8
80003c92:	f2 05 12 00 	clz	r5,r9
80003c96:	f7 bc 03 ea 	sublo	r12,-22
80003c9a:	f8 05 17 30 	movlo	r5,r12
80003c9e:	f7 b5 02 0a 	subhs	r5,10
80003ca2:	e0 45 00 20 	cp.w	r5,32
80003ca6:	c0 d4       	brge	80003cc0 <__avr32_f64_mul_op2_subnormal+0x36>
80003ca8:	ea 0c 11 20 	rsub	r12,r5,32
80003cac:	f2 05 09 49 	lsl	r9,r9,r5
80003cb0:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003cb4:	18 49       	or	r9,r12
80003cb6:	f0 05 09 48 	lsl	r8,r8,r5
80003cba:	20 25       	sub	r5,2
80003cbc:	0a 16       	sub	r6,r5
80003cbe:	c8 fb       	rjmp	80003bdc <__avr32_f64_mul+0x30>
80003cc0:	f0 05 09 49 	lsl	r9,r8,r5
80003cc4:	c4 20       	breq	80003d48 <__avr32_f64_mul_res_zero>
80003cc6:	30 08       	mov	r8,0
80003cc8:	20 25       	sub	r5,2
80003cca:	0a 16       	sub	r6,r5
80003ccc:	c8 8b       	rjmp	80003bdc <__avr32_f64_mul+0x30>

80003cce <__avr32_f64_mul_op_nan_or_inf>:
80003cce:	e4 19 00 0f 	andh	r9,0xf
80003cd2:	e4 1b 00 0f 	andh	r11,0xf
80003cd6:	14 4b       	or	r11,r10
80003cd8:	10 49       	or	r9,r8
80003cda:	e0 47 07 ff 	cp.w	r7,2047
80003cde:	c0 91       	brne	80003cf0 <__avr32_f64_mul_op1_not_naninf>
80003ce0:	58 0b       	cp.w	r11,0
80003ce2:	c3 81       	brne	80003d52 <__avr32_f64_mul_res_nan>
80003ce4:	e0 46 07 ff 	cp.w	r6,2047
80003ce8:	c3 81       	brne	80003d58 <__avr32_f64_mul_res_inf>
80003cea:	58 09       	cp.w	r9,0
80003cec:	c3 60       	breq	80003d58 <__avr32_f64_mul_res_inf>
80003cee:	c3 28       	rjmp	80003d52 <__avr32_f64_mul_res_nan>

80003cf0 <__avr32_f64_mul_op1_not_naninf>:
80003cf0:	58 09       	cp.w	r9,0
80003cf2:	c3 30       	breq	80003d58 <__avr32_f64_mul_res_inf>
80003cf4:	c2 f8       	rjmp	80003d52 <__avr32_f64_mul_res_nan>

80003cf6 <__avr32_f64_mul_res_subnormal>:
80003cf6:	5c 3c       	neg	r12
80003cf8:	2f fc       	sub	r12,-1
80003cfa:	f1 bc 04 c0 	satu	r12,0x6
80003cfe:	e0 4c 00 20 	cp.w	r12,32
80003d02:	c1 14       	brge	80003d24 <__avr32_f64_mul_res_subnormal+0x2e>
80003d04:	f8 08 11 20 	rsub	r8,r12,32
80003d08:	0e 46       	or	r6,r7
80003d0a:	ee 0c 0a 47 	lsr	r7,r7,r12
80003d0e:	f4 08 09 49 	lsl	r9,r10,r8
80003d12:	12 47       	or	r7,r9
80003d14:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003d18:	f6 08 09 49 	lsl	r9,r11,r8
80003d1c:	12 4a       	or	r10,r9
80003d1e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003d22:	c8 3b       	rjmp	80003c28 <__avr32_f64_mul+0x7c>
80003d24:	f8 08 11 20 	rsub	r8,r12,32
80003d28:	f9 b9 00 00 	moveq	r9,0
80003d2c:	c0 30       	breq	80003d32 <__avr32_f64_mul_res_subnormal+0x3c>
80003d2e:	f6 08 09 49 	lsl	r9,r11,r8
80003d32:	0e 46       	or	r6,r7
80003d34:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003d38:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003d3c:	f3 ea 10 07 	or	r7,r9,r10
80003d40:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003d44:	30 0b       	mov	r11,0
80003d46:	c7 1b       	rjmp	80003c28 <__avr32_f64_mul+0x7c>

80003d48 <__avr32_f64_mul_res_zero>:
80003d48:	1c 9b       	mov	r11,lr
80003d4a:	e6 1b 80 00 	andh	r11,0x8000,COH
80003d4e:	30 0a       	mov	r10,0
80003d50:	d8 22       	popm	r4-r7,pc

80003d52 <__avr32_f64_mul_res_nan>:
80003d52:	3f fb       	mov	r11,-1
80003d54:	3f fa       	mov	r10,-1
80003d56:	d8 22       	popm	r4-r7,pc

80003d58 <__avr32_f64_mul_res_inf>:
80003d58:	f0 6b 00 00 	mov	r11,-1048576
80003d5c:	ed be 00 1f 	bld	lr,0x1f
80003d60:	ef bb 00 1f 	bst	r11,0x1f
80003d64:	30 0a       	mov	r10,0
80003d66:	d8 22       	popm	r4-r7,pc

80003d68 <__avr32_f64_mul_op1_zero>:
80003d68:	f7 e9 20 0b 	eor	r11,r11,r9
80003d6c:	e6 1b 80 00 	andh	r11,0x8000,COH
80003d70:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003d74:	e0 4c 07 ff 	cp.w	r12,2047
80003d78:	5e 1c       	retne	r12
80003d7a:	3f fa       	mov	r10,-1
80003d7c:	3f fb       	mov	r11,-1
80003d7e:	5e fc       	retal	r12

80003d80 <__avr32_u32_to_f64>:
80003d80:	f8 cb 00 00 	sub	r11,r12,0
80003d84:	30 0c       	mov	r12,0
80003d86:	c0 38       	rjmp	80003d8c <__avr32_s32_to_f64+0x4>

80003d88 <__avr32_s32_to_f64>:
80003d88:	18 9b       	mov	r11,r12
80003d8a:	5c 4b       	abs	r11
80003d8c:	30 0a       	mov	r10,0
80003d8e:	5e 0b       	reteq	r11
80003d90:	d4 01       	pushm	lr
80003d92:	e0 69 04 1e 	mov	r9,1054
80003d96:	f6 08 12 00 	clz	r8,r11
80003d9a:	c1 70       	breq	80003dc8 <__avr32_s32_to_f64+0x40>
80003d9c:	c0 c3       	brcs	80003db4 <__avr32_s32_to_f64+0x2c>
80003d9e:	f0 0e 11 20 	rsub	lr,r8,32
80003da2:	f6 08 09 4b 	lsl	r11,r11,r8
80003da6:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003daa:	1c 4b       	or	r11,lr
80003dac:	f4 08 09 4a 	lsl	r10,r10,r8
80003db0:	10 19       	sub	r9,r8
80003db2:	c0 b8       	rjmp	80003dc8 <__avr32_s32_to_f64+0x40>
80003db4:	f4 08 12 00 	clz	r8,r10
80003db8:	f9 b8 03 00 	movlo	r8,0
80003dbc:	f7 b8 02 e0 	subhs	r8,-32
80003dc0:	f4 08 09 4b 	lsl	r11,r10,r8
80003dc4:	30 0a       	mov	r10,0
80003dc6:	10 19       	sub	r9,r8
80003dc8:	58 09       	cp.w	r9,0
80003dca:	e0 89 00 30 	brgt	80003e2a <__avr32_s32_to_f64+0xa2>
80003dce:	5c 39       	neg	r9
80003dd0:	2f f9       	sub	r9,-1
80003dd2:	e0 49 00 36 	cp.w	r9,54
80003dd6:	c0 43       	brcs	80003dde <__avr32_s32_to_f64+0x56>
80003dd8:	30 0b       	mov	r11,0
80003dda:	30 0a       	mov	r10,0
80003ddc:	c2 68       	rjmp	80003e28 <__avr32_s32_to_f64+0xa0>
80003dde:	2f 69       	sub	r9,-10
80003de0:	f2 08 11 20 	rsub	r8,r9,32
80003de4:	e0 49 00 20 	cp.w	r9,32
80003de8:	c0 b2       	brcc	80003dfe <__avr32_s32_to_f64+0x76>
80003dea:	f4 08 09 4e 	lsl	lr,r10,r8
80003dee:	f6 08 09 48 	lsl	r8,r11,r8
80003df2:	f4 09 0a 4a 	lsr	r10,r10,r9
80003df6:	f6 09 0a 4b 	lsr	r11,r11,r9
80003dfa:	10 4b       	or	r11,r8
80003dfc:	c0 88       	rjmp	80003e0c <__avr32_s32_to_f64+0x84>
80003dfe:	f6 08 09 4e 	lsl	lr,r11,r8
80003e02:	14 4e       	or	lr,r10
80003e04:	16 9a       	mov	r10,r11
80003e06:	30 0b       	mov	r11,0
80003e08:	f4 09 0a 4a 	lsr	r10,r10,r9
80003e0c:	ed ba 00 00 	bld	r10,0x0
80003e10:	c0 92       	brcc	80003e22 <__avr32_s32_to_f64+0x9a>
80003e12:	1c 7e       	tst	lr,lr
80003e14:	c0 41       	brne	80003e1c <__avr32_s32_to_f64+0x94>
80003e16:	ed ba 00 01 	bld	r10,0x1
80003e1a:	c0 42       	brcc	80003e22 <__avr32_s32_to_f64+0x9a>
80003e1c:	2f fa       	sub	r10,-1
80003e1e:	f7 bb 02 ff 	subhs	r11,-1
80003e22:	5c fc       	rol	r12
80003e24:	5d 0b       	ror	r11
80003e26:	5d 0a       	ror	r10
80003e28:	d8 02       	popm	pc
80003e2a:	e0 68 03 ff 	mov	r8,1023
80003e2e:	ed ba 00 0b 	bld	r10,0xb
80003e32:	f7 b8 00 ff 	subeq	r8,-1
80003e36:	10 0a       	add	r10,r8
80003e38:	5c 0b       	acr	r11
80003e3a:	f7 b9 03 fe 	sublo	r9,-2
80003e3e:	e0 49 07 ff 	cp.w	r9,2047
80003e42:	c0 55       	brlt	80003e4c <__avr32_s32_to_f64+0xc4>
80003e44:	30 0a       	mov	r10,0
80003e46:	fc 1b ff e0 	movh	r11,0xffe0
80003e4a:	c0 c8       	rjmp	80003e62 <__floatsidf_return_op1>
80003e4c:	ed bb 00 1f 	bld	r11,0x1f
80003e50:	f7 b9 01 01 	subne	r9,1
80003e54:	ab 9a       	lsr	r10,0xb
80003e56:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003e5a:	a1 7b       	lsl	r11,0x1
80003e5c:	ab 9b       	lsr	r11,0xb
80003e5e:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003e62 <__floatsidf_return_op1>:
80003e62:	a1 7c       	lsl	r12,0x1
80003e64:	5d 0b       	ror	r11
80003e66:	d8 02       	popm	pc

80003e68 <__avr32_f32_to_f64>:
80003e68:	f8 0b 15 01 	lsl	r11,r12,0x1
80003e6c:	f9 ba 00 00 	moveq	r10,0
80003e70:	5e 0b       	reteq	r11
80003e72:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003e76:	e0 49 00 ff 	cp.w	r9,255
80003e7a:	c1 e0       	breq	80003eb6 <__extendsfdf_return_op1+0x6>
80003e7c:	a7 7b       	lsl	r11,0x7
80003e7e:	30 0a       	mov	r10,0
80003e80:	58 09       	cp.w	r9,0
80003e82:	f7 b9 00 ff 	subeq	r9,-1
80003e86:	5f 18       	srne	r8
80003e88:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003e8c:	fe 39 fc 80 	sub	r9,-896
80003e90:	f6 08 12 00 	clz	r8,r11
80003e94:	10 19       	sub	r9,r8
80003e96:	f6 08 09 4b 	lsl	r11,r11,r8
80003e9a:	ed bb 00 1f 	bld	r11,0x1f
80003e9e:	f7 b9 01 01 	subne	r9,1
80003ea2:	ab 9a       	lsr	r10,0xb
80003ea4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003ea8:	a1 7b       	lsl	r11,0x1
80003eaa:	ab 9b       	lsr	r11,0xb
80003eac:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003eb0 <__extendsfdf_return_op1>:
80003eb0:	a1 7c       	lsl	r12,0x1
80003eb2:	5d 0b       	ror	r11
80003eb4:	5e fb       	retal	r11
80003eb6:	fc 1a ff e0 	movh	r10,0xffe0
80003eba:	a9 6b       	lsl	r11,0x8
80003ebc:	f9 bb 01 ff 	movne	r11,-1
80003ec0:	f4 0b 17 00 	moveq	r11,r10
80003ec4:	30 0a       	mov	r10,0
80003ec6:	cf 5b       	rjmp	80003eb0 <__extendsfdf_return_op1>

80003ec8 <__avr32_f64_to_f32>:
80003ec8:	f6 09 15 01 	lsl	r9,r11,0x1
80003ecc:	b5 99       	lsr	r9,0x15
80003ece:	5e 0d       	reteq	0
80003ed0:	f6 08 15 0a 	lsl	r8,r11,0xa
80003ed4:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003ed8:	ab 6a       	lsl	r10,0xa
80003eda:	5c 3a       	neg	r10
80003edc:	5c fc       	rol	r12
80003ede:	e0 49 07 ff 	cp.w	r9,2047
80003ee2:	c1 a0       	breq	80003f16 <__truncdfsf_return_op1+0x6>
80003ee4:	e0 29 03 80 	sub	r9,896
80003ee8:	bf bc       	sbr	r12,0x1f
80003eea:	58 09       	cp.w	r9,0
80003eec:	e0 8a 00 1a 	brle	80003f20 <__truncdfsf_return_op1+0x10>
80003ef0:	37 fa       	mov	r10,127
80003ef2:	ed bc 00 08 	bld	r12,0x8
80003ef6:	f7 ba 00 ff 	subeq	r10,-1
80003efa:	14 0c       	add	r12,r10
80003efc:	f7 b9 03 fe 	sublo	r9,-2
80003f00:	ed bc 00 1f 	bld	r12,0x1f
80003f04:	f7 b9 01 01 	subne	r9,1
80003f08:	f8 0c 16 07 	lsr	r12,r12,0x7
80003f0c:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003f10 <__truncdfsf_return_op1>:
80003f10:	a1 7b       	lsl	r11,0x1
80003f12:	5d 0c       	ror	r12
80003f14:	5e fc       	retal	r12
80003f16:	bf dc       	cbr	r12,0x1f
80003f18:	5e 1e       	retne	-1
80003f1a:	fc 1c 7f 80 	movh	r12,0x7f80
80003f1e:	5e fc       	retal	r12
80003f20:	f2 09 11 01 	rsub	r9,r9,1
80003f24:	59 99       	cp.w	r9,25
80003f26:	f9 bc 02 00 	movhs	r12,0
80003f2a:	c1 32       	brcc	80003f50 <__truncdfsf_return_op1+0x40>
80003f2c:	f2 0a 11 20 	rsub	r10,r9,32
80003f30:	f8 0a 09 4a 	lsl	r10,r12,r10
80003f34:	5f 1a       	srne	r10
80003f36:	f8 09 0a 4c 	lsr	r12,r12,r9
80003f3a:	14 4c       	or	r12,r10
80003f3c:	37 fa       	mov	r10,127
80003f3e:	ed bc 00 08 	bld	r12,0x8
80003f42:	f7 ba 00 ff 	subeq	r10,-1
80003f46:	14 0c       	add	r12,r10
80003f48:	f8 0c 16 07 	lsr	r12,r12,0x7
80003f4c:	a1 7b       	lsl	r11,0x1
80003f4e:	5d 0c       	ror	r12
80003f50:	5e fc       	retal	r12

80003f52 <__avr32_udiv64>:
80003f52:	d4 31       	pushm	r0-r7,lr
80003f54:	1a 97       	mov	r7,sp
80003f56:	20 3d       	sub	sp,12
80003f58:	10 9c       	mov	r12,r8
80003f5a:	12 9e       	mov	lr,r9
80003f5c:	14 93       	mov	r3,r10
80003f5e:	58 09       	cp.w	r9,0
80003f60:	e0 81 00 bd 	brne	800040da <__avr32_udiv64+0x188>
80003f64:	16 38       	cp.w	r8,r11
80003f66:	e0 88 00 40 	brls	80003fe6 <__avr32_udiv64+0x94>
80003f6a:	f0 08 12 00 	clz	r8,r8
80003f6e:	c0 d0       	breq	80003f88 <__avr32_udiv64+0x36>
80003f70:	f6 08 09 4b 	lsl	r11,r11,r8
80003f74:	f0 09 11 20 	rsub	r9,r8,32
80003f78:	f8 08 09 4c 	lsl	r12,r12,r8
80003f7c:	f4 09 0a 49 	lsr	r9,r10,r9
80003f80:	f4 08 09 43 	lsl	r3,r10,r8
80003f84:	f3 eb 10 0b 	or	r11,r9,r11
80003f88:	f8 0e 16 10 	lsr	lr,r12,0x10
80003f8c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003f90:	f6 0e 0d 00 	divu	r0,r11,lr
80003f94:	e6 0b 16 10 	lsr	r11,r3,0x10
80003f98:	00 99       	mov	r9,r0
80003f9a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003f9e:	e0 0a 02 48 	mul	r8,r0,r10
80003fa2:	10 3b       	cp.w	r11,r8
80003fa4:	c0 a2       	brcc	80003fb8 <__avr32_udiv64+0x66>
80003fa6:	20 19       	sub	r9,1
80003fa8:	18 0b       	add	r11,r12
80003faa:	18 3b       	cp.w	r11,r12
80003fac:	c0 63       	brcs	80003fb8 <__avr32_udiv64+0x66>
80003fae:	10 3b       	cp.w	r11,r8
80003fb0:	f7 b9 03 01 	sublo	r9,1
80003fb4:	f7 dc e3 0b 	addcs	r11,r11,r12
80003fb8:	f6 08 01 01 	sub	r1,r11,r8
80003fbc:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003fc0:	e2 0e 0d 00 	divu	r0,r1,lr
80003fc4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003fc8:	00 98       	mov	r8,r0
80003fca:	e0 0a 02 4a 	mul	r10,r0,r10
80003fce:	14 33       	cp.w	r3,r10
80003fd0:	c0 82       	brcc	80003fe0 <__avr32_udiv64+0x8e>
80003fd2:	20 18       	sub	r8,1
80003fd4:	18 03       	add	r3,r12
80003fd6:	18 33       	cp.w	r3,r12
80003fd8:	c0 43       	brcs	80003fe0 <__avr32_udiv64+0x8e>
80003fda:	14 33       	cp.w	r3,r10
80003fdc:	f7 b8 03 01 	sublo	r8,1
80003fe0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003fe4:	cd f8       	rjmp	800041a2 <__avr32_udiv64+0x250>
80003fe6:	58 08       	cp.w	r8,0
80003fe8:	c0 51       	brne	80003ff2 <__avr32_udiv64+0xa0>
80003fea:	30 19       	mov	r9,1
80003fec:	f2 08 0d 08 	divu	r8,r9,r8
80003ff0:	10 9c       	mov	r12,r8
80003ff2:	f8 06 12 00 	clz	r6,r12
80003ff6:	c0 41       	brne	80003ffe <__avr32_udiv64+0xac>
80003ff8:	18 1b       	sub	r11,r12
80003ffa:	30 19       	mov	r9,1
80003ffc:	c4 08       	rjmp	8000407c <__avr32_udiv64+0x12a>
80003ffe:	ec 01 11 20 	rsub	r1,r6,32
80004002:	f4 01 0a 49 	lsr	r9,r10,r1
80004006:	f8 06 09 4c 	lsl	r12,r12,r6
8000400a:	f6 06 09 48 	lsl	r8,r11,r6
8000400e:	f6 01 0a 41 	lsr	r1,r11,r1
80004012:	f3 e8 10 08 	or	r8,r9,r8
80004016:	f8 03 16 10 	lsr	r3,r12,0x10
8000401a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000401e:	e2 03 0d 00 	divu	r0,r1,r3
80004022:	f0 0b 16 10 	lsr	r11,r8,0x10
80004026:	00 9e       	mov	lr,r0
80004028:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000402c:	e0 05 02 49 	mul	r9,r0,r5
80004030:	12 3b       	cp.w	r11,r9
80004032:	c0 a2       	brcc	80004046 <__avr32_udiv64+0xf4>
80004034:	20 1e       	sub	lr,1
80004036:	18 0b       	add	r11,r12
80004038:	18 3b       	cp.w	r11,r12
8000403a:	c0 63       	brcs	80004046 <__avr32_udiv64+0xf4>
8000403c:	12 3b       	cp.w	r11,r9
8000403e:	f7 be 03 01 	sublo	lr,1
80004042:	f7 dc e3 0b 	addcs	r11,r11,r12
80004046:	12 1b       	sub	r11,r9
80004048:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000404c:	f6 03 0d 02 	divu	r2,r11,r3
80004050:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80004054:	04 99       	mov	r9,r2
80004056:	e4 05 02 4b 	mul	r11,r2,r5
8000405a:	16 38       	cp.w	r8,r11
8000405c:	c0 a2       	brcc	80004070 <__avr32_udiv64+0x11e>
8000405e:	20 19       	sub	r9,1
80004060:	18 08       	add	r8,r12
80004062:	18 38       	cp.w	r8,r12
80004064:	c0 63       	brcs	80004070 <__avr32_udiv64+0x11e>
80004066:	16 38       	cp.w	r8,r11
80004068:	f7 b9 03 01 	sublo	r9,1
8000406c:	f1 dc e3 08 	addcs	r8,r8,r12
80004070:	f4 06 09 43 	lsl	r3,r10,r6
80004074:	f0 0b 01 0b 	sub	r11,r8,r11
80004078:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000407c:	f8 06 16 10 	lsr	r6,r12,0x10
80004080:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80004084:	f6 06 0d 00 	divu	r0,r11,r6
80004088:	e6 0b 16 10 	lsr	r11,r3,0x10
8000408c:	00 9a       	mov	r10,r0
8000408e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004092:	e0 0e 02 48 	mul	r8,r0,lr
80004096:	10 3b       	cp.w	r11,r8
80004098:	c0 a2       	brcc	800040ac <__avr32_udiv64+0x15a>
8000409a:	20 1a       	sub	r10,1
8000409c:	18 0b       	add	r11,r12
8000409e:	18 3b       	cp.w	r11,r12
800040a0:	c0 63       	brcs	800040ac <__avr32_udiv64+0x15a>
800040a2:	10 3b       	cp.w	r11,r8
800040a4:	f7 ba 03 01 	sublo	r10,1
800040a8:	f7 dc e3 0b 	addcs	r11,r11,r12
800040ac:	f6 08 01 01 	sub	r1,r11,r8
800040b0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800040b4:	e2 06 0d 00 	divu	r0,r1,r6
800040b8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800040bc:	00 98       	mov	r8,r0
800040be:	e0 0e 02 4b 	mul	r11,r0,lr
800040c2:	16 33       	cp.w	r3,r11
800040c4:	c0 82       	brcc	800040d4 <__avr32_udiv64+0x182>
800040c6:	20 18       	sub	r8,1
800040c8:	18 03       	add	r3,r12
800040ca:	18 33       	cp.w	r3,r12
800040cc:	c0 43       	brcs	800040d4 <__avr32_udiv64+0x182>
800040ce:	16 33       	cp.w	r3,r11
800040d0:	f7 b8 03 01 	sublo	r8,1
800040d4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800040d8:	c6 98       	rjmp	800041aa <__avr32_udiv64+0x258>
800040da:	16 39       	cp.w	r9,r11
800040dc:	e0 8b 00 65 	brhi	800041a6 <__avr32_udiv64+0x254>
800040e0:	f2 09 12 00 	clz	r9,r9
800040e4:	c0 b1       	brne	800040fa <__avr32_udiv64+0x1a8>
800040e6:	10 3a       	cp.w	r10,r8
800040e8:	5f 2a       	srhs	r10
800040ea:	1c 3b       	cp.w	r11,lr
800040ec:	5f b8       	srhi	r8
800040ee:	10 4a       	or	r10,r8
800040f0:	f2 0a 18 00 	cp.b	r10,r9
800040f4:	c5 90       	breq	800041a6 <__avr32_udiv64+0x254>
800040f6:	30 18       	mov	r8,1
800040f8:	c5 98       	rjmp	800041aa <__avr32_udiv64+0x258>
800040fa:	f0 09 09 46 	lsl	r6,r8,r9
800040fe:	f2 03 11 20 	rsub	r3,r9,32
80004102:	fc 09 09 4e 	lsl	lr,lr,r9
80004106:	f0 03 0a 48 	lsr	r8,r8,r3
8000410a:	f6 09 09 4c 	lsl	r12,r11,r9
8000410e:	f4 03 0a 42 	lsr	r2,r10,r3
80004112:	ef 46 ff f4 	st.w	r7[-12],r6
80004116:	f6 03 0a 43 	lsr	r3,r11,r3
8000411a:	18 42       	or	r2,r12
8000411c:	f1 ee 10 0c 	or	r12,r8,lr
80004120:	f8 01 16 10 	lsr	r1,r12,0x10
80004124:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80004128:	e6 01 0d 04 	divu	r4,r3,r1
8000412c:	e4 03 16 10 	lsr	r3,r2,0x10
80004130:	08 9e       	mov	lr,r4
80004132:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80004136:	e8 06 02 48 	mul	r8,r4,r6
8000413a:	10 33       	cp.w	r3,r8
8000413c:	c0 a2       	brcc	80004150 <__avr32_udiv64+0x1fe>
8000413e:	20 1e       	sub	lr,1
80004140:	18 03       	add	r3,r12
80004142:	18 33       	cp.w	r3,r12
80004144:	c0 63       	brcs	80004150 <__avr32_udiv64+0x1fe>
80004146:	10 33       	cp.w	r3,r8
80004148:	f7 be 03 01 	sublo	lr,1
8000414c:	e7 dc e3 03 	addcs	r3,r3,r12
80004150:	10 13       	sub	r3,r8
80004152:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80004156:	e6 01 0d 00 	divu	r0,r3,r1
8000415a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000415e:	00 98       	mov	r8,r0
80004160:	e0 06 02 46 	mul	r6,r0,r6
80004164:	0c 3b       	cp.w	r11,r6
80004166:	c0 a2       	brcc	8000417a <__avr32_udiv64+0x228>
80004168:	20 18       	sub	r8,1
8000416a:	18 0b       	add	r11,r12
8000416c:	18 3b       	cp.w	r11,r12
8000416e:	c0 63       	brcs	8000417a <__avr32_udiv64+0x228>
80004170:	0c 3b       	cp.w	r11,r6
80004172:	f7 dc e3 0b 	addcs	r11,r11,r12
80004176:	f7 b8 03 01 	sublo	r8,1
8000417a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000417e:	ee f4 ff f4 	ld.w	r4,r7[-12]
80004182:	0c 1b       	sub	r11,r6
80004184:	f0 04 06 42 	mulu.d	r2,r8,r4
80004188:	06 95       	mov	r5,r3
8000418a:	16 35       	cp.w	r5,r11
8000418c:	e0 8b 00 0a 	brhi	800041a0 <__avr32_udiv64+0x24e>
80004190:	5f 0b       	sreq	r11
80004192:	f4 09 09 49 	lsl	r9,r10,r9
80004196:	12 32       	cp.w	r2,r9
80004198:	5f b9       	srhi	r9
8000419a:	f7 e9 00 09 	and	r9,r11,r9
8000419e:	c0 60       	breq	800041aa <__avr32_udiv64+0x258>
800041a0:	20 18       	sub	r8,1
800041a2:	30 09       	mov	r9,0
800041a4:	c0 38       	rjmp	800041aa <__avr32_udiv64+0x258>
800041a6:	30 09       	mov	r9,0
800041a8:	12 98       	mov	r8,r9
800041aa:	10 9a       	mov	r10,r8
800041ac:	12 93       	mov	r3,r9
800041ae:	10 92       	mov	r2,r8
800041b0:	12 9b       	mov	r11,r9
800041b2:	2f dd       	sub	sp,-12
800041b4:	d8 32       	popm	r0-r7,pc

800041b6 <memcpy>:
800041b6:	58 8a       	cp.w	r10,8
800041b8:	c2 f5       	brlt	80004216 <memcpy+0x60>
800041ba:	f9 eb 10 09 	or	r9,r12,r11
800041be:	e2 19 00 03 	andl	r9,0x3,COH
800041c2:	e0 81 00 97 	brne	800042f0 <memcpy+0x13a>
800041c6:	e0 4a 00 20 	cp.w	r10,32
800041ca:	c3 b4       	brge	80004240 <memcpy+0x8a>
800041cc:	f4 08 14 02 	asr	r8,r10,0x2
800041d0:	f0 09 11 08 	rsub	r9,r8,8
800041d4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800041d8:	76 69       	ld.w	r9,r11[0x18]
800041da:	99 69       	st.w	r12[0x18],r9
800041dc:	76 59       	ld.w	r9,r11[0x14]
800041de:	99 59       	st.w	r12[0x14],r9
800041e0:	76 49       	ld.w	r9,r11[0x10]
800041e2:	99 49       	st.w	r12[0x10],r9
800041e4:	76 39       	ld.w	r9,r11[0xc]
800041e6:	99 39       	st.w	r12[0xc],r9
800041e8:	76 29       	ld.w	r9,r11[0x8]
800041ea:	99 29       	st.w	r12[0x8],r9
800041ec:	76 19       	ld.w	r9,r11[0x4]
800041ee:	99 19       	st.w	r12[0x4],r9
800041f0:	76 09       	ld.w	r9,r11[0x0]
800041f2:	99 09       	st.w	r12[0x0],r9
800041f4:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800041f8:	f8 08 00 28 	add	r8,r12,r8<<0x2
800041fc:	e0 1a 00 03 	andl	r10,0x3
80004200:	f4 0a 11 04 	rsub	r10,r10,4
80004204:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004208:	17 a9       	ld.ub	r9,r11[0x2]
8000420a:	b0 a9       	st.b	r8[0x2],r9
8000420c:	17 99       	ld.ub	r9,r11[0x1]
8000420e:	b0 99       	st.b	r8[0x1],r9
80004210:	17 89       	ld.ub	r9,r11[0x0]
80004212:	b0 89       	st.b	r8[0x0],r9
80004214:	5e fc       	retal	r12
80004216:	f4 0a 11 09 	rsub	r10,r10,9
8000421a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000421e:	17 f9       	ld.ub	r9,r11[0x7]
80004220:	b8 f9       	st.b	r12[0x7],r9
80004222:	17 e9       	ld.ub	r9,r11[0x6]
80004224:	b8 e9       	st.b	r12[0x6],r9
80004226:	17 d9       	ld.ub	r9,r11[0x5]
80004228:	b8 d9       	st.b	r12[0x5],r9
8000422a:	17 c9       	ld.ub	r9,r11[0x4]
8000422c:	b8 c9       	st.b	r12[0x4],r9
8000422e:	17 b9       	ld.ub	r9,r11[0x3]
80004230:	b8 b9       	st.b	r12[0x3],r9
80004232:	17 a9       	ld.ub	r9,r11[0x2]
80004234:	b8 a9       	st.b	r12[0x2],r9
80004236:	17 99       	ld.ub	r9,r11[0x1]
80004238:	b8 99       	st.b	r12[0x1],r9
8000423a:	17 89       	ld.ub	r9,r11[0x0]
8000423c:	b8 89       	st.b	r12[0x0],r9
8000423e:	5e fc       	retal	r12
80004240:	eb cd 40 c0 	pushm	r6-r7,lr
80004244:	18 99       	mov	r9,r12
80004246:	22 0a       	sub	r10,32
80004248:	b7 07       	ld.d	r6,r11++
8000424a:	b3 26       	st.d	r9++,r6
8000424c:	b7 07       	ld.d	r6,r11++
8000424e:	b3 26       	st.d	r9++,r6
80004250:	b7 07       	ld.d	r6,r11++
80004252:	b3 26       	st.d	r9++,r6
80004254:	b7 07       	ld.d	r6,r11++
80004256:	b3 26       	st.d	r9++,r6
80004258:	22 0a       	sub	r10,32
8000425a:	cf 74       	brge	80004248 <memcpy+0x92>
8000425c:	2f 0a       	sub	r10,-16
8000425e:	c0 65       	brlt	8000426a <memcpy+0xb4>
80004260:	b7 07       	ld.d	r6,r11++
80004262:	b3 26       	st.d	r9++,r6
80004264:	b7 07       	ld.d	r6,r11++
80004266:	b3 26       	st.d	r9++,r6
80004268:	21 0a       	sub	r10,16
8000426a:	5c 3a       	neg	r10
8000426c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004270:	d7 03       	nop
80004272:	d7 03       	nop
80004274:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004278:	f3 66 00 0e 	st.b	r9[14],r6
8000427c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004280:	f3 66 00 0d 	st.b	r9[13],r6
80004284:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004288:	f3 66 00 0c 	st.b	r9[12],r6
8000428c:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004290:	f3 66 00 0b 	st.b	r9[11],r6
80004294:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004298:	f3 66 00 0a 	st.b	r9[10],r6
8000429c:	f7 36 00 09 	ld.ub	r6,r11[9]
800042a0:	f3 66 00 09 	st.b	r9[9],r6
800042a4:	f7 36 00 08 	ld.ub	r6,r11[8]
800042a8:	f3 66 00 08 	st.b	r9[8],r6
800042ac:	f7 36 00 07 	ld.ub	r6,r11[7]
800042b0:	f3 66 00 07 	st.b	r9[7],r6
800042b4:	f7 36 00 06 	ld.ub	r6,r11[6]
800042b8:	f3 66 00 06 	st.b	r9[6],r6
800042bc:	f7 36 00 05 	ld.ub	r6,r11[5]
800042c0:	f3 66 00 05 	st.b	r9[5],r6
800042c4:	f7 36 00 04 	ld.ub	r6,r11[4]
800042c8:	f3 66 00 04 	st.b	r9[4],r6
800042cc:	f7 36 00 03 	ld.ub	r6,r11[3]
800042d0:	f3 66 00 03 	st.b	r9[3],r6
800042d4:	f7 36 00 02 	ld.ub	r6,r11[2]
800042d8:	f3 66 00 02 	st.b	r9[2],r6
800042dc:	f7 36 00 01 	ld.ub	r6,r11[1]
800042e0:	f3 66 00 01 	st.b	r9[1],r6
800042e4:	f7 36 00 00 	ld.ub	r6,r11[0]
800042e8:	f3 66 00 00 	st.b	r9[0],r6
800042ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800042f0:	20 1a       	sub	r10,1
800042f2:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800042f6:	f8 0a 0b 09 	st.b	r12[r10],r9
800042fa:	cf b1       	brne	800042f0 <memcpy+0x13a>
800042fc:	5e fc       	retal	r12

800042fe <memset>:
800042fe:	18 98       	mov	r8,r12
80004300:	c0 38       	rjmp	80004306 <memset+0x8>
80004302:	10 cb       	st.b	r8++,r11
80004304:	20 1a       	sub	r10,1
80004306:	58 0a       	cp.w	r10,0
80004308:	cf d1       	brne	80004302 <memset+0x4>
8000430a:	5e fc       	retal	r12

8000430c <sprintf>:
8000430c:	d4 01       	pushm	lr
8000430e:	21 7d       	sub	sp,92
80004310:	e0 68 ff ff 	mov	r8,65535
80004314:	ea 18 7f ff 	orh	r8,0x7fff
80004318:	50 58       	stdsp	sp[0x14],r8
8000431a:	50 28       	stdsp	sp[0x8],r8
8000431c:	e0 68 02 08 	mov	r8,520
80004320:	ba 68       	st.h	sp[0xc],r8
80004322:	3f f8       	mov	r8,-1
80004324:	ba 78       	st.h	sp[0xe],r8
80004326:	e0 68 01 18 	mov	r8,280
8000432a:	50 4c       	stdsp	sp[0x10],r12
8000432c:	16 9a       	mov	r10,r11
8000432e:	50 0c       	stdsp	sp[0x0],r12
80004330:	fa c9 ff a0 	sub	r9,sp,-96
80004334:	70 0c       	ld.w	r12,r8[0x0]
80004336:	1a 9b       	mov	r11,sp
80004338:	c9 cd       	rcall	80004670 <_vfprintf_r>
8000433a:	30 09       	mov	r9,0
8000433c:	40 08       	lddsp	r8,sp[0x0]
8000433e:	b0 89       	st.b	r8[0x0],r9
80004340:	2e 9d       	sub	sp,-92
80004342:	d8 02       	popm	pc

80004344 <get_arg>:
80004344:	d4 31       	pushm	r0-r7,lr
80004346:	20 8d       	sub	sp,32
80004348:	fa c4 ff bc 	sub	r4,sp,-68
8000434c:	50 4b       	stdsp	sp[0x10],r11
8000434e:	68 2e       	ld.w	lr,r4[0x8]
80004350:	50 58       	stdsp	sp[0x14],r8
80004352:	12 96       	mov	r6,r9
80004354:	7c 0b       	ld.w	r11,lr[0x0]
80004356:	70 05       	ld.w	r5,r8[0x0]
80004358:	50 6e       	stdsp	sp[0x18],lr
8000435a:	58 0b       	cp.w	r11,0
8000435c:	f4 0b 17 00 	moveq	r11,r10
80004360:	68 03       	ld.w	r3,r4[0x0]
80004362:	68 11       	ld.w	r1,r4[0x4]
80004364:	40 49       	lddsp	r9,sp[0x10]
80004366:	30 08       	mov	r8,0
80004368:	c2 69       	rjmp	800045b4 <get_arg+0x270>
8000436a:	2f fb       	sub	r11,-1
8000436c:	32 5c       	mov	r12,37
8000436e:	17 8a       	ld.ub	r10,r11[0x0]
80004370:	f8 0a 18 00 	cp.b	r10,r12
80004374:	5f 1e       	srne	lr
80004376:	f0 0a 18 00 	cp.b	r10,r8
8000437a:	5f 1c       	srne	r12
8000437c:	fd ec 00 0c 	and	r12,lr,r12
80004380:	f0 0c 18 00 	cp.b	r12,r8
80004384:	cf 31       	brne	8000436a <get_arg+0x26>
80004386:	58 0a       	cp.w	r10,0
80004388:	e0 80 01 23 	breq	800045ce <get_arg+0x28a>
8000438c:	30 0c       	mov	r12,0
8000438e:	3f fa       	mov	r10,-1
80004390:	18 90       	mov	r0,r12
80004392:	50 3a       	stdsp	sp[0xc],r10
80004394:	18 94       	mov	r4,r12
80004396:	18 92       	mov	r2,r12
80004398:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000439c:	16 97       	mov	r7,r11
8000439e:	50 7c       	stdsp	sp[0x1c],r12
800043a0:	fe cc a2 f4 	sub	r12,pc,-23820
800043a4:	0f 3a       	ld.ub	r10,r7++
800043a6:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800043aa:	40 7c       	lddsp	r12,sp[0x1c]
800043ac:	1c 0c       	add	r12,lr
800043ae:	fe ce a3 ca 	sub	lr,pc,-23606
800043b2:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800043b6:	20 1e       	sub	lr,1
800043b8:	50 0e       	stdsp	sp[0x0],lr
800043ba:	fe ce a4 42 	sub	lr,pc,-23486
800043be:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800043c2:	50 7c       	stdsp	sp[0x1c],r12
800043c4:	40 0c       	lddsp	r12,sp[0x0]
800043c6:	58 7c       	cp.w	r12,7
800043c8:	e0 8b 00 ef 	brhi	800045a6 <get_arg+0x262>
800043cc:	fe ce a5 f4 	sub	lr,pc,-23052
800043d0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800043d4:	36 8b       	mov	r11,104
800043d6:	f6 0a 18 00 	cp.b	r10,r11
800043da:	e0 80 00 e6 	breq	800045a6 <get_arg+0x262>
800043de:	37 1b       	mov	r11,113
800043e0:	f6 0a 18 00 	cp.b	r10,r11
800043e4:	c0 70       	breq	800043f2 <get_arg+0xae>
800043e6:	34 cb       	mov	r11,76
800043e8:	f6 0a 18 00 	cp.b	r10,r11
800043ec:	c0 51       	brne	800043f6 <get_arg+0xb2>
800043ee:	a3 b4       	sbr	r4,0x3
800043f0:	cd b8       	rjmp	800045a6 <get_arg+0x262>
800043f2:	a5 b4       	sbr	r4,0x5
800043f4:	cd 98       	rjmp	800045a6 <get_arg+0x262>
800043f6:	08 9a       	mov	r10,r4
800043f8:	0e 9b       	mov	r11,r7
800043fa:	a5 aa       	sbr	r10,0x4
800043fc:	17 3c       	ld.ub	r12,r11++
800043fe:	a5 b4       	sbr	r4,0x5
80004400:	36 ce       	mov	lr,108
80004402:	fc 0c 18 00 	cp.b	r12,lr
80004406:	e0 80 00 d1 	breq	800045a8 <get_arg+0x264>
8000440a:	14 94       	mov	r4,r10
8000440c:	cc d8       	rjmp	800045a6 <get_arg+0x262>
8000440e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80004412:	36 7c       	mov	r12,103
80004414:	f8 0a 18 00 	cp.b	r10,r12
80004418:	e0 8b 00 27 	brhi	80004466 <get_arg+0x122>
8000441c:	36 5b       	mov	r11,101
8000441e:	f6 0a 18 00 	cp.b	r10,r11
80004422:	c4 82       	brcc	800044b2 <get_arg+0x16e>
80004424:	34 fb       	mov	r11,79
80004426:	f6 0a 18 00 	cp.b	r10,r11
8000442a:	c4 80       	breq	800044ba <get_arg+0x176>
8000442c:	e0 8b 00 0c 	brhi	80004444 <get_arg+0x100>
80004430:	34 5b       	mov	r11,69
80004432:	f6 0a 18 00 	cp.b	r10,r11
80004436:	c3 e0       	breq	800044b2 <get_arg+0x16e>
80004438:	34 7b       	mov	r11,71
8000443a:	f6 0a 18 00 	cp.b	r10,r11
8000443e:	c3 a0       	breq	800044b2 <get_arg+0x16e>
80004440:	34 4b       	mov	r11,68
80004442:	c0 88       	rjmp	80004452 <get_arg+0x10e>
80004444:	35 8b       	mov	r11,88
80004446:	f6 0a 18 00 	cp.b	r10,r11
8000444a:	c2 c0       	breq	800044a2 <get_arg+0x15e>
8000444c:	e0 8b 00 07 	brhi	8000445a <get_arg+0x116>
80004450:	35 5b       	mov	r11,85
80004452:	f6 0a 18 00 	cp.b	r10,r11
80004456:	c3 51       	brne	800044c0 <get_arg+0x17c>
80004458:	c3 18       	rjmp	800044ba <get_arg+0x176>
8000445a:	36 3b       	mov	r11,99
8000445c:	f6 0a 18 00 	cp.b	r10,r11
80004460:	c2 f0       	breq	800044be <get_arg+0x17a>
80004462:	36 4b       	mov	r11,100
80004464:	c0 e8       	rjmp	80004480 <get_arg+0x13c>
80004466:	37 0b       	mov	r11,112
80004468:	f6 0a 18 00 	cp.b	r10,r11
8000446c:	c2 50       	breq	800044b6 <get_arg+0x172>
8000446e:	e0 8b 00 0d 	brhi	80004488 <get_arg+0x144>
80004472:	36 eb       	mov	r11,110
80004474:	f6 0a 18 00 	cp.b	r10,r11
80004478:	c1 f0       	breq	800044b6 <get_arg+0x172>
8000447a:	e0 8b 00 14 	brhi	800044a2 <get_arg+0x15e>
8000447e:	36 9b       	mov	r11,105
80004480:	f6 0a 18 00 	cp.b	r10,r11
80004484:	c1 e1       	brne	800044c0 <get_arg+0x17c>
80004486:	c0 e8       	rjmp	800044a2 <get_arg+0x15e>
80004488:	37 5b       	mov	r11,117
8000448a:	f6 0a 18 00 	cp.b	r10,r11
8000448e:	c0 a0       	breq	800044a2 <get_arg+0x15e>
80004490:	37 8b       	mov	r11,120
80004492:	f6 0a 18 00 	cp.b	r10,r11
80004496:	c0 60       	breq	800044a2 <get_arg+0x15e>
80004498:	37 3b       	mov	r11,115
8000449a:	f6 0a 18 00 	cp.b	r10,r11
8000449e:	c1 11       	brne	800044c0 <get_arg+0x17c>
800044a0:	c0 b8       	rjmp	800044b6 <get_arg+0x172>
800044a2:	ed b4 00 04 	bld	r4,0x4
800044a6:	c0 a0       	breq	800044ba <get_arg+0x176>
800044a8:	ed b4 00 05 	bld	r4,0x5
800044ac:	c0 91       	brne	800044be <get_arg+0x17a>
800044ae:	30 20       	mov	r0,2
800044b0:	c0 88       	rjmp	800044c0 <get_arg+0x17c>
800044b2:	30 40       	mov	r0,4
800044b4:	c0 68       	rjmp	800044c0 <get_arg+0x17c>
800044b6:	30 30       	mov	r0,3
800044b8:	c0 48       	rjmp	800044c0 <get_arg+0x17c>
800044ba:	30 10       	mov	r0,1
800044bc:	c0 28       	rjmp	800044c0 <get_arg+0x17c>
800044be:	30 00       	mov	r0,0
800044c0:	40 3b       	lddsp	r11,sp[0xc]
800044c2:	5b fb       	cp.w	r11,-1
800044c4:	c0 40       	breq	800044cc <get_arg+0x188>
800044c6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800044ca:	c6 e8       	rjmp	800045a6 <get_arg+0x262>
800044cc:	58 60       	cp.w	r0,6
800044ce:	e0 8b 00 6c 	brhi	800045a6 <get_arg+0x262>
800044d2:	6c 0a       	ld.w	r10,r6[0x0]
800044d4:	ea cc ff ff 	sub	r12,r5,-1
800044d8:	fe ce a6 e0 	sub	lr,pc,-22816
800044dc:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800044e0:	f4 cb ff f8 	sub	r11,r10,-8
800044e4:	8d 0b       	st.w	r6[0x0],r11
800044e6:	f4 ea 00 00 	ld.d	r10,r10[0]
800044ea:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800044ee:	c0 f8       	rjmp	8000450c <get_arg+0x1c8>
800044f0:	f4 cb ff fc 	sub	r11,r10,-4
800044f4:	8d 0b       	st.w	r6[0x0],r11
800044f6:	74 0a       	ld.w	r10,r10[0x0]
800044f8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800044fc:	c0 88       	rjmp	8000450c <get_arg+0x1c8>
800044fe:	f4 cb ff f8 	sub	r11,r10,-8
80004502:	8d 0b       	st.w	r6[0x0],r11
80004504:	f4 ea 00 00 	ld.d	r10,r10[0]
80004508:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000450c:	0e 9b       	mov	r11,r7
8000450e:	18 95       	mov	r5,r12
80004510:	c4 c8       	rjmp	800045a8 <get_arg+0x264>
80004512:	62 0a       	ld.w	r10,r1[0x0]
80004514:	5b fa       	cp.w	r10,-1
80004516:	c0 a1       	brne	8000452a <get_arg+0x1e6>
80004518:	50 19       	stdsp	sp[0x4],r9
8000451a:	50 28       	stdsp	sp[0x8],r8
8000451c:	e0 6a 00 80 	mov	r10,128
80004520:	30 0b       	mov	r11,0
80004522:	02 9c       	mov	r12,r1
80004524:	ce de       	rcall	800042fe <memset>
80004526:	40 28       	lddsp	r8,sp[0x8]
80004528:	40 19       	lddsp	r9,sp[0x4]
8000452a:	e4 cc 00 01 	sub	r12,r2,1
8000452e:	0e 9b       	mov	r11,r7
80004530:	50 3c       	stdsp	sp[0xc],r12
80004532:	f2 0c 0c 49 	max	r9,r9,r12
80004536:	c3 98       	rjmp	800045a8 <get_arg+0x264>
80004538:	62 0a       	ld.w	r10,r1[0x0]
8000453a:	5b fa       	cp.w	r10,-1
8000453c:	c0 a1       	brne	80004550 <get_arg+0x20c>
8000453e:	50 19       	stdsp	sp[0x4],r9
80004540:	50 28       	stdsp	sp[0x8],r8
80004542:	e0 6a 00 80 	mov	r10,128
80004546:	30 0b       	mov	r11,0
80004548:	02 9c       	mov	r12,r1
8000454a:	cd ae       	rcall	800042fe <memset>
8000454c:	40 28       	lddsp	r8,sp[0x8]
8000454e:	40 19       	lddsp	r9,sp[0x4]
80004550:	20 12       	sub	r2,1
80004552:	30 0a       	mov	r10,0
80004554:	0e 9b       	mov	r11,r7
80004556:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000455a:	f2 02 0c 49 	max	r9,r9,r2
8000455e:	c2 58       	rjmp	800045a8 <get_arg+0x264>
80004560:	16 97       	mov	r7,r11
80004562:	6c 0a       	ld.w	r10,r6[0x0]
80004564:	f4 cb ff fc 	sub	r11,r10,-4
80004568:	8d 0b       	st.w	r6[0x0],r11
8000456a:	74 0a       	ld.w	r10,r10[0x0]
8000456c:	0e 9b       	mov	r11,r7
8000456e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004572:	2f f5       	sub	r5,-1
80004574:	c1 a8       	rjmp	800045a8 <get_arg+0x264>
80004576:	f4 c2 00 30 	sub	r2,r10,48
8000457a:	c0 68       	rjmp	80004586 <get_arg+0x242>
8000457c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004580:	2f f7       	sub	r7,-1
80004582:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004586:	0f 8a       	ld.ub	r10,r7[0x0]
80004588:	58 0a       	cp.w	r10,0
8000458a:	c0 e0       	breq	800045a6 <get_arg+0x262>
8000458c:	23 0a       	sub	r10,48
8000458e:	58 9a       	cp.w	r10,9
80004590:	fe 98 ff f6 	brls	8000457c <get_arg+0x238>
80004594:	c0 98       	rjmp	800045a6 <get_arg+0x262>
80004596:	2f f7       	sub	r7,-1
80004598:	0f 8a       	ld.ub	r10,r7[0x0]
8000459a:	58 0a       	cp.w	r10,0
8000459c:	c0 50       	breq	800045a6 <get_arg+0x262>
8000459e:	23 0a       	sub	r10,48
800045a0:	58 9a       	cp.w	r10,9
800045a2:	fe 98 ff fa 	brls	80004596 <get_arg+0x252>
800045a6:	0e 9b       	mov	r11,r7
800045a8:	40 7c       	lddsp	r12,sp[0x1c]
800045aa:	30 ba       	mov	r10,11
800045ac:	f4 0c 18 00 	cp.b	r12,r10
800045b0:	fe 91 fe f4 	brne	80004398 <get_arg+0x54>
800045b4:	40 42       	lddsp	r2,sp[0x10]
800045b6:	17 8c       	ld.ub	r12,r11[0x0]
800045b8:	0a 32       	cp.w	r2,r5
800045ba:	5f 4a       	srge	r10
800045bc:	f0 0c 18 00 	cp.b	r12,r8
800045c0:	5f 1c       	srne	r12
800045c2:	f9 ea 00 0a 	and	r10,r12,r10
800045c6:	f0 0a 18 00 	cp.b	r10,r8
800045ca:	fe 91 fe d1 	brne	8000436c <get_arg+0x28>
800045ce:	30 08       	mov	r8,0
800045d0:	40 4e       	lddsp	lr,sp[0x10]
800045d2:	17 8a       	ld.ub	r10,r11[0x0]
800045d4:	e2 05 00 21 	add	r1,r1,r5<<0x2
800045d8:	f0 0a 18 00 	cp.b	r10,r8
800045dc:	fc 09 17 10 	movne	r9,lr
800045e0:	e6 05 00 38 	add	r8,r3,r5<<0x3
800045e4:	06 9e       	mov	lr,r3
800045e6:	c2 a8       	rjmp	8000463a <get_arg+0x2f6>
800045e8:	62 0a       	ld.w	r10,r1[0x0]
800045ea:	58 3a       	cp.w	r10,3
800045ec:	c1 e0       	breq	80004628 <get_arg+0x2e4>
800045ee:	e0 89 00 07 	brgt	800045fc <get_arg+0x2b8>
800045f2:	58 1a       	cp.w	r10,1
800045f4:	c1 a0       	breq	80004628 <get_arg+0x2e4>
800045f6:	58 2a       	cp.w	r10,2
800045f8:	c1 81       	brne	80004628 <get_arg+0x2e4>
800045fa:	c0 58       	rjmp	80004604 <get_arg+0x2c0>
800045fc:	58 5a       	cp.w	r10,5
800045fe:	c0 c0       	breq	80004616 <get_arg+0x2d2>
80004600:	c0 b5       	brlt	80004616 <get_arg+0x2d2>
80004602:	c1 38       	rjmp	80004628 <get_arg+0x2e4>
80004604:	6c 0a       	ld.w	r10,r6[0x0]
80004606:	f4 cc ff f8 	sub	r12,r10,-8
8000460a:	8d 0c       	st.w	r6[0x0],r12
8000460c:	f4 e2 00 00 	ld.d	r2,r10[0]
80004610:	f0 e3 00 00 	st.d	r8[0],r2
80004614:	c1 08       	rjmp	80004634 <get_arg+0x2f0>
80004616:	6c 0a       	ld.w	r10,r6[0x0]
80004618:	f4 cc ff f8 	sub	r12,r10,-8
8000461c:	8d 0c       	st.w	r6[0x0],r12
8000461e:	f4 e2 00 00 	ld.d	r2,r10[0]
80004622:	f0 e3 00 00 	st.d	r8[0],r2
80004626:	c0 78       	rjmp	80004634 <get_arg+0x2f0>
80004628:	6c 0a       	ld.w	r10,r6[0x0]
8000462a:	f4 cc ff fc 	sub	r12,r10,-4
8000462e:	8d 0c       	st.w	r6[0x0],r12
80004630:	74 0a       	ld.w	r10,r10[0x0]
80004632:	91 0a       	st.w	r8[0x0],r10
80004634:	2f f5       	sub	r5,-1
80004636:	2f 88       	sub	r8,-8
80004638:	2f c1       	sub	r1,-4
8000463a:	12 35       	cp.w	r5,r9
8000463c:	fe 9a ff d6 	brle	800045e8 <get_arg+0x2a4>
80004640:	1c 93       	mov	r3,lr
80004642:	40 52       	lddsp	r2,sp[0x14]
80004644:	40 6e       	lddsp	lr,sp[0x18]
80004646:	85 05       	st.w	r2[0x0],r5
80004648:	9d 0b       	st.w	lr[0x0],r11
8000464a:	40 4b       	lddsp	r11,sp[0x10]
8000464c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004650:	2f 8d       	sub	sp,-32
80004652:	d8 32       	popm	r0-r7,pc

80004654 <__sprint_r>:
80004654:	d4 21       	pushm	r4-r7,lr
80004656:	14 97       	mov	r7,r10
80004658:	74 28       	ld.w	r8,r10[0x8]
8000465a:	58 08       	cp.w	r8,0
8000465c:	c0 41       	brne	80004664 <__sprint_r+0x10>
8000465e:	95 18       	st.w	r10[0x4],r8
80004660:	10 9c       	mov	r12,r8
80004662:	d8 22       	popm	r4-r7,pc
80004664:	e0 a0 18 b4 	rcall	800077cc <__sfvwrite_r>
80004668:	30 08       	mov	r8,0
8000466a:	8f 18       	st.w	r7[0x4],r8
8000466c:	8f 28       	st.w	r7[0x8],r8
8000466e:	d8 22       	popm	r4-r7,pc

80004670 <_vfprintf_r>:
80004670:	d4 31       	pushm	r0-r7,lr
80004672:	fa cd 06 bc 	sub	sp,sp,1724
80004676:	51 09       	stdsp	sp[0x40],r9
80004678:	16 91       	mov	r1,r11
8000467a:	14 97       	mov	r7,r10
8000467c:	18 95       	mov	r5,r12
8000467e:	e0 a0 1a 1d 	rcall	80007ab8 <_localeconv_r>
80004682:	78 0c       	ld.w	r12,r12[0x0]
80004684:	50 cc       	stdsp	sp[0x30],r12
80004686:	58 05       	cp.w	r5,0
80004688:	c0 70       	breq	80004696 <_vfprintf_r+0x26>
8000468a:	6a 68       	ld.w	r8,r5[0x18]
8000468c:	58 08       	cp.w	r8,0
8000468e:	c0 41       	brne	80004696 <_vfprintf_r+0x26>
80004690:	0a 9c       	mov	r12,r5
80004692:	e0 a0 17 3d 	rcall	8000750c <__sinit>
80004696:	fe c8 a4 da 	sub	r8,pc,-23334
8000469a:	10 31       	cp.w	r1,r8
8000469c:	c0 31       	brne	800046a2 <_vfprintf_r+0x32>
8000469e:	6a 01       	ld.w	r1,r5[0x0]
800046a0:	c0 c8       	rjmp	800046b8 <_vfprintf_r+0x48>
800046a2:	fe c8 a4 c6 	sub	r8,pc,-23354
800046a6:	10 31       	cp.w	r1,r8
800046a8:	c0 31       	brne	800046ae <_vfprintf_r+0x3e>
800046aa:	6a 11       	ld.w	r1,r5[0x4]
800046ac:	c0 68       	rjmp	800046b8 <_vfprintf_r+0x48>
800046ae:	fe c8 a4 b2 	sub	r8,pc,-23374
800046b2:	10 31       	cp.w	r1,r8
800046b4:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800046b8:	82 68       	ld.sh	r8,r1[0xc]
800046ba:	ed b8 00 03 	bld	r8,0x3
800046be:	c0 41       	brne	800046c6 <_vfprintf_r+0x56>
800046c0:	62 48       	ld.w	r8,r1[0x10]
800046c2:	58 08       	cp.w	r8,0
800046c4:	c0 71       	brne	800046d2 <_vfprintf_r+0x62>
800046c6:	02 9b       	mov	r11,r1
800046c8:	0a 9c       	mov	r12,r5
800046ca:	e0 a0 0f 5d 	rcall	80006584 <__swsetup_r>
800046ce:	e0 81 0f 54 	brne	80006576 <_vfprintf_r+0x1f06>
800046d2:	82 68       	ld.sh	r8,r1[0xc]
800046d4:	10 99       	mov	r9,r8
800046d6:	e2 19 00 1a 	andl	r9,0x1a,COH
800046da:	58 a9       	cp.w	r9,10
800046dc:	c3 c1       	brne	80004754 <_vfprintf_r+0xe4>
800046de:	82 79       	ld.sh	r9,r1[0xe]
800046e0:	30 0a       	mov	r10,0
800046e2:	f4 09 19 00 	cp.h	r9,r10
800046e6:	c3 75       	brlt	80004754 <_vfprintf_r+0xe4>
800046e8:	a1 d8       	cbr	r8,0x1
800046ea:	fb 58 05 d0 	st.h	sp[1488],r8
800046ee:	62 88       	ld.w	r8,r1[0x20]
800046f0:	fb 48 05 e4 	st.w	sp[1508],r8
800046f4:	62 a8       	ld.w	r8,r1[0x28]
800046f6:	fb 48 05 ec 	st.w	sp[1516],r8
800046fa:	fa c8 ff bc 	sub	r8,sp,-68
800046fe:	fb 48 05 d4 	st.w	sp[1492],r8
80004702:	fb 48 05 c4 	st.w	sp[1476],r8
80004706:	e0 68 04 00 	mov	r8,1024
8000470a:	fb 48 05 d8 	st.w	sp[1496],r8
8000470e:	fb 48 05 cc 	st.w	sp[1484],r8
80004712:	30 08       	mov	r8,0
80004714:	fb 59 05 d2 	st.h	sp[1490],r9
80004718:	0e 9a       	mov	r10,r7
8000471a:	41 09       	lddsp	r9,sp[0x40]
8000471c:	fa c7 fa 3c 	sub	r7,sp,-1476
80004720:	fb 48 05 dc 	st.w	sp[1500],r8
80004724:	0a 9c       	mov	r12,r5
80004726:	0e 9b       	mov	r11,r7
80004728:	ca 4f       	rcall	80004670 <_vfprintf_r>
8000472a:	50 bc       	stdsp	sp[0x2c],r12
8000472c:	c0 95       	brlt	8000473e <_vfprintf_r+0xce>
8000472e:	0e 9b       	mov	r11,r7
80004730:	0a 9c       	mov	r12,r5
80004732:	e0 a0 16 15 	rcall	8000735c <_fflush_r>
80004736:	40 be       	lddsp	lr,sp[0x2c]
80004738:	f9 be 01 ff 	movne	lr,-1
8000473c:	50 be       	stdsp	sp[0x2c],lr
8000473e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004742:	ed b8 00 06 	bld	r8,0x6
80004746:	e0 81 0f 1a 	brne	8000657a <_vfprintf_r+0x1f0a>
8000474a:	82 68       	ld.sh	r8,r1[0xc]
8000474c:	a7 a8       	sbr	r8,0x6
8000474e:	a2 68       	st.h	r1[0xc],r8
80004750:	e0 8f 0f 15 	bral	8000657a <_vfprintf_r+0x1f0a>
80004754:	30 08       	mov	r8,0
80004756:	fb 48 06 b4 	st.w	sp[1716],r8
8000475a:	fb 48 06 90 	st.w	sp[1680],r8
8000475e:	fb 48 06 8c 	st.w	sp[1676],r8
80004762:	fb 48 06 b0 	st.w	sp[1712],r8
80004766:	30 08       	mov	r8,0
80004768:	30 09       	mov	r9,0
8000476a:	50 a7       	stdsp	sp[0x28],r7
8000476c:	50 78       	stdsp	sp[0x1c],r8
8000476e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004772:	3f f8       	mov	r8,-1
80004774:	50 59       	stdsp	sp[0x14],r9
80004776:	fb 43 06 88 	st.w	sp[1672],r3
8000477a:	fb 48 05 44 	st.w	sp[1348],r8
8000477e:	12 9c       	mov	r12,r9
80004780:	50 69       	stdsp	sp[0x18],r9
80004782:	50 d9       	stdsp	sp[0x34],r9
80004784:	50 e9       	stdsp	sp[0x38],r9
80004786:	50 b9       	stdsp	sp[0x2c],r9
80004788:	12 97       	mov	r7,r9
8000478a:	0a 94       	mov	r4,r5
8000478c:	40 a2       	lddsp	r2,sp[0x28]
8000478e:	32 5a       	mov	r10,37
80004790:	30 08       	mov	r8,0
80004792:	c0 28       	rjmp	80004796 <_vfprintf_r+0x126>
80004794:	2f f2       	sub	r2,-1
80004796:	05 89       	ld.ub	r9,r2[0x0]
80004798:	f0 09 18 00 	cp.b	r9,r8
8000479c:	5f 1b       	srne	r11
8000479e:	f4 09 18 00 	cp.b	r9,r10
800047a2:	5f 19       	srne	r9
800047a4:	f3 eb 00 0b 	and	r11,r9,r11
800047a8:	f0 0b 18 00 	cp.b	r11,r8
800047ac:	cf 41       	brne	80004794 <_vfprintf_r+0x124>
800047ae:	40 ab       	lddsp	r11,sp[0x28]
800047b0:	e4 0b 01 06 	sub	r6,r2,r11
800047b4:	c1 e0       	breq	800047f0 <_vfprintf_r+0x180>
800047b6:	fa f8 06 90 	ld.w	r8,sp[1680]
800047ba:	0c 08       	add	r8,r6
800047bc:	87 0b       	st.w	r3[0x0],r11
800047be:	fb 48 06 90 	st.w	sp[1680],r8
800047c2:	87 16       	st.w	r3[0x4],r6
800047c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800047c8:	2f f8       	sub	r8,-1
800047ca:	fb 48 06 8c 	st.w	sp[1676],r8
800047ce:	58 78       	cp.w	r8,7
800047d0:	e0 89 00 04 	brgt	800047d8 <_vfprintf_r+0x168>
800047d4:	2f 83       	sub	r3,-8
800047d6:	c0 a8       	rjmp	800047ea <_vfprintf_r+0x17a>
800047d8:	fa ca f9 78 	sub	r10,sp,-1672
800047dc:	02 9b       	mov	r11,r1
800047de:	08 9c       	mov	r12,r4
800047e0:	c3 af       	rcall	80004654 <__sprint_r>
800047e2:	e0 81 0e c6 	brne	8000656e <_vfprintf_r+0x1efe>
800047e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800047ea:	40 ba       	lddsp	r10,sp[0x2c]
800047ec:	0c 0a       	add	r10,r6
800047ee:	50 ba       	stdsp	sp[0x2c],r10
800047f0:	05 89       	ld.ub	r9,r2[0x0]
800047f2:	30 08       	mov	r8,0
800047f4:	f0 09 18 00 	cp.b	r9,r8
800047f8:	e0 80 0e aa 	breq	8000654c <_vfprintf_r+0x1edc>
800047fc:	30 09       	mov	r9,0
800047fe:	fb 68 06 bb 	st.b	sp[1723],r8
80004802:	0e 96       	mov	r6,r7
80004804:	e4 c8 ff ff 	sub	r8,r2,-1
80004808:	3f fe       	mov	lr,-1
8000480a:	50 93       	stdsp	sp[0x24],r3
8000480c:	50 41       	stdsp	sp[0x10],r1
8000480e:	0e 93       	mov	r3,r7
80004810:	04 91       	mov	r1,r2
80004812:	50 89       	stdsp	sp[0x20],r9
80004814:	50 a8       	stdsp	sp[0x28],r8
80004816:	50 2e       	stdsp	sp[0x8],lr
80004818:	50 39       	stdsp	sp[0xc],r9
8000481a:	12 95       	mov	r5,r9
8000481c:	12 90       	mov	r0,r9
8000481e:	10 97       	mov	r7,r8
80004820:	08 92       	mov	r2,r4
80004822:	c0 78       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004824:	3f fc       	mov	r12,-1
80004826:	08 97       	mov	r7,r4
80004828:	50 2c       	stdsp	sp[0x8],r12
8000482a:	c0 38       	rjmp	80004830 <_vfprintf_r+0x1c0>
8000482c:	30 0b       	mov	r11,0
8000482e:	50 3b       	stdsp	sp[0xc],r11
80004830:	0f 38       	ld.ub	r8,r7++
80004832:	c0 28       	rjmp	80004836 <_vfprintf_r+0x1c6>
80004834:	12 90       	mov	r0,r9
80004836:	f0 c9 00 20 	sub	r9,r8,32
8000483a:	e0 49 00 58 	cp.w	r9,88
8000483e:	e0 8b 0a 30 	brhi	80005c9e <_vfprintf_r+0x162e>
80004842:	fe ca aa 2e 	sub	r10,pc,-21970
80004846:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000484a:	50 a7       	stdsp	sp[0x28],r7
8000484c:	50 80       	stdsp	sp[0x20],r0
8000484e:	0c 97       	mov	r7,r6
80004850:	04 94       	mov	r4,r2
80004852:	06 96       	mov	r6,r3
80004854:	02 92       	mov	r2,r1
80004856:	fe c9 a8 06 	sub	r9,pc,-22522
8000485a:	40 93       	lddsp	r3,sp[0x24]
8000485c:	10 90       	mov	r0,r8
8000485e:	40 41       	lddsp	r1,sp[0x10]
80004860:	50 d9       	stdsp	sp[0x34],r9
80004862:	e0 8f 08 8e 	bral	8000597e <_vfprintf_r+0x130e>
80004866:	30 08       	mov	r8,0
80004868:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000486c:	f0 09 18 00 	cp.b	r9,r8
80004870:	ce 01       	brne	80004830 <_vfprintf_r+0x1c0>
80004872:	32 08       	mov	r8,32
80004874:	c6 e8       	rjmp	80004950 <_vfprintf_r+0x2e0>
80004876:	a1 a5       	sbr	r5,0x0
80004878:	cd cb       	rjmp	80004830 <_vfprintf_r+0x1c0>
8000487a:	0f 89       	ld.ub	r9,r7[0x0]
8000487c:	f2 c8 00 30 	sub	r8,r9,48
80004880:	58 98       	cp.w	r8,9
80004882:	e0 8b 00 1d 	brhi	800048bc <_vfprintf_r+0x24c>
80004886:	ee c8 ff ff 	sub	r8,r7,-1
8000488a:	30 0b       	mov	r11,0
8000488c:	23 09       	sub	r9,48
8000488e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004892:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004896:	11 39       	ld.ub	r9,r8++
80004898:	f2 ca 00 30 	sub	r10,r9,48
8000489c:	58 9a       	cp.w	r10,9
8000489e:	fe 98 ff f7 	brls	8000488c <_vfprintf_r+0x21c>
800048a2:	e0 49 00 24 	cp.w	r9,36
800048a6:	cc 31       	brne	8000482c <_vfprintf_r+0x1bc>
800048a8:	e0 4b 00 20 	cp.w	r11,32
800048ac:	e0 89 0e 60 	brgt	8000656c <_vfprintf_r+0x1efc>
800048b0:	20 1b       	sub	r11,1
800048b2:	fa f9 06 b4 	ld.w	r9,sp[1716]
800048b6:	12 3b       	cp.w	r11,r9
800048b8:	c0 95       	brlt	800048ca <_vfprintf_r+0x25a>
800048ba:	c1 08       	rjmp	800048da <_vfprintf_r+0x26a>
800048bc:	fa f9 06 b4 	ld.w	r9,sp[1716]
800048c0:	ec ca ff ff 	sub	r10,r6,-1
800048c4:	12 36       	cp.w	r6,r9
800048c6:	c1 f5       	brlt	80004904 <_vfprintf_r+0x294>
800048c8:	c2 68       	rjmp	80004914 <_vfprintf_r+0x2a4>
800048ca:	fa ce f9 44 	sub	lr,sp,-1724
800048ce:	10 97       	mov	r7,r8
800048d0:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800048d4:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800048d8:	c3 58       	rjmp	80004942 <_vfprintf_r+0x2d2>
800048da:	10 97       	mov	r7,r8
800048dc:	fa c8 f9 50 	sub	r8,sp,-1712
800048e0:	1a d8       	st.w	--sp,r8
800048e2:	fa c8 fa b8 	sub	r8,sp,-1352
800048e6:	1a d8       	st.w	--sp,r8
800048e8:	fa c8 fb b4 	sub	r8,sp,-1100
800048ec:	02 9a       	mov	r10,r1
800048ee:	1a d8       	st.w	--sp,r8
800048f0:	04 9c       	mov	r12,r2
800048f2:	fa c8 f9 40 	sub	r8,sp,-1728
800048f6:	fa c9 ff b4 	sub	r9,sp,-76
800048fa:	fe b0 fd 25 	rcall	80004344 <get_arg>
800048fe:	2f dd       	sub	sp,-12
80004900:	78 00       	ld.w	r0,r12[0x0]
80004902:	c2 08       	rjmp	80004942 <_vfprintf_r+0x2d2>
80004904:	fa cc f9 44 	sub	r12,sp,-1724
80004908:	14 96       	mov	r6,r10
8000490a:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000490e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004912:	c1 88       	rjmp	80004942 <_vfprintf_r+0x2d2>
80004914:	41 08       	lddsp	r8,sp[0x40]
80004916:	59 f9       	cp.w	r9,31
80004918:	e0 89 00 11 	brgt	8000493a <_vfprintf_r+0x2ca>
8000491c:	f0 cb ff fc 	sub	r11,r8,-4
80004920:	51 0b       	stdsp	sp[0x40],r11
80004922:	70 00       	ld.w	r0,r8[0x0]
80004924:	fa cb f9 44 	sub	r11,sp,-1724
80004928:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000492c:	f1 40 fd 88 	st.w	r8[-632],r0
80004930:	2f f9       	sub	r9,-1
80004932:	14 96       	mov	r6,r10
80004934:	fb 49 06 b4 	st.w	sp[1716],r9
80004938:	c0 58       	rjmp	80004942 <_vfprintf_r+0x2d2>
8000493a:	70 00       	ld.w	r0,r8[0x0]
8000493c:	14 96       	mov	r6,r10
8000493e:	2f c8       	sub	r8,-4
80004940:	51 08       	stdsp	sp[0x40],r8
80004942:	58 00       	cp.w	r0,0
80004944:	fe 94 ff 76 	brge	80004830 <_vfprintf_r+0x1c0>
80004948:	5c 30       	neg	r0
8000494a:	a3 a5       	sbr	r5,0x2
8000494c:	c7 2b       	rjmp	80004830 <_vfprintf_r+0x1c0>
8000494e:	32 b8       	mov	r8,43
80004950:	fb 68 06 bb 	st.b	sp[1723],r8
80004954:	c6 eb       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004956:	0f 38       	ld.ub	r8,r7++
80004958:	e0 48 00 2a 	cp.w	r8,42
8000495c:	c0 30       	breq	80004962 <_vfprintf_r+0x2f2>
8000495e:	30 09       	mov	r9,0
80004960:	c7 98       	rjmp	80004a52 <_vfprintf_r+0x3e2>
80004962:	0f 88       	ld.ub	r8,r7[0x0]
80004964:	f0 c9 00 30 	sub	r9,r8,48
80004968:	58 99       	cp.w	r9,9
8000496a:	e0 8b 00 1f 	brhi	800049a8 <_vfprintf_r+0x338>
8000496e:	ee c4 ff ff 	sub	r4,r7,-1
80004972:	30 0b       	mov	r11,0
80004974:	23 08       	sub	r8,48
80004976:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000497a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000497e:	09 38       	ld.ub	r8,r4++
80004980:	f0 c9 00 30 	sub	r9,r8,48
80004984:	58 99       	cp.w	r9,9
80004986:	fe 98 ff f7 	brls	80004974 <_vfprintf_r+0x304>
8000498a:	e0 48 00 24 	cp.w	r8,36
8000498e:	fe 91 ff 4f 	brne	8000482c <_vfprintf_r+0x1bc>
80004992:	e0 4b 00 20 	cp.w	r11,32
80004996:	e0 89 0d eb 	brgt	8000656c <_vfprintf_r+0x1efc>
8000499a:	20 1b       	sub	r11,1
8000499c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049a0:	10 3b       	cp.w	r11,r8
800049a2:	c0 a5       	brlt	800049b6 <_vfprintf_r+0x346>
800049a4:	c1 18       	rjmp	800049c6 <_vfprintf_r+0x356>
800049a6:	d7 03       	nop
800049a8:	fa fa 06 b4 	ld.w	r10,sp[1716]
800049ac:	ec c9 ff ff 	sub	r9,r6,-1
800049b0:	14 36       	cp.w	r6,r10
800049b2:	c1 f5       	brlt	800049f0 <_vfprintf_r+0x380>
800049b4:	c2 88       	rjmp	80004a04 <_vfprintf_r+0x394>
800049b6:	fa ca f9 44 	sub	r10,sp,-1724
800049ba:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800049be:	f6 fb fd 88 	ld.w	r11,r11[-632]
800049c2:	50 2b       	stdsp	sp[0x8],r11
800049c4:	c3 c8       	rjmp	80004a3c <_vfprintf_r+0x3cc>
800049c6:	fa c8 f9 50 	sub	r8,sp,-1712
800049ca:	1a d8       	st.w	--sp,r8
800049cc:	fa c8 fa b8 	sub	r8,sp,-1352
800049d0:	1a d8       	st.w	--sp,r8
800049d2:	fa c8 fb b4 	sub	r8,sp,-1100
800049d6:	02 9a       	mov	r10,r1
800049d8:	1a d8       	st.w	--sp,r8
800049da:	04 9c       	mov	r12,r2
800049dc:	fa c8 f9 40 	sub	r8,sp,-1728
800049e0:	fa c9 ff b4 	sub	r9,sp,-76
800049e4:	fe b0 fc b0 	rcall	80004344 <get_arg>
800049e8:	2f dd       	sub	sp,-12
800049ea:	78 0c       	ld.w	r12,r12[0x0]
800049ec:	50 2c       	stdsp	sp[0x8],r12
800049ee:	c2 78       	rjmp	80004a3c <_vfprintf_r+0x3cc>
800049f0:	12 96       	mov	r6,r9
800049f2:	0e 94       	mov	r4,r7
800049f4:	fa c9 f9 44 	sub	r9,sp,-1724
800049f8:	f2 03 00 38 	add	r8,r9,r3<<0x3
800049fc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004a00:	50 28       	stdsp	sp[0x8],r8
80004a02:	c1 d8       	rjmp	80004a3c <_vfprintf_r+0x3cc>
80004a04:	41 08       	lddsp	r8,sp[0x40]
80004a06:	59 fa       	cp.w	r10,31
80004a08:	e0 89 00 14 	brgt	80004a30 <_vfprintf_r+0x3c0>
80004a0c:	f0 cb ff fc 	sub	r11,r8,-4
80004a10:	70 08       	ld.w	r8,r8[0x0]
80004a12:	51 0b       	stdsp	sp[0x40],r11
80004a14:	50 28       	stdsp	sp[0x8],r8
80004a16:	fa c6 f9 44 	sub	r6,sp,-1724
80004a1a:	40 2e       	lddsp	lr,sp[0x8]
80004a1c:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004a20:	f1 4e fd 88 	st.w	r8[-632],lr
80004a24:	2f fa       	sub	r10,-1
80004a26:	0e 94       	mov	r4,r7
80004a28:	fb 4a 06 b4 	st.w	sp[1716],r10
80004a2c:	12 96       	mov	r6,r9
80004a2e:	c0 78       	rjmp	80004a3c <_vfprintf_r+0x3cc>
80004a30:	70 0c       	ld.w	r12,r8[0x0]
80004a32:	0e 94       	mov	r4,r7
80004a34:	2f c8       	sub	r8,-4
80004a36:	50 2c       	stdsp	sp[0x8],r12
80004a38:	12 96       	mov	r6,r9
80004a3a:	51 08       	stdsp	sp[0x40],r8
80004a3c:	40 2b       	lddsp	r11,sp[0x8]
80004a3e:	58 0b       	cp.w	r11,0
80004a40:	fe 95 fe f2 	brlt	80004824 <_vfprintf_r+0x1b4>
80004a44:	08 97       	mov	r7,r4
80004a46:	cf 5a       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004a48:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004a4c:	0f 38       	ld.ub	r8,r7++
80004a4e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004a52:	f0 ca 00 30 	sub	r10,r8,48
80004a56:	58 9a       	cp.w	r10,9
80004a58:	fe 98 ff f8 	brls	80004a48 <_vfprintf_r+0x3d8>
80004a5c:	3f fa       	mov	r10,-1
80004a5e:	f2 0a 0c 49 	max	r9,r9,r10
80004a62:	50 29       	stdsp	sp[0x8],r9
80004a64:	ce 9a       	rjmp	80004836 <_vfprintf_r+0x1c6>
80004a66:	a7 b5       	sbr	r5,0x7
80004a68:	ce 4a       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004a6a:	30 09       	mov	r9,0
80004a6c:	23 08       	sub	r8,48
80004a6e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004a72:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004a76:	0f 38       	ld.ub	r8,r7++
80004a78:	f0 ca 00 30 	sub	r10,r8,48
80004a7c:	58 9a       	cp.w	r10,9
80004a7e:	fe 98 ff f7 	brls	80004a6c <_vfprintf_r+0x3fc>
80004a82:	e0 48 00 24 	cp.w	r8,36
80004a86:	fe 91 fe d7 	brne	80004834 <_vfprintf_r+0x1c4>
80004a8a:	e0 49 00 20 	cp.w	r9,32
80004a8e:	e0 89 0d 6f 	brgt	8000656c <_vfprintf_r+0x1efc>
80004a92:	f2 c3 00 01 	sub	r3,r9,1
80004a96:	30 19       	mov	r9,1
80004a98:	50 39       	stdsp	sp[0xc],r9
80004a9a:	cc ba       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004a9c:	a3 b5       	sbr	r5,0x3
80004a9e:	cc 9a       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004aa0:	a7 a5       	sbr	r5,0x6
80004aa2:	cc 7a       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004aa4:	0a 98       	mov	r8,r5
80004aa6:	a5 b5       	sbr	r5,0x5
80004aa8:	a5 a8       	sbr	r8,0x4
80004aaa:	0f 89       	ld.ub	r9,r7[0x0]
80004aac:	36 ce       	mov	lr,108
80004aae:	fc 09 18 00 	cp.b	r9,lr
80004ab2:	f7 b7 00 ff 	subeq	r7,-1
80004ab6:	f0 05 17 10 	movne	r5,r8
80004aba:	cb ba       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004abc:	a5 b5       	sbr	r5,0x5
80004abe:	cb 9a       	rjmp	80004830 <_vfprintf_r+0x1c0>
80004ac0:	50 a7       	stdsp	sp[0x28],r7
80004ac2:	50 80       	stdsp	sp[0x20],r0
80004ac4:	0c 97       	mov	r7,r6
80004ac6:	10 90       	mov	r0,r8
80004ac8:	06 96       	mov	r6,r3
80004aca:	04 94       	mov	r4,r2
80004acc:	40 93       	lddsp	r3,sp[0x24]
80004ace:	02 92       	mov	r2,r1
80004ad0:	0e 99       	mov	r9,r7
80004ad2:	40 41       	lddsp	r1,sp[0x10]
80004ad4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ad8:	40 3c       	lddsp	r12,sp[0xc]
80004ada:	58 0c       	cp.w	r12,0
80004adc:	c1 d0       	breq	80004b16 <_vfprintf_r+0x4a6>
80004ade:	10 36       	cp.w	r6,r8
80004ae0:	c0 64       	brge	80004aec <_vfprintf_r+0x47c>
80004ae2:	fa cb f9 44 	sub	r11,sp,-1724
80004ae6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004aea:	c1 d8       	rjmp	80004b24 <_vfprintf_r+0x4b4>
80004aec:	fa c8 f9 50 	sub	r8,sp,-1712
80004af0:	1a d8       	st.w	--sp,r8
80004af2:	fa c8 fa b8 	sub	r8,sp,-1352
80004af6:	1a d8       	st.w	--sp,r8
80004af8:	fa c8 fb b4 	sub	r8,sp,-1100
80004afc:	1a d8       	st.w	--sp,r8
80004afe:	fa c8 f9 40 	sub	r8,sp,-1728
80004b02:	fa c9 ff b4 	sub	r9,sp,-76
80004b06:	04 9a       	mov	r10,r2
80004b08:	0c 9b       	mov	r11,r6
80004b0a:	08 9c       	mov	r12,r4
80004b0c:	fe b0 fc 1c 	rcall	80004344 <get_arg>
80004b10:	2f dd       	sub	sp,-12
80004b12:	19 b8       	ld.ub	r8,r12[0x3]
80004b14:	c2 28       	rjmp	80004b58 <_vfprintf_r+0x4e8>
80004b16:	2f f7       	sub	r7,-1
80004b18:	10 39       	cp.w	r9,r8
80004b1a:	c0 84       	brge	80004b2a <_vfprintf_r+0x4ba>
80004b1c:	fa ca f9 44 	sub	r10,sp,-1724
80004b20:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004b24:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004b28:	c1 88       	rjmp	80004b58 <_vfprintf_r+0x4e8>
80004b2a:	41 09       	lddsp	r9,sp[0x40]
80004b2c:	59 f8       	cp.w	r8,31
80004b2e:	e0 89 00 12 	brgt	80004b52 <_vfprintf_r+0x4e2>
80004b32:	f2 ca ff fc 	sub	r10,r9,-4
80004b36:	51 0a       	stdsp	sp[0x40],r10
80004b38:	72 09       	ld.w	r9,r9[0x0]
80004b3a:	fa c6 f9 44 	sub	r6,sp,-1724
80004b3e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004b42:	2f f8       	sub	r8,-1
80004b44:	f5 49 fd 88 	st.w	r10[-632],r9
80004b48:	fb 48 06 b4 	st.w	sp[1716],r8
80004b4c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004b50:	c0 48       	rjmp	80004b58 <_vfprintf_r+0x4e8>
80004b52:	13 b8       	ld.ub	r8,r9[0x3]
80004b54:	2f c9       	sub	r9,-4
80004b56:	51 09       	stdsp	sp[0x40],r9
80004b58:	fb 68 06 60 	st.b	sp[1632],r8
80004b5c:	30 0e       	mov	lr,0
80004b5e:	30 08       	mov	r8,0
80004b60:	30 12       	mov	r2,1
80004b62:	fb 68 06 bb 	st.b	sp[1723],r8
80004b66:	50 2e       	stdsp	sp[0x8],lr
80004b68:	e0 8f 08 ad 	bral	80005cc2 <_vfprintf_r+0x1652>
80004b6c:	50 a7       	stdsp	sp[0x28],r7
80004b6e:	50 80       	stdsp	sp[0x20],r0
80004b70:	0c 97       	mov	r7,r6
80004b72:	04 94       	mov	r4,r2
80004b74:	06 96       	mov	r6,r3
80004b76:	02 92       	mov	r2,r1
80004b78:	40 93       	lddsp	r3,sp[0x24]
80004b7a:	10 90       	mov	r0,r8
80004b7c:	40 41       	lddsp	r1,sp[0x10]
80004b7e:	a5 a5       	sbr	r5,0x4
80004b80:	c0 a8       	rjmp	80004b94 <_vfprintf_r+0x524>
80004b82:	50 a7       	stdsp	sp[0x28],r7
80004b84:	50 80       	stdsp	sp[0x20],r0
80004b86:	0c 97       	mov	r7,r6
80004b88:	04 94       	mov	r4,r2
80004b8a:	06 96       	mov	r6,r3
80004b8c:	02 92       	mov	r2,r1
80004b8e:	40 93       	lddsp	r3,sp[0x24]
80004b90:	10 90       	mov	r0,r8
80004b92:	40 41       	lddsp	r1,sp[0x10]
80004b94:	ed b5 00 05 	bld	r5,0x5
80004b98:	c5 11       	brne	80004c3a <_vfprintf_r+0x5ca>
80004b9a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b9e:	40 3c       	lddsp	r12,sp[0xc]
80004ba0:	58 0c       	cp.w	r12,0
80004ba2:	c1 e0       	breq	80004bde <_vfprintf_r+0x56e>
80004ba4:	10 36       	cp.w	r6,r8
80004ba6:	c0 64       	brge	80004bb2 <_vfprintf_r+0x542>
80004ba8:	fa cb f9 44 	sub	r11,sp,-1724
80004bac:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bb0:	c2 08       	rjmp	80004bf0 <_vfprintf_r+0x580>
80004bb2:	fa c8 f9 50 	sub	r8,sp,-1712
80004bb6:	1a d8       	st.w	--sp,r8
80004bb8:	fa c8 fa b8 	sub	r8,sp,-1352
80004bbc:	0c 9b       	mov	r11,r6
80004bbe:	1a d8       	st.w	--sp,r8
80004bc0:	fa c8 fb b4 	sub	r8,sp,-1100
80004bc4:	1a d8       	st.w	--sp,r8
80004bc6:	fa c9 ff b4 	sub	r9,sp,-76
80004bca:	fa c8 f9 40 	sub	r8,sp,-1728
80004bce:	04 9a       	mov	r10,r2
80004bd0:	08 9c       	mov	r12,r4
80004bd2:	fe b0 fb b9 	rcall	80004344 <get_arg>
80004bd6:	2f dd       	sub	sp,-12
80004bd8:	78 1b       	ld.w	r11,r12[0x4]
80004bda:	78 09       	ld.w	r9,r12[0x0]
80004bdc:	c2 b8       	rjmp	80004c32 <_vfprintf_r+0x5c2>
80004bde:	ee ca ff ff 	sub	r10,r7,-1
80004be2:	10 37       	cp.w	r7,r8
80004be4:	c0 b4       	brge	80004bfa <_vfprintf_r+0x58a>
80004be6:	fa c9 f9 44 	sub	r9,sp,-1724
80004bea:	14 97       	mov	r7,r10
80004bec:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bf0:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004bf4:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004bf8:	c1 d8       	rjmp	80004c32 <_vfprintf_r+0x5c2>
80004bfa:	41 09       	lddsp	r9,sp[0x40]
80004bfc:	59 f8       	cp.w	r8,31
80004bfe:	e0 89 00 14 	brgt	80004c26 <_vfprintf_r+0x5b6>
80004c02:	f2 cb ff f8 	sub	r11,r9,-8
80004c06:	51 0b       	stdsp	sp[0x40],r11
80004c08:	fa c6 f9 44 	sub	r6,sp,-1724
80004c0c:	72 1b       	ld.w	r11,r9[0x4]
80004c0e:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004c12:	72 09       	ld.w	r9,r9[0x0]
80004c14:	f9 4b fd 8c 	st.w	r12[-628],r11
80004c18:	f9 49 fd 88 	st.w	r12[-632],r9
80004c1c:	2f f8       	sub	r8,-1
80004c1e:	14 97       	mov	r7,r10
80004c20:	fb 48 06 b4 	st.w	sp[1716],r8
80004c24:	c0 78       	rjmp	80004c32 <_vfprintf_r+0x5c2>
80004c26:	f2 c8 ff f8 	sub	r8,r9,-8
80004c2a:	72 1b       	ld.w	r11,r9[0x4]
80004c2c:	14 97       	mov	r7,r10
80004c2e:	51 08       	stdsp	sp[0x40],r8
80004c30:	72 09       	ld.w	r9,r9[0x0]
80004c32:	16 98       	mov	r8,r11
80004c34:	fa e9 00 00 	st.d	sp[0],r8
80004c38:	ca e8       	rjmp	80004d94 <_vfprintf_r+0x724>
80004c3a:	ed b5 00 04 	bld	r5,0x4
80004c3e:	c1 71       	brne	80004c6c <_vfprintf_r+0x5fc>
80004c40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c44:	40 3e       	lddsp	lr,sp[0xc]
80004c46:	58 0e       	cp.w	lr,0
80004c48:	c0 80       	breq	80004c58 <_vfprintf_r+0x5e8>
80004c4a:	10 36       	cp.w	r6,r8
80004c4c:	c6 94       	brge	80004d1e <_vfprintf_r+0x6ae>
80004c4e:	fa cc f9 44 	sub	r12,sp,-1724
80004c52:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004c56:	c8 28       	rjmp	80004d5a <_vfprintf_r+0x6ea>
80004c58:	ee ca ff ff 	sub	r10,r7,-1
80004c5c:	10 37       	cp.w	r7,r8
80004c5e:	e0 84 00 81 	brge	80004d60 <_vfprintf_r+0x6f0>
80004c62:	fa cb f9 44 	sub	r11,sp,-1724
80004c66:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c6a:	c7 78       	rjmp	80004d58 <_vfprintf_r+0x6e8>
80004c6c:	ed b5 00 06 	bld	r5,0x6
80004c70:	c4 b1       	brne	80004d06 <_vfprintf_r+0x696>
80004c72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c76:	40 3c       	lddsp	r12,sp[0xc]
80004c78:	58 0c       	cp.w	r12,0
80004c7a:	c1 d0       	breq	80004cb4 <_vfprintf_r+0x644>
80004c7c:	10 36       	cp.w	r6,r8
80004c7e:	c0 64       	brge	80004c8a <_vfprintf_r+0x61a>
80004c80:	fa cb f9 44 	sub	r11,sp,-1724
80004c84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c88:	c1 f8       	rjmp	80004cc6 <_vfprintf_r+0x656>
80004c8a:	fa c8 f9 50 	sub	r8,sp,-1712
80004c8e:	1a d8       	st.w	--sp,r8
80004c90:	fa c8 fa b8 	sub	r8,sp,-1352
80004c94:	1a d8       	st.w	--sp,r8
80004c96:	fa c8 fb b4 	sub	r8,sp,-1100
80004c9a:	1a d8       	st.w	--sp,r8
80004c9c:	fa c8 f9 40 	sub	r8,sp,-1728
80004ca0:	fa c9 ff b4 	sub	r9,sp,-76
80004ca4:	04 9a       	mov	r10,r2
80004ca6:	0c 9b       	mov	r11,r6
80004ca8:	08 9c       	mov	r12,r4
80004caa:	fe b0 fb 4d 	rcall	80004344 <get_arg>
80004cae:	2f dd       	sub	sp,-12
80004cb0:	98 18       	ld.sh	r8,r12[0x2]
80004cb2:	c2 68       	rjmp	80004cfe <_vfprintf_r+0x68e>
80004cb4:	ee ca ff ff 	sub	r10,r7,-1
80004cb8:	10 37       	cp.w	r7,r8
80004cba:	c0 94       	brge	80004ccc <_vfprintf_r+0x65c>
80004cbc:	fa c9 f9 44 	sub	r9,sp,-1724
80004cc0:	14 97       	mov	r7,r10
80004cc2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cc6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004cca:	c1 a8       	rjmp	80004cfe <_vfprintf_r+0x68e>
80004ccc:	41 09       	lddsp	r9,sp[0x40]
80004cce:	59 f8       	cp.w	r8,31
80004cd0:	e0 89 00 13 	brgt	80004cf6 <_vfprintf_r+0x686>
80004cd4:	f2 cb ff fc 	sub	r11,r9,-4
80004cd8:	51 0b       	stdsp	sp[0x40],r11
80004cda:	72 09       	ld.w	r9,r9[0x0]
80004cdc:	fa c6 f9 44 	sub	r6,sp,-1724
80004ce0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004ce4:	2f f8       	sub	r8,-1
80004ce6:	f7 49 fd 88 	st.w	r11[-632],r9
80004cea:	fb 48 06 b4 	st.w	sp[1716],r8
80004cee:	14 97       	mov	r7,r10
80004cf0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004cf4:	c0 58       	rjmp	80004cfe <_vfprintf_r+0x68e>
80004cf6:	92 18       	ld.sh	r8,r9[0x2]
80004cf8:	14 97       	mov	r7,r10
80004cfa:	2f c9       	sub	r9,-4
80004cfc:	51 09       	stdsp	sp[0x40],r9
80004cfe:	50 18       	stdsp	sp[0x4],r8
80004d00:	bf 58       	asr	r8,0x1f
80004d02:	50 08       	stdsp	sp[0x0],r8
80004d04:	c4 88       	rjmp	80004d94 <_vfprintf_r+0x724>
80004d06:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d0a:	40 3c       	lddsp	r12,sp[0xc]
80004d0c:	58 0c       	cp.w	r12,0
80004d0e:	c1 d0       	breq	80004d48 <_vfprintf_r+0x6d8>
80004d10:	10 36       	cp.w	r6,r8
80004d12:	c0 64       	brge	80004d1e <_vfprintf_r+0x6ae>
80004d14:	fa cb f9 44 	sub	r11,sp,-1724
80004d18:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d1c:	c1 f8       	rjmp	80004d5a <_vfprintf_r+0x6ea>
80004d1e:	fa c8 f9 50 	sub	r8,sp,-1712
80004d22:	1a d8       	st.w	--sp,r8
80004d24:	fa c8 fa b8 	sub	r8,sp,-1352
80004d28:	0c 9b       	mov	r11,r6
80004d2a:	1a d8       	st.w	--sp,r8
80004d2c:	fa c8 fb b4 	sub	r8,sp,-1100
80004d30:	04 9a       	mov	r10,r2
80004d32:	1a d8       	st.w	--sp,r8
80004d34:	08 9c       	mov	r12,r4
80004d36:	fa c8 f9 40 	sub	r8,sp,-1728
80004d3a:	fa c9 ff b4 	sub	r9,sp,-76
80004d3e:	fe b0 fb 03 	rcall	80004344 <get_arg>
80004d42:	2f dd       	sub	sp,-12
80004d44:	78 0b       	ld.w	r11,r12[0x0]
80004d46:	c2 48       	rjmp	80004d8e <_vfprintf_r+0x71e>
80004d48:	ee ca ff ff 	sub	r10,r7,-1
80004d4c:	10 37       	cp.w	r7,r8
80004d4e:	c0 94       	brge	80004d60 <_vfprintf_r+0x6f0>
80004d50:	fa c9 f9 44 	sub	r9,sp,-1724
80004d54:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d58:	14 97       	mov	r7,r10
80004d5a:	ec fb fd 88 	ld.w	r11,r6[-632]
80004d5e:	c1 88       	rjmp	80004d8e <_vfprintf_r+0x71e>
80004d60:	41 09       	lddsp	r9,sp[0x40]
80004d62:	59 f8       	cp.w	r8,31
80004d64:	e0 89 00 11 	brgt	80004d86 <_vfprintf_r+0x716>
80004d68:	f2 cb ff fc 	sub	r11,r9,-4
80004d6c:	51 0b       	stdsp	sp[0x40],r11
80004d6e:	fa c6 f9 44 	sub	r6,sp,-1724
80004d72:	72 0b       	ld.w	r11,r9[0x0]
80004d74:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d78:	f3 4b fd 88 	st.w	r9[-632],r11
80004d7c:	2f f8       	sub	r8,-1
80004d7e:	14 97       	mov	r7,r10
80004d80:	fb 48 06 b4 	st.w	sp[1716],r8
80004d84:	c0 58       	rjmp	80004d8e <_vfprintf_r+0x71e>
80004d86:	72 0b       	ld.w	r11,r9[0x0]
80004d88:	14 97       	mov	r7,r10
80004d8a:	2f c9       	sub	r9,-4
80004d8c:	51 09       	stdsp	sp[0x40],r9
80004d8e:	50 1b       	stdsp	sp[0x4],r11
80004d90:	bf 5b       	asr	r11,0x1f
80004d92:	50 0b       	stdsp	sp[0x0],r11
80004d94:	fa ea 00 00 	ld.d	r10,sp[0]
80004d98:	58 0a       	cp.w	r10,0
80004d9a:	5c 2b       	cpc	r11
80004d9c:	c0 e4       	brge	80004db8 <_vfprintf_r+0x748>
80004d9e:	30 08       	mov	r8,0
80004da0:	fa ea 00 00 	ld.d	r10,sp[0]
80004da4:	30 09       	mov	r9,0
80004da6:	f0 0a 01 0a 	sub	r10,r8,r10
80004daa:	f2 0b 01 4b 	sbc	r11,r9,r11
80004dae:	32 d8       	mov	r8,45
80004db0:	fa eb 00 00 	st.d	sp[0],r10
80004db4:	fb 68 06 bb 	st.b	sp[1723],r8
80004db8:	30 18       	mov	r8,1
80004dba:	e0 8f 06 fa 	bral	80005bae <_vfprintf_r+0x153e>
80004dbe:	50 a7       	stdsp	sp[0x28],r7
80004dc0:	50 80       	stdsp	sp[0x20],r0
80004dc2:	0c 97       	mov	r7,r6
80004dc4:	04 94       	mov	r4,r2
80004dc6:	06 96       	mov	r6,r3
80004dc8:	02 92       	mov	r2,r1
80004dca:	40 93       	lddsp	r3,sp[0x24]
80004dcc:	10 90       	mov	r0,r8
80004dce:	40 41       	lddsp	r1,sp[0x10]
80004dd0:	0e 99       	mov	r9,r7
80004dd2:	ed b5 00 03 	bld	r5,0x3
80004dd6:	c4 11       	brne	80004e58 <_vfprintf_r+0x7e8>
80004dd8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ddc:	40 3a       	lddsp	r10,sp[0xc]
80004dde:	58 0a       	cp.w	r10,0
80004de0:	c1 90       	breq	80004e12 <_vfprintf_r+0x7a2>
80004de2:	10 36       	cp.w	r6,r8
80004de4:	c6 45       	brlt	80004eac <_vfprintf_r+0x83c>
80004de6:	fa c8 f9 50 	sub	r8,sp,-1712
80004dea:	1a d8       	st.w	--sp,r8
80004dec:	fa c8 fa b8 	sub	r8,sp,-1352
80004df0:	1a d8       	st.w	--sp,r8
80004df2:	fa c8 fb b4 	sub	r8,sp,-1100
80004df6:	0c 9b       	mov	r11,r6
80004df8:	1a d8       	st.w	--sp,r8
80004dfa:	04 9a       	mov	r10,r2
80004dfc:	fa c8 f9 40 	sub	r8,sp,-1728
80004e00:	fa c9 ff b4 	sub	r9,sp,-76
80004e04:	08 9c       	mov	r12,r4
80004e06:	fe b0 fa 9f 	rcall	80004344 <get_arg>
80004e0a:	2f dd       	sub	sp,-12
80004e0c:	78 16       	ld.w	r6,r12[0x4]
80004e0e:	50 76       	stdsp	sp[0x1c],r6
80004e10:	c4 88       	rjmp	80004ea0 <_vfprintf_r+0x830>
80004e12:	2f f7       	sub	r7,-1
80004e14:	10 39       	cp.w	r9,r8
80004e16:	c0 c4       	brge	80004e2e <_vfprintf_r+0x7be>
80004e18:	fa ce f9 44 	sub	lr,sp,-1724
80004e1c:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004e20:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004e24:	50 7c       	stdsp	sp[0x1c],r12
80004e26:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004e2a:	50 56       	stdsp	sp[0x14],r6
80004e2c:	c6 68       	rjmp	80004ef8 <_vfprintf_r+0x888>
80004e2e:	41 09       	lddsp	r9,sp[0x40]
80004e30:	59 f8       	cp.w	r8,31
80004e32:	e0 89 00 10 	brgt	80004e52 <_vfprintf_r+0x7e2>
80004e36:	f2 ca ff f8 	sub	r10,r9,-8
80004e3a:	72 1b       	ld.w	r11,r9[0x4]
80004e3c:	51 0a       	stdsp	sp[0x40],r10
80004e3e:	72 09       	ld.w	r9,r9[0x0]
80004e40:	fa ca f9 44 	sub	r10,sp,-1724
80004e44:	50 7b       	stdsp	sp[0x1c],r11
80004e46:	50 59       	stdsp	sp[0x14],r9
80004e48:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004e4c:	40 5b       	lddsp	r11,sp[0x14]
80004e4e:	40 7a       	lddsp	r10,sp[0x1c]
80004e50:	c4 78       	rjmp	80004ede <_vfprintf_r+0x86e>
80004e52:	72 18       	ld.w	r8,r9[0x4]
80004e54:	50 78       	stdsp	sp[0x1c],r8
80004e56:	c4 c8       	rjmp	80004eee <_vfprintf_r+0x87e>
80004e58:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e5c:	40 3e       	lddsp	lr,sp[0xc]
80004e5e:	58 0e       	cp.w	lr,0
80004e60:	c2 30       	breq	80004ea6 <_vfprintf_r+0x836>
80004e62:	10 36       	cp.w	r6,r8
80004e64:	c0 94       	brge	80004e76 <_vfprintf_r+0x806>
80004e66:	fa cc f9 44 	sub	r12,sp,-1724
80004e6a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004e6e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004e72:	50 7b       	stdsp	sp[0x1c],r11
80004e74:	cd 9b       	rjmp	80004e26 <_vfprintf_r+0x7b6>
80004e76:	fa c8 f9 50 	sub	r8,sp,-1712
80004e7a:	1a d8       	st.w	--sp,r8
80004e7c:	fa c8 fa b8 	sub	r8,sp,-1352
80004e80:	04 9a       	mov	r10,r2
80004e82:	1a d8       	st.w	--sp,r8
80004e84:	fa c8 fb b4 	sub	r8,sp,-1100
80004e88:	0c 9b       	mov	r11,r6
80004e8a:	1a d8       	st.w	--sp,r8
80004e8c:	08 9c       	mov	r12,r4
80004e8e:	fa c8 f9 40 	sub	r8,sp,-1728
80004e92:	fa c9 ff b4 	sub	r9,sp,-76
80004e96:	fe b0 fa 57 	rcall	80004344 <get_arg>
80004e9a:	2f dd       	sub	sp,-12
80004e9c:	78 1a       	ld.w	r10,r12[0x4]
80004e9e:	50 7a       	stdsp	sp[0x1c],r10
80004ea0:	78 0c       	ld.w	r12,r12[0x0]
80004ea2:	50 5c       	stdsp	sp[0x14],r12
80004ea4:	c2 a8       	rjmp	80004ef8 <_vfprintf_r+0x888>
80004ea6:	2f f7       	sub	r7,-1
80004ea8:	10 39       	cp.w	r9,r8
80004eaa:	c0 94       	brge	80004ebc <_vfprintf_r+0x84c>
80004eac:	fa c9 f9 44 	sub	r9,sp,-1724
80004eb0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004eb4:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004eb8:	50 78       	stdsp	sp[0x1c],r8
80004eba:	cb 6b       	rjmp	80004e26 <_vfprintf_r+0x7b6>
80004ebc:	41 09       	lddsp	r9,sp[0x40]
80004ebe:	59 f8       	cp.w	r8,31
80004ec0:	e0 89 00 15 	brgt	80004eea <_vfprintf_r+0x87a>
80004ec4:	f2 ca ff f8 	sub	r10,r9,-8
80004ec8:	72 16       	ld.w	r6,r9[0x4]
80004eca:	72 09       	ld.w	r9,r9[0x0]
80004ecc:	51 0a       	stdsp	sp[0x40],r10
80004ece:	50 59       	stdsp	sp[0x14],r9
80004ed0:	fa ce f9 44 	sub	lr,sp,-1724
80004ed4:	50 76       	stdsp	sp[0x1c],r6
80004ed6:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004eda:	40 5b       	lddsp	r11,sp[0x14]
80004edc:	0c 9a       	mov	r10,r6
80004ede:	f2 eb fd 88 	st.d	r9[-632],r10
80004ee2:	2f f8       	sub	r8,-1
80004ee4:	fb 48 06 b4 	st.w	sp[1716],r8
80004ee8:	c0 88       	rjmp	80004ef8 <_vfprintf_r+0x888>
80004eea:	72 1c       	ld.w	r12,r9[0x4]
80004eec:	50 7c       	stdsp	sp[0x1c],r12
80004eee:	f2 c8 ff f8 	sub	r8,r9,-8
80004ef2:	51 08       	stdsp	sp[0x40],r8
80004ef4:	72 09       	ld.w	r9,r9[0x0]
80004ef6:	50 59       	stdsp	sp[0x14],r9
80004ef8:	40 5b       	lddsp	r11,sp[0x14]
80004efa:	40 7a       	lddsp	r10,sp[0x1c]
80004efc:	e0 a0 1c d6 	rcall	800088a8 <__isinfd>
80004f00:	18 96       	mov	r6,r12
80004f02:	c1 70       	breq	80004f30 <_vfprintf_r+0x8c0>
80004f04:	30 08       	mov	r8,0
80004f06:	30 09       	mov	r9,0
80004f08:	40 5b       	lddsp	r11,sp[0x14]
80004f0a:	40 7a       	lddsp	r10,sp[0x1c]
80004f0c:	e0 a0 20 66 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80004f10:	c0 40       	breq	80004f18 <_vfprintf_r+0x8a8>
80004f12:	32 d8       	mov	r8,45
80004f14:	fb 68 06 bb 	st.b	sp[1723],r8
80004f18:	fe c8 ae b4 	sub	r8,pc,-20812
80004f1c:	fe c6 ae b4 	sub	r6,pc,-20812
80004f20:	a7 d5       	cbr	r5,0x7
80004f22:	e0 40 00 47 	cp.w	r0,71
80004f26:	f0 06 17 a0 	movle	r6,r8
80004f2a:	30 32       	mov	r2,3
80004f2c:	e0 8f 06 ce 	bral	80005cc8 <_vfprintf_r+0x1658>
80004f30:	40 5b       	lddsp	r11,sp[0x14]
80004f32:	40 7a       	lddsp	r10,sp[0x1c]
80004f34:	e0 a0 1c cf 	rcall	800088d2 <__isnand>
80004f38:	c0 e0       	breq	80004f54 <_vfprintf_r+0x8e4>
80004f3a:	50 26       	stdsp	sp[0x8],r6
80004f3c:	fe c8 ae d0 	sub	r8,pc,-20784
80004f40:	fe c6 ae d0 	sub	r6,pc,-20784
80004f44:	a7 d5       	cbr	r5,0x7
80004f46:	e0 40 00 47 	cp.w	r0,71
80004f4a:	f0 06 17 a0 	movle	r6,r8
80004f4e:	30 32       	mov	r2,3
80004f50:	e0 8f 06 c2 	bral	80005cd4 <_vfprintf_r+0x1664>
80004f54:	40 2a       	lddsp	r10,sp[0x8]
80004f56:	5b fa       	cp.w	r10,-1
80004f58:	c0 41       	brne	80004f60 <_vfprintf_r+0x8f0>
80004f5a:	30 69       	mov	r9,6
80004f5c:	50 29       	stdsp	sp[0x8],r9
80004f5e:	c1 18       	rjmp	80004f80 <_vfprintf_r+0x910>
80004f60:	e0 40 00 47 	cp.w	r0,71
80004f64:	5f 09       	sreq	r9
80004f66:	e0 40 00 67 	cp.w	r0,103
80004f6a:	5f 08       	sreq	r8
80004f6c:	f3 e8 10 08 	or	r8,r9,r8
80004f70:	f8 08 18 00 	cp.b	r8,r12
80004f74:	c0 60       	breq	80004f80 <_vfprintf_r+0x910>
80004f76:	40 28       	lddsp	r8,sp[0x8]
80004f78:	58 08       	cp.w	r8,0
80004f7a:	f9 b8 00 01 	moveq	r8,1
80004f7e:	50 28       	stdsp	sp[0x8],r8
80004f80:	40 78       	lddsp	r8,sp[0x1c]
80004f82:	40 59       	lddsp	r9,sp[0x14]
80004f84:	fa e9 06 94 	st.d	sp[1684],r8
80004f88:	a9 a5       	sbr	r5,0x8
80004f8a:	fa f8 06 94 	ld.w	r8,sp[1684]
80004f8e:	58 08       	cp.w	r8,0
80004f90:	c0 65       	brlt	80004f9c <_vfprintf_r+0x92c>
80004f92:	40 5e       	lddsp	lr,sp[0x14]
80004f94:	30 0c       	mov	r12,0
80004f96:	50 6e       	stdsp	sp[0x18],lr
80004f98:	50 9c       	stdsp	sp[0x24],r12
80004f9a:	c0 78       	rjmp	80004fa8 <_vfprintf_r+0x938>
80004f9c:	40 5b       	lddsp	r11,sp[0x14]
80004f9e:	32 da       	mov	r10,45
80004fa0:	ee 1b 80 00 	eorh	r11,0x8000
80004fa4:	50 9a       	stdsp	sp[0x24],r10
80004fa6:	50 6b       	stdsp	sp[0x18],r11
80004fa8:	e0 40 00 46 	cp.w	r0,70
80004fac:	5f 09       	sreq	r9
80004fae:	e0 40 00 66 	cp.w	r0,102
80004fb2:	5f 08       	sreq	r8
80004fb4:	f3 e8 10 08 	or	r8,r9,r8
80004fb8:	50 48       	stdsp	sp[0x10],r8
80004fba:	c0 40       	breq	80004fc2 <_vfprintf_r+0x952>
80004fbc:	40 22       	lddsp	r2,sp[0x8]
80004fbe:	30 39       	mov	r9,3
80004fc0:	c1 08       	rjmp	80004fe0 <_vfprintf_r+0x970>
80004fc2:	e0 40 00 45 	cp.w	r0,69
80004fc6:	5f 09       	sreq	r9
80004fc8:	e0 40 00 65 	cp.w	r0,101
80004fcc:	5f 08       	sreq	r8
80004fce:	40 22       	lddsp	r2,sp[0x8]
80004fd0:	10 49       	or	r9,r8
80004fd2:	2f f2       	sub	r2,-1
80004fd4:	40 46       	lddsp	r6,sp[0x10]
80004fd6:	ec 09 18 00 	cp.b	r9,r6
80004fda:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004fde:	30 29       	mov	r9,2
80004fe0:	fa c8 f9 5c 	sub	r8,sp,-1700
80004fe4:	1a d8       	st.w	--sp,r8
80004fe6:	fa c8 f9 54 	sub	r8,sp,-1708
80004fea:	1a d8       	st.w	--sp,r8
80004fec:	fa c8 f9 4c 	sub	r8,sp,-1716
80004ff0:	08 9c       	mov	r12,r4
80004ff2:	1a d8       	st.w	--sp,r8
80004ff4:	04 98       	mov	r8,r2
80004ff6:	40 9b       	lddsp	r11,sp[0x24]
80004ff8:	40 aa       	lddsp	r10,sp[0x28]
80004ffa:	e0 a0 0b c3 	rcall	80006780 <_dtoa_r>
80004ffe:	e0 40 00 47 	cp.w	r0,71
80005002:	5f 19       	srne	r9
80005004:	e0 40 00 67 	cp.w	r0,103
80005008:	5f 18       	srne	r8
8000500a:	18 96       	mov	r6,r12
8000500c:	2f dd       	sub	sp,-12
8000500e:	f3 e8 00 08 	and	r8,r9,r8
80005012:	c0 41       	brne	8000501a <_vfprintf_r+0x9aa>
80005014:	ed b5 00 00 	bld	r5,0x0
80005018:	c3 01       	brne	80005078 <_vfprintf_r+0xa08>
8000501a:	ec 02 00 0e 	add	lr,r6,r2
8000501e:	50 3e       	stdsp	sp[0xc],lr
80005020:	40 4c       	lddsp	r12,sp[0x10]
80005022:	58 0c       	cp.w	r12,0
80005024:	c1 50       	breq	8000504e <_vfprintf_r+0x9de>
80005026:	0d 89       	ld.ub	r9,r6[0x0]
80005028:	33 08       	mov	r8,48
8000502a:	f0 09 18 00 	cp.b	r9,r8
8000502e:	c0 b1       	brne	80005044 <_vfprintf_r+0x9d4>
80005030:	30 08       	mov	r8,0
80005032:	30 09       	mov	r9,0
80005034:	40 6b       	lddsp	r11,sp[0x18]
80005036:	40 7a       	lddsp	r10,sp[0x1c]
80005038:	e0 a0 1f 89 	rcall	80008f4a <__avr32_f64_cmp_eq>
8000503c:	fb b2 00 01 	rsubeq	r2,1
80005040:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80005044:	40 3b       	lddsp	r11,sp[0xc]
80005046:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000504a:	10 0b       	add	r11,r8
8000504c:	50 3b       	stdsp	sp[0xc],r11
8000504e:	40 6b       	lddsp	r11,sp[0x18]
80005050:	30 08       	mov	r8,0
80005052:	30 09       	mov	r9,0
80005054:	40 7a       	lddsp	r10,sp[0x1c]
80005056:	e0 a0 1f 7a 	rcall	80008f4a <__avr32_f64_cmp_eq>
8000505a:	c0 90       	breq	8000506c <_vfprintf_r+0x9fc>
8000505c:	40 3a       	lddsp	r10,sp[0xc]
8000505e:	fb 4a 06 a4 	st.w	sp[1700],r10
80005062:	c0 58       	rjmp	8000506c <_vfprintf_r+0x9fc>
80005064:	10 c9       	st.b	r8++,r9
80005066:	fb 48 06 a4 	st.w	sp[1700],r8
8000506a:	c0 28       	rjmp	8000506e <_vfprintf_r+0x9fe>
8000506c:	33 09       	mov	r9,48
8000506e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80005072:	40 3e       	lddsp	lr,sp[0xc]
80005074:	1c 38       	cp.w	r8,lr
80005076:	cf 73       	brcs	80005064 <_vfprintf_r+0x9f4>
80005078:	e0 40 00 47 	cp.w	r0,71
8000507c:	5f 09       	sreq	r9
8000507e:	e0 40 00 67 	cp.w	r0,103
80005082:	5f 08       	sreq	r8
80005084:	f3 e8 10 08 	or	r8,r9,r8
80005088:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000508c:	0c 19       	sub	r9,r6
8000508e:	50 69       	stdsp	sp[0x18],r9
80005090:	58 08       	cp.w	r8,0
80005092:	c0 b0       	breq	800050a8 <_vfprintf_r+0xa38>
80005094:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005098:	5b d8       	cp.w	r8,-3
8000509a:	c0 55       	brlt	800050a4 <_vfprintf_r+0xa34>
8000509c:	40 2c       	lddsp	r12,sp[0x8]
8000509e:	18 38       	cp.w	r8,r12
800050a0:	e0 8a 00 6a 	brle	80005174 <_vfprintf_r+0xb04>
800050a4:	20 20       	sub	r0,2
800050a6:	c0 58       	rjmp	800050b0 <_vfprintf_r+0xa40>
800050a8:	e0 40 00 65 	cp.w	r0,101
800050ac:	e0 89 00 46 	brgt	80005138 <_vfprintf_r+0xac8>
800050b0:	fa fb 06 ac 	ld.w	r11,sp[1708]
800050b4:	fb 60 06 9c 	st.b	sp[1692],r0
800050b8:	20 1b       	sub	r11,1
800050ba:	fb 4b 06 ac 	st.w	sp[1708],r11
800050be:	c0 47       	brpl	800050c6 <_vfprintf_r+0xa56>
800050c0:	5c 3b       	neg	r11
800050c2:	32 d8       	mov	r8,45
800050c4:	c0 28       	rjmp	800050c8 <_vfprintf_r+0xa58>
800050c6:	32 b8       	mov	r8,43
800050c8:	fb 68 06 9d 	st.b	sp[1693],r8
800050cc:	58 9b       	cp.w	r11,9
800050ce:	e0 8a 00 1d 	brle	80005108 <_vfprintf_r+0xa98>
800050d2:	fa c9 fa 35 	sub	r9,sp,-1483
800050d6:	30 aa       	mov	r10,10
800050d8:	12 98       	mov	r8,r9
800050da:	0e 9c       	mov	r12,r7
800050dc:	0c 92       	mov	r2,r6
800050de:	f6 0a 0c 06 	divs	r6,r11,r10
800050e2:	0e 9b       	mov	r11,r7
800050e4:	2d 0b       	sub	r11,-48
800050e6:	10 fb       	st.b	--r8,r11
800050e8:	0c 9b       	mov	r11,r6
800050ea:	58 96       	cp.w	r6,9
800050ec:	fe 99 ff f9 	brgt	800050de <_vfprintf_r+0xa6e>
800050f0:	2d 0b       	sub	r11,-48
800050f2:	18 97       	mov	r7,r12
800050f4:	04 96       	mov	r6,r2
800050f6:	10 fb       	st.b	--r8,r11
800050f8:	fa ca f9 62 	sub	r10,sp,-1694
800050fc:	c0 38       	rjmp	80005102 <_vfprintf_r+0xa92>
800050fe:	11 3b       	ld.ub	r11,r8++
80005100:	14 cb       	st.b	r10++,r11
80005102:	12 38       	cp.w	r8,r9
80005104:	cf d3       	brcs	800050fe <_vfprintf_r+0xa8e>
80005106:	c0 98       	rjmp	80005118 <_vfprintf_r+0xaa8>
80005108:	2d 0b       	sub	r11,-48
8000510a:	33 08       	mov	r8,48
8000510c:	fb 6b 06 9f 	st.b	sp[1695],r11
80005110:	fb 68 06 9e 	st.b	sp[1694],r8
80005114:	fa ca f9 60 	sub	r10,sp,-1696
80005118:	fa c8 f9 64 	sub	r8,sp,-1692
8000511c:	f4 08 01 08 	sub	r8,r10,r8
80005120:	50 e8       	stdsp	sp[0x38],r8
80005122:	10 92       	mov	r2,r8
80005124:	40 6b       	lddsp	r11,sp[0x18]
80005126:	16 02       	add	r2,r11
80005128:	58 1b       	cp.w	r11,1
8000512a:	e0 89 00 05 	brgt	80005134 <_vfprintf_r+0xac4>
8000512e:	ed b5 00 00 	bld	r5,0x0
80005132:	c3 51       	brne	8000519c <_vfprintf_r+0xb2c>
80005134:	2f f2       	sub	r2,-1
80005136:	c3 38       	rjmp	8000519c <_vfprintf_r+0xb2c>
80005138:	e0 40 00 66 	cp.w	r0,102
8000513c:	c1 c1       	brne	80005174 <_vfprintf_r+0xb04>
8000513e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005142:	58 02       	cp.w	r2,0
80005144:	e0 8a 00 0c 	brle	8000515c <_vfprintf_r+0xaec>
80005148:	40 2a       	lddsp	r10,sp[0x8]
8000514a:	58 0a       	cp.w	r10,0
8000514c:	c0 41       	brne	80005154 <_vfprintf_r+0xae4>
8000514e:	ed b5 00 00 	bld	r5,0x0
80005152:	c2 51       	brne	8000519c <_vfprintf_r+0xb2c>
80005154:	2f f2       	sub	r2,-1
80005156:	40 29       	lddsp	r9,sp[0x8]
80005158:	12 02       	add	r2,r9
8000515a:	c0 b8       	rjmp	80005170 <_vfprintf_r+0xb00>
8000515c:	40 28       	lddsp	r8,sp[0x8]
8000515e:	58 08       	cp.w	r8,0
80005160:	c0 61       	brne	8000516c <_vfprintf_r+0xafc>
80005162:	ed b5 00 00 	bld	r5,0x0
80005166:	c0 30       	breq	8000516c <_vfprintf_r+0xafc>
80005168:	30 12       	mov	r2,1
8000516a:	c1 98       	rjmp	8000519c <_vfprintf_r+0xb2c>
8000516c:	40 22       	lddsp	r2,sp[0x8]
8000516e:	2f e2       	sub	r2,-2
80005170:	36 60       	mov	r0,102
80005172:	c1 58       	rjmp	8000519c <_vfprintf_r+0xb2c>
80005174:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005178:	40 6e       	lddsp	lr,sp[0x18]
8000517a:	1c 32       	cp.w	r2,lr
8000517c:	c0 65       	brlt	80005188 <_vfprintf_r+0xb18>
8000517e:	ed b5 00 00 	bld	r5,0x0
80005182:	f7 b2 00 ff 	subeq	r2,-1
80005186:	c0 a8       	rjmp	8000519a <_vfprintf_r+0xb2a>
80005188:	e4 08 11 02 	rsub	r8,r2,2
8000518c:	40 6c       	lddsp	r12,sp[0x18]
8000518e:	58 02       	cp.w	r2,0
80005190:	f0 02 17 a0 	movle	r2,r8
80005194:	f9 b2 09 01 	movgt	r2,1
80005198:	18 02       	add	r2,r12
8000519a:	36 70       	mov	r0,103
8000519c:	40 9b       	lddsp	r11,sp[0x24]
8000519e:	58 0b       	cp.w	r11,0
800051a0:	e0 80 05 94 	breq	80005cc8 <_vfprintf_r+0x1658>
800051a4:	32 d8       	mov	r8,45
800051a6:	fb 68 06 bb 	st.b	sp[1723],r8
800051aa:	e0 8f 05 93 	bral	80005cd0 <_vfprintf_r+0x1660>
800051ae:	50 a7       	stdsp	sp[0x28],r7
800051b0:	04 94       	mov	r4,r2
800051b2:	0c 97       	mov	r7,r6
800051b4:	02 92       	mov	r2,r1
800051b6:	06 96       	mov	r6,r3
800051b8:	40 41       	lddsp	r1,sp[0x10]
800051ba:	40 93       	lddsp	r3,sp[0x24]
800051bc:	0e 99       	mov	r9,r7
800051be:	ed b5 00 05 	bld	r5,0x5
800051c2:	c4 81       	brne	80005252 <_vfprintf_r+0xbe2>
800051c4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051c8:	40 3e       	lddsp	lr,sp[0xc]
800051ca:	58 0e       	cp.w	lr,0
800051cc:	c1 d0       	breq	80005206 <_vfprintf_r+0xb96>
800051ce:	10 36       	cp.w	r6,r8
800051d0:	c0 64       	brge	800051dc <_vfprintf_r+0xb6c>
800051d2:	fa cc f9 44 	sub	r12,sp,-1724
800051d6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800051da:	c1 d8       	rjmp	80005214 <_vfprintf_r+0xba4>
800051dc:	fa c8 f9 50 	sub	r8,sp,-1712
800051e0:	1a d8       	st.w	--sp,r8
800051e2:	fa c8 fa b8 	sub	r8,sp,-1352
800051e6:	04 9a       	mov	r10,r2
800051e8:	1a d8       	st.w	--sp,r8
800051ea:	fa c8 fb b4 	sub	r8,sp,-1100
800051ee:	0c 9b       	mov	r11,r6
800051f0:	1a d8       	st.w	--sp,r8
800051f2:	08 9c       	mov	r12,r4
800051f4:	fa c8 f9 40 	sub	r8,sp,-1728
800051f8:	fa c9 ff b4 	sub	r9,sp,-76
800051fc:	fe b0 f8 a4 	rcall	80004344 <get_arg>
80005200:	2f dd       	sub	sp,-12
80005202:	78 0a       	ld.w	r10,r12[0x0]
80005204:	c2 08       	rjmp	80005244 <_vfprintf_r+0xbd4>
80005206:	2f f7       	sub	r7,-1
80005208:	10 39       	cp.w	r9,r8
8000520a:	c0 84       	brge	8000521a <_vfprintf_r+0xbaa>
8000520c:	fa cb f9 44 	sub	r11,sp,-1724
80005210:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005214:	ec fa fd 88 	ld.w	r10,r6[-632]
80005218:	c1 68       	rjmp	80005244 <_vfprintf_r+0xbd4>
8000521a:	41 09       	lddsp	r9,sp[0x40]
8000521c:	59 f8       	cp.w	r8,31
8000521e:	e0 89 00 10 	brgt	8000523e <_vfprintf_r+0xbce>
80005222:	f2 ca ff fc 	sub	r10,r9,-4
80005226:	51 0a       	stdsp	sp[0x40],r10
80005228:	fa c6 f9 44 	sub	r6,sp,-1724
8000522c:	72 0a       	ld.w	r10,r9[0x0]
8000522e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005232:	f3 4a fd 88 	st.w	r9[-632],r10
80005236:	2f f8       	sub	r8,-1
80005238:	fb 48 06 b4 	st.w	sp[1716],r8
8000523c:	c0 48       	rjmp	80005244 <_vfprintf_r+0xbd4>
8000523e:	72 0a       	ld.w	r10,r9[0x0]
80005240:	2f c9       	sub	r9,-4
80005242:	51 09       	stdsp	sp[0x40],r9
80005244:	40 be       	lddsp	lr,sp[0x2c]
80005246:	1c 98       	mov	r8,lr
80005248:	95 1e       	st.w	r10[0x4],lr
8000524a:	bf 58       	asr	r8,0x1f
8000524c:	95 08       	st.w	r10[0x0],r8
8000524e:	fe 9f fa 9f 	bral	8000478c <_vfprintf_r+0x11c>
80005252:	ed b5 00 04 	bld	r5,0x4
80005256:	c4 80       	breq	800052e6 <_vfprintf_r+0xc76>
80005258:	e2 15 00 40 	andl	r5,0x40,COH
8000525c:	c4 50       	breq	800052e6 <_vfprintf_r+0xc76>
8000525e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005262:	40 3c       	lddsp	r12,sp[0xc]
80005264:	58 0c       	cp.w	r12,0
80005266:	c1 d0       	breq	800052a0 <_vfprintf_r+0xc30>
80005268:	10 36       	cp.w	r6,r8
8000526a:	c0 64       	brge	80005276 <_vfprintf_r+0xc06>
8000526c:	fa cb f9 44 	sub	r11,sp,-1724
80005270:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005274:	c1 d8       	rjmp	800052ae <_vfprintf_r+0xc3e>
80005276:	fa c8 f9 50 	sub	r8,sp,-1712
8000527a:	1a d8       	st.w	--sp,r8
8000527c:	fa c8 fa b8 	sub	r8,sp,-1352
80005280:	04 9a       	mov	r10,r2
80005282:	1a d8       	st.w	--sp,r8
80005284:	fa c8 fb b4 	sub	r8,sp,-1100
80005288:	0c 9b       	mov	r11,r6
8000528a:	1a d8       	st.w	--sp,r8
8000528c:	08 9c       	mov	r12,r4
8000528e:	fa c8 f9 40 	sub	r8,sp,-1728
80005292:	fa c9 ff b4 	sub	r9,sp,-76
80005296:	fe b0 f8 57 	rcall	80004344 <get_arg>
8000529a:	2f dd       	sub	sp,-12
8000529c:	78 0a       	ld.w	r10,r12[0x0]
8000529e:	c2 08       	rjmp	800052de <_vfprintf_r+0xc6e>
800052a0:	2f f7       	sub	r7,-1
800052a2:	10 39       	cp.w	r9,r8
800052a4:	c0 84       	brge	800052b4 <_vfprintf_r+0xc44>
800052a6:	fa ca f9 44 	sub	r10,sp,-1724
800052aa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800052ae:	ec fa fd 88 	ld.w	r10,r6[-632]
800052b2:	c1 68       	rjmp	800052de <_vfprintf_r+0xc6e>
800052b4:	41 09       	lddsp	r9,sp[0x40]
800052b6:	59 f8       	cp.w	r8,31
800052b8:	e0 89 00 10 	brgt	800052d8 <_vfprintf_r+0xc68>
800052bc:	f2 ca ff fc 	sub	r10,r9,-4
800052c0:	51 0a       	stdsp	sp[0x40],r10
800052c2:	fa c6 f9 44 	sub	r6,sp,-1724
800052c6:	72 0a       	ld.w	r10,r9[0x0]
800052c8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800052cc:	f3 4a fd 88 	st.w	r9[-632],r10
800052d0:	2f f8       	sub	r8,-1
800052d2:	fb 48 06 b4 	st.w	sp[1716],r8
800052d6:	c0 48       	rjmp	800052de <_vfprintf_r+0xc6e>
800052d8:	72 0a       	ld.w	r10,r9[0x0]
800052da:	2f c9       	sub	r9,-4
800052dc:	51 09       	stdsp	sp[0x40],r9
800052de:	40 be       	lddsp	lr,sp[0x2c]
800052e0:	b4 0e       	st.h	r10[0x0],lr
800052e2:	fe 9f fa 55 	bral	8000478c <_vfprintf_r+0x11c>
800052e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052ea:	40 3c       	lddsp	r12,sp[0xc]
800052ec:	58 0c       	cp.w	r12,0
800052ee:	c1 d0       	breq	80005328 <_vfprintf_r+0xcb8>
800052f0:	10 36       	cp.w	r6,r8
800052f2:	c0 64       	brge	800052fe <_vfprintf_r+0xc8e>
800052f4:	fa cb f9 44 	sub	r11,sp,-1724
800052f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800052fc:	c1 d8       	rjmp	80005336 <_vfprintf_r+0xcc6>
800052fe:	fa c8 f9 50 	sub	r8,sp,-1712
80005302:	1a d8       	st.w	--sp,r8
80005304:	fa c8 fa b8 	sub	r8,sp,-1352
80005308:	04 9a       	mov	r10,r2
8000530a:	1a d8       	st.w	--sp,r8
8000530c:	fa c8 fb b4 	sub	r8,sp,-1100
80005310:	0c 9b       	mov	r11,r6
80005312:	1a d8       	st.w	--sp,r8
80005314:	08 9c       	mov	r12,r4
80005316:	fa c8 f9 40 	sub	r8,sp,-1728
8000531a:	fa c9 ff b4 	sub	r9,sp,-76
8000531e:	fe b0 f8 13 	rcall	80004344 <get_arg>
80005322:	2f dd       	sub	sp,-12
80005324:	78 0a       	ld.w	r10,r12[0x0]
80005326:	c2 08       	rjmp	80005366 <_vfprintf_r+0xcf6>
80005328:	2f f7       	sub	r7,-1
8000532a:	10 39       	cp.w	r9,r8
8000532c:	c0 84       	brge	8000533c <_vfprintf_r+0xccc>
8000532e:	fa ca f9 44 	sub	r10,sp,-1724
80005332:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005336:	ec fa fd 88 	ld.w	r10,r6[-632]
8000533a:	c1 68       	rjmp	80005366 <_vfprintf_r+0xcf6>
8000533c:	41 09       	lddsp	r9,sp[0x40]
8000533e:	59 f8       	cp.w	r8,31
80005340:	e0 89 00 10 	brgt	80005360 <_vfprintf_r+0xcf0>
80005344:	f2 ca ff fc 	sub	r10,r9,-4
80005348:	51 0a       	stdsp	sp[0x40],r10
8000534a:	fa c6 f9 44 	sub	r6,sp,-1724
8000534e:	72 0a       	ld.w	r10,r9[0x0]
80005350:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005354:	f3 4a fd 88 	st.w	r9[-632],r10
80005358:	2f f8       	sub	r8,-1
8000535a:	fb 48 06 b4 	st.w	sp[1716],r8
8000535e:	c0 48       	rjmp	80005366 <_vfprintf_r+0xcf6>
80005360:	72 0a       	ld.w	r10,r9[0x0]
80005362:	2f c9       	sub	r9,-4
80005364:	51 09       	stdsp	sp[0x40],r9
80005366:	40 be       	lddsp	lr,sp[0x2c]
80005368:	95 0e       	st.w	r10[0x0],lr
8000536a:	fe 9f fa 11 	bral	8000478c <_vfprintf_r+0x11c>
8000536e:	50 a7       	stdsp	sp[0x28],r7
80005370:	50 80       	stdsp	sp[0x20],r0
80005372:	0c 97       	mov	r7,r6
80005374:	04 94       	mov	r4,r2
80005376:	06 96       	mov	r6,r3
80005378:	02 92       	mov	r2,r1
8000537a:	40 93       	lddsp	r3,sp[0x24]
8000537c:	10 90       	mov	r0,r8
8000537e:	40 41       	lddsp	r1,sp[0x10]
80005380:	a5 a5       	sbr	r5,0x4
80005382:	c0 a8       	rjmp	80005396 <_vfprintf_r+0xd26>
80005384:	50 a7       	stdsp	sp[0x28],r7
80005386:	50 80       	stdsp	sp[0x20],r0
80005388:	0c 97       	mov	r7,r6
8000538a:	04 94       	mov	r4,r2
8000538c:	06 96       	mov	r6,r3
8000538e:	02 92       	mov	r2,r1
80005390:	40 93       	lddsp	r3,sp[0x24]
80005392:	10 90       	mov	r0,r8
80005394:	40 41       	lddsp	r1,sp[0x10]
80005396:	ed b5 00 05 	bld	r5,0x5
8000539a:	c5 d1       	brne	80005454 <_vfprintf_r+0xde4>
8000539c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053a0:	40 3c       	lddsp	r12,sp[0xc]
800053a2:	58 0c       	cp.w	r12,0
800053a4:	c2 60       	breq	800053f0 <_vfprintf_r+0xd80>
800053a6:	10 36       	cp.w	r6,r8
800053a8:	c0 a4       	brge	800053bc <_vfprintf_r+0xd4c>
800053aa:	fa cb f9 44 	sub	r11,sp,-1724
800053ae:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053b2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800053b6:	fa e9 00 00 	st.d	sp[0],r8
800053ba:	c1 88       	rjmp	800053ea <_vfprintf_r+0xd7a>
800053bc:	fa c8 f9 50 	sub	r8,sp,-1712
800053c0:	1a d8       	st.w	--sp,r8
800053c2:	fa c8 fa b8 	sub	r8,sp,-1352
800053c6:	04 9a       	mov	r10,r2
800053c8:	1a d8       	st.w	--sp,r8
800053ca:	0c 9b       	mov	r11,r6
800053cc:	fa c8 fb b4 	sub	r8,sp,-1100
800053d0:	08 9c       	mov	r12,r4
800053d2:	1a d8       	st.w	--sp,r8
800053d4:	fa c8 f9 40 	sub	r8,sp,-1728
800053d8:	fa c9 ff b4 	sub	r9,sp,-76
800053dc:	fe b0 f7 b4 	rcall	80004344 <get_arg>
800053e0:	2f dd       	sub	sp,-12
800053e2:	f8 ea 00 00 	ld.d	r10,r12[0]
800053e6:	fa eb 00 00 	st.d	sp[0],r10
800053ea:	30 08       	mov	r8,0
800053ec:	e0 8f 03 de 	bral	80005ba8 <_vfprintf_r+0x1538>
800053f0:	ee ca ff ff 	sub	r10,r7,-1
800053f4:	10 37       	cp.w	r7,r8
800053f6:	c0 b4       	brge	8000540c <_vfprintf_r+0xd9c>
800053f8:	fa c9 f9 44 	sub	r9,sp,-1724
800053fc:	14 97       	mov	r7,r10
800053fe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005402:	ec ea fd 88 	ld.d	r10,r6[-632]
80005406:	fa eb 00 00 	st.d	sp[0],r10
8000540a:	c1 88       	rjmp	8000543a <_vfprintf_r+0xdca>
8000540c:	41 09       	lddsp	r9,sp[0x40]
8000540e:	59 f8       	cp.w	r8,31
80005410:	e0 89 00 18 	brgt	80005440 <_vfprintf_r+0xdd0>
80005414:	f2 e6 00 00 	ld.d	r6,r9[0]
80005418:	f2 cb ff f8 	sub	r11,r9,-8
8000541c:	fa e7 00 00 	st.d	sp[0],r6
80005420:	51 0b       	stdsp	sp[0x40],r11
80005422:	fa c6 f9 44 	sub	r6,sp,-1724
80005426:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000542a:	fa e6 00 00 	ld.d	r6,sp[0]
8000542e:	f2 e7 fd 88 	st.d	r9[-632],r6
80005432:	2f f8       	sub	r8,-1
80005434:	14 97       	mov	r7,r10
80005436:	fb 48 06 b4 	st.w	sp[1716],r8
8000543a:	40 38       	lddsp	r8,sp[0xc]
8000543c:	e0 8f 03 b6 	bral	80005ba8 <_vfprintf_r+0x1538>
80005440:	f2 e6 00 00 	ld.d	r6,r9[0]
80005444:	40 38       	lddsp	r8,sp[0xc]
80005446:	fa e7 00 00 	st.d	sp[0],r6
8000544a:	2f 89       	sub	r9,-8
8000544c:	14 97       	mov	r7,r10
8000544e:	51 09       	stdsp	sp[0x40],r9
80005450:	e0 8f 03 ac 	bral	80005ba8 <_vfprintf_r+0x1538>
80005454:	ed b5 00 04 	bld	r5,0x4
80005458:	c1 61       	brne	80005484 <_vfprintf_r+0xe14>
8000545a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000545e:	40 3e       	lddsp	lr,sp[0xc]
80005460:	58 0e       	cp.w	lr,0
80005462:	c0 80       	breq	80005472 <_vfprintf_r+0xe02>
80005464:	10 36       	cp.w	r6,r8
80005466:	c6 74       	brge	80005534 <_vfprintf_r+0xec4>
80005468:	fa cc f9 44 	sub	r12,sp,-1724
8000546c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005470:	c8 08       	rjmp	80005570 <_vfprintf_r+0xf00>
80005472:	ee ca ff ff 	sub	r10,r7,-1
80005476:	10 37       	cp.w	r7,r8
80005478:	c7 f4       	brge	80005576 <_vfprintf_r+0xf06>
8000547a:	fa cb f9 44 	sub	r11,sp,-1724
8000547e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005482:	c7 68       	rjmp	8000556e <_vfprintf_r+0xefe>
80005484:	ed b5 00 06 	bld	r5,0x6
80005488:	c4 a1       	brne	8000551c <_vfprintf_r+0xeac>
8000548a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000548e:	40 3c       	lddsp	r12,sp[0xc]
80005490:	58 0c       	cp.w	r12,0
80005492:	c1 d0       	breq	800054cc <_vfprintf_r+0xe5c>
80005494:	10 36       	cp.w	r6,r8
80005496:	c0 64       	brge	800054a2 <_vfprintf_r+0xe32>
80005498:	fa cb f9 44 	sub	r11,sp,-1724
8000549c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800054a0:	c1 f8       	rjmp	800054de <_vfprintf_r+0xe6e>
800054a2:	fa c8 f9 50 	sub	r8,sp,-1712
800054a6:	1a d8       	st.w	--sp,r8
800054a8:	fa c8 fa b8 	sub	r8,sp,-1352
800054ac:	1a d8       	st.w	--sp,r8
800054ae:	fa c8 fb b4 	sub	r8,sp,-1100
800054b2:	1a d8       	st.w	--sp,r8
800054b4:	fa c8 f9 40 	sub	r8,sp,-1728
800054b8:	fa c9 ff b4 	sub	r9,sp,-76
800054bc:	04 9a       	mov	r10,r2
800054be:	0c 9b       	mov	r11,r6
800054c0:	08 9c       	mov	r12,r4
800054c2:	fe b0 f7 41 	rcall	80004344 <get_arg>
800054c6:	2f dd       	sub	sp,-12
800054c8:	98 18       	ld.sh	r8,r12[0x2]
800054ca:	c2 68       	rjmp	80005516 <_vfprintf_r+0xea6>
800054cc:	ee ca ff ff 	sub	r10,r7,-1
800054d0:	10 37       	cp.w	r7,r8
800054d2:	c0 94       	brge	800054e4 <_vfprintf_r+0xe74>
800054d4:	fa c9 f9 44 	sub	r9,sp,-1724
800054d8:	14 97       	mov	r7,r10
800054da:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054de:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800054e2:	c1 a8       	rjmp	80005516 <_vfprintf_r+0xea6>
800054e4:	41 09       	lddsp	r9,sp[0x40]
800054e6:	59 f8       	cp.w	r8,31
800054e8:	e0 89 00 13 	brgt	8000550e <_vfprintf_r+0xe9e>
800054ec:	f2 cb ff fc 	sub	r11,r9,-4
800054f0:	51 0b       	stdsp	sp[0x40],r11
800054f2:	72 09       	ld.w	r9,r9[0x0]
800054f4:	fa c6 f9 44 	sub	r6,sp,-1724
800054f8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800054fc:	2f f8       	sub	r8,-1
800054fe:	f7 49 fd 88 	st.w	r11[-632],r9
80005502:	fb 48 06 b4 	st.w	sp[1716],r8
80005506:	14 97       	mov	r7,r10
80005508:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000550c:	c0 58       	rjmp	80005516 <_vfprintf_r+0xea6>
8000550e:	92 18       	ld.sh	r8,r9[0x2]
80005510:	14 97       	mov	r7,r10
80005512:	2f c9       	sub	r9,-4
80005514:	51 09       	stdsp	sp[0x40],r9
80005516:	5c 78       	castu.h	r8
80005518:	50 18       	stdsp	sp[0x4],r8
8000551a:	c4 68       	rjmp	800055a6 <_vfprintf_r+0xf36>
8000551c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005520:	40 3c       	lddsp	r12,sp[0xc]
80005522:	58 0c       	cp.w	r12,0
80005524:	c1 d0       	breq	8000555e <_vfprintf_r+0xeee>
80005526:	10 36       	cp.w	r6,r8
80005528:	c0 64       	brge	80005534 <_vfprintf_r+0xec4>
8000552a:	fa cb f9 44 	sub	r11,sp,-1724
8000552e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005532:	c1 f8       	rjmp	80005570 <_vfprintf_r+0xf00>
80005534:	fa c8 f9 50 	sub	r8,sp,-1712
80005538:	1a d8       	st.w	--sp,r8
8000553a:	fa c8 fa b8 	sub	r8,sp,-1352
8000553e:	0c 9b       	mov	r11,r6
80005540:	1a d8       	st.w	--sp,r8
80005542:	fa c8 fb b4 	sub	r8,sp,-1100
80005546:	04 9a       	mov	r10,r2
80005548:	1a d8       	st.w	--sp,r8
8000554a:	08 9c       	mov	r12,r4
8000554c:	fa c8 f9 40 	sub	r8,sp,-1728
80005550:	fa c9 ff b4 	sub	r9,sp,-76
80005554:	fe b0 f6 f8 	rcall	80004344 <get_arg>
80005558:	2f dd       	sub	sp,-12
8000555a:	78 0b       	ld.w	r11,r12[0x0]
8000555c:	c2 48       	rjmp	800055a4 <_vfprintf_r+0xf34>
8000555e:	ee ca ff ff 	sub	r10,r7,-1
80005562:	10 37       	cp.w	r7,r8
80005564:	c0 94       	brge	80005576 <_vfprintf_r+0xf06>
80005566:	fa c9 f9 44 	sub	r9,sp,-1724
8000556a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000556e:	14 97       	mov	r7,r10
80005570:	ec fb fd 88 	ld.w	r11,r6[-632]
80005574:	c1 88       	rjmp	800055a4 <_vfprintf_r+0xf34>
80005576:	41 09       	lddsp	r9,sp[0x40]
80005578:	59 f8       	cp.w	r8,31
8000557a:	e0 89 00 11 	brgt	8000559c <_vfprintf_r+0xf2c>
8000557e:	f2 cb ff fc 	sub	r11,r9,-4
80005582:	51 0b       	stdsp	sp[0x40],r11
80005584:	fa c6 f9 44 	sub	r6,sp,-1724
80005588:	72 0b       	ld.w	r11,r9[0x0]
8000558a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000558e:	f3 4b fd 88 	st.w	r9[-632],r11
80005592:	2f f8       	sub	r8,-1
80005594:	14 97       	mov	r7,r10
80005596:	fb 48 06 b4 	st.w	sp[1716],r8
8000559a:	c0 58       	rjmp	800055a4 <_vfprintf_r+0xf34>
8000559c:	72 0b       	ld.w	r11,r9[0x0]
8000559e:	14 97       	mov	r7,r10
800055a0:	2f c9       	sub	r9,-4
800055a2:	51 09       	stdsp	sp[0x40],r9
800055a4:	50 1b       	stdsp	sp[0x4],r11
800055a6:	30 0e       	mov	lr,0
800055a8:	50 0e       	stdsp	sp[0x0],lr
800055aa:	1c 98       	mov	r8,lr
800055ac:	e0 8f 02 fe 	bral	80005ba8 <_vfprintf_r+0x1538>
800055b0:	50 a7       	stdsp	sp[0x28],r7
800055b2:	50 80       	stdsp	sp[0x20],r0
800055b4:	0c 97       	mov	r7,r6
800055b6:	04 94       	mov	r4,r2
800055b8:	06 96       	mov	r6,r3
800055ba:	02 92       	mov	r2,r1
800055bc:	40 93       	lddsp	r3,sp[0x24]
800055be:	40 41       	lddsp	r1,sp[0x10]
800055c0:	0e 99       	mov	r9,r7
800055c2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055c6:	40 3c       	lddsp	r12,sp[0xc]
800055c8:	58 0c       	cp.w	r12,0
800055ca:	c1 d0       	breq	80005604 <_vfprintf_r+0xf94>
800055cc:	10 36       	cp.w	r6,r8
800055ce:	c0 64       	brge	800055da <_vfprintf_r+0xf6a>
800055d0:	fa cb f9 44 	sub	r11,sp,-1724
800055d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800055d8:	c1 d8       	rjmp	80005612 <_vfprintf_r+0xfa2>
800055da:	fa c8 f9 50 	sub	r8,sp,-1712
800055de:	1a d8       	st.w	--sp,r8
800055e0:	fa c8 fa b8 	sub	r8,sp,-1352
800055e4:	1a d8       	st.w	--sp,r8
800055e6:	fa c8 fb b4 	sub	r8,sp,-1100
800055ea:	1a d8       	st.w	--sp,r8
800055ec:	fa c9 ff b4 	sub	r9,sp,-76
800055f0:	fa c8 f9 40 	sub	r8,sp,-1728
800055f4:	04 9a       	mov	r10,r2
800055f6:	0c 9b       	mov	r11,r6
800055f8:	08 9c       	mov	r12,r4
800055fa:	fe b0 f6 a5 	rcall	80004344 <get_arg>
800055fe:	2f dd       	sub	sp,-12
80005600:	78 09       	ld.w	r9,r12[0x0]
80005602:	c2 18       	rjmp	80005644 <_vfprintf_r+0xfd4>
80005604:	2f f7       	sub	r7,-1
80005606:	10 39       	cp.w	r9,r8
80005608:	c0 84       	brge	80005618 <_vfprintf_r+0xfa8>
8000560a:	fa ca f9 44 	sub	r10,sp,-1724
8000560e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005612:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005616:	c1 78       	rjmp	80005644 <_vfprintf_r+0xfd4>
80005618:	41 09       	lddsp	r9,sp[0x40]
8000561a:	59 f8       	cp.w	r8,31
8000561c:	e0 89 00 10 	brgt	8000563c <_vfprintf_r+0xfcc>
80005620:	f2 ca ff fc 	sub	r10,r9,-4
80005624:	51 0a       	stdsp	sp[0x40],r10
80005626:	fa c6 f9 44 	sub	r6,sp,-1724
8000562a:	72 09       	ld.w	r9,r9[0x0]
8000562c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005630:	f5 49 fd 88 	st.w	r10[-632],r9
80005634:	2f f8       	sub	r8,-1
80005636:	fb 48 06 b4 	st.w	sp[1716],r8
8000563a:	c0 58       	rjmp	80005644 <_vfprintf_r+0xfd4>
8000563c:	f2 c8 ff fc 	sub	r8,r9,-4
80005640:	51 08       	stdsp	sp[0x40],r8
80005642:	72 09       	ld.w	r9,r9[0x0]
80005644:	33 08       	mov	r8,48
80005646:	fb 68 06 b8 	st.b	sp[1720],r8
8000564a:	37 88       	mov	r8,120
8000564c:	30 0e       	mov	lr,0
8000564e:	fb 68 06 b9 	st.b	sp[1721],r8
80005652:	fe cc b5 de 	sub	r12,pc,-18978
80005656:	50 19       	stdsp	sp[0x4],r9
80005658:	a1 b5       	sbr	r5,0x1
8000565a:	50 0e       	stdsp	sp[0x0],lr
8000565c:	50 dc       	stdsp	sp[0x34],r12
8000565e:	30 28       	mov	r8,2
80005660:	37 80       	mov	r0,120
80005662:	e0 8f 02 a3 	bral	80005ba8 <_vfprintf_r+0x1538>
80005666:	50 a7       	stdsp	sp[0x28],r7
80005668:	50 80       	stdsp	sp[0x20],r0
8000566a:	10 90       	mov	r0,r8
8000566c:	30 08       	mov	r8,0
8000566e:	fb 68 06 bb 	st.b	sp[1723],r8
80005672:	0c 97       	mov	r7,r6
80005674:	04 94       	mov	r4,r2
80005676:	06 96       	mov	r6,r3
80005678:	02 92       	mov	r2,r1
8000567a:	40 93       	lddsp	r3,sp[0x24]
8000567c:	40 41       	lddsp	r1,sp[0x10]
8000567e:	0e 99       	mov	r9,r7
80005680:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005684:	40 3b       	lddsp	r11,sp[0xc]
80005686:	58 0b       	cp.w	r11,0
80005688:	c1 d0       	breq	800056c2 <_vfprintf_r+0x1052>
8000568a:	10 36       	cp.w	r6,r8
8000568c:	c0 64       	brge	80005698 <_vfprintf_r+0x1028>
8000568e:	fa ca f9 44 	sub	r10,sp,-1724
80005692:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005696:	c1 d8       	rjmp	800056d0 <_vfprintf_r+0x1060>
80005698:	fa c8 f9 50 	sub	r8,sp,-1712
8000569c:	1a d8       	st.w	--sp,r8
8000569e:	fa c8 fa b8 	sub	r8,sp,-1352
800056a2:	1a d8       	st.w	--sp,r8
800056a4:	fa c8 fb b4 	sub	r8,sp,-1100
800056a8:	0c 9b       	mov	r11,r6
800056aa:	1a d8       	st.w	--sp,r8
800056ac:	04 9a       	mov	r10,r2
800056ae:	fa c8 f9 40 	sub	r8,sp,-1728
800056b2:	fa c9 ff b4 	sub	r9,sp,-76
800056b6:	08 9c       	mov	r12,r4
800056b8:	fe b0 f6 46 	rcall	80004344 <get_arg>
800056bc:	2f dd       	sub	sp,-12
800056be:	78 06       	ld.w	r6,r12[0x0]
800056c0:	c2 08       	rjmp	80005700 <_vfprintf_r+0x1090>
800056c2:	2f f7       	sub	r7,-1
800056c4:	10 39       	cp.w	r9,r8
800056c6:	c0 84       	brge	800056d6 <_vfprintf_r+0x1066>
800056c8:	fa c9 f9 44 	sub	r9,sp,-1724
800056cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800056d0:	ec f6 fd 88 	ld.w	r6,r6[-632]
800056d4:	c1 68       	rjmp	80005700 <_vfprintf_r+0x1090>
800056d6:	41 09       	lddsp	r9,sp[0x40]
800056d8:	59 f8       	cp.w	r8,31
800056da:	e0 89 00 10 	brgt	800056fa <_vfprintf_r+0x108a>
800056de:	f2 ca ff fc 	sub	r10,r9,-4
800056e2:	51 0a       	stdsp	sp[0x40],r10
800056e4:	72 06       	ld.w	r6,r9[0x0]
800056e6:	fa ce f9 44 	sub	lr,sp,-1724
800056ea:	fc 08 00 39 	add	r9,lr,r8<<0x3
800056ee:	f3 46 fd 88 	st.w	r9[-632],r6
800056f2:	2f f8       	sub	r8,-1
800056f4:	fb 48 06 b4 	st.w	sp[1716],r8
800056f8:	c0 48       	rjmp	80005700 <_vfprintf_r+0x1090>
800056fa:	72 06       	ld.w	r6,r9[0x0]
800056fc:	2f c9       	sub	r9,-4
800056fe:	51 09       	stdsp	sp[0x40],r9
80005700:	40 2c       	lddsp	r12,sp[0x8]
80005702:	58 0c       	cp.w	r12,0
80005704:	c1 05       	brlt	80005724 <_vfprintf_r+0x10b4>
80005706:	18 9a       	mov	r10,r12
80005708:	30 0b       	mov	r11,0
8000570a:	0c 9c       	mov	r12,r6
8000570c:	e0 a0 14 58 	rcall	80007fbc <memchr>
80005710:	e0 80 02 df 	breq	80005cce <_vfprintf_r+0x165e>
80005714:	f8 06 01 02 	sub	r2,r12,r6
80005718:	40 2b       	lddsp	r11,sp[0x8]
8000571a:	16 32       	cp.w	r2,r11
8000571c:	e0 89 02 d9 	brgt	80005cce <_vfprintf_r+0x165e>
80005720:	e0 8f 02 d4 	bral	80005cc8 <_vfprintf_r+0x1658>
80005724:	30 0a       	mov	r10,0
80005726:	0c 9c       	mov	r12,r6
80005728:	50 2a       	stdsp	sp[0x8],r10
8000572a:	e0 a0 19 2b 	rcall	80008980 <strlen>
8000572e:	18 92       	mov	r2,r12
80005730:	e0 8f 02 d2 	bral	80005cd4 <_vfprintf_r+0x1664>
80005734:	50 a7       	stdsp	sp[0x28],r7
80005736:	50 80       	stdsp	sp[0x20],r0
80005738:	0c 97       	mov	r7,r6
8000573a:	04 94       	mov	r4,r2
8000573c:	06 96       	mov	r6,r3
8000573e:	02 92       	mov	r2,r1
80005740:	40 93       	lddsp	r3,sp[0x24]
80005742:	10 90       	mov	r0,r8
80005744:	40 41       	lddsp	r1,sp[0x10]
80005746:	a5 a5       	sbr	r5,0x4
80005748:	c0 a8       	rjmp	8000575c <_vfprintf_r+0x10ec>
8000574a:	50 a7       	stdsp	sp[0x28],r7
8000574c:	50 80       	stdsp	sp[0x20],r0
8000574e:	0c 97       	mov	r7,r6
80005750:	04 94       	mov	r4,r2
80005752:	06 96       	mov	r6,r3
80005754:	02 92       	mov	r2,r1
80005756:	40 93       	lddsp	r3,sp[0x24]
80005758:	10 90       	mov	r0,r8
8000575a:	40 41       	lddsp	r1,sp[0x10]
8000575c:	ed b5 00 05 	bld	r5,0x5
80005760:	c5 61       	brne	8000580c <_vfprintf_r+0x119c>
80005762:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005766:	40 39       	lddsp	r9,sp[0xc]
80005768:	58 09       	cp.w	r9,0
8000576a:	c2 10       	breq	800057ac <_vfprintf_r+0x113c>
8000576c:	10 36       	cp.w	r6,r8
8000576e:	c0 74       	brge	8000577c <_vfprintf_r+0x110c>
80005770:	fa c8 f9 44 	sub	r8,sp,-1724
80005774:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005778:	c2 38       	rjmp	800057be <_vfprintf_r+0x114e>
8000577a:	d7 03       	nop
8000577c:	fa c8 f9 50 	sub	r8,sp,-1712
80005780:	1a d8       	st.w	--sp,r8
80005782:	fa c8 fa b8 	sub	r8,sp,-1352
80005786:	1a d8       	st.w	--sp,r8
80005788:	fa c8 fb b4 	sub	r8,sp,-1100
8000578c:	1a d8       	st.w	--sp,r8
8000578e:	fa c8 f9 40 	sub	r8,sp,-1728
80005792:	fa c9 ff b4 	sub	r9,sp,-76
80005796:	04 9a       	mov	r10,r2
80005798:	0c 9b       	mov	r11,r6
8000579a:	08 9c       	mov	r12,r4
8000579c:	fe b0 f5 d4 	rcall	80004344 <get_arg>
800057a0:	2f dd       	sub	sp,-12
800057a2:	f8 e8 00 00 	ld.d	r8,r12[0]
800057a6:	fa e9 00 00 	st.d	sp[0],r8
800057aa:	c2 e8       	rjmp	80005806 <_vfprintf_r+0x1196>
800057ac:	ee ca ff ff 	sub	r10,r7,-1
800057b0:	10 37       	cp.w	r7,r8
800057b2:	c0 b4       	brge	800057c8 <_vfprintf_r+0x1158>
800057b4:	fa c8 f9 44 	sub	r8,sp,-1724
800057b8:	14 97       	mov	r7,r10
800057ba:	f0 06 00 36 	add	r6,r8,r6<<0x3
800057be:	ec ea fd 88 	ld.d	r10,r6[-632]
800057c2:	fa eb 00 00 	st.d	sp[0],r10
800057c6:	c2 08       	rjmp	80005806 <_vfprintf_r+0x1196>
800057c8:	41 09       	lddsp	r9,sp[0x40]
800057ca:	59 f8       	cp.w	r8,31
800057cc:	e0 89 00 16 	brgt	800057f8 <_vfprintf_r+0x1188>
800057d0:	f2 e6 00 00 	ld.d	r6,r9[0]
800057d4:	f2 cb ff f8 	sub	r11,r9,-8
800057d8:	fa e7 00 00 	st.d	sp[0],r6
800057dc:	51 0b       	stdsp	sp[0x40],r11
800057de:	fa c6 f9 44 	sub	r6,sp,-1724
800057e2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800057e6:	fa e6 00 00 	ld.d	r6,sp[0]
800057ea:	f2 e7 fd 88 	st.d	r9[-632],r6
800057ee:	2f f8       	sub	r8,-1
800057f0:	14 97       	mov	r7,r10
800057f2:	fb 48 06 b4 	st.w	sp[1716],r8
800057f6:	c0 88       	rjmp	80005806 <_vfprintf_r+0x1196>
800057f8:	f2 e6 00 00 	ld.d	r6,r9[0]
800057fc:	2f 89       	sub	r9,-8
800057fe:	fa e7 00 00 	st.d	sp[0],r6
80005802:	51 09       	stdsp	sp[0x40],r9
80005804:	14 97       	mov	r7,r10
80005806:	30 18       	mov	r8,1
80005808:	e0 8f 01 d0 	bral	80005ba8 <_vfprintf_r+0x1538>
8000580c:	ed b5 00 04 	bld	r5,0x4
80005810:	c1 61       	brne	8000583c <_vfprintf_r+0x11cc>
80005812:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005816:	40 3e       	lddsp	lr,sp[0xc]
80005818:	58 0e       	cp.w	lr,0
8000581a:	c0 80       	breq	8000582a <_vfprintf_r+0x11ba>
8000581c:	10 36       	cp.w	r6,r8
8000581e:	c6 74       	brge	800058ec <_vfprintf_r+0x127c>
80005820:	fa cc f9 44 	sub	r12,sp,-1724
80005824:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005828:	c8 08       	rjmp	80005928 <_vfprintf_r+0x12b8>
8000582a:	ee ca ff ff 	sub	r10,r7,-1
8000582e:	10 37       	cp.w	r7,r8
80005830:	c7 f4       	brge	8000592e <_vfprintf_r+0x12be>
80005832:	fa cb f9 44 	sub	r11,sp,-1724
80005836:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000583a:	c7 68       	rjmp	80005926 <_vfprintf_r+0x12b6>
8000583c:	ed b5 00 06 	bld	r5,0x6
80005840:	c4 a1       	brne	800058d4 <_vfprintf_r+0x1264>
80005842:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005846:	40 3c       	lddsp	r12,sp[0xc]
80005848:	58 0c       	cp.w	r12,0
8000584a:	c1 d0       	breq	80005884 <_vfprintf_r+0x1214>
8000584c:	10 36       	cp.w	r6,r8
8000584e:	c0 64       	brge	8000585a <_vfprintf_r+0x11ea>
80005850:	fa cb f9 44 	sub	r11,sp,-1724
80005854:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005858:	c1 f8       	rjmp	80005896 <_vfprintf_r+0x1226>
8000585a:	fa c8 f9 50 	sub	r8,sp,-1712
8000585e:	1a d8       	st.w	--sp,r8
80005860:	fa c8 fa b8 	sub	r8,sp,-1352
80005864:	1a d8       	st.w	--sp,r8
80005866:	fa c8 fb b4 	sub	r8,sp,-1100
8000586a:	1a d8       	st.w	--sp,r8
8000586c:	fa c8 f9 40 	sub	r8,sp,-1728
80005870:	fa c9 ff b4 	sub	r9,sp,-76
80005874:	04 9a       	mov	r10,r2
80005876:	0c 9b       	mov	r11,r6
80005878:	08 9c       	mov	r12,r4
8000587a:	fe b0 f5 65 	rcall	80004344 <get_arg>
8000587e:	2f dd       	sub	sp,-12
80005880:	98 18       	ld.sh	r8,r12[0x2]
80005882:	c2 68       	rjmp	800058ce <_vfprintf_r+0x125e>
80005884:	ee ca ff ff 	sub	r10,r7,-1
80005888:	10 37       	cp.w	r7,r8
8000588a:	c0 94       	brge	8000589c <_vfprintf_r+0x122c>
8000588c:	fa c9 f9 44 	sub	r9,sp,-1724
80005890:	14 97       	mov	r7,r10
80005892:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005896:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000589a:	c1 a8       	rjmp	800058ce <_vfprintf_r+0x125e>
8000589c:	41 09       	lddsp	r9,sp[0x40]
8000589e:	59 f8       	cp.w	r8,31
800058a0:	e0 89 00 13 	brgt	800058c6 <_vfprintf_r+0x1256>
800058a4:	f2 cb ff fc 	sub	r11,r9,-4
800058a8:	51 0b       	stdsp	sp[0x40],r11
800058aa:	72 09       	ld.w	r9,r9[0x0]
800058ac:	fa c6 f9 44 	sub	r6,sp,-1724
800058b0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800058b4:	2f f8       	sub	r8,-1
800058b6:	f7 49 fd 88 	st.w	r11[-632],r9
800058ba:	fb 48 06 b4 	st.w	sp[1716],r8
800058be:	14 97       	mov	r7,r10
800058c0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800058c4:	c0 58       	rjmp	800058ce <_vfprintf_r+0x125e>
800058c6:	92 18       	ld.sh	r8,r9[0x2]
800058c8:	14 97       	mov	r7,r10
800058ca:	2f c9       	sub	r9,-4
800058cc:	51 09       	stdsp	sp[0x40],r9
800058ce:	5c 78       	castu.h	r8
800058d0:	50 18       	stdsp	sp[0x4],r8
800058d2:	c4 68       	rjmp	8000595e <_vfprintf_r+0x12ee>
800058d4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800058d8:	40 3c       	lddsp	r12,sp[0xc]
800058da:	58 0c       	cp.w	r12,0
800058dc:	c1 d0       	breq	80005916 <_vfprintf_r+0x12a6>
800058de:	10 36       	cp.w	r6,r8
800058e0:	c0 64       	brge	800058ec <_vfprintf_r+0x127c>
800058e2:	fa cb f9 44 	sub	r11,sp,-1724
800058e6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800058ea:	c1 f8       	rjmp	80005928 <_vfprintf_r+0x12b8>
800058ec:	fa c8 f9 50 	sub	r8,sp,-1712
800058f0:	1a d8       	st.w	--sp,r8
800058f2:	fa c8 fa b8 	sub	r8,sp,-1352
800058f6:	0c 9b       	mov	r11,r6
800058f8:	1a d8       	st.w	--sp,r8
800058fa:	fa c8 fb b4 	sub	r8,sp,-1100
800058fe:	04 9a       	mov	r10,r2
80005900:	1a d8       	st.w	--sp,r8
80005902:	08 9c       	mov	r12,r4
80005904:	fa c8 f9 40 	sub	r8,sp,-1728
80005908:	fa c9 ff b4 	sub	r9,sp,-76
8000590c:	fe b0 f5 1c 	rcall	80004344 <get_arg>
80005910:	2f dd       	sub	sp,-12
80005912:	78 0b       	ld.w	r11,r12[0x0]
80005914:	c2 48       	rjmp	8000595c <_vfprintf_r+0x12ec>
80005916:	ee ca ff ff 	sub	r10,r7,-1
8000591a:	10 37       	cp.w	r7,r8
8000591c:	c0 94       	brge	8000592e <_vfprintf_r+0x12be>
8000591e:	fa c9 f9 44 	sub	r9,sp,-1724
80005922:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005926:	14 97       	mov	r7,r10
80005928:	ec fb fd 88 	ld.w	r11,r6[-632]
8000592c:	c1 88       	rjmp	8000595c <_vfprintf_r+0x12ec>
8000592e:	41 09       	lddsp	r9,sp[0x40]
80005930:	59 f8       	cp.w	r8,31
80005932:	e0 89 00 11 	brgt	80005954 <_vfprintf_r+0x12e4>
80005936:	f2 cb ff fc 	sub	r11,r9,-4
8000593a:	51 0b       	stdsp	sp[0x40],r11
8000593c:	fa c6 f9 44 	sub	r6,sp,-1724
80005940:	72 0b       	ld.w	r11,r9[0x0]
80005942:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005946:	f3 4b fd 88 	st.w	r9[-632],r11
8000594a:	2f f8       	sub	r8,-1
8000594c:	14 97       	mov	r7,r10
8000594e:	fb 48 06 b4 	st.w	sp[1716],r8
80005952:	c0 58       	rjmp	8000595c <_vfprintf_r+0x12ec>
80005954:	72 0b       	ld.w	r11,r9[0x0]
80005956:	14 97       	mov	r7,r10
80005958:	2f c9       	sub	r9,-4
8000595a:	51 09       	stdsp	sp[0x40],r9
8000595c:	50 1b       	stdsp	sp[0x4],r11
8000595e:	30 0e       	mov	lr,0
80005960:	30 18       	mov	r8,1
80005962:	50 0e       	stdsp	sp[0x0],lr
80005964:	c2 29       	rjmp	80005ba8 <_vfprintf_r+0x1538>
80005966:	50 a7       	stdsp	sp[0x28],r7
80005968:	50 80       	stdsp	sp[0x20],r0
8000596a:	0c 97       	mov	r7,r6
8000596c:	04 94       	mov	r4,r2
8000596e:	06 96       	mov	r6,r3
80005970:	02 92       	mov	r2,r1
80005972:	fe cc b8 fe 	sub	r12,pc,-18178
80005976:	40 93       	lddsp	r3,sp[0x24]
80005978:	10 90       	mov	r0,r8
8000597a:	40 41       	lddsp	r1,sp[0x10]
8000597c:	50 dc       	stdsp	sp[0x34],r12
8000597e:	ed b5 00 05 	bld	r5,0x5
80005982:	c5 51       	brne	80005a2c <_vfprintf_r+0x13bc>
80005984:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005988:	40 3b       	lddsp	r11,sp[0xc]
8000598a:	58 0b       	cp.w	r11,0
8000598c:	c2 20       	breq	800059d0 <_vfprintf_r+0x1360>
8000598e:	10 36       	cp.w	r6,r8
80005990:	c0 a4       	brge	800059a4 <_vfprintf_r+0x1334>
80005992:	fa ca f9 44 	sub	r10,sp,-1724
80005996:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000599a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000599e:	fa e9 00 00 	st.d	sp[0],r8
800059a2:	cf 28       	rjmp	80005b86 <_vfprintf_r+0x1516>
800059a4:	fa c8 f9 50 	sub	r8,sp,-1712
800059a8:	1a d8       	st.w	--sp,r8
800059aa:	fa c8 fa b8 	sub	r8,sp,-1352
800059ae:	04 9a       	mov	r10,r2
800059b0:	1a d8       	st.w	--sp,r8
800059b2:	0c 9b       	mov	r11,r6
800059b4:	fa c8 fb b4 	sub	r8,sp,-1100
800059b8:	08 9c       	mov	r12,r4
800059ba:	1a d8       	st.w	--sp,r8
800059bc:	fa c8 f9 40 	sub	r8,sp,-1728
800059c0:	fa c9 ff b4 	sub	r9,sp,-76
800059c4:	fe b0 f4 c0 	rcall	80004344 <get_arg>
800059c8:	2f dd       	sub	sp,-12
800059ca:	f8 ea 00 00 	ld.d	r10,r12[0]
800059ce:	c0 c8       	rjmp	800059e6 <_vfprintf_r+0x1376>
800059d0:	ee ca ff ff 	sub	r10,r7,-1
800059d4:	10 37       	cp.w	r7,r8
800059d6:	c0 b4       	brge	800059ec <_vfprintf_r+0x137c>
800059d8:	fa c9 f9 44 	sub	r9,sp,-1724
800059dc:	14 97       	mov	r7,r10
800059de:	f2 06 00 36 	add	r6,r9,r6<<0x3
800059e2:	ec ea fd 88 	ld.d	r10,r6[-632]
800059e6:	fa eb 00 00 	st.d	sp[0],r10
800059ea:	cc e8       	rjmp	80005b86 <_vfprintf_r+0x1516>
800059ec:	41 09       	lddsp	r9,sp[0x40]
800059ee:	59 f8       	cp.w	r8,31
800059f0:	e0 89 00 16 	brgt	80005a1c <_vfprintf_r+0x13ac>
800059f4:	f2 e6 00 00 	ld.d	r6,r9[0]
800059f8:	f2 cb ff f8 	sub	r11,r9,-8
800059fc:	fa e7 00 00 	st.d	sp[0],r6
80005a00:	51 0b       	stdsp	sp[0x40],r11
80005a02:	fa c6 f9 44 	sub	r6,sp,-1724
80005a06:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005a0a:	fa e6 00 00 	ld.d	r6,sp[0]
80005a0e:	f2 e7 fd 88 	st.d	r9[-632],r6
80005a12:	2f f8       	sub	r8,-1
80005a14:	14 97       	mov	r7,r10
80005a16:	fb 48 06 b4 	st.w	sp[1716],r8
80005a1a:	cb 68       	rjmp	80005b86 <_vfprintf_r+0x1516>
80005a1c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005a20:	2f 89       	sub	r9,-8
80005a22:	fa e7 00 00 	st.d	sp[0],r6
80005a26:	51 09       	stdsp	sp[0x40],r9
80005a28:	14 97       	mov	r7,r10
80005a2a:	ca e8       	rjmp	80005b86 <_vfprintf_r+0x1516>
80005a2c:	ed b5 00 04 	bld	r5,0x4
80005a30:	c1 71       	brne	80005a5e <_vfprintf_r+0x13ee>
80005a32:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a36:	40 3e       	lddsp	lr,sp[0xc]
80005a38:	58 0e       	cp.w	lr,0
80005a3a:	c0 80       	breq	80005a4a <_vfprintf_r+0x13da>
80005a3c:	10 36       	cp.w	r6,r8
80005a3e:	c6 94       	brge	80005b10 <_vfprintf_r+0x14a0>
80005a40:	fa cc f9 44 	sub	r12,sp,-1724
80005a44:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005a48:	c8 28       	rjmp	80005b4c <_vfprintf_r+0x14dc>
80005a4a:	ee ca ff ff 	sub	r10,r7,-1
80005a4e:	10 37       	cp.w	r7,r8
80005a50:	e0 84 00 81 	brge	80005b52 <_vfprintf_r+0x14e2>
80005a54:	fa cb f9 44 	sub	r11,sp,-1724
80005a58:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a5c:	c7 78       	rjmp	80005b4a <_vfprintf_r+0x14da>
80005a5e:	ed b5 00 06 	bld	r5,0x6
80005a62:	c4 b1       	brne	80005af8 <_vfprintf_r+0x1488>
80005a64:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a68:	40 3c       	lddsp	r12,sp[0xc]
80005a6a:	58 0c       	cp.w	r12,0
80005a6c:	c1 d0       	breq	80005aa6 <_vfprintf_r+0x1436>
80005a6e:	10 36       	cp.w	r6,r8
80005a70:	c0 64       	brge	80005a7c <_vfprintf_r+0x140c>
80005a72:	fa cb f9 44 	sub	r11,sp,-1724
80005a76:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a7a:	c1 f8       	rjmp	80005ab8 <_vfprintf_r+0x1448>
80005a7c:	fa c8 f9 50 	sub	r8,sp,-1712
80005a80:	1a d8       	st.w	--sp,r8
80005a82:	fa c8 fa b8 	sub	r8,sp,-1352
80005a86:	1a d8       	st.w	--sp,r8
80005a88:	fa c8 fb b4 	sub	r8,sp,-1100
80005a8c:	1a d8       	st.w	--sp,r8
80005a8e:	fa c8 f9 40 	sub	r8,sp,-1728
80005a92:	fa c9 ff b4 	sub	r9,sp,-76
80005a96:	04 9a       	mov	r10,r2
80005a98:	0c 9b       	mov	r11,r6
80005a9a:	08 9c       	mov	r12,r4
80005a9c:	fe b0 f4 54 	rcall	80004344 <get_arg>
80005aa0:	2f dd       	sub	sp,-12
80005aa2:	98 18       	ld.sh	r8,r12[0x2]
80005aa4:	c2 78       	rjmp	80005af2 <_vfprintf_r+0x1482>
80005aa6:	ee ca ff ff 	sub	r10,r7,-1
80005aaa:	10 37       	cp.w	r7,r8
80005aac:	c0 a4       	brge	80005ac0 <_vfprintf_r+0x1450>
80005aae:	fa c9 f9 44 	sub	r9,sp,-1724
80005ab2:	14 97       	mov	r7,r10
80005ab4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ab8:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005abc:	c1 b8       	rjmp	80005af2 <_vfprintf_r+0x1482>
80005abe:	d7 03       	nop
80005ac0:	41 09       	lddsp	r9,sp[0x40]
80005ac2:	59 f8       	cp.w	r8,31
80005ac4:	e0 89 00 13 	brgt	80005aea <_vfprintf_r+0x147a>
80005ac8:	f2 cb ff fc 	sub	r11,r9,-4
80005acc:	51 0b       	stdsp	sp[0x40],r11
80005ace:	72 09       	ld.w	r9,r9[0x0]
80005ad0:	fa c6 f9 44 	sub	r6,sp,-1724
80005ad4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005ad8:	2f f8       	sub	r8,-1
80005ada:	f7 49 fd 88 	st.w	r11[-632],r9
80005ade:	fb 48 06 b4 	st.w	sp[1716],r8
80005ae2:	14 97       	mov	r7,r10
80005ae4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005ae8:	c0 58       	rjmp	80005af2 <_vfprintf_r+0x1482>
80005aea:	92 18       	ld.sh	r8,r9[0x2]
80005aec:	14 97       	mov	r7,r10
80005aee:	2f c9       	sub	r9,-4
80005af0:	51 09       	stdsp	sp[0x40],r9
80005af2:	5c 78       	castu.h	r8
80005af4:	50 18       	stdsp	sp[0x4],r8
80005af6:	c4 68       	rjmp	80005b82 <_vfprintf_r+0x1512>
80005af8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005afc:	40 3c       	lddsp	r12,sp[0xc]
80005afe:	58 0c       	cp.w	r12,0
80005b00:	c1 d0       	breq	80005b3a <_vfprintf_r+0x14ca>
80005b02:	10 36       	cp.w	r6,r8
80005b04:	c0 64       	brge	80005b10 <_vfprintf_r+0x14a0>
80005b06:	fa cb f9 44 	sub	r11,sp,-1724
80005b0a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005b0e:	c1 f8       	rjmp	80005b4c <_vfprintf_r+0x14dc>
80005b10:	fa c8 f9 50 	sub	r8,sp,-1712
80005b14:	1a d8       	st.w	--sp,r8
80005b16:	fa c8 fa b8 	sub	r8,sp,-1352
80005b1a:	0c 9b       	mov	r11,r6
80005b1c:	1a d8       	st.w	--sp,r8
80005b1e:	fa c8 fb b4 	sub	r8,sp,-1100
80005b22:	04 9a       	mov	r10,r2
80005b24:	1a d8       	st.w	--sp,r8
80005b26:	08 9c       	mov	r12,r4
80005b28:	fa c8 f9 40 	sub	r8,sp,-1728
80005b2c:	fa c9 ff b4 	sub	r9,sp,-76
80005b30:	fe b0 f4 0a 	rcall	80004344 <get_arg>
80005b34:	2f dd       	sub	sp,-12
80005b36:	78 0b       	ld.w	r11,r12[0x0]
80005b38:	c2 48       	rjmp	80005b80 <_vfprintf_r+0x1510>
80005b3a:	ee ca ff ff 	sub	r10,r7,-1
80005b3e:	10 37       	cp.w	r7,r8
80005b40:	c0 94       	brge	80005b52 <_vfprintf_r+0x14e2>
80005b42:	fa c9 f9 44 	sub	r9,sp,-1724
80005b46:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005b4a:	14 97       	mov	r7,r10
80005b4c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005b50:	c1 88       	rjmp	80005b80 <_vfprintf_r+0x1510>
80005b52:	41 09       	lddsp	r9,sp[0x40]
80005b54:	59 f8       	cp.w	r8,31
80005b56:	e0 89 00 11 	brgt	80005b78 <_vfprintf_r+0x1508>
80005b5a:	f2 cb ff fc 	sub	r11,r9,-4
80005b5e:	51 0b       	stdsp	sp[0x40],r11
80005b60:	fa c6 f9 44 	sub	r6,sp,-1724
80005b64:	72 0b       	ld.w	r11,r9[0x0]
80005b66:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005b6a:	f3 4b fd 88 	st.w	r9[-632],r11
80005b6e:	2f f8       	sub	r8,-1
80005b70:	14 97       	mov	r7,r10
80005b72:	fb 48 06 b4 	st.w	sp[1716],r8
80005b76:	c0 58       	rjmp	80005b80 <_vfprintf_r+0x1510>
80005b78:	72 0b       	ld.w	r11,r9[0x0]
80005b7a:	14 97       	mov	r7,r10
80005b7c:	2f c9       	sub	r9,-4
80005b7e:	51 09       	stdsp	sp[0x40],r9
80005b80:	50 1b       	stdsp	sp[0x4],r11
80005b82:	30 0e       	mov	lr,0
80005b84:	50 0e       	stdsp	sp[0x0],lr
80005b86:	40 08       	lddsp	r8,sp[0x0]
80005b88:	40 1c       	lddsp	r12,sp[0x4]
80005b8a:	18 48       	or	r8,r12
80005b8c:	5f 19       	srne	r9
80005b8e:	0a 98       	mov	r8,r5
80005b90:	eb e9 00 09 	and	r9,r5,r9
80005b94:	a1 b8       	sbr	r8,0x1
80005b96:	58 09       	cp.w	r9,0
80005b98:	c0 70       	breq	80005ba6 <_vfprintf_r+0x1536>
80005b9a:	10 95       	mov	r5,r8
80005b9c:	fb 60 06 b9 	st.b	sp[1721],r0
80005ba0:	33 08       	mov	r8,48
80005ba2:	fb 68 06 b8 	st.b	sp[1720],r8
80005ba6:	30 28       	mov	r8,2
80005ba8:	30 09       	mov	r9,0
80005baa:	fb 69 06 bb 	st.b	sp[1723],r9
80005bae:	0a 99       	mov	r9,r5
80005bb0:	a7 d9       	cbr	r9,0x7
80005bb2:	40 2b       	lddsp	r11,sp[0x8]
80005bb4:	40 16       	lddsp	r6,sp[0x4]
80005bb6:	58 0b       	cp.w	r11,0
80005bb8:	5f 1a       	srne	r10
80005bba:	f2 05 17 40 	movge	r5,r9
80005bbe:	fa c2 f9 78 	sub	r2,sp,-1672
80005bc2:	40 09       	lddsp	r9,sp[0x0]
80005bc4:	0c 49       	or	r9,r6
80005bc6:	5f 19       	srne	r9
80005bc8:	f5 e9 10 09 	or	r9,r10,r9
80005bcc:	c5 c0       	breq	80005c84 <_vfprintf_r+0x1614>
80005bce:	30 19       	mov	r9,1
80005bd0:	f2 08 18 00 	cp.b	r8,r9
80005bd4:	c0 60       	breq	80005be0 <_vfprintf_r+0x1570>
80005bd6:	30 29       	mov	r9,2
80005bd8:	f2 08 18 00 	cp.b	r8,r9
80005bdc:	c0 41       	brne	80005be4 <_vfprintf_r+0x1574>
80005bde:	c3 c8       	rjmp	80005c56 <_vfprintf_r+0x15e6>
80005be0:	04 96       	mov	r6,r2
80005be2:	c3 08       	rjmp	80005c42 <_vfprintf_r+0x15d2>
80005be4:	04 96       	mov	r6,r2
80005be6:	fa e8 00 00 	ld.d	r8,sp[0]
80005bea:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005bee:	2d 0a       	sub	r10,-48
80005bf0:	0c fa       	st.b	--r6,r10
80005bf2:	f0 0b 16 03 	lsr	r11,r8,0x3
80005bf6:	f2 0c 16 03 	lsr	r12,r9,0x3
80005bfa:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005bfe:	18 99       	mov	r9,r12
80005c00:	16 98       	mov	r8,r11
80005c02:	58 08       	cp.w	r8,0
80005c04:	5c 29       	cpc	r9
80005c06:	cf 21       	brne	80005bea <_vfprintf_r+0x157a>
80005c08:	fa e9 00 00 	st.d	sp[0],r8
80005c0c:	ed b5 00 00 	bld	r5,0x0
80005c10:	c4 51       	brne	80005c9a <_vfprintf_r+0x162a>
80005c12:	33 09       	mov	r9,48
80005c14:	f2 0a 18 00 	cp.b	r10,r9
80005c18:	c4 10       	breq	80005c9a <_vfprintf_r+0x162a>
80005c1a:	0c f9       	st.b	--r6,r9
80005c1c:	c3 f8       	rjmp	80005c9a <_vfprintf_r+0x162a>
80005c1e:	fa ea 00 00 	ld.d	r10,sp[0]
80005c22:	30 a8       	mov	r8,10
80005c24:	30 09       	mov	r9,0
80005c26:	e0 a0 1b 99 	rcall	80009358 <__avr32_umod64>
80005c2a:	30 a8       	mov	r8,10
80005c2c:	2d 0a       	sub	r10,-48
80005c2e:	30 09       	mov	r9,0
80005c30:	ac 8a       	st.b	r6[0x0],r10
80005c32:	fa ea 00 00 	ld.d	r10,sp[0]
80005c36:	fe b0 f1 8e 	rcall	80003f52 <__avr32_udiv64>
80005c3a:	16 99       	mov	r9,r11
80005c3c:	14 98       	mov	r8,r10
80005c3e:	fa e9 00 00 	st.d	sp[0],r8
80005c42:	20 16       	sub	r6,1
80005c44:	fa ea 00 00 	ld.d	r10,sp[0]
80005c48:	58 9a       	cp.w	r10,9
80005c4a:	5c 2b       	cpc	r11
80005c4c:	fe 9b ff e9 	brhi	80005c1e <_vfprintf_r+0x15ae>
80005c50:	1b f8       	ld.ub	r8,sp[0x7]
80005c52:	2d 08       	sub	r8,-48
80005c54:	c2 08       	rjmp	80005c94 <_vfprintf_r+0x1624>
80005c56:	04 96       	mov	r6,r2
80005c58:	fa e8 00 00 	ld.d	r8,sp[0]
80005c5c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005c60:	40 de       	lddsp	lr,sp[0x34]
80005c62:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005c66:	0c fa       	st.b	--r6,r10
80005c68:	f2 0b 16 04 	lsr	r11,r9,0x4
80005c6c:	f0 0a 16 04 	lsr	r10,r8,0x4
80005c70:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005c74:	16 99       	mov	r9,r11
80005c76:	14 98       	mov	r8,r10
80005c78:	58 08       	cp.w	r8,0
80005c7a:	5c 29       	cpc	r9
80005c7c:	cf 01       	brne	80005c5c <_vfprintf_r+0x15ec>
80005c7e:	fa e9 00 00 	st.d	sp[0],r8
80005c82:	c0 c8       	rjmp	80005c9a <_vfprintf_r+0x162a>
80005c84:	58 08       	cp.w	r8,0
80005c86:	c0 91       	brne	80005c98 <_vfprintf_r+0x1628>
80005c88:	ed b5 00 00 	bld	r5,0x0
80005c8c:	c0 61       	brne	80005c98 <_vfprintf_r+0x1628>
80005c8e:	fa c6 f9 79 	sub	r6,sp,-1671
80005c92:	33 08       	mov	r8,48
80005c94:	ac 88       	st.b	r6[0x0],r8
80005c96:	c0 28       	rjmp	80005c9a <_vfprintf_r+0x162a>
80005c98:	04 96       	mov	r6,r2
80005c9a:	0c 12       	sub	r2,r6
80005c9c:	c1 c8       	rjmp	80005cd4 <_vfprintf_r+0x1664>
80005c9e:	50 a7       	stdsp	sp[0x28],r7
80005ca0:	50 80       	stdsp	sp[0x20],r0
80005ca2:	40 93       	lddsp	r3,sp[0x24]
80005ca4:	0c 97       	mov	r7,r6
80005ca6:	10 90       	mov	r0,r8
80005ca8:	04 94       	mov	r4,r2
80005caa:	40 41       	lddsp	r1,sp[0x10]
80005cac:	58 08       	cp.w	r8,0
80005cae:	e0 80 04 4f 	breq	8000654c <_vfprintf_r+0x1edc>
80005cb2:	fb 68 06 60 	st.b	sp[1632],r8
80005cb6:	30 0c       	mov	r12,0
80005cb8:	30 08       	mov	r8,0
80005cba:	30 12       	mov	r2,1
80005cbc:	fb 68 06 bb 	st.b	sp[1723],r8
80005cc0:	50 2c       	stdsp	sp[0x8],r12
80005cc2:	fa c6 f9 a0 	sub	r6,sp,-1632
80005cc6:	c0 78       	rjmp	80005cd4 <_vfprintf_r+0x1664>
80005cc8:	30 0b       	mov	r11,0
80005cca:	50 2b       	stdsp	sp[0x8],r11
80005ccc:	c0 48       	rjmp	80005cd4 <_vfprintf_r+0x1664>
80005cce:	40 22       	lddsp	r2,sp[0x8]
80005cd0:	30 0a       	mov	r10,0
80005cd2:	50 2a       	stdsp	sp[0x8],r10
80005cd4:	40 29       	lddsp	r9,sp[0x8]
80005cd6:	e4 09 0c 49 	max	r9,r2,r9
80005cda:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005cde:	50 39       	stdsp	sp[0xc],r9
80005ce0:	0a 9e       	mov	lr,r5
80005ce2:	30 09       	mov	r9,0
80005ce4:	e2 1e 00 02 	andl	lr,0x2,COH
80005ce8:	f2 08 18 00 	cp.b	r8,r9
80005cec:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005cf0:	f7 b8 01 ff 	subne	r8,-1
80005cf4:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005cf8:	0a 9b       	mov	r11,r5
80005cfa:	58 0e       	cp.w	lr,0
80005cfc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005d00:	f7 bc 01 fe 	subne	r12,-2
80005d04:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005d08:	e2 1b 00 84 	andl	r11,0x84,COH
80005d0c:	50 fe       	stdsp	sp[0x3c],lr
80005d0e:	50 9b       	stdsp	sp[0x24],r11
80005d10:	c4 71       	brne	80005d9e <_vfprintf_r+0x172e>
80005d12:	40 8a       	lddsp	r10,sp[0x20]
80005d14:	40 39       	lddsp	r9,sp[0xc]
80005d16:	12 1a       	sub	r10,r9
80005d18:	50 4a       	stdsp	sp[0x10],r10
80005d1a:	58 0a       	cp.w	r10,0
80005d1c:	e0 89 00 20 	brgt	80005d5c <_vfprintf_r+0x16ec>
80005d20:	c3 f8       	rjmp	80005d9e <_vfprintf_r+0x172e>
80005d22:	2f 09       	sub	r9,-16
80005d24:	2f f8       	sub	r8,-1
80005d26:	fe ce bc 9a 	sub	lr,pc,-17254
80005d2a:	31 0c       	mov	r12,16
80005d2c:	fb 49 06 90 	st.w	sp[1680],r9
80005d30:	87 0e       	st.w	r3[0x0],lr
80005d32:	87 1c       	st.w	r3[0x4],r12
80005d34:	fb 48 06 8c 	st.w	sp[1676],r8
80005d38:	58 78       	cp.w	r8,7
80005d3a:	e0 89 00 04 	brgt	80005d42 <_vfprintf_r+0x16d2>
80005d3e:	2f 83       	sub	r3,-8
80005d40:	c0 b8       	rjmp	80005d56 <_vfprintf_r+0x16e6>
80005d42:	fa ca f9 78 	sub	r10,sp,-1672
80005d46:	02 9b       	mov	r11,r1
80005d48:	08 9c       	mov	r12,r4
80005d4a:	fe b0 f4 85 	rcall	80004654 <__sprint_r>
80005d4e:	e0 81 04 10 	brne	8000656e <_vfprintf_r+0x1efe>
80005d52:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d56:	40 4b       	lddsp	r11,sp[0x10]
80005d58:	21 0b       	sub	r11,16
80005d5a:	50 4b       	stdsp	sp[0x10],r11
80005d5c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d60:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d64:	fe ca bc d8 	sub	r10,pc,-17192
80005d68:	40 4e       	lddsp	lr,sp[0x10]
80005d6a:	59 0e       	cp.w	lr,16
80005d6c:	fe 99 ff db 	brgt	80005d22 <_vfprintf_r+0x16b2>
80005d70:	1c 09       	add	r9,lr
80005d72:	2f f8       	sub	r8,-1
80005d74:	87 0a       	st.w	r3[0x0],r10
80005d76:	fb 49 06 90 	st.w	sp[1680],r9
80005d7a:	87 1e       	st.w	r3[0x4],lr
80005d7c:	fb 48 06 8c 	st.w	sp[1676],r8
80005d80:	58 78       	cp.w	r8,7
80005d82:	e0 89 00 04 	brgt	80005d8a <_vfprintf_r+0x171a>
80005d86:	2f 83       	sub	r3,-8
80005d88:	c0 b8       	rjmp	80005d9e <_vfprintf_r+0x172e>
80005d8a:	fa ca f9 78 	sub	r10,sp,-1672
80005d8e:	02 9b       	mov	r11,r1
80005d90:	08 9c       	mov	r12,r4
80005d92:	fe b0 f4 61 	rcall	80004654 <__sprint_r>
80005d96:	e0 81 03 ec 	brne	8000656e <_vfprintf_r+0x1efe>
80005d9a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d9e:	30 09       	mov	r9,0
80005da0:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005da4:	f2 08 18 00 	cp.b	r8,r9
80005da8:	c1 f0       	breq	80005de6 <_vfprintf_r+0x1776>
80005daa:	fa f8 06 90 	ld.w	r8,sp[1680]
80005dae:	fa c9 f9 45 	sub	r9,sp,-1723
80005db2:	2f f8       	sub	r8,-1
80005db4:	87 09       	st.w	r3[0x0],r9
80005db6:	fb 48 06 90 	st.w	sp[1680],r8
80005dba:	30 19       	mov	r9,1
80005dbc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005dc0:	87 19       	st.w	r3[0x4],r9
80005dc2:	2f f8       	sub	r8,-1
80005dc4:	fb 48 06 8c 	st.w	sp[1676],r8
80005dc8:	58 78       	cp.w	r8,7
80005dca:	e0 89 00 04 	brgt	80005dd2 <_vfprintf_r+0x1762>
80005dce:	2f 83       	sub	r3,-8
80005dd0:	c0 b8       	rjmp	80005de6 <_vfprintf_r+0x1776>
80005dd2:	fa ca f9 78 	sub	r10,sp,-1672
80005dd6:	02 9b       	mov	r11,r1
80005dd8:	08 9c       	mov	r12,r4
80005dda:	fe b0 f4 3d 	rcall	80004654 <__sprint_r>
80005dde:	e0 81 03 c8 	brne	8000656e <_vfprintf_r+0x1efe>
80005de2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005de6:	40 fc       	lddsp	r12,sp[0x3c]
80005de8:	58 0c       	cp.w	r12,0
80005dea:	c1 f0       	breq	80005e28 <_vfprintf_r+0x17b8>
80005dec:	fa f8 06 90 	ld.w	r8,sp[1680]
80005df0:	fa c9 f9 48 	sub	r9,sp,-1720
80005df4:	2f e8       	sub	r8,-2
80005df6:	87 09       	st.w	r3[0x0],r9
80005df8:	fb 48 06 90 	st.w	sp[1680],r8
80005dfc:	30 29       	mov	r9,2
80005dfe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e02:	87 19       	st.w	r3[0x4],r9
80005e04:	2f f8       	sub	r8,-1
80005e06:	fb 48 06 8c 	st.w	sp[1676],r8
80005e0a:	58 78       	cp.w	r8,7
80005e0c:	e0 89 00 04 	brgt	80005e14 <_vfprintf_r+0x17a4>
80005e10:	2f 83       	sub	r3,-8
80005e12:	c0 b8       	rjmp	80005e28 <_vfprintf_r+0x17b8>
80005e14:	fa ca f9 78 	sub	r10,sp,-1672
80005e18:	02 9b       	mov	r11,r1
80005e1a:	08 9c       	mov	r12,r4
80005e1c:	fe b0 f4 1c 	rcall	80004654 <__sprint_r>
80005e20:	e0 81 03 a7 	brne	8000656e <_vfprintf_r+0x1efe>
80005e24:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e28:	40 9b       	lddsp	r11,sp[0x24]
80005e2a:	e0 4b 00 80 	cp.w	r11,128
80005e2e:	c4 71       	brne	80005ebc <_vfprintf_r+0x184c>
80005e30:	40 8a       	lddsp	r10,sp[0x20]
80005e32:	40 39       	lddsp	r9,sp[0xc]
80005e34:	12 1a       	sub	r10,r9
80005e36:	50 4a       	stdsp	sp[0x10],r10
80005e38:	58 0a       	cp.w	r10,0
80005e3a:	e0 89 00 20 	brgt	80005e7a <_vfprintf_r+0x180a>
80005e3e:	c3 f8       	rjmp	80005ebc <_vfprintf_r+0x184c>
80005e40:	2f 09       	sub	r9,-16
80005e42:	2f f8       	sub	r8,-1
80005e44:	fe ce bd a8 	sub	lr,pc,-16984
80005e48:	31 0c       	mov	r12,16
80005e4a:	fb 49 06 90 	st.w	sp[1680],r9
80005e4e:	87 0e       	st.w	r3[0x0],lr
80005e50:	87 1c       	st.w	r3[0x4],r12
80005e52:	fb 48 06 8c 	st.w	sp[1676],r8
80005e56:	58 78       	cp.w	r8,7
80005e58:	e0 89 00 04 	brgt	80005e60 <_vfprintf_r+0x17f0>
80005e5c:	2f 83       	sub	r3,-8
80005e5e:	c0 b8       	rjmp	80005e74 <_vfprintf_r+0x1804>
80005e60:	fa ca f9 78 	sub	r10,sp,-1672
80005e64:	02 9b       	mov	r11,r1
80005e66:	08 9c       	mov	r12,r4
80005e68:	fe b0 f3 f6 	rcall	80004654 <__sprint_r>
80005e6c:	e0 81 03 81 	brne	8000656e <_vfprintf_r+0x1efe>
80005e70:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e74:	40 4b       	lddsp	r11,sp[0x10]
80005e76:	21 0b       	sub	r11,16
80005e78:	50 4b       	stdsp	sp[0x10],r11
80005e7a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e7e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e82:	fe ca bd e6 	sub	r10,pc,-16922
80005e86:	40 4e       	lddsp	lr,sp[0x10]
80005e88:	59 0e       	cp.w	lr,16
80005e8a:	fe 99 ff db 	brgt	80005e40 <_vfprintf_r+0x17d0>
80005e8e:	1c 09       	add	r9,lr
80005e90:	2f f8       	sub	r8,-1
80005e92:	87 0a       	st.w	r3[0x0],r10
80005e94:	fb 49 06 90 	st.w	sp[1680],r9
80005e98:	87 1e       	st.w	r3[0x4],lr
80005e9a:	fb 48 06 8c 	st.w	sp[1676],r8
80005e9e:	58 78       	cp.w	r8,7
80005ea0:	e0 89 00 04 	brgt	80005ea8 <_vfprintf_r+0x1838>
80005ea4:	2f 83       	sub	r3,-8
80005ea6:	c0 b8       	rjmp	80005ebc <_vfprintf_r+0x184c>
80005ea8:	fa ca f9 78 	sub	r10,sp,-1672
80005eac:	02 9b       	mov	r11,r1
80005eae:	08 9c       	mov	r12,r4
80005eb0:	fe b0 f3 d2 	rcall	80004654 <__sprint_r>
80005eb4:	e0 81 03 5d 	brne	8000656e <_vfprintf_r+0x1efe>
80005eb8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ebc:	40 2c       	lddsp	r12,sp[0x8]
80005ebe:	04 1c       	sub	r12,r2
80005ec0:	50 2c       	stdsp	sp[0x8],r12
80005ec2:	58 0c       	cp.w	r12,0
80005ec4:	e0 89 00 20 	brgt	80005f04 <_vfprintf_r+0x1894>
80005ec8:	c3 f8       	rjmp	80005f46 <_vfprintf_r+0x18d6>
80005eca:	2f 09       	sub	r9,-16
80005ecc:	2f f8       	sub	r8,-1
80005ece:	fe cb be 32 	sub	r11,pc,-16846
80005ed2:	31 0a       	mov	r10,16
80005ed4:	fb 49 06 90 	st.w	sp[1680],r9
80005ed8:	87 0b       	st.w	r3[0x0],r11
80005eda:	87 1a       	st.w	r3[0x4],r10
80005edc:	fb 48 06 8c 	st.w	sp[1676],r8
80005ee0:	58 78       	cp.w	r8,7
80005ee2:	e0 89 00 04 	brgt	80005eea <_vfprintf_r+0x187a>
80005ee6:	2f 83       	sub	r3,-8
80005ee8:	c0 b8       	rjmp	80005efe <_vfprintf_r+0x188e>
80005eea:	fa ca f9 78 	sub	r10,sp,-1672
80005eee:	02 9b       	mov	r11,r1
80005ef0:	08 9c       	mov	r12,r4
80005ef2:	fe b0 f3 b1 	rcall	80004654 <__sprint_r>
80005ef6:	e0 81 03 3c 	brne	8000656e <_vfprintf_r+0x1efe>
80005efa:	fa c3 f9 e0 	sub	r3,sp,-1568
80005efe:	40 29       	lddsp	r9,sp[0x8]
80005f00:	21 09       	sub	r9,16
80005f02:	50 29       	stdsp	sp[0x8],r9
80005f04:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f08:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f0c:	fe ca be 70 	sub	r10,pc,-16784
80005f10:	40 2e       	lddsp	lr,sp[0x8]
80005f12:	59 0e       	cp.w	lr,16
80005f14:	fe 99 ff db 	brgt	80005eca <_vfprintf_r+0x185a>
80005f18:	1c 09       	add	r9,lr
80005f1a:	2f f8       	sub	r8,-1
80005f1c:	87 0a       	st.w	r3[0x0],r10
80005f1e:	fb 49 06 90 	st.w	sp[1680],r9
80005f22:	87 1e       	st.w	r3[0x4],lr
80005f24:	fb 48 06 8c 	st.w	sp[1676],r8
80005f28:	58 78       	cp.w	r8,7
80005f2a:	e0 89 00 04 	brgt	80005f32 <_vfprintf_r+0x18c2>
80005f2e:	2f 83       	sub	r3,-8
80005f30:	c0 b8       	rjmp	80005f46 <_vfprintf_r+0x18d6>
80005f32:	fa ca f9 78 	sub	r10,sp,-1672
80005f36:	02 9b       	mov	r11,r1
80005f38:	08 9c       	mov	r12,r4
80005f3a:	fe b0 f3 8d 	rcall	80004654 <__sprint_r>
80005f3e:	e0 81 03 18 	brne	8000656e <_vfprintf_r+0x1efe>
80005f42:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f46:	ed b5 00 08 	bld	r5,0x8
80005f4a:	c0 b0       	breq	80005f60 <_vfprintf_r+0x18f0>
80005f4c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f50:	87 12       	st.w	r3[0x4],r2
80005f52:	87 06       	st.w	r3[0x0],r6
80005f54:	f0 02 00 02 	add	r2,r8,r2
80005f58:	fb 42 06 90 	st.w	sp[1680],r2
80005f5c:	e0 8f 01 d4 	bral	80006304 <_vfprintf_r+0x1c94>
80005f60:	e0 40 00 65 	cp.w	r0,101
80005f64:	e0 8a 01 d6 	brle	80006310 <_vfprintf_r+0x1ca0>
80005f68:	30 08       	mov	r8,0
80005f6a:	30 09       	mov	r9,0
80005f6c:	40 5b       	lddsp	r11,sp[0x14]
80005f6e:	40 7a       	lddsp	r10,sp[0x1c]
80005f70:	e0 a0 17 ed 	rcall	80008f4a <__avr32_f64_cmp_eq>
80005f74:	c7 90       	breq	80006066 <_vfprintf_r+0x19f6>
80005f76:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f7a:	fe c9 be f2 	sub	r9,pc,-16654
80005f7e:	2f f8       	sub	r8,-1
80005f80:	87 09       	st.w	r3[0x0],r9
80005f82:	fb 48 06 90 	st.w	sp[1680],r8
80005f86:	30 19       	mov	r9,1
80005f88:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f8c:	87 19       	st.w	r3[0x4],r9
80005f8e:	2f f8       	sub	r8,-1
80005f90:	fb 48 06 8c 	st.w	sp[1676],r8
80005f94:	58 78       	cp.w	r8,7
80005f96:	e0 89 00 05 	brgt	80005fa0 <_vfprintf_r+0x1930>
80005f9a:	2f 83       	sub	r3,-8
80005f9c:	c0 c8       	rjmp	80005fb4 <_vfprintf_r+0x1944>
80005f9e:	d7 03       	nop
80005fa0:	fa ca f9 78 	sub	r10,sp,-1672
80005fa4:	02 9b       	mov	r11,r1
80005fa6:	08 9c       	mov	r12,r4
80005fa8:	fe b0 f3 56 	rcall	80004654 <__sprint_r>
80005fac:	e0 81 02 e1 	brne	8000656e <_vfprintf_r+0x1efe>
80005fb0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fb4:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005fb8:	40 6c       	lddsp	r12,sp[0x18]
80005fba:	18 38       	cp.w	r8,r12
80005fbc:	c0 55       	brlt	80005fc6 <_vfprintf_r+0x1956>
80005fbe:	ed b5 00 00 	bld	r5,0x0
80005fc2:	e0 81 02 6b 	brne	80006498 <_vfprintf_r+0x1e28>
80005fc6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fca:	2f f8       	sub	r8,-1
80005fcc:	40 cb       	lddsp	r11,sp[0x30]
80005fce:	fb 48 06 90 	st.w	sp[1680],r8
80005fd2:	30 19       	mov	r9,1
80005fd4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fd8:	87 0b       	st.w	r3[0x0],r11
80005fda:	2f f8       	sub	r8,-1
80005fdc:	87 19       	st.w	r3[0x4],r9
80005fde:	fb 48 06 8c 	st.w	sp[1676],r8
80005fe2:	58 78       	cp.w	r8,7
80005fe4:	e0 89 00 04 	brgt	80005fec <_vfprintf_r+0x197c>
80005fe8:	2f 83       	sub	r3,-8
80005fea:	c0 b8       	rjmp	80006000 <_vfprintf_r+0x1990>
80005fec:	fa ca f9 78 	sub	r10,sp,-1672
80005ff0:	02 9b       	mov	r11,r1
80005ff2:	08 9c       	mov	r12,r4
80005ff4:	fe b0 f3 30 	rcall	80004654 <__sprint_r>
80005ff8:	e0 81 02 bb 	brne	8000656e <_vfprintf_r+0x1efe>
80005ffc:	fa c3 f9 e0 	sub	r3,sp,-1568
80006000:	40 66       	lddsp	r6,sp[0x18]
80006002:	20 16       	sub	r6,1
80006004:	58 06       	cp.w	r6,0
80006006:	e0 89 00 1d 	brgt	80006040 <_vfprintf_r+0x19d0>
8000600a:	e0 8f 02 47 	bral	80006498 <_vfprintf_r+0x1e28>
8000600e:	2f 09       	sub	r9,-16
80006010:	2f f8       	sub	r8,-1
80006012:	fb 49 06 90 	st.w	sp[1680],r9
80006016:	87 02       	st.w	r3[0x0],r2
80006018:	87 10       	st.w	r3[0x4],r0
8000601a:	fb 48 06 8c 	st.w	sp[1676],r8
8000601e:	58 78       	cp.w	r8,7
80006020:	e0 89 00 04 	brgt	80006028 <_vfprintf_r+0x19b8>
80006024:	2f 83       	sub	r3,-8
80006026:	c0 b8       	rjmp	8000603c <_vfprintf_r+0x19cc>
80006028:	fa ca f9 78 	sub	r10,sp,-1672
8000602c:	02 9b       	mov	r11,r1
8000602e:	08 9c       	mov	r12,r4
80006030:	fe b0 f3 12 	rcall	80004654 <__sprint_r>
80006034:	e0 81 02 9d 	brne	8000656e <_vfprintf_r+0x1efe>
80006038:	fa c3 f9 e0 	sub	r3,sp,-1568
8000603c:	21 06       	sub	r6,16
8000603e:	c0 48       	rjmp	80006046 <_vfprintf_r+0x19d6>
80006040:	fe c2 bf a4 	sub	r2,pc,-16476
80006044:	31 00       	mov	r0,16
80006046:	fa f9 06 90 	ld.w	r9,sp[1680]
8000604a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000604e:	fe ca bf b2 	sub	r10,pc,-16462
80006052:	59 06       	cp.w	r6,16
80006054:	fe 99 ff dd 	brgt	8000600e <_vfprintf_r+0x199e>
80006058:	0c 09       	add	r9,r6
8000605a:	87 0a       	st.w	r3[0x0],r10
8000605c:	fb 49 06 90 	st.w	sp[1680],r9
80006060:	2f f8       	sub	r8,-1
80006062:	87 16       	st.w	r3[0x4],r6
80006064:	c5 39       	rjmp	8000630a <_vfprintf_r+0x1c9a>
80006066:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000606a:	58 0a       	cp.w	r10,0
8000606c:	e0 89 00 92 	brgt	80006190 <_vfprintf_r+0x1b20>
80006070:	fa f8 06 90 	ld.w	r8,sp[1680]
80006074:	fe c9 bf ec 	sub	r9,pc,-16404
80006078:	2f f8       	sub	r8,-1
8000607a:	87 09       	st.w	r3[0x0],r9
8000607c:	fb 48 06 90 	st.w	sp[1680],r8
80006080:	30 19       	mov	r9,1
80006082:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006086:	87 19       	st.w	r3[0x4],r9
80006088:	2f f8       	sub	r8,-1
8000608a:	fb 48 06 8c 	st.w	sp[1676],r8
8000608e:	58 78       	cp.w	r8,7
80006090:	e0 89 00 04 	brgt	80006098 <_vfprintf_r+0x1a28>
80006094:	2f 83       	sub	r3,-8
80006096:	c0 b8       	rjmp	800060ac <_vfprintf_r+0x1a3c>
80006098:	fa ca f9 78 	sub	r10,sp,-1672
8000609c:	02 9b       	mov	r11,r1
8000609e:	08 9c       	mov	r12,r4
800060a0:	fe b0 f2 da 	rcall	80004654 <__sprint_r>
800060a4:	e0 81 02 65 	brne	8000656e <_vfprintf_r+0x1efe>
800060a8:	fa c3 f9 e0 	sub	r3,sp,-1568
800060ac:	fa f8 06 ac 	ld.w	r8,sp[1708]
800060b0:	58 08       	cp.w	r8,0
800060b2:	c0 81       	brne	800060c2 <_vfprintf_r+0x1a52>
800060b4:	40 6a       	lddsp	r10,sp[0x18]
800060b6:	58 0a       	cp.w	r10,0
800060b8:	c0 51       	brne	800060c2 <_vfprintf_r+0x1a52>
800060ba:	ed b5 00 00 	bld	r5,0x0
800060be:	e0 81 01 ed 	brne	80006498 <_vfprintf_r+0x1e28>
800060c2:	40 c9       	lddsp	r9,sp[0x30]
800060c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800060c8:	2f f8       	sub	r8,-1
800060ca:	87 09       	st.w	r3[0x0],r9
800060cc:	fb 48 06 90 	st.w	sp[1680],r8
800060d0:	30 19       	mov	r9,1
800060d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060d6:	87 19       	st.w	r3[0x4],r9
800060d8:	2f f8       	sub	r8,-1
800060da:	fb 48 06 8c 	st.w	sp[1676],r8
800060de:	58 78       	cp.w	r8,7
800060e0:	e0 89 00 04 	brgt	800060e8 <_vfprintf_r+0x1a78>
800060e4:	2f 83       	sub	r3,-8
800060e6:	c0 b8       	rjmp	800060fc <_vfprintf_r+0x1a8c>
800060e8:	fa ca f9 78 	sub	r10,sp,-1672
800060ec:	02 9b       	mov	r11,r1
800060ee:	08 9c       	mov	r12,r4
800060f0:	fe b0 f2 b2 	rcall	80004654 <__sprint_r>
800060f4:	e0 81 02 3d 	brne	8000656e <_vfprintf_r+0x1efe>
800060f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800060fc:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006100:	5c 32       	neg	r2
80006102:	58 02       	cp.w	r2,0
80006104:	e0 89 00 1d 	brgt	8000613e <_vfprintf_r+0x1ace>
80006108:	c3 d8       	rjmp	80006182 <_vfprintf_r+0x1b12>
8000610a:	2f 09       	sub	r9,-16
8000610c:	2f f8       	sub	r8,-1
8000610e:	31 0e       	mov	lr,16
80006110:	fb 49 06 90 	st.w	sp[1680],r9
80006114:	87 00       	st.w	r3[0x0],r0
80006116:	87 1e       	st.w	r3[0x4],lr
80006118:	fb 48 06 8c 	st.w	sp[1676],r8
8000611c:	58 78       	cp.w	r8,7
8000611e:	e0 89 00 04 	brgt	80006126 <_vfprintf_r+0x1ab6>
80006122:	2f 83       	sub	r3,-8
80006124:	c0 b8       	rjmp	8000613a <_vfprintf_r+0x1aca>
80006126:	fa ca f9 78 	sub	r10,sp,-1672
8000612a:	02 9b       	mov	r11,r1
8000612c:	08 9c       	mov	r12,r4
8000612e:	fe b0 f2 93 	rcall	80004654 <__sprint_r>
80006132:	e0 81 02 1e 	brne	8000656e <_vfprintf_r+0x1efe>
80006136:	fa c3 f9 e0 	sub	r3,sp,-1568
8000613a:	21 02       	sub	r2,16
8000613c:	c0 38       	rjmp	80006142 <_vfprintf_r+0x1ad2>
8000613e:	fe c0 c0 a2 	sub	r0,pc,-16222
80006142:	fa f9 06 90 	ld.w	r9,sp[1680]
80006146:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000614a:	fe ca c0 ae 	sub	r10,pc,-16210
8000614e:	59 02       	cp.w	r2,16
80006150:	fe 99 ff dd 	brgt	8000610a <_vfprintf_r+0x1a9a>
80006154:	04 09       	add	r9,r2
80006156:	2f f8       	sub	r8,-1
80006158:	87 0a       	st.w	r3[0x0],r10
8000615a:	fb 49 06 90 	st.w	sp[1680],r9
8000615e:	87 12       	st.w	r3[0x4],r2
80006160:	fb 48 06 8c 	st.w	sp[1676],r8
80006164:	58 78       	cp.w	r8,7
80006166:	e0 89 00 04 	brgt	8000616e <_vfprintf_r+0x1afe>
8000616a:	2f 83       	sub	r3,-8
8000616c:	c0 b8       	rjmp	80006182 <_vfprintf_r+0x1b12>
8000616e:	fa ca f9 78 	sub	r10,sp,-1672
80006172:	02 9b       	mov	r11,r1
80006174:	08 9c       	mov	r12,r4
80006176:	fe b0 f2 6f 	rcall	80004654 <__sprint_r>
8000617a:	e0 81 01 fa 	brne	8000656e <_vfprintf_r+0x1efe>
8000617e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006182:	40 6c       	lddsp	r12,sp[0x18]
80006184:	fa f8 06 90 	ld.w	r8,sp[1680]
80006188:	87 06       	st.w	r3[0x0],r6
8000618a:	87 1c       	st.w	r3[0x4],r12
8000618c:	18 08       	add	r8,r12
8000618e:	cb 98       	rjmp	80006300 <_vfprintf_r+0x1c90>
80006190:	fa f9 06 90 	ld.w	r9,sp[1680]
80006194:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006198:	40 6b       	lddsp	r11,sp[0x18]
8000619a:	16 3a       	cp.w	r10,r11
8000619c:	c6 f5       	brlt	8000627a <_vfprintf_r+0x1c0a>
8000619e:	16 09       	add	r9,r11
800061a0:	2f f8       	sub	r8,-1
800061a2:	87 06       	st.w	r3[0x0],r6
800061a4:	fb 49 06 90 	st.w	sp[1680],r9
800061a8:	87 1b       	st.w	r3[0x4],r11
800061aa:	fb 48 06 8c 	st.w	sp[1676],r8
800061ae:	58 78       	cp.w	r8,7
800061b0:	e0 89 00 04 	brgt	800061b8 <_vfprintf_r+0x1b48>
800061b4:	2f 83       	sub	r3,-8
800061b6:	c0 b8       	rjmp	800061cc <_vfprintf_r+0x1b5c>
800061b8:	fa ca f9 78 	sub	r10,sp,-1672
800061bc:	02 9b       	mov	r11,r1
800061be:	08 9c       	mov	r12,r4
800061c0:	fe b0 f2 4a 	rcall	80004654 <__sprint_r>
800061c4:	e0 81 01 d5 	brne	8000656e <_vfprintf_r+0x1efe>
800061c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800061cc:	fa f6 06 ac 	ld.w	r6,sp[1708]
800061d0:	40 6a       	lddsp	r10,sp[0x18]
800061d2:	14 16       	sub	r6,r10
800061d4:	58 06       	cp.w	r6,0
800061d6:	e0 89 00 1c 	brgt	8000620e <_vfprintf_r+0x1b9e>
800061da:	c3 d8       	rjmp	80006254 <_vfprintf_r+0x1be4>
800061dc:	2f 09       	sub	r9,-16
800061de:	2f f8       	sub	r8,-1
800061e0:	fb 49 06 90 	st.w	sp[1680],r9
800061e4:	87 02       	st.w	r3[0x0],r2
800061e6:	87 10       	st.w	r3[0x4],r0
800061e8:	fb 48 06 8c 	st.w	sp[1676],r8
800061ec:	58 78       	cp.w	r8,7
800061ee:	e0 89 00 04 	brgt	800061f6 <_vfprintf_r+0x1b86>
800061f2:	2f 83       	sub	r3,-8
800061f4:	c0 b8       	rjmp	8000620a <_vfprintf_r+0x1b9a>
800061f6:	fa ca f9 78 	sub	r10,sp,-1672
800061fa:	02 9b       	mov	r11,r1
800061fc:	08 9c       	mov	r12,r4
800061fe:	fe b0 f2 2b 	rcall	80004654 <__sprint_r>
80006202:	e0 81 01 b6 	brne	8000656e <_vfprintf_r+0x1efe>
80006206:	fa c3 f9 e0 	sub	r3,sp,-1568
8000620a:	21 06       	sub	r6,16
8000620c:	c0 48       	rjmp	80006214 <_vfprintf_r+0x1ba4>
8000620e:	fe c2 c1 72 	sub	r2,pc,-16014
80006212:	31 00       	mov	r0,16
80006214:	fa f9 06 90 	ld.w	r9,sp[1680]
80006218:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000621c:	fe ca c1 80 	sub	r10,pc,-16000
80006220:	59 06       	cp.w	r6,16
80006222:	fe 99 ff dd 	brgt	800061dc <_vfprintf_r+0x1b6c>
80006226:	0c 09       	add	r9,r6
80006228:	2f f8       	sub	r8,-1
8000622a:	87 0a       	st.w	r3[0x0],r10
8000622c:	fb 49 06 90 	st.w	sp[1680],r9
80006230:	87 16       	st.w	r3[0x4],r6
80006232:	fb 48 06 8c 	st.w	sp[1676],r8
80006236:	58 78       	cp.w	r8,7
80006238:	e0 89 00 04 	brgt	80006240 <_vfprintf_r+0x1bd0>
8000623c:	2f 83       	sub	r3,-8
8000623e:	c0 b8       	rjmp	80006254 <_vfprintf_r+0x1be4>
80006240:	fa ca f9 78 	sub	r10,sp,-1672
80006244:	02 9b       	mov	r11,r1
80006246:	08 9c       	mov	r12,r4
80006248:	fe b0 f2 06 	rcall	80004654 <__sprint_r>
8000624c:	e0 81 01 91 	brne	8000656e <_vfprintf_r+0x1efe>
80006250:	fa c3 f9 e0 	sub	r3,sp,-1568
80006254:	ed b5 00 00 	bld	r5,0x0
80006258:	e0 81 01 20 	brne	80006498 <_vfprintf_r+0x1e28>
8000625c:	40 c9       	lddsp	r9,sp[0x30]
8000625e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006262:	2f f8       	sub	r8,-1
80006264:	87 09       	st.w	r3[0x0],r9
80006266:	fb 48 06 90 	st.w	sp[1680],r8
8000626a:	30 19       	mov	r9,1
8000626c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006270:	87 19       	st.w	r3[0x4],r9
80006272:	2f f8       	sub	r8,-1
80006274:	fb 48 06 8c 	st.w	sp[1676],r8
80006278:	c0 29       	rjmp	8000647c <_vfprintf_r+0x1e0c>
8000627a:	14 09       	add	r9,r10
8000627c:	2f f8       	sub	r8,-1
8000627e:	fb 49 06 90 	st.w	sp[1680],r9
80006282:	87 06       	st.w	r3[0x0],r6
80006284:	87 1a       	st.w	r3[0x4],r10
80006286:	fb 48 06 8c 	st.w	sp[1676],r8
8000628a:	58 78       	cp.w	r8,7
8000628c:	e0 89 00 04 	brgt	80006294 <_vfprintf_r+0x1c24>
80006290:	2f 83       	sub	r3,-8
80006292:	c0 b8       	rjmp	800062a8 <_vfprintf_r+0x1c38>
80006294:	fa ca f9 78 	sub	r10,sp,-1672
80006298:	02 9b       	mov	r11,r1
8000629a:	08 9c       	mov	r12,r4
8000629c:	fe b0 f1 dc 	rcall	80004654 <__sprint_r>
800062a0:	e0 81 01 67 	brne	8000656e <_vfprintf_r+0x1efe>
800062a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800062a8:	40 c8       	lddsp	r8,sp[0x30]
800062aa:	87 08       	st.w	r3[0x0],r8
800062ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800062b0:	2f f8       	sub	r8,-1
800062b2:	30 19       	mov	r9,1
800062b4:	fb 48 06 90 	st.w	sp[1680],r8
800062b8:	87 19       	st.w	r3[0x4],r9
800062ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062be:	2f f8       	sub	r8,-1
800062c0:	fb 48 06 8c 	st.w	sp[1676],r8
800062c4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800062c8:	58 78       	cp.w	r8,7
800062ca:	e0 89 00 04 	brgt	800062d2 <_vfprintf_r+0x1c62>
800062ce:	2f 83       	sub	r3,-8
800062d0:	c0 b8       	rjmp	800062e6 <_vfprintf_r+0x1c76>
800062d2:	fa ca f9 78 	sub	r10,sp,-1672
800062d6:	02 9b       	mov	r11,r1
800062d8:	08 9c       	mov	r12,r4
800062da:	fe b0 f1 bd 	rcall	80004654 <__sprint_r>
800062de:	e0 81 01 48 	brne	8000656e <_vfprintf_r+0x1efe>
800062e2:	fa c3 f9 e0 	sub	r3,sp,-1568
800062e6:	04 06       	add	r6,r2
800062e8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800062ec:	87 06       	st.w	r3[0x0],r6
800062ee:	fa f9 06 90 	ld.w	r9,sp[1680]
800062f2:	40 66       	lddsp	r6,sp[0x18]
800062f4:	40 6e       	lddsp	lr,sp[0x18]
800062f6:	10 16       	sub	r6,r8
800062f8:	f2 08 01 08 	sub	r8,r9,r8
800062fc:	87 16       	st.w	r3[0x4],r6
800062fe:	1c 08       	add	r8,lr
80006300:	fb 48 06 90 	st.w	sp[1680],r8
80006304:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006308:	2f f8       	sub	r8,-1
8000630a:	fb 48 06 8c 	st.w	sp[1676],r8
8000630e:	cb 78       	rjmp	8000647c <_vfprintf_r+0x1e0c>
80006310:	40 6c       	lddsp	r12,sp[0x18]
80006312:	58 1c       	cp.w	r12,1
80006314:	e0 89 00 06 	brgt	80006320 <_vfprintf_r+0x1cb0>
80006318:	ed b5 00 00 	bld	r5,0x0
8000631c:	e0 81 00 85 	brne	80006426 <_vfprintf_r+0x1db6>
80006320:	fa f8 06 90 	ld.w	r8,sp[1680]
80006324:	2f f8       	sub	r8,-1
80006326:	30 19       	mov	r9,1
80006328:	fb 48 06 90 	st.w	sp[1680],r8
8000632c:	87 06       	st.w	r3[0x0],r6
8000632e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006332:	87 19       	st.w	r3[0x4],r9
80006334:	2f f8       	sub	r8,-1
80006336:	fb 48 06 8c 	st.w	sp[1676],r8
8000633a:	58 78       	cp.w	r8,7
8000633c:	e0 89 00 04 	brgt	80006344 <_vfprintf_r+0x1cd4>
80006340:	2f 83       	sub	r3,-8
80006342:	c0 b8       	rjmp	80006358 <_vfprintf_r+0x1ce8>
80006344:	fa ca f9 78 	sub	r10,sp,-1672
80006348:	02 9b       	mov	r11,r1
8000634a:	08 9c       	mov	r12,r4
8000634c:	fe b0 f1 84 	rcall	80004654 <__sprint_r>
80006350:	e0 81 01 0f 	brne	8000656e <_vfprintf_r+0x1efe>
80006354:	fa c3 f9 e0 	sub	r3,sp,-1568
80006358:	fa f8 06 90 	ld.w	r8,sp[1680]
8000635c:	2f f8       	sub	r8,-1
8000635e:	40 cb       	lddsp	r11,sp[0x30]
80006360:	fb 48 06 90 	st.w	sp[1680],r8
80006364:	30 19       	mov	r9,1
80006366:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000636a:	87 0b       	st.w	r3[0x0],r11
8000636c:	2f f8       	sub	r8,-1
8000636e:	87 19       	st.w	r3[0x4],r9
80006370:	fb 48 06 8c 	st.w	sp[1676],r8
80006374:	58 78       	cp.w	r8,7
80006376:	e0 89 00 05 	brgt	80006380 <_vfprintf_r+0x1d10>
8000637a:	2f 83       	sub	r3,-8
8000637c:	c0 c8       	rjmp	80006394 <_vfprintf_r+0x1d24>
8000637e:	d7 03       	nop
80006380:	fa ca f9 78 	sub	r10,sp,-1672
80006384:	02 9b       	mov	r11,r1
80006386:	08 9c       	mov	r12,r4
80006388:	fe b0 f1 66 	rcall	80004654 <__sprint_r>
8000638c:	e0 81 00 f1 	brne	8000656e <_vfprintf_r+0x1efe>
80006390:	fa c3 f9 e0 	sub	r3,sp,-1568
80006394:	30 08       	mov	r8,0
80006396:	30 09       	mov	r9,0
80006398:	40 5b       	lddsp	r11,sp[0x14]
8000639a:	40 7a       	lddsp	r10,sp[0x1c]
8000639c:	e0 a0 15 d7 	rcall	80008f4a <__avr32_f64_cmp_eq>
800063a0:	40 68       	lddsp	r8,sp[0x18]
800063a2:	20 18       	sub	r8,1
800063a4:	58 0c       	cp.w	r12,0
800063a6:	c0 d1       	brne	800063c0 <_vfprintf_r+0x1d50>
800063a8:	2f f6       	sub	r6,-1
800063aa:	87 18       	st.w	r3[0x4],r8
800063ac:	87 06       	st.w	r3[0x0],r6
800063ae:	fa f6 06 90 	ld.w	r6,sp[1680]
800063b2:	10 06       	add	r6,r8
800063b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063b8:	fb 46 06 90 	st.w	sp[1680],r6
800063bc:	2f f8       	sub	r8,-1
800063be:	c3 18       	rjmp	80006420 <_vfprintf_r+0x1db0>
800063c0:	10 96       	mov	r6,r8
800063c2:	58 08       	cp.w	r8,0
800063c4:	e0 89 00 1c 	brgt	800063fc <_vfprintf_r+0x1d8c>
800063c8:	c4 b8       	rjmp	8000645e <_vfprintf_r+0x1dee>
800063ca:	2f 09       	sub	r9,-16
800063cc:	2f f8       	sub	r8,-1
800063ce:	fb 49 06 90 	st.w	sp[1680],r9
800063d2:	87 02       	st.w	r3[0x0],r2
800063d4:	87 10       	st.w	r3[0x4],r0
800063d6:	fb 48 06 8c 	st.w	sp[1676],r8
800063da:	58 78       	cp.w	r8,7
800063dc:	e0 89 00 04 	brgt	800063e4 <_vfprintf_r+0x1d74>
800063e0:	2f 83       	sub	r3,-8
800063e2:	c0 b8       	rjmp	800063f8 <_vfprintf_r+0x1d88>
800063e4:	fa ca f9 78 	sub	r10,sp,-1672
800063e8:	02 9b       	mov	r11,r1
800063ea:	08 9c       	mov	r12,r4
800063ec:	fe b0 f1 34 	rcall	80004654 <__sprint_r>
800063f0:	e0 81 00 bf 	brne	8000656e <_vfprintf_r+0x1efe>
800063f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800063f8:	21 06       	sub	r6,16
800063fa:	c0 48       	rjmp	80006402 <_vfprintf_r+0x1d92>
800063fc:	fe c2 c3 60 	sub	r2,pc,-15520
80006400:	31 00       	mov	r0,16
80006402:	fa f9 06 90 	ld.w	r9,sp[1680]
80006406:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000640a:	fe ca c3 6e 	sub	r10,pc,-15506
8000640e:	59 06       	cp.w	r6,16
80006410:	fe 99 ff dd 	brgt	800063ca <_vfprintf_r+0x1d5a>
80006414:	0c 09       	add	r9,r6
80006416:	87 0a       	st.w	r3[0x0],r10
80006418:	fb 49 06 90 	st.w	sp[1680],r9
8000641c:	2f f8       	sub	r8,-1
8000641e:	87 16       	st.w	r3[0x4],r6
80006420:	fb 48 06 8c 	st.w	sp[1676],r8
80006424:	c0 e8       	rjmp	80006440 <_vfprintf_r+0x1dd0>
80006426:	fa f8 06 90 	ld.w	r8,sp[1680]
8000642a:	2f f8       	sub	r8,-1
8000642c:	30 19       	mov	r9,1
8000642e:	fb 48 06 90 	st.w	sp[1680],r8
80006432:	87 06       	st.w	r3[0x0],r6
80006434:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006438:	87 19       	st.w	r3[0x4],r9
8000643a:	2f f8       	sub	r8,-1
8000643c:	fb 48 06 8c 	st.w	sp[1676],r8
80006440:	58 78       	cp.w	r8,7
80006442:	e0 89 00 04 	brgt	8000644a <_vfprintf_r+0x1dda>
80006446:	2f 83       	sub	r3,-8
80006448:	c0 b8       	rjmp	8000645e <_vfprintf_r+0x1dee>
8000644a:	fa ca f9 78 	sub	r10,sp,-1672
8000644e:	02 9b       	mov	r11,r1
80006450:	08 9c       	mov	r12,r4
80006452:	fe b0 f1 01 	rcall	80004654 <__sprint_r>
80006456:	e0 81 00 8c 	brne	8000656e <_vfprintf_r+0x1efe>
8000645a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000645e:	40 ea       	lddsp	r10,sp[0x38]
80006460:	fa f8 06 90 	ld.w	r8,sp[1680]
80006464:	14 08       	add	r8,r10
80006466:	fa c9 f9 64 	sub	r9,sp,-1692
8000646a:	fb 48 06 90 	st.w	sp[1680],r8
8000646e:	87 1a       	st.w	r3[0x4],r10
80006470:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006474:	87 09       	st.w	r3[0x0],r9
80006476:	2f f8       	sub	r8,-1
80006478:	fb 48 06 8c 	st.w	sp[1676],r8
8000647c:	58 78       	cp.w	r8,7
8000647e:	e0 89 00 04 	brgt	80006486 <_vfprintf_r+0x1e16>
80006482:	2f 83       	sub	r3,-8
80006484:	c0 a8       	rjmp	80006498 <_vfprintf_r+0x1e28>
80006486:	fa ca f9 78 	sub	r10,sp,-1672
8000648a:	02 9b       	mov	r11,r1
8000648c:	08 9c       	mov	r12,r4
8000648e:	fe b0 f0 e3 	rcall	80004654 <__sprint_r>
80006492:	c6 e1       	brne	8000656e <_vfprintf_r+0x1efe>
80006494:	fa c3 f9 e0 	sub	r3,sp,-1568
80006498:	e2 15 00 04 	andl	r5,0x4,COH
8000649c:	c3 f0       	breq	8000651a <_vfprintf_r+0x1eaa>
8000649e:	40 86       	lddsp	r6,sp[0x20]
800064a0:	40 39       	lddsp	r9,sp[0xc]
800064a2:	12 16       	sub	r6,r9
800064a4:	58 06       	cp.w	r6,0
800064a6:	e0 89 00 1a 	brgt	800064da <_vfprintf_r+0x1e6a>
800064aa:	c3 88       	rjmp	8000651a <_vfprintf_r+0x1eaa>
800064ac:	2f 09       	sub	r9,-16
800064ae:	2f f8       	sub	r8,-1
800064b0:	fb 49 06 90 	st.w	sp[1680],r9
800064b4:	87 05       	st.w	r3[0x0],r5
800064b6:	87 12       	st.w	r3[0x4],r2
800064b8:	fb 48 06 8c 	st.w	sp[1676],r8
800064bc:	58 78       	cp.w	r8,7
800064be:	e0 89 00 04 	brgt	800064c6 <_vfprintf_r+0x1e56>
800064c2:	2f 83       	sub	r3,-8
800064c4:	c0 98       	rjmp	800064d6 <_vfprintf_r+0x1e66>
800064c6:	00 9a       	mov	r10,r0
800064c8:	02 9b       	mov	r11,r1
800064ca:	08 9c       	mov	r12,r4
800064cc:	fe b0 f0 c4 	rcall	80004654 <__sprint_r>
800064d0:	c4 f1       	brne	8000656e <_vfprintf_r+0x1efe>
800064d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800064d6:	21 06       	sub	r6,16
800064d8:	c0 68       	rjmp	800064e4 <_vfprintf_r+0x1e74>
800064da:	fe c5 c4 4e 	sub	r5,pc,-15282
800064de:	31 02       	mov	r2,16
800064e0:	fa c0 f9 78 	sub	r0,sp,-1672
800064e4:	fa f9 06 90 	ld.w	r9,sp[1680]
800064e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800064ec:	fe ca c4 60 	sub	r10,pc,-15264
800064f0:	59 06       	cp.w	r6,16
800064f2:	fe 99 ff dd 	brgt	800064ac <_vfprintf_r+0x1e3c>
800064f6:	0c 09       	add	r9,r6
800064f8:	2f f8       	sub	r8,-1
800064fa:	87 0a       	st.w	r3[0x0],r10
800064fc:	87 16       	st.w	r3[0x4],r6
800064fe:	fb 49 06 90 	st.w	sp[1680],r9
80006502:	fb 48 06 8c 	st.w	sp[1676],r8
80006506:	58 78       	cp.w	r8,7
80006508:	e0 8a 00 09 	brle	8000651a <_vfprintf_r+0x1eaa>
8000650c:	fa ca f9 78 	sub	r10,sp,-1672
80006510:	02 9b       	mov	r11,r1
80006512:	08 9c       	mov	r12,r4
80006514:	fe b0 f0 a0 	rcall	80004654 <__sprint_r>
80006518:	c2 b1       	brne	8000656e <_vfprintf_r+0x1efe>
8000651a:	40 bc       	lddsp	r12,sp[0x2c]
8000651c:	40 36       	lddsp	r6,sp[0xc]
8000651e:	40 8e       	lddsp	lr,sp[0x20]
80006520:	ec 0e 0c 48 	max	r8,r6,lr
80006524:	10 0c       	add	r12,r8
80006526:	50 bc       	stdsp	sp[0x2c],r12
80006528:	fa f8 06 90 	ld.w	r8,sp[1680]
8000652c:	58 08       	cp.w	r8,0
8000652e:	c0 80       	breq	8000653e <_vfprintf_r+0x1ece>
80006530:	fa ca f9 78 	sub	r10,sp,-1672
80006534:	02 9b       	mov	r11,r1
80006536:	08 9c       	mov	r12,r4
80006538:	fe b0 f0 8e 	rcall	80004654 <__sprint_r>
8000653c:	c1 91       	brne	8000656e <_vfprintf_r+0x1efe>
8000653e:	30 0b       	mov	r11,0
80006540:	fa c3 f9 e0 	sub	r3,sp,-1568
80006544:	fb 4b 06 8c 	st.w	sp[1676],r11
80006548:	fe 9f f1 22 	bral	8000478c <_vfprintf_r+0x11c>
8000654c:	08 95       	mov	r5,r4
8000654e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006552:	58 08       	cp.w	r8,0
80006554:	c0 80       	breq	80006564 <_vfprintf_r+0x1ef4>
80006556:	08 9c       	mov	r12,r4
80006558:	fa ca f9 78 	sub	r10,sp,-1672
8000655c:	02 9b       	mov	r11,r1
8000655e:	fe b0 f0 7b 	rcall	80004654 <__sprint_r>
80006562:	c0 61       	brne	8000656e <_vfprintf_r+0x1efe>
80006564:	30 08       	mov	r8,0
80006566:	fb 48 06 8c 	st.w	sp[1676],r8
8000656a:	c0 28       	rjmp	8000656e <_vfprintf_r+0x1efe>
8000656c:	40 41       	lddsp	r1,sp[0x10]
8000656e:	82 68       	ld.sh	r8,r1[0xc]
80006570:	ed b8 00 06 	bld	r8,0x6
80006574:	c0 31       	brne	8000657a <_vfprintf_r+0x1f0a>
80006576:	3f fa       	mov	r10,-1
80006578:	50 ba       	stdsp	sp[0x2c],r10
8000657a:	40 bc       	lddsp	r12,sp[0x2c]
8000657c:	fe 3d f9 44 	sub	sp,-1724
80006580:	d8 32       	popm	r0-r7,pc
80006582:	d7 03       	nop

80006584 <__swsetup_r>:
80006584:	d4 21       	pushm	r4-r7,lr
80006586:	e0 68 01 18 	mov	r8,280
8000658a:	18 96       	mov	r6,r12
8000658c:	16 97       	mov	r7,r11
8000658e:	70 0c       	ld.w	r12,r8[0x0]
80006590:	58 0c       	cp.w	r12,0
80006592:	c0 60       	breq	8000659e <__swsetup_r+0x1a>
80006594:	78 68       	ld.w	r8,r12[0x18]
80006596:	58 08       	cp.w	r8,0
80006598:	c0 31       	brne	8000659e <__swsetup_r+0x1a>
8000659a:	e0 a0 07 b9 	rcall	8000750c <__sinit>
8000659e:	fe c8 c3 e2 	sub	r8,pc,-15390
800065a2:	10 37       	cp.w	r7,r8
800065a4:	c0 61       	brne	800065b0 <__swsetup_r+0x2c>
800065a6:	e0 68 01 18 	mov	r8,280
800065aa:	70 08       	ld.w	r8,r8[0x0]
800065ac:	70 07       	ld.w	r7,r8[0x0]
800065ae:	c1 28       	rjmp	800065d2 <__swsetup_r+0x4e>
800065b0:	fe c8 c3 d4 	sub	r8,pc,-15404
800065b4:	10 37       	cp.w	r7,r8
800065b6:	c0 61       	brne	800065c2 <__swsetup_r+0x3e>
800065b8:	e0 68 01 18 	mov	r8,280
800065bc:	70 08       	ld.w	r8,r8[0x0]
800065be:	70 17       	ld.w	r7,r8[0x4]
800065c0:	c0 98       	rjmp	800065d2 <__swsetup_r+0x4e>
800065c2:	fe c8 c3 c6 	sub	r8,pc,-15418
800065c6:	10 37       	cp.w	r7,r8
800065c8:	c0 51       	brne	800065d2 <__swsetup_r+0x4e>
800065ca:	e0 68 01 18 	mov	r8,280
800065ce:	70 08       	ld.w	r8,r8[0x0]
800065d0:	70 27       	ld.w	r7,r8[0x8]
800065d2:	8e 68       	ld.sh	r8,r7[0xc]
800065d4:	ed b8 00 03 	bld	r8,0x3
800065d8:	c1 e0       	breq	80006614 <__swsetup_r+0x90>
800065da:	ed b8 00 04 	bld	r8,0x4
800065de:	c3 e1       	brne	8000665a <__swsetup_r+0xd6>
800065e0:	ed b8 00 02 	bld	r8,0x2
800065e4:	c1 51       	brne	8000660e <__swsetup_r+0x8a>
800065e6:	6e db       	ld.w	r11,r7[0x34]
800065e8:	58 0b       	cp.w	r11,0
800065ea:	c0 a0       	breq	800065fe <__swsetup_r+0x7a>
800065ec:	ee c8 ff bc 	sub	r8,r7,-68
800065f0:	10 3b       	cp.w	r11,r8
800065f2:	c0 40       	breq	800065fa <__swsetup_r+0x76>
800065f4:	0c 9c       	mov	r12,r6
800065f6:	e0 a0 08 25 	rcall	80007640 <_free_r>
800065fa:	30 08       	mov	r8,0
800065fc:	8f d8       	st.w	r7[0x34],r8
800065fe:	8e 68       	ld.sh	r8,r7[0xc]
80006600:	e0 18 ff db 	andl	r8,0xffdb
80006604:	ae 68       	st.h	r7[0xc],r8
80006606:	30 08       	mov	r8,0
80006608:	8f 18       	st.w	r7[0x4],r8
8000660a:	6e 48       	ld.w	r8,r7[0x10]
8000660c:	8f 08       	st.w	r7[0x0],r8
8000660e:	8e 68       	ld.sh	r8,r7[0xc]
80006610:	a3 b8       	sbr	r8,0x3
80006612:	ae 68       	st.h	r7[0xc],r8
80006614:	6e 48       	ld.w	r8,r7[0x10]
80006616:	58 08       	cp.w	r8,0
80006618:	c0 b1       	brne	8000662e <__swsetup_r+0xaa>
8000661a:	8e 68       	ld.sh	r8,r7[0xc]
8000661c:	e2 18 02 80 	andl	r8,0x280,COH
80006620:	e0 48 02 00 	cp.w	r8,512
80006624:	c0 50       	breq	8000662e <__swsetup_r+0xaa>
80006626:	0c 9c       	mov	r12,r6
80006628:	0e 9b       	mov	r11,r7
8000662a:	e0 a0 0a 4b 	rcall	80007ac0 <__smakebuf_r>
8000662e:	8e 69       	ld.sh	r9,r7[0xc]
80006630:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006634:	c0 70       	breq	80006642 <__swsetup_r+0xbe>
80006636:	30 08       	mov	r8,0
80006638:	8f 28       	st.w	r7[0x8],r8
8000663a:	6e 58       	ld.w	r8,r7[0x14]
8000663c:	5c 38       	neg	r8
8000663e:	8f 68       	st.w	r7[0x18],r8
80006640:	c0 68       	rjmp	8000664c <__swsetup_r+0xc8>
80006642:	ed b9 00 01 	bld	r9,0x1
80006646:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000664a:	8f 28       	st.w	r7[0x8],r8
8000664c:	6e 48       	ld.w	r8,r7[0x10]
8000664e:	58 08       	cp.w	r8,0
80006650:	c0 61       	brne	8000665c <__swsetup_r+0xd8>
80006652:	8e 68       	ld.sh	r8,r7[0xc]
80006654:	ed b8 00 07 	bld	r8,0x7
80006658:	c0 21       	brne	8000665c <__swsetup_r+0xd8>
8000665a:	dc 2a       	popm	r4-r7,pc,r12=-1
8000665c:	d8 2a       	popm	r4-r7,pc,r12=0
8000665e:	d7 03       	nop

80006660 <quorem>:
80006660:	d4 31       	pushm	r0-r7,lr
80006662:	20 2d       	sub	sp,8
80006664:	18 97       	mov	r7,r12
80006666:	78 48       	ld.w	r8,r12[0x10]
80006668:	76 46       	ld.w	r6,r11[0x10]
8000666a:	0c 38       	cp.w	r8,r6
8000666c:	c0 34       	brge	80006672 <quorem+0x12>
8000666e:	30 0c       	mov	r12,0
80006670:	c8 58       	rjmp	8000677a <quorem+0x11a>
80006672:	ec c2 ff fc 	sub	r2,r6,-4
80006676:	f6 c3 ff ec 	sub	r3,r11,-20
8000667a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000667e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006682:	2f f9       	sub	r9,-1
80006684:	20 16       	sub	r6,1
80006686:	f8 09 0d 08 	divu	r8,r12,r9
8000668a:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000668e:	ee c4 ff ec 	sub	r4,r7,-20
80006692:	10 95       	mov	r5,r8
80006694:	58 08       	cp.w	r8,0
80006696:	c4 10       	breq	80006718 <quorem+0xb8>
80006698:	30 09       	mov	r9,0
8000669a:	06 9a       	mov	r10,r3
8000669c:	08 98       	mov	r8,r4
8000669e:	12 91       	mov	r1,r9
800066a0:	50 0b       	stdsp	sp[0x0],r11
800066a2:	70 0e       	ld.w	lr,r8[0x0]
800066a4:	b1 8e       	lsr	lr,0x10
800066a6:	50 1e       	stdsp	sp[0x4],lr
800066a8:	15 0e       	ld.w	lr,r10++
800066aa:	fc 00 16 10 	lsr	r0,lr,0x10
800066ae:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800066b2:	ea 0e 03 41 	mac	r1,r5,lr
800066b6:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800066ba:	b1 81       	lsr	r1,0x10
800066bc:	40 1b       	lddsp	r11,sp[0x4]
800066be:	ea 00 02 40 	mul	r0,r5,r0
800066c2:	e2 00 00 00 	add	r0,r1,r0
800066c6:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800066ca:	02 1b       	sub	r11,r1
800066cc:	50 1b       	stdsp	sp[0x4],r11
800066ce:	70 0b       	ld.w	r11,r8[0x0]
800066d0:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800066d4:	02 09       	add	r9,r1
800066d6:	f2 0e 01 0e 	sub	lr,r9,lr
800066da:	b0 1e       	st.h	r8[0x2],lr
800066dc:	fc 09 14 10 	asr	r9,lr,0x10
800066e0:	40 1e       	lddsp	lr,sp[0x4]
800066e2:	fc 09 00 09 	add	r9,lr,r9
800066e6:	b0 09       	st.h	r8[0x0],r9
800066e8:	e0 01 16 10 	lsr	r1,r0,0x10
800066ec:	2f c8       	sub	r8,-4
800066ee:	b1 49       	asr	r9,0x10
800066f0:	04 3a       	cp.w	r10,r2
800066f2:	fe 98 ff d8 	brls	800066a2 <quorem+0x42>
800066f6:	40 0b       	lddsp	r11,sp[0x0]
800066f8:	58 0c       	cp.w	r12,0
800066fa:	c0 f1       	brne	80006718 <quorem+0xb8>
800066fc:	ec c8 ff fb 	sub	r8,r6,-5
80006700:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006704:	c0 28       	rjmp	80006708 <quorem+0xa8>
80006706:	20 16       	sub	r6,1
80006708:	20 48       	sub	r8,4
8000670a:	08 38       	cp.w	r8,r4
8000670c:	e0 88 00 05 	brls	80006716 <quorem+0xb6>
80006710:	70 09       	ld.w	r9,r8[0x0]
80006712:	58 09       	cp.w	r9,0
80006714:	cf 90       	breq	80006706 <quorem+0xa6>
80006716:	8f 46       	st.w	r7[0x10],r6
80006718:	0e 9c       	mov	r12,r7
8000671a:	e0 a0 0c f4 	rcall	80008102 <__mcmp>
8000671e:	c2 d5       	brlt	80006778 <quorem+0x118>
80006720:	2f f5       	sub	r5,-1
80006722:	08 98       	mov	r8,r4
80006724:	30 09       	mov	r9,0
80006726:	07 0b       	ld.w	r11,r3++
80006728:	f6 0a 16 10 	lsr	r10,r11,0x10
8000672c:	70 0c       	ld.w	r12,r8[0x0]
8000672e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80006732:	f8 0e 16 10 	lsr	lr,r12,0x10
80006736:	14 1e       	sub	lr,r10
80006738:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000673c:	16 1a       	sub	r10,r11
8000673e:	12 0a       	add	r10,r9
80006740:	b0 1a       	st.h	r8[0x2],r10
80006742:	b1 4a       	asr	r10,0x10
80006744:	fc 0a 00 09 	add	r9,lr,r10
80006748:	b0 09       	st.h	r8[0x0],r9
8000674a:	2f c8       	sub	r8,-4
8000674c:	b1 49       	asr	r9,0x10
8000674e:	04 33       	cp.w	r3,r2
80006750:	fe 98 ff eb 	brls	80006726 <quorem+0xc6>
80006754:	ec c8 ff fb 	sub	r8,r6,-5
80006758:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000675c:	58 09       	cp.w	r9,0
8000675e:	c0 d1       	brne	80006778 <quorem+0x118>
80006760:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006764:	c0 28       	rjmp	80006768 <quorem+0x108>
80006766:	20 16       	sub	r6,1
80006768:	20 48       	sub	r8,4
8000676a:	08 38       	cp.w	r8,r4
8000676c:	e0 88 00 05 	brls	80006776 <quorem+0x116>
80006770:	70 09       	ld.w	r9,r8[0x0]
80006772:	58 09       	cp.w	r9,0
80006774:	cf 90       	breq	80006766 <quorem+0x106>
80006776:	8f 46       	st.w	r7[0x10],r6
80006778:	0a 9c       	mov	r12,r5
8000677a:	2f ed       	sub	sp,-8
8000677c:	d8 32       	popm	r0-r7,pc
8000677e:	d7 03       	nop

80006780 <_dtoa_r>:
80006780:	d4 31       	pushm	r0-r7,lr
80006782:	21 ad       	sub	sp,104
80006784:	fa c4 ff 74 	sub	r4,sp,-140
80006788:	18 97       	mov	r7,r12
8000678a:	16 95       	mov	r5,r11
8000678c:	68 2c       	ld.w	r12,r4[0x8]
8000678e:	50 c9       	stdsp	sp[0x30],r9
80006790:	68 16       	ld.w	r6,r4[0x4]
80006792:	68 09       	ld.w	r9,r4[0x0]
80006794:	50 e8       	stdsp	sp[0x38],r8
80006796:	14 94       	mov	r4,r10
80006798:	51 2c       	stdsp	sp[0x48],r12
8000679a:	fa e5 00 08 	st.d	sp[8],r4
8000679e:	51 59       	stdsp	sp[0x54],r9
800067a0:	6e 95       	ld.w	r5,r7[0x24]
800067a2:	58 05       	cp.w	r5,0
800067a4:	c0 91       	brne	800067b6 <_dtoa_r+0x36>
800067a6:	31 0c       	mov	r12,16
800067a8:	e0 a0 09 ea 	rcall	80007b7c <malloc>
800067ac:	99 35       	st.w	r12[0xc],r5
800067ae:	8f 9c       	st.w	r7[0x24],r12
800067b0:	99 15       	st.w	r12[0x4],r5
800067b2:	99 25       	st.w	r12[0x8],r5
800067b4:	99 05       	st.w	r12[0x0],r5
800067b6:	6e 99       	ld.w	r9,r7[0x24]
800067b8:	72 08       	ld.w	r8,r9[0x0]
800067ba:	58 08       	cp.w	r8,0
800067bc:	c0 f0       	breq	800067da <_dtoa_r+0x5a>
800067be:	72 1a       	ld.w	r10,r9[0x4]
800067c0:	91 1a       	st.w	r8[0x4],r10
800067c2:	30 1a       	mov	r10,1
800067c4:	72 19       	ld.w	r9,r9[0x4]
800067c6:	f4 09 09 49 	lsl	r9,r10,r9
800067ca:	10 9b       	mov	r11,r8
800067cc:	91 29       	st.w	r8[0x8],r9
800067ce:	0e 9c       	mov	r12,r7
800067d0:	e0 a0 0c b2 	rcall	80008134 <_Bfree>
800067d4:	6e 98       	ld.w	r8,r7[0x24]
800067d6:	30 09       	mov	r9,0
800067d8:	91 09       	st.w	r8[0x0],r9
800067da:	40 28       	lddsp	r8,sp[0x8]
800067dc:	10 94       	mov	r4,r8
800067de:	58 08       	cp.w	r8,0
800067e0:	c0 64       	brge	800067ec <_dtoa_r+0x6c>
800067e2:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800067e6:	50 28       	stdsp	sp[0x8],r8
800067e8:	30 18       	mov	r8,1
800067ea:	c0 28       	rjmp	800067ee <_dtoa_r+0x6e>
800067ec:	30 08       	mov	r8,0
800067ee:	8d 08       	st.w	r6[0x0],r8
800067f0:	fc 1c 7f f0 	movh	r12,0x7ff0
800067f4:	40 26       	lddsp	r6,sp[0x8]
800067f6:	0c 98       	mov	r8,r6
800067f8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800067fc:	18 38       	cp.w	r8,r12
800067fe:	c2 01       	brne	8000683e <_dtoa_r+0xbe>
80006800:	e0 68 27 0f 	mov	r8,9999
80006804:	41 5b       	lddsp	r11,sp[0x54]
80006806:	97 08       	st.w	r11[0x0],r8
80006808:	40 3a       	lddsp	r10,sp[0xc]
8000680a:	58 0a       	cp.w	r10,0
8000680c:	c0 71       	brne	8000681a <_dtoa_r+0x9a>
8000680e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80006812:	c0 41       	brne	8000681a <_dtoa_r+0x9a>
80006814:	fe cc c6 68 	sub	r12,pc,-14744
80006818:	c0 38       	rjmp	8000681e <_dtoa_r+0x9e>
8000681a:	fe cc c6 62 	sub	r12,pc,-14750
8000681e:	41 29       	lddsp	r9,sp[0x48]
80006820:	58 09       	cp.w	r9,0
80006822:	e0 80 05 9a 	breq	80007356 <_dtoa_r+0xbd6>
80006826:	f8 c8 ff fd 	sub	r8,r12,-3
8000682a:	f8 c9 ff f8 	sub	r9,r12,-8
8000682e:	11 8b       	ld.ub	r11,r8[0x0]
80006830:	30 0a       	mov	r10,0
80006832:	41 25       	lddsp	r5,sp[0x48]
80006834:	f4 0b 18 00 	cp.b	r11,r10
80006838:	f2 08 17 10 	movne	r8,r9
8000683c:	c1 68       	rjmp	80006868 <_dtoa_r+0xe8>
8000683e:	fa ea 00 08 	ld.d	r10,sp[8]
80006842:	30 08       	mov	r8,0
80006844:	fa eb 00 3c 	st.d	sp[60],r10
80006848:	30 09       	mov	r9,0
8000684a:	e0 a0 13 80 	rcall	80008f4a <__avr32_f64_cmp_eq>
8000684e:	c1 00       	breq	8000686e <_dtoa_r+0xee>
80006850:	30 18       	mov	r8,1
80006852:	41 5a       	lddsp	r10,sp[0x54]
80006854:	95 08       	st.w	r10[0x0],r8
80006856:	fe cc c7 ce 	sub	r12,pc,-14386
8000685a:	41 29       	lddsp	r9,sp[0x48]
8000685c:	f8 08 00 08 	add	r8,r12,r8
80006860:	58 09       	cp.w	r9,0
80006862:	e0 80 05 7a 	breq	80007356 <_dtoa_r+0xbd6>
80006866:	12 95       	mov	r5,r9
80006868:	8b 08       	st.w	r5[0x0],r8
8000686a:	e0 8f 05 76 	bral	80007356 <_dtoa_r+0xbd6>
8000686e:	fa c8 ff 9c 	sub	r8,sp,-100
80006872:	fa c9 ff a0 	sub	r9,sp,-96
80006876:	fa ea 00 3c 	ld.d	r10,sp[60]
8000687a:	0e 9c       	mov	r12,r7
8000687c:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006880:	e0 a0 0c ac 	rcall	800081d8 <__d2b>
80006884:	18 93       	mov	r3,r12
80006886:	58 05       	cp.w	r5,0
80006888:	c0 d0       	breq	800068a2 <_dtoa_r+0x122>
8000688a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000688e:	30 04       	mov	r4,0
80006890:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006894:	ea c5 03 ff 	sub	r5,r5,1023
80006898:	10 9b       	mov	r11,r8
8000689a:	51 74       	stdsp	sp[0x5c],r4
8000689c:	ea 1b 3f f0 	orh	r11,0x3ff0
800068a0:	c2 58       	rjmp	800068ea <_dtoa_r+0x16a>
800068a2:	41 88       	lddsp	r8,sp[0x60]
800068a4:	41 9c       	lddsp	r12,sp[0x64]
800068a6:	10 0c       	add	r12,r8
800068a8:	f8 c5 fb ce 	sub	r5,r12,-1074
800068ac:	e0 45 00 20 	cp.w	r5,32
800068b0:	e0 8a 00 0e 	brle	800068cc <_dtoa_r+0x14c>
800068b4:	f8 cc fb ee 	sub	r12,r12,-1042
800068b8:	40 3b       	lddsp	r11,sp[0xc]
800068ba:	ea 08 11 40 	rsub	r8,r5,64
800068be:	f6 0c 0a 4c 	lsr	r12,r11,r12
800068c2:	ec 08 09 46 	lsl	r6,r6,r8
800068c6:	0c 4c       	or	r12,r6
800068c8:	c0 78       	rjmp	800068d6 <_dtoa_r+0x156>
800068ca:	d7 03       	nop
800068cc:	ea 0c 11 20 	rsub	r12,r5,32
800068d0:	40 3a       	lddsp	r10,sp[0xc]
800068d2:	f4 0c 09 4c 	lsl	r12,r10,r12
800068d6:	fe b0 ea 55 	rcall	80003d80 <__avr32_u32_to_f64>
800068da:	fc 18 fe 10 	movh	r8,0xfe10
800068de:	30 19       	mov	r9,1
800068e0:	ea c5 04 33 	sub	r5,r5,1075
800068e4:	f0 0b 00 0b 	add	r11,r8,r11
800068e8:	51 79       	stdsp	sp[0x5c],r9
800068ea:	30 08       	mov	r8,0
800068ec:	fc 19 3f f8 	movh	r9,0x3ff8
800068f0:	e0 a0 11 c2 	rcall	80008c74 <__avr32_f64_sub>
800068f4:	e0 68 43 61 	mov	r8,17249
800068f8:	ea 18 63 6f 	orh	r8,0x636f
800068fc:	e0 69 87 a7 	mov	r9,34727
80006900:	ea 19 3f d2 	orh	r9,0x3fd2
80006904:	fe b0 e9 54 	rcall	80003bac <__avr32_f64_mul>
80006908:	e0 68 c8 b3 	mov	r8,51379
8000690c:	ea 18 8b 60 	orh	r8,0x8b60
80006910:	e0 69 8a 28 	mov	r9,35368
80006914:	ea 19 3f c6 	orh	r9,0x3fc6
80006918:	e0 a0 12 7c 	rcall	80008e10 <__avr32_f64_add>
8000691c:	0a 9c       	mov	r12,r5
8000691e:	14 90       	mov	r0,r10
80006920:	16 91       	mov	r1,r11
80006922:	fe b0 ea 33 	rcall	80003d88 <__avr32_s32_to_f64>
80006926:	e0 68 79 fb 	mov	r8,31227
8000692a:	ea 18 50 9f 	orh	r8,0x509f
8000692e:	e0 69 44 13 	mov	r9,17427
80006932:	ea 19 3f d3 	orh	r9,0x3fd3
80006936:	fe b0 e9 3b 	rcall	80003bac <__avr32_f64_mul>
8000693a:	14 98       	mov	r8,r10
8000693c:	16 99       	mov	r9,r11
8000693e:	00 9a       	mov	r10,r0
80006940:	02 9b       	mov	r11,r1
80006942:	e0 a0 12 67 	rcall	80008e10 <__avr32_f64_add>
80006946:	14 90       	mov	r0,r10
80006948:	16 91       	mov	r1,r11
8000694a:	e0 a0 12 ed 	rcall	80008f24 <__avr32_f64_to_s32>
8000694e:	30 08       	mov	r8,0
80006950:	18 96       	mov	r6,r12
80006952:	30 09       	mov	r9,0
80006954:	00 9a       	mov	r10,r0
80006956:	02 9b       	mov	r11,r1
80006958:	e0 a0 13 40 	rcall	80008fd8 <__avr32_f64_cmp_lt>
8000695c:	c0 c0       	breq	80006974 <_dtoa_r+0x1f4>
8000695e:	0c 9c       	mov	r12,r6
80006960:	fe b0 ea 14 	rcall	80003d88 <__avr32_s32_to_f64>
80006964:	14 98       	mov	r8,r10
80006966:	16 99       	mov	r9,r11
80006968:	00 9a       	mov	r10,r0
8000696a:	02 9b       	mov	r11,r1
8000696c:	e0 a0 12 ef 	rcall	80008f4a <__avr32_f64_cmp_eq>
80006970:	f7 b6 00 01 	subeq	r6,1
80006974:	59 66       	cp.w	r6,22
80006976:	e0 88 00 05 	brls	80006980 <_dtoa_r+0x200>
8000697a:	30 18       	mov	r8,1
8000697c:	51 48       	stdsp	sp[0x50],r8
8000697e:	c1 38       	rjmp	800069a4 <_dtoa_r+0x224>
80006980:	fe c8 c7 10 	sub	r8,pc,-14576
80006984:	fa ea 00 3c 	ld.d	r10,sp[60]
80006988:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000698c:	e0 a0 13 26 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006990:	f9 b4 00 00 	moveq	r4,0
80006994:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006998:	f7 b6 01 01 	subne	r6,1
8000699c:	f9 bc 01 00 	movne	r12,0
800069a0:	fb fc 1a 14 	st.wne	sp[0x50],r12
800069a4:	41 90       	lddsp	r0,sp[0x64]
800069a6:	20 10       	sub	r0,1
800069a8:	0a 10       	sub	r0,r5
800069aa:	c0 46       	brmi	800069b2 <_dtoa_r+0x232>
800069ac:	50 40       	stdsp	sp[0x10],r0
800069ae:	30 00       	mov	r0,0
800069b0:	c0 48       	rjmp	800069b8 <_dtoa_r+0x238>
800069b2:	30 0b       	mov	r11,0
800069b4:	5c 30       	neg	r0
800069b6:	50 4b       	stdsp	sp[0x10],r11
800069b8:	ec 02 11 00 	rsub	r2,r6,0
800069bc:	58 06       	cp.w	r6,0
800069be:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800069c2:	f5 d6 e4 0a 	addge	r10,r10,r6
800069c6:	fb fa 4a 04 	st.wge	sp[0x10],r10
800069ca:	fb f6 4a 11 	st.wge	sp[0x44],r6
800069ce:	f9 b2 04 00 	movge	r2,0
800069d2:	e1 d6 e5 10 	sublt	r0,r0,r6
800069d6:	f9 b9 05 00 	movlt	r9,0
800069da:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800069de:	40 c8       	lddsp	r8,sp[0x30]
800069e0:	58 98       	cp.w	r8,9
800069e2:	e0 8b 00 20 	brhi	80006a22 <_dtoa_r+0x2a2>
800069e6:	58 58       	cp.w	r8,5
800069e8:	f9 b4 0a 01 	movle	r4,1
800069ec:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800069f0:	f7 b5 09 04 	subgt	r5,4
800069f4:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800069f8:	f9 b4 09 00 	movgt	r4,0
800069fc:	40 cc       	lddsp	r12,sp[0x30]
800069fe:	58 3c       	cp.w	r12,3
80006a00:	c2 d0       	breq	80006a5a <_dtoa_r+0x2da>
80006a02:	e0 89 00 05 	brgt	80006a0c <_dtoa_r+0x28c>
80006a06:	58 2c       	cp.w	r12,2
80006a08:	c1 01       	brne	80006a28 <_dtoa_r+0x2a8>
80006a0a:	c1 88       	rjmp	80006a3a <_dtoa_r+0x2ba>
80006a0c:	40 cb       	lddsp	r11,sp[0x30]
80006a0e:	58 4b       	cp.w	r11,4
80006a10:	c0 60       	breq	80006a1c <_dtoa_r+0x29c>
80006a12:	58 5b       	cp.w	r11,5
80006a14:	c0 a1       	brne	80006a28 <_dtoa_r+0x2a8>
80006a16:	30 1a       	mov	r10,1
80006a18:	50 da       	stdsp	sp[0x34],r10
80006a1a:	c2 28       	rjmp	80006a5e <_dtoa_r+0x2de>
80006a1c:	30 19       	mov	r9,1
80006a1e:	50 d9       	stdsp	sp[0x34],r9
80006a20:	c0 f8       	rjmp	80006a3e <_dtoa_r+0x2be>
80006a22:	30 08       	mov	r8,0
80006a24:	30 14       	mov	r4,1
80006a26:	50 c8       	stdsp	sp[0x30],r8
80006a28:	3f f5       	mov	r5,-1
80006a2a:	30 1c       	mov	r12,1
80006a2c:	30 0b       	mov	r11,0
80006a2e:	50 95       	stdsp	sp[0x24],r5
80006a30:	50 dc       	stdsp	sp[0x34],r12
80006a32:	0a 91       	mov	r1,r5
80006a34:	31 28       	mov	r8,18
80006a36:	50 eb       	stdsp	sp[0x38],r11
80006a38:	c2 08       	rjmp	80006a78 <_dtoa_r+0x2f8>
80006a3a:	30 0a       	mov	r10,0
80006a3c:	50 da       	stdsp	sp[0x34],r10
80006a3e:	40 e9       	lddsp	r9,sp[0x38]
80006a40:	58 09       	cp.w	r9,0
80006a42:	e0 89 00 07 	brgt	80006a50 <_dtoa_r+0x2d0>
80006a46:	30 18       	mov	r8,1
80006a48:	50 98       	stdsp	sp[0x24],r8
80006a4a:	10 91       	mov	r1,r8
80006a4c:	50 e8       	stdsp	sp[0x38],r8
80006a4e:	c1 58       	rjmp	80006a78 <_dtoa_r+0x2f8>
80006a50:	40 e5       	lddsp	r5,sp[0x38]
80006a52:	50 95       	stdsp	sp[0x24],r5
80006a54:	0a 91       	mov	r1,r5
80006a56:	0a 98       	mov	r8,r5
80006a58:	c1 08       	rjmp	80006a78 <_dtoa_r+0x2f8>
80006a5a:	30 0c       	mov	r12,0
80006a5c:	50 dc       	stdsp	sp[0x34],r12
80006a5e:	40 eb       	lddsp	r11,sp[0x38]
80006a60:	ec 0b 00 0b 	add	r11,r6,r11
80006a64:	50 9b       	stdsp	sp[0x24],r11
80006a66:	16 98       	mov	r8,r11
80006a68:	2f f8       	sub	r8,-1
80006a6a:	58 08       	cp.w	r8,0
80006a6c:	e0 89 00 05 	brgt	80006a76 <_dtoa_r+0x2f6>
80006a70:	10 91       	mov	r1,r8
80006a72:	30 18       	mov	r8,1
80006a74:	c0 28       	rjmp	80006a78 <_dtoa_r+0x2f8>
80006a76:	10 91       	mov	r1,r8
80006a78:	30 09       	mov	r9,0
80006a7a:	6e 9a       	ld.w	r10,r7[0x24]
80006a7c:	95 19       	st.w	r10[0x4],r9
80006a7e:	30 49       	mov	r9,4
80006a80:	c0 68       	rjmp	80006a8c <_dtoa_r+0x30c>
80006a82:	d7 03       	nop
80006a84:	6a 1a       	ld.w	r10,r5[0x4]
80006a86:	a1 79       	lsl	r9,0x1
80006a88:	2f fa       	sub	r10,-1
80006a8a:	8b 1a       	st.w	r5[0x4],r10
80006a8c:	6e 95       	ld.w	r5,r7[0x24]
80006a8e:	f2 ca ff ec 	sub	r10,r9,-20
80006a92:	10 3a       	cp.w	r10,r8
80006a94:	fe 98 ff f8 	brls	80006a84 <_dtoa_r+0x304>
80006a98:	6a 1b       	ld.w	r11,r5[0x4]
80006a9a:	0e 9c       	mov	r12,r7
80006a9c:	e0 a0 0b 66 	rcall	80008168 <_Balloc>
80006aa0:	58 e1       	cp.w	r1,14
80006aa2:	5f 88       	srls	r8
80006aa4:	8b 0c       	st.w	r5[0x0],r12
80006aa6:	f1 e4 00 04 	and	r4,r8,r4
80006aaa:	6e 98       	ld.w	r8,r7[0x24]
80006aac:	70 08       	ld.w	r8,r8[0x0]
80006aae:	50 88       	stdsp	sp[0x20],r8
80006ab0:	e0 80 01 82 	breq	80006db4 <_dtoa_r+0x634>
80006ab4:	58 06       	cp.w	r6,0
80006ab6:	e0 8a 00 43 	brle	80006b3c <_dtoa_r+0x3bc>
80006aba:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80006abe:	fe c8 c8 4e 	sub	r8,pc,-14258
80006ac2:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006ac6:	fa e5 00 18 	st.d	sp[24],r4
80006aca:	ec 04 14 04 	asr	r4,r6,0x4
80006ace:	ed b4 00 04 	bld	r4,0x4
80006ad2:	c0 30       	breq	80006ad8 <_dtoa_r+0x358>
80006ad4:	30 25       	mov	r5,2
80006ad6:	c1 08       	rjmp	80006af6 <_dtoa_r+0x376>
80006ad8:	fe c8 c7 a0 	sub	r8,pc,-14432
80006adc:	f0 e8 00 20 	ld.d	r8,r8[32]
80006ae0:	fa ea 00 3c 	ld.d	r10,sp[60]
80006ae4:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006ae8:	e0 a0 12 ac 	rcall	80009040 <__avr32_f64_div>
80006aec:	30 35       	mov	r5,3
80006aee:	14 98       	mov	r8,r10
80006af0:	16 99       	mov	r9,r11
80006af2:	fa e9 00 08 	st.d	sp[8],r8
80006af6:	fe cc c7 be 	sub	r12,pc,-14402
80006afa:	50 a3       	stdsp	sp[0x28],r3
80006afc:	0c 93       	mov	r3,r6
80006afe:	18 96       	mov	r6,r12
80006b00:	c0 f8       	rjmp	80006b1e <_dtoa_r+0x39e>
80006b02:	fa ea 00 18 	ld.d	r10,sp[24]
80006b06:	ed b4 00 00 	bld	r4,0x0
80006b0a:	c0 81       	brne	80006b1a <_dtoa_r+0x39a>
80006b0c:	ec e8 00 00 	ld.d	r8,r6[0]
80006b10:	2f f5       	sub	r5,-1
80006b12:	fe b0 e8 4d 	rcall	80003bac <__avr32_f64_mul>
80006b16:	fa eb 00 18 	st.d	sp[24],r10
80006b1a:	a1 54       	asr	r4,0x1
80006b1c:	2f 86       	sub	r6,-8
80006b1e:	58 04       	cp.w	r4,0
80006b20:	cf 11       	brne	80006b02 <_dtoa_r+0x382>
80006b22:	fa e8 00 18 	ld.d	r8,sp[24]
80006b26:	fa ea 00 08 	ld.d	r10,sp[8]
80006b2a:	06 96       	mov	r6,r3
80006b2c:	e0 a0 12 8a 	rcall	80009040 <__avr32_f64_div>
80006b30:	40 a3       	lddsp	r3,sp[0x28]
80006b32:	14 98       	mov	r8,r10
80006b34:	16 99       	mov	r9,r11
80006b36:	fa e9 00 08 	st.d	sp[8],r8
80006b3a:	c2 f8       	rjmp	80006b98 <_dtoa_r+0x418>
80006b3c:	ec 08 11 00 	rsub	r8,r6,0
80006b40:	c0 31       	brne	80006b46 <_dtoa_r+0x3c6>
80006b42:	30 25       	mov	r5,2
80006b44:	c2 a8       	rjmp	80006b98 <_dtoa_r+0x418>
80006b46:	fe cc c8 0e 	sub	r12,pc,-14322
80006b4a:	f0 04 14 04 	asr	r4,r8,0x4
80006b4e:	50 1c       	stdsp	sp[0x4],r12
80006b50:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006b54:	fe c9 c8 e4 	sub	r9,pc,-14108
80006b58:	fa ea 00 3c 	ld.d	r10,sp[60]
80006b5c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006b60:	fe b0 e8 26 	rcall	80003bac <__avr32_f64_mul>
80006b64:	40 1c       	lddsp	r12,sp[0x4]
80006b66:	50 63       	stdsp	sp[0x18],r3
80006b68:	30 25       	mov	r5,2
80006b6a:	0c 93       	mov	r3,r6
80006b6c:	fa eb 00 08 	st.d	sp[8],r10
80006b70:	18 96       	mov	r6,r12
80006b72:	c0 f8       	rjmp	80006b90 <_dtoa_r+0x410>
80006b74:	fa ea 00 08 	ld.d	r10,sp[8]
80006b78:	ed b4 00 00 	bld	r4,0x0
80006b7c:	c0 81       	brne	80006b8c <_dtoa_r+0x40c>
80006b7e:	ec e8 00 00 	ld.d	r8,r6[0]
80006b82:	2f f5       	sub	r5,-1
80006b84:	fe b0 e8 14 	rcall	80003bac <__avr32_f64_mul>
80006b88:	fa eb 00 08 	st.d	sp[8],r10
80006b8c:	a1 54       	asr	r4,0x1
80006b8e:	2f 86       	sub	r6,-8
80006b90:	58 04       	cp.w	r4,0
80006b92:	cf 11       	brne	80006b74 <_dtoa_r+0x3f4>
80006b94:	06 96       	mov	r6,r3
80006b96:	40 63       	lddsp	r3,sp[0x18]
80006b98:	41 4a       	lddsp	r10,sp[0x50]
80006b9a:	58 0a       	cp.w	r10,0
80006b9c:	c2 a0       	breq	80006bf0 <_dtoa_r+0x470>
80006b9e:	fa e8 00 08 	ld.d	r8,sp[8]
80006ba2:	58 01       	cp.w	r1,0
80006ba4:	5f 94       	srgt	r4
80006ba6:	fa e9 00 18 	st.d	sp[24],r8
80006baa:	30 08       	mov	r8,0
80006bac:	fc 19 3f f0 	movh	r9,0x3ff0
80006bb0:	fa ea 00 18 	ld.d	r10,sp[24]
80006bb4:	e0 a0 12 12 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006bb8:	f9 bc 00 00 	moveq	r12,0
80006bbc:	f9 bc 01 01 	movne	r12,1
80006bc0:	e9 ec 00 0c 	and	r12,r4,r12
80006bc4:	c1 60       	breq	80006bf0 <_dtoa_r+0x470>
80006bc6:	40 98       	lddsp	r8,sp[0x24]
80006bc8:	58 08       	cp.w	r8,0
80006bca:	e0 8a 00 f1 	brle	80006dac <_dtoa_r+0x62c>
80006bce:	30 08       	mov	r8,0
80006bd0:	fc 19 40 24 	movh	r9,0x4024
80006bd4:	ec c4 00 01 	sub	r4,r6,1
80006bd8:	fa ea 00 18 	ld.d	r10,sp[24]
80006bdc:	2f f5       	sub	r5,-1
80006bde:	50 64       	stdsp	sp[0x18],r4
80006be0:	fe b0 e7 e6 	rcall	80003bac <__avr32_f64_mul>
80006be4:	40 94       	lddsp	r4,sp[0x24]
80006be6:	14 98       	mov	r8,r10
80006be8:	16 99       	mov	r9,r11
80006bea:	fa e9 00 08 	st.d	sp[8],r8
80006bee:	c0 38       	rjmp	80006bf4 <_dtoa_r+0x474>
80006bf0:	50 66       	stdsp	sp[0x18],r6
80006bf2:	02 94       	mov	r4,r1
80006bf4:	0a 9c       	mov	r12,r5
80006bf6:	fe b0 e8 c9 	rcall	80003d88 <__avr32_s32_to_f64>
80006bfa:	fa e8 00 08 	ld.d	r8,sp[8]
80006bfe:	fe b0 e7 d7 	rcall	80003bac <__avr32_f64_mul>
80006c02:	30 08       	mov	r8,0
80006c04:	fc 19 40 1c 	movh	r9,0x401c
80006c08:	e0 a0 11 04 	rcall	80008e10 <__avr32_f64_add>
80006c0c:	14 98       	mov	r8,r10
80006c0e:	16 99       	mov	r9,r11
80006c10:	fa e9 00 28 	st.d	sp[40],r8
80006c14:	fc 18 fc c0 	movh	r8,0xfcc0
80006c18:	40 a5       	lddsp	r5,sp[0x28]
80006c1a:	10 05       	add	r5,r8
80006c1c:	50 a5       	stdsp	sp[0x28],r5
80006c1e:	58 04       	cp.w	r4,0
80006c20:	c2 11       	brne	80006c62 <_dtoa_r+0x4e2>
80006c22:	fa ea 00 08 	ld.d	r10,sp[8]
80006c26:	30 08       	mov	r8,0
80006c28:	fc 19 40 14 	movh	r9,0x4014
80006c2c:	e0 a0 10 24 	rcall	80008c74 <__avr32_f64_sub>
80006c30:	40 bc       	lddsp	r12,sp[0x2c]
80006c32:	fa eb 00 08 	st.d	sp[8],r10
80006c36:	14 98       	mov	r8,r10
80006c38:	16 99       	mov	r9,r11
80006c3a:	18 9a       	mov	r10,r12
80006c3c:	0a 9b       	mov	r11,r5
80006c3e:	e0 a0 11 cd 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006c42:	e0 81 02 54 	brne	800070ea <_dtoa_r+0x96a>
80006c46:	0a 98       	mov	r8,r5
80006c48:	40 b9       	lddsp	r9,sp[0x2c]
80006c4a:	ee 18 80 00 	eorh	r8,0x8000
80006c4e:	fa ea 00 08 	ld.d	r10,sp[8]
80006c52:	10 95       	mov	r5,r8
80006c54:	12 98       	mov	r8,r9
80006c56:	0a 99       	mov	r9,r5
80006c58:	e0 a0 11 c0 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006c5c:	e0 81 02 3e 	brne	800070d8 <_dtoa_r+0x958>
80006c60:	ca 68       	rjmp	80006dac <_dtoa_r+0x62c>
80006c62:	fe c9 c9 f2 	sub	r9,pc,-13838
80006c66:	e8 c8 00 01 	sub	r8,r4,1
80006c6a:	40 d5       	lddsp	r5,sp[0x34]
80006c6c:	58 05       	cp.w	r5,0
80006c6e:	c4 f0       	breq	80006d0c <_dtoa_r+0x58c>
80006c70:	30 0c       	mov	r12,0
80006c72:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006c76:	51 3c       	stdsp	sp[0x4c],r12
80006c78:	30 0a       	mov	r10,0
80006c7a:	fc 1b 3f e0 	movh	r11,0x3fe0
80006c7e:	e0 a0 11 e1 	rcall	80009040 <__avr32_f64_div>
80006c82:	fa e8 00 28 	ld.d	r8,sp[40]
80006c86:	40 85       	lddsp	r5,sp[0x20]
80006c88:	e0 a0 0f f6 	rcall	80008c74 <__avr32_f64_sub>
80006c8c:	fa eb 00 28 	st.d	sp[40],r10
80006c90:	fa ea 00 08 	ld.d	r10,sp[8]
80006c94:	e0 a0 11 48 	rcall	80008f24 <__avr32_f64_to_s32>
80006c98:	51 6c       	stdsp	sp[0x58],r12
80006c9a:	fe b0 e8 77 	rcall	80003d88 <__avr32_s32_to_f64>
80006c9e:	14 98       	mov	r8,r10
80006ca0:	16 99       	mov	r9,r11
80006ca2:	fa ea 00 08 	ld.d	r10,sp[8]
80006ca6:	e0 a0 0f e7 	rcall	80008c74 <__avr32_f64_sub>
80006caa:	fa eb 00 08 	st.d	sp[8],r10
80006cae:	41 68       	lddsp	r8,sp[0x58]
80006cb0:	2d 08       	sub	r8,-48
80006cb2:	0a c8       	st.b	r5++,r8
80006cb4:	41 39       	lddsp	r9,sp[0x4c]
80006cb6:	2f f9       	sub	r9,-1
80006cb8:	51 39       	stdsp	sp[0x4c],r9
80006cba:	fa e8 00 28 	ld.d	r8,sp[40]
80006cbe:	e0 a0 11 8d 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006cc2:	e0 81 03 39 	brne	80007334 <_dtoa_r+0xbb4>
80006cc6:	fa e8 00 08 	ld.d	r8,sp[8]
80006cca:	30 0a       	mov	r10,0
80006ccc:	fc 1b 3f f0 	movh	r11,0x3ff0
80006cd0:	e0 a0 0f d2 	rcall	80008c74 <__avr32_f64_sub>
80006cd4:	fa e8 00 28 	ld.d	r8,sp[40]
80006cd8:	e0 a0 11 80 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006cdc:	fa ea 00 28 	ld.d	r10,sp[40]
80006ce0:	30 08       	mov	r8,0
80006ce2:	fc 19 40 24 	movh	r9,0x4024
80006ce6:	e0 81 00 da 	brne	80006e9a <_dtoa_r+0x71a>
80006cea:	41 3c       	lddsp	r12,sp[0x4c]
80006cec:	08 3c       	cp.w	r12,r4
80006cee:	c5 f4       	brge	80006dac <_dtoa_r+0x62c>
80006cf0:	fe b0 e7 5e 	rcall	80003bac <__avr32_f64_mul>
80006cf4:	30 08       	mov	r8,0
80006cf6:	fa eb 00 28 	st.d	sp[40],r10
80006cfa:	fc 19 40 24 	movh	r9,0x4024
80006cfe:	fa ea 00 08 	ld.d	r10,sp[8]
80006d02:	fe b0 e7 55 	rcall	80003bac <__avr32_f64_mul>
80006d06:	fa eb 00 08 	st.d	sp[8],r10
80006d0a:	cc 3b       	rjmp	80006c90 <_dtoa_r+0x510>
80006d0c:	40 85       	lddsp	r5,sp[0x20]
80006d0e:	08 05       	add	r5,r4
80006d10:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006d14:	51 35       	stdsp	sp[0x4c],r5
80006d16:	fa e8 00 28 	ld.d	r8,sp[40]
80006d1a:	40 85       	lddsp	r5,sp[0x20]
80006d1c:	fe b0 e7 48 	rcall	80003bac <__avr32_f64_mul>
80006d20:	fa eb 00 28 	st.d	sp[40],r10
80006d24:	fa ea 00 08 	ld.d	r10,sp[8]
80006d28:	e0 a0 10 fe 	rcall	80008f24 <__avr32_f64_to_s32>
80006d2c:	51 6c       	stdsp	sp[0x58],r12
80006d2e:	fe b0 e8 2d 	rcall	80003d88 <__avr32_s32_to_f64>
80006d32:	14 98       	mov	r8,r10
80006d34:	16 99       	mov	r9,r11
80006d36:	fa ea 00 08 	ld.d	r10,sp[8]
80006d3a:	e0 a0 0f 9d 	rcall	80008c74 <__avr32_f64_sub>
80006d3e:	fa eb 00 08 	st.d	sp[8],r10
80006d42:	41 68       	lddsp	r8,sp[0x58]
80006d44:	2d 08       	sub	r8,-48
80006d46:	0a c8       	st.b	r5++,r8
80006d48:	41 3c       	lddsp	r12,sp[0x4c]
80006d4a:	18 35       	cp.w	r5,r12
80006d4c:	c2 81       	brne	80006d9c <_dtoa_r+0x61c>
80006d4e:	30 08       	mov	r8,0
80006d50:	fc 19 3f e0 	movh	r9,0x3fe0
80006d54:	fa ea 00 28 	ld.d	r10,sp[40]
80006d58:	e0 a0 10 5c 	rcall	80008e10 <__avr32_f64_add>
80006d5c:	40 85       	lddsp	r5,sp[0x20]
80006d5e:	fa e8 00 08 	ld.d	r8,sp[8]
80006d62:	08 05       	add	r5,r4
80006d64:	e0 a0 11 3a 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006d68:	e0 81 00 99 	brne	80006e9a <_dtoa_r+0x71a>
80006d6c:	fa e8 00 28 	ld.d	r8,sp[40]
80006d70:	30 0a       	mov	r10,0
80006d72:	fc 1b 3f e0 	movh	r11,0x3fe0
80006d76:	e0 a0 0f 7f 	rcall	80008c74 <__avr32_f64_sub>
80006d7a:	14 98       	mov	r8,r10
80006d7c:	16 99       	mov	r9,r11
80006d7e:	fa ea 00 08 	ld.d	r10,sp[8]
80006d82:	e0 a0 11 2b 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006d86:	c1 30       	breq	80006dac <_dtoa_r+0x62c>
80006d88:	33 09       	mov	r9,48
80006d8a:	0a 98       	mov	r8,r5
80006d8c:	11 7a       	ld.ub	r10,--r8
80006d8e:	f2 0a 18 00 	cp.b	r10,r9
80006d92:	e0 81 02 d1 	brne	80007334 <_dtoa_r+0xbb4>
80006d96:	10 95       	mov	r5,r8
80006d98:	cf 9b       	rjmp	80006d8a <_dtoa_r+0x60a>
80006d9a:	d7 03       	nop
80006d9c:	30 08       	mov	r8,0
80006d9e:	fc 19 40 24 	movh	r9,0x4024
80006da2:	fe b0 e7 05 	rcall	80003bac <__avr32_f64_mul>
80006da6:	fa eb 00 08 	st.d	sp[8],r10
80006daa:	cb db       	rjmp	80006d24 <_dtoa_r+0x5a4>
80006dac:	fa ea 00 3c 	ld.d	r10,sp[60]
80006db0:	fa eb 00 08 	st.d	sp[8],r10
80006db4:	58 e6       	cp.w	r6,14
80006db6:	5f ab       	srle	r11
80006db8:	41 8a       	lddsp	r10,sp[0x60]
80006dba:	30 08       	mov	r8,0
80006dbc:	f4 09 11 ff 	rsub	r9,r10,-1
80006dc0:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006dc4:	f0 09 18 00 	cp.b	r9,r8
80006dc8:	e0 80 00 82 	breq	80006ecc <_dtoa_r+0x74c>
80006dcc:	40 ea       	lddsp	r10,sp[0x38]
80006dce:	58 01       	cp.w	r1,0
80006dd0:	5f a9       	srle	r9
80006dd2:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006dd6:	fe ca cb 66 	sub	r10,pc,-13466
80006dda:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006dde:	fa e5 00 10 	st.d	sp[16],r4
80006de2:	f0 09 18 00 	cp.b	r9,r8
80006de6:	c1 40       	breq	80006e0e <_dtoa_r+0x68e>
80006de8:	58 01       	cp.w	r1,0
80006dea:	e0 81 01 77 	brne	800070d8 <_dtoa_r+0x958>
80006dee:	30 08       	mov	r8,0
80006df0:	fc 19 40 14 	movh	r9,0x4014
80006df4:	08 9a       	mov	r10,r4
80006df6:	0a 9b       	mov	r11,r5
80006df8:	fe b0 e6 da 	rcall	80003bac <__avr32_f64_mul>
80006dfc:	fa e8 00 08 	ld.d	r8,sp[8]
80006e00:	e0 a0 10 b8 	rcall	80008f70 <__avr32_f64_cmp_ge>
80006e04:	e0 81 01 6a 	brne	800070d8 <_dtoa_r+0x958>
80006e08:	02 92       	mov	r2,r1
80006e0a:	e0 8f 01 72 	bral	800070ee <_dtoa_r+0x96e>
80006e0e:	40 85       	lddsp	r5,sp[0x20]
80006e10:	30 14       	mov	r4,1
80006e12:	fa e8 00 10 	ld.d	r8,sp[16]
80006e16:	fa ea 00 08 	ld.d	r10,sp[8]
80006e1a:	e0 a0 11 13 	rcall	80009040 <__avr32_f64_div>
80006e1e:	e0 a0 10 83 	rcall	80008f24 <__avr32_f64_to_s32>
80006e22:	18 92       	mov	r2,r12
80006e24:	fe b0 e7 b2 	rcall	80003d88 <__avr32_s32_to_f64>
80006e28:	fa e8 00 10 	ld.d	r8,sp[16]
80006e2c:	fe b0 e6 c0 	rcall	80003bac <__avr32_f64_mul>
80006e30:	14 98       	mov	r8,r10
80006e32:	16 99       	mov	r9,r11
80006e34:	fa ea 00 08 	ld.d	r10,sp[8]
80006e38:	e0 a0 0f 1e 	rcall	80008c74 <__avr32_f64_sub>
80006e3c:	fa eb 00 08 	st.d	sp[8],r10
80006e40:	e4 c8 ff d0 	sub	r8,r2,-48
80006e44:	0a c8       	st.b	r5++,r8
80006e46:	fc 19 40 24 	movh	r9,0x4024
80006e4a:	30 08       	mov	r8,0
80006e4c:	02 34       	cp.w	r4,r1
80006e4e:	c3 31       	brne	80006eb4 <_dtoa_r+0x734>
80006e50:	fa e8 00 08 	ld.d	r8,sp[8]
80006e54:	e0 a0 0f de 	rcall	80008e10 <__avr32_f64_add>
80006e58:	16 91       	mov	r1,r11
80006e5a:	14 90       	mov	r0,r10
80006e5c:	14 98       	mov	r8,r10
80006e5e:	02 99       	mov	r9,r1
80006e60:	fa ea 00 10 	ld.d	r10,sp[16]
80006e64:	e0 a0 10 ba 	rcall	80008fd8 <__avr32_f64_cmp_lt>
80006e68:	c1 a1       	brne	80006e9c <_dtoa_r+0x71c>
80006e6a:	fa e8 00 10 	ld.d	r8,sp[16]
80006e6e:	00 9a       	mov	r10,r0
80006e70:	02 9b       	mov	r11,r1
80006e72:	e0 a0 10 6c 	rcall	80008f4a <__avr32_f64_cmp_eq>
80006e76:	e0 80 02 5e 	breq	80007332 <_dtoa_r+0xbb2>
80006e7a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006e7e:	c0 f1       	brne	80006e9c <_dtoa_r+0x71c>
80006e80:	e0 8f 02 59 	bral	80007332 <_dtoa_r+0xbb2>
80006e84:	40 8a       	lddsp	r10,sp[0x20]
80006e86:	14 38       	cp.w	r8,r10
80006e88:	c0 30       	breq	80006e8e <_dtoa_r+0x70e>
80006e8a:	10 95       	mov	r5,r8
80006e8c:	c0 98       	rjmp	80006e9e <_dtoa_r+0x71e>
80006e8e:	33 08       	mov	r8,48
80006e90:	40 89       	lddsp	r9,sp[0x20]
80006e92:	2f f6       	sub	r6,-1
80006e94:	b2 88       	st.b	r9[0x0],r8
80006e96:	40 88       	lddsp	r8,sp[0x20]
80006e98:	c0 88       	rjmp	80006ea8 <_dtoa_r+0x728>
80006e9a:	40 66       	lddsp	r6,sp[0x18]
80006e9c:	33 99       	mov	r9,57
80006e9e:	0a 98       	mov	r8,r5
80006ea0:	11 7a       	ld.ub	r10,--r8
80006ea2:	f2 0a 18 00 	cp.b	r10,r9
80006ea6:	ce f0       	breq	80006e84 <_dtoa_r+0x704>
80006ea8:	50 66       	stdsp	sp[0x18],r6
80006eaa:	11 89       	ld.ub	r9,r8[0x0]
80006eac:	2f f9       	sub	r9,-1
80006eae:	b0 89       	st.b	r8[0x0],r9
80006eb0:	e0 8f 02 42 	bral	80007334 <_dtoa_r+0xbb4>
80006eb4:	fe b0 e6 7c 	rcall	80003bac <__avr32_f64_mul>
80006eb8:	2f f4       	sub	r4,-1
80006eba:	fa eb 00 08 	st.d	sp[8],r10
80006ebe:	30 08       	mov	r8,0
80006ec0:	30 09       	mov	r9,0
80006ec2:	e0 a0 10 44 	rcall	80008f4a <__avr32_f64_cmp_eq>
80006ec6:	ca 60       	breq	80006e12 <_dtoa_r+0x692>
80006ec8:	e0 8f 02 35 	bral	80007332 <_dtoa_r+0xbb2>
80006ecc:	40 d8       	lddsp	r8,sp[0x34]
80006ece:	58 08       	cp.w	r8,0
80006ed0:	c0 51       	brne	80006eda <_dtoa_r+0x75a>
80006ed2:	04 98       	mov	r8,r2
80006ed4:	00 95       	mov	r5,r0
80006ed6:	40 d4       	lddsp	r4,sp[0x34]
80006ed8:	c3 78       	rjmp	80006f46 <_dtoa_r+0x7c6>
80006eda:	40 c5       	lddsp	r5,sp[0x30]
80006edc:	58 15       	cp.w	r5,1
80006ede:	e0 89 00 0f 	brgt	80006efc <_dtoa_r+0x77c>
80006ee2:	41 74       	lddsp	r4,sp[0x5c]
80006ee4:	58 04       	cp.w	r4,0
80006ee6:	c0 40       	breq	80006eee <_dtoa_r+0x76e>
80006ee8:	f4 c9 fb cd 	sub	r9,r10,-1075
80006eec:	c0 48       	rjmp	80006ef4 <_dtoa_r+0x774>
80006eee:	41 99       	lddsp	r9,sp[0x64]
80006ef0:	f2 09 11 36 	rsub	r9,r9,54
80006ef4:	04 98       	mov	r8,r2
80006ef6:	00 95       	mov	r5,r0
80006ef8:	c1 c8       	rjmp	80006f30 <_dtoa_r+0x7b0>
80006efa:	d7 03       	nop
80006efc:	e2 c8 00 01 	sub	r8,r1,1
80006f00:	58 01       	cp.w	r1,0
80006f02:	e0 05 17 40 	movge	r5,r0
80006f06:	e2 09 17 40 	movge	r9,r1
80006f0a:	e1 d1 e5 15 	sublt	r5,r0,r1
80006f0e:	f9 b9 05 00 	movlt	r9,0
80006f12:	10 32       	cp.w	r2,r8
80006f14:	e5 d8 e4 18 	subge	r8,r2,r8
80006f18:	f1 d2 e5 18 	sublt	r8,r8,r2
80006f1c:	e5 d8 e5 02 	addlt	r2,r2,r8
80006f20:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006f24:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006f28:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006f2c:	f9 b8 05 00 	movlt	r8,0
80006f30:	40 4b       	lddsp	r11,sp[0x10]
80006f32:	12 0b       	add	r11,r9
80006f34:	50 08       	stdsp	sp[0x0],r8
80006f36:	50 4b       	stdsp	sp[0x10],r11
80006f38:	12 00       	add	r0,r9
80006f3a:	30 1b       	mov	r11,1
80006f3c:	0e 9c       	mov	r12,r7
80006f3e:	e0 a0 0a c9 	rcall	800084d0 <__i2b>
80006f42:	40 08       	lddsp	r8,sp[0x0]
80006f44:	18 94       	mov	r4,r12
80006f46:	40 4a       	lddsp	r10,sp[0x10]
80006f48:	58 05       	cp.w	r5,0
80006f4a:	5f 99       	srgt	r9
80006f4c:	58 0a       	cp.w	r10,0
80006f4e:	5f 9a       	srgt	r10
80006f50:	f5 e9 00 09 	and	r9,r10,r9
80006f54:	c0 80       	breq	80006f64 <_dtoa_r+0x7e4>
80006f56:	40 4c       	lddsp	r12,sp[0x10]
80006f58:	f8 05 0d 49 	min	r9,r12,r5
80006f5c:	12 1c       	sub	r12,r9
80006f5e:	12 10       	sub	r0,r9
80006f60:	50 4c       	stdsp	sp[0x10],r12
80006f62:	12 15       	sub	r5,r9
80006f64:	58 02       	cp.w	r2,0
80006f66:	e0 8a 00 27 	brle	80006fb4 <_dtoa_r+0x834>
80006f6a:	40 db       	lddsp	r11,sp[0x34]
80006f6c:	58 0b       	cp.w	r11,0
80006f6e:	c1 d0       	breq	80006fa8 <_dtoa_r+0x828>
80006f70:	58 08       	cp.w	r8,0
80006f72:	e0 8a 00 17 	brle	80006fa0 <_dtoa_r+0x820>
80006f76:	10 9a       	mov	r10,r8
80006f78:	50 08       	stdsp	sp[0x0],r8
80006f7a:	08 9b       	mov	r11,r4
80006f7c:	0e 9c       	mov	r12,r7
80006f7e:	e0 a0 0a ef 	rcall	8000855c <__pow5mult>
80006f82:	06 9a       	mov	r10,r3
80006f84:	18 9b       	mov	r11,r12
80006f86:	18 94       	mov	r4,r12
80006f88:	0e 9c       	mov	r12,r7
80006f8a:	e0 a0 0a 23 	rcall	800083d0 <__multiply>
80006f8e:	18 99       	mov	r9,r12
80006f90:	06 9b       	mov	r11,r3
80006f92:	50 19       	stdsp	sp[0x4],r9
80006f94:	0e 9c       	mov	r12,r7
80006f96:	e0 a0 08 cf 	rcall	80008134 <_Bfree>
80006f9a:	40 19       	lddsp	r9,sp[0x4]
80006f9c:	40 08       	lddsp	r8,sp[0x0]
80006f9e:	12 93       	mov	r3,r9
80006fa0:	e4 08 01 0a 	sub	r10,r2,r8
80006fa4:	c0 80       	breq	80006fb4 <_dtoa_r+0x834>
80006fa6:	c0 28       	rjmp	80006faa <_dtoa_r+0x82a>
80006fa8:	04 9a       	mov	r10,r2
80006faa:	06 9b       	mov	r11,r3
80006fac:	0e 9c       	mov	r12,r7
80006fae:	e0 a0 0a d7 	rcall	8000855c <__pow5mult>
80006fb2:	18 93       	mov	r3,r12
80006fb4:	30 1b       	mov	r11,1
80006fb6:	0e 9c       	mov	r12,r7
80006fb8:	e0 a0 0a 8c 	rcall	800084d0 <__i2b>
80006fbc:	41 1a       	lddsp	r10,sp[0x44]
80006fbe:	18 92       	mov	r2,r12
80006fc0:	58 0a       	cp.w	r10,0
80006fc2:	e0 8a 00 07 	brle	80006fd0 <_dtoa_r+0x850>
80006fc6:	18 9b       	mov	r11,r12
80006fc8:	0e 9c       	mov	r12,r7
80006fca:	e0 a0 0a c9 	rcall	8000855c <__pow5mult>
80006fce:	18 92       	mov	r2,r12
80006fd0:	40 c9       	lddsp	r9,sp[0x30]
80006fd2:	58 19       	cp.w	r9,1
80006fd4:	e0 89 00 14 	brgt	80006ffc <_dtoa_r+0x87c>
80006fd8:	40 38       	lddsp	r8,sp[0xc]
80006fda:	58 08       	cp.w	r8,0
80006fdc:	c1 01       	brne	80006ffc <_dtoa_r+0x87c>
80006fde:	40 29       	lddsp	r9,sp[0x8]
80006fe0:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006fe4:	c0 c1       	brne	80006ffc <_dtoa_r+0x87c>
80006fe6:	12 98       	mov	r8,r9
80006fe8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006fec:	c0 80       	breq	80006ffc <_dtoa_r+0x87c>
80006fee:	40 4c       	lddsp	r12,sp[0x10]
80006ff0:	30 1b       	mov	r11,1
80006ff2:	2f fc       	sub	r12,-1
80006ff4:	2f f0       	sub	r0,-1
80006ff6:	50 4c       	stdsp	sp[0x10],r12
80006ff8:	50 6b       	stdsp	sp[0x18],r11
80006ffa:	c0 38       	rjmp	80007000 <_dtoa_r+0x880>
80006ffc:	30 0a       	mov	r10,0
80006ffe:	50 6a       	stdsp	sp[0x18],r10
80007000:	41 19       	lddsp	r9,sp[0x44]
80007002:	58 09       	cp.w	r9,0
80007004:	c0 31       	brne	8000700a <_dtoa_r+0x88a>
80007006:	30 1c       	mov	r12,1
80007008:	c0 98       	rjmp	8000701a <_dtoa_r+0x89a>
8000700a:	64 48       	ld.w	r8,r2[0x10]
8000700c:	2f c8       	sub	r8,-4
8000700e:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80007012:	e0 a0 08 01 	rcall	80008014 <__hi0bits>
80007016:	f8 0c 11 20 	rsub	r12,r12,32
8000701a:	40 4b       	lddsp	r11,sp[0x10]
8000701c:	f8 0b 00 08 	add	r8,r12,r11
80007020:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007024:	c0 c0       	breq	8000703c <_dtoa_r+0x8bc>
80007026:	f0 08 11 20 	rsub	r8,r8,32
8000702a:	58 48       	cp.w	r8,4
8000702c:	e0 8a 00 06 	brle	80007038 <_dtoa_r+0x8b8>
80007030:	20 48       	sub	r8,4
80007032:	10 0b       	add	r11,r8
80007034:	50 4b       	stdsp	sp[0x10],r11
80007036:	c0 78       	rjmp	80007044 <_dtoa_r+0x8c4>
80007038:	58 48       	cp.w	r8,4
8000703a:	c0 70       	breq	80007048 <_dtoa_r+0x8c8>
8000703c:	40 4a       	lddsp	r10,sp[0x10]
8000703e:	2e 48       	sub	r8,-28
80007040:	10 0a       	add	r10,r8
80007042:	50 4a       	stdsp	sp[0x10],r10
80007044:	10 00       	add	r0,r8
80007046:	10 05       	add	r5,r8
80007048:	58 00       	cp.w	r0,0
8000704a:	e0 8a 00 08 	brle	8000705a <_dtoa_r+0x8da>
8000704e:	06 9b       	mov	r11,r3
80007050:	00 9a       	mov	r10,r0
80007052:	0e 9c       	mov	r12,r7
80007054:	e0 a0 09 7a 	rcall	80008348 <__lshift>
80007058:	18 93       	mov	r3,r12
8000705a:	40 49       	lddsp	r9,sp[0x10]
8000705c:	58 09       	cp.w	r9,0
8000705e:	e0 8a 00 08 	brle	8000706e <_dtoa_r+0x8ee>
80007062:	04 9b       	mov	r11,r2
80007064:	12 9a       	mov	r10,r9
80007066:	0e 9c       	mov	r12,r7
80007068:	e0 a0 09 70 	rcall	80008348 <__lshift>
8000706c:	18 92       	mov	r2,r12
8000706e:	41 48       	lddsp	r8,sp[0x50]
80007070:	58 08       	cp.w	r8,0
80007072:	c1 b0       	breq	800070a8 <_dtoa_r+0x928>
80007074:	04 9b       	mov	r11,r2
80007076:	06 9c       	mov	r12,r3
80007078:	e0 a0 08 45 	rcall	80008102 <__mcmp>
8000707c:	c1 64       	brge	800070a8 <_dtoa_r+0x928>
8000707e:	06 9b       	mov	r11,r3
80007080:	30 09       	mov	r9,0
80007082:	30 aa       	mov	r10,10
80007084:	0e 9c       	mov	r12,r7
80007086:	e0 a0 0a 2d 	rcall	800084e0 <__multadd>
8000708a:	20 16       	sub	r6,1
8000708c:	18 93       	mov	r3,r12
8000708e:	40 dc       	lddsp	r12,sp[0x34]
80007090:	58 0c       	cp.w	r12,0
80007092:	c0 31       	brne	80007098 <_dtoa_r+0x918>
80007094:	40 91       	lddsp	r1,sp[0x24]
80007096:	c0 98       	rjmp	800070a8 <_dtoa_r+0x928>
80007098:	08 9b       	mov	r11,r4
8000709a:	40 91       	lddsp	r1,sp[0x24]
8000709c:	30 09       	mov	r9,0
8000709e:	30 aa       	mov	r10,10
800070a0:	0e 9c       	mov	r12,r7
800070a2:	e0 a0 0a 1f 	rcall	800084e0 <__multadd>
800070a6:	18 94       	mov	r4,r12
800070a8:	58 01       	cp.w	r1,0
800070aa:	5f a9       	srle	r9
800070ac:	40 cb       	lddsp	r11,sp[0x30]
800070ae:	58 2b       	cp.w	r11,2
800070b0:	5f 98       	srgt	r8
800070b2:	f3 e8 00 08 	and	r8,r9,r8
800070b6:	c2 50       	breq	80007100 <_dtoa_r+0x980>
800070b8:	58 01       	cp.w	r1,0
800070ba:	c1 11       	brne	800070dc <_dtoa_r+0x95c>
800070bc:	04 9b       	mov	r11,r2
800070be:	02 99       	mov	r9,r1
800070c0:	30 5a       	mov	r10,5
800070c2:	0e 9c       	mov	r12,r7
800070c4:	e0 a0 0a 0e 	rcall	800084e0 <__multadd>
800070c8:	18 92       	mov	r2,r12
800070ca:	18 9b       	mov	r11,r12
800070cc:	06 9c       	mov	r12,r3
800070ce:	e0 a0 08 1a 	rcall	80008102 <__mcmp>
800070d2:	e0 89 00 0f 	brgt	800070f0 <_dtoa_r+0x970>
800070d6:	c0 38       	rjmp	800070dc <_dtoa_r+0x95c>
800070d8:	30 02       	mov	r2,0
800070da:	04 94       	mov	r4,r2
800070dc:	40 ea       	lddsp	r10,sp[0x38]
800070de:	30 09       	mov	r9,0
800070e0:	5c da       	com	r10
800070e2:	40 85       	lddsp	r5,sp[0x20]
800070e4:	50 6a       	stdsp	sp[0x18],r10
800070e6:	50 49       	stdsp	sp[0x10],r9
800070e8:	c0 f9       	rjmp	80007306 <_dtoa_r+0xb86>
800070ea:	08 92       	mov	r2,r4
800070ec:	40 66       	lddsp	r6,sp[0x18]
800070ee:	04 94       	mov	r4,r2
800070f0:	2f f6       	sub	r6,-1
800070f2:	50 66       	stdsp	sp[0x18],r6
800070f4:	33 18       	mov	r8,49
800070f6:	40 85       	lddsp	r5,sp[0x20]
800070f8:	0a c8       	st.b	r5++,r8
800070fa:	30 08       	mov	r8,0
800070fc:	50 48       	stdsp	sp[0x10],r8
800070fe:	c0 49       	rjmp	80007306 <_dtoa_r+0xb86>
80007100:	40 dc       	lddsp	r12,sp[0x34]
80007102:	58 0c       	cp.w	r12,0
80007104:	e0 80 00 b5 	breq	8000726e <_dtoa_r+0xaee>
80007108:	58 05       	cp.w	r5,0
8000710a:	e0 8a 00 08 	brle	8000711a <_dtoa_r+0x99a>
8000710e:	08 9b       	mov	r11,r4
80007110:	0a 9a       	mov	r10,r5
80007112:	0e 9c       	mov	r12,r7
80007114:	e0 a0 09 1a 	rcall	80008348 <__lshift>
80007118:	18 94       	mov	r4,r12
8000711a:	40 6b       	lddsp	r11,sp[0x18]
8000711c:	58 0b       	cp.w	r11,0
8000711e:	c0 31       	brne	80007124 <_dtoa_r+0x9a4>
80007120:	08 9c       	mov	r12,r4
80007122:	c1 38       	rjmp	80007148 <_dtoa_r+0x9c8>
80007124:	68 1b       	ld.w	r11,r4[0x4]
80007126:	0e 9c       	mov	r12,r7
80007128:	e0 a0 08 20 	rcall	80008168 <_Balloc>
8000712c:	68 4a       	ld.w	r10,r4[0x10]
8000712e:	18 95       	mov	r5,r12
80007130:	e8 cb ff f4 	sub	r11,r4,-12
80007134:	2f ea       	sub	r10,-2
80007136:	2f 4c       	sub	r12,-12
80007138:	a3 6a       	lsl	r10,0x2
8000713a:	fe b0 e8 3e 	rcall	800041b6 <memcpy>
8000713e:	0a 9b       	mov	r11,r5
80007140:	30 1a       	mov	r10,1
80007142:	0e 9c       	mov	r12,r7
80007144:	e0 a0 09 02 	rcall	80008348 <__lshift>
80007148:	50 44       	stdsp	sp[0x10],r4
8000714a:	40 3a       	lddsp	r10,sp[0xc]
8000714c:	30 19       	mov	r9,1
8000714e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80007152:	18 94       	mov	r4,r12
80007154:	50 da       	stdsp	sp[0x34],r10
80007156:	40 85       	lddsp	r5,sp[0x20]
80007158:	50 99       	stdsp	sp[0x24],r9
8000715a:	50 26       	stdsp	sp[0x8],r6
8000715c:	50 e1       	stdsp	sp[0x38],r1
8000715e:	04 9b       	mov	r11,r2
80007160:	06 9c       	mov	r12,r3
80007162:	fe b0 fa 7f 	rcall	80006660 <quorem>
80007166:	40 4b       	lddsp	r11,sp[0x10]
80007168:	f8 c0 ff d0 	sub	r0,r12,-48
8000716c:	06 9c       	mov	r12,r3
8000716e:	e0 a0 07 ca 	rcall	80008102 <__mcmp>
80007172:	08 9a       	mov	r10,r4
80007174:	50 6c       	stdsp	sp[0x18],r12
80007176:	04 9b       	mov	r11,r2
80007178:	0e 9c       	mov	r12,r7
8000717a:	e0 a0 08 7f 	rcall	80008278 <__mdiff>
8000717e:	18 91       	mov	r1,r12
80007180:	78 38       	ld.w	r8,r12[0xc]
80007182:	58 08       	cp.w	r8,0
80007184:	c0 30       	breq	8000718a <_dtoa_r+0xa0a>
80007186:	30 16       	mov	r6,1
80007188:	c0 68       	rjmp	80007194 <_dtoa_r+0xa14>
8000718a:	18 9b       	mov	r11,r12
8000718c:	06 9c       	mov	r12,r3
8000718e:	e0 a0 07 ba 	rcall	80008102 <__mcmp>
80007192:	18 96       	mov	r6,r12
80007194:	0e 9c       	mov	r12,r7
80007196:	02 9b       	mov	r11,r1
80007198:	e0 a0 07 ce 	rcall	80008134 <_Bfree>
8000719c:	40 cc       	lddsp	r12,sp[0x30]
8000719e:	ed ec 10 08 	or	r8,r6,r12
800071a2:	c0 d1       	brne	800071bc <_dtoa_r+0xa3c>
800071a4:	40 db       	lddsp	r11,sp[0x34]
800071a6:	58 0b       	cp.w	r11,0
800071a8:	c0 a1       	brne	800071bc <_dtoa_r+0xa3c>
800071aa:	40 26       	lddsp	r6,sp[0x8]
800071ac:	e0 40 00 39 	cp.w	r0,57
800071b0:	c3 00       	breq	80007210 <_dtoa_r+0xa90>
800071b2:	40 6a       	lddsp	r10,sp[0x18]
800071b4:	58 0a       	cp.w	r10,0
800071b6:	e0 89 00 24 	brgt	800071fe <_dtoa_r+0xa7e>
800071ba:	c2 f8       	rjmp	80007218 <_dtoa_r+0xa98>
800071bc:	40 69       	lddsp	r9,sp[0x18]
800071be:	58 09       	cp.w	r9,0
800071c0:	c0 85       	brlt	800071d0 <_dtoa_r+0xa50>
800071c2:	12 98       	mov	r8,r9
800071c4:	40 cc       	lddsp	r12,sp[0x30]
800071c6:	18 48       	or	r8,r12
800071c8:	c1 d1       	brne	80007202 <_dtoa_r+0xa82>
800071ca:	40 db       	lddsp	r11,sp[0x34]
800071cc:	58 0b       	cp.w	r11,0
800071ce:	c1 a1       	brne	80007202 <_dtoa_r+0xa82>
800071d0:	0c 99       	mov	r9,r6
800071d2:	40 26       	lddsp	r6,sp[0x8]
800071d4:	58 09       	cp.w	r9,0
800071d6:	e0 8a 00 21 	brle	80007218 <_dtoa_r+0xa98>
800071da:	06 9b       	mov	r11,r3
800071dc:	30 1a       	mov	r10,1
800071de:	0e 9c       	mov	r12,r7
800071e0:	e0 a0 08 b4 	rcall	80008348 <__lshift>
800071e4:	04 9b       	mov	r11,r2
800071e6:	18 93       	mov	r3,r12
800071e8:	e0 a0 07 8d 	rcall	80008102 <__mcmp>
800071ec:	e0 89 00 06 	brgt	800071f8 <_dtoa_r+0xa78>
800071f0:	c1 41       	brne	80007218 <_dtoa_r+0xa98>
800071f2:	ed b0 00 00 	bld	r0,0x0
800071f6:	c1 11       	brne	80007218 <_dtoa_r+0xa98>
800071f8:	e0 40 00 39 	cp.w	r0,57
800071fc:	c0 a0       	breq	80007210 <_dtoa_r+0xa90>
800071fe:	2f f0       	sub	r0,-1
80007200:	c0 c8       	rjmp	80007218 <_dtoa_r+0xa98>
80007202:	58 06       	cp.w	r6,0
80007204:	e0 8a 00 0c 	brle	8000721c <_dtoa_r+0xa9c>
80007208:	40 26       	lddsp	r6,sp[0x8]
8000720a:	e0 40 00 39 	cp.w	r0,57
8000720e:	c0 41       	brne	80007216 <_dtoa_r+0xa96>
80007210:	33 98       	mov	r8,57
80007212:	0a c8       	st.b	r5++,r8
80007214:	c6 78       	rjmp	800072e2 <_dtoa_r+0xb62>
80007216:	2f f0       	sub	r0,-1
80007218:	0a c0       	st.b	r5++,r0
8000721a:	c7 58       	rjmp	80007304 <_dtoa_r+0xb84>
8000721c:	0a c0       	st.b	r5++,r0
8000721e:	40 9a       	lddsp	r10,sp[0x24]
80007220:	40 e9       	lddsp	r9,sp[0x38]
80007222:	12 3a       	cp.w	r10,r9
80007224:	c4 30       	breq	800072aa <_dtoa_r+0xb2a>
80007226:	06 9b       	mov	r11,r3
80007228:	30 09       	mov	r9,0
8000722a:	30 aa       	mov	r10,10
8000722c:	0e 9c       	mov	r12,r7
8000722e:	e0 a0 09 59 	rcall	800084e0 <__multadd>
80007232:	40 48       	lddsp	r8,sp[0x10]
80007234:	18 93       	mov	r3,r12
80007236:	08 38       	cp.w	r8,r4
80007238:	c0 91       	brne	8000724a <_dtoa_r+0xaca>
8000723a:	10 9b       	mov	r11,r8
8000723c:	30 09       	mov	r9,0
8000723e:	30 aa       	mov	r10,10
80007240:	0e 9c       	mov	r12,r7
80007242:	e0 a0 09 4f 	rcall	800084e0 <__multadd>
80007246:	50 4c       	stdsp	sp[0x10],r12
80007248:	c0 e8       	rjmp	80007264 <_dtoa_r+0xae4>
8000724a:	40 4b       	lddsp	r11,sp[0x10]
8000724c:	30 09       	mov	r9,0
8000724e:	30 aa       	mov	r10,10
80007250:	0e 9c       	mov	r12,r7
80007252:	e0 a0 09 47 	rcall	800084e0 <__multadd>
80007256:	08 9b       	mov	r11,r4
80007258:	50 4c       	stdsp	sp[0x10],r12
8000725a:	30 09       	mov	r9,0
8000725c:	30 aa       	mov	r10,10
8000725e:	0e 9c       	mov	r12,r7
80007260:	e0 a0 09 40 	rcall	800084e0 <__multadd>
80007264:	18 94       	mov	r4,r12
80007266:	40 9c       	lddsp	r12,sp[0x24]
80007268:	2f fc       	sub	r12,-1
8000726a:	50 9c       	stdsp	sp[0x24],r12
8000726c:	c7 9b       	rjmp	8000715e <_dtoa_r+0x9de>
8000726e:	30 18       	mov	r8,1
80007270:	06 90       	mov	r0,r3
80007272:	40 85       	lddsp	r5,sp[0x20]
80007274:	08 93       	mov	r3,r4
80007276:	0c 94       	mov	r4,r6
80007278:	10 96       	mov	r6,r8
8000727a:	04 9b       	mov	r11,r2
8000727c:	00 9c       	mov	r12,r0
8000727e:	fe b0 f9 f1 	rcall	80006660 <quorem>
80007282:	2d 0c       	sub	r12,-48
80007284:	0a cc       	st.b	r5++,r12
80007286:	02 36       	cp.w	r6,r1
80007288:	c0 a4       	brge	8000729c <_dtoa_r+0xb1c>
8000728a:	00 9b       	mov	r11,r0
8000728c:	30 09       	mov	r9,0
8000728e:	30 aa       	mov	r10,10
80007290:	0e 9c       	mov	r12,r7
80007292:	2f f6       	sub	r6,-1
80007294:	e0 a0 09 26 	rcall	800084e0 <__multadd>
80007298:	18 90       	mov	r0,r12
8000729a:	cf 0b       	rjmp	8000727a <_dtoa_r+0xafa>
8000729c:	08 96       	mov	r6,r4
8000729e:	30 0b       	mov	r11,0
800072a0:	06 94       	mov	r4,r3
800072a2:	50 4b       	stdsp	sp[0x10],r11
800072a4:	00 93       	mov	r3,r0
800072a6:	18 90       	mov	r0,r12
800072a8:	c0 28       	rjmp	800072ac <_dtoa_r+0xb2c>
800072aa:	40 26       	lddsp	r6,sp[0x8]
800072ac:	06 9b       	mov	r11,r3
800072ae:	30 1a       	mov	r10,1
800072b0:	0e 9c       	mov	r12,r7
800072b2:	e0 a0 08 4b 	rcall	80008348 <__lshift>
800072b6:	04 9b       	mov	r11,r2
800072b8:	18 93       	mov	r3,r12
800072ba:	e0 a0 07 24 	rcall	80008102 <__mcmp>
800072be:	e0 89 00 12 	brgt	800072e2 <_dtoa_r+0xb62>
800072c2:	c1 b1       	brne	800072f8 <_dtoa_r+0xb78>
800072c4:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800072c8:	c0 d1       	brne	800072e2 <_dtoa_r+0xb62>
800072ca:	c1 78       	rjmp	800072f8 <_dtoa_r+0xb78>
800072cc:	40 89       	lddsp	r9,sp[0x20]
800072ce:	12 38       	cp.w	r8,r9
800072d0:	c0 30       	breq	800072d6 <_dtoa_r+0xb56>
800072d2:	10 95       	mov	r5,r8
800072d4:	c0 88       	rjmp	800072e4 <_dtoa_r+0xb64>
800072d6:	2f f6       	sub	r6,-1
800072d8:	50 66       	stdsp	sp[0x18],r6
800072da:	33 18       	mov	r8,49
800072dc:	40 8c       	lddsp	r12,sp[0x20]
800072de:	b8 88       	st.b	r12[0x0],r8
800072e0:	c1 38       	rjmp	80007306 <_dtoa_r+0xb86>
800072e2:	33 9a       	mov	r10,57
800072e4:	0a 98       	mov	r8,r5
800072e6:	11 79       	ld.ub	r9,--r8
800072e8:	f4 09 18 00 	cp.b	r9,r10
800072ec:	cf 00       	breq	800072cc <_dtoa_r+0xb4c>
800072ee:	2f f9       	sub	r9,-1
800072f0:	b0 89       	st.b	r8[0x0],r9
800072f2:	c0 98       	rjmp	80007304 <_dtoa_r+0xb84>
800072f4:	10 95       	mov	r5,r8
800072f6:	c0 28       	rjmp	800072fa <_dtoa_r+0xb7a>
800072f8:	33 09       	mov	r9,48
800072fa:	0a 98       	mov	r8,r5
800072fc:	11 7a       	ld.ub	r10,--r8
800072fe:	f2 0a 18 00 	cp.b	r10,r9
80007302:	cf 90       	breq	800072f4 <_dtoa_r+0xb74>
80007304:	50 66       	stdsp	sp[0x18],r6
80007306:	04 9b       	mov	r11,r2
80007308:	0e 9c       	mov	r12,r7
8000730a:	e0 a0 07 15 	rcall	80008134 <_Bfree>
8000730e:	58 04       	cp.w	r4,0
80007310:	c1 20       	breq	80007334 <_dtoa_r+0xbb4>
80007312:	40 4b       	lddsp	r11,sp[0x10]
80007314:	08 3b       	cp.w	r11,r4
80007316:	5f 19       	srne	r9
80007318:	58 0b       	cp.w	r11,0
8000731a:	5f 18       	srne	r8
8000731c:	f3 e8 00 08 	and	r8,r9,r8
80007320:	c0 40       	breq	80007328 <_dtoa_r+0xba8>
80007322:	0e 9c       	mov	r12,r7
80007324:	e0 a0 07 08 	rcall	80008134 <_Bfree>
80007328:	08 9b       	mov	r11,r4
8000732a:	0e 9c       	mov	r12,r7
8000732c:	e0 a0 07 04 	rcall	80008134 <_Bfree>
80007330:	c0 28       	rjmp	80007334 <_dtoa_r+0xbb4>
80007332:	50 66       	stdsp	sp[0x18],r6
80007334:	0e 9c       	mov	r12,r7
80007336:	06 9b       	mov	r11,r3
80007338:	e0 a0 06 fe 	rcall	80008134 <_Bfree>
8000733c:	30 08       	mov	r8,0
8000733e:	aa 88       	st.b	r5[0x0],r8
80007340:	40 68       	lddsp	r8,sp[0x18]
80007342:	41 5a       	lddsp	r10,sp[0x54]
80007344:	2f f8       	sub	r8,-1
80007346:	41 29       	lddsp	r9,sp[0x48]
80007348:	95 08       	st.w	r10[0x0],r8
8000734a:	40 8c       	lddsp	r12,sp[0x20]
8000734c:	58 09       	cp.w	r9,0
8000734e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80007352:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80007356:	2e 6d       	sub	sp,-104
80007358:	d8 32       	popm	r0-r7,pc
8000735a:	d7 03       	nop

8000735c <_fflush_r>:
8000735c:	d4 21       	pushm	r4-r7,lr
8000735e:	16 97       	mov	r7,r11
80007360:	18 96       	mov	r6,r12
80007362:	76 48       	ld.w	r8,r11[0x10]
80007364:	58 08       	cp.w	r8,0
80007366:	c7 f0       	breq	80007464 <_fflush_r+0x108>
80007368:	58 0c       	cp.w	r12,0
8000736a:	c0 50       	breq	80007374 <_fflush_r+0x18>
8000736c:	78 68       	ld.w	r8,r12[0x18]
8000736e:	58 08       	cp.w	r8,0
80007370:	c0 21       	brne	80007374 <_fflush_r+0x18>
80007372:	cc dc       	rcall	8000750c <__sinit>
80007374:	fe c8 d1 b8 	sub	r8,pc,-11848
80007378:	10 37       	cp.w	r7,r8
8000737a:	c0 31       	brne	80007380 <_fflush_r+0x24>
8000737c:	6c 07       	ld.w	r7,r6[0x0]
8000737e:	c0 c8       	rjmp	80007396 <_fflush_r+0x3a>
80007380:	fe c8 d1 a4 	sub	r8,pc,-11868
80007384:	10 37       	cp.w	r7,r8
80007386:	c0 31       	brne	8000738c <_fflush_r+0x30>
80007388:	6c 17       	ld.w	r7,r6[0x4]
8000738a:	c0 68       	rjmp	80007396 <_fflush_r+0x3a>
8000738c:	fe c8 d1 90 	sub	r8,pc,-11888
80007390:	10 37       	cp.w	r7,r8
80007392:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007396:	8e 6a       	ld.sh	r10,r7[0xc]
80007398:	14 98       	mov	r8,r10
8000739a:	ed ba 00 03 	bld	r10,0x3
8000739e:	c4 20       	breq	80007422 <_fflush_r+0xc6>
800073a0:	ab ba       	sbr	r10,0xb
800073a2:	ae 6a       	st.h	r7[0xc],r10
800073a4:	6e 18       	ld.w	r8,r7[0x4]
800073a6:	58 08       	cp.w	r8,0
800073a8:	e0 89 00 06 	brgt	800073b4 <_fflush_r+0x58>
800073ac:	6f 08       	ld.w	r8,r7[0x40]
800073ae:	58 08       	cp.w	r8,0
800073b0:	e0 8a 00 5a 	brle	80007464 <_fflush_r+0x108>
800073b4:	6e b8       	ld.w	r8,r7[0x2c]
800073b6:	58 08       	cp.w	r8,0
800073b8:	c5 60       	breq	80007464 <_fflush_r+0x108>
800073ba:	e2 1a 10 00 	andl	r10,0x1000,COH
800073be:	c0 30       	breq	800073c4 <_fflush_r+0x68>
800073c0:	6f 55       	ld.w	r5,r7[0x54]
800073c2:	c0 f8       	rjmp	800073e0 <_fflush_r+0x84>
800073c4:	30 19       	mov	r9,1
800073c6:	6e 8b       	ld.w	r11,r7[0x20]
800073c8:	0c 9c       	mov	r12,r6
800073ca:	5d 18       	icall	r8
800073cc:	18 95       	mov	r5,r12
800073ce:	5b fc       	cp.w	r12,-1
800073d0:	c0 81       	brne	800073e0 <_fflush_r+0x84>
800073d2:	6c 38       	ld.w	r8,r6[0xc]
800073d4:	59 d8       	cp.w	r8,29
800073d6:	c4 70       	breq	80007464 <_fflush_r+0x108>
800073d8:	8e 68       	ld.sh	r8,r7[0xc]
800073da:	a7 a8       	sbr	r8,0x6
800073dc:	ae 68       	st.h	r7[0xc],r8
800073de:	d8 22       	popm	r4-r7,pc
800073e0:	8e 68       	ld.sh	r8,r7[0xc]
800073e2:	ed b8 00 02 	bld	r8,0x2
800073e6:	c0 91       	brne	800073f8 <_fflush_r+0x9c>
800073e8:	6e 18       	ld.w	r8,r7[0x4]
800073ea:	10 15       	sub	r5,r8
800073ec:	6e d8       	ld.w	r8,r7[0x34]
800073ee:	58 08       	cp.w	r8,0
800073f0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800073f4:	eb d8 e1 15 	subne	r5,r5,r8
800073f8:	6e b8       	ld.w	r8,r7[0x2c]
800073fa:	0c 9c       	mov	r12,r6
800073fc:	30 09       	mov	r9,0
800073fe:	0a 9a       	mov	r10,r5
80007400:	6e 8b       	ld.w	r11,r7[0x20]
80007402:	5d 18       	icall	r8
80007404:	8e 68       	ld.sh	r8,r7[0xc]
80007406:	0a 3c       	cp.w	r12,r5
80007408:	c2 61       	brne	80007454 <_fflush_r+0xf8>
8000740a:	ab d8       	cbr	r8,0xb
8000740c:	30 0c       	mov	r12,0
8000740e:	6e 49       	ld.w	r9,r7[0x10]
80007410:	ae 68       	st.h	r7[0xc],r8
80007412:	8f 1c       	st.w	r7[0x4],r12
80007414:	8f 09       	st.w	r7[0x0],r9
80007416:	ed b8 00 0c 	bld	r8,0xc
8000741a:	c2 51       	brne	80007464 <_fflush_r+0x108>
8000741c:	ef 45 00 54 	st.w	r7[84],r5
80007420:	d8 22       	popm	r4-r7,pc
80007422:	6e 45       	ld.w	r5,r7[0x10]
80007424:	58 05       	cp.w	r5,0
80007426:	c1 f0       	breq	80007464 <_fflush_r+0x108>
80007428:	6e 04       	ld.w	r4,r7[0x0]
8000742a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000742e:	8f 05       	st.w	r7[0x0],r5
80007430:	f9 b8 01 00 	movne	r8,0
80007434:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007438:	0a 14       	sub	r4,r5
8000743a:	8f 28       	st.w	r7[0x8],r8
8000743c:	c1 18       	rjmp	8000745e <_fflush_r+0x102>
8000743e:	08 99       	mov	r9,r4
80007440:	0a 9a       	mov	r10,r5
80007442:	6e a8       	ld.w	r8,r7[0x28]
80007444:	6e 8b       	ld.w	r11,r7[0x20]
80007446:	0c 9c       	mov	r12,r6
80007448:	5d 18       	icall	r8
8000744a:	18 14       	sub	r4,r12
8000744c:	58 0c       	cp.w	r12,0
8000744e:	e0 89 00 07 	brgt	8000745c <_fflush_r+0x100>
80007452:	8e 68       	ld.sh	r8,r7[0xc]
80007454:	a7 a8       	sbr	r8,0x6
80007456:	3f fc       	mov	r12,-1
80007458:	ae 68       	st.h	r7[0xc],r8
8000745a:	d8 22       	popm	r4-r7,pc
8000745c:	18 05       	add	r5,r12
8000745e:	58 04       	cp.w	r4,0
80007460:	fe 99 ff ef 	brgt	8000743e <_fflush_r+0xe2>
80007464:	d8 2a       	popm	r4-r7,pc,r12=0
80007466:	d7 03       	nop

80007468 <__sfp_lock_acquire>:
80007468:	5e fc       	retal	r12

8000746a <__sfp_lock_release>:
8000746a:	5e fc       	retal	r12

8000746c <_cleanup_r>:
8000746c:	d4 01       	pushm	lr
8000746e:	fe cb e8 7a 	sub	r11,pc,-6022
80007472:	e0 a0 02 fd 	rcall	80007a6c <_fwalk>
80007476:	d8 02       	popm	pc

80007478 <__sfmoreglue>:
80007478:	d4 21       	pushm	r4-r7,lr
8000747a:	16 95       	mov	r5,r11
8000747c:	f6 06 10 5c 	mul	r6,r11,92
80007480:	ec cb ff f4 	sub	r11,r6,-12
80007484:	e0 a0 03 84 	rcall	80007b8c <_malloc_r>
80007488:	18 97       	mov	r7,r12
8000748a:	c0 90       	breq	8000749c <__sfmoreglue+0x24>
8000748c:	99 15       	st.w	r12[0x4],r5
8000748e:	30 0b       	mov	r11,0
80007490:	2f 4c       	sub	r12,-12
80007492:	0c 9a       	mov	r10,r6
80007494:	8f 2c       	st.w	r7[0x8],r12
80007496:	8f 0b       	st.w	r7[0x0],r11
80007498:	fe b0 e7 33 	rcall	800042fe <memset>
8000749c:	0e 9c       	mov	r12,r7
8000749e:	d8 22       	popm	r4-r7,pc

800074a0 <__sfp>:
800074a0:	d4 21       	pushm	r4-r7,lr
800074a2:	fe c8 d2 82 	sub	r8,pc,-11646
800074a6:	18 96       	mov	r6,r12
800074a8:	70 07       	ld.w	r7,r8[0x0]
800074aa:	6e 68       	ld.w	r8,r7[0x18]
800074ac:	58 08       	cp.w	r8,0
800074ae:	c0 31       	brne	800074b4 <__sfp+0x14>
800074b0:	0e 9c       	mov	r12,r7
800074b2:	c2 dc       	rcall	8000750c <__sinit>
800074b4:	ee c7 ff 28 	sub	r7,r7,-216
800074b8:	30 05       	mov	r5,0
800074ba:	6e 2c       	ld.w	r12,r7[0x8]
800074bc:	6e 18       	ld.w	r8,r7[0x4]
800074be:	c0 68       	rjmp	800074ca <__sfp+0x2a>
800074c0:	98 69       	ld.sh	r9,r12[0xc]
800074c2:	ea 09 19 00 	cp.h	r9,r5
800074c6:	c1 10       	breq	800074e8 <__sfp+0x48>
800074c8:	2a 4c       	sub	r12,-92
800074ca:	20 18       	sub	r8,1
800074cc:	cf a7       	brpl	800074c0 <__sfp+0x20>
800074ce:	6e 08       	ld.w	r8,r7[0x0]
800074d0:	58 08       	cp.w	r8,0
800074d2:	c0 61       	brne	800074de <__sfp+0x3e>
800074d4:	30 4b       	mov	r11,4
800074d6:	0c 9c       	mov	r12,r6
800074d8:	cd 0f       	rcall	80007478 <__sfmoreglue>
800074da:	8f 0c       	st.w	r7[0x0],r12
800074dc:	c0 30       	breq	800074e2 <__sfp+0x42>
800074de:	6e 07       	ld.w	r7,r7[0x0]
800074e0:	ce db       	rjmp	800074ba <__sfp+0x1a>
800074e2:	30 c8       	mov	r8,12
800074e4:	8d 38       	st.w	r6[0xc],r8
800074e6:	d8 22       	popm	r4-r7,pc
800074e8:	30 08       	mov	r8,0
800074ea:	f9 48 00 4c 	st.w	r12[76],r8
800074ee:	99 08       	st.w	r12[0x0],r8
800074f0:	99 28       	st.w	r12[0x8],r8
800074f2:	99 18       	st.w	r12[0x4],r8
800074f4:	99 48       	st.w	r12[0x10],r8
800074f6:	99 58       	st.w	r12[0x14],r8
800074f8:	99 68       	st.w	r12[0x18],r8
800074fa:	99 d8       	st.w	r12[0x34],r8
800074fc:	99 e8       	st.w	r12[0x38],r8
800074fe:	f9 48 00 48 	st.w	r12[72],r8
80007502:	3f f8       	mov	r8,-1
80007504:	b8 78       	st.h	r12[0xe],r8
80007506:	30 18       	mov	r8,1
80007508:	b8 68       	st.h	r12[0xc],r8
8000750a:	d8 22       	popm	r4-r7,pc

8000750c <__sinit>:
8000750c:	d4 21       	pushm	r4-r7,lr
8000750e:	18 96       	mov	r6,r12
80007510:	78 67       	ld.w	r7,r12[0x18]
80007512:	58 07       	cp.w	r7,0
80007514:	c4 91       	brne	800075a6 <__sinit+0x9a>
80007516:	fe c8 00 aa 	sub	r8,pc,170
8000751a:	30 15       	mov	r5,1
8000751c:	99 a8       	st.w	r12[0x28],r8
8000751e:	f9 47 00 d8 	st.w	r12[216],r7
80007522:	f9 47 00 dc 	st.w	r12[220],r7
80007526:	f9 47 00 e0 	st.w	r12[224],r7
8000752a:	99 65       	st.w	r12[0x18],r5
8000752c:	cb af       	rcall	800074a0 <__sfp>
8000752e:	8d 0c       	st.w	r6[0x0],r12
80007530:	0c 9c       	mov	r12,r6
80007532:	cb 7f       	rcall	800074a0 <__sfp>
80007534:	8d 1c       	st.w	r6[0x4],r12
80007536:	0c 9c       	mov	r12,r6
80007538:	cb 4f       	rcall	800074a0 <__sfp>
8000753a:	6c 09       	ld.w	r9,r6[0x0]
8000753c:	30 48       	mov	r8,4
8000753e:	93 07       	st.w	r9[0x0],r7
80007540:	b2 68       	st.h	r9[0xc],r8
80007542:	93 17       	st.w	r9[0x4],r7
80007544:	93 27       	st.w	r9[0x8],r7
80007546:	6c 18       	ld.w	r8,r6[0x4]
80007548:	b2 77       	st.h	r9[0xe],r7
8000754a:	93 47       	st.w	r9[0x10],r7
8000754c:	93 57       	st.w	r9[0x14],r7
8000754e:	93 67       	st.w	r9[0x18],r7
80007550:	93 89       	st.w	r9[0x20],r9
80007552:	91 07       	st.w	r8[0x0],r7
80007554:	91 17       	st.w	r8[0x4],r7
80007556:	91 27       	st.w	r8[0x8],r7
80007558:	fe ce eb f4 	sub	lr,pc,-5132
8000755c:	fe cb ec 24 	sub	r11,pc,-5084
80007560:	93 9e       	st.w	r9[0x24],lr
80007562:	93 ab       	st.w	r9[0x28],r11
80007564:	fe ca ec 4c 	sub	r10,pc,-5044
80007568:	fe c4 ec 58 	sub	r4,pc,-5032
8000756c:	93 ba       	st.w	r9[0x2c],r10
8000756e:	93 c4       	st.w	r9[0x30],r4
80007570:	30 99       	mov	r9,9
80007572:	b0 69       	st.h	r8[0xc],r9
80007574:	b0 75       	st.h	r8[0xe],r5
80007576:	91 c4       	st.w	r8[0x30],r4
80007578:	91 47       	st.w	r8[0x10],r7
8000757a:	91 57       	st.w	r8[0x14],r7
8000757c:	91 67       	st.w	r8[0x18],r7
8000757e:	91 88       	st.w	r8[0x20],r8
80007580:	91 9e       	st.w	r8[0x24],lr
80007582:	91 ab       	st.w	r8[0x28],r11
80007584:	91 ba       	st.w	r8[0x2c],r10
80007586:	8d 2c       	st.w	r6[0x8],r12
80007588:	31 28       	mov	r8,18
8000758a:	99 07       	st.w	r12[0x0],r7
8000758c:	b8 68       	st.h	r12[0xc],r8
8000758e:	99 17       	st.w	r12[0x4],r7
80007590:	99 27       	st.w	r12[0x8],r7
80007592:	30 28       	mov	r8,2
80007594:	b8 78       	st.h	r12[0xe],r8
80007596:	99 c4       	st.w	r12[0x30],r4
80007598:	99 67       	st.w	r12[0x18],r7
8000759a:	99 9e       	st.w	r12[0x24],lr
8000759c:	99 ab       	st.w	r12[0x28],r11
8000759e:	99 ba       	st.w	r12[0x2c],r10
800075a0:	99 47       	st.w	r12[0x10],r7
800075a2:	99 57       	st.w	r12[0x14],r7
800075a4:	99 8c       	st.w	r12[0x20],r12
800075a6:	d8 22       	popm	r4-r7,pc

800075a8 <_malloc_trim_r>:
800075a8:	d4 21       	pushm	r4-r7,lr
800075aa:	16 95       	mov	r5,r11
800075ac:	18 97       	mov	r7,r12
800075ae:	e0 a0 05 31 	rcall	80008010 <__malloc_lock>
800075b2:	e0 64 01 1c 	mov	r4,284
800075b6:	68 28       	ld.w	r8,r4[0x8]
800075b8:	70 16       	ld.w	r6,r8[0x4]
800075ba:	e0 16 ff fc 	andl	r6,0xfffc
800075be:	ec c8 ff 91 	sub	r8,r6,-111
800075c2:	f0 05 01 05 	sub	r5,r8,r5
800075c6:	e0 15 ff 80 	andl	r5,0xff80
800075ca:	ea c5 00 80 	sub	r5,r5,128
800075ce:	e0 45 00 7f 	cp.w	r5,127
800075d2:	e0 8a 00 25 	brle	8000761c <_malloc_trim_r+0x74>
800075d6:	30 0b       	mov	r11,0
800075d8:	0e 9c       	mov	r12,r7
800075da:	e0 a0 09 8b 	rcall	800088f0 <_sbrk_r>
800075de:	68 28       	ld.w	r8,r4[0x8]
800075e0:	0c 08       	add	r8,r6
800075e2:	10 3c       	cp.w	r12,r8
800075e4:	c1 c1       	brne	8000761c <_malloc_trim_r+0x74>
800075e6:	ea 0b 11 00 	rsub	r11,r5,0
800075ea:	0e 9c       	mov	r12,r7
800075ec:	e0 a0 09 82 	rcall	800088f0 <_sbrk_r>
800075f0:	5b fc       	cp.w	r12,-1
800075f2:	c1 91       	brne	80007624 <_malloc_trim_r+0x7c>
800075f4:	30 0b       	mov	r11,0
800075f6:	0e 9c       	mov	r12,r7
800075f8:	e0 a0 09 7c 	rcall	800088f0 <_sbrk_r>
800075fc:	68 28       	ld.w	r8,r4[0x8]
800075fe:	f8 08 01 09 	sub	r9,r12,r8
80007602:	58 f9       	cp.w	r9,15
80007604:	e0 8a 00 0c 	brle	8000761c <_malloc_trim_r+0x74>
80007608:	a1 a9       	sbr	r9,0x0
8000760a:	91 19       	st.w	r8[0x4],r9
8000760c:	e0 68 05 28 	mov	r8,1320
80007610:	70 09       	ld.w	r9,r8[0x0]
80007612:	e0 68 06 48 	mov	r8,1608
80007616:	f8 09 01 09 	sub	r9,r12,r9
8000761a:	91 09       	st.w	r8[0x0],r9
8000761c:	0e 9c       	mov	r12,r7
8000761e:	e0 a0 04 fa 	rcall	80008012 <__malloc_unlock>
80007622:	d8 2a       	popm	r4-r7,pc,r12=0
80007624:	68 28       	ld.w	r8,r4[0x8]
80007626:	0a 16       	sub	r6,r5
80007628:	a1 a6       	sbr	r6,0x0
8000762a:	91 16       	st.w	r8[0x4],r6
8000762c:	e0 68 06 48 	mov	r8,1608
80007630:	70 09       	ld.w	r9,r8[0x0]
80007632:	0a 19       	sub	r9,r5
80007634:	0e 9c       	mov	r12,r7
80007636:	91 09       	st.w	r8[0x0],r9
80007638:	e0 a0 04 ed 	rcall	80008012 <__malloc_unlock>
8000763c:	da 2a       	popm	r4-r7,pc,r12=1
8000763e:	d7 03       	nop

80007640 <_free_r>:
80007640:	d4 21       	pushm	r4-r7,lr
80007642:	16 96       	mov	r6,r11
80007644:	18 97       	mov	r7,r12
80007646:	58 0b       	cp.w	r11,0
80007648:	e0 80 00 c0 	breq	800077c8 <_free_r+0x188>
8000764c:	e0 a0 04 e2 	rcall	80008010 <__malloc_lock>
80007650:	20 86       	sub	r6,8
80007652:	e0 6a 01 1c 	mov	r10,284
80007656:	6c 18       	ld.w	r8,r6[0x4]
80007658:	74 2e       	ld.w	lr,r10[0x8]
8000765a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000765e:	a1 c8       	cbr	r8,0x0
80007660:	ec 08 00 09 	add	r9,r6,r8
80007664:	72 1b       	ld.w	r11,r9[0x4]
80007666:	e0 1b ff fc 	andl	r11,0xfffc
8000766a:	1c 39       	cp.w	r9,lr
8000766c:	c1 e1       	brne	800076a8 <_free_r+0x68>
8000766e:	f6 08 00 08 	add	r8,r11,r8
80007672:	58 0c       	cp.w	r12,0
80007674:	c0 81       	brne	80007684 <_free_r+0x44>
80007676:	6c 09       	ld.w	r9,r6[0x0]
80007678:	12 16       	sub	r6,r9
8000767a:	12 08       	add	r8,r9
8000767c:	6c 3b       	ld.w	r11,r6[0xc]
8000767e:	6c 29       	ld.w	r9,r6[0x8]
80007680:	97 29       	st.w	r11[0x8],r9
80007682:	93 3b       	st.w	r9[0xc],r11
80007684:	10 99       	mov	r9,r8
80007686:	95 26       	st.w	r10[0x8],r6
80007688:	a1 a9       	sbr	r9,0x0
8000768a:	8d 19       	st.w	r6[0x4],r9
8000768c:	e0 69 05 24 	mov	r9,1316
80007690:	72 09       	ld.w	r9,r9[0x0]
80007692:	12 38       	cp.w	r8,r9
80007694:	c0 63       	brcs	800076a0 <_free_r+0x60>
80007696:	e0 68 06 44 	mov	r8,1604
8000769a:	0e 9c       	mov	r12,r7
8000769c:	70 0b       	ld.w	r11,r8[0x0]
8000769e:	c8 5f       	rcall	800075a8 <_malloc_trim_r>
800076a0:	0e 9c       	mov	r12,r7
800076a2:	e0 a0 04 b8 	rcall	80008012 <__malloc_unlock>
800076a6:	d8 22       	popm	r4-r7,pc
800076a8:	93 1b       	st.w	r9[0x4],r11
800076aa:	58 0c       	cp.w	r12,0
800076ac:	c0 30       	breq	800076b2 <_free_r+0x72>
800076ae:	30 0c       	mov	r12,0
800076b0:	c1 08       	rjmp	800076d0 <_free_r+0x90>
800076b2:	6c 0e       	ld.w	lr,r6[0x0]
800076b4:	f4 c5 ff f8 	sub	r5,r10,-8
800076b8:	1c 16       	sub	r6,lr
800076ba:	1c 08       	add	r8,lr
800076bc:	6c 2e       	ld.w	lr,r6[0x8]
800076be:	0a 3e       	cp.w	lr,r5
800076c0:	f9 bc 00 01 	moveq	r12,1
800076c4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800076c8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800076cc:	fd f5 1a 03 	st.wne	lr[0xc],r5
800076d0:	f2 0b 00 0e 	add	lr,r9,r11
800076d4:	7c 1e       	ld.w	lr,lr[0x4]
800076d6:	ed be 00 00 	bld	lr,0x0
800076da:	c1 40       	breq	80007702 <_free_r+0xc2>
800076dc:	16 08       	add	r8,r11
800076de:	58 0c       	cp.w	r12,0
800076e0:	c0 d1       	brne	800076fa <_free_r+0xba>
800076e2:	e0 6e 01 1c 	mov	lr,284
800076e6:	72 2b       	ld.w	r11,r9[0x8]
800076e8:	2f 8e       	sub	lr,-8
800076ea:	1c 3b       	cp.w	r11,lr
800076ec:	c0 71       	brne	800076fa <_free_r+0xba>
800076ee:	97 36       	st.w	r11[0xc],r6
800076f0:	97 26       	st.w	r11[0x8],r6
800076f2:	8d 2b       	st.w	r6[0x8],r11
800076f4:	8d 3b       	st.w	r6[0xc],r11
800076f6:	30 1c       	mov	r12,1
800076f8:	c0 58       	rjmp	80007702 <_free_r+0xc2>
800076fa:	72 2b       	ld.w	r11,r9[0x8]
800076fc:	72 39       	ld.w	r9,r9[0xc]
800076fe:	93 2b       	st.w	r9[0x8],r11
80007700:	97 39       	st.w	r11[0xc],r9
80007702:	10 99       	mov	r9,r8
80007704:	ec 08 09 08 	st.w	r6[r8],r8
80007708:	a1 a9       	sbr	r9,0x0
8000770a:	8d 19       	st.w	r6[0x4],r9
8000770c:	58 0c       	cp.w	r12,0
8000770e:	c5 a1       	brne	800077c2 <_free_r+0x182>
80007710:	e0 48 01 ff 	cp.w	r8,511
80007714:	e0 8b 00 13 	brhi	8000773a <_free_r+0xfa>
80007718:	a3 98       	lsr	r8,0x3
8000771a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000771e:	72 2b       	ld.w	r11,r9[0x8]
80007720:	8d 39       	st.w	r6[0xc],r9
80007722:	8d 2b       	st.w	r6[0x8],r11
80007724:	97 36       	st.w	r11[0xc],r6
80007726:	93 26       	st.w	r9[0x8],r6
80007728:	a3 48       	asr	r8,0x2
8000772a:	74 19       	ld.w	r9,r10[0x4]
8000772c:	30 1b       	mov	r11,1
8000772e:	f6 08 09 48 	lsl	r8,r11,r8
80007732:	f3 e8 10 08 	or	r8,r9,r8
80007736:	95 18       	st.w	r10[0x4],r8
80007738:	c4 58       	rjmp	800077c2 <_free_r+0x182>
8000773a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000773e:	58 4b       	cp.w	r11,4
80007740:	e0 8b 00 06 	brhi	8000774c <_free_r+0x10c>
80007744:	f0 0b 16 06 	lsr	r11,r8,0x6
80007748:	2c 8b       	sub	r11,-56
8000774a:	c2 08       	rjmp	8000778a <_free_r+0x14a>
8000774c:	59 4b       	cp.w	r11,20
8000774e:	e0 8b 00 04 	brhi	80007756 <_free_r+0x116>
80007752:	2a 5b       	sub	r11,-91
80007754:	c1 b8       	rjmp	8000778a <_free_r+0x14a>
80007756:	e0 4b 00 54 	cp.w	r11,84
8000775a:	e0 8b 00 06 	brhi	80007766 <_free_r+0x126>
8000775e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007762:	29 2b       	sub	r11,-110
80007764:	c1 38       	rjmp	8000778a <_free_r+0x14a>
80007766:	e0 4b 01 54 	cp.w	r11,340
8000776a:	e0 8b 00 06 	brhi	80007776 <_free_r+0x136>
8000776e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007772:	28 9b       	sub	r11,-119
80007774:	c0 b8       	rjmp	8000778a <_free_r+0x14a>
80007776:	e0 4b 05 54 	cp.w	r11,1364
8000777a:	e0 88 00 05 	brls	80007784 <_free_r+0x144>
8000777e:	37 eb       	mov	r11,126
80007780:	c0 58       	rjmp	8000778a <_free_r+0x14a>
80007782:	d7 03       	nop
80007784:	f0 0b 16 12 	lsr	r11,r8,0x12
80007788:	28 4b       	sub	r11,-124
8000778a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000778e:	78 29       	ld.w	r9,r12[0x8]
80007790:	18 39       	cp.w	r9,r12
80007792:	c0 e1       	brne	800077ae <_free_r+0x16e>
80007794:	74 18       	ld.w	r8,r10[0x4]
80007796:	a3 4b       	asr	r11,0x2
80007798:	30 1c       	mov	r12,1
8000779a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000779e:	f1 eb 10 0b 	or	r11,r8,r11
800077a2:	12 98       	mov	r8,r9
800077a4:	95 1b       	st.w	r10[0x4],r11
800077a6:	c0 a8       	rjmp	800077ba <_free_r+0x17a>
800077a8:	72 29       	ld.w	r9,r9[0x8]
800077aa:	18 39       	cp.w	r9,r12
800077ac:	c0 60       	breq	800077b8 <_free_r+0x178>
800077ae:	72 1a       	ld.w	r10,r9[0x4]
800077b0:	e0 1a ff fc 	andl	r10,0xfffc
800077b4:	14 38       	cp.w	r8,r10
800077b6:	cf 93       	brcs	800077a8 <_free_r+0x168>
800077b8:	72 38       	ld.w	r8,r9[0xc]
800077ba:	8d 38       	st.w	r6[0xc],r8
800077bc:	8d 29       	st.w	r6[0x8],r9
800077be:	93 36       	st.w	r9[0xc],r6
800077c0:	91 26       	st.w	r8[0x8],r6
800077c2:	0e 9c       	mov	r12,r7
800077c4:	e0 a0 04 27 	rcall	80008012 <__malloc_unlock>
800077c8:	d8 22       	popm	r4-r7,pc
800077ca:	d7 03       	nop

800077cc <__sfvwrite_r>:
800077cc:	d4 31       	pushm	r0-r7,lr
800077ce:	20 3d       	sub	sp,12
800077d0:	14 94       	mov	r4,r10
800077d2:	18 95       	mov	r5,r12
800077d4:	16 97       	mov	r7,r11
800077d6:	74 28       	ld.w	r8,r10[0x8]
800077d8:	58 08       	cp.w	r8,0
800077da:	e0 80 01 45 	breq	80007a64 <__sfvwrite_r+0x298>
800077de:	96 68       	ld.sh	r8,r11[0xc]
800077e0:	ed b8 00 03 	bld	r8,0x3
800077e4:	c0 41       	brne	800077ec <__sfvwrite_r+0x20>
800077e6:	76 48       	ld.w	r8,r11[0x10]
800077e8:	58 08       	cp.w	r8,0
800077ea:	c0 c1       	brne	80007802 <__sfvwrite_r+0x36>
800077ec:	0e 9b       	mov	r11,r7
800077ee:	0a 9c       	mov	r12,r5
800077f0:	fe b0 f6 ca 	rcall	80006584 <__swsetup_r>
800077f4:	c0 70       	breq	80007802 <__sfvwrite_r+0x36>
800077f6:	8e 68       	ld.sh	r8,r7[0xc]
800077f8:	a7 a8       	sbr	r8,0x6
800077fa:	ae 68       	st.h	r7[0xc],r8
800077fc:	30 98       	mov	r8,9
800077fe:	8b 38       	st.w	r5[0xc],r8
80007800:	c3 09       	rjmp	80007a60 <__sfvwrite_r+0x294>
80007802:	8e 63       	ld.sh	r3,r7[0xc]
80007804:	68 00       	ld.w	r0,r4[0x0]
80007806:	06 96       	mov	r6,r3
80007808:	e2 16 00 02 	andl	r6,0x2,COH
8000780c:	c2 10       	breq	8000784e <__sfvwrite_r+0x82>
8000780e:	30 03       	mov	r3,0
80007810:	e0 62 04 00 	mov	r2,1024
80007814:	06 96       	mov	r6,r3
80007816:	c0 48       	rjmp	8000781e <__sfvwrite_r+0x52>
80007818:	60 03       	ld.w	r3,r0[0x0]
8000781a:	60 16       	ld.w	r6,r0[0x4]
8000781c:	2f 80       	sub	r0,-8
8000781e:	58 06       	cp.w	r6,0
80007820:	cf c0       	breq	80007818 <__sfvwrite_r+0x4c>
80007822:	e0 46 04 00 	cp.w	r6,1024
80007826:	ec 09 17 80 	movls	r9,r6
8000782a:	e4 09 17 b0 	movhi	r9,r2
8000782e:	06 9a       	mov	r10,r3
80007830:	6e a8       	ld.w	r8,r7[0x28]
80007832:	6e 8b       	ld.w	r11,r7[0x20]
80007834:	0a 9c       	mov	r12,r5
80007836:	5d 18       	icall	r8
80007838:	18 16       	sub	r6,r12
8000783a:	58 0c       	cp.w	r12,0
8000783c:	e0 8a 01 0f 	brle	80007a5a <__sfvwrite_r+0x28e>
80007840:	68 28       	ld.w	r8,r4[0x8]
80007842:	18 18       	sub	r8,r12
80007844:	89 28       	st.w	r4[0x8],r8
80007846:	e0 80 01 0f 	breq	80007a64 <__sfvwrite_r+0x298>
8000784a:	18 03       	add	r3,r12
8000784c:	ce 9b       	rjmp	8000781e <__sfvwrite_r+0x52>
8000784e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007852:	c0 70       	breq	80007860 <__sfvwrite_r+0x94>
80007854:	50 06       	stdsp	sp[0x0],r6
80007856:	0c 93       	mov	r3,r6
80007858:	0c 91       	mov	r1,r6
8000785a:	50 15       	stdsp	sp[0x4],r5
8000785c:	08 92       	mov	r2,r4
8000785e:	c9 e8       	rjmp	8000799a <__sfvwrite_r+0x1ce>
80007860:	06 96       	mov	r6,r3
80007862:	08 91       	mov	r1,r4
80007864:	c0 48       	rjmp	8000786c <__sfvwrite_r+0xa0>
80007866:	60 03       	ld.w	r3,r0[0x0]
80007868:	60 16       	ld.w	r6,r0[0x4]
8000786a:	2f 80       	sub	r0,-8
8000786c:	58 06       	cp.w	r6,0
8000786e:	cf c0       	breq	80007866 <__sfvwrite_r+0x9a>
80007870:	8e 68       	ld.sh	r8,r7[0xc]
80007872:	6e 24       	ld.w	r4,r7[0x8]
80007874:	10 99       	mov	r9,r8
80007876:	e2 19 02 00 	andl	r9,0x200,COH
8000787a:	c5 50       	breq	80007924 <__sfvwrite_r+0x158>
8000787c:	08 36       	cp.w	r6,r4
8000787e:	c4 33       	brcs	80007904 <__sfvwrite_r+0x138>
80007880:	10 99       	mov	r9,r8
80007882:	e2 19 04 80 	andl	r9,0x480,COH
80007886:	c3 f0       	breq	80007904 <__sfvwrite_r+0x138>
80007888:	6e 4b       	ld.w	r11,r7[0x10]
8000788a:	6e 09       	ld.w	r9,r7[0x0]
8000788c:	16 19       	sub	r9,r11
8000788e:	50 09       	stdsp	sp[0x0],r9
80007890:	6e 59       	ld.w	r9,r7[0x14]
80007892:	10 9c       	mov	r12,r8
80007894:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007898:	30 28       	mov	r8,2
8000789a:	f4 08 0c 08 	divs	r8,r10,r8
8000789e:	fa e9 00 04 	st.d	sp[4],r8
800078a2:	10 94       	mov	r4,r8
800078a4:	40 09       	lddsp	r9,sp[0x0]
800078a6:	e2 1c 04 00 	andl	r12,0x400,COH
800078aa:	2f f9       	sub	r9,-1
800078ac:	0c 09       	add	r9,r6
800078ae:	12 38       	cp.w	r8,r9
800078b0:	f2 04 17 30 	movlo	r4,r9
800078b4:	58 0c       	cp.w	r12,0
800078b6:	c1 00       	breq	800078d6 <__sfvwrite_r+0x10a>
800078b8:	08 9b       	mov	r11,r4
800078ba:	0a 9c       	mov	r12,r5
800078bc:	c6 8d       	rcall	80007b8c <_malloc_r>
800078be:	18 92       	mov	r2,r12
800078c0:	c1 40       	breq	800078e8 <__sfvwrite_r+0x11c>
800078c2:	40 0a       	lddsp	r10,sp[0x0]
800078c4:	6e 4b       	ld.w	r11,r7[0x10]
800078c6:	fe b0 e4 78 	rcall	800041b6 <memcpy>
800078ca:	8e 68       	ld.sh	r8,r7[0xc]
800078cc:	e0 18 fb 7f 	andl	r8,0xfb7f
800078d0:	a7 b8       	sbr	r8,0x7
800078d2:	ae 68       	st.h	r7[0xc],r8
800078d4:	c0 d8       	rjmp	800078ee <__sfvwrite_r+0x122>
800078d6:	08 9a       	mov	r10,r4
800078d8:	0a 9c       	mov	r12,r5
800078da:	e0 a0 06 87 	rcall	800085e8 <_realloc_r>
800078de:	18 92       	mov	r2,r12
800078e0:	c0 71       	brne	800078ee <__sfvwrite_r+0x122>
800078e2:	6e 4b       	ld.w	r11,r7[0x10]
800078e4:	0a 9c       	mov	r12,r5
800078e6:	ca de       	rcall	80007640 <_free_r>
800078e8:	30 c8       	mov	r8,12
800078ea:	8b 38       	st.w	r5[0xc],r8
800078ec:	cb 78       	rjmp	80007a5a <__sfvwrite_r+0x28e>
800078ee:	40 0a       	lddsp	r10,sp[0x0]
800078f0:	40 09       	lddsp	r9,sp[0x0]
800078f2:	e8 0a 01 0a 	sub	r10,r4,r10
800078f6:	e4 09 00 08 	add	r8,r2,r9
800078fa:	8f 54       	st.w	r7[0x14],r4
800078fc:	8f 2a       	st.w	r7[0x8],r10
800078fe:	8f 08       	st.w	r7[0x0],r8
80007900:	8f 42       	st.w	r7[0x10],r2
80007902:	0c 94       	mov	r4,r6
80007904:	08 36       	cp.w	r6,r4
80007906:	ec 04 17 30 	movlo	r4,r6
8000790a:	06 9b       	mov	r11,r3
8000790c:	08 9a       	mov	r10,r4
8000790e:	6e 0c       	ld.w	r12,r7[0x0]
80007910:	e0 a0 03 61 	rcall	80007fd2 <memmove>
80007914:	6e 08       	ld.w	r8,r7[0x0]
80007916:	08 08       	add	r8,r4
80007918:	8f 08       	st.w	r7[0x0],r8
8000791a:	6e 28       	ld.w	r8,r7[0x8]
8000791c:	08 18       	sub	r8,r4
8000791e:	0c 94       	mov	r4,r6
80007920:	8f 28       	st.w	r7[0x8],r8
80007922:	c3 08       	rjmp	80007982 <__sfvwrite_r+0x1b6>
80007924:	08 36       	cp.w	r6,r4
80007926:	5f ba       	srhi	r10
80007928:	6e 0c       	ld.w	r12,r7[0x0]
8000792a:	6e 48       	ld.w	r8,r7[0x10]
8000792c:	10 3c       	cp.w	r12,r8
8000792e:	5f b8       	srhi	r8
80007930:	f5 e8 00 08 	and	r8,r10,r8
80007934:	f2 08 18 00 	cp.b	r8,r9
80007938:	c0 e0       	breq	80007954 <__sfvwrite_r+0x188>
8000793a:	06 9b       	mov	r11,r3
8000793c:	08 9a       	mov	r10,r4
8000793e:	e0 a0 03 4a 	rcall	80007fd2 <memmove>
80007942:	6e 08       	ld.w	r8,r7[0x0]
80007944:	08 08       	add	r8,r4
80007946:	0e 9b       	mov	r11,r7
80007948:	8f 08       	st.w	r7[0x0],r8
8000794a:	0a 9c       	mov	r12,r5
8000794c:	fe b0 fd 08 	rcall	8000735c <_fflush_r>
80007950:	c1 90       	breq	80007982 <__sfvwrite_r+0x1b6>
80007952:	c8 48       	rjmp	80007a5a <__sfvwrite_r+0x28e>
80007954:	6e 59       	ld.w	r9,r7[0x14]
80007956:	12 36       	cp.w	r6,r9
80007958:	c0 a3       	brcs	8000796c <__sfvwrite_r+0x1a0>
8000795a:	6e a8       	ld.w	r8,r7[0x28]
8000795c:	06 9a       	mov	r10,r3
8000795e:	6e 8b       	ld.w	r11,r7[0x20]
80007960:	0a 9c       	mov	r12,r5
80007962:	5d 18       	icall	r8
80007964:	18 94       	mov	r4,r12
80007966:	e0 89 00 0e 	brgt	80007982 <__sfvwrite_r+0x1b6>
8000796a:	c7 88       	rjmp	80007a5a <__sfvwrite_r+0x28e>
8000796c:	0c 9a       	mov	r10,r6
8000796e:	06 9b       	mov	r11,r3
80007970:	e0 a0 03 31 	rcall	80007fd2 <memmove>
80007974:	6e 08       	ld.w	r8,r7[0x0]
80007976:	0c 08       	add	r8,r6
80007978:	0c 94       	mov	r4,r6
8000797a:	8f 08       	st.w	r7[0x0],r8
8000797c:	6e 28       	ld.w	r8,r7[0x8]
8000797e:	0c 18       	sub	r8,r6
80007980:	8f 28       	st.w	r7[0x8],r8
80007982:	62 28       	ld.w	r8,r1[0x8]
80007984:	08 18       	sub	r8,r4
80007986:	83 28       	st.w	r1[0x8],r8
80007988:	c6 e0       	breq	80007a64 <__sfvwrite_r+0x298>
8000798a:	08 16       	sub	r6,r4
8000798c:	08 03       	add	r3,r4
8000798e:	c6 fb       	rjmp	8000786c <__sfvwrite_r+0xa0>
80007990:	60 03       	ld.w	r3,r0[0x0]
80007992:	60 11       	ld.w	r1,r0[0x4]
80007994:	30 08       	mov	r8,0
80007996:	2f 80       	sub	r0,-8
80007998:	50 08       	stdsp	sp[0x0],r8
8000799a:	58 01       	cp.w	r1,0
8000799c:	cf a0       	breq	80007990 <__sfvwrite_r+0x1c4>
8000799e:	40 0a       	lddsp	r10,sp[0x0]
800079a0:	58 0a       	cp.w	r10,0
800079a2:	c1 51       	brne	800079cc <__sfvwrite_r+0x200>
800079a4:	e2 c6 ff ff 	sub	r6,r1,-1
800079a8:	02 9a       	mov	r10,r1
800079aa:	30 ab       	mov	r11,10
800079ac:	06 9c       	mov	r12,r3
800079ae:	e0 a0 03 07 	rcall	80007fbc <memchr>
800079b2:	f8 c8 ff ff 	sub	r8,r12,-1
800079b6:	58 0c       	cp.w	r12,0
800079b8:	f1 d3 e1 16 	subne	r6,r8,r3
800079bc:	f9 b9 01 01 	movne	r9,1
800079c0:	fb f9 1a 00 	st.wne	sp[0x0],r9
800079c4:	f9 b8 00 01 	moveq	r8,1
800079c8:	fb f8 0a 00 	st.weq	sp[0x0],r8
800079cc:	02 36       	cp.w	r6,r1
800079ce:	ec 04 17 80 	movls	r4,r6
800079d2:	e2 04 17 b0 	movhi	r4,r1
800079d6:	6e 59       	ld.w	r9,r7[0x14]
800079d8:	6e 25       	ld.w	r5,r7[0x8]
800079da:	f2 05 00 05 	add	r5,r9,r5
800079de:	0a 34       	cp.w	r4,r5
800079e0:	5f 9a       	srgt	r10
800079e2:	6e 0c       	ld.w	r12,r7[0x0]
800079e4:	6e 48       	ld.w	r8,r7[0x10]
800079e6:	10 3c       	cp.w	r12,r8
800079e8:	5f b8       	srhi	r8
800079ea:	f5 e8 00 08 	and	r8,r10,r8
800079ee:	30 0a       	mov	r10,0
800079f0:	f4 08 18 00 	cp.b	r8,r10
800079f4:	c0 e0       	breq	80007a10 <__sfvwrite_r+0x244>
800079f6:	06 9b       	mov	r11,r3
800079f8:	0a 9a       	mov	r10,r5
800079fa:	e0 a0 02 ec 	rcall	80007fd2 <memmove>
800079fe:	6e 08       	ld.w	r8,r7[0x0]
80007a00:	0a 08       	add	r8,r5
80007a02:	0e 9b       	mov	r11,r7
80007a04:	8f 08       	st.w	r7[0x0],r8
80007a06:	40 1c       	lddsp	r12,sp[0x4]
80007a08:	fe b0 fc aa 	rcall	8000735c <_fflush_r>
80007a0c:	c1 80       	breq	80007a3c <__sfvwrite_r+0x270>
80007a0e:	c2 68       	rjmp	80007a5a <__sfvwrite_r+0x28e>
80007a10:	12 34       	cp.w	r4,r9
80007a12:	c0 a5       	brlt	80007a26 <__sfvwrite_r+0x25a>
80007a14:	6e a8       	ld.w	r8,r7[0x28]
80007a16:	06 9a       	mov	r10,r3
80007a18:	6e 8b       	ld.w	r11,r7[0x20]
80007a1a:	40 1c       	lddsp	r12,sp[0x4]
80007a1c:	5d 18       	icall	r8
80007a1e:	18 95       	mov	r5,r12
80007a20:	e0 89 00 0e 	brgt	80007a3c <__sfvwrite_r+0x270>
80007a24:	c1 b8       	rjmp	80007a5a <__sfvwrite_r+0x28e>
80007a26:	08 9a       	mov	r10,r4
80007a28:	06 9b       	mov	r11,r3
80007a2a:	e0 a0 02 d4 	rcall	80007fd2 <memmove>
80007a2e:	6e 08       	ld.w	r8,r7[0x0]
80007a30:	08 08       	add	r8,r4
80007a32:	08 95       	mov	r5,r4
80007a34:	8f 08       	st.w	r7[0x0],r8
80007a36:	6e 28       	ld.w	r8,r7[0x8]
80007a38:	08 18       	sub	r8,r4
80007a3a:	8f 28       	st.w	r7[0x8],r8
80007a3c:	0a 16       	sub	r6,r5
80007a3e:	c0 71       	brne	80007a4c <__sfvwrite_r+0x280>
80007a40:	0e 9b       	mov	r11,r7
80007a42:	40 1c       	lddsp	r12,sp[0x4]
80007a44:	fe b0 fc 8c 	rcall	8000735c <_fflush_r>
80007a48:	c0 91       	brne	80007a5a <__sfvwrite_r+0x28e>
80007a4a:	50 06       	stdsp	sp[0x0],r6
80007a4c:	64 28       	ld.w	r8,r2[0x8]
80007a4e:	0a 18       	sub	r8,r5
80007a50:	85 28       	st.w	r2[0x8],r8
80007a52:	c0 90       	breq	80007a64 <__sfvwrite_r+0x298>
80007a54:	0a 11       	sub	r1,r5
80007a56:	0a 03       	add	r3,r5
80007a58:	ca 1b       	rjmp	8000799a <__sfvwrite_r+0x1ce>
80007a5a:	8e 68       	ld.sh	r8,r7[0xc]
80007a5c:	a7 a8       	sbr	r8,0x6
80007a5e:	ae 68       	st.h	r7[0xc],r8
80007a60:	3f fc       	mov	r12,-1
80007a62:	c0 28       	rjmp	80007a66 <__sfvwrite_r+0x29a>
80007a64:	30 0c       	mov	r12,0
80007a66:	2f dd       	sub	sp,-12
80007a68:	d8 32       	popm	r0-r7,pc
80007a6a:	d7 03       	nop

80007a6c <_fwalk>:
80007a6c:	d4 31       	pushm	r0-r7,lr
80007a6e:	30 05       	mov	r5,0
80007a70:	16 91       	mov	r1,r11
80007a72:	f8 c7 ff 28 	sub	r7,r12,-216
80007a76:	0a 92       	mov	r2,r5
80007a78:	fe b0 fc f8 	rcall	80007468 <__sfp_lock_acquire>
80007a7c:	3f f3       	mov	r3,-1
80007a7e:	c1 68       	rjmp	80007aaa <_fwalk+0x3e>
80007a80:	6e 26       	ld.w	r6,r7[0x8]
80007a82:	6e 14       	ld.w	r4,r7[0x4]
80007a84:	2f 46       	sub	r6,-12
80007a86:	c0 c8       	rjmp	80007a9e <_fwalk+0x32>
80007a88:	8c 08       	ld.sh	r8,r6[0x0]
80007a8a:	e4 08 19 00 	cp.h	r8,r2
80007a8e:	c0 70       	breq	80007a9c <_fwalk+0x30>
80007a90:	8c 18       	ld.sh	r8,r6[0x2]
80007a92:	e6 08 19 00 	cp.h	r8,r3
80007a96:	c0 30       	breq	80007a9c <_fwalk+0x30>
80007a98:	5d 11       	icall	r1
80007a9a:	18 45       	or	r5,r12
80007a9c:	2a 46       	sub	r6,-92
80007a9e:	20 14       	sub	r4,1
80007aa0:	ec cc 00 0c 	sub	r12,r6,12
80007aa4:	58 04       	cp.w	r4,0
80007aa6:	cf 14       	brge	80007a88 <_fwalk+0x1c>
80007aa8:	6e 07       	ld.w	r7,r7[0x0]
80007aaa:	58 07       	cp.w	r7,0
80007aac:	ce a1       	brne	80007a80 <_fwalk+0x14>
80007aae:	fe b0 fc de 	rcall	8000746a <__sfp_lock_release>
80007ab2:	0a 9c       	mov	r12,r5
80007ab4:	d8 32       	popm	r0-r7,pc
80007ab6:	d7 03       	nop

80007ab8 <_localeconv_r>:
80007ab8:	fe cc d8 94 	sub	r12,pc,-10092
80007abc:	5e fc       	retal	r12
80007abe:	d7 03       	nop

80007ac0 <__smakebuf_r>:
80007ac0:	d4 21       	pushm	r4-r7,lr
80007ac2:	20 fd       	sub	sp,60
80007ac4:	96 68       	ld.sh	r8,r11[0xc]
80007ac6:	16 97       	mov	r7,r11
80007ac8:	18 96       	mov	r6,r12
80007aca:	e2 18 00 02 	andl	r8,0x2,COH
80007ace:	c3 c1       	brne	80007b46 <__smakebuf_r+0x86>
80007ad0:	96 7b       	ld.sh	r11,r11[0xe]
80007ad2:	f0 0b 19 00 	cp.h	r11,r8
80007ad6:	c0 55       	brlt	80007ae0 <__smakebuf_r+0x20>
80007ad8:	1a 9a       	mov	r10,sp
80007ada:	e0 a0 08 95 	rcall	80008c04 <_fstat_r>
80007ade:	c0 f4       	brge	80007afc <__smakebuf_r+0x3c>
80007ae0:	8e 65       	ld.sh	r5,r7[0xc]
80007ae2:	0a 98       	mov	r8,r5
80007ae4:	ab b8       	sbr	r8,0xb
80007ae6:	e2 15 00 80 	andl	r5,0x80,COH
80007aea:	ae 68       	st.h	r7[0xc],r8
80007aec:	30 04       	mov	r4,0
80007aee:	e0 68 04 00 	mov	r8,1024
80007af2:	f9 b5 01 40 	movne	r5,64
80007af6:	f0 05 17 00 	moveq	r5,r8
80007afa:	c1 c8       	rjmp	80007b32 <__smakebuf_r+0x72>
80007afc:	40 18       	lddsp	r8,sp[0x4]
80007afe:	e2 18 f0 00 	andl	r8,0xf000,COH
80007b02:	e0 48 20 00 	cp.w	r8,8192
80007b06:	5f 04       	sreq	r4
80007b08:	e0 48 80 00 	cp.w	r8,32768
80007b0c:	c0 e1       	brne	80007b28 <__smakebuf_r+0x68>
80007b0e:	6e b9       	ld.w	r9,r7[0x2c]
80007b10:	fe c8 f1 f8 	sub	r8,pc,-3592
80007b14:	10 39       	cp.w	r9,r8
80007b16:	c0 91       	brne	80007b28 <__smakebuf_r+0x68>
80007b18:	8e 68       	ld.sh	r8,r7[0xc]
80007b1a:	e0 65 04 00 	mov	r5,1024
80007b1e:	ab a8       	sbr	r8,0xa
80007b20:	ef 45 00 50 	st.w	r7[80],r5
80007b24:	ae 68       	st.h	r7[0xc],r8
80007b26:	c0 68       	rjmp	80007b32 <__smakebuf_r+0x72>
80007b28:	8e 68       	ld.sh	r8,r7[0xc]
80007b2a:	e0 65 04 00 	mov	r5,1024
80007b2e:	ab b8       	sbr	r8,0xb
80007b30:	ae 68       	st.h	r7[0xc],r8
80007b32:	0a 9b       	mov	r11,r5
80007b34:	0c 9c       	mov	r12,r6
80007b36:	c2 bc       	rcall	80007b8c <_malloc_r>
80007b38:	8e 68       	ld.sh	r8,r7[0xc]
80007b3a:	c0 d1       	brne	80007b54 <__smakebuf_r+0x94>
80007b3c:	ed b8 00 09 	bld	r8,0x9
80007b40:	c1 b0       	breq	80007b76 <__smakebuf_r+0xb6>
80007b42:	a1 b8       	sbr	r8,0x1
80007b44:	ae 68       	st.h	r7[0xc],r8
80007b46:	ee c8 ff b9 	sub	r8,r7,-71
80007b4a:	8f 48       	st.w	r7[0x10],r8
80007b4c:	8f 08       	st.w	r7[0x0],r8
80007b4e:	30 18       	mov	r8,1
80007b50:	8f 58       	st.w	r7[0x14],r8
80007b52:	c1 28       	rjmp	80007b76 <__smakebuf_r+0xb6>
80007b54:	a7 b8       	sbr	r8,0x7
80007b56:	8f 4c       	st.w	r7[0x10],r12
80007b58:	ae 68       	st.h	r7[0xc],r8
80007b5a:	8f 55       	st.w	r7[0x14],r5
80007b5c:	fe c8 06 f0 	sub	r8,pc,1776
80007b60:	8f 0c       	st.w	r7[0x0],r12
80007b62:	8d a8       	st.w	r6[0x28],r8
80007b64:	58 04       	cp.w	r4,0
80007b66:	c0 80       	breq	80007b76 <__smakebuf_r+0xb6>
80007b68:	8e 7c       	ld.sh	r12,r7[0xe]
80007b6a:	e0 a0 07 3f 	rcall	800089e8 <isatty>
80007b6e:	c0 40       	breq	80007b76 <__smakebuf_r+0xb6>
80007b70:	8e 68       	ld.sh	r8,r7[0xc]
80007b72:	a1 a8       	sbr	r8,0x0
80007b74:	ae 68       	st.h	r7[0xc],r8
80007b76:	2f 1d       	sub	sp,-60
80007b78:	d8 22       	popm	r4-r7,pc
80007b7a:	d7 03       	nop

80007b7c <malloc>:
80007b7c:	d4 01       	pushm	lr
80007b7e:	e0 68 01 18 	mov	r8,280
80007b82:	18 9b       	mov	r11,r12
80007b84:	70 0c       	ld.w	r12,r8[0x0]
80007b86:	c0 3c       	rcall	80007b8c <_malloc_r>
80007b88:	d8 02       	popm	pc
80007b8a:	d7 03       	nop

80007b8c <_malloc_r>:
80007b8c:	d4 31       	pushm	r0-r7,lr
80007b8e:	f6 c8 ff f5 	sub	r8,r11,-11
80007b92:	18 95       	mov	r5,r12
80007b94:	10 97       	mov	r7,r8
80007b96:	e0 17 ff f8 	andl	r7,0xfff8
80007b9a:	59 68       	cp.w	r8,22
80007b9c:	f9 b7 08 10 	movls	r7,16
80007ba0:	16 37       	cp.w	r7,r11
80007ba2:	5f 38       	srlo	r8
80007ba4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007ba8:	c0 50       	breq	80007bb2 <_malloc_r+0x26>
80007baa:	30 c8       	mov	r8,12
80007bac:	99 38       	st.w	r12[0xc],r8
80007bae:	e0 8f 01 f7 	bral	80007f9c <_malloc_r+0x410>
80007bb2:	e0 a0 02 2f 	rcall	80008010 <__malloc_lock>
80007bb6:	e0 47 01 f7 	cp.w	r7,503
80007bba:	e0 8b 00 1d 	brhi	80007bf4 <_malloc_r+0x68>
80007bbe:	ee 03 16 03 	lsr	r3,r7,0x3
80007bc2:	e0 68 01 1c 	mov	r8,284
80007bc6:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007bca:	70 36       	ld.w	r6,r8[0xc]
80007bcc:	10 36       	cp.w	r6,r8
80007bce:	c0 61       	brne	80007bda <_malloc_r+0x4e>
80007bd0:	ec c8 ff f8 	sub	r8,r6,-8
80007bd4:	70 36       	ld.w	r6,r8[0xc]
80007bd6:	10 36       	cp.w	r6,r8
80007bd8:	c0 c0       	breq	80007bf0 <_malloc_r+0x64>
80007bda:	6c 18       	ld.w	r8,r6[0x4]
80007bdc:	e0 18 ff fc 	andl	r8,0xfffc
80007be0:	6c 3a       	ld.w	r10,r6[0xc]
80007be2:	ec 08 00 09 	add	r9,r6,r8
80007be6:	0a 9c       	mov	r12,r5
80007be8:	6c 28       	ld.w	r8,r6[0x8]
80007bea:	95 28       	st.w	r10[0x8],r8
80007bec:	91 3a       	st.w	r8[0xc],r10
80007bee:	c4 78       	rjmp	80007c7c <_malloc_r+0xf0>
80007bf0:	2f e3       	sub	r3,-2
80007bf2:	c4 d8       	rjmp	80007c8c <_malloc_r+0x100>
80007bf4:	ee 03 16 09 	lsr	r3,r7,0x9
80007bf8:	c0 41       	brne	80007c00 <_malloc_r+0x74>
80007bfa:	ee 03 16 03 	lsr	r3,r7,0x3
80007bfe:	c2 68       	rjmp	80007c4a <_malloc_r+0xbe>
80007c00:	58 43       	cp.w	r3,4
80007c02:	e0 8b 00 06 	brhi	80007c0e <_malloc_r+0x82>
80007c06:	ee 03 16 06 	lsr	r3,r7,0x6
80007c0a:	2c 83       	sub	r3,-56
80007c0c:	c1 f8       	rjmp	80007c4a <_malloc_r+0xbe>
80007c0e:	59 43       	cp.w	r3,20
80007c10:	e0 8b 00 04 	brhi	80007c18 <_malloc_r+0x8c>
80007c14:	2a 53       	sub	r3,-91
80007c16:	c1 a8       	rjmp	80007c4a <_malloc_r+0xbe>
80007c18:	e0 43 00 54 	cp.w	r3,84
80007c1c:	e0 8b 00 06 	brhi	80007c28 <_malloc_r+0x9c>
80007c20:	ee 03 16 0c 	lsr	r3,r7,0xc
80007c24:	29 23       	sub	r3,-110
80007c26:	c1 28       	rjmp	80007c4a <_malloc_r+0xbe>
80007c28:	e0 43 01 54 	cp.w	r3,340
80007c2c:	e0 8b 00 06 	brhi	80007c38 <_malloc_r+0xac>
80007c30:	ee 03 16 0f 	lsr	r3,r7,0xf
80007c34:	28 93       	sub	r3,-119
80007c36:	c0 a8       	rjmp	80007c4a <_malloc_r+0xbe>
80007c38:	e0 43 05 54 	cp.w	r3,1364
80007c3c:	e0 88 00 04 	brls	80007c44 <_malloc_r+0xb8>
80007c40:	37 e3       	mov	r3,126
80007c42:	c0 48       	rjmp	80007c4a <_malloc_r+0xbe>
80007c44:	ee 03 16 12 	lsr	r3,r7,0x12
80007c48:	28 43       	sub	r3,-124
80007c4a:	e0 6a 01 1c 	mov	r10,284
80007c4e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007c52:	74 36       	ld.w	r6,r10[0xc]
80007c54:	c1 98       	rjmp	80007c86 <_malloc_r+0xfa>
80007c56:	6c 19       	ld.w	r9,r6[0x4]
80007c58:	e0 19 ff fc 	andl	r9,0xfffc
80007c5c:	f2 07 01 0b 	sub	r11,r9,r7
80007c60:	58 fb       	cp.w	r11,15
80007c62:	e0 8a 00 04 	brle	80007c6a <_malloc_r+0xde>
80007c66:	20 13       	sub	r3,1
80007c68:	c1 18       	rjmp	80007c8a <_malloc_r+0xfe>
80007c6a:	6c 38       	ld.w	r8,r6[0xc]
80007c6c:	58 0b       	cp.w	r11,0
80007c6e:	c0 b5       	brlt	80007c84 <_malloc_r+0xf8>
80007c70:	6c 2a       	ld.w	r10,r6[0x8]
80007c72:	ec 09 00 09 	add	r9,r6,r9
80007c76:	0a 9c       	mov	r12,r5
80007c78:	91 2a       	st.w	r8[0x8],r10
80007c7a:	95 38       	st.w	r10[0xc],r8
80007c7c:	72 18       	ld.w	r8,r9[0x4]
80007c7e:	a1 a8       	sbr	r8,0x0
80007c80:	93 18       	st.w	r9[0x4],r8
80007c82:	cb c8       	rjmp	80007dfa <_malloc_r+0x26e>
80007c84:	10 96       	mov	r6,r8
80007c86:	14 36       	cp.w	r6,r10
80007c88:	ce 71       	brne	80007c56 <_malloc_r+0xca>
80007c8a:	2f f3       	sub	r3,-1
80007c8c:	e0 6a 01 1c 	mov	r10,284
80007c90:	f4 cc ff f8 	sub	r12,r10,-8
80007c94:	78 26       	ld.w	r6,r12[0x8]
80007c96:	18 36       	cp.w	r6,r12
80007c98:	c6 c0       	breq	80007d70 <_malloc_r+0x1e4>
80007c9a:	6c 19       	ld.w	r9,r6[0x4]
80007c9c:	e0 19 ff fc 	andl	r9,0xfffc
80007ca0:	f2 07 01 08 	sub	r8,r9,r7
80007ca4:	58 f8       	cp.w	r8,15
80007ca6:	e0 89 00 8f 	brgt	80007dc4 <_malloc_r+0x238>
80007caa:	99 3c       	st.w	r12[0xc],r12
80007cac:	99 2c       	st.w	r12[0x8],r12
80007cae:	58 08       	cp.w	r8,0
80007cb0:	c0 55       	brlt	80007cba <_malloc_r+0x12e>
80007cb2:	ec 09 00 09 	add	r9,r6,r9
80007cb6:	0a 9c       	mov	r12,r5
80007cb8:	ce 2b       	rjmp	80007c7c <_malloc_r+0xf0>
80007cba:	e0 49 01 ff 	cp.w	r9,511
80007cbe:	e0 8b 00 13 	brhi	80007ce4 <_malloc_r+0x158>
80007cc2:	a3 99       	lsr	r9,0x3
80007cc4:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007cc8:	70 2b       	ld.w	r11,r8[0x8]
80007cca:	8d 38       	st.w	r6[0xc],r8
80007ccc:	8d 2b       	st.w	r6[0x8],r11
80007cce:	97 36       	st.w	r11[0xc],r6
80007cd0:	91 26       	st.w	r8[0x8],r6
80007cd2:	a3 49       	asr	r9,0x2
80007cd4:	74 18       	ld.w	r8,r10[0x4]
80007cd6:	30 1b       	mov	r11,1
80007cd8:	f6 09 09 49 	lsl	r9,r11,r9
80007cdc:	f1 e9 10 09 	or	r9,r8,r9
80007ce0:	95 19       	st.w	r10[0x4],r9
80007ce2:	c4 78       	rjmp	80007d70 <_malloc_r+0x1e4>
80007ce4:	f2 0a 16 09 	lsr	r10,r9,0x9
80007ce8:	58 4a       	cp.w	r10,4
80007cea:	e0 8b 00 07 	brhi	80007cf8 <_malloc_r+0x16c>
80007cee:	f2 0a 16 06 	lsr	r10,r9,0x6
80007cf2:	2c 8a       	sub	r10,-56
80007cf4:	c2 08       	rjmp	80007d34 <_malloc_r+0x1a8>
80007cf6:	d7 03       	nop
80007cf8:	59 4a       	cp.w	r10,20
80007cfa:	e0 8b 00 04 	brhi	80007d02 <_malloc_r+0x176>
80007cfe:	2a 5a       	sub	r10,-91
80007d00:	c1 a8       	rjmp	80007d34 <_malloc_r+0x1a8>
80007d02:	e0 4a 00 54 	cp.w	r10,84
80007d06:	e0 8b 00 06 	brhi	80007d12 <_malloc_r+0x186>
80007d0a:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007d0e:	29 2a       	sub	r10,-110
80007d10:	c1 28       	rjmp	80007d34 <_malloc_r+0x1a8>
80007d12:	e0 4a 01 54 	cp.w	r10,340
80007d16:	e0 8b 00 06 	brhi	80007d22 <_malloc_r+0x196>
80007d1a:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007d1e:	28 9a       	sub	r10,-119
80007d20:	c0 a8       	rjmp	80007d34 <_malloc_r+0x1a8>
80007d22:	e0 4a 05 54 	cp.w	r10,1364
80007d26:	e0 88 00 04 	brls	80007d2e <_malloc_r+0x1a2>
80007d2a:	37 ea       	mov	r10,126
80007d2c:	c0 48       	rjmp	80007d34 <_malloc_r+0x1a8>
80007d2e:	f2 0a 16 12 	lsr	r10,r9,0x12
80007d32:	28 4a       	sub	r10,-124
80007d34:	e0 6b 01 1c 	mov	r11,284
80007d38:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007d3c:	68 28       	ld.w	r8,r4[0x8]
80007d3e:	08 38       	cp.w	r8,r4
80007d40:	c0 e1       	brne	80007d5c <_malloc_r+0x1d0>
80007d42:	76 19       	ld.w	r9,r11[0x4]
80007d44:	a3 4a       	asr	r10,0x2
80007d46:	30 1e       	mov	lr,1
80007d48:	fc 0a 09 4a 	lsl	r10,lr,r10
80007d4c:	f3 ea 10 0a 	or	r10,r9,r10
80007d50:	10 99       	mov	r9,r8
80007d52:	97 1a       	st.w	r11[0x4],r10
80007d54:	c0 a8       	rjmp	80007d68 <_malloc_r+0x1dc>
80007d56:	70 28       	ld.w	r8,r8[0x8]
80007d58:	08 38       	cp.w	r8,r4
80007d5a:	c0 60       	breq	80007d66 <_malloc_r+0x1da>
80007d5c:	70 1a       	ld.w	r10,r8[0x4]
80007d5e:	e0 1a ff fc 	andl	r10,0xfffc
80007d62:	14 39       	cp.w	r9,r10
80007d64:	cf 93       	brcs	80007d56 <_malloc_r+0x1ca>
80007d66:	70 39       	ld.w	r9,r8[0xc]
80007d68:	8d 39       	st.w	r6[0xc],r9
80007d6a:	8d 28       	st.w	r6[0x8],r8
80007d6c:	91 36       	st.w	r8[0xc],r6
80007d6e:	93 26       	st.w	r9[0x8],r6
80007d70:	e6 08 14 02 	asr	r8,r3,0x2
80007d74:	30 1b       	mov	r11,1
80007d76:	e0 64 01 1c 	mov	r4,284
80007d7a:	f6 08 09 4b 	lsl	r11,r11,r8
80007d7e:	68 18       	ld.w	r8,r4[0x4]
80007d80:	10 3b       	cp.w	r11,r8
80007d82:	e0 8b 00 69 	brhi	80007e54 <_malloc_r+0x2c8>
80007d86:	f7 e8 00 09 	and	r9,r11,r8
80007d8a:	c0 b1       	brne	80007da0 <_malloc_r+0x214>
80007d8c:	e0 13 ff fc 	andl	r3,0xfffc
80007d90:	a1 7b       	lsl	r11,0x1
80007d92:	2f c3       	sub	r3,-4
80007d94:	c0 38       	rjmp	80007d9a <_malloc_r+0x20e>
80007d96:	2f c3       	sub	r3,-4
80007d98:	a1 7b       	lsl	r11,0x1
80007d9a:	f7 e8 00 09 	and	r9,r11,r8
80007d9e:	cf c0       	breq	80007d96 <_malloc_r+0x20a>
80007da0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007da4:	06 92       	mov	r2,r3
80007da6:	1c 91       	mov	r1,lr
80007da8:	62 36       	ld.w	r6,r1[0xc]
80007daa:	c2 d8       	rjmp	80007e04 <_malloc_r+0x278>
80007dac:	6c 1a       	ld.w	r10,r6[0x4]
80007dae:	e0 1a ff fc 	andl	r10,0xfffc
80007db2:	f4 07 01 08 	sub	r8,r10,r7
80007db6:	58 f8       	cp.w	r8,15
80007db8:	e0 8a 00 15 	brle	80007de2 <_malloc_r+0x256>
80007dbc:	6c 3a       	ld.w	r10,r6[0xc]
80007dbe:	6c 29       	ld.w	r9,r6[0x8]
80007dc0:	95 29       	st.w	r10[0x8],r9
80007dc2:	93 3a       	st.w	r9[0xc],r10
80007dc4:	0e 99       	mov	r9,r7
80007dc6:	ec 07 00 07 	add	r7,r6,r7
80007dca:	a1 a9       	sbr	r9,0x0
80007dcc:	99 37       	st.w	r12[0xc],r7
80007dce:	99 27       	st.w	r12[0x8],r7
80007dd0:	8d 19       	st.w	r6[0x4],r9
80007dd2:	ee 08 09 08 	st.w	r7[r8],r8
80007dd6:	8f 2c       	st.w	r7[0x8],r12
80007dd8:	8f 3c       	st.w	r7[0xc],r12
80007dda:	a1 a8       	sbr	r8,0x0
80007ddc:	0a 9c       	mov	r12,r5
80007dde:	8f 18       	st.w	r7[0x4],r8
80007de0:	c0 d8       	rjmp	80007dfa <_malloc_r+0x26e>
80007de2:	6c 39       	ld.w	r9,r6[0xc]
80007de4:	58 08       	cp.w	r8,0
80007de6:	c0 e5       	brlt	80007e02 <_malloc_r+0x276>
80007de8:	ec 0a 00 0a 	add	r10,r6,r10
80007dec:	74 18       	ld.w	r8,r10[0x4]
80007dee:	a1 a8       	sbr	r8,0x0
80007df0:	0a 9c       	mov	r12,r5
80007df2:	95 18       	st.w	r10[0x4],r8
80007df4:	6c 28       	ld.w	r8,r6[0x8]
80007df6:	93 28       	st.w	r9[0x8],r8
80007df8:	91 39       	st.w	r8[0xc],r9
80007dfa:	c0 cd       	rcall	80008012 <__malloc_unlock>
80007dfc:	ec cc ff f8 	sub	r12,r6,-8
80007e00:	d8 32       	popm	r0-r7,pc
80007e02:	12 96       	mov	r6,r9
80007e04:	02 36       	cp.w	r6,r1
80007e06:	cd 31       	brne	80007dac <_malloc_r+0x220>
80007e08:	2f f2       	sub	r2,-1
80007e0a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007e0e:	c0 30       	breq	80007e14 <_malloc_r+0x288>
80007e10:	2f 81       	sub	r1,-8
80007e12:	cc bb       	rjmp	80007da8 <_malloc_r+0x21c>
80007e14:	1c 98       	mov	r8,lr
80007e16:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007e1a:	c0 81       	brne	80007e2a <_malloc_r+0x29e>
80007e1c:	68 19       	ld.w	r9,r4[0x4]
80007e1e:	f6 08 11 ff 	rsub	r8,r11,-1
80007e22:	f3 e8 00 08 	and	r8,r9,r8
80007e26:	89 18       	st.w	r4[0x4],r8
80007e28:	c0 78       	rjmp	80007e36 <_malloc_r+0x2aa>
80007e2a:	f0 c9 00 08 	sub	r9,r8,8
80007e2e:	20 13       	sub	r3,1
80007e30:	70 08       	ld.w	r8,r8[0x0]
80007e32:	12 38       	cp.w	r8,r9
80007e34:	cf 10       	breq	80007e16 <_malloc_r+0x28a>
80007e36:	a1 7b       	lsl	r11,0x1
80007e38:	68 18       	ld.w	r8,r4[0x4]
80007e3a:	10 3b       	cp.w	r11,r8
80007e3c:	e0 8b 00 0c 	brhi	80007e54 <_malloc_r+0x2c8>
80007e40:	58 0b       	cp.w	r11,0
80007e42:	c0 90       	breq	80007e54 <_malloc_r+0x2c8>
80007e44:	04 93       	mov	r3,r2
80007e46:	c0 38       	rjmp	80007e4c <_malloc_r+0x2c0>
80007e48:	2f c3       	sub	r3,-4
80007e4a:	a1 7b       	lsl	r11,0x1
80007e4c:	f7 e8 00 09 	and	r9,r11,r8
80007e50:	ca 81       	brne	80007da0 <_malloc_r+0x214>
80007e52:	cf bb       	rjmp	80007e48 <_malloc_r+0x2bc>
80007e54:	68 23       	ld.w	r3,r4[0x8]
80007e56:	66 12       	ld.w	r2,r3[0x4]
80007e58:	e0 12 ff fc 	andl	r2,0xfffc
80007e5c:	0e 32       	cp.w	r2,r7
80007e5e:	5f 39       	srlo	r9
80007e60:	e4 07 01 08 	sub	r8,r2,r7
80007e64:	58 f8       	cp.w	r8,15
80007e66:	5f aa       	srle	r10
80007e68:	f5 e9 10 09 	or	r9,r10,r9
80007e6c:	e0 80 00 9a 	breq	80007fa0 <_malloc_r+0x414>
80007e70:	e0 68 06 44 	mov	r8,1604
80007e74:	70 01       	ld.w	r1,r8[0x0]
80007e76:	e0 68 05 28 	mov	r8,1320
80007e7a:	2f 01       	sub	r1,-16
80007e7c:	70 08       	ld.w	r8,r8[0x0]
80007e7e:	0e 01       	add	r1,r7
80007e80:	5b f8       	cp.w	r8,-1
80007e82:	c0 40       	breq	80007e8a <_malloc_r+0x2fe>
80007e84:	28 11       	sub	r1,-127
80007e86:	e0 11 ff 80 	andl	r1,0xff80
80007e8a:	02 9b       	mov	r11,r1
80007e8c:	0a 9c       	mov	r12,r5
80007e8e:	e0 a0 05 31 	rcall	800088f0 <_sbrk_r>
80007e92:	18 96       	mov	r6,r12
80007e94:	5b fc       	cp.w	r12,-1
80007e96:	c7 50       	breq	80007f80 <_malloc_r+0x3f4>
80007e98:	e6 02 00 08 	add	r8,r3,r2
80007e9c:	10 3c       	cp.w	r12,r8
80007e9e:	c0 32       	brcc	80007ea4 <_malloc_r+0x318>
80007ea0:	08 33       	cp.w	r3,r4
80007ea2:	c6 f1       	brne	80007f80 <_malloc_r+0x3f4>
80007ea4:	e0 6a 06 48 	mov	r10,1608
80007ea8:	74 09       	ld.w	r9,r10[0x0]
80007eaa:	e2 09 00 09 	add	r9,r1,r9
80007eae:	95 09       	st.w	r10[0x0],r9
80007eb0:	10 36       	cp.w	r6,r8
80007eb2:	c0 a1       	brne	80007ec6 <_malloc_r+0x33a>
80007eb4:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007eb8:	c0 71       	brne	80007ec6 <_malloc_r+0x33a>
80007eba:	e2 02 00 02 	add	r2,r1,r2
80007ebe:	68 28       	ld.w	r8,r4[0x8]
80007ec0:	a1 a2       	sbr	r2,0x0
80007ec2:	91 12       	st.w	r8[0x4],r2
80007ec4:	c4 f8       	rjmp	80007f62 <_malloc_r+0x3d6>
80007ec6:	e0 6a 05 28 	mov	r10,1320
80007eca:	74 0b       	ld.w	r11,r10[0x0]
80007ecc:	5b fb       	cp.w	r11,-1
80007ece:	c0 31       	brne	80007ed4 <_malloc_r+0x348>
80007ed0:	95 06       	st.w	r10[0x0],r6
80007ed2:	c0 78       	rjmp	80007ee0 <_malloc_r+0x354>
80007ed4:	ec 09 00 09 	add	r9,r6,r9
80007ed8:	e0 6a 06 48 	mov	r10,1608
80007edc:	10 19       	sub	r9,r8
80007ede:	95 09       	st.w	r10[0x0],r9
80007ee0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007ee4:	f0 09 11 08 	rsub	r9,r8,8
80007ee8:	58 08       	cp.w	r8,0
80007eea:	f2 08 17 10 	movne	r8,r9
80007eee:	ed d8 e1 06 	addne	r6,r6,r8
80007ef2:	28 08       	sub	r8,-128
80007ef4:	ec 01 00 01 	add	r1,r6,r1
80007ef8:	0a 9c       	mov	r12,r5
80007efa:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007efe:	f0 01 01 01 	sub	r1,r8,r1
80007f02:	02 9b       	mov	r11,r1
80007f04:	e0 a0 04 f6 	rcall	800088f0 <_sbrk_r>
80007f08:	e0 68 06 48 	mov	r8,1608
80007f0c:	5b fc       	cp.w	r12,-1
80007f0e:	ec 0c 17 00 	moveq	r12,r6
80007f12:	f9 b1 00 00 	moveq	r1,0
80007f16:	70 09       	ld.w	r9,r8[0x0]
80007f18:	0c 1c       	sub	r12,r6
80007f1a:	89 26       	st.w	r4[0x8],r6
80007f1c:	02 0c       	add	r12,r1
80007f1e:	12 01       	add	r1,r9
80007f20:	a1 ac       	sbr	r12,0x0
80007f22:	91 01       	st.w	r8[0x0],r1
80007f24:	8d 1c       	st.w	r6[0x4],r12
80007f26:	08 33       	cp.w	r3,r4
80007f28:	c1 d0       	breq	80007f62 <_malloc_r+0x3d6>
80007f2a:	58 f2       	cp.w	r2,15
80007f2c:	e0 8b 00 05 	brhi	80007f36 <_malloc_r+0x3aa>
80007f30:	30 18       	mov	r8,1
80007f32:	8d 18       	st.w	r6[0x4],r8
80007f34:	c2 68       	rjmp	80007f80 <_malloc_r+0x3f4>
80007f36:	30 59       	mov	r9,5
80007f38:	20 c2       	sub	r2,12
80007f3a:	e0 12 ff f8 	andl	r2,0xfff8
80007f3e:	e6 02 00 08 	add	r8,r3,r2
80007f42:	91 29       	st.w	r8[0x8],r9
80007f44:	91 19       	st.w	r8[0x4],r9
80007f46:	66 18       	ld.w	r8,r3[0x4]
80007f48:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007f4c:	e5 e8 10 08 	or	r8,r2,r8
80007f50:	87 18       	st.w	r3[0x4],r8
80007f52:	58 f2       	cp.w	r2,15
80007f54:	e0 88 00 07 	brls	80007f62 <_malloc_r+0x3d6>
80007f58:	e6 cb ff f8 	sub	r11,r3,-8
80007f5c:	0a 9c       	mov	r12,r5
80007f5e:	fe b0 fb 71 	rcall	80007640 <_free_r>
80007f62:	e0 69 06 40 	mov	r9,1600
80007f66:	72 0a       	ld.w	r10,r9[0x0]
80007f68:	e0 68 06 48 	mov	r8,1608
80007f6c:	70 08       	ld.w	r8,r8[0x0]
80007f6e:	14 38       	cp.w	r8,r10
80007f70:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007f74:	e0 69 06 3c 	mov	r9,1596
80007f78:	72 0a       	ld.w	r10,r9[0x0]
80007f7a:	14 38       	cp.w	r8,r10
80007f7c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007f80:	68 28       	ld.w	r8,r4[0x8]
80007f82:	70 18       	ld.w	r8,r8[0x4]
80007f84:	e0 18 ff fc 	andl	r8,0xfffc
80007f88:	0e 38       	cp.w	r8,r7
80007f8a:	5f 39       	srlo	r9
80007f8c:	0e 18       	sub	r8,r7
80007f8e:	58 f8       	cp.w	r8,15
80007f90:	5f aa       	srle	r10
80007f92:	f5 e9 10 09 	or	r9,r10,r9
80007f96:	c0 50       	breq	80007fa0 <_malloc_r+0x414>
80007f98:	0a 9c       	mov	r12,r5
80007f9a:	c3 cc       	rcall	80008012 <__malloc_unlock>
80007f9c:	d8 3a       	popm	r0-r7,pc,r12=0
80007f9e:	d7 03       	nop
80007fa0:	68 26       	ld.w	r6,r4[0x8]
80007fa2:	a1 a8       	sbr	r8,0x0
80007fa4:	0e 99       	mov	r9,r7
80007fa6:	a1 a9       	sbr	r9,0x0
80007fa8:	8d 19       	st.w	r6[0x4],r9
80007faa:	ec 07 00 07 	add	r7,r6,r7
80007fae:	0a 9c       	mov	r12,r5
80007fb0:	89 27       	st.w	r4[0x8],r7
80007fb2:	8f 18       	st.w	r7[0x4],r8
80007fb4:	c2 fc       	rcall	80008012 <__malloc_unlock>
80007fb6:	ec cc ff f8 	sub	r12,r6,-8
80007fba:	d8 32       	popm	r0-r7,pc

80007fbc <memchr>:
80007fbc:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007fc0:	c0 68       	rjmp	80007fcc <memchr+0x10>
80007fc2:	20 1a       	sub	r10,1
80007fc4:	19 88       	ld.ub	r8,r12[0x0]
80007fc6:	16 38       	cp.w	r8,r11
80007fc8:	5e 0c       	reteq	r12
80007fca:	2f fc       	sub	r12,-1
80007fcc:	58 0a       	cp.w	r10,0
80007fce:	cf a1       	brne	80007fc2 <memchr+0x6>
80007fd0:	5e fa       	retal	r10

80007fd2 <memmove>:
80007fd2:	d4 01       	pushm	lr
80007fd4:	18 3b       	cp.w	r11,r12
80007fd6:	c1 92       	brcc	80008008 <memmove+0x36>
80007fd8:	f6 0a 00 09 	add	r9,r11,r10
80007fdc:	12 3c       	cp.w	r12,r9
80007fde:	c1 52       	brcc	80008008 <memmove+0x36>
80007fe0:	f8 0a 00 0b 	add	r11,r12,r10
80007fe4:	30 08       	mov	r8,0
80007fe6:	c0 68       	rjmp	80007ff2 <memmove+0x20>
80007fe8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007fec:	20 1a       	sub	r10,1
80007fee:	f6 08 0b 0e 	st.b	r11[r8],lr
80007ff2:	20 18       	sub	r8,1
80007ff4:	58 0a       	cp.w	r10,0
80007ff6:	cf 91       	brne	80007fe8 <memmove+0x16>
80007ff8:	d8 02       	popm	pc
80007ffa:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007ffe:	20 1a       	sub	r10,1
80008000:	f8 08 0b 09 	st.b	r12[r8],r9
80008004:	2f f8       	sub	r8,-1
80008006:	c0 28       	rjmp	8000800a <memmove+0x38>
80008008:	30 08       	mov	r8,0
8000800a:	58 0a       	cp.w	r10,0
8000800c:	cf 71       	brne	80007ffa <memmove+0x28>
8000800e:	d8 02       	popm	pc

80008010 <__malloc_lock>:
80008010:	5e fc       	retal	r12

80008012 <__malloc_unlock>:
80008012:	5e fc       	retal	r12

80008014 <__hi0bits>:
80008014:	18 98       	mov	r8,r12
80008016:	e0 1c 00 00 	andl	r12,0x0
8000801a:	f0 09 15 10 	lsl	r9,r8,0x10
8000801e:	58 0c       	cp.w	r12,0
80008020:	f2 08 17 00 	moveq	r8,r9
80008024:	f9 bc 00 10 	moveq	r12,16
80008028:	f9 bc 01 00 	movne	r12,0
8000802c:	10 9a       	mov	r10,r8
8000802e:	f0 09 15 08 	lsl	r9,r8,0x8
80008032:	e6 1a ff 00 	andh	r10,0xff00,COH
80008036:	f7 bc 00 f8 	subeq	r12,-8
8000803a:	f2 08 17 00 	moveq	r8,r9
8000803e:	10 9a       	mov	r10,r8
80008040:	f0 09 15 04 	lsl	r9,r8,0x4
80008044:	e6 1a f0 00 	andh	r10,0xf000,COH
80008048:	f7 bc 00 fc 	subeq	r12,-4
8000804c:	f2 08 17 00 	moveq	r8,r9
80008050:	10 9a       	mov	r10,r8
80008052:	f0 09 15 02 	lsl	r9,r8,0x2
80008056:	e6 1a c0 00 	andh	r10,0xc000,COH
8000805a:	f7 bc 00 fe 	subeq	r12,-2
8000805e:	f2 08 17 00 	moveq	r8,r9
80008062:	58 08       	cp.w	r8,0
80008064:	5e 5c       	retlt	r12
80008066:	ed b8 00 1e 	bld	r8,0x1e
8000806a:	f9 bc 01 20 	movne	r12,32
8000806e:	f7 bc 00 ff 	subeq	r12,-1
80008072:	5e fc       	retal	r12

80008074 <__lo0bits>:
80008074:	18 99       	mov	r9,r12
80008076:	78 08       	ld.w	r8,r12[0x0]
80008078:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000807c:	c1 50       	breq	800080a6 <__lo0bits+0x32>
8000807e:	ed b8 00 00 	bld	r8,0x0
80008082:	c0 21       	brne	80008086 <__lo0bits+0x12>
80008084:	5e fd       	retal	0
80008086:	10 9b       	mov	r11,r8
80008088:	f0 0a 16 01 	lsr	r10,r8,0x1
8000808c:	e2 1b 00 02 	andl	r11,0x2,COH
80008090:	a3 88       	lsr	r8,0x2
80008092:	58 0b       	cp.w	r11,0
80008094:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008098:	f9 bc 01 01 	movne	r12,1
8000809c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800080a0:	f9 bc 00 02 	moveq	r12,2
800080a4:	5e fc       	retal	r12
800080a6:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800080aa:	f0 0b 16 10 	lsr	r11,r8,0x10
800080ae:	58 0a       	cp.w	r10,0
800080b0:	f6 08 17 00 	moveq	r8,r11
800080b4:	f9 bc 00 10 	moveq	r12,16
800080b8:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800080bc:	f0 0a 16 08 	lsr	r10,r8,0x8
800080c0:	58 0b       	cp.w	r11,0
800080c2:	f7 bc 00 f8 	subeq	r12,-8
800080c6:	f4 08 17 00 	moveq	r8,r10
800080ca:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800080ce:	f0 0a 16 04 	lsr	r10,r8,0x4
800080d2:	58 0b       	cp.w	r11,0
800080d4:	f7 bc 00 fc 	subeq	r12,-4
800080d8:	f4 08 17 00 	moveq	r8,r10
800080dc:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800080e0:	f0 0a 16 02 	lsr	r10,r8,0x2
800080e4:	58 0b       	cp.w	r11,0
800080e6:	f7 bc 00 fe 	subeq	r12,-2
800080ea:	f4 08 17 00 	moveq	r8,r10
800080ee:	ed b8 00 00 	bld	r8,0x0
800080f2:	c0 60       	breq	800080fe <__lo0bits+0x8a>
800080f4:	a1 98       	lsr	r8,0x1
800080f6:	c0 31       	brne	800080fc <__lo0bits+0x88>
800080f8:	32 0c       	mov	r12,32
800080fa:	5e fc       	retal	r12
800080fc:	2f fc       	sub	r12,-1
800080fe:	93 08       	st.w	r9[0x0],r8
80008100:	5e fc       	retal	r12

80008102 <__mcmp>:
80008102:	d4 01       	pushm	lr
80008104:	18 98       	mov	r8,r12
80008106:	76 49       	ld.w	r9,r11[0x10]
80008108:	78 4c       	ld.w	r12,r12[0x10]
8000810a:	12 1c       	sub	r12,r9
8000810c:	c1 31       	brne	80008132 <__mcmp+0x30>
8000810e:	2f b9       	sub	r9,-5
80008110:	a3 69       	lsl	r9,0x2
80008112:	12 0b       	add	r11,r9
80008114:	f0 09 00 09 	add	r9,r8,r9
80008118:	2e c8       	sub	r8,-20
8000811a:	13 4e       	ld.w	lr,--r9
8000811c:	17 4a       	ld.w	r10,--r11
8000811e:	14 3e       	cp.w	lr,r10
80008120:	c0 60       	breq	8000812c <__mcmp+0x2a>
80008122:	f9 bc 03 ff 	movlo	r12,-1
80008126:	f9 bc 02 01 	movhs	r12,1
8000812a:	d8 02       	popm	pc
8000812c:	10 39       	cp.w	r9,r8
8000812e:	fe 9b ff f6 	brhi	8000811a <__mcmp+0x18>
80008132:	d8 02       	popm	pc

80008134 <_Bfree>:
80008134:	d4 21       	pushm	r4-r7,lr
80008136:	18 97       	mov	r7,r12
80008138:	16 95       	mov	r5,r11
8000813a:	78 96       	ld.w	r6,r12[0x24]
8000813c:	58 06       	cp.w	r6,0
8000813e:	c0 91       	brne	80008150 <_Bfree+0x1c>
80008140:	31 0c       	mov	r12,16
80008142:	fe b0 fd 1d 	rcall	80007b7c <malloc>
80008146:	99 36       	st.w	r12[0xc],r6
80008148:	8f 9c       	st.w	r7[0x24],r12
8000814a:	99 16       	st.w	r12[0x4],r6
8000814c:	99 26       	st.w	r12[0x8],r6
8000814e:	99 06       	st.w	r12[0x0],r6
80008150:	58 05       	cp.w	r5,0
80008152:	c0 90       	breq	80008164 <_Bfree+0x30>
80008154:	6a 19       	ld.w	r9,r5[0x4]
80008156:	6e 98       	ld.w	r8,r7[0x24]
80008158:	70 38       	ld.w	r8,r8[0xc]
8000815a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000815e:	8b 0a       	st.w	r5[0x0],r10
80008160:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008164:	d8 22       	popm	r4-r7,pc
80008166:	d7 03       	nop

80008168 <_Balloc>:
80008168:	d4 21       	pushm	r4-r7,lr
8000816a:	18 97       	mov	r7,r12
8000816c:	16 96       	mov	r6,r11
8000816e:	78 95       	ld.w	r5,r12[0x24]
80008170:	58 05       	cp.w	r5,0
80008172:	c0 91       	brne	80008184 <_Balloc+0x1c>
80008174:	31 0c       	mov	r12,16
80008176:	fe b0 fd 03 	rcall	80007b7c <malloc>
8000817a:	99 35       	st.w	r12[0xc],r5
8000817c:	8f 9c       	st.w	r7[0x24],r12
8000817e:	99 15       	st.w	r12[0x4],r5
80008180:	99 25       	st.w	r12[0x8],r5
80008182:	99 05       	st.w	r12[0x0],r5
80008184:	6e 95       	ld.w	r5,r7[0x24]
80008186:	6a 38       	ld.w	r8,r5[0xc]
80008188:	58 08       	cp.w	r8,0
8000818a:	c0 b1       	brne	800081a0 <_Balloc+0x38>
8000818c:	31 0a       	mov	r10,16
8000818e:	30 4b       	mov	r11,4
80008190:	0e 9c       	mov	r12,r7
80008192:	e0 a0 04 93 	rcall	80008ab8 <_calloc_r>
80008196:	8b 3c       	st.w	r5[0xc],r12
80008198:	6e 98       	ld.w	r8,r7[0x24]
8000819a:	70 3c       	ld.w	r12,r8[0xc]
8000819c:	58 0c       	cp.w	r12,0
8000819e:	c1 b0       	breq	800081d4 <_Balloc+0x6c>
800081a0:	6e 98       	ld.w	r8,r7[0x24]
800081a2:	70 38       	ld.w	r8,r8[0xc]
800081a4:	f0 06 00 28 	add	r8,r8,r6<<0x2
800081a8:	70 0c       	ld.w	r12,r8[0x0]
800081aa:	58 0c       	cp.w	r12,0
800081ac:	c0 40       	breq	800081b4 <_Balloc+0x4c>
800081ae:	78 09       	ld.w	r9,r12[0x0]
800081b0:	91 09       	st.w	r8[0x0],r9
800081b2:	c0 e8       	rjmp	800081ce <_Balloc+0x66>
800081b4:	0e 9c       	mov	r12,r7
800081b6:	30 17       	mov	r7,1
800081b8:	0e 9b       	mov	r11,r7
800081ba:	ee 06 09 47 	lsl	r7,r7,r6
800081be:	ee ca ff fb 	sub	r10,r7,-5
800081c2:	a3 6a       	lsl	r10,0x2
800081c4:	e0 a0 04 7a 	rcall	80008ab8 <_calloc_r>
800081c8:	c0 60       	breq	800081d4 <_Balloc+0x6c>
800081ca:	99 16       	st.w	r12[0x4],r6
800081cc:	99 27       	st.w	r12[0x8],r7
800081ce:	30 08       	mov	r8,0
800081d0:	99 38       	st.w	r12[0xc],r8
800081d2:	99 48       	st.w	r12[0x10],r8
800081d4:	d8 22       	popm	r4-r7,pc
800081d6:	d7 03       	nop

800081d8 <__d2b>:
800081d8:	d4 31       	pushm	r0-r7,lr
800081da:	20 2d       	sub	sp,8
800081dc:	16 93       	mov	r3,r11
800081de:	12 96       	mov	r6,r9
800081e0:	10 95       	mov	r5,r8
800081e2:	14 92       	mov	r2,r10
800081e4:	30 1b       	mov	r11,1
800081e6:	cc 1f       	rcall	80008168 <_Balloc>
800081e8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800081ec:	50 09       	stdsp	sp[0x0],r9
800081ee:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800081f2:	b5 a9       	sbr	r9,0x14
800081f4:	f0 01 16 14 	lsr	r1,r8,0x14
800081f8:	fb f9 1a 00 	st.wne	sp[0x0],r9
800081fc:	18 94       	mov	r4,r12
800081fe:	58 02       	cp.w	r2,0
80008200:	c1 d0       	breq	8000823a <__d2b+0x62>
80008202:	fa cc ff f8 	sub	r12,sp,-8
80008206:	18 d2       	st.w	--r12,r2
80008208:	c3 6f       	rcall	80008074 <__lo0bits>
8000820a:	40 18       	lddsp	r8,sp[0x4]
8000820c:	c0 d0       	breq	80008226 <__d2b+0x4e>
8000820e:	40 09       	lddsp	r9,sp[0x0]
80008210:	f8 0a 11 20 	rsub	r10,r12,32
80008214:	f2 0a 09 4a 	lsl	r10,r9,r10
80008218:	f5 e8 10 08 	or	r8,r10,r8
8000821c:	89 58       	st.w	r4[0x14],r8
8000821e:	f2 0c 0a 49 	lsr	r9,r9,r12
80008222:	50 09       	stdsp	sp[0x0],r9
80008224:	c0 28       	rjmp	80008228 <__d2b+0x50>
80008226:	89 58       	st.w	r4[0x14],r8
80008228:	40 08       	lddsp	r8,sp[0x0]
8000822a:	58 08       	cp.w	r8,0
8000822c:	f9 b3 01 02 	movne	r3,2
80008230:	f9 b3 00 01 	moveq	r3,1
80008234:	89 68       	st.w	r4[0x18],r8
80008236:	89 43       	st.w	r4[0x10],r3
80008238:	c0 88       	rjmp	80008248 <__d2b+0x70>
8000823a:	1a 9c       	mov	r12,sp
8000823c:	c1 cf       	rcall	80008074 <__lo0bits>
8000823e:	30 13       	mov	r3,1
80008240:	40 08       	lddsp	r8,sp[0x0]
80008242:	2e 0c       	sub	r12,-32
80008244:	89 43       	st.w	r4[0x10],r3
80008246:	89 58       	st.w	r4[0x14],r8
80008248:	58 01       	cp.w	r1,0
8000824a:	c0 90       	breq	8000825c <__d2b+0x84>
8000824c:	e2 c1 04 33 	sub	r1,r1,1075
80008250:	18 01       	add	r1,r12
80008252:	8d 01       	st.w	r6[0x0],r1
80008254:	f8 0c 11 35 	rsub	r12,r12,53
80008258:	8b 0c       	st.w	r5[0x0],r12
8000825a:	c0 c8       	rjmp	80008272 <__d2b+0x9a>
8000825c:	e6 c8 ff fc 	sub	r8,r3,-4
80008260:	f8 cc 04 32 	sub	r12,r12,1074
80008264:	a5 73       	lsl	r3,0x5
80008266:	8d 0c       	st.w	r6[0x0],r12
80008268:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000826c:	cd 4e       	rcall	80008014 <__hi0bits>
8000826e:	18 13       	sub	r3,r12
80008270:	8b 03       	st.w	r5[0x0],r3
80008272:	08 9c       	mov	r12,r4
80008274:	2f ed       	sub	sp,-8
80008276:	d8 32       	popm	r0-r7,pc

80008278 <__mdiff>:
80008278:	d4 31       	pushm	r0-r7,lr
8000827a:	74 48       	ld.w	r8,r10[0x10]
8000827c:	76 45       	ld.w	r5,r11[0x10]
8000827e:	16 97       	mov	r7,r11
80008280:	14 96       	mov	r6,r10
80008282:	10 15       	sub	r5,r8
80008284:	c1 31       	brne	800082aa <__mdiff+0x32>
80008286:	2f b8       	sub	r8,-5
80008288:	ee ce ff ec 	sub	lr,r7,-20
8000828c:	a3 68       	lsl	r8,0x2
8000828e:	f4 08 00 0b 	add	r11,r10,r8
80008292:	ee 08 00 08 	add	r8,r7,r8
80008296:	11 4a       	ld.w	r10,--r8
80008298:	17 49       	ld.w	r9,--r11
8000829a:	12 3a       	cp.w	r10,r9
8000829c:	c0 30       	breq	800082a2 <__mdiff+0x2a>
8000829e:	c0 e2       	brcc	800082ba <__mdiff+0x42>
800082a0:	c0 78       	rjmp	800082ae <__mdiff+0x36>
800082a2:	1c 38       	cp.w	r8,lr
800082a4:	fe 9b ff f9 	brhi	80008296 <__mdiff+0x1e>
800082a8:	c4 98       	rjmp	8000833a <__mdiff+0xc2>
800082aa:	58 05       	cp.w	r5,0
800082ac:	c0 64       	brge	800082b8 <__mdiff+0x40>
800082ae:	0e 98       	mov	r8,r7
800082b0:	30 15       	mov	r5,1
800082b2:	0c 97       	mov	r7,r6
800082b4:	10 96       	mov	r6,r8
800082b6:	c0 28       	rjmp	800082ba <__mdiff+0x42>
800082b8:	30 05       	mov	r5,0
800082ba:	6e 1b       	ld.w	r11,r7[0x4]
800082bc:	c5 6f       	rcall	80008168 <_Balloc>
800082be:	6e 49       	ld.w	r9,r7[0x10]
800082c0:	6c 44       	ld.w	r4,r6[0x10]
800082c2:	99 35       	st.w	r12[0xc],r5
800082c4:	2f b4       	sub	r4,-5
800082c6:	f2 c5 ff fb 	sub	r5,r9,-5
800082ca:	ec 04 00 24 	add	r4,r6,r4<<0x2
800082ce:	ee 05 00 25 	add	r5,r7,r5<<0x2
800082d2:	2e c6       	sub	r6,-20
800082d4:	2e c7       	sub	r7,-20
800082d6:	f8 c8 ff ec 	sub	r8,r12,-20
800082da:	30 0a       	mov	r10,0
800082dc:	0f 0e       	ld.w	lr,r7++
800082de:	0d 0b       	ld.w	r11,r6++
800082e0:	fc 02 16 10 	lsr	r2,lr,0x10
800082e4:	f6 03 16 10 	lsr	r3,r11,0x10
800082e8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800082ec:	e4 03 01 03 	sub	r3,r2,r3
800082f0:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800082f4:	fc 0b 01 0b 	sub	r11,lr,r11
800082f8:	f6 0a 00 0a 	add	r10,r11,r10
800082fc:	b0 1a       	st.h	r8[0x2],r10
800082fe:	b1 4a       	asr	r10,0x10
80008300:	e6 0a 00 0a 	add	r10,r3,r10
80008304:	b0 0a       	st.h	r8[0x0],r10
80008306:	2f c8       	sub	r8,-4
80008308:	b1 4a       	asr	r10,0x10
8000830a:	08 36       	cp.w	r6,r4
8000830c:	ce 83       	brcs	800082dc <__mdiff+0x64>
8000830e:	c0 d8       	rjmp	80008328 <__mdiff+0xb0>
80008310:	0f 0b       	ld.w	r11,r7++
80008312:	f6 0e 16 10 	lsr	lr,r11,0x10
80008316:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000831a:	16 0a       	add	r10,r11
8000831c:	b0 1a       	st.h	r8[0x2],r10
8000831e:	b1 4a       	asr	r10,0x10
80008320:	1c 0a       	add	r10,lr
80008322:	b0 0a       	st.h	r8[0x0],r10
80008324:	2f c8       	sub	r8,-4
80008326:	b1 4a       	asr	r10,0x10
80008328:	0a 37       	cp.w	r7,r5
8000832a:	cf 33       	brcs	80008310 <__mdiff+0x98>
8000832c:	c0 28       	rjmp	80008330 <__mdiff+0xb8>
8000832e:	20 19       	sub	r9,1
80008330:	11 4a       	ld.w	r10,--r8
80008332:	58 0a       	cp.w	r10,0
80008334:	cf d0       	breq	8000832e <__mdiff+0xb6>
80008336:	99 49       	st.w	r12[0x10],r9
80008338:	d8 32       	popm	r0-r7,pc
8000833a:	30 0b       	mov	r11,0
8000833c:	c1 6f       	rcall	80008168 <_Balloc>
8000833e:	30 18       	mov	r8,1
80008340:	99 48       	st.w	r12[0x10],r8
80008342:	30 08       	mov	r8,0
80008344:	99 58       	st.w	r12[0x14],r8
80008346:	d8 32       	popm	r0-r7,pc

80008348 <__lshift>:
80008348:	d4 31       	pushm	r0-r7,lr
8000834a:	16 97       	mov	r7,r11
8000834c:	76 46       	ld.w	r6,r11[0x10]
8000834e:	f4 02 14 05 	asr	r2,r10,0x5
80008352:	2f f6       	sub	r6,-1
80008354:	14 93       	mov	r3,r10
80008356:	18 94       	mov	r4,r12
80008358:	04 06       	add	r6,r2
8000835a:	76 1b       	ld.w	r11,r11[0x4]
8000835c:	6e 28       	ld.w	r8,r7[0x8]
8000835e:	c0 38       	rjmp	80008364 <__lshift+0x1c>
80008360:	2f fb       	sub	r11,-1
80008362:	a1 78       	lsl	r8,0x1
80008364:	10 36       	cp.w	r6,r8
80008366:	fe 99 ff fd 	brgt	80008360 <__lshift+0x18>
8000836a:	08 9c       	mov	r12,r4
8000836c:	cf ee       	rcall	80008168 <_Balloc>
8000836e:	30 09       	mov	r9,0
80008370:	18 95       	mov	r5,r12
80008372:	f8 c8 ff ec 	sub	r8,r12,-20
80008376:	12 9a       	mov	r10,r9
80008378:	c0 38       	rjmp	8000837e <__lshift+0x36>
8000837a:	10 aa       	st.w	r8++,r10
8000837c:	2f f9       	sub	r9,-1
8000837e:	04 39       	cp.w	r9,r2
80008380:	cf d5       	brlt	8000837a <__lshift+0x32>
80008382:	6e 4b       	ld.w	r11,r7[0x10]
80008384:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008388:	2f bb       	sub	r11,-5
8000838a:	ee c9 ff ec 	sub	r9,r7,-20
8000838e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80008392:	58 03       	cp.w	r3,0
80008394:	c1 30       	breq	800083ba <__lshift+0x72>
80008396:	e6 0c 11 20 	rsub	r12,r3,32
8000839a:	30 0a       	mov	r10,0
8000839c:	72 02       	ld.w	r2,r9[0x0]
8000839e:	e4 03 09 42 	lsl	r2,r2,r3
800083a2:	04 4a       	or	r10,r2
800083a4:	10 aa       	st.w	r8++,r10
800083a6:	13 0a       	ld.w	r10,r9++
800083a8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800083ac:	16 39       	cp.w	r9,r11
800083ae:	cf 73       	brcs	8000839c <__lshift+0x54>
800083b0:	91 0a       	st.w	r8[0x0],r10
800083b2:	58 0a       	cp.w	r10,0
800083b4:	c0 70       	breq	800083c2 <__lshift+0x7a>
800083b6:	2f f6       	sub	r6,-1
800083b8:	c0 58       	rjmp	800083c2 <__lshift+0x7a>
800083ba:	13 0a       	ld.w	r10,r9++
800083bc:	10 aa       	st.w	r8++,r10
800083be:	16 39       	cp.w	r9,r11
800083c0:	cf d3       	brcs	800083ba <__lshift+0x72>
800083c2:	08 9c       	mov	r12,r4
800083c4:	20 16       	sub	r6,1
800083c6:	0e 9b       	mov	r11,r7
800083c8:	8b 46       	st.w	r5[0x10],r6
800083ca:	cb 5e       	rcall	80008134 <_Bfree>
800083cc:	0a 9c       	mov	r12,r5
800083ce:	d8 32       	popm	r0-r7,pc

800083d0 <__multiply>:
800083d0:	d4 31       	pushm	r0-r7,lr
800083d2:	20 2d       	sub	sp,8
800083d4:	76 49       	ld.w	r9,r11[0x10]
800083d6:	74 48       	ld.w	r8,r10[0x10]
800083d8:	16 96       	mov	r6,r11
800083da:	14 95       	mov	r5,r10
800083dc:	10 39       	cp.w	r9,r8
800083de:	ec 08 17 50 	movlt	r8,r6
800083e2:	ea 06 17 50 	movlt	r6,r5
800083e6:	f0 05 17 50 	movlt	r5,r8
800083ea:	6c 28       	ld.w	r8,r6[0x8]
800083ec:	76 43       	ld.w	r3,r11[0x10]
800083ee:	74 42       	ld.w	r2,r10[0x10]
800083f0:	76 1b       	ld.w	r11,r11[0x4]
800083f2:	e4 03 00 07 	add	r7,r2,r3
800083f6:	10 37       	cp.w	r7,r8
800083f8:	f7 bb 09 ff 	subgt	r11,-1
800083fc:	cb 6e       	rcall	80008168 <_Balloc>
800083fe:	ee c4 ff fb 	sub	r4,r7,-5
80008402:	f8 c9 ff ec 	sub	r9,r12,-20
80008406:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000840a:	30 0a       	mov	r10,0
8000840c:	12 98       	mov	r8,r9
8000840e:	c0 28       	rjmp	80008412 <__multiply+0x42>
80008410:	10 aa       	st.w	r8++,r10
80008412:	08 38       	cp.w	r8,r4
80008414:	cf e3       	brcs	80008410 <__multiply+0x40>
80008416:	2f b3       	sub	r3,-5
80008418:	2f b2       	sub	r2,-5
8000841a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000841e:	ea 02 00 22 	add	r2,r5,r2<<0x2
80008422:	ec cb ff ec 	sub	r11,r6,-20
80008426:	50 12       	stdsp	sp[0x4],r2
80008428:	ea ca ff ec 	sub	r10,r5,-20
8000842c:	c4 48       	rjmp	800084b4 <__multiply+0xe4>
8000842e:	94 95       	ld.uh	r5,r10[0x2]
80008430:	58 05       	cp.w	r5,0
80008432:	c2 00       	breq	80008472 <__multiply+0xa2>
80008434:	12 98       	mov	r8,r9
80008436:	16 96       	mov	r6,r11
80008438:	30 0e       	mov	lr,0
8000843a:	50 09       	stdsp	sp[0x0],r9
8000843c:	0d 02       	ld.w	r2,r6++
8000843e:	e4 00 16 10 	lsr	r0,r2,0x10
80008442:	70 01       	ld.w	r1,r8[0x0]
80008444:	70 09       	ld.w	r9,r8[0x0]
80008446:	b1 81       	lsr	r1,0x10
80008448:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000844c:	e0 05 03 41 	mac	r1,r0,r5
80008450:	ab 32       	mul	r2,r5
80008452:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008456:	00 02       	add	r2,r0
80008458:	e4 0e 00 0e 	add	lr,r2,lr
8000845c:	b0 1e       	st.h	r8[0x2],lr
8000845e:	b1 8e       	lsr	lr,0x10
80008460:	1c 01       	add	r1,lr
80008462:	b0 01       	st.h	r8[0x0],r1
80008464:	e2 0e 16 10 	lsr	lr,r1,0x10
80008468:	2f c8       	sub	r8,-4
8000846a:	06 36       	cp.w	r6,r3
8000846c:	ce 83       	brcs	8000843c <__multiply+0x6c>
8000846e:	40 09       	lddsp	r9,sp[0x0]
80008470:	91 0e       	st.w	r8[0x0],lr
80008472:	94 86       	ld.uh	r6,r10[0x0]
80008474:	58 06       	cp.w	r6,0
80008476:	c1 d0       	breq	800084b0 <__multiply+0xe0>
80008478:	72 02       	ld.w	r2,r9[0x0]
8000847a:	12 98       	mov	r8,r9
8000847c:	16 9e       	mov	lr,r11
8000847e:	30 05       	mov	r5,0
80008480:	b0 12       	st.h	r8[0x2],r2
80008482:	1d 01       	ld.w	r1,lr++
80008484:	90 82       	ld.uh	r2,r8[0x0]
80008486:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000848a:	ad 30       	mul	r0,r6
8000848c:	e0 02 00 02 	add	r2,r0,r2
80008490:	e4 05 00 05 	add	r5,r2,r5
80008494:	b0 05       	st.h	r8[0x0],r5
80008496:	b1 85       	lsr	r5,0x10
80008498:	b1 81       	lsr	r1,0x10
8000849a:	2f c8       	sub	r8,-4
8000849c:	ad 31       	mul	r1,r6
8000849e:	90 92       	ld.uh	r2,r8[0x2]
800084a0:	e2 02 00 02 	add	r2,r1,r2
800084a4:	0a 02       	add	r2,r5
800084a6:	e4 05 16 10 	lsr	r5,r2,0x10
800084aa:	06 3e       	cp.w	lr,r3
800084ac:	ce a3       	brcs	80008480 <__multiply+0xb0>
800084ae:	91 02       	st.w	r8[0x0],r2
800084b0:	2f ca       	sub	r10,-4
800084b2:	2f c9       	sub	r9,-4
800084b4:	40 18       	lddsp	r8,sp[0x4]
800084b6:	10 3a       	cp.w	r10,r8
800084b8:	cb b3       	brcs	8000842e <__multiply+0x5e>
800084ba:	c0 28       	rjmp	800084be <__multiply+0xee>
800084bc:	20 17       	sub	r7,1
800084be:	58 07       	cp.w	r7,0
800084c0:	e0 8a 00 05 	brle	800084ca <__multiply+0xfa>
800084c4:	09 48       	ld.w	r8,--r4
800084c6:	58 08       	cp.w	r8,0
800084c8:	cf a0       	breq	800084bc <__multiply+0xec>
800084ca:	99 47       	st.w	r12[0x10],r7
800084cc:	2f ed       	sub	sp,-8
800084ce:	d8 32       	popm	r0-r7,pc

800084d0 <__i2b>:
800084d0:	d4 21       	pushm	r4-r7,lr
800084d2:	16 97       	mov	r7,r11
800084d4:	30 1b       	mov	r11,1
800084d6:	c4 9e       	rcall	80008168 <_Balloc>
800084d8:	30 19       	mov	r9,1
800084da:	99 57       	st.w	r12[0x14],r7
800084dc:	99 49       	st.w	r12[0x10],r9
800084de:	d8 22       	popm	r4-r7,pc

800084e0 <__multadd>:
800084e0:	d4 31       	pushm	r0-r7,lr
800084e2:	30 08       	mov	r8,0
800084e4:	12 95       	mov	r5,r9
800084e6:	16 97       	mov	r7,r11
800084e8:	18 96       	mov	r6,r12
800084ea:	76 44       	ld.w	r4,r11[0x10]
800084ec:	f6 c9 ff ec 	sub	r9,r11,-20
800084f0:	72 0b       	ld.w	r11,r9[0x0]
800084f2:	f6 0c 16 10 	lsr	r12,r11,0x10
800084f6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800084fa:	f4 0c 02 4c 	mul	r12,r10,r12
800084fe:	f4 0b 03 45 	mac	r5,r10,r11
80008502:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80008506:	b1 85       	lsr	r5,0x10
80008508:	18 05       	add	r5,r12
8000850a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000850e:	f8 0b 00 0b 	add	r11,r12,r11
80008512:	12 ab       	st.w	r9++,r11
80008514:	2f f8       	sub	r8,-1
80008516:	b1 85       	lsr	r5,0x10
80008518:	08 38       	cp.w	r8,r4
8000851a:	ce b5       	brlt	800084f0 <__multadd+0x10>
8000851c:	58 05       	cp.w	r5,0
8000851e:	c1 c0       	breq	80008556 <__multadd+0x76>
80008520:	6e 28       	ld.w	r8,r7[0x8]
80008522:	10 34       	cp.w	r4,r8
80008524:	c1 35       	brlt	8000854a <__multadd+0x6a>
80008526:	6e 1b       	ld.w	r11,r7[0x4]
80008528:	0c 9c       	mov	r12,r6
8000852a:	2f fb       	sub	r11,-1
8000852c:	c1 ee       	rcall	80008168 <_Balloc>
8000852e:	6e 4a       	ld.w	r10,r7[0x10]
80008530:	ee cb ff f4 	sub	r11,r7,-12
80008534:	18 93       	mov	r3,r12
80008536:	2f ea       	sub	r10,-2
80008538:	2f 4c       	sub	r12,-12
8000853a:	a3 6a       	lsl	r10,0x2
8000853c:	fe b0 de 3d 	rcall	800041b6 <memcpy>
80008540:	0e 9b       	mov	r11,r7
80008542:	0c 9c       	mov	r12,r6
80008544:	fe b0 fd f8 	rcall	80008134 <_Bfree>
80008548:	06 97       	mov	r7,r3
8000854a:	e8 c8 ff ff 	sub	r8,r4,-1
8000854e:	2f b4       	sub	r4,-5
80008550:	8f 48       	st.w	r7[0x10],r8
80008552:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008556:	0e 9c       	mov	r12,r7
80008558:	d8 32       	popm	r0-r7,pc
8000855a:	d7 03       	nop

8000855c <__pow5mult>:
8000855c:	d4 31       	pushm	r0-r7,lr
8000855e:	14 96       	mov	r6,r10
80008560:	18 97       	mov	r7,r12
80008562:	16 94       	mov	r4,r11
80008564:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008568:	c0 90       	breq	8000857a <__pow5mult+0x1e>
8000856a:	20 18       	sub	r8,1
8000856c:	fe c9 e3 08 	sub	r9,pc,-7416
80008570:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008574:	30 09       	mov	r9,0
80008576:	cb 5f       	rcall	800084e0 <__multadd>
80008578:	18 94       	mov	r4,r12
8000857a:	a3 46       	asr	r6,0x2
8000857c:	c3 40       	breq	800085e4 <__pow5mult+0x88>
8000857e:	6e 95       	ld.w	r5,r7[0x24]
80008580:	58 05       	cp.w	r5,0
80008582:	c0 91       	brne	80008594 <__pow5mult+0x38>
80008584:	31 0c       	mov	r12,16
80008586:	fe b0 fa fb 	rcall	80007b7c <malloc>
8000858a:	99 35       	st.w	r12[0xc],r5
8000858c:	8f 9c       	st.w	r7[0x24],r12
8000858e:	99 15       	st.w	r12[0x4],r5
80008590:	99 25       	st.w	r12[0x8],r5
80008592:	99 05       	st.w	r12[0x0],r5
80008594:	6e 93       	ld.w	r3,r7[0x24]
80008596:	66 25       	ld.w	r5,r3[0x8]
80008598:	58 05       	cp.w	r5,0
8000859a:	c0 c1       	brne	800085b2 <__pow5mult+0x56>
8000859c:	e0 6b 02 71 	mov	r11,625
800085a0:	0e 9c       	mov	r12,r7
800085a2:	c9 7f       	rcall	800084d0 <__i2b>
800085a4:	87 2c       	st.w	r3[0x8],r12
800085a6:	30 08       	mov	r8,0
800085a8:	18 95       	mov	r5,r12
800085aa:	99 08       	st.w	r12[0x0],r8
800085ac:	c0 38       	rjmp	800085b2 <__pow5mult+0x56>
800085ae:	06 9c       	mov	r12,r3
800085b0:	18 95       	mov	r5,r12
800085b2:	ed b6 00 00 	bld	r6,0x0
800085b6:	c0 b1       	brne	800085cc <__pow5mult+0x70>
800085b8:	08 9b       	mov	r11,r4
800085ba:	0a 9a       	mov	r10,r5
800085bc:	0e 9c       	mov	r12,r7
800085be:	c0 9f       	rcall	800083d0 <__multiply>
800085c0:	08 9b       	mov	r11,r4
800085c2:	18 93       	mov	r3,r12
800085c4:	0e 9c       	mov	r12,r7
800085c6:	06 94       	mov	r4,r3
800085c8:	fe b0 fd b6 	rcall	80008134 <_Bfree>
800085cc:	a1 56       	asr	r6,0x1
800085ce:	c0 b0       	breq	800085e4 <__pow5mult+0x88>
800085d0:	6a 03       	ld.w	r3,r5[0x0]
800085d2:	58 03       	cp.w	r3,0
800085d4:	ce d1       	brne	800085ae <__pow5mult+0x52>
800085d6:	0a 9a       	mov	r10,r5
800085d8:	0a 9b       	mov	r11,r5
800085da:	0e 9c       	mov	r12,r7
800085dc:	cf ae       	rcall	800083d0 <__multiply>
800085de:	8b 0c       	st.w	r5[0x0],r12
800085e0:	99 03       	st.w	r12[0x0],r3
800085e2:	ce 7b       	rjmp	800085b0 <__pow5mult+0x54>
800085e4:	08 9c       	mov	r12,r4
800085e6:	d8 32       	popm	r0-r7,pc

800085e8 <_realloc_r>:
800085e8:	d4 31       	pushm	r0-r7,lr
800085ea:	20 1d       	sub	sp,4
800085ec:	16 94       	mov	r4,r11
800085ee:	18 92       	mov	r2,r12
800085f0:	14 9b       	mov	r11,r10
800085f2:	58 04       	cp.w	r4,0
800085f4:	c0 51       	brne	800085fe <_realloc_r+0x16>
800085f6:	fe b0 fa cb 	rcall	80007b8c <_malloc_r>
800085fa:	18 95       	mov	r5,r12
800085fc:	c5 39       	rjmp	800088a2 <_realloc_r+0x2ba>
800085fe:	50 0a       	stdsp	sp[0x0],r10
80008600:	fe b0 fd 08 	rcall	80008010 <__malloc_lock>
80008604:	40 0b       	lddsp	r11,sp[0x0]
80008606:	f6 c8 ff f5 	sub	r8,r11,-11
8000860a:	e8 c1 00 08 	sub	r1,r4,8
8000860e:	10 96       	mov	r6,r8
80008610:	62 1c       	ld.w	r12,r1[0x4]
80008612:	e0 16 ff f8 	andl	r6,0xfff8
80008616:	59 68       	cp.w	r8,22
80008618:	f9 b6 08 10 	movls	r6,16
8000861c:	16 36       	cp.w	r6,r11
8000861e:	5f 38       	srlo	r8
80008620:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008624:	c0 50       	breq	8000862e <_realloc_r+0x46>
80008626:	30 c8       	mov	r8,12
80008628:	30 05       	mov	r5,0
8000862a:	85 38       	st.w	r2[0xc],r8
8000862c:	c3 b9       	rjmp	800088a2 <_realloc_r+0x2ba>
8000862e:	18 90       	mov	r0,r12
80008630:	e0 10 ff fc 	andl	r0,0xfffc
80008634:	0c 30       	cp.w	r0,r6
80008636:	e0 84 01 0b 	brge	8000884c <_realloc_r+0x264>
8000863a:	e0 68 01 1c 	mov	r8,284
8000863e:	e2 00 00 09 	add	r9,r1,r0
80008642:	70 25       	ld.w	r5,r8[0x8]
80008644:	0a 39       	cp.w	r9,r5
80008646:	c0 90       	breq	80008658 <_realloc_r+0x70>
80008648:	72 1a       	ld.w	r10,r9[0x4]
8000864a:	a1 ca       	cbr	r10,0x0
8000864c:	f2 0a 00 0a 	add	r10,r9,r10
80008650:	74 1a       	ld.w	r10,r10[0x4]
80008652:	ed ba 00 00 	bld	r10,0x0
80008656:	c2 20       	breq	8000869a <_realloc_r+0xb2>
80008658:	72 1a       	ld.w	r10,r9[0x4]
8000865a:	e0 1a ff fc 	andl	r10,0xfffc
8000865e:	f4 00 00 03 	add	r3,r10,r0
80008662:	0a 39       	cp.w	r9,r5
80008664:	c1 31       	brne	8000868a <_realloc_r+0xa2>
80008666:	ec c7 ff f0 	sub	r7,r6,-16
8000866a:	0e 33       	cp.w	r3,r7
8000866c:	c1 95       	brlt	8000869e <_realloc_r+0xb6>
8000866e:	e2 06 00 09 	add	r9,r1,r6
80008672:	0c 13       	sub	r3,r6
80008674:	a1 a3       	sbr	r3,0x0
80008676:	93 13       	st.w	r9[0x4],r3
80008678:	91 29       	st.w	r8[0x8],r9
8000867a:	04 9c       	mov	r12,r2
8000867c:	62 18       	ld.w	r8,r1[0x4]
8000867e:	08 95       	mov	r5,r4
80008680:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008684:	10 46       	or	r6,r8
80008686:	83 16       	st.w	r1[0x4],r6
80008688:	c0 b9       	rjmp	8000889e <_realloc_r+0x2b6>
8000868a:	0c 33       	cp.w	r3,r6
8000868c:	c0 95       	brlt	8000869e <_realloc_r+0xb6>
8000868e:	72 28       	ld.w	r8,r9[0x8]
80008690:	02 97       	mov	r7,r1
80008692:	72 39       	ld.w	r9,r9[0xc]
80008694:	93 28       	st.w	r9[0x8],r8
80008696:	91 39       	st.w	r8[0xc],r9
80008698:	cd c8       	rjmp	80008850 <_realloc_r+0x268>
8000869a:	30 0a       	mov	r10,0
8000869c:	14 99       	mov	r9,r10
8000869e:	ed bc 00 00 	bld	r12,0x0
800086a2:	e0 80 00 95 	breq	800087cc <_realloc_r+0x1e4>
800086a6:	62 07       	ld.w	r7,r1[0x0]
800086a8:	e2 07 01 07 	sub	r7,r1,r7
800086ac:	6e 1c       	ld.w	r12,r7[0x4]
800086ae:	e0 1c ff fc 	andl	r12,0xfffc
800086b2:	58 09       	cp.w	r9,0
800086b4:	c5 60       	breq	80008760 <_realloc_r+0x178>
800086b6:	f8 00 00 03 	add	r3,r12,r0
800086ba:	0a 39       	cp.w	r9,r5
800086bc:	c4 81       	brne	8000874c <_realloc_r+0x164>
800086be:	14 03       	add	r3,r10
800086c0:	ec c9 ff f0 	sub	r9,r6,-16
800086c4:	12 33       	cp.w	r3,r9
800086c6:	c4 d5       	brlt	80008760 <_realloc_r+0x178>
800086c8:	6e 3a       	ld.w	r10,r7[0xc]
800086ca:	6e 29       	ld.w	r9,r7[0x8]
800086cc:	95 29       	st.w	r10[0x8],r9
800086ce:	93 3a       	st.w	r9[0xc],r10
800086d0:	ee c5 ff f8 	sub	r5,r7,-8
800086d4:	e0 ca 00 04 	sub	r10,r0,4
800086d8:	e0 4a 00 24 	cp.w	r10,36
800086dc:	e0 8b 00 25 	brhi	80008726 <_realloc_r+0x13e>
800086e0:	0a 99       	mov	r9,r5
800086e2:	59 3a       	cp.w	r10,19
800086e4:	e0 88 00 1a 	brls	80008718 <_realloc_r+0x130>
800086e8:	09 09       	ld.w	r9,r4++
800086ea:	8b 09       	st.w	r5[0x0],r9
800086ec:	09 09       	ld.w	r9,r4++
800086ee:	8f 39       	st.w	r7[0xc],r9
800086f0:	ee c9 ff f0 	sub	r9,r7,-16
800086f4:	59 ba       	cp.w	r10,27
800086f6:	e0 88 00 11 	brls	80008718 <_realloc_r+0x130>
800086fa:	09 0b       	ld.w	r11,r4++
800086fc:	93 0b       	st.w	r9[0x0],r11
800086fe:	09 09       	ld.w	r9,r4++
80008700:	8f 59       	st.w	r7[0x14],r9
80008702:	ee c9 ff e8 	sub	r9,r7,-24
80008706:	e0 4a 00 24 	cp.w	r10,36
8000870a:	c0 71       	brne	80008718 <_realloc_r+0x130>
8000870c:	09 0a       	ld.w	r10,r4++
8000870e:	93 0a       	st.w	r9[0x0],r10
80008710:	ee c9 ff e0 	sub	r9,r7,-32
80008714:	09 0a       	ld.w	r10,r4++
80008716:	8f 7a       	st.w	r7[0x1c],r10
80008718:	09 0a       	ld.w	r10,r4++
8000871a:	12 aa       	st.w	r9++,r10
8000871c:	68 0a       	ld.w	r10,r4[0x0]
8000871e:	93 0a       	st.w	r9[0x0],r10
80008720:	68 1a       	ld.w	r10,r4[0x4]
80008722:	93 1a       	st.w	r9[0x4],r10
80008724:	c0 78       	rjmp	80008732 <_realloc_r+0x14a>
80008726:	50 08       	stdsp	sp[0x0],r8
80008728:	08 9b       	mov	r11,r4
8000872a:	0a 9c       	mov	r12,r5
8000872c:	fe b0 fc 53 	rcall	80007fd2 <memmove>
80008730:	40 08       	lddsp	r8,sp[0x0]
80008732:	ee 06 00 09 	add	r9,r7,r6
80008736:	0c 13       	sub	r3,r6
80008738:	a1 a3       	sbr	r3,0x0
8000873a:	93 13       	st.w	r9[0x4],r3
8000873c:	91 29       	st.w	r8[0x8],r9
8000873e:	04 9c       	mov	r12,r2
80008740:	6e 18       	ld.w	r8,r7[0x4]
80008742:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008746:	10 46       	or	r6,r8
80008748:	8f 16       	st.w	r7[0x4],r6
8000874a:	ca a8       	rjmp	8000889e <_realloc_r+0x2b6>
8000874c:	14 03       	add	r3,r10
8000874e:	0c 33       	cp.w	r3,r6
80008750:	c0 85       	brlt	80008760 <_realloc_r+0x178>
80008752:	72 28       	ld.w	r8,r9[0x8]
80008754:	72 39       	ld.w	r9,r9[0xc]
80008756:	93 28       	st.w	r9[0x8],r8
80008758:	91 39       	st.w	r8[0xc],r9
8000875a:	6e 28       	ld.w	r8,r7[0x8]
8000875c:	6e 39       	ld.w	r9,r7[0xc]
8000875e:	c0 78       	rjmp	8000876c <_realloc_r+0x184>
80008760:	f8 00 00 03 	add	r3,r12,r0
80008764:	0c 33       	cp.w	r3,r6
80008766:	c3 35       	brlt	800087cc <_realloc_r+0x1e4>
80008768:	6e 39       	ld.w	r9,r7[0xc]
8000876a:	6e 28       	ld.w	r8,r7[0x8]
8000876c:	93 28       	st.w	r9[0x8],r8
8000876e:	91 39       	st.w	r8[0xc],r9
80008770:	e0 ca 00 04 	sub	r10,r0,4
80008774:	ee cc ff f8 	sub	r12,r7,-8
80008778:	e0 4a 00 24 	cp.w	r10,36
8000877c:	e0 8b 00 24 	brhi	800087c4 <_realloc_r+0x1dc>
80008780:	59 3a       	cp.w	r10,19
80008782:	e0 88 00 1a 	brls	800087b6 <_realloc_r+0x1ce>
80008786:	09 08       	ld.w	r8,r4++
80008788:	99 08       	st.w	r12[0x0],r8
8000878a:	09 08       	ld.w	r8,r4++
8000878c:	8f 38       	st.w	r7[0xc],r8
8000878e:	ee cc ff f0 	sub	r12,r7,-16
80008792:	59 ba       	cp.w	r10,27
80008794:	e0 88 00 11 	brls	800087b6 <_realloc_r+0x1ce>
80008798:	09 08       	ld.w	r8,r4++
8000879a:	99 08       	st.w	r12[0x0],r8
8000879c:	09 08       	ld.w	r8,r4++
8000879e:	8f 58       	st.w	r7[0x14],r8
800087a0:	ee cc ff e8 	sub	r12,r7,-24
800087a4:	e0 4a 00 24 	cp.w	r10,36
800087a8:	c0 71       	brne	800087b6 <_realloc_r+0x1ce>
800087aa:	09 08       	ld.w	r8,r4++
800087ac:	99 08       	st.w	r12[0x0],r8
800087ae:	ee cc ff e0 	sub	r12,r7,-32
800087b2:	09 08       	ld.w	r8,r4++
800087b4:	8f 78       	st.w	r7[0x1c],r8
800087b6:	09 08       	ld.w	r8,r4++
800087b8:	18 a8       	st.w	r12++,r8
800087ba:	68 08       	ld.w	r8,r4[0x0]
800087bc:	99 08       	st.w	r12[0x0],r8
800087be:	68 18       	ld.w	r8,r4[0x4]
800087c0:	99 18       	st.w	r12[0x4],r8
800087c2:	c4 78       	rjmp	80008850 <_realloc_r+0x268>
800087c4:	08 9b       	mov	r11,r4
800087c6:	fe b0 fc 06 	rcall	80007fd2 <memmove>
800087ca:	c4 38       	rjmp	80008850 <_realloc_r+0x268>
800087cc:	04 9c       	mov	r12,r2
800087ce:	fe b0 f9 df 	rcall	80007b8c <_malloc_r>
800087d2:	18 95       	mov	r5,r12
800087d4:	c3 a0       	breq	80008848 <_realloc_r+0x260>
800087d6:	62 18       	ld.w	r8,r1[0x4]
800087d8:	f8 c9 00 08 	sub	r9,r12,8
800087dc:	a1 c8       	cbr	r8,0x0
800087de:	e2 08 00 08 	add	r8,r1,r8
800087e2:	10 39       	cp.w	r9,r8
800087e4:	c0 71       	brne	800087f2 <_realloc_r+0x20a>
800087e6:	72 13       	ld.w	r3,r9[0x4]
800087e8:	02 97       	mov	r7,r1
800087ea:	e0 13 ff fc 	andl	r3,0xfffc
800087ee:	00 03       	add	r3,r0
800087f0:	c3 08       	rjmp	80008850 <_realloc_r+0x268>
800087f2:	e0 ca 00 04 	sub	r10,r0,4
800087f6:	e0 4a 00 24 	cp.w	r10,36
800087fa:	e0 8b 00 20 	brhi	8000883a <_realloc_r+0x252>
800087fe:	08 99       	mov	r9,r4
80008800:	18 98       	mov	r8,r12
80008802:	59 3a       	cp.w	r10,19
80008804:	e0 88 00 14 	brls	8000882c <_realloc_r+0x244>
80008808:	13 0b       	ld.w	r11,r9++
8000880a:	10 ab       	st.w	r8++,r11
8000880c:	13 0b       	ld.w	r11,r9++
8000880e:	10 ab       	st.w	r8++,r11
80008810:	59 ba       	cp.w	r10,27
80008812:	e0 88 00 0d 	brls	8000882c <_realloc_r+0x244>
80008816:	13 0b       	ld.w	r11,r9++
80008818:	10 ab       	st.w	r8++,r11
8000881a:	13 0b       	ld.w	r11,r9++
8000881c:	10 ab       	st.w	r8++,r11
8000881e:	e0 4a 00 24 	cp.w	r10,36
80008822:	c0 51       	brne	8000882c <_realloc_r+0x244>
80008824:	13 0a       	ld.w	r10,r9++
80008826:	10 aa       	st.w	r8++,r10
80008828:	13 0a       	ld.w	r10,r9++
8000882a:	10 aa       	st.w	r8++,r10
8000882c:	13 0a       	ld.w	r10,r9++
8000882e:	10 aa       	st.w	r8++,r10
80008830:	72 0a       	ld.w	r10,r9[0x0]
80008832:	91 0a       	st.w	r8[0x0],r10
80008834:	72 19       	ld.w	r9,r9[0x4]
80008836:	91 19       	st.w	r8[0x4],r9
80008838:	c0 48       	rjmp	80008840 <_realloc_r+0x258>
8000883a:	08 9b       	mov	r11,r4
8000883c:	fe b0 fb cb 	rcall	80007fd2 <memmove>
80008840:	08 9b       	mov	r11,r4
80008842:	04 9c       	mov	r12,r2
80008844:	fe b0 f6 fe 	rcall	80007640 <_free_r>
80008848:	04 9c       	mov	r12,r2
8000884a:	c2 a8       	rjmp	8000889e <_realloc_r+0x2b6>
8000884c:	00 93       	mov	r3,r0
8000884e:	02 97       	mov	r7,r1
80008850:	e6 06 01 09 	sub	r9,r3,r6
80008854:	6e 18       	ld.w	r8,r7[0x4]
80008856:	58 f9       	cp.w	r9,15
80008858:	e0 88 00 16 	brls	80008884 <_realloc_r+0x29c>
8000885c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008860:	ed e8 10 08 	or	r8,r6,r8
80008864:	8f 18       	st.w	r7[0x4],r8
80008866:	12 98       	mov	r8,r9
80008868:	a1 a8       	sbr	r8,0x0
8000886a:	ee 06 00 0b 	add	r11,r7,r6
8000886e:	f6 09 00 09 	add	r9,r11,r9
80008872:	97 18       	st.w	r11[0x4],r8
80008874:	72 18       	ld.w	r8,r9[0x4]
80008876:	a1 a8       	sbr	r8,0x0
80008878:	2f 8b       	sub	r11,-8
8000887a:	93 18       	st.w	r9[0x4],r8
8000887c:	04 9c       	mov	r12,r2
8000887e:	fe b0 f6 e1 	rcall	80007640 <_free_r>
80008882:	c0 b8       	rjmp	80008898 <_realloc_r+0x2b0>
80008884:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008888:	e7 e8 10 08 	or	r8,r3,r8
8000888c:	8f 18       	st.w	r7[0x4],r8
8000888e:	ee 03 00 03 	add	r3,r7,r3
80008892:	66 18       	ld.w	r8,r3[0x4]
80008894:	a1 a8       	sbr	r8,0x0
80008896:	87 18       	st.w	r3[0x4],r8
80008898:	04 9c       	mov	r12,r2
8000889a:	ee c5 ff f8 	sub	r5,r7,-8
8000889e:	fe b0 fb ba 	rcall	80008012 <__malloc_unlock>
800088a2:	0a 9c       	mov	r12,r5
800088a4:	2f fd       	sub	sp,-4
800088a6:	d8 32       	popm	r0-r7,pc

800088a8 <__isinfd>:
800088a8:	14 98       	mov	r8,r10
800088aa:	fc 19 7f f0 	movh	r9,0x7ff0
800088ae:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800088b2:	f0 0b 11 00 	rsub	r11,r8,0
800088b6:	f7 e8 10 08 	or	r8,r11,r8
800088ba:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800088be:	f2 08 01 08 	sub	r8,r9,r8
800088c2:	f0 0c 11 00 	rsub	r12,r8,0
800088c6:	f9 e8 10 08 	or	r8,r12,r8
800088ca:	f0 0c 14 1f 	asr	r12,r8,0x1f
800088ce:	2f fc       	sub	r12,-1
800088d0:	5e fc       	retal	r12

800088d2 <__isnand>:
800088d2:	14 98       	mov	r8,r10
800088d4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800088d8:	f0 0c 11 00 	rsub	r12,r8,0
800088dc:	10 4c       	or	r12,r8
800088de:	fc 18 7f f0 	movh	r8,0x7ff0
800088e2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800088e6:	f0 0c 01 0c 	sub	r12,r8,r12
800088ea:	bf 9c       	lsr	r12,0x1f
800088ec:	5e fc       	retal	r12
800088ee:	d7 03       	nop

800088f0 <_sbrk_r>:
800088f0:	d4 21       	pushm	r4-r7,lr
800088f2:	30 08       	mov	r8,0
800088f4:	18 97       	mov	r7,r12
800088f6:	e0 66 08 18 	mov	r6,2072
800088fa:	16 9c       	mov	r12,r11
800088fc:	8d 08       	st.w	r6[0x0],r8
800088fe:	ca fc       	rcall	80008a5c <_sbrk>
80008900:	5b fc       	cp.w	r12,-1
80008902:	c0 51       	brne	8000890c <_sbrk_r+0x1c>
80008904:	6c 08       	ld.w	r8,r6[0x0]
80008906:	58 08       	cp.w	r8,0
80008908:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000890c:	d8 22       	popm	r4-r7,pc
8000890e:	d7 03       	nop

80008910 <__sclose>:
80008910:	d4 01       	pushm	lr
80008912:	96 7b       	ld.sh	r11,r11[0xe]
80008914:	cf ec       	rcall	80008b10 <_close_r>
80008916:	d8 02       	popm	pc

80008918 <__sseek>:
80008918:	d4 21       	pushm	r4-r7,lr
8000891a:	16 97       	mov	r7,r11
8000891c:	96 7b       	ld.sh	r11,r11[0xe]
8000891e:	c8 5d       	rcall	80008c28 <_lseek_r>
80008920:	8e 68       	ld.sh	r8,r7[0xc]
80008922:	10 99       	mov	r9,r8
80008924:	ad c8       	cbr	r8,0xc
80008926:	ad a9       	sbr	r9,0xc
80008928:	5b fc       	cp.w	r12,-1
8000892a:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000892e:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008932:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008936:	d8 22       	popm	r4-r7,pc

80008938 <__swrite>:
80008938:	d4 21       	pushm	r4-r7,lr
8000893a:	96 68       	ld.sh	r8,r11[0xc]
8000893c:	16 97       	mov	r7,r11
8000893e:	14 95       	mov	r5,r10
80008940:	12 94       	mov	r4,r9
80008942:	e2 18 01 00 	andl	r8,0x100,COH
80008946:	18 96       	mov	r6,r12
80008948:	c0 50       	breq	80008952 <__swrite+0x1a>
8000894a:	30 29       	mov	r9,2
8000894c:	30 0a       	mov	r10,0
8000894e:	96 7b       	ld.sh	r11,r11[0xe]
80008950:	c6 cd       	rcall	80008c28 <_lseek_r>
80008952:	8e 68       	ld.sh	r8,r7[0xc]
80008954:	ad c8       	cbr	r8,0xc
80008956:	08 99       	mov	r9,r4
80008958:	0a 9a       	mov	r10,r5
8000895a:	8e 7b       	ld.sh	r11,r7[0xe]
8000895c:	0c 9c       	mov	r12,r6
8000895e:	ae 68       	st.h	r7[0xc],r8
80008960:	c9 ac       	rcall	80008a94 <_write_r>
80008962:	d8 22       	popm	r4-r7,pc

80008964 <__sread>:
80008964:	d4 21       	pushm	r4-r7,lr
80008966:	16 97       	mov	r7,r11
80008968:	96 7b       	ld.sh	r11,r11[0xe]
8000896a:	c7 1d       	rcall	80008c4c <_read_r>
8000896c:	c0 65       	brlt	80008978 <__sread+0x14>
8000896e:	6f 58       	ld.w	r8,r7[0x54]
80008970:	18 08       	add	r8,r12
80008972:	ef 48 00 54 	st.w	r7[84],r8
80008976:	d8 22       	popm	r4-r7,pc
80008978:	8e 68       	ld.sh	r8,r7[0xc]
8000897a:	ad c8       	cbr	r8,0xc
8000897c:	ae 68       	st.h	r7[0xc],r8
8000897e:	d8 22       	popm	r4-r7,pc

80008980 <strlen>:
80008980:	30 09       	mov	r9,0
80008982:	18 98       	mov	r8,r12
80008984:	c0 28       	rjmp	80008988 <strlen+0x8>
80008986:	2f f8       	sub	r8,-1
80008988:	11 8a       	ld.ub	r10,r8[0x0]
8000898a:	f2 0a 18 00 	cp.b	r10,r9
8000898e:	cf c1       	brne	80008986 <strlen+0x6>
80008990:	f0 0c 01 0c 	sub	r12,r8,r12
80008994:	5e fc       	retal	r12
80008996:	d7 03       	nop

80008998 <_close>:
80008998:	30 28       	mov	r8,2
8000899a:	d6 73       	breakpoint
8000899c:	3f fc       	mov	r12,-1
8000899e:	35 8b       	mov	r11,88
800089a0:	58 0c       	cp.w	r12,0
800089a2:	5e 4c       	retge	r12
800089a4:	e0 6a 08 18 	mov	r10,2072
800089a8:	95 0b       	st.w	r10[0x0],r11
800089aa:	5e fc       	retal	r12

800089ac <_lseek>:
800089ac:	30 58       	mov	r8,5
800089ae:	d6 73       	breakpoint
800089b0:	3f fc       	mov	r12,-1
800089b2:	35 8b       	mov	r11,88
800089b4:	58 0c       	cp.w	r12,0
800089b6:	5e 4c       	retge	r12
800089b8:	e0 6a 08 18 	mov	r10,2072
800089bc:	95 0b       	st.w	r10[0x0],r11
800089be:	5e fc       	retal	r12

800089c0 <_read>:
800089c0:	30 38       	mov	r8,3
800089c2:	d6 73       	breakpoint
800089c4:	3f fc       	mov	r12,-1
800089c6:	35 8b       	mov	r11,88
800089c8:	58 0c       	cp.w	r12,0
800089ca:	5e 4c       	retge	r12
800089cc:	e0 6a 08 18 	mov	r10,2072
800089d0:	95 0b       	st.w	r10[0x0],r11
800089d2:	5e fc       	retal	r12

800089d4 <_write>:
800089d4:	30 48       	mov	r8,4
800089d6:	d6 73       	breakpoint
800089d8:	3f fc       	mov	r12,-1
800089da:	35 8b       	mov	r11,88
800089dc:	58 0c       	cp.w	r12,0
800089de:	5e 4c       	retge	r12
800089e0:	e0 6a 08 18 	mov	r10,2072
800089e4:	95 0b       	st.w	r10[0x0],r11
800089e6:	5e fc       	retal	r12

800089e8 <isatty>:
800089e8:	30 b8       	mov	r8,11
800089ea:	d6 73       	breakpoint
800089ec:	3f fc       	mov	r12,-1
800089ee:	35 8b       	mov	r11,88
800089f0:	58 0c       	cp.w	r12,0
800089f2:	5e 4c       	retge	r12
800089f4:	e0 6a 08 18 	mov	r10,2072
800089f8:	95 0b       	st.w	r10[0x0],r11
800089fa:	5e fc       	retal	r12

800089fc <_fstat_host>:
800089fc:	30 98       	mov	r8,9
800089fe:	d6 73       	breakpoint
80008a00:	3f fc       	mov	r12,-1
80008a02:	35 8b       	mov	r11,88
80008a04:	58 0c       	cp.w	r12,0
80008a06:	5e 4c       	retge	r12
80008a08:	e0 6a 08 18 	mov	r10,2072
80008a0c:	95 0b       	st.w	r10[0x0],r11
80008a0e:	5e fc       	retal	r12

80008a10 <_fstat>:
80008a10:	d4 21       	pushm	r4-r7,lr
80008a12:	21 0d       	sub	sp,64
80008a14:	16 97       	mov	r7,r11
80008a16:	1a 9b       	mov	r11,sp
80008a18:	cf 2f       	rcall	800089fc <_fstat_host>
80008a1a:	c0 34       	brge	80008a20 <_fstat+0x10>
80008a1c:	3f fc       	mov	r12,-1
80008a1e:	c1 c8       	rjmp	80008a56 <_fstat+0x46>
80008a20:	40 08       	lddsp	r8,sp[0x0]
80008a22:	ae 08       	st.h	r7[0x0],r8
80008a24:	40 18       	lddsp	r8,sp[0x4]
80008a26:	ae 18       	st.h	r7[0x2],r8
80008a28:	40 28       	lddsp	r8,sp[0x8]
80008a2a:	8f 18       	st.w	r7[0x4],r8
80008a2c:	40 38       	lddsp	r8,sp[0xc]
80008a2e:	ae 48       	st.h	r7[0x8],r8
80008a30:	40 48       	lddsp	r8,sp[0x10]
80008a32:	ae 58       	st.h	r7[0xa],r8
80008a34:	40 58       	lddsp	r8,sp[0x14]
80008a36:	ae 68       	st.h	r7[0xc],r8
80008a38:	40 68       	lddsp	r8,sp[0x18]
80008a3a:	ae 78       	st.h	r7[0xe],r8
80008a3c:	40 88       	lddsp	r8,sp[0x20]
80008a3e:	8f 48       	st.w	r7[0x10],r8
80008a40:	40 a8       	lddsp	r8,sp[0x28]
80008a42:	8f b8       	st.w	r7[0x2c],r8
80008a44:	40 c8       	lddsp	r8,sp[0x30]
80008a46:	8f c8       	st.w	r7[0x30],r8
80008a48:	40 d8       	lddsp	r8,sp[0x34]
80008a4a:	8f 58       	st.w	r7[0x14],r8
80008a4c:	40 e8       	lddsp	r8,sp[0x38]
80008a4e:	30 0c       	mov	r12,0
80008a50:	8f 78       	st.w	r7[0x1c],r8
80008a52:	40 f8       	lddsp	r8,sp[0x3c]
80008a54:	8f 98       	st.w	r7[0x24],r8
80008a56:	2f 0d       	sub	sp,-64
80008a58:	d8 22       	popm	r4-r7,pc
80008a5a:	d7 03       	nop

80008a5c <_sbrk>:
80008a5c:	d4 01       	pushm	lr
80008a5e:	e0 68 06 70 	mov	r8,1648
80008a62:	70 09       	ld.w	r9,r8[0x0]
80008a64:	58 09       	cp.w	r9,0
80008a66:	c0 41       	brne	80008a6e <_sbrk+0x12>
80008a68:	e0 69 08 20 	mov	r9,2080
80008a6c:	91 09       	st.w	r8[0x0],r9
80008a6e:	e0 69 06 70 	mov	r9,1648
80008a72:	e0 6a 30 00 	mov	r10,12288
80008a76:	72 08       	ld.w	r8,r9[0x0]
80008a78:	f0 0c 00 0c 	add	r12,r8,r12
80008a7c:	14 3c       	cp.w	r12,r10
80008a7e:	e0 8b 00 04 	brhi	80008a86 <_sbrk+0x2a>
80008a82:	93 0c       	st.w	r9[0x0],r12
80008a84:	c0 58       	rjmp	80008a8e <_sbrk+0x32>
80008a86:	c5 5c       	rcall	80008b30 <__errno>
80008a88:	30 c8       	mov	r8,12
80008a8a:	99 08       	st.w	r12[0x0],r8
80008a8c:	3f f8       	mov	r8,-1
80008a8e:	10 9c       	mov	r12,r8
80008a90:	d8 02       	popm	pc
80008a92:	d7 03       	nop

80008a94 <_write_r>:
80008a94:	d4 21       	pushm	r4-r7,lr
80008a96:	16 98       	mov	r8,r11
80008a98:	18 97       	mov	r7,r12
80008a9a:	10 9c       	mov	r12,r8
80008a9c:	30 08       	mov	r8,0
80008a9e:	14 9b       	mov	r11,r10
80008aa0:	e0 66 08 18 	mov	r6,2072
80008aa4:	12 9a       	mov	r10,r9
80008aa6:	8d 08       	st.w	r6[0x0],r8
80008aa8:	c9 6f       	rcall	800089d4 <_write>
80008aaa:	5b fc       	cp.w	r12,-1
80008aac:	c0 51       	brne	80008ab6 <_write_r+0x22>
80008aae:	6c 08       	ld.w	r8,r6[0x0]
80008ab0:	58 08       	cp.w	r8,0
80008ab2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008ab6:	d8 22       	popm	r4-r7,pc

80008ab8 <_calloc_r>:
80008ab8:	d4 21       	pushm	r4-r7,lr
80008aba:	f4 0b 02 4b 	mul	r11,r10,r11
80008abe:	fe b0 f8 67 	rcall	80007b8c <_malloc_r>
80008ac2:	18 97       	mov	r7,r12
80008ac4:	c2 30       	breq	80008b0a <_calloc_r+0x52>
80008ac6:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008aca:	e0 1a ff fc 	andl	r10,0xfffc
80008ace:	20 4a       	sub	r10,4
80008ad0:	e0 4a 00 24 	cp.w	r10,36
80008ad4:	e0 8b 00 18 	brhi	80008b04 <_calloc_r+0x4c>
80008ad8:	18 98       	mov	r8,r12
80008ada:	59 3a       	cp.w	r10,19
80008adc:	e0 88 00 0f 	brls	80008afa <_calloc_r+0x42>
80008ae0:	30 09       	mov	r9,0
80008ae2:	10 a9       	st.w	r8++,r9
80008ae4:	10 a9       	st.w	r8++,r9
80008ae6:	59 ba       	cp.w	r10,27
80008ae8:	e0 88 00 09 	brls	80008afa <_calloc_r+0x42>
80008aec:	10 a9       	st.w	r8++,r9
80008aee:	10 a9       	st.w	r8++,r9
80008af0:	e0 4a 00 24 	cp.w	r10,36
80008af4:	c0 31       	brne	80008afa <_calloc_r+0x42>
80008af6:	10 a9       	st.w	r8++,r9
80008af8:	10 a9       	st.w	r8++,r9
80008afa:	30 09       	mov	r9,0
80008afc:	10 a9       	st.w	r8++,r9
80008afe:	91 19       	st.w	r8[0x4],r9
80008b00:	91 09       	st.w	r8[0x0],r9
80008b02:	c0 48       	rjmp	80008b0a <_calloc_r+0x52>
80008b04:	30 0b       	mov	r11,0
80008b06:	fe b0 db fc 	rcall	800042fe <memset>
80008b0a:	0e 9c       	mov	r12,r7
80008b0c:	d8 22       	popm	r4-r7,pc
80008b0e:	d7 03       	nop

80008b10 <_close_r>:
80008b10:	d4 21       	pushm	r4-r7,lr
80008b12:	30 08       	mov	r8,0
80008b14:	18 97       	mov	r7,r12
80008b16:	e0 66 08 18 	mov	r6,2072
80008b1a:	16 9c       	mov	r12,r11
80008b1c:	8d 08       	st.w	r6[0x0],r8
80008b1e:	c3 df       	rcall	80008998 <_close>
80008b20:	5b fc       	cp.w	r12,-1
80008b22:	c0 51       	brne	80008b2c <_close_r+0x1c>
80008b24:	6c 08       	ld.w	r8,r6[0x0]
80008b26:	58 08       	cp.w	r8,0
80008b28:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b2c:	d8 22       	popm	r4-r7,pc
80008b2e:	d7 03       	nop

80008b30 <__errno>:
80008b30:	e0 68 01 18 	mov	r8,280
80008b34:	70 0c       	ld.w	r12,r8[0x0]
80008b36:	2f 4c       	sub	r12,-12
80008b38:	5e fc       	retal	r12
80008b3a:	d7 03       	nop

80008b3c <_fclose_r>:
80008b3c:	d4 21       	pushm	r4-r7,lr
80008b3e:	18 96       	mov	r6,r12
80008b40:	16 97       	mov	r7,r11
80008b42:	58 0b       	cp.w	r11,0
80008b44:	c0 31       	brne	80008b4a <_fclose_r+0xe>
80008b46:	16 95       	mov	r5,r11
80008b48:	c5 38       	rjmp	80008bee <_fclose_r+0xb2>
80008b4a:	fe b0 f4 8f 	rcall	80007468 <__sfp_lock_acquire>
80008b4e:	58 06       	cp.w	r6,0
80008b50:	c0 70       	breq	80008b5e <_fclose_r+0x22>
80008b52:	6c 68       	ld.w	r8,r6[0x18]
80008b54:	58 08       	cp.w	r8,0
80008b56:	c0 41       	brne	80008b5e <_fclose_r+0x22>
80008b58:	0c 9c       	mov	r12,r6
80008b5a:	fe b0 f4 d9 	rcall	8000750c <__sinit>
80008b5e:	fe c8 e9 a2 	sub	r8,pc,-5726
80008b62:	10 37       	cp.w	r7,r8
80008b64:	c0 31       	brne	80008b6a <_fclose_r+0x2e>
80008b66:	6c 07       	ld.w	r7,r6[0x0]
80008b68:	c0 c8       	rjmp	80008b80 <_fclose_r+0x44>
80008b6a:	fe c8 e9 8e 	sub	r8,pc,-5746
80008b6e:	10 37       	cp.w	r7,r8
80008b70:	c0 31       	brne	80008b76 <_fclose_r+0x3a>
80008b72:	6c 17       	ld.w	r7,r6[0x4]
80008b74:	c0 68       	rjmp	80008b80 <_fclose_r+0x44>
80008b76:	fe c8 e9 7a 	sub	r8,pc,-5766
80008b7a:	10 37       	cp.w	r7,r8
80008b7c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008b80:	8e 69       	ld.sh	r9,r7[0xc]
80008b82:	30 08       	mov	r8,0
80008b84:	f0 09 19 00 	cp.h	r9,r8
80008b88:	c0 51       	brne	80008b92 <_fclose_r+0x56>
80008b8a:	fe b0 f4 70 	rcall	8000746a <__sfp_lock_release>
80008b8e:	30 05       	mov	r5,0
80008b90:	c2 f8       	rjmp	80008bee <_fclose_r+0xb2>
80008b92:	0e 9b       	mov	r11,r7
80008b94:	0c 9c       	mov	r12,r6
80008b96:	fe b0 f3 e3 	rcall	8000735c <_fflush_r>
80008b9a:	6e c8       	ld.w	r8,r7[0x30]
80008b9c:	18 95       	mov	r5,r12
80008b9e:	58 08       	cp.w	r8,0
80008ba0:	c0 60       	breq	80008bac <_fclose_r+0x70>
80008ba2:	6e 8b       	ld.w	r11,r7[0x20]
80008ba4:	0c 9c       	mov	r12,r6
80008ba6:	5d 18       	icall	r8
80008ba8:	f9 b5 05 ff 	movlt	r5,-1
80008bac:	8e 68       	ld.sh	r8,r7[0xc]
80008bae:	ed b8 00 07 	bld	r8,0x7
80008bb2:	c0 51       	brne	80008bbc <_fclose_r+0x80>
80008bb4:	6e 4b       	ld.w	r11,r7[0x10]
80008bb6:	0c 9c       	mov	r12,r6
80008bb8:	fe b0 f5 44 	rcall	80007640 <_free_r>
80008bbc:	6e db       	ld.w	r11,r7[0x34]
80008bbe:	58 0b       	cp.w	r11,0
80008bc0:	c0 a0       	breq	80008bd4 <_fclose_r+0x98>
80008bc2:	ee c8 ff bc 	sub	r8,r7,-68
80008bc6:	10 3b       	cp.w	r11,r8
80008bc8:	c0 40       	breq	80008bd0 <_fclose_r+0x94>
80008bca:	0c 9c       	mov	r12,r6
80008bcc:	fe b0 f5 3a 	rcall	80007640 <_free_r>
80008bd0:	30 08       	mov	r8,0
80008bd2:	8f d8       	st.w	r7[0x34],r8
80008bd4:	6f 2b       	ld.w	r11,r7[0x48]
80008bd6:	58 0b       	cp.w	r11,0
80008bd8:	c0 70       	breq	80008be6 <_fclose_r+0xaa>
80008bda:	0c 9c       	mov	r12,r6
80008bdc:	fe b0 f5 32 	rcall	80007640 <_free_r>
80008be0:	30 08       	mov	r8,0
80008be2:	ef 48 00 48 	st.w	r7[72],r8
80008be6:	30 08       	mov	r8,0
80008be8:	ae 68       	st.h	r7[0xc],r8
80008bea:	fe b0 f4 40 	rcall	8000746a <__sfp_lock_release>
80008bee:	0a 9c       	mov	r12,r5
80008bf0:	d8 22       	popm	r4-r7,pc
80008bf2:	d7 03       	nop

80008bf4 <fclose>:
80008bf4:	d4 01       	pushm	lr
80008bf6:	e0 68 01 18 	mov	r8,280
80008bfa:	18 9b       	mov	r11,r12
80008bfc:	70 0c       	ld.w	r12,r8[0x0]
80008bfe:	c9 ff       	rcall	80008b3c <_fclose_r>
80008c00:	d8 02       	popm	pc
80008c02:	d7 03       	nop

80008c04 <_fstat_r>:
80008c04:	d4 21       	pushm	r4-r7,lr
80008c06:	16 98       	mov	r8,r11
80008c08:	18 97       	mov	r7,r12
80008c0a:	10 9c       	mov	r12,r8
80008c0c:	30 08       	mov	r8,0
80008c0e:	e0 66 08 18 	mov	r6,2072
80008c12:	14 9b       	mov	r11,r10
80008c14:	8d 08       	st.w	r6[0x0],r8
80008c16:	cf de       	rcall	80008a10 <_fstat>
80008c18:	5b fc       	cp.w	r12,-1
80008c1a:	c0 51       	brne	80008c24 <_fstat_r+0x20>
80008c1c:	6c 08       	ld.w	r8,r6[0x0]
80008c1e:	58 08       	cp.w	r8,0
80008c20:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008c24:	d8 22       	popm	r4-r7,pc
80008c26:	d7 03       	nop

80008c28 <_lseek_r>:
80008c28:	d4 21       	pushm	r4-r7,lr
80008c2a:	16 98       	mov	r8,r11
80008c2c:	18 97       	mov	r7,r12
80008c2e:	10 9c       	mov	r12,r8
80008c30:	30 08       	mov	r8,0
80008c32:	14 9b       	mov	r11,r10
80008c34:	e0 66 08 18 	mov	r6,2072
80008c38:	12 9a       	mov	r10,r9
80008c3a:	8d 08       	st.w	r6[0x0],r8
80008c3c:	cb 8e       	rcall	800089ac <_lseek>
80008c3e:	5b fc       	cp.w	r12,-1
80008c40:	c0 51       	brne	80008c4a <_lseek_r+0x22>
80008c42:	6c 08       	ld.w	r8,r6[0x0]
80008c44:	58 08       	cp.w	r8,0
80008c46:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008c4a:	d8 22       	popm	r4-r7,pc

80008c4c <_read_r>:
80008c4c:	d4 21       	pushm	r4-r7,lr
80008c4e:	16 98       	mov	r8,r11
80008c50:	18 97       	mov	r7,r12
80008c52:	10 9c       	mov	r12,r8
80008c54:	30 08       	mov	r8,0
80008c56:	14 9b       	mov	r11,r10
80008c58:	e0 66 08 18 	mov	r6,2072
80008c5c:	12 9a       	mov	r10,r9
80008c5e:	8d 08       	st.w	r6[0x0],r8
80008c60:	cb 0e       	rcall	800089c0 <_read>
80008c62:	5b fc       	cp.w	r12,-1
80008c64:	c0 51       	brne	80008c6e <_read_r+0x22>
80008c66:	6c 08       	ld.w	r8,r6[0x0]
80008c68:	58 08       	cp.w	r8,0
80008c6a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008c6e:	d8 22       	popm	r4-r7,pc

80008c70 <__avr32_f64_sub_from_add>:
80008c70:	ee 19 80 00 	eorh	r9,0x8000

80008c74 <__avr32_f64_sub>:
80008c74:	f7 e9 20 0c 	eor	r12,r11,r9
80008c78:	e0 86 00 ca 	brmi	80008e0c <__avr32_f64_add_from_sub>
80008c7c:	eb cd 40 e0 	pushm	r5-r7,lr
80008c80:	16 9c       	mov	r12,r11
80008c82:	e6 1c 80 00 	andh	r12,0x8000,COH
80008c86:	bf db       	cbr	r11,0x1f
80008c88:	bf d9       	cbr	r9,0x1f
80008c8a:	10 3a       	cp.w	r10,r8
80008c8c:	f2 0b 13 00 	cpc	r11,r9
80008c90:	c0 92       	brcc	80008ca2 <__avr32_f64_sub+0x2e>
80008c92:	16 97       	mov	r7,r11
80008c94:	12 9b       	mov	r11,r9
80008c96:	0e 99       	mov	r9,r7
80008c98:	14 97       	mov	r7,r10
80008c9a:	10 9a       	mov	r10,r8
80008c9c:	0e 98       	mov	r8,r7
80008c9e:	ee 1c 80 00 	eorh	r12,0x8000
80008ca2:	f6 07 16 14 	lsr	r7,r11,0x14
80008ca6:	ab 7b       	lsl	r11,0xb
80008ca8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008cac:	ab 7a       	lsl	r10,0xb
80008cae:	bf bb       	sbr	r11,0x1f
80008cb0:	f2 06 16 14 	lsr	r6,r9,0x14
80008cb4:	c4 40       	breq	80008d3c <__avr32_f64_sub_opL_subnormal>
80008cb6:	ab 79       	lsl	r9,0xb
80008cb8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008cbc:	ab 78       	lsl	r8,0xb
80008cbe:	bf b9       	sbr	r9,0x1f

80008cc0 <__avr32_f64_sub_opL_subnormal_done>:
80008cc0:	e0 47 07 ff 	cp.w	r7,2047
80008cc4:	c4 f0       	breq	80008d62 <__avr32_f64_sub_opH_nan_or_inf>
80008cc6:	0e 26       	rsub	r6,r7
80008cc8:	c1 20       	breq	80008cec <__avr32_f64_sub_shift_done>
80008cca:	ec 05 11 20 	rsub	r5,r6,32
80008cce:	e0 46 00 20 	cp.w	r6,32
80008cd2:	c7 c2       	brcc	80008dca <__avr32_f64_sub_longshift>
80008cd4:	f0 05 09 4e 	lsl	lr,r8,r5
80008cd8:	f2 05 09 45 	lsl	r5,r9,r5
80008cdc:	f0 06 0a 48 	lsr	r8,r8,r6
80008ce0:	f2 06 0a 49 	lsr	r9,r9,r6
80008ce4:	0a 48       	or	r8,r5
80008ce6:	58 0e       	cp.w	lr,0
80008ce8:	5f 1e       	srne	lr
80008cea:	1c 48       	or	r8,lr

80008cec <__avr32_f64_sub_shift_done>:
80008cec:	10 1a       	sub	r10,r8
80008cee:	f6 09 01 4b 	sbc	r11,r11,r9
80008cf2:	f6 06 12 00 	clz	r6,r11
80008cf6:	c0 e0       	breq	80008d12 <__avr32_f64_sub_longnormalize_done>
80008cf8:	c7 83       	brcs	80008de8 <__avr32_f64_sub_longnormalize>
80008cfa:	ec 0e 11 20 	rsub	lr,r6,32
80008cfe:	f6 06 09 4b 	lsl	r11,r11,r6
80008d02:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008d06:	1c 4b       	or	r11,lr
80008d08:	f4 06 09 4a 	lsl	r10,r10,r6
80008d0c:	0c 17       	sub	r7,r6
80008d0e:	e0 8a 00 39 	brle	80008d80 <__avr32_f64_sub_subnormal_result>

80008d12 <__avr32_f64_sub_longnormalize_done>:
80008d12:	f4 09 15 15 	lsl	r9,r10,0x15
80008d16:	ab 9a       	lsr	r10,0xb
80008d18:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008d1c:	ab 9b       	lsr	r11,0xb
80008d1e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008d22:	18 4b       	or	r11,r12

80008d24 <__avr32_f64_sub_round>:
80008d24:	fc 17 80 00 	movh	r7,0x8000
80008d28:	ed ba 00 00 	bld	r10,0x0
80008d2c:	f7 b7 01 ff 	subne	r7,-1
80008d30:	0e 39       	cp.w	r9,r7
80008d32:	5f 29       	srhs	r9
80008d34:	12 0a       	add	r10,r9
80008d36:	5c 0b       	acr	r11
80008d38:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d3c <__avr32_f64_sub_opL_subnormal>:
80008d3c:	ab 79       	lsl	r9,0xb
80008d3e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008d42:	ab 78       	lsl	r8,0xb
80008d44:	f3 e8 10 0e 	or	lr,r9,r8
80008d48:	f9 b6 01 01 	movne	r6,1
80008d4c:	ee 0e 11 00 	rsub	lr,r7,0
80008d50:	f9 b7 00 01 	moveq	r7,1
80008d54:	ef bb 00 1f 	bst	r11,0x1f
80008d58:	f7 ea 10 0e 	or	lr,r11,r10
80008d5c:	f9 b7 00 00 	moveq	r7,0
80008d60:	cb 0b       	rjmp	80008cc0 <__avr32_f64_sub_opL_subnormal_done>

80008d62 <__avr32_f64_sub_opH_nan_or_inf>:
80008d62:	bf db       	cbr	r11,0x1f
80008d64:	f7 ea 10 0e 	or	lr,r11,r10
80008d68:	c0 81       	brne	80008d78 <__avr32_f64_sub_return_nan>
80008d6a:	e0 46 07 ff 	cp.w	r6,2047
80008d6e:	c0 50       	breq	80008d78 <__avr32_f64_sub_return_nan>
80008d70:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008d74:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d78 <__avr32_f64_sub_return_nan>:
80008d78:	3f fa       	mov	r10,-1
80008d7a:	3f fb       	mov	r11,-1
80008d7c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d80 <__avr32_f64_sub_subnormal_result>:
80008d80:	5c 37       	neg	r7
80008d82:	2f f7       	sub	r7,-1
80008d84:	f1 b7 04 c0 	satu	r7,0x6
80008d88:	e0 47 00 20 	cp.w	r7,32
80008d8c:	c1 14       	brge	80008dae <__avr32_f64_sub_subnormal_result+0x2e>
80008d8e:	ee 08 11 20 	rsub	r8,r7,32
80008d92:	f4 08 09 49 	lsl	r9,r10,r8
80008d96:	5f 16       	srne	r6
80008d98:	f4 07 0a 4a 	lsr	r10,r10,r7
80008d9c:	0c 4a       	or	r10,r6
80008d9e:	f6 08 09 49 	lsl	r9,r11,r8
80008da2:	f5 e9 10 0a 	or	r10,r10,r9
80008da6:	f4 07 0a 4b 	lsr	r11,r10,r7
80008daa:	30 07       	mov	r7,0
80008dac:	cb 3b       	rjmp	80008d12 <__avr32_f64_sub_longnormalize_done>
80008dae:	ee 08 11 40 	rsub	r8,r7,64
80008db2:	f6 08 09 49 	lsl	r9,r11,r8
80008db6:	14 49       	or	r9,r10
80008db8:	5f 16       	srne	r6
80008dba:	f6 07 0a 4a 	lsr	r10,r11,r7
80008dbe:	0c 4a       	or	r10,r6
80008dc0:	30 0b       	mov	r11,0
80008dc2:	30 07       	mov	r7,0
80008dc4:	ca 7b       	rjmp	80008d12 <__avr32_f64_sub_longnormalize_done>
80008dc6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008dca <__avr32_f64_sub_longshift>:
80008dca:	f1 b6 04 c0 	satu	r6,0x6
80008dce:	f0 0e 17 00 	moveq	lr,r8
80008dd2:	c0 40       	breq	80008dda <__avr32_f64_sub_longshift+0x10>
80008dd4:	f2 05 09 4e 	lsl	lr,r9,r5
80008dd8:	10 4e       	or	lr,r8
80008dda:	f2 06 0a 48 	lsr	r8,r9,r6
80008dde:	30 09       	mov	r9,0
80008de0:	58 0e       	cp.w	lr,0
80008de2:	5f 1e       	srne	lr
80008de4:	1c 48       	or	r8,lr
80008de6:	c8 3b       	rjmp	80008cec <__avr32_f64_sub_shift_done>

80008de8 <__avr32_f64_sub_longnormalize>:
80008de8:	f4 06 12 00 	clz	r6,r10
80008dec:	f9 b7 03 00 	movlo	r7,0
80008df0:	f9 b6 03 00 	movlo	r6,0
80008df4:	f9 bc 03 00 	movlo	r12,0
80008df8:	f7 b6 02 e0 	subhs	r6,-32
80008dfc:	f4 06 09 4b 	lsl	r11,r10,r6
80008e00:	30 0a       	mov	r10,0
80008e02:	0c 17       	sub	r7,r6
80008e04:	fe 9a ff be 	brle	80008d80 <__avr32_f64_sub_subnormal_result>
80008e08:	c8 5b       	rjmp	80008d12 <__avr32_f64_sub_longnormalize_done>
80008e0a:	d7 03       	nop

80008e0c <__avr32_f64_add_from_sub>:
80008e0c:	ee 19 80 00 	eorh	r9,0x8000

80008e10 <__avr32_f64_add>:
80008e10:	f7 e9 20 0c 	eor	r12,r11,r9
80008e14:	fe 96 ff 2e 	brmi	80008c70 <__avr32_f64_sub_from_add>
80008e18:	eb cd 40 e0 	pushm	r5-r7,lr
80008e1c:	16 9c       	mov	r12,r11
80008e1e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008e22:	bf db       	cbr	r11,0x1f
80008e24:	bf d9       	cbr	r9,0x1f
80008e26:	12 3b       	cp.w	r11,r9
80008e28:	c0 72       	brcc	80008e36 <__avr32_f64_add+0x26>
80008e2a:	16 97       	mov	r7,r11
80008e2c:	12 9b       	mov	r11,r9
80008e2e:	0e 99       	mov	r9,r7
80008e30:	14 97       	mov	r7,r10
80008e32:	10 9a       	mov	r10,r8
80008e34:	0e 98       	mov	r8,r7
80008e36:	30 0e       	mov	lr,0
80008e38:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008e3c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008e40:	b5 ab       	sbr	r11,0x14
80008e42:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008e46:	c6 20       	breq	80008f0a <__avr32_f64_add_op2_subnormal>
80008e48:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008e4c:	b5 a9       	sbr	r9,0x14
80008e4e:	e0 47 07 ff 	cp.w	r7,2047
80008e52:	c2 80       	breq	80008ea2 <__avr32_f64_add_opH_nan_or_inf>
80008e54:	0e 26       	rsub	r6,r7
80008e56:	c1 20       	breq	80008e7a <__avr32_f64_add_shift_done>
80008e58:	e0 46 00 36 	cp.w	r6,54
80008e5c:	c1 52       	brcc	80008e86 <__avr32_f64_add_res_of_done>
80008e5e:	ec 05 11 20 	rsub	r5,r6,32
80008e62:	e0 46 00 20 	cp.w	r6,32
80008e66:	c3 52       	brcc	80008ed0 <__avr32_f64_add_longshift>
80008e68:	f0 05 09 4e 	lsl	lr,r8,r5
80008e6c:	f2 05 09 45 	lsl	r5,r9,r5
80008e70:	f0 06 0a 48 	lsr	r8,r8,r6
80008e74:	f2 06 0a 49 	lsr	r9,r9,r6
80008e78:	0a 48       	or	r8,r5

80008e7a <__avr32_f64_add_shift_done>:
80008e7a:	10 0a       	add	r10,r8
80008e7c:	f6 09 00 4b 	adc	r11,r11,r9
80008e80:	ed bb 00 15 	bld	r11,0x15
80008e84:	c3 40       	breq	80008eec <__avr32_f64_add_res_of>

80008e86 <__avr32_f64_add_res_of_done>:
80008e86:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008e8a:	18 4b       	or	r11,r12

80008e8c <__avr32_f64_add_round>:
80008e8c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008e90:	18 4e       	or	lr,r12
80008e92:	ee 1e 80 00 	eorh	lr,0x8000
80008e96:	f1 be 04 20 	satu	lr,0x1
80008e9a:	1c 0a       	add	r10,lr
80008e9c:	5c 0b       	acr	r11
80008e9e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ea2 <__avr32_f64_add_opH_nan_or_inf>:
80008ea2:	b5 cb       	cbr	r11,0x14
80008ea4:	f7 ea 10 0e 	or	lr,r11,r10
80008ea8:	c1 01       	brne	80008ec8 <__avr32_f64_add_return_nan>
80008eaa:	e0 46 07 ff 	cp.w	r6,2047
80008eae:	c0 30       	breq	80008eb4 <__avr32_f64_add_opL_nan_or_inf>
80008eb0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008eb4 <__avr32_f64_add_opL_nan_or_inf>:
80008eb4:	b5 c9       	cbr	r9,0x14
80008eb6:	f3 e8 10 0e 	or	lr,r9,r8
80008eba:	c0 71       	brne	80008ec8 <__avr32_f64_add_return_nan>
80008ebc:	30 0a       	mov	r10,0
80008ebe:	fc 1b 7f f0 	movh	r11,0x7ff0
80008ec2:	18 4b       	or	r11,r12
80008ec4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ec8 <__avr32_f64_add_return_nan>:
80008ec8:	3f fa       	mov	r10,-1
80008eca:	3f fb       	mov	r11,-1
80008ecc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ed0 <__avr32_f64_add_longshift>:
80008ed0:	f1 b6 04 c0 	satu	r6,0x6
80008ed4:	f0 0e 17 00 	moveq	lr,r8
80008ed8:	c0 60       	breq	80008ee4 <__avr32_f64_add_longshift+0x14>
80008eda:	f2 05 09 4e 	lsl	lr,r9,r5
80008ede:	58 08       	cp.w	r8,0
80008ee0:	5f 18       	srne	r8
80008ee2:	10 4e       	or	lr,r8
80008ee4:	f2 06 0a 48 	lsr	r8,r9,r6
80008ee8:	30 09       	mov	r9,0
80008eea:	cc 8b       	rjmp	80008e7a <__avr32_f64_add_shift_done>

80008eec <__avr32_f64_add_res_of>:
80008eec:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008ef0:	a1 9b       	lsr	r11,0x1
80008ef2:	5d 0a       	ror	r10
80008ef4:	5d 0e       	ror	lr
80008ef6:	2f f7       	sub	r7,-1
80008ef8:	e0 47 07 ff 	cp.w	r7,2047
80008efc:	f9 ba 00 00 	moveq	r10,0
80008f00:	f9 bb 00 00 	moveq	r11,0
80008f04:	f9 be 00 00 	moveq	lr,0
80008f08:	cb fb       	rjmp	80008e86 <__avr32_f64_add_res_of_done>

80008f0a <__avr32_f64_add_op2_subnormal>:
80008f0a:	30 16       	mov	r6,1
80008f0c:	58 07       	cp.w	r7,0
80008f0e:	ca 01       	brne	80008e4e <__avr32_f64_add+0x3e>
80008f10:	b5 cb       	cbr	r11,0x14
80008f12:	10 0a       	add	r10,r8
80008f14:	f6 09 00 4b 	adc	r11,r11,r9
80008f18:	18 4b       	or	r11,r12
80008f1a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008f1e:	d7 03       	nop

80008f20 <__avr32_f64_to_u32>:
80008f20:	58 0b       	cp.w	r11,0
80008f22:	5e 6d       	retmi	0

80008f24 <__avr32_f64_to_s32>:
80008f24:	f6 0c 15 01 	lsl	r12,r11,0x1
80008f28:	b5 9c       	lsr	r12,0x15
80008f2a:	e0 2c 03 ff 	sub	r12,1023
80008f2e:	5e 3d       	retlo	0
80008f30:	f8 0c 11 1f 	rsub	r12,r12,31
80008f34:	16 99       	mov	r9,r11
80008f36:	ab 7b       	lsl	r11,0xb
80008f38:	bf bb       	sbr	r11,0x1f
80008f3a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008f3e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008f42:	a1 79       	lsl	r9,0x1
80008f44:	5e 2b       	reths	r11
80008f46:	5c 3b       	neg	r11
80008f48:	5e fb       	retal	r11

80008f4a <__avr32_f64_cmp_eq>:
80008f4a:	10 3a       	cp.w	r10,r8
80008f4c:	f2 0b 13 00 	cpc	r11,r9
80008f50:	c0 80       	breq	80008f60 <__avr32_f64_cmp_eq+0x16>
80008f52:	a1 7b       	lsl	r11,0x1
80008f54:	a1 79       	lsl	r9,0x1
80008f56:	14 4b       	or	r11,r10
80008f58:	12 4b       	or	r11,r9
80008f5a:	10 4b       	or	r11,r8
80008f5c:	5e 0f       	reteq	1
80008f5e:	5e fd       	retal	0
80008f60:	a1 7b       	lsl	r11,0x1
80008f62:	fc 1c ff e0 	movh	r12,0xffe0
80008f66:	58 0a       	cp.w	r10,0
80008f68:	f8 0b 13 00 	cpc	r11,r12
80008f6c:	5e 8f       	retls	1
80008f6e:	5e fd       	retal	0

80008f70 <__avr32_f64_cmp_ge>:
80008f70:	1a de       	st.w	--sp,lr
80008f72:	1a d7       	st.w	--sp,r7
80008f74:	a1 7b       	lsl	r11,0x1
80008f76:	5f 3c       	srlo	r12
80008f78:	a1 79       	lsl	r9,0x1
80008f7a:	5f 37       	srlo	r7
80008f7c:	5c fc       	rol	r12
80008f7e:	fc 1e ff e0 	movh	lr,0xffe0
80008f82:	58 0a       	cp.w	r10,0
80008f84:	fc 0b 13 00 	cpc	r11,lr
80008f88:	e0 8b 00 1d 	brhi	80008fc2 <__avr32_f64_cmp_ge+0x52>
80008f8c:	58 08       	cp.w	r8,0
80008f8e:	fc 09 13 00 	cpc	r9,lr
80008f92:	e0 8b 00 18 	brhi	80008fc2 <__avr32_f64_cmp_ge+0x52>
80008f96:	58 0b       	cp.w	r11,0
80008f98:	f5 ba 00 00 	subfeq	r10,0
80008f9c:	c1 50       	breq	80008fc6 <__avr32_f64_cmp_ge+0x56>
80008f9e:	1b 07       	ld.w	r7,sp++
80008fa0:	1b 0e       	ld.w	lr,sp++
80008fa2:	58 3c       	cp.w	r12,3
80008fa4:	c0 a0       	breq	80008fb8 <__avr32_f64_cmp_ge+0x48>
80008fa6:	58 1c       	cp.w	r12,1
80008fa8:	c0 33       	brcs	80008fae <__avr32_f64_cmp_ge+0x3e>
80008faa:	5e 0f       	reteq	1
80008fac:	5e 1d       	retne	0
80008fae:	10 3a       	cp.w	r10,r8
80008fb0:	f2 0b 13 00 	cpc	r11,r9
80008fb4:	5e 2f       	reths	1
80008fb6:	5e 3d       	retlo	0
80008fb8:	14 38       	cp.w	r8,r10
80008fba:	f6 09 13 00 	cpc	r9,r11
80008fbe:	5e 2f       	reths	1
80008fc0:	5e 3d       	retlo	0
80008fc2:	1b 07       	ld.w	r7,sp++
80008fc4:	d8 0a       	popm	pc,r12=0
80008fc6:	58 17       	cp.w	r7,1
80008fc8:	5f 0c       	sreq	r12
80008fca:	58 09       	cp.w	r9,0
80008fcc:	f5 b8 00 00 	subfeq	r8,0
80008fd0:	1b 07       	ld.w	r7,sp++
80008fd2:	1b 0e       	ld.w	lr,sp++
80008fd4:	5e 0f       	reteq	1
80008fd6:	5e fc       	retal	r12

80008fd8 <__avr32_f64_cmp_lt>:
80008fd8:	1a de       	st.w	--sp,lr
80008fda:	1a d7       	st.w	--sp,r7
80008fdc:	a1 7b       	lsl	r11,0x1
80008fde:	5f 3c       	srlo	r12
80008fe0:	a1 79       	lsl	r9,0x1
80008fe2:	5f 37       	srlo	r7
80008fe4:	5c fc       	rol	r12
80008fe6:	fc 1e ff e0 	movh	lr,0xffe0
80008fea:	58 0a       	cp.w	r10,0
80008fec:	fc 0b 13 00 	cpc	r11,lr
80008ff0:	e0 8b 00 1d 	brhi	8000902a <__avr32_f64_cmp_lt+0x52>
80008ff4:	58 08       	cp.w	r8,0
80008ff6:	fc 09 13 00 	cpc	r9,lr
80008ffa:	e0 8b 00 18 	brhi	8000902a <__avr32_f64_cmp_lt+0x52>
80008ffe:	58 0b       	cp.w	r11,0
80009000:	f5 ba 00 00 	subfeq	r10,0
80009004:	c1 50       	breq	8000902e <__avr32_f64_cmp_lt+0x56>
80009006:	1b 07       	ld.w	r7,sp++
80009008:	1b 0e       	ld.w	lr,sp++
8000900a:	58 3c       	cp.w	r12,3
8000900c:	c0 a0       	breq	80009020 <__avr32_f64_cmp_lt+0x48>
8000900e:	58 1c       	cp.w	r12,1
80009010:	c0 33       	brcs	80009016 <__avr32_f64_cmp_lt+0x3e>
80009012:	5e 0d       	reteq	0
80009014:	5e 1f       	retne	1
80009016:	10 3a       	cp.w	r10,r8
80009018:	f2 0b 13 00 	cpc	r11,r9
8000901c:	5e 2d       	reths	0
8000901e:	5e 3f       	retlo	1
80009020:	14 38       	cp.w	r8,r10
80009022:	f6 09 13 00 	cpc	r9,r11
80009026:	5e 2d       	reths	0
80009028:	5e 3f       	retlo	1
8000902a:	1b 07       	ld.w	r7,sp++
8000902c:	d8 0a       	popm	pc,r12=0
8000902e:	58 17       	cp.w	r7,1
80009030:	5f 1c       	srne	r12
80009032:	58 09       	cp.w	r9,0
80009034:	f5 b8 00 00 	subfeq	r8,0
80009038:	1b 07       	ld.w	r7,sp++
8000903a:	1b 0e       	ld.w	lr,sp++
8000903c:	5e 0d       	reteq	0
8000903e:	5e fc       	retal	r12

80009040 <__avr32_f64_div>:
80009040:	eb cd 40 ff 	pushm	r0-r7,lr
80009044:	f7 e9 20 0e 	eor	lr,r11,r9
80009048:	f6 07 16 14 	lsr	r7,r11,0x14
8000904c:	a9 7b       	lsl	r11,0x9
8000904e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80009052:	a9 7a       	lsl	r10,0x9
80009054:	bd bb       	sbr	r11,0x1d
80009056:	e4 1b 3f ff 	andh	r11,0x3fff
8000905a:	ab d7       	cbr	r7,0xb
8000905c:	e0 80 00 cc 	breq	800091f4 <__avr32_f64_div_round_subnormal+0x54>
80009060:	e0 47 07 ff 	cp.w	r7,2047
80009064:	e0 84 00 b5 	brge	800091ce <__avr32_f64_div_round_subnormal+0x2e>
80009068:	f2 06 16 14 	lsr	r6,r9,0x14
8000906c:	a9 79       	lsl	r9,0x9
8000906e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80009072:	a9 78       	lsl	r8,0x9
80009074:	bd b9       	sbr	r9,0x1d
80009076:	e4 19 3f ff 	andh	r9,0x3fff
8000907a:	ab d6       	cbr	r6,0xb
8000907c:	e0 80 00 e2 	breq	80009240 <__avr32_f64_div_round_subnormal+0xa0>
80009080:	e0 46 07 ff 	cp.w	r6,2047
80009084:	e0 84 00 b2 	brge	800091e8 <__avr32_f64_div_round_subnormal+0x48>
80009088:	0c 17       	sub	r7,r6
8000908a:	fe 37 fc 01 	sub	r7,-1023
8000908e:	fc 1c 80 00 	movh	r12,0x8000
80009092:	f8 03 16 01 	lsr	r3,r12,0x1
80009096:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000909a:	5c d4       	com	r4
8000909c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800090a0:	e6 09 06 44 	mulu.d	r4,r3,r9
800090a4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800090a8:	e6 05 06 44 	mulu.d	r4,r3,r5
800090ac:	ea 03 15 02 	lsl	r3,r5,0x2
800090b0:	e6 09 06 44 	mulu.d	r4,r3,r9
800090b4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800090b8:	e6 05 06 44 	mulu.d	r4,r3,r5
800090bc:	ea 03 15 02 	lsl	r3,r5,0x2
800090c0:	e6 09 06 44 	mulu.d	r4,r3,r9
800090c4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800090c8:	e6 05 06 44 	mulu.d	r4,r3,r5
800090cc:	ea 03 15 02 	lsl	r3,r5,0x2
800090d0:	e6 08 06 40 	mulu.d	r0,r3,r8
800090d4:	e4 09 07 40 	macu.d	r0,r2,r9
800090d8:	e6 09 06 44 	mulu.d	r4,r3,r9
800090dc:	02 04       	add	r4,r1
800090de:	5c 05       	acr	r5
800090e0:	a3 65       	lsl	r5,0x2
800090e2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800090e6:	a3 64       	lsl	r4,0x2
800090e8:	5c 34       	neg	r4
800090ea:	f8 05 01 45 	sbc	r5,r12,r5
800090ee:	e6 04 06 40 	mulu.d	r0,r3,r4
800090f2:	e4 05 07 40 	macu.d	r0,r2,r5
800090f6:	e6 05 06 44 	mulu.d	r4,r3,r5
800090fa:	02 04       	add	r4,r1
800090fc:	5c 05       	acr	r5
800090fe:	ea 03 15 02 	lsl	r3,r5,0x2
80009102:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009106:	e8 02 15 02 	lsl	r2,r4,0x2
8000910a:	e6 08 06 40 	mulu.d	r0,r3,r8
8000910e:	e4 09 07 40 	macu.d	r0,r2,r9
80009112:	e6 09 06 44 	mulu.d	r4,r3,r9
80009116:	02 04       	add	r4,r1
80009118:	5c 05       	acr	r5
8000911a:	a3 65       	lsl	r5,0x2
8000911c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009120:	a3 64       	lsl	r4,0x2
80009122:	5c 34       	neg	r4
80009124:	f8 05 01 45 	sbc	r5,r12,r5
80009128:	e6 04 06 40 	mulu.d	r0,r3,r4
8000912c:	e4 05 07 40 	macu.d	r0,r2,r5
80009130:	e6 05 06 44 	mulu.d	r4,r3,r5
80009134:	02 04       	add	r4,r1
80009136:	5c 05       	acr	r5
80009138:	ea 03 15 02 	lsl	r3,r5,0x2
8000913c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009140:	e8 02 15 02 	lsl	r2,r4,0x2
80009144:	e6 0a 06 40 	mulu.d	r0,r3,r10
80009148:	e4 0b 07 40 	macu.d	r0,r2,r11
8000914c:	e6 0b 06 42 	mulu.d	r2,r3,r11
80009150:	02 02       	add	r2,r1
80009152:	5c 03       	acr	r3
80009154:	ed b3 00 1c 	bld	r3,0x1c
80009158:	c0 90       	breq	8000916a <__avr32_f64_div+0x12a>
8000915a:	a1 72       	lsl	r2,0x1
8000915c:	5c f3       	rol	r3
8000915e:	20 17       	sub	r7,1
80009160:	a3 9a       	lsr	r10,0x3
80009162:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80009166:	a3 9b       	lsr	r11,0x3
80009168:	c0 58       	rjmp	80009172 <__avr32_f64_div+0x132>
8000916a:	a5 8a       	lsr	r10,0x4
8000916c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80009170:	a5 8b       	lsr	r11,0x4
80009172:	58 07       	cp.w	r7,0
80009174:	e0 8a 00 8b 	brle	8000928a <__avr32_f64_div_res_subnormal>
80009178:	e0 12 ff 00 	andl	r2,0xff00
8000917c:	e8 12 00 80 	orl	r2,0x80
80009180:	e6 08 06 40 	mulu.d	r0,r3,r8
80009184:	e4 09 07 40 	macu.d	r0,r2,r9
80009188:	e4 08 06 44 	mulu.d	r4,r2,r8
8000918c:	e6 09 06 48 	mulu.d	r8,r3,r9
80009190:	00 05       	add	r5,r0
80009192:	f0 01 00 48 	adc	r8,r8,r1
80009196:	5c 09       	acr	r9
80009198:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000919c:	58 04       	cp.w	r4,0
8000919e:	5c 25       	cpc	r5

800091a0 <__avr32_f64_div_round_subnormal>:
800091a0:	f4 08 13 00 	cpc	r8,r10
800091a4:	f6 09 13 00 	cpc	r9,r11
800091a8:	5f 36       	srlo	r6
800091aa:	f8 06 17 00 	moveq	r6,r12
800091ae:	e4 0a 16 08 	lsr	r10,r2,0x8
800091b2:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800091b6:	e6 0b 16 08 	lsr	r11,r3,0x8
800091ba:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800091be:	ed be 00 1f 	bld	lr,0x1f
800091c2:	ef bb 00 1f 	bst	r11,0x1f
800091c6:	0c 0a       	add	r10,r6
800091c8:	5c 0b       	acr	r11
800091ca:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800091ce:	e4 1b 00 0f 	andh	r11,0xf
800091d2:	14 4b       	or	r11,r10
800091d4:	e0 81 00 a7 	brne	80009322 <__avr32_f64_div_res_subnormal+0x98>
800091d8:	f2 06 16 14 	lsr	r6,r9,0x14
800091dc:	ab d6       	cbr	r6,0xb
800091de:	e0 46 07 ff 	cp.w	r6,2047
800091e2:	e0 81 00 a4 	brne	8000932a <__avr32_f64_div_res_subnormal+0xa0>
800091e6:	c9 e8       	rjmp	80009322 <__avr32_f64_div_res_subnormal+0x98>
800091e8:	e4 19 00 0f 	andh	r9,0xf
800091ec:	10 49       	or	r9,r8
800091ee:	e0 81 00 9a 	brne	80009322 <__avr32_f64_div_res_subnormal+0x98>
800091f2:	c9 28       	rjmp	80009316 <__avr32_f64_div_res_subnormal+0x8c>
800091f4:	a3 7b       	lsl	r11,0x3
800091f6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800091fa:	a3 7a       	lsl	r10,0x3
800091fc:	f5 eb 10 04 	or	r4,r10,r11
80009200:	e0 80 00 a0 	breq	80009340 <__avr32_f64_div_op1_zero>
80009204:	f6 04 12 00 	clz	r4,r11
80009208:	c1 70       	breq	80009236 <__avr32_f64_div_round_subnormal+0x96>
8000920a:	c0 c3       	brcs	80009222 <__avr32_f64_div_round_subnormal+0x82>
8000920c:	e8 05 11 20 	rsub	r5,r4,32
80009210:	f6 04 09 4b 	lsl	r11,r11,r4
80009214:	f4 05 0a 45 	lsr	r5,r10,r5
80009218:	0a 4b       	or	r11,r5
8000921a:	f4 04 09 4a 	lsl	r10,r10,r4
8000921e:	08 17       	sub	r7,r4
80009220:	c0 b8       	rjmp	80009236 <__avr32_f64_div_round_subnormal+0x96>
80009222:	f4 04 12 00 	clz	r4,r10
80009226:	f9 b4 03 00 	movlo	r4,0
8000922a:	f7 b4 02 e0 	subhs	r4,-32
8000922e:	f4 04 09 4b 	lsl	r11,r10,r4
80009232:	30 0a       	mov	r10,0
80009234:	08 17       	sub	r7,r4
80009236:	a3 8a       	lsr	r10,0x2
80009238:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000923c:	a3 8b       	lsr	r11,0x2
8000923e:	c1 1b       	rjmp	80009060 <__avr32_f64_div+0x20>
80009240:	a3 79       	lsl	r9,0x3
80009242:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80009246:	a3 78       	lsl	r8,0x3
80009248:	f3 e8 10 04 	or	r4,r9,r8
8000924c:	c6 f0       	breq	8000932a <__avr32_f64_div_res_subnormal+0xa0>
8000924e:	f2 04 12 00 	clz	r4,r9
80009252:	c1 70       	breq	80009280 <__avr32_f64_div_round_subnormal+0xe0>
80009254:	c0 c3       	brcs	8000926c <__avr32_f64_div_round_subnormal+0xcc>
80009256:	e8 05 11 20 	rsub	r5,r4,32
8000925a:	f2 04 09 49 	lsl	r9,r9,r4
8000925e:	f0 05 0a 45 	lsr	r5,r8,r5
80009262:	0a 49       	or	r9,r5
80009264:	f0 04 09 48 	lsl	r8,r8,r4
80009268:	08 16       	sub	r6,r4
8000926a:	c0 b8       	rjmp	80009280 <__avr32_f64_div_round_subnormal+0xe0>
8000926c:	f0 04 12 00 	clz	r4,r8
80009270:	f9 b4 03 00 	movlo	r4,0
80009274:	f7 b4 02 e0 	subhs	r4,-32
80009278:	f0 04 09 49 	lsl	r9,r8,r4
8000927c:	30 08       	mov	r8,0
8000927e:	08 16       	sub	r6,r4
80009280:	a3 88       	lsr	r8,0x2
80009282:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80009286:	a3 89       	lsr	r9,0x2
80009288:	cf ca       	rjmp	80009080 <__avr32_f64_div+0x40>

8000928a <__avr32_f64_div_res_subnormal>:
8000928a:	5c 37       	neg	r7
8000928c:	2f f7       	sub	r7,-1
8000928e:	f1 b7 04 c0 	satu	r7,0x6
80009292:	e0 47 00 20 	cp.w	r7,32
80009296:	c1 54       	brge	800092c0 <__avr32_f64_div_res_subnormal+0x36>
80009298:	ee 06 11 20 	rsub	r6,r7,32
8000929c:	e4 07 0a 42 	lsr	r2,r2,r7
800092a0:	e6 06 09 4c 	lsl	r12,r3,r6
800092a4:	18 42       	or	r2,r12
800092a6:	e6 07 0a 43 	lsr	r3,r3,r7
800092aa:	f4 06 09 41 	lsl	r1,r10,r6
800092ae:	f4 07 0a 4a 	lsr	r10,r10,r7
800092b2:	f6 06 09 4c 	lsl	r12,r11,r6
800092b6:	18 4a       	or	r10,r12
800092b8:	f6 07 0a 4b 	lsr	r11,r11,r7
800092bc:	30 00       	mov	r0,0
800092be:	c1 58       	rjmp	800092e8 <__avr32_f64_div_res_subnormal+0x5e>
800092c0:	ee 06 11 20 	rsub	r6,r7,32
800092c4:	f9 b0 00 00 	moveq	r0,0
800092c8:	f9 bc 00 00 	moveq	r12,0
800092cc:	c0 50       	breq	800092d6 <__avr32_f64_div_res_subnormal+0x4c>
800092ce:	f4 06 09 40 	lsl	r0,r10,r6
800092d2:	f6 06 09 4c 	lsl	r12,r11,r6
800092d6:	e6 07 0a 42 	lsr	r2,r3,r7
800092da:	30 03       	mov	r3,0
800092dc:	f4 07 0a 41 	lsr	r1,r10,r7
800092e0:	18 41       	or	r1,r12
800092e2:	f6 07 0a 4a 	lsr	r10,r11,r7
800092e6:	30 0b       	mov	r11,0
800092e8:	e0 12 ff 00 	andl	r2,0xff00
800092ec:	e8 12 00 80 	orl	r2,0x80
800092f0:	e6 08 06 46 	mulu.d	r6,r3,r8
800092f4:	e4 09 07 46 	macu.d	r6,r2,r9
800092f8:	e4 08 06 44 	mulu.d	r4,r2,r8
800092fc:	e6 09 06 48 	mulu.d	r8,r3,r9
80009300:	0c 05       	add	r5,r6
80009302:	f0 07 00 48 	adc	r8,r8,r7
80009306:	5c 09       	acr	r9
80009308:	30 07       	mov	r7,0
8000930a:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000930e:	00 34       	cp.w	r4,r0
80009310:	e2 05 13 00 	cpc	r5,r1
80009314:	c4 6b       	rjmp	800091a0 <__avr32_f64_div_round_subnormal>
80009316:	1c 9b       	mov	r11,lr
80009318:	e6 1b 80 00 	andh	r11,0x8000,COH
8000931c:	30 0a       	mov	r10,0
8000931e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009322:	3f fb       	mov	r11,-1
80009324:	30 0a       	mov	r10,0
80009326:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000932a:	f5 eb 10 04 	or	r4,r10,r11
8000932e:	c0 90       	breq	80009340 <__avr32_f64_div_op1_zero>
80009330:	1c 9b       	mov	r11,lr
80009332:	e6 1b 80 00 	andh	r11,0x8000,COH
80009336:	ea 1b 7f f0 	orh	r11,0x7ff0
8000933a:	30 0a       	mov	r10,0
8000933c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009340 <__avr32_f64_div_op1_zero>:
80009340:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009344:	ce f0       	breq	80009322 <__avr32_f64_div_res_subnormal+0x98>
80009346:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000934a:	e0 44 07 ff 	cp.w	r4,2047
8000934e:	ce 41       	brne	80009316 <__avr32_f64_div_res_subnormal+0x8c>
80009350:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009354:	ce 10       	breq	80009316 <__avr32_f64_div_res_subnormal+0x8c>
80009356:	ce 6b       	rjmp	80009322 <__avr32_f64_div_res_subnormal+0x98>

80009358 <__avr32_umod64>:
80009358:	d4 31       	pushm	r0-r7,lr
8000935a:	1a 97       	mov	r7,sp
8000935c:	20 3d       	sub	sp,12
8000935e:	10 9c       	mov	r12,r8
80009360:	12 95       	mov	r5,r9
80009362:	14 9e       	mov	lr,r10
80009364:	16 91       	mov	r1,r11
80009366:	16 96       	mov	r6,r11
80009368:	58 09       	cp.w	r9,0
8000936a:	e0 81 00 81 	brne	8000946c <__avr32_umod64+0x114>
8000936e:	16 38       	cp.w	r8,r11
80009370:	e0 88 00 12 	brls	80009394 <__avr32_umod64+0x3c>
80009374:	f0 08 12 00 	clz	r8,r8
80009378:	c4 e0       	breq	80009414 <__avr32_umod64+0xbc>
8000937a:	f6 08 09 46 	lsl	r6,r11,r8
8000937e:	f8 08 09 4c 	lsl	r12,r12,r8
80009382:	f0 0b 11 20 	rsub	r11,r8,32
80009386:	f4 08 09 4e 	lsl	lr,r10,r8
8000938a:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000938e:	f7 e6 10 06 	or	r6,r11,r6
80009392:	c4 18       	rjmp	80009414 <__avr32_umod64+0xbc>
80009394:	58 08       	cp.w	r8,0
80009396:	c0 51       	brne	800093a0 <__avr32_umod64+0x48>
80009398:	30 19       	mov	r9,1
8000939a:	f2 08 0d 08 	divu	r8,r9,r8
8000939e:	10 9c       	mov	r12,r8
800093a0:	f8 08 12 00 	clz	r8,r12
800093a4:	c0 31       	brne	800093aa <__avr32_umod64+0x52>
800093a6:	18 16       	sub	r6,r12
800093a8:	c3 68       	rjmp	80009414 <__avr32_umod64+0xbc>
800093aa:	f0 03 11 20 	rsub	r3,r8,32
800093ae:	f4 03 0a 4b 	lsr	r11,r10,r3
800093b2:	f8 08 09 4c 	lsl	r12,r12,r8
800093b6:	ec 08 09 49 	lsl	r9,r6,r8
800093ba:	ec 03 0a 43 	lsr	r3,r6,r3
800093be:	f7 e9 10 09 	or	r9,r11,r9
800093c2:	f8 05 16 10 	lsr	r5,r12,0x10
800093c6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800093ca:	e6 05 0d 02 	divu	r2,r3,r5
800093ce:	f2 0e 16 10 	lsr	lr,r9,0x10
800093d2:	ec 02 02 4b 	mul	r11,r6,r2
800093d6:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800093da:	16 3e       	cp.w	lr,r11
800093dc:	c0 72       	brcc	800093ea <__avr32_umod64+0x92>
800093de:	18 0e       	add	lr,r12
800093e0:	18 3e       	cp.w	lr,r12
800093e2:	c0 43       	brcs	800093ea <__avr32_umod64+0x92>
800093e4:	16 3e       	cp.w	lr,r11
800093e6:	fd dc e3 0e 	addcs	lr,lr,r12
800093ea:	fc 0b 01 03 	sub	r3,lr,r11
800093ee:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800093f2:	e6 05 0d 02 	divu	r2,r3,r5
800093f6:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800093fa:	a5 36       	mul	r6,r2
800093fc:	0c 39       	cp.w	r9,r6
800093fe:	c0 72       	brcc	8000940c <__avr32_umod64+0xb4>
80009400:	18 09       	add	r9,r12
80009402:	18 39       	cp.w	r9,r12
80009404:	c0 43       	brcs	8000940c <__avr32_umod64+0xb4>
80009406:	0c 39       	cp.w	r9,r6
80009408:	f3 dc e3 09 	addcs	r9,r9,r12
8000940c:	f2 06 01 06 	sub	r6,r9,r6
80009410:	f4 08 09 4e 	lsl	lr,r10,r8
80009414:	f8 0a 16 10 	lsr	r10,r12,0x10
80009418:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000941c:	ec 0a 0d 02 	divu	r2,r6,r10
80009420:	fc 09 16 10 	lsr	r9,lr,0x10
80009424:	ea 02 02 4b 	mul	r11,r5,r2
80009428:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000942c:	16 39       	cp.w	r9,r11
8000942e:	c0 72       	brcc	8000943c <__avr32_umod64+0xe4>
80009430:	18 09       	add	r9,r12
80009432:	18 39       	cp.w	r9,r12
80009434:	c0 43       	brcs	8000943c <__avr32_umod64+0xe4>
80009436:	16 39       	cp.w	r9,r11
80009438:	f3 dc e3 09 	addcs	r9,r9,r12
8000943c:	f2 0b 01 0b 	sub	r11,r9,r11
80009440:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009444:	f6 0a 0d 0a 	divu	r10,r11,r10
80009448:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000944c:	ea 0a 02 4a 	mul	r10,r5,r10
80009450:	14 3e       	cp.w	lr,r10
80009452:	c0 72       	brcc	80009460 <__avr32_umod64+0x108>
80009454:	18 0e       	add	lr,r12
80009456:	18 3e       	cp.w	lr,r12
80009458:	c0 43       	brcs	80009460 <__avr32_umod64+0x108>
8000945a:	14 3e       	cp.w	lr,r10
8000945c:	fd dc e3 0e 	addcs	lr,lr,r12
80009460:	fc 0a 01 0a 	sub	r10,lr,r10
80009464:	30 0b       	mov	r11,0
80009466:	f4 08 0a 4a 	lsr	r10,r10,r8
8000946a:	c7 b8       	rjmp	80009560 <__avr32_umod64+0x208>
8000946c:	16 39       	cp.w	r9,r11
8000946e:	e0 8b 00 79 	brhi	80009560 <__avr32_umod64+0x208>
80009472:	f2 09 12 00 	clz	r9,r9
80009476:	c1 21       	brne	8000949a <__avr32_umod64+0x142>
80009478:	10 3a       	cp.w	r10,r8
8000947a:	5f 2b       	srhs	r11
8000947c:	0a 31       	cp.w	r1,r5
8000947e:	5f ba       	srhi	r10
80009480:	f7 ea 10 0a 	or	r10,r11,r10
80009484:	f2 0a 18 00 	cp.b	r10,r9
80009488:	c0 60       	breq	80009494 <__avr32_umod64+0x13c>
8000948a:	fc 08 01 0c 	sub	r12,lr,r8
8000948e:	e2 05 01 46 	sbc	r6,r1,r5
80009492:	18 9e       	mov	lr,r12
80009494:	0c 9b       	mov	r11,r6
80009496:	1c 9a       	mov	r10,lr
80009498:	c6 48       	rjmp	80009560 <__avr32_umod64+0x208>
8000949a:	ea 09 09 4c 	lsl	r12,r5,r9
8000949e:	f2 06 11 20 	rsub	r6,r9,32
800094a2:	f6 09 09 4b 	lsl	r11,r11,r9
800094a6:	f0 09 09 42 	lsl	r2,r8,r9
800094aa:	ef 46 ff f4 	st.w	r7[-12],r6
800094ae:	f0 06 0a 48 	lsr	r8,r8,r6
800094b2:	18 48       	or	r8,r12
800094b4:	e2 06 0a 4c 	lsr	r12,r1,r6
800094b8:	f4 09 09 43 	lsl	r3,r10,r9
800094bc:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
800094c0:	f4 06 0a 4a 	lsr	r10,r10,r6
800094c4:	16 4a       	or	r10,r11
800094c6:	f0 0b 16 10 	lsr	r11,r8,0x10
800094ca:	f8 0b 0d 04 	divu	r4,r12,r11
800094ce:	f4 0c 16 10 	lsr	r12,r10,0x10
800094d2:	08 91       	mov	r1,r4
800094d4:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
800094d8:	e8 0e 02 46 	mul	r6,r4,lr
800094dc:	0c 3c       	cp.w	r12,r6
800094de:	c0 a2       	brcc	800094f2 <__avr32_umod64+0x19a>
800094e0:	20 11       	sub	r1,1
800094e2:	10 0c       	add	r12,r8
800094e4:	10 3c       	cp.w	r12,r8
800094e6:	c0 63       	brcs	800094f2 <__avr32_umod64+0x19a>
800094e8:	0c 3c       	cp.w	r12,r6
800094ea:	f7 b1 03 01 	sublo	r1,1
800094ee:	f9 d8 e3 0c 	addcs	r12,r12,r8
800094f2:	0c 1c       	sub	r12,r6
800094f4:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800094f8:	f8 0b 0d 04 	divu	r4,r12,r11
800094fc:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80009500:	08 96       	mov	r6,r4
80009502:	e8 0e 02 4e 	mul	lr,r4,lr
80009506:	1c 3b       	cp.w	r11,lr
80009508:	c0 a2       	brcc	8000951c <__avr32_umod64+0x1c4>
8000950a:	20 16       	sub	r6,1
8000950c:	10 0b       	add	r11,r8
8000950e:	10 3b       	cp.w	r11,r8
80009510:	c0 63       	brcs	8000951c <__avr32_umod64+0x1c4>
80009512:	1c 3b       	cp.w	r11,lr
80009514:	f7 b6 03 01 	sublo	r6,1
80009518:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000951c:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009520:	1c 1b       	sub	r11,lr
80009522:	e2 02 06 40 	mulu.d	r0,r1,r2
80009526:	00 9e       	mov	lr,r0
80009528:	02 9c       	mov	r12,r1
8000952a:	16 3c       	cp.w	r12,r11
8000952c:	e0 8b 00 08 	brhi	8000953c <__avr32_umod64+0x1e4>
80009530:	5f 06       	sreq	r6
80009532:	06 30       	cp.w	r0,r3
80009534:	5f ba       	srhi	r10
80009536:	ed ea 00 0a 	and	r10,r6,r10
8000953a:	c0 60       	breq	80009546 <__avr32_umod64+0x1ee>
8000953c:	fc 02 01 04 	sub	r4,lr,r2
80009540:	f8 08 01 4c 	sbc	r12,r12,r8
80009544:	08 9e       	mov	lr,r4
80009546:	e6 0e 01 0a 	sub	r10,r3,lr
8000954a:	f6 0c 01 4c 	sbc	r12,r11,r12
8000954e:	ee f1 ff f4 	ld.w	r1,r7[-12]
80009552:	f8 09 0a 4b 	lsr	r11,r12,r9
80009556:	f4 09 0a 4a 	lsr	r10,r10,r9
8000955a:	f8 01 09 4c 	lsl	r12,r12,r1
8000955e:	18 4a       	or	r10,r12
80009560:	2f dd       	sub	sp,-12
80009562:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009600:	c0 08       	rjmp	80009600 <_evba>
	...

80009604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009604:	c0 08       	rjmp	80009604 <_handle_TLB_Multiple_Hit>
	...

80009608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009608:	c0 08       	rjmp	80009608 <_handle_Bus_Error_Data_Fetch>
	...

8000960c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000960c:	c0 08       	rjmp	8000960c <_handle_Bus_Error_Instruction_Fetch>
	...

80009610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009610:	c0 08       	rjmp	80009610 <_handle_NMI>
	...

80009614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009614:	c0 08       	rjmp	80009614 <_handle_Instruction_Address>
	...

80009618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009618:	c0 08       	rjmp	80009618 <_handle_ITLB_Protection>
	...

8000961c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000961c:	c0 08       	rjmp	8000961c <_handle_Breakpoint>
	...

80009620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009620:	c0 08       	rjmp	80009620 <_handle_Illegal_Opcode>
	...

80009624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009624:	c0 08       	rjmp	80009624 <_handle_Unimplemented_Instruction>
	...

80009628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009628:	c0 08       	rjmp	80009628 <_handle_Privilege_Violation>
	...

8000962c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000962c:	c0 08       	rjmp	8000962c <_handle_Floating_Point>
	...

80009630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009630:	c0 08       	rjmp	80009630 <_handle_Coprocessor_Absent>
	...

80009634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009634:	c0 08       	rjmp	80009634 <_handle_Data_Address_Read>
	...

80009638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009638:	c0 08       	rjmp	80009638 <_handle_Data_Address_Write>
	...

8000963c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000963c:	c0 08       	rjmp	8000963c <_handle_DTLB_Protection_Read>
	...

80009640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009640:	c0 08       	rjmp	80009640 <_handle_DTLB_Protection_Write>
	...

80009644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009644:	c0 08       	rjmp	80009644 <_handle_DTLB_Modified>
	...

80009650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009650:	c0 08       	rjmp	80009650 <_handle_ITLB_Miss>
	...

80009660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009660:	c0 08       	rjmp	80009660 <_handle_DTLB_Miss_Read>
	...

80009670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009670:	c0 08       	rjmp	80009670 <_handle_DTLB_Miss_Write>
	...

80009700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009700:	c0 08       	rjmp	80009700 <_handle_Supervisor_Call>
80009702:	d7 03       	nop

80009704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009704:	30 0c       	mov	r12,0
80009706:	fe b0 c8 55 	rcall	800027b0 <_get_interrupt_handler>
8000970a:	58 0c       	cp.w	r12,0
8000970c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009710:	d6 03       	rete

80009712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009712:	30 1c       	mov	r12,1
80009714:	fe b0 c8 4e 	rcall	800027b0 <_get_interrupt_handler>
80009718:	58 0c       	cp.w	r12,0
8000971a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000971e:	d6 03       	rete

80009720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009720:	30 2c       	mov	r12,2
80009722:	fe b0 c8 47 	rcall	800027b0 <_get_interrupt_handler>
80009726:	58 0c       	cp.w	r12,0
80009728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000972c:	d6 03       	rete

8000972e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000972e:	30 3c       	mov	r12,3
80009730:	fe b0 c8 40 	rcall	800027b0 <_get_interrupt_handler>
80009734:	58 0c       	cp.w	r12,0
80009736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000973a:	d6 03       	rete
8000973c:	d7 03       	nop
8000973e:	d7 03       	nop
80009740:	d7 03       	nop
80009742:	d7 03       	nop
80009744:	d7 03       	nop
80009746:	d7 03       	nop
80009748:	d7 03       	nop
8000974a:	d7 03       	nop
8000974c:	d7 03       	nop
8000974e:	d7 03       	nop
80009750:	d7 03       	nop
80009752:	d7 03       	nop
80009754:	d7 03       	nop
80009756:	d7 03       	nop
80009758:	d7 03       	nop
8000975a:	d7 03       	nop
8000975c:	d7 03       	nop
8000975e:	d7 03       	nop
80009760:	d7 03       	nop
80009762:	d7 03       	nop
80009764:	d7 03       	nop
80009766:	d7 03       	nop
80009768:	d7 03       	nop
8000976a:	d7 03       	nop
8000976c:	d7 03       	nop
8000976e:	d7 03       	nop
80009770:	d7 03       	nop
80009772:	d7 03       	nop
80009774:	d7 03       	nop
80009776:	d7 03       	nop
80009778:	d7 03       	nop
8000977a:	d7 03       	nop
8000977c:	d7 03       	nop
8000977e:	d7 03       	nop
80009780:	d7 03       	nop
80009782:	d7 03       	nop
80009784:	d7 03       	nop
80009786:	d7 03       	nop
80009788:	d7 03       	nop
8000978a:	d7 03       	nop
8000978c:	d7 03       	nop
8000978e:	d7 03       	nop
80009790:	d7 03       	nop
80009792:	d7 03       	nop
80009794:	d7 03       	nop
80009796:	d7 03       	nop
80009798:	d7 03       	nop
8000979a:	d7 03       	nop
8000979c:	d7 03       	nop
8000979e:	d7 03       	nop
800097a0:	d7 03       	nop
800097a2:	d7 03       	nop
800097a4:	d7 03       	nop
800097a6:	d7 03       	nop
800097a8:	d7 03       	nop
800097aa:	d7 03       	nop
800097ac:	d7 03       	nop
800097ae:	d7 03       	nop
800097b0:	d7 03       	nop
800097b2:	d7 03       	nop
800097b4:	d7 03       	nop
800097b6:	d7 03       	nop
800097b8:	d7 03       	nop
800097ba:	d7 03       	nop
800097bc:	d7 03       	nop
800097be:	d7 03       	nop
800097c0:	d7 03       	nop
800097c2:	d7 03       	nop
800097c4:	d7 03       	nop
800097c6:	d7 03       	nop
800097c8:	d7 03       	nop
800097ca:	d7 03       	nop
800097cc:	d7 03       	nop
800097ce:	d7 03       	nop
800097d0:	d7 03       	nop
800097d2:	d7 03       	nop
800097d4:	d7 03       	nop
800097d6:	d7 03       	nop
800097d8:	d7 03       	nop
800097da:	d7 03       	nop
800097dc:	d7 03       	nop
800097de:	d7 03       	nop
800097e0:	d7 03       	nop
800097e2:	d7 03       	nop
800097e4:	d7 03       	nop
800097e6:	d7 03       	nop
800097e8:	d7 03       	nop
800097ea:	d7 03       	nop
800097ec:	d7 03       	nop
800097ee:	d7 03       	nop
800097f0:	d7 03       	nop
800097f2:	d7 03       	nop
800097f4:	d7 03       	nop
800097f6:	d7 03       	nop
800097f8:	d7 03       	nop
800097fa:	d7 03       	nop
800097fc:	d7 03       	nop
800097fe:	d7 03       	nop
