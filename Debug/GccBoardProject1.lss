
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e98  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007a0  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000524  00000008  800099a0  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000052c  80009ec4  0000a52c  2**0
                  ALLOC
  8 .bss          00000210  00000530  00000530  00000000  2**2
                  ALLOC
  9 .heap         000028c0  00000740  00000740  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a52c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d50  00000000  00000000  0000a560  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000018dc  00000000  00000000  0000b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000277a2  00000000  00000000  0000cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000576e  00000000  00000000  0003432e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000eafc  00000000  00000000  00039a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001f40  00000000  00000000  00048598  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005127  00000000  00000000  0004a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a37f  00000000  00000000  0004f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00797120  00000000  00000000  0005997e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000e28  00000000  00000000  007f0aa0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d2 d8 	sub	pc,pc,-11560

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f2 dc 	sub	pc,pc,-3364

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 30       	ld.ub	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 44       	ld.w	r4,--r2
800020c8:	00 00       	add	r0,r0
800020ca:	05 3c       	ld.ub	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 48       	ld.w	r8,--r2
800020d0:	00 00       	add	r0,r0
800020d2:	05 34       	ld.ub	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 38       	ld.ub	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 50       	ld.sh	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 40       	ld.w	r0,--r2
800020e0:	00 00       	add	r0,r0
800020e2:	05 4c       	ld.w	r12,--r2

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c1 a8       	rjmp	8000212e <twim_set_speed+0x4a>
800020fc:	30 09       	mov	r9,0
800020fe:	30 77       	mov	r7,7
80002100:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
80002102:	2f f9       	sub	r9,-1
80002104:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002106:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002108:	e0 48 00 ff 	cp.w	r8,255
8000210c:	5f bb       	srhi	r11
8000210e:	ee 09 18 00 	cp.b	r9,r7
80002112:	5f 8a       	srls	r10
80002114:	f7 ea 00 0a 	and	r10,r11,r10
80002118:	fc 0a 18 00 	cp.b	r10,lr
8000211c:	cf 31       	brne	80002102 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211e:	30 7a       	mov	r10,7
80002120:	f4 09 18 00 	cp.b	r9,r10
80002124:	e0 88 00 05 	brls	8000212e <twim_set_speed+0x4a>
80002128:	3f 8c       	mov	r12,-8
8000212a:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212e:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002132:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002136:	14 18       	sub	r8,r10
80002138:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000213c:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80002140:	99 19       	st.w	r12[0x4],r9
80002142:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002146:	d7 03       	nop

80002148 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002148:	48 38       	lddpc	r8,80002154 <twim_status+0xc>
8000214a:	70 08       	ld.w	r8,r8[0x0]
8000214c:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214e:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002152:	5e fc       	retal	r12
80002154:	00 00       	add	r0,r0
80002156:	05 30       	ld.ub	r0,r2++

80002158 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002158:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
8000215c:	e6 18 00 01 	andh	r8,0x1,COH
80002160:	c0 21       	brne	80002164 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80002162:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002164:	3f f8       	mov	r8,-1
80002166:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002168:	99 b8       	st.w	r12[0x2c],r8
}
8000216a:	5e fc       	retal	r12

8000216c <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8000216c:	eb cd 40 fc 	pushm	r2-r7,lr
80002170:	16 94       	mov	r4,r11
80002172:	14 97       	mov	r7,r10
80002174:	12 93       	mov	r3,r9
80002176:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002178:	30 15       	mov	r5,1
8000217a:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000217c:	e0 68 00 80 	mov	r8,128
80002180:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002182:	30 28       	mov	r8,2
80002184:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002186:	49 d6       	lddpc	r6,800021f8 <twim_write+0x8c>
80002188:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000218a:	f0 1f 00 1d 	mcall	800021fc <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x94>
80002190:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002192:	49 d8       	lddpc	r8,80002204 <twim_write+0x98>
80002194:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002196:	30 09       	mov	r9,0
80002198:	49 c8       	lddpc	r8,80002208 <twim_write+0x9c>
8000219a:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000219c:	49 c9       	lddpc	r9,8000220c <twim_write+0xa0>
8000219e:	30 08       	mov	r8,0
800021a0:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021a2:	6c 08       	ld.w	r8,r6[0x0]
800021a4:	b1 67       	lsl	r7,0x10
800021a6:	e8 17 e0 00 	orl	r7,0xe000
800021aa:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021ae:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021b2:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b4:	49 7a       	lddpc	r10,80002210 <twim_write+0xa4>
800021b6:	e0 6b 03 02 	mov	r11,770
800021ba:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021bc:	74 0a       	ld.w	r10,r10[0x0]
800021be:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021c0:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021c2:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c4:	72 08       	ld.w	r8,r9[0x0]
800021c6:	58 08       	cp.w	r8,0
800021c8:	c0 80       	breq	800021d8 <twim_write+0x6c>
800021ca:	c0 b8       	rjmp	800021e0 <twim_write+0x74>
		cpu_relax();
800021cc:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d0:	6e 08       	ld.w	r8,r7[0x0]
800021d2:	58 08       	cp.w	r8,0
800021d4:	c0 30       	breq	800021da <twim_write+0x6e>
800021d6:	c0 58       	rjmp	800021e0 <twim_write+0x74>
800021d8:	48 d7       	lddpc	r7,8000220c <twim_write+0xa0>
800021da:	f0 1f 00 0f 	mcall	80002214 <twim_write+0xa8>
800021de:	cf 70       	breq	800021cc <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e0:	48 b8       	lddpc	r8,8000220c <twim_write+0xa0>
800021e2:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e4:	5b c8       	cp.w	r8,-4
800021e6:	c0 70       	breq	800021f4 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e8:	48 98       	lddpc	r8,8000220c <twim_write+0xa0>
800021ea:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021ec:	5b e8       	cp.w	r8,-2
800021ee:	c0 30       	breq	800021f4 <twim_write+0x88>
800021f0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f4:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f8:	00 00       	add	r0,r0
800021fa:	05 30       	ld.ub	r0,r2++
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 58       	sub	r8,21
80002200:	00 00       	add	r0,r0
80002202:	05 40       	ld.w	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 50       	ld.sh	r0,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 48       	ld.w	r8,--r2
8000220c:	00 00       	add	r0,r0
8000220e:	05 3c       	ld.ub	r12,r2++
80002210:	00 00       	add	r0,r0
80002212:	05 44       	ld.w	r4,--r2
80002214:	80 00       	ld.sh	r0,r0[0x0]
80002216:	21 48       	sub	r8,20

80002218 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002218:	d4 01       	pushm	lr
8000221a:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
8000221c:	30 08       	mov	r8,0
8000221e:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002220:	30 08       	mov	r8,0
80002222:	16 99       	mov	r9,r11
80002224:	10 9a       	mov	r10,r8
80002226:	1a 9b       	mov	r11,sp
80002228:	f0 1f 00 02 	mcall	80002230 <twim_probe+0x18>
}
8000222c:	2f fd       	sub	sp,-4
8000222e:	d8 02       	popm	pc
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	21 6c       	sub	r12,22

80002234 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002234:	eb cd 40 c0 	pushm	r6-r7,lr
80002238:	18 96       	mov	r6,r12
8000223a:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000223c:	30 28       	mov	r8,2
8000223e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002240:	4b 78       	lddpc	r8,8000231c <twim_read_packet+0xe8>
80002242:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002244:	f0 1f 00 37 	mcall	80002320 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002248:	6e 29       	ld.w	r9,r7[0x8]
8000224a:	4b 78       	lddpc	r8,80002324 <twim_read_packet+0xf0>
8000224c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224e:	6e 39       	ld.w	r9,r7[0xc]
80002250:	4b 68       	lddpc	r8,80002328 <twim_read_packet+0xf4>
80002252:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002254:	30 08       	mov	r8,0
80002256:	4b 6a       	lddpc	r10,8000232c <twim_read_packet+0xf8>
80002258:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000225a:	30 0b       	mov	r11,0
8000225c:	4b 5a       	lddpc	r10,80002330 <twim_read_packet+0xfc>
8000225e:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
80002260:	0f fa       	ld.ub	r10,r7[0x7]
80002262:	f0 0a 18 00 	cp.b	r10,r8
80002266:	c2 50       	breq	800022b0 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002268:	4a d8       	lddpc	r8,8000231c <twim_read_packet+0xe8>
8000226a:	70 08       	ld.w	r8,r8[0x0]
8000226c:	30 19       	mov	r9,1
8000226e:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80002270:	e0 69 00 80 	mov	r9,128
80002274:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002276:	30 29       	mov	r9,2
80002278:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
8000227a:	ee ca ff fc 	sub	r10,r7,-4
8000227e:	4a e9       	lddpc	r9,80002334 <twim_read_packet+0x100>
80002280:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80002282:	0f f9       	ld.ub	r9,r7[0x7]
80002284:	4a da       	lddpc	r10,80002338 <twim_read_packet+0x104>
80002286:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002288:	e0 6b 07 03 	mov	r11,1795
8000228c:	4a ca       	lddpc	r10,8000233c <twim_read_packet+0x108>
8000228e:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002290:	6e 0a       	ld.w	r10,r7[0x0]
80002292:	a1 7a       	lsl	r10,0x1
80002294:	e8 1a a0 00 	orl	r10,0xa000
80002298:	f5 e9 11 09 	or	r9,r10,r9<<0x10
8000229c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229e:	6e 0a       	ld.w	r10,r7[0x0]
800022a0:	6e 39       	ld.w	r9,r7[0xc]
800022a2:	b1 69       	lsl	r9,0x10
800022a4:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a8:	e8 19 e0 01 	orl	r9,0xe001
800022ac:	91 49       	st.w	r8[0x10],r9
800022ae:	c1 18       	rjmp	800022d0 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022b0:	30 0a       	mov	r10,0
800022b2:	4a 28       	lddpc	r8,80002338 <twim_read_packet+0x104>
800022b4:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b6:	e0 6a 07 01 	mov	r10,1793
800022ba:	4a 18       	lddpc	r8,8000233c <twim_read_packet+0x108>
800022bc:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022be:	49 88       	lddpc	r8,8000231c <twim_read_packet+0xe8>
800022c0:	70 08       	ld.w	r8,r8[0x0]
800022c2:	6e 0a       	ld.w	r10,r7[0x0]
800022c4:	b1 69       	lsl	r9,0x10
800022c6:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022ca:	e8 19 e0 01 	orl	r9,0xe001
800022ce:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022d0:	49 38       	lddpc	r8,8000231c <twim_read_packet+0xe8>
800022d2:	70 08       	ld.w	r8,r8[0x0]
800022d4:	49 a9       	lddpc	r9,8000233c <twim_read_packet+0x108>
800022d6:	72 09       	ld.w	r9,r9[0x0]
800022d8:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022da:	30 18       	mov	r8,1
800022dc:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022de:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022e0:	49 48       	lddpc	r8,80002330 <twim_read_packet+0xfc>
800022e2:	70 08       	ld.w	r8,r8[0x0]
800022e4:	58 08       	cp.w	r8,0
800022e6:	c0 80       	breq	800022f6 <twim_read_packet+0xc2>
800022e8:	c0 b8       	rjmp	800022fe <twim_read_packet+0xca>
		cpu_relax();
800022ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ee:	6e 08       	ld.w	r8,r7[0x0]
800022f0:	58 08       	cp.w	r8,0
800022f2:	c0 30       	breq	800022f8 <twim_read_packet+0xc4>
800022f4:	c0 58       	rjmp	800022fe <twim_read_packet+0xca>
800022f6:	48 f7       	lddpc	r7,80002330 <twim_read_packet+0xfc>
800022f8:	f0 1f 00 12 	mcall	80002340 <twim_read_packet+0x10c>
800022fc:	cf 70       	breq	800022ea <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fe:	30 28       	mov	r8,2
80002300:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002302:	48 c8       	lddpc	r8,80002330 <twim_read_packet+0xfc>
80002304:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002306:	5b c8       	cp.w	r8,-4
80002308:	c0 70       	breq	80002316 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000230a:	48 a8       	lddpc	r8,80002330 <twim_read_packet+0xfc>
8000230c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230e:	5b e8       	cp.w	r8,-2
80002310:	c0 30       	breq	80002316 <twim_read_packet+0xe2>
80002312:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002316:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
8000231a:	00 00       	add	r0,r0
8000231c:	00 00       	add	r0,r0
8000231e:	05 30       	ld.ub	r0,r2++
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	21 58       	sub	r8,21
80002324:	00 00       	add	r0,r0
80002326:	05 34       	ld.ub	r4,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 38       	ld.ub	r8,r2++
8000232c:	00 00       	add	r0,r0
8000232e:	05 48       	ld.w	r8,--r2
80002330:	00 00       	add	r0,r0
80002332:	05 3c       	ld.ub	r12,r2++
80002334:	00 00       	add	r0,r0
80002336:	05 40       	ld.w	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 50       	ld.sh	r0,--r2
8000233c:	00 00       	add	r0,r0
8000233e:	05 44       	ld.w	r4,--r2
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	21 48       	sub	r8,20

80002344 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002344:	eb cd 40 e0 	pushm	r5-r7,lr
80002348:	18 97       	mov	r7,r12
8000234a:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000234c:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002350:	30 0a       	mov	r10,0
80002352:	4a 69       	lddpc	r9,800023e8 <twim_master_init+0xa4>
80002354:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002356:	e6 18 00 01 	andh	r8,0x1,COH
8000235a:	c0 b1       	brne	80002370 <twim_master_init+0x2c>
		cpu_irq_disable ();
8000235c:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235e:	3f f8       	mov	r8,-1
80002360:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002362:	30 18       	mov	r8,1
80002364:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002366:	e0 68 00 80 	mov	r8,128
8000236a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
8000236c:	d5 03       	csrf	0x10
8000236e:	c0 88       	rjmp	8000237e <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002370:	3f f8       	mov	r8,-1
80002372:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002374:	30 18       	mov	r8,1
80002376:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002378:	e0 68 00 80 	mov	r8,128
8000237c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237e:	3f f8       	mov	r8,-1
80002380:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002382:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002386:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002388:	30 1a       	mov	r10,1
8000238a:	e0 6b 02 80 	mov	r11,640
8000238e:	49 8c       	lddpc	r12,800023ec <twim_master_init+0xa8>
80002390:	f0 1f 00 18 	mcall	800023f0 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002394:	e6 16 00 01 	andh	r6,0x1,COH
80002398:	c0 21       	brne	8000239c <twim_master_init+0x58>
      cpu_irq_enable();
8000239a:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
8000239c:	eb 39 00 0c 	ld.ub	r9,r5[12]
800023a0:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800023a2:	f0 09 18 00 	cp.b	r9,r8
800023a6:	f9 b8 01 10 	movne	r8,16
800023aa:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023ae:	f9 b8 01 ff 	movne	r8,-1
800023b2:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b6:	6a 0a       	ld.w	r10,r5[0x0]
800023b8:	6a 1b       	ld.w	r11,r5[0x4]
800023ba:	0e 9c       	mov	r12,r7
800023bc:	f0 1f 00 0e 	mcall	800023f4 <twim_master_init+0xb0>
800023c0:	5b 8c       	cp.w	r12,-8
800023c2:	c1 00       	breq	800023e2 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c4:	6a 2b       	ld.w	r11,r5[0x8]
800023c6:	0e 9c       	mov	r12,r7
800023c8:	f0 1f 00 0c 	mcall	800023f8 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023cc:	48 78       	lddpc	r8,800023e8 <twim_master_init+0xa4>
800023ce:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d0:	5b c8       	cp.w	r8,-4
800023d2:	c0 70       	breq	800023e0 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d4:	48 58       	lddpc	r8,800023e8 <twim_master_init+0xa4>
800023d6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d8:	5b e8       	cp.w	r8,-2
800023da:	c0 30       	breq	800023e0 <twim_master_init+0x9c>
800023dc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023e0:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e6:	00 00       	add	r0,r0
800023e8:	00 00       	add	r0,r0
800023ea:	05 3c       	ld.ub	r12,r2++
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	20 08       	sub	r8,0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	26 b4       	sub	r4,107
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	20 e4       	sub	r4,14
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	22 18       	sub	r8,33

800023fc <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023fc:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002400:	58 0a       	cp.w	r10,0
80002402:	c6 30       	breq	800024c8 <eic_init+0xcc>
80002404:	30 08       	mov	r8,0
80002406:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002408:	30 19       	mov	r9,1
8000240a:	30 1e       	mov	lr,1
8000240c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002410:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002414:	11 96       	ld.ub	r6,r8[0x1]
80002416:	f2 06 18 00 	cp.b	r6,r9
8000241a:	c0 71       	brne	80002428 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
8000241c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241e:	11 86       	ld.ub	r6,r8[0x0]
80002420:	fc 06 09 46 	lsl	r6,lr,r6
80002424:	0a 46       	or	r6,r5
80002426:	c0 78       	rjmp	80002434 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002428:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000242a:	11 86       	ld.ub	r6,r8[0x0]
8000242c:	fc 06 09 46 	lsl	r6,lr,r6
80002430:	5c d6       	com	r6
80002432:	0a 66       	and	r6,r5
80002434:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002436:	11 a6       	ld.ub	r6,r8[0x2]
80002438:	f2 06 18 00 	cp.b	r6,r9
8000243c:	c0 71       	brne	8000244a <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002440:	11 86       	ld.ub	r6,r8[0x0]
80002442:	fc 06 09 46 	lsl	r6,lr,r6
80002446:	0a 46       	or	r6,r5
80002448:	c0 78       	rjmp	80002456 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8000244a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000244c:	11 86       	ld.ub	r6,r8[0x0]
8000244e:	fc 06 09 46 	lsl	r6,lr,r6
80002452:	5c d6       	com	r6
80002454:	0a 66       	and	r6,r5
80002456:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002458:	11 b6       	ld.ub	r6,r8[0x3]
8000245a:	f2 06 18 00 	cp.b	r6,r9
8000245e:	c0 71       	brne	8000246c <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002460:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002462:	11 86       	ld.ub	r6,r8[0x0]
80002464:	fc 06 09 46 	lsl	r6,lr,r6
80002468:	0a 46       	or	r6,r5
8000246a:	c0 78       	rjmp	80002478 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
8000246c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246e:	11 86       	ld.ub	r6,r8[0x0]
80002470:	fc 06 09 46 	lsl	r6,lr,r6
80002474:	5c d6       	com	r6
80002476:	0a 66       	and	r6,r5
80002478:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000247a:	11 c6       	ld.ub	r6,r8[0x4]
8000247c:	f2 06 18 00 	cp.b	r6,r9
80002480:	c0 71       	brne	8000248e <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002482:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002484:	11 86       	ld.ub	r6,r8[0x0]
80002486:	fc 06 09 46 	lsl	r6,lr,r6
8000248a:	0a 46       	or	r6,r5
8000248c:	c0 78       	rjmp	8000249a <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002490:	11 86       	ld.ub	r6,r8[0x0]
80002492:	fc 06 09 46 	lsl	r6,lr,r6
80002496:	5c d6       	com	r6
80002498:	0a 66       	and	r6,r5
8000249a:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000249c:	11 d6       	ld.ub	r6,r8[0x5]
8000249e:	f2 06 18 00 	cp.b	r6,r9
800024a2:	c0 71       	brne	800024b0 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a4:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a6:	11 88       	ld.ub	r8,r8[0x0]
800024a8:	fc 08 09 48 	lsl	r8,lr,r8
800024ac:	0c 48       	or	r8,r6
800024ae:	c0 78       	rjmp	800024bc <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024b0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024b2:	11 88       	ld.ub	r8,r8[0x0]
800024b4:	fc 08 09 48 	lsl	r8,lr,r8
800024b8:	5c d8       	com	r8
800024ba:	0c 68       	and	r8,r6
800024bc:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024be:	2f f7       	sub	r7,-1
800024c0:	0e 98       	mov	r8,r7
800024c2:	0e 3a       	cp.w	r10,r7
800024c4:	fe 9b ff a4 	brhi	8000240c <eic_init+0x10>
800024c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024cc <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024cc:	30 18       	mov	r8,1
800024ce:	f0 0b 09 48 	lsl	r8,r8,r11
800024d2:	99 c8       	st.w	r12[0x30],r8
}
800024d4:	5e fc       	retal	r12

800024d6 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d6:	30 18       	mov	r8,1
800024d8:	f0 0b 09 48 	lsl	r8,r8,r11
800024dc:	99 08       	st.w	r12[0x0],r8
}
800024de:	5e fc       	retal	r12

800024e0 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024e0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e4:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e6:	30 19       	mov	r9,1
800024e8:	f2 0b 09 4b 	lsl	r11,r9,r11
800024ec:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ee:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024f0:	e6 18 00 01 	andh	r8,0x1,COH
800024f4:	c0 21       	brne	800024f8 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f6:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f8:	5e fc       	retal	r12
800024fa:	d7 03       	nop

800024fc <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024fc:	f8 08 16 05 	lsr	r8,r12,0x5
80002500:	a9 78       	lsl	r8,0x9
80002502:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002506:	58 7b       	cp.w	r11,7
80002508:	e0 8b 00 05 	brhi	80002512 <gpio_enable_module_pin+0x16>
8000250c:	4a 09       	lddpc	r9,8000258c <gpio_enable_module_pin+0x90>
8000250e:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002512:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002514:	30 19       	mov	r9,1
80002516:	f2 0c 09 49 	lsl	r9,r9,r12
8000251a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000251c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002520:	c3 18       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002522:	30 19       	mov	r9,1
80002524:	f2 0c 09 49 	lsl	r9,r9,r12
80002528:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000252a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000252c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252e:	c2 a8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002530:	30 19       	mov	r9,1
80002532:	f2 0c 09 49 	lsl	r9,r9,r12
80002536:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002538:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000253a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000253c:	c2 38       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253e:	30 19       	mov	r9,1
80002540:	f2 0c 09 49 	lsl	r9,r9,r12
80002544:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002546:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002548:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000254a:	c1 c8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000254c:	30 19       	mov	r9,1
8000254e:	f2 0c 09 49 	lsl	r9,r9,r12
80002552:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002554:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002556:	91 d9       	st.w	r8[0x34],r9
		break;
80002558:	c1 58       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000255a:	30 19       	mov	r9,1
8000255c:	f2 0c 09 49 	lsl	r9,r9,r12
80002560:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002562:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002564:	91 d9       	st.w	r8[0x34],r9
		break;
80002566:	c0 e8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002568:	30 19       	mov	r9,1
8000256a:	f2 0c 09 49 	lsl	r9,r9,r12
8000256e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002570:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002572:	91 d9       	st.w	r8[0x34],r9
		break;
80002574:	c0 78       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002576:	30 19       	mov	r9,1
80002578:	f2 0c 09 49 	lsl	r9,r9,r12
8000257c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257e:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002580:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002582:	30 19       	mov	r9,1
80002584:	f2 0c 09 4c 	lsl	r12,r9,r12
80002588:	91 2c       	st.w	r8[0x8],r12
8000258a:	5e fd       	retal	0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	92 00       	ld.sh	r0,r9[0x0]

80002590 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002590:	d4 21       	pushm	r4-r7,lr
80002592:	18 97       	mov	r7,r12
80002594:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002596:	58 0b       	cp.w	r11,0
80002598:	c0 31       	brne	8000259e <gpio_enable_module+0xe>
8000259a:	30 05       	mov	r5,0
8000259c:	c0 d8       	rjmp	800025b6 <gpio_enable_module+0x26>
8000259e:	30 06       	mov	r6,0
800025a0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800025a2:	6e 1b       	ld.w	r11,r7[0x4]
800025a4:	6e 0c       	ld.w	r12,r7[0x0]
800025a6:	f0 1f 00 06 	mcall	800025bc <gpio_enable_module+0x2c>
800025aa:	18 45       	or	r5,r12
		gpiomap++;
800025ac:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025ae:	2f f6       	sub	r6,-1
800025b0:	0c 34       	cp.w	r4,r6
800025b2:	fe 9b ff f8 	brhi	800025a2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b6:	0a 9c       	mov	r12,r5
800025b8:	d8 22       	popm	r4-r7,pc
800025ba:	00 00       	add	r0,r0
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	24 fc       	sub	r12,79

800025c0 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025c0:	f8 08 16 05 	lsr	r8,r12,0x5
800025c4:	a9 78       	lsl	r8,0x9
800025c6:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025ca:	16 99       	mov	r9,r11
800025cc:	e2 19 00 04 	andl	r9,0x4,COH
800025d0:	c0 70       	breq	800025de <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025d2:	30 19       	mov	r9,1
800025d4:	f2 0c 09 49 	lsl	r9,r9,r12
800025d8:	f1 49 00 74 	st.w	r8[116],r9
800025dc:	c0 68       	rjmp	800025e8 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025de:	30 19       	mov	r9,1
800025e0:	f2 0c 09 49 	lsl	r9,r9,r12
800025e4:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e8:	16 99       	mov	r9,r11
800025ea:	e2 19 00 80 	andl	r9,0x80,COH
800025ee:	c2 40       	breq	80002636 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025f0:	16 99       	mov	r9,r11
800025f2:	e2 19 01 80 	andl	r9,0x180,COH
800025f6:	c0 90       	breq	80002608 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f8:	30 19       	mov	r9,1
800025fa:	f2 0c 09 49 	lsl	r9,r9,r12
800025fe:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002602:	f1 49 00 b8 	st.w	r8[184],r9
80002606:	c1 88       	rjmp	80002636 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002608:	16 99       	mov	r9,r11
8000260a:	e2 19 02 80 	andl	r9,0x280,COH
8000260e:	c0 90       	breq	80002620 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002610:	30 19       	mov	r9,1
80002612:	f2 0c 09 49 	lsl	r9,r9,r12
80002616:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000261a:	f1 49 00 b8 	st.w	r8[184],r9
8000261e:	c0 c8       	rjmp	80002636 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002620:	16 99       	mov	r9,r11
80002622:	e2 19 03 80 	andl	r9,0x380,COH
80002626:	c0 80       	breq	80002636 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002628:	30 19       	mov	r9,1
8000262a:	f2 0c 09 49 	lsl	r9,r9,r12
8000262e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002632:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002636:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000263a:	c1 50       	breq	80002664 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
8000263c:	e2 1b 00 02 	andl	r11,0x2,COH
80002640:	c0 70       	breq	8000264e <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002642:	30 19       	mov	r9,1
80002644:	f2 0c 09 49 	lsl	r9,r9,r12
80002648:	f1 49 00 54 	st.w	r8[84],r9
8000264c:	c0 68       	rjmp	80002658 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264e:	30 19       	mov	r9,1
80002650:	f2 0c 09 49 	lsl	r9,r9,r12
80002654:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002658:	30 19       	mov	r9,1
8000265a:	f2 0c 09 49 	lsl	r9,r9,r12
8000265e:	f1 49 00 44 	st.w	r8[68],r9
80002662:	c0 68       	rjmp	8000266e <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002664:	30 19       	mov	r9,1
80002666:	f2 0c 09 49 	lsl	r9,r9,r12
8000266a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266e:	30 19       	mov	r9,1
80002670:	f2 0c 09 4c 	lsl	r12,r9,r12
80002674:	91 1c       	st.w	r8[0x4],r12
}
80002676:	5e fc       	retal	r12

80002678 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002678:	f8 08 16 05 	lsr	r8,r12,0x5
8000267c:	a9 78       	lsl	r8,0x9
8000267e:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002682:	30 19       	mov	r9,1
80002684:	f2 0c 09 4c 	lsl	r12,r9,r12
80002688:	f1 4c 00 5c 	st.w	r8[92],r12
}
8000268c:	5e fc       	retal	r12

8000268e <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268e:	f8 08 16 05 	lsr	r8,r12,0x5
80002692:	a9 78       	lsl	r8,0x9
80002694:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
80002698:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
8000269c:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800026a0:	30 1a       	mov	r10,1
800026a2:	f4 0c 09 4c 	lsl	r12,r10,r12
800026a6:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026aa:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026ae:	5e fc       	retal	r12

800026b0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026b0:	c0 08       	rjmp	800026b0 <_unhandled_interrupt>
800026b2:	d7 03       	nop

800026b4 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026b4:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026b8:	49 99       	lddpc	r9,8000271c <INTC_register_interrupt+0x68>
800026ba:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026be:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026c2:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026c4:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026c8:	58 0a       	cp.w	r10,0
800026ca:	c0 91       	brne	800026dc <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026cc:	49 59       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
800026ce:	49 6a       	lddpc	r10,80002724 <INTC_register_interrupt+0x70>
800026d0:	12 1a       	sub	r10,r9
800026d2:	fe 79 10 00 	mov	r9,-61440
800026d6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026da:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800026dc:	58 1a       	cp.w	r10,1
800026de:	c0 a1       	brne	800026f2 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800026e0:	49 09       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
800026e2:	49 2a       	lddpc	r10,80002728 <INTC_register_interrupt+0x74>
800026e4:	12 1a       	sub	r10,r9
800026e6:	bf aa       	sbr	r10,0x1e
800026e8:	fe 79 10 00 	mov	r9,-61440
800026ec:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026f0:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800026f2:	58 2a       	cp.w	r10,2
800026f4:	c0 a1       	brne	80002708 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800026f6:	48 b9       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
800026f8:	48 da       	lddpc	r10,8000272c <INTC_register_interrupt+0x78>
800026fa:	12 1a       	sub	r10,r9
800026fc:	bf ba       	sbr	r10,0x1f
800026fe:	fe 79 10 00 	mov	r9,-61440
80002702:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002706:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002708:	48 69       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
8000270a:	48 aa       	lddpc	r10,80002730 <INTC_register_interrupt+0x7c>
8000270c:	12 1a       	sub	r10,r9
8000270e:	ea 1a c0 00 	orh	r10,0xc000
80002712:	fe 79 10 00 	mov	r9,-61440
80002716:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000271a:	5e fc       	retal	r12
8000271c:	80 00       	ld.sh	r0,r0[0x0]
8000271e:	92 20       	ld.sh	r0,r9[0x4]
80002720:	80 00       	ld.sh	r0,r0[0x0]
80002722:	90 00       	ld.sh	r0,r8[0x0]
80002724:	80 00       	ld.sh	r0,r0[0x0]
80002726:	91 04       	st.w	r8[0x0],r4
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	91 12       	st.w	r8[0x4],r2
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	91 20       	st.w	r8[0x8],r0
80002730:	80 00       	ld.sh	r0,r0[0x0]
80002732:	91 2e       	st.w	r8[0x8],lr

80002734 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002734:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002736:	49 18       	lddpc	r8,80002778 <INTC_init_interrupts+0x44>
80002738:	e3 b8 00 01 	mtsr	0x4,r8
8000273c:	49 0e       	lddpc	lr,8000277c <INTC_init_interrupts+0x48>
8000273e:	30 07       	mov	r7,0
80002740:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002742:	49 0c       	lddpc	r12,80002780 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002744:	49 05       	lddpc	r5,80002784 <INTC_init_interrupts+0x50>
80002746:	10 15       	sub	r5,r8
80002748:	fe 76 10 00 	mov	r6,-61440
8000274c:	c1 08       	rjmp	8000276c <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000274e:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002750:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002752:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002754:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002758:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000275a:	10 3a       	cp.w	r10,r8
8000275c:	fe 9b ff fc 	brhi	80002754 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002760:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002764:	2f f7       	sub	r7,-1
80002766:	2f 8e       	sub	lr,-8
80002768:	59 f7       	cp.w	r7,31
8000276a:	c0 50       	breq	80002774 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000276c:	7c 08       	ld.w	r8,lr[0x0]
8000276e:	58 08       	cp.w	r8,0
80002770:	ce f1       	brne	8000274e <INTC_init_interrupts+0x1a>
80002772:	cf 7b       	rjmp	80002760 <INTC_init_interrupts+0x2c>
80002774:	d8 22       	popm	r4-r7,pc
80002776:	00 00       	add	r0,r0
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	90 00       	ld.sh	r0,r8[0x0]
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	92 20       	ld.sh	r0,r9[0x4]
80002780:	80 00       	ld.sh	r0,r0[0x0]
80002782:	26 b0       	sub	r0,107
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	91 04       	st.w	r8[0x0],r4

80002788 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002788:	fe 78 10 00 	mov	r8,-61440
8000278c:	e0 69 00 83 	mov	r9,131
80002790:	f2 0c 01 0c 	sub	r12,r9,r12
80002794:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002798:	f2 ca ff c0 	sub	r10,r9,-64
8000279c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027a0:	58 08       	cp.w	r8,0
800027a2:	c0 21       	brne	800027a6 <_get_interrupt_handler+0x1e>
800027a4:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027a6:	f0 08 12 00 	clz	r8,r8
800027aa:	48 5a       	lddpc	r10,800027bc <_get_interrupt_handler+0x34>
800027ac:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027b0:	f0 08 11 1f 	rsub	r8,r8,31
800027b4:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027b6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027ba:	5e fc       	retal	r12
800027bc:	80 00       	ld.sh	r0,r0[0x0]
800027be:	92 20       	ld.sh	r0,r9[0x4]

800027c0 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027c0:	f8 c8 00 01 	sub	r8,r12,1
800027c4:	f0 0b 00 0b 	add	r11,r8,r11
800027c8:	f6 0c 0d 0a 	divu	r10,r11,r12
800027cc:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027ce:	f4 c8 00 01 	sub	r8,r10,1
800027d2:	e0 48 00 fe 	cp.w	r8,254
800027d6:	e0 88 00 03 	brls	800027dc <getBaudDiv+0x1c>
800027da:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800027dc:	5c 8c       	casts.h	r12
}
800027de:	5e fc       	retal	r12

800027e0 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800027e0:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800027e2:	30 18       	mov	r8,1
800027e4:	f0 0b 18 00 	cp.b	r11,r8
800027e8:	5f be       	srhi	lr
800027ea:	f0 0a 18 00 	cp.b	r10,r8
800027ee:	5f b8       	srhi	r8
800027f0:	fd e8 10 08 	or	r8,lr,r8
800027f4:	c0 30       	breq	800027fa <spi_selectionMode+0x1a>
800027f6:	30 2c       	mov	r12,2
800027f8:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800027fa:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800027fc:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002800:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002804:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002808:	99 18       	st.w	r12[0x4],r8
8000280a:	d8 0a       	popm	pc,r12=0

8000280c <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000280c:	78 18       	ld.w	r8,r12[0x4]
8000280e:	ea 18 00 0f 	orh	r8,0xf
80002812:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002814:	78 18       	ld.w	r8,r12[0x4]
80002816:	e2 18 00 04 	andl	r8,0x4,COH
8000281a:	c0 f0       	breq	80002838 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000281c:	30 e8       	mov	r8,14
8000281e:	f0 0b 18 00 	cp.b	r11,r8
80002822:	e0 8b 00 19 	brhi	80002854 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002826:	78 18       	ld.w	r8,r12[0x4]
80002828:	b1 6b       	lsl	r11,0x10
8000282a:	ea 1b ff f0 	orh	r11,0xfff0
8000282e:	e8 1b ff ff 	orl	r11,0xffff
80002832:	10 6b       	and	r11,r8
80002834:	99 1b       	st.w	r12[0x4],r11
80002836:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002838:	30 38       	mov	r8,3
8000283a:	f0 0b 18 00 	cp.b	r11,r8
8000283e:	e0 8b 00 0b 	brhi	80002854 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002842:	78 18       	ld.w	r8,r12[0x4]
80002844:	2f 0b       	sub	r11,-16
80002846:	30 19       	mov	r9,1
80002848:	f2 0b 09 4b 	lsl	r11,r9,r11
8000284c:	5c db       	com	r11
8000284e:	10 6b       	and	r11,r8
80002850:	99 1b       	st.w	r12[0x4],r11
80002852:	5e fd       	retal	0
80002854:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002856:	5e fc       	retal	r12

80002858 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002858:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000285c:	c0 58       	rjmp	80002866 <spi_unselectChip+0xe>
		if (!timeout--) {
8000285e:	58 08       	cp.w	r8,0
80002860:	c0 21       	brne	80002864 <spi_unselectChip+0xc>
80002862:	5e ff       	retal	1
80002864:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002866:	78 49       	ld.w	r9,r12[0x10]
80002868:	e2 19 02 00 	andl	r9,0x200,COH
8000286c:	cf 90       	breq	8000285e <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000286e:	78 18       	ld.w	r8,r12[0x4]
80002870:	ea 18 00 0f 	orh	r8,0xf
80002874:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002876:	fc 18 01 00 	movh	r8,0x100
8000287a:	99 08       	st.w	r12[0x0],r8
8000287c:	5e fd       	retal	0
8000287e:	d7 03       	nop

80002880 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002880:	eb cd 40 f8 	pushm	r3-r7,lr
80002884:	18 95       	mov	r5,r12
80002886:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002888:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000288c:	30 38       	mov	r8,3
8000288e:	f0 06 18 00 	cp.b	r6,r8
80002892:	e0 8b 00 4d 	brhi	8000292c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002896:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000289a:	30 18       	mov	r8,1
8000289c:	f0 04 18 00 	cp.b	r4,r8
800028a0:	e0 8b 00 46 	brhi	8000292c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028a4:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028a8:	30 78       	mov	r8,7
800028aa:	f0 03 18 00 	cp.b	r3,r8
800028ae:	e0 88 00 3f 	brls	8000292c <spi_setupChipReg+0xac>
800028b2:	31 08       	mov	r8,16
800028b4:	f0 03 18 00 	cp.b	r3,r8
800028b8:	e0 8b 00 3a 	brhi	8000292c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028bc:	14 9b       	mov	r11,r10
800028be:	6e 1c       	ld.w	r12,r7[0x4]
800028c0:	f0 1f 00 1d 	mcall	80002934 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028c4:	c3 45       	brlt	8000292c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028c6:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028c8:	ec 09 16 01 	lsr	r9,r6,0x1
800028cc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028d0:	ec 16 00 01 	eorl	r6,0x1
800028d4:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800028d8:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800028dc:	20 83       	sub	r3,8
800028de:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800028e2:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800028e6:	ef 39 00 09 	ld.ub	r9,r7[9]
800028ea:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800028ee:	ef 39 00 0a 	ld.ub	r9,r7[10]
800028f2:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800028f6:	0f 89       	ld.ub	r9,r7[0x0]
800028f8:	30 1a       	mov	r10,1
800028fa:	f4 09 18 00 	cp.b	r9,r10
800028fe:	c0 e0       	breq	8000291a <spi_setupChipReg+0x9a>
80002900:	c0 a3       	brcs	80002914 <spi_setupChipReg+0x94>
80002902:	30 2a       	mov	r10,2
80002904:	f4 09 18 00 	cp.b	r9,r10
80002908:	c0 c0       	breq	80002920 <spi_setupChipReg+0xa0>
8000290a:	30 3a       	mov	r10,3
8000290c:	f4 09 18 00 	cp.b	r9,r10
80002910:	c0 e1       	brne	8000292c <spi_setupChipReg+0xac>
80002912:	c0 a8       	rjmp	80002926 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002914:	8b c8       	st.w	r5[0x30],r8
80002916:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000291a:	8b d8       	st.w	r5[0x34],r8
8000291c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002920:	8b e8       	st.w	r5[0x38],r8
80002922:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002926:	8b f8       	st.w	r5[0x3c],r8
80002928:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000292c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000292e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002932:	00 00       	add	r0,r0
80002934:	80 00       	ld.sh	r0,r0[0x0]
80002936:	27 c0       	sub	r0,124

80002938 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002938:	30 18       	mov	r8,1
8000293a:	99 08       	st.w	r12[0x0],r8
}
8000293c:	5e fc       	retal	r12

8000293e <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000293e:	76 09       	ld.w	r9,r11[0x0]
80002940:	58 29       	cp.w	r9,2
80002942:	e0 88 00 03 	brls	80002948 <tc_init_waveform+0xa>
80002946:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002948:	76 18       	ld.w	r8,r11[0x4]
8000294a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000294e:	af ba       	sbr	r10,0xf
80002950:	10 9b       	mov	r11,r8
80002952:	e6 1b c0 00 	andh	r11,0xc000,COH
80002956:	16 4a       	or	r10,r11
80002958:	10 9b       	mov	r11,r8
8000295a:	e6 1b 30 00 	andh	r11,0x3000,COH
8000295e:	16 4a       	or	r10,r11
80002960:	10 9b       	mov	r11,r8
80002962:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002966:	16 4a       	or	r10,r11
80002968:	10 9b       	mov	r11,r8
8000296a:	e6 1b 03 00 	andh	r11,0x300,COH
8000296e:	16 4a       	or	r10,r11
80002970:	10 9b       	mov	r11,r8
80002972:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002976:	16 4a       	or	r10,r11
80002978:	10 9b       	mov	r11,r8
8000297a:	e6 1b 00 30 	andh	r11,0x30,COH
8000297e:	16 4a       	or	r10,r11
80002980:	10 9b       	mov	r11,r8
80002982:	e6 1b 00 0c 	andh	r11,0xc,COH
80002986:	16 4a       	or	r10,r11
80002988:	10 9b       	mov	r11,r8
8000298a:	e6 1b 00 03 	andh	r11,0x3,COH
8000298e:	16 4a       	or	r10,r11
80002990:	10 9b       	mov	r11,r8
80002992:	e2 1b 60 00 	andl	r11,0x6000,COH
80002996:	16 4a       	or	r10,r11
80002998:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
8000299c:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800029a0:	10 9b       	mov	r11,r8
800029a2:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029a6:	16 4a       	or	r10,r11
800029a8:	10 9b       	mov	r11,r8
800029aa:	e2 1b 03 00 	andl	r11,0x300,COH
800029ae:	16 4a       	or	r10,r11
800029b0:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029b4:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029b8:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029bc:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029c0:	10 9b       	mov	r11,r8
800029c2:	e2 1b 00 30 	andl	r11,0x30,COH
800029c6:	16 4a       	or	r10,r11
800029c8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029cc:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029d0:	a5 69       	lsl	r9,0x4
800029d2:	2f f9       	sub	r9,-1
800029d4:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800029d8:	5e fd       	retal	0

800029da <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029da:	58 2b       	cp.w	r11,2
800029dc:	e0 88 00 03 	brls	800029e2 <tc_start+0x8>
800029e0:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800029e2:	a7 6b       	lsl	r11,0x6
800029e4:	16 0c       	add	r12,r11
800029e6:	30 58       	mov	r8,5
800029e8:	99 08       	st.w	r12[0x0],r8
800029ea:	5e fd       	retal	0

800029ec <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029ec:	58 2b       	cp.w	r11,2
800029ee:	e0 88 00 03 	brls	800029f4 <tc_stop+0x8>
800029f2:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
800029f4:	a7 6b       	lsl	r11,0x6
800029f6:	16 0c       	add	r12,r11
800029f8:	30 28       	mov	r8,2
800029fa:	99 08       	st.w	r12[0x0],r8
800029fc:	5e fd       	retal	0

800029fe <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029fe:	58 2b       	cp.w	r11,2
80002a00:	e0 88 00 03 	brls	80002a06 <tc_read_sr+0x8>
80002a04:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a06:	a7 6b       	lsl	r11,0x6
80002a08:	2e 0b       	sub	r11,-32
80002a0a:	16 0c       	add	r12,r11
80002a0c:	78 0c       	ld.w	r12,r12[0x0]
}
80002a0e:	5e fc       	retal	r12

80002a10 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a10:	58 2b       	cp.w	r11,2
80002a12:	e0 88 00 03 	brls	80002a18 <tc_write_rc+0x8>
80002a16:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a18:	f6 08 15 04 	lsl	r8,r11,0x4
80002a1c:	2f f8       	sub	r8,-1
80002a1e:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a22:	e2 18 80 00 	andl	r8,0x8000,COH
80002a26:	c0 c0       	breq	80002a3e <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a28:	a7 6b       	lsl	r11,0x6
80002a2a:	16 0c       	add	r12,r11
80002a2c:	2e 4c       	sub	r12,-28
80002a2e:	78 08       	ld.w	r8,r12[0x0]
80002a30:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a34:	e0 18 00 00 	andl	r8,0x0
80002a38:	f3 e8 10 08 	or	r8,r9,r8
80002a3c:	99 08       	st.w	r12[0x0],r8

  return value;
80002a3e:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a42:	5e fc       	retal	r12

80002a44 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a44:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a48:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a4c:	58 2b       	cp.w	r11,2
80002a4e:	e0 88 00 04 	brls	80002a56 <tc_configure_interrupts+0x12>
80002a52:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a56:	ee 19 00 01 	eorh	r9,0x1
80002a5a:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a5e:	74 08       	ld.w	r8,r10[0x0]
80002a60:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a64:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a68:	a7 6e       	lsl	lr,0x6
80002a6a:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a6e:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a72:	0e 4e       	or	lr,r7
80002a74:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002a78:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002a7c:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002a80:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002a84:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002a88:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002a8c:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002a90:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002a94:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a98:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002a9c:	f6 0e 15 06 	lsl	lr,r11,0x6
80002aa0:	f8 0e 00 0e 	add	lr,r12,lr
80002aa4:	2d ce       	sub	lr,-36
80002aa6:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002aa8:	58 09       	cp.w	r9,0
80002aaa:	c0 20       	breq	80002aae <tc_configure_interrupts+0x6a>
80002aac:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002aae:	74 08       	ld.w	r8,r10[0x0]
80002ab0:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002ab4:	e0 65 00 80 	mov	r5,128
80002ab8:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002abc:	74 08       	ld.w	r8,r10[0x0]
80002abe:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002ac2:	f9 b4 00 40 	moveq	r4,64
80002ac6:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002aca:	74 08       	ld.w	r8,r10[0x0]
80002acc:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002ad0:	f9 b3 00 20 	moveq	r3,32
80002ad4:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002ad8:	74 08       	ld.w	r8,r10[0x0]
80002ada:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002ade:	f9 b2 00 10 	moveq	r2,16
80002ae2:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002ae6:	74 08       	ld.w	r8,r10[0x0]
80002ae8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002aec:	f9 b6 00 08 	moveq	r6,8
80002af0:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002af4:	74 08       	ld.w	r8,r10[0x0]
80002af6:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002afa:	f9 b7 00 04 	moveq	r7,4
80002afe:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002b02:	74 08       	ld.w	r8,r10[0x0]
80002b04:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b08:	f9 be 00 02 	moveq	lr,2
80002b0c:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b10:	74 08       	ld.w	r8,r10[0x0]
80002b12:	ec 18 00 01 	eorl	r8,0x1
80002b16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b1a:	eb e8 10 08 	or	r8,r5,r8
80002b1e:	08 48       	or	r8,r4
80002b20:	06 48       	or	r8,r3
80002b22:	04 48       	or	r8,r2
80002b24:	0c 48       	or	r8,r6
80002b26:	0e 48       	or	r8,r7
80002b28:	1c 48       	or	r8,lr
80002b2a:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b2e:	f8 0a 00 0a 	add	r10,r12,r10
80002b32:	2d 8a       	sub	r10,-40
80002b34:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b36:	a7 6b       	lsl	r11,0x6
80002b38:	2e 0b       	sub	r11,-32
80002b3a:	16 0c       	add	r12,r11
80002b3c:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b3e:	58 09       	cp.w	r9,0
80002b40:	c0 31       	brne	80002b46 <tc_configure_interrupts+0x102>
80002b42:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b46:	d5 03       	csrf	0x10
80002b48:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b4c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b4c:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b4e:	f6 08 15 04 	lsl	r8,r11,0x4
80002b52:	14 38       	cp.w	r8,r10
80002b54:	f9 b8 08 10 	movls	r8,16
80002b58:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b5c:	f0 0b 02 4b 	mul	r11,r8,r11
80002b60:	f6 09 16 01 	lsr	r9,r11,0x1
80002b64:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b68:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b6c:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b70:	f2 cb 00 01 	sub	r11,r9,1
80002b74:	e0 4b ff fe 	cp.w	r11,65534
80002b78:	e0 88 00 03 	brls	80002b7e <usart_set_async_baudrate+0x32>
80002b7c:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002b7e:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002b80:	e8 6e 00 00 	mov	lr,524288
80002b84:	59 08       	cp.w	r8,16
80002b86:	fc 08 17 10 	movne	r8,lr
80002b8a:	f9 b8 00 00 	moveq	r8,0
80002b8e:	e4 1b ff f7 	andh	r11,0xfff7
80002b92:	e0 1b fe cf 	andl	r11,0xfecf
80002b96:	16 48       	or	r8,r11
80002b98:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002b9a:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002b9e:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002ba2:	99 89       	st.w	r12[0x20],r9
80002ba4:	d8 0a       	popm	pc,r12=0

80002ba6 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002ba6:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ba8:	e2 18 00 02 	andl	r8,0x2,COH
80002bac:	c0 31       	brne	80002bb2 <usart_write_char+0xc>
80002bae:	30 2c       	mov	r12,2
80002bb0:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bb2:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bb6:	99 7b       	st.w	r12[0x1c],r11
80002bb8:	5e fd       	retal	0
80002bba:	d7 03       	nop

80002bbc <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002bbc:	eb cd 40 e0 	pushm	r5-r7,lr
80002bc0:	18 96       	mov	r6,r12
80002bc2:	16 95       	mov	r5,r11
80002bc4:	e0 67 27 0f 	mov	r7,9999
80002bc8:	c0 68       	rjmp	80002bd4 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bca:	58 07       	cp.w	r7,0
80002bcc:	c0 31       	brne	80002bd2 <usart_putchar+0x16>
80002bce:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bd2:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bd4:	0a 9b       	mov	r11,r5
80002bd6:	0c 9c       	mov	r12,r6
80002bd8:	f0 1f 00 03 	mcall	80002be4 <usart_putchar+0x28>
80002bdc:	cf 71       	brne	80002bca <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002bde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002be2:	00 00       	add	r0,r0
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	2b a6       	sub	r6,-70

80002be8 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002be8:	78 58       	ld.w	r8,r12[0x14]
80002bea:	e2 18 00 e0 	andl	r8,0xe0,COH
80002bee:	c0 30       	breq	80002bf4 <usart_read_char+0xc>
80002bf0:	30 4c       	mov	r12,4
80002bf2:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002bf4:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002bf6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bfa:	c0 31       	brne	80002c00 <usart_read_char+0x18>
80002bfc:	30 3c       	mov	r12,3
80002bfe:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002c00:	78 68       	ld.w	r8,r12[0x18]
80002c02:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002c06:	97 08       	st.w	r11[0x0],r8
80002c08:	5e fd       	retal	0
80002c0a:	d7 03       	nop

80002c0c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c0c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c10:	18 96       	mov	r6,r12
80002c12:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c14:	17 8b       	ld.ub	r11,r11[0x0]
80002c16:	58 0b       	cp.w	r11,0
80002c18:	c0 80       	breq	80002c28 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c1a:	2f f7       	sub	r7,-1
80002c1c:	0c 9c       	mov	r12,r6
80002c1e:	f0 1f 00 04 	mcall	80002c2c <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c22:	0f 8b       	ld.ub	r11,r7[0x0]
80002c24:	58 0b       	cp.w	r11,0
80002c26:	cf a1       	brne	80002c1a <usart_write_line+0xe>
80002c28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c2c:	80 00       	ld.sh	r0,r0[0x0]
80002c2e:	2b bc       	sub	r12,-69

80002c30 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c30:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c34:	e6 18 00 01 	andh	r8,0x1,COH
80002c38:	c0 71       	brne	80002c46 <usart_reset+0x16>
80002c3a:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c3c:	3f f8       	mov	r8,-1
80002c3e:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c40:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c42:	d5 03       	csrf	0x10
80002c44:	c0 48       	rjmp	80002c4c <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c46:	3f f8       	mov	r8,-1
80002c48:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c4a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c4c:	30 08       	mov	r8,0
80002c4e:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c50:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c52:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c54:	e8 68 61 0c 	mov	r8,549132
80002c58:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c5a:	5e fc       	retal	r12

80002c5c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c5c:	eb cd 40 e0 	pushm	r5-r7,lr
80002c60:	18 96       	mov	r6,r12
80002c62:	16 97       	mov	r7,r11
80002c64:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c66:	f0 1f 00 2f 	mcall	80002d20 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c6a:	58 07       	cp.w	r7,0
80002c6c:	c5 80       	breq	80002d1c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c6e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c70:	30 49       	mov	r9,4
80002c72:	f2 08 18 00 	cp.b	r8,r9
80002c76:	e0 88 00 53 	brls	80002d1c <usart_init_rs232+0xc0>
80002c7a:	30 99       	mov	r9,9
80002c7c:	f2 08 18 00 	cp.b	r8,r9
80002c80:	e0 8b 00 4e 	brhi	80002d1c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c84:	0f d9       	ld.ub	r9,r7[0x5]
80002c86:	30 78       	mov	r8,7
80002c88:	f0 09 18 00 	cp.b	r9,r8
80002c8c:	e0 8b 00 48 	brhi	80002d1c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002c90:	8e 39       	ld.sh	r9,r7[0x6]
80002c92:	e0 68 01 01 	mov	r8,257
80002c96:	f0 09 19 00 	cp.h	r9,r8
80002c9a:	e0 8b 00 41 	brhi	80002d1c <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002c9e:	ef 39 00 08 	ld.ub	r9,r7[8]
80002ca2:	30 38       	mov	r8,3
80002ca4:	f0 09 18 00 	cp.b	r9,r8
80002ca8:	e0 8b 00 3a 	brhi	80002d1c <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002cac:	0a 9a       	mov	r10,r5
80002cae:	6e 0b       	ld.w	r11,r7[0x0]
80002cb0:	0c 9c       	mov	r12,r6
80002cb2:	f0 1f 00 1d 	mcall	80002d24 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cb6:	58 1c       	cp.w	r12,1
80002cb8:	c3 20       	breq	80002d1c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002cba:	0f c8       	ld.ub	r8,r7[0x4]
80002cbc:	30 99       	mov	r9,9
80002cbe:	f2 08 18 00 	cp.b	r8,r9
80002cc2:	c0 51       	brne	80002ccc <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cc4:	6c 18       	ld.w	r8,r6[0x4]
80002cc6:	b1 b8       	sbr	r8,0x11
80002cc8:	8d 18       	st.w	r6[0x4],r8
80002cca:	c0 68       	rjmp	80002cd6 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002ccc:	6c 19       	ld.w	r9,r6[0x4]
80002cce:	20 58       	sub	r8,5
80002cd0:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cd4:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cd6:	6c 19       	ld.w	r9,r6[0x4]
80002cd8:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002cdc:	0f d8       	ld.ub	r8,r7[0x5]
80002cde:	a9 78       	lsl	r8,0x9
80002ce0:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002ce4:	12 48       	or	r8,r9
80002ce6:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002ce8:	8e 38       	ld.sh	r8,r7[0x6]
80002cea:	30 29       	mov	r9,2
80002cec:	f2 08 19 00 	cp.h	r8,r9
80002cf0:	e0 88 00 09 	brls	80002d02 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002cf4:	6c 18       	ld.w	r8,r6[0x4]
80002cf6:	ad b8       	sbr	r8,0xd
80002cf8:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002cfa:	8e b8       	ld.uh	r8,r7[0x6]
80002cfc:	20 28       	sub	r8,2
80002cfe:	8d a8       	st.w	r6[0x28],r8
80002d00:	c0 68       	rjmp	80002d0c <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002d02:	6c 19       	ld.w	r9,r6[0x4]
80002d04:	5c 78       	castu.h	r8
80002d06:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d0a:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d0c:	6c 18       	ld.w	r8,r6[0x4]
80002d0e:	e0 18 ff f0 	andl	r8,0xfff0
80002d12:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d14:	35 08       	mov	r8,80
80002d16:	8d 08       	st.w	r6[0x0],r8
80002d18:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d1c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2c 30       	sub	r0,-61
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	2b 4c       	sub	r12,-76

80002d28 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d28:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d2c:	fe c0 9d 2c 	sub	r0,pc,-25300

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d30:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d34:	d5 53       	csrf	0x15
  cp      r0, r1
80002d36:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d38:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d3c:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d3e:	c0 72       	brcc	80002d4c <idata_load_loop_end>
  cp      r0, r1
80002d40:	fe c2 93 a0 	sub	r2,pc,-27744

80002d44 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d44:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d46:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d48:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d4a:	cf d3       	brcs	80002d44 <idata_load_loop>

80002d4c <idata_load_loop_end>:
  mov     r2, 0
80002d4c:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d50:	e0 61 07 40 	mov	r1,1856
  cp      r0, r1
  brlo    udata_clear_loop
80002d54:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d56:	c0 62       	brcc	80002d62 <udata_clear_loop_end>
80002d58:	30 02       	mov	r2,0
80002d5a:	30 03       	mov	r3,0

80002d5c <udata_clear_loop>:
80002d5c:	a1 22       	st.d	r0++,r2
80002d5e:	02 30       	cp.w	r0,r1
80002d60:	cf e3       	brcs	80002d5c <udata_clear_loop>

80002d62 <udata_clear_loop_end>:
80002d62:	fe cf fa 66 	sub	pc,pc,-1434
80002d66:	d7 03       	nop

80002d68 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002d68:	eb cd 40 c0 	pushm	r6-r7,lr
80002d6c:	20 2d       	sub	sp,8
80002d6e:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002d70:	30 08       	mov	r8,0
80002d72:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d74:	e1 b6 00 00 	mfsr	r6,0x0
80002d78:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002d7a:	1b 88       	ld.ub	r8,sp[0x0]
80002d7c:	ea 18 ff ff 	orh	r8,0xffff
80002d80:	e8 18 ff 80 	orl	r8,0xff80
80002d84:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002d86:	49 17       	lddpc	r7,80002dc8 <pal_trx_reg_read+0x60>
80002d88:	0f 8b       	ld.ub	r11,r7[0x0]
80002d8a:	fe 7c 40 00 	mov	r12,-49152
80002d8e:	f0 1f 00 10 	mcall	80002dcc <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002d92:	30 1a       	mov	r10,1
80002d94:	1a 9b       	mov	r11,sp
80002d96:	fe 7c 40 00 	mov	r12,-49152
80002d9a:	f0 1f 00 0e 	mcall	80002dd0 <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002d9e:	30 1a       	mov	r10,1
80002da0:	fa cb ff f9 	sub	r11,sp,-7
80002da4:	fe 7c 40 00 	mov	r12,-49152
80002da8:	f0 1f 00 0b 	mcall	80002dd4 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002dac:	0f 8b       	ld.ub	r11,r7[0x0]
80002dae:	fe 7c 40 00 	mov	r12,-49152
80002db2:	f0 1f 00 0a 	mcall	80002dd8 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002db6:	e6 16 00 01 	andh	r6,0x1,COH
80002dba:	c0 21       	brne	80002dbe <pal_trx_reg_read+0x56>
80002dbc:	d5 03       	csrf	0x10

	return register_value;
}
80002dbe:	1b fc       	ld.ub	r12,sp[0x7]
80002dc0:	2f ed       	sub	sp,-8
80002dc2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dc6:	00 00       	add	r0,r0
80002dc8:	00 00       	add	r0,r0
80002dca:	00 08       	add	r8,r0
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	28 0c       	sub	r12,-128
80002dd0:	80 00       	ld.sh	r0,r0[0x0]
80002dd2:	2e 76       	sub	r6,-25
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2e 26       	sub	r6,-30
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	28 58       	sub	r8,-123

80002ddc <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ddc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002de0:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002de2:	e6 18 00 01 	andh	r8,0x1,COH
80002de6:	c0 21       	brne	80002dea <sysclk_init+0xe>
      cpu_irq_enable();
80002de8:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002dea:	5e fc       	retal	r12

80002dec <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002dec:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002dee:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002df2:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002df4:	a3 6c       	lsl	r12,0x2
80002df6:	fe 7a 14 20 	mov	r10,-60384
80002dfa:	f8 0a 00 08 	add	r8,r12,r10
80002dfe:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002e00:	30 1e       	mov	lr,1
80002e02:	fc 0b 09 4b 	lsl	r11,lr,r11
80002e06:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e08:	32 0a       	mov	r10,32
80002e0a:	ea 1a aa 00 	orh	r10,0xaa00
80002e0e:	14 0c       	add	r12,r10
80002e10:	fe 7a 14 00 	mov	r10,-60416
80002e14:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002e18:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e1a:	12 98       	mov	r8,r9
80002e1c:	e6 18 00 01 	andh	r8,0x1,COH
80002e20:	c0 21       	brne	80002e24 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002e22:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002e24:	d8 02       	popm	pc

80002e26 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002e26:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e2a:	58 0a       	cp.w	r10,0
80002e2c:	c0 61       	brne	80002e38 <spi_read_packet+0x12>
80002e2e:	c2 28       	rjmp	80002e72 <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e30:	58 08       	cp.w	r8,0
80002e32:	c1 d0       	breq	80002e6c <spi_read_packet+0x46>
80002e34:	20 18       	sub	r8,1
80002e36:	c0 68       	rjmp	80002e42 <spi_read_packet+0x1c>
80002e38:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e3c:	e0 67 00 ff 	mov	r7,255
80002e40:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002e42:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002e44:	e2 19 00 02 	andl	r9,0x2,COH
80002e48:	cf 40       	breq	80002e30 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e4a:	99 37       	st.w	r12[0xc],r7
80002e4c:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002e4e:	c0 48       	rjmp	80002e56 <spi_read_packet+0x30>
			if (!timeout--) {
80002e50:	58 08       	cp.w	r8,0
80002e52:	c0 d0       	breq	80002e6c <spi_read_packet+0x46>
80002e54:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002e56:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002e58:	e2 19 02 01 	andl	r9,0x201,COH
80002e5c:	e0 49 02 01 	cp.w	r9,513
80002e60:	cf 81       	brne	80002e50 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002e62:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002e64:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002e66:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e68:	ce c1       	brne	80002e40 <spi_read_packet+0x1a>
80002e6a:	c0 48       	rjmp	80002e72 <spi_read_packet+0x4c>
80002e6c:	3f dc       	mov	r12,-3
80002e6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e72:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002e76 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002e76:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002e78:	58 0a       	cp.w	r10,0
80002e7a:	c0 81       	brne	80002e8a <spi_write_packet+0x14>
80002e7c:	c1 28       	rjmp	80002ea0 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e7e:	58 08       	cp.w	r8,0
80002e80:	c0 31       	brne	80002e86 <spi_write_packet+0x10>
80002e82:	3f dc       	mov	r12,-3
80002e84:	d8 02       	popm	pc
80002e86:	20 18       	sub	r8,1
80002e88:	c0 48       	rjmp	80002e90 <spi_write_packet+0x1a>
80002e8a:	e0 6e 3a 98 	mov	lr,15000
80002e8e:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002e90:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002e92:	e2 19 00 02 	andl	r9,0x2,COH
80002e96:	cf 40       	breq	80002e7e <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e98:	17 38       	ld.ub	r8,r11++
80002e9a:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002e9c:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002e9e:	cf 81       	brne	80002e8e <spi_write_packet+0x18>
80002ea0:	d8 0a       	popm	pc,r12=0
80002ea2:	d7 03       	nop
	...

80002eb0 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002eb0:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002eb2:	30 0b       	mov	r11,0
80002eb4:	fe 7c 5c 00 	mov	r12,-41984
80002eb8:	f0 1f 00 17 	mcall	80002f14 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002ebc:	49 78       	lddpc	r8,80002f18 <tc_irq+0x68>
80002ebe:	70 09       	ld.w	r9,r8[0x0]
80002ec0:	2f f9       	sub	r9,-1
80002ec2:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002ec4:	70 08       	ld.w	r8,r8[0x0]
80002ec6:	59 38       	cp.w	r8,19
80002ec8:	e0 8b 00 0c 	brhi	80002ee0 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002ecc:	32 9c       	mov	r12,41
80002ece:	f0 1f 00 14 	mcall	80002f1c <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002ed2:	30 4c       	mov	r12,4
80002ed4:	f0 1f 00 12 	mcall	80002f1c <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002ed8:	30 bc       	mov	r12,11
80002eda:	f0 1f 00 11 	mcall	80002f1c <tc_irq+0x6c>
		return;
80002ede:	c1 98       	rjmp	80002f10 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002ee0:	48 e8       	lddpc	r8,80002f18 <tc_irq+0x68>
80002ee2:	70 08       	ld.w	r8,r8[0x0]
80002ee4:	59 58       	cp.w	r8,21
80002ee6:	c0 41       	brne	80002eee <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002ee8:	32 9c       	mov	r12,41
80002eea:	f0 1f 00 0d 	mcall	80002f1c <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002eee:	48 b8       	lddpc	r8,80002f18 <tc_irq+0x68>
80002ef0:	70 08       	ld.w	r8,r8[0x0]
80002ef2:	59 68       	cp.w	r8,22
80002ef4:	c0 41       	brne	80002efc <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002ef6:	30 4c       	mov	r12,4
80002ef8:	f0 1f 00 09 	mcall	80002f1c <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002efc:	48 78       	lddpc	r8,80002f18 <tc_irq+0x68>
80002efe:	70 08       	ld.w	r8,r8[0x0]
80002f00:	59 78       	cp.w	r8,23
80002f02:	c0 71       	brne	80002f10 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002f04:	30 bc       	mov	r12,11
80002f06:	f0 1f 00 06 	mcall	80002f1c <tc_irq+0x6c>
		tc_tick = 1;
80002f0a:	30 19       	mov	r9,1
80002f0c:	48 38       	lddpc	r8,80002f18 <tc_irq+0x68>
80002f0e:	91 09       	st.w	r8[0x0],r9
		

	
	
	
}
80002f10:	d4 02       	popm	lr
80002f12:	d6 03       	rete
80002f14:	80 00       	ld.sh	r0,r0[0x0]
80002f16:	29 fe       	sub	lr,-97
80002f18:	00 00       	add	r0,r0
80002f1a:	00 10       	sub	r0,r0
80002f1c:	80 00       	ld.sh	r0,r0[0x0]
80002f1e:	26 78       	sub	r8,103

80002f20 <eic_int_handler2>:
__interrupt
#endif

// Manejo INTERRUPCION externa 2 (RF)
static void eic_int_handler2(void)
{
80002f20:	d4 01       	pushm	lr
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
80002f22:	30 2b       	mov	r11,2
80002f24:	fe 7c 24 00 	mov	r12,-56320
80002f28:	f0 1f 00 02 	mcall	80002f30 <eic_int_handler2+0x10>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		
}
80002f2c:	d4 02       	popm	lr
80002f2e:	d6 03       	rete
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	24 e0       	sub	r0,78

80002f34 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80002f34:	d4 01       	pushm	lr
80002f36:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80002f38:	30 0b       	mov	r11,0
80002f3a:	49 38       	lddpc	r8,80002f84 <usart_int_handler_RS232+0x50>
80002f3c:	70 0c       	ld.w	r12,r8[0x0]
80002f3e:	f0 1f 00 13 	mcall	80002f88 <usart_int_handler_RS232+0x54>
	
	int c=0;
80002f42:	fa cb ff fc 	sub	r11,sp,-4
80002f46:	30 08       	mov	r8,0
80002f48:	16 d8       	st.w	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80002f4a:	1a 9b       	mov	r11,sp
80002f4c:	fe 7c 38 00 	mov	r12,-51200
80002f50:	f0 1f 00 0f 	mcall	80002f8c <usart_int_handler_RS232+0x58>
80002f54:	c1 51       	brne	80002f7e <usart_int_handler_RS232+0x4a>
		return;

	
		cola_PC[cola_PC_nw] = (char) c;
80002f56:	48 f9       	lddpc	r9,80002f90 <usart_int_handler_RS232+0x5c>
80002f58:	72 08       	ld.w	r8,r9[0x0]
80002f5a:	40 0b       	lddsp	r11,sp[0x0]
80002f5c:	48 ea       	lddpc	r10,80002f94 <usart_int_handler_RS232+0x60>
80002f5e:	f4 08 0b 0b 	st.b	r10[r8],r11
		cola_PC_nw++;	
80002f62:	2f f8       	sub	r8,-1
80002f64:	93 08       	st.w	r9[0x0],r8
	
		if (cola_PC_nw >= tamano_cola)
80002f66:	e0 48 00 c7 	cp.w	r8,199
80002f6a:	e0 8a 00 05 	brle	80002f74 <usart_int_handler_RS232+0x40>
			cola_PC_nw = 0;
80002f6e:	30 09       	mov	r9,0
80002f70:	48 88       	lddpc	r8,80002f90 <usart_int_handler_RS232+0x5c>
80002f72:	91 09       	st.w	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80002f74:	30 0b       	mov	r11,0
80002f76:	48 48       	lddpc	r8,80002f84 <usart_int_handler_RS232+0x50>
80002f78:	70 0c       	ld.w	r12,r8[0x0]
80002f7a:	f0 1f 00 08 	mcall	80002f98 <usart_int_handler_RS232+0x64>
	return;

	
}
80002f7e:	2f fd       	sub	sp,-4
80002f80:	d4 02       	popm	lr
80002f82:	d6 03       	rete
80002f84:	00 00       	add	r0,r0
80002f86:	00 14       	sub	r4,r0
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	29 ec       	sub	r12,-98
80002f8c:	80 00       	ld.sh	r0,r0[0x0]
80002f8e:	2b e8       	sub	r8,-66
80002f90:	00 00       	add	r0,r0
80002f92:	06 34       	cp.w	r4,r3
80002f94:	00 00       	add	r0,r0
80002f96:	06 74       	tst	r4,r3
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	29 da       	sub	r10,-99

80002f9c <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
80002f9c:	eb cd 40 80 	pushm	r7,lr
80002fa0:	20 6d       	sub	sp,24
80002fa2:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80002fa4:	30 08       	mov	r8,0
80002fa6:	ba 98       	st.b	sp[0x1],r8
80002fa8:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
80002faa:	34 89       	mov	r9,72
80002fac:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
80002fae:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
80002fb0:	30 29       	mov	r9,2
80002fb2:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
80002fb4:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
80002fb8:	30 18       	mov	r8,1
80002fba:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
80002fbe:	fa cb ff fc 	sub	r11,sp,-4
80002fc2:	fe 7c 44 00 	mov	r12,-48128
80002fc6:	f0 1f 00 39 	mcall	800030a8 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
80002fca:	c6 61       	brne	80003096 <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
80002fcc:	1b 89       	ld.ub	r9,sp[0x0]
80002fce:	1b 98       	ld.ub	r8,sp[0x1]
80002fd0:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002fd4:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
80002fd6:	30 09       	mov	r9,0
80002fd8:	f2 08 19 00 	cp.h	r8,r9
80002fdc:	c0 35       	brlt	80002fe2 <leer_temp+0x46>
80002fde:	30 1b       	mov	r11,1
80002fe0:	c0 58       	rjmp	80002fea <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
80002fe2:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80002fe6:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
80002fea:	4b 19       	lddpc	r9,800030ac <leer_temp+0x110>
80002fec:	13 89       	ld.ub	r9,r9[0x0]
80002fee:	30 1a       	mov	r10,1
80002ff0:	f4 09 18 00 	cp.b	r9,r10
80002ff4:	c1 c0       	breq	8000302c <leer_temp+0x90>
80002ff6:	58 09       	cp.w	r9,0
80002ff8:	c0 b0       	breq	8000300e <leer_temp+0x72>
80002ffa:	30 2a       	mov	r10,2
80002ffc:	f4 09 18 00 	cp.b	r9,r10
80003000:	c2 50       	breq	8000304a <leer_temp+0xae>
80003002:	30 3a       	mov	r10,3
80003004:	f4 09 18 00 	cp.b	r9,r10
80003008:	c3 00       	breq	80003068 <leer_temp+0xcc>
8000300a:	30 0c       	mov	r12,0
8000300c:	c3 c8       	rjmp	80003084 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
8000300e:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
80003012:	5c 6b       	casts.b	r11
80003014:	f0 0b 02 4c 	mul	r12,r8,r11
80003018:	f0 1f 00 26 	mcall	800030b0 <leer_temp+0x114>
8000301c:	30 08       	mov	r8,0
8000301e:	fc 19 3f e0 	movh	r9,0x3fe0
80003022:	f0 1f 00 25 	mcall	800030b4 <leer_temp+0x118>
80003026:	f0 1f 00 25 	mcall	800030b8 <leer_temp+0x11c>
			break;
8000302a:	c2 d8       	rjmp	80003084 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
8000302c:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
80003030:	5c 6b       	casts.b	r11
80003032:	f0 0b 02 4c 	mul	r12,r8,r11
80003036:	f0 1f 00 1f 	mcall	800030b0 <leer_temp+0x114>
8000303a:	30 08       	mov	r8,0
8000303c:	fc 19 3f d0 	movh	r9,0x3fd0
80003040:	f0 1f 00 1d 	mcall	800030b4 <leer_temp+0x118>
80003044:	f0 1f 00 1d 	mcall	800030b8 <leer_temp+0x11c>
			break;
80003048:	c1 e8       	rjmp	80003084 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
8000304a:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
8000304e:	5c 6b       	casts.b	r11
80003050:	f0 0b 02 4c 	mul	r12,r8,r11
80003054:	f0 1f 00 17 	mcall	800030b0 <leer_temp+0x114>
80003058:	30 08       	mov	r8,0
8000305a:	fc 19 3f c0 	movh	r9,0x3fc0
8000305e:	f0 1f 00 16 	mcall	800030b4 <leer_temp+0x118>
80003062:	f0 1f 00 16 	mcall	800030b8 <leer_temp+0x11c>
			break;
80003066:	c0 f8       	rjmp	80003084 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
80003068:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
8000306c:	5c 6b       	casts.b	r11
8000306e:	f0 0b 02 4c 	mul	r12,r8,r11
80003072:	f0 1f 00 10 	mcall	800030b0 <leer_temp+0x114>
80003076:	30 08       	mov	r8,0
80003078:	fc 19 3f b0 	movh	r9,0x3fb0
8000307c:	f0 1f 00 0e 	mcall	800030b4 <leer_temp+0x118>
80003080:	f0 1f 00 0e 	mcall	800030b8 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
80003084:	f0 1f 00 0e 	mcall	800030bc <leer_temp+0x120>
80003088:	bb 2b       	st.d	--sp,r10
8000308a:	48 eb       	lddpc	r11,800030c0 <leer_temp+0x124>
8000308c:	0e 9c       	mov	r12,r7
8000308e:	f0 1f 00 0e 	mcall	800030c4 <leer_temp+0x128>
80003092:	2f ed       	sub	sp,-8
80003094:	c0 68       	rjmp	800030a0 <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
80003096:	30 2a       	mov	r10,2
80003098:	48 cb       	lddpc	r11,800030c8 <leer_temp+0x12c>
8000309a:	0e 9c       	mov	r12,r7
8000309c:	f0 1f 00 0c 	mcall	800030cc <leer_temp+0x130>
}
800030a0:	2f ad       	sub	sp,-24
800030a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800030a6:	00 00       	add	r0,r0
800030a8:	80 00       	ld.sh	r0,r0[0x0]
800030aa:	22 34       	sub	r4,35
800030ac:	00 00       	add	r0,r0
800030ae:	00 24       	rsub	r4,r0
800030b0:	80 00       	ld.sh	r0,r0[0x0]
800030b2:	36 c4       	mov	r4,108
800030b4:	80 00       	ld.sh	r0,r0[0x0]
800030b6:	34 e8       	mov	r8,78
800030b8:	80 00       	ld.sh	r0,r0[0x0]
800030ba:	38 04       	mov	r4,-128
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	37 a4       	mov	r4,122
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	93 54       	st.w	r9[0x14],r4
800030c4:	80 00       	ld.sh	r0,r0[0x0]
800030c6:	3c 48       	mov	r8,-60
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	93 5c       	st.w	r9[0x14],r12
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	3a f2       	mov	r2,-81

800030d0 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800030d0:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800030d2:	18 9b       	mov	r11,r12
800030d4:	30 2c       	mov	r12,2
800030d6:	f0 1f 00 02 	mcall	800030dc <sysclk_enable_pba_module+0xc>
}
800030da:	d8 02       	popm	pc
800030dc:	80 00       	ld.sh	r0,r0[0x0]
800030de:	2d ec       	sub	r12,-34

800030e0 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800030e0:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800030e2:	30 bc       	mov	r12,11
800030e4:	f0 1f 00 05 	mcall	800030f8 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
800030e8:	e0 7a c1 38 	mov	r10,115000
800030ec:	48 4b       	lddpc	r11,800030fc <rs_232_init_usart+0x1c>
800030ee:	fe 7c 38 00 	mov	r12,-51200
800030f2:	f0 1f 00 04 	mcall	80003100 <rs_232_init_usart+0x20>
	return estado_usart2;
}
800030f6:	d8 02       	popm	pc
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	30 d0       	mov	r0,13
800030fc:	00 00       	add	r0,r0
800030fe:	00 18       	sub	r8,r0
80003100:	80 00       	ld.sh	r0,r0[0x0]
80003102:	2c 5c       	sub	r12,-59

80003104 <rs_232_init_pins>:
// 	

}

void rs_232_init_pins(void)
{
80003104:	d4 01       	pushm	lr
80003106:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
80003108:	48 88       	lddpc	r8,80003128 <rs_232_init_pins+0x24>
8000310a:	1a 9c       	mov	r12,sp
8000310c:	70 09       	ld.w	r9,r8[0x0]
8000310e:	50 09       	stdsp	sp[0x0],r9
80003110:	70 19       	ld.w	r9,r8[0x4]
80003112:	50 19       	stdsp	sp[0x4],r9
80003114:	70 29       	ld.w	r9,r8[0x8]
80003116:	50 29       	stdsp	sp[0x8],r9
80003118:	70 38       	ld.w	r8,r8[0xc]
8000311a:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
8000311c:	30 2b       	mov	r11,2
8000311e:	f0 1f 00 04 	mcall	8000312c <rs_232_init_pins+0x28>
}
80003122:	2f cd       	sub	sp,-16
80003124:	d8 02       	popm	pc
80003126:	00 00       	add	r0,r0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	94 08       	ld.sh	r8,r10[0x0]
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	25 90       	sub	r0,89

80003130 <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
80003130:	d4 01       	pushm	lr
80003132:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003134:	48 88       	lddpc	r8,80003154 <init_i2c_pins+0x24>
80003136:	1a 9c       	mov	r12,sp
80003138:	70 09       	ld.w	r9,r8[0x0]
8000313a:	50 09       	stdsp	sp[0x0],r9
8000313c:	70 19       	ld.w	r9,r8[0x4]
8000313e:	50 19       	stdsp	sp[0x4],r9
80003140:	70 29       	ld.w	r9,r8[0x8]
80003142:	50 29       	stdsp	sp[0x8],r9
80003144:	70 38       	ld.w	r8,r8[0xc]
80003146:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003148:	30 2b       	mov	r11,2
8000314a:	f0 1f 00 04 	mcall	80003158 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000314e:	2f cd       	sub	sp,-16
80003150:	d8 02       	popm	pc
80003152:	00 00       	add	r0,r0
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	93 f8       	st.w	r9[0x3c],r8
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	25 90       	sub	r0,89

8000315c <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
8000315c:	d4 01       	pushm	lr
8000315e:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
80003160:	48 d8       	lddpc	r8,80003194 <spi_init_pins+0x38>
80003162:	1a 9c       	mov	r12,sp
80003164:	70 09       	ld.w	r9,r8[0x0]
80003166:	50 09       	stdsp	sp[0x0],r9
80003168:	70 19       	ld.w	r9,r8[0x4]
8000316a:	50 19       	stdsp	sp[0x4],r9
8000316c:	70 29       	ld.w	r9,r8[0x8]
8000316e:	50 29       	stdsp	sp[0x8],r9
80003170:	70 39       	ld.w	r9,r8[0xc]
80003172:	50 39       	stdsp	sp[0xc],r9
80003174:	fa c9 ff f0 	sub	r9,sp,-16
80003178:	2f 08       	sub	r8,-16
8000317a:	70 0a       	ld.w	r10,r8[0x0]
8000317c:	93 0a       	st.w	r9[0x0],r10
8000317e:	70 1a       	ld.w	r10,r8[0x4]
80003180:	93 1a       	st.w	r9[0x4],r10
80003182:	70 2a       	ld.w	r10,r8[0x8]
80003184:	93 2a       	st.w	r9[0x8],r10
80003186:	70 38       	ld.w	r8,r8[0xc]
80003188:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
8000318a:	30 4b       	mov	r11,4
8000318c:	f0 1f 00 03 	mcall	80003198 <spi_init_pins+0x3c>
}
80003190:	2f 8d       	sub	sp,-32
80003192:	d8 02       	popm	pc
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	93 18       	st.w	r9[0x4],r8
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	25 90       	sub	r0,89

8000319c <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
8000319c:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
8000319e:	30 5b       	mov	r11,5
800031a0:	30 4c       	mov	r12,4
800031a2:	f0 1f 00 06 	mcall	800031b8 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800031a6:	30 5b       	mov	r11,5
800031a8:	30 bc       	mov	r12,11
800031aa:	f0 1f 00 04 	mcall	800031b8 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800031ae:	30 5b       	mov	r11,5
800031b0:	32 9c       	mov	r12,41
800031b2:	f0 1f 00 02 	mcall	800031b8 <led_init_pins+0x1c>
}
800031b6:	d8 02       	popm	pc
800031b8:	80 00       	ld.sh	r0,r0[0x0]
800031ba:	25 c0       	sub	r0,92

800031bc <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
800031bc:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800031be:	f0 1f 00 08 	mcall	800031dc <init_rf_pins+0x20>

	//PIN para interrupcion externa RF
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800031c2:	30 4b       	mov	r11,4
800031c4:	30 dc       	mov	r12,13
800031c6:	f0 1f 00 07 	mcall	800031e0 <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800031ca:	30 6b       	mov	r11,6
800031cc:	30 dc       	mov	r12,13
800031ce:	f0 1f 00 06 	mcall	800031e4 <init_rf_pins+0x28>
	//gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
800031d2:	30 dc       	mov	r12,13
800031d4:	f0 1f 00 05 	mcall	800031e8 <init_rf_pins+0x2c>

// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
// 	

}
800031d8:	d8 02       	popm	pc
800031da:	00 00       	add	r0,r0
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	31 5c       	mov	r12,21
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	25 c0       	sub	r0,92
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	24 fc       	sub	r12,79
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	26 8e       	sub	lr,104

800031ec <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
800031ec:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800031ee:	18 9b       	mov	r11,r12
800031f0:	fe 7c 38 00 	mov	r12,-51200
800031f4:	f0 1f 00 02 	mcall	800031fc <escribir_linea_pc+0x10>
}
800031f8:	d8 02       	popm	pc
800031fa:	00 00       	add	r0,r0
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	2c 0c       	sub	r12,-64

80003200 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003200:	d4 01       	pushm	lr
80003202:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003204:	30 eb       	mov	r11,14
80003206:	30 2c       	mov	r12,2
80003208:	f0 1f 00 0e 	mcall	80003240 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
8000320c:	e0 78 c1 38 	mov	r8,115000
80003210:	50 08       	stdsp	sp[0x0],r8
80003212:	e0 68 27 10 	mov	r8,10000
80003216:	50 18       	stdsp	sp[0x4],r8
80003218:	34 88       	mov	r8,72
8000321a:	50 28       	stdsp	sp[0x8],r8
8000321c:	30 08       	mov	r8,0
8000321e:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
80003222:	1a 9b       	mov	r11,sp
80003224:	fe 7c 44 00 	mov	r12,-48128
80003228:	f0 1f 00 07 	mcall	80003244 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
8000322c:	c0 51       	brne	80003236 <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
8000322e:	48 7c       	lddpc	r12,80003248 <init_i2c_module+0x48>
80003230:	f0 1f 00 07 	mcall	8000324c <init_i2c_module+0x4c>
80003234:	c0 48       	rjmp	8000323c <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
80003236:	48 7c       	lddpc	r12,80003250 <init_i2c_module+0x50>
80003238:	f0 1f 00 05 	mcall	8000324c <init_i2c_module+0x4c>
	}
} 
8000323c:	2f cd       	sub	sp,-16
8000323e:	d8 02       	popm	pc
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	2d ec       	sub	r12,-34
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	23 44       	sub	r4,52
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	93 60       	st.w	r9[0x18],r0
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	31 ec       	mov	r12,30
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	93 74       	st.w	r9[0x1c],r4

80003254 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
80003254:	eb cd 40 e0 	pushm	r5-r7,lr
80003258:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
8000325a:	4a 48       	lddpc	r8,800032e8 <spi_init_module+0x94>
8000325c:	1a 95       	mov	r5,sp
8000325e:	70 09       	ld.w	r9,r8[0x0]
80003260:	50 09       	stdsp	sp[0x0],r9
80003262:	70 19       	ld.w	r9,r8[0x4]
80003264:	50 19       	stdsp	sp[0x4],r9
80003266:	70 29       	ld.w	r9,r8[0x8]
80003268:	50 29       	stdsp	sp[0x8],r9
8000326a:	70 38       	ld.w	r8,r8[0xc]
8000326c:	50 38       	stdsp	sp[0xc],r8
8000326e:	30 db       	mov	r11,13
80003270:	30 2c       	mov	r12,2
80003272:	f0 1f 00 1f 	mcall	800032ec <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003276:	fe 77 40 00 	mov	r7,-49152
8000327a:	e0 68 00 80 	mov	r8,128
8000327e:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
80003280:	6e 18       	ld.w	r8,r7[0x4]
80003282:	30 19       	mov	r9,1
80003284:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003288:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
8000328a:	6e 18       	ld.w	r8,r7[0x4]
8000328c:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003290:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
80003292:	6e 18       	ld.w	r8,r7[0x4]
80003294:	30 06       	mov	r6,0
80003296:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
8000329a:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
8000329c:	6e 18       	ld.w	r8,r7[0x4]
8000329e:	30 f9       	mov	r9,15
800032a0:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800032a4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
800032a6:	6e 18       	ld.w	r8,r7[0x4]
800032a8:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
800032ac:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
800032ae:	6e 18       	ld.w	r8,r7[0x4]
800032b0:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
800032b4:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
800032b6:	6e 18       	ld.w	r8,r7[0x4]
800032b8:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
800032bc:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
800032be:	30 38       	mov	r8,3
800032c0:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
800032c2:	e0 7a c1 38 	mov	r10,115000
800032c6:	1a 9b       	mov	r11,sp
800032c8:	0e 9c       	mov	r12,r7
800032ca:	f0 1f 00 0a 	mcall	800032f0 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
800032ce:	0c 99       	mov	r9,r6
800032d0:	0c 9a       	mov	r10,r6
800032d2:	0c 9b       	mov	r11,r6
800032d4:	0e 9c       	mov	r12,r7
800032d6:	f0 1f 00 08 	mcall	800032f4 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
800032da:	0e 9c       	mov	r12,r7
800032dc:	f0 1f 00 07 	mcall	800032f8 <spi_init_module+0xa4>
}
800032e0:	2f cd       	sub	sp,-16
800032e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032e6:	00 00       	add	r0,r0
800032e8:	80 00       	ld.sh	r0,r0[0x0]
800032ea:	93 3c       	st.w	r9[0xc],r12
800032ec:	80 00       	ld.sh	r0,r0[0x0]
800032ee:	2d ec       	sub	r12,-34
800032f0:	80 00       	ld.sh	r0,r0[0x0]
800032f2:	28 80       	sub	r0,-120
800032f4:	80 00       	ld.sh	r0,r0[0x0]
800032f6:	27 e0       	sub	r0,126
800032f8:	80 00       	ld.sh	r0,r0[0x0]
800032fa:	29 38       	sub	r8,-109

800032fc <main>:
		sprintf(temps,"%s","X");
}


int main (void)
{
800032fc:	d4 31       	pushm	r0-r7,lr
800032fe:	20 3d       	sub	sp,12
	char temps[10] = "\0";
80003300:	4d 48       	lddpc	r8,80003450 <main+0x154>
80003302:	90 08       	ld.sh	r8,r8[0x0]
80003304:	ba 08       	st.h	sp[0x0],r8
80003306:	30 8a       	mov	r10,8
80003308:	30 0b       	mov	r11,0
8000330a:	fa cc ff fe 	sub	r12,sp,-2
8000330e:	f0 1f 00 52 	mcall	80003454 <main+0x158>
	uint8_t register_value = 0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
80003312:	f0 1f 00 52 	mcall	80003458 <main+0x15c>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
80003316:	f0 1f 00 52 	mcall	8000345c <main+0x160>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
8000331a:	f0 1f 00 52 	mcall	80003460 <main+0x164>
	
	//Configuracion pins para RF
	init_rf_pins();
8000331e:	f0 1f 00 52 	mcall	80003464 <main+0x168>
	
	//Inicializacion del SPI
	spi_init_module();
80003322:	f0 1f 00 52 	mcall	80003468 <main+0x16c>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
80003326:	f0 1f 00 52 	mcall	8000346c <main+0x170>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
8000332a:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
8000332c:	f0 1f 00 51 	mcall	80003470 <main+0x174>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003330:	30 0a       	mov	r10,0
80003332:	e0 6b 02 20 	mov	r11,544
80003336:	4d 0c       	lddpc	r12,80003474 <main+0x178>
80003338:	f0 1f 00 50 	mcall	80003478 <main+0x17c>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
8000333c:	30 2a       	mov	r10,2
8000333e:	e0 6b 01 61 	mov	r11,353
80003342:	4c fc       	lddpc	r12,8000347c <main+0x180>
80003344:	f0 1f 00 4d 	mcall	80003478 <main+0x17c>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003348:	30 3a       	mov	r10,3
8000334a:	e0 6b 03 40 	mov	r11,832
8000334e:	4c dc       	lddpc	r12,80003480 <main+0x184>
80003350:	f0 1f 00 4a 	mcall	80003478 <main+0x17c>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
80003354:	30 1a       	mov	r10,1
80003356:	4c cb       	lddpc	r11,80003484 <main+0x188>
80003358:	fe 7c 24 00 	mov	r12,-56320
8000335c:	f0 1f 00 4b 	mcall	80003488 <main+0x18c>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
80003360:	30 2b       	mov	r11,2
80003362:	fe 7c 24 00 	mov	r12,-56320
80003366:	f0 1f 00 4a 	mcall	8000348c <main+0x190>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
8000336a:	30 2b       	mov	r11,2
8000336c:	fe 7c 24 00 	mov	r12,-56320
80003370:	f0 1f 00 48 	mcall	80003490 <main+0x194>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
80003374:	30 19       	mov	r9,1
80003376:	fe 78 38 00 	mov	r8,-51200
8000337a:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
8000337c:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
8000337e:	4c 68       	lddpc	r8,80003494 <main+0x198>
80003380:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003382:	4c 6b       	lddpc	r11,80003498 <main+0x19c>
80003384:	0e 9c       	mov	r12,r7
80003386:	f0 1f 00 46 	mcall	8000349c <main+0x1a0>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
8000338a:	e0 6a 00 b3 	mov	r10,179
8000338e:	30 0b       	mov	r11,0
80003390:	0e 9c       	mov	r12,r7
80003392:	f0 1f 00 44 	mcall	800034a0 <main+0x1a4>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003396:	4c 4a       	lddpc	r10,800034a4 <main+0x1a8>
80003398:	30 0b       	mov	r11,0
8000339a:	0e 9c       	mov	r12,r7
8000339c:	f0 1f 00 43 	mcall	800034a8 <main+0x1ac>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
800033a0:	30 0b       	mov	r11,0
800033a2:	0e 9c       	mov	r12,r7
800033a4:	f0 1f 00 42 	mcall	800034ac <main+0x1b0>
 	 	}
 		else
 			escribir_linea_pc("Modulo RF:\tPASS\r\n");
 	 */	
	
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
800033a8:	31 cc       	mov	r12,28
800033aa:	f0 1f 00 42 	mcall	800034b0 <main+0x1b4>
800033ae:	18 97       	mov	r7,r12
	
	if (register_value == PART_NUM_AT86RF212) 
800033b0:	30 78       	mov	r8,7
800033b2:	f0 0c 18 00 	cp.b	r12,r8
800033b6:	c0 51       	brne	800033c0 <main+0xc4>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
800033b8:	4b fc       	lddpc	r12,800034b4 <main+0x1b8>
800033ba:	f0 1f 00 40 	mcall	800034b8 <main+0x1bc>
800033be:	c0 48       	rjmp	800033c6 <main+0xca>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
800033c0:	4b fc       	lddpc	r12,800034bc <main+0x1c0>
800033c2:	f0 1f 00 3e 	mcall	800034b8 <main+0x1bc>
	escribir_linea_pc(register_value);
800033c6:	0e 9c       	mov	r12,r7
800033c8:	f0 1f 00 3c 	mcall	800034b8 <main+0x1bc>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
800033cc:	f0 1f 00 3d 	mcall	800034c0 <main+0x1c4>
	init_i2c_module();
800033d0:	f0 1f 00 3d 	mcall	800034c4 <main+0x1c8>
	
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r");
800033d4:	4b dc       	lddpc	r12,800034c8 <main+0x1cc>
800033d6:	f0 1f 00 39 	mcall	800034b8 <main+0x1bc>
	escribir_linea_pc("- - - B u e n a s - - - \n\r");
800033da:	4b dc       	lddpc	r12,800034cc <main+0x1d0>
800033dc:	f0 1f 00 37 	mcall	800034b8 <main+0x1bc>
	while(true)
	{
	
	
		
		if (cola_PC_nr != cola_PC_nw )
800033e0:	4b c7       	lddpc	r7,800034d0 <main+0x1d4>
800033e2:	4b d6       	lddpc	r6,800034d4 <main+0x1d8>
		{
			if (cola_PC[cola_PC_nr] == 't')
800033e4:	4b d4       	lddpc	r4,800034d8 <main+0x1dc>
800033e6:	37 45       	mov	r5,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
800033e8:	30 03       	mov	r3,0
		if (cola_PC_nr != cola_PC_nw )
		{
			if (cola_PC[cola_PC_nr] == 't')
			{
				leer_temp(temps);
				escribir_linea_pc("Temp: ");
800033ea:	4b d1       	lddpc	r1,800034dc <main+0x1e0>
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
800033ec:	4b d0       	lddpc	r0,800034e0 <main+0x1e4>
	while(true)
	{
	
	
		
		if (cola_PC_nr != cola_PC_nw )
800033ee:	6e 08       	ld.w	r8,r7[0x0]
800033f0:	6c 09       	ld.w	r9,r6[0x0]
800033f2:	12 38       	cp.w	r8,r9
800033f4:	c1 90       	breq	80003426 <main+0x12a>
		{
			if (cola_PC[cola_PC_nr] == 't')
800033f6:	e8 08 07 08 	ld.ub	r8,r4[r8]
800033fa:	ea 08 18 00 	cp.b	r8,r5
800033fe:	c0 d1       	brne	80003418 <main+0x11c>
			{
				leer_temp(temps);
80003400:	1a 9c       	mov	r12,sp
80003402:	f0 1f 00 39 	mcall	800034e4 <main+0x1e8>
				escribir_linea_pc("Temp: ");
80003406:	02 9c       	mov	r12,r1
80003408:	f0 1f 00 2c 	mcall	800034b8 <main+0x1bc>
				escribir_linea_pc(temps);
8000340c:	1a 9c       	mov	r12,sp
8000340e:	f0 1f 00 2b 	mcall	800034b8 <main+0x1bc>
				escribir_linea_pc("*C\r\n");
80003412:	00 9c       	mov	r12,r0
80003414:	f0 1f 00 29 	mcall	800034b8 <main+0x1bc>
			}
			cola_PC_nr++;
80003418:	6e 08       	ld.w	r8,r7[0x0]
8000341a:	2f f8       	sub	r8,-1
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
8000341c:	e0 48 00 c8 	cp.w	r8,200
80003420:	e6 08 17 40 	movge	r8,r3
80003424:	8f 08       	st.w	r7[0x0],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003426:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000342a:	f0 ca fb 82 	sub	r10,r8,-1150
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000342e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003432:	14 38       	cp.w	r8,r10
80003434:	e0 88 00 08 	brls	80003444 <main+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003438:	12 38       	cp.w	r8,r9
8000343a:	fe 98 ff fa 	brls	8000342e <main+0x132>
8000343e:	12 3a       	cp.w	r10,r9
80003440:	cd 73       	brcs	800033ee <main+0xf2>
80003442:	cf 6b       	rjmp	8000342e <main+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003444:	12 38       	cp.w	r8,r9
80003446:	fe 9b ff d4 	brhi	800033ee <main+0xf2>
8000344a:	12 3a       	cp.w	r10,r9
8000344c:	cd 13       	brcs	800033ee <main+0xf2>
8000344e:	cf 0b       	rjmp	8000342e <main+0x132>
80003450:	80 00       	ld.sh	r0,r0[0x0]
80003452:	2e a4       	sub	r4,-22
80003454:	80 00       	ld.sh	r0,r0[0x0]
80003456:	3c 3a       	mov	r10,-61
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	2d dc       	sub	r12,-35
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	31 9c       	mov	r12,25
80003460:	80 00       	ld.sh	r0,r0[0x0]
80003462:	31 04       	mov	r4,16
80003464:	80 00       	ld.sh	r0,r0[0x0]
80003466:	31 bc       	mov	r12,27
80003468:	80 00       	ld.sh	r0,r0[0x0]
8000346a:	32 54       	mov	r4,37
8000346c:	80 00       	ld.sh	r0,r0[0x0]
8000346e:	30 e0       	mov	r0,14
80003470:	80 00       	ld.sh	r0,r0[0x0]
80003472:	27 34       	sub	r4,115
80003474:	80 00       	ld.sh	r0,r0[0x0]
80003476:	2f 34       	sub	r4,-13
80003478:	80 00       	ld.sh	r0,r0[0x0]
8000347a:	26 b4       	sub	r4,107
8000347c:	80 00       	ld.sh	r0,r0[0x0]
8000347e:	2f 20       	sub	r0,-14
80003480:	80 00       	ld.sh	r0,r0[0x0]
80003482:	2e b0       	sub	r0,-21
80003484:	00 00       	add	r0,r0
80003486:	00 09       	add	r9,r0
80003488:	80 00       	ld.sh	r0,r0[0x0]
8000348a:	23 fc       	sub	r12,63
8000348c:	80 00       	ld.sh	r0,r0[0x0]
8000348e:	24 cc       	sub	r12,76
80003490:	80 00       	ld.sh	r0,r0[0x0]
80003492:	24 d6       	sub	r6,77
80003494:	00 00       	add	r0,r0
80003496:	00 14       	sub	r4,r0
80003498:	80 00       	ld.sh	r0,r0[0x0]
8000349a:	93 4c       	st.w	r9[0x10],r12
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	29 3e       	sub	lr,-109
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	2a 10       	sub	r0,-95
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	93 38       	st.w	r9[0xc],r8
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	2a 44       	sub	r4,-92
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	29 da       	sub	r10,-99
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	2d 68       	sub	r8,-42
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	93 8c       	st.w	r9[0x20],r12
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	31 ec       	mov	r12,30
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	93 a0       	st.w	r9[0x28],r0
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	31 30       	mov	r0,19
800034c4:	80 00       	ld.sh	r0,r0[0x0]
800034c6:	32 00       	mov	r0,32
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	93 b4       	st.w	r9[0x2c],r4
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	93 cc       	st.w	r9[0x30],r12
800034d0:	00 00       	add	r0,r0
800034d2:	06 38       	cp.w	r8,r3
800034d4:	00 00       	add	r0,r0
800034d6:	06 34       	cp.w	r4,r3
800034d8:	00 00       	add	r0,r0
800034da:	06 74       	tst	r4,r3
800034dc:	80 00       	ld.sh	r0,r0[0x0]
800034de:	93 e8       	st.w	r9[0x38],r8
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	93 f0       	st.w	r9[0x3c],r0
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	2f 9c       	sub	r12,-7

800034e8 <__avr32_f64_mul>:
800034e8:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800034ec:	e0 80 00 dc 	breq	800036a4 <__avr32_f64_mul_op1_zero>
800034f0:	d4 21       	pushm	r4-r7,lr
800034f2:	f7 e9 20 0e 	eor	lr,r11,r9
800034f6:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800034fa:	30 15       	mov	r5,1
800034fc:	c4 30       	breq	80003582 <__avr32_f64_mul_op1_subnormal>
800034fe:	ab 6b       	lsl	r11,0xa
80003500:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003504:	ab 6a       	lsl	r10,0xa
80003506:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000350a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000350e:	c5 c0       	breq	800035c6 <__avr32_f64_mul_op2_subnormal>
80003510:	a1 78       	lsl	r8,0x1
80003512:	5c f9       	rol	r9
80003514:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003518:	e0 47 07 ff 	cp.w	r7,2047
8000351c:	c7 70       	breq	8000360a <__avr32_f64_mul_op_nan_or_inf>
8000351e:	e0 46 07 ff 	cp.w	r6,2047
80003522:	c7 40       	breq	8000360a <__avr32_f64_mul_op_nan_or_inf>
80003524:	ee 06 00 0c 	add	r12,r7,r6
80003528:	e0 2c 03 fe 	sub	r12,1022
8000352c:	f6 08 06 44 	mulu.d	r4,r11,r8
80003530:	f4 09 07 44 	macu.d	r4,r10,r9
80003534:	f4 08 06 46 	mulu.d	r6,r10,r8
80003538:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000353c:	08 07       	add	r7,r4
8000353e:	f4 05 00 4a 	adc	r10,r10,r5
80003542:	5c 0b       	acr	r11
80003544:	ed bb 00 14 	bld	r11,0x14
80003548:	c0 50       	breq	80003552 <__avr32_f64_mul+0x6a>
8000354a:	a1 77       	lsl	r7,0x1
8000354c:	5c fa       	rol	r10
8000354e:	5c fb       	rol	r11
80003550:	20 1c       	sub	r12,1
80003552:	58 0c       	cp.w	r12,0
80003554:	e0 8a 00 6f 	brle	80003632 <__avr32_f64_mul_res_subnormal>
80003558:	e0 4c 07 ff 	cp.w	r12,2047
8000355c:	e0 84 00 9c 	brge	80003694 <__avr32_f64_mul_res_inf>
80003560:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003564:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003568:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000356c:	ee 17 80 00 	eorh	r7,0x8000
80003570:	f1 b7 04 20 	satu	r7,0x1
80003574:	0e 0a       	add	r10,r7
80003576:	5c 0b       	acr	r11
80003578:	ed be 00 1f 	bld	lr,0x1f
8000357c:	ef bb 00 1f 	bst	r11,0x1f
80003580:	d8 22       	popm	r4-r7,pc

80003582 <__avr32_f64_mul_op1_subnormal>:
80003582:	e4 1b 00 0f 	andh	r11,0xf
80003586:	f4 0c 12 00 	clz	r12,r10
8000358a:	f6 06 12 00 	clz	r6,r11
8000358e:	f7 bc 03 e1 	sublo	r12,-31
80003592:	f8 06 17 30 	movlo	r6,r12
80003596:	f7 b6 02 01 	subhs	r6,1
8000359a:	e0 46 00 20 	cp.w	r6,32
8000359e:	c0 d4       	brge	800035b8 <__avr32_f64_mul_op1_subnormal+0x36>
800035a0:	ec 0c 11 20 	rsub	r12,r6,32
800035a4:	f6 06 09 4b 	lsl	r11,r11,r6
800035a8:	f4 0c 0a 4c 	lsr	r12,r10,r12
800035ac:	18 4b       	or	r11,r12
800035ae:	f4 06 09 4a 	lsl	r10,r10,r6
800035b2:	20 b6       	sub	r6,11
800035b4:	0c 17       	sub	r7,r6
800035b6:	ca ab       	rjmp	8000350a <__avr32_f64_mul+0x22>
800035b8:	f4 06 09 4b 	lsl	r11,r10,r6
800035bc:	c6 40       	breq	80003684 <__avr32_f64_mul_res_zero>
800035be:	30 0a       	mov	r10,0
800035c0:	20 b6       	sub	r6,11
800035c2:	0c 17       	sub	r7,r6
800035c4:	ca 3b       	rjmp	8000350a <__avr32_f64_mul+0x22>

800035c6 <__avr32_f64_mul_op2_subnormal>:
800035c6:	e4 19 00 0f 	andh	r9,0xf
800035ca:	f0 0c 12 00 	clz	r12,r8
800035ce:	f2 05 12 00 	clz	r5,r9
800035d2:	f7 bc 03 ea 	sublo	r12,-22
800035d6:	f8 05 17 30 	movlo	r5,r12
800035da:	f7 b5 02 0a 	subhs	r5,10
800035de:	e0 45 00 20 	cp.w	r5,32
800035e2:	c0 d4       	brge	800035fc <__avr32_f64_mul_op2_subnormal+0x36>
800035e4:	ea 0c 11 20 	rsub	r12,r5,32
800035e8:	f2 05 09 49 	lsl	r9,r9,r5
800035ec:	f0 0c 0a 4c 	lsr	r12,r8,r12
800035f0:	18 49       	or	r9,r12
800035f2:	f0 05 09 48 	lsl	r8,r8,r5
800035f6:	20 25       	sub	r5,2
800035f8:	0a 16       	sub	r6,r5
800035fa:	c8 fb       	rjmp	80003518 <__avr32_f64_mul+0x30>
800035fc:	f0 05 09 49 	lsl	r9,r8,r5
80003600:	c4 20       	breq	80003684 <__avr32_f64_mul_res_zero>
80003602:	30 08       	mov	r8,0
80003604:	20 25       	sub	r5,2
80003606:	0a 16       	sub	r6,r5
80003608:	c8 8b       	rjmp	80003518 <__avr32_f64_mul+0x30>

8000360a <__avr32_f64_mul_op_nan_or_inf>:
8000360a:	e4 19 00 0f 	andh	r9,0xf
8000360e:	e4 1b 00 0f 	andh	r11,0xf
80003612:	14 4b       	or	r11,r10
80003614:	10 49       	or	r9,r8
80003616:	e0 47 07 ff 	cp.w	r7,2047
8000361a:	c0 91       	brne	8000362c <__avr32_f64_mul_op1_not_naninf>
8000361c:	58 0b       	cp.w	r11,0
8000361e:	c3 81       	brne	8000368e <__avr32_f64_mul_res_nan>
80003620:	e0 46 07 ff 	cp.w	r6,2047
80003624:	c3 81       	brne	80003694 <__avr32_f64_mul_res_inf>
80003626:	58 09       	cp.w	r9,0
80003628:	c3 60       	breq	80003694 <__avr32_f64_mul_res_inf>
8000362a:	c3 28       	rjmp	8000368e <__avr32_f64_mul_res_nan>

8000362c <__avr32_f64_mul_op1_not_naninf>:
8000362c:	58 09       	cp.w	r9,0
8000362e:	c3 30       	breq	80003694 <__avr32_f64_mul_res_inf>
80003630:	c2 f8       	rjmp	8000368e <__avr32_f64_mul_res_nan>

80003632 <__avr32_f64_mul_res_subnormal>:
80003632:	5c 3c       	neg	r12
80003634:	2f fc       	sub	r12,-1
80003636:	f1 bc 04 c0 	satu	r12,0x6
8000363a:	e0 4c 00 20 	cp.w	r12,32
8000363e:	c1 14       	brge	80003660 <__avr32_f64_mul_res_subnormal+0x2e>
80003640:	f8 08 11 20 	rsub	r8,r12,32
80003644:	0e 46       	or	r6,r7
80003646:	ee 0c 0a 47 	lsr	r7,r7,r12
8000364a:	f4 08 09 49 	lsl	r9,r10,r8
8000364e:	12 47       	or	r7,r9
80003650:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003654:	f6 08 09 49 	lsl	r9,r11,r8
80003658:	12 4a       	or	r10,r9
8000365a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000365e:	c8 3b       	rjmp	80003564 <__avr32_f64_mul+0x7c>
80003660:	f8 08 11 20 	rsub	r8,r12,32
80003664:	f9 b9 00 00 	moveq	r9,0
80003668:	c0 30       	breq	8000366e <__avr32_f64_mul_res_subnormal+0x3c>
8000366a:	f6 08 09 49 	lsl	r9,r11,r8
8000366e:	0e 46       	or	r6,r7
80003670:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003674:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003678:	f3 ea 10 07 	or	r7,r9,r10
8000367c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003680:	30 0b       	mov	r11,0
80003682:	c7 1b       	rjmp	80003564 <__avr32_f64_mul+0x7c>

80003684 <__avr32_f64_mul_res_zero>:
80003684:	1c 9b       	mov	r11,lr
80003686:	e6 1b 80 00 	andh	r11,0x8000,COH
8000368a:	30 0a       	mov	r10,0
8000368c:	d8 22       	popm	r4-r7,pc

8000368e <__avr32_f64_mul_res_nan>:
8000368e:	3f fb       	mov	r11,-1
80003690:	3f fa       	mov	r10,-1
80003692:	d8 22       	popm	r4-r7,pc

80003694 <__avr32_f64_mul_res_inf>:
80003694:	f0 6b 00 00 	mov	r11,-1048576
80003698:	ed be 00 1f 	bld	lr,0x1f
8000369c:	ef bb 00 1f 	bst	r11,0x1f
800036a0:	30 0a       	mov	r10,0
800036a2:	d8 22       	popm	r4-r7,pc

800036a4 <__avr32_f64_mul_op1_zero>:
800036a4:	f7 e9 20 0b 	eor	r11,r11,r9
800036a8:	e6 1b 80 00 	andh	r11,0x8000,COH
800036ac:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800036b0:	e0 4c 07 ff 	cp.w	r12,2047
800036b4:	5e 1c       	retne	r12
800036b6:	3f fa       	mov	r10,-1
800036b8:	3f fb       	mov	r11,-1
800036ba:	5e fc       	retal	r12

800036bc <__avr32_u32_to_f64>:
800036bc:	f8 cb 00 00 	sub	r11,r12,0
800036c0:	30 0c       	mov	r12,0
800036c2:	c0 38       	rjmp	800036c8 <__avr32_s32_to_f64+0x4>

800036c4 <__avr32_s32_to_f64>:
800036c4:	18 9b       	mov	r11,r12
800036c6:	5c 4b       	abs	r11
800036c8:	30 0a       	mov	r10,0
800036ca:	5e 0b       	reteq	r11
800036cc:	d4 01       	pushm	lr
800036ce:	e0 69 04 1e 	mov	r9,1054
800036d2:	f6 08 12 00 	clz	r8,r11
800036d6:	c1 70       	breq	80003704 <__avr32_s32_to_f64+0x40>
800036d8:	c0 c3       	brcs	800036f0 <__avr32_s32_to_f64+0x2c>
800036da:	f0 0e 11 20 	rsub	lr,r8,32
800036de:	f6 08 09 4b 	lsl	r11,r11,r8
800036e2:	f4 0e 0a 4e 	lsr	lr,r10,lr
800036e6:	1c 4b       	or	r11,lr
800036e8:	f4 08 09 4a 	lsl	r10,r10,r8
800036ec:	10 19       	sub	r9,r8
800036ee:	c0 b8       	rjmp	80003704 <__avr32_s32_to_f64+0x40>
800036f0:	f4 08 12 00 	clz	r8,r10
800036f4:	f9 b8 03 00 	movlo	r8,0
800036f8:	f7 b8 02 e0 	subhs	r8,-32
800036fc:	f4 08 09 4b 	lsl	r11,r10,r8
80003700:	30 0a       	mov	r10,0
80003702:	10 19       	sub	r9,r8
80003704:	58 09       	cp.w	r9,0
80003706:	e0 89 00 30 	brgt	80003766 <__avr32_s32_to_f64+0xa2>
8000370a:	5c 39       	neg	r9
8000370c:	2f f9       	sub	r9,-1
8000370e:	e0 49 00 36 	cp.w	r9,54
80003712:	c0 43       	brcs	8000371a <__avr32_s32_to_f64+0x56>
80003714:	30 0b       	mov	r11,0
80003716:	30 0a       	mov	r10,0
80003718:	c2 68       	rjmp	80003764 <__avr32_s32_to_f64+0xa0>
8000371a:	2f 69       	sub	r9,-10
8000371c:	f2 08 11 20 	rsub	r8,r9,32
80003720:	e0 49 00 20 	cp.w	r9,32
80003724:	c0 b2       	brcc	8000373a <__avr32_s32_to_f64+0x76>
80003726:	f4 08 09 4e 	lsl	lr,r10,r8
8000372a:	f6 08 09 48 	lsl	r8,r11,r8
8000372e:	f4 09 0a 4a 	lsr	r10,r10,r9
80003732:	f6 09 0a 4b 	lsr	r11,r11,r9
80003736:	10 4b       	or	r11,r8
80003738:	c0 88       	rjmp	80003748 <__avr32_s32_to_f64+0x84>
8000373a:	f6 08 09 4e 	lsl	lr,r11,r8
8000373e:	14 4e       	or	lr,r10
80003740:	16 9a       	mov	r10,r11
80003742:	30 0b       	mov	r11,0
80003744:	f4 09 0a 4a 	lsr	r10,r10,r9
80003748:	ed ba 00 00 	bld	r10,0x0
8000374c:	c0 92       	brcc	8000375e <__avr32_s32_to_f64+0x9a>
8000374e:	1c 7e       	tst	lr,lr
80003750:	c0 41       	brne	80003758 <__avr32_s32_to_f64+0x94>
80003752:	ed ba 00 01 	bld	r10,0x1
80003756:	c0 42       	brcc	8000375e <__avr32_s32_to_f64+0x9a>
80003758:	2f fa       	sub	r10,-1
8000375a:	f7 bb 02 ff 	subhs	r11,-1
8000375e:	5c fc       	rol	r12
80003760:	5d 0b       	ror	r11
80003762:	5d 0a       	ror	r10
80003764:	d8 02       	popm	pc
80003766:	e0 68 03 ff 	mov	r8,1023
8000376a:	ed ba 00 0b 	bld	r10,0xb
8000376e:	f7 b8 00 ff 	subeq	r8,-1
80003772:	10 0a       	add	r10,r8
80003774:	5c 0b       	acr	r11
80003776:	f7 b9 03 fe 	sublo	r9,-2
8000377a:	e0 49 07 ff 	cp.w	r9,2047
8000377e:	c0 55       	brlt	80003788 <__avr32_s32_to_f64+0xc4>
80003780:	30 0a       	mov	r10,0
80003782:	fc 1b ff e0 	movh	r11,0xffe0
80003786:	c0 c8       	rjmp	8000379e <__floatsidf_return_op1>
80003788:	ed bb 00 1f 	bld	r11,0x1f
8000378c:	f7 b9 01 01 	subne	r9,1
80003790:	ab 9a       	lsr	r10,0xb
80003792:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003796:	a1 7b       	lsl	r11,0x1
80003798:	ab 9b       	lsr	r11,0xb
8000379a:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000379e <__floatsidf_return_op1>:
8000379e:	a1 7c       	lsl	r12,0x1
800037a0:	5d 0b       	ror	r11
800037a2:	d8 02       	popm	pc

800037a4 <__avr32_f32_to_f64>:
800037a4:	f8 0b 15 01 	lsl	r11,r12,0x1
800037a8:	f9 ba 00 00 	moveq	r10,0
800037ac:	5e 0b       	reteq	r11
800037ae:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800037b2:	e0 49 00 ff 	cp.w	r9,255
800037b6:	c1 e0       	breq	800037f2 <__extendsfdf_return_op1+0x6>
800037b8:	a7 7b       	lsl	r11,0x7
800037ba:	30 0a       	mov	r10,0
800037bc:	58 09       	cp.w	r9,0
800037be:	f7 b9 00 ff 	subeq	r9,-1
800037c2:	5f 18       	srne	r8
800037c4:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800037c8:	fe 39 fc 80 	sub	r9,-896
800037cc:	f6 08 12 00 	clz	r8,r11
800037d0:	10 19       	sub	r9,r8
800037d2:	f6 08 09 4b 	lsl	r11,r11,r8
800037d6:	ed bb 00 1f 	bld	r11,0x1f
800037da:	f7 b9 01 01 	subne	r9,1
800037de:	ab 9a       	lsr	r10,0xb
800037e0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800037e4:	a1 7b       	lsl	r11,0x1
800037e6:	ab 9b       	lsr	r11,0xb
800037e8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800037ec <__extendsfdf_return_op1>:
800037ec:	a1 7c       	lsl	r12,0x1
800037ee:	5d 0b       	ror	r11
800037f0:	5e fb       	retal	r11
800037f2:	fc 1a ff e0 	movh	r10,0xffe0
800037f6:	a9 6b       	lsl	r11,0x8
800037f8:	f9 bb 01 ff 	movne	r11,-1
800037fc:	f4 0b 17 00 	moveq	r11,r10
80003800:	30 0a       	mov	r10,0
80003802:	cf 5b       	rjmp	800037ec <__extendsfdf_return_op1>

80003804 <__avr32_f64_to_f32>:
80003804:	f6 09 15 01 	lsl	r9,r11,0x1
80003808:	b5 99       	lsr	r9,0x15
8000380a:	5e 0d       	reteq	0
8000380c:	f6 08 15 0a 	lsl	r8,r11,0xa
80003810:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003814:	ab 6a       	lsl	r10,0xa
80003816:	5c 3a       	neg	r10
80003818:	5c fc       	rol	r12
8000381a:	e0 49 07 ff 	cp.w	r9,2047
8000381e:	c1 a0       	breq	80003852 <__truncdfsf_return_op1+0x6>
80003820:	e0 29 03 80 	sub	r9,896
80003824:	bf bc       	sbr	r12,0x1f
80003826:	58 09       	cp.w	r9,0
80003828:	e0 8a 00 1a 	brle	8000385c <__truncdfsf_return_op1+0x10>
8000382c:	37 fa       	mov	r10,127
8000382e:	ed bc 00 08 	bld	r12,0x8
80003832:	f7 ba 00 ff 	subeq	r10,-1
80003836:	14 0c       	add	r12,r10
80003838:	f7 b9 03 fe 	sublo	r9,-2
8000383c:	ed bc 00 1f 	bld	r12,0x1f
80003840:	f7 b9 01 01 	subne	r9,1
80003844:	f8 0c 16 07 	lsr	r12,r12,0x7
80003848:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000384c <__truncdfsf_return_op1>:
8000384c:	a1 7b       	lsl	r11,0x1
8000384e:	5d 0c       	ror	r12
80003850:	5e fc       	retal	r12
80003852:	bf dc       	cbr	r12,0x1f
80003854:	5e 1e       	retne	-1
80003856:	fc 1c 7f 80 	movh	r12,0x7f80
8000385a:	5e fc       	retal	r12
8000385c:	f2 09 11 01 	rsub	r9,r9,1
80003860:	59 99       	cp.w	r9,25
80003862:	f9 bc 02 00 	movhs	r12,0
80003866:	c1 32       	brcc	8000388c <__truncdfsf_return_op1+0x40>
80003868:	f2 0a 11 20 	rsub	r10,r9,32
8000386c:	f8 0a 09 4a 	lsl	r10,r12,r10
80003870:	5f 1a       	srne	r10
80003872:	f8 09 0a 4c 	lsr	r12,r12,r9
80003876:	14 4c       	or	r12,r10
80003878:	37 fa       	mov	r10,127
8000387a:	ed bc 00 08 	bld	r12,0x8
8000387e:	f7 ba 00 ff 	subeq	r10,-1
80003882:	14 0c       	add	r12,r10
80003884:	f8 0c 16 07 	lsr	r12,r12,0x7
80003888:	a1 7b       	lsl	r11,0x1
8000388a:	5d 0c       	ror	r12
8000388c:	5e fc       	retal	r12

8000388e <__avr32_udiv64>:
8000388e:	d4 31       	pushm	r0-r7,lr
80003890:	1a 97       	mov	r7,sp
80003892:	20 3d       	sub	sp,12
80003894:	10 9c       	mov	r12,r8
80003896:	12 9e       	mov	lr,r9
80003898:	14 93       	mov	r3,r10
8000389a:	58 09       	cp.w	r9,0
8000389c:	e0 81 00 bd 	brne	80003a16 <__avr32_udiv64+0x188>
800038a0:	16 38       	cp.w	r8,r11
800038a2:	e0 88 00 40 	brls	80003922 <__avr32_udiv64+0x94>
800038a6:	f0 08 12 00 	clz	r8,r8
800038aa:	c0 d0       	breq	800038c4 <__avr32_udiv64+0x36>
800038ac:	f6 08 09 4b 	lsl	r11,r11,r8
800038b0:	f0 09 11 20 	rsub	r9,r8,32
800038b4:	f8 08 09 4c 	lsl	r12,r12,r8
800038b8:	f4 09 0a 49 	lsr	r9,r10,r9
800038bc:	f4 08 09 43 	lsl	r3,r10,r8
800038c0:	f3 eb 10 0b 	or	r11,r9,r11
800038c4:	f8 0e 16 10 	lsr	lr,r12,0x10
800038c8:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800038cc:	f6 0e 0d 00 	divu	r0,r11,lr
800038d0:	e6 0b 16 10 	lsr	r11,r3,0x10
800038d4:	00 99       	mov	r9,r0
800038d6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800038da:	e0 0a 02 48 	mul	r8,r0,r10
800038de:	10 3b       	cp.w	r11,r8
800038e0:	c0 a2       	brcc	800038f4 <__avr32_udiv64+0x66>
800038e2:	20 19       	sub	r9,1
800038e4:	18 0b       	add	r11,r12
800038e6:	18 3b       	cp.w	r11,r12
800038e8:	c0 63       	brcs	800038f4 <__avr32_udiv64+0x66>
800038ea:	10 3b       	cp.w	r11,r8
800038ec:	f7 b9 03 01 	sublo	r9,1
800038f0:	f7 dc e3 0b 	addcs	r11,r11,r12
800038f4:	f6 08 01 01 	sub	r1,r11,r8
800038f8:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800038fc:	e2 0e 0d 00 	divu	r0,r1,lr
80003900:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003904:	00 98       	mov	r8,r0
80003906:	e0 0a 02 4a 	mul	r10,r0,r10
8000390a:	14 33       	cp.w	r3,r10
8000390c:	c0 82       	brcc	8000391c <__avr32_udiv64+0x8e>
8000390e:	20 18       	sub	r8,1
80003910:	18 03       	add	r3,r12
80003912:	18 33       	cp.w	r3,r12
80003914:	c0 43       	brcs	8000391c <__avr32_udiv64+0x8e>
80003916:	14 33       	cp.w	r3,r10
80003918:	f7 b8 03 01 	sublo	r8,1
8000391c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003920:	cd f8       	rjmp	80003ade <__avr32_udiv64+0x250>
80003922:	58 08       	cp.w	r8,0
80003924:	c0 51       	brne	8000392e <__avr32_udiv64+0xa0>
80003926:	30 19       	mov	r9,1
80003928:	f2 08 0d 08 	divu	r8,r9,r8
8000392c:	10 9c       	mov	r12,r8
8000392e:	f8 06 12 00 	clz	r6,r12
80003932:	c0 41       	brne	8000393a <__avr32_udiv64+0xac>
80003934:	18 1b       	sub	r11,r12
80003936:	30 19       	mov	r9,1
80003938:	c4 08       	rjmp	800039b8 <__avr32_udiv64+0x12a>
8000393a:	ec 01 11 20 	rsub	r1,r6,32
8000393e:	f4 01 0a 49 	lsr	r9,r10,r1
80003942:	f8 06 09 4c 	lsl	r12,r12,r6
80003946:	f6 06 09 48 	lsl	r8,r11,r6
8000394a:	f6 01 0a 41 	lsr	r1,r11,r1
8000394e:	f3 e8 10 08 	or	r8,r9,r8
80003952:	f8 03 16 10 	lsr	r3,r12,0x10
80003956:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000395a:	e2 03 0d 00 	divu	r0,r1,r3
8000395e:	f0 0b 16 10 	lsr	r11,r8,0x10
80003962:	00 9e       	mov	lr,r0
80003964:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003968:	e0 05 02 49 	mul	r9,r0,r5
8000396c:	12 3b       	cp.w	r11,r9
8000396e:	c0 a2       	brcc	80003982 <__avr32_udiv64+0xf4>
80003970:	20 1e       	sub	lr,1
80003972:	18 0b       	add	r11,r12
80003974:	18 3b       	cp.w	r11,r12
80003976:	c0 63       	brcs	80003982 <__avr32_udiv64+0xf4>
80003978:	12 3b       	cp.w	r11,r9
8000397a:	f7 be 03 01 	sublo	lr,1
8000397e:	f7 dc e3 0b 	addcs	r11,r11,r12
80003982:	12 1b       	sub	r11,r9
80003984:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003988:	f6 03 0d 02 	divu	r2,r11,r3
8000398c:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003990:	04 99       	mov	r9,r2
80003992:	e4 05 02 4b 	mul	r11,r2,r5
80003996:	16 38       	cp.w	r8,r11
80003998:	c0 a2       	brcc	800039ac <__avr32_udiv64+0x11e>
8000399a:	20 19       	sub	r9,1
8000399c:	18 08       	add	r8,r12
8000399e:	18 38       	cp.w	r8,r12
800039a0:	c0 63       	brcs	800039ac <__avr32_udiv64+0x11e>
800039a2:	16 38       	cp.w	r8,r11
800039a4:	f7 b9 03 01 	sublo	r9,1
800039a8:	f1 dc e3 08 	addcs	r8,r8,r12
800039ac:	f4 06 09 43 	lsl	r3,r10,r6
800039b0:	f0 0b 01 0b 	sub	r11,r8,r11
800039b4:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800039b8:	f8 06 16 10 	lsr	r6,r12,0x10
800039bc:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800039c0:	f6 06 0d 00 	divu	r0,r11,r6
800039c4:	e6 0b 16 10 	lsr	r11,r3,0x10
800039c8:	00 9a       	mov	r10,r0
800039ca:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800039ce:	e0 0e 02 48 	mul	r8,r0,lr
800039d2:	10 3b       	cp.w	r11,r8
800039d4:	c0 a2       	brcc	800039e8 <__avr32_udiv64+0x15a>
800039d6:	20 1a       	sub	r10,1
800039d8:	18 0b       	add	r11,r12
800039da:	18 3b       	cp.w	r11,r12
800039dc:	c0 63       	brcs	800039e8 <__avr32_udiv64+0x15a>
800039de:	10 3b       	cp.w	r11,r8
800039e0:	f7 ba 03 01 	sublo	r10,1
800039e4:	f7 dc e3 0b 	addcs	r11,r11,r12
800039e8:	f6 08 01 01 	sub	r1,r11,r8
800039ec:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800039f0:	e2 06 0d 00 	divu	r0,r1,r6
800039f4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800039f8:	00 98       	mov	r8,r0
800039fa:	e0 0e 02 4b 	mul	r11,r0,lr
800039fe:	16 33       	cp.w	r3,r11
80003a00:	c0 82       	brcc	80003a10 <__avr32_udiv64+0x182>
80003a02:	20 18       	sub	r8,1
80003a04:	18 03       	add	r3,r12
80003a06:	18 33       	cp.w	r3,r12
80003a08:	c0 43       	brcs	80003a10 <__avr32_udiv64+0x182>
80003a0a:	16 33       	cp.w	r3,r11
80003a0c:	f7 b8 03 01 	sublo	r8,1
80003a10:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003a14:	c6 98       	rjmp	80003ae6 <__avr32_udiv64+0x258>
80003a16:	16 39       	cp.w	r9,r11
80003a18:	e0 8b 00 65 	brhi	80003ae2 <__avr32_udiv64+0x254>
80003a1c:	f2 09 12 00 	clz	r9,r9
80003a20:	c0 b1       	brne	80003a36 <__avr32_udiv64+0x1a8>
80003a22:	10 3a       	cp.w	r10,r8
80003a24:	5f 2a       	srhs	r10
80003a26:	1c 3b       	cp.w	r11,lr
80003a28:	5f b8       	srhi	r8
80003a2a:	10 4a       	or	r10,r8
80003a2c:	f2 0a 18 00 	cp.b	r10,r9
80003a30:	c5 90       	breq	80003ae2 <__avr32_udiv64+0x254>
80003a32:	30 18       	mov	r8,1
80003a34:	c5 98       	rjmp	80003ae6 <__avr32_udiv64+0x258>
80003a36:	f0 09 09 46 	lsl	r6,r8,r9
80003a3a:	f2 03 11 20 	rsub	r3,r9,32
80003a3e:	fc 09 09 4e 	lsl	lr,lr,r9
80003a42:	f0 03 0a 48 	lsr	r8,r8,r3
80003a46:	f6 09 09 4c 	lsl	r12,r11,r9
80003a4a:	f4 03 0a 42 	lsr	r2,r10,r3
80003a4e:	ef 46 ff f4 	st.w	r7[-12],r6
80003a52:	f6 03 0a 43 	lsr	r3,r11,r3
80003a56:	18 42       	or	r2,r12
80003a58:	f1 ee 10 0c 	or	r12,r8,lr
80003a5c:	f8 01 16 10 	lsr	r1,r12,0x10
80003a60:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003a64:	e6 01 0d 04 	divu	r4,r3,r1
80003a68:	e4 03 16 10 	lsr	r3,r2,0x10
80003a6c:	08 9e       	mov	lr,r4
80003a6e:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003a72:	e8 06 02 48 	mul	r8,r4,r6
80003a76:	10 33       	cp.w	r3,r8
80003a78:	c0 a2       	brcc	80003a8c <__avr32_udiv64+0x1fe>
80003a7a:	20 1e       	sub	lr,1
80003a7c:	18 03       	add	r3,r12
80003a7e:	18 33       	cp.w	r3,r12
80003a80:	c0 63       	brcs	80003a8c <__avr32_udiv64+0x1fe>
80003a82:	10 33       	cp.w	r3,r8
80003a84:	f7 be 03 01 	sublo	lr,1
80003a88:	e7 dc e3 03 	addcs	r3,r3,r12
80003a8c:	10 13       	sub	r3,r8
80003a8e:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003a92:	e6 01 0d 00 	divu	r0,r3,r1
80003a96:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003a9a:	00 98       	mov	r8,r0
80003a9c:	e0 06 02 46 	mul	r6,r0,r6
80003aa0:	0c 3b       	cp.w	r11,r6
80003aa2:	c0 a2       	brcc	80003ab6 <__avr32_udiv64+0x228>
80003aa4:	20 18       	sub	r8,1
80003aa6:	18 0b       	add	r11,r12
80003aa8:	18 3b       	cp.w	r11,r12
80003aaa:	c0 63       	brcs	80003ab6 <__avr32_udiv64+0x228>
80003aac:	0c 3b       	cp.w	r11,r6
80003aae:	f7 dc e3 0b 	addcs	r11,r11,r12
80003ab2:	f7 b8 03 01 	sublo	r8,1
80003ab6:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003aba:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003abe:	0c 1b       	sub	r11,r6
80003ac0:	f0 04 06 42 	mulu.d	r2,r8,r4
80003ac4:	06 95       	mov	r5,r3
80003ac6:	16 35       	cp.w	r5,r11
80003ac8:	e0 8b 00 0a 	brhi	80003adc <__avr32_udiv64+0x24e>
80003acc:	5f 0b       	sreq	r11
80003ace:	f4 09 09 49 	lsl	r9,r10,r9
80003ad2:	12 32       	cp.w	r2,r9
80003ad4:	5f b9       	srhi	r9
80003ad6:	f7 e9 00 09 	and	r9,r11,r9
80003ada:	c0 60       	breq	80003ae6 <__avr32_udiv64+0x258>
80003adc:	20 18       	sub	r8,1
80003ade:	30 09       	mov	r9,0
80003ae0:	c0 38       	rjmp	80003ae6 <__avr32_udiv64+0x258>
80003ae2:	30 09       	mov	r9,0
80003ae4:	12 98       	mov	r8,r9
80003ae6:	10 9a       	mov	r10,r8
80003ae8:	12 93       	mov	r3,r9
80003aea:	10 92       	mov	r2,r8
80003aec:	12 9b       	mov	r11,r9
80003aee:	2f dd       	sub	sp,-12
80003af0:	d8 32       	popm	r0-r7,pc

80003af2 <memcpy>:
80003af2:	58 8a       	cp.w	r10,8
80003af4:	c2 f5       	brlt	80003b52 <memcpy+0x60>
80003af6:	f9 eb 10 09 	or	r9,r12,r11
80003afa:	e2 19 00 03 	andl	r9,0x3,COH
80003afe:	e0 81 00 97 	brne	80003c2c <memcpy+0x13a>
80003b02:	e0 4a 00 20 	cp.w	r10,32
80003b06:	c3 b4       	brge	80003b7c <memcpy+0x8a>
80003b08:	f4 08 14 02 	asr	r8,r10,0x2
80003b0c:	f0 09 11 08 	rsub	r9,r8,8
80003b10:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003b14:	76 69       	ld.w	r9,r11[0x18]
80003b16:	99 69       	st.w	r12[0x18],r9
80003b18:	76 59       	ld.w	r9,r11[0x14]
80003b1a:	99 59       	st.w	r12[0x14],r9
80003b1c:	76 49       	ld.w	r9,r11[0x10]
80003b1e:	99 49       	st.w	r12[0x10],r9
80003b20:	76 39       	ld.w	r9,r11[0xc]
80003b22:	99 39       	st.w	r12[0xc],r9
80003b24:	76 29       	ld.w	r9,r11[0x8]
80003b26:	99 29       	st.w	r12[0x8],r9
80003b28:	76 19       	ld.w	r9,r11[0x4]
80003b2a:	99 19       	st.w	r12[0x4],r9
80003b2c:	76 09       	ld.w	r9,r11[0x0]
80003b2e:	99 09       	st.w	r12[0x0],r9
80003b30:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003b34:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003b38:	e0 1a 00 03 	andl	r10,0x3
80003b3c:	f4 0a 11 04 	rsub	r10,r10,4
80003b40:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003b44:	17 a9       	ld.ub	r9,r11[0x2]
80003b46:	b0 a9       	st.b	r8[0x2],r9
80003b48:	17 99       	ld.ub	r9,r11[0x1]
80003b4a:	b0 99       	st.b	r8[0x1],r9
80003b4c:	17 89       	ld.ub	r9,r11[0x0]
80003b4e:	b0 89       	st.b	r8[0x0],r9
80003b50:	5e fc       	retal	r12
80003b52:	f4 0a 11 09 	rsub	r10,r10,9
80003b56:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003b5a:	17 f9       	ld.ub	r9,r11[0x7]
80003b5c:	b8 f9       	st.b	r12[0x7],r9
80003b5e:	17 e9       	ld.ub	r9,r11[0x6]
80003b60:	b8 e9       	st.b	r12[0x6],r9
80003b62:	17 d9       	ld.ub	r9,r11[0x5]
80003b64:	b8 d9       	st.b	r12[0x5],r9
80003b66:	17 c9       	ld.ub	r9,r11[0x4]
80003b68:	b8 c9       	st.b	r12[0x4],r9
80003b6a:	17 b9       	ld.ub	r9,r11[0x3]
80003b6c:	b8 b9       	st.b	r12[0x3],r9
80003b6e:	17 a9       	ld.ub	r9,r11[0x2]
80003b70:	b8 a9       	st.b	r12[0x2],r9
80003b72:	17 99       	ld.ub	r9,r11[0x1]
80003b74:	b8 99       	st.b	r12[0x1],r9
80003b76:	17 89       	ld.ub	r9,r11[0x0]
80003b78:	b8 89       	st.b	r12[0x0],r9
80003b7a:	5e fc       	retal	r12
80003b7c:	eb cd 40 c0 	pushm	r6-r7,lr
80003b80:	18 99       	mov	r9,r12
80003b82:	22 0a       	sub	r10,32
80003b84:	b7 07       	ld.d	r6,r11++
80003b86:	b3 26       	st.d	r9++,r6
80003b88:	b7 07       	ld.d	r6,r11++
80003b8a:	b3 26       	st.d	r9++,r6
80003b8c:	b7 07       	ld.d	r6,r11++
80003b8e:	b3 26       	st.d	r9++,r6
80003b90:	b7 07       	ld.d	r6,r11++
80003b92:	b3 26       	st.d	r9++,r6
80003b94:	22 0a       	sub	r10,32
80003b96:	cf 74       	brge	80003b84 <memcpy+0x92>
80003b98:	2f 0a       	sub	r10,-16
80003b9a:	c0 65       	brlt	80003ba6 <memcpy+0xb4>
80003b9c:	b7 07       	ld.d	r6,r11++
80003b9e:	b3 26       	st.d	r9++,r6
80003ba0:	b7 07       	ld.d	r6,r11++
80003ba2:	b3 26       	st.d	r9++,r6
80003ba4:	21 0a       	sub	r10,16
80003ba6:	5c 3a       	neg	r10
80003ba8:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003bac:	d7 03       	nop
80003bae:	d7 03       	nop
80003bb0:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003bb4:	f3 66 00 0e 	st.b	r9[14],r6
80003bb8:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003bbc:	f3 66 00 0d 	st.b	r9[13],r6
80003bc0:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003bc4:	f3 66 00 0c 	st.b	r9[12],r6
80003bc8:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003bcc:	f3 66 00 0b 	st.b	r9[11],r6
80003bd0:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003bd4:	f3 66 00 0a 	st.b	r9[10],r6
80003bd8:	f7 36 00 09 	ld.ub	r6,r11[9]
80003bdc:	f3 66 00 09 	st.b	r9[9],r6
80003be0:	f7 36 00 08 	ld.ub	r6,r11[8]
80003be4:	f3 66 00 08 	st.b	r9[8],r6
80003be8:	f7 36 00 07 	ld.ub	r6,r11[7]
80003bec:	f3 66 00 07 	st.b	r9[7],r6
80003bf0:	f7 36 00 06 	ld.ub	r6,r11[6]
80003bf4:	f3 66 00 06 	st.b	r9[6],r6
80003bf8:	f7 36 00 05 	ld.ub	r6,r11[5]
80003bfc:	f3 66 00 05 	st.b	r9[5],r6
80003c00:	f7 36 00 04 	ld.ub	r6,r11[4]
80003c04:	f3 66 00 04 	st.b	r9[4],r6
80003c08:	f7 36 00 03 	ld.ub	r6,r11[3]
80003c0c:	f3 66 00 03 	st.b	r9[3],r6
80003c10:	f7 36 00 02 	ld.ub	r6,r11[2]
80003c14:	f3 66 00 02 	st.b	r9[2],r6
80003c18:	f7 36 00 01 	ld.ub	r6,r11[1]
80003c1c:	f3 66 00 01 	st.b	r9[1],r6
80003c20:	f7 36 00 00 	ld.ub	r6,r11[0]
80003c24:	f3 66 00 00 	st.b	r9[0],r6
80003c28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003c2c:	20 1a       	sub	r10,1
80003c2e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003c32:	f8 0a 0b 09 	st.b	r12[r10],r9
80003c36:	cf b1       	brne	80003c2c <memcpy+0x13a>
80003c38:	5e fc       	retal	r12

80003c3a <memset>:
80003c3a:	18 98       	mov	r8,r12
80003c3c:	c0 38       	rjmp	80003c42 <memset+0x8>
80003c3e:	10 cb       	st.b	r8++,r11
80003c40:	20 1a       	sub	r10,1
80003c42:	58 0a       	cp.w	r10,0
80003c44:	cf d1       	brne	80003c3e <memset+0x4>
80003c46:	5e fc       	retal	r12

80003c48 <sprintf>:
80003c48:	d4 01       	pushm	lr
80003c4a:	21 7d       	sub	sp,92
80003c4c:	e0 68 ff ff 	mov	r8,65535
80003c50:	ea 18 7f ff 	orh	r8,0x7fff
80003c54:	50 58       	stdsp	sp[0x14],r8
80003c56:	50 28       	stdsp	sp[0x8],r8
80003c58:	e0 68 02 08 	mov	r8,520
80003c5c:	ba 68       	st.h	sp[0xc],r8
80003c5e:	3f f8       	mov	r8,-1
80003c60:	ba 78       	st.h	sp[0xe],r8
80003c62:	e0 68 01 18 	mov	r8,280
80003c66:	50 4c       	stdsp	sp[0x10],r12
80003c68:	16 9a       	mov	r10,r11
80003c6a:	50 0c       	stdsp	sp[0x0],r12
80003c6c:	fa c9 ff a0 	sub	r9,sp,-96
80003c70:	70 0c       	ld.w	r12,r8[0x0]
80003c72:	1a 9b       	mov	r11,sp
80003c74:	c9 cd       	rcall	80003fac <_vfprintf_r>
80003c76:	30 09       	mov	r9,0
80003c78:	40 08       	lddsp	r8,sp[0x0]
80003c7a:	b0 89       	st.b	r8[0x0],r9
80003c7c:	2e 9d       	sub	sp,-92
80003c7e:	d8 02       	popm	pc

80003c80 <get_arg>:
80003c80:	d4 31       	pushm	r0-r7,lr
80003c82:	20 8d       	sub	sp,32
80003c84:	fa c4 ff bc 	sub	r4,sp,-68
80003c88:	50 4b       	stdsp	sp[0x10],r11
80003c8a:	68 2e       	ld.w	lr,r4[0x8]
80003c8c:	50 58       	stdsp	sp[0x14],r8
80003c8e:	12 96       	mov	r6,r9
80003c90:	7c 0b       	ld.w	r11,lr[0x0]
80003c92:	70 05       	ld.w	r5,r8[0x0]
80003c94:	50 6e       	stdsp	sp[0x18],lr
80003c96:	58 0b       	cp.w	r11,0
80003c98:	f4 0b 17 00 	moveq	r11,r10
80003c9c:	68 03       	ld.w	r3,r4[0x0]
80003c9e:	68 11       	ld.w	r1,r4[0x4]
80003ca0:	40 49       	lddsp	r9,sp[0x10]
80003ca2:	30 08       	mov	r8,0
80003ca4:	c2 69       	rjmp	80003ef0 <get_arg+0x270>
80003ca6:	2f fb       	sub	r11,-1
80003ca8:	32 5c       	mov	r12,37
80003caa:	17 8a       	ld.ub	r10,r11[0x0]
80003cac:	f8 0a 18 00 	cp.b	r10,r12
80003cb0:	5f 1e       	srne	lr
80003cb2:	f0 0a 18 00 	cp.b	r10,r8
80003cb6:	5f 1c       	srne	r12
80003cb8:	fd ec 00 0c 	and	r12,lr,r12
80003cbc:	f0 0c 18 00 	cp.b	r12,r8
80003cc0:	cf 31       	brne	80003ca6 <get_arg+0x26>
80003cc2:	58 0a       	cp.w	r10,0
80003cc4:	e0 80 01 23 	breq	80003f0a <get_arg+0x28a>
80003cc8:	30 0c       	mov	r12,0
80003cca:	3f fa       	mov	r10,-1
80003ccc:	18 90       	mov	r0,r12
80003cce:	50 3a       	stdsp	sp[0xc],r10
80003cd0:	18 94       	mov	r4,r12
80003cd2:	18 92       	mov	r2,r12
80003cd4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003cd8:	16 97       	mov	r7,r11
80003cda:	50 7c       	stdsp	sp[0x1c],r12
80003cdc:	fe cc a5 f0 	sub	r12,pc,-23056
80003ce0:	0f 3a       	ld.ub	r10,r7++
80003ce2:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003ce6:	40 7c       	lddsp	r12,sp[0x1c]
80003ce8:	1c 0c       	add	r12,lr
80003cea:	fe ce a6 c6 	sub	lr,pc,-22842
80003cee:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003cf2:	20 1e       	sub	lr,1
80003cf4:	50 0e       	stdsp	sp[0x0],lr
80003cf6:	fe ce a7 3e 	sub	lr,pc,-22722
80003cfa:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003cfe:	50 7c       	stdsp	sp[0x1c],r12
80003d00:	40 0c       	lddsp	r12,sp[0x0]
80003d02:	58 7c       	cp.w	r12,7
80003d04:	e0 8b 00 ef 	brhi	80003ee2 <get_arg+0x262>
80003d08:	fe ce a8 f0 	sub	lr,pc,-22288
80003d0c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003d10:	36 8b       	mov	r11,104
80003d12:	f6 0a 18 00 	cp.b	r10,r11
80003d16:	e0 80 00 e6 	breq	80003ee2 <get_arg+0x262>
80003d1a:	37 1b       	mov	r11,113
80003d1c:	f6 0a 18 00 	cp.b	r10,r11
80003d20:	c0 70       	breq	80003d2e <get_arg+0xae>
80003d22:	34 cb       	mov	r11,76
80003d24:	f6 0a 18 00 	cp.b	r10,r11
80003d28:	c0 51       	brne	80003d32 <get_arg+0xb2>
80003d2a:	a3 b4       	sbr	r4,0x3
80003d2c:	cd b8       	rjmp	80003ee2 <get_arg+0x262>
80003d2e:	a5 b4       	sbr	r4,0x5
80003d30:	cd 98       	rjmp	80003ee2 <get_arg+0x262>
80003d32:	08 9a       	mov	r10,r4
80003d34:	0e 9b       	mov	r11,r7
80003d36:	a5 aa       	sbr	r10,0x4
80003d38:	17 3c       	ld.ub	r12,r11++
80003d3a:	a5 b4       	sbr	r4,0x5
80003d3c:	36 ce       	mov	lr,108
80003d3e:	fc 0c 18 00 	cp.b	r12,lr
80003d42:	e0 80 00 d1 	breq	80003ee4 <get_arg+0x264>
80003d46:	14 94       	mov	r4,r10
80003d48:	cc d8       	rjmp	80003ee2 <get_arg+0x262>
80003d4a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003d4e:	36 7c       	mov	r12,103
80003d50:	f8 0a 18 00 	cp.b	r10,r12
80003d54:	e0 8b 00 27 	brhi	80003da2 <get_arg+0x122>
80003d58:	36 5b       	mov	r11,101
80003d5a:	f6 0a 18 00 	cp.b	r10,r11
80003d5e:	c4 82       	brcc	80003dee <get_arg+0x16e>
80003d60:	34 fb       	mov	r11,79
80003d62:	f6 0a 18 00 	cp.b	r10,r11
80003d66:	c4 80       	breq	80003df6 <get_arg+0x176>
80003d68:	e0 8b 00 0c 	brhi	80003d80 <get_arg+0x100>
80003d6c:	34 5b       	mov	r11,69
80003d6e:	f6 0a 18 00 	cp.b	r10,r11
80003d72:	c3 e0       	breq	80003dee <get_arg+0x16e>
80003d74:	34 7b       	mov	r11,71
80003d76:	f6 0a 18 00 	cp.b	r10,r11
80003d7a:	c3 a0       	breq	80003dee <get_arg+0x16e>
80003d7c:	34 4b       	mov	r11,68
80003d7e:	c0 88       	rjmp	80003d8e <get_arg+0x10e>
80003d80:	35 8b       	mov	r11,88
80003d82:	f6 0a 18 00 	cp.b	r10,r11
80003d86:	c2 c0       	breq	80003dde <get_arg+0x15e>
80003d88:	e0 8b 00 07 	brhi	80003d96 <get_arg+0x116>
80003d8c:	35 5b       	mov	r11,85
80003d8e:	f6 0a 18 00 	cp.b	r10,r11
80003d92:	c3 51       	brne	80003dfc <get_arg+0x17c>
80003d94:	c3 18       	rjmp	80003df6 <get_arg+0x176>
80003d96:	36 3b       	mov	r11,99
80003d98:	f6 0a 18 00 	cp.b	r10,r11
80003d9c:	c2 f0       	breq	80003dfa <get_arg+0x17a>
80003d9e:	36 4b       	mov	r11,100
80003da0:	c0 e8       	rjmp	80003dbc <get_arg+0x13c>
80003da2:	37 0b       	mov	r11,112
80003da4:	f6 0a 18 00 	cp.b	r10,r11
80003da8:	c2 50       	breq	80003df2 <get_arg+0x172>
80003daa:	e0 8b 00 0d 	brhi	80003dc4 <get_arg+0x144>
80003dae:	36 eb       	mov	r11,110
80003db0:	f6 0a 18 00 	cp.b	r10,r11
80003db4:	c1 f0       	breq	80003df2 <get_arg+0x172>
80003db6:	e0 8b 00 14 	brhi	80003dde <get_arg+0x15e>
80003dba:	36 9b       	mov	r11,105
80003dbc:	f6 0a 18 00 	cp.b	r10,r11
80003dc0:	c1 e1       	brne	80003dfc <get_arg+0x17c>
80003dc2:	c0 e8       	rjmp	80003dde <get_arg+0x15e>
80003dc4:	37 5b       	mov	r11,117
80003dc6:	f6 0a 18 00 	cp.b	r10,r11
80003dca:	c0 a0       	breq	80003dde <get_arg+0x15e>
80003dcc:	37 8b       	mov	r11,120
80003dce:	f6 0a 18 00 	cp.b	r10,r11
80003dd2:	c0 60       	breq	80003dde <get_arg+0x15e>
80003dd4:	37 3b       	mov	r11,115
80003dd6:	f6 0a 18 00 	cp.b	r10,r11
80003dda:	c1 11       	brne	80003dfc <get_arg+0x17c>
80003ddc:	c0 b8       	rjmp	80003df2 <get_arg+0x172>
80003dde:	ed b4 00 04 	bld	r4,0x4
80003de2:	c0 a0       	breq	80003df6 <get_arg+0x176>
80003de4:	ed b4 00 05 	bld	r4,0x5
80003de8:	c0 91       	brne	80003dfa <get_arg+0x17a>
80003dea:	30 20       	mov	r0,2
80003dec:	c0 88       	rjmp	80003dfc <get_arg+0x17c>
80003dee:	30 40       	mov	r0,4
80003df0:	c0 68       	rjmp	80003dfc <get_arg+0x17c>
80003df2:	30 30       	mov	r0,3
80003df4:	c0 48       	rjmp	80003dfc <get_arg+0x17c>
80003df6:	30 10       	mov	r0,1
80003df8:	c0 28       	rjmp	80003dfc <get_arg+0x17c>
80003dfa:	30 00       	mov	r0,0
80003dfc:	40 3b       	lddsp	r11,sp[0xc]
80003dfe:	5b fb       	cp.w	r11,-1
80003e00:	c0 40       	breq	80003e08 <get_arg+0x188>
80003e02:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003e06:	c6 e8       	rjmp	80003ee2 <get_arg+0x262>
80003e08:	58 60       	cp.w	r0,6
80003e0a:	e0 8b 00 6c 	brhi	80003ee2 <get_arg+0x262>
80003e0e:	6c 0a       	ld.w	r10,r6[0x0]
80003e10:	ea cc ff ff 	sub	r12,r5,-1
80003e14:	fe ce a9 dc 	sub	lr,pc,-22052
80003e18:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003e1c:	f4 cb ff f8 	sub	r11,r10,-8
80003e20:	8d 0b       	st.w	r6[0x0],r11
80003e22:	f4 ea 00 00 	ld.d	r10,r10[0]
80003e26:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003e2a:	c0 f8       	rjmp	80003e48 <get_arg+0x1c8>
80003e2c:	f4 cb ff fc 	sub	r11,r10,-4
80003e30:	8d 0b       	st.w	r6[0x0],r11
80003e32:	74 0a       	ld.w	r10,r10[0x0]
80003e34:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003e38:	c0 88       	rjmp	80003e48 <get_arg+0x1c8>
80003e3a:	f4 cb ff f8 	sub	r11,r10,-8
80003e3e:	8d 0b       	st.w	r6[0x0],r11
80003e40:	f4 ea 00 00 	ld.d	r10,r10[0]
80003e44:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003e48:	0e 9b       	mov	r11,r7
80003e4a:	18 95       	mov	r5,r12
80003e4c:	c4 c8       	rjmp	80003ee4 <get_arg+0x264>
80003e4e:	62 0a       	ld.w	r10,r1[0x0]
80003e50:	5b fa       	cp.w	r10,-1
80003e52:	c0 a1       	brne	80003e66 <get_arg+0x1e6>
80003e54:	50 19       	stdsp	sp[0x4],r9
80003e56:	50 28       	stdsp	sp[0x8],r8
80003e58:	e0 6a 00 80 	mov	r10,128
80003e5c:	30 0b       	mov	r11,0
80003e5e:	02 9c       	mov	r12,r1
80003e60:	ce de       	rcall	80003c3a <memset>
80003e62:	40 28       	lddsp	r8,sp[0x8]
80003e64:	40 19       	lddsp	r9,sp[0x4]
80003e66:	e4 cc 00 01 	sub	r12,r2,1
80003e6a:	0e 9b       	mov	r11,r7
80003e6c:	50 3c       	stdsp	sp[0xc],r12
80003e6e:	f2 0c 0c 49 	max	r9,r9,r12
80003e72:	c3 98       	rjmp	80003ee4 <get_arg+0x264>
80003e74:	62 0a       	ld.w	r10,r1[0x0]
80003e76:	5b fa       	cp.w	r10,-1
80003e78:	c0 a1       	brne	80003e8c <get_arg+0x20c>
80003e7a:	50 19       	stdsp	sp[0x4],r9
80003e7c:	50 28       	stdsp	sp[0x8],r8
80003e7e:	e0 6a 00 80 	mov	r10,128
80003e82:	30 0b       	mov	r11,0
80003e84:	02 9c       	mov	r12,r1
80003e86:	cd ae       	rcall	80003c3a <memset>
80003e88:	40 28       	lddsp	r8,sp[0x8]
80003e8a:	40 19       	lddsp	r9,sp[0x4]
80003e8c:	20 12       	sub	r2,1
80003e8e:	30 0a       	mov	r10,0
80003e90:	0e 9b       	mov	r11,r7
80003e92:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003e96:	f2 02 0c 49 	max	r9,r9,r2
80003e9a:	c2 58       	rjmp	80003ee4 <get_arg+0x264>
80003e9c:	16 97       	mov	r7,r11
80003e9e:	6c 0a       	ld.w	r10,r6[0x0]
80003ea0:	f4 cb ff fc 	sub	r11,r10,-4
80003ea4:	8d 0b       	st.w	r6[0x0],r11
80003ea6:	74 0a       	ld.w	r10,r10[0x0]
80003ea8:	0e 9b       	mov	r11,r7
80003eaa:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003eae:	2f f5       	sub	r5,-1
80003eb0:	c1 a8       	rjmp	80003ee4 <get_arg+0x264>
80003eb2:	f4 c2 00 30 	sub	r2,r10,48
80003eb6:	c0 68       	rjmp	80003ec2 <get_arg+0x242>
80003eb8:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003ebc:	2f f7       	sub	r7,-1
80003ebe:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003ec2:	0f 8a       	ld.ub	r10,r7[0x0]
80003ec4:	58 0a       	cp.w	r10,0
80003ec6:	c0 e0       	breq	80003ee2 <get_arg+0x262>
80003ec8:	23 0a       	sub	r10,48
80003eca:	58 9a       	cp.w	r10,9
80003ecc:	fe 98 ff f6 	brls	80003eb8 <get_arg+0x238>
80003ed0:	c0 98       	rjmp	80003ee2 <get_arg+0x262>
80003ed2:	2f f7       	sub	r7,-1
80003ed4:	0f 8a       	ld.ub	r10,r7[0x0]
80003ed6:	58 0a       	cp.w	r10,0
80003ed8:	c0 50       	breq	80003ee2 <get_arg+0x262>
80003eda:	23 0a       	sub	r10,48
80003edc:	58 9a       	cp.w	r10,9
80003ede:	fe 98 ff fa 	brls	80003ed2 <get_arg+0x252>
80003ee2:	0e 9b       	mov	r11,r7
80003ee4:	40 7c       	lddsp	r12,sp[0x1c]
80003ee6:	30 ba       	mov	r10,11
80003ee8:	f4 0c 18 00 	cp.b	r12,r10
80003eec:	fe 91 fe f4 	brne	80003cd4 <get_arg+0x54>
80003ef0:	40 42       	lddsp	r2,sp[0x10]
80003ef2:	17 8c       	ld.ub	r12,r11[0x0]
80003ef4:	0a 32       	cp.w	r2,r5
80003ef6:	5f 4a       	srge	r10
80003ef8:	f0 0c 18 00 	cp.b	r12,r8
80003efc:	5f 1c       	srne	r12
80003efe:	f9 ea 00 0a 	and	r10,r12,r10
80003f02:	f0 0a 18 00 	cp.b	r10,r8
80003f06:	fe 91 fe d1 	brne	80003ca8 <get_arg+0x28>
80003f0a:	30 08       	mov	r8,0
80003f0c:	40 4e       	lddsp	lr,sp[0x10]
80003f0e:	17 8a       	ld.ub	r10,r11[0x0]
80003f10:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003f14:	f0 0a 18 00 	cp.b	r10,r8
80003f18:	fc 09 17 10 	movne	r9,lr
80003f1c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003f20:	06 9e       	mov	lr,r3
80003f22:	c2 a8       	rjmp	80003f76 <get_arg+0x2f6>
80003f24:	62 0a       	ld.w	r10,r1[0x0]
80003f26:	58 3a       	cp.w	r10,3
80003f28:	c1 e0       	breq	80003f64 <get_arg+0x2e4>
80003f2a:	e0 89 00 07 	brgt	80003f38 <get_arg+0x2b8>
80003f2e:	58 1a       	cp.w	r10,1
80003f30:	c1 a0       	breq	80003f64 <get_arg+0x2e4>
80003f32:	58 2a       	cp.w	r10,2
80003f34:	c1 81       	brne	80003f64 <get_arg+0x2e4>
80003f36:	c0 58       	rjmp	80003f40 <get_arg+0x2c0>
80003f38:	58 5a       	cp.w	r10,5
80003f3a:	c0 c0       	breq	80003f52 <get_arg+0x2d2>
80003f3c:	c0 b5       	brlt	80003f52 <get_arg+0x2d2>
80003f3e:	c1 38       	rjmp	80003f64 <get_arg+0x2e4>
80003f40:	6c 0a       	ld.w	r10,r6[0x0]
80003f42:	f4 cc ff f8 	sub	r12,r10,-8
80003f46:	8d 0c       	st.w	r6[0x0],r12
80003f48:	f4 e2 00 00 	ld.d	r2,r10[0]
80003f4c:	f0 e3 00 00 	st.d	r8[0],r2
80003f50:	c1 08       	rjmp	80003f70 <get_arg+0x2f0>
80003f52:	6c 0a       	ld.w	r10,r6[0x0]
80003f54:	f4 cc ff f8 	sub	r12,r10,-8
80003f58:	8d 0c       	st.w	r6[0x0],r12
80003f5a:	f4 e2 00 00 	ld.d	r2,r10[0]
80003f5e:	f0 e3 00 00 	st.d	r8[0],r2
80003f62:	c0 78       	rjmp	80003f70 <get_arg+0x2f0>
80003f64:	6c 0a       	ld.w	r10,r6[0x0]
80003f66:	f4 cc ff fc 	sub	r12,r10,-4
80003f6a:	8d 0c       	st.w	r6[0x0],r12
80003f6c:	74 0a       	ld.w	r10,r10[0x0]
80003f6e:	91 0a       	st.w	r8[0x0],r10
80003f70:	2f f5       	sub	r5,-1
80003f72:	2f 88       	sub	r8,-8
80003f74:	2f c1       	sub	r1,-4
80003f76:	12 35       	cp.w	r5,r9
80003f78:	fe 9a ff d6 	brle	80003f24 <get_arg+0x2a4>
80003f7c:	1c 93       	mov	r3,lr
80003f7e:	40 52       	lddsp	r2,sp[0x14]
80003f80:	40 6e       	lddsp	lr,sp[0x18]
80003f82:	85 05       	st.w	r2[0x0],r5
80003f84:	9d 0b       	st.w	lr[0x0],r11
80003f86:	40 4b       	lddsp	r11,sp[0x10]
80003f88:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003f8c:	2f 8d       	sub	sp,-32
80003f8e:	d8 32       	popm	r0-r7,pc

80003f90 <__sprint_r>:
80003f90:	d4 21       	pushm	r4-r7,lr
80003f92:	14 97       	mov	r7,r10
80003f94:	74 28       	ld.w	r8,r10[0x8]
80003f96:	58 08       	cp.w	r8,0
80003f98:	c0 41       	brne	80003fa0 <__sprint_r+0x10>
80003f9a:	95 18       	st.w	r10[0x4],r8
80003f9c:	10 9c       	mov	r12,r8
80003f9e:	d8 22       	popm	r4-r7,pc
80003fa0:	e0 a0 18 b4 	rcall	80007108 <__sfvwrite_r>
80003fa4:	30 08       	mov	r8,0
80003fa6:	8f 18       	st.w	r7[0x4],r8
80003fa8:	8f 28       	st.w	r7[0x8],r8
80003faa:	d8 22       	popm	r4-r7,pc

80003fac <_vfprintf_r>:
80003fac:	d4 31       	pushm	r0-r7,lr
80003fae:	fa cd 06 bc 	sub	sp,sp,1724
80003fb2:	51 09       	stdsp	sp[0x40],r9
80003fb4:	16 91       	mov	r1,r11
80003fb6:	14 97       	mov	r7,r10
80003fb8:	18 95       	mov	r5,r12
80003fba:	e0 a0 1a 1d 	rcall	800073f4 <_localeconv_r>
80003fbe:	78 0c       	ld.w	r12,r12[0x0]
80003fc0:	50 cc       	stdsp	sp[0x30],r12
80003fc2:	58 05       	cp.w	r5,0
80003fc4:	c0 70       	breq	80003fd2 <_vfprintf_r+0x26>
80003fc6:	6a 68       	ld.w	r8,r5[0x18]
80003fc8:	58 08       	cp.w	r8,0
80003fca:	c0 41       	brne	80003fd2 <_vfprintf_r+0x26>
80003fcc:	0a 9c       	mov	r12,r5
80003fce:	e0 a0 17 3d 	rcall	80006e48 <__sinit>
80003fd2:	fe c8 a7 d6 	sub	r8,pc,-22570
80003fd6:	10 31       	cp.w	r1,r8
80003fd8:	c0 31       	brne	80003fde <_vfprintf_r+0x32>
80003fda:	6a 01       	ld.w	r1,r5[0x0]
80003fdc:	c0 c8       	rjmp	80003ff4 <_vfprintf_r+0x48>
80003fde:	fe c8 a7 c2 	sub	r8,pc,-22590
80003fe2:	10 31       	cp.w	r1,r8
80003fe4:	c0 31       	brne	80003fea <_vfprintf_r+0x3e>
80003fe6:	6a 11       	ld.w	r1,r5[0x4]
80003fe8:	c0 68       	rjmp	80003ff4 <_vfprintf_r+0x48>
80003fea:	fe c8 a7 ae 	sub	r8,pc,-22610
80003fee:	10 31       	cp.w	r1,r8
80003ff0:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003ff4:	82 68       	ld.sh	r8,r1[0xc]
80003ff6:	ed b8 00 03 	bld	r8,0x3
80003ffa:	c0 41       	brne	80004002 <_vfprintf_r+0x56>
80003ffc:	62 48       	ld.w	r8,r1[0x10]
80003ffe:	58 08       	cp.w	r8,0
80004000:	c0 71       	brne	8000400e <_vfprintf_r+0x62>
80004002:	02 9b       	mov	r11,r1
80004004:	0a 9c       	mov	r12,r5
80004006:	e0 a0 0f 5d 	rcall	80005ec0 <__swsetup_r>
8000400a:	e0 81 0f 54 	brne	80005eb2 <_vfprintf_r+0x1f06>
8000400e:	82 68       	ld.sh	r8,r1[0xc]
80004010:	10 99       	mov	r9,r8
80004012:	e2 19 00 1a 	andl	r9,0x1a,COH
80004016:	58 a9       	cp.w	r9,10
80004018:	c3 c1       	brne	80004090 <_vfprintf_r+0xe4>
8000401a:	82 79       	ld.sh	r9,r1[0xe]
8000401c:	30 0a       	mov	r10,0
8000401e:	f4 09 19 00 	cp.h	r9,r10
80004022:	c3 75       	brlt	80004090 <_vfprintf_r+0xe4>
80004024:	a1 d8       	cbr	r8,0x1
80004026:	fb 58 05 d0 	st.h	sp[1488],r8
8000402a:	62 88       	ld.w	r8,r1[0x20]
8000402c:	fb 48 05 e4 	st.w	sp[1508],r8
80004030:	62 a8       	ld.w	r8,r1[0x28]
80004032:	fb 48 05 ec 	st.w	sp[1516],r8
80004036:	fa c8 ff bc 	sub	r8,sp,-68
8000403a:	fb 48 05 d4 	st.w	sp[1492],r8
8000403e:	fb 48 05 c4 	st.w	sp[1476],r8
80004042:	e0 68 04 00 	mov	r8,1024
80004046:	fb 48 05 d8 	st.w	sp[1496],r8
8000404a:	fb 48 05 cc 	st.w	sp[1484],r8
8000404e:	30 08       	mov	r8,0
80004050:	fb 59 05 d2 	st.h	sp[1490],r9
80004054:	0e 9a       	mov	r10,r7
80004056:	41 09       	lddsp	r9,sp[0x40]
80004058:	fa c7 fa 3c 	sub	r7,sp,-1476
8000405c:	fb 48 05 dc 	st.w	sp[1500],r8
80004060:	0a 9c       	mov	r12,r5
80004062:	0e 9b       	mov	r11,r7
80004064:	ca 4f       	rcall	80003fac <_vfprintf_r>
80004066:	50 bc       	stdsp	sp[0x2c],r12
80004068:	c0 95       	brlt	8000407a <_vfprintf_r+0xce>
8000406a:	0e 9b       	mov	r11,r7
8000406c:	0a 9c       	mov	r12,r5
8000406e:	e0 a0 16 15 	rcall	80006c98 <_fflush_r>
80004072:	40 be       	lddsp	lr,sp[0x2c]
80004074:	f9 be 01 ff 	movne	lr,-1
80004078:	50 be       	stdsp	sp[0x2c],lr
8000407a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000407e:	ed b8 00 06 	bld	r8,0x6
80004082:	e0 81 0f 1a 	brne	80005eb6 <_vfprintf_r+0x1f0a>
80004086:	82 68       	ld.sh	r8,r1[0xc]
80004088:	a7 a8       	sbr	r8,0x6
8000408a:	a2 68       	st.h	r1[0xc],r8
8000408c:	e0 8f 0f 15 	bral	80005eb6 <_vfprintf_r+0x1f0a>
80004090:	30 08       	mov	r8,0
80004092:	fb 48 06 b4 	st.w	sp[1716],r8
80004096:	fb 48 06 90 	st.w	sp[1680],r8
8000409a:	fb 48 06 8c 	st.w	sp[1676],r8
8000409e:	fb 48 06 b0 	st.w	sp[1712],r8
800040a2:	30 08       	mov	r8,0
800040a4:	30 09       	mov	r9,0
800040a6:	50 a7       	stdsp	sp[0x28],r7
800040a8:	50 78       	stdsp	sp[0x1c],r8
800040aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800040ae:	3f f8       	mov	r8,-1
800040b0:	50 59       	stdsp	sp[0x14],r9
800040b2:	fb 43 06 88 	st.w	sp[1672],r3
800040b6:	fb 48 05 44 	st.w	sp[1348],r8
800040ba:	12 9c       	mov	r12,r9
800040bc:	50 69       	stdsp	sp[0x18],r9
800040be:	50 d9       	stdsp	sp[0x34],r9
800040c0:	50 e9       	stdsp	sp[0x38],r9
800040c2:	50 b9       	stdsp	sp[0x2c],r9
800040c4:	12 97       	mov	r7,r9
800040c6:	0a 94       	mov	r4,r5
800040c8:	40 a2       	lddsp	r2,sp[0x28]
800040ca:	32 5a       	mov	r10,37
800040cc:	30 08       	mov	r8,0
800040ce:	c0 28       	rjmp	800040d2 <_vfprintf_r+0x126>
800040d0:	2f f2       	sub	r2,-1
800040d2:	05 89       	ld.ub	r9,r2[0x0]
800040d4:	f0 09 18 00 	cp.b	r9,r8
800040d8:	5f 1b       	srne	r11
800040da:	f4 09 18 00 	cp.b	r9,r10
800040de:	5f 19       	srne	r9
800040e0:	f3 eb 00 0b 	and	r11,r9,r11
800040e4:	f0 0b 18 00 	cp.b	r11,r8
800040e8:	cf 41       	brne	800040d0 <_vfprintf_r+0x124>
800040ea:	40 ab       	lddsp	r11,sp[0x28]
800040ec:	e4 0b 01 06 	sub	r6,r2,r11
800040f0:	c1 e0       	breq	8000412c <_vfprintf_r+0x180>
800040f2:	fa f8 06 90 	ld.w	r8,sp[1680]
800040f6:	0c 08       	add	r8,r6
800040f8:	87 0b       	st.w	r3[0x0],r11
800040fa:	fb 48 06 90 	st.w	sp[1680],r8
800040fe:	87 16       	st.w	r3[0x4],r6
80004100:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004104:	2f f8       	sub	r8,-1
80004106:	fb 48 06 8c 	st.w	sp[1676],r8
8000410a:	58 78       	cp.w	r8,7
8000410c:	e0 89 00 04 	brgt	80004114 <_vfprintf_r+0x168>
80004110:	2f 83       	sub	r3,-8
80004112:	c0 a8       	rjmp	80004126 <_vfprintf_r+0x17a>
80004114:	fa ca f9 78 	sub	r10,sp,-1672
80004118:	02 9b       	mov	r11,r1
8000411a:	08 9c       	mov	r12,r4
8000411c:	c3 af       	rcall	80003f90 <__sprint_r>
8000411e:	e0 81 0e c6 	brne	80005eaa <_vfprintf_r+0x1efe>
80004122:	fa c3 f9 e0 	sub	r3,sp,-1568
80004126:	40 ba       	lddsp	r10,sp[0x2c]
80004128:	0c 0a       	add	r10,r6
8000412a:	50 ba       	stdsp	sp[0x2c],r10
8000412c:	05 89       	ld.ub	r9,r2[0x0]
8000412e:	30 08       	mov	r8,0
80004130:	f0 09 18 00 	cp.b	r9,r8
80004134:	e0 80 0e aa 	breq	80005e88 <_vfprintf_r+0x1edc>
80004138:	30 09       	mov	r9,0
8000413a:	fb 68 06 bb 	st.b	sp[1723],r8
8000413e:	0e 96       	mov	r6,r7
80004140:	e4 c8 ff ff 	sub	r8,r2,-1
80004144:	3f fe       	mov	lr,-1
80004146:	50 93       	stdsp	sp[0x24],r3
80004148:	50 41       	stdsp	sp[0x10],r1
8000414a:	0e 93       	mov	r3,r7
8000414c:	04 91       	mov	r1,r2
8000414e:	50 89       	stdsp	sp[0x20],r9
80004150:	50 a8       	stdsp	sp[0x28],r8
80004152:	50 2e       	stdsp	sp[0x8],lr
80004154:	50 39       	stdsp	sp[0xc],r9
80004156:	12 95       	mov	r5,r9
80004158:	12 90       	mov	r0,r9
8000415a:	10 97       	mov	r7,r8
8000415c:	08 92       	mov	r2,r4
8000415e:	c0 78       	rjmp	8000416c <_vfprintf_r+0x1c0>
80004160:	3f fc       	mov	r12,-1
80004162:	08 97       	mov	r7,r4
80004164:	50 2c       	stdsp	sp[0x8],r12
80004166:	c0 38       	rjmp	8000416c <_vfprintf_r+0x1c0>
80004168:	30 0b       	mov	r11,0
8000416a:	50 3b       	stdsp	sp[0xc],r11
8000416c:	0f 38       	ld.ub	r8,r7++
8000416e:	c0 28       	rjmp	80004172 <_vfprintf_r+0x1c6>
80004170:	12 90       	mov	r0,r9
80004172:	f0 c9 00 20 	sub	r9,r8,32
80004176:	e0 49 00 58 	cp.w	r9,88
8000417a:	e0 8b 0a 30 	brhi	800055da <_vfprintf_r+0x162e>
8000417e:	fe ca ad 2a 	sub	r10,pc,-21206
80004182:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004186:	50 a7       	stdsp	sp[0x28],r7
80004188:	50 80       	stdsp	sp[0x20],r0
8000418a:	0c 97       	mov	r7,r6
8000418c:	04 94       	mov	r4,r2
8000418e:	06 96       	mov	r6,r3
80004190:	02 92       	mov	r2,r1
80004192:	fe c9 ab 02 	sub	r9,pc,-21758
80004196:	40 93       	lddsp	r3,sp[0x24]
80004198:	10 90       	mov	r0,r8
8000419a:	40 41       	lddsp	r1,sp[0x10]
8000419c:	50 d9       	stdsp	sp[0x34],r9
8000419e:	e0 8f 08 8e 	bral	800052ba <_vfprintf_r+0x130e>
800041a2:	30 08       	mov	r8,0
800041a4:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800041a8:	f0 09 18 00 	cp.b	r9,r8
800041ac:	ce 01       	brne	8000416c <_vfprintf_r+0x1c0>
800041ae:	32 08       	mov	r8,32
800041b0:	c6 e8       	rjmp	8000428c <_vfprintf_r+0x2e0>
800041b2:	a1 a5       	sbr	r5,0x0
800041b4:	cd cb       	rjmp	8000416c <_vfprintf_r+0x1c0>
800041b6:	0f 89       	ld.ub	r9,r7[0x0]
800041b8:	f2 c8 00 30 	sub	r8,r9,48
800041bc:	58 98       	cp.w	r8,9
800041be:	e0 8b 00 1d 	brhi	800041f8 <_vfprintf_r+0x24c>
800041c2:	ee c8 ff ff 	sub	r8,r7,-1
800041c6:	30 0b       	mov	r11,0
800041c8:	23 09       	sub	r9,48
800041ca:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800041ce:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800041d2:	11 39       	ld.ub	r9,r8++
800041d4:	f2 ca 00 30 	sub	r10,r9,48
800041d8:	58 9a       	cp.w	r10,9
800041da:	fe 98 ff f7 	brls	800041c8 <_vfprintf_r+0x21c>
800041de:	e0 49 00 24 	cp.w	r9,36
800041e2:	cc 31       	brne	80004168 <_vfprintf_r+0x1bc>
800041e4:	e0 4b 00 20 	cp.w	r11,32
800041e8:	e0 89 0e 60 	brgt	80005ea8 <_vfprintf_r+0x1efc>
800041ec:	20 1b       	sub	r11,1
800041ee:	fa f9 06 b4 	ld.w	r9,sp[1716]
800041f2:	12 3b       	cp.w	r11,r9
800041f4:	c0 95       	brlt	80004206 <_vfprintf_r+0x25a>
800041f6:	c1 08       	rjmp	80004216 <_vfprintf_r+0x26a>
800041f8:	fa f9 06 b4 	ld.w	r9,sp[1716]
800041fc:	ec ca ff ff 	sub	r10,r6,-1
80004200:	12 36       	cp.w	r6,r9
80004202:	c1 f5       	brlt	80004240 <_vfprintf_r+0x294>
80004204:	c2 68       	rjmp	80004250 <_vfprintf_r+0x2a4>
80004206:	fa ce f9 44 	sub	lr,sp,-1724
8000420a:	10 97       	mov	r7,r8
8000420c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004210:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004214:	c3 58       	rjmp	8000427e <_vfprintf_r+0x2d2>
80004216:	10 97       	mov	r7,r8
80004218:	fa c8 f9 50 	sub	r8,sp,-1712
8000421c:	1a d8       	st.w	--sp,r8
8000421e:	fa c8 fa b8 	sub	r8,sp,-1352
80004222:	1a d8       	st.w	--sp,r8
80004224:	fa c8 fb b4 	sub	r8,sp,-1100
80004228:	02 9a       	mov	r10,r1
8000422a:	1a d8       	st.w	--sp,r8
8000422c:	04 9c       	mov	r12,r2
8000422e:	fa c8 f9 40 	sub	r8,sp,-1728
80004232:	fa c9 ff b4 	sub	r9,sp,-76
80004236:	fe b0 fd 25 	rcall	80003c80 <get_arg>
8000423a:	2f dd       	sub	sp,-12
8000423c:	78 00       	ld.w	r0,r12[0x0]
8000423e:	c2 08       	rjmp	8000427e <_vfprintf_r+0x2d2>
80004240:	fa cc f9 44 	sub	r12,sp,-1724
80004244:	14 96       	mov	r6,r10
80004246:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000424a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000424e:	c1 88       	rjmp	8000427e <_vfprintf_r+0x2d2>
80004250:	41 08       	lddsp	r8,sp[0x40]
80004252:	59 f9       	cp.w	r9,31
80004254:	e0 89 00 11 	brgt	80004276 <_vfprintf_r+0x2ca>
80004258:	f0 cb ff fc 	sub	r11,r8,-4
8000425c:	51 0b       	stdsp	sp[0x40],r11
8000425e:	70 00       	ld.w	r0,r8[0x0]
80004260:	fa cb f9 44 	sub	r11,sp,-1724
80004264:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004268:	f1 40 fd 88 	st.w	r8[-632],r0
8000426c:	2f f9       	sub	r9,-1
8000426e:	14 96       	mov	r6,r10
80004270:	fb 49 06 b4 	st.w	sp[1716],r9
80004274:	c0 58       	rjmp	8000427e <_vfprintf_r+0x2d2>
80004276:	70 00       	ld.w	r0,r8[0x0]
80004278:	14 96       	mov	r6,r10
8000427a:	2f c8       	sub	r8,-4
8000427c:	51 08       	stdsp	sp[0x40],r8
8000427e:	58 00       	cp.w	r0,0
80004280:	fe 94 ff 76 	brge	8000416c <_vfprintf_r+0x1c0>
80004284:	5c 30       	neg	r0
80004286:	a3 a5       	sbr	r5,0x2
80004288:	c7 2b       	rjmp	8000416c <_vfprintf_r+0x1c0>
8000428a:	32 b8       	mov	r8,43
8000428c:	fb 68 06 bb 	st.b	sp[1723],r8
80004290:	c6 eb       	rjmp	8000416c <_vfprintf_r+0x1c0>
80004292:	0f 38       	ld.ub	r8,r7++
80004294:	e0 48 00 2a 	cp.w	r8,42
80004298:	c0 30       	breq	8000429e <_vfprintf_r+0x2f2>
8000429a:	30 09       	mov	r9,0
8000429c:	c7 98       	rjmp	8000438e <_vfprintf_r+0x3e2>
8000429e:	0f 88       	ld.ub	r8,r7[0x0]
800042a0:	f0 c9 00 30 	sub	r9,r8,48
800042a4:	58 99       	cp.w	r9,9
800042a6:	e0 8b 00 1f 	brhi	800042e4 <_vfprintf_r+0x338>
800042aa:	ee c4 ff ff 	sub	r4,r7,-1
800042ae:	30 0b       	mov	r11,0
800042b0:	23 08       	sub	r8,48
800042b2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800042b6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800042ba:	09 38       	ld.ub	r8,r4++
800042bc:	f0 c9 00 30 	sub	r9,r8,48
800042c0:	58 99       	cp.w	r9,9
800042c2:	fe 98 ff f7 	brls	800042b0 <_vfprintf_r+0x304>
800042c6:	e0 48 00 24 	cp.w	r8,36
800042ca:	fe 91 ff 4f 	brne	80004168 <_vfprintf_r+0x1bc>
800042ce:	e0 4b 00 20 	cp.w	r11,32
800042d2:	e0 89 0d eb 	brgt	80005ea8 <_vfprintf_r+0x1efc>
800042d6:	20 1b       	sub	r11,1
800042d8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800042dc:	10 3b       	cp.w	r11,r8
800042de:	c0 a5       	brlt	800042f2 <_vfprintf_r+0x346>
800042e0:	c1 18       	rjmp	80004302 <_vfprintf_r+0x356>
800042e2:	d7 03       	nop
800042e4:	fa fa 06 b4 	ld.w	r10,sp[1716]
800042e8:	ec c9 ff ff 	sub	r9,r6,-1
800042ec:	14 36       	cp.w	r6,r10
800042ee:	c1 f5       	brlt	8000432c <_vfprintf_r+0x380>
800042f0:	c2 88       	rjmp	80004340 <_vfprintf_r+0x394>
800042f2:	fa ca f9 44 	sub	r10,sp,-1724
800042f6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800042fa:	f6 fb fd 88 	ld.w	r11,r11[-632]
800042fe:	50 2b       	stdsp	sp[0x8],r11
80004300:	c3 c8       	rjmp	80004378 <_vfprintf_r+0x3cc>
80004302:	fa c8 f9 50 	sub	r8,sp,-1712
80004306:	1a d8       	st.w	--sp,r8
80004308:	fa c8 fa b8 	sub	r8,sp,-1352
8000430c:	1a d8       	st.w	--sp,r8
8000430e:	fa c8 fb b4 	sub	r8,sp,-1100
80004312:	02 9a       	mov	r10,r1
80004314:	1a d8       	st.w	--sp,r8
80004316:	04 9c       	mov	r12,r2
80004318:	fa c8 f9 40 	sub	r8,sp,-1728
8000431c:	fa c9 ff b4 	sub	r9,sp,-76
80004320:	fe b0 fc b0 	rcall	80003c80 <get_arg>
80004324:	2f dd       	sub	sp,-12
80004326:	78 0c       	ld.w	r12,r12[0x0]
80004328:	50 2c       	stdsp	sp[0x8],r12
8000432a:	c2 78       	rjmp	80004378 <_vfprintf_r+0x3cc>
8000432c:	12 96       	mov	r6,r9
8000432e:	0e 94       	mov	r4,r7
80004330:	fa c9 f9 44 	sub	r9,sp,-1724
80004334:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004338:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000433c:	50 28       	stdsp	sp[0x8],r8
8000433e:	c1 d8       	rjmp	80004378 <_vfprintf_r+0x3cc>
80004340:	41 08       	lddsp	r8,sp[0x40]
80004342:	59 fa       	cp.w	r10,31
80004344:	e0 89 00 14 	brgt	8000436c <_vfprintf_r+0x3c0>
80004348:	f0 cb ff fc 	sub	r11,r8,-4
8000434c:	70 08       	ld.w	r8,r8[0x0]
8000434e:	51 0b       	stdsp	sp[0x40],r11
80004350:	50 28       	stdsp	sp[0x8],r8
80004352:	fa c6 f9 44 	sub	r6,sp,-1724
80004356:	40 2e       	lddsp	lr,sp[0x8]
80004358:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000435c:	f1 4e fd 88 	st.w	r8[-632],lr
80004360:	2f fa       	sub	r10,-1
80004362:	0e 94       	mov	r4,r7
80004364:	fb 4a 06 b4 	st.w	sp[1716],r10
80004368:	12 96       	mov	r6,r9
8000436a:	c0 78       	rjmp	80004378 <_vfprintf_r+0x3cc>
8000436c:	70 0c       	ld.w	r12,r8[0x0]
8000436e:	0e 94       	mov	r4,r7
80004370:	2f c8       	sub	r8,-4
80004372:	50 2c       	stdsp	sp[0x8],r12
80004374:	12 96       	mov	r6,r9
80004376:	51 08       	stdsp	sp[0x40],r8
80004378:	40 2b       	lddsp	r11,sp[0x8]
8000437a:	58 0b       	cp.w	r11,0
8000437c:	fe 95 fe f2 	brlt	80004160 <_vfprintf_r+0x1b4>
80004380:	08 97       	mov	r7,r4
80004382:	cf 5a       	rjmp	8000416c <_vfprintf_r+0x1c0>
80004384:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004388:	0f 38       	ld.ub	r8,r7++
8000438a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000438e:	f0 ca 00 30 	sub	r10,r8,48
80004392:	58 9a       	cp.w	r10,9
80004394:	fe 98 ff f8 	brls	80004384 <_vfprintf_r+0x3d8>
80004398:	3f fa       	mov	r10,-1
8000439a:	f2 0a 0c 49 	max	r9,r9,r10
8000439e:	50 29       	stdsp	sp[0x8],r9
800043a0:	ce 9a       	rjmp	80004172 <_vfprintf_r+0x1c6>
800043a2:	a7 b5       	sbr	r5,0x7
800043a4:	ce 4a       	rjmp	8000416c <_vfprintf_r+0x1c0>
800043a6:	30 09       	mov	r9,0
800043a8:	23 08       	sub	r8,48
800043aa:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043ae:	f0 09 00 19 	add	r9,r8,r9<<0x1
800043b2:	0f 38       	ld.ub	r8,r7++
800043b4:	f0 ca 00 30 	sub	r10,r8,48
800043b8:	58 9a       	cp.w	r10,9
800043ba:	fe 98 ff f7 	brls	800043a8 <_vfprintf_r+0x3fc>
800043be:	e0 48 00 24 	cp.w	r8,36
800043c2:	fe 91 fe d7 	brne	80004170 <_vfprintf_r+0x1c4>
800043c6:	e0 49 00 20 	cp.w	r9,32
800043ca:	e0 89 0d 6f 	brgt	80005ea8 <_vfprintf_r+0x1efc>
800043ce:	f2 c3 00 01 	sub	r3,r9,1
800043d2:	30 19       	mov	r9,1
800043d4:	50 39       	stdsp	sp[0xc],r9
800043d6:	cc ba       	rjmp	8000416c <_vfprintf_r+0x1c0>
800043d8:	a3 b5       	sbr	r5,0x3
800043da:	cc 9a       	rjmp	8000416c <_vfprintf_r+0x1c0>
800043dc:	a7 a5       	sbr	r5,0x6
800043de:	cc 7a       	rjmp	8000416c <_vfprintf_r+0x1c0>
800043e0:	0a 98       	mov	r8,r5
800043e2:	a5 b5       	sbr	r5,0x5
800043e4:	a5 a8       	sbr	r8,0x4
800043e6:	0f 89       	ld.ub	r9,r7[0x0]
800043e8:	36 ce       	mov	lr,108
800043ea:	fc 09 18 00 	cp.b	r9,lr
800043ee:	f7 b7 00 ff 	subeq	r7,-1
800043f2:	f0 05 17 10 	movne	r5,r8
800043f6:	cb ba       	rjmp	8000416c <_vfprintf_r+0x1c0>
800043f8:	a5 b5       	sbr	r5,0x5
800043fa:	cb 9a       	rjmp	8000416c <_vfprintf_r+0x1c0>
800043fc:	50 a7       	stdsp	sp[0x28],r7
800043fe:	50 80       	stdsp	sp[0x20],r0
80004400:	0c 97       	mov	r7,r6
80004402:	10 90       	mov	r0,r8
80004404:	06 96       	mov	r6,r3
80004406:	04 94       	mov	r4,r2
80004408:	40 93       	lddsp	r3,sp[0x24]
8000440a:	02 92       	mov	r2,r1
8000440c:	0e 99       	mov	r9,r7
8000440e:	40 41       	lddsp	r1,sp[0x10]
80004410:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004414:	40 3c       	lddsp	r12,sp[0xc]
80004416:	58 0c       	cp.w	r12,0
80004418:	c1 d0       	breq	80004452 <_vfprintf_r+0x4a6>
8000441a:	10 36       	cp.w	r6,r8
8000441c:	c0 64       	brge	80004428 <_vfprintf_r+0x47c>
8000441e:	fa cb f9 44 	sub	r11,sp,-1724
80004422:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004426:	c1 d8       	rjmp	80004460 <_vfprintf_r+0x4b4>
80004428:	fa c8 f9 50 	sub	r8,sp,-1712
8000442c:	1a d8       	st.w	--sp,r8
8000442e:	fa c8 fa b8 	sub	r8,sp,-1352
80004432:	1a d8       	st.w	--sp,r8
80004434:	fa c8 fb b4 	sub	r8,sp,-1100
80004438:	1a d8       	st.w	--sp,r8
8000443a:	fa c8 f9 40 	sub	r8,sp,-1728
8000443e:	fa c9 ff b4 	sub	r9,sp,-76
80004442:	04 9a       	mov	r10,r2
80004444:	0c 9b       	mov	r11,r6
80004446:	08 9c       	mov	r12,r4
80004448:	fe b0 fc 1c 	rcall	80003c80 <get_arg>
8000444c:	2f dd       	sub	sp,-12
8000444e:	19 b8       	ld.ub	r8,r12[0x3]
80004450:	c2 28       	rjmp	80004494 <_vfprintf_r+0x4e8>
80004452:	2f f7       	sub	r7,-1
80004454:	10 39       	cp.w	r9,r8
80004456:	c0 84       	brge	80004466 <_vfprintf_r+0x4ba>
80004458:	fa ca f9 44 	sub	r10,sp,-1724
8000445c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004460:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004464:	c1 88       	rjmp	80004494 <_vfprintf_r+0x4e8>
80004466:	41 09       	lddsp	r9,sp[0x40]
80004468:	59 f8       	cp.w	r8,31
8000446a:	e0 89 00 12 	brgt	8000448e <_vfprintf_r+0x4e2>
8000446e:	f2 ca ff fc 	sub	r10,r9,-4
80004472:	51 0a       	stdsp	sp[0x40],r10
80004474:	72 09       	ld.w	r9,r9[0x0]
80004476:	fa c6 f9 44 	sub	r6,sp,-1724
8000447a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000447e:	2f f8       	sub	r8,-1
80004480:	f5 49 fd 88 	st.w	r10[-632],r9
80004484:	fb 48 06 b4 	st.w	sp[1716],r8
80004488:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000448c:	c0 48       	rjmp	80004494 <_vfprintf_r+0x4e8>
8000448e:	13 b8       	ld.ub	r8,r9[0x3]
80004490:	2f c9       	sub	r9,-4
80004492:	51 09       	stdsp	sp[0x40],r9
80004494:	fb 68 06 60 	st.b	sp[1632],r8
80004498:	30 0e       	mov	lr,0
8000449a:	30 08       	mov	r8,0
8000449c:	30 12       	mov	r2,1
8000449e:	fb 68 06 bb 	st.b	sp[1723],r8
800044a2:	50 2e       	stdsp	sp[0x8],lr
800044a4:	e0 8f 08 ad 	bral	800055fe <_vfprintf_r+0x1652>
800044a8:	50 a7       	stdsp	sp[0x28],r7
800044aa:	50 80       	stdsp	sp[0x20],r0
800044ac:	0c 97       	mov	r7,r6
800044ae:	04 94       	mov	r4,r2
800044b0:	06 96       	mov	r6,r3
800044b2:	02 92       	mov	r2,r1
800044b4:	40 93       	lddsp	r3,sp[0x24]
800044b6:	10 90       	mov	r0,r8
800044b8:	40 41       	lddsp	r1,sp[0x10]
800044ba:	a5 a5       	sbr	r5,0x4
800044bc:	c0 a8       	rjmp	800044d0 <_vfprintf_r+0x524>
800044be:	50 a7       	stdsp	sp[0x28],r7
800044c0:	50 80       	stdsp	sp[0x20],r0
800044c2:	0c 97       	mov	r7,r6
800044c4:	04 94       	mov	r4,r2
800044c6:	06 96       	mov	r6,r3
800044c8:	02 92       	mov	r2,r1
800044ca:	40 93       	lddsp	r3,sp[0x24]
800044cc:	10 90       	mov	r0,r8
800044ce:	40 41       	lddsp	r1,sp[0x10]
800044d0:	ed b5 00 05 	bld	r5,0x5
800044d4:	c5 11       	brne	80004576 <_vfprintf_r+0x5ca>
800044d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044da:	40 3c       	lddsp	r12,sp[0xc]
800044dc:	58 0c       	cp.w	r12,0
800044de:	c1 e0       	breq	8000451a <_vfprintf_r+0x56e>
800044e0:	10 36       	cp.w	r6,r8
800044e2:	c0 64       	brge	800044ee <_vfprintf_r+0x542>
800044e4:	fa cb f9 44 	sub	r11,sp,-1724
800044e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044ec:	c2 08       	rjmp	8000452c <_vfprintf_r+0x580>
800044ee:	fa c8 f9 50 	sub	r8,sp,-1712
800044f2:	1a d8       	st.w	--sp,r8
800044f4:	fa c8 fa b8 	sub	r8,sp,-1352
800044f8:	0c 9b       	mov	r11,r6
800044fa:	1a d8       	st.w	--sp,r8
800044fc:	fa c8 fb b4 	sub	r8,sp,-1100
80004500:	1a d8       	st.w	--sp,r8
80004502:	fa c9 ff b4 	sub	r9,sp,-76
80004506:	fa c8 f9 40 	sub	r8,sp,-1728
8000450a:	04 9a       	mov	r10,r2
8000450c:	08 9c       	mov	r12,r4
8000450e:	fe b0 fb b9 	rcall	80003c80 <get_arg>
80004512:	2f dd       	sub	sp,-12
80004514:	78 1b       	ld.w	r11,r12[0x4]
80004516:	78 09       	ld.w	r9,r12[0x0]
80004518:	c2 b8       	rjmp	8000456e <_vfprintf_r+0x5c2>
8000451a:	ee ca ff ff 	sub	r10,r7,-1
8000451e:	10 37       	cp.w	r7,r8
80004520:	c0 b4       	brge	80004536 <_vfprintf_r+0x58a>
80004522:	fa c9 f9 44 	sub	r9,sp,-1724
80004526:	14 97       	mov	r7,r10
80004528:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000452c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004530:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004534:	c1 d8       	rjmp	8000456e <_vfprintf_r+0x5c2>
80004536:	41 09       	lddsp	r9,sp[0x40]
80004538:	59 f8       	cp.w	r8,31
8000453a:	e0 89 00 14 	brgt	80004562 <_vfprintf_r+0x5b6>
8000453e:	f2 cb ff f8 	sub	r11,r9,-8
80004542:	51 0b       	stdsp	sp[0x40],r11
80004544:	fa c6 f9 44 	sub	r6,sp,-1724
80004548:	72 1b       	ld.w	r11,r9[0x4]
8000454a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000454e:	72 09       	ld.w	r9,r9[0x0]
80004550:	f9 4b fd 8c 	st.w	r12[-628],r11
80004554:	f9 49 fd 88 	st.w	r12[-632],r9
80004558:	2f f8       	sub	r8,-1
8000455a:	14 97       	mov	r7,r10
8000455c:	fb 48 06 b4 	st.w	sp[1716],r8
80004560:	c0 78       	rjmp	8000456e <_vfprintf_r+0x5c2>
80004562:	f2 c8 ff f8 	sub	r8,r9,-8
80004566:	72 1b       	ld.w	r11,r9[0x4]
80004568:	14 97       	mov	r7,r10
8000456a:	51 08       	stdsp	sp[0x40],r8
8000456c:	72 09       	ld.w	r9,r9[0x0]
8000456e:	16 98       	mov	r8,r11
80004570:	fa e9 00 00 	st.d	sp[0],r8
80004574:	ca e8       	rjmp	800046d0 <_vfprintf_r+0x724>
80004576:	ed b5 00 04 	bld	r5,0x4
8000457a:	c1 71       	brne	800045a8 <_vfprintf_r+0x5fc>
8000457c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004580:	40 3e       	lddsp	lr,sp[0xc]
80004582:	58 0e       	cp.w	lr,0
80004584:	c0 80       	breq	80004594 <_vfprintf_r+0x5e8>
80004586:	10 36       	cp.w	r6,r8
80004588:	c6 94       	brge	8000465a <_vfprintf_r+0x6ae>
8000458a:	fa cc f9 44 	sub	r12,sp,-1724
8000458e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004592:	c8 28       	rjmp	80004696 <_vfprintf_r+0x6ea>
80004594:	ee ca ff ff 	sub	r10,r7,-1
80004598:	10 37       	cp.w	r7,r8
8000459a:	e0 84 00 81 	brge	8000469c <_vfprintf_r+0x6f0>
8000459e:	fa cb f9 44 	sub	r11,sp,-1724
800045a2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045a6:	c7 78       	rjmp	80004694 <_vfprintf_r+0x6e8>
800045a8:	ed b5 00 06 	bld	r5,0x6
800045ac:	c4 b1       	brne	80004642 <_vfprintf_r+0x696>
800045ae:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045b2:	40 3c       	lddsp	r12,sp[0xc]
800045b4:	58 0c       	cp.w	r12,0
800045b6:	c1 d0       	breq	800045f0 <_vfprintf_r+0x644>
800045b8:	10 36       	cp.w	r6,r8
800045ba:	c0 64       	brge	800045c6 <_vfprintf_r+0x61a>
800045bc:	fa cb f9 44 	sub	r11,sp,-1724
800045c0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045c4:	c1 f8       	rjmp	80004602 <_vfprintf_r+0x656>
800045c6:	fa c8 f9 50 	sub	r8,sp,-1712
800045ca:	1a d8       	st.w	--sp,r8
800045cc:	fa c8 fa b8 	sub	r8,sp,-1352
800045d0:	1a d8       	st.w	--sp,r8
800045d2:	fa c8 fb b4 	sub	r8,sp,-1100
800045d6:	1a d8       	st.w	--sp,r8
800045d8:	fa c8 f9 40 	sub	r8,sp,-1728
800045dc:	fa c9 ff b4 	sub	r9,sp,-76
800045e0:	04 9a       	mov	r10,r2
800045e2:	0c 9b       	mov	r11,r6
800045e4:	08 9c       	mov	r12,r4
800045e6:	fe b0 fb 4d 	rcall	80003c80 <get_arg>
800045ea:	2f dd       	sub	sp,-12
800045ec:	98 18       	ld.sh	r8,r12[0x2]
800045ee:	c2 68       	rjmp	8000463a <_vfprintf_r+0x68e>
800045f0:	ee ca ff ff 	sub	r10,r7,-1
800045f4:	10 37       	cp.w	r7,r8
800045f6:	c0 94       	brge	80004608 <_vfprintf_r+0x65c>
800045f8:	fa c9 f9 44 	sub	r9,sp,-1724
800045fc:	14 97       	mov	r7,r10
800045fe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004602:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004606:	c1 a8       	rjmp	8000463a <_vfprintf_r+0x68e>
80004608:	41 09       	lddsp	r9,sp[0x40]
8000460a:	59 f8       	cp.w	r8,31
8000460c:	e0 89 00 13 	brgt	80004632 <_vfprintf_r+0x686>
80004610:	f2 cb ff fc 	sub	r11,r9,-4
80004614:	51 0b       	stdsp	sp[0x40],r11
80004616:	72 09       	ld.w	r9,r9[0x0]
80004618:	fa c6 f9 44 	sub	r6,sp,-1724
8000461c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004620:	2f f8       	sub	r8,-1
80004622:	f7 49 fd 88 	st.w	r11[-632],r9
80004626:	fb 48 06 b4 	st.w	sp[1716],r8
8000462a:	14 97       	mov	r7,r10
8000462c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004630:	c0 58       	rjmp	8000463a <_vfprintf_r+0x68e>
80004632:	92 18       	ld.sh	r8,r9[0x2]
80004634:	14 97       	mov	r7,r10
80004636:	2f c9       	sub	r9,-4
80004638:	51 09       	stdsp	sp[0x40],r9
8000463a:	50 18       	stdsp	sp[0x4],r8
8000463c:	bf 58       	asr	r8,0x1f
8000463e:	50 08       	stdsp	sp[0x0],r8
80004640:	c4 88       	rjmp	800046d0 <_vfprintf_r+0x724>
80004642:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004646:	40 3c       	lddsp	r12,sp[0xc]
80004648:	58 0c       	cp.w	r12,0
8000464a:	c1 d0       	breq	80004684 <_vfprintf_r+0x6d8>
8000464c:	10 36       	cp.w	r6,r8
8000464e:	c0 64       	brge	8000465a <_vfprintf_r+0x6ae>
80004650:	fa cb f9 44 	sub	r11,sp,-1724
80004654:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004658:	c1 f8       	rjmp	80004696 <_vfprintf_r+0x6ea>
8000465a:	fa c8 f9 50 	sub	r8,sp,-1712
8000465e:	1a d8       	st.w	--sp,r8
80004660:	fa c8 fa b8 	sub	r8,sp,-1352
80004664:	0c 9b       	mov	r11,r6
80004666:	1a d8       	st.w	--sp,r8
80004668:	fa c8 fb b4 	sub	r8,sp,-1100
8000466c:	04 9a       	mov	r10,r2
8000466e:	1a d8       	st.w	--sp,r8
80004670:	08 9c       	mov	r12,r4
80004672:	fa c8 f9 40 	sub	r8,sp,-1728
80004676:	fa c9 ff b4 	sub	r9,sp,-76
8000467a:	fe b0 fb 03 	rcall	80003c80 <get_arg>
8000467e:	2f dd       	sub	sp,-12
80004680:	78 0b       	ld.w	r11,r12[0x0]
80004682:	c2 48       	rjmp	800046ca <_vfprintf_r+0x71e>
80004684:	ee ca ff ff 	sub	r10,r7,-1
80004688:	10 37       	cp.w	r7,r8
8000468a:	c0 94       	brge	8000469c <_vfprintf_r+0x6f0>
8000468c:	fa c9 f9 44 	sub	r9,sp,-1724
80004690:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004694:	14 97       	mov	r7,r10
80004696:	ec fb fd 88 	ld.w	r11,r6[-632]
8000469a:	c1 88       	rjmp	800046ca <_vfprintf_r+0x71e>
8000469c:	41 09       	lddsp	r9,sp[0x40]
8000469e:	59 f8       	cp.w	r8,31
800046a0:	e0 89 00 11 	brgt	800046c2 <_vfprintf_r+0x716>
800046a4:	f2 cb ff fc 	sub	r11,r9,-4
800046a8:	51 0b       	stdsp	sp[0x40],r11
800046aa:	fa c6 f9 44 	sub	r6,sp,-1724
800046ae:	72 0b       	ld.w	r11,r9[0x0]
800046b0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800046b4:	f3 4b fd 88 	st.w	r9[-632],r11
800046b8:	2f f8       	sub	r8,-1
800046ba:	14 97       	mov	r7,r10
800046bc:	fb 48 06 b4 	st.w	sp[1716],r8
800046c0:	c0 58       	rjmp	800046ca <_vfprintf_r+0x71e>
800046c2:	72 0b       	ld.w	r11,r9[0x0]
800046c4:	14 97       	mov	r7,r10
800046c6:	2f c9       	sub	r9,-4
800046c8:	51 09       	stdsp	sp[0x40],r9
800046ca:	50 1b       	stdsp	sp[0x4],r11
800046cc:	bf 5b       	asr	r11,0x1f
800046ce:	50 0b       	stdsp	sp[0x0],r11
800046d0:	fa ea 00 00 	ld.d	r10,sp[0]
800046d4:	58 0a       	cp.w	r10,0
800046d6:	5c 2b       	cpc	r11
800046d8:	c0 e4       	brge	800046f4 <_vfprintf_r+0x748>
800046da:	30 08       	mov	r8,0
800046dc:	fa ea 00 00 	ld.d	r10,sp[0]
800046e0:	30 09       	mov	r9,0
800046e2:	f0 0a 01 0a 	sub	r10,r8,r10
800046e6:	f2 0b 01 4b 	sbc	r11,r9,r11
800046ea:	32 d8       	mov	r8,45
800046ec:	fa eb 00 00 	st.d	sp[0],r10
800046f0:	fb 68 06 bb 	st.b	sp[1723],r8
800046f4:	30 18       	mov	r8,1
800046f6:	e0 8f 06 fa 	bral	800054ea <_vfprintf_r+0x153e>
800046fa:	50 a7       	stdsp	sp[0x28],r7
800046fc:	50 80       	stdsp	sp[0x20],r0
800046fe:	0c 97       	mov	r7,r6
80004700:	04 94       	mov	r4,r2
80004702:	06 96       	mov	r6,r3
80004704:	02 92       	mov	r2,r1
80004706:	40 93       	lddsp	r3,sp[0x24]
80004708:	10 90       	mov	r0,r8
8000470a:	40 41       	lddsp	r1,sp[0x10]
8000470c:	0e 99       	mov	r9,r7
8000470e:	ed b5 00 03 	bld	r5,0x3
80004712:	c4 11       	brne	80004794 <_vfprintf_r+0x7e8>
80004714:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004718:	40 3a       	lddsp	r10,sp[0xc]
8000471a:	58 0a       	cp.w	r10,0
8000471c:	c1 90       	breq	8000474e <_vfprintf_r+0x7a2>
8000471e:	10 36       	cp.w	r6,r8
80004720:	c6 45       	brlt	800047e8 <_vfprintf_r+0x83c>
80004722:	fa c8 f9 50 	sub	r8,sp,-1712
80004726:	1a d8       	st.w	--sp,r8
80004728:	fa c8 fa b8 	sub	r8,sp,-1352
8000472c:	1a d8       	st.w	--sp,r8
8000472e:	fa c8 fb b4 	sub	r8,sp,-1100
80004732:	0c 9b       	mov	r11,r6
80004734:	1a d8       	st.w	--sp,r8
80004736:	04 9a       	mov	r10,r2
80004738:	fa c8 f9 40 	sub	r8,sp,-1728
8000473c:	fa c9 ff b4 	sub	r9,sp,-76
80004740:	08 9c       	mov	r12,r4
80004742:	fe b0 fa 9f 	rcall	80003c80 <get_arg>
80004746:	2f dd       	sub	sp,-12
80004748:	78 16       	ld.w	r6,r12[0x4]
8000474a:	50 76       	stdsp	sp[0x1c],r6
8000474c:	c4 88       	rjmp	800047dc <_vfprintf_r+0x830>
8000474e:	2f f7       	sub	r7,-1
80004750:	10 39       	cp.w	r9,r8
80004752:	c0 c4       	brge	8000476a <_vfprintf_r+0x7be>
80004754:	fa ce f9 44 	sub	lr,sp,-1724
80004758:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000475c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004760:	50 7c       	stdsp	sp[0x1c],r12
80004762:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004766:	50 56       	stdsp	sp[0x14],r6
80004768:	c6 68       	rjmp	80004834 <_vfprintf_r+0x888>
8000476a:	41 09       	lddsp	r9,sp[0x40]
8000476c:	59 f8       	cp.w	r8,31
8000476e:	e0 89 00 10 	brgt	8000478e <_vfprintf_r+0x7e2>
80004772:	f2 ca ff f8 	sub	r10,r9,-8
80004776:	72 1b       	ld.w	r11,r9[0x4]
80004778:	51 0a       	stdsp	sp[0x40],r10
8000477a:	72 09       	ld.w	r9,r9[0x0]
8000477c:	fa ca f9 44 	sub	r10,sp,-1724
80004780:	50 7b       	stdsp	sp[0x1c],r11
80004782:	50 59       	stdsp	sp[0x14],r9
80004784:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004788:	40 5b       	lddsp	r11,sp[0x14]
8000478a:	40 7a       	lddsp	r10,sp[0x1c]
8000478c:	c4 78       	rjmp	8000481a <_vfprintf_r+0x86e>
8000478e:	72 18       	ld.w	r8,r9[0x4]
80004790:	50 78       	stdsp	sp[0x1c],r8
80004792:	c4 c8       	rjmp	8000482a <_vfprintf_r+0x87e>
80004794:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004798:	40 3e       	lddsp	lr,sp[0xc]
8000479a:	58 0e       	cp.w	lr,0
8000479c:	c2 30       	breq	800047e2 <_vfprintf_r+0x836>
8000479e:	10 36       	cp.w	r6,r8
800047a0:	c0 94       	brge	800047b2 <_vfprintf_r+0x806>
800047a2:	fa cc f9 44 	sub	r12,sp,-1724
800047a6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800047aa:	ec fb fd 8c 	ld.w	r11,r6[-628]
800047ae:	50 7b       	stdsp	sp[0x1c],r11
800047b0:	cd 9b       	rjmp	80004762 <_vfprintf_r+0x7b6>
800047b2:	fa c8 f9 50 	sub	r8,sp,-1712
800047b6:	1a d8       	st.w	--sp,r8
800047b8:	fa c8 fa b8 	sub	r8,sp,-1352
800047bc:	04 9a       	mov	r10,r2
800047be:	1a d8       	st.w	--sp,r8
800047c0:	fa c8 fb b4 	sub	r8,sp,-1100
800047c4:	0c 9b       	mov	r11,r6
800047c6:	1a d8       	st.w	--sp,r8
800047c8:	08 9c       	mov	r12,r4
800047ca:	fa c8 f9 40 	sub	r8,sp,-1728
800047ce:	fa c9 ff b4 	sub	r9,sp,-76
800047d2:	fe b0 fa 57 	rcall	80003c80 <get_arg>
800047d6:	2f dd       	sub	sp,-12
800047d8:	78 1a       	ld.w	r10,r12[0x4]
800047da:	50 7a       	stdsp	sp[0x1c],r10
800047dc:	78 0c       	ld.w	r12,r12[0x0]
800047de:	50 5c       	stdsp	sp[0x14],r12
800047e0:	c2 a8       	rjmp	80004834 <_vfprintf_r+0x888>
800047e2:	2f f7       	sub	r7,-1
800047e4:	10 39       	cp.w	r9,r8
800047e6:	c0 94       	brge	800047f8 <_vfprintf_r+0x84c>
800047e8:	fa c9 f9 44 	sub	r9,sp,-1724
800047ec:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047f0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800047f4:	50 78       	stdsp	sp[0x1c],r8
800047f6:	cb 6b       	rjmp	80004762 <_vfprintf_r+0x7b6>
800047f8:	41 09       	lddsp	r9,sp[0x40]
800047fa:	59 f8       	cp.w	r8,31
800047fc:	e0 89 00 15 	brgt	80004826 <_vfprintf_r+0x87a>
80004800:	f2 ca ff f8 	sub	r10,r9,-8
80004804:	72 16       	ld.w	r6,r9[0x4]
80004806:	72 09       	ld.w	r9,r9[0x0]
80004808:	51 0a       	stdsp	sp[0x40],r10
8000480a:	50 59       	stdsp	sp[0x14],r9
8000480c:	fa ce f9 44 	sub	lr,sp,-1724
80004810:	50 76       	stdsp	sp[0x1c],r6
80004812:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004816:	40 5b       	lddsp	r11,sp[0x14]
80004818:	0c 9a       	mov	r10,r6
8000481a:	f2 eb fd 88 	st.d	r9[-632],r10
8000481e:	2f f8       	sub	r8,-1
80004820:	fb 48 06 b4 	st.w	sp[1716],r8
80004824:	c0 88       	rjmp	80004834 <_vfprintf_r+0x888>
80004826:	72 1c       	ld.w	r12,r9[0x4]
80004828:	50 7c       	stdsp	sp[0x1c],r12
8000482a:	f2 c8 ff f8 	sub	r8,r9,-8
8000482e:	51 08       	stdsp	sp[0x40],r8
80004830:	72 09       	ld.w	r9,r9[0x0]
80004832:	50 59       	stdsp	sp[0x14],r9
80004834:	40 5b       	lddsp	r11,sp[0x14]
80004836:	40 7a       	lddsp	r10,sp[0x1c]
80004838:	e0 a0 1c d6 	rcall	800081e4 <__isinfd>
8000483c:	18 96       	mov	r6,r12
8000483e:	c1 70       	breq	8000486c <_vfprintf_r+0x8c0>
80004840:	30 08       	mov	r8,0
80004842:	30 09       	mov	r9,0
80004844:	40 5b       	lddsp	r11,sp[0x14]
80004846:	40 7a       	lddsp	r10,sp[0x1c]
80004848:	e0 a0 20 66 	rcall	80008914 <__avr32_f64_cmp_lt>
8000484c:	c0 40       	breq	80004854 <_vfprintf_r+0x8a8>
8000484e:	32 d8       	mov	r8,45
80004850:	fb 68 06 bb 	st.b	sp[1723],r8
80004854:	fe c8 b1 b0 	sub	r8,pc,-20048
80004858:	fe c6 b1 b0 	sub	r6,pc,-20048
8000485c:	a7 d5       	cbr	r5,0x7
8000485e:	e0 40 00 47 	cp.w	r0,71
80004862:	f0 06 17 a0 	movle	r6,r8
80004866:	30 32       	mov	r2,3
80004868:	e0 8f 06 ce 	bral	80005604 <_vfprintf_r+0x1658>
8000486c:	40 5b       	lddsp	r11,sp[0x14]
8000486e:	40 7a       	lddsp	r10,sp[0x1c]
80004870:	e0 a0 1c cf 	rcall	8000820e <__isnand>
80004874:	c0 e0       	breq	80004890 <_vfprintf_r+0x8e4>
80004876:	50 26       	stdsp	sp[0x8],r6
80004878:	fe c8 b1 cc 	sub	r8,pc,-20020
8000487c:	fe c6 b1 cc 	sub	r6,pc,-20020
80004880:	a7 d5       	cbr	r5,0x7
80004882:	e0 40 00 47 	cp.w	r0,71
80004886:	f0 06 17 a0 	movle	r6,r8
8000488a:	30 32       	mov	r2,3
8000488c:	e0 8f 06 c2 	bral	80005610 <_vfprintf_r+0x1664>
80004890:	40 2a       	lddsp	r10,sp[0x8]
80004892:	5b fa       	cp.w	r10,-1
80004894:	c0 41       	brne	8000489c <_vfprintf_r+0x8f0>
80004896:	30 69       	mov	r9,6
80004898:	50 29       	stdsp	sp[0x8],r9
8000489a:	c1 18       	rjmp	800048bc <_vfprintf_r+0x910>
8000489c:	e0 40 00 47 	cp.w	r0,71
800048a0:	5f 09       	sreq	r9
800048a2:	e0 40 00 67 	cp.w	r0,103
800048a6:	5f 08       	sreq	r8
800048a8:	f3 e8 10 08 	or	r8,r9,r8
800048ac:	f8 08 18 00 	cp.b	r8,r12
800048b0:	c0 60       	breq	800048bc <_vfprintf_r+0x910>
800048b2:	40 28       	lddsp	r8,sp[0x8]
800048b4:	58 08       	cp.w	r8,0
800048b6:	f9 b8 00 01 	moveq	r8,1
800048ba:	50 28       	stdsp	sp[0x8],r8
800048bc:	40 78       	lddsp	r8,sp[0x1c]
800048be:	40 59       	lddsp	r9,sp[0x14]
800048c0:	fa e9 06 94 	st.d	sp[1684],r8
800048c4:	a9 a5       	sbr	r5,0x8
800048c6:	fa f8 06 94 	ld.w	r8,sp[1684]
800048ca:	58 08       	cp.w	r8,0
800048cc:	c0 65       	brlt	800048d8 <_vfprintf_r+0x92c>
800048ce:	40 5e       	lddsp	lr,sp[0x14]
800048d0:	30 0c       	mov	r12,0
800048d2:	50 6e       	stdsp	sp[0x18],lr
800048d4:	50 9c       	stdsp	sp[0x24],r12
800048d6:	c0 78       	rjmp	800048e4 <_vfprintf_r+0x938>
800048d8:	40 5b       	lddsp	r11,sp[0x14]
800048da:	32 da       	mov	r10,45
800048dc:	ee 1b 80 00 	eorh	r11,0x8000
800048e0:	50 9a       	stdsp	sp[0x24],r10
800048e2:	50 6b       	stdsp	sp[0x18],r11
800048e4:	e0 40 00 46 	cp.w	r0,70
800048e8:	5f 09       	sreq	r9
800048ea:	e0 40 00 66 	cp.w	r0,102
800048ee:	5f 08       	sreq	r8
800048f0:	f3 e8 10 08 	or	r8,r9,r8
800048f4:	50 48       	stdsp	sp[0x10],r8
800048f6:	c0 40       	breq	800048fe <_vfprintf_r+0x952>
800048f8:	40 22       	lddsp	r2,sp[0x8]
800048fa:	30 39       	mov	r9,3
800048fc:	c1 08       	rjmp	8000491c <_vfprintf_r+0x970>
800048fe:	e0 40 00 45 	cp.w	r0,69
80004902:	5f 09       	sreq	r9
80004904:	e0 40 00 65 	cp.w	r0,101
80004908:	5f 08       	sreq	r8
8000490a:	40 22       	lddsp	r2,sp[0x8]
8000490c:	10 49       	or	r9,r8
8000490e:	2f f2       	sub	r2,-1
80004910:	40 46       	lddsp	r6,sp[0x10]
80004912:	ec 09 18 00 	cp.b	r9,r6
80004916:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000491a:	30 29       	mov	r9,2
8000491c:	fa c8 f9 5c 	sub	r8,sp,-1700
80004920:	1a d8       	st.w	--sp,r8
80004922:	fa c8 f9 54 	sub	r8,sp,-1708
80004926:	1a d8       	st.w	--sp,r8
80004928:	fa c8 f9 4c 	sub	r8,sp,-1716
8000492c:	08 9c       	mov	r12,r4
8000492e:	1a d8       	st.w	--sp,r8
80004930:	04 98       	mov	r8,r2
80004932:	40 9b       	lddsp	r11,sp[0x24]
80004934:	40 aa       	lddsp	r10,sp[0x28]
80004936:	e0 a0 0b c3 	rcall	800060bc <_dtoa_r>
8000493a:	e0 40 00 47 	cp.w	r0,71
8000493e:	5f 19       	srne	r9
80004940:	e0 40 00 67 	cp.w	r0,103
80004944:	5f 18       	srne	r8
80004946:	18 96       	mov	r6,r12
80004948:	2f dd       	sub	sp,-12
8000494a:	f3 e8 00 08 	and	r8,r9,r8
8000494e:	c0 41       	brne	80004956 <_vfprintf_r+0x9aa>
80004950:	ed b5 00 00 	bld	r5,0x0
80004954:	c3 01       	brne	800049b4 <_vfprintf_r+0xa08>
80004956:	ec 02 00 0e 	add	lr,r6,r2
8000495a:	50 3e       	stdsp	sp[0xc],lr
8000495c:	40 4c       	lddsp	r12,sp[0x10]
8000495e:	58 0c       	cp.w	r12,0
80004960:	c1 50       	breq	8000498a <_vfprintf_r+0x9de>
80004962:	0d 89       	ld.ub	r9,r6[0x0]
80004964:	33 08       	mov	r8,48
80004966:	f0 09 18 00 	cp.b	r9,r8
8000496a:	c0 b1       	brne	80004980 <_vfprintf_r+0x9d4>
8000496c:	30 08       	mov	r8,0
8000496e:	30 09       	mov	r9,0
80004970:	40 6b       	lddsp	r11,sp[0x18]
80004972:	40 7a       	lddsp	r10,sp[0x1c]
80004974:	e0 a0 1f 89 	rcall	80008886 <__avr32_f64_cmp_eq>
80004978:	fb b2 00 01 	rsubeq	r2,1
8000497c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004980:	40 3b       	lddsp	r11,sp[0xc]
80004982:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004986:	10 0b       	add	r11,r8
80004988:	50 3b       	stdsp	sp[0xc],r11
8000498a:	40 6b       	lddsp	r11,sp[0x18]
8000498c:	30 08       	mov	r8,0
8000498e:	30 09       	mov	r9,0
80004990:	40 7a       	lddsp	r10,sp[0x1c]
80004992:	e0 a0 1f 7a 	rcall	80008886 <__avr32_f64_cmp_eq>
80004996:	c0 90       	breq	800049a8 <_vfprintf_r+0x9fc>
80004998:	40 3a       	lddsp	r10,sp[0xc]
8000499a:	fb 4a 06 a4 	st.w	sp[1700],r10
8000499e:	c0 58       	rjmp	800049a8 <_vfprintf_r+0x9fc>
800049a0:	10 c9       	st.b	r8++,r9
800049a2:	fb 48 06 a4 	st.w	sp[1700],r8
800049a6:	c0 28       	rjmp	800049aa <_vfprintf_r+0x9fe>
800049a8:	33 09       	mov	r9,48
800049aa:	fa f8 06 a4 	ld.w	r8,sp[1700]
800049ae:	40 3e       	lddsp	lr,sp[0xc]
800049b0:	1c 38       	cp.w	r8,lr
800049b2:	cf 73       	brcs	800049a0 <_vfprintf_r+0x9f4>
800049b4:	e0 40 00 47 	cp.w	r0,71
800049b8:	5f 09       	sreq	r9
800049ba:	e0 40 00 67 	cp.w	r0,103
800049be:	5f 08       	sreq	r8
800049c0:	f3 e8 10 08 	or	r8,r9,r8
800049c4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800049c8:	0c 19       	sub	r9,r6
800049ca:	50 69       	stdsp	sp[0x18],r9
800049cc:	58 08       	cp.w	r8,0
800049ce:	c0 b0       	breq	800049e4 <_vfprintf_r+0xa38>
800049d0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800049d4:	5b d8       	cp.w	r8,-3
800049d6:	c0 55       	brlt	800049e0 <_vfprintf_r+0xa34>
800049d8:	40 2c       	lddsp	r12,sp[0x8]
800049da:	18 38       	cp.w	r8,r12
800049dc:	e0 8a 00 6a 	brle	80004ab0 <_vfprintf_r+0xb04>
800049e0:	20 20       	sub	r0,2
800049e2:	c0 58       	rjmp	800049ec <_vfprintf_r+0xa40>
800049e4:	e0 40 00 65 	cp.w	r0,101
800049e8:	e0 89 00 46 	brgt	80004a74 <_vfprintf_r+0xac8>
800049ec:	fa fb 06 ac 	ld.w	r11,sp[1708]
800049f0:	fb 60 06 9c 	st.b	sp[1692],r0
800049f4:	20 1b       	sub	r11,1
800049f6:	fb 4b 06 ac 	st.w	sp[1708],r11
800049fa:	c0 47       	brpl	80004a02 <_vfprintf_r+0xa56>
800049fc:	5c 3b       	neg	r11
800049fe:	32 d8       	mov	r8,45
80004a00:	c0 28       	rjmp	80004a04 <_vfprintf_r+0xa58>
80004a02:	32 b8       	mov	r8,43
80004a04:	fb 68 06 9d 	st.b	sp[1693],r8
80004a08:	58 9b       	cp.w	r11,9
80004a0a:	e0 8a 00 1d 	brle	80004a44 <_vfprintf_r+0xa98>
80004a0e:	fa c9 fa 35 	sub	r9,sp,-1483
80004a12:	30 aa       	mov	r10,10
80004a14:	12 98       	mov	r8,r9
80004a16:	0e 9c       	mov	r12,r7
80004a18:	0c 92       	mov	r2,r6
80004a1a:	f6 0a 0c 06 	divs	r6,r11,r10
80004a1e:	0e 9b       	mov	r11,r7
80004a20:	2d 0b       	sub	r11,-48
80004a22:	10 fb       	st.b	--r8,r11
80004a24:	0c 9b       	mov	r11,r6
80004a26:	58 96       	cp.w	r6,9
80004a28:	fe 99 ff f9 	brgt	80004a1a <_vfprintf_r+0xa6e>
80004a2c:	2d 0b       	sub	r11,-48
80004a2e:	18 97       	mov	r7,r12
80004a30:	04 96       	mov	r6,r2
80004a32:	10 fb       	st.b	--r8,r11
80004a34:	fa ca f9 62 	sub	r10,sp,-1694
80004a38:	c0 38       	rjmp	80004a3e <_vfprintf_r+0xa92>
80004a3a:	11 3b       	ld.ub	r11,r8++
80004a3c:	14 cb       	st.b	r10++,r11
80004a3e:	12 38       	cp.w	r8,r9
80004a40:	cf d3       	brcs	80004a3a <_vfprintf_r+0xa8e>
80004a42:	c0 98       	rjmp	80004a54 <_vfprintf_r+0xaa8>
80004a44:	2d 0b       	sub	r11,-48
80004a46:	33 08       	mov	r8,48
80004a48:	fb 6b 06 9f 	st.b	sp[1695],r11
80004a4c:	fb 68 06 9e 	st.b	sp[1694],r8
80004a50:	fa ca f9 60 	sub	r10,sp,-1696
80004a54:	fa c8 f9 64 	sub	r8,sp,-1692
80004a58:	f4 08 01 08 	sub	r8,r10,r8
80004a5c:	50 e8       	stdsp	sp[0x38],r8
80004a5e:	10 92       	mov	r2,r8
80004a60:	40 6b       	lddsp	r11,sp[0x18]
80004a62:	16 02       	add	r2,r11
80004a64:	58 1b       	cp.w	r11,1
80004a66:	e0 89 00 05 	brgt	80004a70 <_vfprintf_r+0xac4>
80004a6a:	ed b5 00 00 	bld	r5,0x0
80004a6e:	c3 51       	brne	80004ad8 <_vfprintf_r+0xb2c>
80004a70:	2f f2       	sub	r2,-1
80004a72:	c3 38       	rjmp	80004ad8 <_vfprintf_r+0xb2c>
80004a74:	e0 40 00 66 	cp.w	r0,102
80004a78:	c1 c1       	brne	80004ab0 <_vfprintf_r+0xb04>
80004a7a:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004a7e:	58 02       	cp.w	r2,0
80004a80:	e0 8a 00 0c 	brle	80004a98 <_vfprintf_r+0xaec>
80004a84:	40 2a       	lddsp	r10,sp[0x8]
80004a86:	58 0a       	cp.w	r10,0
80004a88:	c0 41       	brne	80004a90 <_vfprintf_r+0xae4>
80004a8a:	ed b5 00 00 	bld	r5,0x0
80004a8e:	c2 51       	brne	80004ad8 <_vfprintf_r+0xb2c>
80004a90:	2f f2       	sub	r2,-1
80004a92:	40 29       	lddsp	r9,sp[0x8]
80004a94:	12 02       	add	r2,r9
80004a96:	c0 b8       	rjmp	80004aac <_vfprintf_r+0xb00>
80004a98:	40 28       	lddsp	r8,sp[0x8]
80004a9a:	58 08       	cp.w	r8,0
80004a9c:	c0 61       	brne	80004aa8 <_vfprintf_r+0xafc>
80004a9e:	ed b5 00 00 	bld	r5,0x0
80004aa2:	c0 30       	breq	80004aa8 <_vfprintf_r+0xafc>
80004aa4:	30 12       	mov	r2,1
80004aa6:	c1 98       	rjmp	80004ad8 <_vfprintf_r+0xb2c>
80004aa8:	40 22       	lddsp	r2,sp[0x8]
80004aaa:	2f e2       	sub	r2,-2
80004aac:	36 60       	mov	r0,102
80004aae:	c1 58       	rjmp	80004ad8 <_vfprintf_r+0xb2c>
80004ab0:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004ab4:	40 6e       	lddsp	lr,sp[0x18]
80004ab6:	1c 32       	cp.w	r2,lr
80004ab8:	c0 65       	brlt	80004ac4 <_vfprintf_r+0xb18>
80004aba:	ed b5 00 00 	bld	r5,0x0
80004abe:	f7 b2 00 ff 	subeq	r2,-1
80004ac2:	c0 a8       	rjmp	80004ad6 <_vfprintf_r+0xb2a>
80004ac4:	e4 08 11 02 	rsub	r8,r2,2
80004ac8:	40 6c       	lddsp	r12,sp[0x18]
80004aca:	58 02       	cp.w	r2,0
80004acc:	f0 02 17 a0 	movle	r2,r8
80004ad0:	f9 b2 09 01 	movgt	r2,1
80004ad4:	18 02       	add	r2,r12
80004ad6:	36 70       	mov	r0,103
80004ad8:	40 9b       	lddsp	r11,sp[0x24]
80004ada:	58 0b       	cp.w	r11,0
80004adc:	e0 80 05 94 	breq	80005604 <_vfprintf_r+0x1658>
80004ae0:	32 d8       	mov	r8,45
80004ae2:	fb 68 06 bb 	st.b	sp[1723],r8
80004ae6:	e0 8f 05 93 	bral	8000560c <_vfprintf_r+0x1660>
80004aea:	50 a7       	stdsp	sp[0x28],r7
80004aec:	04 94       	mov	r4,r2
80004aee:	0c 97       	mov	r7,r6
80004af0:	02 92       	mov	r2,r1
80004af2:	06 96       	mov	r6,r3
80004af4:	40 41       	lddsp	r1,sp[0x10]
80004af6:	40 93       	lddsp	r3,sp[0x24]
80004af8:	0e 99       	mov	r9,r7
80004afa:	ed b5 00 05 	bld	r5,0x5
80004afe:	c4 81       	brne	80004b8e <_vfprintf_r+0xbe2>
80004b00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b04:	40 3e       	lddsp	lr,sp[0xc]
80004b06:	58 0e       	cp.w	lr,0
80004b08:	c1 d0       	breq	80004b42 <_vfprintf_r+0xb96>
80004b0a:	10 36       	cp.w	r6,r8
80004b0c:	c0 64       	brge	80004b18 <_vfprintf_r+0xb6c>
80004b0e:	fa cc f9 44 	sub	r12,sp,-1724
80004b12:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b16:	c1 d8       	rjmp	80004b50 <_vfprintf_r+0xba4>
80004b18:	fa c8 f9 50 	sub	r8,sp,-1712
80004b1c:	1a d8       	st.w	--sp,r8
80004b1e:	fa c8 fa b8 	sub	r8,sp,-1352
80004b22:	04 9a       	mov	r10,r2
80004b24:	1a d8       	st.w	--sp,r8
80004b26:	fa c8 fb b4 	sub	r8,sp,-1100
80004b2a:	0c 9b       	mov	r11,r6
80004b2c:	1a d8       	st.w	--sp,r8
80004b2e:	08 9c       	mov	r12,r4
80004b30:	fa c8 f9 40 	sub	r8,sp,-1728
80004b34:	fa c9 ff b4 	sub	r9,sp,-76
80004b38:	fe b0 f8 a4 	rcall	80003c80 <get_arg>
80004b3c:	2f dd       	sub	sp,-12
80004b3e:	78 0a       	ld.w	r10,r12[0x0]
80004b40:	c2 08       	rjmp	80004b80 <_vfprintf_r+0xbd4>
80004b42:	2f f7       	sub	r7,-1
80004b44:	10 39       	cp.w	r9,r8
80004b46:	c0 84       	brge	80004b56 <_vfprintf_r+0xbaa>
80004b48:	fa cb f9 44 	sub	r11,sp,-1724
80004b4c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b50:	ec fa fd 88 	ld.w	r10,r6[-632]
80004b54:	c1 68       	rjmp	80004b80 <_vfprintf_r+0xbd4>
80004b56:	41 09       	lddsp	r9,sp[0x40]
80004b58:	59 f8       	cp.w	r8,31
80004b5a:	e0 89 00 10 	brgt	80004b7a <_vfprintf_r+0xbce>
80004b5e:	f2 ca ff fc 	sub	r10,r9,-4
80004b62:	51 0a       	stdsp	sp[0x40],r10
80004b64:	fa c6 f9 44 	sub	r6,sp,-1724
80004b68:	72 0a       	ld.w	r10,r9[0x0]
80004b6a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b6e:	f3 4a fd 88 	st.w	r9[-632],r10
80004b72:	2f f8       	sub	r8,-1
80004b74:	fb 48 06 b4 	st.w	sp[1716],r8
80004b78:	c0 48       	rjmp	80004b80 <_vfprintf_r+0xbd4>
80004b7a:	72 0a       	ld.w	r10,r9[0x0]
80004b7c:	2f c9       	sub	r9,-4
80004b7e:	51 09       	stdsp	sp[0x40],r9
80004b80:	40 be       	lddsp	lr,sp[0x2c]
80004b82:	1c 98       	mov	r8,lr
80004b84:	95 1e       	st.w	r10[0x4],lr
80004b86:	bf 58       	asr	r8,0x1f
80004b88:	95 08       	st.w	r10[0x0],r8
80004b8a:	fe 9f fa 9f 	bral	800040c8 <_vfprintf_r+0x11c>
80004b8e:	ed b5 00 04 	bld	r5,0x4
80004b92:	c4 80       	breq	80004c22 <_vfprintf_r+0xc76>
80004b94:	e2 15 00 40 	andl	r5,0x40,COH
80004b98:	c4 50       	breq	80004c22 <_vfprintf_r+0xc76>
80004b9a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b9e:	40 3c       	lddsp	r12,sp[0xc]
80004ba0:	58 0c       	cp.w	r12,0
80004ba2:	c1 d0       	breq	80004bdc <_vfprintf_r+0xc30>
80004ba4:	10 36       	cp.w	r6,r8
80004ba6:	c0 64       	brge	80004bb2 <_vfprintf_r+0xc06>
80004ba8:	fa cb f9 44 	sub	r11,sp,-1724
80004bac:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bb0:	c1 d8       	rjmp	80004bea <_vfprintf_r+0xc3e>
80004bb2:	fa c8 f9 50 	sub	r8,sp,-1712
80004bb6:	1a d8       	st.w	--sp,r8
80004bb8:	fa c8 fa b8 	sub	r8,sp,-1352
80004bbc:	04 9a       	mov	r10,r2
80004bbe:	1a d8       	st.w	--sp,r8
80004bc0:	fa c8 fb b4 	sub	r8,sp,-1100
80004bc4:	0c 9b       	mov	r11,r6
80004bc6:	1a d8       	st.w	--sp,r8
80004bc8:	08 9c       	mov	r12,r4
80004bca:	fa c8 f9 40 	sub	r8,sp,-1728
80004bce:	fa c9 ff b4 	sub	r9,sp,-76
80004bd2:	fe b0 f8 57 	rcall	80003c80 <get_arg>
80004bd6:	2f dd       	sub	sp,-12
80004bd8:	78 0a       	ld.w	r10,r12[0x0]
80004bda:	c2 08       	rjmp	80004c1a <_vfprintf_r+0xc6e>
80004bdc:	2f f7       	sub	r7,-1
80004bde:	10 39       	cp.w	r9,r8
80004be0:	c0 84       	brge	80004bf0 <_vfprintf_r+0xc44>
80004be2:	fa ca f9 44 	sub	r10,sp,-1724
80004be6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004bea:	ec fa fd 88 	ld.w	r10,r6[-632]
80004bee:	c1 68       	rjmp	80004c1a <_vfprintf_r+0xc6e>
80004bf0:	41 09       	lddsp	r9,sp[0x40]
80004bf2:	59 f8       	cp.w	r8,31
80004bf4:	e0 89 00 10 	brgt	80004c14 <_vfprintf_r+0xc68>
80004bf8:	f2 ca ff fc 	sub	r10,r9,-4
80004bfc:	51 0a       	stdsp	sp[0x40],r10
80004bfe:	fa c6 f9 44 	sub	r6,sp,-1724
80004c02:	72 0a       	ld.w	r10,r9[0x0]
80004c04:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c08:	f3 4a fd 88 	st.w	r9[-632],r10
80004c0c:	2f f8       	sub	r8,-1
80004c0e:	fb 48 06 b4 	st.w	sp[1716],r8
80004c12:	c0 48       	rjmp	80004c1a <_vfprintf_r+0xc6e>
80004c14:	72 0a       	ld.w	r10,r9[0x0]
80004c16:	2f c9       	sub	r9,-4
80004c18:	51 09       	stdsp	sp[0x40],r9
80004c1a:	40 be       	lddsp	lr,sp[0x2c]
80004c1c:	b4 0e       	st.h	r10[0x0],lr
80004c1e:	fe 9f fa 55 	bral	800040c8 <_vfprintf_r+0x11c>
80004c22:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c26:	40 3c       	lddsp	r12,sp[0xc]
80004c28:	58 0c       	cp.w	r12,0
80004c2a:	c1 d0       	breq	80004c64 <_vfprintf_r+0xcb8>
80004c2c:	10 36       	cp.w	r6,r8
80004c2e:	c0 64       	brge	80004c3a <_vfprintf_r+0xc8e>
80004c30:	fa cb f9 44 	sub	r11,sp,-1724
80004c34:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c38:	c1 d8       	rjmp	80004c72 <_vfprintf_r+0xcc6>
80004c3a:	fa c8 f9 50 	sub	r8,sp,-1712
80004c3e:	1a d8       	st.w	--sp,r8
80004c40:	fa c8 fa b8 	sub	r8,sp,-1352
80004c44:	04 9a       	mov	r10,r2
80004c46:	1a d8       	st.w	--sp,r8
80004c48:	fa c8 fb b4 	sub	r8,sp,-1100
80004c4c:	0c 9b       	mov	r11,r6
80004c4e:	1a d8       	st.w	--sp,r8
80004c50:	08 9c       	mov	r12,r4
80004c52:	fa c8 f9 40 	sub	r8,sp,-1728
80004c56:	fa c9 ff b4 	sub	r9,sp,-76
80004c5a:	fe b0 f8 13 	rcall	80003c80 <get_arg>
80004c5e:	2f dd       	sub	sp,-12
80004c60:	78 0a       	ld.w	r10,r12[0x0]
80004c62:	c2 08       	rjmp	80004ca2 <_vfprintf_r+0xcf6>
80004c64:	2f f7       	sub	r7,-1
80004c66:	10 39       	cp.w	r9,r8
80004c68:	c0 84       	brge	80004c78 <_vfprintf_r+0xccc>
80004c6a:	fa ca f9 44 	sub	r10,sp,-1724
80004c6e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004c72:	ec fa fd 88 	ld.w	r10,r6[-632]
80004c76:	c1 68       	rjmp	80004ca2 <_vfprintf_r+0xcf6>
80004c78:	41 09       	lddsp	r9,sp[0x40]
80004c7a:	59 f8       	cp.w	r8,31
80004c7c:	e0 89 00 10 	brgt	80004c9c <_vfprintf_r+0xcf0>
80004c80:	f2 ca ff fc 	sub	r10,r9,-4
80004c84:	51 0a       	stdsp	sp[0x40],r10
80004c86:	fa c6 f9 44 	sub	r6,sp,-1724
80004c8a:	72 0a       	ld.w	r10,r9[0x0]
80004c8c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c90:	f3 4a fd 88 	st.w	r9[-632],r10
80004c94:	2f f8       	sub	r8,-1
80004c96:	fb 48 06 b4 	st.w	sp[1716],r8
80004c9a:	c0 48       	rjmp	80004ca2 <_vfprintf_r+0xcf6>
80004c9c:	72 0a       	ld.w	r10,r9[0x0]
80004c9e:	2f c9       	sub	r9,-4
80004ca0:	51 09       	stdsp	sp[0x40],r9
80004ca2:	40 be       	lddsp	lr,sp[0x2c]
80004ca4:	95 0e       	st.w	r10[0x0],lr
80004ca6:	fe 9f fa 11 	bral	800040c8 <_vfprintf_r+0x11c>
80004caa:	50 a7       	stdsp	sp[0x28],r7
80004cac:	50 80       	stdsp	sp[0x20],r0
80004cae:	0c 97       	mov	r7,r6
80004cb0:	04 94       	mov	r4,r2
80004cb2:	06 96       	mov	r6,r3
80004cb4:	02 92       	mov	r2,r1
80004cb6:	40 93       	lddsp	r3,sp[0x24]
80004cb8:	10 90       	mov	r0,r8
80004cba:	40 41       	lddsp	r1,sp[0x10]
80004cbc:	a5 a5       	sbr	r5,0x4
80004cbe:	c0 a8       	rjmp	80004cd2 <_vfprintf_r+0xd26>
80004cc0:	50 a7       	stdsp	sp[0x28],r7
80004cc2:	50 80       	stdsp	sp[0x20],r0
80004cc4:	0c 97       	mov	r7,r6
80004cc6:	04 94       	mov	r4,r2
80004cc8:	06 96       	mov	r6,r3
80004cca:	02 92       	mov	r2,r1
80004ccc:	40 93       	lddsp	r3,sp[0x24]
80004cce:	10 90       	mov	r0,r8
80004cd0:	40 41       	lddsp	r1,sp[0x10]
80004cd2:	ed b5 00 05 	bld	r5,0x5
80004cd6:	c5 d1       	brne	80004d90 <_vfprintf_r+0xde4>
80004cd8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cdc:	40 3c       	lddsp	r12,sp[0xc]
80004cde:	58 0c       	cp.w	r12,0
80004ce0:	c2 60       	breq	80004d2c <_vfprintf_r+0xd80>
80004ce2:	10 36       	cp.w	r6,r8
80004ce4:	c0 a4       	brge	80004cf8 <_vfprintf_r+0xd4c>
80004ce6:	fa cb f9 44 	sub	r11,sp,-1724
80004cea:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004cee:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004cf2:	fa e9 00 00 	st.d	sp[0],r8
80004cf6:	c1 88       	rjmp	80004d26 <_vfprintf_r+0xd7a>
80004cf8:	fa c8 f9 50 	sub	r8,sp,-1712
80004cfc:	1a d8       	st.w	--sp,r8
80004cfe:	fa c8 fa b8 	sub	r8,sp,-1352
80004d02:	04 9a       	mov	r10,r2
80004d04:	1a d8       	st.w	--sp,r8
80004d06:	0c 9b       	mov	r11,r6
80004d08:	fa c8 fb b4 	sub	r8,sp,-1100
80004d0c:	08 9c       	mov	r12,r4
80004d0e:	1a d8       	st.w	--sp,r8
80004d10:	fa c8 f9 40 	sub	r8,sp,-1728
80004d14:	fa c9 ff b4 	sub	r9,sp,-76
80004d18:	fe b0 f7 b4 	rcall	80003c80 <get_arg>
80004d1c:	2f dd       	sub	sp,-12
80004d1e:	f8 ea 00 00 	ld.d	r10,r12[0]
80004d22:	fa eb 00 00 	st.d	sp[0],r10
80004d26:	30 08       	mov	r8,0
80004d28:	e0 8f 03 de 	bral	800054e4 <_vfprintf_r+0x1538>
80004d2c:	ee ca ff ff 	sub	r10,r7,-1
80004d30:	10 37       	cp.w	r7,r8
80004d32:	c0 b4       	brge	80004d48 <_vfprintf_r+0xd9c>
80004d34:	fa c9 f9 44 	sub	r9,sp,-1724
80004d38:	14 97       	mov	r7,r10
80004d3a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d3e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004d42:	fa eb 00 00 	st.d	sp[0],r10
80004d46:	c1 88       	rjmp	80004d76 <_vfprintf_r+0xdca>
80004d48:	41 09       	lddsp	r9,sp[0x40]
80004d4a:	59 f8       	cp.w	r8,31
80004d4c:	e0 89 00 18 	brgt	80004d7c <_vfprintf_r+0xdd0>
80004d50:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d54:	f2 cb ff f8 	sub	r11,r9,-8
80004d58:	fa e7 00 00 	st.d	sp[0],r6
80004d5c:	51 0b       	stdsp	sp[0x40],r11
80004d5e:	fa c6 f9 44 	sub	r6,sp,-1724
80004d62:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d66:	fa e6 00 00 	ld.d	r6,sp[0]
80004d6a:	f2 e7 fd 88 	st.d	r9[-632],r6
80004d6e:	2f f8       	sub	r8,-1
80004d70:	14 97       	mov	r7,r10
80004d72:	fb 48 06 b4 	st.w	sp[1716],r8
80004d76:	40 38       	lddsp	r8,sp[0xc]
80004d78:	e0 8f 03 b6 	bral	800054e4 <_vfprintf_r+0x1538>
80004d7c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d80:	40 38       	lddsp	r8,sp[0xc]
80004d82:	fa e7 00 00 	st.d	sp[0],r6
80004d86:	2f 89       	sub	r9,-8
80004d88:	14 97       	mov	r7,r10
80004d8a:	51 09       	stdsp	sp[0x40],r9
80004d8c:	e0 8f 03 ac 	bral	800054e4 <_vfprintf_r+0x1538>
80004d90:	ed b5 00 04 	bld	r5,0x4
80004d94:	c1 61       	brne	80004dc0 <_vfprintf_r+0xe14>
80004d96:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d9a:	40 3e       	lddsp	lr,sp[0xc]
80004d9c:	58 0e       	cp.w	lr,0
80004d9e:	c0 80       	breq	80004dae <_vfprintf_r+0xe02>
80004da0:	10 36       	cp.w	r6,r8
80004da2:	c6 74       	brge	80004e70 <_vfprintf_r+0xec4>
80004da4:	fa cc f9 44 	sub	r12,sp,-1724
80004da8:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004dac:	c8 08       	rjmp	80004eac <_vfprintf_r+0xf00>
80004dae:	ee ca ff ff 	sub	r10,r7,-1
80004db2:	10 37       	cp.w	r7,r8
80004db4:	c7 f4       	brge	80004eb2 <_vfprintf_r+0xf06>
80004db6:	fa cb f9 44 	sub	r11,sp,-1724
80004dba:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004dbe:	c7 68       	rjmp	80004eaa <_vfprintf_r+0xefe>
80004dc0:	ed b5 00 06 	bld	r5,0x6
80004dc4:	c4 a1       	brne	80004e58 <_vfprintf_r+0xeac>
80004dc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dca:	40 3c       	lddsp	r12,sp[0xc]
80004dcc:	58 0c       	cp.w	r12,0
80004dce:	c1 d0       	breq	80004e08 <_vfprintf_r+0xe5c>
80004dd0:	10 36       	cp.w	r6,r8
80004dd2:	c0 64       	brge	80004dde <_vfprintf_r+0xe32>
80004dd4:	fa cb f9 44 	sub	r11,sp,-1724
80004dd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ddc:	c1 f8       	rjmp	80004e1a <_vfprintf_r+0xe6e>
80004dde:	fa c8 f9 50 	sub	r8,sp,-1712
80004de2:	1a d8       	st.w	--sp,r8
80004de4:	fa c8 fa b8 	sub	r8,sp,-1352
80004de8:	1a d8       	st.w	--sp,r8
80004dea:	fa c8 fb b4 	sub	r8,sp,-1100
80004dee:	1a d8       	st.w	--sp,r8
80004df0:	fa c8 f9 40 	sub	r8,sp,-1728
80004df4:	fa c9 ff b4 	sub	r9,sp,-76
80004df8:	04 9a       	mov	r10,r2
80004dfa:	0c 9b       	mov	r11,r6
80004dfc:	08 9c       	mov	r12,r4
80004dfe:	fe b0 f7 41 	rcall	80003c80 <get_arg>
80004e02:	2f dd       	sub	sp,-12
80004e04:	98 18       	ld.sh	r8,r12[0x2]
80004e06:	c2 68       	rjmp	80004e52 <_vfprintf_r+0xea6>
80004e08:	ee ca ff ff 	sub	r10,r7,-1
80004e0c:	10 37       	cp.w	r7,r8
80004e0e:	c0 94       	brge	80004e20 <_vfprintf_r+0xe74>
80004e10:	fa c9 f9 44 	sub	r9,sp,-1724
80004e14:	14 97       	mov	r7,r10
80004e16:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e1a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004e1e:	c1 a8       	rjmp	80004e52 <_vfprintf_r+0xea6>
80004e20:	41 09       	lddsp	r9,sp[0x40]
80004e22:	59 f8       	cp.w	r8,31
80004e24:	e0 89 00 13 	brgt	80004e4a <_vfprintf_r+0xe9e>
80004e28:	f2 cb ff fc 	sub	r11,r9,-4
80004e2c:	51 0b       	stdsp	sp[0x40],r11
80004e2e:	72 09       	ld.w	r9,r9[0x0]
80004e30:	fa c6 f9 44 	sub	r6,sp,-1724
80004e34:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004e38:	2f f8       	sub	r8,-1
80004e3a:	f7 49 fd 88 	st.w	r11[-632],r9
80004e3e:	fb 48 06 b4 	st.w	sp[1716],r8
80004e42:	14 97       	mov	r7,r10
80004e44:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004e48:	c0 58       	rjmp	80004e52 <_vfprintf_r+0xea6>
80004e4a:	92 18       	ld.sh	r8,r9[0x2]
80004e4c:	14 97       	mov	r7,r10
80004e4e:	2f c9       	sub	r9,-4
80004e50:	51 09       	stdsp	sp[0x40],r9
80004e52:	5c 78       	castu.h	r8
80004e54:	50 18       	stdsp	sp[0x4],r8
80004e56:	c4 68       	rjmp	80004ee2 <_vfprintf_r+0xf36>
80004e58:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e5c:	40 3c       	lddsp	r12,sp[0xc]
80004e5e:	58 0c       	cp.w	r12,0
80004e60:	c1 d0       	breq	80004e9a <_vfprintf_r+0xeee>
80004e62:	10 36       	cp.w	r6,r8
80004e64:	c0 64       	brge	80004e70 <_vfprintf_r+0xec4>
80004e66:	fa cb f9 44 	sub	r11,sp,-1724
80004e6a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e6e:	c1 f8       	rjmp	80004eac <_vfprintf_r+0xf00>
80004e70:	fa c8 f9 50 	sub	r8,sp,-1712
80004e74:	1a d8       	st.w	--sp,r8
80004e76:	fa c8 fa b8 	sub	r8,sp,-1352
80004e7a:	0c 9b       	mov	r11,r6
80004e7c:	1a d8       	st.w	--sp,r8
80004e7e:	fa c8 fb b4 	sub	r8,sp,-1100
80004e82:	04 9a       	mov	r10,r2
80004e84:	1a d8       	st.w	--sp,r8
80004e86:	08 9c       	mov	r12,r4
80004e88:	fa c8 f9 40 	sub	r8,sp,-1728
80004e8c:	fa c9 ff b4 	sub	r9,sp,-76
80004e90:	fe b0 f6 f8 	rcall	80003c80 <get_arg>
80004e94:	2f dd       	sub	sp,-12
80004e96:	78 0b       	ld.w	r11,r12[0x0]
80004e98:	c2 48       	rjmp	80004ee0 <_vfprintf_r+0xf34>
80004e9a:	ee ca ff ff 	sub	r10,r7,-1
80004e9e:	10 37       	cp.w	r7,r8
80004ea0:	c0 94       	brge	80004eb2 <_vfprintf_r+0xf06>
80004ea2:	fa c9 f9 44 	sub	r9,sp,-1724
80004ea6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004eaa:	14 97       	mov	r7,r10
80004eac:	ec fb fd 88 	ld.w	r11,r6[-632]
80004eb0:	c1 88       	rjmp	80004ee0 <_vfprintf_r+0xf34>
80004eb2:	41 09       	lddsp	r9,sp[0x40]
80004eb4:	59 f8       	cp.w	r8,31
80004eb6:	e0 89 00 11 	brgt	80004ed8 <_vfprintf_r+0xf2c>
80004eba:	f2 cb ff fc 	sub	r11,r9,-4
80004ebe:	51 0b       	stdsp	sp[0x40],r11
80004ec0:	fa c6 f9 44 	sub	r6,sp,-1724
80004ec4:	72 0b       	ld.w	r11,r9[0x0]
80004ec6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004eca:	f3 4b fd 88 	st.w	r9[-632],r11
80004ece:	2f f8       	sub	r8,-1
80004ed0:	14 97       	mov	r7,r10
80004ed2:	fb 48 06 b4 	st.w	sp[1716],r8
80004ed6:	c0 58       	rjmp	80004ee0 <_vfprintf_r+0xf34>
80004ed8:	72 0b       	ld.w	r11,r9[0x0]
80004eda:	14 97       	mov	r7,r10
80004edc:	2f c9       	sub	r9,-4
80004ede:	51 09       	stdsp	sp[0x40],r9
80004ee0:	50 1b       	stdsp	sp[0x4],r11
80004ee2:	30 0e       	mov	lr,0
80004ee4:	50 0e       	stdsp	sp[0x0],lr
80004ee6:	1c 98       	mov	r8,lr
80004ee8:	e0 8f 02 fe 	bral	800054e4 <_vfprintf_r+0x1538>
80004eec:	50 a7       	stdsp	sp[0x28],r7
80004eee:	50 80       	stdsp	sp[0x20],r0
80004ef0:	0c 97       	mov	r7,r6
80004ef2:	04 94       	mov	r4,r2
80004ef4:	06 96       	mov	r6,r3
80004ef6:	02 92       	mov	r2,r1
80004ef8:	40 93       	lddsp	r3,sp[0x24]
80004efa:	40 41       	lddsp	r1,sp[0x10]
80004efc:	0e 99       	mov	r9,r7
80004efe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f02:	40 3c       	lddsp	r12,sp[0xc]
80004f04:	58 0c       	cp.w	r12,0
80004f06:	c1 d0       	breq	80004f40 <_vfprintf_r+0xf94>
80004f08:	10 36       	cp.w	r6,r8
80004f0a:	c0 64       	brge	80004f16 <_vfprintf_r+0xf6a>
80004f0c:	fa cb f9 44 	sub	r11,sp,-1724
80004f10:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f14:	c1 d8       	rjmp	80004f4e <_vfprintf_r+0xfa2>
80004f16:	fa c8 f9 50 	sub	r8,sp,-1712
80004f1a:	1a d8       	st.w	--sp,r8
80004f1c:	fa c8 fa b8 	sub	r8,sp,-1352
80004f20:	1a d8       	st.w	--sp,r8
80004f22:	fa c8 fb b4 	sub	r8,sp,-1100
80004f26:	1a d8       	st.w	--sp,r8
80004f28:	fa c9 ff b4 	sub	r9,sp,-76
80004f2c:	fa c8 f9 40 	sub	r8,sp,-1728
80004f30:	04 9a       	mov	r10,r2
80004f32:	0c 9b       	mov	r11,r6
80004f34:	08 9c       	mov	r12,r4
80004f36:	fe b0 f6 a5 	rcall	80003c80 <get_arg>
80004f3a:	2f dd       	sub	sp,-12
80004f3c:	78 09       	ld.w	r9,r12[0x0]
80004f3e:	c2 18       	rjmp	80004f80 <_vfprintf_r+0xfd4>
80004f40:	2f f7       	sub	r7,-1
80004f42:	10 39       	cp.w	r9,r8
80004f44:	c0 84       	brge	80004f54 <_vfprintf_r+0xfa8>
80004f46:	fa ca f9 44 	sub	r10,sp,-1724
80004f4a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004f4e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004f52:	c1 78       	rjmp	80004f80 <_vfprintf_r+0xfd4>
80004f54:	41 09       	lddsp	r9,sp[0x40]
80004f56:	59 f8       	cp.w	r8,31
80004f58:	e0 89 00 10 	brgt	80004f78 <_vfprintf_r+0xfcc>
80004f5c:	f2 ca ff fc 	sub	r10,r9,-4
80004f60:	51 0a       	stdsp	sp[0x40],r10
80004f62:	fa c6 f9 44 	sub	r6,sp,-1724
80004f66:	72 09       	ld.w	r9,r9[0x0]
80004f68:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004f6c:	f5 49 fd 88 	st.w	r10[-632],r9
80004f70:	2f f8       	sub	r8,-1
80004f72:	fb 48 06 b4 	st.w	sp[1716],r8
80004f76:	c0 58       	rjmp	80004f80 <_vfprintf_r+0xfd4>
80004f78:	f2 c8 ff fc 	sub	r8,r9,-4
80004f7c:	51 08       	stdsp	sp[0x40],r8
80004f7e:	72 09       	ld.w	r9,r9[0x0]
80004f80:	33 08       	mov	r8,48
80004f82:	fb 68 06 b8 	st.b	sp[1720],r8
80004f86:	37 88       	mov	r8,120
80004f88:	30 0e       	mov	lr,0
80004f8a:	fb 68 06 b9 	st.b	sp[1721],r8
80004f8e:	fe cc b8 da 	sub	r12,pc,-18214
80004f92:	50 19       	stdsp	sp[0x4],r9
80004f94:	a1 b5       	sbr	r5,0x1
80004f96:	50 0e       	stdsp	sp[0x0],lr
80004f98:	50 dc       	stdsp	sp[0x34],r12
80004f9a:	30 28       	mov	r8,2
80004f9c:	37 80       	mov	r0,120
80004f9e:	e0 8f 02 a3 	bral	800054e4 <_vfprintf_r+0x1538>
80004fa2:	50 a7       	stdsp	sp[0x28],r7
80004fa4:	50 80       	stdsp	sp[0x20],r0
80004fa6:	10 90       	mov	r0,r8
80004fa8:	30 08       	mov	r8,0
80004faa:	fb 68 06 bb 	st.b	sp[1723],r8
80004fae:	0c 97       	mov	r7,r6
80004fb0:	04 94       	mov	r4,r2
80004fb2:	06 96       	mov	r6,r3
80004fb4:	02 92       	mov	r2,r1
80004fb6:	40 93       	lddsp	r3,sp[0x24]
80004fb8:	40 41       	lddsp	r1,sp[0x10]
80004fba:	0e 99       	mov	r9,r7
80004fbc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fc0:	40 3b       	lddsp	r11,sp[0xc]
80004fc2:	58 0b       	cp.w	r11,0
80004fc4:	c1 d0       	breq	80004ffe <_vfprintf_r+0x1052>
80004fc6:	10 36       	cp.w	r6,r8
80004fc8:	c0 64       	brge	80004fd4 <_vfprintf_r+0x1028>
80004fca:	fa ca f9 44 	sub	r10,sp,-1724
80004fce:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004fd2:	c1 d8       	rjmp	8000500c <_vfprintf_r+0x1060>
80004fd4:	fa c8 f9 50 	sub	r8,sp,-1712
80004fd8:	1a d8       	st.w	--sp,r8
80004fda:	fa c8 fa b8 	sub	r8,sp,-1352
80004fde:	1a d8       	st.w	--sp,r8
80004fe0:	fa c8 fb b4 	sub	r8,sp,-1100
80004fe4:	0c 9b       	mov	r11,r6
80004fe6:	1a d8       	st.w	--sp,r8
80004fe8:	04 9a       	mov	r10,r2
80004fea:	fa c8 f9 40 	sub	r8,sp,-1728
80004fee:	fa c9 ff b4 	sub	r9,sp,-76
80004ff2:	08 9c       	mov	r12,r4
80004ff4:	fe b0 f6 46 	rcall	80003c80 <get_arg>
80004ff8:	2f dd       	sub	sp,-12
80004ffa:	78 06       	ld.w	r6,r12[0x0]
80004ffc:	c2 08       	rjmp	8000503c <_vfprintf_r+0x1090>
80004ffe:	2f f7       	sub	r7,-1
80005000:	10 39       	cp.w	r9,r8
80005002:	c0 84       	brge	80005012 <_vfprintf_r+0x1066>
80005004:	fa c9 f9 44 	sub	r9,sp,-1724
80005008:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000500c:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005010:	c1 68       	rjmp	8000503c <_vfprintf_r+0x1090>
80005012:	41 09       	lddsp	r9,sp[0x40]
80005014:	59 f8       	cp.w	r8,31
80005016:	e0 89 00 10 	brgt	80005036 <_vfprintf_r+0x108a>
8000501a:	f2 ca ff fc 	sub	r10,r9,-4
8000501e:	51 0a       	stdsp	sp[0x40],r10
80005020:	72 06       	ld.w	r6,r9[0x0]
80005022:	fa ce f9 44 	sub	lr,sp,-1724
80005026:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000502a:	f3 46 fd 88 	st.w	r9[-632],r6
8000502e:	2f f8       	sub	r8,-1
80005030:	fb 48 06 b4 	st.w	sp[1716],r8
80005034:	c0 48       	rjmp	8000503c <_vfprintf_r+0x1090>
80005036:	72 06       	ld.w	r6,r9[0x0]
80005038:	2f c9       	sub	r9,-4
8000503a:	51 09       	stdsp	sp[0x40],r9
8000503c:	40 2c       	lddsp	r12,sp[0x8]
8000503e:	58 0c       	cp.w	r12,0
80005040:	c1 05       	brlt	80005060 <_vfprintf_r+0x10b4>
80005042:	18 9a       	mov	r10,r12
80005044:	30 0b       	mov	r11,0
80005046:	0c 9c       	mov	r12,r6
80005048:	e0 a0 14 58 	rcall	800078f8 <memchr>
8000504c:	e0 80 02 df 	breq	8000560a <_vfprintf_r+0x165e>
80005050:	f8 06 01 02 	sub	r2,r12,r6
80005054:	40 2b       	lddsp	r11,sp[0x8]
80005056:	16 32       	cp.w	r2,r11
80005058:	e0 89 02 d9 	brgt	8000560a <_vfprintf_r+0x165e>
8000505c:	e0 8f 02 d4 	bral	80005604 <_vfprintf_r+0x1658>
80005060:	30 0a       	mov	r10,0
80005062:	0c 9c       	mov	r12,r6
80005064:	50 2a       	stdsp	sp[0x8],r10
80005066:	e0 a0 19 2b 	rcall	800082bc <strlen>
8000506a:	18 92       	mov	r2,r12
8000506c:	e0 8f 02 d2 	bral	80005610 <_vfprintf_r+0x1664>
80005070:	50 a7       	stdsp	sp[0x28],r7
80005072:	50 80       	stdsp	sp[0x20],r0
80005074:	0c 97       	mov	r7,r6
80005076:	04 94       	mov	r4,r2
80005078:	06 96       	mov	r6,r3
8000507a:	02 92       	mov	r2,r1
8000507c:	40 93       	lddsp	r3,sp[0x24]
8000507e:	10 90       	mov	r0,r8
80005080:	40 41       	lddsp	r1,sp[0x10]
80005082:	a5 a5       	sbr	r5,0x4
80005084:	c0 a8       	rjmp	80005098 <_vfprintf_r+0x10ec>
80005086:	50 a7       	stdsp	sp[0x28],r7
80005088:	50 80       	stdsp	sp[0x20],r0
8000508a:	0c 97       	mov	r7,r6
8000508c:	04 94       	mov	r4,r2
8000508e:	06 96       	mov	r6,r3
80005090:	02 92       	mov	r2,r1
80005092:	40 93       	lddsp	r3,sp[0x24]
80005094:	10 90       	mov	r0,r8
80005096:	40 41       	lddsp	r1,sp[0x10]
80005098:	ed b5 00 05 	bld	r5,0x5
8000509c:	c5 61       	brne	80005148 <_vfprintf_r+0x119c>
8000509e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050a2:	40 39       	lddsp	r9,sp[0xc]
800050a4:	58 09       	cp.w	r9,0
800050a6:	c2 10       	breq	800050e8 <_vfprintf_r+0x113c>
800050a8:	10 36       	cp.w	r6,r8
800050aa:	c0 74       	brge	800050b8 <_vfprintf_r+0x110c>
800050ac:	fa c8 f9 44 	sub	r8,sp,-1724
800050b0:	f0 06 00 36 	add	r6,r8,r6<<0x3
800050b4:	c2 38       	rjmp	800050fa <_vfprintf_r+0x114e>
800050b6:	d7 03       	nop
800050b8:	fa c8 f9 50 	sub	r8,sp,-1712
800050bc:	1a d8       	st.w	--sp,r8
800050be:	fa c8 fa b8 	sub	r8,sp,-1352
800050c2:	1a d8       	st.w	--sp,r8
800050c4:	fa c8 fb b4 	sub	r8,sp,-1100
800050c8:	1a d8       	st.w	--sp,r8
800050ca:	fa c8 f9 40 	sub	r8,sp,-1728
800050ce:	fa c9 ff b4 	sub	r9,sp,-76
800050d2:	04 9a       	mov	r10,r2
800050d4:	0c 9b       	mov	r11,r6
800050d6:	08 9c       	mov	r12,r4
800050d8:	fe b0 f5 d4 	rcall	80003c80 <get_arg>
800050dc:	2f dd       	sub	sp,-12
800050de:	f8 e8 00 00 	ld.d	r8,r12[0]
800050e2:	fa e9 00 00 	st.d	sp[0],r8
800050e6:	c2 e8       	rjmp	80005142 <_vfprintf_r+0x1196>
800050e8:	ee ca ff ff 	sub	r10,r7,-1
800050ec:	10 37       	cp.w	r7,r8
800050ee:	c0 b4       	brge	80005104 <_vfprintf_r+0x1158>
800050f0:	fa c8 f9 44 	sub	r8,sp,-1724
800050f4:	14 97       	mov	r7,r10
800050f6:	f0 06 00 36 	add	r6,r8,r6<<0x3
800050fa:	ec ea fd 88 	ld.d	r10,r6[-632]
800050fe:	fa eb 00 00 	st.d	sp[0],r10
80005102:	c2 08       	rjmp	80005142 <_vfprintf_r+0x1196>
80005104:	41 09       	lddsp	r9,sp[0x40]
80005106:	59 f8       	cp.w	r8,31
80005108:	e0 89 00 16 	brgt	80005134 <_vfprintf_r+0x1188>
8000510c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005110:	f2 cb ff f8 	sub	r11,r9,-8
80005114:	fa e7 00 00 	st.d	sp[0],r6
80005118:	51 0b       	stdsp	sp[0x40],r11
8000511a:	fa c6 f9 44 	sub	r6,sp,-1724
8000511e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005122:	fa e6 00 00 	ld.d	r6,sp[0]
80005126:	f2 e7 fd 88 	st.d	r9[-632],r6
8000512a:	2f f8       	sub	r8,-1
8000512c:	14 97       	mov	r7,r10
8000512e:	fb 48 06 b4 	st.w	sp[1716],r8
80005132:	c0 88       	rjmp	80005142 <_vfprintf_r+0x1196>
80005134:	f2 e6 00 00 	ld.d	r6,r9[0]
80005138:	2f 89       	sub	r9,-8
8000513a:	fa e7 00 00 	st.d	sp[0],r6
8000513e:	51 09       	stdsp	sp[0x40],r9
80005140:	14 97       	mov	r7,r10
80005142:	30 18       	mov	r8,1
80005144:	e0 8f 01 d0 	bral	800054e4 <_vfprintf_r+0x1538>
80005148:	ed b5 00 04 	bld	r5,0x4
8000514c:	c1 61       	brne	80005178 <_vfprintf_r+0x11cc>
8000514e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005152:	40 3e       	lddsp	lr,sp[0xc]
80005154:	58 0e       	cp.w	lr,0
80005156:	c0 80       	breq	80005166 <_vfprintf_r+0x11ba>
80005158:	10 36       	cp.w	r6,r8
8000515a:	c6 74       	brge	80005228 <_vfprintf_r+0x127c>
8000515c:	fa cc f9 44 	sub	r12,sp,-1724
80005160:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005164:	c8 08       	rjmp	80005264 <_vfprintf_r+0x12b8>
80005166:	ee ca ff ff 	sub	r10,r7,-1
8000516a:	10 37       	cp.w	r7,r8
8000516c:	c7 f4       	brge	8000526a <_vfprintf_r+0x12be>
8000516e:	fa cb f9 44 	sub	r11,sp,-1724
80005172:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005176:	c7 68       	rjmp	80005262 <_vfprintf_r+0x12b6>
80005178:	ed b5 00 06 	bld	r5,0x6
8000517c:	c4 a1       	brne	80005210 <_vfprintf_r+0x1264>
8000517e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005182:	40 3c       	lddsp	r12,sp[0xc]
80005184:	58 0c       	cp.w	r12,0
80005186:	c1 d0       	breq	800051c0 <_vfprintf_r+0x1214>
80005188:	10 36       	cp.w	r6,r8
8000518a:	c0 64       	brge	80005196 <_vfprintf_r+0x11ea>
8000518c:	fa cb f9 44 	sub	r11,sp,-1724
80005190:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005194:	c1 f8       	rjmp	800051d2 <_vfprintf_r+0x1226>
80005196:	fa c8 f9 50 	sub	r8,sp,-1712
8000519a:	1a d8       	st.w	--sp,r8
8000519c:	fa c8 fa b8 	sub	r8,sp,-1352
800051a0:	1a d8       	st.w	--sp,r8
800051a2:	fa c8 fb b4 	sub	r8,sp,-1100
800051a6:	1a d8       	st.w	--sp,r8
800051a8:	fa c8 f9 40 	sub	r8,sp,-1728
800051ac:	fa c9 ff b4 	sub	r9,sp,-76
800051b0:	04 9a       	mov	r10,r2
800051b2:	0c 9b       	mov	r11,r6
800051b4:	08 9c       	mov	r12,r4
800051b6:	fe b0 f5 65 	rcall	80003c80 <get_arg>
800051ba:	2f dd       	sub	sp,-12
800051bc:	98 18       	ld.sh	r8,r12[0x2]
800051be:	c2 68       	rjmp	8000520a <_vfprintf_r+0x125e>
800051c0:	ee ca ff ff 	sub	r10,r7,-1
800051c4:	10 37       	cp.w	r7,r8
800051c6:	c0 94       	brge	800051d8 <_vfprintf_r+0x122c>
800051c8:	fa c9 f9 44 	sub	r9,sp,-1724
800051cc:	14 97       	mov	r7,r10
800051ce:	f2 06 00 36 	add	r6,r9,r6<<0x3
800051d2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800051d6:	c1 a8       	rjmp	8000520a <_vfprintf_r+0x125e>
800051d8:	41 09       	lddsp	r9,sp[0x40]
800051da:	59 f8       	cp.w	r8,31
800051dc:	e0 89 00 13 	brgt	80005202 <_vfprintf_r+0x1256>
800051e0:	f2 cb ff fc 	sub	r11,r9,-4
800051e4:	51 0b       	stdsp	sp[0x40],r11
800051e6:	72 09       	ld.w	r9,r9[0x0]
800051e8:	fa c6 f9 44 	sub	r6,sp,-1724
800051ec:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800051f0:	2f f8       	sub	r8,-1
800051f2:	f7 49 fd 88 	st.w	r11[-632],r9
800051f6:	fb 48 06 b4 	st.w	sp[1716],r8
800051fa:	14 97       	mov	r7,r10
800051fc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005200:	c0 58       	rjmp	8000520a <_vfprintf_r+0x125e>
80005202:	92 18       	ld.sh	r8,r9[0x2]
80005204:	14 97       	mov	r7,r10
80005206:	2f c9       	sub	r9,-4
80005208:	51 09       	stdsp	sp[0x40],r9
8000520a:	5c 78       	castu.h	r8
8000520c:	50 18       	stdsp	sp[0x4],r8
8000520e:	c4 68       	rjmp	8000529a <_vfprintf_r+0x12ee>
80005210:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005214:	40 3c       	lddsp	r12,sp[0xc]
80005216:	58 0c       	cp.w	r12,0
80005218:	c1 d0       	breq	80005252 <_vfprintf_r+0x12a6>
8000521a:	10 36       	cp.w	r6,r8
8000521c:	c0 64       	brge	80005228 <_vfprintf_r+0x127c>
8000521e:	fa cb f9 44 	sub	r11,sp,-1724
80005222:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005226:	c1 f8       	rjmp	80005264 <_vfprintf_r+0x12b8>
80005228:	fa c8 f9 50 	sub	r8,sp,-1712
8000522c:	1a d8       	st.w	--sp,r8
8000522e:	fa c8 fa b8 	sub	r8,sp,-1352
80005232:	0c 9b       	mov	r11,r6
80005234:	1a d8       	st.w	--sp,r8
80005236:	fa c8 fb b4 	sub	r8,sp,-1100
8000523a:	04 9a       	mov	r10,r2
8000523c:	1a d8       	st.w	--sp,r8
8000523e:	08 9c       	mov	r12,r4
80005240:	fa c8 f9 40 	sub	r8,sp,-1728
80005244:	fa c9 ff b4 	sub	r9,sp,-76
80005248:	fe b0 f5 1c 	rcall	80003c80 <get_arg>
8000524c:	2f dd       	sub	sp,-12
8000524e:	78 0b       	ld.w	r11,r12[0x0]
80005250:	c2 48       	rjmp	80005298 <_vfprintf_r+0x12ec>
80005252:	ee ca ff ff 	sub	r10,r7,-1
80005256:	10 37       	cp.w	r7,r8
80005258:	c0 94       	brge	8000526a <_vfprintf_r+0x12be>
8000525a:	fa c9 f9 44 	sub	r9,sp,-1724
8000525e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005262:	14 97       	mov	r7,r10
80005264:	ec fb fd 88 	ld.w	r11,r6[-632]
80005268:	c1 88       	rjmp	80005298 <_vfprintf_r+0x12ec>
8000526a:	41 09       	lddsp	r9,sp[0x40]
8000526c:	59 f8       	cp.w	r8,31
8000526e:	e0 89 00 11 	brgt	80005290 <_vfprintf_r+0x12e4>
80005272:	f2 cb ff fc 	sub	r11,r9,-4
80005276:	51 0b       	stdsp	sp[0x40],r11
80005278:	fa c6 f9 44 	sub	r6,sp,-1724
8000527c:	72 0b       	ld.w	r11,r9[0x0]
8000527e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005282:	f3 4b fd 88 	st.w	r9[-632],r11
80005286:	2f f8       	sub	r8,-1
80005288:	14 97       	mov	r7,r10
8000528a:	fb 48 06 b4 	st.w	sp[1716],r8
8000528e:	c0 58       	rjmp	80005298 <_vfprintf_r+0x12ec>
80005290:	72 0b       	ld.w	r11,r9[0x0]
80005292:	14 97       	mov	r7,r10
80005294:	2f c9       	sub	r9,-4
80005296:	51 09       	stdsp	sp[0x40],r9
80005298:	50 1b       	stdsp	sp[0x4],r11
8000529a:	30 0e       	mov	lr,0
8000529c:	30 18       	mov	r8,1
8000529e:	50 0e       	stdsp	sp[0x0],lr
800052a0:	c2 29       	rjmp	800054e4 <_vfprintf_r+0x1538>
800052a2:	50 a7       	stdsp	sp[0x28],r7
800052a4:	50 80       	stdsp	sp[0x20],r0
800052a6:	0c 97       	mov	r7,r6
800052a8:	04 94       	mov	r4,r2
800052aa:	06 96       	mov	r6,r3
800052ac:	02 92       	mov	r2,r1
800052ae:	fe cc bb fa 	sub	r12,pc,-17414
800052b2:	40 93       	lddsp	r3,sp[0x24]
800052b4:	10 90       	mov	r0,r8
800052b6:	40 41       	lddsp	r1,sp[0x10]
800052b8:	50 dc       	stdsp	sp[0x34],r12
800052ba:	ed b5 00 05 	bld	r5,0x5
800052be:	c5 51       	brne	80005368 <_vfprintf_r+0x13bc>
800052c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052c4:	40 3b       	lddsp	r11,sp[0xc]
800052c6:	58 0b       	cp.w	r11,0
800052c8:	c2 20       	breq	8000530c <_vfprintf_r+0x1360>
800052ca:	10 36       	cp.w	r6,r8
800052cc:	c0 a4       	brge	800052e0 <_vfprintf_r+0x1334>
800052ce:	fa ca f9 44 	sub	r10,sp,-1724
800052d2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800052d6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800052da:	fa e9 00 00 	st.d	sp[0],r8
800052de:	cf 28       	rjmp	800054c2 <_vfprintf_r+0x1516>
800052e0:	fa c8 f9 50 	sub	r8,sp,-1712
800052e4:	1a d8       	st.w	--sp,r8
800052e6:	fa c8 fa b8 	sub	r8,sp,-1352
800052ea:	04 9a       	mov	r10,r2
800052ec:	1a d8       	st.w	--sp,r8
800052ee:	0c 9b       	mov	r11,r6
800052f0:	fa c8 fb b4 	sub	r8,sp,-1100
800052f4:	08 9c       	mov	r12,r4
800052f6:	1a d8       	st.w	--sp,r8
800052f8:	fa c8 f9 40 	sub	r8,sp,-1728
800052fc:	fa c9 ff b4 	sub	r9,sp,-76
80005300:	fe b0 f4 c0 	rcall	80003c80 <get_arg>
80005304:	2f dd       	sub	sp,-12
80005306:	f8 ea 00 00 	ld.d	r10,r12[0]
8000530a:	c0 c8       	rjmp	80005322 <_vfprintf_r+0x1376>
8000530c:	ee ca ff ff 	sub	r10,r7,-1
80005310:	10 37       	cp.w	r7,r8
80005312:	c0 b4       	brge	80005328 <_vfprintf_r+0x137c>
80005314:	fa c9 f9 44 	sub	r9,sp,-1724
80005318:	14 97       	mov	r7,r10
8000531a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000531e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005322:	fa eb 00 00 	st.d	sp[0],r10
80005326:	cc e8       	rjmp	800054c2 <_vfprintf_r+0x1516>
80005328:	41 09       	lddsp	r9,sp[0x40]
8000532a:	59 f8       	cp.w	r8,31
8000532c:	e0 89 00 16 	brgt	80005358 <_vfprintf_r+0x13ac>
80005330:	f2 e6 00 00 	ld.d	r6,r9[0]
80005334:	f2 cb ff f8 	sub	r11,r9,-8
80005338:	fa e7 00 00 	st.d	sp[0],r6
8000533c:	51 0b       	stdsp	sp[0x40],r11
8000533e:	fa c6 f9 44 	sub	r6,sp,-1724
80005342:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005346:	fa e6 00 00 	ld.d	r6,sp[0]
8000534a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000534e:	2f f8       	sub	r8,-1
80005350:	14 97       	mov	r7,r10
80005352:	fb 48 06 b4 	st.w	sp[1716],r8
80005356:	cb 68       	rjmp	800054c2 <_vfprintf_r+0x1516>
80005358:	f2 e6 00 00 	ld.d	r6,r9[0]
8000535c:	2f 89       	sub	r9,-8
8000535e:	fa e7 00 00 	st.d	sp[0],r6
80005362:	51 09       	stdsp	sp[0x40],r9
80005364:	14 97       	mov	r7,r10
80005366:	ca e8       	rjmp	800054c2 <_vfprintf_r+0x1516>
80005368:	ed b5 00 04 	bld	r5,0x4
8000536c:	c1 71       	brne	8000539a <_vfprintf_r+0x13ee>
8000536e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005372:	40 3e       	lddsp	lr,sp[0xc]
80005374:	58 0e       	cp.w	lr,0
80005376:	c0 80       	breq	80005386 <_vfprintf_r+0x13da>
80005378:	10 36       	cp.w	r6,r8
8000537a:	c6 94       	brge	8000544c <_vfprintf_r+0x14a0>
8000537c:	fa cc f9 44 	sub	r12,sp,-1724
80005380:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005384:	c8 28       	rjmp	80005488 <_vfprintf_r+0x14dc>
80005386:	ee ca ff ff 	sub	r10,r7,-1
8000538a:	10 37       	cp.w	r7,r8
8000538c:	e0 84 00 81 	brge	8000548e <_vfprintf_r+0x14e2>
80005390:	fa cb f9 44 	sub	r11,sp,-1724
80005394:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005398:	c7 78       	rjmp	80005486 <_vfprintf_r+0x14da>
8000539a:	ed b5 00 06 	bld	r5,0x6
8000539e:	c4 b1       	brne	80005434 <_vfprintf_r+0x1488>
800053a0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053a4:	40 3c       	lddsp	r12,sp[0xc]
800053a6:	58 0c       	cp.w	r12,0
800053a8:	c1 d0       	breq	800053e2 <_vfprintf_r+0x1436>
800053aa:	10 36       	cp.w	r6,r8
800053ac:	c0 64       	brge	800053b8 <_vfprintf_r+0x140c>
800053ae:	fa cb f9 44 	sub	r11,sp,-1724
800053b2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053b6:	c1 f8       	rjmp	800053f4 <_vfprintf_r+0x1448>
800053b8:	fa c8 f9 50 	sub	r8,sp,-1712
800053bc:	1a d8       	st.w	--sp,r8
800053be:	fa c8 fa b8 	sub	r8,sp,-1352
800053c2:	1a d8       	st.w	--sp,r8
800053c4:	fa c8 fb b4 	sub	r8,sp,-1100
800053c8:	1a d8       	st.w	--sp,r8
800053ca:	fa c8 f9 40 	sub	r8,sp,-1728
800053ce:	fa c9 ff b4 	sub	r9,sp,-76
800053d2:	04 9a       	mov	r10,r2
800053d4:	0c 9b       	mov	r11,r6
800053d6:	08 9c       	mov	r12,r4
800053d8:	fe b0 f4 54 	rcall	80003c80 <get_arg>
800053dc:	2f dd       	sub	sp,-12
800053de:	98 18       	ld.sh	r8,r12[0x2]
800053e0:	c2 78       	rjmp	8000542e <_vfprintf_r+0x1482>
800053e2:	ee ca ff ff 	sub	r10,r7,-1
800053e6:	10 37       	cp.w	r7,r8
800053e8:	c0 a4       	brge	800053fc <_vfprintf_r+0x1450>
800053ea:	fa c9 f9 44 	sub	r9,sp,-1724
800053ee:	14 97       	mov	r7,r10
800053f0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800053f4:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800053f8:	c1 b8       	rjmp	8000542e <_vfprintf_r+0x1482>
800053fa:	d7 03       	nop
800053fc:	41 09       	lddsp	r9,sp[0x40]
800053fe:	59 f8       	cp.w	r8,31
80005400:	e0 89 00 13 	brgt	80005426 <_vfprintf_r+0x147a>
80005404:	f2 cb ff fc 	sub	r11,r9,-4
80005408:	51 0b       	stdsp	sp[0x40],r11
8000540a:	72 09       	ld.w	r9,r9[0x0]
8000540c:	fa c6 f9 44 	sub	r6,sp,-1724
80005410:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005414:	2f f8       	sub	r8,-1
80005416:	f7 49 fd 88 	st.w	r11[-632],r9
8000541a:	fb 48 06 b4 	st.w	sp[1716],r8
8000541e:	14 97       	mov	r7,r10
80005420:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005424:	c0 58       	rjmp	8000542e <_vfprintf_r+0x1482>
80005426:	92 18       	ld.sh	r8,r9[0x2]
80005428:	14 97       	mov	r7,r10
8000542a:	2f c9       	sub	r9,-4
8000542c:	51 09       	stdsp	sp[0x40],r9
8000542e:	5c 78       	castu.h	r8
80005430:	50 18       	stdsp	sp[0x4],r8
80005432:	c4 68       	rjmp	800054be <_vfprintf_r+0x1512>
80005434:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005438:	40 3c       	lddsp	r12,sp[0xc]
8000543a:	58 0c       	cp.w	r12,0
8000543c:	c1 d0       	breq	80005476 <_vfprintf_r+0x14ca>
8000543e:	10 36       	cp.w	r6,r8
80005440:	c0 64       	brge	8000544c <_vfprintf_r+0x14a0>
80005442:	fa cb f9 44 	sub	r11,sp,-1724
80005446:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000544a:	c1 f8       	rjmp	80005488 <_vfprintf_r+0x14dc>
8000544c:	fa c8 f9 50 	sub	r8,sp,-1712
80005450:	1a d8       	st.w	--sp,r8
80005452:	fa c8 fa b8 	sub	r8,sp,-1352
80005456:	0c 9b       	mov	r11,r6
80005458:	1a d8       	st.w	--sp,r8
8000545a:	fa c8 fb b4 	sub	r8,sp,-1100
8000545e:	04 9a       	mov	r10,r2
80005460:	1a d8       	st.w	--sp,r8
80005462:	08 9c       	mov	r12,r4
80005464:	fa c8 f9 40 	sub	r8,sp,-1728
80005468:	fa c9 ff b4 	sub	r9,sp,-76
8000546c:	fe b0 f4 0a 	rcall	80003c80 <get_arg>
80005470:	2f dd       	sub	sp,-12
80005472:	78 0b       	ld.w	r11,r12[0x0]
80005474:	c2 48       	rjmp	800054bc <_vfprintf_r+0x1510>
80005476:	ee ca ff ff 	sub	r10,r7,-1
8000547a:	10 37       	cp.w	r7,r8
8000547c:	c0 94       	brge	8000548e <_vfprintf_r+0x14e2>
8000547e:	fa c9 f9 44 	sub	r9,sp,-1724
80005482:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005486:	14 97       	mov	r7,r10
80005488:	ec fb fd 88 	ld.w	r11,r6[-632]
8000548c:	c1 88       	rjmp	800054bc <_vfprintf_r+0x1510>
8000548e:	41 09       	lddsp	r9,sp[0x40]
80005490:	59 f8       	cp.w	r8,31
80005492:	e0 89 00 11 	brgt	800054b4 <_vfprintf_r+0x1508>
80005496:	f2 cb ff fc 	sub	r11,r9,-4
8000549a:	51 0b       	stdsp	sp[0x40],r11
8000549c:	fa c6 f9 44 	sub	r6,sp,-1724
800054a0:	72 0b       	ld.w	r11,r9[0x0]
800054a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054a6:	f3 4b fd 88 	st.w	r9[-632],r11
800054aa:	2f f8       	sub	r8,-1
800054ac:	14 97       	mov	r7,r10
800054ae:	fb 48 06 b4 	st.w	sp[1716],r8
800054b2:	c0 58       	rjmp	800054bc <_vfprintf_r+0x1510>
800054b4:	72 0b       	ld.w	r11,r9[0x0]
800054b6:	14 97       	mov	r7,r10
800054b8:	2f c9       	sub	r9,-4
800054ba:	51 09       	stdsp	sp[0x40],r9
800054bc:	50 1b       	stdsp	sp[0x4],r11
800054be:	30 0e       	mov	lr,0
800054c0:	50 0e       	stdsp	sp[0x0],lr
800054c2:	40 08       	lddsp	r8,sp[0x0]
800054c4:	40 1c       	lddsp	r12,sp[0x4]
800054c6:	18 48       	or	r8,r12
800054c8:	5f 19       	srne	r9
800054ca:	0a 98       	mov	r8,r5
800054cc:	eb e9 00 09 	and	r9,r5,r9
800054d0:	a1 b8       	sbr	r8,0x1
800054d2:	58 09       	cp.w	r9,0
800054d4:	c0 70       	breq	800054e2 <_vfprintf_r+0x1536>
800054d6:	10 95       	mov	r5,r8
800054d8:	fb 60 06 b9 	st.b	sp[1721],r0
800054dc:	33 08       	mov	r8,48
800054de:	fb 68 06 b8 	st.b	sp[1720],r8
800054e2:	30 28       	mov	r8,2
800054e4:	30 09       	mov	r9,0
800054e6:	fb 69 06 bb 	st.b	sp[1723],r9
800054ea:	0a 99       	mov	r9,r5
800054ec:	a7 d9       	cbr	r9,0x7
800054ee:	40 2b       	lddsp	r11,sp[0x8]
800054f0:	40 16       	lddsp	r6,sp[0x4]
800054f2:	58 0b       	cp.w	r11,0
800054f4:	5f 1a       	srne	r10
800054f6:	f2 05 17 40 	movge	r5,r9
800054fa:	fa c2 f9 78 	sub	r2,sp,-1672
800054fe:	40 09       	lddsp	r9,sp[0x0]
80005500:	0c 49       	or	r9,r6
80005502:	5f 19       	srne	r9
80005504:	f5 e9 10 09 	or	r9,r10,r9
80005508:	c5 c0       	breq	800055c0 <_vfprintf_r+0x1614>
8000550a:	30 19       	mov	r9,1
8000550c:	f2 08 18 00 	cp.b	r8,r9
80005510:	c0 60       	breq	8000551c <_vfprintf_r+0x1570>
80005512:	30 29       	mov	r9,2
80005514:	f2 08 18 00 	cp.b	r8,r9
80005518:	c0 41       	brne	80005520 <_vfprintf_r+0x1574>
8000551a:	c3 c8       	rjmp	80005592 <_vfprintf_r+0x15e6>
8000551c:	04 96       	mov	r6,r2
8000551e:	c3 08       	rjmp	8000557e <_vfprintf_r+0x15d2>
80005520:	04 96       	mov	r6,r2
80005522:	fa e8 00 00 	ld.d	r8,sp[0]
80005526:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000552a:	2d 0a       	sub	r10,-48
8000552c:	0c fa       	st.b	--r6,r10
8000552e:	f0 0b 16 03 	lsr	r11,r8,0x3
80005532:	f2 0c 16 03 	lsr	r12,r9,0x3
80005536:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000553a:	18 99       	mov	r9,r12
8000553c:	16 98       	mov	r8,r11
8000553e:	58 08       	cp.w	r8,0
80005540:	5c 29       	cpc	r9
80005542:	cf 21       	brne	80005526 <_vfprintf_r+0x157a>
80005544:	fa e9 00 00 	st.d	sp[0],r8
80005548:	ed b5 00 00 	bld	r5,0x0
8000554c:	c4 51       	brne	800055d6 <_vfprintf_r+0x162a>
8000554e:	33 09       	mov	r9,48
80005550:	f2 0a 18 00 	cp.b	r10,r9
80005554:	c4 10       	breq	800055d6 <_vfprintf_r+0x162a>
80005556:	0c f9       	st.b	--r6,r9
80005558:	c3 f8       	rjmp	800055d6 <_vfprintf_r+0x162a>
8000555a:	fa ea 00 00 	ld.d	r10,sp[0]
8000555e:	30 a8       	mov	r8,10
80005560:	30 09       	mov	r9,0
80005562:	e0 a0 1b 99 	rcall	80008c94 <__avr32_umod64>
80005566:	30 a8       	mov	r8,10
80005568:	2d 0a       	sub	r10,-48
8000556a:	30 09       	mov	r9,0
8000556c:	ac 8a       	st.b	r6[0x0],r10
8000556e:	fa ea 00 00 	ld.d	r10,sp[0]
80005572:	fe b0 f1 8e 	rcall	8000388e <__avr32_udiv64>
80005576:	16 99       	mov	r9,r11
80005578:	14 98       	mov	r8,r10
8000557a:	fa e9 00 00 	st.d	sp[0],r8
8000557e:	20 16       	sub	r6,1
80005580:	fa ea 00 00 	ld.d	r10,sp[0]
80005584:	58 9a       	cp.w	r10,9
80005586:	5c 2b       	cpc	r11
80005588:	fe 9b ff e9 	brhi	8000555a <_vfprintf_r+0x15ae>
8000558c:	1b f8       	ld.ub	r8,sp[0x7]
8000558e:	2d 08       	sub	r8,-48
80005590:	c2 08       	rjmp	800055d0 <_vfprintf_r+0x1624>
80005592:	04 96       	mov	r6,r2
80005594:	fa e8 00 00 	ld.d	r8,sp[0]
80005598:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000559c:	40 de       	lddsp	lr,sp[0x34]
8000559e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
800055a2:	0c fa       	st.b	--r6,r10
800055a4:	f2 0b 16 04 	lsr	r11,r9,0x4
800055a8:	f0 0a 16 04 	lsr	r10,r8,0x4
800055ac:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
800055b0:	16 99       	mov	r9,r11
800055b2:	14 98       	mov	r8,r10
800055b4:	58 08       	cp.w	r8,0
800055b6:	5c 29       	cpc	r9
800055b8:	cf 01       	brne	80005598 <_vfprintf_r+0x15ec>
800055ba:	fa e9 00 00 	st.d	sp[0],r8
800055be:	c0 c8       	rjmp	800055d6 <_vfprintf_r+0x162a>
800055c0:	58 08       	cp.w	r8,0
800055c2:	c0 91       	brne	800055d4 <_vfprintf_r+0x1628>
800055c4:	ed b5 00 00 	bld	r5,0x0
800055c8:	c0 61       	brne	800055d4 <_vfprintf_r+0x1628>
800055ca:	fa c6 f9 79 	sub	r6,sp,-1671
800055ce:	33 08       	mov	r8,48
800055d0:	ac 88       	st.b	r6[0x0],r8
800055d2:	c0 28       	rjmp	800055d6 <_vfprintf_r+0x162a>
800055d4:	04 96       	mov	r6,r2
800055d6:	0c 12       	sub	r2,r6
800055d8:	c1 c8       	rjmp	80005610 <_vfprintf_r+0x1664>
800055da:	50 a7       	stdsp	sp[0x28],r7
800055dc:	50 80       	stdsp	sp[0x20],r0
800055de:	40 93       	lddsp	r3,sp[0x24]
800055e0:	0c 97       	mov	r7,r6
800055e2:	10 90       	mov	r0,r8
800055e4:	04 94       	mov	r4,r2
800055e6:	40 41       	lddsp	r1,sp[0x10]
800055e8:	58 08       	cp.w	r8,0
800055ea:	e0 80 04 4f 	breq	80005e88 <_vfprintf_r+0x1edc>
800055ee:	fb 68 06 60 	st.b	sp[1632],r8
800055f2:	30 0c       	mov	r12,0
800055f4:	30 08       	mov	r8,0
800055f6:	30 12       	mov	r2,1
800055f8:	fb 68 06 bb 	st.b	sp[1723],r8
800055fc:	50 2c       	stdsp	sp[0x8],r12
800055fe:	fa c6 f9 a0 	sub	r6,sp,-1632
80005602:	c0 78       	rjmp	80005610 <_vfprintf_r+0x1664>
80005604:	30 0b       	mov	r11,0
80005606:	50 2b       	stdsp	sp[0x8],r11
80005608:	c0 48       	rjmp	80005610 <_vfprintf_r+0x1664>
8000560a:	40 22       	lddsp	r2,sp[0x8]
8000560c:	30 0a       	mov	r10,0
8000560e:	50 2a       	stdsp	sp[0x8],r10
80005610:	40 29       	lddsp	r9,sp[0x8]
80005612:	e4 09 0c 49 	max	r9,r2,r9
80005616:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000561a:	50 39       	stdsp	sp[0xc],r9
8000561c:	0a 9e       	mov	lr,r5
8000561e:	30 09       	mov	r9,0
80005620:	e2 1e 00 02 	andl	lr,0x2,COH
80005624:	f2 08 18 00 	cp.b	r8,r9
80005628:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000562c:	f7 b8 01 ff 	subne	r8,-1
80005630:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005634:	0a 9b       	mov	r11,r5
80005636:	58 0e       	cp.w	lr,0
80005638:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000563c:	f7 bc 01 fe 	subne	r12,-2
80005640:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005644:	e2 1b 00 84 	andl	r11,0x84,COH
80005648:	50 fe       	stdsp	sp[0x3c],lr
8000564a:	50 9b       	stdsp	sp[0x24],r11
8000564c:	c4 71       	brne	800056da <_vfprintf_r+0x172e>
8000564e:	40 8a       	lddsp	r10,sp[0x20]
80005650:	40 39       	lddsp	r9,sp[0xc]
80005652:	12 1a       	sub	r10,r9
80005654:	50 4a       	stdsp	sp[0x10],r10
80005656:	58 0a       	cp.w	r10,0
80005658:	e0 89 00 20 	brgt	80005698 <_vfprintf_r+0x16ec>
8000565c:	c3 f8       	rjmp	800056da <_vfprintf_r+0x172e>
8000565e:	2f 09       	sub	r9,-16
80005660:	2f f8       	sub	r8,-1
80005662:	fe ce bf 96 	sub	lr,pc,-16490
80005666:	31 0c       	mov	r12,16
80005668:	fb 49 06 90 	st.w	sp[1680],r9
8000566c:	87 0e       	st.w	r3[0x0],lr
8000566e:	87 1c       	st.w	r3[0x4],r12
80005670:	fb 48 06 8c 	st.w	sp[1676],r8
80005674:	58 78       	cp.w	r8,7
80005676:	e0 89 00 04 	brgt	8000567e <_vfprintf_r+0x16d2>
8000567a:	2f 83       	sub	r3,-8
8000567c:	c0 b8       	rjmp	80005692 <_vfprintf_r+0x16e6>
8000567e:	fa ca f9 78 	sub	r10,sp,-1672
80005682:	02 9b       	mov	r11,r1
80005684:	08 9c       	mov	r12,r4
80005686:	fe b0 f4 85 	rcall	80003f90 <__sprint_r>
8000568a:	e0 81 04 10 	brne	80005eaa <_vfprintf_r+0x1efe>
8000568e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005692:	40 4b       	lddsp	r11,sp[0x10]
80005694:	21 0b       	sub	r11,16
80005696:	50 4b       	stdsp	sp[0x10],r11
80005698:	fa f9 06 90 	ld.w	r9,sp[1680]
8000569c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056a0:	fe ca bf d4 	sub	r10,pc,-16428
800056a4:	40 4e       	lddsp	lr,sp[0x10]
800056a6:	59 0e       	cp.w	lr,16
800056a8:	fe 99 ff db 	brgt	8000565e <_vfprintf_r+0x16b2>
800056ac:	1c 09       	add	r9,lr
800056ae:	2f f8       	sub	r8,-1
800056b0:	87 0a       	st.w	r3[0x0],r10
800056b2:	fb 49 06 90 	st.w	sp[1680],r9
800056b6:	87 1e       	st.w	r3[0x4],lr
800056b8:	fb 48 06 8c 	st.w	sp[1676],r8
800056bc:	58 78       	cp.w	r8,7
800056be:	e0 89 00 04 	brgt	800056c6 <_vfprintf_r+0x171a>
800056c2:	2f 83       	sub	r3,-8
800056c4:	c0 b8       	rjmp	800056da <_vfprintf_r+0x172e>
800056c6:	fa ca f9 78 	sub	r10,sp,-1672
800056ca:	02 9b       	mov	r11,r1
800056cc:	08 9c       	mov	r12,r4
800056ce:	fe b0 f4 61 	rcall	80003f90 <__sprint_r>
800056d2:	e0 81 03 ec 	brne	80005eaa <_vfprintf_r+0x1efe>
800056d6:	fa c3 f9 e0 	sub	r3,sp,-1568
800056da:	30 09       	mov	r9,0
800056dc:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800056e0:	f2 08 18 00 	cp.b	r8,r9
800056e4:	c1 f0       	breq	80005722 <_vfprintf_r+0x1776>
800056e6:	fa f8 06 90 	ld.w	r8,sp[1680]
800056ea:	fa c9 f9 45 	sub	r9,sp,-1723
800056ee:	2f f8       	sub	r8,-1
800056f0:	87 09       	st.w	r3[0x0],r9
800056f2:	fb 48 06 90 	st.w	sp[1680],r8
800056f6:	30 19       	mov	r9,1
800056f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056fc:	87 19       	st.w	r3[0x4],r9
800056fe:	2f f8       	sub	r8,-1
80005700:	fb 48 06 8c 	st.w	sp[1676],r8
80005704:	58 78       	cp.w	r8,7
80005706:	e0 89 00 04 	brgt	8000570e <_vfprintf_r+0x1762>
8000570a:	2f 83       	sub	r3,-8
8000570c:	c0 b8       	rjmp	80005722 <_vfprintf_r+0x1776>
8000570e:	fa ca f9 78 	sub	r10,sp,-1672
80005712:	02 9b       	mov	r11,r1
80005714:	08 9c       	mov	r12,r4
80005716:	fe b0 f4 3d 	rcall	80003f90 <__sprint_r>
8000571a:	e0 81 03 c8 	brne	80005eaa <_vfprintf_r+0x1efe>
8000571e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005722:	40 fc       	lddsp	r12,sp[0x3c]
80005724:	58 0c       	cp.w	r12,0
80005726:	c1 f0       	breq	80005764 <_vfprintf_r+0x17b8>
80005728:	fa f8 06 90 	ld.w	r8,sp[1680]
8000572c:	fa c9 f9 48 	sub	r9,sp,-1720
80005730:	2f e8       	sub	r8,-2
80005732:	87 09       	st.w	r3[0x0],r9
80005734:	fb 48 06 90 	st.w	sp[1680],r8
80005738:	30 29       	mov	r9,2
8000573a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000573e:	87 19       	st.w	r3[0x4],r9
80005740:	2f f8       	sub	r8,-1
80005742:	fb 48 06 8c 	st.w	sp[1676],r8
80005746:	58 78       	cp.w	r8,7
80005748:	e0 89 00 04 	brgt	80005750 <_vfprintf_r+0x17a4>
8000574c:	2f 83       	sub	r3,-8
8000574e:	c0 b8       	rjmp	80005764 <_vfprintf_r+0x17b8>
80005750:	fa ca f9 78 	sub	r10,sp,-1672
80005754:	02 9b       	mov	r11,r1
80005756:	08 9c       	mov	r12,r4
80005758:	fe b0 f4 1c 	rcall	80003f90 <__sprint_r>
8000575c:	e0 81 03 a7 	brne	80005eaa <_vfprintf_r+0x1efe>
80005760:	fa c3 f9 e0 	sub	r3,sp,-1568
80005764:	40 9b       	lddsp	r11,sp[0x24]
80005766:	e0 4b 00 80 	cp.w	r11,128
8000576a:	c4 71       	brne	800057f8 <_vfprintf_r+0x184c>
8000576c:	40 8a       	lddsp	r10,sp[0x20]
8000576e:	40 39       	lddsp	r9,sp[0xc]
80005770:	12 1a       	sub	r10,r9
80005772:	50 4a       	stdsp	sp[0x10],r10
80005774:	58 0a       	cp.w	r10,0
80005776:	e0 89 00 20 	brgt	800057b6 <_vfprintf_r+0x180a>
8000577a:	c3 f8       	rjmp	800057f8 <_vfprintf_r+0x184c>
8000577c:	2f 09       	sub	r9,-16
8000577e:	2f f8       	sub	r8,-1
80005780:	fe ce c0 a4 	sub	lr,pc,-16220
80005784:	31 0c       	mov	r12,16
80005786:	fb 49 06 90 	st.w	sp[1680],r9
8000578a:	87 0e       	st.w	r3[0x0],lr
8000578c:	87 1c       	st.w	r3[0x4],r12
8000578e:	fb 48 06 8c 	st.w	sp[1676],r8
80005792:	58 78       	cp.w	r8,7
80005794:	e0 89 00 04 	brgt	8000579c <_vfprintf_r+0x17f0>
80005798:	2f 83       	sub	r3,-8
8000579a:	c0 b8       	rjmp	800057b0 <_vfprintf_r+0x1804>
8000579c:	fa ca f9 78 	sub	r10,sp,-1672
800057a0:	02 9b       	mov	r11,r1
800057a2:	08 9c       	mov	r12,r4
800057a4:	fe b0 f3 f6 	rcall	80003f90 <__sprint_r>
800057a8:	e0 81 03 81 	brne	80005eaa <_vfprintf_r+0x1efe>
800057ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800057b0:	40 4b       	lddsp	r11,sp[0x10]
800057b2:	21 0b       	sub	r11,16
800057b4:	50 4b       	stdsp	sp[0x10],r11
800057b6:	fa f9 06 90 	ld.w	r9,sp[1680]
800057ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057be:	fe ca c0 e2 	sub	r10,pc,-16158
800057c2:	40 4e       	lddsp	lr,sp[0x10]
800057c4:	59 0e       	cp.w	lr,16
800057c6:	fe 99 ff db 	brgt	8000577c <_vfprintf_r+0x17d0>
800057ca:	1c 09       	add	r9,lr
800057cc:	2f f8       	sub	r8,-1
800057ce:	87 0a       	st.w	r3[0x0],r10
800057d0:	fb 49 06 90 	st.w	sp[1680],r9
800057d4:	87 1e       	st.w	r3[0x4],lr
800057d6:	fb 48 06 8c 	st.w	sp[1676],r8
800057da:	58 78       	cp.w	r8,7
800057dc:	e0 89 00 04 	brgt	800057e4 <_vfprintf_r+0x1838>
800057e0:	2f 83       	sub	r3,-8
800057e2:	c0 b8       	rjmp	800057f8 <_vfprintf_r+0x184c>
800057e4:	fa ca f9 78 	sub	r10,sp,-1672
800057e8:	02 9b       	mov	r11,r1
800057ea:	08 9c       	mov	r12,r4
800057ec:	fe b0 f3 d2 	rcall	80003f90 <__sprint_r>
800057f0:	e0 81 03 5d 	brne	80005eaa <_vfprintf_r+0x1efe>
800057f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800057f8:	40 2c       	lddsp	r12,sp[0x8]
800057fa:	04 1c       	sub	r12,r2
800057fc:	50 2c       	stdsp	sp[0x8],r12
800057fe:	58 0c       	cp.w	r12,0
80005800:	e0 89 00 20 	brgt	80005840 <_vfprintf_r+0x1894>
80005804:	c3 f8       	rjmp	80005882 <_vfprintf_r+0x18d6>
80005806:	2f 09       	sub	r9,-16
80005808:	2f f8       	sub	r8,-1
8000580a:	fe cb c1 2e 	sub	r11,pc,-16082
8000580e:	31 0a       	mov	r10,16
80005810:	fb 49 06 90 	st.w	sp[1680],r9
80005814:	87 0b       	st.w	r3[0x0],r11
80005816:	87 1a       	st.w	r3[0x4],r10
80005818:	fb 48 06 8c 	st.w	sp[1676],r8
8000581c:	58 78       	cp.w	r8,7
8000581e:	e0 89 00 04 	brgt	80005826 <_vfprintf_r+0x187a>
80005822:	2f 83       	sub	r3,-8
80005824:	c0 b8       	rjmp	8000583a <_vfprintf_r+0x188e>
80005826:	fa ca f9 78 	sub	r10,sp,-1672
8000582a:	02 9b       	mov	r11,r1
8000582c:	08 9c       	mov	r12,r4
8000582e:	fe b0 f3 b1 	rcall	80003f90 <__sprint_r>
80005832:	e0 81 03 3c 	brne	80005eaa <_vfprintf_r+0x1efe>
80005836:	fa c3 f9 e0 	sub	r3,sp,-1568
8000583a:	40 29       	lddsp	r9,sp[0x8]
8000583c:	21 09       	sub	r9,16
8000583e:	50 29       	stdsp	sp[0x8],r9
80005840:	fa f9 06 90 	ld.w	r9,sp[1680]
80005844:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005848:	fe ca c1 6c 	sub	r10,pc,-16020
8000584c:	40 2e       	lddsp	lr,sp[0x8]
8000584e:	59 0e       	cp.w	lr,16
80005850:	fe 99 ff db 	brgt	80005806 <_vfprintf_r+0x185a>
80005854:	1c 09       	add	r9,lr
80005856:	2f f8       	sub	r8,-1
80005858:	87 0a       	st.w	r3[0x0],r10
8000585a:	fb 49 06 90 	st.w	sp[1680],r9
8000585e:	87 1e       	st.w	r3[0x4],lr
80005860:	fb 48 06 8c 	st.w	sp[1676],r8
80005864:	58 78       	cp.w	r8,7
80005866:	e0 89 00 04 	brgt	8000586e <_vfprintf_r+0x18c2>
8000586a:	2f 83       	sub	r3,-8
8000586c:	c0 b8       	rjmp	80005882 <_vfprintf_r+0x18d6>
8000586e:	fa ca f9 78 	sub	r10,sp,-1672
80005872:	02 9b       	mov	r11,r1
80005874:	08 9c       	mov	r12,r4
80005876:	fe b0 f3 8d 	rcall	80003f90 <__sprint_r>
8000587a:	e0 81 03 18 	brne	80005eaa <_vfprintf_r+0x1efe>
8000587e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005882:	ed b5 00 08 	bld	r5,0x8
80005886:	c0 b0       	breq	8000589c <_vfprintf_r+0x18f0>
80005888:	fa f8 06 90 	ld.w	r8,sp[1680]
8000588c:	87 12       	st.w	r3[0x4],r2
8000588e:	87 06       	st.w	r3[0x0],r6
80005890:	f0 02 00 02 	add	r2,r8,r2
80005894:	fb 42 06 90 	st.w	sp[1680],r2
80005898:	e0 8f 01 d4 	bral	80005c40 <_vfprintf_r+0x1c94>
8000589c:	e0 40 00 65 	cp.w	r0,101
800058a0:	e0 8a 01 d6 	brle	80005c4c <_vfprintf_r+0x1ca0>
800058a4:	30 08       	mov	r8,0
800058a6:	30 09       	mov	r9,0
800058a8:	40 5b       	lddsp	r11,sp[0x14]
800058aa:	40 7a       	lddsp	r10,sp[0x1c]
800058ac:	e0 a0 17 ed 	rcall	80008886 <__avr32_f64_cmp_eq>
800058b0:	c7 90       	breq	800059a2 <_vfprintf_r+0x19f6>
800058b2:	fa f8 06 90 	ld.w	r8,sp[1680]
800058b6:	fe c9 c1 ee 	sub	r9,pc,-15890
800058ba:	2f f8       	sub	r8,-1
800058bc:	87 09       	st.w	r3[0x0],r9
800058be:	fb 48 06 90 	st.w	sp[1680],r8
800058c2:	30 19       	mov	r9,1
800058c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058c8:	87 19       	st.w	r3[0x4],r9
800058ca:	2f f8       	sub	r8,-1
800058cc:	fb 48 06 8c 	st.w	sp[1676],r8
800058d0:	58 78       	cp.w	r8,7
800058d2:	e0 89 00 05 	brgt	800058dc <_vfprintf_r+0x1930>
800058d6:	2f 83       	sub	r3,-8
800058d8:	c0 c8       	rjmp	800058f0 <_vfprintf_r+0x1944>
800058da:	d7 03       	nop
800058dc:	fa ca f9 78 	sub	r10,sp,-1672
800058e0:	02 9b       	mov	r11,r1
800058e2:	08 9c       	mov	r12,r4
800058e4:	fe b0 f3 56 	rcall	80003f90 <__sprint_r>
800058e8:	e0 81 02 e1 	brne	80005eaa <_vfprintf_r+0x1efe>
800058ec:	fa c3 f9 e0 	sub	r3,sp,-1568
800058f0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800058f4:	40 6c       	lddsp	r12,sp[0x18]
800058f6:	18 38       	cp.w	r8,r12
800058f8:	c0 55       	brlt	80005902 <_vfprintf_r+0x1956>
800058fa:	ed b5 00 00 	bld	r5,0x0
800058fe:	e0 81 02 6b 	brne	80005dd4 <_vfprintf_r+0x1e28>
80005902:	fa f8 06 90 	ld.w	r8,sp[1680]
80005906:	2f f8       	sub	r8,-1
80005908:	40 cb       	lddsp	r11,sp[0x30]
8000590a:	fb 48 06 90 	st.w	sp[1680],r8
8000590e:	30 19       	mov	r9,1
80005910:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005914:	87 0b       	st.w	r3[0x0],r11
80005916:	2f f8       	sub	r8,-1
80005918:	87 19       	st.w	r3[0x4],r9
8000591a:	fb 48 06 8c 	st.w	sp[1676],r8
8000591e:	58 78       	cp.w	r8,7
80005920:	e0 89 00 04 	brgt	80005928 <_vfprintf_r+0x197c>
80005924:	2f 83       	sub	r3,-8
80005926:	c0 b8       	rjmp	8000593c <_vfprintf_r+0x1990>
80005928:	fa ca f9 78 	sub	r10,sp,-1672
8000592c:	02 9b       	mov	r11,r1
8000592e:	08 9c       	mov	r12,r4
80005930:	fe b0 f3 30 	rcall	80003f90 <__sprint_r>
80005934:	e0 81 02 bb 	brne	80005eaa <_vfprintf_r+0x1efe>
80005938:	fa c3 f9 e0 	sub	r3,sp,-1568
8000593c:	40 66       	lddsp	r6,sp[0x18]
8000593e:	20 16       	sub	r6,1
80005940:	58 06       	cp.w	r6,0
80005942:	e0 89 00 1d 	brgt	8000597c <_vfprintf_r+0x19d0>
80005946:	e0 8f 02 47 	bral	80005dd4 <_vfprintf_r+0x1e28>
8000594a:	2f 09       	sub	r9,-16
8000594c:	2f f8       	sub	r8,-1
8000594e:	fb 49 06 90 	st.w	sp[1680],r9
80005952:	87 02       	st.w	r3[0x0],r2
80005954:	87 10       	st.w	r3[0x4],r0
80005956:	fb 48 06 8c 	st.w	sp[1676],r8
8000595a:	58 78       	cp.w	r8,7
8000595c:	e0 89 00 04 	brgt	80005964 <_vfprintf_r+0x19b8>
80005960:	2f 83       	sub	r3,-8
80005962:	c0 b8       	rjmp	80005978 <_vfprintf_r+0x19cc>
80005964:	fa ca f9 78 	sub	r10,sp,-1672
80005968:	02 9b       	mov	r11,r1
8000596a:	08 9c       	mov	r12,r4
8000596c:	fe b0 f3 12 	rcall	80003f90 <__sprint_r>
80005970:	e0 81 02 9d 	brne	80005eaa <_vfprintf_r+0x1efe>
80005974:	fa c3 f9 e0 	sub	r3,sp,-1568
80005978:	21 06       	sub	r6,16
8000597a:	c0 48       	rjmp	80005982 <_vfprintf_r+0x19d6>
8000597c:	fe c2 c2 a0 	sub	r2,pc,-15712
80005980:	31 00       	mov	r0,16
80005982:	fa f9 06 90 	ld.w	r9,sp[1680]
80005986:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000598a:	fe ca c2 ae 	sub	r10,pc,-15698
8000598e:	59 06       	cp.w	r6,16
80005990:	fe 99 ff dd 	brgt	8000594a <_vfprintf_r+0x199e>
80005994:	0c 09       	add	r9,r6
80005996:	87 0a       	st.w	r3[0x0],r10
80005998:	fb 49 06 90 	st.w	sp[1680],r9
8000599c:	2f f8       	sub	r8,-1
8000599e:	87 16       	st.w	r3[0x4],r6
800059a0:	c5 39       	rjmp	80005c46 <_vfprintf_r+0x1c9a>
800059a2:	fa fa 06 ac 	ld.w	r10,sp[1708]
800059a6:	58 0a       	cp.w	r10,0
800059a8:	e0 89 00 92 	brgt	80005acc <_vfprintf_r+0x1b20>
800059ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800059b0:	fe c9 c2 e8 	sub	r9,pc,-15640
800059b4:	2f f8       	sub	r8,-1
800059b6:	87 09       	st.w	r3[0x0],r9
800059b8:	fb 48 06 90 	st.w	sp[1680],r8
800059bc:	30 19       	mov	r9,1
800059be:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059c2:	87 19       	st.w	r3[0x4],r9
800059c4:	2f f8       	sub	r8,-1
800059c6:	fb 48 06 8c 	st.w	sp[1676],r8
800059ca:	58 78       	cp.w	r8,7
800059cc:	e0 89 00 04 	brgt	800059d4 <_vfprintf_r+0x1a28>
800059d0:	2f 83       	sub	r3,-8
800059d2:	c0 b8       	rjmp	800059e8 <_vfprintf_r+0x1a3c>
800059d4:	fa ca f9 78 	sub	r10,sp,-1672
800059d8:	02 9b       	mov	r11,r1
800059da:	08 9c       	mov	r12,r4
800059dc:	fe b0 f2 da 	rcall	80003f90 <__sprint_r>
800059e0:	e0 81 02 65 	brne	80005eaa <_vfprintf_r+0x1efe>
800059e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800059e8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800059ec:	58 08       	cp.w	r8,0
800059ee:	c0 81       	brne	800059fe <_vfprintf_r+0x1a52>
800059f0:	40 6a       	lddsp	r10,sp[0x18]
800059f2:	58 0a       	cp.w	r10,0
800059f4:	c0 51       	brne	800059fe <_vfprintf_r+0x1a52>
800059f6:	ed b5 00 00 	bld	r5,0x0
800059fa:	e0 81 01 ed 	brne	80005dd4 <_vfprintf_r+0x1e28>
800059fe:	40 c9       	lddsp	r9,sp[0x30]
80005a00:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a04:	2f f8       	sub	r8,-1
80005a06:	87 09       	st.w	r3[0x0],r9
80005a08:	fb 48 06 90 	st.w	sp[1680],r8
80005a0c:	30 19       	mov	r9,1
80005a0e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a12:	87 19       	st.w	r3[0x4],r9
80005a14:	2f f8       	sub	r8,-1
80005a16:	fb 48 06 8c 	st.w	sp[1676],r8
80005a1a:	58 78       	cp.w	r8,7
80005a1c:	e0 89 00 04 	brgt	80005a24 <_vfprintf_r+0x1a78>
80005a20:	2f 83       	sub	r3,-8
80005a22:	c0 b8       	rjmp	80005a38 <_vfprintf_r+0x1a8c>
80005a24:	fa ca f9 78 	sub	r10,sp,-1672
80005a28:	02 9b       	mov	r11,r1
80005a2a:	08 9c       	mov	r12,r4
80005a2c:	fe b0 f2 b2 	rcall	80003f90 <__sprint_r>
80005a30:	e0 81 02 3d 	brne	80005eaa <_vfprintf_r+0x1efe>
80005a34:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a38:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005a3c:	5c 32       	neg	r2
80005a3e:	58 02       	cp.w	r2,0
80005a40:	e0 89 00 1d 	brgt	80005a7a <_vfprintf_r+0x1ace>
80005a44:	c3 d8       	rjmp	80005abe <_vfprintf_r+0x1b12>
80005a46:	2f 09       	sub	r9,-16
80005a48:	2f f8       	sub	r8,-1
80005a4a:	31 0e       	mov	lr,16
80005a4c:	fb 49 06 90 	st.w	sp[1680],r9
80005a50:	87 00       	st.w	r3[0x0],r0
80005a52:	87 1e       	st.w	r3[0x4],lr
80005a54:	fb 48 06 8c 	st.w	sp[1676],r8
80005a58:	58 78       	cp.w	r8,7
80005a5a:	e0 89 00 04 	brgt	80005a62 <_vfprintf_r+0x1ab6>
80005a5e:	2f 83       	sub	r3,-8
80005a60:	c0 b8       	rjmp	80005a76 <_vfprintf_r+0x1aca>
80005a62:	fa ca f9 78 	sub	r10,sp,-1672
80005a66:	02 9b       	mov	r11,r1
80005a68:	08 9c       	mov	r12,r4
80005a6a:	fe b0 f2 93 	rcall	80003f90 <__sprint_r>
80005a6e:	e0 81 02 1e 	brne	80005eaa <_vfprintf_r+0x1efe>
80005a72:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a76:	21 02       	sub	r2,16
80005a78:	c0 38       	rjmp	80005a7e <_vfprintf_r+0x1ad2>
80005a7a:	fe c0 c3 9e 	sub	r0,pc,-15458
80005a7e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a82:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a86:	fe ca c3 aa 	sub	r10,pc,-15446
80005a8a:	59 02       	cp.w	r2,16
80005a8c:	fe 99 ff dd 	brgt	80005a46 <_vfprintf_r+0x1a9a>
80005a90:	04 09       	add	r9,r2
80005a92:	2f f8       	sub	r8,-1
80005a94:	87 0a       	st.w	r3[0x0],r10
80005a96:	fb 49 06 90 	st.w	sp[1680],r9
80005a9a:	87 12       	st.w	r3[0x4],r2
80005a9c:	fb 48 06 8c 	st.w	sp[1676],r8
80005aa0:	58 78       	cp.w	r8,7
80005aa2:	e0 89 00 04 	brgt	80005aaa <_vfprintf_r+0x1afe>
80005aa6:	2f 83       	sub	r3,-8
80005aa8:	c0 b8       	rjmp	80005abe <_vfprintf_r+0x1b12>
80005aaa:	fa ca f9 78 	sub	r10,sp,-1672
80005aae:	02 9b       	mov	r11,r1
80005ab0:	08 9c       	mov	r12,r4
80005ab2:	fe b0 f2 6f 	rcall	80003f90 <__sprint_r>
80005ab6:	e0 81 01 fa 	brne	80005eaa <_vfprintf_r+0x1efe>
80005aba:	fa c3 f9 e0 	sub	r3,sp,-1568
80005abe:	40 6c       	lddsp	r12,sp[0x18]
80005ac0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ac4:	87 06       	st.w	r3[0x0],r6
80005ac6:	87 1c       	st.w	r3[0x4],r12
80005ac8:	18 08       	add	r8,r12
80005aca:	cb 98       	rjmp	80005c3c <_vfprintf_r+0x1c90>
80005acc:	fa f9 06 90 	ld.w	r9,sp[1680]
80005ad0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ad4:	40 6b       	lddsp	r11,sp[0x18]
80005ad6:	16 3a       	cp.w	r10,r11
80005ad8:	c6 f5       	brlt	80005bb6 <_vfprintf_r+0x1c0a>
80005ada:	16 09       	add	r9,r11
80005adc:	2f f8       	sub	r8,-1
80005ade:	87 06       	st.w	r3[0x0],r6
80005ae0:	fb 49 06 90 	st.w	sp[1680],r9
80005ae4:	87 1b       	st.w	r3[0x4],r11
80005ae6:	fb 48 06 8c 	st.w	sp[1676],r8
80005aea:	58 78       	cp.w	r8,7
80005aec:	e0 89 00 04 	brgt	80005af4 <_vfprintf_r+0x1b48>
80005af0:	2f 83       	sub	r3,-8
80005af2:	c0 b8       	rjmp	80005b08 <_vfprintf_r+0x1b5c>
80005af4:	fa ca f9 78 	sub	r10,sp,-1672
80005af8:	02 9b       	mov	r11,r1
80005afa:	08 9c       	mov	r12,r4
80005afc:	fe b0 f2 4a 	rcall	80003f90 <__sprint_r>
80005b00:	e0 81 01 d5 	brne	80005eaa <_vfprintf_r+0x1efe>
80005b04:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b08:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005b0c:	40 6a       	lddsp	r10,sp[0x18]
80005b0e:	14 16       	sub	r6,r10
80005b10:	58 06       	cp.w	r6,0
80005b12:	e0 89 00 1c 	brgt	80005b4a <_vfprintf_r+0x1b9e>
80005b16:	c3 d8       	rjmp	80005b90 <_vfprintf_r+0x1be4>
80005b18:	2f 09       	sub	r9,-16
80005b1a:	2f f8       	sub	r8,-1
80005b1c:	fb 49 06 90 	st.w	sp[1680],r9
80005b20:	87 02       	st.w	r3[0x0],r2
80005b22:	87 10       	st.w	r3[0x4],r0
80005b24:	fb 48 06 8c 	st.w	sp[1676],r8
80005b28:	58 78       	cp.w	r8,7
80005b2a:	e0 89 00 04 	brgt	80005b32 <_vfprintf_r+0x1b86>
80005b2e:	2f 83       	sub	r3,-8
80005b30:	c0 b8       	rjmp	80005b46 <_vfprintf_r+0x1b9a>
80005b32:	fa ca f9 78 	sub	r10,sp,-1672
80005b36:	02 9b       	mov	r11,r1
80005b38:	08 9c       	mov	r12,r4
80005b3a:	fe b0 f2 2b 	rcall	80003f90 <__sprint_r>
80005b3e:	e0 81 01 b6 	brne	80005eaa <_vfprintf_r+0x1efe>
80005b42:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b46:	21 06       	sub	r6,16
80005b48:	c0 48       	rjmp	80005b50 <_vfprintf_r+0x1ba4>
80005b4a:	fe c2 c4 6e 	sub	r2,pc,-15250
80005b4e:	31 00       	mov	r0,16
80005b50:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b54:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b58:	fe ca c4 7c 	sub	r10,pc,-15236
80005b5c:	59 06       	cp.w	r6,16
80005b5e:	fe 99 ff dd 	brgt	80005b18 <_vfprintf_r+0x1b6c>
80005b62:	0c 09       	add	r9,r6
80005b64:	2f f8       	sub	r8,-1
80005b66:	87 0a       	st.w	r3[0x0],r10
80005b68:	fb 49 06 90 	st.w	sp[1680],r9
80005b6c:	87 16       	st.w	r3[0x4],r6
80005b6e:	fb 48 06 8c 	st.w	sp[1676],r8
80005b72:	58 78       	cp.w	r8,7
80005b74:	e0 89 00 04 	brgt	80005b7c <_vfprintf_r+0x1bd0>
80005b78:	2f 83       	sub	r3,-8
80005b7a:	c0 b8       	rjmp	80005b90 <_vfprintf_r+0x1be4>
80005b7c:	fa ca f9 78 	sub	r10,sp,-1672
80005b80:	02 9b       	mov	r11,r1
80005b82:	08 9c       	mov	r12,r4
80005b84:	fe b0 f2 06 	rcall	80003f90 <__sprint_r>
80005b88:	e0 81 01 91 	brne	80005eaa <_vfprintf_r+0x1efe>
80005b8c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b90:	ed b5 00 00 	bld	r5,0x0
80005b94:	e0 81 01 20 	brne	80005dd4 <_vfprintf_r+0x1e28>
80005b98:	40 c9       	lddsp	r9,sp[0x30]
80005b9a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b9e:	2f f8       	sub	r8,-1
80005ba0:	87 09       	st.w	r3[0x0],r9
80005ba2:	fb 48 06 90 	st.w	sp[1680],r8
80005ba6:	30 19       	mov	r9,1
80005ba8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bac:	87 19       	st.w	r3[0x4],r9
80005bae:	2f f8       	sub	r8,-1
80005bb0:	fb 48 06 8c 	st.w	sp[1676],r8
80005bb4:	c0 29       	rjmp	80005db8 <_vfprintf_r+0x1e0c>
80005bb6:	14 09       	add	r9,r10
80005bb8:	2f f8       	sub	r8,-1
80005bba:	fb 49 06 90 	st.w	sp[1680],r9
80005bbe:	87 06       	st.w	r3[0x0],r6
80005bc0:	87 1a       	st.w	r3[0x4],r10
80005bc2:	fb 48 06 8c 	st.w	sp[1676],r8
80005bc6:	58 78       	cp.w	r8,7
80005bc8:	e0 89 00 04 	brgt	80005bd0 <_vfprintf_r+0x1c24>
80005bcc:	2f 83       	sub	r3,-8
80005bce:	c0 b8       	rjmp	80005be4 <_vfprintf_r+0x1c38>
80005bd0:	fa ca f9 78 	sub	r10,sp,-1672
80005bd4:	02 9b       	mov	r11,r1
80005bd6:	08 9c       	mov	r12,r4
80005bd8:	fe b0 f1 dc 	rcall	80003f90 <__sprint_r>
80005bdc:	e0 81 01 67 	brne	80005eaa <_vfprintf_r+0x1efe>
80005be0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005be4:	40 c8       	lddsp	r8,sp[0x30]
80005be6:	87 08       	st.w	r3[0x0],r8
80005be8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bec:	2f f8       	sub	r8,-1
80005bee:	30 19       	mov	r9,1
80005bf0:	fb 48 06 90 	st.w	sp[1680],r8
80005bf4:	87 19       	st.w	r3[0x4],r9
80005bf6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bfa:	2f f8       	sub	r8,-1
80005bfc:	fb 48 06 8c 	st.w	sp[1676],r8
80005c00:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005c04:	58 78       	cp.w	r8,7
80005c06:	e0 89 00 04 	brgt	80005c0e <_vfprintf_r+0x1c62>
80005c0a:	2f 83       	sub	r3,-8
80005c0c:	c0 b8       	rjmp	80005c22 <_vfprintf_r+0x1c76>
80005c0e:	fa ca f9 78 	sub	r10,sp,-1672
80005c12:	02 9b       	mov	r11,r1
80005c14:	08 9c       	mov	r12,r4
80005c16:	fe b0 f1 bd 	rcall	80003f90 <__sprint_r>
80005c1a:	e0 81 01 48 	brne	80005eaa <_vfprintf_r+0x1efe>
80005c1e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c22:	04 06       	add	r6,r2
80005c24:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005c28:	87 06       	st.w	r3[0x0],r6
80005c2a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c2e:	40 66       	lddsp	r6,sp[0x18]
80005c30:	40 6e       	lddsp	lr,sp[0x18]
80005c32:	10 16       	sub	r6,r8
80005c34:	f2 08 01 08 	sub	r8,r9,r8
80005c38:	87 16       	st.w	r3[0x4],r6
80005c3a:	1c 08       	add	r8,lr
80005c3c:	fb 48 06 90 	st.w	sp[1680],r8
80005c40:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c44:	2f f8       	sub	r8,-1
80005c46:	fb 48 06 8c 	st.w	sp[1676],r8
80005c4a:	cb 78       	rjmp	80005db8 <_vfprintf_r+0x1e0c>
80005c4c:	40 6c       	lddsp	r12,sp[0x18]
80005c4e:	58 1c       	cp.w	r12,1
80005c50:	e0 89 00 06 	brgt	80005c5c <_vfprintf_r+0x1cb0>
80005c54:	ed b5 00 00 	bld	r5,0x0
80005c58:	e0 81 00 85 	brne	80005d62 <_vfprintf_r+0x1db6>
80005c5c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c60:	2f f8       	sub	r8,-1
80005c62:	30 19       	mov	r9,1
80005c64:	fb 48 06 90 	st.w	sp[1680],r8
80005c68:	87 06       	st.w	r3[0x0],r6
80005c6a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c6e:	87 19       	st.w	r3[0x4],r9
80005c70:	2f f8       	sub	r8,-1
80005c72:	fb 48 06 8c 	st.w	sp[1676],r8
80005c76:	58 78       	cp.w	r8,7
80005c78:	e0 89 00 04 	brgt	80005c80 <_vfprintf_r+0x1cd4>
80005c7c:	2f 83       	sub	r3,-8
80005c7e:	c0 b8       	rjmp	80005c94 <_vfprintf_r+0x1ce8>
80005c80:	fa ca f9 78 	sub	r10,sp,-1672
80005c84:	02 9b       	mov	r11,r1
80005c86:	08 9c       	mov	r12,r4
80005c88:	fe b0 f1 84 	rcall	80003f90 <__sprint_r>
80005c8c:	e0 81 01 0f 	brne	80005eaa <_vfprintf_r+0x1efe>
80005c90:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c94:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c98:	2f f8       	sub	r8,-1
80005c9a:	40 cb       	lddsp	r11,sp[0x30]
80005c9c:	fb 48 06 90 	st.w	sp[1680],r8
80005ca0:	30 19       	mov	r9,1
80005ca2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ca6:	87 0b       	st.w	r3[0x0],r11
80005ca8:	2f f8       	sub	r8,-1
80005caa:	87 19       	st.w	r3[0x4],r9
80005cac:	fb 48 06 8c 	st.w	sp[1676],r8
80005cb0:	58 78       	cp.w	r8,7
80005cb2:	e0 89 00 05 	brgt	80005cbc <_vfprintf_r+0x1d10>
80005cb6:	2f 83       	sub	r3,-8
80005cb8:	c0 c8       	rjmp	80005cd0 <_vfprintf_r+0x1d24>
80005cba:	d7 03       	nop
80005cbc:	fa ca f9 78 	sub	r10,sp,-1672
80005cc0:	02 9b       	mov	r11,r1
80005cc2:	08 9c       	mov	r12,r4
80005cc4:	fe b0 f1 66 	rcall	80003f90 <__sprint_r>
80005cc8:	e0 81 00 f1 	brne	80005eaa <_vfprintf_r+0x1efe>
80005ccc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cd0:	30 08       	mov	r8,0
80005cd2:	30 09       	mov	r9,0
80005cd4:	40 5b       	lddsp	r11,sp[0x14]
80005cd6:	40 7a       	lddsp	r10,sp[0x1c]
80005cd8:	e0 a0 15 d7 	rcall	80008886 <__avr32_f64_cmp_eq>
80005cdc:	40 68       	lddsp	r8,sp[0x18]
80005cde:	20 18       	sub	r8,1
80005ce0:	58 0c       	cp.w	r12,0
80005ce2:	c0 d1       	brne	80005cfc <_vfprintf_r+0x1d50>
80005ce4:	2f f6       	sub	r6,-1
80005ce6:	87 18       	st.w	r3[0x4],r8
80005ce8:	87 06       	st.w	r3[0x0],r6
80005cea:	fa f6 06 90 	ld.w	r6,sp[1680]
80005cee:	10 06       	add	r6,r8
80005cf0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cf4:	fb 46 06 90 	st.w	sp[1680],r6
80005cf8:	2f f8       	sub	r8,-1
80005cfa:	c3 18       	rjmp	80005d5c <_vfprintf_r+0x1db0>
80005cfc:	10 96       	mov	r6,r8
80005cfe:	58 08       	cp.w	r8,0
80005d00:	e0 89 00 1c 	brgt	80005d38 <_vfprintf_r+0x1d8c>
80005d04:	c4 b8       	rjmp	80005d9a <_vfprintf_r+0x1dee>
80005d06:	2f 09       	sub	r9,-16
80005d08:	2f f8       	sub	r8,-1
80005d0a:	fb 49 06 90 	st.w	sp[1680],r9
80005d0e:	87 02       	st.w	r3[0x0],r2
80005d10:	87 10       	st.w	r3[0x4],r0
80005d12:	fb 48 06 8c 	st.w	sp[1676],r8
80005d16:	58 78       	cp.w	r8,7
80005d18:	e0 89 00 04 	brgt	80005d20 <_vfprintf_r+0x1d74>
80005d1c:	2f 83       	sub	r3,-8
80005d1e:	c0 b8       	rjmp	80005d34 <_vfprintf_r+0x1d88>
80005d20:	fa ca f9 78 	sub	r10,sp,-1672
80005d24:	02 9b       	mov	r11,r1
80005d26:	08 9c       	mov	r12,r4
80005d28:	fe b0 f1 34 	rcall	80003f90 <__sprint_r>
80005d2c:	e0 81 00 bf 	brne	80005eaa <_vfprintf_r+0x1efe>
80005d30:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d34:	21 06       	sub	r6,16
80005d36:	c0 48       	rjmp	80005d3e <_vfprintf_r+0x1d92>
80005d38:	fe c2 c6 5c 	sub	r2,pc,-14756
80005d3c:	31 00       	mov	r0,16
80005d3e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d42:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d46:	fe ca c6 6a 	sub	r10,pc,-14742
80005d4a:	59 06       	cp.w	r6,16
80005d4c:	fe 99 ff dd 	brgt	80005d06 <_vfprintf_r+0x1d5a>
80005d50:	0c 09       	add	r9,r6
80005d52:	87 0a       	st.w	r3[0x0],r10
80005d54:	fb 49 06 90 	st.w	sp[1680],r9
80005d58:	2f f8       	sub	r8,-1
80005d5a:	87 16       	st.w	r3[0x4],r6
80005d5c:	fb 48 06 8c 	st.w	sp[1676],r8
80005d60:	c0 e8       	rjmp	80005d7c <_vfprintf_r+0x1dd0>
80005d62:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d66:	2f f8       	sub	r8,-1
80005d68:	30 19       	mov	r9,1
80005d6a:	fb 48 06 90 	st.w	sp[1680],r8
80005d6e:	87 06       	st.w	r3[0x0],r6
80005d70:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d74:	87 19       	st.w	r3[0x4],r9
80005d76:	2f f8       	sub	r8,-1
80005d78:	fb 48 06 8c 	st.w	sp[1676],r8
80005d7c:	58 78       	cp.w	r8,7
80005d7e:	e0 89 00 04 	brgt	80005d86 <_vfprintf_r+0x1dda>
80005d82:	2f 83       	sub	r3,-8
80005d84:	c0 b8       	rjmp	80005d9a <_vfprintf_r+0x1dee>
80005d86:	fa ca f9 78 	sub	r10,sp,-1672
80005d8a:	02 9b       	mov	r11,r1
80005d8c:	08 9c       	mov	r12,r4
80005d8e:	fe b0 f1 01 	rcall	80003f90 <__sprint_r>
80005d92:	e0 81 00 8c 	brne	80005eaa <_vfprintf_r+0x1efe>
80005d96:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d9a:	40 ea       	lddsp	r10,sp[0x38]
80005d9c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005da0:	14 08       	add	r8,r10
80005da2:	fa c9 f9 64 	sub	r9,sp,-1692
80005da6:	fb 48 06 90 	st.w	sp[1680],r8
80005daa:	87 1a       	st.w	r3[0x4],r10
80005dac:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005db0:	87 09       	st.w	r3[0x0],r9
80005db2:	2f f8       	sub	r8,-1
80005db4:	fb 48 06 8c 	st.w	sp[1676],r8
80005db8:	58 78       	cp.w	r8,7
80005dba:	e0 89 00 04 	brgt	80005dc2 <_vfprintf_r+0x1e16>
80005dbe:	2f 83       	sub	r3,-8
80005dc0:	c0 a8       	rjmp	80005dd4 <_vfprintf_r+0x1e28>
80005dc2:	fa ca f9 78 	sub	r10,sp,-1672
80005dc6:	02 9b       	mov	r11,r1
80005dc8:	08 9c       	mov	r12,r4
80005dca:	fe b0 f0 e3 	rcall	80003f90 <__sprint_r>
80005dce:	c6 e1       	brne	80005eaa <_vfprintf_r+0x1efe>
80005dd0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dd4:	e2 15 00 04 	andl	r5,0x4,COH
80005dd8:	c3 f0       	breq	80005e56 <_vfprintf_r+0x1eaa>
80005dda:	40 86       	lddsp	r6,sp[0x20]
80005ddc:	40 39       	lddsp	r9,sp[0xc]
80005dde:	12 16       	sub	r6,r9
80005de0:	58 06       	cp.w	r6,0
80005de2:	e0 89 00 1a 	brgt	80005e16 <_vfprintf_r+0x1e6a>
80005de6:	c3 88       	rjmp	80005e56 <_vfprintf_r+0x1eaa>
80005de8:	2f 09       	sub	r9,-16
80005dea:	2f f8       	sub	r8,-1
80005dec:	fb 49 06 90 	st.w	sp[1680],r9
80005df0:	87 05       	st.w	r3[0x0],r5
80005df2:	87 12       	st.w	r3[0x4],r2
80005df4:	fb 48 06 8c 	st.w	sp[1676],r8
80005df8:	58 78       	cp.w	r8,7
80005dfa:	e0 89 00 04 	brgt	80005e02 <_vfprintf_r+0x1e56>
80005dfe:	2f 83       	sub	r3,-8
80005e00:	c0 98       	rjmp	80005e12 <_vfprintf_r+0x1e66>
80005e02:	00 9a       	mov	r10,r0
80005e04:	02 9b       	mov	r11,r1
80005e06:	08 9c       	mov	r12,r4
80005e08:	fe b0 f0 c4 	rcall	80003f90 <__sprint_r>
80005e0c:	c4 f1       	brne	80005eaa <_vfprintf_r+0x1efe>
80005e0e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e12:	21 06       	sub	r6,16
80005e14:	c0 68       	rjmp	80005e20 <_vfprintf_r+0x1e74>
80005e16:	fe c5 c7 4a 	sub	r5,pc,-14518
80005e1a:	31 02       	mov	r2,16
80005e1c:	fa c0 f9 78 	sub	r0,sp,-1672
80005e20:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e24:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e28:	fe ca c7 5c 	sub	r10,pc,-14500
80005e2c:	59 06       	cp.w	r6,16
80005e2e:	fe 99 ff dd 	brgt	80005de8 <_vfprintf_r+0x1e3c>
80005e32:	0c 09       	add	r9,r6
80005e34:	2f f8       	sub	r8,-1
80005e36:	87 0a       	st.w	r3[0x0],r10
80005e38:	87 16       	st.w	r3[0x4],r6
80005e3a:	fb 49 06 90 	st.w	sp[1680],r9
80005e3e:	fb 48 06 8c 	st.w	sp[1676],r8
80005e42:	58 78       	cp.w	r8,7
80005e44:	e0 8a 00 09 	brle	80005e56 <_vfprintf_r+0x1eaa>
80005e48:	fa ca f9 78 	sub	r10,sp,-1672
80005e4c:	02 9b       	mov	r11,r1
80005e4e:	08 9c       	mov	r12,r4
80005e50:	fe b0 f0 a0 	rcall	80003f90 <__sprint_r>
80005e54:	c2 b1       	brne	80005eaa <_vfprintf_r+0x1efe>
80005e56:	40 bc       	lddsp	r12,sp[0x2c]
80005e58:	40 36       	lddsp	r6,sp[0xc]
80005e5a:	40 8e       	lddsp	lr,sp[0x20]
80005e5c:	ec 0e 0c 48 	max	r8,r6,lr
80005e60:	10 0c       	add	r12,r8
80005e62:	50 bc       	stdsp	sp[0x2c],r12
80005e64:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e68:	58 08       	cp.w	r8,0
80005e6a:	c0 80       	breq	80005e7a <_vfprintf_r+0x1ece>
80005e6c:	fa ca f9 78 	sub	r10,sp,-1672
80005e70:	02 9b       	mov	r11,r1
80005e72:	08 9c       	mov	r12,r4
80005e74:	fe b0 f0 8e 	rcall	80003f90 <__sprint_r>
80005e78:	c1 91       	brne	80005eaa <_vfprintf_r+0x1efe>
80005e7a:	30 0b       	mov	r11,0
80005e7c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e80:	fb 4b 06 8c 	st.w	sp[1676],r11
80005e84:	fe 9f f1 22 	bral	800040c8 <_vfprintf_r+0x11c>
80005e88:	08 95       	mov	r5,r4
80005e8a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e8e:	58 08       	cp.w	r8,0
80005e90:	c0 80       	breq	80005ea0 <_vfprintf_r+0x1ef4>
80005e92:	08 9c       	mov	r12,r4
80005e94:	fa ca f9 78 	sub	r10,sp,-1672
80005e98:	02 9b       	mov	r11,r1
80005e9a:	fe b0 f0 7b 	rcall	80003f90 <__sprint_r>
80005e9e:	c0 61       	brne	80005eaa <_vfprintf_r+0x1efe>
80005ea0:	30 08       	mov	r8,0
80005ea2:	fb 48 06 8c 	st.w	sp[1676],r8
80005ea6:	c0 28       	rjmp	80005eaa <_vfprintf_r+0x1efe>
80005ea8:	40 41       	lddsp	r1,sp[0x10]
80005eaa:	82 68       	ld.sh	r8,r1[0xc]
80005eac:	ed b8 00 06 	bld	r8,0x6
80005eb0:	c0 31       	brne	80005eb6 <_vfprintf_r+0x1f0a>
80005eb2:	3f fa       	mov	r10,-1
80005eb4:	50 ba       	stdsp	sp[0x2c],r10
80005eb6:	40 bc       	lddsp	r12,sp[0x2c]
80005eb8:	fe 3d f9 44 	sub	sp,-1724
80005ebc:	d8 32       	popm	r0-r7,pc
80005ebe:	d7 03       	nop

80005ec0 <__swsetup_r>:
80005ec0:	d4 21       	pushm	r4-r7,lr
80005ec2:	e0 68 01 18 	mov	r8,280
80005ec6:	18 96       	mov	r6,r12
80005ec8:	16 97       	mov	r7,r11
80005eca:	70 0c       	ld.w	r12,r8[0x0]
80005ecc:	58 0c       	cp.w	r12,0
80005ece:	c0 60       	breq	80005eda <__swsetup_r+0x1a>
80005ed0:	78 68       	ld.w	r8,r12[0x18]
80005ed2:	58 08       	cp.w	r8,0
80005ed4:	c0 31       	brne	80005eda <__swsetup_r+0x1a>
80005ed6:	e0 a0 07 b9 	rcall	80006e48 <__sinit>
80005eda:	fe c8 c6 de 	sub	r8,pc,-14626
80005ede:	10 37       	cp.w	r7,r8
80005ee0:	c0 61       	brne	80005eec <__swsetup_r+0x2c>
80005ee2:	e0 68 01 18 	mov	r8,280
80005ee6:	70 08       	ld.w	r8,r8[0x0]
80005ee8:	70 07       	ld.w	r7,r8[0x0]
80005eea:	c1 28       	rjmp	80005f0e <__swsetup_r+0x4e>
80005eec:	fe c8 c6 d0 	sub	r8,pc,-14640
80005ef0:	10 37       	cp.w	r7,r8
80005ef2:	c0 61       	brne	80005efe <__swsetup_r+0x3e>
80005ef4:	e0 68 01 18 	mov	r8,280
80005ef8:	70 08       	ld.w	r8,r8[0x0]
80005efa:	70 17       	ld.w	r7,r8[0x4]
80005efc:	c0 98       	rjmp	80005f0e <__swsetup_r+0x4e>
80005efe:	fe c8 c6 c2 	sub	r8,pc,-14654
80005f02:	10 37       	cp.w	r7,r8
80005f04:	c0 51       	brne	80005f0e <__swsetup_r+0x4e>
80005f06:	e0 68 01 18 	mov	r8,280
80005f0a:	70 08       	ld.w	r8,r8[0x0]
80005f0c:	70 27       	ld.w	r7,r8[0x8]
80005f0e:	8e 68       	ld.sh	r8,r7[0xc]
80005f10:	ed b8 00 03 	bld	r8,0x3
80005f14:	c1 e0       	breq	80005f50 <__swsetup_r+0x90>
80005f16:	ed b8 00 04 	bld	r8,0x4
80005f1a:	c3 e1       	brne	80005f96 <__swsetup_r+0xd6>
80005f1c:	ed b8 00 02 	bld	r8,0x2
80005f20:	c1 51       	brne	80005f4a <__swsetup_r+0x8a>
80005f22:	6e db       	ld.w	r11,r7[0x34]
80005f24:	58 0b       	cp.w	r11,0
80005f26:	c0 a0       	breq	80005f3a <__swsetup_r+0x7a>
80005f28:	ee c8 ff bc 	sub	r8,r7,-68
80005f2c:	10 3b       	cp.w	r11,r8
80005f2e:	c0 40       	breq	80005f36 <__swsetup_r+0x76>
80005f30:	0c 9c       	mov	r12,r6
80005f32:	e0 a0 08 25 	rcall	80006f7c <_free_r>
80005f36:	30 08       	mov	r8,0
80005f38:	8f d8       	st.w	r7[0x34],r8
80005f3a:	8e 68       	ld.sh	r8,r7[0xc]
80005f3c:	e0 18 ff db 	andl	r8,0xffdb
80005f40:	ae 68       	st.h	r7[0xc],r8
80005f42:	30 08       	mov	r8,0
80005f44:	8f 18       	st.w	r7[0x4],r8
80005f46:	6e 48       	ld.w	r8,r7[0x10]
80005f48:	8f 08       	st.w	r7[0x0],r8
80005f4a:	8e 68       	ld.sh	r8,r7[0xc]
80005f4c:	a3 b8       	sbr	r8,0x3
80005f4e:	ae 68       	st.h	r7[0xc],r8
80005f50:	6e 48       	ld.w	r8,r7[0x10]
80005f52:	58 08       	cp.w	r8,0
80005f54:	c0 b1       	brne	80005f6a <__swsetup_r+0xaa>
80005f56:	8e 68       	ld.sh	r8,r7[0xc]
80005f58:	e2 18 02 80 	andl	r8,0x280,COH
80005f5c:	e0 48 02 00 	cp.w	r8,512
80005f60:	c0 50       	breq	80005f6a <__swsetup_r+0xaa>
80005f62:	0c 9c       	mov	r12,r6
80005f64:	0e 9b       	mov	r11,r7
80005f66:	e0 a0 0a 4b 	rcall	800073fc <__smakebuf_r>
80005f6a:	8e 69       	ld.sh	r9,r7[0xc]
80005f6c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005f70:	c0 70       	breq	80005f7e <__swsetup_r+0xbe>
80005f72:	30 08       	mov	r8,0
80005f74:	8f 28       	st.w	r7[0x8],r8
80005f76:	6e 58       	ld.w	r8,r7[0x14]
80005f78:	5c 38       	neg	r8
80005f7a:	8f 68       	st.w	r7[0x18],r8
80005f7c:	c0 68       	rjmp	80005f88 <__swsetup_r+0xc8>
80005f7e:	ed b9 00 01 	bld	r9,0x1
80005f82:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005f86:	8f 28       	st.w	r7[0x8],r8
80005f88:	6e 48       	ld.w	r8,r7[0x10]
80005f8a:	58 08       	cp.w	r8,0
80005f8c:	c0 61       	brne	80005f98 <__swsetup_r+0xd8>
80005f8e:	8e 68       	ld.sh	r8,r7[0xc]
80005f90:	ed b8 00 07 	bld	r8,0x7
80005f94:	c0 21       	brne	80005f98 <__swsetup_r+0xd8>
80005f96:	dc 2a       	popm	r4-r7,pc,r12=-1
80005f98:	d8 2a       	popm	r4-r7,pc,r12=0
80005f9a:	d7 03       	nop

80005f9c <quorem>:
80005f9c:	d4 31       	pushm	r0-r7,lr
80005f9e:	20 2d       	sub	sp,8
80005fa0:	18 97       	mov	r7,r12
80005fa2:	78 48       	ld.w	r8,r12[0x10]
80005fa4:	76 46       	ld.w	r6,r11[0x10]
80005fa6:	0c 38       	cp.w	r8,r6
80005fa8:	c0 34       	brge	80005fae <quorem+0x12>
80005faa:	30 0c       	mov	r12,0
80005fac:	c8 58       	rjmp	800060b6 <quorem+0x11a>
80005fae:	ec c2 ff fc 	sub	r2,r6,-4
80005fb2:	f6 c3 ff ec 	sub	r3,r11,-20
80005fb6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005fba:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005fbe:	2f f9       	sub	r9,-1
80005fc0:	20 16       	sub	r6,1
80005fc2:	f8 09 0d 08 	divu	r8,r12,r9
80005fc6:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005fca:	ee c4 ff ec 	sub	r4,r7,-20
80005fce:	10 95       	mov	r5,r8
80005fd0:	58 08       	cp.w	r8,0
80005fd2:	c4 10       	breq	80006054 <quorem+0xb8>
80005fd4:	30 09       	mov	r9,0
80005fd6:	06 9a       	mov	r10,r3
80005fd8:	08 98       	mov	r8,r4
80005fda:	12 91       	mov	r1,r9
80005fdc:	50 0b       	stdsp	sp[0x0],r11
80005fde:	70 0e       	ld.w	lr,r8[0x0]
80005fe0:	b1 8e       	lsr	lr,0x10
80005fe2:	50 1e       	stdsp	sp[0x4],lr
80005fe4:	15 0e       	ld.w	lr,r10++
80005fe6:	fc 00 16 10 	lsr	r0,lr,0x10
80005fea:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005fee:	ea 0e 03 41 	mac	r1,r5,lr
80005ff2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005ff6:	b1 81       	lsr	r1,0x10
80005ff8:	40 1b       	lddsp	r11,sp[0x4]
80005ffa:	ea 00 02 40 	mul	r0,r5,r0
80005ffe:	e2 00 00 00 	add	r0,r1,r0
80006002:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80006006:	02 1b       	sub	r11,r1
80006008:	50 1b       	stdsp	sp[0x4],r11
8000600a:	70 0b       	ld.w	r11,r8[0x0]
8000600c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006010:	02 09       	add	r9,r1
80006012:	f2 0e 01 0e 	sub	lr,r9,lr
80006016:	b0 1e       	st.h	r8[0x2],lr
80006018:	fc 09 14 10 	asr	r9,lr,0x10
8000601c:	40 1e       	lddsp	lr,sp[0x4]
8000601e:	fc 09 00 09 	add	r9,lr,r9
80006022:	b0 09       	st.h	r8[0x0],r9
80006024:	e0 01 16 10 	lsr	r1,r0,0x10
80006028:	2f c8       	sub	r8,-4
8000602a:	b1 49       	asr	r9,0x10
8000602c:	04 3a       	cp.w	r10,r2
8000602e:	fe 98 ff d8 	brls	80005fde <quorem+0x42>
80006032:	40 0b       	lddsp	r11,sp[0x0]
80006034:	58 0c       	cp.w	r12,0
80006036:	c0 f1       	brne	80006054 <quorem+0xb8>
80006038:	ec c8 ff fb 	sub	r8,r6,-5
8000603c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006040:	c0 28       	rjmp	80006044 <quorem+0xa8>
80006042:	20 16       	sub	r6,1
80006044:	20 48       	sub	r8,4
80006046:	08 38       	cp.w	r8,r4
80006048:	e0 88 00 05 	brls	80006052 <quorem+0xb6>
8000604c:	70 09       	ld.w	r9,r8[0x0]
8000604e:	58 09       	cp.w	r9,0
80006050:	cf 90       	breq	80006042 <quorem+0xa6>
80006052:	8f 46       	st.w	r7[0x10],r6
80006054:	0e 9c       	mov	r12,r7
80006056:	e0 a0 0c f4 	rcall	80007a3e <__mcmp>
8000605a:	c2 d5       	brlt	800060b4 <quorem+0x118>
8000605c:	2f f5       	sub	r5,-1
8000605e:	08 98       	mov	r8,r4
80006060:	30 09       	mov	r9,0
80006062:	07 0b       	ld.w	r11,r3++
80006064:	f6 0a 16 10 	lsr	r10,r11,0x10
80006068:	70 0c       	ld.w	r12,r8[0x0]
8000606a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000606e:	f8 0e 16 10 	lsr	lr,r12,0x10
80006072:	14 1e       	sub	lr,r10
80006074:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006078:	16 1a       	sub	r10,r11
8000607a:	12 0a       	add	r10,r9
8000607c:	b0 1a       	st.h	r8[0x2],r10
8000607e:	b1 4a       	asr	r10,0x10
80006080:	fc 0a 00 09 	add	r9,lr,r10
80006084:	b0 09       	st.h	r8[0x0],r9
80006086:	2f c8       	sub	r8,-4
80006088:	b1 49       	asr	r9,0x10
8000608a:	04 33       	cp.w	r3,r2
8000608c:	fe 98 ff eb 	brls	80006062 <quorem+0xc6>
80006090:	ec c8 ff fb 	sub	r8,r6,-5
80006094:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006098:	58 09       	cp.w	r9,0
8000609a:	c0 d1       	brne	800060b4 <quorem+0x118>
8000609c:	ee 08 00 28 	add	r8,r7,r8<<0x2
800060a0:	c0 28       	rjmp	800060a4 <quorem+0x108>
800060a2:	20 16       	sub	r6,1
800060a4:	20 48       	sub	r8,4
800060a6:	08 38       	cp.w	r8,r4
800060a8:	e0 88 00 05 	brls	800060b2 <quorem+0x116>
800060ac:	70 09       	ld.w	r9,r8[0x0]
800060ae:	58 09       	cp.w	r9,0
800060b0:	cf 90       	breq	800060a2 <quorem+0x106>
800060b2:	8f 46       	st.w	r7[0x10],r6
800060b4:	0a 9c       	mov	r12,r5
800060b6:	2f ed       	sub	sp,-8
800060b8:	d8 32       	popm	r0-r7,pc
800060ba:	d7 03       	nop

800060bc <_dtoa_r>:
800060bc:	d4 31       	pushm	r0-r7,lr
800060be:	21 ad       	sub	sp,104
800060c0:	fa c4 ff 74 	sub	r4,sp,-140
800060c4:	18 97       	mov	r7,r12
800060c6:	16 95       	mov	r5,r11
800060c8:	68 2c       	ld.w	r12,r4[0x8]
800060ca:	50 c9       	stdsp	sp[0x30],r9
800060cc:	68 16       	ld.w	r6,r4[0x4]
800060ce:	68 09       	ld.w	r9,r4[0x0]
800060d0:	50 e8       	stdsp	sp[0x38],r8
800060d2:	14 94       	mov	r4,r10
800060d4:	51 2c       	stdsp	sp[0x48],r12
800060d6:	fa e5 00 08 	st.d	sp[8],r4
800060da:	51 59       	stdsp	sp[0x54],r9
800060dc:	6e 95       	ld.w	r5,r7[0x24]
800060de:	58 05       	cp.w	r5,0
800060e0:	c0 91       	brne	800060f2 <_dtoa_r+0x36>
800060e2:	31 0c       	mov	r12,16
800060e4:	e0 a0 09 ea 	rcall	800074b8 <malloc>
800060e8:	99 35       	st.w	r12[0xc],r5
800060ea:	8f 9c       	st.w	r7[0x24],r12
800060ec:	99 15       	st.w	r12[0x4],r5
800060ee:	99 25       	st.w	r12[0x8],r5
800060f0:	99 05       	st.w	r12[0x0],r5
800060f2:	6e 99       	ld.w	r9,r7[0x24]
800060f4:	72 08       	ld.w	r8,r9[0x0]
800060f6:	58 08       	cp.w	r8,0
800060f8:	c0 f0       	breq	80006116 <_dtoa_r+0x5a>
800060fa:	72 1a       	ld.w	r10,r9[0x4]
800060fc:	91 1a       	st.w	r8[0x4],r10
800060fe:	30 1a       	mov	r10,1
80006100:	72 19       	ld.w	r9,r9[0x4]
80006102:	f4 09 09 49 	lsl	r9,r10,r9
80006106:	10 9b       	mov	r11,r8
80006108:	91 29       	st.w	r8[0x8],r9
8000610a:	0e 9c       	mov	r12,r7
8000610c:	e0 a0 0c b2 	rcall	80007a70 <_Bfree>
80006110:	6e 98       	ld.w	r8,r7[0x24]
80006112:	30 09       	mov	r9,0
80006114:	91 09       	st.w	r8[0x0],r9
80006116:	40 28       	lddsp	r8,sp[0x8]
80006118:	10 94       	mov	r4,r8
8000611a:	58 08       	cp.w	r8,0
8000611c:	c0 64       	brge	80006128 <_dtoa_r+0x6c>
8000611e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80006122:	50 28       	stdsp	sp[0x8],r8
80006124:	30 18       	mov	r8,1
80006126:	c0 28       	rjmp	8000612a <_dtoa_r+0x6e>
80006128:	30 08       	mov	r8,0
8000612a:	8d 08       	st.w	r6[0x0],r8
8000612c:	fc 1c 7f f0 	movh	r12,0x7ff0
80006130:	40 26       	lddsp	r6,sp[0x8]
80006132:	0c 98       	mov	r8,r6
80006134:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006138:	18 38       	cp.w	r8,r12
8000613a:	c2 01       	brne	8000617a <_dtoa_r+0xbe>
8000613c:	e0 68 27 0f 	mov	r8,9999
80006140:	41 5b       	lddsp	r11,sp[0x54]
80006142:	97 08       	st.w	r11[0x0],r8
80006144:	40 3a       	lddsp	r10,sp[0xc]
80006146:	58 0a       	cp.w	r10,0
80006148:	c0 71       	brne	80006156 <_dtoa_r+0x9a>
8000614a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000614e:	c0 41       	brne	80006156 <_dtoa_r+0x9a>
80006150:	fe cc c9 64 	sub	r12,pc,-13980
80006154:	c0 38       	rjmp	8000615a <_dtoa_r+0x9e>
80006156:	fe cc c9 5e 	sub	r12,pc,-13986
8000615a:	41 29       	lddsp	r9,sp[0x48]
8000615c:	58 09       	cp.w	r9,0
8000615e:	e0 80 05 9a 	breq	80006c92 <_dtoa_r+0xbd6>
80006162:	f8 c8 ff fd 	sub	r8,r12,-3
80006166:	f8 c9 ff f8 	sub	r9,r12,-8
8000616a:	11 8b       	ld.ub	r11,r8[0x0]
8000616c:	30 0a       	mov	r10,0
8000616e:	41 25       	lddsp	r5,sp[0x48]
80006170:	f4 0b 18 00 	cp.b	r11,r10
80006174:	f2 08 17 10 	movne	r8,r9
80006178:	c1 68       	rjmp	800061a4 <_dtoa_r+0xe8>
8000617a:	fa ea 00 08 	ld.d	r10,sp[8]
8000617e:	30 08       	mov	r8,0
80006180:	fa eb 00 3c 	st.d	sp[60],r10
80006184:	30 09       	mov	r9,0
80006186:	e0 a0 13 80 	rcall	80008886 <__avr32_f64_cmp_eq>
8000618a:	c1 00       	breq	800061aa <_dtoa_r+0xee>
8000618c:	30 18       	mov	r8,1
8000618e:	41 5a       	lddsp	r10,sp[0x54]
80006190:	95 08       	st.w	r10[0x0],r8
80006192:	fe cc ca ca 	sub	r12,pc,-13622
80006196:	41 29       	lddsp	r9,sp[0x48]
80006198:	f8 08 00 08 	add	r8,r12,r8
8000619c:	58 09       	cp.w	r9,0
8000619e:	e0 80 05 7a 	breq	80006c92 <_dtoa_r+0xbd6>
800061a2:	12 95       	mov	r5,r9
800061a4:	8b 08       	st.w	r5[0x0],r8
800061a6:	e0 8f 05 76 	bral	80006c92 <_dtoa_r+0xbd6>
800061aa:	fa c8 ff 9c 	sub	r8,sp,-100
800061ae:	fa c9 ff a0 	sub	r9,sp,-96
800061b2:	fa ea 00 3c 	ld.d	r10,sp[60]
800061b6:	0e 9c       	mov	r12,r7
800061b8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800061bc:	e0 a0 0c ac 	rcall	80007b14 <__d2b>
800061c0:	18 93       	mov	r3,r12
800061c2:	58 05       	cp.w	r5,0
800061c4:	c0 d0       	breq	800061de <_dtoa_r+0x122>
800061c6:	fa ea 00 3c 	ld.d	r10,sp[60]
800061ca:	30 04       	mov	r4,0
800061cc:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800061d0:	ea c5 03 ff 	sub	r5,r5,1023
800061d4:	10 9b       	mov	r11,r8
800061d6:	51 74       	stdsp	sp[0x5c],r4
800061d8:	ea 1b 3f f0 	orh	r11,0x3ff0
800061dc:	c2 58       	rjmp	80006226 <_dtoa_r+0x16a>
800061de:	41 88       	lddsp	r8,sp[0x60]
800061e0:	41 9c       	lddsp	r12,sp[0x64]
800061e2:	10 0c       	add	r12,r8
800061e4:	f8 c5 fb ce 	sub	r5,r12,-1074
800061e8:	e0 45 00 20 	cp.w	r5,32
800061ec:	e0 8a 00 0e 	brle	80006208 <_dtoa_r+0x14c>
800061f0:	f8 cc fb ee 	sub	r12,r12,-1042
800061f4:	40 3b       	lddsp	r11,sp[0xc]
800061f6:	ea 08 11 40 	rsub	r8,r5,64
800061fa:	f6 0c 0a 4c 	lsr	r12,r11,r12
800061fe:	ec 08 09 46 	lsl	r6,r6,r8
80006202:	0c 4c       	or	r12,r6
80006204:	c0 78       	rjmp	80006212 <_dtoa_r+0x156>
80006206:	d7 03       	nop
80006208:	ea 0c 11 20 	rsub	r12,r5,32
8000620c:	40 3a       	lddsp	r10,sp[0xc]
8000620e:	f4 0c 09 4c 	lsl	r12,r10,r12
80006212:	fe b0 ea 55 	rcall	800036bc <__avr32_u32_to_f64>
80006216:	fc 18 fe 10 	movh	r8,0xfe10
8000621a:	30 19       	mov	r9,1
8000621c:	ea c5 04 33 	sub	r5,r5,1075
80006220:	f0 0b 00 0b 	add	r11,r8,r11
80006224:	51 79       	stdsp	sp[0x5c],r9
80006226:	30 08       	mov	r8,0
80006228:	fc 19 3f f8 	movh	r9,0x3ff8
8000622c:	e0 a0 11 c2 	rcall	800085b0 <__avr32_f64_sub>
80006230:	e0 68 43 61 	mov	r8,17249
80006234:	ea 18 63 6f 	orh	r8,0x636f
80006238:	e0 69 87 a7 	mov	r9,34727
8000623c:	ea 19 3f d2 	orh	r9,0x3fd2
80006240:	fe b0 e9 54 	rcall	800034e8 <__avr32_f64_mul>
80006244:	e0 68 c8 b3 	mov	r8,51379
80006248:	ea 18 8b 60 	orh	r8,0x8b60
8000624c:	e0 69 8a 28 	mov	r9,35368
80006250:	ea 19 3f c6 	orh	r9,0x3fc6
80006254:	e0 a0 12 7c 	rcall	8000874c <__avr32_f64_add>
80006258:	0a 9c       	mov	r12,r5
8000625a:	14 90       	mov	r0,r10
8000625c:	16 91       	mov	r1,r11
8000625e:	fe b0 ea 33 	rcall	800036c4 <__avr32_s32_to_f64>
80006262:	e0 68 79 fb 	mov	r8,31227
80006266:	ea 18 50 9f 	orh	r8,0x509f
8000626a:	e0 69 44 13 	mov	r9,17427
8000626e:	ea 19 3f d3 	orh	r9,0x3fd3
80006272:	fe b0 e9 3b 	rcall	800034e8 <__avr32_f64_mul>
80006276:	14 98       	mov	r8,r10
80006278:	16 99       	mov	r9,r11
8000627a:	00 9a       	mov	r10,r0
8000627c:	02 9b       	mov	r11,r1
8000627e:	e0 a0 12 67 	rcall	8000874c <__avr32_f64_add>
80006282:	14 90       	mov	r0,r10
80006284:	16 91       	mov	r1,r11
80006286:	e0 a0 12 ed 	rcall	80008860 <__avr32_f64_to_s32>
8000628a:	30 08       	mov	r8,0
8000628c:	18 96       	mov	r6,r12
8000628e:	30 09       	mov	r9,0
80006290:	00 9a       	mov	r10,r0
80006292:	02 9b       	mov	r11,r1
80006294:	e0 a0 13 40 	rcall	80008914 <__avr32_f64_cmp_lt>
80006298:	c0 c0       	breq	800062b0 <_dtoa_r+0x1f4>
8000629a:	0c 9c       	mov	r12,r6
8000629c:	fe b0 ea 14 	rcall	800036c4 <__avr32_s32_to_f64>
800062a0:	14 98       	mov	r8,r10
800062a2:	16 99       	mov	r9,r11
800062a4:	00 9a       	mov	r10,r0
800062a6:	02 9b       	mov	r11,r1
800062a8:	e0 a0 12 ef 	rcall	80008886 <__avr32_f64_cmp_eq>
800062ac:	f7 b6 00 01 	subeq	r6,1
800062b0:	59 66       	cp.w	r6,22
800062b2:	e0 88 00 05 	brls	800062bc <_dtoa_r+0x200>
800062b6:	30 18       	mov	r8,1
800062b8:	51 48       	stdsp	sp[0x50],r8
800062ba:	c1 38       	rjmp	800062e0 <_dtoa_r+0x224>
800062bc:	fe c8 ca 0c 	sub	r8,pc,-13812
800062c0:	fa ea 00 3c 	ld.d	r10,sp[60]
800062c4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800062c8:	e0 a0 13 26 	rcall	80008914 <__avr32_f64_cmp_lt>
800062cc:	f9 b4 00 00 	moveq	r4,0
800062d0:	fb f4 0a 14 	st.weq	sp[0x50],r4
800062d4:	f7 b6 01 01 	subne	r6,1
800062d8:	f9 bc 01 00 	movne	r12,0
800062dc:	fb fc 1a 14 	st.wne	sp[0x50],r12
800062e0:	41 90       	lddsp	r0,sp[0x64]
800062e2:	20 10       	sub	r0,1
800062e4:	0a 10       	sub	r0,r5
800062e6:	c0 46       	brmi	800062ee <_dtoa_r+0x232>
800062e8:	50 40       	stdsp	sp[0x10],r0
800062ea:	30 00       	mov	r0,0
800062ec:	c0 48       	rjmp	800062f4 <_dtoa_r+0x238>
800062ee:	30 0b       	mov	r11,0
800062f0:	5c 30       	neg	r0
800062f2:	50 4b       	stdsp	sp[0x10],r11
800062f4:	ec 02 11 00 	rsub	r2,r6,0
800062f8:	58 06       	cp.w	r6,0
800062fa:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800062fe:	f5 d6 e4 0a 	addge	r10,r10,r6
80006302:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006306:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000630a:	f9 b2 04 00 	movge	r2,0
8000630e:	e1 d6 e5 10 	sublt	r0,r0,r6
80006312:	f9 b9 05 00 	movlt	r9,0
80006316:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000631a:	40 c8       	lddsp	r8,sp[0x30]
8000631c:	58 98       	cp.w	r8,9
8000631e:	e0 8b 00 20 	brhi	8000635e <_dtoa_r+0x2a2>
80006322:	58 58       	cp.w	r8,5
80006324:	f9 b4 0a 01 	movle	r4,1
80006328:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000632c:	f7 b5 09 04 	subgt	r5,4
80006330:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80006334:	f9 b4 09 00 	movgt	r4,0
80006338:	40 cc       	lddsp	r12,sp[0x30]
8000633a:	58 3c       	cp.w	r12,3
8000633c:	c2 d0       	breq	80006396 <_dtoa_r+0x2da>
8000633e:	e0 89 00 05 	brgt	80006348 <_dtoa_r+0x28c>
80006342:	58 2c       	cp.w	r12,2
80006344:	c1 01       	brne	80006364 <_dtoa_r+0x2a8>
80006346:	c1 88       	rjmp	80006376 <_dtoa_r+0x2ba>
80006348:	40 cb       	lddsp	r11,sp[0x30]
8000634a:	58 4b       	cp.w	r11,4
8000634c:	c0 60       	breq	80006358 <_dtoa_r+0x29c>
8000634e:	58 5b       	cp.w	r11,5
80006350:	c0 a1       	brne	80006364 <_dtoa_r+0x2a8>
80006352:	30 1a       	mov	r10,1
80006354:	50 da       	stdsp	sp[0x34],r10
80006356:	c2 28       	rjmp	8000639a <_dtoa_r+0x2de>
80006358:	30 19       	mov	r9,1
8000635a:	50 d9       	stdsp	sp[0x34],r9
8000635c:	c0 f8       	rjmp	8000637a <_dtoa_r+0x2be>
8000635e:	30 08       	mov	r8,0
80006360:	30 14       	mov	r4,1
80006362:	50 c8       	stdsp	sp[0x30],r8
80006364:	3f f5       	mov	r5,-1
80006366:	30 1c       	mov	r12,1
80006368:	30 0b       	mov	r11,0
8000636a:	50 95       	stdsp	sp[0x24],r5
8000636c:	50 dc       	stdsp	sp[0x34],r12
8000636e:	0a 91       	mov	r1,r5
80006370:	31 28       	mov	r8,18
80006372:	50 eb       	stdsp	sp[0x38],r11
80006374:	c2 08       	rjmp	800063b4 <_dtoa_r+0x2f8>
80006376:	30 0a       	mov	r10,0
80006378:	50 da       	stdsp	sp[0x34],r10
8000637a:	40 e9       	lddsp	r9,sp[0x38]
8000637c:	58 09       	cp.w	r9,0
8000637e:	e0 89 00 07 	brgt	8000638c <_dtoa_r+0x2d0>
80006382:	30 18       	mov	r8,1
80006384:	50 98       	stdsp	sp[0x24],r8
80006386:	10 91       	mov	r1,r8
80006388:	50 e8       	stdsp	sp[0x38],r8
8000638a:	c1 58       	rjmp	800063b4 <_dtoa_r+0x2f8>
8000638c:	40 e5       	lddsp	r5,sp[0x38]
8000638e:	50 95       	stdsp	sp[0x24],r5
80006390:	0a 91       	mov	r1,r5
80006392:	0a 98       	mov	r8,r5
80006394:	c1 08       	rjmp	800063b4 <_dtoa_r+0x2f8>
80006396:	30 0c       	mov	r12,0
80006398:	50 dc       	stdsp	sp[0x34],r12
8000639a:	40 eb       	lddsp	r11,sp[0x38]
8000639c:	ec 0b 00 0b 	add	r11,r6,r11
800063a0:	50 9b       	stdsp	sp[0x24],r11
800063a2:	16 98       	mov	r8,r11
800063a4:	2f f8       	sub	r8,-1
800063a6:	58 08       	cp.w	r8,0
800063a8:	e0 89 00 05 	brgt	800063b2 <_dtoa_r+0x2f6>
800063ac:	10 91       	mov	r1,r8
800063ae:	30 18       	mov	r8,1
800063b0:	c0 28       	rjmp	800063b4 <_dtoa_r+0x2f8>
800063b2:	10 91       	mov	r1,r8
800063b4:	30 09       	mov	r9,0
800063b6:	6e 9a       	ld.w	r10,r7[0x24]
800063b8:	95 19       	st.w	r10[0x4],r9
800063ba:	30 49       	mov	r9,4
800063bc:	c0 68       	rjmp	800063c8 <_dtoa_r+0x30c>
800063be:	d7 03       	nop
800063c0:	6a 1a       	ld.w	r10,r5[0x4]
800063c2:	a1 79       	lsl	r9,0x1
800063c4:	2f fa       	sub	r10,-1
800063c6:	8b 1a       	st.w	r5[0x4],r10
800063c8:	6e 95       	ld.w	r5,r7[0x24]
800063ca:	f2 ca ff ec 	sub	r10,r9,-20
800063ce:	10 3a       	cp.w	r10,r8
800063d0:	fe 98 ff f8 	brls	800063c0 <_dtoa_r+0x304>
800063d4:	6a 1b       	ld.w	r11,r5[0x4]
800063d6:	0e 9c       	mov	r12,r7
800063d8:	e0 a0 0b 66 	rcall	80007aa4 <_Balloc>
800063dc:	58 e1       	cp.w	r1,14
800063de:	5f 88       	srls	r8
800063e0:	8b 0c       	st.w	r5[0x0],r12
800063e2:	f1 e4 00 04 	and	r4,r8,r4
800063e6:	6e 98       	ld.w	r8,r7[0x24]
800063e8:	70 08       	ld.w	r8,r8[0x0]
800063ea:	50 88       	stdsp	sp[0x20],r8
800063ec:	e0 80 01 82 	breq	800066f0 <_dtoa_r+0x634>
800063f0:	58 06       	cp.w	r6,0
800063f2:	e0 8a 00 43 	brle	80006478 <_dtoa_r+0x3bc>
800063f6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800063fa:	fe c8 cb 4a 	sub	r8,pc,-13494
800063fe:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006402:	fa e5 00 18 	st.d	sp[24],r4
80006406:	ec 04 14 04 	asr	r4,r6,0x4
8000640a:	ed b4 00 04 	bld	r4,0x4
8000640e:	c0 30       	breq	80006414 <_dtoa_r+0x358>
80006410:	30 25       	mov	r5,2
80006412:	c1 08       	rjmp	80006432 <_dtoa_r+0x376>
80006414:	fe c8 ca 9c 	sub	r8,pc,-13668
80006418:	f0 e8 00 20 	ld.d	r8,r8[32]
8000641c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006420:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006424:	e0 a0 12 ac 	rcall	8000897c <__avr32_f64_div>
80006428:	30 35       	mov	r5,3
8000642a:	14 98       	mov	r8,r10
8000642c:	16 99       	mov	r9,r11
8000642e:	fa e9 00 08 	st.d	sp[8],r8
80006432:	fe cc ca ba 	sub	r12,pc,-13638
80006436:	50 a3       	stdsp	sp[0x28],r3
80006438:	0c 93       	mov	r3,r6
8000643a:	18 96       	mov	r6,r12
8000643c:	c0 f8       	rjmp	8000645a <_dtoa_r+0x39e>
8000643e:	fa ea 00 18 	ld.d	r10,sp[24]
80006442:	ed b4 00 00 	bld	r4,0x0
80006446:	c0 81       	brne	80006456 <_dtoa_r+0x39a>
80006448:	ec e8 00 00 	ld.d	r8,r6[0]
8000644c:	2f f5       	sub	r5,-1
8000644e:	fe b0 e8 4d 	rcall	800034e8 <__avr32_f64_mul>
80006452:	fa eb 00 18 	st.d	sp[24],r10
80006456:	a1 54       	asr	r4,0x1
80006458:	2f 86       	sub	r6,-8
8000645a:	58 04       	cp.w	r4,0
8000645c:	cf 11       	brne	8000643e <_dtoa_r+0x382>
8000645e:	fa e8 00 18 	ld.d	r8,sp[24]
80006462:	fa ea 00 08 	ld.d	r10,sp[8]
80006466:	06 96       	mov	r6,r3
80006468:	e0 a0 12 8a 	rcall	8000897c <__avr32_f64_div>
8000646c:	40 a3       	lddsp	r3,sp[0x28]
8000646e:	14 98       	mov	r8,r10
80006470:	16 99       	mov	r9,r11
80006472:	fa e9 00 08 	st.d	sp[8],r8
80006476:	c2 f8       	rjmp	800064d4 <_dtoa_r+0x418>
80006478:	ec 08 11 00 	rsub	r8,r6,0
8000647c:	c0 31       	brne	80006482 <_dtoa_r+0x3c6>
8000647e:	30 25       	mov	r5,2
80006480:	c2 a8       	rjmp	800064d4 <_dtoa_r+0x418>
80006482:	fe cc cb 0a 	sub	r12,pc,-13558
80006486:	f0 04 14 04 	asr	r4,r8,0x4
8000648a:	50 1c       	stdsp	sp[0x4],r12
8000648c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006490:	fe c9 cb e0 	sub	r9,pc,-13344
80006494:	fa ea 00 3c 	ld.d	r10,sp[60]
80006498:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000649c:	fe b0 e8 26 	rcall	800034e8 <__avr32_f64_mul>
800064a0:	40 1c       	lddsp	r12,sp[0x4]
800064a2:	50 63       	stdsp	sp[0x18],r3
800064a4:	30 25       	mov	r5,2
800064a6:	0c 93       	mov	r3,r6
800064a8:	fa eb 00 08 	st.d	sp[8],r10
800064ac:	18 96       	mov	r6,r12
800064ae:	c0 f8       	rjmp	800064cc <_dtoa_r+0x410>
800064b0:	fa ea 00 08 	ld.d	r10,sp[8]
800064b4:	ed b4 00 00 	bld	r4,0x0
800064b8:	c0 81       	brne	800064c8 <_dtoa_r+0x40c>
800064ba:	ec e8 00 00 	ld.d	r8,r6[0]
800064be:	2f f5       	sub	r5,-1
800064c0:	fe b0 e8 14 	rcall	800034e8 <__avr32_f64_mul>
800064c4:	fa eb 00 08 	st.d	sp[8],r10
800064c8:	a1 54       	asr	r4,0x1
800064ca:	2f 86       	sub	r6,-8
800064cc:	58 04       	cp.w	r4,0
800064ce:	cf 11       	brne	800064b0 <_dtoa_r+0x3f4>
800064d0:	06 96       	mov	r6,r3
800064d2:	40 63       	lddsp	r3,sp[0x18]
800064d4:	41 4a       	lddsp	r10,sp[0x50]
800064d6:	58 0a       	cp.w	r10,0
800064d8:	c2 a0       	breq	8000652c <_dtoa_r+0x470>
800064da:	fa e8 00 08 	ld.d	r8,sp[8]
800064de:	58 01       	cp.w	r1,0
800064e0:	5f 94       	srgt	r4
800064e2:	fa e9 00 18 	st.d	sp[24],r8
800064e6:	30 08       	mov	r8,0
800064e8:	fc 19 3f f0 	movh	r9,0x3ff0
800064ec:	fa ea 00 18 	ld.d	r10,sp[24]
800064f0:	e0 a0 12 12 	rcall	80008914 <__avr32_f64_cmp_lt>
800064f4:	f9 bc 00 00 	moveq	r12,0
800064f8:	f9 bc 01 01 	movne	r12,1
800064fc:	e9 ec 00 0c 	and	r12,r4,r12
80006500:	c1 60       	breq	8000652c <_dtoa_r+0x470>
80006502:	40 98       	lddsp	r8,sp[0x24]
80006504:	58 08       	cp.w	r8,0
80006506:	e0 8a 00 f1 	brle	800066e8 <_dtoa_r+0x62c>
8000650a:	30 08       	mov	r8,0
8000650c:	fc 19 40 24 	movh	r9,0x4024
80006510:	ec c4 00 01 	sub	r4,r6,1
80006514:	fa ea 00 18 	ld.d	r10,sp[24]
80006518:	2f f5       	sub	r5,-1
8000651a:	50 64       	stdsp	sp[0x18],r4
8000651c:	fe b0 e7 e6 	rcall	800034e8 <__avr32_f64_mul>
80006520:	40 94       	lddsp	r4,sp[0x24]
80006522:	14 98       	mov	r8,r10
80006524:	16 99       	mov	r9,r11
80006526:	fa e9 00 08 	st.d	sp[8],r8
8000652a:	c0 38       	rjmp	80006530 <_dtoa_r+0x474>
8000652c:	50 66       	stdsp	sp[0x18],r6
8000652e:	02 94       	mov	r4,r1
80006530:	0a 9c       	mov	r12,r5
80006532:	fe b0 e8 c9 	rcall	800036c4 <__avr32_s32_to_f64>
80006536:	fa e8 00 08 	ld.d	r8,sp[8]
8000653a:	fe b0 e7 d7 	rcall	800034e8 <__avr32_f64_mul>
8000653e:	30 08       	mov	r8,0
80006540:	fc 19 40 1c 	movh	r9,0x401c
80006544:	e0 a0 11 04 	rcall	8000874c <__avr32_f64_add>
80006548:	14 98       	mov	r8,r10
8000654a:	16 99       	mov	r9,r11
8000654c:	fa e9 00 28 	st.d	sp[40],r8
80006550:	fc 18 fc c0 	movh	r8,0xfcc0
80006554:	40 a5       	lddsp	r5,sp[0x28]
80006556:	10 05       	add	r5,r8
80006558:	50 a5       	stdsp	sp[0x28],r5
8000655a:	58 04       	cp.w	r4,0
8000655c:	c2 11       	brne	8000659e <_dtoa_r+0x4e2>
8000655e:	fa ea 00 08 	ld.d	r10,sp[8]
80006562:	30 08       	mov	r8,0
80006564:	fc 19 40 14 	movh	r9,0x4014
80006568:	e0 a0 10 24 	rcall	800085b0 <__avr32_f64_sub>
8000656c:	40 bc       	lddsp	r12,sp[0x2c]
8000656e:	fa eb 00 08 	st.d	sp[8],r10
80006572:	14 98       	mov	r8,r10
80006574:	16 99       	mov	r9,r11
80006576:	18 9a       	mov	r10,r12
80006578:	0a 9b       	mov	r11,r5
8000657a:	e0 a0 11 cd 	rcall	80008914 <__avr32_f64_cmp_lt>
8000657e:	e0 81 02 54 	brne	80006a26 <_dtoa_r+0x96a>
80006582:	0a 98       	mov	r8,r5
80006584:	40 b9       	lddsp	r9,sp[0x2c]
80006586:	ee 18 80 00 	eorh	r8,0x8000
8000658a:	fa ea 00 08 	ld.d	r10,sp[8]
8000658e:	10 95       	mov	r5,r8
80006590:	12 98       	mov	r8,r9
80006592:	0a 99       	mov	r9,r5
80006594:	e0 a0 11 c0 	rcall	80008914 <__avr32_f64_cmp_lt>
80006598:	e0 81 02 3e 	brne	80006a14 <_dtoa_r+0x958>
8000659c:	ca 68       	rjmp	800066e8 <_dtoa_r+0x62c>
8000659e:	fe c9 cc ee 	sub	r9,pc,-13074
800065a2:	e8 c8 00 01 	sub	r8,r4,1
800065a6:	40 d5       	lddsp	r5,sp[0x34]
800065a8:	58 05       	cp.w	r5,0
800065aa:	c4 f0       	breq	80006648 <_dtoa_r+0x58c>
800065ac:	30 0c       	mov	r12,0
800065ae:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800065b2:	51 3c       	stdsp	sp[0x4c],r12
800065b4:	30 0a       	mov	r10,0
800065b6:	fc 1b 3f e0 	movh	r11,0x3fe0
800065ba:	e0 a0 11 e1 	rcall	8000897c <__avr32_f64_div>
800065be:	fa e8 00 28 	ld.d	r8,sp[40]
800065c2:	40 85       	lddsp	r5,sp[0x20]
800065c4:	e0 a0 0f f6 	rcall	800085b0 <__avr32_f64_sub>
800065c8:	fa eb 00 28 	st.d	sp[40],r10
800065cc:	fa ea 00 08 	ld.d	r10,sp[8]
800065d0:	e0 a0 11 48 	rcall	80008860 <__avr32_f64_to_s32>
800065d4:	51 6c       	stdsp	sp[0x58],r12
800065d6:	fe b0 e8 77 	rcall	800036c4 <__avr32_s32_to_f64>
800065da:	14 98       	mov	r8,r10
800065dc:	16 99       	mov	r9,r11
800065de:	fa ea 00 08 	ld.d	r10,sp[8]
800065e2:	e0 a0 0f e7 	rcall	800085b0 <__avr32_f64_sub>
800065e6:	fa eb 00 08 	st.d	sp[8],r10
800065ea:	41 68       	lddsp	r8,sp[0x58]
800065ec:	2d 08       	sub	r8,-48
800065ee:	0a c8       	st.b	r5++,r8
800065f0:	41 39       	lddsp	r9,sp[0x4c]
800065f2:	2f f9       	sub	r9,-1
800065f4:	51 39       	stdsp	sp[0x4c],r9
800065f6:	fa e8 00 28 	ld.d	r8,sp[40]
800065fa:	e0 a0 11 8d 	rcall	80008914 <__avr32_f64_cmp_lt>
800065fe:	e0 81 03 39 	brne	80006c70 <_dtoa_r+0xbb4>
80006602:	fa e8 00 08 	ld.d	r8,sp[8]
80006606:	30 0a       	mov	r10,0
80006608:	fc 1b 3f f0 	movh	r11,0x3ff0
8000660c:	e0 a0 0f d2 	rcall	800085b0 <__avr32_f64_sub>
80006610:	fa e8 00 28 	ld.d	r8,sp[40]
80006614:	e0 a0 11 80 	rcall	80008914 <__avr32_f64_cmp_lt>
80006618:	fa ea 00 28 	ld.d	r10,sp[40]
8000661c:	30 08       	mov	r8,0
8000661e:	fc 19 40 24 	movh	r9,0x4024
80006622:	e0 81 00 da 	brne	800067d6 <_dtoa_r+0x71a>
80006626:	41 3c       	lddsp	r12,sp[0x4c]
80006628:	08 3c       	cp.w	r12,r4
8000662a:	c5 f4       	brge	800066e8 <_dtoa_r+0x62c>
8000662c:	fe b0 e7 5e 	rcall	800034e8 <__avr32_f64_mul>
80006630:	30 08       	mov	r8,0
80006632:	fa eb 00 28 	st.d	sp[40],r10
80006636:	fc 19 40 24 	movh	r9,0x4024
8000663a:	fa ea 00 08 	ld.d	r10,sp[8]
8000663e:	fe b0 e7 55 	rcall	800034e8 <__avr32_f64_mul>
80006642:	fa eb 00 08 	st.d	sp[8],r10
80006646:	cc 3b       	rjmp	800065cc <_dtoa_r+0x510>
80006648:	40 85       	lddsp	r5,sp[0x20]
8000664a:	08 05       	add	r5,r4
8000664c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006650:	51 35       	stdsp	sp[0x4c],r5
80006652:	fa e8 00 28 	ld.d	r8,sp[40]
80006656:	40 85       	lddsp	r5,sp[0x20]
80006658:	fe b0 e7 48 	rcall	800034e8 <__avr32_f64_mul>
8000665c:	fa eb 00 28 	st.d	sp[40],r10
80006660:	fa ea 00 08 	ld.d	r10,sp[8]
80006664:	e0 a0 10 fe 	rcall	80008860 <__avr32_f64_to_s32>
80006668:	51 6c       	stdsp	sp[0x58],r12
8000666a:	fe b0 e8 2d 	rcall	800036c4 <__avr32_s32_to_f64>
8000666e:	14 98       	mov	r8,r10
80006670:	16 99       	mov	r9,r11
80006672:	fa ea 00 08 	ld.d	r10,sp[8]
80006676:	e0 a0 0f 9d 	rcall	800085b0 <__avr32_f64_sub>
8000667a:	fa eb 00 08 	st.d	sp[8],r10
8000667e:	41 68       	lddsp	r8,sp[0x58]
80006680:	2d 08       	sub	r8,-48
80006682:	0a c8       	st.b	r5++,r8
80006684:	41 3c       	lddsp	r12,sp[0x4c]
80006686:	18 35       	cp.w	r5,r12
80006688:	c2 81       	brne	800066d8 <_dtoa_r+0x61c>
8000668a:	30 08       	mov	r8,0
8000668c:	fc 19 3f e0 	movh	r9,0x3fe0
80006690:	fa ea 00 28 	ld.d	r10,sp[40]
80006694:	e0 a0 10 5c 	rcall	8000874c <__avr32_f64_add>
80006698:	40 85       	lddsp	r5,sp[0x20]
8000669a:	fa e8 00 08 	ld.d	r8,sp[8]
8000669e:	08 05       	add	r5,r4
800066a0:	e0 a0 11 3a 	rcall	80008914 <__avr32_f64_cmp_lt>
800066a4:	e0 81 00 99 	brne	800067d6 <_dtoa_r+0x71a>
800066a8:	fa e8 00 28 	ld.d	r8,sp[40]
800066ac:	30 0a       	mov	r10,0
800066ae:	fc 1b 3f e0 	movh	r11,0x3fe0
800066b2:	e0 a0 0f 7f 	rcall	800085b0 <__avr32_f64_sub>
800066b6:	14 98       	mov	r8,r10
800066b8:	16 99       	mov	r9,r11
800066ba:	fa ea 00 08 	ld.d	r10,sp[8]
800066be:	e0 a0 11 2b 	rcall	80008914 <__avr32_f64_cmp_lt>
800066c2:	c1 30       	breq	800066e8 <_dtoa_r+0x62c>
800066c4:	33 09       	mov	r9,48
800066c6:	0a 98       	mov	r8,r5
800066c8:	11 7a       	ld.ub	r10,--r8
800066ca:	f2 0a 18 00 	cp.b	r10,r9
800066ce:	e0 81 02 d1 	brne	80006c70 <_dtoa_r+0xbb4>
800066d2:	10 95       	mov	r5,r8
800066d4:	cf 9b       	rjmp	800066c6 <_dtoa_r+0x60a>
800066d6:	d7 03       	nop
800066d8:	30 08       	mov	r8,0
800066da:	fc 19 40 24 	movh	r9,0x4024
800066de:	fe b0 e7 05 	rcall	800034e8 <__avr32_f64_mul>
800066e2:	fa eb 00 08 	st.d	sp[8],r10
800066e6:	cb db       	rjmp	80006660 <_dtoa_r+0x5a4>
800066e8:	fa ea 00 3c 	ld.d	r10,sp[60]
800066ec:	fa eb 00 08 	st.d	sp[8],r10
800066f0:	58 e6       	cp.w	r6,14
800066f2:	5f ab       	srle	r11
800066f4:	41 8a       	lddsp	r10,sp[0x60]
800066f6:	30 08       	mov	r8,0
800066f8:	f4 09 11 ff 	rsub	r9,r10,-1
800066fc:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006700:	f0 09 18 00 	cp.b	r9,r8
80006704:	e0 80 00 82 	breq	80006808 <_dtoa_r+0x74c>
80006708:	40 ea       	lddsp	r10,sp[0x38]
8000670a:	58 01       	cp.w	r1,0
8000670c:	5f a9       	srle	r9
8000670e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006712:	fe ca ce 62 	sub	r10,pc,-12702
80006716:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000671a:	fa e5 00 10 	st.d	sp[16],r4
8000671e:	f0 09 18 00 	cp.b	r9,r8
80006722:	c1 40       	breq	8000674a <_dtoa_r+0x68e>
80006724:	58 01       	cp.w	r1,0
80006726:	e0 81 01 77 	brne	80006a14 <_dtoa_r+0x958>
8000672a:	30 08       	mov	r8,0
8000672c:	fc 19 40 14 	movh	r9,0x4014
80006730:	08 9a       	mov	r10,r4
80006732:	0a 9b       	mov	r11,r5
80006734:	fe b0 e6 da 	rcall	800034e8 <__avr32_f64_mul>
80006738:	fa e8 00 08 	ld.d	r8,sp[8]
8000673c:	e0 a0 10 b8 	rcall	800088ac <__avr32_f64_cmp_ge>
80006740:	e0 81 01 6a 	brne	80006a14 <_dtoa_r+0x958>
80006744:	02 92       	mov	r2,r1
80006746:	e0 8f 01 72 	bral	80006a2a <_dtoa_r+0x96e>
8000674a:	40 85       	lddsp	r5,sp[0x20]
8000674c:	30 14       	mov	r4,1
8000674e:	fa e8 00 10 	ld.d	r8,sp[16]
80006752:	fa ea 00 08 	ld.d	r10,sp[8]
80006756:	e0 a0 11 13 	rcall	8000897c <__avr32_f64_div>
8000675a:	e0 a0 10 83 	rcall	80008860 <__avr32_f64_to_s32>
8000675e:	18 92       	mov	r2,r12
80006760:	fe b0 e7 b2 	rcall	800036c4 <__avr32_s32_to_f64>
80006764:	fa e8 00 10 	ld.d	r8,sp[16]
80006768:	fe b0 e6 c0 	rcall	800034e8 <__avr32_f64_mul>
8000676c:	14 98       	mov	r8,r10
8000676e:	16 99       	mov	r9,r11
80006770:	fa ea 00 08 	ld.d	r10,sp[8]
80006774:	e0 a0 0f 1e 	rcall	800085b0 <__avr32_f64_sub>
80006778:	fa eb 00 08 	st.d	sp[8],r10
8000677c:	e4 c8 ff d0 	sub	r8,r2,-48
80006780:	0a c8       	st.b	r5++,r8
80006782:	fc 19 40 24 	movh	r9,0x4024
80006786:	30 08       	mov	r8,0
80006788:	02 34       	cp.w	r4,r1
8000678a:	c3 31       	brne	800067f0 <_dtoa_r+0x734>
8000678c:	fa e8 00 08 	ld.d	r8,sp[8]
80006790:	e0 a0 0f de 	rcall	8000874c <__avr32_f64_add>
80006794:	16 91       	mov	r1,r11
80006796:	14 90       	mov	r0,r10
80006798:	14 98       	mov	r8,r10
8000679a:	02 99       	mov	r9,r1
8000679c:	fa ea 00 10 	ld.d	r10,sp[16]
800067a0:	e0 a0 10 ba 	rcall	80008914 <__avr32_f64_cmp_lt>
800067a4:	c1 a1       	brne	800067d8 <_dtoa_r+0x71c>
800067a6:	fa e8 00 10 	ld.d	r8,sp[16]
800067aa:	00 9a       	mov	r10,r0
800067ac:	02 9b       	mov	r11,r1
800067ae:	e0 a0 10 6c 	rcall	80008886 <__avr32_f64_cmp_eq>
800067b2:	e0 80 02 5e 	breq	80006c6e <_dtoa_r+0xbb2>
800067b6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800067ba:	c0 f1       	brne	800067d8 <_dtoa_r+0x71c>
800067bc:	e0 8f 02 59 	bral	80006c6e <_dtoa_r+0xbb2>
800067c0:	40 8a       	lddsp	r10,sp[0x20]
800067c2:	14 38       	cp.w	r8,r10
800067c4:	c0 30       	breq	800067ca <_dtoa_r+0x70e>
800067c6:	10 95       	mov	r5,r8
800067c8:	c0 98       	rjmp	800067da <_dtoa_r+0x71e>
800067ca:	33 08       	mov	r8,48
800067cc:	40 89       	lddsp	r9,sp[0x20]
800067ce:	2f f6       	sub	r6,-1
800067d0:	b2 88       	st.b	r9[0x0],r8
800067d2:	40 88       	lddsp	r8,sp[0x20]
800067d4:	c0 88       	rjmp	800067e4 <_dtoa_r+0x728>
800067d6:	40 66       	lddsp	r6,sp[0x18]
800067d8:	33 99       	mov	r9,57
800067da:	0a 98       	mov	r8,r5
800067dc:	11 7a       	ld.ub	r10,--r8
800067de:	f2 0a 18 00 	cp.b	r10,r9
800067e2:	ce f0       	breq	800067c0 <_dtoa_r+0x704>
800067e4:	50 66       	stdsp	sp[0x18],r6
800067e6:	11 89       	ld.ub	r9,r8[0x0]
800067e8:	2f f9       	sub	r9,-1
800067ea:	b0 89       	st.b	r8[0x0],r9
800067ec:	e0 8f 02 42 	bral	80006c70 <_dtoa_r+0xbb4>
800067f0:	fe b0 e6 7c 	rcall	800034e8 <__avr32_f64_mul>
800067f4:	2f f4       	sub	r4,-1
800067f6:	fa eb 00 08 	st.d	sp[8],r10
800067fa:	30 08       	mov	r8,0
800067fc:	30 09       	mov	r9,0
800067fe:	e0 a0 10 44 	rcall	80008886 <__avr32_f64_cmp_eq>
80006802:	ca 60       	breq	8000674e <_dtoa_r+0x692>
80006804:	e0 8f 02 35 	bral	80006c6e <_dtoa_r+0xbb2>
80006808:	40 d8       	lddsp	r8,sp[0x34]
8000680a:	58 08       	cp.w	r8,0
8000680c:	c0 51       	brne	80006816 <_dtoa_r+0x75a>
8000680e:	04 98       	mov	r8,r2
80006810:	00 95       	mov	r5,r0
80006812:	40 d4       	lddsp	r4,sp[0x34]
80006814:	c3 78       	rjmp	80006882 <_dtoa_r+0x7c6>
80006816:	40 c5       	lddsp	r5,sp[0x30]
80006818:	58 15       	cp.w	r5,1
8000681a:	e0 89 00 0f 	brgt	80006838 <_dtoa_r+0x77c>
8000681e:	41 74       	lddsp	r4,sp[0x5c]
80006820:	58 04       	cp.w	r4,0
80006822:	c0 40       	breq	8000682a <_dtoa_r+0x76e>
80006824:	f4 c9 fb cd 	sub	r9,r10,-1075
80006828:	c0 48       	rjmp	80006830 <_dtoa_r+0x774>
8000682a:	41 99       	lddsp	r9,sp[0x64]
8000682c:	f2 09 11 36 	rsub	r9,r9,54
80006830:	04 98       	mov	r8,r2
80006832:	00 95       	mov	r5,r0
80006834:	c1 c8       	rjmp	8000686c <_dtoa_r+0x7b0>
80006836:	d7 03       	nop
80006838:	e2 c8 00 01 	sub	r8,r1,1
8000683c:	58 01       	cp.w	r1,0
8000683e:	e0 05 17 40 	movge	r5,r0
80006842:	e2 09 17 40 	movge	r9,r1
80006846:	e1 d1 e5 15 	sublt	r5,r0,r1
8000684a:	f9 b9 05 00 	movlt	r9,0
8000684e:	10 32       	cp.w	r2,r8
80006850:	e5 d8 e4 18 	subge	r8,r2,r8
80006854:	f1 d2 e5 18 	sublt	r8,r8,r2
80006858:	e5 d8 e5 02 	addlt	r2,r2,r8
8000685c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006860:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006864:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006868:	f9 b8 05 00 	movlt	r8,0
8000686c:	40 4b       	lddsp	r11,sp[0x10]
8000686e:	12 0b       	add	r11,r9
80006870:	50 08       	stdsp	sp[0x0],r8
80006872:	50 4b       	stdsp	sp[0x10],r11
80006874:	12 00       	add	r0,r9
80006876:	30 1b       	mov	r11,1
80006878:	0e 9c       	mov	r12,r7
8000687a:	e0 a0 0a c9 	rcall	80007e0c <__i2b>
8000687e:	40 08       	lddsp	r8,sp[0x0]
80006880:	18 94       	mov	r4,r12
80006882:	40 4a       	lddsp	r10,sp[0x10]
80006884:	58 05       	cp.w	r5,0
80006886:	5f 99       	srgt	r9
80006888:	58 0a       	cp.w	r10,0
8000688a:	5f 9a       	srgt	r10
8000688c:	f5 e9 00 09 	and	r9,r10,r9
80006890:	c0 80       	breq	800068a0 <_dtoa_r+0x7e4>
80006892:	40 4c       	lddsp	r12,sp[0x10]
80006894:	f8 05 0d 49 	min	r9,r12,r5
80006898:	12 1c       	sub	r12,r9
8000689a:	12 10       	sub	r0,r9
8000689c:	50 4c       	stdsp	sp[0x10],r12
8000689e:	12 15       	sub	r5,r9
800068a0:	58 02       	cp.w	r2,0
800068a2:	e0 8a 00 27 	brle	800068f0 <_dtoa_r+0x834>
800068a6:	40 db       	lddsp	r11,sp[0x34]
800068a8:	58 0b       	cp.w	r11,0
800068aa:	c1 d0       	breq	800068e4 <_dtoa_r+0x828>
800068ac:	58 08       	cp.w	r8,0
800068ae:	e0 8a 00 17 	brle	800068dc <_dtoa_r+0x820>
800068b2:	10 9a       	mov	r10,r8
800068b4:	50 08       	stdsp	sp[0x0],r8
800068b6:	08 9b       	mov	r11,r4
800068b8:	0e 9c       	mov	r12,r7
800068ba:	e0 a0 0a ef 	rcall	80007e98 <__pow5mult>
800068be:	06 9a       	mov	r10,r3
800068c0:	18 9b       	mov	r11,r12
800068c2:	18 94       	mov	r4,r12
800068c4:	0e 9c       	mov	r12,r7
800068c6:	e0 a0 0a 23 	rcall	80007d0c <__multiply>
800068ca:	18 99       	mov	r9,r12
800068cc:	06 9b       	mov	r11,r3
800068ce:	50 19       	stdsp	sp[0x4],r9
800068d0:	0e 9c       	mov	r12,r7
800068d2:	e0 a0 08 cf 	rcall	80007a70 <_Bfree>
800068d6:	40 19       	lddsp	r9,sp[0x4]
800068d8:	40 08       	lddsp	r8,sp[0x0]
800068da:	12 93       	mov	r3,r9
800068dc:	e4 08 01 0a 	sub	r10,r2,r8
800068e0:	c0 80       	breq	800068f0 <_dtoa_r+0x834>
800068e2:	c0 28       	rjmp	800068e6 <_dtoa_r+0x82a>
800068e4:	04 9a       	mov	r10,r2
800068e6:	06 9b       	mov	r11,r3
800068e8:	0e 9c       	mov	r12,r7
800068ea:	e0 a0 0a d7 	rcall	80007e98 <__pow5mult>
800068ee:	18 93       	mov	r3,r12
800068f0:	30 1b       	mov	r11,1
800068f2:	0e 9c       	mov	r12,r7
800068f4:	e0 a0 0a 8c 	rcall	80007e0c <__i2b>
800068f8:	41 1a       	lddsp	r10,sp[0x44]
800068fa:	18 92       	mov	r2,r12
800068fc:	58 0a       	cp.w	r10,0
800068fe:	e0 8a 00 07 	brle	8000690c <_dtoa_r+0x850>
80006902:	18 9b       	mov	r11,r12
80006904:	0e 9c       	mov	r12,r7
80006906:	e0 a0 0a c9 	rcall	80007e98 <__pow5mult>
8000690a:	18 92       	mov	r2,r12
8000690c:	40 c9       	lddsp	r9,sp[0x30]
8000690e:	58 19       	cp.w	r9,1
80006910:	e0 89 00 14 	brgt	80006938 <_dtoa_r+0x87c>
80006914:	40 38       	lddsp	r8,sp[0xc]
80006916:	58 08       	cp.w	r8,0
80006918:	c1 01       	brne	80006938 <_dtoa_r+0x87c>
8000691a:	40 29       	lddsp	r9,sp[0x8]
8000691c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006920:	c0 c1       	brne	80006938 <_dtoa_r+0x87c>
80006922:	12 98       	mov	r8,r9
80006924:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006928:	c0 80       	breq	80006938 <_dtoa_r+0x87c>
8000692a:	40 4c       	lddsp	r12,sp[0x10]
8000692c:	30 1b       	mov	r11,1
8000692e:	2f fc       	sub	r12,-1
80006930:	2f f0       	sub	r0,-1
80006932:	50 4c       	stdsp	sp[0x10],r12
80006934:	50 6b       	stdsp	sp[0x18],r11
80006936:	c0 38       	rjmp	8000693c <_dtoa_r+0x880>
80006938:	30 0a       	mov	r10,0
8000693a:	50 6a       	stdsp	sp[0x18],r10
8000693c:	41 19       	lddsp	r9,sp[0x44]
8000693e:	58 09       	cp.w	r9,0
80006940:	c0 31       	brne	80006946 <_dtoa_r+0x88a>
80006942:	30 1c       	mov	r12,1
80006944:	c0 98       	rjmp	80006956 <_dtoa_r+0x89a>
80006946:	64 48       	ld.w	r8,r2[0x10]
80006948:	2f c8       	sub	r8,-4
8000694a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000694e:	e0 a0 08 01 	rcall	80007950 <__hi0bits>
80006952:	f8 0c 11 20 	rsub	r12,r12,32
80006956:	40 4b       	lddsp	r11,sp[0x10]
80006958:	f8 0b 00 08 	add	r8,r12,r11
8000695c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006960:	c0 c0       	breq	80006978 <_dtoa_r+0x8bc>
80006962:	f0 08 11 20 	rsub	r8,r8,32
80006966:	58 48       	cp.w	r8,4
80006968:	e0 8a 00 06 	brle	80006974 <_dtoa_r+0x8b8>
8000696c:	20 48       	sub	r8,4
8000696e:	10 0b       	add	r11,r8
80006970:	50 4b       	stdsp	sp[0x10],r11
80006972:	c0 78       	rjmp	80006980 <_dtoa_r+0x8c4>
80006974:	58 48       	cp.w	r8,4
80006976:	c0 70       	breq	80006984 <_dtoa_r+0x8c8>
80006978:	40 4a       	lddsp	r10,sp[0x10]
8000697a:	2e 48       	sub	r8,-28
8000697c:	10 0a       	add	r10,r8
8000697e:	50 4a       	stdsp	sp[0x10],r10
80006980:	10 00       	add	r0,r8
80006982:	10 05       	add	r5,r8
80006984:	58 00       	cp.w	r0,0
80006986:	e0 8a 00 08 	brle	80006996 <_dtoa_r+0x8da>
8000698a:	06 9b       	mov	r11,r3
8000698c:	00 9a       	mov	r10,r0
8000698e:	0e 9c       	mov	r12,r7
80006990:	e0 a0 09 7a 	rcall	80007c84 <__lshift>
80006994:	18 93       	mov	r3,r12
80006996:	40 49       	lddsp	r9,sp[0x10]
80006998:	58 09       	cp.w	r9,0
8000699a:	e0 8a 00 08 	brle	800069aa <_dtoa_r+0x8ee>
8000699e:	04 9b       	mov	r11,r2
800069a0:	12 9a       	mov	r10,r9
800069a2:	0e 9c       	mov	r12,r7
800069a4:	e0 a0 09 70 	rcall	80007c84 <__lshift>
800069a8:	18 92       	mov	r2,r12
800069aa:	41 48       	lddsp	r8,sp[0x50]
800069ac:	58 08       	cp.w	r8,0
800069ae:	c1 b0       	breq	800069e4 <_dtoa_r+0x928>
800069b0:	04 9b       	mov	r11,r2
800069b2:	06 9c       	mov	r12,r3
800069b4:	e0 a0 08 45 	rcall	80007a3e <__mcmp>
800069b8:	c1 64       	brge	800069e4 <_dtoa_r+0x928>
800069ba:	06 9b       	mov	r11,r3
800069bc:	30 09       	mov	r9,0
800069be:	30 aa       	mov	r10,10
800069c0:	0e 9c       	mov	r12,r7
800069c2:	e0 a0 0a 2d 	rcall	80007e1c <__multadd>
800069c6:	20 16       	sub	r6,1
800069c8:	18 93       	mov	r3,r12
800069ca:	40 dc       	lddsp	r12,sp[0x34]
800069cc:	58 0c       	cp.w	r12,0
800069ce:	c0 31       	brne	800069d4 <_dtoa_r+0x918>
800069d0:	40 91       	lddsp	r1,sp[0x24]
800069d2:	c0 98       	rjmp	800069e4 <_dtoa_r+0x928>
800069d4:	08 9b       	mov	r11,r4
800069d6:	40 91       	lddsp	r1,sp[0x24]
800069d8:	30 09       	mov	r9,0
800069da:	30 aa       	mov	r10,10
800069dc:	0e 9c       	mov	r12,r7
800069de:	e0 a0 0a 1f 	rcall	80007e1c <__multadd>
800069e2:	18 94       	mov	r4,r12
800069e4:	58 01       	cp.w	r1,0
800069e6:	5f a9       	srle	r9
800069e8:	40 cb       	lddsp	r11,sp[0x30]
800069ea:	58 2b       	cp.w	r11,2
800069ec:	5f 98       	srgt	r8
800069ee:	f3 e8 00 08 	and	r8,r9,r8
800069f2:	c2 50       	breq	80006a3c <_dtoa_r+0x980>
800069f4:	58 01       	cp.w	r1,0
800069f6:	c1 11       	brne	80006a18 <_dtoa_r+0x95c>
800069f8:	04 9b       	mov	r11,r2
800069fa:	02 99       	mov	r9,r1
800069fc:	30 5a       	mov	r10,5
800069fe:	0e 9c       	mov	r12,r7
80006a00:	e0 a0 0a 0e 	rcall	80007e1c <__multadd>
80006a04:	18 92       	mov	r2,r12
80006a06:	18 9b       	mov	r11,r12
80006a08:	06 9c       	mov	r12,r3
80006a0a:	e0 a0 08 1a 	rcall	80007a3e <__mcmp>
80006a0e:	e0 89 00 0f 	brgt	80006a2c <_dtoa_r+0x970>
80006a12:	c0 38       	rjmp	80006a18 <_dtoa_r+0x95c>
80006a14:	30 02       	mov	r2,0
80006a16:	04 94       	mov	r4,r2
80006a18:	40 ea       	lddsp	r10,sp[0x38]
80006a1a:	30 09       	mov	r9,0
80006a1c:	5c da       	com	r10
80006a1e:	40 85       	lddsp	r5,sp[0x20]
80006a20:	50 6a       	stdsp	sp[0x18],r10
80006a22:	50 49       	stdsp	sp[0x10],r9
80006a24:	c0 f9       	rjmp	80006c42 <_dtoa_r+0xb86>
80006a26:	08 92       	mov	r2,r4
80006a28:	40 66       	lddsp	r6,sp[0x18]
80006a2a:	04 94       	mov	r4,r2
80006a2c:	2f f6       	sub	r6,-1
80006a2e:	50 66       	stdsp	sp[0x18],r6
80006a30:	33 18       	mov	r8,49
80006a32:	40 85       	lddsp	r5,sp[0x20]
80006a34:	0a c8       	st.b	r5++,r8
80006a36:	30 08       	mov	r8,0
80006a38:	50 48       	stdsp	sp[0x10],r8
80006a3a:	c0 49       	rjmp	80006c42 <_dtoa_r+0xb86>
80006a3c:	40 dc       	lddsp	r12,sp[0x34]
80006a3e:	58 0c       	cp.w	r12,0
80006a40:	e0 80 00 b5 	breq	80006baa <_dtoa_r+0xaee>
80006a44:	58 05       	cp.w	r5,0
80006a46:	e0 8a 00 08 	brle	80006a56 <_dtoa_r+0x99a>
80006a4a:	08 9b       	mov	r11,r4
80006a4c:	0a 9a       	mov	r10,r5
80006a4e:	0e 9c       	mov	r12,r7
80006a50:	e0 a0 09 1a 	rcall	80007c84 <__lshift>
80006a54:	18 94       	mov	r4,r12
80006a56:	40 6b       	lddsp	r11,sp[0x18]
80006a58:	58 0b       	cp.w	r11,0
80006a5a:	c0 31       	brne	80006a60 <_dtoa_r+0x9a4>
80006a5c:	08 9c       	mov	r12,r4
80006a5e:	c1 38       	rjmp	80006a84 <_dtoa_r+0x9c8>
80006a60:	68 1b       	ld.w	r11,r4[0x4]
80006a62:	0e 9c       	mov	r12,r7
80006a64:	e0 a0 08 20 	rcall	80007aa4 <_Balloc>
80006a68:	68 4a       	ld.w	r10,r4[0x10]
80006a6a:	18 95       	mov	r5,r12
80006a6c:	e8 cb ff f4 	sub	r11,r4,-12
80006a70:	2f ea       	sub	r10,-2
80006a72:	2f 4c       	sub	r12,-12
80006a74:	a3 6a       	lsl	r10,0x2
80006a76:	fe b0 e8 3e 	rcall	80003af2 <memcpy>
80006a7a:	0a 9b       	mov	r11,r5
80006a7c:	30 1a       	mov	r10,1
80006a7e:	0e 9c       	mov	r12,r7
80006a80:	e0 a0 09 02 	rcall	80007c84 <__lshift>
80006a84:	50 44       	stdsp	sp[0x10],r4
80006a86:	40 3a       	lddsp	r10,sp[0xc]
80006a88:	30 19       	mov	r9,1
80006a8a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006a8e:	18 94       	mov	r4,r12
80006a90:	50 da       	stdsp	sp[0x34],r10
80006a92:	40 85       	lddsp	r5,sp[0x20]
80006a94:	50 99       	stdsp	sp[0x24],r9
80006a96:	50 26       	stdsp	sp[0x8],r6
80006a98:	50 e1       	stdsp	sp[0x38],r1
80006a9a:	04 9b       	mov	r11,r2
80006a9c:	06 9c       	mov	r12,r3
80006a9e:	fe b0 fa 7f 	rcall	80005f9c <quorem>
80006aa2:	40 4b       	lddsp	r11,sp[0x10]
80006aa4:	f8 c0 ff d0 	sub	r0,r12,-48
80006aa8:	06 9c       	mov	r12,r3
80006aaa:	e0 a0 07 ca 	rcall	80007a3e <__mcmp>
80006aae:	08 9a       	mov	r10,r4
80006ab0:	50 6c       	stdsp	sp[0x18],r12
80006ab2:	04 9b       	mov	r11,r2
80006ab4:	0e 9c       	mov	r12,r7
80006ab6:	e0 a0 08 7f 	rcall	80007bb4 <__mdiff>
80006aba:	18 91       	mov	r1,r12
80006abc:	78 38       	ld.w	r8,r12[0xc]
80006abe:	58 08       	cp.w	r8,0
80006ac0:	c0 30       	breq	80006ac6 <_dtoa_r+0xa0a>
80006ac2:	30 16       	mov	r6,1
80006ac4:	c0 68       	rjmp	80006ad0 <_dtoa_r+0xa14>
80006ac6:	18 9b       	mov	r11,r12
80006ac8:	06 9c       	mov	r12,r3
80006aca:	e0 a0 07 ba 	rcall	80007a3e <__mcmp>
80006ace:	18 96       	mov	r6,r12
80006ad0:	0e 9c       	mov	r12,r7
80006ad2:	02 9b       	mov	r11,r1
80006ad4:	e0 a0 07 ce 	rcall	80007a70 <_Bfree>
80006ad8:	40 cc       	lddsp	r12,sp[0x30]
80006ada:	ed ec 10 08 	or	r8,r6,r12
80006ade:	c0 d1       	brne	80006af8 <_dtoa_r+0xa3c>
80006ae0:	40 db       	lddsp	r11,sp[0x34]
80006ae2:	58 0b       	cp.w	r11,0
80006ae4:	c0 a1       	brne	80006af8 <_dtoa_r+0xa3c>
80006ae6:	40 26       	lddsp	r6,sp[0x8]
80006ae8:	e0 40 00 39 	cp.w	r0,57
80006aec:	c3 00       	breq	80006b4c <_dtoa_r+0xa90>
80006aee:	40 6a       	lddsp	r10,sp[0x18]
80006af0:	58 0a       	cp.w	r10,0
80006af2:	e0 89 00 24 	brgt	80006b3a <_dtoa_r+0xa7e>
80006af6:	c2 f8       	rjmp	80006b54 <_dtoa_r+0xa98>
80006af8:	40 69       	lddsp	r9,sp[0x18]
80006afa:	58 09       	cp.w	r9,0
80006afc:	c0 85       	brlt	80006b0c <_dtoa_r+0xa50>
80006afe:	12 98       	mov	r8,r9
80006b00:	40 cc       	lddsp	r12,sp[0x30]
80006b02:	18 48       	or	r8,r12
80006b04:	c1 d1       	brne	80006b3e <_dtoa_r+0xa82>
80006b06:	40 db       	lddsp	r11,sp[0x34]
80006b08:	58 0b       	cp.w	r11,0
80006b0a:	c1 a1       	brne	80006b3e <_dtoa_r+0xa82>
80006b0c:	0c 99       	mov	r9,r6
80006b0e:	40 26       	lddsp	r6,sp[0x8]
80006b10:	58 09       	cp.w	r9,0
80006b12:	e0 8a 00 21 	brle	80006b54 <_dtoa_r+0xa98>
80006b16:	06 9b       	mov	r11,r3
80006b18:	30 1a       	mov	r10,1
80006b1a:	0e 9c       	mov	r12,r7
80006b1c:	e0 a0 08 b4 	rcall	80007c84 <__lshift>
80006b20:	04 9b       	mov	r11,r2
80006b22:	18 93       	mov	r3,r12
80006b24:	e0 a0 07 8d 	rcall	80007a3e <__mcmp>
80006b28:	e0 89 00 06 	brgt	80006b34 <_dtoa_r+0xa78>
80006b2c:	c1 41       	brne	80006b54 <_dtoa_r+0xa98>
80006b2e:	ed b0 00 00 	bld	r0,0x0
80006b32:	c1 11       	brne	80006b54 <_dtoa_r+0xa98>
80006b34:	e0 40 00 39 	cp.w	r0,57
80006b38:	c0 a0       	breq	80006b4c <_dtoa_r+0xa90>
80006b3a:	2f f0       	sub	r0,-1
80006b3c:	c0 c8       	rjmp	80006b54 <_dtoa_r+0xa98>
80006b3e:	58 06       	cp.w	r6,0
80006b40:	e0 8a 00 0c 	brle	80006b58 <_dtoa_r+0xa9c>
80006b44:	40 26       	lddsp	r6,sp[0x8]
80006b46:	e0 40 00 39 	cp.w	r0,57
80006b4a:	c0 41       	brne	80006b52 <_dtoa_r+0xa96>
80006b4c:	33 98       	mov	r8,57
80006b4e:	0a c8       	st.b	r5++,r8
80006b50:	c6 78       	rjmp	80006c1e <_dtoa_r+0xb62>
80006b52:	2f f0       	sub	r0,-1
80006b54:	0a c0       	st.b	r5++,r0
80006b56:	c7 58       	rjmp	80006c40 <_dtoa_r+0xb84>
80006b58:	0a c0       	st.b	r5++,r0
80006b5a:	40 9a       	lddsp	r10,sp[0x24]
80006b5c:	40 e9       	lddsp	r9,sp[0x38]
80006b5e:	12 3a       	cp.w	r10,r9
80006b60:	c4 30       	breq	80006be6 <_dtoa_r+0xb2a>
80006b62:	06 9b       	mov	r11,r3
80006b64:	30 09       	mov	r9,0
80006b66:	30 aa       	mov	r10,10
80006b68:	0e 9c       	mov	r12,r7
80006b6a:	e0 a0 09 59 	rcall	80007e1c <__multadd>
80006b6e:	40 48       	lddsp	r8,sp[0x10]
80006b70:	18 93       	mov	r3,r12
80006b72:	08 38       	cp.w	r8,r4
80006b74:	c0 91       	brne	80006b86 <_dtoa_r+0xaca>
80006b76:	10 9b       	mov	r11,r8
80006b78:	30 09       	mov	r9,0
80006b7a:	30 aa       	mov	r10,10
80006b7c:	0e 9c       	mov	r12,r7
80006b7e:	e0 a0 09 4f 	rcall	80007e1c <__multadd>
80006b82:	50 4c       	stdsp	sp[0x10],r12
80006b84:	c0 e8       	rjmp	80006ba0 <_dtoa_r+0xae4>
80006b86:	40 4b       	lddsp	r11,sp[0x10]
80006b88:	30 09       	mov	r9,0
80006b8a:	30 aa       	mov	r10,10
80006b8c:	0e 9c       	mov	r12,r7
80006b8e:	e0 a0 09 47 	rcall	80007e1c <__multadd>
80006b92:	08 9b       	mov	r11,r4
80006b94:	50 4c       	stdsp	sp[0x10],r12
80006b96:	30 09       	mov	r9,0
80006b98:	30 aa       	mov	r10,10
80006b9a:	0e 9c       	mov	r12,r7
80006b9c:	e0 a0 09 40 	rcall	80007e1c <__multadd>
80006ba0:	18 94       	mov	r4,r12
80006ba2:	40 9c       	lddsp	r12,sp[0x24]
80006ba4:	2f fc       	sub	r12,-1
80006ba6:	50 9c       	stdsp	sp[0x24],r12
80006ba8:	c7 9b       	rjmp	80006a9a <_dtoa_r+0x9de>
80006baa:	30 18       	mov	r8,1
80006bac:	06 90       	mov	r0,r3
80006bae:	40 85       	lddsp	r5,sp[0x20]
80006bb0:	08 93       	mov	r3,r4
80006bb2:	0c 94       	mov	r4,r6
80006bb4:	10 96       	mov	r6,r8
80006bb6:	04 9b       	mov	r11,r2
80006bb8:	00 9c       	mov	r12,r0
80006bba:	fe b0 f9 f1 	rcall	80005f9c <quorem>
80006bbe:	2d 0c       	sub	r12,-48
80006bc0:	0a cc       	st.b	r5++,r12
80006bc2:	02 36       	cp.w	r6,r1
80006bc4:	c0 a4       	brge	80006bd8 <_dtoa_r+0xb1c>
80006bc6:	00 9b       	mov	r11,r0
80006bc8:	30 09       	mov	r9,0
80006bca:	30 aa       	mov	r10,10
80006bcc:	0e 9c       	mov	r12,r7
80006bce:	2f f6       	sub	r6,-1
80006bd0:	e0 a0 09 26 	rcall	80007e1c <__multadd>
80006bd4:	18 90       	mov	r0,r12
80006bd6:	cf 0b       	rjmp	80006bb6 <_dtoa_r+0xafa>
80006bd8:	08 96       	mov	r6,r4
80006bda:	30 0b       	mov	r11,0
80006bdc:	06 94       	mov	r4,r3
80006bde:	50 4b       	stdsp	sp[0x10],r11
80006be0:	00 93       	mov	r3,r0
80006be2:	18 90       	mov	r0,r12
80006be4:	c0 28       	rjmp	80006be8 <_dtoa_r+0xb2c>
80006be6:	40 26       	lddsp	r6,sp[0x8]
80006be8:	06 9b       	mov	r11,r3
80006bea:	30 1a       	mov	r10,1
80006bec:	0e 9c       	mov	r12,r7
80006bee:	e0 a0 08 4b 	rcall	80007c84 <__lshift>
80006bf2:	04 9b       	mov	r11,r2
80006bf4:	18 93       	mov	r3,r12
80006bf6:	e0 a0 07 24 	rcall	80007a3e <__mcmp>
80006bfa:	e0 89 00 12 	brgt	80006c1e <_dtoa_r+0xb62>
80006bfe:	c1 b1       	brne	80006c34 <_dtoa_r+0xb78>
80006c00:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006c04:	c0 d1       	brne	80006c1e <_dtoa_r+0xb62>
80006c06:	c1 78       	rjmp	80006c34 <_dtoa_r+0xb78>
80006c08:	40 89       	lddsp	r9,sp[0x20]
80006c0a:	12 38       	cp.w	r8,r9
80006c0c:	c0 30       	breq	80006c12 <_dtoa_r+0xb56>
80006c0e:	10 95       	mov	r5,r8
80006c10:	c0 88       	rjmp	80006c20 <_dtoa_r+0xb64>
80006c12:	2f f6       	sub	r6,-1
80006c14:	50 66       	stdsp	sp[0x18],r6
80006c16:	33 18       	mov	r8,49
80006c18:	40 8c       	lddsp	r12,sp[0x20]
80006c1a:	b8 88       	st.b	r12[0x0],r8
80006c1c:	c1 38       	rjmp	80006c42 <_dtoa_r+0xb86>
80006c1e:	33 9a       	mov	r10,57
80006c20:	0a 98       	mov	r8,r5
80006c22:	11 79       	ld.ub	r9,--r8
80006c24:	f4 09 18 00 	cp.b	r9,r10
80006c28:	cf 00       	breq	80006c08 <_dtoa_r+0xb4c>
80006c2a:	2f f9       	sub	r9,-1
80006c2c:	b0 89       	st.b	r8[0x0],r9
80006c2e:	c0 98       	rjmp	80006c40 <_dtoa_r+0xb84>
80006c30:	10 95       	mov	r5,r8
80006c32:	c0 28       	rjmp	80006c36 <_dtoa_r+0xb7a>
80006c34:	33 09       	mov	r9,48
80006c36:	0a 98       	mov	r8,r5
80006c38:	11 7a       	ld.ub	r10,--r8
80006c3a:	f2 0a 18 00 	cp.b	r10,r9
80006c3e:	cf 90       	breq	80006c30 <_dtoa_r+0xb74>
80006c40:	50 66       	stdsp	sp[0x18],r6
80006c42:	04 9b       	mov	r11,r2
80006c44:	0e 9c       	mov	r12,r7
80006c46:	e0 a0 07 15 	rcall	80007a70 <_Bfree>
80006c4a:	58 04       	cp.w	r4,0
80006c4c:	c1 20       	breq	80006c70 <_dtoa_r+0xbb4>
80006c4e:	40 4b       	lddsp	r11,sp[0x10]
80006c50:	08 3b       	cp.w	r11,r4
80006c52:	5f 19       	srne	r9
80006c54:	58 0b       	cp.w	r11,0
80006c56:	5f 18       	srne	r8
80006c58:	f3 e8 00 08 	and	r8,r9,r8
80006c5c:	c0 40       	breq	80006c64 <_dtoa_r+0xba8>
80006c5e:	0e 9c       	mov	r12,r7
80006c60:	e0 a0 07 08 	rcall	80007a70 <_Bfree>
80006c64:	08 9b       	mov	r11,r4
80006c66:	0e 9c       	mov	r12,r7
80006c68:	e0 a0 07 04 	rcall	80007a70 <_Bfree>
80006c6c:	c0 28       	rjmp	80006c70 <_dtoa_r+0xbb4>
80006c6e:	50 66       	stdsp	sp[0x18],r6
80006c70:	0e 9c       	mov	r12,r7
80006c72:	06 9b       	mov	r11,r3
80006c74:	e0 a0 06 fe 	rcall	80007a70 <_Bfree>
80006c78:	30 08       	mov	r8,0
80006c7a:	aa 88       	st.b	r5[0x0],r8
80006c7c:	40 68       	lddsp	r8,sp[0x18]
80006c7e:	41 5a       	lddsp	r10,sp[0x54]
80006c80:	2f f8       	sub	r8,-1
80006c82:	41 29       	lddsp	r9,sp[0x48]
80006c84:	95 08       	st.w	r10[0x0],r8
80006c86:	40 8c       	lddsp	r12,sp[0x20]
80006c88:	58 09       	cp.w	r9,0
80006c8a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006c8e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006c92:	2e 6d       	sub	sp,-104
80006c94:	d8 32       	popm	r0-r7,pc
80006c96:	d7 03       	nop

80006c98 <_fflush_r>:
80006c98:	d4 21       	pushm	r4-r7,lr
80006c9a:	16 97       	mov	r7,r11
80006c9c:	18 96       	mov	r6,r12
80006c9e:	76 48       	ld.w	r8,r11[0x10]
80006ca0:	58 08       	cp.w	r8,0
80006ca2:	c7 f0       	breq	80006da0 <_fflush_r+0x108>
80006ca4:	58 0c       	cp.w	r12,0
80006ca6:	c0 50       	breq	80006cb0 <_fflush_r+0x18>
80006ca8:	78 68       	ld.w	r8,r12[0x18]
80006caa:	58 08       	cp.w	r8,0
80006cac:	c0 21       	brne	80006cb0 <_fflush_r+0x18>
80006cae:	cc dc       	rcall	80006e48 <__sinit>
80006cb0:	fe c8 d4 b4 	sub	r8,pc,-11084
80006cb4:	10 37       	cp.w	r7,r8
80006cb6:	c0 31       	brne	80006cbc <_fflush_r+0x24>
80006cb8:	6c 07       	ld.w	r7,r6[0x0]
80006cba:	c0 c8       	rjmp	80006cd2 <_fflush_r+0x3a>
80006cbc:	fe c8 d4 a0 	sub	r8,pc,-11104
80006cc0:	10 37       	cp.w	r7,r8
80006cc2:	c0 31       	brne	80006cc8 <_fflush_r+0x30>
80006cc4:	6c 17       	ld.w	r7,r6[0x4]
80006cc6:	c0 68       	rjmp	80006cd2 <_fflush_r+0x3a>
80006cc8:	fe c8 d4 8c 	sub	r8,pc,-11124
80006ccc:	10 37       	cp.w	r7,r8
80006cce:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006cd2:	8e 6a       	ld.sh	r10,r7[0xc]
80006cd4:	14 98       	mov	r8,r10
80006cd6:	ed ba 00 03 	bld	r10,0x3
80006cda:	c4 20       	breq	80006d5e <_fflush_r+0xc6>
80006cdc:	ab ba       	sbr	r10,0xb
80006cde:	ae 6a       	st.h	r7[0xc],r10
80006ce0:	6e 18       	ld.w	r8,r7[0x4]
80006ce2:	58 08       	cp.w	r8,0
80006ce4:	e0 89 00 06 	brgt	80006cf0 <_fflush_r+0x58>
80006ce8:	6f 08       	ld.w	r8,r7[0x40]
80006cea:	58 08       	cp.w	r8,0
80006cec:	e0 8a 00 5a 	brle	80006da0 <_fflush_r+0x108>
80006cf0:	6e b8       	ld.w	r8,r7[0x2c]
80006cf2:	58 08       	cp.w	r8,0
80006cf4:	c5 60       	breq	80006da0 <_fflush_r+0x108>
80006cf6:	e2 1a 10 00 	andl	r10,0x1000,COH
80006cfa:	c0 30       	breq	80006d00 <_fflush_r+0x68>
80006cfc:	6f 55       	ld.w	r5,r7[0x54]
80006cfe:	c0 f8       	rjmp	80006d1c <_fflush_r+0x84>
80006d00:	30 19       	mov	r9,1
80006d02:	6e 8b       	ld.w	r11,r7[0x20]
80006d04:	0c 9c       	mov	r12,r6
80006d06:	5d 18       	icall	r8
80006d08:	18 95       	mov	r5,r12
80006d0a:	5b fc       	cp.w	r12,-1
80006d0c:	c0 81       	brne	80006d1c <_fflush_r+0x84>
80006d0e:	6c 38       	ld.w	r8,r6[0xc]
80006d10:	59 d8       	cp.w	r8,29
80006d12:	c4 70       	breq	80006da0 <_fflush_r+0x108>
80006d14:	8e 68       	ld.sh	r8,r7[0xc]
80006d16:	a7 a8       	sbr	r8,0x6
80006d18:	ae 68       	st.h	r7[0xc],r8
80006d1a:	d8 22       	popm	r4-r7,pc
80006d1c:	8e 68       	ld.sh	r8,r7[0xc]
80006d1e:	ed b8 00 02 	bld	r8,0x2
80006d22:	c0 91       	brne	80006d34 <_fflush_r+0x9c>
80006d24:	6e 18       	ld.w	r8,r7[0x4]
80006d26:	10 15       	sub	r5,r8
80006d28:	6e d8       	ld.w	r8,r7[0x34]
80006d2a:	58 08       	cp.w	r8,0
80006d2c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006d30:	eb d8 e1 15 	subne	r5,r5,r8
80006d34:	6e b8       	ld.w	r8,r7[0x2c]
80006d36:	0c 9c       	mov	r12,r6
80006d38:	30 09       	mov	r9,0
80006d3a:	0a 9a       	mov	r10,r5
80006d3c:	6e 8b       	ld.w	r11,r7[0x20]
80006d3e:	5d 18       	icall	r8
80006d40:	8e 68       	ld.sh	r8,r7[0xc]
80006d42:	0a 3c       	cp.w	r12,r5
80006d44:	c2 61       	brne	80006d90 <_fflush_r+0xf8>
80006d46:	ab d8       	cbr	r8,0xb
80006d48:	30 0c       	mov	r12,0
80006d4a:	6e 49       	ld.w	r9,r7[0x10]
80006d4c:	ae 68       	st.h	r7[0xc],r8
80006d4e:	8f 1c       	st.w	r7[0x4],r12
80006d50:	8f 09       	st.w	r7[0x0],r9
80006d52:	ed b8 00 0c 	bld	r8,0xc
80006d56:	c2 51       	brne	80006da0 <_fflush_r+0x108>
80006d58:	ef 45 00 54 	st.w	r7[84],r5
80006d5c:	d8 22       	popm	r4-r7,pc
80006d5e:	6e 45       	ld.w	r5,r7[0x10]
80006d60:	58 05       	cp.w	r5,0
80006d62:	c1 f0       	breq	80006da0 <_fflush_r+0x108>
80006d64:	6e 04       	ld.w	r4,r7[0x0]
80006d66:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006d6a:	8f 05       	st.w	r7[0x0],r5
80006d6c:	f9 b8 01 00 	movne	r8,0
80006d70:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006d74:	0a 14       	sub	r4,r5
80006d76:	8f 28       	st.w	r7[0x8],r8
80006d78:	c1 18       	rjmp	80006d9a <_fflush_r+0x102>
80006d7a:	08 99       	mov	r9,r4
80006d7c:	0a 9a       	mov	r10,r5
80006d7e:	6e a8       	ld.w	r8,r7[0x28]
80006d80:	6e 8b       	ld.w	r11,r7[0x20]
80006d82:	0c 9c       	mov	r12,r6
80006d84:	5d 18       	icall	r8
80006d86:	18 14       	sub	r4,r12
80006d88:	58 0c       	cp.w	r12,0
80006d8a:	e0 89 00 07 	brgt	80006d98 <_fflush_r+0x100>
80006d8e:	8e 68       	ld.sh	r8,r7[0xc]
80006d90:	a7 a8       	sbr	r8,0x6
80006d92:	3f fc       	mov	r12,-1
80006d94:	ae 68       	st.h	r7[0xc],r8
80006d96:	d8 22       	popm	r4-r7,pc
80006d98:	18 05       	add	r5,r12
80006d9a:	58 04       	cp.w	r4,0
80006d9c:	fe 99 ff ef 	brgt	80006d7a <_fflush_r+0xe2>
80006da0:	d8 2a       	popm	r4-r7,pc,r12=0
80006da2:	d7 03       	nop

80006da4 <__sfp_lock_acquire>:
80006da4:	5e fc       	retal	r12

80006da6 <__sfp_lock_release>:
80006da6:	5e fc       	retal	r12

80006da8 <_cleanup_r>:
80006da8:	d4 01       	pushm	lr
80006daa:	fe cb e8 7a 	sub	r11,pc,-6022
80006dae:	e0 a0 02 fd 	rcall	800073a8 <_fwalk>
80006db2:	d8 02       	popm	pc

80006db4 <__sfmoreglue>:
80006db4:	d4 21       	pushm	r4-r7,lr
80006db6:	16 95       	mov	r5,r11
80006db8:	f6 06 10 5c 	mul	r6,r11,92
80006dbc:	ec cb ff f4 	sub	r11,r6,-12
80006dc0:	e0 a0 03 84 	rcall	800074c8 <_malloc_r>
80006dc4:	18 97       	mov	r7,r12
80006dc6:	c0 90       	breq	80006dd8 <__sfmoreglue+0x24>
80006dc8:	99 15       	st.w	r12[0x4],r5
80006dca:	30 0b       	mov	r11,0
80006dcc:	2f 4c       	sub	r12,-12
80006dce:	0c 9a       	mov	r10,r6
80006dd0:	8f 2c       	st.w	r7[0x8],r12
80006dd2:	8f 0b       	st.w	r7[0x0],r11
80006dd4:	fe b0 e7 33 	rcall	80003c3a <memset>
80006dd8:	0e 9c       	mov	r12,r7
80006dda:	d8 22       	popm	r4-r7,pc

80006ddc <__sfp>:
80006ddc:	d4 21       	pushm	r4-r7,lr
80006dde:	fe c8 d5 7e 	sub	r8,pc,-10882
80006de2:	18 96       	mov	r6,r12
80006de4:	70 07       	ld.w	r7,r8[0x0]
80006de6:	6e 68       	ld.w	r8,r7[0x18]
80006de8:	58 08       	cp.w	r8,0
80006dea:	c0 31       	brne	80006df0 <__sfp+0x14>
80006dec:	0e 9c       	mov	r12,r7
80006dee:	c2 dc       	rcall	80006e48 <__sinit>
80006df0:	ee c7 ff 28 	sub	r7,r7,-216
80006df4:	30 05       	mov	r5,0
80006df6:	6e 2c       	ld.w	r12,r7[0x8]
80006df8:	6e 18       	ld.w	r8,r7[0x4]
80006dfa:	c0 68       	rjmp	80006e06 <__sfp+0x2a>
80006dfc:	98 69       	ld.sh	r9,r12[0xc]
80006dfe:	ea 09 19 00 	cp.h	r9,r5
80006e02:	c1 10       	breq	80006e24 <__sfp+0x48>
80006e04:	2a 4c       	sub	r12,-92
80006e06:	20 18       	sub	r8,1
80006e08:	cf a7       	brpl	80006dfc <__sfp+0x20>
80006e0a:	6e 08       	ld.w	r8,r7[0x0]
80006e0c:	58 08       	cp.w	r8,0
80006e0e:	c0 61       	brne	80006e1a <__sfp+0x3e>
80006e10:	30 4b       	mov	r11,4
80006e12:	0c 9c       	mov	r12,r6
80006e14:	cd 0f       	rcall	80006db4 <__sfmoreglue>
80006e16:	8f 0c       	st.w	r7[0x0],r12
80006e18:	c0 30       	breq	80006e1e <__sfp+0x42>
80006e1a:	6e 07       	ld.w	r7,r7[0x0]
80006e1c:	ce db       	rjmp	80006df6 <__sfp+0x1a>
80006e1e:	30 c8       	mov	r8,12
80006e20:	8d 38       	st.w	r6[0xc],r8
80006e22:	d8 22       	popm	r4-r7,pc
80006e24:	30 08       	mov	r8,0
80006e26:	f9 48 00 4c 	st.w	r12[76],r8
80006e2a:	99 08       	st.w	r12[0x0],r8
80006e2c:	99 28       	st.w	r12[0x8],r8
80006e2e:	99 18       	st.w	r12[0x4],r8
80006e30:	99 48       	st.w	r12[0x10],r8
80006e32:	99 58       	st.w	r12[0x14],r8
80006e34:	99 68       	st.w	r12[0x18],r8
80006e36:	99 d8       	st.w	r12[0x34],r8
80006e38:	99 e8       	st.w	r12[0x38],r8
80006e3a:	f9 48 00 48 	st.w	r12[72],r8
80006e3e:	3f f8       	mov	r8,-1
80006e40:	b8 78       	st.h	r12[0xe],r8
80006e42:	30 18       	mov	r8,1
80006e44:	b8 68       	st.h	r12[0xc],r8
80006e46:	d8 22       	popm	r4-r7,pc

80006e48 <__sinit>:
80006e48:	d4 21       	pushm	r4-r7,lr
80006e4a:	18 96       	mov	r6,r12
80006e4c:	78 67       	ld.w	r7,r12[0x18]
80006e4e:	58 07       	cp.w	r7,0
80006e50:	c4 91       	brne	80006ee2 <__sinit+0x9a>
80006e52:	fe c8 00 aa 	sub	r8,pc,170
80006e56:	30 15       	mov	r5,1
80006e58:	99 a8       	st.w	r12[0x28],r8
80006e5a:	f9 47 00 d8 	st.w	r12[216],r7
80006e5e:	f9 47 00 dc 	st.w	r12[220],r7
80006e62:	f9 47 00 e0 	st.w	r12[224],r7
80006e66:	99 65       	st.w	r12[0x18],r5
80006e68:	cb af       	rcall	80006ddc <__sfp>
80006e6a:	8d 0c       	st.w	r6[0x0],r12
80006e6c:	0c 9c       	mov	r12,r6
80006e6e:	cb 7f       	rcall	80006ddc <__sfp>
80006e70:	8d 1c       	st.w	r6[0x4],r12
80006e72:	0c 9c       	mov	r12,r6
80006e74:	cb 4f       	rcall	80006ddc <__sfp>
80006e76:	6c 09       	ld.w	r9,r6[0x0]
80006e78:	30 48       	mov	r8,4
80006e7a:	93 07       	st.w	r9[0x0],r7
80006e7c:	b2 68       	st.h	r9[0xc],r8
80006e7e:	93 17       	st.w	r9[0x4],r7
80006e80:	93 27       	st.w	r9[0x8],r7
80006e82:	6c 18       	ld.w	r8,r6[0x4]
80006e84:	b2 77       	st.h	r9[0xe],r7
80006e86:	93 47       	st.w	r9[0x10],r7
80006e88:	93 57       	st.w	r9[0x14],r7
80006e8a:	93 67       	st.w	r9[0x18],r7
80006e8c:	93 89       	st.w	r9[0x20],r9
80006e8e:	91 07       	st.w	r8[0x0],r7
80006e90:	91 17       	st.w	r8[0x4],r7
80006e92:	91 27       	st.w	r8[0x8],r7
80006e94:	fe ce eb f4 	sub	lr,pc,-5132
80006e98:	fe cb ec 24 	sub	r11,pc,-5084
80006e9c:	93 9e       	st.w	r9[0x24],lr
80006e9e:	93 ab       	st.w	r9[0x28],r11
80006ea0:	fe ca ec 4c 	sub	r10,pc,-5044
80006ea4:	fe c4 ec 58 	sub	r4,pc,-5032
80006ea8:	93 ba       	st.w	r9[0x2c],r10
80006eaa:	93 c4       	st.w	r9[0x30],r4
80006eac:	30 99       	mov	r9,9
80006eae:	b0 69       	st.h	r8[0xc],r9
80006eb0:	b0 75       	st.h	r8[0xe],r5
80006eb2:	91 c4       	st.w	r8[0x30],r4
80006eb4:	91 47       	st.w	r8[0x10],r7
80006eb6:	91 57       	st.w	r8[0x14],r7
80006eb8:	91 67       	st.w	r8[0x18],r7
80006eba:	91 88       	st.w	r8[0x20],r8
80006ebc:	91 9e       	st.w	r8[0x24],lr
80006ebe:	91 ab       	st.w	r8[0x28],r11
80006ec0:	91 ba       	st.w	r8[0x2c],r10
80006ec2:	8d 2c       	st.w	r6[0x8],r12
80006ec4:	31 28       	mov	r8,18
80006ec6:	99 07       	st.w	r12[0x0],r7
80006ec8:	b8 68       	st.h	r12[0xc],r8
80006eca:	99 17       	st.w	r12[0x4],r7
80006ecc:	99 27       	st.w	r12[0x8],r7
80006ece:	30 28       	mov	r8,2
80006ed0:	b8 78       	st.h	r12[0xe],r8
80006ed2:	99 c4       	st.w	r12[0x30],r4
80006ed4:	99 67       	st.w	r12[0x18],r7
80006ed6:	99 9e       	st.w	r12[0x24],lr
80006ed8:	99 ab       	st.w	r12[0x28],r11
80006eda:	99 ba       	st.w	r12[0x2c],r10
80006edc:	99 47       	st.w	r12[0x10],r7
80006ede:	99 57       	st.w	r12[0x14],r7
80006ee0:	99 8c       	st.w	r12[0x20],r12
80006ee2:	d8 22       	popm	r4-r7,pc

80006ee4 <_malloc_trim_r>:
80006ee4:	d4 21       	pushm	r4-r7,lr
80006ee6:	16 95       	mov	r5,r11
80006ee8:	18 97       	mov	r7,r12
80006eea:	e0 a0 05 31 	rcall	8000794c <__malloc_lock>
80006eee:	e0 64 01 1c 	mov	r4,284
80006ef2:	68 28       	ld.w	r8,r4[0x8]
80006ef4:	70 16       	ld.w	r6,r8[0x4]
80006ef6:	e0 16 ff fc 	andl	r6,0xfffc
80006efa:	ec c8 ff 91 	sub	r8,r6,-111
80006efe:	f0 05 01 05 	sub	r5,r8,r5
80006f02:	e0 15 ff 80 	andl	r5,0xff80
80006f06:	ea c5 00 80 	sub	r5,r5,128
80006f0a:	e0 45 00 7f 	cp.w	r5,127
80006f0e:	e0 8a 00 25 	brle	80006f58 <_malloc_trim_r+0x74>
80006f12:	30 0b       	mov	r11,0
80006f14:	0e 9c       	mov	r12,r7
80006f16:	e0 a0 09 8b 	rcall	8000822c <_sbrk_r>
80006f1a:	68 28       	ld.w	r8,r4[0x8]
80006f1c:	0c 08       	add	r8,r6
80006f1e:	10 3c       	cp.w	r12,r8
80006f20:	c1 c1       	brne	80006f58 <_malloc_trim_r+0x74>
80006f22:	ea 0b 11 00 	rsub	r11,r5,0
80006f26:	0e 9c       	mov	r12,r7
80006f28:	e0 a0 09 82 	rcall	8000822c <_sbrk_r>
80006f2c:	5b fc       	cp.w	r12,-1
80006f2e:	c1 91       	brne	80006f60 <_malloc_trim_r+0x7c>
80006f30:	30 0b       	mov	r11,0
80006f32:	0e 9c       	mov	r12,r7
80006f34:	e0 a0 09 7c 	rcall	8000822c <_sbrk_r>
80006f38:	68 28       	ld.w	r8,r4[0x8]
80006f3a:	f8 08 01 09 	sub	r9,r12,r8
80006f3e:	58 f9       	cp.w	r9,15
80006f40:	e0 8a 00 0c 	brle	80006f58 <_malloc_trim_r+0x74>
80006f44:	a1 a9       	sbr	r9,0x0
80006f46:	91 19       	st.w	r8[0x4],r9
80006f48:	e0 68 05 28 	mov	r8,1320
80006f4c:	70 09       	ld.w	r9,r8[0x0]
80006f4e:	e0 68 06 48 	mov	r8,1608
80006f52:	f8 09 01 09 	sub	r9,r12,r9
80006f56:	91 09       	st.w	r8[0x0],r9
80006f58:	0e 9c       	mov	r12,r7
80006f5a:	e0 a0 04 fa 	rcall	8000794e <__malloc_unlock>
80006f5e:	d8 2a       	popm	r4-r7,pc,r12=0
80006f60:	68 28       	ld.w	r8,r4[0x8]
80006f62:	0a 16       	sub	r6,r5
80006f64:	a1 a6       	sbr	r6,0x0
80006f66:	91 16       	st.w	r8[0x4],r6
80006f68:	e0 68 06 48 	mov	r8,1608
80006f6c:	70 09       	ld.w	r9,r8[0x0]
80006f6e:	0a 19       	sub	r9,r5
80006f70:	0e 9c       	mov	r12,r7
80006f72:	91 09       	st.w	r8[0x0],r9
80006f74:	e0 a0 04 ed 	rcall	8000794e <__malloc_unlock>
80006f78:	da 2a       	popm	r4-r7,pc,r12=1
80006f7a:	d7 03       	nop

80006f7c <_free_r>:
80006f7c:	d4 21       	pushm	r4-r7,lr
80006f7e:	16 96       	mov	r6,r11
80006f80:	18 97       	mov	r7,r12
80006f82:	58 0b       	cp.w	r11,0
80006f84:	e0 80 00 c0 	breq	80007104 <_free_r+0x188>
80006f88:	e0 a0 04 e2 	rcall	8000794c <__malloc_lock>
80006f8c:	20 86       	sub	r6,8
80006f8e:	e0 6a 01 1c 	mov	r10,284
80006f92:	6c 18       	ld.w	r8,r6[0x4]
80006f94:	74 2e       	ld.w	lr,r10[0x8]
80006f96:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006f9a:	a1 c8       	cbr	r8,0x0
80006f9c:	ec 08 00 09 	add	r9,r6,r8
80006fa0:	72 1b       	ld.w	r11,r9[0x4]
80006fa2:	e0 1b ff fc 	andl	r11,0xfffc
80006fa6:	1c 39       	cp.w	r9,lr
80006fa8:	c1 e1       	brne	80006fe4 <_free_r+0x68>
80006faa:	f6 08 00 08 	add	r8,r11,r8
80006fae:	58 0c       	cp.w	r12,0
80006fb0:	c0 81       	brne	80006fc0 <_free_r+0x44>
80006fb2:	6c 09       	ld.w	r9,r6[0x0]
80006fb4:	12 16       	sub	r6,r9
80006fb6:	12 08       	add	r8,r9
80006fb8:	6c 3b       	ld.w	r11,r6[0xc]
80006fba:	6c 29       	ld.w	r9,r6[0x8]
80006fbc:	97 29       	st.w	r11[0x8],r9
80006fbe:	93 3b       	st.w	r9[0xc],r11
80006fc0:	10 99       	mov	r9,r8
80006fc2:	95 26       	st.w	r10[0x8],r6
80006fc4:	a1 a9       	sbr	r9,0x0
80006fc6:	8d 19       	st.w	r6[0x4],r9
80006fc8:	e0 69 05 24 	mov	r9,1316
80006fcc:	72 09       	ld.w	r9,r9[0x0]
80006fce:	12 38       	cp.w	r8,r9
80006fd0:	c0 63       	brcs	80006fdc <_free_r+0x60>
80006fd2:	e0 68 06 44 	mov	r8,1604
80006fd6:	0e 9c       	mov	r12,r7
80006fd8:	70 0b       	ld.w	r11,r8[0x0]
80006fda:	c8 5f       	rcall	80006ee4 <_malloc_trim_r>
80006fdc:	0e 9c       	mov	r12,r7
80006fde:	e0 a0 04 b8 	rcall	8000794e <__malloc_unlock>
80006fe2:	d8 22       	popm	r4-r7,pc
80006fe4:	93 1b       	st.w	r9[0x4],r11
80006fe6:	58 0c       	cp.w	r12,0
80006fe8:	c0 30       	breq	80006fee <_free_r+0x72>
80006fea:	30 0c       	mov	r12,0
80006fec:	c1 08       	rjmp	8000700c <_free_r+0x90>
80006fee:	6c 0e       	ld.w	lr,r6[0x0]
80006ff0:	f4 c5 ff f8 	sub	r5,r10,-8
80006ff4:	1c 16       	sub	r6,lr
80006ff6:	1c 08       	add	r8,lr
80006ff8:	6c 2e       	ld.w	lr,r6[0x8]
80006ffa:	0a 3e       	cp.w	lr,r5
80006ffc:	f9 bc 00 01 	moveq	r12,1
80007000:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007004:	eb fe 1a 02 	st.wne	r5[0x8],lr
80007008:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000700c:	f2 0b 00 0e 	add	lr,r9,r11
80007010:	7c 1e       	ld.w	lr,lr[0x4]
80007012:	ed be 00 00 	bld	lr,0x0
80007016:	c1 40       	breq	8000703e <_free_r+0xc2>
80007018:	16 08       	add	r8,r11
8000701a:	58 0c       	cp.w	r12,0
8000701c:	c0 d1       	brne	80007036 <_free_r+0xba>
8000701e:	e0 6e 01 1c 	mov	lr,284
80007022:	72 2b       	ld.w	r11,r9[0x8]
80007024:	2f 8e       	sub	lr,-8
80007026:	1c 3b       	cp.w	r11,lr
80007028:	c0 71       	brne	80007036 <_free_r+0xba>
8000702a:	97 36       	st.w	r11[0xc],r6
8000702c:	97 26       	st.w	r11[0x8],r6
8000702e:	8d 2b       	st.w	r6[0x8],r11
80007030:	8d 3b       	st.w	r6[0xc],r11
80007032:	30 1c       	mov	r12,1
80007034:	c0 58       	rjmp	8000703e <_free_r+0xc2>
80007036:	72 2b       	ld.w	r11,r9[0x8]
80007038:	72 39       	ld.w	r9,r9[0xc]
8000703a:	93 2b       	st.w	r9[0x8],r11
8000703c:	97 39       	st.w	r11[0xc],r9
8000703e:	10 99       	mov	r9,r8
80007040:	ec 08 09 08 	st.w	r6[r8],r8
80007044:	a1 a9       	sbr	r9,0x0
80007046:	8d 19       	st.w	r6[0x4],r9
80007048:	58 0c       	cp.w	r12,0
8000704a:	c5 a1       	brne	800070fe <_free_r+0x182>
8000704c:	e0 48 01 ff 	cp.w	r8,511
80007050:	e0 8b 00 13 	brhi	80007076 <_free_r+0xfa>
80007054:	a3 98       	lsr	r8,0x3
80007056:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000705a:	72 2b       	ld.w	r11,r9[0x8]
8000705c:	8d 39       	st.w	r6[0xc],r9
8000705e:	8d 2b       	st.w	r6[0x8],r11
80007060:	97 36       	st.w	r11[0xc],r6
80007062:	93 26       	st.w	r9[0x8],r6
80007064:	a3 48       	asr	r8,0x2
80007066:	74 19       	ld.w	r9,r10[0x4]
80007068:	30 1b       	mov	r11,1
8000706a:	f6 08 09 48 	lsl	r8,r11,r8
8000706e:	f3 e8 10 08 	or	r8,r9,r8
80007072:	95 18       	st.w	r10[0x4],r8
80007074:	c4 58       	rjmp	800070fe <_free_r+0x182>
80007076:	f0 0b 16 09 	lsr	r11,r8,0x9
8000707a:	58 4b       	cp.w	r11,4
8000707c:	e0 8b 00 06 	brhi	80007088 <_free_r+0x10c>
80007080:	f0 0b 16 06 	lsr	r11,r8,0x6
80007084:	2c 8b       	sub	r11,-56
80007086:	c2 08       	rjmp	800070c6 <_free_r+0x14a>
80007088:	59 4b       	cp.w	r11,20
8000708a:	e0 8b 00 04 	brhi	80007092 <_free_r+0x116>
8000708e:	2a 5b       	sub	r11,-91
80007090:	c1 b8       	rjmp	800070c6 <_free_r+0x14a>
80007092:	e0 4b 00 54 	cp.w	r11,84
80007096:	e0 8b 00 06 	brhi	800070a2 <_free_r+0x126>
8000709a:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000709e:	29 2b       	sub	r11,-110
800070a0:	c1 38       	rjmp	800070c6 <_free_r+0x14a>
800070a2:	e0 4b 01 54 	cp.w	r11,340
800070a6:	e0 8b 00 06 	brhi	800070b2 <_free_r+0x136>
800070aa:	f0 0b 16 0f 	lsr	r11,r8,0xf
800070ae:	28 9b       	sub	r11,-119
800070b0:	c0 b8       	rjmp	800070c6 <_free_r+0x14a>
800070b2:	e0 4b 05 54 	cp.w	r11,1364
800070b6:	e0 88 00 05 	brls	800070c0 <_free_r+0x144>
800070ba:	37 eb       	mov	r11,126
800070bc:	c0 58       	rjmp	800070c6 <_free_r+0x14a>
800070be:	d7 03       	nop
800070c0:	f0 0b 16 12 	lsr	r11,r8,0x12
800070c4:	28 4b       	sub	r11,-124
800070c6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800070ca:	78 29       	ld.w	r9,r12[0x8]
800070cc:	18 39       	cp.w	r9,r12
800070ce:	c0 e1       	brne	800070ea <_free_r+0x16e>
800070d0:	74 18       	ld.w	r8,r10[0x4]
800070d2:	a3 4b       	asr	r11,0x2
800070d4:	30 1c       	mov	r12,1
800070d6:	f8 0b 09 4b 	lsl	r11,r12,r11
800070da:	f1 eb 10 0b 	or	r11,r8,r11
800070de:	12 98       	mov	r8,r9
800070e0:	95 1b       	st.w	r10[0x4],r11
800070e2:	c0 a8       	rjmp	800070f6 <_free_r+0x17a>
800070e4:	72 29       	ld.w	r9,r9[0x8]
800070e6:	18 39       	cp.w	r9,r12
800070e8:	c0 60       	breq	800070f4 <_free_r+0x178>
800070ea:	72 1a       	ld.w	r10,r9[0x4]
800070ec:	e0 1a ff fc 	andl	r10,0xfffc
800070f0:	14 38       	cp.w	r8,r10
800070f2:	cf 93       	brcs	800070e4 <_free_r+0x168>
800070f4:	72 38       	ld.w	r8,r9[0xc]
800070f6:	8d 38       	st.w	r6[0xc],r8
800070f8:	8d 29       	st.w	r6[0x8],r9
800070fa:	93 36       	st.w	r9[0xc],r6
800070fc:	91 26       	st.w	r8[0x8],r6
800070fe:	0e 9c       	mov	r12,r7
80007100:	e0 a0 04 27 	rcall	8000794e <__malloc_unlock>
80007104:	d8 22       	popm	r4-r7,pc
80007106:	d7 03       	nop

80007108 <__sfvwrite_r>:
80007108:	d4 31       	pushm	r0-r7,lr
8000710a:	20 3d       	sub	sp,12
8000710c:	14 94       	mov	r4,r10
8000710e:	18 95       	mov	r5,r12
80007110:	16 97       	mov	r7,r11
80007112:	74 28       	ld.w	r8,r10[0x8]
80007114:	58 08       	cp.w	r8,0
80007116:	e0 80 01 45 	breq	800073a0 <__sfvwrite_r+0x298>
8000711a:	96 68       	ld.sh	r8,r11[0xc]
8000711c:	ed b8 00 03 	bld	r8,0x3
80007120:	c0 41       	brne	80007128 <__sfvwrite_r+0x20>
80007122:	76 48       	ld.w	r8,r11[0x10]
80007124:	58 08       	cp.w	r8,0
80007126:	c0 c1       	brne	8000713e <__sfvwrite_r+0x36>
80007128:	0e 9b       	mov	r11,r7
8000712a:	0a 9c       	mov	r12,r5
8000712c:	fe b0 f6 ca 	rcall	80005ec0 <__swsetup_r>
80007130:	c0 70       	breq	8000713e <__sfvwrite_r+0x36>
80007132:	8e 68       	ld.sh	r8,r7[0xc]
80007134:	a7 a8       	sbr	r8,0x6
80007136:	ae 68       	st.h	r7[0xc],r8
80007138:	30 98       	mov	r8,9
8000713a:	8b 38       	st.w	r5[0xc],r8
8000713c:	c3 09       	rjmp	8000739c <__sfvwrite_r+0x294>
8000713e:	8e 63       	ld.sh	r3,r7[0xc]
80007140:	68 00       	ld.w	r0,r4[0x0]
80007142:	06 96       	mov	r6,r3
80007144:	e2 16 00 02 	andl	r6,0x2,COH
80007148:	c2 10       	breq	8000718a <__sfvwrite_r+0x82>
8000714a:	30 03       	mov	r3,0
8000714c:	e0 62 04 00 	mov	r2,1024
80007150:	06 96       	mov	r6,r3
80007152:	c0 48       	rjmp	8000715a <__sfvwrite_r+0x52>
80007154:	60 03       	ld.w	r3,r0[0x0]
80007156:	60 16       	ld.w	r6,r0[0x4]
80007158:	2f 80       	sub	r0,-8
8000715a:	58 06       	cp.w	r6,0
8000715c:	cf c0       	breq	80007154 <__sfvwrite_r+0x4c>
8000715e:	e0 46 04 00 	cp.w	r6,1024
80007162:	ec 09 17 80 	movls	r9,r6
80007166:	e4 09 17 b0 	movhi	r9,r2
8000716a:	06 9a       	mov	r10,r3
8000716c:	6e a8       	ld.w	r8,r7[0x28]
8000716e:	6e 8b       	ld.w	r11,r7[0x20]
80007170:	0a 9c       	mov	r12,r5
80007172:	5d 18       	icall	r8
80007174:	18 16       	sub	r6,r12
80007176:	58 0c       	cp.w	r12,0
80007178:	e0 8a 01 0f 	brle	80007396 <__sfvwrite_r+0x28e>
8000717c:	68 28       	ld.w	r8,r4[0x8]
8000717e:	18 18       	sub	r8,r12
80007180:	89 28       	st.w	r4[0x8],r8
80007182:	e0 80 01 0f 	breq	800073a0 <__sfvwrite_r+0x298>
80007186:	18 03       	add	r3,r12
80007188:	ce 9b       	rjmp	8000715a <__sfvwrite_r+0x52>
8000718a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000718e:	c0 70       	breq	8000719c <__sfvwrite_r+0x94>
80007190:	50 06       	stdsp	sp[0x0],r6
80007192:	0c 93       	mov	r3,r6
80007194:	0c 91       	mov	r1,r6
80007196:	50 15       	stdsp	sp[0x4],r5
80007198:	08 92       	mov	r2,r4
8000719a:	c9 e8       	rjmp	800072d6 <__sfvwrite_r+0x1ce>
8000719c:	06 96       	mov	r6,r3
8000719e:	08 91       	mov	r1,r4
800071a0:	c0 48       	rjmp	800071a8 <__sfvwrite_r+0xa0>
800071a2:	60 03       	ld.w	r3,r0[0x0]
800071a4:	60 16       	ld.w	r6,r0[0x4]
800071a6:	2f 80       	sub	r0,-8
800071a8:	58 06       	cp.w	r6,0
800071aa:	cf c0       	breq	800071a2 <__sfvwrite_r+0x9a>
800071ac:	8e 68       	ld.sh	r8,r7[0xc]
800071ae:	6e 24       	ld.w	r4,r7[0x8]
800071b0:	10 99       	mov	r9,r8
800071b2:	e2 19 02 00 	andl	r9,0x200,COH
800071b6:	c5 50       	breq	80007260 <__sfvwrite_r+0x158>
800071b8:	08 36       	cp.w	r6,r4
800071ba:	c4 33       	brcs	80007240 <__sfvwrite_r+0x138>
800071bc:	10 99       	mov	r9,r8
800071be:	e2 19 04 80 	andl	r9,0x480,COH
800071c2:	c3 f0       	breq	80007240 <__sfvwrite_r+0x138>
800071c4:	6e 4b       	ld.w	r11,r7[0x10]
800071c6:	6e 09       	ld.w	r9,r7[0x0]
800071c8:	16 19       	sub	r9,r11
800071ca:	50 09       	stdsp	sp[0x0],r9
800071cc:	6e 59       	ld.w	r9,r7[0x14]
800071ce:	10 9c       	mov	r12,r8
800071d0:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800071d4:	30 28       	mov	r8,2
800071d6:	f4 08 0c 08 	divs	r8,r10,r8
800071da:	fa e9 00 04 	st.d	sp[4],r8
800071de:	10 94       	mov	r4,r8
800071e0:	40 09       	lddsp	r9,sp[0x0]
800071e2:	e2 1c 04 00 	andl	r12,0x400,COH
800071e6:	2f f9       	sub	r9,-1
800071e8:	0c 09       	add	r9,r6
800071ea:	12 38       	cp.w	r8,r9
800071ec:	f2 04 17 30 	movlo	r4,r9
800071f0:	58 0c       	cp.w	r12,0
800071f2:	c1 00       	breq	80007212 <__sfvwrite_r+0x10a>
800071f4:	08 9b       	mov	r11,r4
800071f6:	0a 9c       	mov	r12,r5
800071f8:	c6 8d       	rcall	800074c8 <_malloc_r>
800071fa:	18 92       	mov	r2,r12
800071fc:	c1 40       	breq	80007224 <__sfvwrite_r+0x11c>
800071fe:	40 0a       	lddsp	r10,sp[0x0]
80007200:	6e 4b       	ld.w	r11,r7[0x10]
80007202:	fe b0 e4 78 	rcall	80003af2 <memcpy>
80007206:	8e 68       	ld.sh	r8,r7[0xc]
80007208:	e0 18 fb 7f 	andl	r8,0xfb7f
8000720c:	a7 b8       	sbr	r8,0x7
8000720e:	ae 68       	st.h	r7[0xc],r8
80007210:	c0 d8       	rjmp	8000722a <__sfvwrite_r+0x122>
80007212:	08 9a       	mov	r10,r4
80007214:	0a 9c       	mov	r12,r5
80007216:	e0 a0 06 87 	rcall	80007f24 <_realloc_r>
8000721a:	18 92       	mov	r2,r12
8000721c:	c0 71       	brne	8000722a <__sfvwrite_r+0x122>
8000721e:	6e 4b       	ld.w	r11,r7[0x10]
80007220:	0a 9c       	mov	r12,r5
80007222:	ca de       	rcall	80006f7c <_free_r>
80007224:	30 c8       	mov	r8,12
80007226:	8b 38       	st.w	r5[0xc],r8
80007228:	cb 78       	rjmp	80007396 <__sfvwrite_r+0x28e>
8000722a:	40 0a       	lddsp	r10,sp[0x0]
8000722c:	40 09       	lddsp	r9,sp[0x0]
8000722e:	e8 0a 01 0a 	sub	r10,r4,r10
80007232:	e4 09 00 08 	add	r8,r2,r9
80007236:	8f 54       	st.w	r7[0x14],r4
80007238:	8f 2a       	st.w	r7[0x8],r10
8000723a:	8f 08       	st.w	r7[0x0],r8
8000723c:	8f 42       	st.w	r7[0x10],r2
8000723e:	0c 94       	mov	r4,r6
80007240:	08 36       	cp.w	r6,r4
80007242:	ec 04 17 30 	movlo	r4,r6
80007246:	06 9b       	mov	r11,r3
80007248:	08 9a       	mov	r10,r4
8000724a:	6e 0c       	ld.w	r12,r7[0x0]
8000724c:	e0 a0 03 61 	rcall	8000790e <memmove>
80007250:	6e 08       	ld.w	r8,r7[0x0]
80007252:	08 08       	add	r8,r4
80007254:	8f 08       	st.w	r7[0x0],r8
80007256:	6e 28       	ld.w	r8,r7[0x8]
80007258:	08 18       	sub	r8,r4
8000725a:	0c 94       	mov	r4,r6
8000725c:	8f 28       	st.w	r7[0x8],r8
8000725e:	c3 08       	rjmp	800072be <__sfvwrite_r+0x1b6>
80007260:	08 36       	cp.w	r6,r4
80007262:	5f ba       	srhi	r10
80007264:	6e 0c       	ld.w	r12,r7[0x0]
80007266:	6e 48       	ld.w	r8,r7[0x10]
80007268:	10 3c       	cp.w	r12,r8
8000726a:	5f b8       	srhi	r8
8000726c:	f5 e8 00 08 	and	r8,r10,r8
80007270:	f2 08 18 00 	cp.b	r8,r9
80007274:	c0 e0       	breq	80007290 <__sfvwrite_r+0x188>
80007276:	06 9b       	mov	r11,r3
80007278:	08 9a       	mov	r10,r4
8000727a:	e0 a0 03 4a 	rcall	8000790e <memmove>
8000727e:	6e 08       	ld.w	r8,r7[0x0]
80007280:	08 08       	add	r8,r4
80007282:	0e 9b       	mov	r11,r7
80007284:	8f 08       	st.w	r7[0x0],r8
80007286:	0a 9c       	mov	r12,r5
80007288:	fe b0 fd 08 	rcall	80006c98 <_fflush_r>
8000728c:	c1 90       	breq	800072be <__sfvwrite_r+0x1b6>
8000728e:	c8 48       	rjmp	80007396 <__sfvwrite_r+0x28e>
80007290:	6e 59       	ld.w	r9,r7[0x14]
80007292:	12 36       	cp.w	r6,r9
80007294:	c0 a3       	brcs	800072a8 <__sfvwrite_r+0x1a0>
80007296:	6e a8       	ld.w	r8,r7[0x28]
80007298:	06 9a       	mov	r10,r3
8000729a:	6e 8b       	ld.w	r11,r7[0x20]
8000729c:	0a 9c       	mov	r12,r5
8000729e:	5d 18       	icall	r8
800072a0:	18 94       	mov	r4,r12
800072a2:	e0 89 00 0e 	brgt	800072be <__sfvwrite_r+0x1b6>
800072a6:	c7 88       	rjmp	80007396 <__sfvwrite_r+0x28e>
800072a8:	0c 9a       	mov	r10,r6
800072aa:	06 9b       	mov	r11,r3
800072ac:	e0 a0 03 31 	rcall	8000790e <memmove>
800072b0:	6e 08       	ld.w	r8,r7[0x0]
800072b2:	0c 08       	add	r8,r6
800072b4:	0c 94       	mov	r4,r6
800072b6:	8f 08       	st.w	r7[0x0],r8
800072b8:	6e 28       	ld.w	r8,r7[0x8]
800072ba:	0c 18       	sub	r8,r6
800072bc:	8f 28       	st.w	r7[0x8],r8
800072be:	62 28       	ld.w	r8,r1[0x8]
800072c0:	08 18       	sub	r8,r4
800072c2:	83 28       	st.w	r1[0x8],r8
800072c4:	c6 e0       	breq	800073a0 <__sfvwrite_r+0x298>
800072c6:	08 16       	sub	r6,r4
800072c8:	08 03       	add	r3,r4
800072ca:	c6 fb       	rjmp	800071a8 <__sfvwrite_r+0xa0>
800072cc:	60 03       	ld.w	r3,r0[0x0]
800072ce:	60 11       	ld.w	r1,r0[0x4]
800072d0:	30 08       	mov	r8,0
800072d2:	2f 80       	sub	r0,-8
800072d4:	50 08       	stdsp	sp[0x0],r8
800072d6:	58 01       	cp.w	r1,0
800072d8:	cf a0       	breq	800072cc <__sfvwrite_r+0x1c4>
800072da:	40 0a       	lddsp	r10,sp[0x0]
800072dc:	58 0a       	cp.w	r10,0
800072de:	c1 51       	brne	80007308 <__sfvwrite_r+0x200>
800072e0:	e2 c6 ff ff 	sub	r6,r1,-1
800072e4:	02 9a       	mov	r10,r1
800072e6:	30 ab       	mov	r11,10
800072e8:	06 9c       	mov	r12,r3
800072ea:	e0 a0 03 07 	rcall	800078f8 <memchr>
800072ee:	f8 c8 ff ff 	sub	r8,r12,-1
800072f2:	58 0c       	cp.w	r12,0
800072f4:	f1 d3 e1 16 	subne	r6,r8,r3
800072f8:	f9 b9 01 01 	movne	r9,1
800072fc:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007300:	f9 b8 00 01 	moveq	r8,1
80007304:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007308:	02 36       	cp.w	r6,r1
8000730a:	ec 04 17 80 	movls	r4,r6
8000730e:	e2 04 17 b0 	movhi	r4,r1
80007312:	6e 59       	ld.w	r9,r7[0x14]
80007314:	6e 25       	ld.w	r5,r7[0x8]
80007316:	f2 05 00 05 	add	r5,r9,r5
8000731a:	0a 34       	cp.w	r4,r5
8000731c:	5f 9a       	srgt	r10
8000731e:	6e 0c       	ld.w	r12,r7[0x0]
80007320:	6e 48       	ld.w	r8,r7[0x10]
80007322:	10 3c       	cp.w	r12,r8
80007324:	5f b8       	srhi	r8
80007326:	f5 e8 00 08 	and	r8,r10,r8
8000732a:	30 0a       	mov	r10,0
8000732c:	f4 08 18 00 	cp.b	r8,r10
80007330:	c0 e0       	breq	8000734c <__sfvwrite_r+0x244>
80007332:	06 9b       	mov	r11,r3
80007334:	0a 9a       	mov	r10,r5
80007336:	e0 a0 02 ec 	rcall	8000790e <memmove>
8000733a:	6e 08       	ld.w	r8,r7[0x0]
8000733c:	0a 08       	add	r8,r5
8000733e:	0e 9b       	mov	r11,r7
80007340:	8f 08       	st.w	r7[0x0],r8
80007342:	40 1c       	lddsp	r12,sp[0x4]
80007344:	fe b0 fc aa 	rcall	80006c98 <_fflush_r>
80007348:	c1 80       	breq	80007378 <__sfvwrite_r+0x270>
8000734a:	c2 68       	rjmp	80007396 <__sfvwrite_r+0x28e>
8000734c:	12 34       	cp.w	r4,r9
8000734e:	c0 a5       	brlt	80007362 <__sfvwrite_r+0x25a>
80007350:	6e a8       	ld.w	r8,r7[0x28]
80007352:	06 9a       	mov	r10,r3
80007354:	6e 8b       	ld.w	r11,r7[0x20]
80007356:	40 1c       	lddsp	r12,sp[0x4]
80007358:	5d 18       	icall	r8
8000735a:	18 95       	mov	r5,r12
8000735c:	e0 89 00 0e 	brgt	80007378 <__sfvwrite_r+0x270>
80007360:	c1 b8       	rjmp	80007396 <__sfvwrite_r+0x28e>
80007362:	08 9a       	mov	r10,r4
80007364:	06 9b       	mov	r11,r3
80007366:	e0 a0 02 d4 	rcall	8000790e <memmove>
8000736a:	6e 08       	ld.w	r8,r7[0x0]
8000736c:	08 08       	add	r8,r4
8000736e:	08 95       	mov	r5,r4
80007370:	8f 08       	st.w	r7[0x0],r8
80007372:	6e 28       	ld.w	r8,r7[0x8]
80007374:	08 18       	sub	r8,r4
80007376:	8f 28       	st.w	r7[0x8],r8
80007378:	0a 16       	sub	r6,r5
8000737a:	c0 71       	brne	80007388 <__sfvwrite_r+0x280>
8000737c:	0e 9b       	mov	r11,r7
8000737e:	40 1c       	lddsp	r12,sp[0x4]
80007380:	fe b0 fc 8c 	rcall	80006c98 <_fflush_r>
80007384:	c0 91       	brne	80007396 <__sfvwrite_r+0x28e>
80007386:	50 06       	stdsp	sp[0x0],r6
80007388:	64 28       	ld.w	r8,r2[0x8]
8000738a:	0a 18       	sub	r8,r5
8000738c:	85 28       	st.w	r2[0x8],r8
8000738e:	c0 90       	breq	800073a0 <__sfvwrite_r+0x298>
80007390:	0a 11       	sub	r1,r5
80007392:	0a 03       	add	r3,r5
80007394:	ca 1b       	rjmp	800072d6 <__sfvwrite_r+0x1ce>
80007396:	8e 68       	ld.sh	r8,r7[0xc]
80007398:	a7 a8       	sbr	r8,0x6
8000739a:	ae 68       	st.h	r7[0xc],r8
8000739c:	3f fc       	mov	r12,-1
8000739e:	c0 28       	rjmp	800073a2 <__sfvwrite_r+0x29a>
800073a0:	30 0c       	mov	r12,0
800073a2:	2f dd       	sub	sp,-12
800073a4:	d8 32       	popm	r0-r7,pc
800073a6:	d7 03       	nop

800073a8 <_fwalk>:
800073a8:	d4 31       	pushm	r0-r7,lr
800073aa:	30 05       	mov	r5,0
800073ac:	16 91       	mov	r1,r11
800073ae:	f8 c7 ff 28 	sub	r7,r12,-216
800073b2:	0a 92       	mov	r2,r5
800073b4:	fe b0 fc f8 	rcall	80006da4 <__sfp_lock_acquire>
800073b8:	3f f3       	mov	r3,-1
800073ba:	c1 68       	rjmp	800073e6 <_fwalk+0x3e>
800073bc:	6e 26       	ld.w	r6,r7[0x8]
800073be:	6e 14       	ld.w	r4,r7[0x4]
800073c0:	2f 46       	sub	r6,-12
800073c2:	c0 c8       	rjmp	800073da <_fwalk+0x32>
800073c4:	8c 08       	ld.sh	r8,r6[0x0]
800073c6:	e4 08 19 00 	cp.h	r8,r2
800073ca:	c0 70       	breq	800073d8 <_fwalk+0x30>
800073cc:	8c 18       	ld.sh	r8,r6[0x2]
800073ce:	e6 08 19 00 	cp.h	r8,r3
800073d2:	c0 30       	breq	800073d8 <_fwalk+0x30>
800073d4:	5d 11       	icall	r1
800073d6:	18 45       	or	r5,r12
800073d8:	2a 46       	sub	r6,-92
800073da:	20 14       	sub	r4,1
800073dc:	ec cc 00 0c 	sub	r12,r6,12
800073e0:	58 04       	cp.w	r4,0
800073e2:	cf 14       	brge	800073c4 <_fwalk+0x1c>
800073e4:	6e 07       	ld.w	r7,r7[0x0]
800073e6:	58 07       	cp.w	r7,0
800073e8:	ce a1       	brne	800073bc <_fwalk+0x14>
800073ea:	fe b0 fc de 	rcall	80006da6 <__sfp_lock_release>
800073ee:	0a 9c       	mov	r12,r5
800073f0:	d8 32       	popm	r0-r7,pc
800073f2:	d7 03       	nop

800073f4 <_localeconv_r>:
800073f4:	fe cc db 90 	sub	r12,pc,-9328
800073f8:	5e fc       	retal	r12
800073fa:	d7 03       	nop

800073fc <__smakebuf_r>:
800073fc:	d4 21       	pushm	r4-r7,lr
800073fe:	20 fd       	sub	sp,60
80007400:	96 68       	ld.sh	r8,r11[0xc]
80007402:	16 97       	mov	r7,r11
80007404:	18 96       	mov	r6,r12
80007406:	e2 18 00 02 	andl	r8,0x2,COH
8000740a:	c3 c1       	brne	80007482 <__smakebuf_r+0x86>
8000740c:	96 7b       	ld.sh	r11,r11[0xe]
8000740e:	f0 0b 19 00 	cp.h	r11,r8
80007412:	c0 55       	brlt	8000741c <__smakebuf_r+0x20>
80007414:	1a 9a       	mov	r10,sp
80007416:	e0 a0 08 95 	rcall	80008540 <_fstat_r>
8000741a:	c0 f4       	brge	80007438 <__smakebuf_r+0x3c>
8000741c:	8e 65       	ld.sh	r5,r7[0xc]
8000741e:	0a 98       	mov	r8,r5
80007420:	ab b8       	sbr	r8,0xb
80007422:	e2 15 00 80 	andl	r5,0x80,COH
80007426:	ae 68       	st.h	r7[0xc],r8
80007428:	30 04       	mov	r4,0
8000742a:	e0 68 04 00 	mov	r8,1024
8000742e:	f9 b5 01 40 	movne	r5,64
80007432:	f0 05 17 00 	moveq	r5,r8
80007436:	c1 c8       	rjmp	8000746e <__smakebuf_r+0x72>
80007438:	40 18       	lddsp	r8,sp[0x4]
8000743a:	e2 18 f0 00 	andl	r8,0xf000,COH
8000743e:	e0 48 20 00 	cp.w	r8,8192
80007442:	5f 04       	sreq	r4
80007444:	e0 48 80 00 	cp.w	r8,32768
80007448:	c0 e1       	brne	80007464 <__smakebuf_r+0x68>
8000744a:	6e b9       	ld.w	r9,r7[0x2c]
8000744c:	fe c8 f1 f8 	sub	r8,pc,-3592
80007450:	10 39       	cp.w	r9,r8
80007452:	c0 91       	brne	80007464 <__smakebuf_r+0x68>
80007454:	8e 68       	ld.sh	r8,r7[0xc]
80007456:	e0 65 04 00 	mov	r5,1024
8000745a:	ab a8       	sbr	r8,0xa
8000745c:	ef 45 00 50 	st.w	r7[80],r5
80007460:	ae 68       	st.h	r7[0xc],r8
80007462:	c0 68       	rjmp	8000746e <__smakebuf_r+0x72>
80007464:	8e 68       	ld.sh	r8,r7[0xc]
80007466:	e0 65 04 00 	mov	r5,1024
8000746a:	ab b8       	sbr	r8,0xb
8000746c:	ae 68       	st.h	r7[0xc],r8
8000746e:	0a 9b       	mov	r11,r5
80007470:	0c 9c       	mov	r12,r6
80007472:	c2 bc       	rcall	800074c8 <_malloc_r>
80007474:	8e 68       	ld.sh	r8,r7[0xc]
80007476:	c0 d1       	brne	80007490 <__smakebuf_r+0x94>
80007478:	ed b8 00 09 	bld	r8,0x9
8000747c:	c1 b0       	breq	800074b2 <__smakebuf_r+0xb6>
8000747e:	a1 b8       	sbr	r8,0x1
80007480:	ae 68       	st.h	r7[0xc],r8
80007482:	ee c8 ff b9 	sub	r8,r7,-71
80007486:	8f 48       	st.w	r7[0x10],r8
80007488:	8f 08       	st.w	r7[0x0],r8
8000748a:	30 18       	mov	r8,1
8000748c:	8f 58       	st.w	r7[0x14],r8
8000748e:	c1 28       	rjmp	800074b2 <__smakebuf_r+0xb6>
80007490:	a7 b8       	sbr	r8,0x7
80007492:	8f 4c       	st.w	r7[0x10],r12
80007494:	ae 68       	st.h	r7[0xc],r8
80007496:	8f 55       	st.w	r7[0x14],r5
80007498:	fe c8 06 f0 	sub	r8,pc,1776
8000749c:	8f 0c       	st.w	r7[0x0],r12
8000749e:	8d a8       	st.w	r6[0x28],r8
800074a0:	58 04       	cp.w	r4,0
800074a2:	c0 80       	breq	800074b2 <__smakebuf_r+0xb6>
800074a4:	8e 7c       	ld.sh	r12,r7[0xe]
800074a6:	e0 a0 07 3f 	rcall	80008324 <isatty>
800074aa:	c0 40       	breq	800074b2 <__smakebuf_r+0xb6>
800074ac:	8e 68       	ld.sh	r8,r7[0xc]
800074ae:	a1 a8       	sbr	r8,0x0
800074b0:	ae 68       	st.h	r7[0xc],r8
800074b2:	2f 1d       	sub	sp,-60
800074b4:	d8 22       	popm	r4-r7,pc
800074b6:	d7 03       	nop

800074b8 <malloc>:
800074b8:	d4 01       	pushm	lr
800074ba:	e0 68 01 18 	mov	r8,280
800074be:	18 9b       	mov	r11,r12
800074c0:	70 0c       	ld.w	r12,r8[0x0]
800074c2:	c0 3c       	rcall	800074c8 <_malloc_r>
800074c4:	d8 02       	popm	pc
800074c6:	d7 03       	nop

800074c8 <_malloc_r>:
800074c8:	d4 31       	pushm	r0-r7,lr
800074ca:	f6 c8 ff f5 	sub	r8,r11,-11
800074ce:	18 95       	mov	r5,r12
800074d0:	10 97       	mov	r7,r8
800074d2:	e0 17 ff f8 	andl	r7,0xfff8
800074d6:	59 68       	cp.w	r8,22
800074d8:	f9 b7 08 10 	movls	r7,16
800074dc:	16 37       	cp.w	r7,r11
800074de:	5f 38       	srlo	r8
800074e0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800074e4:	c0 50       	breq	800074ee <_malloc_r+0x26>
800074e6:	30 c8       	mov	r8,12
800074e8:	99 38       	st.w	r12[0xc],r8
800074ea:	e0 8f 01 f7 	bral	800078d8 <_malloc_r+0x410>
800074ee:	e0 a0 02 2f 	rcall	8000794c <__malloc_lock>
800074f2:	e0 47 01 f7 	cp.w	r7,503
800074f6:	e0 8b 00 1d 	brhi	80007530 <_malloc_r+0x68>
800074fa:	ee 03 16 03 	lsr	r3,r7,0x3
800074fe:	e0 68 01 1c 	mov	r8,284
80007502:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007506:	70 36       	ld.w	r6,r8[0xc]
80007508:	10 36       	cp.w	r6,r8
8000750a:	c0 61       	brne	80007516 <_malloc_r+0x4e>
8000750c:	ec c8 ff f8 	sub	r8,r6,-8
80007510:	70 36       	ld.w	r6,r8[0xc]
80007512:	10 36       	cp.w	r6,r8
80007514:	c0 c0       	breq	8000752c <_malloc_r+0x64>
80007516:	6c 18       	ld.w	r8,r6[0x4]
80007518:	e0 18 ff fc 	andl	r8,0xfffc
8000751c:	6c 3a       	ld.w	r10,r6[0xc]
8000751e:	ec 08 00 09 	add	r9,r6,r8
80007522:	0a 9c       	mov	r12,r5
80007524:	6c 28       	ld.w	r8,r6[0x8]
80007526:	95 28       	st.w	r10[0x8],r8
80007528:	91 3a       	st.w	r8[0xc],r10
8000752a:	c4 78       	rjmp	800075b8 <_malloc_r+0xf0>
8000752c:	2f e3       	sub	r3,-2
8000752e:	c4 d8       	rjmp	800075c8 <_malloc_r+0x100>
80007530:	ee 03 16 09 	lsr	r3,r7,0x9
80007534:	c0 41       	brne	8000753c <_malloc_r+0x74>
80007536:	ee 03 16 03 	lsr	r3,r7,0x3
8000753a:	c2 68       	rjmp	80007586 <_malloc_r+0xbe>
8000753c:	58 43       	cp.w	r3,4
8000753e:	e0 8b 00 06 	brhi	8000754a <_malloc_r+0x82>
80007542:	ee 03 16 06 	lsr	r3,r7,0x6
80007546:	2c 83       	sub	r3,-56
80007548:	c1 f8       	rjmp	80007586 <_malloc_r+0xbe>
8000754a:	59 43       	cp.w	r3,20
8000754c:	e0 8b 00 04 	brhi	80007554 <_malloc_r+0x8c>
80007550:	2a 53       	sub	r3,-91
80007552:	c1 a8       	rjmp	80007586 <_malloc_r+0xbe>
80007554:	e0 43 00 54 	cp.w	r3,84
80007558:	e0 8b 00 06 	brhi	80007564 <_malloc_r+0x9c>
8000755c:	ee 03 16 0c 	lsr	r3,r7,0xc
80007560:	29 23       	sub	r3,-110
80007562:	c1 28       	rjmp	80007586 <_malloc_r+0xbe>
80007564:	e0 43 01 54 	cp.w	r3,340
80007568:	e0 8b 00 06 	brhi	80007574 <_malloc_r+0xac>
8000756c:	ee 03 16 0f 	lsr	r3,r7,0xf
80007570:	28 93       	sub	r3,-119
80007572:	c0 a8       	rjmp	80007586 <_malloc_r+0xbe>
80007574:	e0 43 05 54 	cp.w	r3,1364
80007578:	e0 88 00 04 	brls	80007580 <_malloc_r+0xb8>
8000757c:	37 e3       	mov	r3,126
8000757e:	c0 48       	rjmp	80007586 <_malloc_r+0xbe>
80007580:	ee 03 16 12 	lsr	r3,r7,0x12
80007584:	28 43       	sub	r3,-124
80007586:	e0 6a 01 1c 	mov	r10,284
8000758a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000758e:	74 36       	ld.w	r6,r10[0xc]
80007590:	c1 98       	rjmp	800075c2 <_malloc_r+0xfa>
80007592:	6c 19       	ld.w	r9,r6[0x4]
80007594:	e0 19 ff fc 	andl	r9,0xfffc
80007598:	f2 07 01 0b 	sub	r11,r9,r7
8000759c:	58 fb       	cp.w	r11,15
8000759e:	e0 8a 00 04 	brle	800075a6 <_malloc_r+0xde>
800075a2:	20 13       	sub	r3,1
800075a4:	c1 18       	rjmp	800075c6 <_malloc_r+0xfe>
800075a6:	6c 38       	ld.w	r8,r6[0xc]
800075a8:	58 0b       	cp.w	r11,0
800075aa:	c0 b5       	brlt	800075c0 <_malloc_r+0xf8>
800075ac:	6c 2a       	ld.w	r10,r6[0x8]
800075ae:	ec 09 00 09 	add	r9,r6,r9
800075b2:	0a 9c       	mov	r12,r5
800075b4:	91 2a       	st.w	r8[0x8],r10
800075b6:	95 38       	st.w	r10[0xc],r8
800075b8:	72 18       	ld.w	r8,r9[0x4]
800075ba:	a1 a8       	sbr	r8,0x0
800075bc:	93 18       	st.w	r9[0x4],r8
800075be:	cb c8       	rjmp	80007736 <_malloc_r+0x26e>
800075c0:	10 96       	mov	r6,r8
800075c2:	14 36       	cp.w	r6,r10
800075c4:	ce 71       	brne	80007592 <_malloc_r+0xca>
800075c6:	2f f3       	sub	r3,-1
800075c8:	e0 6a 01 1c 	mov	r10,284
800075cc:	f4 cc ff f8 	sub	r12,r10,-8
800075d0:	78 26       	ld.w	r6,r12[0x8]
800075d2:	18 36       	cp.w	r6,r12
800075d4:	c6 c0       	breq	800076ac <_malloc_r+0x1e4>
800075d6:	6c 19       	ld.w	r9,r6[0x4]
800075d8:	e0 19 ff fc 	andl	r9,0xfffc
800075dc:	f2 07 01 08 	sub	r8,r9,r7
800075e0:	58 f8       	cp.w	r8,15
800075e2:	e0 89 00 8f 	brgt	80007700 <_malloc_r+0x238>
800075e6:	99 3c       	st.w	r12[0xc],r12
800075e8:	99 2c       	st.w	r12[0x8],r12
800075ea:	58 08       	cp.w	r8,0
800075ec:	c0 55       	brlt	800075f6 <_malloc_r+0x12e>
800075ee:	ec 09 00 09 	add	r9,r6,r9
800075f2:	0a 9c       	mov	r12,r5
800075f4:	ce 2b       	rjmp	800075b8 <_malloc_r+0xf0>
800075f6:	e0 49 01 ff 	cp.w	r9,511
800075fa:	e0 8b 00 13 	brhi	80007620 <_malloc_r+0x158>
800075fe:	a3 99       	lsr	r9,0x3
80007600:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007604:	70 2b       	ld.w	r11,r8[0x8]
80007606:	8d 38       	st.w	r6[0xc],r8
80007608:	8d 2b       	st.w	r6[0x8],r11
8000760a:	97 36       	st.w	r11[0xc],r6
8000760c:	91 26       	st.w	r8[0x8],r6
8000760e:	a3 49       	asr	r9,0x2
80007610:	74 18       	ld.w	r8,r10[0x4]
80007612:	30 1b       	mov	r11,1
80007614:	f6 09 09 49 	lsl	r9,r11,r9
80007618:	f1 e9 10 09 	or	r9,r8,r9
8000761c:	95 19       	st.w	r10[0x4],r9
8000761e:	c4 78       	rjmp	800076ac <_malloc_r+0x1e4>
80007620:	f2 0a 16 09 	lsr	r10,r9,0x9
80007624:	58 4a       	cp.w	r10,4
80007626:	e0 8b 00 07 	brhi	80007634 <_malloc_r+0x16c>
8000762a:	f2 0a 16 06 	lsr	r10,r9,0x6
8000762e:	2c 8a       	sub	r10,-56
80007630:	c2 08       	rjmp	80007670 <_malloc_r+0x1a8>
80007632:	d7 03       	nop
80007634:	59 4a       	cp.w	r10,20
80007636:	e0 8b 00 04 	brhi	8000763e <_malloc_r+0x176>
8000763a:	2a 5a       	sub	r10,-91
8000763c:	c1 a8       	rjmp	80007670 <_malloc_r+0x1a8>
8000763e:	e0 4a 00 54 	cp.w	r10,84
80007642:	e0 8b 00 06 	brhi	8000764e <_malloc_r+0x186>
80007646:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000764a:	29 2a       	sub	r10,-110
8000764c:	c1 28       	rjmp	80007670 <_malloc_r+0x1a8>
8000764e:	e0 4a 01 54 	cp.w	r10,340
80007652:	e0 8b 00 06 	brhi	8000765e <_malloc_r+0x196>
80007656:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000765a:	28 9a       	sub	r10,-119
8000765c:	c0 a8       	rjmp	80007670 <_malloc_r+0x1a8>
8000765e:	e0 4a 05 54 	cp.w	r10,1364
80007662:	e0 88 00 04 	brls	8000766a <_malloc_r+0x1a2>
80007666:	37 ea       	mov	r10,126
80007668:	c0 48       	rjmp	80007670 <_malloc_r+0x1a8>
8000766a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000766e:	28 4a       	sub	r10,-124
80007670:	e0 6b 01 1c 	mov	r11,284
80007674:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007678:	68 28       	ld.w	r8,r4[0x8]
8000767a:	08 38       	cp.w	r8,r4
8000767c:	c0 e1       	brne	80007698 <_malloc_r+0x1d0>
8000767e:	76 19       	ld.w	r9,r11[0x4]
80007680:	a3 4a       	asr	r10,0x2
80007682:	30 1e       	mov	lr,1
80007684:	fc 0a 09 4a 	lsl	r10,lr,r10
80007688:	f3 ea 10 0a 	or	r10,r9,r10
8000768c:	10 99       	mov	r9,r8
8000768e:	97 1a       	st.w	r11[0x4],r10
80007690:	c0 a8       	rjmp	800076a4 <_malloc_r+0x1dc>
80007692:	70 28       	ld.w	r8,r8[0x8]
80007694:	08 38       	cp.w	r8,r4
80007696:	c0 60       	breq	800076a2 <_malloc_r+0x1da>
80007698:	70 1a       	ld.w	r10,r8[0x4]
8000769a:	e0 1a ff fc 	andl	r10,0xfffc
8000769e:	14 39       	cp.w	r9,r10
800076a0:	cf 93       	brcs	80007692 <_malloc_r+0x1ca>
800076a2:	70 39       	ld.w	r9,r8[0xc]
800076a4:	8d 39       	st.w	r6[0xc],r9
800076a6:	8d 28       	st.w	r6[0x8],r8
800076a8:	91 36       	st.w	r8[0xc],r6
800076aa:	93 26       	st.w	r9[0x8],r6
800076ac:	e6 08 14 02 	asr	r8,r3,0x2
800076b0:	30 1b       	mov	r11,1
800076b2:	e0 64 01 1c 	mov	r4,284
800076b6:	f6 08 09 4b 	lsl	r11,r11,r8
800076ba:	68 18       	ld.w	r8,r4[0x4]
800076bc:	10 3b       	cp.w	r11,r8
800076be:	e0 8b 00 69 	brhi	80007790 <_malloc_r+0x2c8>
800076c2:	f7 e8 00 09 	and	r9,r11,r8
800076c6:	c0 b1       	brne	800076dc <_malloc_r+0x214>
800076c8:	e0 13 ff fc 	andl	r3,0xfffc
800076cc:	a1 7b       	lsl	r11,0x1
800076ce:	2f c3       	sub	r3,-4
800076d0:	c0 38       	rjmp	800076d6 <_malloc_r+0x20e>
800076d2:	2f c3       	sub	r3,-4
800076d4:	a1 7b       	lsl	r11,0x1
800076d6:	f7 e8 00 09 	and	r9,r11,r8
800076da:	cf c0       	breq	800076d2 <_malloc_r+0x20a>
800076dc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800076e0:	06 92       	mov	r2,r3
800076e2:	1c 91       	mov	r1,lr
800076e4:	62 36       	ld.w	r6,r1[0xc]
800076e6:	c2 d8       	rjmp	80007740 <_malloc_r+0x278>
800076e8:	6c 1a       	ld.w	r10,r6[0x4]
800076ea:	e0 1a ff fc 	andl	r10,0xfffc
800076ee:	f4 07 01 08 	sub	r8,r10,r7
800076f2:	58 f8       	cp.w	r8,15
800076f4:	e0 8a 00 15 	brle	8000771e <_malloc_r+0x256>
800076f8:	6c 3a       	ld.w	r10,r6[0xc]
800076fa:	6c 29       	ld.w	r9,r6[0x8]
800076fc:	95 29       	st.w	r10[0x8],r9
800076fe:	93 3a       	st.w	r9[0xc],r10
80007700:	0e 99       	mov	r9,r7
80007702:	ec 07 00 07 	add	r7,r6,r7
80007706:	a1 a9       	sbr	r9,0x0
80007708:	99 37       	st.w	r12[0xc],r7
8000770a:	99 27       	st.w	r12[0x8],r7
8000770c:	8d 19       	st.w	r6[0x4],r9
8000770e:	ee 08 09 08 	st.w	r7[r8],r8
80007712:	8f 2c       	st.w	r7[0x8],r12
80007714:	8f 3c       	st.w	r7[0xc],r12
80007716:	a1 a8       	sbr	r8,0x0
80007718:	0a 9c       	mov	r12,r5
8000771a:	8f 18       	st.w	r7[0x4],r8
8000771c:	c0 d8       	rjmp	80007736 <_malloc_r+0x26e>
8000771e:	6c 39       	ld.w	r9,r6[0xc]
80007720:	58 08       	cp.w	r8,0
80007722:	c0 e5       	brlt	8000773e <_malloc_r+0x276>
80007724:	ec 0a 00 0a 	add	r10,r6,r10
80007728:	74 18       	ld.w	r8,r10[0x4]
8000772a:	a1 a8       	sbr	r8,0x0
8000772c:	0a 9c       	mov	r12,r5
8000772e:	95 18       	st.w	r10[0x4],r8
80007730:	6c 28       	ld.w	r8,r6[0x8]
80007732:	93 28       	st.w	r9[0x8],r8
80007734:	91 39       	st.w	r8[0xc],r9
80007736:	c0 cd       	rcall	8000794e <__malloc_unlock>
80007738:	ec cc ff f8 	sub	r12,r6,-8
8000773c:	d8 32       	popm	r0-r7,pc
8000773e:	12 96       	mov	r6,r9
80007740:	02 36       	cp.w	r6,r1
80007742:	cd 31       	brne	800076e8 <_malloc_r+0x220>
80007744:	2f f2       	sub	r2,-1
80007746:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000774a:	c0 30       	breq	80007750 <_malloc_r+0x288>
8000774c:	2f 81       	sub	r1,-8
8000774e:	cc bb       	rjmp	800076e4 <_malloc_r+0x21c>
80007750:	1c 98       	mov	r8,lr
80007752:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007756:	c0 81       	brne	80007766 <_malloc_r+0x29e>
80007758:	68 19       	ld.w	r9,r4[0x4]
8000775a:	f6 08 11 ff 	rsub	r8,r11,-1
8000775e:	f3 e8 00 08 	and	r8,r9,r8
80007762:	89 18       	st.w	r4[0x4],r8
80007764:	c0 78       	rjmp	80007772 <_malloc_r+0x2aa>
80007766:	f0 c9 00 08 	sub	r9,r8,8
8000776a:	20 13       	sub	r3,1
8000776c:	70 08       	ld.w	r8,r8[0x0]
8000776e:	12 38       	cp.w	r8,r9
80007770:	cf 10       	breq	80007752 <_malloc_r+0x28a>
80007772:	a1 7b       	lsl	r11,0x1
80007774:	68 18       	ld.w	r8,r4[0x4]
80007776:	10 3b       	cp.w	r11,r8
80007778:	e0 8b 00 0c 	brhi	80007790 <_malloc_r+0x2c8>
8000777c:	58 0b       	cp.w	r11,0
8000777e:	c0 90       	breq	80007790 <_malloc_r+0x2c8>
80007780:	04 93       	mov	r3,r2
80007782:	c0 38       	rjmp	80007788 <_malloc_r+0x2c0>
80007784:	2f c3       	sub	r3,-4
80007786:	a1 7b       	lsl	r11,0x1
80007788:	f7 e8 00 09 	and	r9,r11,r8
8000778c:	ca 81       	brne	800076dc <_malloc_r+0x214>
8000778e:	cf bb       	rjmp	80007784 <_malloc_r+0x2bc>
80007790:	68 23       	ld.w	r3,r4[0x8]
80007792:	66 12       	ld.w	r2,r3[0x4]
80007794:	e0 12 ff fc 	andl	r2,0xfffc
80007798:	0e 32       	cp.w	r2,r7
8000779a:	5f 39       	srlo	r9
8000779c:	e4 07 01 08 	sub	r8,r2,r7
800077a0:	58 f8       	cp.w	r8,15
800077a2:	5f aa       	srle	r10
800077a4:	f5 e9 10 09 	or	r9,r10,r9
800077a8:	e0 80 00 9a 	breq	800078dc <_malloc_r+0x414>
800077ac:	e0 68 06 44 	mov	r8,1604
800077b0:	70 01       	ld.w	r1,r8[0x0]
800077b2:	e0 68 05 28 	mov	r8,1320
800077b6:	2f 01       	sub	r1,-16
800077b8:	70 08       	ld.w	r8,r8[0x0]
800077ba:	0e 01       	add	r1,r7
800077bc:	5b f8       	cp.w	r8,-1
800077be:	c0 40       	breq	800077c6 <_malloc_r+0x2fe>
800077c0:	28 11       	sub	r1,-127
800077c2:	e0 11 ff 80 	andl	r1,0xff80
800077c6:	02 9b       	mov	r11,r1
800077c8:	0a 9c       	mov	r12,r5
800077ca:	e0 a0 05 31 	rcall	8000822c <_sbrk_r>
800077ce:	18 96       	mov	r6,r12
800077d0:	5b fc       	cp.w	r12,-1
800077d2:	c7 50       	breq	800078bc <_malloc_r+0x3f4>
800077d4:	e6 02 00 08 	add	r8,r3,r2
800077d8:	10 3c       	cp.w	r12,r8
800077da:	c0 32       	brcc	800077e0 <_malloc_r+0x318>
800077dc:	08 33       	cp.w	r3,r4
800077de:	c6 f1       	brne	800078bc <_malloc_r+0x3f4>
800077e0:	e0 6a 06 48 	mov	r10,1608
800077e4:	74 09       	ld.w	r9,r10[0x0]
800077e6:	e2 09 00 09 	add	r9,r1,r9
800077ea:	95 09       	st.w	r10[0x0],r9
800077ec:	10 36       	cp.w	r6,r8
800077ee:	c0 a1       	brne	80007802 <_malloc_r+0x33a>
800077f0:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800077f4:	c0 71       	brne	80007802 <_malloc_r+0x33a>
800077f6:	e2 02 00 02 	add	r2,r1,r2
800077fa:	68 28       	ld.w	r8,r4[0x8]
800077fc:	a1 a2       	sbr	r2,0x0
800077fe:	91 12       	st.w	r8[0x4],r2
80007800:	c4 f8       	rjmp	8000789e <_malloc_r+0x3d6>
80007802:	e0 6a 05 28 	mov	r10,1320
80007806:	74 0b       	ld.w	r11,r10[0x0]
80007808:	5b fb       	cp.w	r11,-1
8000780a:	c0 31       	brne	80007810 <_malloc_r+0x348>
8000780c:	95 06       	st.w	r10[0x0],r6
8000780e:	c0 78       	rjmp	8000781c <_malloc_r+0x354>
80007810:	ec 09 00 09 	add	r9,r6,r9
80007814:	e0 6a 06 48 	mov	r10,1608
80007818:	10 19       	sub	r9,r8
8000781a:	95 09       	st.w	r10[0x0],r9
8000781c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007820:	f0 09 11 08 	rsub	r9,r8,8
80007824:	58 08       	cp.w	r8,0
80007826:	f2 08 17 10 	movne	r8,r9
8000782a:	ed d8 e1 06 	addne	r6,r6,r8
8000782e:	28 08       	sub	r8,-128
80007830:	ec 01 00 01 	add	r1,r6,r1
80007834:	0a 9c       	mov	r12,r5
80007836:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000783a:	f0 01 01 01 	sub	r1,r8,r1
8000783e:	02 9b       	mov	r11,r1
80007840:	e0 a0 04 f6 	rcall	8000822c <_sbrk_r>
80007844:	e0 68 06 48 	mov	r8,1608
80007848:	5b fc       	cp.w	r12,-1
8000784a:	ec 0c 17 00 	moveq	r12,r6
8000784e:	f9 b1 00 00 	moveq	r1,0
80007852:	70 09       	ld.w	r9,r8[0x0]
80007854:	0c 1c       	sub	r12,r6
80007856:	89 26       	st.w	r4[0x8],r6
80007858:	02 0c       	add	r12,r1
8000785a:	12 01       	add	r1,r9
8000785c:	a1 ac       	sbr	r12,0x0
8000785e:	91 01       	st.w	r8[0x0],r1
80007860:	8d 1c       	st.w	r6[0x4],r12
80007862:	08 33       	cp.w	r3,r4
80007864:	c1 d0       	breq	8000789e <_malloc_r+0x3d6>
80007866:	58 f2       	cp.w	r2,15
80007868:	e0 8b 00 05 	brhi	80007872 <_malloc_r+0x3aa>
8000786c:	30 18       	mov	r8,1
8000786e:	8d 18       	st.w	r6[0x4],r8
80007870:	c2 68       	rjmp	800078bc <_malloc_r+0x3f4>
80007872:	30 59       	mov	r9,5
80007874:	20 c2       	sub	r2,12
80007876:	e0 12 ff f8 	andl	r2,0xfff8
8000787a:	e6 02 00 08 	add	r8,r3,r2
8000787e:	91 29       	st.w	r8[0x8],r9
80007880:	91 19       	st.w	r8[0x4],r9
80007882:	66 18       	ld.w	r8,r3[0x4]
80007884:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007888:	e5 e8 10 08 	or	r8,r2,r8
8000788c:	87 18       	st.w	r3[0x4],r8
8000788e:	58 f2       	cp.w	r2,15
80007890:	e0 88 00 07 	brls	8000789e <_malloc_r+0x3d6>
80007894:	e6 cb ff f8 	sub	r11,r3,-8
80007898:	0a 9c       	mov	r12,r5
8000789a:	fe b0 fb 71 	rcall	80006f7c <_free_r>
8000789e:	e0 69 06 40 	mov	r9,1600
800078a2:	72 0a       	ld.w	r10,r9[0x0]
800078a4:	e0 68 06 48 	mov	r8,1608
800078a8:	70 08       	ld.w	r8,r8[0x0]
800078aa:	14 38       	cp.w	r8,r10
800078ac:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800078b0:	e0 69 06 3c 	mov	r9,1596
800078b4:	72 0a       	ld.w	r10,r9[0x0]
800078b6:	14 38       	cp.w	r8,r10
800078b8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800078bc:	68 28       	ld.w	r8,r4[0x8]
800078be:	70 18       	ld.w	r8,r8[0x4]
800078c0:	e0 18 ff fc 	andl	r8,0xfffc
800078c4:	0e 38       	cp.w	r8,r7
800078c6:	5f 39       	srlo	r9
800078c8:	0e 18       	sub	r8,r7
800078ca:	58 f8       	cp.w	r8,15
800078cc:	5f aa       	srle	r10
800078ce:	f5 e9 10 09 	or	r9,r10,r9
800078d2:	c0 50       	breq	800078dc <_malloc_r+0x414>
800078d4:	0a 9c       	mov	r12,r5
800078d6:	c3 cc       	rcall	8000794e <__malloc_unlock>
800078d8:	d8 3a       	popm	r0-r7,pc,r12=0
800078da:	d7 03       	nop
800078dc:	68 26       	ld.w	r6,r4[0x8]
800078de:	a1 a8       	sbr	r8,0x0
800078e0:	0e 99       	mov	r9,r7
800078e2:	a1 a9       	sbr	r9,0x0
800078e4:	8d 19       	st.w	r6[0x4],r9
800078e6:	ec 07 00 07 	add	r7,r6,r7
800078ea:	0a 9c       	mov	r12,r5
800078ec:	89 27       	st.w	r4[0x8],r7
800078ee:	8f 18       	st.w	r7[0x4],r8
800078f0:	c2 fc       	rcall	8000794e <__malloc_unlock>
800078f2:	ec cc ff f8 	sub	r12,r6,-8
800078f6:	d8 32       	popm	r0-r7,pc

800078f8 <memchr>:
800078f8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800078fc:	c0 68       	rjmp	80007908 <memchr+0x10>
800078fe:	20 1a       	sub	r10,1
80007900:	19 88       	ld.ub	r8,r12[0x0]
80007902:	16 38       	cp.w	r8,r11
80007904:	5e 0c       	reteq	r12
80007906:	2f fc       	sub	r12,-1
80007908:	58 0a       	cp.w	r10,0
8000790a:	cf a1       	brne	800078fe <memchr+0x6>
8000790c:	5e fa       	retal	r10

8000790e <memmove>:
8000790e:	d4 01       	pushm	lr
80007910:	18 3b       	cp.w	r11,r12
80007912:	c1 92       	brcc	80007944 <memmove+0x36>
80007914:	f6 0a 00 09 	add	r9,r11,r10
80007918:	12 3c       	cp.w	r12,r9
8000791a:	c1 52       	brcc	80007944 <memmove+0x36>
8000791c:	f8 0a 00 0b 	add	r11,r12,r10
80007920:	30 08       	mov	r8,0
80007922:	c0 68       	rjmp	8000792e <memmove+0x20>
80007924:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007928:	20 1a       	sub	r10,1
8000792a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000792e:	20 18       	sub	r8,1
80007930:	58 0a       	cp.w	r10,0
80007932:	cf 91       	brne	80007924 <memmove+0x16>
80007934:	d8 02       	popm	pc
80007936:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000793a:	20 1a       	sub	r10,1
8000793c:	f8 08 0b 09 	st.b	r12[r8],r9
80007940:	2f f8       	sub	r8,-1
80007942:	c0 28       	rjmp	80007946 <memmove+0x38>
80007944:	30 08       	mov	r8,0
80007946:	58 0a       	cp.w	r10,0
80007948:	cf 71       	brne	80007936 <memmove+0x28>
8000794a:	d8 02       	popm	pc

8000794c <__malloc_lock>:
8000794c:	5e fc       	retal	r12

8000794e <__malloc_unlock>:
8000794e:	5e fc       	retal	r12

80007950 <__hi0bits>:
80007950:	18 98       	mov	r8,r12
80007952:	e0 1c 00 00 	andl	r12,0x0
80007956:	f0 09 15 10 	lsl	r9,r8,0x10
8000795a:	58 0c       	cp.w	r12,0
8000795c:	f2 08 17 00 	moveq	r8,r9
80007960:	f9 bc 00 10 	moveq	r12,16
80007964:	f9 bc 01 00 	movne	r12,0
80007968:	10 9a       	mov	r10,r8
8000796a:	f0 09 15 08 	lsl	r9,r8,0x8
8000796e:	e6 1a ff 00 	andh	r10,0xff00,COH
80007972:	f7 bc 00 f8 	subeq	r12,-8
80007976:	f2 08 17 00 	moveq	r8,r9
8000797a:	10 9a       	mov	r10,r8
8000797c:	f0 09 15 04 	lsl	r9,r8,0x4
80007980:	e6 1a f0 00 	andh	r10,0xf000,COH
80007984:	f7 bc 00 fc 	subeq	r12,-4
80007988:	f2 08 17 00 	moveq	r8,r9
8000798c:	10 9a       	mov	r10,r8
8000798e:	f0 09 15 02 	lsl	r9,r8,0x2
80007992:	e6 1a c0 00 	andh	r10,0xc000,COH
80007996:	f7 bc 00 fe 	subeq	r12,-2
8000799a:	f2 08 17 00 	moveq	r8,r9
8000799e:	58 08       	cp.w	r8,0
800079a0:	5e 5c       	retlt	r12
800079a2:	ed b8 00 1e 	bld	r8,0x1e
800079a6:	f9 bc 01 20 	movne	r12,32
800079aa:	f7 bc 00 ff 	subeq	r12,-1
800079ae:	5e fc       	retal	r12

800079b0 <__lo0bits>:
800079b0:	18 99       	mov	r9,r12
800079b2:	78 08       	ld.w	r8,r12[0x0]
800079b4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800079b8:	c1 50       	breq	800079e2 <__lo0bits+0x32>
800079ba:	ed b8 00 00 	bld	r8,0x0
800079be:	c0 21       	brne	800079c2 <__lo0bits+0x12>
800079c0:	5e fd       	retal	0
800079c2:	10 9b       	mov	r11,r8
800079c4:	f0 0a 16 01 	lsr	r10,r8,0x1
800079c8:	e2 1b 00 02 	andl	r11,0x2,COH
800079cc:	a3 88       	lsr	r8,0x2
800079ce:	58 0b       	cp.w	r11,0
800079d0:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800079d4:	f9 bc 01 01 	movne	r12,1
800079d8:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800079dc:	f9 bc 00 02 	moveq	r12,2
800079e0:	5e fc       	retal	r12
800079e2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800079e6:	f0 0b 16 10 	lsr	r11,r8,0x10
800079ea:	58 0a       	cp.w	r10,0
800079ec:	f6 08 17 00 	moveq	r8,r11
800079f0:	f9 bc 00 10 	moveq	r12,16
800079f4:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800079f8:	f0 0a 16 08 	lsr	r10,r8,0x8
800079fc:	58 0b       	cp.w	r11,0
800079fe:	f7 bc 00 f8 	subeq	r12,-8
80007a02:	f4 08 17 00 	moveq	r8,r10
80007a06:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007a0a:	f0 0a 16 04 	lsr	r10,r8,0x4
80007a0e:	58 0b       	cp.w	r11,0
80007a10:	f7 bc 00 fc 	subeq	r12,-4
80007a14:	f4 08 17 00 	moveq	r8,r10
80007a18:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007a1c:	f0 0a 16 02 	lsr	r10,r8,0x2
80007a20:	58 0b       	cp.w	r11,0
80007a22:	f7 bc 00 fe 	subeq	r12,-2
80007a26:	f4 08 17 00 	moveq	r8,r10
80007a2a:	ed b8 00 00 	bld	r8,0x0
80007a2e:	c0 60       	breq	80007a3a <__lo0bits+0x8a>
80007a30:	a1 98       	lsr	r8,0x1
80007a32:	c0 31       	brne	80007a38 <__lo0bits+0x88>
80007a34:	32 0c       	mov	r12,32
80007a36:	5e fc       	retal	r12
80007a38:	2f fc       	sub	r12,-1
80007a3a:	93 08       	st.w	r9[0x0],r8
80007a3c:	5e fc       	retal	r12

80007a3e <__mcmp>:
80007a3e:	d4 01       	pushm	lr
80007a40:	18 98       	mov	r8,r12
80007a42:	76 49       	ld.w	r9,r11[0x10]
80007a44:	78 4c       	ld.w	r12,r12[0x10]
80007a46:	12 1c       	sub	r12,r9
80007a48:	c1 31       	brne	80007a6e <__mcmp+0x30>
80007a4a:	2f b9       	sub	r9,-5
80007a4c:	a3 69       	lsl	r9,0x2
80007a4e:	12 0b       	add	r11,r9
80007a50:	f0 09 00 09 	add	r9,r8,r9
80007a54:	2e c8       	sub	r8,-20
80007a56:	13 4e       	ld.w	lr,--r9
80007a58:	17 4a       	ld.w	r10,--r11
80007a5a:	14 3e       	cp.w	lr,r10
80007a5c:	c0 60       	breq	80007a68 <__mcmp+0x2a>
80007a5e:	f9 bc 03 ff 	movlo	r12,-1
80007a62:	f9 bc 02 01 	movhs	r12,1
80007a66:	d8 02       	popm	pc
80007a68:	10 39       	cp.w	r9,r8
80007a6a:	fe 9b ff f6 	brhi	80007a56 <__mcmp+0x18>
80007a6e:	d8 02       	popm	pc

80007a70 <_Bfree>:
80007a70:	d4 21       	pushm	r4-r7,lr
80007a72:	18 97       	mov	r7,r12
80007a74:	16 95       	mov	r5,r11
80007a76:	78 96       	ld.w	r6,r12[0x24]
80007a78:	58 06       	cp.w	r6,0
80007a7a:	c0 91       	brne	80007a8c <_Bfree+0x1c>
80007a7c:	31 0c       	mov	r12,16
80007a7e:	fe b0 fd 1d 	rcall	800074b8 <malloc>
80007a82:	99 36       	st.w	r12[0xc],r6
80007a84:	8f 9c       	st.w	r7[0x24],r12
80007a86:	99 16       	st.w	r12[0x4],r6
80007a88:	99 26       	st.w	r12[0x8],r6
80007a8a:	99 06       	st.w	r12[0x0],r6
80007a8c:	58 05       	cp.w	r5,0
80007a8e:	c0 90       	breq	80007aa0 <_Bfree+0x30>
80007a90:	6a 19       	ld.w	r9,r5[0x4]
80007a92:	6e 98       	ld.w	r8,r7[0x24]
80007a94:	70 38       	ld.w	r8,r8[0xc]
80007a96:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007a9a:	8b 0a       	st.w	r5[0x0],r10
80007a9c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007aa0:	d8 22       	popm	r4-r7,pc
80007aa2:	d7 03       	nop

80007aa4 <_Balloc>:
80007aa4:	d4 21       	pushm	r4-r7,lr
80007aa6:	18 97       	mov	r7,r12
80007aa8:	16 96       	mov	r6,r11
80007aaa:	78 95       	ld.w	r5,r12[0x24]
80007aac:	58 05       	cp.w	r5,0
80007aae:	c0 91       	brne	80007ac0 <_Balloc+0x1c>
80007ab0:	31 0c       	mov	r12,16
80007ab2:	fe b0 fd 03 	rcall	800074b8 <malloc>
80007ab6:	99 35       	st.w	r12[0xc],r5
80007ab8:	8f 9c       	st.w	r7[0x24],r12
80007aba:	99 15       	st.w	r12[0x4],r5
80007abc:	99 25       	st.w	r12[0x8],r5
80007abe:	99 05       	st.w	r12[0x0],r5
80007ac0:	6e 95       	ld.w	r5,r7[0x24]
80007ac2:	6a 38       	ld.w	r8,r5[0xc]
80007ac4:	58 08       	cp.w	r8,0
80007ac6:	c0 b1       	brne	80007adc <_Balloc+0x38>
80007ac8:	31 0a       	mov	r10,16
80007aca:	30 4b       	mov	r11,4
80007acc:	0e 9c       	mov	r12,r7
80007ace:	e0 a0 04 93 	rcall	800083f4 <_calloc_r>
80007ad2:	8b 3c       	st.w	r5[0xc],r12
80007ad4:	6e 98       	ld.w	r8,r7[0x24]
80007ad6:	70 3c       	ld.w	r12,r8[0xc]
80007ad8:	58 0c       	cp.w	r12,0
80007ada:	c1 b0       	breq	80007b10 <_Balloc+0x6c>
80007adc:	6e 98       	ld.w	r8,r7[0x24]
80007ade:	70 38       	ld.w	r8,r8[0xc]
80007ae0:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007ae4:	70 0c       	ld.w	r12,r8[0x0]
80007ae6:	58 0c       	cp.w	r12,0
80007ae8:	c0 40       	breq	80007af0 <_Balloc+0x4c>
80007aea:	78 09       	ld.w	r9,r12[0x0]
80007aec:	91 09       	st.w	r8[0x0],r9
80007aee:	c0 e8       	rjmp	80007b0a <_Balloc+0x66>
80007af0:	0e 9c       	mov	r12,r7
80007af2:	30 17       	mov	r7,1
80007af4:	0e 9b       	mov	r11,r7
80007af6:	ee 06 09 47 	lsl	r7,r7,r6
80007afa:	ee ca ff fb 	sub	r10,r7,-5
80007afe:	a3 6a       	lsl	r10,0x2
80007b00:	e0 a0 04 7a 	rcall	800083f4 <_calloc_r>
80007b04:	c0 60       	breq	80007b10 <_Balloc+0x6c>
80007b06:	99 16       	st.w	r12[0x4],r6
80007b08:	99 27       	st.w	r12[0x8],r7
80007b0a:	30 08       	mov	r8,0
80007b0c:	99 38       	st.w	r12[0xc],r8
80007b0e:	99 48       	st.w	r12[0x10],r8
80007b10:	d8 22       	popm	r4-r7,pc
80007b12:	d7 03       	nop

80007b14 <__d2b>:
80007b14:	d4 31       	pushm	r0-r7,lr
80007b16:	20 2d       	sub	sp,8
80007b18:	16 93       	mov	r3,r11
80007b1a:	12 96       	mov	r6,r9
80007b1c:	10 95       	mov	r5,r8
80007b1e:	14 92       	mov	r2,r10
80007b20:	30 1b       	mov	r11,1
80007b22:	cc 1f       	rcall	80007aa4 <_Balloc>
80007b24:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007b28:	50 09       	stdsp	sp[0x0],r9
80007b2a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007b2e:	b5 a9       	sbr	r9,0x14
80007b30:	f0 01 16 14 	lsr	r1,r8,0x14
80007b34:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007b38:	18 94       	mov	r4,r12
80007b3a:	58 02       	cp.w	r2,0
80007b3c:	c1 d0       	breq	80007b76 <__d2b+0x62>
80007b3e:	fa cc ff f8 	sub	r12,sp,-8
80007b42:	18 d2       	st.w	--r12,r2
80007b44:	c3 6f       	rcall	800079b0 <__lo0bits>
80007b46:	40 18       	lddsp	r8,sp[0x4]
80007b48:	c0 d0       	breq	80007b62 <__d2b+0x4e>
80007b4a:	40 09       	lddsp	r9,sp[0x0]
80007b4c:	f8 0a 11 20 	rsub	r10,r12,32
80007b50:	f2 0a 09 4a 	lsl	r10,r9,r10
80007b54:	f5 e8 10 08 	or	r8,r10,r8
80007b58:	89 58       	st.w	r4[0x14],r8
80007b5a:	f2 0c 0a 49 	lsr	r9,r9,r12
80007b5e:	50 09       	stdsp	sp[0x0],r9
80007b60:	c0 28       	rjmp	80007b64 <__d2b+0x50>
80007b62:	89 58       	st.w	r4[0x14],r8
80007b64:	40 08       	lddsp	r8,sp[0x0]
80007b66:	58 08       	cp.w	r8,0
80007b68:	f9 b3 01 02 	movne	r3,2
80007b6c:	f9 b3 00 01 	moveq	r3,1
80007b70:	89 68       	st.w	r4[0x18],r8
80007b72:	89 43       	st.w	r4[0x10],r3
80007b74:	c0 88       	rjmp	80007b84 <__d2b+0x70>
80007b76:	1a 9c       	mov	r12,sp
80007b78:	c1 cf       	rcall	800079b0 <__lo0bits>
80007b7a:	30 13       	mov	r3,1
80007b7c:	40 08       	lddsp	r8,sp[0x0]
80007b7e:	2e 0c       	sub	r12,-32
80007b80:	89 43       	st.w	r4[0x10],r3
80007b82:	89 58       	st.w	r4[0x14],r8
80007b84:	58 01       	cp.w	r1,0
80007b86:	c0 90       	breq	80007b98 <__d2b+0x84>
80007b88:	e2 c1 04 33 	sub	r1,r1,1075
80007b8c:	18 01       	add	r1,r12
80007b8e:	8d 01       	st.w	r6[0x0],r1
80007b90:	f8 0c 11 35 	rsub	r12,r12,53
80007b94:	8b 0c       	st.w	r5[0x0],r12
80007b96:	c0 c8       	rjmp	80007bae <__d2b+0x9a>
80007b98:	e6 c8 ff fc 	sub	r8,r3,-4
80007b9c:	f8 cc 04 32 	sub	r12,r12,1074
80007ba0:	a5 73       	lsl	r3,0x5
80007ba2:	8d 0c       	st.w	r6[0x0],r12
80007ba4:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007ba8:	cd 4e       	rcall	80007950 <__hi0bits>
80007baa:	18 13       	sub	r3,r12
80007bac:	8b 03       	st.w	r5[0x0],r3
80007bae:	08 9c       	mov	r12,r4
80007bb0:	2f ed       	sub	sp,-8
80007bb2:	d8 32       	popm	r0-r7,pc

80007bb4 <__mdiff>:
80007bb4:	d4 31       	pushm	r0-r7,lr
80007bb6:	74 48       	ld.w	r8,r10[0x10]
80007bb8:	76 45       	ld.w	r5,r11[0x10]
80007bba:	16 97       	mov	r7,r11
80007bbc:	14 96       	mov	r6,r10
80007bbe:	10 15       	sub	r5,r8
80007bc0:	c1 31       	brne	80007be6 <__mdiff+0x32>
80007bc2:	2f b8       	sub	r8,-5
80007bc4:	ee ce ff ec 	sub	lr,r7,-20
80007bc8:	a3 68       	lsl	r8,0x2
80007bca:	f4 08 00 0b 	add	r11,r10,r8
80007bce:	ee 08 00 08 	add	r8,r7,r8
80007bd2:	11 4a       	ld.w	r10,--r8
80007bd4:	17 49       	ld.w	r9,--r11
80007bd6:	12 3a       	cp.w	r10,r9
80007bd8:	c0 30       	breq	80007bde <__mdiff+0x2a>
80007bda:	c0 e2       	brcc	80007bf6 <__mdiff+0x42>
80007bdc:	c0 78       	rjmp	80007bea <__mdiff+0x36>
80007bde:	1c 38       	cp.w	r8,lr
80007be0:	fe 9b ff f9 	brhi	80007bd2 <__mdiff+0x1e>
80007be4:	c4 98       	rjmp	80007c76 <__mdiff+0xc2>
80007be6:	58 05       	cp.w	r5,0
80007be8:	c0 64       	brge	80007bf4 <__mdiff+0x40>
80007bea:	0e 98       	mov	r8,r7
80007bec:	30 15       	mov	r5,1
80007bee:	0c 97       	mov	r7,r6
80007bf0:	10 96       	mov	r6,r8
80007bf2:	c0 28       	rjmp	80007bf6 <__mdiff+0x42>
80007bf4:	30 05       	mov	r5,0
80007bf6:	6e 1b       	ld.w	r11,r7[0x4]
80007bf8:	c5 6f       	rcall	80007aa4 <_Balloc>
80007bfa:	6e 49       	ld.w	r9,r7[0x10]
80007bfc:	6c 44       	ld.w	r4,r6[0x10]
80007bfe:	99 35       	st.w	r12[0xc],r5
80007c00:	2f b4       	sub	r4,-5
80007c02:	f2 c5 ff fb 	sub	r5,r9,-5
80007c06:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007c0a:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007c0e:	2e c6       	sub	r6,-20
80007c10:	2e c7       	sub	r7,-20
80007c12:	f8 c8 ff ec 	sub	r8,r12,-20
80007c16:	30 0a       	mov	r10,0
80007c18:	0f 0e       	ld.w	lr,r7++
80007c1a:	0d 0b       	ld.w	r11,r6++
80007c1c:	fc 02 16 10 	lsr	r2,lr,0x10
80007c20:	f6 03 16 10 	lsr	r3,r11,0x10
80007c24:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007c28:	e4 03 01 03 	sub	r3,r2,r3
80007c2c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007c30:	fc 0b 01 0b 	sub	r11,lr,r11
80007c34:	f6 0a 00 0a 	add	r10,r11,r10
80007c38:	b0 1a       	st.h	r8[0x2],r10
80007c3a:	b1 4a       	asr	r10,0x10
80007c3c:	e6 0a 00 0a 	add	r10,r3,r10
80007c40:	b0 0a       	st.h	r8[0x0],r10
80007c42:	2f c8       	sub	r8,-4
80007c44:	b1 4a       	asr	r10,0x10
80007c46:	08 36       	cp.w	r6,r4
80007c48:	ce 83       	brcs	80007c18 <__mdiff+0x64>
80007c4a:	c0 d8       	rjmp	80007c64 <__mdiff+0xb0>
80007c4c:	0f 0b       	ld.w	r11,r7++
80007c4e:	f6 0e 16 10 	lsr	lr,r11,0x10
80007c52:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007c56:	16 0a       	add	r10,r11
80007c58:	b0 1a       	st.h	r8[0x2],r10
80007c5a:	b1 4a       	asr	r10,0x10
80007c5c:	1c 0a       	add	r10,lr
80007c5e:	b0 0a       	st.h	r8[0x0],r10
80007c60:	2f c8       	sub	r8,-4
80007c62:	b1 4a       	asr	r10,0x10
80007c64:	0a 37       	cp.w	r7,r5
80007c66:	cf 33       	brcs	80007c4c <__mdiff+0x98>
80007c68:	c0 28       	rjmp	80007c6c <__mdiff+0xb8>
80007c6a:	20 19       	sub	r9,1
80007c6c:	11 4a       	ld.w	r10,--r8
80007c6e:	58 0a       	cp.w	r10,0
80007c70:	cf d0       	breq	80007c6a <__mdiff+0xb6>
80007c72:	99 49       	st.w	r12[0x10],r9
80007c74:	d8 32       	popm	r0-r7,pc
80007c76:	30 0b       	mov	r11,0
80007c78:	c1 6f       	rcall	80007aa4 <_Balloc>
80007c7a:	30 18       	mov	r8,1
80007c7c:	99 48       	st.w	r12[0x10],r8
80007c7e:	30 08       	mov	r8,0
80007c80:	99 58       	st.w	r12[0x14],r8
80007c82:	d8 32       	popm	r0-r7,pc

80007c84 <__lshift>:
80007c84:	d4 31       	pushm	r0-r7,lr
80007c86:	16 97       	mov	r7,r11
80007c88:	76 46       	ld.w	r6,r11[0x10]
80007c8a:	f4 02 14 05 	asr	r2,r10,0x5
80007c8e:	2f f6       	sub	r6,-1
80007c90:	14 93       	mov	r3,r10
80007c92:	18 94       	mov	r4,r12
80007c94:	04 06       	add	r6,r2
80007c96:	76 1b       	ld.w	r11,r11[0x4]
80007c98:	6e 28       	ld.w	r8,r7[0x8]
80007c9a:	c0 38       	rjmp	80007ca0 <__lshift+0x1c>
80007c9c:	2f fb       	sub	r11,-1
80007c9e:	a1 78       	lsl	r8,0x1
80007ca0:	10 36       	cp.w	r6,r8
80007ca2:	fe 99 ff fd 	brgt	80007c9c <__lshift+0x18>
80007ca6:	08 9c       	mov	r12,r4
80007ca8:	cf ee       	rcall	80007aa4 <_Balloc>
80007caa:	30 09       	mov	r9,0
80007cac:	18 95       	mov	r5,r12
80007cae:	f8 c8 ff ec 	sub	r8,r12,-20
80007cb2:	12 9a       	mov	r10,r9
80007cb4:	c0 38       	rjmp	80007cba <__lshift+0x36>
80007cb6:	10 aa       	st.w	r8++,r10
80007cb8:	2f f9       	sub	r9,-1
80007cba:	04 39       	cp.w	r9,r2
80007cbc:	cf d5       	brlt	80007cb6 <__lshift+0x32>
80007cbe:	6e 4b       	ld.w	r11,r7[0x10]
80007cc0:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007cc4:	2f bb       	sub	r11,-5
80007cc6:	ee c9 ff ec 	sub	r9,r7,-20
80007cca:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007cce:	58 03       	cp.w	r3,0
80007cd0:	c1 30       	breq	80007cf6 <__lshift+0x72>
80007cd2:	e6 0c 11 20 	rsub	r12,r3,32
80007cd6:	30 0a       	mov	r10,0
80007cd8:	72 02       	ld.w	r2,r9[0x0]
80007cda:	e4 03 09 42 	lsl	r2,r2,r3
80007cde:	04 4a       	or	r10,r2
80007ce0:	10 aa       	st.w	r8++,r10
80007ce2:	13 0a       	ld.w	r10,r9++
80007ce4:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007ce8:	16 39       	cp.w	r9,r11
80007cea:	cf 73       	brcs	80007cd8 <__lshift+0x54>
80007cec:	91 0a       	st.w	r8[0x0],r10
80007cee:	58 0a       	cp.w	r10,0
80007cf0:	c0 70       	breq	80007cfe <__lshift+0x7a>
80007cf2:	2f f6       	sub	r6,-1
80007cf4:	c0 58       	rjmp	80007cfe <__lshift+0x7a>
80007cf6:	13 0a       	ld.w	r10,r9++
80007cf8:	10 aa       	st.w	r8++,r10
80007cfa:	16 39       	cp.w	r9,r11
80007cfc:	cf d3       	brcs	80007cf6 <__lshift+0x72>
80007cfe:	08 9c       	mov	r12,r4
80007d00:	20 16       	sub	r6,1
80007d02:	0e 9b       	mov	r11,r7
80007d04:	8b 46       	st.w	r5[0x10],r6
80007d06:	cb 5e       	rcall	80007a70 <_Bfree>
80007d08:	0a 9c       	mov	r12,r5
80007d0a:	d8 32       	popm	r0-r7,pc

80007d0c <__multiply>:
80007d0c:	d4 31       	pushm	r0-r7,lr
80007d0e:	20 2d       	sub	sp,8
80007d10:	76 49       	ld.w	r9,r11[0x10]
80007d12:	74 48       	ld.w	r8,r10[0x10]
80007d14:	16 96       	mov	r6,r11
80007d16:	14 95       	mov	r5,r10
80007d18:	10 39       	cp.w	r9,r8
80007d1a:	ec 08 17 50 	movlt	r8,r6
80007d1e:	ea 06 17 50 	movlt	r6,r5
80007d22:	f0 05 17 50 	movlt	r5,r8
80007d26:	6c 28       	ld.w	r8,r6[0x8]
80007d28:	76 43       	ld.w	r3,r11[0x10]
80007d2a:	74 42       	ld.w	r2,r10[0x10]
80007d2c:	76 1b       	ld.w	r11,r11[0x4]
80007d2e:	e4 03 00 07 	add	r7,r2,r3
80007d32:	10 37       	cp.w	r7,r8
80007d34:	f7 bb 09 ff 	subgt	r11,-1
80007d38:	cb 6e       	rcall	80007aa4 <_Balloc>
80007d3a:	ee c4 ff fb 	sub	r4,r7,-5
80007d3e:	f8 c9 ff ec 	sub	r9,r12,-20
80007d42:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007d46:	30 0a       	mov	r10,0
80007d48:	12 98       	mov	r8,r9
80007d4a:	c0 28       	rjmp	80007d4e <__multiply+0x42>
80007d4c:	10 aa       	st.w	r8++,r10
80007d4e:	08 38       	cp.w	r8,r4
80007d50:	cf e3       	brcs	80007d4c <__multiply+0x40>
80007d52:	2f b3       	sub	r3,-5
80007d54:	2f b2       	sub	r2,-5
80007d56:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007d5a:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007d5e:	ec cb ff ec 	sub	r11,r6,-20
80007d62:	50 12       	stdsp	sp[0x4],r2
80007d64:	ea ca ff ec 	sub	r10,r5,-20
80007d68:	c4 48       	rjmp	80007df0 <__multiply+0xe4>
80007d6a:	94 95       	ld.uh	r5,r10[0x2]
80007d6c:	58 05       	cp.w	r5,0
80007d6e:	c2 00       	breq	80007dae <__multiply+0xa2>
80007d70:	12 98       	mov	r8,r9
80007d72:	16 96       	mov	r6,r11
80007d74:	30 0e       	mov	lr,0
80007d76:	50 09       	stdsp	sp[0x0],r9
80007d78:	0d 02       	ld.w	r2,r6++
80007d7a:	e4 00 16 10 	lsr	r0,r2,0x10
80007d7e:	70 01       	ld.w	r1,r8[0x0]
80007d80:	70 09       	ld.w	r9,r8[0x0]
80007d82:	b1 81       	lsr	r1,0x10
80007d84:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007d88:	e0 05 03 41 	mac	r1,r0,r5
80007d8c:	ab 32       	mul	r2,r5
80007d8e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007d92:	00 02       	add	r2,r0
80007d94:	e4 0e 00 0e 	add	lr,r2,lr
80007d98:	b0 1e       	st.h	r8[0x2],lr
80007d9a:	b1 8e       	lsr	lr,0x10
80007d9c:	1c 01       	add	r1,lr
80007d9e:	b0 01       	st.h	r8[0x0],r1
80007da0:	e2 0e 16 10 	lsr	lr,r1,0x10
80007da4:	2f c8       	sub	r8,-4
80007da6:	06 36       	cp.w	r6,r3
80007da8:	ce 83       	brcs	80007d78 <__multiply+0x6c>
80007daa:	40 09       	lddsp	r9,sp[0x0]
80007dac:	91 0e       	st.w	r8[0x0],lr
80007dae:	94 86       	ld.uh	r6,r10[0x0]
80007db0:	58 06       	cp.w	r6,0
80007db2:	c1 d0       	breq	80007dec <__multiply+0xe0>
80007db4:	72 02       	ld.w	r2,r9[0x0]
80007db6:	12 98       	mov	r8,r9
80007db8:	16 9e       	mov	lr,r11
80007dba:	30 05       	mov	r5,0
80007dbc:	b0 12       	st.h	r8[0x2],r2
80007dbe:	1d 01       	ld.w	r1,lr++
80007dc0:	90 82       	ld.uh	r2,r8[0x0]
80007dc2:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007dc6:	ad 30       	mul	r0,r6
80007dc8:	e0 02 00 02 	add	r2,r0,r2
80007dcc:	e4 05 00 05 	add	r5,r2,r5
80007dd0:	b0 05       	st.h	r8[0x0],r5
80007dd2:	b1 85       	lsr	r5,0x10
80007dd4:	b1 81       	lsr	r1,0x10
80007dd6:	2f c8       	sub	r8,-4
80007dd8:	ad 31       	mul	r1,r6
80007dda:	90 92       	ld.uh	r2,r8[0x2]
80007ddc:	e2 02 00 02 	add	r2,r1,r2
80007de0:	0a 02       	add	r2,r5
80007de2:	e4 05 16 10 	lsr	r5,r2,0x10
80007de6:	06 3e       	cp.w	lr,r3
80007de8:	ce a3       	brcs	80007dbc <__multiply+0xb0>
80007dea:	91 02       	st.w	r8[0x0],r2
80007dec:	2f ca       	sub	r10,-4
80007dee:	2f c9       	sub	r9,-4
80007df0:	40 18       	lddsp	r8,sp[0x4]
80007df2:	10 3a       	cp.w	r10,r8
80007df4:	cb b3       	brcs	80007d6a <__multiply+0x5e>
80007df6:	c0 28       	rjmp	80007dfa <__multiply+0xee>
80007df8:	20 17       	sub	r7,1
80007dfa:	58 07       	cp.w	r7,0
80007dfc:	e0 8a 00 05 	brle	80007e06 <__multiply+0xfa>
80007e00:	09 48       	ld.w	r8,--r4
80007e02:	58 08       	cp.w	r8,0
80007e04:	cf a0       	breq	80007df8 <__multiply+0xec>
80007e06:	99 47       	st.w	r12[0x10],r7
80007e08:	2f ed       	sub	sp,-8
80007e0a:	d8 32       	popm	r0-r7,pc

80007e0c <__i2b>:
80007e0c:	d4 21       	pushm	r4-r7,lr
80007e0e:	16 97       	mov	r7,r11
80007e10:	30 1b       	mov	r11,1
80007e12:	c4 9e       	rcall	80007aa4 <_Balloc>
80007e14:	30 19       	mov	r9,1
80007e16:	99 57       	st.w	r12[0x14],r7
80007e18:	99 49       	st.w	r12[0x10],r9
80007e1a:	d8 22       	popm	r4-r7,pc

80007e1c <__multadd>:
80007e1c:	d4 31       	pushm	r0-r7,lr
80007e1e:	30 08       	mov	r8,0
80007e20:	12 95       	mov	r5,r9
80007e22:	16 97       	mov	r7,r11
80007e24:	18 96       	mov	r6,r12
80007e26:	76 44       	ld.w	r4,r11[0x10]
80007e28:	f6 c9 ff ec 	sub	r9,r11,-20
80007e2c:	72 0b       	ld.w	r11,r9[0x0]
80007e2e:	f6 0c 16 10 	lsr	r12,r11,0x10
80007e32:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007e36:	f4 0c 02 4c 	mul	r12,r10,r12
80007e3a:	f4 0b 03 45 	mac	r5,r10,r11
80007e3e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007e42:	b1 85       	lsr	r5,0x10
80007e44:	18 05       	add	r5,r12
80007e46:	ea 0c 15 10 	lsl	r12,r5,0x10
80007e4a:	f8 0b 00 0b 	add	r11,r12,r11
80007e4e:	12 ab       	st.w	r9++,r11
80007e50:	2f f8       	sub	r8,-1
80007e52:	b1 85       	lsr	r5,0x10
80007e54:	08 38       	cp.w	r8,r4
80007e56:	ce b5       	brlt	80007e2c <__multadd+0x10>
80007e58:	58 05       	cp.w	r5,0
80007e5a:	c1 c0       	breq	80007e92 <__multadd+0x76>
80007e5c:	6e 28       	ld.w	r8,r7[0x8]
80007e5e:	10 34       	cp.w	r4,r8
80007e60:	c1 35       	brlt	80007e86 <__multadd+0x6a>
80007e62:	6e 1b       	ld.w	r11,r7[0x4]
80007e64:	0c 9c       	mov	r12,r6
80007e66:	2f fb       	sub	r11,-1
80007e68:	c1 ee       	rcall	80007aa4 <_Balloc>
80007e6a:	6e 4a       	ld.w	r10,r7[0x10]
80007e6c:	ee cb ff f4 	sub	r11,r7,-12
80007e70:	18 93       	mov	r3,r12
80007e72:	2f ea       	sub	r10,-2
80007e74:	2f 4c       	sub	r12,-12
80007e76:	a3 6a       	lsl	r10,0x2
80007e78:	fe b0 de 3d 	rcall	80003af2 <memcpy>
80007e7c:	0e 9b       	mov	r11,r7
80007e7e:	0c 9c       	mov	r12,r6
80007e80:	fe b0 fd f8 	rcall	80007a70 <_Bfree>
80007e84:	06 97       	mov	r7,r3
80007e86:	e8 c8 ff ff 	sub	r8,r4,-1
80007e8a:	2f b4       	sub	r4,-5
80007e8c:	8f 48       	st.w	r7[0x10],r8
80007e8e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007e92:	0e 9c       	mov	r12,r7
80007e94:	d8 32       	popm	r0-r7,pc
80007e96:	d7 03       	nop

80007e98 <__pow5mult>:
80007e98:	d4 31       	pushm	r0-r7,lr
80007e9a:	14 96       	mov	r6,r10
80007e9c:	18 97       	mov	r7,r12
80007e9e:	16 94       	mov	r4,r11
80007ea0:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007ea4:	c0 90       	breq	80007eb6 <__pow5mult+0x1e>
80007ea6:	20 18       	sub	r8,1
80007ea8:	fe c9 e6 04 	sub	r9,pc,-6652
80007eac:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007eb0:	30 09       	mov	r9,0
80007eb2:	cb 5f       	rcall	80007e1c <__multadd>
80007eb4:	18 94       	mov	r4,r12
80007eb6:	a3 46       	asr	r6,0x2
80007eb8:	c3 40       	breq	80007f20 <__pow5mult+0x88>
80007eba:	6e 95       	ld.w	r5,r7[0x24]
80007ebc:	58 05       	cp.w	r5,0
80007ebe:	c0 91       	brne	80007ed0 <__pow5mult+0x38>
80007ec0:	31 0c       	mov	r12,16
80007ec2:	fe b0 fa fb 	rcall	800074b8 <malloc>
80007ec6:	99 35       	st.w	r12[0xc],r5
80007ec8:	8f 9c       	st.w	r7[0x24],r12
80007eca:	99 15       	st.w	r12[0x4],r5
80007ecc:	99 25       	st.w	r12[0x8],r5
80007ece:	99 05       	st.w	r12[0x0],r5
80007ed0:	6e 93       	ld.w	r3,r7[0x24]
80007ed2:	66 25       	ld.w	r5,r3[0x8]
80007ed4:	58 05       	cp.w	r5,0
80007ed6:	c0 c1       	brne	80007eee <__pow5mult+0x56>
80007ed8:	e0 6b 02 71 	mov	r11,625
80007edc:	0e 9c       	mov	r12,r7
80007ede:	c9 7f       	rcall	80007e0c <__i2b>
80007ee0:	87 2c       	st.w	r3[0x8],r12
80007ee2:	30 08       	mov	r8,0
80007ee4:	18 95       	mov	r5,r12
80007ee6:	99 08       	st.w	r12[0x0],r8
80007ee8:	c0 38       	rjmp	80007eee <__pow5mult+0x56>
80007eea:	06 9c       	mov	r12,r3
80007eec:	18 95       	mov	r5,r12
80007eee:	ed b6 00 00 	bld	r6,0x0
80007ef2:	c0 b1       	brne	80007f08 <__pow5mult+0x70>
80007ef4:	08 9b       	mov	r11,r4
80007ef6:	0a 9a       	mov	r10,r5
80007ef8:	0e 9c       	mov	r12,r7
80007efa:	c0 9f       	rcall	80007d0c <__multiply>
80007efc:	08 9b       	mov	r11,r4
80007efe:	18 93       	mov	r3,r12
80007f00:	0e 9c       	mov	r12,r7
80007f02:	06 94       	mov	r4,r3
80007f04:	fe b0 fd b6 	rcall	80007a70 <_Bfree>
80007f08:	a1 56       	asr	r6,0x1
80007f0a:	c0 b0       	breq	80007f20 <__pow5mult+0x88>
80007f0c:	6a 03       	ld.w	r3,r5[0x0]
80007f0e:	58 03       	cp.w	r3,0
80007f10:	ce d1       	brne	80007eea <__pow5mult+0x52>
80007f12:	0a 9a       	mov	r10,r5
80007f14:	0a 9b       	mov	r11,r5
80007f16:	0e 9c       	mov	r12,r7
80007f18:	cf ae       	rcall	80007d0c <__multiply>
80007f1a:	8b 0c       	st.w	r5[0x0],r12
80007f1c:	99 03       	st.w	r12[0x0],r3
80007f1e:	ce 7b       	rjmp	80007eec <__pow5mult+0x54>
80007f20:	08 9c       	mov	r12,r4
80007f22:	d8 32       	popm	r0-r7,pc

80007f24 <_realloc_r>:
80007f24:	d4 31       	pushm	r0-r7,lr
80007f26:	20 1d       	sub	sp,4
80007f28:	16 94       	mov	r4,r11
80007f2a:	18 92       	mov	r2,r12
80007f2c:	14 9b       	mov	r11,r10
80007f2e:	58 04       	cp.w	r4,0
80007f30:	c0 51       	brne	80007f3a <_realloc_r+0x16>
80007f32:	fe b0 fa cb 	rcall	800074c8 <_malloc_r>
80007f36:	18 95       	mov	r5,r12
80007f38:	c5 39       	rjmp	800081de <_realloc_r+0x2ba>
80007f3a:	50 0a       	stdsp	sp[0x0],r10
80007f3c:	fe b0 fd 08 	rcall	8000794c <__malloc_lock>
80007f40:	40 0b       	lddsp	r11,sp[0x0]
80007f42:	f6 c8 ff f5 	sub	r8,r11,-11
80007f46:	e8 c1 00 08 	sub	r1,r4,8
80007f4a:	10 96       	mov	r6,r8
80007f4c:	62 1c       	ld.w	r12,r1[0x4]
80007f4e:	e0 16 ff f8 	andl	r6,0xfff8
80007f52:	59 68       	cp.w	r8,22
80007f54:	f9 b6 08 10 	movls	r6,16
80007f58:	16 36       	cp.w	r6,r11
80007f5a:	5f 38       	srlo	r8
80007f5c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007f60:	c0 50       	breq	80007f6a <_realloc_r+0x46>
80007f62:	30 c8       	mov	r8,12
80007f64:	30 05       	mov	r5,0
80007f66:	85 38       	st.w	r2[0xc],r8
80007f68:	c3 b9       	rjmp	800081de <_realloc_r+0x2ba>
80007f6a:	18 90       	mov	r0,r12
80007f6c:	e0 10 ff fc 	andl	r0,0xfffc
80007f70:	0c 30       	cp.w	r0,r6
80007f72:	e0 84 01 0b 	brge	80008188 <_realloc_r+0x264>
80007f76:	e0 68 01 1c 	mov	r8,284
80007f7a:	e2 00 00 09 	add	r9,r1,r0
80007f7e:	70 25       	ld.w	r5,r8[0x8]
80007f80:	0a 39       	cp.w	r9,r5
80007f82:	c0 90       	breq	80007f94 <_realloc_r+0x70>
80007f84:	72 1a       	ld.w	r10,r9[0x4]
80007f86:	a1 ca       	cbr	r10,0x0
80007f88:	f2 0a 00 0a 	add	r10,r9,r10
80007f8c:	74 1a       	ld.w	r10,r10[0x4]
80007f8e:	ed ba 00 00 	bld	r10,0x0
80007f92:	c2 20       	breq	80007fd6 <_realloc_r+0xb2>
80007f94:	72 1a       	ld.w	r10,r9[0x4]
80007f96:	e0 1a ff fc 	andl	r10,0xfffc
80007f9a:	f4 00 00 03 	add	r3,r10,r0
80007f9e:	0a 39       	cp.w	r9,r5
80007fa0:	c1 31       	brne	80007fc6 <_realloc_r+0xa2>
80007fa2:	ec c7 ff f0 	sub	r7,r6,-16
80007fa6:	0e 33       	cp.w	r3,r7
80007fa8:	c1 95       	brlt	80007fda <_realloc_r+0xb6>
80007faa:	e2 06 00 09 	add	r9,r1,r6
80007fae:	0c 13       	sub	r3,r6
80007fb0:	a1 a3       	sbr	r3,0x0
80007fb2:	93 13       	st.w	r9[0x4],r3
80007fb4:	91 29       	st.w	r8[0x8],r9
80007fb6:	04 9c       	mov	r12,r2
80007fb8:	62 18       	ld.w	r8,r1[0x4]
80007fba:	08 95       	mov	r5,r4
80007fbc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007fc0:	10 46       	or	r6,r8
80007fc2:	83 16       	st.w	r1[0x4],r6
80007fc4:	c0 b9       	rjmp	800081da <_realloc_r+0x2b6>
80007fc6:	0c 33       	cp.w	r3,r6
80007fc8:	c0 95       	brlt	80007fda <_realloc_r+0xb6>
80007fca:	72 28       	ld.w	r8,r9[0x8]
80007fcc:	02 97       	mov	r7,r1
80007fce:	72 39       	ld.w	r9,r9[0xc]
80007fd0:	93 28       	st.w	r9[0x8],r8
80007fd2:	91 39       	st.w	r8[0xc],r9
80007fd4:	cd c8       	rjmp	8000818c <_realloc_r+0x268>
80007fd6:	30 0a       	mov	r10,0
80007fd8:	14 99       	mov	r9,r10
80007fda:	ed bc 00 00 	bld	r12,0x0
80007fde:	e0 80 00 95 	breq	80008108 <_realloc_r+0x1e4>
80007fe2:	62 07       	ld.w	r7,r1[0x0]
80007fe4:	e2 07 01 07 	sub	r7,r1,r7
80007fe8:	6e 1c       	ld.w	r12,r7[0x4]
80007fea:	e0 1c ff fc 	andl	r12,0xfffc
80007fee:	58 09       	cp.w	r9,0
80007ff0:	c5 60       	breq	8000809c <_realloc_r+0x178>
80007ff2:	f8 00 00 03 	add	r3,r12,r0
80007ff6:	0a 39       	cp.w	r9,r5
80007ff8:	c4 81       	brne	80008088 <_realloc_r+0x164>
80007ffa:	14 03       	add	r3,r10
80007ffc:	ec c9 ff f0 	sub	r9,r6,-16
80008000:	12 33       	cp.w	r3,r9
80008002:	c4 d5       	brlt	8000809c <_realloc_r+0x178>
80008004:	6e 3a       	ld.w	r10,r7[0xc]
80008006:	6e 29       	ld.w	r9,r7[0x8]
80008008:	95 29       	st.w	r10[0x8],r9
8000800a:	93 3a       	st.w	r9[0xc],r10
8000800c:	ee c5 ff f8 	sub	r5,r7,-8
80008010:	e0 ca 00 04 	sub	r10,r0,4
80008014:	e0 4a 00 24 	cp.w	r10,36
80008018:	e0 8b 00 25 	brhi	80008062 <_realloc_r+0x13e>
8000801c:	0a 99       	mov	r9,r5
8000801e:	59 3a       	cp.w	r10,19
80008020:	e0 88 00 1a 	brls	80008054 <_realloc_r+0x130>
80008024:	09 09       	ld.w	r9,r4++
80008026:	8b 09       	st.w	r5[0x0],r9
80008028:	09 09       	ld.w	r9,r4++
8000802a:	8f 39       	st.w	r7[0xc],r9
8000802c:	ee c9 ff f0 	sub	r9,r7,-16
80008030:	59 ba       	cp.w	r10,27
80008032:	e0 88 00 11 	brls	80008054 <_realloc_r+0x130>
80008036:	09 0b       	ld.w	r11,r4++
80008038:	93 0b       	st.w	r9[0x0],r11
8000803a:	09 09       	ld.w	r9,r4++
8000803c:	8f 59       	st.w	r7[0x14],r9
8000803e:	ee c9 ff e8 	sub	r9,r7,-24
80008042:	e0 4a 00 24 	cp.w	r10,36
80008046:	c0 71       	brne	80008054 <_realloc_r+0x130>
80008048:	09 0a       	ld.w	r10,r4++
8000804a:	93 0a       	st.w	r9[0x0],r10
8000804c:	ee c9 ff e0 	sub	r9,r7,-32
80008050:	09 0a       	ld.w	r10,r4++
80008052:	8f 7a       	st.w	r7[0x1c],r10
80008054:	09 0a       	ld.w	r10,r4++
80008056:	12 aa       	st.w	r9++,r10
80008058:	68 0a       	ld.w	r10,r4[0x0]
8000805a:	93 0a       	st.w	r9[0x0],r10
8000805c:	68 1a       	ld.w	r10,r4[0x4]
8000805e:	93 1a       	st.w	r9[0x4],r10
80008060:	c0 78       	rjmp	8000806e <_realloc_r+0x14a>
80008062:	50 08       	stdsp	sp[0x0],r8
80008064:	08 9b       	mov	r11,r4
80008066:	0a 9c       	mov	r12,r5
80008068:	fe b0 fc 53 	rcall	8000790e <memmove>
8000806c:	40 08       	lddsp	r8,sp[0x0]
8000806e:	ee 06 00 09 	add	r9,r7,r6
80008072:	0c 13       	sub	r3,r6
80008074:	a1 a3       	sbr	r3,0x0
80008076:	93 13       	st.w	r9[0x4],r3
80008078:	91 29       	st.w	r8[0x8],r9
8000807a:	04 9c       	mov	r12,r2
8000807c:	6e 18       	ld.w	r8,r7[0x4]
8000807e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008082:	10 46       	or	r6,r8
80008084:	8f 16       	st.w	r7[0x4],r6
80008086:	ca a8       	rjmp	800081da <_realloc_r+0x2b6>
80008088:	14 03       	add	r3,r10
8000808a:	0c 33       	cp.w	r3,r6
8000808c:	c0 85       	brlt	8000809c <_realloc_r+0x178>
8000808e:	72 28       	ld.w	r8,r9[0x8]
80008090:	72 39       	ld.w	r9,r9[0xc]
80008092:	93 28       	st.w	r9[0x8],r8
80008094:	91 39       	st.w	r8[0xc],r9
80008096:	6e 28       	ld.w	r8,r7[0x8]
80008098:	6e 39       	ld.w	r9,r7[0xc]
8000809a:	c0 78       	rjmp	800080a8 <_realloc_r+0x184>
8000809c:	f8 00 00 03 	add	r3,r12,r0
800080a0:	0c 33       	cp.w	r3,r6
800080a2:	c3 35       	brlt	80008108 <_realloc_r+0x1e4>
800080a4:	6e 39       	ld.w	r9,r7[0xc]
800080a6:	6e 28       	ld.w	r8,r7[0x8]
800080a8:	93 28       	st.w	r9[0x8],r8
800080aa:	91 39       	st.w	r8[0xc],r9
800080ac:	e0 ca 00 04 	sub	r10,r0,4
800080b0:	ee cc ff f8 	sub	r12,r7,-8
800080b4:	e0 4a 00 24 	cp.w	r10,36
800080b8:	e0 8b 00 24 	brhi	80008100 <_realloc_r+0x1dc>
800080bc:	59 3a       	cp.w	r10,19
800080be:	e0 88 00 1a 	brls	800080f2 <_realloc_r+0x1ce>
800080c2:	09 08       	ld.w	r8,r4++
800080c4:	99 08       	st.w	r12[0x0],r8
800080c6:	09 08       	ld.w	r8,r4++
800080c8:	8f 38       	st.w	r7[0xc],r8
800080ca:	ee cc ff f0 	sub	r12,r7,-16
800080ce:	59 ba       	cp.w	r10,27
800080d0:	e0 88 00 11 	brls	800080f2 <_realloc_r+0x1ce>
800080d4:	09 08       	ld.w	r8,r4++
800080d6:	99 08       	st.w	r12[0x0],r8
800080d8:	09 08       	ld.w	r8,r4++
800080da:	8f 58       	st.w	r7[0x14],r8
800080dc:	ee cc ff e8 	sub	r12,r7,-24
800080e0:	e0 4a 00 24 	cp.w	r10,36
800080e4:	c0 71       	brne	800080f2 <_realloc_r+0x1ce>
800080e6:	09 08       	ld.w	r8,r4++
800080e8:	99 08       	st.w	r12[0x0],r8
800080ea:	ee cc ff e0 	sub	r12,r7,-32
800080ee:	09 08       	ld.w	r8,r4++
800080f0:	8f 78       	st.w	r7[0x1c],r8
800080f2:	09 08       	ld.w	r8,r4++
800080f4:	18 a8       	st.w	r12++,r8
800080f6:	68 08       	ld.w	r8,r4[0x0]
800080f8:	99 08       	st.w	r12[0x0],r8
800080fa:	68 18       	ld.w	r8,r4[0x4]
800080fc:	99 18       	st.w	r12[0x4],r8
800080fe:	c4 78       	rjmp	8000818c <_realloc_r+0x268>
80008100:	08 9b       	mov	r11,r4
80008102:	fe b0 fc 06 	rcall	8000790e <memmove>
80008106:	c4 38       	rjmp	8000818c <_realloc_r+0x268>
80008108:	04 9c       	mov	r12,r2
8000810a:	fe b0 f9 df 	rcall	800074c8 <_malloc_r>
8000810e:	18 95       	mov	r5,r12
80008110:	c3 a0       	breq	80008184 <_realloc_r+0x260>
80008112:	62 18       	ld.w	r8,r1[0x4]
80008114:	f8 c9 00 08 	sub	r9,r12,8
80008118:	a1 c8       	cbr	r8,0x0
8000811a:	e2 08 00 08 	add	r8,r1,r8
8000811e:	10 39       	cp.w	r9,r8
80008120:	c0 71       	brne	8000812e <_realloc_r+0x20a>
80008122:	72 13       	ld.w	r3,r9[0x4]
80008124:	02 97       	mov	r7,r1
80008126:	e0 13 ff fc 	andl	r3,0xfffc
8000812a:	00 03       	add	r3,r0
8000812c:	c3 08       	rjmp	8000818c <_realloc_r+0x268>
8000812e:	e0 ca 00 04 	sub	r10,r0,4
80008132:	e0 4a 00 24 	cp.w	r10,36
80008136:	e0 8b 00 20 	brhi	80008176 <_realloc_r+0x252>
8000813a:	08 99       	mov	r9,r4
8000813c:	18 98       	mov	r8,r12
8000813e:	59 3a       	cp.w	r10,19
80008140:	e0 88 00 14 	brls	80008168 <_realloc_r+0x244>
80008144:	13 0b       	ld.w	r11,r9++
80008146:	10 ab       	st.w	r8++,r11
80008148:	13 0b       	ld.w	r11,r9++
8000814a:	10 ab       	st.w	r8++,r11
8000814c:	59 ba       	cp.w	r10,27
8000814e:	e0 88 00 0d 	brls	80008168 <_realloc_r+0x244>
80008152:	13 0b       	ld.w	r11,r9++
80008154:	10 ab       	st.w	r8++,r11
80008156:	13 0b       	ld.w	r11,r9++
80008158:	10 ab       	st.w	r8++,r11
8000815a:	e0 4a 00 24 	cp.w	r10,36
8000815e:	c0 51       	brne	80008168 <_realloc_r+0x244>
80008160:	13 0a       	ld.w	r10,r9++
80008162:	10 aa       	st.w	r8++,r10
80008164:	13 0a       	ld.w	r10,r9++
80008166:	10 aa       	st.w	r8++,r10
80008168:	13 0a       	ld.w	r10,r9++
8000816a:	10 aa       	st.w	r8++,r10
8000816c:	72 0a       	ld.w	r10,r9[0x0]
8000816e:	91 0a       	st.w	r8[0x0],r10
80008170:	72 19       	ld.w	r9,r9[0x4]
80008172:	91 19       	st.w	r8[0x4],r9
80008174:	c0 48       	rjmp	8000817c <_realloc_r+0x258>
80008176:	08 9b       	mov	r11,r4
80008178:	fe b0 fb cb 	rcall	8000790e <memmove>
8000817c:	08 9b       	mov	r11,r4
8000817e:	04 9c       	mov	r12,r2
80008180:	fe b0 f6 fe 	rcall	80006f7c <_free_r>
80008184:	04 9c       	mov	r12,r2
80008186:	c2 a8       	rjmp	800081da <_realloc_r+0x2b6>
80008188:	00 93       	mov	r3,r0
8000818a:	02 97       	mov	r7,r1
8000818c:	e6 06 01 09 	sub	r9,r3,r6
80008190:	6e 18       	ld.w	r8,r7[0x4]
80008192:	58 f9       	cp.w	r9,15
80008194:	e0 88 00 16 	brls	800081c0 <_realloc_r+0x29c>
80008198:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000819c:	ed e8 10 08 	or	r8,r6,r8
800081a0:	8f 18       	st.w	r7[0x4],r8
800081a2:	12 98       	mov	r8,r9
800081a4:	a1 a8       	sbr	r8,0x0
800081a6:	ee 06 00 0b 	add	r11,r7,r6
800081aa:	f6 09 00 09 	add	r9,r11,r9
800081ae:	97 18       	st.w	r11[0x4],r8
800081b0:	72 18       	ld.w	r8,r9[0x4]
800081b2:	a1 a8       	sbr	r8,0x0
800081b4:	2f 8b       	sub	r11,-8
800081b6:	93 18       	st.w	r9[0x4],r8
800081b8:	04 9c       	mov	r12,r2
800081ba:	fe b0 f6 e1 	rcall	80006f7c <_free_r>
800081be:	c0 b8       	rjmp	800081d4 <_realloc_r+0x2b0>
800081c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800081c4:	e7 e8 10 08 	or	r8,r3,r8
800081c8:	8f 18       	st.w	r7[0x4],r8
800081ca:	ee 03 00 03 	add	r3,r7,r3
800081ce:	66 18       	ld.w	r8,r3[0x4]
800081d0:	a1 a8       	sbr	r8,0x0
800081d2:	87 18       	st.w	r3[0x4],r8
800081d4:	04 9c       	mov	r12,r2
800081d6:	ee c5 ff f8 	sub	r5,r7,-8
800081da:	fe b0 fb ba 	rcall	8000794e <__malloc_unlock>
800081de:	0a 9c       	mov	r12,r5
800081e0:	2f fd       	sub	sp,-4
800081e2:	d8 32       	popm	r0-r7,pc

800081e4 <__isinfd>:
800081e4:	14 98       	mov	r8,r10
800081e6:	fc 19 7f f0 	movh	r9,0x7ff0
800081ea:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800081ee:	f0 0b 11 00 	rsub	r11,r8,0
800081f2:	f7 e8 10 08 	or	r8,r11,r8
800081f6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800081fa:	f2 08 01 08 	sub	r8,r9,r8
800081fe:	f0 0c 11 00 	rsub	r12,r8,0
80008202:	f9 e8 10 08 	or	r8,r12,r8
80008206:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000820a:	2f fc       	sub	r12,-1
8000820c:	5e fc       	retal	r12

8000820e <__isnand>:
8000820e:	14 98       	mov	r8,r10
80008210:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008214:	f0 0c 11 00 	rsub	r12,r8,0
80008218:	10 4c       	or	r12,r8
8000821a:	fc 18 7f f0 	movh	r8,0x7ff0
8000821e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008222:	f0 0c 01 0c 	sub	r12,r8,r12
80008226:	bf 9c       	lsr	r12,0x1f
80008228:	5e fc       	retal	r12
8000822a:	d7 03       	nop

8000822c <_sbrk_r>:
8000822c:	d4 21       	pushm	r4-r7,lr
8000822e:	30 08       	mov	r8,0
80008230:	18 97       	mov	r7,r12
80008232:	e0 66 07 3c 	mov	r6,1852
80008236:	16 9c       	mov	r12,r11
80008238:	8d 08       	st.w	r6[0x0],r8
8000823a:	ca fc       	rcall	80008398 <_sbrk>
8000823c:	5b fc       	cp.w	r12,-1
8000823e:	c0 51       	brne	80008248 <_sbrk_r+0x1c>
80008240:	6c 08       	ld.w	r8,r6[0x0]
80008242:	58 08       	cp.w	r8,0
80008244:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008248:	d8 22       	popm	r4-r7,pc
8000824a:	d7 03       	nop

8000824c <__sclose>:
8000824c:	d4 01       	pushm	lr
8000824e:	96 7b       	ld.sh	r11,r11[0xe]
80008250:	cf ec       	rcall	8000844c <_close_r>
80008252:	d8 02       	popm	pc

80008254 <__sseek>:
80008254:	d4 21       	pushm	r4-r7,lr
80008256:	16 97       	mov	r7,r11
80008258:	96 7b       	ld.sh	r11,r11[0xe]
8000825a:	c8 5d       	rcall	80008564 <_lseek_r>
8000825c:	8e 68       	ld.sh	r8,r7[0xc]
8000825e:	10 99       	mov	r9,r8
80008260:	ad c8       	cbr	r8,0xc
80008262:	ad a9       	sbr	r9,0xc
80008264:	5b fc       	cp.w	r12,-1
80008266:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000826a:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000826e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008272:	d8 22       	popm	r4-r7,pc

80008274 <__swrite>:
80008274:	d4 21       	pushm	r4-r7,lr
80008276:	96 68       	ld.sh	r8,r11[0xc]
80008278:	16 97       	mov	r7,r11
8000827a:	14 95       	mov	r5,r10
8000827c:	12 94       	mov	r4,r9
8000827e:	e2 18 01 00 	andl	r8,0x100,COH
80008282:	18 96       	mov	r6,r12
80008284:	c0 50       	breq	8000828e <__swrite+0x1a>
80008286:	30 29       	mov	r9,2
80008288:	30 0a       	mov	r10,0
8000828a:	96 7b       	ld.sh	r11,r11[0xe]
8000828c:	c6 cd       	rcall	80008564 <_lseek_r>
8000828e:	8e 68       	ld.sh	r8,r7[0xc]
80008290:	ad c8       	cbr	r8,0xc
80008292:	08 99       	mov	r9,r4
80008294:	0a 9a       	mov	r10,r5
80008296:	8e 7b       	ld.sh	r11,r7[0xe]
80008298:	0c 9c       	mov	r12,r6
8000829a:	ae 68       	st.h	r7[0xc],r8
8000829c:	c9 ac       	rcall	800083d0 <_write_r>
8000829e:	d8 22       	popm	r4-r7,pc

800082a0 <__sread>:
800082a0:	d4 21       	pushm	r4-r7,lr
800082a2:	16 97       	mov	r7,r11
800082a4:	96 7b       	ld.sh	r11,r11[0xe]
800082a6:	c7 1d       	rcall	80008588 <_read_r>
800082a8:	c0 65       	brlt	800082b4 <__sread+0x14>
800082aa:	6f 58       	ld.w	r8,r7[0x54]
800082ac:	18 08       	add	r8,r12
800082ae:	ef 48 00 54 	st.w	r7[84],r8
800082b2:	d8 22       	popm	r4-r7,pc
800082b4:	8e 68       	ld.sh	r8,r7[0xc]
800082b6:	ad c8       	cbr	r8,0xc
800082b8:	ae 68       	st.h	r7[0xc],r8
800082ba:	d8 22       	popm	r4-r7,pc

800082bc <strlen>:
800082bc:	30 09       	mov	r9,0
800082be:	18 98       	mov	r8,r12
800082c0:	c0 28       	rjmp	800082c4 <strlen+0x8>
800082c2:	2f f8       	sub	r8,-1
800082c4:	11 8a       	ld.ub	r10,r8[0x0]
800082c6:	f2 0a 18 00 	cp.b	r10,r9
800082ca:	cf c1       	brne	800082c2 <strlen+0x6>
800082cc:	f0 0c 01 0c 	sub	r12,r8,r12
800082d0:	5e fc       	retal	r12
800082d2:	d7 03       	nop

800082d4 <_close>:
800082d4:	30 28       	mov	r8,2
800082d6:	d6 73       	breakpoint
800082d8:	3f fc       	mov	r12,-1
800082da:	35 8b       	mov	r11,88
800082dc:	58 0c       	cp.w	r12,0
800082de:	5e 4c       	retge	r12
800082e0:	e0 6a 07 3c 	mov	r10,1852
800082e4:	95 0b       	st.w	r10[0x0],r11
800082e6:	5e fc       	retal	r12

800082e8 <_lseek>:
800082e8:	30 58       	mov	r8,5
800082ea:	d6 73       	breakpoint
800082ec:	3f fc       	mov	r12,-1
800082ee:	35 8b       	mov	r11,88
800082f0:	58 0c       	cp.w	r12,0
800082f2:	5e 4c       	retge	r12
800082f4:	e0 6a 07 3c 	mov	r10,1852
800082f8:	95 0b       	st.w	r10[0x0],r11
800082fa:	5e fc       	retal	r12

800082fc <_read>:
800082fc:	30 38       	mov	r8,3
800082fe:	d6 73       	breakpoint
80008300:	3f fc       	mov	r12,-1
80008302:	35 8b       	mov	r11,88
80008304:	58 0c       	cp.w	r12,0
80008306:	5e 4c       	retge	r12
80008308:	e0 6a 07 3c 	mov	r10,1852
8000830c:	95 0b       	st.w	r10[0x0],r11
8000830e:	5e fc       	retal	r12

80008310 <_write>:
80008310:	30 48       	mov	r8,4
80008312:	d6 73       	breakpoint
80008314:	3f fc       	mov	r12,-1
80008316:	35 8b       	mov	r11,88
80008318:	58 0c       	cp.w	r12,0
8000831a:	5e 4c       	retge	r12
8000831c:	e0 6a 07 3c 	mov	r10,1852
80008320:	95 0b       	st.w	r10[0x0],r11
80008322:	5e fc       	retal	r12

80008324 <isatty>:
80008324:	30 b8       	mov	r8,11
80008326:	d6 73       	breakpoint
80008328:	3f fc       	mov	r12,-1
8000832a:	35 8b       	mov	r11,88
8000832c:	58 0c       	cp.w	r12,0
8000832e:	5e 4c       	retge	r12
80008330:	e0 6a 07 3c 	mov	r10,1852
80008334:	95 0b       	st.w	r10[0x0],r11
80008336:	5e fc       	retal	r12

80008338 <_fstat_host>:
80008338:	30 98       	mov	r8,9
8000833a:	d6 73       	breakpoint
8000833c:	3f fc       	mov	r12,-1
8000833e:	35 8b       	mov	r11,88
80008340:	58 0c       	cp.w	r12,0
80008342:	5e 4c       	retge	r12
80008344:	e0 6a 07 3c 	mov	r10,1852
80008348:	95 0b       	st.w	r10[0x0],r11
8000834a:	5e fc       	retal	r12

8000834c <_fstat>:
8000834c:	d4 21       	pushm	r4-r7,lr
8000834e:	21 0d       	sub	sp,64
80008350:	16 97       	mov	r7,r11
80008352:	1a 9b       	mov	r11,sp
80008354:	cf 2f       	rcall	80008338 <_fstat_host>
80008356:	c0 34       	brge	8000835c <_fstat+0x10>
80008358:	3f fc       	mov	r12,-1
8000835a:	c1 c8       	rjmp	80008392 <_fstat+0x46>
8000835c:	40 08       	lddsp	r8,sp[0x0]
8000835e:	ae 08       	st.h	r7[0x0],r8
80008360:	40 18       	lddsp	r8,sp[0x4]
80008362:	ae 18       	st.h	r7[0x2],r8
80008364:	40 28       	lddsp	r8,sp[0x8]
80008366:	8f 18       	st.w	r7[0x4],r8
80008368:	40 38       	lddsp	r8,sp[0xc]
8000836a:	ae 48       	st.h	r7[0x8],r8
8000836c:	40 48       	lddsp	r8,sp[0x10]
8000836e:	ae 58       	st.h	r7[0xa],r8
80008370:	40 58       	lddsp	r8,sp[0x14]
80008372:	ae 68       	st.h	r7[0xc],r8
80008374:	40 68       	lddsp	r8,sp[0x18]
80008376:	ae 78       	st.h	r7[0xe],r8
80008378:	40 88       	lddsp	r8,sp[0x20]
8000837a:	8f 48       	st.w	r7[0x10],r8
8000837c:	40 a8       	lddsp	r8,sp[0x28]
8000837e:	8f b8       	st.w	r7[0x2c],r8
80008380:	40 c8       	lddsp	r8,sp[0x30]
80008382:	8f c8       	st.w	r7[0x30],r8
80008384:	40 d8       	lddsp	r8,sp[0x34]
80008386:	8f 58       	st.w	r7[0x14],r8
80008388:	40 e8       	lddsp	r8,sp[0x38]
8000838a:	30 0c       	mov	r12,0
8000838c:	8f 78       	st.w	r7[0x1c],r8
8000838e:	40 f8       	lddsp	r8,sp[0x3c]
80008390:	8f 98       	st.w	r7[0x24],r8
80008392:	2f 0d       	sub	sp,-64
80008394:	d8 22       	popm	r4-r7,pc
80008396:	d7 03       	nop

80008398 <_sbrk>:
80008398:	d4 01       	pushm	lr
8000839a:	e0 68 06 70 	mov	r8,1648
8000839e:	70 09       	ld.w	r9,r8[0x0]
800083a0:	58 09       	cp.w	r9,0
800083a2:	c0 41       	brne	800083aa <_sbrk+0x12>
800083a4:	e0 69 07 40 	mov	r9,1856
800083a8:	91 09       	st.w	r8[0x0],r9
800083aa:	e0 69 06 70 	mov	r9,1648
800083ae:	e0 6a 30 00 	mov	r10,12288
800083b2:	72 08       	ld.w	r8,r9[0x0]
800083b4:	f0 0c 00 0c 	add	r12,r8,r12
800083b8:	14 3c       	cp.w	r12,r10
800083ba:	e0 8b 00 04 	brhi	800083c2 <_sbrk+0x2a>
800083be:	93 0c       	st.w	r9[0x0],r12
800083c0:	c0 58       	rjmp	800083ca <_sbrk+0x32>
800083c2:	c5 5c       	rcall	8000846c <__errno>
800083c4:	30 c8       	mov	r8,12
800083c6:	99 08       	st.w	r12[0x0],r8
800083c8:	3f f8       	mov	r8,-1
800083ca:	10 9c       	mov	r12,r8
800083cc:	d8 02       	popm	pc
800083ce:	d7 03       	nop

800083d0 <_write_r>:
800083d0:	d4 21       	pushm	r4-r7,lr
800083d2:	16 98       	mov	r8,r11
800083d4:	18 97       	mov	r7,r12
800083d6:	10 9c       	mov	r12,r8
800083d8:	30 08       	mov	r8,0
800083da:	14 9b       	mov	r11,r10
800083dc:	e0 66 07 3c 	mov	r6,1852
800083e0:	12 9a       	mov	r10,r9
800083e2:	8d 08       	st.w	r6[0x0],r8
800083e4:	c9 6f       	rcall	80008310 <_write>
800083e6:	5b fc       	cp.w	r12,-1
800083e8:	c0 51       	brne	800083f2 <_write_r+0x22>
800083ea:	6c 08       	ld.w	r8,r6[0x0]
800083ec:	58 08       	cp.w	r8,0
800083ee:	ef f8 1a 03 	st.wne	r7[0xc],r8
800083f2:	d8 22       	popm	r4-r7,pc

800083f4 <_calloc_r>:
800083f4:	d4 21       	pushm	r4-r7,lr
800083f6:	f4 0b 02 4b 	mul	r11,r10,r11
800083fa:	fe b0 f8 67 	rcall	800074c8 <_malloc_r>
800083fe:	18 97       	mov	r7,r12
80008400:	c2 30       	breq	80008446 <_calloc_r+0x52>
80008402:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008406:	e0 1a ff fc 	andl	r10,0xfffc
8000840a:	20 4a       	sub	r10,4
8000840c:	e0 4a 00 24 	cp.w	r10,36
80008410:	e0 8b 00 18 	brhi	80008440 <_calloc_r+0x4c>
80008414:	18 98       	mov	r8,r12
80008416:	59 3a       	cp.w	r10,19
80008418:	e0 88 00 0f 	brls	80008436 <_calloc_r+0x42>
8000841c:	30 09       	mov	r9,0
8000841e:	10 a9       	st.w	r8++,r9
80008420:	10 a9       	st.w	r8++,r9
80008422:	59 ba       	cp.w	r10,27
80008424:	e0 88 00 09 	brls	80008436 <_calloc_r+0x42>
80008428:	10 a9       	st.w	r8++,r9
8000842a:	10 a9       	st.w	r8++,r9
8000842c:	e0 4a 00 24 	cp.w	r10,36
80008430:	c0 31       	brne	80008436 <_calloc_r+0x42>
80008432:	10 a9       	st.w	r8++,r9
80008434:	10 a9       	st.w	r8++,r9
80008436:	30 09       	mov	r9,0
80008438:	10 a9       	st.w	r8++,r9
8000843a:	91 19       	st.w	r8[0x4],r9
8000843c:	91 09       	st.w	r8[0x0],r9
8000843e:	c0 48       	rjmp	80008446 <_calloc_r+0x52>
80008440:	30 0b       	mov	r11,0
80008442:	fe b0 db fc 	rcall	80003c3a <memset>
80008446:	0e 9c       	mov	r12,r7
80008448:	d8 22       	popm	r4-r7,pc
8000844a:	d7 03       	nop

8000844c <_close_r>:
8000844c:	d4 21       	pushm	r4-r7,lr
8000844e:	30 08       	mov	r8,0
80008450:	18 97       	mov	r7,r12
80008452:	e0 66 07 3c 	mov	r6,1852
80008456:	16 9c       	mov	r12,r11
80008458:	8d 08       	st.w	r6[0x0],r8
8000845a:	c3 df       	rcall	800082d4 <_close>
8000845c:	5b fc       	cp.w	r12,-1
8000845e:	c0 51       	brne	80008468 <_close_r+0x1c>
80008460:	6c 08       	ld.w	r8,r6[0x0]
80008462:	58 08       	cp.w	r8,0
80008464:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008468:	d8 22       	popm	r4-r7,pc
8000846a:	d7 03       	nop

8000846c <__errno>:
8000846c:	e0 68 01 18 	mov	r8,280
80008470:	70 0c       	ld.w	r12,r8[0x0]
80008472:	2f 4c       	sub	r12,-12
80008474:	5e fc       	retal	r12
80008476:	d7 03       	nop

80008478 <_fclose_r>:
80008478:	d4 21       	pushm	r4-r7,lr
8000847a:	18 96       	mov	r6,r12
8000847c:	16 97       	mov	r7,r11
8000847e:	58 0b       	cp.w	r11,0
80008480:	c0 31       	brne	80008486 <_fclose_r+0xe>
80008482:	16 95       	mov	r5,r11
80008484:	c5 38       	rjmp	8000852a <_fclose_r+0xb2>
80008486:	fe b0 f4 8f 	rcall	80006da4 <__sfp_lock_acquire>
8000848a:	58 06       	cp.w	r6,0
8000848c:	c0 70       	breq	8000849a <_fclose_r+0x22>
8000848e:	6c 68       	ld.w	r8,r6[0x18]
80008490:	58 08       	cp.w	r8,0
80008492:	c0 41       	brne	8000849a <_fclose_r+0x22>
80008494:	0c 9c       	mov	r12,r6
80008496:	fe b0 f4 d9 	rcall	80006e48 <__sinit>
8000849a:	fe c8 ec 9e 	sub	r8,pc,-4962
8000849e:	10 37       	cp.w	r7,r8
800084a0:	c0 31       	brne	800084a6 <_fclose_r+0x2e>
800084a2:	6c 07       	ld.w	r7,r6[0x0]
800084a4:	c0 c8       	rjmp	800084bc <_fclose_r+0x44>
800084a6:	fe c8 ec 8a 	sub	r8,pc,-4982
800084aa:	10 37       	cp.w	r7,r8
800084ac:	c0 31       	brne	800084b2 <_fclose_r+0x3a>
800084ae:	6c 17       	ld.w	r7,r6[0x4]
800084b0:	c0 68       	rjmp	800084bc <_fclose_r+0x44>
800084b2:	fe c8 ec 76 	sub	r8,pc,-5002
800084b6:	10 37       	cp.w	r7,r8
800084b8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800084bc:	8e 69       	ld.sh	r9,r7[0xc]
800084be:	30 08       	mov	r8,0
800084c0:	f0 09 19 00 	cp.h	r9,r8
800084c4:	c0 51       	brne	800084ce <_fclose_r+0x56>
800084c6:	fe b0 f4 70 	rcall	80006da6 <__sfp_lock_release>
800084ca:	30 05       	mov	r5,0
800084cc:	c2 f8       	rjmp	8000852a <_fclose_r+0xb2>
800084ce:	0e 9b       	mov	r11,r7
800084d0:	0c 9c       	mov	r12,r6
800084d2:	fe b0 f3 e3 	rcall	80006c98 <_fflush_r>
800084d6:	6e c8       	ld.w	r8,r7[0x30]
800084d8:	18 95       	mov	r5,r12
800084da:	58 08       	cp.w	r8,0
800084dc:	c0 60       	breq	800084e8 <_fclose_r+0x70>
800084de:	6e 8b       	ld.w	r11,r7[0x20]
800084e0:	0c 9c       	mov	r12,r6
800084e2:	5d 18       	icall	r8
800084e4:	f9 b5 05 ff 	movlt	r5,-1
800084e8:	8e 68       	ld.sh	r8,r7[0xc]
800084ea:	ed b8 00 07 	bld	r8,0x7
800084ee:	c0 51       	brne	800084f8 <_fclose_r+0x80>
800084f0:	6e 4b       	ld.w	r11,r7[0x10]
800084f2:	0c 9c       	mov	r12,r6
800084f4:	fe b0 f5 44 	rcall	80006f7c <_free_r>
800084f8:	6e db       	ld.w	r11,r7[0x34]
800084fa:	58 0b       	cp.w	r11,0
800084fc:	c0 a0       	breq	80008510 <_fclose_r+0x98>
800084fe:	ee c8 ff bc 	sub	r8,r7,-68
80008502:	10 3b       	cp.w	r11,r8
80008504:	c0 40       	breq	8000850c <_fclose_r+0x94>
80008506:	0c 9c       	mov	r12,r6
80008508:	fe b0 f5 3a 	rcall	80006f7c <_free_r>
8000850c:	30 08       	mov	r8,0
8000850e:	8f d8       	st.w	r7[0x34],r8
80008510:	6f 2b       	ld.w	r11,r7[0x48]
80008512:	58 0b       	cp.w	r11,0
80008514:	c0 70       	breq	80008522 <_fclose_r+0xaa>
80008516:	0c 9c       	mov	r12,r6
80008518:	fe b0 f5 32 	rcall	80006f7c <_free_r>
8000851c:	30 08       	mov	r8,0
8000851e:	ef 48 00 48 	st.w	r7[72],r8
80008522:	30 08       	mov	r8,0
80008524:	ae 68       	st.h	r7[0xc],r8
80008526:	fe b0 f4 40 	rcall	80006da6 <__sfp_lock_release>
8000852a:	0a 9c       	mov	r12,r5
8000852c:	d8 22       	popm	r4-r7,pc
8000852e:	d7 03       	nop

80008530 <fclose>:
80008530:	d4 01       	pushm	lr
80008532:	e0 68 01 18 	mov	r8,280
80008536:	18 9b       	mov	r11,r12
80008538:	70 0c       	ld.w	r12,r8[0x0]
8000853a:	c9 ff       	rcall	80008478 <_fclose_r>
8000853c:	d8 02       	popm	pc
8000853e:	d7 03       	nop

80008540 <_fstat_r>:
80008540:	d4 21       	pushm	r4-r7,lr
80008542:	16 98       	mov	r8,r11
80008544:	18 97       	mov	r7,r12
80008546:	10 9c       	mov	r12,r8
80008548:	30 08       	mov	r8,0
8000854a:	e0 66 07 3c 	mov	r6,1852
8000854e:	14 9b       	mov	r11,r10
80008550:	8d 08       	st.w	r6[0x0],r8
80008552:	cf de       	rcall	8000834c <_fstat>
80008554:	5b fc       	cp.w	r12,-1
80008556:	c0 51       	brne	80008560 <_fstat_r+0x20>
80008558:	6c 08       	ld.w	r8,r6[0x0]
8000855a:	58 08       	cp.w	r8,0
8000855c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008560:	d8 22       	popm	r4-r7,pc
80008562:	d7 03       	nop

80008564 <_lseek_r>:
80008564:	d4 21       	pushm	r4-r7,lr
80008566:	16 98       	mov	r8,r11
80008568:	18 97       	mov	r7,r12
8000856a:	10 9c       	mov	r12,r8
8000856c:	30 08       	mov	r8,0
8000856e:	14 9b       	mov	r11,r10
80008570:	e0 66 07 3c 	mov	r6,1852
80008574:	12 9a       	mov	r10,r9
80008576:	8d 08       	st.w	r6[0x0],r8
80008578:	cb 8e       	rcall	800082e8 <_lseek>
8000857a:	5b fc       	cp.w	r12,-1
8000857c:	c0 51       	brne	80008586 <_lseek_r+0x22>
8000857e:	6c 08       	ld.w	r8,r6[0x0]
80008580:	58 08       	cp.w	r8,0
80008582:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008586:	d8 22       	popm	r4-r7,pc

80008588 <_read_r>:
80008588:	d4 21       	pushm	r4-r7,lr
8000858a:	16 98       	mov	r8,r11
8000858c:	18 97       	mov	r7,r12
8000858e:	10 9c       	mov	r12,r8
80008590:	30 08       	mov	r8,0
80008592:	14 9b       	mov	r11,r10
80008594:	e0 66 07 3c 	mov	r6,1852
80008598:	12 9a       	mov	r10,r9
8000859a:	8d 08       	st.w	r6[0x0],r8
8000859c:	cb 0e       	rcall	800082fc <_read>
8000859e:	5b fc       	cp.w	r12,-1
800085a0:	c0 51       	brne	800085aa <_read_r+0x22>
800085a2:	6c 08       	ld.w	r8,r6[0x0]
800085a4:	58 08       	cp.w	r8,0
800085a6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800085aa:	d8 22       	popm	r4-r7,pc

800085ac <__avr32_f64_sub_from_add>:
800085ac:	ee 19 80 00 	eorh	r9,0x8000

800085b0 <__avr32_f64_sub>:
800085b0:	f7 e9 20 0c 	eor	r12,r11,r9
800085b4:	e0 86 00 ca 	brmi	80008748 <__avr32_f64_add_from_sub>
800085b8:	eb cd 40 e0 	pushm	r5-r7,lr
800085bc:	16 9c       	mov	r12,r11
800085be:	e6 1c 80 00 	andh	r12,0x8000,COH
800085c2:	bf db       	cbr	r11,0x1f
800085c4:	bf d9       	cbr	r9,0x1f
800085c6:	10 3a       	cp.w	r10,r8
800085c8:	f2 0b 13 00 	cpc	r11,r9
800085cc:	c0 92       	brcc	800085de <__avr32_f64_sub+0x2e>
800085ce:	16 97       	mov	r7,r11
800085d0:	12 9b       	mov	r11,r9
800085d2:	0e 99       	mov	r9,r7
800085d4:	14 97       	mov	r7,r10
800085d6:	10 9a       	mov	r10,r8
800085d8:	0e 98       	mov	r8,r7
800085da:	ee 1c 80 00 	eorh	r12,0x8000
800085de:	f6 07 16 14 	lsr	r7,r11,0x14
800085e2:	ab 7b       	lsl	r11,0xb
800085e4:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800085e8:	ab 7a       	lsl	r10,0xb
800085ea:	bf bb       	sbr	r11,0x1f
800085ec:	f2 06 16 14 	lsr	r6,r9,0x14
800085f0:	c4 40       	breq	80008678 <__avr32_f64_sub_opL_subnormal>
800085f2:	ab 79       	lsl	r9,0xb
800085f4:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800085f8:	ab 78       	lsl	r8,0xb
800085fa:	bf b9       	sbr	r9,0x1f

800085fc <__avr32_f64_sub_opL_subnormal_done>:
800085fc:	e0 47 07 ff 	cp.w	r7,2047
80008600:	c4 f0       	breq	8000869e <__avr32_f64_sub_opH_nan_or_inf>
80008602:	0e 26       	rsub	r6,r7
80008604:	c1 20       	breq	80008628 <__avr32_f64_sub_shift_done>
80008606:	ec 05 11 20 	rsub	r5,r6,32
8000860a:	e0 46 00 20 	cp.w	r6,32
8000860e:	c7 c2       	brcc	80008706 <__avr32_f64_sub_longshift>
80008610:	f0 05 09 4e 	lsl	lr,r8,r5
80008614:	f2 05 09 45 	lsl	r5,r9,r5
80008618:	f0 06 0a 48 	lsr	r8,r8,r6
8000861c:	f2 06 0a 49 	lsr	r9,r9,r6
80008620:	0a 48       	or	r8,r5
80008622:	58 0e       	cp.w	lr,0
80008624:	5f 1e       	srne	lr
80008626:	1c 48       	or	r8,lr

80008628 <__avr32_f64_sub_shift_done>:
80008628:	10 1a       	sub	r10,r8
8000862a:	f6 09 01 4b 	sbc	r11,r11,r9
8000862e:	f6 06 12 00 	clz	r6,r11
80008632:	c0 e0       	breq	8000864e <__avr32_f64_sub_longnormalize_done>
80008634:	c7 83       	brcs	80008724 <__avr32_f64_sub_longnormalize>
80008636:	ec 0e 11 20 	rsub	lr,r6,32
8000863a:	f6 06 09 4b 	lsl	r11,r11,r6
8000863e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008642:	1c 4b       	or	r11,lr
80008644:	f4 06 09 4a 	lsl	r10,r10,r6
80008648:	0c 17       	sub	r7,r6
8000864a:	e0 8a 00 39 	brle	800086bc <__avr32_f64_sub_subnormal_result>

8000864e <__avr32_f64_sub_longnormalize_done>:
8000864e:	f4 09 15 15 	lsl	r9,r10,0x15
80008652:	ab 9a       	lsr	r10,0xb
80008654:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008658:	ab 9b       	lsr	r11,0xb
8000865a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000865e:	18 4b       	or	r11,r12

80008660 <__avr32_f64_sub_round>:
80008660:	fc 17 80 00 	movh	r7,0x8000
80008664:	ed ba 00 00 	bld	r10,0x0
80008668:	f7 b7 01 ff 	subne	r7,-1
8000866c:	0e 39       	cp.w	r9,r7
8000866e:	5f 29       	srhs	r9
80008670:	12 0a       	add	r10,r9
80008672:	5c 0b       	acr	r11
80008674:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008678 <__avr32_f64_sub_opL_subnormal>:
80008678:	ab 79       	lsl	r9,0xb
8000867a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000867e:	ab 78       	lsl	r8,0xb
80008680:	f3 e8 10 0e 	or	lr,r9,r8
80008684:	f9 b6 01 01 	movne	r6,1
80008688:	ee 0e 11 00 	rsub	lr,r7,0
8000868c:	f9 b7 00 01 	moveq	r7,1
80008690:	ef bb 00 1f 	bst	r11,0x1f
80008694:	f7 ea 10 0e 	or	lr,r11,r10
80008698:	f9 b7 00 00 	moveq	r7,0
8000869c:	cb 0b       	rjmp	800085fc <__avr32_f64_sub_opL_subnormal_done>

8000869e <__avr32_f64_sub_opH_nan_or_inf>:
8000869e:	bf db       	cbr	r11,0x1f
800086a0:	f7 ea 10 0e 	or	lr,r11,r10
800086a4:	c0 81       	brne	800086b4 <__avr32_f64_sub_return_nan>
800086a6:	e0 46 07 ff 	cp.w	r6,2047
800086aa:	c0 50       	breq	800086b4 <__avr32_f64_sub_return_nan>
800086ac:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800086b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800086b4 <__avr32_f64_sub_return_nan>:
800086b4:	3f fa       	mov	r10,-1
800086b6:	3f fb       	mov	r11,-1
800086b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800086bc <__avr32_f64_sub_subnormal_result>:
800086bc:	5c 37       	neg	r7
800086be:	2f f7       	sub	r7,-1
800086c0:	f1 b7 04 c0 	satu	r7,0x6
800086c4:	e0 47 00 20 	cp.w	r7,32
800086c8:	c1 14       	brge	800086ea <__avr32_f64_sub_subnormal_result+0x2e>
800086ca:	ee 08 11 20 	rsub	r8,r7,32
800086ce:	f4 08 09 49 	lsl	r9,r10,r8
800086d2:	5f 16       	srne	r6
800086d4:	f4 07 0a 4a 	lsr	r10,r10,r7
800086d8:	0c 4a       	or	r10,r6
800086da:	f6 08 09 49 	lsl	r9,r11,r8
800086de:	f5 e9 10 0a 	or	r10,r10,r9
800086e2:	f4 07 0a 4b 	lsr	r11,r10,r7
800086e6:	30 07       	mov	r7,0
800086e8:	cb 3b       	rjmp	8000864e <__avr32_f64_sub_longnormalize_done>
800086ea:	ee 08 11 40 	rsub	r8,r7,64
800086ee:	f6 08 09 49 	lsl	r9,r11,r8
800086f2:	14 49       	or	r9,r10
800086f4:	5f 16       	srne	r6
800086f6:	f6 07 0a 4a 	lsr	r10,r11,r7
800086fa:	0c 4a       	or	r10,r6
800086fc:	30 0b       	mov	r11,0
800086fe:	30 07       	mov	r7,0
80008700:	ca 7b       	rjmp	8000864e <__avr32_f64_sub_longnormalize_done>
80008702:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008706 <__avr32_f64_sub_longshift>:
80008706:	f1 b6 04 c0 	satu	r6,0x6
8000870a:	f0 0e 17 00 	moveq	lr,r8
8000870e:	c0 40       	breq	80008716 <__avr32_f64_sub_longshift+0x10>
80008710:	f2 05 09 4e 	lsl	lr,r9,r5
80008714:	10 4e       	or	lr,r8
80008716:	f2 06 0a 48 	lsr	r8,r9,r6
8000871a:	30 09       	mov	r9,0
8000871c:	58 0e       	cp.w	lr,0
8000871e:	5f 1e       	srne	lr
80008720:	1c 48       	or	r8,lr
80008722:	c8 3b       	rjmp	80008628 <__avr32_f64_sub_shift_done>

80008724 <__avr32_f64_sub_longnormalize>:
80008724:	f4 06 12 00 	clz	r6,r10
80008728:	f9 b7 03 00 	movlo	r7,0
8000872c:	f9 b6 03 00 	movlo	r6,0
80008730:	f9 bc 03 00 	movlo	r12,0
80008734:	f7 b6 02 e0 	subhs	r6,-32
80008738:	f4 06 09 4b 	lsl	r11,r10,r6
8000873c:	30 0a       	mov	r10,0
8000873e:	0c 17       	sub	r7,r6
80008740:	fe 9a ff be 	brle	800086bc <__avr32_f64_sub_subnormal_result>
80008744:	c8 5b       	rjmp	8000864e <__avr32_f64_sub_longnormalize_done>
80008746:	d7 03       	nop

80008748 <__avr32_f64_add_from_sub>:
80008748:	ee 19 80 00 	eorh	r9,0x8000

8000874c <__avr32_f64_add>:
8000874c:	f7 e9 20 0c 	eor	r12,r11,r9
80008750:	fe 96 ff 2e 	brmi	800085ac <__avr32_f64_sub_from_add>
80008754:	eb cd 40 e0 	pushm	r5-r7,lr
80008758:	16 9c       	mov	r12,r11
8000875a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000875e:	bf db       	cbr	r11,0x1f
80008760:	bf d9       	cbr	r9,0x1f
80008762:	12 3b       	cp.w	r11,r9
80008764:	c0 72       	brcc	80008772 <__avr32_f64_add+0x26>
80008766:	16 97       	mov	r7,r11
80008768:	12 9b       	mov	r11,r9
8000876a:	0e 99       	mov	r9,r7
8000876c:	14 97       	mov	r7,r10
8000876e:	10 9a       	mov	r10,r8
80008770:	0e 98       	mov	r8,r7
80008772:	30 0e       	mov	lr,0
80008774:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008778:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000877c:	b5 ab       	sbr	r11,0x14
8000877e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008782:	c6 20       	breq	80008846 <__avr32_f64_add_op2_subnormal>
80008784:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008788:	b5 a9       	sbr	r9,0x14
8000878a:	e0 47 07 ff 	cp.w	r7,2047
8000878e:	c2 80       	breq	800087de <__avr32_f64_add_opH_nan_or_inf>
80008790:	0e 26       	rsub	r6,r7
80008792:	c1 20       	breq	800087b6 <__avr32_f64_add_shift_done>
80008794:	e0 46 00 36 	cp.w	r6,54
80008798:	c1 52       	brcc	800087c2 <__avr32_f64_add_res_of_done>
8000879a:	ec 05 11 20 	rsub	r5,r6,32
8000879e:	e0 46 00 20 	cp.w	r6,32
800087a2:	c3 52       	brcc	8000880c <__avr32_f64_add_longshift>
800087a4:	f0 05 09 4e 	lsl	lr,r8,r5
800087a8:	f2 05 09 45 	lsl	r5,r9,r5
800087ac:	f0 06 0a 48 	lsr	r8,r8,r6
800087b0:	f2 06 0a 49 	lsr	r9,r9,r6
800087b4:	0a 48       	or	r8,r5

800087b6 <__avr32_f64_add_shift_done>:
800087b6:	10 0a       	add	r10,r8
800087b8:	f6 09 00 4b 	adc	r11,r11,r9
800087bc:	ed bb 00 15 	bld	r11,0x15
800087c0:	c3 40       	breq	80008828 <__avr32_f64_add_res_of>

800087c2 <__avr32_f64_add_res_of_done>:
800087c2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800087c6:	18 4b       	or	r11,r12

800087c8 <__avr32_f64_add_round>:
800087c8:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800087cc:	18 4e       	or	lr,r12
800087ce:	ee 1e 80 00 	eorh	lr,0x8000
800087d2:	f1 be 04 20 	satu	lr,0x1
800087d6:	1c 0a       	add	r10,lr
800087d8:	5c 0b       	acr	r11
800087da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800087de <__avr32_f64_add_opH_nan_or_inf>:
800087de:	b5 cb       	cbr	r11,0x14
800087e0:	f7 ea 10 0e 	or	lr,r11,r10
800087e4:	c1 01       	brne	80008804 <__avr32_f64_add_return_nan>
800087e6:	e0 46 07 ff 	cp.w	r6,2047
800087ea:	c0 30       	breq	800087f0 <__avr32_f64_add_opL_nan_or_inf>
800087ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800087f0 <__avr32_f64_add_opL_nan_or_inf>:
800087f0:	b5 c9       	cbr	r9,0x14
800087f2:	f3 e8 10 0e 	or	lr,r9,r8
800087f6:	c0 71       	brne	80008804 <__avr32_f64_add_return_nan>
800087f8:	30 0a       	mov	r10,0
800087fa:	fc 1b 7f f0 	movh	r11,0x7ff0
800087fe:	18 4b       	or	r11,r12
80008800:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008804 <__avr32_f64_add_return_nan>:
80008804:	3f fa       	mov	r10,-1
80008806:	3f fb       	mov	r11,-1
80008808:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000880c <__avr32_f64_add_longshift>:
8000880c:	f1 b6 04 c0 	satu	r6,0x6
80008810:	f0 0e 17 00 	moveq	lr,r8
80008814:	c0 60       	breq	80008820 <__avr32_f64_add_longshift+0x14>
80008816:	f2 05 09 4e 	lsl	lr,r9,r5
8000881a:	58 08       	cp.w	r8,0
8000881c:	5f 18       	srne	r8
8000881e:	10 4e       	or	lr,r8
80008820:	f2 06 0a 48 	lsr	r8,r9,r6
80008824:	30 09       	mov	r9,0
80008826:	cc 8b       	rjmp	800087b6 <__avr32_f64_add_shift_done>

80008828 <__avr32_f64_add_res_of>:
80008828:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000882c:	a1 9b       	lsr	r11,0x1
8000882e:	5d 0a       	ror	r10
80008830:	5d 0e       	ror	lr
80008832:	2f f7       	sub	r7,-1
80008834:	e0 47 07 ff 	cp.w	r7,2047
80008838:	f9 ba 00 00 	moveq	r10,0
8000883c:	f9 bb 00 00 	moveq	r11,0
80008840:	f9 be 00 00 	moveq	lr,0
80008844:	cb fb       	rjmp	800087c2 <__avr32_f64_add_res_of_done>

80008846 <__avr32_f64_add_op2_subnormal>:
80008846:	30 16       	mov	r6,1
80008848:	58 07       	cp.w	r7,0
8000884a:	ca 01       	brne	8000878a <__avr32_f64_add+0x3e>
8000884c:	b5 cb       	cbr	r11,0x14
8000884e:	10 0a       	add	r10,r8
80008850:	f6 09 00 4b 	adc	r11,r11,r9
80008854:	18 4b       	or	r11,r12
80008856:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000885a:	d7 03       	nop

8000885c <__avr32_f64_to_u32>:
8000885c:	58 0b       	cp.w	r11,0
8000885e:	5e 6d       	retmi	0

80008860 <__avr32_f64_to_s32>:
80008860:	f6 0c 15 01 	lsl	r12,r11,0x1
80008864:	b5 9c       	lsr	r12,0x15
80008866:	e0 2c 03 ff 	sub	r12,1023
8000886a:	5e 3d       	retlo	0
8000886c:	f8 0c 11 1f 	rsub	r12,r12,31
80008870:	16 99       	mov	r9,r11
80008872:	ab 7b       	lsl	r11,0xb
80008874:	bf bb       	sbr	r11,0x1f
80008876:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000887a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000887e:	a1 79       	lsl	r9,0x1
80008880:	5e 2b       	reths	r11
80008882:	5c 3b       	neg	r11
80008884:	5e fb       	retal	r11

80008886 <__avr32_f64_cmp_eq>:
80008886:	10 3a       	cp.w	r10,r8
80008888:	f2 0b 13 00 	cpc	r11,r9
8000888c:	c0 80       	breq	8000889c <__avr32_f64_cmp_eq+0x16>
8000888e:	a1 7b       	lsl	r11,0x1
80008890:	a1 79       	lsl	r9,0x1
80008892:	14 4b       	or	r11,r10
80008894:	12 4b       	or	r11,r9
80008896:	10 4b       	or	r11,r8
80008898:	5e 0f       	reteq	1
8000889a:	5e fd       	retal	0
8000889c:	a1 7b       	lsl	r11,0x1
8000889e:	fc 1c ff e0 	movh	r12,0xffe0
800088a2:	58 0a       	cp.w	r10,0
800088a4:	f8 0b 13 00 	cpc	r11,r12
800088a8:	5e 8f       	retls	1
800088aa:	5e fd       	retal	0

800088ac <__avr32_f64_cmp_ge>:
800088ac:	1a de       	st.w	--sp,lr
800088ae:	1a d7       	st.w	--sp,r7
800088b0:	a1 7b       	lsl	r11,0x1
800088b2:	5f 3c       	srlo	r12
800088b4:	a1 79       	lsl	r9,0x1
800088b6:	5f 37       	srlo	r7
800088b8:	5c fc       	rol	r12
800088ba:	fc 1e ff e0 	movh	lr,0xffe0
800088be:	58 0a       	cp.w	r10,0
800088c0:	fc 0b 13 00 	cpc	r11,lr
800088c4:	e0 8b 00 1d 	brhi	800088fe <__avr32_f64_cmp_ge+0x52>
800088c8:	58 08       	cp.w	r8,0
800088ca:	fc 09 13 00 	cpc	r9,lr
800088ce:	e0 8b 00 18 	brhi	800088fe <__avr32_f64_cmp_ge+0x52>
800088d2:	58 0b       	cp.w	r11,0
800088d4:	f5 ba 00 00 	subfeq	r10,0
800088d8:	c1 50       	breq	80008902 <__avr32_f64_cmp_ge+0x56>
800088da:	1b 07       	ld.w	r7,sp++
800088dc:	1b 0e       	ld.w	lr,sp++
800088de:	58 3c       	cp.w	r12,3
800088e0:	c0 a0       	breq	800088f4 <__avr32_f64_cmp_ge+0x48>
800088e2:	58 1c       	cp.w	r12,1
800088e4:	c0 33       	brcs	800088ea <__avr32_f64_cmp_ge+0x3e>
800088e6:	5e 0f       	reteq	1
800088e8:	5e 1d       	retne	0
800088ea:	10 3a       	cp.w	r10,r8
800088ec:	f2 0b 13 00 	cpc	r11,r9
800088f0:	5e 2f       	reths	1
800088f2:	5e 3d       	retlo	0
800088f4:	14 38       	cp.w	r8,r10
800088f6:	f6 09 13 00 	cpc	r9,r11
800088fa:	5e 2f       	reths	1
800088fc:	5e 3d       	retlo	0
800088fe:	1b 07       	ld.w	r7,sp++
80008900:	d8 0a       	popm	pc,r12=0
80008902:	58 17       	cp.w	r7,1
80008904:	5f 0c       	sreq	r12
80008906:	58 09       	cp.w	r9,0
80008908:	f5 b8 00 00 	subfeq	r8,0
8000890c:	1b 07       	ld.w	r7,sp++
8000890e:	1b 0e       	ld.w	lr,sp++
80008910:	5e 0f       	reteq	1
80008912:	5e fc       	retal	r12

80008914 <__avr32_f64_cmp_lt>:
80008914:	1a de       	st.w	--sp,lr
80008916:	1a d7       	st.w	--sp,r7
80008918:	a1 7b       	lsl	r11,0x1
8000891a:	5f 3c       	srlo	r12
8000891c:	a1 79       	lsl	r9,0x1
8000891e:	5f 37       	srlo	r7
80008920:	5c fc       	rol	r12
80008922:	fc 1e ff e0 	movh	lr,0xffe0
80008926:	58 0a       	cp.w	r10,0
80008928:	fc 0b 13 00 	cpc	r11,lr
8000892c:	e0 8b 00 1d 	brhi	80008966 <__avr32_f64_cmp_lt+0x52>
80008930:	58 08       	cp.w	r8,0
80008932:	fc 09 13 00 	cpc	r9,lr
80008936:	e0 8b 00 18 	brhi	80008966 <__avr32_f64_cmp_lt+0x52>
8000893a:	58 0b       	cp.w	r11,0
8000893c:	f5 ba 00 00 	subfeq	r10,0
80008940:	c1 50       	breq	8000896a <__avr32_f64_cmp_lt+0x56>
80008942:	1b 07       	ld.w	r7,sp++
80008944:	1b 0e       	ld.w	lr,sp++
80008946:	58 3c       	cp.w	r12,3
80008948:	c0 a0       	breq	8000895c <__avr32_f64_cmp_lt+0x48>
8000894a:	58 1c       	cp.w	r12,1
8000894c:	c0 33       	brcs	80008952 <__avr32_f64_cmp_lt+0x3e>
8000894e:	5e 0d       	reteq	0
80008950:	5e 1f       	retne	1
80008952:	10 3a       	cp.w	r10,r8
80008954:	f2 0b 13 00 	cpc	r11,r9
80008958:	5e 2d       	reths	0
8000895a:	5e 3f       	retlo	1
8000895c:	14 38       	cp.w	r8,r10
8000895e:	f6 09 13 00 	cpc	r9,r11
80008962:	5e 2d       	reths	0
80008964:	5e 3f       	retlo	1
80008966:	1b 07       	ld.w	r7,sp++
80008968:	d8 0a       	popm	pc,r12=0
8000896a:	58 17       	cp.w	r7,1
8000896c:	5f 1c       	srne	r12
8000896e:	58 09       	cp.w	r9,0
80008970:	f5 b8 00 00 	subfeq	r8,0
80008974:	1b 07       	ld.w	r7,sp++
80008976:	1b 0e       	ld.w	lr,sp++
80008978:	5e 0d       	reteq	0
8000897a:	5e fc       	retal	r12

8000897c <__avr32_f64_div>:
8000897c:	eb cd 40 ff 	pushm	r0-r7,lr
80008980:	f7 e9 20 0e 	eor	lr,r11,r9
80008984:	f6 07 16 14 	lsr	r7,r11,0x14
80008988:	a9 7b       	lsl	r11,0x9
8000898a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000898e:	a9 7a       	lsl	r10,0x9
80008990:	bd bb       	sbr	r11,0x1d
80008992:	e4 1b 3f ff 	andh	r11,0x3fff
80008996:	ab d7       	cbr	r7,0xb
80008998:	e0 80 00 cc 	breq	80008b30 <__avr32_f64_div_round_subnormal+0x54>
8000899c:	e0 47 07 ff 	cp.w	r7,2047
800089a0:	e0 84 00 b5 	brge	80008b0a <__avr32_f64_div_round_subnormal+0x2e>
800089a4:	f2 06 16 14 	lsr	r6,r9,0x14
800089a8:	a9 79       	lsl	r9,0x9
800089aa:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800089ae:	a9 78       	lsl	r8,0x9
800089b0:	bd b9       	sbr	r9,0x1d
800089b2:	e4 19 3f ff 	andh	r9,0x3fff
800089b6:	ab d6       	cbr	r6,0xb
800089b8:	e0 80 00 e2 	breq	80008b7c <__avr32_f64_div_round_subnormal+0xa0>
800089bc:	e0 46 07 ff 	cp.w	r6,2047
800089c0:	e0 84 00 b2 	brge	80008b24 <__avr32_f64_div_round_subnormal+0x48>
800089c4:	0c 17       	sub	r7,r6
800089c6:	fe 37 fc 01 	sub	r7,-1023
800089ca:	fc 1c 80 00 	movh	r12,0x8000
800089ce:	f8 03 16 01 	lsr	r3,r12,0x1
800089d2:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800089d6:	5c d4       	com	r4
800089d8:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800089dc:	e6 09 06 44 	mulu.d	r4,r3,r9
800089e0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800089e4:	e6 05 06 44 	mulu.d	r4,r3,r5
800089e8:	ea 03 15 02 	lsl	r3,r5,0x2
800089ec:	e6 09 06 44 	mulu.d	r4,r3,r9
800089f0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800089f4:	e6 05 06 44 	mulu.d	r4,r3,r5
800089f8:	ea 03 15 02 	lsl	r3,r5,0x2
800089fc:	e6 09 06 44 	mulu.d	r4,r3,r9
80008a00:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008a04:	e6 05 06 44 	mulu.d	r4,r3,r5
80008a08:	ea 03 15 02 	lsl	r3,r5,0x2
80008a0c:	e6 08 06 40 	mulu.d	r0,r3,r8
80008a10:	e4 09 07 40 	macu.d	r0,r2,r9
80008a14:	e6 09 06 44 	mulu.d	r4,r3,r9
80008a18:	02 04       	add	r4,r1
80008a1a:	5c 05       	acr	r5
80008a1c:	a3 65       	lsl	r5,0x2
80008a1e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008a22:	a3 64       	lsl	r4,0x2
80008a24:	5c 34       	neg	r4
80008a26:	f8 05 01 45 	sbc	r5,r12,r5
80008a2a:	e6 04 06 40 	mulu.d	r0,r3,r4
80008a2e:	e4 05 07 40 	macu.d	r0,r2,r5
80008a32:	e6 05 06 44 	mulu.d	r4,r3,r5
80008a36:	02 04       	add	r4,r1
80008a38:	5c 05       	acr	r5
80008a3a:	ea 03 15 02 	lsl	r3,r5,0x2
80008a3e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008a42:	e8 02 15 02 	lsl	r2,r4,0x2
80008a46:	e6 08 06 40 	mulu.d	r0,r3,r8
80008a4a:	e4 09 07 40 	macu.d	r0,r2,r9
80008a4e:	e6 09 06 44 	mulu.d	r4,r3,r9
80008a52:	02 04       	add	r4,r1
80008a54:	5c 05       	acr	r5
80008a56:	a3 65       	lsl	r5,0x2
80008a58:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008a5c:	a3 64       	lsl	r4,0x2
80008a5e:	5c 34       	neg	r4
80008a60:	f8 05 01 45 	sbc	r5,r12,r5
80008a64:	e6 04 06 40 	mulu.d	r0,r3,r4
80008a68:	e4 05 07 40 	macu.d	r0,r2,r5
80008a6c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008a70:	02 04       	add	r4,r1
80008a72:	5c 05       	acr	r5
80008a74:	ea 03 15 02 	lsl	r3,r5,0x2
80008a78:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008a7c:	e8 02 15 02 	lsl	r2,r4,0x2
80008a80:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008a84:	e4 0b 07 40 	macu.d	r0,r2,r11
80008a88:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008a8c:	02 02       	add	r2,r1
80008a8e:	5c 03       	acr	r3
80008a90:	ed b3 00 1c 	bld	r3,0x1c
80008a94:	c0 90       	breq	80008aa6 <__avr32_f64_div+0x12a>
80008a96:	a1 72       	lsl	r2,0x1
80008a98:	5c f3       	rol	r3
80008a9a:	20 17       	sub	r7,1
80008a9c:	a3 9a       	lsr	r10,0x3
80008a9e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008aa2:	a3 9b       	lsr	r11,0x3
80008aa4:	c0 58       	rjmp	80008aae <__avr32_f64_div+0x132>
80008aa6:	a5 8a       	lsr	r10,0x4
80008aa8:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008aac:	a5 8b       	lsr	r11,0x4
80008aae:	58 07       	cp.w	r7,0
80008ab0:	e0 8a 00 8b 	brle	80008bc6 <__avr32_f64_div_res_subnormal>
80008ab4:	e0 12 ff 00 	andl	r2,0xff00
80008ab8:	e8 12 00 80 	orl	r2,0x80
80008abc:	e6 08 06 40 	mulu.d	r0,r3,r8
80008ac0:	e4 09 07 40 	macu.d	r0,r2,r9
80008ac4:	e4 08 06 44 	mulu.d	r4,r2,r8
80008ac8:	e6 09 06 48 	mulu.d	r8,r3,r9
80008acc:	00 05       	add	r5,r0
80008ace:	f0 01 00 48 	adc	r8,r8,r1
80008ad2:	5c 09       	acr	r9
80008ad4:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008ad8:	58 04       	cp.w	r4,0
80008ada:	5c 25       	cpc	r5

80008adc <__avr32_f64_div_round_subnormal>:
80008adc:	f4 08 13 00 	cpc	r8,r10
80008ae0:	f6 09 13 00 	cpc	r9,r11
80008ae4:	5f 36       	srlo	r6
80008ae6:	f8 06 17 00 	moveq	r6,r12
80008aea:	e4 0a 16 08 	lsr	r10,r2,0x8
80008aee:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008af2:	e6 0b 16 08 	lsr	r11,r3,0x8
80008af6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008afa:	ed be 00 1f 	bld	lr,0x1f
80008afe:	ef bb 00 1f 	bst	r11,0x1f
80008b02:	0c 0a       	add	r10,r6
80008b04:	5c 0b       	acr	r11
80008b06:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b0a:	e4 1b 00 0f 	andh	r11,0xf
80008b0e:	14 4b       	or	r11,r10
80008b10:	e0 81 00 a7 	brne	80008c5e <__avr32_f64_div_res_subnormal+0x98>
80008b14:	f2 06 16 14 	lsr	r6,r9,0x14
80008b18:	ab d6       	cbr	r6,0xb
80008b1a:	e0 46 07 ff 	cp.w	r6,2047
80008b1e:	e0 81 00 a4 	brne	80008c66 <__avr32_f64_div_res_subnormal+0xa0>
80008b22:	c9 e8       	rjmp	80008c5e <__avr32_f64_div_res_subnormal+0x98>
80008b24:	e4 19 00 0f 	andh	r9,0xf
80008b28:	10 49       	or	r9,r8
80008b2a:	e0 81 00 9a 	brne	80008c5e <__avr32_f64_div_res_subnormal+0x98>
80008b2e:	c9 28       	rjmp	80008c52 <__avr32_f64_div_res_subnormal+0x8c>
80008b30:	a3 7b       	lsl	r11,0x3
80008b32:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008b36:	a3 7a       	lsl	r10,0x3
80008b38:	f5 eb 10 04 	or	r4,r10,r11
80008b3c:	e0 80 00 a0 	breq	80008c7c <__avr32_f64_div_op1_zero>
80008b40:	f6 04 12 00 	clz	r4,r11
80008b44:	c1 70       	breq	80008b72 <__avr32_f64_div_round_subnormal+0x96>
80008b46:	c0 c3       	brcs	80008b5e <__avr32_f64_div_round_subnormal+0x82>
80008b48:	e8 05 11 20 	rsub	r5,r4,32
80008b4c:	f6 04 09 4b 	lsl	r11,r11,r4
80008b50:	f4 05 0a 45 	lsr	r5,r10,r5
80008b54:	0a 4b       	or	r11,r5
80008b56:	f4 04 09 4a 	lsl	r10,r10,r4
80008b5a:	08 17       	sub	r7,r4
80008b5c:	c0 b8       	rjmp	80008b72 <__avr32_f64_div_round_subnormal+0x96>
80008b5e:	f4 04 12 00 	clz	r4,r10
80008b62:	f9 b4 03 00 	movlo	r4,0
80008b66:	f7 b4 02 e0 	subhs	r4,-32
80008b6a:	f4 04 09 4b 	lsl	r11,r10,r4
80008b6e:	30 0a       	mov	r10,0
80008b70:	08 17       	sub	r7,r4
80008b72:	a3 8a       	lsr	r10,0x2
80008b74:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008b78:	a3 8b       	lsr	r11,0x2
80008b7a:	c1 1b       	rjmp	8000899c <__avr32_f64_div+0x20>
80008b7c:	a3 79       	lsl	r9,0x3
80008b7e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008b82:	a3 78       	lsl	r8,0x3
80008b84:	f3 e8 10 04 	or	r4,r9,r8
80008b88:	c6 f0       	breq	80008c66 <__avr32_f64_div_res_subnormal+0xa0>
80008b8a:	f2 04 12 00 	clz	r4,r9
80008b8e:	c1 70       	breq	80008bbc <__avr32_f64_div_round_subnormal+0xe0>
80008b90:	c0 c3       	brcs	80008ba8 <__avr32_f64_div_round_subnormal+0xcc>
80008b92:	e8 05 11 20 	rsub	r5,r4,32
80008b96:	f2 04 09 49 	lsl	r9,r9,r4
80008b9a:	f0 05 0a 45 	lsr	r5,r8,r5
80008b9e:	0a 49       	or	r9,r5
80008ba0:	f0 04 09 48 	lsl	r8,r8,r4
80008ba4:	08 16       	sub	r6,r4
80008ba6:	c0 b8       	rjmp	80008bbc <__avr32_f64_div_round_subnormal+0xe0>
80008ba8:	f0 04 12 00 	clz	r4,r8
80008bac:	f9 b4 03 00 	movlo	r4,0
80008bb0:	f7 b4 02 e0 	subhs	r4,-32
80008bb4:	f0 04 09 49 	lsl	r9,r8,r4
80008bb8:	30 08       	mov	r8,0
80008bba:	08 16       	sub	r6,r4
80008bbc:	a3 88       	lsr	r8,0x2
80008bbe:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008bc2:	a3 89       	lsr	r9,0x2
80008bc4:	cf ca       	rjmp	800089bc <__avr32_f64_div+0x40>

80008bc6 <__avr32_f64_div_res_subnormal>:
80008bc6:	5c 37       	neg	r7
80008bc8:	2f f7       	sub	r7,-1
80008bca:	f1 b7 04 c0 	satu	r7,0x6
80008bce:	e0 47 00 20 	cp.w	r7,32
80008bd2:	c1 54       	brge	80008bfc <__avr32_f64_div_res_subnormal+0x36>
80008bd4:	ee 06 11 20 	rsub	r6,r7,32
80008bd8:	e4 07 0a 42 	lsr	r2,r2,r7
80008bdc:	e6 06 09 4c 	lsl	r12,r3,r6
80008be0:	18 42       	or	r2,r12
80008be2:	e6 07 0a 43 	lsr	r3,r3,r7
80008be6:	f4 06 09 41 	lsl	r1,r10,r6
80008bea:	f4 07 0a 4a 	lsr	r10,r10,r7
80008bee:	f6 06 09 4c 	lsl	r12,r11,r6
80008bf2:	18 4a       	or	r10,r12
80008bf4:	f6 07 0a 4b 	lsr	r11,r11,r7
80008bf8:	30 00       	mov	r0,0
80008bfa:	c1 58       	rjmp	80008c24 <__avr32_f64_div_res_subnormal+0x5e>
80008bfc:	ee 06 11 20 	rsub	r6,r7,32
80008c00:	f9 b0 00 00 	moveq	r0,0
80008c04:	f9 bc 00 00 	moveq	r12,0
80008c08:	c0 50       	breq	80008c12 <__avr32_f64_div_res_subnormal+0x4c>
80008c0a:	f4 06 09 40 	lsl	r0,r10,r6
80008c0e:	f6 06 09 4c 	lsl	r12,r11,r6
80008c12:	e6 07 0a 42 	lsr	r2,r3,r7
80008c16:	30 03       	mov	r3,0
80008c18:	f4 07 0a 41 	lsr	r1,r10,r7
80008c1c:	18 41       	or	r1,r12
80008c1e:	f6 07 0a 4a 	lsr	r10,r11,r7
80008c22:	30 0b       	mov	r11,0
80008c24:	e0 12 ff 00 	andl	r2,0xff00
80008c28:	e8 12 00 80 	orl	r2,0x80
80008c2c:	e6 08 06 46 	mulu.d	r6,r3,r8
80008c30:	e4 09 07 46 	macu.d	r6,r2,r9
80008c34:	e4 08 06 44 	mulu.d	r4,r2,r8
80008c38:	e6 09 06 48 	mulu.d	r8,r3,r9
80008c3c:	0c 05       	add	r5,r6
80008c3e:	f0 07 00 48 	adc	r8,r8,r7
80008c42:	5c 09       	acr	r9
80008c44:	30 07       	mov	r7,0
80008c46:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008c4a:	00 34       	cp.w	r4,r0
80008c4c:	e2 05 13 00 	cpc	r5,r1
80008c50:	c4 6b       	rjmp	80008adc <__avr32_f64_div_round_subnormal>
80008c52:	1c 9b       	mov	r11,lr
80008c54:	e6 1b 80 00 	andh	r11,0x8000,COH
80008c58:	30 0a       	mov	r10,0
80008c5a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008c5e:	3f fb       	mov	r11,-1
80008c60:	30 0a       	mov	r10,0
80008c62:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008c66:	f5 eb 10 04 	or	r4,r10,r11
80008c6a:	c0 90       	breq	80008c7c <__avr32_f64_div_op1_zero>
80008c6c:	1c 9b       	mov	r11,lr
80008c6e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008c72:	ea 1b 7f f0 	orh	r11,0x7ff0
80008c76:	30 0a       	mov	r10,0
80008c78:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008c7c <__avr32_f64_div_op1_zero>:
80008c7c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008c80:	ce f0       	breq	80008c5e <__avr32_f64_div_res_subnormal+0x98>
80008c82:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008c86:	e0 44 07 ff 	cp.w	r4,2047
80008c8a:	ce 41       	brne	80008c52 <__avr32_f64_div_res_subnormal+0x8c>
80008c8c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008c90:	ce 10       	breq	80008c52 <__avr32_f64_div_res_subnormal+0x8c>
80008c92:	ce 6b       	rjmp	80008c5e <__avr32_f64_div_res_subnormal+0x98>

80008c94 <__avr32_umod64>:
80008c94:	d4 31       	pushm	r0-r7,lr
80008c96:	1a 97       	mov	r7,sp
80008c98:	20 3d       	sub	sp,12
80008c9a:	10 9c       	mov	r12,r8
80008c9c:	12 95       	mov	r5,r9
80008c9e:	14 9e       	mov	lr,r10
80008ca0:	16 91       	mov	r1,r11
80008ca2:	16 96       	mov	r6,r11
80008ca4:	58 09       	cp.w	r9,0
80008ca6:	e0 81 00 81 	brne	80008da8 <__avr32_umod64+0x114>
80008caa:	16 38       	cp.w	r8,r11
80008cac:	e0 88 00 12 	brls	80008cd0 <__avr32_umod64+0x3c>
80008cb0:	f0 08 12 00 	clz	r8,r8
80008cb4:	c4 e0       	breq	80008d50 <__avr32_umod64+0xbc>
80008cb6:	f6 08 09 46 	lsl	r6,r11,r8
80008cba:	f8 08 09 4c 	lsl	r12,r12,r8
80008cbe:	f0 0b 11 20 	rsub	r11,r8,32
80008cc2:	f4 08 09 4e 	lsl	lr,r10,r8
80008cc6:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008cca:	f7 e6 10 06 	or	r6,r11,r6
80008cce:	c4 18       	rjmp	80008d50 <__avr32_umod64+0xbc>
80008cd0:	58 08       	cp.w	r8,0
80008cd2:	c0 51       	brne	80008cdc <__avr32_umod64+0x48>
80008cd4:	30 19       	mov	r9,1
80008cd6:	f2 08 0d 08 	divu	r8,r9,r8
80008cda:	10 9c       	mov	r12,r8
80008cdc:	f8 08 12 00 	clz	r8,r12
80008ce0:	c0 31       	brne	80008ce6 <__avr32_umod64+0x52>
80008ce2:	18 16       	sub	r6,r12
80008ce4:	c3 68       	rjmp	80008d50 <__avr32_umod64+0xbc>
80008ce6:	f0 03 11 20 	rsub	r3,r8,32
80008cea:	f4 03 0a 4b 	lsr	r11,r10,r3
80008cee:	f8 08 09 4c 	lsl	r12,r12,r8
80008cf2:	ec 08 09 49 	lsl	r9,r6,r8
80008cf6:	ec 03 0a 43 	lsr	r3,r6,r3
80008cfa:	f7 e9 10 09 	or	r9,r11,r9
80008cfe:	f8 05 16 10 	lsr	r5,r12,0x10
80008d02:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008d06:	e6 05 0d 02 	divu	r2,r3,r5
80008d0a:	f2 0e 16 10 	lsr	lr,r9,0x10
80008d0e:	ec 02 02 4b 	mul	r11,r6,r2
80008d12:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008d16:	16 3e       	cp.w	lr,r11
80008d18:	c0 72       	brcc	80008d26 <__avr32_umod64+0x92>
80008d1a:	18 0e       	add	lr,r12
80008d1c:	18 3e       	cp.w	lr,r12
80008d1e:	c0 43       	brcs	80008d26 <__avr32_umod64+0x92>
80008d20:	16 3e       	cp.w	lr,r11
80008d22:	fd dc e3 0e 	addcs	lr,lr,r12
80008d26:	fc 0b 01 03 	sub	r3,lr,r11
80008d2a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008d2e:	e6 05 0d 02 	divu	r2,r3,r5
80008d32:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008d36:	a5 36       	mul	r6,r2
80008d38:	0c 39       	cp.w	r9,r6
80008d3a:	c0 72       	brcc	80008d48 <__avr32_umod64+0xb4>
80008d3c:	18 09       	add	r9,r12
80008d3e:	18 39       	cp.w	r9,r12
80008d40:	c0 43       	brcs	80008d48 <__avr32_umod64+0xb4>
80008d42:	0c 39       	cp.w	r9,r6
80008d44:	f3 dc e3 09 	addcs	r9,r9,r12
80008d48:	f2 06 01 06 	sub	r6,r9,r6
80008d4c:	f4 08 09 4e 	lsl	lr,r10,r8
80008d50:	f8 0a 16 10 	lsr	r10,r12,0x10
80008d54:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008d58:	ec 0a 0d 02 	divu	r2,r6,r10
80008d5c:	fc 09 16 10 	lsr	r9,lr,0x10
80008d60:	ea 02 02 4b 	mul	r11,r5,r2
80008d64:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008d68:	16 39       	cp.w	r9,r11
80008d6a:	c0 72       	brcc	80008d78 <__avr32_umod64+0xe4>
80008d6c:	18 09       	add	r9,r12
80008d6e:	18 39       	cp.w	r9,r12
80008d70:	c0 43       	brcs	80008d78 <__avr32_umod64+0xe4>
80008d72:	16 39       	cp.w	r9,r11
80008d74:	f3 dc e3 09 	addcs	r9,r9,r12
80008d78:	f2 0b 01 0b 	sub	r11,r9,r11
80008d7c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008d80:	f6 0a 0d 0a 	divu	r10,r11,r10
80008d84:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008d88:	ea 0a 02 4a 	mul	r10,r5,r10
80008d8c:	14 3e       	cp.w	lr,r10
80008d8e:	c0 72       	brcc	80008d9c <__avr32_umod64+0x108>
80008d90:	18 0e       	add	lr,r12
80008d92:	18 3e       	cp.w	lr,r12
80008d94:	c0 43       	brcs	80008d9c <__avr32_umod64+0x108>
80008d96:	14 3e       	cp.w	lr,r10
80008d98:	fd dc e3 0e 	addcs	lr,lr,r12
80008d9c:	fc 0a 01 0a 	sub	r10,lr,r10
80008da0:	30 0b       	mov	r11,0
80008da2:	f4 08 0a 4a 	lsr	r10,r10,r8
80008da6:	c7 b8       	rjmp	80008e9c <__avr32_umod64+0x208>
80008da8:	16 39       	cp.w	r9,r11
80008daa:	e0 8b 00 79 	brhi	80008e9c <__avr32_umod64+0x208>
80008dae:	f2 09 12 00 	clz	r9,r9
80008db2:	c1 21       	brne	80008dd6 <__avr32_umod64+0x142>
80008db4:	10 3a       	cp.w	r10,r8
80008db6:	5f 2b       	srhs	r11
80008db8:	0a 31       	cp.w	r1,r5
80008dba:	5f ba       	srhi	r10
80008dbc:	f7 ea 10 0a 	or	r10,r11,r10
80008dc0:	f2 0a 18 00 	cp.b	r10,r9
80008dc4:	c0 60       	breq	80008dd0 <__avr32_umod64+0x13c>
80008dc6:	fc 08 01 0c 	sub	r12,lr,r8
80008dca:	e2 05 01 46 	sbc	r6,r1,r5
80008dce:	18 9e       	mov	lr,r12
80008dd0:	0c 9b       	mov	r11,r6
80008dd2:	1c 9a       	mov	r10,lr
80008dd4:	c6 48       	rjmp	80008e9c <__avr32_umod64+0x208>
80008dd6:	ea 09 09 4c 	lsl	r12,r5,r9
80008dda:	f2 06 11 20 	rsub	r6,r9,32
80008dde:	f6 09 09 4b 	lsl	r11,r11,r9
80008de2:	f0 09 09 42 	lsl	r2,r8,r9
80008de6:	ef 46 ff f4 	st.w	r7[-12],r6
80008dea:	f0 06 0a 48 	lsr	r8,r8,r6
80008dee:	18 48       	or	r8,r12
80008df0:	e2 06 0a 4c 	lsr	r12,r1,r6
80008df4:	f4 09 09 43 	lsl	r3,r10,r9
80008df8:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008dfc:	f4 06 0a 4a 	lsr	r10,r10,r6
80008e00:	16 4a       	or	r10,r11
80008e02:	f0 0b 16 10 	lsr	r11,r8,0x10
80008e06:	f8 0b 0d 04 	divu	r4,r12,r11
80008e0a:	f4 0c 16 10 	lsr	r12,r10,0x10
80008e0e:	08 91       	mov	r1,r4
80008e10:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008e14:	e8 0e 02 46 	mul	r6,r4,lr
80008e18:	0c 3c       	cp.w	r12,r6
80008e1a:	c0 a2       	brcc	80008e2e <__avr32_umod64+0x19a>
80008e1c:	20 11       	sub	r1,1
80008e1e:	10 0c       	add	r12,r8
80008e20:	10 3c       	cp.w	r12,r8
80008e22:	c0 63       	brcs	80008e2e <__avr32_umod64+0x19a>
80008e24:	0c 3c       	cp.w	r12,r6
80008e26:	f7 b1 03 01 	sublo	r1,1
80008e2a:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008e2e:	0c 1c       	sub	r12,r6
80008e30:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008e34:	f8 0b 0d 04 	divu	r4,r12,r11
80008e38:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008e3c:	08 96       	mov	r6,r4
80008e3e:	e8 0e 02 4e 	mul	lr,r4,lr
80008e42:	1c 3b       	cp.w	r11,lr
80008e44:	c0 a2       	brcc	80008e58 <__avr32_umod64+0x1c4>
80008e46:	20 16       	sub	r6,1
80008e48:	10 0b       	add	r11,r8
80008e4a:	10 3b       	cp.w	r11,r8
80008e4c:	c0 63       	brcs	80008e58 <__avr32_umod64+0x1c4>
80008e4e:	1c 3b       	cp.w	r11,lr
80008e50:	f7 b6 03 01 	sublo	r6,1
80008e54:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008e58:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008e5c:	1c 1b       	sub	r11,lr
80008e5e:	e2 02 06 40 	mulu.d	r0,r1,r2
80008e62:	00 9e       	mov	lr,r0
80008e64:	02 9c       	mov	r12,r1
80008e66:	16 3c       	cp.w	r12,r11
80008e68:	e0 8b 00 08 	brhi	80008e78 <__avr32_umod64+0x1e4>
80008e6c:	5f 06       	sreq	r6
80008e6e:	06 30       	cp.w	r0,r3
80008e70:	5f ba       	srhi	r10
80008e72:	ed ea 00 0a 	and	r10,r6,r10
80008e76:	c0 60       	breq	80008e82 <__avr32_umod64+0x1ee>
80008e78:	fc 02 01 04 	sub	r4,lr,r2
80008e7c:	f8 08 01 4c 	sbc	r12,r12,r8
80008e80:	08 9e       	mov	lr,r4
80008e82:	e6 0e 01 0a 	sub	r10,r3,lr
80008e86:	f6 0c 01 4c 	sbc	r12,r11,r12
80008e8a:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008e8e:	f8 09 0a 4b 	lsr	r11,r12,r9
80008e92:	f4 09 0a 4a 	lsr	r10,r10,r9
80008e96:	f8 01 09 4c 	lsl	r12,r12,r1
80008e9a:	18 4a       	or	r10,r12
80008e9c:	2f dd       	sub	sp,-12
80008e9e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 cb 41 	rcall	80002788 <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 cb 3a 	rcall	80002788 <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 cb 33 	rcall	80002788 <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 cb 2c 	rcall	80002788 <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
