
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001880  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003a00  80003a00  00003e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000538  80003c00  80003c00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000096  00000008  80004138  00004808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000002  0000009e  800041ce  0000489e  2**0
                  ALLOC
  8 .bss          000001e0  000000a0  000000a0  00000000  2**2
                  ALLOC
  9 .heap         00002d80  00000280  00000280  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000489e  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000006a0  00000000  00000000  000048d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000108c  00000000  00000000  00004f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000138f8  00000000  00000000  00005ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001d6f  00000000  00000000  000198f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006a35  00000000  00000000  0001b663  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000f64  00000000  00000000  00022098  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000340b  00000000  00000000  00022ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000294b  00000000  00000000  00026407  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00797142  00000000  00000000  00028d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000720  00000000  00000000  007bfe94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f3 c0 	sub	pc,pc,-3136

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	00 a0       	st.w	r0++,r0
800020c0:	00 00       	add	r0,r0
800020c2:	00 b4       	st.h	r0++,r4
800020c4:	00 00       	add	r0,r0
800020c6:	00 ac       	st.w	r0++,r12
800020c8:	00 00       	add	r0,r0
800020ca:	00 b8       	st.h	r0++,r8
800020cc:	00 00       	add	r0,r0
800020ce:	00 a4       	st.w	r0++,r4
800020d0:	00 00       	add	r0,r0
800020d2:	00 a8       	st.w	r0++,r8
800020d4:	00 00       	add	r0,r0
800020d6:	00 c0       	st.b	r0++,r0
800020d8:	00 00       	add	r0,r0
800020da:	00 b0       	st.h	r0++,r0
800020dc:	00 00       	add	r0,r0
800020de:	00 bc       	st.h	r0++,r12

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	00 a0       	st.w	r0++,r0

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	00 a0       	st.w	r0++,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	00 b0       	st.h	r0++,r0
80002200:	00 00       	add	r0,r0
80002202:	00 c0       	st.b	r0++,r0
80002204:	00 00       	add	r0,r0
80002206:	00 b8       	st.h	r0++,r8
80002208:	00 00       	add	r0,r0
8000220a:	00 ac       	st.w	r0++,r12
8000220c:	00 00       	add	r0,r0
8000220e:	00 b4       	st.h	r0++,r4
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002230:	eb cd 40 e0 	pushm	r5-r7,lr
80002234:	18 97       	mov	r7,r12
80002236:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002238:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000223c:	30 0a       	mov	r10,0
8000223e:	4a 69       	lddpc	r9,800022d4 <twim_master_init+0xa4>
80002240:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002242:	e6 18 00 01 	andh	r8,0x1,COH
80002246:	c0 b1       	brne	8000225c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002248:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000224a:	3f f8       	mov	r8,-1
8000224c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000224e:	30 18       	mov	r8,1
80002250:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002252:	e0 68 00 80 	mov	r8,128
80002256:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002258:	d5 03       	csrf	0x10
8000225a:	c0 88       	rjmp	8000226a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000225c:	3f f8       	mov	r8,-1
8000225e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002260:	30 18       	mov	r8,1
80002262:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002264:	e0 68 00 80 	mov	r8,128
80002268:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000226a:	3f f8       	mov	r8,-1
8000226c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000226e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002272:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002274:	30 1a       	mov	r10,1
80002276:	e0 6b 02 80 	mov	r11,640
8000227a:	49 8c       	lddpc	r12,800022d8 <twim_master_init+0xa8>
8000227c:	f0 1f 00 18 	mcall	800022dc <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002280:	e6 16 00 01 	andh	r6,0x1,COH
80002284:	c0 21       	brne	80002288 <twim_master_init+0x58>
      cpu_irq_enable();
80002286:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002288:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000228c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000228e:	f0 09 18 00 	cp.b	r9,r8
80002292:	f9 b8 01 10 	movne	r8,16
80002296:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
8000229a:	f9 b8 01 ff 	movne	r8,-1
8000229e:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800022a2:	6a 0a       	ld.w	r10,r5[0x0]
800022a4:	6a 1b       	ld.w	r11,r5[0x4]
800022a6:	0e 9c       	mov	r12,r7
800022a8:	f0 1f 00 0e 	mcall	800022e0 <twim_master_init+0xb0>
800022ac:	5b 8c       	cp.w	r12,-8
800022ae:	c1 00       	breq	800022ce <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800022b0:	6a 2b       	ld.w	r11,r5[0x8]
800022b2:	0e 9c       	mov	r12,r7
800022b4:	f0 1f 00 0c 	mcall	800022e4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022b8:	48 78       	lddpc	r8,800022d4 <twim_master_init+0xa4>
800022ba:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022bc:	5b c8       	cp.w	r8,-4
800022be:	c0 70       	breq	800022cc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022c0:	48 58       	lddpc	r8,800022d4 <twim_master_init+0xa4>
800022c2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022c4:	5b e8       	cp.w	r8,-2
800022c6:	c0 30       	breq	800022cc <twim_master_init+0x9c>
800022c8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800022cc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800022ce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022d2:	00 00       	add	r0,r0
800022d4:	00 00       	add	r0,r0
800022d6:	00 ac       	st.w	r0++,r12
800022d8:	80 00       	ld.sh	r0,r0[0x0]
800022da:	20 04       	sub	r4,0
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	25 cc       	sub	r12,92
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	20 e0       	sub	r0,14
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	22 14       	sub	r4,33

800022e8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800022e8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800022ec:	58 0a       	cp.w	r10,0
800022ee:	c6 30       	breq	800023b4 <eic_init+0xcc>
800022f0:	30 08       	mov	r8,0
800022f2:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800022f4:	30 19       	mov	r9,1
800022f6:	30 1e       	mov	lr,1
800022f8:	f0 08 00 18 	add	r8,r8,r8<<0x1
800022fc:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002300:	11 96       	ld.ub	r6,r8[0x1]
80002302:	f2 06 18 00 	cp.b	r6,r9
80002306:	c0 71       	brne	80002314 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002308:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000230a:	11 86       	ld.ub	r6,r8[0x0]
8000230c:	fc 06 09 46 	lsl	r6,lr,r6
80002310:	0a 46       	or	r6,r5
80002312:	c0 78       	rjmp	80002320 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002314:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002316:	11 86       	ld.ub	r6,r8[0x0]
80002318:	fc 06 09 46 	lsl	r6,lr,r6
8000231c:	5c d6       	com	r6
8000231e:	0a 66       	and	r6,r5
80002320:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002322:	11 a6       	ld.ub	r6,r8[0x2]
80002324:	f2 06 18 00 	cp.b	r6,r9
80002328:	c0 71       	brne	80002336 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000232a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000232c:	11 86       	ld.ub	r6,r8[0x0]
8000232e:	fc 06 09 46 	lsl	r6,lr,r6
80002332:	0a 46       	or	r6,r5
80002334:	c0 78       	rjmp	80002342 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002336:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002338:	11 86       	ld.ub	r6,r8[0x0]
8000233a:	fc 06 09 46 	lsl	r6,lr,r6
8000233e:	5c d6       	com	r6
80002340:	0a 66       	and	r6,r5
80002342:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002344:	11 b6       	ld.ub	r6,r8[0x3]
80002346:	f2 06 18 00 	cp.b	r6,r9
8000234a:	c0 71       	brne	80002358 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000234c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000234e:	11 86       	ld.ub	r6,r8[0x0]
80002350:	fc 06 09 46 	lsl	r6,lr,r6
80002354:	0a 46       	or	r6,r5
80002356:	c0 78       	rjmp	80002364 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002358:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000235a:	11 86       	ld.ub	r6,r8[0x0]
8000235c:	fc 06 09 46 	lsl	r6,lr,r6
80002360:	5c d6       	com	r6
80002362:	0a 66       	and	r6,r5
80002364:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002366:	11 c6       	ld.ub	r6,r8[0x4]
80002368:	f2 06 18 00 	cp.b	r6,r9
8000236c:	c0 71       	brne	8000237a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000236e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002370:	11 86       	ld.ub	r6,r8[0x0]
80002372:	fc 06 09 46 	lsl	r6,lr,r6
80002376:	0a 46       	or	r6,r5
80002378:	c0 78       	rjmp	80002386 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000237a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000237c:	11 86       	ld.ub	r6,r8[0x0]
8000237e:	fc 06 09 46 	lsl	r6,lr,r6
80002382:	5c d6       	com	r6
80002384:	0a 66       	and	r6,r5
80002386:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002388:	11 d6       	ld.ub	r6,r8[0x5]
8000238a:	f2 06 18 00 	cp.b	r6,r9
8000238e:	c0 71       	brne	8000239c <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002390:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002392:	11 88       	ld.ub	r8,r8[0x0]
80002394:	fc 08 09 48 	lsl	r8,lr,r8
80002398:	0c 48       	or	r8,r6
8000239a:	c0 78       	rjmp	800023a8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
8000239c:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000239e:	11 88       	ld.ub	r8,r8[0x0]
800023a0:	fc 08 09 48 	lsl	r8,lr,r8
800023a4:	5c d8       	com	r8
800023a6:	0c 68       	and	r8,r6
800023a8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800023aa:	2f f7       	sub	r7,-1
800023ac:	0e 98       	mov	r8,r7
800023ae:	0e 3a       	cp.w	r10,r7
800023b0:	fe 9b ff a4 	brhi	800022f8 <eic_init+0x10>
800023b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800023b8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800023b8:	30 18       	mov	r8,1
800023ba:	f0 0b 09 48 	lsl	r8,r8,r11
800023be:	99 c8       	st.w	r12[0x30],r8
}
800023c0:	5e fc       	retal	r12

800023c2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800023c2:	30 18       	mov	r8,1
800023c4:	f0 0b 09 48 	lsl	r8,r8,r11
800023c8:	99 08       	st.w	r12[0x0],r8
}
800023ca:	5e fc       	retal	r12

800023cc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800023cc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800023d0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800023d2:	30 19       	mov	r9,1
800023d4:	f2 0b 09 4b 	lsl	r11,r9,r11
800023d8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800023da:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800023dc:	e6 18 00 01 	andh	r8,0x1,COH
800023e0:	c0 21       	brne	800023e4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800023e2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800023e4:	5e fc       	retal	r12
800023e6:	d7 03       	nop

800023e8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800023e8:	f8 08 16 05 	lsr	r8,r12,0x5
800023ec:	a9 78       	lsl	r8,0x9
800023ee:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
800023f2:	58 7b       	cp.w	r11,7
800023f4:	e0 8b 00 05 	brhi	800023fe <gpio_enable_module_pin+0x16>
800023f8:	4a 09       	lddpc	r9,80002478 <gpio_enable_module_pin+0x90>
800023fa:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800023fe:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002400:	30 19       	mov	r9,1
80002402:	f2 0c 09 49 	lsl	r9,r9,r12
80002406:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002408:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000240a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000240c:	c3 18       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000240e:	30 19       	mov	r9,1
80002410:	f2 0c 09 49 	lsl	r9,r9,r12
80002414:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002416:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002418:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000241a:	c2 a8       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000241c:	30 19       	mov	r9,1
8000241e:	f2 0c 09 49 	lsl	r9,r9,r12
80002422:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002424:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002426:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002428:	c2 38       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000242a:	30 19       	mov	r9,1
8000242c:	f2 0c 09 49 	lsl	r9,r9,r12
80002430:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002432:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002434:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002436:	c1 c8       	rjmp	8000246e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002438:	30 19       	mov	r9,1
8000243a:	f2 0c 09 49 	lsl	r9,r9,r12
8000243e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002440:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002442:	91 d9       	st.w	r8[0x34],r9
		break;
80002444:	c1 58       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002446:	30 19       	mov	r9,1
80002448:	f2 0c 09 49 	lsl	r9,r9,r12
8000244c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000244e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002450:	91 d9       	st.w	r8[0x34],r9
		break;
80002452:	c0 e8       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002454:	30 19       	mov	r9,1
80002456:	f2 0c 09 49 	lsl	r9,r9,r12
8000245a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000245c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000245e:	91 d9       	st.w	r8[0x34],r9
		break;
80002460:	c0 78       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002462:	30 19       	mov	r9,1
80002464:	f2 0c 09 49 	lsl	r9,r9,r12
80002468:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000246a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000246c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000246e:	30 19       	mov	r9,1
80002470:	f2 0c 09 4c 	lsl	r12,r9,r12
80002474:	91 2c       	st.w	r8[0x8],r12
80002476:	5e fd       	retal	0
80002478:	80 00       	ld.sh	r0,r0[0x0]
8000247a:	3c 00       	mov	r0,-64

8000247c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000247c:	d4 21       	pushm	r4-r7,lr
8000247e:	18 97       	mov	r7,r12
80002480:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002482:	58 0b       	cp.w	r11,0
80002484:	c0 31       	brne	8000248a <gpio_enable_module+0xe>
80002486:	30 05       	mov	r5,0
80002488:	c0 d8       	rjmp	800024a2 <gpio_enable_module+0x26>
8000248a:	30 06       	mov	r6,0
8000248c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000248e:	6e 1b       	ld.w	r11,r7[0x4]
80002490:	6e 0c       	ld.w	r12,r7[0x0]
80002492:	f0 1f 00 06 	mcall	800024a8 <gpio_enable_module+0x2c>
80002496:	18 45       	or	r5,r12
		gpiomap++;
80002498:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000249a:	2f f6       	sub	r6,-1
8000249c:	0c 34       	cp.w	r4,r6
8000249e:	fe 9b ff f8 	brhi	8000248e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800024a2:	0a 9c       	mov	r12,r5
800024a4:	d8 22       	popm	r4-r7,pc
800024a6:	00 00       	add	r0,r0
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	23 e8       	sub	r8,62

800024ac <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024ac:	f8 08 16 05 	lsr	r8,r12,0x5
800024b0:	a9 78       	lsl	r8,0x9
800024b2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800024b6:	16 99       	mov	r9,r11
800024b8:	e2 19 00 04 	andl	r9,0x4,COH
800024bc:	c0 70       	breq	800024ca <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800024be:	30 19       	mov	r9,1
800024c0:	f2 0c 09 49 	lsl	r9,r9,r12
800024c4:	f1 49 00 74 	st.w	r8[116],r9
800024c8:	c0 68       	rjmp	800024d4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800024ca:	30 19       	mov	r9,1
800024cc:	f2 0c 09 49 	lsl	r9,r9,r12
800024d0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800024d4:	16 99       	mov	r9,r11
800024d6:	e2 19 00 80 	andl	r9,0x80,COH
800024da:	c2 40       	breq	80002522 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800024dc:	16 99       	mov	r9,r11
800024de:	e2 19 01 80 	andl	r9,0x180,COH
800024e2:	c0 90       	breq	800024f4 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800024e4:	30 19       	mov	r9,1
800024e6:	f2 0c 09 49 	lsl	r9,r9,r12
800024ea:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800024ee:	f1 49 00 b8 	st.w	r8[184],r9
800024f2:	c1 88       	rjmp	80002522 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800024f4:	16 99       	mov	r9,r11
800024f6:	e2 19 02 80 	andl	r9,0x280,COH
800024fa:	c0 90       	breq	8000250c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800024fc:	30 19       	mov	r9,1
800024fe:	f2 0c 09 49 	lsl	r9,r9,r12
80002502:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002506:	f1 49 00 b8 	st.w	r8[184],r9
8000250a:	c0 c8       	rjmp	80002522 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000250c:	16 99       	mov	r9,r11
8000250e:	e2 19 03 80 	andl	r9,0x380,COH
80002512:	c0 80       	breq	80002522 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002514:	30 19       	mov	r9,1
80002516:	f2 0c 09 49 	lsl	r9,r9,r12
8000251a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000251e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002522:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002526:	c1 50       	breq	80002550 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002528:	e2 1b 00 02 	andl	r11,0x2,COH
8000252c:	c0 70       	breq	8000253a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000252e:	30 19       	mov	r9,1
80002530:	f2 0c 09 49 	lsl	r9,r9,r12
80002534:	f1 49 00 54 	st.w	r8[84],r9
80002538:	c0 68       	rjmp	80002544 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002544:	30 19       	mov	r9,1
80002546:	f2 0c 09 49 	lsl	r9,r9,r12
8000254a:	f1 49 00 44 	st.w	r8[68],r9
8000254e:	c0 68       	rjmp	8000255a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002550:	30 19       	mov	r9,1
80002552:	f2 0c 09 49 	lsl	r9,r9,r12
80002556:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000255a:	30 19       	mov	r9,1
8000255c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002560:	91 1c       	st.w	r8[0x4],r12
}
80002562:	5e fc       	retal	r12

80002564 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002564:	f8 08 16 05 	lsr	r8,r12,0x5
80002568:	a9 78       	lsl	r8,0x9
8000256a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000256e:	30 19       	mov	r9,1
80002570:	f2 0c 09 4c 	lsl	r12,r9,r12
80002574:	f1 4c 00 54 	st.w	r8[84],r12
}
80002578:	5e fc       	retal	r12

8000257a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000257a:	f8 08 16 05 	lsr	r8,r12,0x5
8000257e:	a9 78       	lsl	r8,0x9
80002580:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002584:	30 19       	mov	r9,1
80002586:	f2 0c 09 4c 	lsl	r12,r9,r12
8000258a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000258e:	5e fc       	retal	r12

80002590 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002590:	f8 08 16 05 	lsr	r8,r12,0x5
80002594:	a9 78       	lsl	r8,0x9
80002596:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000259a:	30 19       	mov	r9,1
8000259c:	f2 0c 09 4c 	lsl	r12,r9,r12
800025a0:	f1 4c 00 5c 	st.w	r8[92],r12
}
800025a4:	5e fc       	retal	r12

800025a6 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025a6:	f8 08 16 05 	lsr	r8,r12,0x5
800025aa:	a9 78       	lsl	r8,0x9
800025ac:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
800025b0:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
800025b4:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800025b8:	30 1a       	mov	r10,1
800025ba:	f4 0c 09 4c 	lsl	r12,r10,r12
800025be:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800025c2:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800025c6:	5e fc       	retal	r12

800025c8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800025c8:	c0 08       	rjmp	800025c8 <_unhandled_interrupt>
800025ca:	d7 03       	nop

800025cc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800025cc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800025d0:	49 99       	lddpc	r9,80002634 <INTC_register_interrupt+0x68>
800025d2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800025d6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800025da:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800025dc:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800025e0:	58 0a       	cp.w	r10,0
800025e2:	c0 91       	brne	800025f4 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025e4:	49 59       	lddpc	r9,80002638 <INTC_register_interrupt+0x6c>
800025e6:	49 6a       	lddpc	r10,8000263c <INTC_register_interrupt+0x70>
800025e8:	12 1a       	sub	r10,r9
800025ea:	fe 79 10 00 	mov	r9,-61440
800025ee:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800025f2:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800025f4:	58 1a       	cp.w	r10,1
800025f6:	c0 a1       	brne	8000260a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800025f8:	49 09       	lddpc	r9,80002638 <INTC_register_interrupt+0x6c>
800025fa:	49 2a       	lddpc	r10,80002640 <INTC_register_interrupt+0x74>
800025fc:	12 1a       	sub	r10,r9
800025fe:	bf aa       	sbr	r10,0x1e
80002600:	fe 79 10 00 	mov	r9,-61440
80002604:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002608:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000260a:	58 2a       	cp.w	r10,2
8000260c:	c0 a1       	brne	80002620 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000260e:	48 b9       	lddpc	r9,80002638 <INTC_register_interrupt+0x6c>
80002610:	48 da       	lddpc	r10,80002644 <INTC_register_interrupt+0x78>
80002612:	12 1a       	sub	r10,r9
80002614:	bf ba       	sbr	r10,0x1f
80002616:	fe 79 10 00 	mov	r9,-61440
8000261a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000261e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002620:	48 69       	lddpc	r9,80002638 <INTC_register_interrupt+0x6c>
80002622:	48 aa       	lddpc	r10,80002648 <INTC_register_interrupt+0x7c>
80002624:	12 1a       	sub	r10,r9
80002626:	ea 1a c0 00 	orh	r10,0xc000
8000262a:	fe 79 10 00 	mov	r9,-61440
8000262e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002632:	5e fc       	retal	r12
80002634:	80 00       	ld.sh	r0,r0[0x0]
80002636:	3c 20       	mov	r0,-62
80002638:	80 00       	ld.sh	r0,r0[0x0]
8000263a:	3a 00       	mov	r0,-96
8000263c:	80 00       	ld.sh	r0,r0[0x0]
8000263e:	3b 04       	mov	r4,-80
80002640:	80 00       	ld.sh	r0,r0[0x0]
80002642:	3b 12       	mov	r2,-79
80002644:	80 00       	ld.sh	r0,r0[0x0]
80002646:	3b 20       	mov	r0,-78
80002648:	80 00       	ld.sh	r0,r0[0x0]
8000264a:	3b 2e       	mov	lr,-78

8000264c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000264c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000264e:	49 18       	lddpc	r8,80002690 <INTC_init_interrupts+0x44>
80002650:	e3 b8 00 01 	mtsr	0x4,r8
80002654:	49 0e       	lddpc	lr,80002694 <INTC_init_interrupts+0x48>
80002656:	30 07       	mov	r7,0
80002658:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000265a:	49 0c       	lddpc	r12,80002698 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000265c:	49 05       	lddpc	r5,8000269c <INTC_init_interrupts+0x50>
8000265e:	10 15       	sub	r5,r8
80002660:	fe 76 10 00 	mov	r6,-61440
80002664:	c1 08       	rjmp	80002684 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002666:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002668:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000266a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000266c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002670:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002672:	10 3a       	cp.w	r10,r8
80002674:	fe 9b ff fc 	brhi	8000266c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002678:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000267c:	2f f7       	sub	r7,-1
8000267e:	2f 8e       	sub	lr,-8
80002680:	59 f7       	cp.w	r7,31
80002682:	c0 50       	breq	8000268c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002684:	7c 08       	ld.w	r8,lr[0x0]
80002686:	58 08       	cp.w	r8,0
80002688:	ce f1       	brne	80002666 <INTC_init_interrupts+0x1a>
8000268a:	cf 7b       	rjmp	80002678 <INTC_init_interrupts+0x2c>
8000268c:	d8 22       	popm	r4-r7,pc
8000268e:	00 00       	add	r0,r0
80002690:	80 00       	ld.sh	r0,r0[0x0]
80002692:	3a 00       	mov	r0,-96
80002694:	80 00       	ld.sh	r0,r0[0x0]
80002696:	3c 20       	mov	r0,-62
80002698:	80 00       	ld.sh	r0,r0[0x0]
8000269a:	25 c8       	sub	r8,92
8000269c:	80 00       	ld.sh	r0,r0[0x0]
8000269e:	3b 04       	mov	r4,-80

800026a0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800026a0:	fe 78 10 00 	mov	r8,-61440
800026a4:	e0 69 00 83 	mov	r9,131
800026a8:	f2 0c 01 0c 	sub	r12,r9,r12
800026ac:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800026b0:	f2 ca ff c0 	sub	r10,r9,-64
800026b4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800026b8:	58 08       	cp.w	r8,0
800026ba:	c0 21       	brne	800026be <_get_interrupt_handler+0x1e>
800026bc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800026be:	f0 08 12 00 	clz	r8,r8
800026c2:	48 5a       	lddpc	r10,800026d4 <_get_interrupt_handler+0x34>
800026c4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800026c8:	f0 08 11 1f 	rsub	r8,r8,31
800026cc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800026ce:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800026d2:	5e fc       	retal	r12
800026d4:	80 00       	ld.sh	r0,r0[0x0]
800026d6:	3c 20       	mov	r0,-62

800026d8 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800026d8:	f8 c8 00 01 	sub	r8,r12,1
800026dc:	f0 0b 00 0b 	add	r11,r8,r11
800026e0:	f6 0c 0d 0a 	divu	r10,r11,r12
800026e4:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800026e6:	f4 c8 00 01 	sub	r8,r10,1
800026ea:	e0 48 00 fe 	cp.w	r8,254
800026ee:	e0 88 00 03 	brls	800026f4 <getBaudDiv+0x1c>
800026f2:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800026f4:	5c 8c       	casts.h	r12
}
800026f6:	5e fc       	retal	r12

800026f8 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800026f8:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800026fa:	30 18       	mov	r8,1
800026fc:	f0 0b 18 00 	cp.b	r11,r8
80002700:	5f be       	srhi	lr
80002702:	f0 0a 18 00 	cp.b	r10,r8
80002706:	5f b8       	srhi	r8
80002708:	fd e8 10 08 	or	r8,lr,r8
8000270c:	c0 30       	breq	80002712 <spi_selectionMode+0x1a>
8000270e:	30 2c       	mov	r12,2
80002710:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002712:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002714:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002718:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000271c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002720:	99 18       	st.w	r12[0x4],r8
80002722:	d8 0a       	popm	pc,r12=0

80002724 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002724:	78 18       	ld.w	r8,r12[0x4]
80002726:	ea 18 00 0f 	orh	r8,0xf
8000272a:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000272c:	78 18       	ld.w	r8,r12[0x4]
8000272e:	e2 18 00 04 	andl	r8,0x4,COH
80002732:	c0 f0       	breq	80002750 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002734:	30 e8       	mov	r8,14
80002736:	f0 0b 18 00 	cp.b	r11,r8
8000273a:	e0 8b 00 19 	brhi	8000276c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000273e:	78 18       	ld.w	r8,r12[0x4]
80002740:	b1 6b       	lsl	r11,0x10
80002742:	ea 1b ff f0 	orh	r11,0xfff0
80002746:	e8 1b ff ff 	orl	r11,0xffff
8000274a:	10 6b       	and	r11,r8
8000274c:	99 1b       	st.w	r12[0x4],r11
8000274e:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002750:	30 38       	mov	r8,3
80002752:	f0 0b 18 00 	cp.b	r11,r8
80002756:	e0 8b 00 0b 	brhi	8000276c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000275a:	78 18       	ld.w	r8,r12[0x4]
8000275c:	2f 0b       	sub	r11,-16
8000275e:	30 19       	mov	r9,1
80002760:	f2 0b 09 4b 	lsl	r11,r9,r11
80002764:	5c db       	com	r11
80002766:	10 6b       	and	r11,r8
80002768:	99 1b       	st.w	r12[0x4],r11
8000276a:	5e fd       	retal	0
8000276c:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000276e:	5e fc       	retal	r12

80002770 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002770:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002774:	c0 58       	rjmp	8000277e <spi_unselectChip+0xe>
		if (!timeout--) {
80002776:	58 08       	cp.w	r8,0
80002778:	c0 21       	brne	8000277c <spi_unselectChip+0xc>
8000277a:	5e ff       	retal	1
8000277c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000277e:	78 49       	ld.w	r9,r12[0x10]
80002780:	e2 19 02 00 	andl	r9,0x200,COH
80002784:	cf 90       	breq	80002776 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002786:	78 18       	ld.w	r8,r12[0x4]
80002788:	ea 18 00 0f 	orh	r8,0xf
8000278c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000278e:	fc 18 01 00 	movh	r8,0x100
80002792:	99 08       	st.w	r12[0x0],r8
80002794:	5e fd       	retal	0
80002796:	d7 03       	nop

80002798 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002798:	eb cd 40 f8 	pushm	r3-r7,lr
8000279c:	18 95       	mov	r5,r12
8000279e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800027a0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800027a4:	30 38       	mov	r8,3
800027a6:	f0 06 18 00 	cp.b	r6,r8
800027aa:	e0 8b 00 4d 	brhi	80002844 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800027ae:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800027b2:	30 18       	mov	r8,1
800027b4:	f0 04 18 00 	cp.b	r4,r8
800027b8:	e0 8b 00 46 	brhi	80002844 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800027bc:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800027c0:	30 78       	mov	r8,7
800027c2:	f0 03 18 00 	cp.b	r3,r8
800027c6:	e0 88 00 3f 	brls	80002844 <spi_setupChipReg+0xac>
800027ca:	31 08       	mov	r8,16
800027cc:	f0 03 18 00 	cp.b	r3,r8
800027d0:	e0 8b 00 3a 	brhi	80002844 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800027d4:	14 9b       	mov	r11,r10
800027d6:	6e 1c       	ld.w	r12,r7[0x4]
800027d8:	f0 1f 00 1d 	mcall	8000284c <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800027dc:	c3 45       	brlt	80002844 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800027de:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800027e0:	ec 09 16 01 	lsr	r9,r6,0x1
800027e4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800027e8:	ec 16 00 01 	eorl	r6,0x1
800027ec:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800027f0:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800027f4:	20 83       	sub	r3,8
800027f6:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800027fa:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800027fe:	ef 39 00 09 	ld.ub	r9,r7[9]
80002802:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002806:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000280a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000280e:	0f 89       	ld.ub	r9,r7[0x0]
80002810:	30 1a       	mov	r10,1
80002812:	f4 09 18 00 	cp.b	r9,r10
80002816:	c0 e0       	breq	80002832 <spi_setupChipReg+0x9a>
80002818:	c0 a3       	brcs	8000282c <spi_setupChipReg+0x94>
8000281a:	30 2a       	mov	r10,2
8000281c:	f4 09 18 00 	cp.b	r9,r10
80002820:	c0 c0       	breq	80002838 <spi_setupChipReg+0xa0>
80002822:	30 3a       	mov	r10,3
80002824:	f4 09 18 00 	cp.b	r9,r10
80002828:	c0 e1       	brne	80002844 <spi_setupChipReg+0xac>
8000282a:	c0 a8       	rjmp	8000283e <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000282c:	8b c8       	st.w	r5[0x30],r8
8000282e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002832:	8b d8       	st.w	r5[0x34],r8
80002834:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002838:	8b e8       	st.w	r5[0x38],r8
8000283a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000283e:	8b f8       	st.w	r5[0x3c],r8
80002840:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002844:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002846:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000284a:	00 00       	add	r0,r0
8000284c:	80 00       	ld.sh	r0,r0[0x0]
8000284e:	26 d8       	sub	r8,109

80002850 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002850:	30 18       	mov	r8,1
80002852:	99 08       	st.w	r12[0x0],r8
}
80002854:	5e fc       	retal	r12

80002856 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002856:	76 09       	ld.w	r9,r11[0x0]
80002858:	58 29       	cp.w	r9,2
8000285a:	e0 88 00 03 	brls	80002860 <tc_init_waveform+0xa>
8000285e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002860:	76 18       	ld.w	r8,r11[0x4]
80002862:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002866:	af ba       	sbr	r10,0xf
80002868:	10 9b       	mov	r11,r8
8000286a:	e6 1b c0 00 	andh	r11,0xc000,COH
8000286e:	16 4a       	or	r10,r11
80002870:	10 9b       	mov	r11,r8
80002872:	e6 1b 30 00 	andh	r11,0x3000,COH
80002876:	16 4a       	or	r10,r11
80002878:	10 9b       	mov	r11,r8
8000287a:	e6 1b 0c 00 	andh	r11,0xc00,COH
8000287e:	16 4a       	or	r10,r11
80002880:	10 9b       	mov	r11,r8
80002882:	e6 1b 03 00 	andh	r11,0x300,COH
80002886:	16 4a       	or	r10,r11
80002888:	10 9b       	mov	r11,r8
8000288a:	e6 1b 00 c0 	andh	r11,0xc0,COH
8000288e:	16 4a       	or	r10,r11
80002890:	10 9b       	mov	r11,r8
80002892:	e6 1b 00 30 	andh	r11,0x30,COH
80002896:	16 4a       	or	r10,r11
80002898:	10 9b       	mov	r11,r8
8000289a:	e6 1b 00 0c 	andh	r11,0xc,COH
8000289e:	16 4a       	or	r10,r11
800028a0:	10 9b       	mov	r11,r8
800028a2:	e6 1b 00 03 	andh	r11,0x3,COH
800028a6:	16 4a       	or	r10,r11
800028a8:	10 9b       	mov	r11,r8
800028aa:	e2 1b 60 00 	andl	r11,0x6000,COH
800028ae:	16 4a       	or	r10,r11
800028b0:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
800028b4:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800028b8:	10 9b       	mov	r11,r8
800028ba:	e2 1b 0c 00 	andl	r11,0xc00,COH
800028be:	16 4a       	or	r10,r11
800028c0:	10 9b       	mov	r11,r8
800028c2:	e2 1b 03 00 	andl	r11,0x300,COH
800028c6:	16 4a       	or	r10,r11
800028c8:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800028cc:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800028d0:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800028d4:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800028d8:	10 9b       	mov	r11,r8
800028da:	e2 1b 00 30 	andl	r11,0x30,COH
800028de:	16 4a       	or	r10,r11
800028e0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800028e4:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800028e8:	a5 69       	lsl	r9,0x4
800028ea:	2f f9       	sub	r9,-1
800028ec:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800028f0:	5e fd       	retal	0

800028f2 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028f2:	58 2b       	cp.w	r11,2
800028f4:	e0 88 00 03 	brls	800028fa <tc_start+0x8>
800028f8:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800028fa:	a7 6b       	lsl	r11,0x6
800028fc:	16 0c       	add	r12,r11
800028fe:	30 58       	mov	r8,5
80002900:	99 08       	st.w	r12[0x0],r8
80002902:	5e fd       	retal	0

80002904 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002904:	58 2b       	cp.w	r11,2
80002906:	e0 88 00 03 	brls	8000290c <tc_stop+0x8>
8000290a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
8000290c:	a7 6b       	lsl	r11,0x6
8000290e:	16 0c       	add	r12,r11
80002910:	30 28       	mov	r8,2
80002912:	99 08       	st.w	r12[0x0],r8
80002914:	5e fd       	retal	0

80002916 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002916:	58 2b       	cp.w	r11,2
80002918:	e0 88 00 03 	brls	8000291e <tc_read_sr+0x8>
8000291c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
8000291e:	a7 6b       	lsl	r11,0x6
80002920:	2e 0b       	sub	r11,-32
80002922:	16 0c       	add	r12,r11
80002924:	78 0c       	ld.w	r12,r12[0x0]
}
80002926:	5e fc       	retal	r12

80002928 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002928:	58 2b       	cp.w	r11,2
8000292a:	e0 88 00 03 	brls	80002930 <tc_write_rc+0x8>
8000292e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002930:	f6 08 15 04 	lsl	r8,r11,0x4
80002934:	2f f8       	sub	r8,-1
80002936:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000293a:	e2 18 80 00 	andl	r8,0x8000,COH
8000293e:	c0 c0       	breq	80002956 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002940:	a7 6b       	lsl	r11,0x6
80002942:	16 0c       	add	r12,r11
80002944:	2e 4c       	sub	r12,-28
80002946:	78 08       	ld.w	r8,r12[0x0]
80002948:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
8000294c:	e0 18 00 00 	andl	r8,0x0
80002950:	f3 e8 10 08 	or	r8,r9,r8
80002954:	99 08       	st.w	r12[0x0],r8

  return value;
80002956:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
8000295a:	5e fc       	retal	r12

8000295c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
8000295c:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002960:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002964:	58 2b       	cp.w	r11,2
80002966:	e0 88 00 04 	brls	8000296e <tc_configure_interrupts+0x12>
8000296a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
8000296e:	ee 19 00 01 	eorh	r9,0x1
80002972:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002976:	74 08       	ld.w	r8,r10[0x0]
80002978:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
8000297c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002980:	a7 6e       	lsl	lr,0x6
80002982:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002986:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
8000298a:	0e 4e       	or	lr,r7
8000298c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002990:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002994:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002998:	fd e7 10 4e 	or	lr,lr,r7<<0x4
8000299c:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
800029a0:	fd e7 10 3e 	or	lr,lr,r7<<0x3
800029a4:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
800029a8:	fd e7 10 2e 	or	lr,lr,r7<<0x2
800029ac:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800029b0:	fd e8 10 18 	or	r8,lr,r8<<0x1
800029b4:	f6 0e 15 06 	lsl	lr,r11,0x6
800029b8:	f8 0e 00 0e 	add	lr,r12,lr
800029bc:	2d ce       	sub	lr,-36
800029be:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800029c0:	58 09       	cp.w	r9,0
800029c2:	c0 20       	breq	800029c6 <tc_configure_interrupts+0x6a>
800029c4:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029c6:	74 08       	ld.w	r8,r10[0x0]
800029c8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800029cc:	e0 65 00 80 	mov	r5,128
800029d0:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800029d4:	74 08       	ld.w	r8,r10[0x0]
800029d6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800029da:	f9 b4 00 40 	moveq	r4,64
800029de:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800029e2:	74 08       	ld.w	r8,r10[0x0]
800029e4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800029e8:	f9 b3 00 20 	moveq	r3,32
800029ec:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800029f0:	74 08       	ld.w	r8,r10[0x0]
800029f2:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800029f6:	f9 b2 00 10 	moveq	r2,16
800029fa:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800029fe:	74 08       	ld.w	r8,r10[0x0]
80002a00:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002a04:	f9 b6 00 08 	moveq	r6,8
80002a08:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002a0c:	74 08       	ld.w	r8,r10[0x0]
80002a0e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002a12:	f9 b7 00 04 	moveq	r7,4
80002a16:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002a1a:	74 08       	ld.w	r8,r10[0x0]
80002a1c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a20:	f9 be 00 02 	moveq	lr,2
80002a24:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002a28:	74 08       	ld.w	r8,r10[0x0]
80002a2a:	ec 18 00 01 	eorl	r8,0x1
80002a2e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002a32:	eb e8 10 08 	or	r8,r5,r8
80002a36:	08 48       	or	r8,r4
80002a38:	06 48       	or	r8,r3
80002a3a:	04 48       	or	r8,r2
80002a3c:	0c 48       	or	r8,r6
80002a3e:	0e 48       	or	r8,r7
80002a40:	1c 48       	or	r8,lr
80002a42:	f6 0a 15 06 	lsl	r10,r11,0x6
80002a46:	f8 0a 00 0a 	add	r10,r12,r10
80002a4a:	2d 8a       	sub	r10,-40
80002a4c:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002a4e:	a7 6b       	lsl	r11,0x6
80002a50:	2e 0b       	sub	r11,-32
80002a52:	16 0c       	add	r12,r11
80002a54:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002a56:	58 09       	cp.w	r9,0
80002a58:	c0 31       	brne	80002a5e <tc_configure_interrupts+0x102>
80002a5a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002a5e:	d5 03       	csrf	0x10
80002a60:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002a64 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002a64:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002a66:	f6 08 15 04 	lsl	r8,r11,0x4
80002a6a:	14 38       	cp.w	r8,r10
80002a6c:	f9 b8 08 10 	movls	r8,16
80002a70:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002a74:	f0 0b 02 4b 	mul	r11,r8,r11
80002a78:	f6 09 16 01 	lsr	r9,r11,0x1
80002a7c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002a80:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002a84:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a88:	f2 cb 00 01 	sub	r11,r9,1
80002a8c:	e0 4b ff fe 	cp.w	r11,65534
80002a90:	e0 88 00 03 	brls	80002a96 <usart_set_async_baudrate+0x32>
80002a94:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002a96:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002a98:	e8 6e 00 00 	mov	lr,524288
80002a9c:	59 08       	cp.w	r8,16
80002a9e:	fc 08 17 10 	movne	r8,lr
80002aa2:	f9 b8 00 00 	moveq	r8,0
80002aa6:	e4 1b ff f7 	andh	r11,0xfff7
80002aaa:	e0 1b fe cf 	andl	r11,0xfecf
80002aae:	16 48       	or	r8,r11
80002ab0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002ab2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002ab6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002aba:	99 89       	st.w	r12[0x20],r9
80002abc:	d8 0a       	popm	pc,r12=0

80002abe <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002abe:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ac0:	e2 18 00 02 	andl	r8,0x2,COH
80002ac4:	c0 31       	brne	80002aca <usart_write_char+0xc>
80002ac6:	30 2c       	mov	r12,2
80002ac8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002aca:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002ace:	99 7b       	st.w	r12[0x1c],r11
80002ad0:	5e fd       	retal	0
80002ad2:	d7 03       	nop

80002ad4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002ad4:	eb cd 40 e0 	pushm	r5-r7,lr
80002ad8:	18 96       	mov	r6,r12
80002ada:	16 95       	mov	r5,r11
80002adc:	e0 67 27 0f 	mov	r7,9999
80002ae0:	c0 68       	rjmp	80002aec <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ae2:	58 07       	cp.w	r7,0
80002ae4:	c0 31       	brne	80002aea <usart_putchar+0x16>
80002ae6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002aea:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002aec:	0a 9b       	mov	r11,r5
80002aee:	0c 9c       	mov	r12,r6
80002af0:	f0 1f 00 03 	mcall	80002afc <usart_putchar+0x28>
80002af4:	cf 71       	brne	80002ae2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002af6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002afa:	00 00       	add	r0,r0
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	2a be       	sub	lr,-85

80002b00 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, uint8_t *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002b00:	78 58       	ld.w	r8,r12[0x14]
80002b02:	e2 18 00 e0 	andl	r8,0xe0,COH
80002b06:	c0 30       	breq	80002b0c <usart_read_char+0xc>
80002b08:	30 4c       	mov	r12,4
80002b0a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002b0c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002b0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b12:	f9 bc 00 03 	moveq	r12,3
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002b16:	f9 f8 10 06 	ld.wne	r8,r12[0x18]
80002b1a:	f7 f8 1e 00 	st.bne	r11[0x0],r8
80002b1e:	f9 bc 01 00 	movne	r12,0
    return USART_SUCCESS;
  }
  else
    return USART_RX_EMPTY;
}
80002b22:	5e fc       	retal	r12

80002b24 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002b24:	eb cd 40 c0 	pushm	r6-r7,lr
80002b28:	18 96       	mov	r6,r12
80002b2a:	16 97       	mov	r7,r11
  while (*string != '\0')
80002b2c:	17 8b       	ld.ub	r11,r11[0x0]
80002b2e:	58 0b       	cp.w	r11,0
80002b30:	c0 80       	breq	80002b40 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002b32:	2f f7       	sub	r7,-1
80002b34:	0c 9c       	mov	r12,r6
80002b36:	f0 1f 00 04 	mcall	80002b44 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002b3a:	0f 8b       	ld.ub	r11,r7[0x0]
80002b3c:	58 0b       	cp.w	r11,0
80002b3e:	cf a1       	brne	80002b32 <usart_write_line+0xe>
80002b40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	2a d4       	sub	r4,-83

80002b48 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002b48:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002b4c:	e6 18 00 01 	andh	r8,0x1,COH
80002b50:	c0 71       	brne	80002b5e <usart_reset+0x16>
80002b52:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002b54:	3f f8       	mov	r8,-1
80002b56:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002b58:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002b5a:	d5 03       	csrf	0x10
80002b5c:	c0 48       	rjmp	80002b64 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002b5e:	3f f8       	mov	r8,-1
80002b60:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002b62:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002b64:	30 08       	mov	r8,0
80002b66:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002b68:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002b6a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002b6c:	e8 68 61 0c 	mov	r8,549132
80002b70:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002b72:	5e fc       	retal	r12

80002b74 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002b74:	eb cd 40 e0 	pushm	r5-r7,lr
80002b78:	18 96       	mov	r6,r12
80002b7a:	16 97       	mov	r7,r11
80002b7c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002b7e:	f0 1f 00 2f 	mcall	80002c38 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002b82:	58 07       	cp.w	r7,0
80002b84:	c5 80       	breq	80002c34 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002b86:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b88:	30 49       	mov	r9,4
80002b8a:	f2 08 18 00 	cp.b	r8,r9
80002b8e:	e0 88 00 53 	brls	80002c34 <usart_init_rs232+0xc0>
80002b92:	30 99       	mov	r9,9
80002b94:	f2 08 18 00 	cp.b	r8,r9
80002b98:	e0 8b 00 4e 	brhi	80002c34 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002b9c:	0f d9       	ld.ub	r9,r7[0x5]
80002b9e:	30 78       	mov	r8,7
80002ba0:	f0 09 18 00 	cp.b	r9,r8
80002ba4:	e0 8b 00 48 	brhi	80002c34 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002ba8:	8e 39       	ld.sh	r9,r7[0x6]
80002baa:	e0 68 01 01 	mov	r8,257
80002bae:	f0 09 19 00 	cp.h	r9,r8
80002bb2:	e0 8b 00 41 	brhi	80002c34 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002bb6:	ef 39 00 08 	ld.ub	r9,r7[8]
80002bba:	30 38       	mov	r8,3
80002bbc:	f0 09 18 00 	cp.b	r9,r8
80002bc0:	e0 8b 00 3a 	brhi	80002c34 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002bc4:	0a 9a       	mov	r10,r5
80002bc6:	6e 0b       	ld.w	r11,r7[0x0]
80002bc8:	0c 9c       	mov	r12,r6
80002bca:	f0 1f 00 1d 	mcall	80002c3c <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002bce:	58 1c       	cp.w	r12,1
80002bd0:	c3 20       	breq	80002c34 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002bd2:	0f c8       	ld.ub	r8,r7[0x4]
80002bd4:	30 99       	mov	r9,9
80002bd6:	f2 08 18 00 	cp.b	r8,r9
80002bda:	c0 51       	brne	80002be4 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002bdc:	6c 18       	ld.w	r8,r6[0x4]
80002bde:	b1 b8       	sbr	r8,0x11
80002be0:	8d 18       	st.w	r6[0x4],r8
80002be2:	c0 68       	rjmp	80002bee <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002be4:	6c 19       	ld.w	r9,r6[0x4]
80002be6:	20 58       	sub	r8,5
80002be8:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002bec:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002bee:	6c 19       	ld.w	r9,r6[0x4]
80002bf0:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002bf4:	0f d8       	ld.ub	r8,r7[0x5]
80002bf6:	a9 78       	lsl	r8,0x9
80002bf8:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002bfc:	12 48       	or	r8,r9
80002bfe:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002c00:	8e 38       	ld.sh	r8,r7[0x6]
80002c02:	30 29       	mov	r9,2
80002c04:	f2 08 19 00 	cp.h	r8,r9
80002c08:	e0 88 00 09 	brls	80002c1a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002c0c:	6c 18       	ld.w	r8,r6[0x4]
80002c0e:	ad b8       	sbr	r8,0xd
80002c10:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002c12:	8e b8       	ld.uh	r8,r7[0x6]
80002c14:	20 28       	sub	r8,2
80002c16:	8d a8       	st.w	r6[0x28],r8
80002c18:	c0 68       	rjmp	80002c24 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002c1a:	6c 19       	ld.w	r9,r6[0x4]
80002c1c:	5c 78       	castu.h	r8
80002c1e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002c22:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002c24:	6c 18       	ld.w	r8,r6[0x4]
80002c26:	e0 18 ff f0 	andl	r8,0xfff0
80002c2a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002c2c:	35 08       	mov	r8,80
80002c2e:	8d 08       	st.w	r6[0x0],r8
80002c30:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002c34:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	2b 48       	sub	r8,-76
80002c3c:	80 00       	ld.sh	r0,r0[0x0]
80002c3e:	2a 64       	sub	r4,-90

80002c40 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002c40:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002c44:	fe c0 f2 44 	sub	r0,pc,-3516

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002c48:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002c4c:	d5 53       	csrf	0x15
  cp      r0, r1
80002c4e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002c50:	e0 61 00 a0 	mov	r1,160
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002c54:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002c56:	c0 72       	brcc	80002c64 <idata_load_loop_end>
  cp      r0, r1
80002c58:	fe c2 eb 20 	sub	r2,pc,-5344

80002c5c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002c5c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002c5e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002c60:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002c62:	cf d3       	brcs	80002c5c <idata_load_loop>

80002c64 <idata_load_loop_end>:
  mov     r2, 0
80002c64:	e0 60 00 a0 	mov	r0,160
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002c68:	e0 61 02 80 	mov	r1,640
  cp      r0, r1
  brlo    udata_clear_loop
80002c6c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002c6e:	c0 62       	brcc	80002c7a <udata_clear_loop_end>
80002c70:	30 02       	mov	r2,0
80002c72:	30 03       	mov	r3,0

80002c74 <udata_clear_loop>:
80002c74:	a1 22       	st.d	r0++,r2
80002c76:	02 30       	cp.w	r0,r1
80002c78:	cf e3       	brcs	80002c74 <udata_clear_loop>

80002c7a <udata_clear_loop_end>:
80002c7a:	fe cf f4 4e 	sub	pc,pc,-2994
80002c7e:	d7 03       	nop

80002c80 <pal_trx_frame_write>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_write(uint8_t * data, uint8_t length)
{
80002c80:	eb cd 40 78 	pushm	r3-r6,lr
80002c84:	20 1d       	sub	sp,4
80002c86:	18 94       	mov	r4,r12
80002c88:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002c8a:	e1 b3 00 00 	mfsr	r3,0x0
80002c8e:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002c90:	49 16       	lddpc	r6,80002cd4 <pal_trx_frame_write+0x54>
80002c92:	0d 8b       	ld.ub	r11,r6[0x0]
80002c94:	fe 7c 40 00 	mov	r12,-49152
80002c98:	f0 1f 00 10 	mcall	80002cd8 <pal_trx_frame_write+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FW;
80002c9c:	fa cb ff fc 	sub	r11,sp,-4
80002ca0:	36 08       	mov	r8,96
80002ca2:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80002ca4:	30 1a       	mov	r10,1
80002ca6:	fe 7c 40 00 	mov	r12,-49152
80002caa:	f0 1f 00 0d 	mcall	80002cdc <pal_trx_frame_write+0x5c>

	spi_write_packet(AT86RFX_SPI, data, length);
80002cae:	0a 9a       	mov	r10,r5
80002cb0:	08 9b       	mov	r11,r4
80002cb2:	fe 7c 40 00 	mov	r12,-49152
80002cb6:	f0 1f 00 0a 	mcall	80002cdc <pal_trx_frame_write+0x5c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002cba:	0d 8b       	ld.ub	r11,r6[0x0]
80002cbc:	fe 7c 40 00 	mov	r12,-49152
80002cc0:	f0 1f 00 08 	mcall	80002ce0 <pal_trx_frame_write+0x60>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002cc4:	e6 13 00 01 	andh	r3,0x1,COH
80002cc8:	c0 21       	brne	80002ccc <pal_trx_frame_write+0x4c>
80002cca:	d5 03       	csrf	0x10
}
80002ccc:	2f fd       	sub	sp,-4
80002cce:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002cd2:	00 00       	add	r0,r0
80002cd4:	00 00       	add	r0,r0
80002cd6:	00 08       	add	r8,r0
80002cd8:	80 00       	ld.sh	r0,r0[0x0]
80002cda:	27 24       	sub	r4,114
80002cdc:	80 00       	ld.sh	r0,r0[0x0]
80002cde:	2e 5e       	sub	lr,-27
80002ce0:	80 00       	ld.sh	r0,r0[0x0]
80002ce2:	27 70       	sub	r0,119

80002ce4 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002ce4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ce8:	20 2d       	sub	sp,8
80002cea:	ba cc       	st.b	sp[0x4],r12
80002cec:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002cee:	e1 b6 00 00 	mfsr	r6,0x0
80002cf2:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002cf4:	1b c8       	ld.ub	r8,sp[0x4]
80002cf6:	ea 18 ff ff 	orh	r8,0xffff
80002cfa:	e8 18 ff c0 	orl	r8,0xffc0
80002cfe:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002d00:	49 07       	lddpc	r7,80002d40 <pal_trx_reg_write+0x5c>
80002d02:	0f 8b       	ld.ub	r11,r7[0x0]
80002d04:	fe 7c 40 00 	mov	r12,-49152
80002d08:	f0 1f 00 0f 	mcall	80002d44 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002d0c:	30 1a       	mov	r10,1
80002d0e:	fa cb ff fc 	sub	r11,sp,-4
80002d12:	fe 7c 40 00 	mov	r12,-49152
80002d16:	f0 1f 00 0d 	mcall	80002d48 <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002d1a:	30 1a       	mov	r10,1
80002d1c:	1a 9b       	mov	r11,sp
80002d1e:	fe 7c 40 00 	mov	r12,-49152
80002d22:	f0 1f 00 0a 	mcall	80002d48 <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002d26:	0f 8b       	ld.ub	r11,r7[0x0]
80002d28:	fe 7c 40 00 	mov	r12,-49152
80002d2c:	f0 1f 00 08 	mcall	80002d4c <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002d30:	e6 16 00 01 	andh	r6,0x1,COH
80002d34:	c0 21       	brne	80002d38 <pal_trx_reg_write+0x54>
80002d36:	d5 03       	csrf	0x10
}
80002d38:	2f ed       	sub	sp,-8
80002d3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d3e:	00 00       	add	r0,r0
80002d40:	00 00       	add	r0,r0
80002d42:	00 08       	add	r8,r0
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	27 24       	sub	r4,114
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2e 5e       	sub	lr,-27
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	27 70       	sub	r0,119

80002d50 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002d50:	eb cd 40 c0 	pushm	r6-r7,lr
80002d54:	20 2d       	sub	sp,8
80002d56:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002d58:	30 08       	mov	r8,0
80002d5a:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d5c:	e1 b6 00 00 	mfsr	r6,0x0
80002d60:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002d62:	1b 88       	ld.ub	r8,sp[0x0]
80002d64:	ea 18 ff ff 	orh	r8,0xffff
80002d68:	e8 18 ff 80 	orl	r8,0xff80
80002d6c:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002d6e:	49 17       	lddpc	r7,80002db0 <pal_trx_reg_read+0x60>
80002d70:	0f 8b       	ld.ub	r11,r7[0x0]
80002d72:	fe 7c 40 00 	mov	r12,-49152
80002d76:	f0 1f 00 10 	mcall	80002db4 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002d7a:	30 1a       	mov	r10,1
80002d7c:	1a 9b       	mov	r11,sp
80002d7e:	fe 7c 40 00 	mov	r12,-49152
80002d82:	f0 1f 00 0e 	mcall	80002db8 <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002d86:	30 1a       	mov	r10,1
80002d88:	fa cb ff f9 	sub	r11,sp,-7
80002d8c:	fe 7c 40 00 	mov	r12,-49152
80002d90:	f0 1f 00 0b 	mcall	80002dbc <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002d94:	0f 8b       	ld.ub	r11,r7[0x0]
80002d96:	fe 7c 40 00 	mov	r12,-49152
80002d9a:	f0 1f 00 0a 	mcall	80002dc0 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002d9e:	e6 16 00 01 	andh	r6,0x1,COH
80002da2:	c0 21       	brne	80002da6 <pal_trx_reg_read+0x56>
80002da4:	d5 03       	csrf	0x10

	return register_value;
}
80002da6:	1b fc       	ld.ub	r12,sp[0x7]
80002da8:	2f ed       	sub	sp,-8
80002daa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dae:	00 00       	add	r0,r0
80002db0:	00 00       	add	r0,r0
80002db2:	00 08       	add	r8,r0
80002db4:	80 00       	ld.sh	r0,r0[0x0]
80002db6:	27 24       	sub	r4,114
80002db8:	80 00       	ld.sh	r0,r0[0x0]
80002dba:	2e 5e       	sub	lr,-27
80002dbc:	80 00       	ld.sh	r0,r0[0x0]
80002dbe:	2e 0e       	sub	lr,-32
80002dc0:	80 00       	ld.sh	r0,r0[0x0]
80002dc2:	27 70       	sub	r0,119

80002dc4 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002dc4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002dc8:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002dca:	e6 18 00 01 	andh	r8,0x1,COH
80002dce:	c0 21       	brne	80002dd2 <sysclk_init+0xe>
      cpu_irq_enable();
80002dd0:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002dd2:	5e fc       	retal	r12

80002dd4 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002dd4:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002dd6:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002dda:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002ddc:	a3 6c       	lsl	r12,0x2
80002dde:	fe 7a 14 20 	mov	r10,-60384
80002de2:	f8 0a 00 08 	add	r8,r12,r10
80002de6:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002de8:	30 1e       	mov	lr,1
80002dea:	fc 0b 09 4b 	lsl	r11,lr,r11
80002dee:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002df0:	32 0a       	mov	r10,32
80002df2:	ea 1a aa 00 	orh	r10,0xaa00
80002df6:	14 0c       	add	r12,r10
80002df8:	fe 7a 14 00 	mov	r10,-60416
80002dfc:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002e00:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e02:	12 98       	mov	r8,r9
80002e04:	e6 18 00 01 	andh	r8,0x1,COH
80002e08:	c0 21       	brne	80002e0c <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002e0a:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002e0c:	d8 02       	popm	pc

80002e0e <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002e0e:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e12:	58 0a       	cp.w	r10,0
80002e14:	c0 61       	brne	80002e20 <spi_read_packet+0x12>
80002e16:	c2 28       	rjmp	80002e5a <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e18:	58 08       	cp.w	r8,0
80002e1a:	c1 d0       	breq	80002e54 <spi_read_packet+0x46>
80002e1c:	20 18       	sub	r8,1
80002e1e:	c0 68       	rjmp	80002e2a <spi_read_packet+0x1c>
80002e20:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e24:	e0 67 00 ff 	mov	r7,255
80002e28:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002e2a:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002e2c:	e2 19 00 02 	andl	r9,0x2,COH
80002e30:	cf 40       	breq	80002e18 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e32:	99 37       	st.w	r12[0xc],r7
80002e34:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002e36:	c0 48       	rjmp	80002e3e <spi_read_packet+0x30>
			if (!timeout--) {
80002e38:	58 08       	cp.w	r8,0
80002e3a:	c0 d0       	breq	80002e54 <spi_read_packet+0x46>
80002e3c:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002e3e:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002e40:	e2 19 02 01 	andl	r9,0x201,COH
80002e44:	e0 49 02 01 	cp.w	r9,513
80002e48:	cf 81       	brne	80002e38 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002e4a:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002e4c:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002e4e:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e50:	ce c1       	brne	80002e28 <spi_read_packet+0x1a>
80002e52:	c0 48       	rjmp	80002e5a <spi_read_packet+0x4c>
80002e54:	3f dc       	mov	r12,-3
80002e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e5a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002e5e <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002e5e:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002e60:	58 0a       	cp.w	r10,0
80002e62:	c0 81       	brne	80002e72 <spi_write_packet+0x14>
80002e64:	c1 28       	rjmp	80002e88 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e66:	58 08       	cp.w	r8,0
80002e68:	c0 31       	brne	80002e6e <spi_write_packet+0x10>
80002e6a:	3f dc       	mov	r12,-3
80002e6c:	d8 02       	popm	pc
80002e6e:	20 18       	sub	r8,1
80002e70:	c0 48       	rjmp	80002e78 <spi_write_packet+0x1a>
80002e72:	e0 6e 3a 98 	mov	lr,15000
80002e76:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002e78:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002e7a:	e2 19 00 02 	andl	r9,0x2,COH
80002e7e:	cf 40       	breq	80002e66 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e80:	17 38       	ld.ub	r8,r11++
80002e82:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002e84:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002e86:	cf 81       	brne	80002e76 <spi_write_packet+0x18>
80002e88:	d8 0a       	popm	pc,r12=0
80002e8a:	d7 03       	nop
80002e8c:	68 6f       	ld.w	pc,r4[0x18]
80002e8e:	6c 61       	ld.w	r1,r6[0x18]
80002e90:	20 73       	sub	r3,7
80002e92:	6f 79       	ld.w	r9,r7[0x5c]
80002e94:	20 63       	sub	r3,6
80002e96:	6f 6c       	ld.w	r12,r7[0x58]
80002e98:	61 64       	ld.w	r4,r0[0x58]
80002e9a:	6f 00       	ld.w	r0,r7[0x40]

80002e9c <promiscuous_mode>:
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); //vuelvo a estador RX ON
	estadoPorPc();
}

void promiscuous_mode()
{
80002e9c:	eb cd 40 e0 	pushm	r5-r7,lr
	for (address=0x20; address<0x2C; address++)
80002ea0:	32 09       	mov	r9,32
80002ea2:	4a f8       	lddpc	r8,80002f5c <promiscuous_mode+0xc0>
80002ea4:	b0 89       	st.b	r8[0x0],r9
80002ea6:	32 0c       	mov	r12,32
	{
		pal_trx_reg_write(address, 0x00);
80002ea8:	30 05       	mov	r5,0
	estadoPorPc();
}

void promiscuous_mode()
{
	for (address=0x20; address<0x2C; address++)
80002eaa:	10 97       	mov	r7,r8
80002eac:	32 b6       	mov	r6,43
	{
		pal_trx_reg_write(address, 0x00);
80002eae:	0a 9b       	mov	r11,r5
80002eb0:	f0 1f 00 2c 	mcall	80002f60 <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002eb4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002eb8:	f0 ca fd c1 	sub	r10,r8,-575
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ebc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ec0:	14 38       	cp.w	r8,r10
80002ec2:	e0 88 00 08 	brls	80002ed2 <promiscuous_mode+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ec6:	12 38       	cp.w	r8,r9
80002ec8:	fe 98 ff fa 	brls	80002ebc <promiscuous_mode+0x20>
80002ecc:	12 3a       	cp.w	r10,r9
80002ece:	c3 23       	brcs	80002f32 <promiscuous_mode+0x96>
80002ed0:	cf 6b       	rjmp	80002ebc <promiscuous_mode+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ed2:	12 38       	cp.w	r8,r9
80002ed4:	e0 8b 00 2f 	brhi	80002f32 <promiscuous_mode+0x96>
80002ed8:	12 3a       	cp.w	r10,r9
80002eda:	c2 c3       	brcs	80002f32 <promiscuous_mode+0x96>
80002edc:	cf 0b       	rjmp	80002ebc <promiscuous_mode+0x20>
		delay_ms(5);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
80002ede:	30 2b       	mov	r11,2
80002ee0:	31 7c       	mov	r12,23
80002ee2:	f0 1f 00 20 	mcall	80002f60 <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ee6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002eea:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002eee:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ef2:	14 38       	cp.w	r8,r10
80002ef4:	e0 88 00 08 	brls	80002f04 <promiscuous_mode+0x68>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ef8:	12 38       	cp.w	r8,r9
80002efa:	fe 98 ff fa 	brls	80002eee <promiscuous_mode+0x52>
80002efe:	12 3a       	cp.w	r10,r9
80002f00:	c2 23       	brcs	80002f44 <promiscuous_mode+0xa8>
80002f02:	cf 6b       	rjmp	80002eee <promiscuous_mode+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f04:	12 38       	cp.w	r8,r9
80002f06:	e0 8b 00 1f 	brhi	80002f44 <promiscuous_mode+0xa8>
80002f0a:	12 3a       	cp.w	r10,r9
80002f0c:	c1 c3       	brcs	80002f44 <promiscuous_mode+0xa8>
80002f0e:	cf 0b       	rjmp	80002eee <promiscuous_mode+0x52>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f10:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f14:	14 38       	cp.w	r8,r10
80002f16:	e0 88 00 08 	brls	80002f26 <promiscuous_mode+0x8a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f1a:	12 38       	cp.w	r8,r9
80002f1c:	fe 98 ff fa 	brls	80002f10 <promiscuous_mode+0x74>
80002f20:	12 3a       	cp.w	r10,r9
80002f22:	c1 b3       	brcs	80002f58 <promiscuous_mode+0xbc>
80002f24:	cf 6b       	rjmp	80002f10 <promiscuous_mode+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f26:	12 38       	cp.w	r8,r9
80002f28:	e0 8b 00 18 	brhi	80002f58 <promiscuous_mode+0xbc>
80002f2c:	12 3a       	cp.w	r10,r9
80002f2e:	c1 53       	brcs	80002f58 <promiscuous_mode+0xbc>
80002f30:	cf 0b       	rjmp	80002f10 <promiscuous_mode+0x74>
	estadoPorPc();
}

void promiscuous_mode()
{
	for (address=0x20; address<0x2C; address++)
80002f32:	0f 8c       	ld.ub	r12,r7[0x0]
80002f34:	2f fc       	sub	r12,-1
80002f36:	5c 5c       	castu.b	r12
80002f38:	ae 8c       	st.b	r7[0x0],r12
80002f3a:	ec 0c 18 00 	cp.b	r12,r6
80002f3e:	fe 98 ff b8 	brls	80002eae <promiscuous_mode+0x12>
80002f42:	cc eb       	rjmp	80002ede <promiscuous_mode+0x42>
		pal_trx_reg_write(address, 0x00);
		delay_ms(5);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_CSMA_SEED_1, 0xD2); // AACK_DIS_ACK = 1 && AACK_FVN_MODE = 3
80002f44:	e0 6b 00 d2 	mov	r11,210
80002f48:	32 ec       	mov	r12,46
80002f4a:	f0 1f 00 06 	mcall	80002f60 <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f4e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f52:	f0 ca ff ff 	sub	r10,r8,-1
80002f56:	cd db       	rjmp	80002f10 <promiscuous_mode+0x74>
80002f58:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002f5c:	00 00       	add	r0,r0
80002f5e:	01 a9       	ld.ub	r9,r0[0x2]
80002f60:	80 00       	ld.sh	r0,r0[0x0]
80002f62:	2c e4       	sub	r4,-50

80002f64 <getStateAT86RF212>:
	
	else
		sprintf(temps,"%s","X");
}
uint8_t getStateAT86RF212(void)
{
80002f64:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80002f66:	30 1c       	mov	r12,1
80002f68:	f0 1f 00 03 	mcall	80002f74 <getStateAT86RF212+0x10>
}
80002f6c:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002f70:	d8 02       	popm	pc
80002f72:	00 00       	add	r0,r0
80002f74:	80 00       	ld.sh	r0,r0[0x0]
80002f76:	2d 50       	sub	r0,-43

80002f78 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002f78:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002f7a:	30 0b       	mov	r11,0
80002f7c:	fe 7c 5c 00 	mov	r12,-41984
80002f80:	f0 1f 00 17 	mcall	80002fdc <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002f84:	49 78       	lddpc	r8,80002fe0 <tc_irq+0x68>
80002f86:	70 09       	ld.w	r9,r8[0x0]
80002f88:	2f f9       	sub	r9,-1
80002f8a:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002f8c:	70 08       	ld.w	r8,r8[0x0]
80002f8e:	59 38       	cp.w	r8,19
80002f90:	e0 8b 00 0c 	brhi	80002fa8 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002f94:	32 9c       	mov	r12,41
80002f96:	f0 1f 00 14 	mcall	80002fe4 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002f9a:	30 4c       	mov	r12,4
80002f9c:	f0 1f 00 12 	mcall	80002fe4 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002fa0:	30 bc       	mov	r12,11
80002fa2:	f0 1f 00 11 	mcall	80002fe4 <tc_irq+0x6c>
		return;
80002fa6:	c1 98       	rjmp	80002fd8 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002fa8:	48 e8       	lddpc	r8,80002fe0 <tc_irq+0x68>
80002faa:	70 08       	ld.w	r8,r8[0x0]
80002fac:	59 58       	cp.w	r8,21
80002fae:	c0 41       	brne	80002fb6 <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002fb0:	32 9c       	mov	r12,41
80002fb2:	f0 1f 00 0d 	mcall	80002fe4 <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002fb6:	48 b8       	lddpc	r8,80002fe0 <tc_irq+0x68>
80002fb8:	70 08       	ld.w	r8,r8[0x0]
80002fba:	59 68       	cp.w	r8,22
80002fbc:	c0 41       	brne	80002fc4 <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002fbe:	30 4c       	mov	r12,4
80002fc0:	f0 1f 00 09 	mcall	80002fe4 <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002fc4:	48 78       	lddpc	r8,80002fe0 <tc_irq+0x68>
80002fc6:	70 08       	ld.w	r8,r8[0x0]
80002fc8:	59 78       	cp.w	r8,23
80002fca:	c0 71       	brne	80002fd8 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002fcc:	30 bc       	mov	r12,11
80002fce:	f0 1f 00 06 	mcall	80002fe4 <tc_irq+0x6c>
		tc_tick = 1;
80002fd2:	30 19       	mov	r9,1
80002fd4:	48 38       	lddpc	r8,80002fe0 <tc_irq+0x68>
80002fd6:	91 09       	st.w	r8[0x0],r9
	}
}
80002fd8:	d4 02       	popm	lr
80002fda:	d6 03       	rete
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	29 16       	sub	r6,-111
80002fe0:	00 00       	add	r0,r0
80002fe2:	00 1c       	sub	r12,r0
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	25 90       	sub	r0,89

80002fe8 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80002fe8:	d4 01       	pushm	lr
80002fea:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80002fec:	30 0b       	mov	r11,0
80002fee:	49 b8       	lddpc	r8,80003058 <usart_int_handler_RS232+0x70>
80002ff0:	70 0c       	ld.w	r12,r8[0x0]
80002ff2:	f0 1f 00 1b 	mcall	8000305c <usart_int_handler_RS232+0x74>
	
	uint8_t c=0;
80002ff6:	fa cb ff fc 	sub	r11,sp,-4
80002ffa:	30 08       	mov	r8,0
80002ffc:	16 f8       	st.b	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80002ffe:	fe 7c 38 00 	mov	r12,-51200
80003002:	f0 1f 00 18 	mcall	80003060 <usart_int_handler_RS232+0x78>
80003006:	c2 61       	brne	80003052 <usart_int_handler_RS232+0x6a>
		return;
	
	cola_PC[cola_PC_nw] = c;
80003008:	49 78       	lddpc	r8,80003064 <usart_int_handler_RS232+0x7c>
8000300a:	11 88       	ld.ub	r8,r8[0x0]
8000300c:	1b b9       	ld.ub	r9,sp[0x3]
8000300e:	49 7a       	lddpc	r10,80003068 <usart_int_handler_RS232+0x80>
80003010:	f4 08 0b 09 	st.b	r10[r8],r9
	
	if (cola_PC[cola_PC_nw] == 0x01)
80003014:	30 1a       	mov	r10,1
80003016:	f4 09 18 00 	cp.b	r9,r10
8000301a:	c0 c1       	brne	80003032 <usart_int_handler_RS232+0x4a>
	{	
		if (!configuracion){
8000301c:	49 49       	lddpc	r9,8000306c <usart_int_handler_RS232+0x84>
8000301e:	13 8a       	ld.ub	r10,r9[0x0]
80003020:	30 09       	mov	r9,0
80003022:	f2 0a 18 00 	cp.b	r10,r9
80003026:	c0 31       	brne	8000302c <usart_int_handler_RS232+0x44>
			pConfiguracion = cola_PC_nw;
80003028:	49 29       	lddpc	r9,80003070 <usart_int_handler_RS232+0x88>
8000302a:	b2 88       	st.b	r9[0x0],r8
		}
		configuracion = true;
8000302c:	30 1a       	mov	r10,1
8000302e:	49 09       	lddpc	r9,8000306c <usart_int_handler_RS232+0x84>
80003030:	b2 8a       	st.b	r9[0x0],r10
		
	}
	cola_PC_nw++;
80003032:	2f f8       	sub	r8,-1
80003034:	48 c9       	lddpc	r9,80003064 <usart_int_handler_RS232+0x7c>
80003036:	b2 88       	st.b	r9[0x0],r8
	
	if (cola_PC_nw >= tamano_cola)
80003038:	3c 79       	mov	r9,-57
8000303a:	f2 08 18 00 	cp.b	r8,r9
8000303e:	e0 88 00 05 	brls	80003048 <usart_int_handler_RS232+0x60>
	cola_PC_nw = 0;
80003042:	30 09       	mov	r9,0
80003044:	48 88       	lddpc	r8,80003064 <usart_int_handler_RS232+0x7c>
80003046:	b0 89       	st.b	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003048:	30 0b       	mov	r11,0
8000304a:	48 48       	lddpc	r8,80003058 <usart_int_handler_RS232+0x70>
8000304c:	70 0c       	ld.w	r12,r8[0x0]
8000304e:	f0 1f 00 0a 	mcall	80003074 <usart_int_handler_RS232+0x8c>
	return;

	
}
80003052:	2f fd       	sub	sp,-4
80003054:	d4 02       	popm	lr
80003056:	d6 03       	rete
80003058:	00 00       	add	r0,r0
8000305a:	00 18       	sub	r8,r0
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	29 04       	sub	r4,-112
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	2b 00       	sub	r0,-80
80003064:	00 00       	add	r0,r0
80003066:	01 a6       	ld.ub	r6,r0[0x2]
80003068:	00 00       	add	r0,r0
8000306a:	01 b4       	ld.ub	r4,r0[0x3]
8000306c:	00 00       	add	r0,r0
8000306e:	01 a4       	ld.ub	r4,r0[0x2]
80003070:	00 00       	add	r0,r0
80003072:	01 a7       	ld.ub	r7,r0[0x2]
80003074:	80 00       	ld.sh	r0,r0[0x0]
80003076:	28 f2       	sub	r2,-113

80003078 <reset>:
	RST_HIGH();
	
	delay_ms(1);
}
void reset()
{
80003078:	d4 01       	pushm	lr
	SLP_TR_LOW();
8000307a:	32 7c       	mov	r12,39
8000307c:	f0 1f 00 1e 	mcall	800030f4 <reset+0x7c>
	RST_HIGH();
80003080:	32 8c       	mov	r12,40
80003082:	f0 1f 00 1e 	mcall	800030f8 <reset+0x80>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003086:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000308a:	f0 ca ff d2 	sub	r10,r8,-46
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000308e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003092:	14 38       	cp.w	r8,r10
80003094:	e0 88 00 08 	brls	800030a4 <reset+0x2c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003098:	12 38       	cp.w	r8,r9
8000309a:	fe 98 ff fa 	brls	8000308e <reset+0x16>
8000309e:	12 3a       	cp.w	r10,r9
800030a0:	c1 93       	brcs	800030d2 <reset+0x5a>
800030a2:	cf 6b       	rjmp	8000308e <reset+0x16>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030a4:	12 38       	cp.w	r8,r9
800030a6:	e0 8b 00 16 	brhi	800030d2 <reset+0x5a>
800030aa:	12 3a       	cp.w	r10,r9
800030ac:	c1 33       	brcs	800030d2 <reset+0x5a>
800030ae:	cf 0b       	rjmp	8000308e <reset+0x16>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030b0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030b4:	14 38       	cp.w	r8,r10
800030b6:	e0 88 00 08 	brls	800030c6 <reset+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030ba:	12 38       	cp.w	r8,r9
800030bc:	fe 98 ff fa 	brls	800030b0 <reset+0x38>
800030c0:	12 3a       	cp.w	r10,r9
800030c2:	c1 03       	brcs	800030e2 <reset+0x6a>
800030c4:	cf 6b       	rjmp	800030b0 <reset+0x38>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030c6:	12 38       	cp.w	r8,r9
800030c8:	e0 8b 00 0d 	brhi	800030e2 <reset+0x6a>
800030cc:	12 3a       	cp.w	r10,r9
800030ce:	c0 a3       	brcs	800030e2 <reset+0x6a>
800030d0:	cf 0b       	rjmp	800030b0 <reset+0x38>
	DELAY_US(400);
	RST_LOW();
800030d2:	32 8c       	mov	r12,40
800030d4:	f0 1f 00 08 	mcall	800030f4 <reset+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030d8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030dc:	f0 ca ff f8 	sub	r10,r8,-8
800030e0:	ce 8b       	rjmp	800030b0 <reset+0x38>
	DELAY_US(63);
	RST_LOW();
800030e2:	32 8c       	mov	r12,40
800030e4:	f0 1f 00 04 	mcall	800030f4 <reset+0x7c>
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
800030e8:	30 8b       	mov	r11,8
800030ea:	30 3c       	mov	r12,3
800030ec:	f0 1f 00 04 	mcall	800030fc <reset+0x84>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
800030f0:	d8 02       	popm	pc
800030f2:	00 00       	add	r0,r0
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	25 7a       	sub	r10,87
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	25 64       	sub	r4,86
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	2c e4       	sub	r4,-50

80003100 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003100:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003102:	18 9b       	mov	r11,r12
80003104:	30 2c       	mov	r12,2
80003106:	f0 1f 00 02 	mcall	8000310c <sysclk_enable_pba_module+0xc>
}
8000310a:	d8 02       	popm	pc
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	2d d4       	sub	r4,-35

80003110 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
80003110:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
80003112:	30 bc       	mov	r12,11
80003114:	f0 1f 00 05 	mcall	80003128 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
80003118:	e0 7a c1 38 	mov	r10,115000
8000311c:	48 4b       	lddpc	r11,8000312c <rs_232_init_usart+0x1c>
8000311e:	fe 7c 38 00 	mov	r12,-51200
80003122:	f0 1f 00 04 	mcall	80003130 <rs_232_init_usart+0x20>
	return estado_usart2;
}
80003126:	d8 02       	popm	pc
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	31 00       	mov	r0,16
8000312c:	00 00       	add	r0,r0
8000312e:	00 0c       	add	r12,r0
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	2b 74       	sub	r4,-73

80003134 <rs_232_init_pins>:
	//

}

void rs_232_init_pins(void)
{
80003134:	d4 01       	pushm	lr
80003136:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
80003138:	48 88       	lddpc	r8,80003158 <rs_232_init_pins+0x24>
8000313a:	1a 9c       	mov	r12,sp
8000313c:	70 09       	ld.w	r9,r8[0x0]
8000313e:	50 09       	stdsp	sp[0x0],r9
80003140:	70 19       	ld.w	r9,r8[0x4]
80003142:	50 19       	stdsp	sp[0x4],r9
80003144:	70 29       	ld.w	r9,r8[0x8]
80003146:	50 29       	stdsp	sp[0x8],r9
80003148:	70 38       	ld.w	r8,r8[0xc]
8000314a:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
8000314c:	30 2b       	mov	r11,2
8000314e:	f0 1f 00 04 	mcall	8000315c <rs_232_init_pins+0x28>
}
80003152:	2f cd       	sub	sp,-16
80003154:	d8 02       	popm	pc
80003156:	00 00       	add	r0,r0
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	41 10       	lddsp	r0,sp[0x44]
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	24 7c       	sub	r12,71

80003160 <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
80003160:	d4 01       	pushm	lr
80003162:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003164:	48 88       	lddpc	r8,80003184 <init_i2c_pins+0x24>
80003166:	1a 9c       	mov	r12,sp
80003168:	70 09       	ld.w	r9,r8[0x0]
8000316a:	50 09       	stdsp	sp[0x0],r9
8000316c:	70 19       	ld.w	r9,r8[0x4]
8000316e:	50 19       	stdsp	sp[0x4],r9
80003170:	70 29       	ld.w	r9,r8[0x8]
80003172:	50 29       	stdsp	sp[0x8],r9
80003174:	70 38       	ld.w	r8,r8[0xc]
80003176:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003178:	30 2b       	mov	r11,2
8000317a:	f0 1f 00 04 	mcall	80003188 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000317e:	2f cd       	sub	sp,-16
80003180:	d8 02       	popm	pc
80003182:	00 00       	add	r0,r0
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	3d 98       	mov	r8,-39
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	24 7c       	sub	r12,71

8000318c <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
8000318c:	d4 01       	pushm	lr
8000318e:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
80003190:	48 d8       	lddpc	r8,800031c4 <spi_init_pins+0x38>
80003192:	1a 9c       	mov	r12,sp
80003194:	70 09       	ld.w	r9,r8[0x0]
80003196:	50 09       	stdsp	sp[0x0],r9
80003198:	70 19       	ld.w	r9,r8[0x4]
8000319a:	50 19       	stdsp	sp[0x4],r9
8000319c:	70 29       	ld.w	r9,r8[0x8]
8000319e:	50 29       	stdsp	sp[0x8],r9
800031a0:	70 39       	ld.w	r9,r8[0xc]
800031a2:	50 39       	stdsp	sp[0xc],r9
800031a4:	fa c9 ff f0 	sub	r9,sp,-16
800031a8:	2f 08       	sub	r8,-16
800031aa:	70 0a       	ld.w	r10,r8[0x0]
800031ac:	93 0a       	st.w	r9[0x0],r10
800031ae:	70 1a       	ld.w	r10,r8[0x4]
800031b0:	93 1a       	st.w	r9[0x4],r10
800031b2:	70 2a       	ld.w	r10,r8[0x8]
800031b4:	93 2a       	st.w	r9[0x8],r10
800031b6:	70 38       	ld.w	r8,r8[0xc]
800031b8:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
800031ba:	30 4b       	mov	r11,4
800031bc:	f0 1f 00 03 	mcall	800031c8 <spi_init_pins+0x3c>
}
800031c0:	2f 8d       	sub	sp,-32
800031c2:	d8 02       	popm	pc
800031c4:	80 00       	ld.sh	r0,r0[0x0]
800031c6:	40 f0       	lddsp	r0,sp[0x3c]
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	24 7c       	sub	r12,71

800031cc <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
800031cc:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
800031ce:	30 5b       	mov	r11,5
800031d0:	30 4c       	mov	r12,4
800031d2:	f0 1f 00 06 	mcall	800031e8 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800031d6:	30 5b       	mov	r11,5
800031d8:	30 bc       	mov	r12,11
800031da:	f0 1f 00 04 	mcall	800031e8 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800031de:	30 5b       	mov	r11,5
800031e0:	32 9c       	mov	r12,41
800031e2:	f0 1f 00 02 	mcall	800031e8 <led_init_pins+0x1c>
}
800031e6:	d8 02       	popm	pc
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	24 ac       	sub	r12,74

800031ec <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
800031ec:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800031ee:	f0 1f 00 08 	mcall	8000320c <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800031f2:	30 4b       	mov	r11,4
800031f4:	30 dc       	mov	r12,13
800031f6:	f0 1f 00 07 	mcall	80003210 <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800031fa:	30 6b       	mov	r11,6
800031fc:	30 dc       	mov	r12,13
800031fe:	f0 1f 00 06 	mcall	80003214 <init_rf_pins+0x28>
	//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
80003202:	30 dc       	mov	r12,13
80003204:	f0 1f 00 05 	mcall	80003218 <init_rf_pins+0x2c>

	// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	//

}
80003208:	d8 02       	popm	pc
8000320a:	00 00       	add	r0,r0
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	31 8c       	mov	r12,24
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	24 ac       	sub	r12,74
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	23 e8       	sub	r8,62
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	25 a6       	sub	r6,90

8000321c <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
8000321c:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
8000321e:	18 9b       	mov	r11,r12
80003220:	fe 7c 38 00 	mov	r12,-51200
80003224:	f0 1f 00 02 	mcall	8000322c <escribir_linea_pc+0x10>
}
80003228:	d8 02       	popm	pc
8000322a:	00 00       	add	r0,r0
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	2b 24       	sub	r4,-78

80003230 <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
80003230:	eb cd 40 80 	pushm	r7,lr
	IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
80003234:	30 fc       	mov	r12,15
80003236:	f0 1f 00 15 	mcall	80003288 <eic_int_handler2+0x58>
	IRQ_STATUS &= 0x0C;
8000323a:	49 57       	lddpc	r7,8000328c <eic_int_handler2+0x5c>
8000323c:	e2 1c 00 0c 	andl	r12,0xc,COH
80003240:	ae 8c       	st.b	r7[0x0],r12
	//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
	//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
80003242:	30 2b       	mov	r11,2
80003244:	fe 7c 24 00 	mov	r12,-56320
80003248:	f0 1f 00 12 	mcall	80003290 <eic_int_handler2+0x60>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		//IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
		//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
		//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		switch (IRQ_STATUS)
8000324c:	0f 88       	ld.ub	r8,r7[0x0]
8000324e:	30 49       	mov	r9,4
80003250:	f2 08 18 00 	cp.b	r8,r9
80003254:	c1 10       	breq	80003276 <eic_int_handler2+0x46>
80003256:	30 89       	mov	r9,8
80003258:	f2 08 18 00 	cp.b	r8,r9
8000325c:	c1 21       	brne	80003280 <eic_int_handler2+0x50>
		{
			case TRX_IRQ_TRX_END:
				escribir_linea_pc("\n\n --> Trama enviada :) :) \r\n");
8000325e:	48 ec       	lddpc	r12,80003294 <eic_int_handler2+0x64>
80003260:	f0 1f 00 0e 	mcall	80003298 <eic_int_handler2+0x68>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80003264:	fe 78 40 00 	mov	r8,-49152
80003268:	70 2c       	ld.w	r12,r8[0x8]
				spi = (uint8_t) spi_get(AT86RFX_SPI);
8000326a:	5c 5c       	castu.b	r12
8000326c:	48 c8       	lddpc	r8,8000329c <eic_int_handler2+0x6c>
8000326e:	b0 8c       	st.b	r8[0x0],r12
				escribir_linea_pc(spi);
80003270:	f0 1f 00 0a 	mcall	80003298 <eic_int_handler2+0x68>
				
			break;
80003274:	c0 68       	rjmp	80003280 <eic_int_handler2+0x50>
80003276:	fe 78 40 00 	mov	r8,-49152
8000327a:	70 29       	ld.w	r9,r8[0x8]
			case TRX_IRQ_RX_START:
				spi = spi_get(AT86RFX_SPI);
8000327c:	48 88       	lddpc	r8,8000329c <eic_int_handler2+0x6c>
8000327e:	b0 89       	st.b	r8[0x0],r9
				//escribir_linea_pc(rxTrama()); // creo q se tendria que leer la interrupcion de la SPI
			break;
		}
}
80003280:	e3 cd 40 80 	ldm	sp++,r7,lr
80003284:	d6 03       	rete
80003286:	00 00       	add	r0,r0
80003288:	80 00       	ld.sh	r0,r0[0x0]
8000328a:	2d 50       	sub	r0,-43
8000328c:	00 00       	add	r0,r0
8000328e:	02 7e       	tst	lr,r1
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	23 cc       	sub	r12,60
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	3d b8       	mov	r8,-37
80003298:	80 00       	ld.sh	r0,r0[0x0]
8000329a:	32 1c       	mov	r12,33
8000329c:	00 00       	add	r0,r0
8000329e:	02 7d       	tst	sp,r1

800032a0 <init_AT86RF212>:
	}
	delay_ms(1);
}

uint8_t init_AT86RF212(void)
{
800032a0:	eb cd 40 80 	pushm	r7,lr
	escribir_linea_pc("\n Inicializando AT86RF212 \n\n");
800032a4:	4c 5c       	lddpc	r12,800033b8 <init_AT86RF212+0x118>
800032a6:	f0 1f 00 46 	mcall	800033bc <init_AT86RF212+0x11c>
	Disable_global_interrupt();
800032aa:	d3 03       	ssrf	0x10
	
	//SLP_TR_LOW();
	
	
	//estadoPorPc();
	reset();
800032ac:	f0 1f 00 45 	mcall	800033c0 <init_AT86RF212+0x120>
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
800032b0:	30 0b       	mov	r11,0
800032b2:	30 ec       	mov	r12,14
800032b4:	f0 1f 00 44 	mcall	800033c4 <init_AT86RF212+0x124>
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
800032b8:	30 3b       	mov	r11,3
800032ba:	30 2c       	mov	r12,2
800032bc:	f0 1f 00 42 	mcall	800033c4 <init_AT86RF212+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032c0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032c4:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800032c8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800032cc:	14 38       	cp.w	r8,r10
800032ce:	e0 88 00 08 	brls	800032de <init_AT86RF212+0x3e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800032d2:	12 38       	cp.w	r8,r9
800032d4:	fe 98 ff fa 	brls	800032c8 <init_AT86RF212+0x28>
800032d8:	12 3a       	cp.w	r10,r9
800032da:	c0 73       	brcs	800032e8 <init_AT86RF212+0x48>
800032dc:	cf 6b       	rjmp	800032c8 <init_AT86RF212+0x28>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800032de:	12 38       	cp.w	r8,r9
800032e0:	e0 8b 00 04 	brhi	800032e8 <init_AT86RF212+0x48>
800032e4:	12 3a       	cp.w	r10,r9
800032e6:	cf 12       	brcc	800032c8 <init_AT86RF212+0x28>
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	
	//variable1=getStateAT86RF212();
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
800032e8:	30 87       	mov	r7,8
800032ea:	f0 1f 00 38 	mcall	800033c8 <init_AT86RF212+0x128>
800032ee:	ee 0c 18 00 	cp.b	r12,r7
800032f2:	cf c1       	brne	800032ea <init_AT86RF212+0x4a>
	pal_trx_reg_write(RG_TRX_CTRL_0, 0x08);
800032f4:	30 8b       	mov	r11,8
800032f6:	30 3c       	mov	r12,3
800032f8:	f0 1f 00 33 	mcall	800033c4 <init_AT86RF212+0x124>
	//pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz set channel ->

	pal_trx_reg_write(RG_TRX_CTRL_1, 0x2E); // 1 -> TX AUTO_CRC && SPI_CMD_MODE -> 3 && 1-> IRQ_MASK_MODE
800032fc:	32 eb       	mov	r11,46
800032fe:	30 4c       	mov	r12,4
80003300:	f0 1f 00 31 	mcall	800033c4 <init_AT86RF212+0x124>
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
80003304:	30 cb       	mov	r11,12
80003306:	30 ec       	mov	r12,14
80003308:	f0 1f 00 2f 	mcall	800033c4 <init_AT86RF212+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000330c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003310:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003314:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003318:	14 38       	cp.w	r8,r10
8000331a:	e0 88 00 08 	brls	8000332a <init_AT86RF212+0x8a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000331e:	12 38       	cp.w	r8,r9
80003320:	fe 98 ff fa 	brls	80003314 <init_AT86RF212+0x74>
80003324:	12 3a       	cp.w	r10,r9
80003326:	c3 53       	brcs	80003390 <init_AT86RF212+0xf0>
80003328:	cf 6b       	rjmp	80003314 <init_AT86RF212+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000332a:	12 38       	cp.w	r8,r9
8000332c:	e0 8b 00 32 	brhi	80003390 <init_AT86RF212+0xf0>
80003330:	12 3a       	cp.w	r10,r9
80003332:	c2 f3       	brcs	80003390 <init_AT86RF212+0xf0>
80003334:	cf 0b       	rjmp	80003314 <init_AT86RF212+0x74>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003336:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000333a:	14 38       	cp.w	r8,r10
8000333c:	e0 88 00 08 	brls	8000334c <init_AT86RF212+0xac>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003340:	12 38       	cp.w	r8,r9
80003342:	fe 98 ff fa 	brls	80003336 <init_AT86RF212+0x96>
80003346:	12 3a       	cp.w	r10,r9
80003348:	c2 d3       	brcs	800033a2 <init_AT86RF212+0x102>
8000334a:	cf 6b       	rjmp	80003336 <init_AT86RF212+0x96>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000334c:	12 38       	cp.w	r8,r9
8000334e:	e0 8b 00 2a 	brhi	800033a2 <init_AT86RF212+0x102>
80003352:	12 3a       	cp.w	r10,r9
80003354:	c2 73       	brcs	800033a2 <init_AT86RF212+0x102>
80003356:	cf 0b       	rjmp	80003336 <init_AT86RF212+0x96>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003358:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000335c:	14 38       	cp.w	r8,r10
8000335e:	e0 88 00 08 	brls	8000336e <init_AT86RF212+0xce>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003362:	12 38       	cp.w	r8,r9
80003364:	fe 98 ff fa 	brls	80003358 <init_AT86RF212+0xb8>
80003368:	12 3a       	cp.w	r10,r9
8000336a:	c0 73       	brcs	80003378 <init_AT86RF212+0xd8>
8000336c:	cf 6b       	rjmp	80003358 <init_AT86RF212+0xb8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000336e:	12 38       	cp.w	r8,r9
80003370:	e0 8b 00 04 	brhi	80003378 <init_AT86RF212+0xd8>
80003374:	12 3a       	cp.w	r10,r9
80003376:	cf 12       	brcc	80003358 <init_AT86RF212+0xb8>
	//PAL_WAIT_1_US();
	promiscuous_mode();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en 
// 	variable1=getStateAT86RF212();
	DELAY_US(TIME_TRX_OFF_PLL_ON );
 	while (getStateAT86RF212()!=CMD_PLL_ON);
80003378:	30 97       	mov	r7,9
8000337a:	f0 1f 00 14 	mcall	800033c8 <init_AT86RF212+0x128>
8000337e:	ee 0c 18 00 	cp.b	r12,r7
80003382:	cf c1       	brne	8000337a <init_AT86RF212+0xda>
	//cpu_irq_enable();
	Enable_global_interrupt();
80003384:	d5 03       	csrf	0x10
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
80003386:	49 2c       	lddpc	r12,800033cc <init_AT86RF212+0x12c>
80003388:	f0 1f 00 0d 	mcall	800033bc <init_AT86RF212+0x11c>
}
8000338c:	e3 cd 80 80 	ldm	sp++,r7,pc

	pal_trx_reg_write(RG_TRX_CTRL_1, 0x2E); // 1 -> TX AUTO_CRC && SPI_CMD_MODE -> 3 && 1-> IRQ_MASK_MODE
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_CTRL_2, 0x28); // O-QPSK 100kb/s
80003390:	32 8b       	mov	r11,40
80003392:	30 cc       	mov	r12,12
80003394:	f0 1f 00 0c 	mcall	800033c4 <init_AT86RF212+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003398:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000339c:	f0 ca ff ff 	sub	r10,r8,-1
800033a0:	cc bb       	rjmp	80003336 <init_AT86RF212+0x96>
	//pal_trx_reg_write(RG_TRX_CTRL_2, 0x29); // O-QPSK 200kb/s
	PAL_WAIT_1_US();
	//pal_trx_reg_write(RG_XOSC_CTRL, 0x40); // manejo del cristal externo y capacitores
	//PAL_WAIT_1_US();
	promiscuous_mode();
800033a2:	f0 1f 00 0c 	mcall	800033d0 <init_AT86RF212+0x130>
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en 
800033a6:	30 4b       	mov	r11,4
800033a8:	30 2c       	mov	r12,2
800033aa:	f0 1f 00 07 	mcall	800033c4 <init_AT86RF212+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800033ae:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800033b2:	f0 ca ff f3 	sub	r10,r8,-13
800033b6:	cd 1b       	rjmp	80003358 <init_AT86RF212+0xb8>
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	3e 10       	mov	r0,-31
800033bc:	80 00       	ld.sh	r0,r0[0x0]
800033be:	32 1c       	mov	r12,33
800033c0:	80 00       	ld.sh	r0,r0[0x0]
800033c2:	30 78       	mov	r8,7
800033c4:	80 00       	ld.sh	r0,r0[0x0]
800033c6:	2c e4       	sub	r4,-50
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	2f 64       	sub	r4,-10
800033cc:	80 00       	ld.sh	r0,r0[0x0]
800033ce:	3e 30       	mov	r0,-29
800033d0:	80 00       	ld.sh	r0,r0[0x0]
800033d2:	2e 9c       	sub	r12,-23

800033d4 <estadoPorPc>:
	RST_LOW();
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
800033d4:	d4 01       	pushm	lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800033d6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800033da:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033de:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033e2:	14 38       	cp.w	r8,r10
800033e4:	e0 88 00 08 	brls	800033f4 <estadoPorPc+0x20>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033e8:	12 38       	cp.w	r8,r9
800033ea:	fe 98 ff fa 	brls	800033de <estadoPorPc+0xa>
800033ee:	12 3a       	cp.w	r10,r9
800033f0:	c5 13       	brcs	80003492 <estadoPorPc+0xbe>
800033f2:	cf 6b       	rjmp	800033de <estadoPorPc+0xa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033f4:	12 38       	cp.w	r8,r9
800033f6:	e0 8b 00 4e 	brhi	80003492 <estadoPorPc+0xbe>
800033fa:	12 3a       	cp.w	r10,r9
800033fc:	c4 b3       	brcs	80003492 <estadoPorPc+0xbe>
800033fe:	cf 0b       	rjmp	800033de <estadoPorPc+0xa>
	delay_ms(1);
	switch (getStateAT86RF212()){
		case P_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado ON\n");
80003400:	4a 9c       	lddpc	r12,800034a4 <estadoPorPc+0xd0>
80003402:	f0 1f 00 2a 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
80003406:	c3 18       	rjmp	80003468 <estadoPorPc+0x94>
		case BUSY_RX:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX\n");
80003408:	4a 9c       	lddpc	r12,800034ac <estadoPorPc+0xd8>
8000340a:	f0 1f 00 28 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
8000340e:	c2 d8       	rjmp	80003468 <estadoPorPc+0x94>
		case RX_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX\n");
80003410:	4a 8c       	lddpc	r12,800034b0 <estadoPorPc+0xdc>
80003412:	f0 1f 00 26 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
80003416:	c2 98       	rjmp	80003468 <estadoPorPc+0x94>
		case TRX_OFF:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_OFF \n");
80003418:	4a 7c       	lddpc	r12,800034b4 <estadoPorPc+0xe0>
8000341a:	f0 1f 00 24 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
8000341e:	c2 58       	rjmp	80003468 <estadoPorPc+0x94>
		case PLL_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado PLL_ON\n");
80003420:	4a 6c       	lddpc	r12,800034b8 <estadoPorPc+0xe4>
80003422:	f0 1f 00 22 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
80003426:	c2 18       	rjmp	80003468 <estadoPorPc+0x94>
		case TRX_SLEEP:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_SLEEP \n");
80003428:	4a 5c       	lddpc	r12,800034bc <estadoPorPc+0xe8>
8000342a:	f0 1f 00 20 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
8000342e:	c1 d8       	rjmp	80003468 <estadoPorPc+0x94>
		case BUSY_RX_AACK:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX_AACK\n");
80003430:	4a 4c       	lddpc	r12,800034c0 <estadoPorPc+0xec>
80003432:	f0 1f 00 1e 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
80003436:	c1 98       	rjmp	80003468 <estadoPorPc+0x94>
		case BUSY_TX_ARET:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_TX_ARET \n");
80003438:	4a 3c       	lddpc	r12,800034c4 <estadoPorPc+0xf0>
8000343a:	f0 1f 00 1c 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
8000343e:	c1 58       	rjmp	80003468 <estadoPorPc+0x94>
		case RX_AACK_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON\n");
80003440:	4a 2c       	lddpc	r12,800034c8 <estadoPorPc+0xf4>
80003442:	f0 1f 00 1a 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
80003446:	c1 18       	rjmp	80003468 <estadoPorPc+0x94>
		case CMD_TX_ARET_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado TX_ARET_ON\n");
80003448:	4a 1c       	lddpc	r12,800034cc <estadoPorPc+0xf8>
8000344a:	f0 1f 00 18 	mcall	800034a8 <estadoPorPc+0xd4>
		case RX_ON_NOCLK :
		escribir_linea_pc("\r\n AT86RF212 en estado RX_ON_NOCLK \n");
8000344e:	4a 1c       	lddpc	r12,800034d0 <estadoPorPc+0xfc>
80003450:	f0 1f 00 16 	mcall	800034a8 <estadoPorPc+0xd4>
		case RX_AACK_ON_NOCLK:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON_NOCLK \n");
80003454:	4a 0c       	lddpc	r12,800034d4 <estadoPorPc+0x100>
80003456:	f0 1f 00 15 	mcall	800034a8 <estadoPorPc+0xd4>
		case STATE_TRANSITION_IN_PROGRESS:
		escribir_linea_pc("\r\n :'(  STATE_TRANSITION_IN_PROGRESS ");
8000345a:	4a 0c       	lddpc	r12,800034d8 <estadoPorPc+0x104>
8000345c:	f0 1f 00 13 	mcall	800034a8 <estadoPorPc+0xd4>
		break;
80003460:	c0 48       	rjmp	80003468 <estadoPorPc+0x94>
		
		default:
		escribir_linea_pc("\r\n estado no contemplado");
80003462:	49 fc       	lddpc	r12,800034dc <estadoPorPc+0x108>
80003464:	f0 1f 00 11 	mcall	800034a8 <estadoPorPc+0xd4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003468:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000346c:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003470:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003474:	14 38       	cp.w	r8,r10
80003476:	e0 88 00 08 	brls	80003486 <estadoPorPc+0xb2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000347a:	12 38       	cp.w	r8,r9
8000347c:	fe 98 ff fa 	brls	80003470 <estadoPorPc+0x9c>
80003480:	12 3a       	cp.w	r10,r9
80003482:	c1 03       	brcs	800034a2 <estadoPorPc+0xce>
80003484:	cf 6b       	rjmp	80003470 <estadoPorPc+0x9c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003486:	12 38       	cp.w	r8,r9
80003488:	e0 8b 00 0d 	brhi	800034a2 <estadoPorPc+0xce>
8000348c:	12 3a       	cp.w	r10,r9
8000348e:	c0 a3       	brcs	800034a2 <estadoPorPc+0xce>
80003490:	cf 0b       	rjmp	80003470 <estadoPorPc+0x9c>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
	delay_ms(1);
	switch (getStateAT86RF212()){
80003492:	f0 1f 00 14 	mcall	800034e0 <estadoPorPc+0x10c>
80003496:	59 fc       	cp.w	r12,31
80003498:	fe 9b ff e5 	brhi	80003462 <estadoPorPc+0x8e>
8000349c:	49 28       	lddpc	r8,800034e4 <estadoPorPc+0x110>
8000349e:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
800034a2:	d8 02       	popm	pc
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	3e 58       	mov	r8,-27
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	32 1c       	mov	r12,33
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	3e 74       	mov	r4,-25
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	3e 94       	mov	r4,-23
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	3e b0       	mov	r0,-21
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	3e d4       	mov	r4,-19
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	3e f4       	mov	r4,-17
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	3f 18       	mov	r8,-15
800034c4:	80 00       	ld.sh	r0,r0[0x0]
800034c6:	3f 40       	mov	r0,-12
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	3f 68       	mov	r8,-10
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	3f 8c       	mov	r12,-8
800034d0:	80 00       	ld.sh	r0,r0[0x0]
800034d2:	3f b0       	mov	r0,-5
800034d4:	80 00       	ld.sh	r0,r0[0x0]
800034d6:	3f d8       	mov	r8,-3
800034d8:	80 00       	ld.sh	r0,r0[0x0]
800034da:	40 04       	lddsp	r4,sp[0x0]
800034dc:	80 00       	ld.sh	r0,r0[0x0]
800034de:	40 2c       	lddsp	r12,sp[0x8]
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	2f 64       	sub	r4,-10
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	3d 18       	mov	r8,-47

800034e8 <txTramaManual>:
{
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
}

uint8_t txTramaManual(uint8_t *data)
{
800034e8:	eb cd 40 c0 	pushm	r6-r7,lr
800034ec:	20 4d       	sub	sp,16
800034ee:	18 96       	mov	r6,r12
	uint8_t colado[15]="hola soy colado";
800034f0:	4b 19       	lddpc	r9,800035b4 <txTramaManual+0xcc>
800034f2:	f2 ea 00 00 	ld.d	r10,r9[0]
800034f6:	fa eb 00 00 	st.d	sp[0],r10
800034fa:	72 2a       	ld.w	r10,r9[0x8]
800034fc:	50 2a       	stdsp	sp[0x8],r10
800034fe:	f3 3a 00 0c 	ld.ub	r10,r9[12]
80003502:	fb 6a 00 0c 	st.b	sp[12],r10
80003506:	f3 3a 00 0d 	ld.ub	r10,r9[13]
8000350a:	fb 6a 00 0d 	st.b	sp[13],r10
8000350e:	f3 39 00 0e 	ld.ub	r9,r9[14]
80003512:	fb 69 00 0e 	st.b	sp[14],r9
	uint8_t state = getStateAT86RF212();
80003516:	f0 1f 00 29 	mcall	800035b8 <txTramaManual+0xd0>
	//Set MAX_CSMA_RETRIES register 0x2C, XAH_CTRL_0
	//Set CSMA_SEED registers 0x2D, 0x2E
	//Set MAX_BE, MIN_BE register 0x2F, CSMA_BE
	//Configure CCA see Section 8.6
	
	if (state==CMD_RX_ON) {
8000351a:	30 68       	mov	r8,6
8000351c:	f0 0c 18 00 	cp.b	r12,r8
80003520:	c3 81       	brne	80003590 <txTramaManual+0xa8>
		//DISABLE_TRX_IRQ();
		
		//variable1=getStateAT86RF212();
		escribir_linea_pc("AT86RF por transmitir...\r\n");	
80003522:	4a 7c       	lddpc	r12,800035bc <txTramaManual+0xd4>
80003524:	f0 1f 00 27 	mcall	800035c0 <txTramaManual+0xd8>
		//estadoPorPc();
		pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_PLL_ON); //pongo en PLL ON
80003528:	30 4b       	mov	r11,4
8000352a:	30 2c       	mov	r12,2
8000352c:	f0 1f 00 26 	mcall	800035c4 <txTramaManual+0xdc>
		while(getStateAT86RF212()!=CMD_PLL_ON);  //espero q se ponga en PLL ON
80003530:	30 97       	mov	r7,9
80003532:	f0 1f 00 22 	mcall	800035b8 <txTramaManual+0xd0>
80003536:	ee 0c 18 00 	cp.b	r12,r7
8000353a:	cf c1       	brne	80003532 <txTramaManual+0x4a>
	//	estadoPorPc();
		pal_trx_reg_write(RG_IRQ_MASK,0x0C);
8000353c:	30 cb       	mov	r11,12
8000353e:	30 ec       	mov	r12,14
80003540:	f0 1f 00 21 	mcall	800035c4 <txTramaManual+0xdc>
		variable1=pal_trx_reg_read(RG_IRQ_MASK);
80003544:	30 ec       	mov	r12,14
80003546:	f0 1f 00 21 	mcall	800035c8 <txTramaManual+0xe0>
8000354a:	4a 18       	lddpc	r8,800035cc <txTramaManual+0xe4>
8000354c:	b0 8c       	st.b	r8[0x0],r12
		pal_trx_frame_write(data,120);  // 200kbps
8000354e:	37 8b       	mov	r11,120
80003550:	0c 9c       	mov	r12,r6
80003552:	f0 1f 00 20 	mcall	800035d0 <txTramaManual+0xe8>
		pal_trx_frame_write(colado,15);  // 200kbps
80003556:	30 fb       	mov	r11,15
80003558:	1a 9c       	mov	r12,sp
8000355a:	f0 1f 00 1e 	mcall	800035d0 <txTramaManual+0xe8>
		//pal_trx_frame_write(data,120);  // 100kbps
		//escribo la trama de datos en el buffer - segun pag 158
		pal_trx_reg_write(RG_TRX_STATE,CMD_TX_START); // inicio tx - segun manual: Write TRX_CMD = TX_START, or assert pin 11 (SLP_TR)
8000355e:	30 2b       	mov	r11,2
80003560:	16 9c       	mov	r12,r11
80003562:	f0 1f 00 19 	mcall	800035c4 <txTramaManual+0xdc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003566:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000356a:	f0 ca ff b8 	sub	r10,r8,-72
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000356e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003572:	14 38       	cp.w	r8,r10
80003574:	e0 88 00 08 	brls	80003584 <txTramaManual+0x9c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003578:	12 38       	cp.w	r8,r9
8000357a:	fe 98 ff fa 	brls	8000356e <txTramaManual+0x86>
8000357e:	12 3a       	cp.w	r10,r9
80003580:	c1 43       	brcs	800035a8 <txTramaManual+0xc0>
80003582:	cf 6b       	rjmp	8000356e <txTramaManual+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003584:	12 38       	cp.w	r8,r9
80003586:	e0 8b 00 11 	brhi	800035a8 <txTramaManual+0xc0>
8000358a:	12 3a       	cp.w	r10,r9
8000358c:	c0 e3       	brcs	800035a8 <txTramaManual+0xc0>
8000358e:	cf 0b       	rjmp	8000356e <txTramaManual+0x86>
	//	estadoPorPc();
		variable1=getStateAT86RF212();
		
		
	} else {
		escribir_linea_pc(" no se puede enviar la trama \n");
80003590:	49 1c       	lddpc	r12,800035d4 <txTramaManual+0xec>
80003592:	f0 1f 00 0c 	mcall	800035c0 <txTramaManual+0xd8>
	}
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); //vuelvo a estador RX ON
80003596:	30 6b       	mov	r11,6
80003598:	30 2c       	mov	r12,2
8000359a:	f0 1f 00 0b 	mcall	800035c4 <txTramaManual+0xdc>
	estadoPorPc();
8000359e:	f0 1f 00 0f 	mcall	800035d8 <txTramaManual+0xf0>
}
800035a2:	2f cd       	sub	sp,-16
800035a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		
		// espero IRQ_3 (TRX_END) issued
		// Read IRQ_STATUS register, pin 24 (IRQ) deasserted
		//ENABLE_TRX_IRQ(); 
	//	estadoPorPc();
		variable1=getStateAT86RF212();
800035a8:	f0 1f 00 04 	mcall	800035b8 <txTramaManual+0xd0>
800035ac:	48 88       	lddpc	r8,800035cc <txTramaManual+0xe4>
800035ae:	b0 8c       	st.b	r8[0x0],r12
800035b0:	cf 3b       	rjmp	80003596 <txTramaManual+0xae>
800035b2:	00 00       	add	r0,r0
800035b4:	80 00       	ld.sh	r0,r0[0x0]
800035b6:	2e 8c       	sub	r12,-24
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	2f 64       	sub	r4,-10
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	40 48       	lddsp	r8,sp[0x10]
800035c0:	80 00       	ld.sh	r0,r0[0x0]
800035c2:	32 1c       	mov	r12,33
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	2c e4       	sub	r4,-50
800035c8:	80 00       	ld.sh	r0,r0[0x0]
800035ca:	2d 50       	sub	r0,-43
800035cc:	00 00       	add	r0,r0
800035ce:	01 aa       	ld.ub	r10,r0[0x2]
800035d0:	80 00       	ld.sh	r0,r0[0x0]
800035d2:	2c 80       	sub	r0,-56
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	40 64       	lddsp	r4,sp[0x18]
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	33 d4       	mov	r4,61

800035dc <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
800035dc:	d4 01       	pushm	lr
800035de:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800035e0:	30 eb       	mov	r11,14
800035e2:	30 2c       	mov	r12,2
800035e4:	f0 1f 00 0e 	mcall	8000361c <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
800035e8:	e0 78 c1 38 	mov	r8,115000
800035ec:	50 08       	stdsp	sp[0x0],r8
800035ee:	e0 68 27 10 	mov	r8,10000
800035f2:	50 18       	stdsp	sp[0x4],r8
800035f4:	34 88       	mov	r8,72
800035f6:	50 28       	stdsp	sp[0x8],r8
800035f8:	30 08       	mov	r8,0
800035fa:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
800035fe:	1a 9b       	mov	r11,sp
80003600:	fe 7c 44 00 	mov	r12,-48128
80003604:	f0 1f 00 07 	mcall	80003620 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003608:	c0 51       	brne	80003612 <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
8000360a:	48 7c       	lddpc	r12,80003624 <init_i2c_module+0x48>
8000360c:	f0 1f 00 07 	mcall	80003628 <init_i2c_module+0x4c>
80003610:	c0 48       	rjmp	80003618 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
80003612:	48 7c       	lddpc	r12,8000362c <init_i2c_module+0x50>
80003614:	f0 1f 00 05 	mcall	80003628 <init_i2c_module+0x4c>
	}
} 
80003618:	2f cd       	sub	sp,-16
8000361a:	d8 02       	popm	pc
8000361c:	80 00       	ld.sh	r0,r0[0x0]
8000361e:	2d d4       	sub	r4,-35
80003620:	80 00       	ld.sh	r0,r0[0x0]
80003622:	22 30       	sub	r0,35
80003624:	80 00       	ld.sh	r0,r0[0x0]
80003626:	40 84       	lddsp	r4,sp[0x20]
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	32 1c       	mov	r12,33
8000362c:	80 00       	ld.sh	r0,r0[0x0]
8000362e:	40 98       	lddsp	r8,sp[0x24]

80003630 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
80003630:	eb cd 40 e0 	pushm	r5-r7,lr
80003634:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
80003636:	4a 48       	lddpc	r8,800036c4 <spi_init_module+0x94>
80003638:	1a 95       	mov	r5,sp
8000363a:	70 09       	ld.w	r9,r8[0x0]
8000363c:	50 09       	stdsp	sp[0x0],r9
8000363e:	70 19       	ld.w	r9,r8[0x4]
80003640:	50 19       	stdsp	sp[0x4],r9
80003642:	70 29       	ld.w	r9,r8[0x8]
80003644:	50 29       	stdsp	sp[0x8],r9
80003646:	70 38       	ld.w	r8,r8[0xc]
80003648:	50 38       	stdsp	sp[0xc],r8
8000364a:	30 db       	mov	r11,13
8000364c:	30 2c       	mov	r12,2
8000364e:	f0 1f 00 1f 	mcall	800036c8 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003652:	fe 77 40 00 	mov	r7,-49152
80003656:	e0 68 00 80 	mov	r8,128
8000365a:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
8000365c:	6e 18       	ld.w	r8,r7[0x4]
8000365e:	30 19       	mov	r9,1
80003660:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003664:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
80003666:	6e 18       	ld.w	r8,r7[0x4]
80003668:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
8000366c:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
8000366e:	6e 18       	ld.w	r8,r7[0x4]
80003670:	30 06       	mov	r6,0
80003672:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
80003676:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
80003678:	6e 18       	ld.w	r8,r7[0x4]
8000367a:	30 f9       	mov	r9,15
8000367c:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003680:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
80003682:	6e 18       	ld.w	r8,r7[0x4]
80003684:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003688:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
8000368a:	6e 18       	ld.w	r8,r7[0x4]
8000368c:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003690:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
80003692:	6e 18       	ld.w	r8,r7[0x4]
80003694:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003698:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
8000369a:	30 38       	mov	r8,3
8000369c:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
8000369e:	e0 7a c1 38 	mov	r10,115000
800036a2:	1a 9b       	mov	r11,sp
800036a4:	0e 9c       	mov	r12,r7
800036a6:	f0 1f 00 0a 	mcall	800036cc <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
800036aa:	0c 99       	mov	r9,r6
800036ac:	0c 9a       	mov	r10,r6
800036ae:	0c 9b       	mov	r11,r6
800036b0:	0e 9c       	mov	r12,r7
800036b2:	f0 1f 00 08 	mcall	800036d0 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
800036b6:	0e 9c       	mov	r12,r7
800036b8:	f0 1f 00 07 	mcall	800036d4 <spi_init_module+0xa4>
}
800036bc:	2f cd       	sub	sp,-16
800036be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800036c2:	00 00       	add	r0,r0
800036c4:	80 00       	ld.sh	r0,r0[0x0]
800036c6:	41 20       	lddsp	r0,sp[0x48]
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	2d d4       	sub	r4,-35
800036cc:	80 00       	ld.sh	r0,r0[0x0]
800036ce:	27 98       	sub	r8,121
800036d0:	80 00       	ld.sh	r0,r0[0x0]
800036d2:	26 f8       	sub	r8,111
800036d4:	80 00       	ld.sh	r0,r0[0x0]
800036d6:	28 50       	sub	r0,-123

800036d8 <init_dispositivos>:
		
	}
	return;
}
void init_dispositivos()
{
800036d8:	eb cd 40 80 	pushm	r7,lr
	// configuracion del clock del sistema ver archivo "conf_clock.h"
	sysclk_init();
800036dc:	f0 1f 00 35 	mcall	800037b0 <init_dispositivos+0xd8>

	//Configuracion de los pines para los LEDS
	led_init_pins();
800036e0:	f0 1f 00 35 	mcall	800037b4 <init_dispositivos+0xdc>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
800036e4:	f0 1f 00 35 	mcall	800037b8 <init_dispositivos+0xe0>

	//Configuracion pins para RF
	init_rf_pins();
800036e8:	f0 1f 00 35 	mcall	800037bc <init_dispositivos+0xe4>

	//Inicializacion del SPI
	spi_init_module();
800036ec:	f0 1f 00 35 	mcall	800037c0 <init_dispositivos+0xe8>

	//Inicializacion de la USART
	int estado_rs_232 = rs_232_init_usart();
800036f0:	f0 1f 00 35 	mcall	800037c4 <init_dispositivos+0xec>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
800036f4:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
800036f6:	f0 1f 00 35 	mcall	800037c8 <init_dispositivos+0xf0>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
800036fa:	30 0a       	mov	r10,0
800036fc:	e0 6b 02 20 	mov	r11,544
80003700:	4b 3c       	lddpc	r12,800037cc <init_dispositivos+0xf4>
80003702:	f0 1f 00 34 	mcall	800037d0 <init_dispositivos+0xf8>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
80003706:	30 2a       	mov	r10,2
80003708:	e0 6b 01 61 	mov	r11,353
8000370c:	4b 2c       	lddpc	r12,800037d4 <init_dispositivos+0xfc>
8000370e:	f0 1f 00 31 	mcall	800037d0 <init_dispositivos+0xf8>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003712:	30 3a       	mov	r10,3
80003714:	e0 6b 03 40 	mov	r11,832
80003718:	4b 0c       	lddpc	r12,800037d8 <init_dispositivos+0x100>
8000371a:	f0 1f 00 2e 	mcall	800037d0 <init_dispositivos+0xf8>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
8000371e:	30 1a       	mov	r10,1
80003720:	4a fb       	lddpc	r11,800037dc <init_dispositivos+0x104>
80003722:	fe 7c 24 00 	mov	r12,-56320
80003726:	f0 1f 00 2f 	mcall	800037e0 <init_dispositivos+0x108>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
8000372a:	30 2b       	mov	r11,2
8000372c:	fe 7c 24 00 	mov	r12,-56320
80003730:	f0 1f 00 2d 	mcall	800037e4 <init_dispositivos+0x10c>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
80003734:	30 2b       	mov	r11,2
80003736:	fe 7c 24 00 	mov	r12,-56320
8000373a:	f0 1f 00 2c 	mcall	800037e8 <init_dispositivos+0x110>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
8000373e:	30 19       	mov	r9,1
80003740:	fe 78 38 00 	mov	r8,-51200
80003744:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
80003746:	d5 03       	csrf	0x10

	//Inicializacion de las interrupciones
	inicializar_interrupciones();

	// Inicializacion del timer
	tc_init(tc);
80003748:	4a 98       	lddpc	r8,800037ec <init_dispositivos+0x114>
8000374a:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000374c:	4a 9b       	lddpc	r11,800037f0 <init_dispositivos+0x118>
8000374e:	0e 9c       	mov	r12,r7
80003750:	f0 1f 00 29 	mcall	800037f4 <init_dispositivos+0x11c>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
80003754:	e0 6a 00 b3 	mov	r10,179
80003758:	30 0b       	mov	r11,0
8000375a:	0e 9c       	mov	r12,r7
8000375c:	f0 1f 00 27 	mcall	800037f8 <init_dispositivos+0x120>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003760:	4a 7a       	lddpc	r10,800037fc <init_dispositivos+0x124>
80003762:	30 0b       	mov	r11,0
80003764:	0e 9c       	mov	r12,r7
80003766:	f0 1f 00 27 	mcall	80003800 <init_dispositivos+0x128>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
8000376a:	30 0b       	mov	r11,0
8000376c:	0e 9c       	mov	r12,r7
8000376e:	f0 1f 00 26 	mcall	80003804 <init_dispositivos+0x12c>
	// 	while (at86rfx_init() != AT86RFX_SUCCESS) {
	//  	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
	//  	 	}
	//  		escribir_linea_pc("Modulo RF:\tPASS\r\n");

	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
80003772:	31 cc       	mov	r12,28
80003774:	f0 1f 00 25 	mcall	80003808 <init_dispositivos+0x130>
80003778:	4a 58       	lddpc	r8,8000380c <init_dispositivos+0x134>
8000377a:	b0 8c       	st.b	r8[0x0],r12

	if (register_value == PART_NUM_AT86RF212)
8000377c:	30 78       	mov	r8,7
8000377e:	f0 0c 18 00 	cp.b	r12,r8
80003782:	c0 51       	brne	8000378c <init_dispositivos+0xb4>
	escribir_linea_pc("Modulo RF:\tPASS\r\n");
80003784:	4a 3c       	lddpc	r12,80003810 <init_dispositivos+0x138>
80003786:	f0 1f 00 24 	mcall	80003814 <init_dispositivos+0x13c>
8000378a:	c0 48       	rjmp	80003792 <init_dispositivos+0xba>
	else
	escribir_linea_pc("Modulo RF:\tFAILED\r\n");
8000378c:	4a 3c       	lddpc	r12,80003818 <init_dispositivos+0x140>
8000378e:	f0 1f 00 22 	mcall	80003814 <init_dispositivos+0x13c>
	escribir_linea_pc(register_value);
80003792:	49 f8       	lddpc	r8,8000380c <init_dispositivos+0x134>
80003794:	11 8c       	ld.ub	r12,r8[0x0]
80003796:	f0 1f 00 20 	mcall	80003814 <init_dispositivos+0x13c>

	//Inicializacion del sensor de temp

	init_i2c_pins();
8000379a:	f0 1f 00 21 	mcall	8000381c <init_dispositivos+0x144>
	init_i2c_module();
8000379e:	f0 1f 00 21 	mcall	80003820 <init_dispositivos+0x148>
	// inicializacion del tran
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_PLL_ON);



	init_AT86RF212();
800037a2:	f0 1f 00 21 	mcall	80003824 <init_dispositivos+0x14c>
	//------------------Fin de conguracion

	escribir_linea_pc("TESIS TUCUMAN 2015\n\r\n");
800037a6:	4a 1c       	lddpc	r12,80003828 <init_dispositivos+0x150>
800037a8:	f0 1f 00 1b 	mcall	80003814 <init_dispositivos+0x13c>
}
800037ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800037b0:	80 00       	ld.sh	r0,r0[0x0]
800037b2:	2d c4       	sub	r4,-36
800037b4:	80 00       	ld.sh	r0,r0[0x0]
800037b6:	31 cc       	mov	r12,28
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	31 34       	mov	r4,19
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	31 ec       	mov	r12,30
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	36 30       	mov	r0,99
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	31 10       	mov	r0,17
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	26 4c       	sub	r12,100
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	2f e8       	sub	r8,-2
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	25 cc       	sub	r12,92
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	32 30       	mov	r0,35
800037d8:	80 00       	ld.sh	r0,r0[0x0]
800037da:	2f 78       	sub	r8,-9
800037dc:	00 00       	add	r0,r0
800037de:	00 98       	mov	r8,r0
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	22 e8       	sub	r8,46
800037e4:	80 00       	ld.sh	r0,r0[0x0]
800037e6:	23 b8       	sub	r8,59
800037e8:	80 00       	ld.sh	r0,r0[0x0]
800037ea:	23 c2       	sub	r2,60
800037ec:	00 00       	add	r0,r0
800037ee:	00 18       	sub	r8,r0
800037f0:	80 00       	ld.sh	r0,r0[0x0]
800037f2:	41 30       	lddsp	r0,sp[0x4c]
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	28 56       	sub	r6,-123
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	29 28       	sub	r8,-110
800037fc:	80 00       	ld.sh	r0,r0[0x0]
800037fe:	3d a8       	mov	r8,-38
80003800:	80 00       	ld.sh	r0,r0[0x0]
80003802:	29 5c       	sub	r12,-107
80003804:	80 00       	ld.sh	r0,r0[0x0]
80003806:	28 f2       	sub	r2,-113
80003808:	80 00       	ld.sh	r0,r0[0x0]
8000380a:	2d 50       	sub	r0,-43
8000380c:	00 00       	add	r0,r0
8000380e:	01 a5       	ld.ub	r5,r0[0x2]
80003810:	80 00       	ld.sh	r0,r0[0x0]
80003812:	40 b0       	lddsp	r0,sp[0x2c]
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	32 1c       	mov	r12,33
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	40 c4       	lddsp	r4,sp[0x30]
8000381c:	80 00       	ld.sh	r0,r0[0x0]
8000381e:	31 60       	mov	r0,22
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	35 dc       	mov	r12,93
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	32 a0       	mov	r0,42
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	40 d8       	lddsp	r8,sp[0x34]

8000382c <main>:
int main (void)
{
8000382c:	eb cd 40 80 	pushm	r7,lr
// NODO I TX	

	char temps[10] = "\0";
	int i=0;
	
	init_dispositivos();
80003830:	f0 1f 00 11 	mcall	80003874 <main+0x48>
	
	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);// seteo el tran en RX
80003834:	30 6b       	mov	r11,6
80003836:	30 2c       	mov	r12,2
80003838:	f0 1f 00 10 	mcall	80003878 <main+0x4c>
// 				}
// 				configuracion = false;
// 			}
// 		}
		
		txTramaManual(tx_buffer120); // 90 bytes 200kbps
8000383c:	49 07       	lddpc	r7,8000387c <main+0x50>
8000383e:	0e 9c       	mov	r12,r7
80003840:	f0 1f 00 10 	mcall	80003880 <main+0x54>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003844:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003848:	e0 79 c1 38 	mov	r9,115000
8000384c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003850:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003854:	14 38       	cp.w	r8,r10
80003856:	e0 88 00 08 	brls	80003866 <main+0x3a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000385a:	12 38       	cp.w	r8,r9
8000385c:	fe 98 ff fa 	brls	80003850 <main+0x24>
80003860:	12 3a       	cp.w	r10,r9
80003862:	ce e3       	brcs	8000383e <main+0x12>
80003864:	cf 6b       	rjmp	80003850 <main+0x24>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003866:	12 38       	cp.w	r8,r9
80003868:	fe 9b ff eb 	brhi	8000383e <main+0x12>
8000386c:	12 3a       	cp.w	r10,r9
8000386e:	ce 83       	brcs	8000383e <main+0x12>
80003870:	cf 0b       	rjmp	80003850 <main+0x24>
80003872:	00 00       	add	r0,r0
80003874:	80 00       	ld.sh	r0,r0[0x0]
80003876:	36 d8       	mov	r8,109
80003878:	80 00       	ld.sh	r0,r0[0x0]
8000387a:	2c e4       	sub	r4,-50
8000387c:	00 00       	add	r0,r0
8000387e:	00 20       	rsub	r0,r0
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	34 e8       	mov	r8,78

Disassembly of section .exception:

80003a00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80003a00:	c0 08       	rjmp	80003a00 <_evba>
	...

80003a04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80003a04:	c0 08       	rjmp	80003a04 <_handle_TLB_Multiple_Hit>
	...

80003a08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80003a08:	c0 08       	rjmp	80003a08 <_handle_Bus_Error_Data_Fetch>
	...

80003a0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80003a0c:	c0 08       	rjmp	80003a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80003a10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80003a10:	c0 08       	rjmp	80003a10 <_handle_NMI>
	...

80003a14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80003a14:	c0 08       	rjmp	80003a14 <_handle_Instruction_Address>
	...

80003a18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80003a18:	c0 08       	rjmp	80003a18 <_handle_ITLB_Protection>
	...

80003a1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80003a1c:	c0 08       	rjmp	80003a1c <_handle_Breakpoint>
	...

80003a20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80003a20:	c0 08       	rjmp	80003a20 <_handle_Illegal_Opcode>
	...

80003a24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80003a24:	c0 08       	rjmp	80003a24 <_handle_Unimplemented_Instruction>
	...

80003a28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80003a28:	c0 08       	rjmp	80003a28 <_handle_Privilege_Violation>
	...

80003a2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80003a2c:	c0 08       	rjmp	80003a2c <_handle_Floating_Point>
	...

80003a30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80003a30:	c0 08       	rjmp	80003a30 <_handle_Coprocessor_Absent>
	...

80003a34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80003a34:	c0 08       	rjmp	80003a34 <_handle_Data_Address_Read>
	...

80003a38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80003a38:	c0 08       	rjmp	80003a38 <_handle_Data_Address_Write>
	...

80003a3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80003a3c:	c0 08       	rjmp	80003a3c <_handle_DTLB_Protection_Read>
	...

80003a40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80003a40:	c0 08       	rjmp	80003a40 <_handle_DTLB_Protection_Write>
	...

80003a44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80003a44:	c0 08       	rjmp	80003a44 <_handle_DTLB_Modified>
	...

80003a50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80003a50:	c0 08       	rjmp	80003a50 <_handle_ITLB_Miss>
	...

80003a60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80003a60:	c0 08       	rjmp	80003a60 <_handle_DTLB_Miss_Read>
	...

80003a70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80003a70:	c0 08       	rjmp	80003a70 <_handle_DTLB_Miss_Write>
	...

80003b00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80003b00:	c0 08       	rjmp	80003b00 <_handle_Supervisor_Call>
80003b02:	d7 03       	nop

80003b04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003b04:	30 0c       	mov	r12,0
80003b06:	fe b0 f5 cd 	rcall	800026a0 <_get_interrupt_handler>
80003b0a:	58 0c       	cp.w	r12,0
80003b0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003b10:	d6 03       	rete

80003b12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003b12:	30 1c       	mov	r12,1
80003b14:	fe b0 f5 c6 	rcall	800026a0 <_get_interrupt_handler>
80003b18:	58 0c       	cp.w	r12,0
80003b1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003b1e:	d6 03       	rete

80003b20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003b20:	30 2c       	mov	r12,2
80003b22:	fe b0 f5 bf 	rcall	800026a0 <_get_interrupt_handler>
80003b26:	58 0c       	cp.w	r12,0
80003b28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003b2c:	d6 03       	rete

80003b2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003b2e:	30 3c       	mov	r12,3
80003b30:	fe b0 f5 b8 	rcall	800026a0 <_get_interrupt_handler>
80003b34:	58 0c       	cp.w	r12,0
80003b36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003b3a:	d6 03       	rete
80003b3c:	d7 03       	nop
80003b3e:	d7 03       	nop
80003b40:	d7 03       	nop
80003b42:	d7 03       	nop
80003b44:	d7 03       	nop
80003b46:	d7 03       	nop
80003b48:	d7 03       	nop
80003b4a:	d7 03       	nop
80003b4c:	d7 03       	nop
80003b4e:	d7 03       	nop
80003b50:	d7 03       	nop
80003b52:	d7 03       	nop
80003b54:	d7 03       	nop
80003b56:	d7 03       	nop
80003b58:	d7 03       	nop
80003b5a:	d7 03       	nop
80003b5c:	d7 03       	nop
80003b5e:	d7 03       	nop
80003b60:	d7 03       	nop
80003b62:	d7 03       	nop
80003b64:	d7 03       	nop
80003b66:	d7 03       	nop
80003b68:	d7 03       	nop
80003b6a:	d7 03       	nop
80003b6c:	d7 03       	nop
80003b6e:	d7 03       	nop
80003b70:	d7 03       	nop
80003b72:	d7 03       	nop
80003b74:	d7 03       	nop
80003b76:	d7 03       	nop
80003b78:	d7 03       	nop
80003b7a:	d7 03       	nop
80003b7c:	d7 03       	nop
80003b7e:	d7 03       	nop
80003b80:	d7 03       	nop
80003b82:	d7 03       	nop
80003b84:	d7 03       	nop
80003b86:	d7 03       	nop
80003b88:	d7 03       	nop
80003b8a:	d7 03       	nop
80003b8c:	d7 03       	nop
80003b8e:	d7 03       	nop
80003b90:	d7 03       	nop
80003b92:	d7 03       	nop
80003b94:	d7 03       	nop
80003b96:	d7 03       	nop
80003b98:	d7 03       	nop
80003b9a:	d7 03       	nop
80003b9c:	d7 03       	nop
80003b9e:	d7 03       	nop
80003ba0:	d7 03       	nop
80003ba2:	d7 03       	nop
80003ba4:	d7 03       	nop
80003ba6:	d7 03       	nop
80003ba8:	d7 03       	nop
80003baa:	d7 03       	nop
80003bac:	d7 03       	nop
80003bae:	d7 03       	nop
80003bb0:	d7 03       	nop
80003bb2:	d7 03       	nop
80003bb4:	d7 03       	nop
80003bb6:	d7 03       	nop
80003bb8:	d7 03       	nop
80003bba:	d7 03       	nop
80003bbc:	d7 03       	nop
80003bbe:	d7 03       	nop
80003bc0:	d7 03       	nop
80003bc2:	d7 03       	nop
80003bc4:	d7 03       	nop
80003bc6:	d7 03       	nop
80003bc8:	d7 03       	nop
80003bca:	d7 03       	nop
80003bcc:	d7 03       	nop
80003bce:	d7 03       	nop
80003bd0:	d7 03       	nop
80003bd2:	d7 03       	nop
80003bd4:	d7 03       	nop
80003bd6:	d7 03       	nop
80003bd8:	d7 03       	nop
80003bda:	d7 03       	nop
80003bdc:	d7 03       	nop
80003bde:	d7 03       	nop
80003be0:	d7 03       	nop
80003be2:	d7 03       	nop
80003be4:	d7 03       	nop
80003be6:	d7 03       	nop
80003be8:	d7 03       	nop
80003bea:	d7 03       	nop
80003bec:	d7 03       	nop
80003bee:	d7 03       	nop
80003bf0:	d7 03       	nop
80003bf2:	d7 03       	nop
80003bf4:	d7 03       	nop
80003bf6:	d7 03       	nop
80003bf8:	d7 03       	nop
80003bfa:	d7 03       	nop
80003bfc:	d7 03       	nop
80003bfe:	d7 03       	nop
