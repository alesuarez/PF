
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006f90  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007ac  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  800099ac  800099ac  00009dac  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000524  00000008  800099b0  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  0000052c  80009ed4  0000a52c  2**0
                  ALLOC
  9 .bss          000002e8  00000530  00000530  00000000  2**2
                  ALLOC
 10 .heap         000027e8  00000818  00000818  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000a52c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000d40  00000000  00000000  0000a560  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00001912  00000000  00000000  0000b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0002782d  00000000  00000000  0000cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005768  00000000  00000000  000343df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000eacf  00000000  00000000  00039b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001f04  00000000  00000000  00048618  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005316  00000000  00000000  0004a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000a2f2  00000000  00000000  0004f832  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00797134  00000000  00000000  00059b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000e18  00000000  00000000  007f0c58  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d2 d8 	sub	pc,pc,-11560

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf f2 dc 	sub	pc,pc,-3364

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 30       	ld.ub	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 44       	ld.w	r4,--r2
800020c8:	00 00       	add	r0,r0
800020ca:	05 3c       	ld.ub	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 48       	ld.w	r8,--r2
800020d0:	00 00       	add	r0,r0
800020d2:	05 34       	ld.ub	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 38       	ld.ub	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 50       	ld.sh	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 40       	ld.w	r0,--r2
800020e0:	00 00       	add	r0,r0
800020e2:	05 4c       	ld.w	r12,--r2

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c1 a8       	rjmp	8000212e <twim_set_speed+0x4a>
800020fc:	30 09       	mov	r9,0
800020fe:	30 77       	mov	r7,7
80002100:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
80002102:	2f f9       	sub	r9,-1
80002104:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002106:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002108:	e0 48 00 ff 	cp.w	r8,255
8000210c:	5f bb       	srhi	r11
8000210e:	ee 09 18 00 	cp.b	r9,r7
80002112:	5f 8a       	srls	r10
80002114:	f7 ea 00 0a 	and	r10,r11,r10
80002118:	fc 0a 18 00 	cp.b	r10,lr
8000211c:	cf 31       	brne	80002102 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211e:	30 7a       	mov	r10,7
80002120:	f4 09 18 00 	cp.b	r9,r10
80002124:	e0 88 00 05 	brls	8000212e <twim_set_speed+0x4a>
80002128:	3f 8c       	mov	r12,-8
8000212a:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212e:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002132:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002136:	14 18       	sub	r8,r10
80002138:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000213c:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80002140:	99 19       	st.w	r12[0x4],r9
80002142:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002146:	d7 03       	nop

80002148 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002148:	48 38       	lddpc	r8,80002154 <twim_status+0xc>
8000214a:	70 08       	ld.w	r8,r8[0x0]
8000214c:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214e:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002152:	5e fc       	retal	r12
80002154:	00 00       	add	r0,r0
80002156:	05 30       	ld.ub	r0,r2++

80002158 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002158:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
8000215c:	e6 18 00 01 	andh	r8,0x1,COH
80002160:	c0 21       	brne	80002164 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80002162:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002164:	3f f8       	mov	r8,-1
80002166:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002168:	99 b8       	st.w	r12[0x2c],r8
}
8000216a:	5e fc       	retal	r12

8000216c <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8000216c:	eb cd 40 fc 	pushm	r2-r7,lr
80002170:	16 94       	mov	r4,r11
80002172:	14 97       	mov	r7,r10
80002174:	12 93       	mov	r3,r9
80002176:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002178:	30 15       	mov	r5,1
8000217a:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000217c:	e0 68 00 80 	mov	r8,128
80002180:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002182:	30 28       	mov	r8,2
80002184:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002186:	49 d6       	lddpc	r6,800021f8 <twim_write+0x8c>
80002188:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000218a:	f0 1f 00 1d 	mcall	800021fc <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x94>
80002190:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002192:	49 d8       	lddpc	r8,80002204 <twim_write+0x98>
80002194:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002196:	30 09       	mov	r9,0
80002198:	49 c8       	lddpc	r8,80002208 <twim_write+0x9c>
8000219a:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000219c:	49 c9       	lddpc	r9,8000220c <twim_write+0xa0>
8000219e:	30 08       	mov	r8,0
800021a0:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021a2:	6c 08       	ld.w	r8,r6[0x0]
800021a4:	b1 67       	lsl	r7,0x10
800021a6:	e8 17 e0 00 	orl	r7,0xe000
800021aa:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021ae:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021b2:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b4:	49 7a       	lddpc	r10,80002210 <twim_write+0xa4>
800021b6:	e0 6b 03 02 	mov	r11,770
800021ba:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021bc:	74 0a       	ld.w	r10,r10[0x0]
800021be:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021c0:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021c2:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c4:	72 08       	ld.w	r8,r9[0x0]
800021c6:	58 08       	cp.w	r8,0
800021c8:	c0 80       	breq	800021d8 <twim_write+0x6c>
800021ca:	c0 b8       	rjmp	800021e0 <twim_write+0x74>
		cpu_relax();
800021cc:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d0:	6e 08       	ld.w	r8,r7[0x0]
800021d2:	58 08       	cp.w	r8,0
800021d4:	c0 30       	breq	800021da <twim_write+0x6e>
800021d6:	c0 58       	rjmp	800021e0 <twim_write+0x74>
800021d8:	48 d7       	lddpc	r7,8000220c <twim_write+0xa0>
800021da:	f0 1f 00 0f 	mcall	80002214 <twim_write+0xa8>
800021de:	cf 70       	breq	800021cc <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e0:	48 b8       	lddpc	r8,8000220c <twim_write+0xa0>
800021e2:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e4:	5b c8       	cp.w	r8,-4
800021e6:	c0 70       	breq	800021f4 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e8:	48 98       	lddpc	r8,8000220c <twim_write+0xa0>
800021ea:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021ec:	5b e8       	cp.w	r8,-2
800021ee:	c0 30       	breq	800021f4 <twim_write+0x88>
800021f0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f4:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f8:	00 00       	add	r0,r0
800021fa:	05 30       	ld.ub	r0,r2++
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 58       	sub	r8,21
80002200:	00 00       	add	r0,r0
80002202:	05 40       	ld.w	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 50       	ld.sh	r0,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 48       	ld.w	r8,--r2
8000220c:	00 00       	add	r0,r0
8000220e:	05 3c       	ld.ub	r12,r2++
80002210:	00 00       	add	r0,r0
80002212:	05 44       	ld.w	r4,--r2
80002214:	80 00       	ld.sh	r0,r0[0x0]
80002216:	21 48       	sub	r8,20

80002218 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002218:	d4 01       	pushm	lr
8000221a:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
8000221c:	30 08       	mov	r8,0
8000221e:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002220:	30 08       	mov	r8,0
80002222:	16 99       	mov	r9,r11
80002224:	10 9a       	mov	r10,r8
80002226:	1a 9b       	mov	r11,sp
80002228:	f0 1f 00 02 	mcall	80002230 <twim_probe+0x18>
}
8000222c:	2f fd       	sub	sp,-4
8000222e:	d8 02       	popm	pc
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	21 6c       	sub	r12,22

80002234 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002234:	eb cd 40 c0 	pushm	r6-r7,lr
80002238:	18 96       	mov	r6,r12
8000223a:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000223c:	30 28       	mov	r8,2
8000223e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002240:	4b 78       	lddpc	r8,8000231c <twim_read_packet+0xe8>
80002242:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002244:	f0 1f 00 37 	mcall	80002320 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002248:	6e 29       	ld.w	r9,r7[0x8]
8000224a:	4b 78       	lddpc	r8,80002324 <twim_read_packet+0xf0>
8000224c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224e:	6e 39       	ld.w	r9,r7[0xc]
80002250:	4b 68       	lddpc	r8,80002328 <twim_read_packet+0xf4>
80002252:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002254:	30 08       	mov	r8,0
80002256:	4b 6a       	lddpc	r10,8000232c <twim_read_packet+0xf8>
80002258:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000225a:	30 0b       	mov	r11,0
8000225c:	4b 5a       	lddpc	r10,80002330 <twim_read_packet+0xfc>
8000225e:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
80002260:	0f fa       	ld.ub	r10,r7[0x7]
80002262:	f0 0a 18 00 	cp.b	r10,r8
80002266:	c2 50       	breq	800022b0 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002268:	4a d8       	lddpc	r8,8000231c <twim_read_packet+0xe8>
8000226a:	70 08       	ld.w	r8,r8[0x0]
8000226c:	30 19       	mov	r9,1
8000226e:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80002270:	e0 69 00 80 	mov	r9,128
80002274:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002276:	30 29       	mov	r9,2
80002278:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
8000227a:	ee ca ff fc 	sub	r10,r7,-4
8000227e:	4a e9       	lddpc	r9,80002334 <twim_read_packet+0x100>
80002280:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80002282:	0f f9       	ld.ub	r9,r7[0x7]
80002284:	4a da       	lddpc	r10,80002338 <twim_read_packet+0x104>
80002286:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002288:	e0 6b 07 03 	mov	r11,1795
8000228c:	4a ca       	lddpc	r10,8000233c <twim_read_packet+0x108>
8000228e:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002290:	6e 0a       	ld.w	r10,r7[0x0]
80002292:	a1 7a       	lsl	r10,0x1
80002294:	e8 1a a0 00 	orl	r10,0xa000
80002298:	f5 e9 11 09 	or	r9,r10,r9<<0x10
8000229c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229e:	6e 0a       	ld.w	r10,r7[0x0]
800022a0:	6e 39       	ld.w	r9,r7[0xc]
800022a2:	b1 69       	lsl	r9,0x10
800022a4:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a8:	e8 19 e0 01 	orl	r9,0xe001
800022ac:	91 49       	st.w	r8[0x10],r9
800022ae:	c1 18       	rjmp	800022d0 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022b0:	30 0a       	mov	r10,0
800022b2:	4a 28       	lddpc	r8,80002338 <twim_read_packet+0x104>
800022b4:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b6:	e0 6a 07 01 	mov	r10,1793
800022ba:	4a 18       	lddpc	r8,8000233c <twim_read_packet+0x108>
800022bc:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022be:	49 88       	lddpc	r8,8000231c <twim_read_packet+0xe8>
800022c0:	70 08       	ld.w	r8,r8[0x0]
800022c2:	6e 0a       	ld.w	r10,r7[0x0]
800022c4:	b1 69       	lsl	r9,0x10
800022c6:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022ca:	e8 19 e0 01 	orl	r9,0xe001
800022ce:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022d0:	49 38       	lddpc	r8,8000231c <twim_read_packet+0xe8>
800022d2:	70 08       	ld.w	r8,r8[0x0]
800022d4:	49 a9       	lddpc	r9,8000233c <twim_read_packet+0x108>
800022d6:	72 09       	ld.w	r9,r9[0x0]
800022d8:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022da:	30 18       	mov	r8,1
800022dc:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022de:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022e0:	49 48       	lddpc	r8,80002330 <twim_read_packet+0xfc>
800022e2:	70 08       	ld.w	r8,r8[0x0]
800022e4:	58 08       	cp.w	r8,0
800022e6:	c0 80       	breq	800022f6 <twim_read_packet+0xc2>
800022e8:	c0 b8       	rjmp	800022fe <twim_read_packet+0xca>
		cpu_relax();
800022ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ee:	6e 08       	ld.w	r8,r7[0x0]
800022f0:	58 08       	cp.w	r8,0
800022f2:	c0 30       	breq	800022f8 <twim_read_packet+0xc4>
800022f4:	c0 58       	rjmp	800022fe <twim_read_packet+0xca>
800022f6:	48 f7       	lddpc	r7,80002330 <twim_read_packet+0xfc>
800022f8:	f0 1f 00 12 	mcall	80002340 <twim_read_packet+0x10c>
800022fc:	cf 70       	breq	800022ea <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fe:	30 28       	mov	r8,2
80002300:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002302:	48 c8       	lddpc	r8,80002330 <twim_read_packet+0xfc>
80002304:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002306:	5b c8       	cp.w	r8,-4
80002308:	c0 70       	breq	80002316 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000230a:	48 a8       	lddpc	r8,80002330 <twim_read_packet+0xfc>
8000230c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230e:	5b e8       	cp.w	r8,-2
80002310:	c0 30       	breq	80002316 <twim_read_packet+0xe2>
80002312:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002316:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
8000231a:	00 00       	add	r0,r0
8000231c:	00 00       	add	r0,r0
8000231e:	05 30       	ld.ub	r0,r2++
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	21 58       	sub	r8,21
80002324:	00 00       	add	r0,r0
80002326:	05 34       	ld.ub	r4,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 38       	ld.ub	r8,r2++
8000232c:	00 00       	add	r0,r0
8000232e:	05 48       	ld.w	r8,--r2
80002330:	00 00       	add	r0,r0
80002332:	05 3c       	ld.ub	r12,r2++
80002334:	00 00       	add	r0,r0
80002336:	05 40       	ld.w	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 50       	ld.sh	r0,--r2
8000233c:	00 00       	add	r0,r0
8000233e:	05 44       	ld.w	r4,--r2
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	21 48       	sub	r8,20

80002344 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002344:	eb cd 40 e0 	pushm	r5-r7,lr
80002348:	18 97       	mov	r7,r12
8000234a:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000234c:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002350:	30 0a       	mov	r10,0
80002352:	4a 69       	lddpc	r9,800023e8 <twim_master_init+0xa4>
80002354:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002356:	e6 18 00 01 	andh	r8,0x1,COH
8000235a:	c0 b1       	brne	80002370 <twim_master_init+0x2c>
		cpu_irq_disable ();
8000235c:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235e:	3f f8       	mov	r8,-1
80002360:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002362:	30 18       	mov	r8,1
80002364:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002366:	e0 68 00 80 	mov	r8,128
8000236a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
8000236c:	d5 03       	csrf	0x10
8000236e:	c0 88       	rjmp	8000237e <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002370:	3f f8       	mov	r8,-1
80002372:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002374:	30 18       	mov	r8,1
80002376:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002378:	e0 68 00 80 	mov	r8,128
8000237c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237e:	3f f8       	mov	r8,-1
80002380:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002382:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002386:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002388:	30 1a       	mov	r10,1
8000238a:	e0 6b 02 80 	mov	r11,640
8000238e:	49 8c       	lddpc	r12,800023ec <twim_master_init+0xa8>
80002390:	f0 1f 00 18 	mcall	800023f0 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002394:	e6 16 00 01 	andh	r6,0x1,COH
80002398:	c0 21       	brne	8000239c <twim_master_init+0x58>
      cpu_irq_enable();
8000239a:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
8000239c:	eb 39 00 0c 	ld.ub	r9,r5[12]
800023a0:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800023a2:	f0 09 18 00 	cp.b	r9,r8
800023a6:	f9 b8 01 10 	movne	r8,16
800023aa:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023ae:	f9 b8 01 ff 	movne	r8,-1
800023b2:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b6:	6a 0a       	ld.w	r10,r5[0x0]
800023b8:	6a 1b       	ld.w	r11,r5[0x4]
800023ba:	0e 9c       	mov	r12,r7
800023bc:	f0 1f 00 0e 	mcall	800023f4 <twim_master_init+0xb0>
800023c0:	5b 8c       	cp.w	r12,-8
800023c2:	c1 00       	breq	800023e2 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c4:	6a 2b       	ld.w	r11,r5[0x8]
800023c6:	0e 9c       	mov	r12,r7
800023c8:	f0 1f 00 0c 	mcall	800023f8 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023cc:	48 78       	lddpc	r8,800023e8 <twim_master_init+0xa4>
800023ce:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d0:	5b c8       	cp.w	r8,-4
800023d2:	c0 70       	breq	800023e0 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d4:	48 58       	lddpc	r8,800023e8 <twim_master_init+0xa4>
800023d6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d8:	5b e8       	cp.w	r8,-2
800023da:	c0 30       	breq	800023e0 <twim_master_init+0x9c>
800023dc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023e0:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e6:	00 00       	add	r0,r0
800023e8:	00 00       	add	r0,r0
800023ea:	05 3c       	ld.ub	r12,r2++
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	20 08       	sub	r8,0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	26 b4       	sub	r4,107
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	20 e4       	sub	r4,14
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	22 18       	sub	r8,33

800023fc <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023fc:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002400:	58 0a       	cp.w	r10,0
80002402:	c6 30       	breq	800024c8 <eic_init+0xcc>
80002404:	30 08       	mov	r8,0
80002406:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002408:	30 19       	mov	r9,1
8000240a:	30 1e       	mov	lr,1
8000240c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002410:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002414:	11 96       	ld.ub	r6,r8[0x1]
80002416:	f2 06 18 00 	cp.b	r6,r9
8000241a:	c0 71       	brne	80002428 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
8000241c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241e:	11 86       	ld.ub	r6,r8[0x0]
80002420:	fc 06 09 46 	lsl	r6,lr,r6
80002424:	0a 46       	or	r6,r5
80002426:	c0 78       	rjmp	80002434 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002428:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000242a:	11 86       	ld.ub	r6,r8[0x0]
8000242c:	fc 06 09 46 	lsl	r6,lr,r6
80002430:	5c d6       	com	r6
80002432:	0a 66       	and	r6,r5
80002434:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002436:	11 a6       	ld.ub	r6,r8[0x2]
80002438:	f2 06 18 00 	cp.b	r6,r9
8000243c:	c0 71       	brne	8000244a <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002440:	11 86       	ld.ub	r6,r8[0x0]
80002442:	fc 06 09 46 	lsl	r6,lr,r6
80002446:	0a 46       	or	r6,r5
80002448:	c0 78       	rjmp	80002456 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8000244a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000244c:	11 86       	ld.ub	r6,r8[0x0]
8000244e:	fc 06 09 46 	lsl	r6,lr,r6
80002452:	5c d6       	com	r6
80002454:	0a 66       	and	r6,r5
80002456:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002458:	11 b6       	ld.ub	r6,r8[0x3]
8000245a:	f2 06 18 00 	cp.b	r6,r9
8000245e:	c0 71       	brne	8000246c <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002460:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002462:	11 86       	ld.ub	r6,r8[0x0]
80002464:	fc 06 09 46 	lsl	r6,lr,r6
80002468:	0a 46       	or	r6,r5
8000246a:	c0 78       	rjmp	80002478 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
8000246c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246e:	11 86       	ld.ub	r6,r8[0x0]
80002470:	fc 06 09 46 	lsl	r6,lr,r6
80002474:	5c d6       	com	r6
80002476:	0a 66       	and	r6,r5
80002478:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000247a:	11 c6       	ld.ub	r6,r8[0x4]
8000247c:	f2 06 18 00 	cp.b	r6,r9
80002480:	c0 71       	brne	8000248e <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002482:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002484:	11 86       	ld.ub	r6,r8[0x0]
80002486:	fc 06 09 46 	lsl	r6,lr,r6
8000248a:	0a 46       	or	r6,r5
8000248c:	c0 78       	rjmp	8000249a <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002490:	11 86       	ld.ub	r6,r8[0x0]
80002492:	fc 06 09 46 	lsl	r6,lr,r6
80002496:	5c d6       	com	r6
80002498:	0a 66       	and	r6,r5
8000249a:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000249c:	11 d6       	ld.ub	r6,r8[0x5]
8000249e:	f2 06 18 00 	cp.b	r6,r9
800024a2:	c0 71       	brne	800024b0 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a4:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a6:	11 88       	ld.ub	r8,r8[0x0]
800024a8:	fc 08 09 48 	lsl	r8,lr,r8
800024ac:	0c 48       	or	r8,r6
800024ae:	c0 78       	rjmp	800024bc <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024b0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024b2:	11 88       	ld.ub	r8,r8[0x0]
800024b4:	fc 08 09 48 	lsl	r8,lr,r8
800024b8:	5c d8       	com	r8
800024ba:	0c 68       	and	r8,r6
800024bc:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024be:	2f f7       	sub	r7,-1
800024c0:	0e 98       	mov	r8,r7
800024c2:	0e 3a       	cp.w	r10,r7
800024c4:	fe 9b ff a4 	brhi	8000240c <eic_init+0x10>
800024c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024cc <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024cc:	30 18       	mov	r8,1
800024ce:	f0 0b 09 48 	lsl	r8,r8,r11
800024d2:	99 c8       	st.w	r12[0x30],r8
}
800024d4:	5e fc       	retal	r12

800024d6 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d6:	30 18       	mov	r8,1
800024d8:	f0 0b 09 48 	lsl	r8,r8,r11
800024dc:	99 08       	st.w	r12[0x0],r8
}
800024de:	5e fc       	retal	r12

800024e0 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024e0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e4:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e6:	30 19       	mov	r9,1
800024e8:	f2 0b 09 4b 	lsl	r11,r9,r11
800024ec:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ee:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024f0:	e6 18 00 01 	andh	r8,0x1,COH
800024f4:	c0 21       	brne	800024f8 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f6:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f8:	5e fc       	retal	r12
800024fa:	d7 03       	nop

800024fc <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024fc:	f8 08 16 05 	lsr	r8,r12,0x5
80002500:	a9 78       	lsl	r8,0x9
80002502:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002506:	58 7b       	cp.w	r11,7
80002508:	e0 8b 00 05 	brhi	80002512 <gpio_enable_module_pin+0x16>
8000250c:	4a 09       	lddpc	r9,8000258c <gpio_enable_module_pin+0x90>
8000250e:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002512:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002514:	30 19       	mov	r9,1
80002516:	f2 0c 09 49 	lsl	r9,r9,r12
8000251a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000251c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002520:	c3 18       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002522:	30 19       	mov	r9,1
80002524:	f2 0c 09 49 	lsl	r9,r9,r12
80002528:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000252a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000252c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252e:	c2 a8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002530:	30 19       	mov	r9,1
80002532:	f2 0c 09 49 	lsl	r9,r9,r12
80002536:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002538:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000253a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000253c:	c2 38       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253e:	30 19       	mov	r9,1
80002540:	f2 0c 09 49 	lsl	r9,r9,r12
80002544:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002546:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002548:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000254a:	c1 c8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000254c:	30 19       	mov	r9,1
8000254e:	f2 0c 09 49 	lsl	r9,r9,r12
80002552:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002554:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002556:	91 d9       	st.w	r8[0x34],r9
		break;
80002558:	c1 58       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000255a:	30 19       	mov	r9,1
8000255c:	f2 0c 09 49 	lsl	r9,r9,r12
80002560:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002562:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002564:	91 d9       	st.w	r8[0x34],r9
		break;
80002566:	c0 e8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002568:	30 19       	mov	r9,1
8000256a:	f2 0c 09 49 	lsl	r9,r9,r12
8000256e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002570:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002572:	91 d9       	st.w	r8[0x34],r9
		break;
80002574:	c0 78       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002576:	30 19       	mov	r9,1
80002578:	f2 0c 09 49 	lsl	r9,r9,r12
8000257c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257e:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002580:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002582:	30 19       	mov	r9,1
80002584:	f2 0c 09 4c 	lsl	r12,r9,r12
80002588:	91 2c       	st.w	r8[0x8],r12
8000258a:	5e fd       	retal	0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	92 00       	ld.sh	r0,r9[0x0]

80002590 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002590:	d4 21       	pushm	r4-r7,lr
80002592:	18 97       	mov	r7,r12
80002594:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002596:	58 0b       	cp.w	r11,0
80002598:	c0 31       	brne	8000259e <gpio_enable_module+0xe>
8000259a:	30 05       	mov	r5,0
8000259c:	c0 d8       	rjmp	800025b6 <gpio_enable_module+0x26>
8000259e:	30 06       	mov	r6,0
800025a0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800025a2:	6e 1b       	ld.w	r11,r7[0x4]
800025a4:	6e 0c       	ld.w	r12,r7[0x0]
800025a6:	f0 1f 00 06 	mcall	800025bc <gpio_enable_module+0x2c>
800025aa:	18 45       	or	r5,r12
		gpiomap++;
800025ac:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025ae:	2f f6       	sub	r6,-1
800025b0:	0c 34       	cp.w	r4,r6
800025b2:	fe 9b ff f8 	brhi	800025a2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b6:	0a 9c       	mov	r12,r5
800025b8:	d8 22       	popm	r4-r7,pc
800025ba:	00 00       	add	r0,r0
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	24 fc       	sub	r12,79

800025c0 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025c0:	f8 08 16 05 	lsr	r8,r12,0x5
800025c4:	a9 78       	lsl	r8,0x9
800025c6:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025ca:	16 99       	mov	r9,r11
800025cc:	e2 19 00 04 	andl	r9,0x4,COH
800025d0:	c0 70       	breq	800025de <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025d2:	30 19       	mov	r9,1
800025d4:	f2 0c 09 49 	lsl	r9,r9,r12
800025d8:	f1 49 00 74 	st.w	r8[116],r9
800025dc:	c0 68       	rjmp	800025e8 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025de:	30 19       	mov	r9,1
800025e0:	f2 0c 09 49 	lsl	r9,r9,r12
800025e4:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e8:	16 99       	mov	r9,r11
800025ea:	e2 19 00 80 	andl	r9,0x80,COH
800025ee:	c2 40       	breq	80002636 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025f0:	16 99       	mov	r9,r11
800025f2:	e2 19 01 80 	andl	r9,0x180,COH
800025f6:	c0 90       	breq	80002608 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f8:	30 19       	mov	r9,1
800025fa:	f2 0c 09 49 	lsl	r9,r9,r12
800025fe:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002602:	f1 49 00 b8 	st.w	r8[184],r9
80002606:	c1 88       	rjmp	80002636 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002608:	16 99       	mov	r9,r11
8000260a:	e2 19 02 80 	andl	r9,0x280,COH
8000260e:	c0 90       	breq	80002620 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002610:	30 19       	mov	r9,1
80002612:	f2 0c 09 49 	lsl	r9,r9,r12
80002616:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000261a:	f1 49 00 b8 	st.w	r8[184],r9
8000261e:	c0 c8       	rjmp	80002636 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002620:	16 99       	mov	r9,r11
80002622:	e2 19 03 80 	andl	r9,0x380,COH
80002626:	c0 80       	breq	80002636 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002628:	30 19       	mov	r9,1
8000262a:	f2 0c 09 49 	lsl	r9,r9,r12
8000262e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002632:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002636:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000263a:	c1 50       	breq	80002664 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
8000263c:	e2 1b 00 02 	andl	r11,0x2,COH
80002640:	c0 70       	breq	8000264e <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002642:	30 19       	mov	r9,1
80002644:	f2 0c 09 49 	lsl	r9,r9,r12
80002648:	f1 49 00 54 	st.w	r8[84],r9
8000264c:	c0 68       	rjmp	80002658 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264e:	30 19       	mov	r9,1
80002650:	f2 0c 09 49 	lsl	r9,r9,r12
80002654:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002658:	30 19       	mov	r9,1
8000265a:	f2 0c 09 49 	lsl	r9,r9,r12
8000265e:	f1 49 00 44 	st.w	r8[68],r9
80002662:	c0 68       	rjmp	8000266e <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002664:	30 19       	mov	r9,1
80002666:	f2 0c 09 49 	lsl	r9,r9,r12
8000266a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266e:	30 19       	mov	r9,1
80002670:	f2 0c 09 4c 	lsl	r12,r9,r12
80002674:	91 1c       	st.w	r8[0x4],r12
}
80002676:	5e fc       	retal	r12

80002678 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002678:	f8 08 16 05 	lsr	r8,r12,0x5
8000267c:	a9 78       	lsl	r8,0x9
8000267e:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002682:	30 19       	mov	r9,1
80002684:	f2 0c 09 4c 	lsl	r12,r9,r12
80002688:	f1 4c 00 5c 	st.w	r8[92],r12
}
8000268c:	5e fc       	retal	r12

8000268e <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268e:	f8 08 16 05 	lsr	r8,r12,0x5
80002692:	a9 78       	lsl	r8,0x9
80002694:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
80002698:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
8000269c:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800026a0:	30 1a       	mov	r10,1
800026a2:	f4 0c 09 4c 	lsl	r12,r10,r12
800026a6:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026aa:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026ae:	5e fc       	retal	r12

800026b0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026b0:	c0 08       	rjmp	800026b0 <_unhandled_interrupt>
800026b2:	d7 03       	nop

800026b4 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026b4:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026b8:	49 99       	lddpc	r9,8000271c <INTC_register_interrupt+0x68>
800026ba:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026be:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026c2:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026c4:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026c8:	58 0a       	cp.w	r10,0
800026ca:	c0 91       	brne	800026dc <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026cc:	49 59       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
800026ce:	49 6a       	lddpc	r10,80002724 <INTC_register_interrupt+0x70>
800026d0:	12 1a       	sub	r10,r9
800026d2:	fe 79 10 00 	mov	r9,-61440
800026d6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026da:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800026dc:	58 1a       	cp.w	r10,1
800026de:	c0 a1       	brne	800026f2 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800026e0:	49 09       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
800026e2:	49 2a       	lddpc	r10,80002728 <INTC_register_interrupt+0x74>
800026e4:	12 1a       	sub	r10,r9
800026e6:	bf aa       	sbr	r10,0x1e
800026e8:	fe 79 10 00 	mov	r9,-61440
800026ec:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026f0:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800026f2:	58 2a       	cp.w	r10,2
800026f4:	c0 a1       	brne	80002708 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800026f6:	48 b9       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
800026f8:	48 da       	lddpc	r10,8000272c <INTC_register_interrupt+0x78>
800026fa:	12 1a       	sub	r10,r9
800026fc:	bf ba       	sbr	r10,0x1f
800026fe:	fe 79 10 00 	mov	r9,-61440
80002702:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002706:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002708:	48 69       	lddpc	r9,80002720 <INTC_register_interrupt+0x6c>
8000270a:	48 aa       	lddpc	r10,80002730 <INTC_register_interrupt+0x7c>
8000270c:	12 1a       	sub	r10,r9
8000270e:	ea 1a c0 00 	orh	r10,0xc000
80002712:	fe 79 10 00 	mov	r9,-61440
80002716:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000271a:	5e fc       	retal	r12
8000271c:	80 00       	ld.sh	r0,r0[0x0]
8000271e:	92 20       	ld.sh	r0,r9[0x4]
80002720:	80 00       	ld.sh	r0,r0[0x0]
80002722:	90 00       	ld.sh	r0,r8[0x0]
80002724:	80 00       	ld.sh	r0,r0[0x0]
80002726:	91 04       	st.w	r8[0x0],r4
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	91 12       	st.w	r8[0x4],r2
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	91 20       	st.w	r8[0x8],r0
80002730:	80 00       	ld.sh	r0,r0[0x0]
80002732:	91 2e       	st.w	r8[0x8],lr

80002734 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002734:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002736:	49 18       	lddpc	r8,80002778 <INTC_init_interrupts+0x44>
80002738:	e3 b8 00 01 	mtsr	0x4,r8
8000273c:	49 0e       	lddpc	lr,8000277c <INTC_init_interrupts+0x48>
8000273e:	30 07       	mov	r7,0
80002740:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002742:	49 0c       	lddpc	r12,80002780 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002744:	49 05       	lddpc	r5,80002784 <INTC_init_interrupts+0x50>
80002746:	10 15       	sub	r5,r8
80002748:	fe 76 10 00 	mov	r6,-61440
8000274c:	c1 08       	rjmp	8000276c <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000274e:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002750:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002752:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002754:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002758:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000275a:	10 3a       	cp.w	r10,r8
8000275c:	fe 9b ff fc 	brhi	80002754 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002760:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002764:	2f f7       	sub	r7,-1
80002766:	2f 8e       	sub	lr,-8
80002768:	59 f7       	cp.w	r7,31
8000276a:	c0 50       	breq	80002774 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000276c:	7c 08       	ld.w	r8,lr[0x0]
8000276e:	58 08       	cp.w	r8,0
80002770:	ce f1       	brne	8000274e <INTC_init_interrupts+0x1a>
80002772:	cf 7b       	rjmp	80002760 <INTC_init_interrupts+0x2c>
80002774:	d8 22       	popm	r4-r7,pc
80002776:	00 00       	add	r0,r0
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	90 00       	ld.sh	r0,r8[0x0]
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	92 20       	ld.sh	r0,r9[0x4]
80002780:	80 00       	ld.sh	r0,r0[0x0]
80002782:	26 b0       	sub	r0,107
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	91 04       	st.w	r8[0x0],r4

80002788 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002788:	fe 78 10 00 	mov	r8,-61440
8000278c:	e0 69 00 83 	mov	r9,131
80002790:	f2 0c 01 0c 	sub	r12,r9,r12
80002794:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002798:	f2 ca ff c0 	sub	r10,r9,-64
8000279c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027a0:	58 08       	cp.w	r8,0
800027a2:	c0 21       	brne	800027a6 <_get_interrupt_handler+0x1e>
800027a4:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027a6:	f0 08 12 00 	clz	r8,r8
800027aa:	48 5a       	lddpc	r10,800027bc <_get_interrupt_handler+0x34>
800027ac:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027b0:	f0 08 11 1f 	rsub	r8,r8,31
800027b4:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027b6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027ba:	5e fc       	retal	r12
800027bc:	80 00       	ld.sh	r0,r0[0x0]
800027be:	92 20       	ld.sh	r0,r9[0x4]

800027c0 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027c0:	f8 c8 00 01 	sub	r8,r12,1
800027c4:	f0 0b 00 0b 	add	r11,r8,r11
800027c8:	f6 0c 0d 0a 	divu	r10,r11,r12
800027cc:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027ce:	f4 c8 00 01 	sub	r8,r10,1
800027d2:	e0 48 00 fe 	cp.w	r8,254
800027d6:	e0 88 00 03 	brls	800027dc <getBaudDiv+0x1c>
800027da:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800027dc:	5c 8c       	casts.h	r12
}
800027de:	5e fc       	retal	r12

800027e0 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800027e0:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800027e2:	30 18       	mov	r8,1
800027e4:	f0 0b 18 00 	cp.b	r11,r8
800027e8:	5f be       	srhi	lr
800027ea:	f0 0a 18 00 	cp.b	r10,r8
800027ee:	5f b8       	srhi	r8
800027f0:	fd e8 10 08 	or	r8,lr,r8
800027f4:	c0 30       	breq	800027fa <spi_selectionMode+0x1a>
800027f6:	30 2c       	mov	r12,2
800027f8:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800027fa:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800027fc:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002800:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002804:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002808:	99 18       	st.w	r12[0x4],r8
8000280a:	d8 0a       	popm	pc,r12=0

8000280c <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000280c:	78 18       	ld.w	r8,r12[0x4]
8000280e:	ea 18 00 0f 	orh	r8,0xf
80002812:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002814:	78 18       	ld.w	r8,r12[0x4]
80002816:	e2 18 00 04 	andl	r8,0x4,COH
8000281a:	c0 f0       	breq	80002838 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000281c:	30 e8       	mov	r8,14
8000281e:	f0 0b 18 00 	cp.b	r11,r8
80002822:	e0 8b 00 19 	brhi	80002854 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002826:	78 18       	ld.w	r8,r12[0x4]
80002828:	b1 6b       	lsl	r11,0x10
8000282a:	ea 1b ff f0 	orh	r11,0xfff0
8000282e:	e8 1b ff ff 	orl	r11,0xffff
80002832:	10 6b       	and	r11,r8
80002834:	99 1b       	st.w	r12[0x4],r11
80002836:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002838:	30 38       	mov	r8,3
8000283a:	f0 0b 18 00 	cp.b	r11,r8
8000283e:	e0 8b 00 0b 	brhi	80002854 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002842:	78 18       	ld.w	r8,r12[0x4]
80002844:	2f 0b       	sub	r11,-16
80002846:	30 19       	mov	r9,1
80002848:	f2 0b 09 4b 	lsl	r11,r9,r11
8000284c:	5c db       	com	r11
8000284e:	10 6b       	and	r11,r8
80002850:	99 1b       	st.w	r12[0x4],r11
80002852:	5e fd       	retal	0
80002854:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002856:	5e fc       	retal	r12

80002858 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002858:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000285c:	c0 58       	rjmp	80002866 <spi_unselectChip+0xe>
		if (!timeout--) {
8000285e:	58 08       	cp.w	r8,0
80002860:	c0 21       	brne	80002864 <spi_unselectChip+0xc>
80002862:	5e ff       	retal	1
80002864:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002866:	78 49       	ld.w	r9,r12[0x10]
80002868:	e2 19 02 00 	andl	r9,0x200,COH
8000286c:	cf 90       	breq	8000285e <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000286e:	78 18       	ld.w	r8,r12[0x4]
80002870:	ea 18 00 0f 	orh	r8,0xf
80002874:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002876:	fc 18 01 00 	movh	r8,0x100
8000287a:	99 08       	st.w	r12[0x0],r8
8000287c:	5e fd       	retal	0
8000287e:	d7 03       	nop

80002880 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002880:	eb cd 40 f8 	pushm	r3-r7,lr
80002884:	18 95       	mov	r5,r12
80002886:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002888:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000288c:	30 38       	mov	r8,3
8000288e:	f0 06 18 00 	cp.b	r6,r8
80002892:	e0 8b 00 4d 	brhi	8000292c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002896:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000289a:	30 18       	mov	r8,1
8000289c:	f0 04 18 00 	cp.b	r4,r8
800028a0:	e0 8b 00 46 	brhi	8000292c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028a4:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028a8:	30 78       	mov	r8,7
800028aa:	f0 03 18 00 	cp.b	r3,r8
800028ae:	e0 88 00 3f 	brls	8000292c <spi_setupChipReg+0xac>
800028b2:	31 08       	mov	r8,16
800028b4:	f0 03 18 00 	cp.b	r3,r8
800028b8:	e0 8b 00 3a 	brhi	8000292c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028bc:	14 9b       	mov	r11,r10
800028be:	6e 1c       	ld.w	r12,r7[0x4]
800028c0:	f0 1f 00 1d 	mcall	80002934 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028c4:	c3 45       	brlt	8000292c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028c6:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028c8:	ec 09 16 01 	lsr	r9,r6,0x1
800028cc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028d0:	ec 16 00 01 	eorl	r6,0x1
800028d4:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800028d8:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800028dc:	20 83       	sub	r3,8
800028de:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800028e2:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800028e6:	ef 39 00 09 	ld.ub	r9,r7[9]
800028ea:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800028ee:	ef 39 00 0a 	ld.ub	r9,r7[10]
800028f2:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800028f6:	0f 89       	ld.ub	r9,r7[0x0]
800028f8:	30 1a       	mov	r10,1
800028fa:	f4 09 18 00 	cp.b	r9,r10
800028fe:	c0 e0       	breq	8000291a <spi_setupChipReg+0x9a>
80002900:	c0 a3       	brcs	80002914 <spi_setupChipReg+0x94>
80002902:	30 2a       	mov	r10,2
80002904:	f4 09 18 00 	cp.b	r9,r10
80002908:	c0 c0       	breq	80002920 <spi_setupChipReg+0xa0>
8000290a:	30 3a       	mov	r10,3
8000290c:	f4 09 18 00 	cp.b	r9,r10
80002910:	c0 e1       	brne	8000292c <spi_setupChipReg+0xac>
80002912:	c0 a8       	rjmp	80002926 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002914:	8b c8       	st.w	r5[0x30],r8
80002916:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000291a:	8b d8       	st.w	r5[0x34],r8
8000291c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002920:	8b e8       	st.w	r5[0x38],r8
80002922:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002926:	8b f8       	st.w	r5[0x3c],r8
80002928:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000292c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000292e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002932:	00 00       	add	r0,r0
80002934:	80 00       	ld.sh	r0,r0[0x0]
80002936:	27 c0       	sub	r0,124

80002938 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002938:	30 18       	mov	r8,1
8000293a:	99 08       	st.w	r12[0x0],r8
}
8000293c:	5e fc       	retal	r12

8000293e <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000293e:	76 09       	ld.w	r9,r11[0x0]
80002940:	58 29       	cp.w	r9,2
80002942:	e0 88 00 03 	brls	80002948 <tc_init_waveform+0xa>
80002946:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002948:	76 18       	ld.w	r8,r11[0x4]
8000294a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000294e:	af ba       	sbr	r10,0xf
80002950:	10 9b       	mov	r11,r8
80002952:	e6 1b c0 00 	andh	r11,0xc000,COH
80002956:	16 4a       	or	r10,r11
80002958:	10 9b       	mov	r11,r8
8000295a:	e6 1b 30 00 	andh	r11,0x3000,COH
8000295e:	16 4a       	or	r10,r11
80002960:	10 9b       	mov	r11,r8
80002962:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002966:	16 4a       	or	r10,r11
80002968:	10 9b       	mov	r11,r8
8000296a:	e6 1b 03 00 	andh	r11,0x300,COH
8000296e:	16 4a       	or	r10,r11
80002970:	10 9b       	mov	r11,r8
80002972:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002976:	16 4a       	or	r10,r11
80002978:	10 9b       	mov	r11,r8
8000297a:	e6 1b 00 30 	andh	r11,0x30,COH
8000297e:	16 4a       	or	r10,r11
80002980:	10 9b       	mov	r11,r8
80002982:	e6 1b 00 0c 	andh	r11,0xc,COH
80002986:	16 4a       	or	r10,r11
80002988:	10 9b       	mov	r11,r8
8000298a:	e6 1b 00 03 	andh	r11,0x3,COH
8000298e:	16 4a       	or	r10,r11
80002990:	10 9b       	mov	r11,r8
80002992:	e2 1b 60 00 	andl	r11,0x6000,COH
80002996:	16 4a       	or	r10,r11
80002998:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
8000299c:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800029a0:	10 9b       	mov	r11,r8
800029a2:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029a6:	16 4a       	or	r10,r11
800029a8:	10 9b       	mov	r11,r8
800029aa:	e2 1b 03 00 	andl	r11,0x300,COH
800029ae:	16 4a       	or	r10,r11
800029b0:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029b4:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029b8:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029bc:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029c0:	10 9b       	mov	r11,r8
800029c2:	e2 1b 00 30 	andl	r11,0x30,COH
800029c6:	16 4a       	or	r10,r11
800029c8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029cc:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029d0:	a5 69       	lsl	r9,0x4
800029d2:	2f f9       	sub	r9,-1
800029d4:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800029d8:	5e fd       	retal	0

800029da <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029da:	58 2b       	cp.w	r11,2
800029dc:	e0 88 00 03 	brls	800029e2 <tc_start+0x8>
800029e0:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800029e2:	a7 6b       	lsl	r11,0x6
800029e4:	16 0c       	add	r12,r11
800029e6:	30 58       	mov	r8,5
800029e8:	99 08       	st.w	r12[0x0],r8
800029ea:	5e fd       	retal	0

800029ec <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029ec:	58 2b       	cp.w	r11,2
800029ee:	e0 88 00 03 	brls	800029f4 <tc_stop+0x8>
800029f2:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
800029f4:	a7 6b       	lsl	r11,0x6
800029f6:	16 0c       	add	r12,r11
800029f8:	30 28       	mov	r8,2
800029fa:	99 08       	st.w	r12[0x0],r8
800029fc:	5e fd       	retal	0

800029fe <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029fe:	58 2b       	cp.w	r11,2
80002a00:	e0 88 00 03 	brls	80002a06 <tc_read_sr+0x8>
80002a04:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a06:	a7 6b       	lsl	r11,0x6
80002a08:	2e 0b       	sub	r11,-32
80002a0a:	16 0c       	add	r12,r11
80002a0c:	78 0c       	ld.w	r12,r12[0x0]
}
80002a0e:	5e fc       	retal	r12

80002a10 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a10:	58 2b       	cp.w	r11,2
80002a12:	e0 88 00 03 	brls	80002a18 <tc_write_rc+0x8>
80002a16:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a18:	f6 08 15 04 	lsl	r8,r11,0x4
80002a1c:	2f f8       	sub	r8,-1
80002a1e:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a22:	e2 18 80 00 	andl	r8,0x8000,COH
80002a26:	c0 c0       	breq	80002a3e <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a28:	a7 6b       	lsl	r11,0x6
80002a2a:	16 0c       	add	r12,r11
80002a2c:	2e 4c       	sub	r12,-28
80002a2e:	78 08       	ld.w	r8,r12[0x0]
80002a30:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a34:	e0 18 00 00 	andl	r8,0x0
80002a38:	f3 e8 10 08 	or	r8,r9,r8
80002a3c:	99 08       	st.w	r12[0x0],r8

  return value;
80002a3e:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a42:	5e fc       	retal	r12

80002a44 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a44:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a48:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a4c:	58 2b       	cp.w	r11,2
80002a4e:	e0 88 00 04 	brls	80002a56 <tc_configure_interrupts+0x12>
80002a52:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a56:	ee 19 00 01 	eorh	r9,0x1
80002a5a:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a5e:	74 08       	ld.w	r8,r10[0x0]
80002a60:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a64:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a68:	a7 6e       	lsl	lr,0x6
80002a6a:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a6e:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a72:	0e 4e       	or	lr,r7
80002a74:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002a78:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002a7c:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002a80:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002a84:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002a88:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002a8c:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002a90:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002a94:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a98:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002a9c:	f6 0e 15 06 	lsl	lr,r11,0x6
80002aa0:	f8 0e 00 0e 	add	lr,r12,lr
80002aa4:	2d ce       	sub	lr,-36
80002aa6:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002aa8:	58 09       	cp.w	r9,0
80002aaa:	c0 20       	breq	80002aae <tc_configure_interrupts+0x6a>
80002aac:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002aae:	74 08       	ld.w	r8,r10[0x0]
80002ab0:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002ab4:	e0 65 00 80 	mov	r5,128
80002ab8:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002abc:	74 08       	ld.w	r8,r10[0x0]
80002abe:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002ac2:	f9 b4 00 40 	moveq	r4,64
80002ac6:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002aca:	74 08       	ld.w	r8,r10[0x0]
80002acc:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002ad0:	f9 b3 00 20 	moveq	r3,32
80002ad4:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002ad8:	74 08       	ld.w	r8,r10[0x0]
80002ada:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002ade:	f9 b2 00 10 	moveq	r2,16
80002ae2:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002ae6:	74 08       	ld.w	r8,r10[0x0]
80002ae8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002aec:	f9 b6 00 08 	moveq	r6,8
80002af0:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002af4:	74 08       	ld.w	r8,r10[0x0]
80002af6:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002afa:	f9 b7 00 04 	moveq	r7,4
80002afe:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002b02:	74 08       	ld.w	r8,r10[0x0]
80002b04:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b08:	f9 be 00 02 	moveq	lr,2
80002b0c:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b10:	74 08       	ld.w	r8,r10[0x0]
80002b12:	ec 18 00 01 	eorl	r8,0x1
80002b16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b1a:	eb e8 10 08 	or	r8,r5,r8
80002b1e:	08 48       	or	r8,r4
80002b20:	06 48       	or	r8,r3
80002b22:	04 48       	or	r8,r2
80002b24:	0c 48       	or	r8,r6
80002b26:	0e 48       	or	r8,r7
80002b28:	1c 48       	or	r8,lr
80002b2a:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b2e:	f8 0a 00 0a 	add	r10,r12,r10
80002b32:	2d 8a       	sub	r10,-40
80002b34:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b36:	a7 6b       	lsl	r11,0x6
80002b38:	2e 0b       	sub	r11,-32
80002b3a:	16 0c       	add	r12,r11
80002b3c:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b3e:	58 09       	cp.w	r9,0
80002b40:	c0 31       	brne	80002b46 <tc_configure_interrupts+0x102>
80002b42:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b46:	d5 03       	csrf	0x10
80002b48:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b4c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b4c:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b4e:	f6 08 15 04 	lsl	r8,r11,0x4
80002b52:	14 38       	cp.w	r8,r10
80002b54:	f9 b8 08 10 	movls	r8,16
80002b58:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b5c:	f0 0b 02 4b 	mul	r11,r8,r11
80002b60:	f6 09 16 01 	lsr	r9,r11,0x1
80002b64:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b68:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b6c:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b70:	f2 cb 00 01 	sub	r11,r9,1
80002b74:	e0 4b ff fe 	cp.w	r11,65534
80002b78:	e0 88 00 03 	brls	80002b7e <usart_set_async_baudrate+0x32>
80002b7c:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002b7e:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002b80:	e8 6e 00 00 	mov	lr,524288
80002b84:	59 08       	cp.w	r8,16
80002b86:	fc 08 17 10 	movne	r8,lr
80002b8a:	f9 b8 00 00 	moveq	r8,0
80002b8e:	e4 1b ff f7 	andh	r11,0xfff7
80002b92:	e0 1b fe cf 	andl	r11,0xfecf
80002b96:	16 48       	or	r8,r11
80002b98:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002b9a:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002b9e:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002ba2:	99 89       	st.w	r12[0x20],r9
80002ba4:	d8 0a       	popm	pc,r12=0

80002ba6 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002ba6:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ba8:	e2 18 00 02 	andl	r8,0x2,COH
80002bac:	c0 31       	brne	80002bb2 <usart_write_char+0xc>
80002bae:	30 2c       	mov	r12,2
80002bb0:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bb2:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bb6:	99 7b       	st.w	r12[0x1c],r11
80002bb8:	5e fd       	retal	0
80002bba:	d7 03       	nop

80002bbc <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002bbc:	eb cd 40 e0 	pushm	r5-r7,lr
80002bc0:	18 96       	mov	r6,r12
80002bc2:	16 95       	mov	r5,r11
80002bc4:	e0 67 27 0f 	mov	r7,9999
80002bc8:	c0 68       	rjmp	80002bd4 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bca:	58 07       	cp.w	r7,0
80002bcc:	c0 31       	brne	80002bd2 <usart_putchar+0x16>
80002bce:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bd2:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bd4:	0a 9b       	mov	r11,r5
80002bd6:	0c 9c       	mov	r12,r6
80002bd8:	f0 1f 00 03 	mcall	80002be4 <usart_putchar+0x28>
80002bdc:	cf 71       	brne	80002bca <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002bde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002be2:	00 00       	add	r0,r0
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	2b a6       	sub	r6,-70

80002be8 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002be8:	78 58       	ld.w	r8,r12[0x14]
80002bea:	e2 18 00 e0 	andl	r8,0xe0,COH
80002bee:	c0 30       	breq	80002bf4 <usart_read_char+0xc>
80002bf0:	30 4c       	mov	r12,4
80002bf2:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002bf4:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002bf6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bfa:	c0 31       	brne	80002c00 <usart_read_char+0x18>
80002bfc:	30 3c       	mov	r12,3
80002bfe:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002c00:	78 68       	ld.w	r8,r12[0x18]
80002c02:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002c06:	97 08       	st.w	r11[0x0],r8
80002c08:	5e fd       	retal	0
80002c0a:	d7 03       	nop

80002c0c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c0c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c10:	18 96       	mov	r6,r12
80002c12:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c14:	17 8b       	ld.ub	r11,r11[0x0]
80002c16:	58 0b       	cp.w	r11,0
80002c18:	c0 80       	breq	80002c28 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c1a:	2f f7       	sub	r7,-1
80002c1c:	0c 9c       	mov	r12,r6
80002c1e:	f0 1f 00 04 	mcall	80002c2c <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c22:	0f 8b       	ld.ub	r11,r7[0x0]
80002c24:	58 0b       	cp.w	r11,0
80002c26:	cf a1       	brne	80002c1a <usart_write_line+0xe>
80002c28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c2c:	80 00       	ld.sh	r0,r0[0x0]
80002c2e:	2b bc       	sub	r12,-69

80002c30 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c30:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c34:	e6 18 00 01 	andh	r8,0x1,COH
80002c38:	c0 71       	brne	80002c46 <usart_reset+0x16>
80002c3a:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c3c:	3f f8       	mov	r8,-1
80002c3e:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c40:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c42:	d5 03       	csrf	0x10
80002c44:	c0 48       	rjmp	80002c4c <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c46:	3f f8       	mov	r8,-1
80002c48:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c4a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c4c:	30 08       	mov	r8,0
80002c4e:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c50:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c52:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c54:	e8 68 61 0c 	mov	r8,549132
80002c58:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c5a:	5e fc       	retal	r12

80002c5c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c5c:	eb cd 40 e0 	pushm	r5-r7,lr
80002c60:	18 96       	mov	r6,r12
80002c62:	16 97       	mov	r7,r11
80002c64:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c66:	f0 1f 00 2f 	mcall	80002d20 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c6a:	58 07       	cp.w	r7,0
80002c6c:	c5 80       	breq	80002d1c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c6e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c70:	30 49       	mov	r9,4
80002c72:	f2 08 18 00 	cp.b	r8,r9
80002c76:	e0 88 00 53 	brls	80002d1c <usart_init_rs232+0xc0>
80002c7a:	30 99       	mov	r9,9
80002c7c:	f2 08 18 00 	cp.b	r8,r9
80002c80:	e0 8b 00 4e 	brhi	80002d1c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c84:	0f d9       	ld.ub	r9,r7[0x5]
80002c86:	30 78       	mov	r8,7
80002c88:	f0 09 18 00 	cp.b	r9,r8
80002c8c:	e0 8b 00 48 	brhi	80002d1c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002c90:	8e 39       	ld.sh	r9,r7[0x6]
80002c92:	e0 68 01 01 	mov	r8,257
80002c96:	f0 09 19 00 	cp.h	r9,r8
80002c9a:	e0 8b 00 41 	brhi	80002d1c <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002c9e:	ef 39 00 08 	ld.ub	r9,r7[8]
80002ca2:	30 38       	mov	r8,3
80002ca4:	f0 09 18 00 	cp.b	r9,r8
80002ca8:	e0 8b 00 3a 	brhi	80002d1c <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002cac:	0a 9a       	mov	r10,r5
80002cae:	6e 0b       	ld.w	r11,r7[0x0]
80002cb0:	0c 9c       	mov	r12,r6
80002cb2:	f0 1f 00 1d 	mcall	80002d24 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cb6:	58 1c       	cp.w	r12,1
80002cb8:	c3 20       	breq	80002d1c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002cba:	0f c8       	ld.ub	r8,r7[0x4]
80002cbc:	30 99       	mov	r9,9
80002cbe:	f2 08 18 00 	cp.b	r8,r9
80002cc2:	c0 51       	brne	80002ccc <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cc4:	6c 18       	ld.w	r8,r6[0x4]
80002cc6:	b1 b8       	sbr	r8,0x11
80002cc8:	8d 18       	st.w	r6[0x4],r8
80002cca:	c0 68       	rjmp	80002cd6 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002ccc:	6c 19       	ld.w	r9,r6[0x4]
80002cce:	20 58       	sub	r8,5
80002cd0:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cd4:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cd6:	6c 19       	ld.w	r9,r6[0x4]
80002cd8:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002cdc:	0f d8       	ld.ub	r8,r7[0x5]
80002cde:	a9 78       	lsl	r8,0x9
80002ce0:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002ce4:	12 48       	or	r8,r9
80002ce6:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002ce8:	8e 38       	ld.sh	r8,r7[0x6]
80002cea:	30 29       	mov	r9,2
80002cec:	f2 08 19 00 	cp.h	r8,r9
80002cf0:	e0 88 00 09 	brls	80002d02 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002cf4:	6c 18       	ld.w	r8,r6[0x4]
80002cf6:	ad b8       	sbr	r8,0xd
80002cf8:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002cfa:	8e b8       	ld.uh	r8,r7[0x6]
80002cfc:	20 28       	sub	r8,2
80002cfe:	8d a8       	st.w	r6[0x28],r8
80002d00:	c0 68       	rjmp	80002d0c <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002d02:	6c 19       	ld.w	r9,r6[0x4]
80002d04:	5c 78       	castu.h	r8
80002d06:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d0a:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d0c:	6c 18       	ld.w	r8,r6[0x4]
80002d0e:	e0 18 ff f0 	andl	r8,0xfff0
80002d12:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d14:	35 08       	mov	r8,80
80002d16:	8d 08       	st.w	r6[0x0],r8
80002d18:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d1c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2c 30       	sub	r0,-61
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	2b 4c       	sub	r12,-76

80002d28 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d28:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d2c:	fe c0 9d 2c 	sub	r0,pc,-25300

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d30:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d34:	d5 53       	csrf	0x15
  cp      r0, r1
80002d36:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d38:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d3c:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d3e:	c0 72       	brcc	80002d4c <idata_load_loop_end>
  cp      r0, r1
80002d40:	fe c2 93 90 	sub	r2,pc,-27760

80002d44 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d44:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d46:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d48:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d4a:	cf d3       	brcs	80002d44 <idata_load_loop>

80002d4c <idata_load_loop_end>:
  mov     r2, 0
80002d4c:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d50:	e0 61 08 18 	mov	r1,2072
  cp      r0, r1
  brlo    udata_clear_loop
80002d54:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d56:	c0 62       	brcc	80002d62 <udata_clear_loop_end>
80002d58:	30 02       	mov	r2,0
80002d5a:	30 03       	mov	r3,0

80002d5c <udata_clear_loop>:
80002d5c:	a1 22       	st.d	r0++,r2
80002d5e:	02 30       	cp.w	r0,r1
80002d60:	cf e3       	brcs	80002d5c <udata_clear_loop>

80002d62 <udata_clear_loop_end>:
80002d62:	fe cf fa 02 	sub	pc,pc,-1534
80002d66:	d7 03       	nop

80002d68 <pal_trx_frame_write>:
80002d68:	eb cd 40 78 	pushm	r3-r6,lr
80002d6c:	20 1d       	sub	sp,4
80002d6e:	18 94       	mov	r4,r12
80002d70:	16 95       	mov	r5,r11
80002d72:	e1 b3 00 00 	mfsr	r3,0x0
80002d76:	d3 03       	ssrf	0x10
80002d78:	49 16       	lddpc	r6,80002dbc <pal_trx_frame_write+0x54>
80002d7a:	0d 8b       	ld.ub	r11,r6[0x0]
80002d7c:	fe 7c 40 00 	mov	r12,-49152
80002d80:	f0 1f 00 10 	mcall	80002dc0 <pal_trx_frame_write+0x58>
80002d84:	fa cb ff fc 	sub	r11,sp,-4
80002d88:	36 08       	mov	r8,96
80002d8a:	16 f8       	st.b	--r11,r8
80002d8c:	30 1a       	mov	r10,1
80002d8e:	fe 7c 40 00 	mov	r12,-49152
80002d92:	f0 1f 00 0d 	mcall	80002dc4 <pal_trx_frame_write+0x5c>
80002d96:	0a 9a       	mov	r10,r5
80002d98:	08 9b       	mov	r11,r4
80002d9a:	fe 7c 40 00 	mov	r12,-49152
80002d9e:	f0 1f 00 0a 	mcall	80002dc4 <pal_trx_frame_write+0x5c>
80002da2:	0d 8b       	ld.ub	r11,r6[0x0]
80002da4:	fe 7c 40 00 	mov	r12,-49152
80002da8:	f0 1f 00 08 	mcall	80002dc8 <pal_trx_frame_write+0x60>
80002dac:	e6 13 00 01 	andh	r3,0x1,COH
80002db0:	c0 21       	brne	80002db4 <pal_trx_frame_write+0x4c>
80002db2:	d5 03       	csrf	0x10
80002db4:	2f fd       	sub	sp,-4
80002db6:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002dba:	00 00       	add	r0,r0
80002dbc:	00 00       	add	r0,r0
80002dbe:	00 08       	add	r8,r0
80002dc0:	80 00       	ld.sh	r0,r0[0x0]
80002dc2:	28 0c       	sub	r12,-128
80002dc4:	80 00       	ld.sh	r0,r0[0x0]
80002dc6:	2e da       	sub	r10,-19
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	28 58       	sub	r8,-123

80002dcc <pal_trx_reg_read>:
80002dcc:	eb cd 40 c0 	pushm	r6-r7,lr
80002dd0:	20 2d       	sub	sp,8
80002dd2:	ba 8c       	st.b	sp[0x0],r12
80002dd4:	30 08       	mov	r8,0
80002dd6:	ba f8       	st.b	sp[0x7],r8
80002dd8:	e1 b6 00 00 	mfsr	r6,0x0
80002ddc:	d3 03       	ssrf	0x10
80002dde:	1b 88       	ld.ub	r8,sp[0x0]
80002de0:	ea 18 ff ff 	orh	r8,0xffff
80002de4:	e8 18 ff 80 	orl	r8,0xff80
80002de8:	ba 88       	st.b	sp[0x0],r8
80002dea:	49 17       	lddpc	r7,80002e2c <pal_trx_reg_read+0x60>
80002dec:	0f 8b       	ld.ub	r11,r7[0x0]
80002dee:	fe 7c 40 00 	mov	r12,-49152
80002df2:	f0 1f 00 10 	mcall	80002e30 <pal_trx_reg_read+0x64>
80002df6:	30 1a       	mov	r10,1
80002df8:	1a 9b       	mov	r11,sp
80002dfa:	fe 7c 40 00 	mov	r12,-49152
80002dfe:	f0 1f 00 0e 	mcall	80002e34 <pal_trx_reg_read+0x68>
80002e02:	30 1a       	mov	r10,1
80002e04:	fa cb ff f9 	sub	r11,sp,-7
80002e08:	fe 7c 40 00 	mov	r12,-49152
80002e0c:	f0 1f 00 0b 	mcall	80002e38 <pal_trx_reg_read+0x6c>
80002e10:	0f 8b       	ld.ub	r11,r7[0x0]
80002e12:	fe 7c 40 00 	mov	r12,-49152
80002e16:	f0 1f 00 0a 	mcall	80002e3c <pal_trx_reg_read+0x70>
80002e1a:	e6 16 00 01 	andh	r6,0x1,COH
80002e1e:	c0 21       	brne	80002e22 <pal_trx_reg_read+0x56>
80002e20:	d5 03       	csrf	0x10
80002e22:	1b fc       	ld.ub	r12,sp[0x7]
80002e24:	2f ed       	sub	sp,-8
80002e26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e2a:	00 00       	add	r0,r0
80002e2c:	00 00       	add	r0,r0
80002e2e:	00 08       	add	r8,r0
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	28 0c       	sub	r12,-128
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	2e da       	sub	r10,-19
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	2e 8a       	sub	r10,-24
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	28 58       	sub	r8,-123

80002e40 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e40:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002e44:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e46:	e6 18 00 01 	andh	r8,0x1,COH
80002e4a:	c0 21       	brne	80002e4e <sysclk_init+0xe>
      cpu_irq_enable();
80002e4c:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002e4e:	5e fc       	retal	r12

80002e50 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002e50:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e52:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002e56:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002e58:	a3 6c       	lsl	r12,0x2
80002e5a:	fe 7a 14 20 	mov	r10,-60384
80002e5e:	f8 0a 00 08 	add	r8,r12,r10
80002e62:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002e64:	30 1e       	mov	lr,1
80002e66:	fc 0b 09 4b 	lsl	r11,lr,r11
80002e6a:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e6c:	32 0a       	mov	r10,32
80002e6e:	ea 1a aa 00 	orh	r10,0xaa00
80002e72:	14 0c       	add	r12,r10
80002e74:	fe 7a 14 00 	mov	r10,-60416
80002e78:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002e7c:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e7e:	12 98       	mov	r8,r9
80002e80:	e6 18 00 01 	andh	r8,0x1,COH
80002e84:	c0 21       	brne	80002e88 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002e86:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002e88:	d8 02       	popm	pc

80002e8a <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002e8a:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e8e:	58 0a       	cp.w	r10,0
80002e90:	c0 61       	brne	80002e9c <spi_read_packet+0x12>
80002e92:	c2 28       	rjmp	80002ed6 <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e94:	58 08       	cp.w	r8,0
80002e96:	c1 d0       	breq	80002ed0 <spi_read_packet+0x46>
80002e98:	20 18       	sub	r8,1
80002e9a:	c0 68       	rjmp	80002ea6 <spi_read_packet+0x1c>
80002e9c:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ea0:	e0 67 00 ff 	mov	r7,255
80002ea4:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002ea6:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002ea8:	e2 19 00 02 	andl	r9,0x2,COH
80002eac:	cf 40       	breq	80002e94 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002eae:	99 37       	st.w	r12[0xc],r7
80002eb0:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002eb2:	c0 48       	rjmp	80002eba <spi_read_packet+0x30>
			if (!timeout--) {
80002eb4:	58 08       	cp.w	r8,0
80002eb6:	c0 d0       	breq	80002ed0 <spi_read_packet+0x46>
80002eb8:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002eba:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002ebc:	e2 19 02 01 	andl	r9,0x201,COH
80002ec0:	e0 49 02 01 	cp.w	r9,513
80002ec4:	cf 81       	brne	80002eb4 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002ec6:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002ec8:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002eca:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002ecc:	ce c1       	brne	80002ea4 <spi_read_packet+0x1a>
80002ece:	c0 48       	rjmp	80002ed6 <spi_read_packet+0x4c>
80002ed0:	3f dc       	mov	r12,-3
80002ed2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ed6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002eda <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002eda:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002edc:	58 0a       	cp.w	r10,0
80002ede:	c0 81       	brne	80002eee <spi_write_packet+0x14>
80002ee0:	c1 28       	rjmp	80002f04 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002ee2:	58 08       	cp.w	r8,0
80002ee4:	c0 31       	brne	80002eea <spi_write_packet+0x10>
80002ee6:	3f dc       	mov	r12,-3
80002ee8:	d8 02       	popm	pc
80002eea:	20 18       	sub	r8,1
80002eec:	c0 48       	rjmp	80002ef4 <spi_write_packet+0x1a>
80002eee:	e0 6e 3a 98 	mov	lr,15000
80002ef2:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002ef4:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002ef6:	e2 19 00 02 	andl	r9,0x2,COH
80002efa:	cf 40       	breq	80002ee2 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002efc:	17 38       	ld.ub	r8,r11++
80002efe:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002f00:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f02:	cf 81       	brne	80002ef2 <spi_write_packet+0x18>
80002f04:	d8 0a       	popm	pc,r12=0
80002f06:	d7 03       	nop
	...

80002f14 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002f14:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002f16:	30 0b       	mov	r11,0
80002f18:	fe 7c 5c 00 	mov	r12,-41984
80002f1c:	f0 1f 00 17 	mcall	80002f78 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002f20:	49 78       	lddpc	r8,80002f7c <tc_irq+0x68>
80002f22:	70 09       	ld.w	r9,r8[0x0]
80002f24:	2f f9       	sub	r9,-1
80002f26:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002f28:	70 08       	ld.w	r8,r8[0x0]
80002f2a:	59 38       	cp.w	r8,19
80002f2c:	e0 8b 00 0c 	brhi	80002f44 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002f30:	32 9c       	mov	r12,41
80002f32:	f0 1f 00 14 	mcall	80002f80 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002f36:	30 4c       	mov	r12,4
80002f38:	f0 1f 00 12 	mcall	80002f80 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002f3c:	30 bc       	mov	r12,11
80002f3e:	f0 1f 00 11 	mcall	80002f80 <tc_irq+0x6c>
		return;
80002f42:	c1 98       	rjmp	80002f74 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002f44:	48 e8       	lddpc	r8,80002f7c <tc_irq+0x68>
80002f46:	70 08       	ld.w	r8,r8[0x0]
80002f48:	59 58       	cp.w	r8,21
80002f4a:	c0 41       	brne	80002f52 <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002f4c:	32 9c       	mov	r12,41
80002f4e:	f0 1f 00 0d 	mcall	80002f80 <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002f52:	48 b8       	lddpc	r8,80002f7c <tc_irq+0x68>
80002f54:	70 08       	ld.w	r8,r8[0x0]
80002f56:	59 68       	cp.w	r8,22
80002f58:	c0 41       	brne	80002f60 <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002f5a:	30 4c       	mov	r12,4
80002f5c:	f0 1f 00 09 	mcall	80002f80 <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002f60:	48 78       	lddpc	r8,80002f7c <tc_irq+0x68>
80002f62:	70 08       	ld.w	r8,r8[0x0]
80002f64:	59 78       	cp.w	r8,23
80002f66:	c0 71       	brne	80002f74 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002f68:	30 bc       	mov	r12,11
80002f6a:	f0 1f 00 06 	mcall	80002f80 <tc_irq+0x6c>
		tc_tick = 1;
80002f6e:	30 19       	mov	r9,1
80002f70:	48 38       	lddpc	r8,80002f7c <tc_irq+0x68>
80002f72:	91 09       	st.w	r8[0x0],r9
		

	
	
	
}
80002f74:	d4 02       	popm	lr
80002f76:	d6 03       	rete
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	29 fe       	sub	lr,-97
80002f7c:	00 00       	add	r0,r0
80002f7e:	00 10       	sub	r0,r0
80002f80:	80 00       	ld.sh	r0,r0[0x0]
80002f82:	26 78       	sub	r8,103

80002f84 <eic_int_handler2>:
__interrupt
#endif

// Manejo INTERRUPCION externa 2 (RF)
static void eic_int_handler2(void)
{
80002f84:	d4 01       	pushm	lr
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
80002f86:	30 2b       	mov	r11,2
80002f88:	fe 7c 24 00 	mov	r12,-56320
80002f8c:	f0 1f 00 02 	mcall	80002f94 <eic_int_handler2+0x10>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		
}
80002f90:	d4 02       	popm	lr
80002f92:	d6 03       	rete
80002f94:	80 00       	ld.sh	r0,r0[0x0]
80002f96:	24 e0       	sub	r0,78

80002f98 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80002f98:	d4 01       	pushm	lr
80002f9a:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80002f9c:	30 0b       	mov	r11,0
80002f9e:	49 38       	lddpc	r8,80002fe8 <usart_int_handler_RS232+0x50>
80002fa0:	70 0c       	ld.w	r12,r8[0x0]
80002fa2:	f0 1f 00 13 	mcall	80002fec <usart_int_handler_RS232+0x54>
	
	int c=0;
80002fa6:	fa cb ff fc 	sub	r11,sp,-4
80002faa:	30 08       	mov	r8,0
80002fac:	16 d8       	st.w	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80002fae:	1a 9b       	mov	r11,sp
80002fb0:	fe 7c 38 00 	mov	r12,-51200
80002fb4:	f0 1f 00 0f 	mcall	80002ff0 <usart_int_handler_RS232+0x58>
80002fb8:	c1 51       	brne	80002fe2 <usart_int_handler_RS232+0x4a>
		return;

	
		cola_PC[cola_PC_nw] = (char) c;
80002fba:	48 f9       	lddpc	r9,80002ff4 <usart_int_handler_RS232+0x5c>
80002fbc:	72 08       	ld.w	r8,r9[0x0]
80002fbe:	40 0b       	lddsp	r11,sp[0x0]
80002fc0:	48 ea       	lddpc	r10,80002ff8 <usart_int_handler_RS232+0x60>
80002fc2:	f4 08 0b 0b 	st.b	r10[r8],r11
		cola_PC_nw++;	
80002fc6:	2f f8       	sub	r8,-1
80002fc8:	93 08       	st.w	r9[0x0],r8
	
		if (cola_PC_nw >= tamano_cola)
80002fca:	e0 48 00 c7 	cp.w	r8,199
80002fce:	e0 8a 00 05 	brle	80002fd8 <usart_int_handler_RS232+0x40>
			cola_PC_nw = 0;
80002fd2:	30 09       	mov	r9,0
80002fd4:	48 88       	lddpc	r8,80002ff4 <usart_int_handler_RS232+0x5c>
80002fd6:	91 09       	st.w	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80002fd8:	30 0b       	mov	r11,0
80002fda:	48 48       	lddpc	r8,80002fe8 <usart_int_handler_RS232+0x50>
80002fdc:	70 0c       	ld.w	r12,r8[0x0]
80002fde:	f0 1f 00 08 	mcall	80002ffc <usart_int_handler_RS232+0x64>
	return;

	
}
80002fe2:	2f fd       	sub	sp,-4
80002fe4:	d4 02       	popm	lr
80002fe6:	d6 03       	rete
80002fe8:	00 00       	add	r0,r0
80002fea:	00 14       	sub	r4,r0
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	29 ec       	sub	r12,-98
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	2b e8       	sub	r8,-66
80002ff4:	00 00       	add	r0,r0
80002ff6:	07 08       	ld.w	r8,r3++
80002ff8:	00 00       	add	r0,r0
80002ffa:	07 48       	ld.w	r8,--r3
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	29 da       	sub	r10,-99

80003000 <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
80003000:	eb cd 40 80 	pushm	r7,lr
80003004:	20 6d       	sub	sp,24
80003006:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80003008:	30 08       	mov	r8,0
8000300a:	ba 98       	st.b	sp[0x1],r8
8000300c:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
8000300e:	34 89       	mov	r9,72
80003010:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
80003012:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
80003014:	30 29       	mov	r9,2
80003016:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
80003018:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
8000301c:	30 18       	mov	r8,1
8000301e:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
80003022:	fa cb ff fc 	sub	r11,sp,-4
80003026:	fe 7c 44 00 	mov	r12,-48128
8000302a:	f0 1f 00 39 	mcall	8000310c <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
8000302e:	c6 61       	brne	800030fa <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
80003030:	1b 89       	ld.ub	r9,sp[0x0]
80003032:	1b 98       	ld.ub	r8,sp[0x1]
80003034:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003038:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
8000303a:	30 09       	mov	r9,0
8000303c:	f2 08 19 00 	cp.h	r8,r9
80003040:	c0 35       	brlt	80003046 <leer_temp+0x46>
80003042:	30 1b       	mov	r11,1
80003044:	c0 58       	rjmp	8000304e <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
80003046:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
8000304a:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
8000304e:	4b 19       	lddpc	r9,80003110 <leer_temp+0x110>
80003050:	13 89       	ld.ub	r9,r9[0x0]
80003052:	30 1a       	mov	r10,1
80003054:	f4 09 18 00 	cp.b	r9,r10
80003058:	c1 c0       	breq	80003090 <leer_temp+0x90>
8000305a:	58 09       	cp.w	r9,0
8000305c:	c0 b0       	breq	80003072 <leer_temp+0x72>
8000305e:	30 2a       	mov	r10,2
80003060:	f4 09 18 00 	cp.b	r9,r10
80003064:	c2 50       	breq	800030ae <leer_temp+0xae>
80003066:	30 3a       	mov	r10,3
80003068:	f4 09 18 00 	cp.b	r9,r10
8000306c:	c3 00       	breq	800030cc <leer_temp+0xcc>
8000306e:	30 0c       	mov	r12,0
80003070:	c3 c8       	rjmp	800030e8 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
80003072:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
80003076:	5c 6b       	casts.b	r11
80003078:	f0 0b 02 4c 	mul	r12,r8,r11
8000307c:	f0 1f 00 26 	mcall	80003114 <leer_temp+0x114>
80003080:	30 08       	mov	r8,0
80003082:	fc 19 3f e0 	movh	r9,0x3fe0
80003086:	f0 1f 00 25 	mcall	80003118 <leer_temp+0x118>
8000308a:	f0 1f 00 25 	mcall	8000311c <leer_temp+0x11c>
			break;
8000308e:	c2 d8       	rjmp	800030e8 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
80003090:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
80003094:	5c 6b       	casts.b	r11
80003096:	f0 0b 02 4c 	mul	r12,r8,r11
8000309a:	f0 1f 00 1f 	mcall	80003114 <leer_temp+0x114>
8000309e:	30 08       	mov	r8,0
800030a0:	fc 19 3f d0 	movh	r9,0x3fd0
800030a4:	f0 1f 00 1d 	mcall	80003118 <leer_temp+0x118>
800030a8:	f0 1f 00 1d 	mcall	8000311c <leer_temp+0x11c>
			break;
800030ac:	c1 e8       	rjmp	800030e8 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
800030ae:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
800030b2:	5c 6b       	casts.b	r11
800030b4:	f0 0b 02 4c 	mul	r12,r8,r11
800030b8:	f0 1f 00 17 	mcall	80003114 <leer_temp+0x114>
800030bc:	30 08       	mov	r8,0
800030be:	fc 19 3f c0 	movh	r9,0x3fc0
800030c2:	f0 1f 00 16 	mcall	80003118 <leer_temp+0x118>
800030c6:	f0 1f 00 16 	mcall	8000311c <leer_temp+0x11c>
			break;
800030ca:	c0 f8       	rjmp	800030e8 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
800030cc:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
800030d0:	5c 6b       	casts.b	r11
800030d2:	f0 0b 02 4c 	mul	r12,r8,r11
800030d6:	f0 1f 00 10 	mcall	80003114 <leer_temp+0x114>
800030da:	30 08       	mov	r8,0
800030dc:	fc 19 3f b0 	movh	r9,0x3fb0
800030e0:	f0 1f 00 0e 	mcall	80003118 <leer_temp+0x118>
800030e4:	f0 1f 00 0e 	mcall	8000311c <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
800030e8:	f0 1f 00 0e 	mcall	80003120 <leer_temp+0x120>
800030ec:	bb 2b       	st.d	--sp,r10
800030ee:	48 eb       	lddpc	r11,80003124 <leer_temp+0x124>
800030f0:	0e 9c       	mov	r12,r7
800030f2:	f0 1f 00 0e 	mcall	80003128 <leer_temp+0x128>
800030f6:	2f ed       	sub	sp,-8
800030f8:	c0 68       	rjmp	80003104 <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
800030fa:	30 2a       	mov	r10,2
800030fc:	48 cb       	lddpc	r11,8000312c <leer_temp+0x12c>
800030fe:	0e 9c       	mov	r12,r7
80003100:	f0 1f 00 0c 	mcall	80003130 <leer_temp+0x130>
}
80003104:	2f ad       	sub	sp,-24
80003106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000310a:	00 00       	add	r0,r0
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	22 34       	sub	r4,35
80003110:	00 00       	add	r0,r0
80003112:	00 24       	rsub	r4,r0
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	37 bc       	mov	r12,123
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	35 e0       	mov	r0,94
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	38 fc       	mov	r12,-113
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	38 9c       	mov	r12,-119
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	93 44       	st.w	r9[0x10],r4
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	3a dc       	mov	r12,-83
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	93 4c       	st.w	r9[0x10],r12
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	39 86       	mov	r6,-104

80003134 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003134:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003136:	18 9b       	mov	r11,r12
80003138:	30 2c       	mov	r12,2
8000313a:	f0 1f 00 02 	mcall	80003140 <sysclk_enable_pba_module+0xc>
}
8000313e:	d8 02       	popm	pc
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	2e 50       	sub	r0,-27

80003144 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
80003144:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
80003146:	30 bc       	mov	r12,11
80003148:	f0 1f 00 05 	mcall	8000315c <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
8000314c:	e0 7a c1 38 	mov	r10,115000
80003150:	48 4b       	lddpc	r11,80003160 <rs_232_init_usart+0x1c>
80003152:	fe 7c 38 00 	mov	r12,-51200
80003156:	f0 1f 00 04 	mcall	80003164 <rs_232_init_usart+0x20>
	return estado_usart2;
}
8000315a:	d8 02       	popm	pc
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	31 34       	mov	r4,19
80003160:	00 00       	add	r0,r0
80003162:	00 18       	sub	r8,r0
80003164:	80 00       	ld.sh	r0,r0[0x0]
80003166:	2c 5c       	sub	r12,-59

80003168 <rs_232_init_pins>:
// 	

}

void rs_232_init_pins(void)
{
80003168:	d4 01       	pushm	lr
8000316a:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
8000316c:	48 88       	lddpc	r8,8000318c <rs_232_init_pins+0x24>
8000316e:	1a 9c       	mov	r12,sp
80003170:	70 09       	ld.w	r9,r8[0x0]
80003172:	50 09       	stdsp	sp[0x0],r9
80003174:	70 19       	ld.w	r9,r8[0x4]
80003176:	50 19       	stdsp	sp[0x4],r9
80003178:	70 29       	ld.w	r9,r8[0x8]
8000317a:	50 29       	stdsp	sp[0x8],r9
8000317c:	70 38       	ld.w	r8,r8[0xc]
8000317e:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
80003180:	30 2b       	mov	r11,2
80003182:	f0 1f 00 04 	mcall	80003190 <rs_232_init_pins+0x28>
}
80003186:	2f cd       	sub	sp,-16
80003188:	d8 02       	popm	pc
8000318a:	00 00       	add	r0,r0
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	93 f8       	st.w	r9[0x3c],r8
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	25 90       	sub	r0,89

80003194 <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
80003194:	d4 01       	pushm	lr
80003196:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003198:	48 88       	lddpc	r8,800031b8 <init_i2c_pins+0x24>
8000319a:	1a 9c       	mov	r12,sp
8000319c:	70 09       	ld.w	r9,r8[0x0]
8000319e:	50 09       	stdsp	sp[0x0],r9
800031a0:	70 19       	ld.w	r9,r8[0x4]
800031a2:	50 19       	stdsp	sp[0x4],r9
800031a4:	70 29       	ld.w	r9,r8[0x8]
800031a6:	50 29       	stdsp	sp[0x8],r9
800031a8:	70 38       	ld.w	r8,r8[0xc]
800031aa:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
800031ac:	30 2b       	mov	r11,2
800031ae:	f0 1f 00 04 	mcall	800031bc <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
800031b2:	2f cd       	sub	sp,-16
800031b4:	d8 02       	popm	pc
800031b6:	00 00       	add	r0,r0
800031b8:	80 00       	ld.sh	r0,r0[0x0]
800031ba:	93 18       	st.w	r9[0x4],r8
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	25 90       	sub	r0,89

800031c0 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
800031c0:	d4 01       	pushm	lr
800031c2:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
800031c4:	48 d8       	lddpc	r8,800031f8 <spi_init_pins+0x38>
800031c6:	1a 9c       	mov	r12,sp
800031c8:	70 09       	ld.w	r9,r8[0x0]
800031ca:	50 09       	stdsp	sp[0x0],r9
800031cc:	70 19       	ld.w	r9,r8[0x4]
800031ce:	50 19       	stdsp	sp[0x4],r9
800031d0:	70 29       	ld.w	r9,r8[0x8]
800031d2:	50 29       	stdsp	sp[0x8],r9
800031d4:	70 39       	ld.w	r9,r8[0xc]
800031d6:	50 39       	stdsp	sp[0xc],r9
800031d8:	fa c9 ff f0 	sub	r9,sp,-16
800031dc:	2f 08       	sub	r8,-16
800031de:	70 0a       	ld.w	r10,r8[0x0]
800031e0:	93 0a       	st.w	r9[0x0],r10
800031e2:	70 1a       	ld.w	r10,r8[0x4]
800031e4:	93 1a       	st.w	r9[0x4],r10
800031e6:	70 2a       	ld.w	r10,r8[0x8]
800031e8:	93 2a       	st.w	r9[0x8],r10
800031ea:	70 38       	ld.w	r8,r8[0xc]
800031ec:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
800031ee:	30 4b       	mov	r11,4
800031f0:	f0 1f 00 03 	mcall	800031fc <spi_init_pins+0x3c>
}
800031f4:	2f 8d       	sub	sp,-32
800031f6:	d8 02       	popm	pc
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	94 08       	ld.sh	r8,r10[0x0]
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	25 90       	sub	r0,89

80003200 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
80003200:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
80003202:	30 5b       	mov	r11,5
80003204:	30 4c       	mov	r12,4
80003206:	f0 1f 00 06 	mcall	8000321c <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
8000320a:	30 5b       	mov	r11,5
8000320c:	30 bc       	mov	r12,11
8000320e:	f0 1f 00 04 	mcall	8000321c <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
80003212:	30 5b       	mov	r11,5
80003214:	32 9c       	mov	r12,41
80003216:	f0 1f 00 02 	mcall	8000321c <led_init_pins+0x1c>
}
8000321a:	d8 02       	popm	pc
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	25 c0       	sub	r0,92

80003220 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
80003220:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
80003222:	f0 1f 00 08 	mcall	80003240 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
80003226:	30 4b       	mov	r11,4
80003228:	30 dc       	mov	r12,13
8000322a:	f0 1f 00 07 	mcall	80003244 <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
8000322e:	30 6b       	mov	r11,6
80003230:	30 dc       	mov	r12,13
80003232:	f0 1f 00 06 	mcall	80003248 <init_rf_pins+0x28>
	//gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
80003236:	30 dc       	mov	r12,13
80003238:	f0 1f 00 05 	mcall	8000324c <init_rf_pins+0x2c>

// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
// 	

}
8000323c:	d8 02       	popm	pc
8000323e:	00 00       	add	r0,r0
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	31 c0       	mov	r0,28
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	25 c0       	sub	r0,92
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	24 fc       	sub	r12,79
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	26 8e       	sub	lr,104

80003250 <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
80003250:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
80003252:	18 9b       	mov	r11,r12
80003254:	fe 7c 38 00 	mov	r12,-51200
80003258:	f0 1f 00 02 	mcall	80003260 <escribir_linea_pc+0x10>
}
8000325c:	d8 02       	popm	pc
8000325e:	00 00       	add	r0,r0
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	2c 0c       	sub	r12,-64

80003264 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003264:	d4 01       	pushm	lr
80003266:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003268:	30 eb       	mov	r11,14
8000326a:	30 2c       	mov	r12,2
8000326c:	f0 1f 00 0e 	mcall	800032a4 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
80003270:	e0 78 c1 38 	mov	r8,115000
80003274:	50 08       	stdsp	sp[0x0],r8
80003276:	e0 68 27 10 	mov	r8,10000
8000327a:	50 18       	stdsp	sp[0x4],r8
8000327c:	34 88       	mov	r8,72
8000327e:	50 28       	stdsp	sp[0x8],r8
80003280:	30 08       	mov	r8,0
80003282:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
80003286:	1a 9b       	mov	r11,sp
80003288:	fe 7c 44 00 	mov	r12,-48128
8000328c:	f0 1f 00 07 	mcall	800032a8 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003290:	c0 51       	brne	8000329a <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
80003292:	48 7c       	lddpc	r12,800032ac <init_i2c_module+0x48>
80003294:	f0 1f 00 07 	mcall	800032b0 <init_i2c_module+0x4c>
80003298:	c0 48       	rjmp	800032a0 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
8000329a:	48 7c       	lddpc	r12,800032b4 <init_i2c_module+0x50>
8000329c:	f0 1f 00 05 	mcall	800032b0 <init_i2c_module+0x4c>
	}
} 
800032a0:	2f cd       	sub	sp,-16
800032a2:	d8 02       	popm	pc
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	2e 50       	sub	r0,-27
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	23 44       	sub	r4,52
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	93 50       	st.w	r9[0x14],r0
800032b0:	80 00       	ld.sh	r0,r0[0x0]
800032b2:	32 50       	mov	r0,37
800032b4:	80 00       	ld.sh	r0,r0[0x0]
800032b6:	93 64       	st.w	r9[0x18],r4

800032b8 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
800032b8:	eb cd 40 e0 	pushm	r5-r7,lr
800032bc:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800032be:	4a 48       	lddpc	r8,8000334c <spi_init_module+0x94>
800032c0:	1a 95       	mov	r5,sp
800032c2:	70 09       	ld.w	r9,r8[0x0]
800032c4:	50 09       	stdsp	sp[0x0],r9
800032c6:	70 19       	ld.w	r9,r8[0x4]
800032c8:	50 19       	stdsp	sp[0x4],r9
800032ca:	70 29       	ld.w	r9,r8[0x8]
800032cc:	50 29       	stdsp	sp[0x8],r9
800032ce:	70 38       	ld.w	r8,r8[0xc]
800032d0:	50 38       	stdsp	sp[0xc],r8
800032d2:	30 db       	mov	r11,13
800032d4:	30 2c       	mov	r12,2
800032d6:	f0 1f 00 1f 	mcall	80003350 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800032da:	fe 77 40 00 	mov	r7,-49152
800032de:	e0 68 00 80 	mov	r8,128
800032e2:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800032e4:	6e 18       	ld.w	r8,r7[0x4]
800032e6:	30 19       	mov	r9,1
800032e8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800032ec:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
800032ee:	6e 18       	ld.w	r8,r7[0x4]
800032f0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800032f4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
800032f6:	6e 18       	ld.w	r8,r7[0x4]
800032f8:	30 06       	mov	r6,0
800032fa:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
800032fe:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
80003300:	6e 18       	ld.w	r8,r7[0x4]
80003302:	30 f9       	mov	r9,15
80003304:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003308:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
8000330a:	6e 18       	ld.w	r8,r7[0x4]
8000330c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003310:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
80003312:	6e 18       	ld.w	r8,r7[0x4]
80003314:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003318:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
8000331a:	6e 18       	ld.w	r8,r7[0x4]
8000331c:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003320:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
80003322:	30 38       	mov	r8,3
80003324:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
80003326:	e0 7a c1 38 	mov	r10,115000
8000332a:	1a 9b       	mov	r11,sp
8000332c:	0e 9c       	mov	r12,r7
8000332e:	f0 1f 00 0a 	mcall	80003354 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
80003332:	0c 99       	mov	r9,r6
80003334:	0c 9a       	mov	r10,r6
80003336:	0c 9b       	mov	r11,r6
80003338:	0e 9c       	mov	r12,r7
8000333a:	f0 1f 00 08 	mcall	80003358 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
8000333e:	0e 9c       	mov	r12,r7
80003340:	f0 1f 00 07 	mcall	8000335c <spi_init_module+0xa4>
}
80003344:	2f cd       	sub	sp,-16
80003346:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000334a:	00 00       	add	r0,r0
8000334c:	80 00       	ld.sh	r0,r0[0x0]
8000334e:	93 28       	st.w	r9[0x8],r8
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	2e 50       	sub	r0,-27
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	28 80       	sub	r0,-120
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	27 e0       	sub	r0,126
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	29 38       	sub	r8,-109

80003360 <main>:
		sprintf(temps,"%s","X");
}


int main (void)
{
80003360:	d4 31       	pushm	r0-r7,lr
80003362:	20 3d       	sub	sp,12
	char temps[10] = "\0";
80003364:	4e d6       	lddpc	r6,80003518 <main+0x1b8>
80003366:	8c 08       	ld.sh	r8,r6[0x0]
80003368:	ba 08       	st.h	sp[0x0],r8
8000336a:	30 8a       	mov	r10,8
8000336c:	30 0b       	mov	r11,0
8000336e:	fa cc ff fe 	sub	r12,sp,-2
80003372:	f0 1f 00 6b 	mcall	8000351c <main+0x1bc>
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
80003376:	f0 1f 00 6b 	mcall	80003520 <main+0x1c0>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
8000337a:	f0 1f 00 6b 	mcall	80003524 <main+0x1c4>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
8000337e:	f0 1f 00 6b 	mcall	80003528 <main+0x1c8>
	
	//Configuracion pins para RF
	init_rf_pins();
80003382:	f0 1f 00 6b 	mcall	8000352c <main+0x1cc>
	
	//Inicializacion del SPI
	spi_init_module();
80003386:	f0 1f 00 6b 	mcall	80003530 <main+0x1d0>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
8000338a:	f0 1f 00 6b 	mcall	80003534 <main+0x1d4>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
8000338e:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003390:	f0 1f 00 6a 	mcall	80003538 <main+0x1d8>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003394:	30 0a       	mov	r10,0
80003396:	e0 6b 02 20 	mov	r11,544
8000339a:	4e 9c       	lddpc	r12,8000353c <main+0x1dc>
8000339c:	f0 1f 00 69 	mcall	80003540 <main+0x1e0>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
800033a0:	30 2a       	mov	r10,2
800033a2:	e0 6b 01 61 	mov	r11,353
800033a6:	4e 8c       	lddpc	r12,80003544 <main+0x1e4>
800033a8:	f0 1f 00 66 	mcall	80003540 <main+0x1e0>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
800033ac:	30 3a       	mov	r10,3
800033ae:	e0 6b 03 40 	mov	r11,832
800033b2:	4e 6c       	lddpc	r12,80003548 <main+0x1e8>
800033b4:	f0 1f 00 63 	mcall	80003540 <main+0x1e0>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
800033b8:	30 1a       	mov	r10,1
800033ba:	4e 5b       	lddpc	r11,8000354c <main+0x1ec>
800033bc:	fe 7c 24 00 	mov	r12,-56320
800033c0:	f0 1f 00 64 	mcall	80003550 <main+0x1f0>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
800033c4:	30 2b       	mov	r11,2
800033c6:	fe 7c 24 00 	mov	r12,-56320
800033ca:	f0 1f 00 63 	mcall	80003554 <main+0x1f4>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
800033ce:	30 2b       	mov	r11,2
800033d0:	fe 7c 24 00 	mov	r12,-56320
800033d4:	f0 1f 00 61 	mcall	80003558 <main+0x1f8>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
800033d8:	30 15       	mov	r5,1
800033da:	fe 78 38 00 	mov	r8,-51200
800033de:	91 25       	st.w	r8[0x8],r5
	
	// Enable all interrupts.
	Enable_global_interrupt();
800033e0:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
800033e2:	4d f8       	lddpc	r8,8000355c <main+0x1fc>
800033e4:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800033e6:	4d fb       	lddpc	r11,80003560 <main+0x200>
800033e8:	0e 9c       	mov	r12,r7
800033ea:	f0 1f 00 5f 	mcall	80003564 <main+0x204>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
800033ee:	e0 6a 00 b3 	mov	r10,179
800033f2:	30 0b       	mov	r11,0
800033f4:	0e 9c       	mov	r12,r7
800033f6:	f0 1f 00 5d 	mcall	80003568 <main+0x208>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
800033fa:	4d da       	lddpc	r10,8000356c <main+0x20c>
800033fc:	30 0b       	mov	r11,0
800033fe:	0e 9c       	mov	r12,r7
80003400:	f0 1f 00 5c 	mcall	80003570 <main+0x210>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003404:	30 0b       	mov	r11,0
80003406:	0e 9c       	mov	r12,r7
80003408:	f0 1f 00 5b 	mcall	80003574 <main+0x214>
 	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
 	 	}
 		else
 			escribir_linea_pc("Modulo RF:\tPASS\r\n");
 	 */	
	tx_buffer[0]="h";
8000340c:	4d b8       	lddpc	r8,80003578 <main+0x218>
8000340e:	4d c9       	lddpc	r9,8000357c <main+0x21c>
80003410:	b0 89       	st.b	r8[0x0],r9
	tx_buffer[1]="0";
80003412:	4d c9       	lddpc	r9,80003580 <main+0x220>
80003414:	b0 99       	st.b	r8[0x1],r9
	tx_buffer[2]="l";
80003416:	4d c9       	lddpc	r9,80003584 <main+0x224>
80003418:	b0 a9       	st.b	r8[0x2],r9
	tx_buffer[3]="a";
8000341a:	4d c9       	lddpc	r9,80003588 <main+0x228>
8000341c:	b0 b9       	st.b	r8[0x3],r9
	tx_buffer[4]="\0";
8000341e:	b0 c6       	st.b	r8[0x4],r6
	status_AT86=pal_trx_reg_read(TRX_STATUS);
80003420:	0a 9c       	mov	r12,r5
80003422:	f0 1f 00 5b 	mcall	8000358c <main+0x22c>
80003426:	4d b8       	lddpc	r8,80003590 <main+0x230>
80003428:	b0 8c       	st.b	r8[0x0],r12
8000342a:	30 07       	mov	r7,0
	while(i<400)
	{
		pal_trx_frame_write(tx_buffer,4);
8000342c:	4d 36       	lddpc	r6,80003578 <main+0x218>
8000342e:	30 45       	mov	r5,4
80003430:	0a 9b       	mov	r11,r5
80003432:	0c 9c       	mov	r12,r6
80003434:	f0 1f 00 58 	mcall	80003594 <main+0x234>
		
		i++;
80003438:	2f f7       	sub	r7,-1
	tx_buffer[1]="0";
	tx_buffer[2]="l";
	tx_buffer[3]="a";
	tx_buffer[4]="\0";
	status_AT86=pal_trx_reg_read(TRX_STATUS);
	while(i<400)
8000343a:	e0 47 01 90 	cp.w	r7,400
8000343e:	cf 91       	brne	80003430 <main+0xd0>
		i++;
	}
	
	
	
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
80003440:	31 cc       	mov	r12,28
80003442:	f0 1f 00 53 	mcall	8000358c <main+0x22c>
80003446:	4d 57       	lddpc	r7,80003598 <main+0x238>
80003448:	ae 8c       	st.b	r7[0x0],r12
	clocl_ = pal_trx_reg_read(TRX_CTRL_0);//pedido de identificacion del modulo. Debe devolver 0x07;
8000344a:	30 3c       	mov	r12,3
8000344c:	f0 1f 00 50 	mcall	8000358c <main+0x22c>
80003450:	4d 38       	lddpc	r8,8000359c <main+0x23c>
80003452:	b0 8c       	st.b	r8[0x0],r12
	transmition_power =pal_trx_reg_read(PHY_TX_PWR);//pedido de identificacion del modulo. Debe devolver 0x07 
80003454:	30 5c       	mov	r12,5
80003456:	f0 1f 00 4e 	mcall	8000358c <main+0x22c>
8000345a:	4d 28       	lddpc	r8,800035a0 <main+0x240>
8000345c:	b0 8c       	st.b	r8[0x0],r12
	pll = pal_trx_reg_read(PHY_CC_CCA);//pedido de identificacion del modulo. Debe devolver 0x07
8000345e:	30 8c       	mov	r12,8
80003460:	f0 1f 00 4b 	mcall	8000358c <main+0x22c>
80003464:	4d 08       	lddpc	r8,800035a4 <main+0x244>
80003466:	b0 8c       	st.b	r8[0x0],r12
	control_tx = pal_trx_reg_read(TRX_CTRL_2);//pedido de identificacion del modulo. Debe devolver 0x07
80003468:	30 cc       	mov	r12,12
8000346a:	f0 1f 00 49 	mcall	8000358c <main+0x22c>
8000346e:	4c f8       	lddpc	r8,800035a8 <main+0x248>
80003470:	b0 8c       	st.b	r8[0x0],r12
	
	if (register_value == PART_NUM_AT86RF212) 
80003472:	0f 89       	ld.ub	r9,r7[0x0]
80003474:	30 78       	mov	r8,7
80003476:	f0 09 18 00 	cp.b	r9,r8
8000347a:	c0 51       	brne	80003484 <main+0x124>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
8000347c:	4c cc       	lddpc	r12,800035ac <main+0x24c>
8000347e:	f0 1f 00 4d 	mcall	800035b0 <main+0x250>
80003482:	c0 48       	rjmp	8000348a <main+0x12a>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
80003484:	4c cc       	lddpc	r12,800035b4 <main+0x254>
80003486:	f0 1f 00 4b 	mcall	800035b0 <main+0x250>
	escribir_linea_pc(register_value);
8000348a:	4c 48       	lddpc	r8,80003598 <main+0x238>
8000348c:	11 8c       	ld.ub	r12,r8[0x0]
8000348e:	f0 1f 00 49 	mcall	800035b0 <main+0x250>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
80003492:	f0 1f 00 4a 	mcall	800035b8 <main+0x258>
	init_i2c_module();
80003496:	f0 1f 00 4a 	mcall	800035bc <main+0x25c>
	
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r");
8000349a:	4c ac       	lddpc	r12,800035c0 <main+0x260>
8000349c:	f0 1f 00 45 	mcall	800035b0 <main+0x250>
	escribir_linea_pc("- - - B u e n a s - - - \n\r");
800034a0:	4c 9c       	lddpc	r12,800035c4 <main+0x264>
800034a2:	f0 1f 00 44 	mcall	800035b0 <main+0x250>
	while(true)
	{
	
	
		
		if (cola_PC_nr != cola_PC_nw )
800034a6:	4c 97       	lddpc	r7,800035c8 <main+0x268>
800034a8:	4c 96       	lddpc	r6,800035cc <main+0x26c>
		{
			if (cola_PC[cola_PC_nr] == 't')
800034aa:	4c a4       	lddpc	r4,800035d0 <main+0x270>
800034ac:	37 45       	mov	r5,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
800034ae:	30 03       	mov	r3,0
		if (cola_PC_nr != cola_PC_nw )
		{
			if (cola_PC[cola_PC_nr] == 't')
			{
				leer_temp(temps);
				escribir_linea_pc("Temp: ");
800034b0:	4c 91       	lddpc	r1,800035d4 <main+0x274>
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
800034b2:	4c a0       	lddpc	r0,800035d8 <main+0x278>
	while(true)
	{
	
	
		
		if (cola_PC_nr != cola_PC_nw )
800034b4:	6e 08       	ld.w	r8,r7[0x0]
800034b6:	6c 09       	ld.w	r9,r6[0x0]
800034b8:	12 38       	cp.w	r8,r9
800034ba:	c1 90       	breq	800034ec <main+0x18c>
		{
			if (cola_PC[cola_PC_nr] == 't')
800034bc:	e8 08 07 08 	ld.ub	r8,r4[r8]
800034c0:	ea 08 18 00 	cp.b	r8,r5
800034c4:	c0 d1       	brne	800034de <main+0x17e>
			{
				leer_temp(temps);
800034c6:	1a 9c       	mov	r12,sp
800034c8:	f0 1f 00 45 	mcall	800035dc <main+0x27c>
				escribir_linea_pc("Temp: ");
800034cc:	02 9c       	mov	r12,r1
800034ce:	f0 1f 00 39 	mcall	800035b0 <main+0x250>
				escribir_linea_pc(temps);
800034d2:	1a 9c       	mov	r12,sp
800034d4:	f0 1f 00 37 	mcall	800035b0 <main+0x250>
				escribir_linea_pc("*C\r\n");
800034d8:	00 9c       	mov	r12,r0
800034da:	f0 1f 00 36 	mcall	800035b0 <main+0x250>
			}
			cola_PC_nr++;
800034de:	6e 08       	ld.w	r8,r7[0x0]
800034e0:	2f f8       	sub	r8,-1
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
800034e2:	e0 48 00 c8 	cp.w	r8,200
800034e6:	e6 08 17 40 	movge	r8,r3
800034ea:	8f 08       	st.w	r7[0x0],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800034ec:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034f0:	f0 ca fb 82 	sub	r10,r8,-1150
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800034f4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800034f8:	14 38       	cp.w	r8,r10
800034fa:	e0 88 00 08 	brls	8000350a <main+0x1aa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800034fe:	12 38       	cp.w	r8,r9
80003500:	fe 98 ff fa 	brls	800034f4 <main+0x194>
80003504:	12 3a       	cp.w	r10,r9
80003506:	cd 73       	brcs	800034b4 <main+0x154>
80003508:	cf 6b       	rjmp	800034f4 <main+0x194>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000350a:	12 38       	cp.w	r8,r9
8000350c:	fe 9b ff d4 	brhi	800034b4 <main+0x154>
80003510:	12 3a       	cp.w	r10,r9
80003512:	cd 13       	brcs	800034b4 <main+0x154>
80003514:	cf 0b       	rjmp	800034f4 <main+0x194>
80003516:	00 00       	add	r0,r0
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	2f 08       	sub	r8,-16
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	3a ce       	mov	lr,-84
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	2e 40       	sub	r0,-28
80003524:	80 00       	ld.sh	r0,r0[0x0]
80003526:	32 00       	mov	r0,32
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	31 68       	mov	r8,22
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	32 20       	mov	r0,34
80003530:	80 00       	ld.sh	r0,r0[0x0]
80003532:	32 b8       	mov	r8,43
80003534:	80 00       	ld.sh	r0,r0[0x0]
80003536:	31 44       	mov	r4,20
80003538:	80 00       	ld.sh	r0,r0[0x0]
8000353a:	27 34       	sub	r4,115
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	2f 98       	sub	r8,-7
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	26 b4       	sub	r4,107
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	2f 84       	sub	r4,-8
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	2f 14       	sub	r4,-15
8000354c:	00 00       	add	r0,r0
8000354e:	00 09       	add	r9,r0
80003550:	80 00       	ld.sh	r0,r0[0x0]
80003552:	23 fc       	sub	r12,63
80003554:	80 00       	ld.sh	r0,r0[0x0]
80003556:	24 cc       	sub	r12,76
80003558:	80 00       	ld.sh	r0,r0[0x0]
8000355a:	24 d6       	sub	r6,77
8000355c:	00 00       	add	r0,r0
8000355e:	00 14       	sub	r4,r0
80003560:	80 00       	ld.sh	r0,r0[0x0]
80003562:	93 38       	st.w	r9[0xc],r8
80003564:	80 00       	ld.sh	r0,r0[0x0]
80003566:	29 3e       	sub	lr,-109
80003568:	80 00       	ld.sh	r0,r0[0x0]
8000356a:	2a 10       	sub	r0,-95
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	93 40       	st.w	r9[0x10],r0
80003570:	80 00       	ld.sh	r0,r0[0x0]
80003572:	2a 44       	sub	r4,-92
80003574:	80 00       	ld.sh	r0,r0[0x0]
80003576:	29 da       	sub	r10,-99
80003578:	00 00       	add	r0,r0
8000357a:	06 3c       	cp.w	r12,r3
8000357c:	80 00       	ld.sh	r0,r0[0x0]
8000357e:	93 7c       	st.w	r9[0x1c],r12
80003580:	80 00       	ld.sh	r0,r0[0x0]
80003582:	93 80       	st.w	r9[0x20],r0
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	93 84       	st.w	r9[0x20],r4
80003588:	80 00       	ld.sh	r0,r0[0x0]
8000358a:	93 88       	st.w	r9[0x20],r8
8000358c:	80 00       	ld.sh	r0,r0[0x0]
8000358e:	2d cc       	sub	r12,-36
80003590:	00 00       	add	r0,r0
80003592:	07 04       	ld.w	r4,r3++
80003594:	80 00       	ld.sh	r0,r0[0x0]
80003596:	2d 68       	sub	r8,-42
80003598:	00 00       	add	r0,r0
8000359a:	07 05       	ld.w	r5,r3++
8000359c:	00 00       	add	r0,r0
8000359e:	06 34       	cp.w	r4,r3
800035a0:	00 00       	add	r0,r0
800035a2:	06 35       	cp.w	r5,r3
800035a4:	00 00       	add	r0,r0
800035a6:	07 0c       	ld.w	r12,r3++
800035a8:	00 00       	add	r0,r0
800035aa:	06 36       	cp.w	r6,r3
800035ac:	80 00       	ld.sh	r0,r0[0x0]
800035ae:	93 8c       	st.w	r9[0x20],r12
800035b0:	80 00       	ld.sh	r0,r0[0x0]
800035b2:	32 50       	mov	r0,37
800035b4:	80 00       	ld.sh	r0,r0[0x0]
800035b6:	93 a0       	st.w	r9[0x28],r0
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	31 94       	mov	r4,25
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	32 64       	mov	r4,38
800035c0:	80 00       	ld.sh	r0,r0[0x0]
800035c2:	93 b4       	st.w	r9[0x2c],r4
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	93 cc       	st.w	r9[0x30],r12
800035c8:	00 00       	add	r0,r0
800035ca:	06 38       	cp.w	r8,r3
800035cc:	00 00       	add	r0,r0
800035ce:	07 08       	ld.w	r8,r3++
800035d0:	00 00       	add	r0,r0
800035d2:	07 48       	ld.w	r8,--r3
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	93 e8       	st.w	r9[0x38],r8
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	93 f0       	st.w	r9[0x3c],r0
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	30 00       	mov	r0,0

800035e0 <__avr32_f64_mul>:
800035e0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800035e4:	e0 80 00 dc 	breq	8000379c <__avr32_f64_mul_op1_zero>
800035e8:	d4 21       	pushm	r4-r7,lr
800035ea:	f7 e9 20 0e 	eor	lr,r11,r9
800035ee:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800035f2:	30 15       	mov	r5,1
800035f4:	c4 30       	breq	8000367a <__avr32_f64_mul_op1_subnormal>
800035f6:	ab 6b       	lsl	r11,0xa
800035f8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800035fc:	ab 6a       	lsl	r10,0xa
800035fe:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003602:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003606:	c5 c0       	breq	800036be <__avr32_f64_mul_op2_subnormal>
80003608:	a1 78       	lsl	r8,0x1
8000360a:	5c f9       	rol	r9
8000360c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003610:	e0 47 07 ff 	cp.w	r7,2047
80003614:	c7 70       	breq	80003702 <__avr32_f64_mul_op_nan_or_inf>
80003616:	e0 46 07 ff 	cp.w	r6,2047
8000361a:	c7 40       	breq	80003702 <__avr32_f64_mul_op_nan_or_inf>
8000361c:	ee 06 00 0c 	add	r12,r7,r6
80003620:	e0 2c 03 fe 	sub	r12,1022
80003624:	f6 08 06 44 	mulu.d	r4,r11,r8
80003628:	f4 09 07 44 	macu.d	r4,r10,r9
8000362c:	f4 08 06 46 	mulu.d	r6,r10,r8
80003630:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003634:	08 07       	add	r7,r4
80003636:	f4 05 00 4a 	adc	r10,r10,r5
8000363a:	5c 0b       	acr	r11
8000363c:	ed bb 00 14 	bld	r11,0x14
80003640:	c0 50       	breq	8000364a <__avr32_f64_mul+0x6a>
80003642:	a1 77       	lsl	r7,0x1
80003644:	5c fa       	rol	r10
80003646:	5c fb       	rol	r11
80003648:	20 1c       	sub	r12,1
8000364a:	58 0c       	cp.w	r12,0
8000364c:	e0 8a 00 6f 	brle	8000372a <__avr32_f64_mul_res_subnormal>
80003650:	e0 4c 07 ff 	cp.w	r12,2047
80003654:	e0 84 00 9c 	brge	8000378c <__avr32_f64_mul_res_inf>
80003658:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000365c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003660:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003664:	ee 17 80 00 	eorh	r7,0x8000
80003668:	f1 b7 04 20 	satu	r7,0x1
8000366c:	0e 0a       	add	r10,r7
8000366e:	5c 0b       	acr	r11
80003670:	ed be 00 1f 	bld	lr,0x1f
80003674:	ef bb 00 1f 	bst	r11,0x1f
80003678:	d8 22       	popm	r4-r7,pc

8000367a <__avr32_f64_mul_op1_subnormal>:
8000367a:	e4 1b 00 0f 	andh	r11,0xf
8000367e:	f4 0c 12 00 	clz	r12,r10
80003682:	f6 06 12 00 	clz	r6,r11
80003686:	f7 bc 03 e1 	sublo	r12,-31
8000368a:	f8 06 17 30 	movlo	r6,r12
8000368e:	f7 b6 02 01 	subhs	r6,1
80003692:	e0 46 00 20 	cp.w	r6,32
80003696:	c0 d4       	brge	800036b0 <__avr32_f64_mul_op1_subnormal+0x36>
80003698:	ec 0c 11 20 	rsub	r12,r6,32
8000369c:	f6 06 09 4b 	lsl	r11,r11,r6
800036a0:	f4 0c 0a 4c 	lsr	r12,r10,r12
800036a4:	18 4b       	or	r11,r12
800036a6:	f4 06 09 4a 	lsl	r10,r10,r6
800036aa:	20 b6       	sub	r6,11
800036ac:	0c 17       	sub	r7,r6
800036ae:	ca ab       	rjmp	80003602 <__avr32_f64_mul+0x22>
800036b0:	f4 06 09 4b 	lsl	r11,r10,r6
800036b4:	c6 40       	breq	8000377c <__avr32_f64_mul_res_zero>
800036b6:	30 0a       	mov	r10,0
800036b8:	20 b6       	sub	r6,11
800036ba:	0c 17       	sub	r7,r6
800036bc:	ca 3b       	rjmp	80003602 <__avr32_f64_mul+0x22>

800036be <__avr32_f64_mul_op2_subnormal>:
800036be:	e4 19 00 0f 	andh	r9,0xf
800036c2:	f0 0c 12 00 	clz	r12,r8
800036c6:	f2 05 12 00 	clz	r5,r9
800036ca:	f7 bc 03 ea 	sublo	r12,-22
800036ce:	f8 05 17 30 	movlo	r5,r12
800036d2:	f7 b5 02 0a 	subhs	r5,10
800036d6:	e0 45 00 20 	cp.w	r5,32
800036da:	c0 d4       	brge	800036f4 <__avr32_f64_mul_op2_subnormal+0x36>
800036dc:	ea 0c 11 20 	rsub	r12,r5,32
800036e0:	f2 05 09 49 	lsl	r9,r9,r5
800036e4:	f0 0c 0a 4c 	lsr	r12,r8,r12
800036e8:	18 49       	or	r9,r12
800036ea:	f0 05 09 48 	lsl	r8,r8,r5
800036ee:	20 25       	sub	r5,2
800036f0:	0a 16       	sub	r6,r5
800036f2:	c8 fb       	rjmp	80003610 <__avr32_f64_mul+0x30>
800036f4:	f0 05 09 49 	lsl	r9,r8,r5
800036f8:	c4 20       	breq	8000377c <__avr32_f64_mul_res_zero>
800036fa:	30 08       	mov	r8,0
800036fc:	20 25       	sub	r5,2
800036fe:	0a 16       	sub	r6,r5
80003700:	c8 8b       	rjmp	80003610 <__avr32_f64_mul+0x30>

80003702 <__avr32_f64_mul_op_nan_or_inf>:
80003702:	e4 19 00 0f 	andh	r9,0xf
80003706:	e4 1b 00 0f 	andh	r11,0xf
8000370a:	14 4b       	or	r11,r10
8000370c:	10 49       	or	r9,r8
8000370e:	e0 47 07 ff 	cp.w	r7,2047
80003712:	c0 91       	brne	80003724 <__avr32_f64_mul_op1_not_naninf>
80003714:	58 0b       	cp.w	r11,0
80003716:	c3 81       	brne	80003786 <__avr32_f64_mul_res_nan>
80003718:	e0 46 07 ff 	cp.w	r6,2047
8000371c:	c3 81       	brne	8000378c <__avr32_f64_mul_res_inf>
8000371e:	58 09       	cp.w	r9,0
80003720:	c3 60       	breq	8000378c <__avr32_f64_mul_res_inf>
80003722:	c3 28       	rjmp	80003786 <__avr32_f64_mul_res_nan>

80003724 <__avr32_f64_mul_op1_not_naninf>:
80003724:	58 09       	cp.w	r9,0
80003726:	c3 30       	breq	8000378c <__avr32_f64_mul_res_inf>
80003728:	c2 f8       	rjmp	80003786 <__avr32_f64_mul_res_nan>

8000372a <__avr32_f64_mul_res_subnormal>:
8000372a:	5c 3c       	neg	r12
8000372c:	2f fc       	sub	r12,-1
8000372e:	f1 bc 04 c0 	satu	r12,0x6
80003732:	e0 4c 00 20 	cp.w	r12,32
80003736:	c1 14       	brge	80003758 <__avr32_f64_mul_res_subnormal+0x2e>
80003738:	f8 08 11 20 	rsub	r8,r12,32
8000373c:	0e 46       	or	r6,r7
8000373e:	ee 0c 0a 47 	lsr	r7,r7,r12
80003742:	f4 08 09 49 	lsl	r9,r10,r8
80003746:	12 47       	or	r7,r9
80003748:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000374c:	f6 08 09 49 	lsl	r9,r11,r8
80003750:	12 4a       	or	r10,r9
80003752:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003756:	c8 3b       	rjmp	8000365c <__avr32_f64_mul+0x7c>
80003758:	f8 08 11 20 	rsub	r8,r12,32
8000375c:	f9 b9 00 00 	moveq	r9,0
80003760:	c0 30       	breq	80003766 <__avr32_f64_mul_res_subnormal+0x3c>
80003762:	f6 08 09 49 	lsl	r9,r11,r8
80003766:	0e 46       	or	r6,r7
80003768:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000376c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003770:	f3 ea 10 07 	or	r7,r9,r10
80003774:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003778:	30 0b       	mov	r11,0
8000377a:	c7 1b       	rjmp	8000365c <__avr32_f64_mul+0x7c>

8000377c <__avr32_f64_mul_res_zero>:
8000377c:	1c 9b       	mov	r11,lr
8000377e:	e6 1b 80 00 	andh	r11,0x8000,COH
80003782:	30 0a       	mov	r10,0
80003784:	d8 22       	popm	r4-r7,pc

80003786 <__avr32_f64_mul_res_nan>:
80003786:	3f fb       	mov	r11,-1
80003788:	3f fa       	mov	r10,-1
8000378a:	d8 22       	popm	r4-r7,pc

8000378c <__avr32_f64_mul_res_inf>:
8000378c:	f0 6b 00 00 	mov	r11,-1048576
80003790:	ed be 00 1f 	bld	lr,0x1f
80003794:	ef bb 00 1f 	bst	r11,0x1f
80003798:	30 0a       	mov	r10,0
8000379a:	d8 22       	popm	r4-r7,pc

8000379c <__avr32_f64_mul_op1_zero>:
8000379c:	f7 e9 20 0b 	eor	r11,r11,r9
800037a0:	e6 1b 80 00 	andh	r11,0x8000,COH
800037a4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800037a8:	e0 4c 07 ff 	cp.w	r12,2047
800037ac:	5e 1c       	retne	r12
800037ae:	3f fa       	mov	r10,-1
800037b0:	3f fb       	mov	r11,-1
800037b2:	5e fc       	retal	r12

800037b4 <__avr32_u32_to_f64>:
800037b4:	f8 cb 00 00 	sub	r11,r12,0
800037b8:	30 0c       	mov	r12,0
800037ba:	c0 38       	rjmp	800037c0 <__avr32_s32_to_f64+0x4>

800037bc <__avr32_s32_to_f64>:
800037bc:	18 9b       	mov	r11,r12
800037be:	5c 4b       	abs	r11
800037c0:	30 0a       	mov	r10,0
800037c2:	5e 0b       	reteq	r11
800037c4:	d4 01       	pushm	lr
800037c6:	e0 69 04 1e 	mov	r9,1054
800037ca:	f6 08 12 00 	clz	r8,r11
800037ce:	c1 70       	breq	800037fc <__avr32_s32_to_f64+0x40>
800037d0:	c0 c3       	brcs	800037e8 <__avr32_s32_to_f64+0x2c>
800037d2:	f0 0e 11 20 	rsub	lr,r8,32
800037d6:	f6 08 09 4b 	lsl	r11,r11,r8
800037da:	f4 0e 0a 4e 	lsr	lr,r10,lr
800037de:	1c 4b       	or	r11,lr
800037e0:	f4 08 09 4a 	lsl	r10,r10,r8
800037e4:	10 19       	sub	r9,r8
800037e6:	c0 b8       	rjmp	800037fc <__avr32_s32_to_f64+0x40>
800037e8:	f4 08 12 00 	clz	r8,r10
800037ec:	f9 b8 03 00 	movlo	r8,0
800037f0:	f7 b8 02 e0 	subhs	r8,-32
800037f4:	f4 08 09 4b 	lsl	r11,r10,r8
800037f8:	30 0a       	mov	r10,0
800037fa:	10 19       	sub	r9,r8
800037fc:	58 09       	cp.w	r9,0
800037fe:	e0 89 00 30 	brgt	8000385e <__avr32_s32_to_f64+0xa2>
80003802:	5c 39       	neg	r9
80003804:	2f f9       	sub	r9,-1
80003806:	e0 49 00 36 	cp.w	r9,54
8000380a:	c0 43       	brcs	80003812 <__avr32_s32_to_f64+0x56>
8000380c:	30 0b       	mov	r11,0
8000380e:	30 0a       	mov	r10,0
80003810:	c2 68       	rjmp	8000385c <__avr32_s32_to_f64+0xa0>
80003812:	2f 69       	sub	r9,-10
80003814:	f2 08 11 20 	rsub	r8,r9,32
80003818:	e0 49 00 20 	cp.w	r9,32
8000381c:	c0 b2       	brcc	80003832 <__avr32_s32_to_f64+0x76>
8000381e:	f4 08 09 4e 	lsl	lr,r10,r8
80003822:	f6 08 09 48 	lsl	r8,r11,r8
80003826:	f4 09 0a 4a 	lsr	r10,r10,r9
8000382a:	f6 09 0a 4b 	lsr	r11,r11,r9
8000382e:	10 4b       	or	r11,r8
80003830:	c0 88       	rjmp	80003840 <__avr32_s32_to_f64+0x84>
80003832:	f6 08 09 4e 	lsl	lr,r11,r8
80003836:	14 4e       	or	lr,r10
80003838:	16 9a       	mov	r10,r11
8000383a:	30 0b       	mov	r11,0
8000383c:	f4 09 0a 4a 	lsr	r10,r10,r9
80003840:	ed ba 00 00 	bld	r10,0x0
80003844:	c0 92       	brcc	80003856 <__avr32_s32_to_f64+0x9a>
80003846:	1c 7e       	tst	lr,lr
80003848:	c0 41       	brne	80003850 <__avr32_s32_to_f64+0x94>
8000384a:	ed ba 00 01 	bld	r10,0x1
8000384e:	c0 42       	brcc	80003856 <__avr32_s32_to_f64+0x9a>
80003850:	2f fa       	sub	r10,-1
80003852:	f7 bb 02 ff 	subhs	r11,-1
80003856:	5c fc       	rol	r12
80003858:	5d 0b       	ror	r11
8000385a:	5d 0a       	ror	r10
8000385c:	d8 02       	popm	pc
8000385e:	e0 68 03 ff 	mov	r8,1023
80003862:	ed ba 00 0b 	bld	r10,0xb
80003866:	f7 b8 00 ff 	subeq	r8,-1
8000386a:	10 0a       	add	r10,r8
8000386c:	5c 0b       	acr	r11
8000386e:	f7 b9 03 fe 	sublo	r9,-2
80003872:	e0 49 07 ff 	cp.w	r9,2047
80003876:	c0 55       	brlt	80003880 <__avr32_s32_to_f64+0xc4>
80003878:	30 0a       	mov	r10,0
8000387a:	fc 1b ff e0 	movh	r11,0xffe0
8000387e:	c0 c8       	rjmp	80003896 <__floatsidf_return_op1>
80003880:	ed bb 00 1f 	bld	r11,0x1f
80003884:	f7 b9 01 01 	subne	r9,1
80003888:	ab 9a       	lsr	r10,0xb
8000388a:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000388e:	a1 7b       	lsl	r11,0x1
80003890:	ab 9b       	lsr	r11,0xb
80003892:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003896 <__floatsidf_return_op1>:
80003896:	a1 7c       	lsl	r12,0x1
80003898:	5d 0b       	ror	r11
8000389a:	d8 02       	popm	pc

8000389c <__avr32_f32_to_f64>:
8000389c:	f8 0b 15 01 	lsl	r11,r12,0x1
800038a0:	f9 ba 00 00 	moveq	r10,0
800038a4:	5e 0b       	reteq	r11
800038a6:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800038aa:	e0 49 00 ff 	cp.w	r9,255
800038ae:	c1 e0       	breq	800038ea <__extendsfdf_return_op1+0x6>
800038b0:	a7 7b       	lsl	r11,0x7
800038b2:	30 0a       	mov	r10,0
800038b4:	58 09       	cp.w	r9,0
800038b6:	f7 b9 00 ff 	subeq	r9,-1
800038ba:	5f 18       	srne	r8
800038bc:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800038c0:	fe 39 fc 80 	sub	r9,-896
800038c4:	f6 08 12 00 	clz	r8,r11
800038c8:	10 19       	sub	r9,r8
800038ca:	f6 08 09 4b 	lsl	r11,r11,r8
800038ce:	ed bb 00 1f 	bld	r11,0x1f
800038d2:	f7 b9 01 01 	subne	r9,1
800038d6:	ab 9a       	lsr	r10,0xb
800038d8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800038dc:	a1 7b       	lsl	r11,0x1
800038de:	ab 9b       	lsr	r11,0xb
800038e0:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800038e4 <__extendsfdf_return_op1>:
800038e4:	a1 7c       	lsl	r12,0x1
800038e6:	5d 0b       	ror	r11
800038e8:	5e fb       	retal	r11
800038ea:	fc 1a ff e0 	movh	r10,0xffe0
800038ee:	a9 6b       	lsl	r11,0x8
800038f0:	f9 bb 01 ff 	movne	r11,-1
800038f4:	f4 0b 17 00 	moveq	r11,r10
800038f8:	30 0a       	mov	r10,0
800038fa:	cf 5b       	rjmp	800038e4 <__extendsfdf_return_op1>

800038fc <__avr32_f64_to_f32>:
800038fc:	f6 09 15 01 	lsl	r9,r11,0x1
80003900:	b5 99       	lsr	r9,0x15
80003902:	5e 0d       	reteq	0
80003904:	f6 08 15 0a 	lsl	r8,r11,0xa
80003908:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000390c:	ab 6a       	lsl	r10,0xa
8000390e:	5c 3a       	neg	r10
80003910:	5c fc       	rol	r12
80003912:	e0 49 07 ff 	cp.w	r9,2047
80003916:	c1 a0       	breq	8000394a <__truncdfsf_return_op1+0x6>
80003918:	e0 29 03 80 	sub	r9,896
8000391c:	bf bc       	sbr	r12,0x1f
8000391e:	58 09       	cp.w	r9,0
80003920:	e0 8a 00 1a 	brle	80003954 <__truncdfsf_return_op1+0x10>
80003924:	37 fa       	mov	r10,127
80003926:	ed bc 00 08 	bld	r12,0x8
8000392a:	f7 ba 00 ff 	subeq	r10,-1
8000392e:	14 0c       	add	r12,r10
80003930:	f7 b9 03 fe 	sublo	r9,-2
80003934:	ed bc 00 1f 	bld	r12,0x1f
80003938:	f7 b9 01 01 	subne	r9,1
8000393c:	f8 0c 16 07 	lsr	r12,r12,0x7
80003940:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003944 <__truncdfsf_return_op1>:
80003944:	a1 7b       	lsl	r11,0x1
80003946:	5d 0c       	ror	r12
80003948:	5e fc       	retal	r12
8000394a:	bf dc       	cbr	r12,0x1f
8000394c:	5e 1e       	retne	-1
8000394e:	fc 1c 7f 80 	movh	r12,0x7f80
80003952:	5e fc       	retal	r12
80003954:	f2 09 11 01 	rsub	r9,r9,1
80003958:	59 99       	cp.w	r9,25
8000395a:	f9 bc 02 00 	movhs	r12,0
8000395e:	c1 32       	brcc	80003984 <__truncdfsf_return_op1+0x40>
80003960:	f2 0a 11 20 	rsub	r10,r9,32
80003964:	f8 0a 09 4a 	lsl	r10,r12,r10
80003968:	5f 1a       	srne	r10
8000396a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000396e:	14 4c       	or	r12,r10
80003970:	37 fa       	mov	r10,127
80003972:	ed bc 00 08 	bld	r12,0x8
80003976:	f7 ba 00 ff 	subeq	r10,-1
8000397a:	14 0c       	add	r12,r10
8000397c:	f8 0c 16 07 	lsr	r12,r12,0x7
80003980:	a1 7b       	lsl	r11,0x1
80003982:	5d 0c       	ror	r12
80003984:	5e fc       	retal	r12

80003986 <memcpy>:
80003986:	58 8a       	cp.w	r10,8
80003988:	c2 f5       	brlt	800039e6 <memcpy+0x60>
8000398a:	f9 eb 10 09 	or	r9,r12,r11
8000398e:	e2 19 00 03 	andl	r9,0x3,COH
80003992:	e0 81 00 97 	brne	80003ac0 <memcpy+0x13a>
80003996:	e0 4a 00 20 	cp.w	r10,32
8000399a:	c3 b4       	brge	80003a10 <memcpy+0x8a>
8000399c:	f4 08 14 02 	asr	r8,r10,0x2
800039a0:	f0 09 11 08 	rsub	r9,r8,8
800039a4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800039a8:	76 69       	ld.w	r9,r11[0x18]
800039aa:	99 69       	st.w	r12[0x18],r9
800039ac:	76 59       	ld.w	r9,r11[0x14]
800039ae:	99 59       	st.w	r12[0x14],r9
800039b0:	76 49       	ld.w	r9,r11[0x10]
800039b2:	99 49       	st.w	r12[0x10],r9
800039b4:	76 39       	ld.w	r9,r11[0xc]
800039b6:	99 39       	st.w	r12[0xc],r9
800039b8:	76 29       	ld.w	r9,r11[0x8]
800039ba:	99 29       	st.w	r12[0x8],r9
800039bc:	76 19       	ld.w	r9,r11[0x4]
800039be:	99 19       	st.w	r12[0x4],r9
800039c0:	76 09       	ld.w	r9,r11[0x0]
800039c2:	99 09       	st.w	r12[0x0],r9
800039c4:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800039c8:	f8 08 00 28 	add	r8,r12,r8<<0x2
800039cc:	e0 1a 00 03 	andl	r10,0x3
800039d0:	f4 0a 11 04 	rsub	r10,r10,4
800039d4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800039d8:	17 a9       	ld.ub	r9,r11[0x2]
800039da:	b0 a9       	st.b	r8[0x2],r9
800039dc:	17 99       	ld.ub	r9,r11[0x1]
800039de:	b0 99       	st.b	r8[0x1],r9
800039e0:	17 89       	ld.ub	r9,r11[0x0]
800039e2:	b0 89       	st.b	r8[0x0],r9
800039e4:	5e fc       	retal	r12
800039e6:	f4 0a 11 09 	rsub	r10,r10,9
800039ea:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800039ee:	17 f9       	ld.ub	r9,r11[0x7]
800039f0:	b8 f9       	st.b	r12[0x7],r9
800039f2:	17 e9       	ld.ub	r9,r11[0x6]
800039f4:	b8 e9       	st.b	r12[0x6],r9
800039f6:	17 d9       	ld.ub	r9,r11[0x5]
800039f8:	b8 d9       	st.b	r12[0x5],r9
800039fa:	17 c9       	ld.ub	r9,r11[0x4]
800039fc:	b8 c9       	st.b	r12[0x4],r9
800039fe:	17 b9       	ld.ub	r9,r11[0x3]
80003a00:	b8 b9       	st.b	r12[0x3],r9
80003a02:	17 a9       	ld.ub	r9,r11[0x2]
80003a04:	b8 a9       	st.b	r12[0x2],r9
80003a06:	17 99       	ld.ub	r9,r11[0x1]
80003a08:	b8 99       	st.b	r12[0x1],r9
80003a0a:	17 89       	ld.ub	r9,r11[0x0]
80003a0c:	b8 89       	st.b	r12[0x0],r9
80003a0e:	5e fc       	retal	r12
80003a10:	eb cd 40 c0 	pushm	r6-r7,lr
80003a14:	18 99       	mov	r9,r12
80003a16:	22 0a       	sub	r10,32
80003a18:	b7 07       	ld.d	r6,r11++
80003a1a:	b3 26       	st.d	r9++,r6
80003a1c:	b7 07       	ld.d	r6,r11++
80003a1e:	b3 26       	st.d	r9++,r6
80003a20:	b7 07       	ld.d	r6,r11++
80003a22:	b3 26       	st.d	r9++,r6
80003a24:	b7 07       	ld.d	r6,r11++
80003a26:	b3 26       	st.d	r9++,r6
80003a28:	22 0a       	sub	r10,32
80003a2a:	cf 74       	brge	80003a18 <memcpy+0x92>
80003a2c:	2f 0a       	sub	r10,-16
80003a2e:	c0 65       	brlt	80003a3a <memcpy+0xb4>
80003a30:	b7 07       	ld.d	r6,r11++
80003a32:	b3 26       	st.d	r9++,r6
80003a34:	b7 07       	ld.d	r6,r11++
80003a36:	b3 26       	st.d	r9++,r6
80003a38:	21 0a       	sub	r10,16
80003a3a:	5c 3a       	neg	r10
80003a3c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003a40:	d7 03       	nop
80003a42:	d7 03       	nop
80003a44:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003a48:	f3 66 00 0e 	st.b	r9[14],r6
80003a4c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003a50:	f3 66 00 0d 	st.b	r9[13],r6
80003a54:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a58:	f3 66 00 0c 	st.b	r9[12],r6
80003a5c:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003a60:	f3 66 00 0b 	st.b	r9[11],r6
80003a64:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003a68:	f3 66 00 0a 	st.b	r9[10],r6
80003a6c:	f7 36 00 09 	ld.ub	r6,r11[9]
80003a70:	f3 66 00 09 	st.b	r9[9],r6
80003a74:	f7 36 00 08 	ld.ub	r6,r11[8]
80003a78:	f3 66 00 08 	st.b	r9[8],r6
80003a7c:	f7 36 00 07 	ld.ub	r6,r11[7]
80003a80:	f3 66 00 07 	st.b	r9[7],r6
80003a84:	f7 36 00 06 	ld.ub	r6,r11[6]
80003a88:	f3 66 00 06 	st.b	r9[6],r6
80003a8c:	f7 36 00 05 	ld.ub	r6,r11[5]
80003a90:	f3 66 00 05 	st.b	r9[5],r6
80003a94:	f7 36 00 04 	ld.ub	r6,r11[4]
80003a98:	f3 66 00 04 	st.b	r9[4],r6
80003a9c:	f7 36 00 03 	ld.ub	r6,r11[3]
80003aa0:	f3 66 00 03 	st.b	r9[3],r6
80003aa4:	f7 36 00 02 	ld.ub	r6,r11[2]
80003aa8:	f3 66 00 02 	st.b	r9[2],r6
80003aac:	f7 36 00 01 	ld.ub	r6,r11[1]
80003ab0:	f3 66 00 01 	st.b	r9[1],r6
80003ab4:	f7 36 00 00 	ld.ub	r6,r11[0]
80003ab8:	f3 66 00 00 	st.b	r9[0],r6
80003abc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ac0:	20 1a       	sub	r10,1
80003ac2:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003ac6:	f8 0a 0b 09 	st.b	r12[r10],r9
80003aca:	cf b1       	brne	80003ac0 <memcpy+0x13a>
80003acc:	5e fc       	retal	r12

80003ace <memset>:
80003ace:	18 98       	mov	r8,r12
80003ad0:	c0 38       	rjmp	80003ad6 <memset+0x8>
80003ad2:	10 cb       	st.b	r8++,r11
80003ad4:	20 1a       	sub	r10,1
80003ad6:	58 0a       	cp.w	r10,0
80003ad8:	cf d1       	brne	80003ad2 <memset+0x4>
80003ada:	5e fc       	retal	r12

80003adc <sprintf>:
80003adc:	d4 01       	pushm	lr
80003ade:	21 7d       	sub	sp,92
80003ae0:	e0 68 ff ff 	mov	r8,65535
80003ae4:	ea 18 7f ff 	orh	r8,0x7fff
80003ae8:	50 58       	stdsp	sp[0x14],r8
80003aea:	50 28       	stdsp	sp[0x8],r8
80003aec:	e0 68 02 08 	mov	r8,520
80003af0:	ba 68       	st.h	sp[0xc],r8
80003af2:	3f f8       	mov	r8,-1
80003af4:	ba 78       	st.h	sp[0xe],r8
80003af6:	e0 68 01 18 	mov	r8,280
80003afa:	50 4c       	stdsp	sp[0x10],r12
80003afc:	16 9a       	mov	r10,r11
80003afe:	50 0c       	stdsp	sp[0x0],r12
80003b00:	fa c9 ff a0 	sub	r9,sp,-96
80003b04:	70 0c       	ld.w	r12,r8[0x0]
80003b06:	1a 9b       	mov	r11,sp
80003b08:	c9 cd       	rcall	80003e40 <_vfprintf_r>
80003b0a:	30 09       	mov	r9,0
80003b0c:	40 08       	lddsp	r8,sp[0x0]
80003b0e:	b0 89       	st.b	r8[0x0],r9
80003b10:	2e 9d       	sub	sp,-92
80003b12:	d8 02       	popm	pc

80003b14 <get_arg>:
80003b14:	d4 31       	pushm	r0-r7,lr
80003b16:	20 8d       	sub	sp,32
80003b18:	fa c4 ff bc 	sub	r4,sp,-68
80003b1c:	50 4b       	stdsp	sp[0x10],r11
80003b1e:	68 2e       	ld.w	lr,r4[0x8]
80003b20:	50 58       	stdsp	sp[0x14],r8
80003b22:	12 96       	mov	r6,r9
80003b24:	7c 0b       	ld.w	r11,lr[0x0]
80003b26:	70 05       	ld.w	r5,r8[0x0]
80003b28:	50 6e       	stdsp	sp[0x18],lr
80003b2a:	58 0b       	cp.w	r11,0
80003b2c:	f4 0b 17 00 	moveq	r11,r10
80003b30:	68 03       	ld.w	r3,r4[0x0]
80003b32:	68 11       	ld.w	r1,r4[0x4]
80003b34:	40 49       	lddsp	r9,sp[0x10]
80003b36:	30 08       	mov	r8,0
80003b38:	c2 69       	rjmp	80003d84 <get_arg+0x270>
80003b3a:	2f fb       	sub	r11,-1
80003b3c:	32 5c       	mov	r12,37
80003b3e:	17 8a       	ld.ub	r10,r11[0x0]
80003b40:	f8 0a 18 00 	cp.b	r10,r12
80003b44:	5f 1e       	srne	lr
80003b46:	f0 0a 18 00 	cp.b	r10,r8
80003b4a:	5f 1c       	srne	r12
80003b4c:	fd ec 00 0c 	and	r12,lr,r12
80003b50:	f0 0c 18 00 	cp.b	r12,r8
80003b54:	cf 31       	brne	80003b3a <get_arg+0x26>
80003b56:	58 0a       	cp.w	r10,0
80003b58:	e0 80 01 23 	breq	80003d9e <get_arg+0x28a>
80003b5c:	30 0c       	mov	r12,0
80003b5e:	3f fa       	mov	r10,-1
80003b60:	18 90       	mov	r0,r12
80003b62:	50 3a       	stdsp	sp[0xc],r10
80003b64:	18 94       	mov	r4,r12
80003b66:	18 92       	mov	r2,r12
80003b68:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003b6c:	16 97       	mov	r7,r11
80003b6e:	50 7c       	stdsp	sp[0x1c],r12
80003b70:	fe cc a4 78 	sub	r12,pc,-23432
80003b74:	0f 3a       	ld.ub	r10,r7++
80003b76:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003b7a:	40 7c       	lddsp	r12,sp[0x1c]
80003b7c:	1c 0c       	add	r12,lr
80003b7e:	fe ce a5 4a 	sub	lr,pc,-23222
80003b82:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003b86:	20 1e       	sub	lr,1
80003b88:	50 0e       	stdsp	sp[0x0],lr
80003b8a:	fe ce a5 c2 	sub	lr,pc,-23102
80003b8e:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003b92:	50 7c       	stdsp	sp[0x1c],r12
80003b94:	40 0c       	lddsp	r12,sp[0x0]
80003b96:	58 7c       	cp.w	r12,7
80003b98:	e0 8b 00 ef 	brhi	80003d76 <get_arg+0x262>
80003b9c:	fe ce a7 74 	sub	lr,pc,-22668
80003ba0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003ba4:	36 8b       	mov	r11,104
80003ba6:	f6 0a 18 00 	cp.b	r10,r11
80003baa:	e0 80 00 e6 	breq	80003d76 <get_arg+0x262>
80003bae:	37 1b       	mov	r11,113
80003bb0:	f6 0a 18 00 	cp.b	r10,r11
80003bb4:	c0 70       	breq	80003bc2 <get_arg+0xae>
80003bb6:	34 cb       	mov	r11,76
80003bb8:	f6 0a 18 00 	cp.b	r10,r11
80003bbc:	c0 51       	brne	80003bc6 <get_arg+0xb2>
80003bbe:	a3 b4       	sbr	r4,0x3
80003bc0:	cd b8       	rjmp	80003d76 <get_arg+0x262>
80003bc2:	a5 b4       	sbr	r4,0x5
80003bc4:	cd 98       	rjmp	80003d76 <get_arg+0x262>
80003bc6:	08 9a       	mov	r10,r4
80003bc8:	0e 9b       	mov	r11,r7
80003bca:	a5 aa       	sbr	r10,0x4
80003bcc:	17 3c       	ld.ub	r12,r11++
80003bce:	a5 b4       	sbr	r4,0x5
80003bd0:	36 ce       	mov	lr,108
80003bd2:	fc 0c 18 00 	cp.b	r12,lr
80003bd6:	e0 80 00 d1 	breq	80003d78 <get_arg+0x264>
80003bda:	14 94       	mov	r4,r10
80003bdc:	cc d8       	rjmp	80003d76 <get_arg+0x262>
80003bde:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003be2:	36 7c       	mov	r12,103
80003be4:	f8 0a 18 00 	cp.b	r10,r12
80003be8:	e0 8b 00 27 	brhi	80003c36 <get_arg+0x122>
80003bec:	36 5b       	mov	r11,101
80003bee:	f6 0a 18 00 	cp.b	r10,r11
80003bf2:	c4 82       	brcc	80003c82 <get_arg+0x16e>
80003bf4:	34 fb       	mov	r11,79
80003bf6:	f6 0a 18 00 	cp.b	r10,r11
80003bfa:	c4 80       	breq	80003c8a <get_arg+0x176>
80003bfc:	e0 8b 00 0c 	brhi	80003c14 <get_arg+0x100>
80003c00:	34 5b       	mov	r11,69
80003c02:	f6 0a 18 00 	cp.b	r10,r11
80003c06:	c3 e0       	breq	80003c82 <get_arg+0x16e>
80003c08:	34 7b       	mov	r11,71
80003c0a:	f6 0a 18 00 	cp.b	r10,r11
80003c0e:	c3 a0       	breq	80003c82 <get_arg+0x16e>
80003c10:	34 4b       	mov	r11,68
80003c12:	c0 88       	rjmp	80003c22 <get_arg+0x10e>
80003c14:	35 8b       	mov	r11,88
80003c16:	f6 0a 18 00 	cp.b	r10,r11
80003c1a:	c2 c0       	breq	80003c72 <get_arg+0x15e>
80003c1c:	e0 8b 00 07 	brhi	80003c2a <get_arg+0x116>
80003c20:	35 5b       	mov	r11,85
80003c22:	f6 0a 18 00 	cp.b	r10,r11
80003c26:	c3 51       	brne	80003c90 <get_arg+0x17c>
80003c28:	c3 18       	rjmp	80003c8a <get_arg+0x176>
80003c2a:	36 3b       	mov	r11,99
80003c2c:	f6 0a 18 00 	cp.b	r10,r11
80003c30:	c2 f0       	breq	80003c8e <get_arg+0x17a>
80003c32:	36 4b       	mov	r11,100
80003c34:	c0 e8       	rjmp	80003c50 <get_arg+0x13c>
80003c36:	37 0b       	mov	r11,112
80003c38:	f6 0a 18 00 	cp.b	r10,r11
80003c3c:	c2 50       	breq	80003c86 <get_arg+0x172>
80003c3e:	e0 8b 00 0d 	brhi	80003c58 <get_arg+0x144>
80003c42:	36 eb       	mov	r11,110
80003c44:	f6 0a 18 00 	cp.b	r10,r11
80003c48:	c1 f0       	breq	80003c86 <get_arg+0x172>
80003c4a:	e0 8b 00 14 	brhi	80003c72 <get_arg+0x15e>
80003c4e:	36 9b       	mov	r11,105
80003c50:	f6 0a 18 00 	cp.b	r10,r11
80003c54:	c1 e1       	brne	80003c90 <get_arg+0x17c>
80003c56:	c0 e8       	rjmp	80003c72 <get_arg+0x15e>
80003c58:	37 5b       	mov	r11,117
80003c5a:	f6 0a 18 00 	cp.b	r10,r11
80003c5e:	c0 a0       	breq	80003c72 <get_arg+0x15e>
80003c60:	37 8b       	mov	r11,120
80003c62:	f6 0a 18 00 	cp.b	r10,r11
80003c66:	c0 60       	breq	80003c72 <get_arg+0x15e>
80003c68:	37 3b       	mov	r11,115
80003c6a:	f6 0a 18 00 	cp.b	r10,r11
80003c6e:	c1 11       	brne	80003c90 <get_arg+0x17c>
80003c70:	c0 b8       	rjmp	80003c86 <get_arg+0x172>
80003c72:	ed b4 00 04 	bld	r4,0x4
80003c76:	c0 a0       	breq	80003c8a <get_arg+0x176>
80003c78:	ed b4 00 05 	bld	r4,0x5
80003c7c:	c0 91       	brne	80003c8e <get_arg+0x17a>
80003c7e:	30 20       	mov	r0,2
80003c80:	c0 88       	rjmp	80003c90 <get_arg+0x17c>
80003c82:	30 40       	mov	r0,4
80003c84:	c0 68       	rjmp	80003c90 <get_arg+0x17c>
80003c86:	30 30       	mov	r0,3
80003c88:	c0 48       	rjmp	80003c90 <get_arg+0x17c>
80003c8a:	30 10       	mov	r0,1
80003c8c:	c0 28       	rjmp	80003c90 <get_arg+0x17c>
80003c8e:	30 00       	mov	r0,0
80003c90:	40 3b       	lddsp	r11,sp[0xc]
80003c92:	5b fb       	cp.w	r11,-1
80003c94:	c0 40       	breq	80003c9c <get_arg+0x188>
80003c96:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003c9a:	c6 e8       	rjmp	80003d76 <get_arg+0x262>
80003c9c:	58 60       	cp.w	r0,6
80003c9e:	e0 8b 00 6c 	brhi	80003d76 <get_arg+0x262>
80003ca2:	6c 0a       	ld.w	r10,r6[0x0]
80003ca4:	ea cc ff ff 	sub	r12,r5,-1
80003ca8:	fe ce a8 60 	sub	lr,pc,-22432
80003cac:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003cb0:	f4 cb ff f8 	sub	r11,r10,-8
80003cb4:	8d 0b       	st.w	r6[0x0],r11
80003cb6:	f4 ea 00 00 	ld.d	r10,r10[0]
80003cba:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003cbe:	c0 f8       	rjmp	80003cdc <get_arg+0x1c8>
80003cc0:	f4 cb ff fc 	sub	r11,r10,-4
80003cc4:	8d 0b       	st.w	r6[0x0],r11
80003cc6:	74 0a       	ld.w	r10,r10[0x0]
80003cc8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003ccc:	c0 88       	rjmp	80003cdc <get_arg+0x1c8>
80003cce:	f4 cb ff f8 	sub	r11,r10,-8
80003cd2:	8d 0b       	st.w	r6[0x0],r11
80003cd4:	f4 ea 00 00 	ld.d	r10,r10[0]
80003cd8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003cdc:	0e 9b       	mov	r11,r7
80003cde:	18 95       	mov	r5,r12
80003ce0:	c4 c8       	rjmp	80003d78 <get_arg+0x264>
80003ce2:	62 0a       	ld.w	r10,r1[0x0]
80003ce4:	5b fa       	cp.w	r10,-1
80003ce6:	c0 a1       	brne	80003cfa <get_arg+0x1e6>
80003ce8:	50 19       	stdsp	sp[0x4],r9
80003cea:	50 28       	stdsp	sp[0x8],r8
80003cec:	e0 6a 00 80 	mov	r10,128
80003cf0:	30 0b       	mov	r11,0
80003cf2:	02 9c       	mov	r12,r1
80003cf4:	ce de       	rcall	80003ace <memset>
80003cf6:	40 28       	lddsp	r8,sp[0x8]
80003cf8:	40 19       	lddsp	r9,sp[0x4]
80003cfa:	e4 cc 00 01 	sub	r12,r2,1
80003cfe:	0e 9b       	mov	r11,r7
80003d00:	50 3c       	stdsp	sp[0xc],r12
80003d02:	f2 0c 0c 49 	max	r9,r9,r12
80003d06:	c3 98       	rjmp	80003d78 <get_arg+0x264>
80003d08:	62 0a       	ld.w	r10,r1[0x0]
80003d0a:	5b fa       	cp.w	r10,-1
80003d0c:	c0 a1       	brne	80003d20 <get_arg+0x20c>
80003d0e:	50 19       	stdsp	sp[0x4],r9
80003d10:	50 28       	stdsp	sp[0x8],r8
80003d12:	e0 6a 00 80 	mov	r10,128
80003d16:	30 0b       	mov	r11,0
80003d18:	02 9c       	mov	r12,r1
80003d1a:	cd ae       	rcall	80003ace <memset>
80003d1c:	40 28       	lddsp	r8,sp[0x8]
80003d1e:	40 19       	lddsp	r9,sp[0x4]
80003d20:	20 12       	sub	r2,1
80003d22:	30 0a       	mov	r10,0
80003d24:	0e 9b       	mov	r11,r7
80003d26:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003d2a:	f2 02 0c 49 	max	r9,r9,r2
80003d2e:	c2 58       	rjmp	80003d78 <get_arg+0x264>
80003d30:	16 97       	mov	r7,r11
80003d32:	6c 0a       	ld.w	r10,r6[0x0]
80003d34:	f4 cb ff fc 	sub	r11,r10,-4
80003d38:	8d 0b       	st.w	r6[0x0],r11
80003d3a:	74 0a       	ld.w	r10,r10[0x0]
80003d3c:	0e 9b       	mov	r11,r7
80003d3e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003d42:	2f f5       	sub	r5,-1
80003d44:	c1 a8       	rjmp	80003d78 <get_arg+0x264>
80003d46:	f4 c2 00 30 	sub	r2,r10,48
80003d4a:	c0 68       	rjmp	80003d56 <get_arg+0x242>
80003d4c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003d50:	2f f7       	sub	r7,-1
80003d52:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003d56:	0f 8a       	ld.ub	r10,r7[0x0]
80003d58:	58 0a       	cp.w	r10,0
80003d5a:	c0 e0       	breq	80003d76 <get_arg+0x262>
80003d5c:	23 0a       	sub	r10,48
80003d5e:	58 9a       	cp.w	r10,9
80003d60:	fe 98 ff f6 	brls	80003d4c <get_arg+0x238>
80003d64:	c0 98       	rjmp	80003d76 <get_arg+0x262>
80003d66:	2f f7       	sub	r7,-1
80003d68:	0f 8a       	ld.ub	r10,r7[0x0]
80003d6a:	58 0a       	cp.w	r10,0
80003d6c:	c0 50       	breq	80003d76 <get_arg+0x262>
80003d6e:	23 0a       	sub	r10,48
80003d70:	58 9a       	cp.w	r10,9
80003d72:	fe 98 ff fa 	brls	80003d66 <get_arg+0x252>
80003d76:	0e 9b       	mov	r11,r7
80003d78:	40 7c       	lddsp	r12,sp[0x1c]
80003d7a:	30 ba       	mov	r10,11
80003d7c:	f4 0c 18 00 	cp.b	r12,r10
80003d80:	fe 91 fe f4 	brne	80003b68 <get_arg+0x54>
80003d84:	40 42       	lddsp	r2,sp[0x10]
80003d86:	17 8c       	ld.ub	r12,r11[0x0]
80003d88:	0a 32       	cp.w	r2,r5
80003d8a:	5f 4a       	srge	r10
80003d8c:	f0 0c 18 00 	cp.b	r12,r8
80003d90:	5f 1c       	srne	r12
80003d92:	f9 ea 00 0a 	and	r10,r12,r10
80003d96:	f0 0a 18 00 	cp.b	r10,r8
80003d9a:	fe 91 fe d1 	brne	80003b3c <get_arg+0x28>
80003d9e:	30 08       	mov	r8,0
80003da0:	40 4e       	lddsp	lr,sp[0x10]
80003da2:	17 8a       	ld.ub	r10,r11[0x0]
80003da4:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003da8:	f0 0a 18 00 	cp.b	r10,r8
80003dac:	fc 09 17 10 	movne	r9,lr
80003db0:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003db4:	06 9e       	mov	lr,r3
80003db6:	c2 a8       	rjmp	80003e0a <get_arg+0x2f6>
80003db8:	62 0a       	ld.w	r10,r1[0x0]
80003dba:	58 3a       	cp.w	r10,3
80003dbc:	c1 e0       	breq	80003df8 <get_arg+0x2e4>
80003dbe:	e0 89 00 07 	brgt	80003dcc <get_arg+0x2b8>
80003dc2:	58 1a       	cp.w	r10,1
80003dc4:	c1 a0       	breq	80003df8 <get_arg+0x2e4>
80003dc6:	58 2a       	cp.w	r10,2
80003dc8:	c1 81       	brne	80003df8 <get_arg+0x2e4>
80003dca:	c0 58       	rjmp	80003dd4 <get_arg+0x2c0>
80003dcc:	58 5a       	cp.w	r10,5
80003dce:	c0 c0       	breq	80003de6 <get_arg+0x2d2>
80003dd0:	c0 b5       	brlt	80003de6 <get_arg+0x2d2>
80003dd2:	c1 38       	rjmp	80003df8 <get_arg+0x2e4>
80003dd4:	6c 0a       	ld.w	r10,r6[0x0]
80003dd6:	f4 cc ff f8 	sub	r12,r10,-8
80003dda:	8d 0c       	st.w	r6[0x0],r12
80003ddc:	f4 e2 00 00 	ld.d	r2,r10[0]
80003de0:	f0 e3 00 00 	st.d	r8[0],r2
80003de4:	c1 08       	rjmp	80003e04 <get_arg+0x2f0>
80003de6:	6c 0a       	ld.w	r10,r6[0x0]
80003de8:	f4 cc ff f8 	sub	r12,r10,-8
80003dec:	8d 0c       	st.w	r6[0x0],r12
80003dee:	f4 e2 00 00 	ld.d	r2,r10[0]
80003df2:	f0 e3 00 00 	st.d	r8[0],r2
80003df6:	c0 78       	rjmp	80003e04 <get_arg+0x2f0>
80003df8:	6c 0a       	ld.w	r10,r6[0x0]
80003dfa:	f4 cc ff fc 	sub	r12,r10,-4
80003dfe:	8d 0c       	st.w	r6[0x0],r12
80003e00:	74 0a       	ld.w	r10,r10[0x0]
80003e02:	91 0a       	st.w	r8[0x0],r10
80003e04:	2f f5       	sub	r5,-1
80003e06:	2f 88       	sub	r8,-8
80003e08:	2f c1       	sub	r1,-4
80003e0a:	12 35       	cp.w	r5,r9
80003e0c:	fe 9a ff d6 	brle	80003db8 <get_arg+0x2a4>
80003e10:	1c 93       	mov	r3,lr
80003e12:	40 52       	lddsp	r2,sp[0x14]
80003e14:	40 6e       	lddsp	lr,sp[0x18]
80003e16:	85 05       	st.w	r2[0x0],r5
80003e18:	9d 0b       	st.w	lr[0x0],r11
80003e1a:	40 4b       	lddsp	r11,sp[0x10]
80003e1c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003e20:	2f 8d       	sub	sp,-32
80003e22:	d8 32       	popm	r0-r7,pc

80003e24 <__sprint_r>:
80003e24:	d4 21       	pushm	r4-r7,lr
80003e26:	14 97       	mov	r7,r10
80003e28:	74 28       	ld.w	r8,r10[0x8]
80003e2a:	58 08       	cp.w	r8,0
80003e2c:	c0 41       	brne	80003e34 <__sprint_r+0x10>
80003e2e:	95 18       	st.w	r10[0x4],r8
80003e30:	10 9c       	mov	r12,r8
80003e32:	d8 22       	popm	r4-r7,pc
80003e34:	e0 a0 18 b4 	rcall	80006f9c <__sfvwrite_r>
80003e38:	30 08       	mov	r8,0
80003e3a:	8f 18       	st.w	r7[0x4],r8
80003e3c:	8f 28       	st.w	r7[0x8],r8
80003e3e:	d8 22       	popm	r4-r7,pc

80003e40 <_vfprintf_r>:
80003e40:	d4 31       	pushm	r0-r7,lr
80003e42:	fa cd 06 bc 	sub	sp,sp,1724
80003e46:	51 09       	stdsp	sp[0x40],r9
80003e48:	16 91       	mov	r1,r11
80003e4a:	14 97       	mov	r7,r10
80003e4c:	18 95       	mov	r5,r12
80003e4e:	e0 a0 1a 1d 	rcall	80007288 <_localeconv_r>
80003e52:	78 0c       	ld.w	r12,r12[0x0]
80003e54:	50 cc       	stdsp	sp[0x30],r12
80003e56:	58 05       	cp.w	r5,0
80003e58:	c0 70       	breq	80003e66 <_vfprintf_r+0x26>
80003e5a:	6a 68       	ld.w	r8,r5[0x18]
80003e5c:	58 08       	cp.w	r8,0
80003e5e:	c0 41       	brne	80003e66 <_vfprintf_r+0x26>
80003e60:	0a 9c       	mov	r12,r5
80003e62:	e0 a0 17 3d 	rcall	80006cdc <__sinit>
80003e66:	fe c8 a6 5e 	sub	r8,pc,-22946
80003e6a:	10 31       	cp.w	r1,r8
80003e6c:	c0 31       	brne	80003e72 <_vfprintf_r+0x32>
80003e6e:	6a 01       	ld.w	r1,r5[0x0]
80003e70:	c0 c8       	rjmp	80003e88 <_vfprintf_r+0x48>
80003e72:	fe c8 a6 4a 	sub	r8,pc,-22966
80003e76:	10 31       	cp.w	r1,r8
80003e78:	c0 31       	brne	80003e7e <_vfprintf_r+0x3e>
80003e7a:	6a 11       	ld.w	r1,r5[0x4]
80003e7c:	c0 68       	rjmp	80003e88 <_vfprintf_r+0x48>
80003e7e:	fe c8 a6 36 	sub	r8,pc,-22986
80003e82:	10 31       	cp.w	r1,r8
80003e84:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003e88:	82 68       	ld.sh	r8,r1[0xc]
80003e8a:	ed b8 00 03 	bld	r8,0x3
80003e8e:	c0 41       	brne	80003e96 <_vfprintf_r+0x56>
80003e90:	62 48       	ld.w	r8,r1[0x10]
80003e92:	58 08       	cp.w	r8,0
80003e94:	c0 71       	brne	80003ea2 <_vfprintf_r+0x62>
80003e96:	02 9b       	mov	r11,r1
80003e98:	0a 9c       	mov	r12,r5
80003e9a:	e0 a0 0f 5d 	rcall	80005d54 <__swsetup_r>
80003e9e:	e0 81 0f 54 	brne	80005d46 <_vfprintf_r+0x1f06>
80003ea2:	82 68       	ld.sh	r8,r1[0xc]
80003ea4:	10 99       	mov	r9,r8
80003ea6:	e2 19 00 1a 	andl	r9,0x1a,COH
80003eaa:	58 a9       	cp.w	r9,10
80003eac:	c3 c1       	brne	80003f24 <_vfprintf_r+0xe4>
80003eae:	82 79       	ld.sh	r9,r1[0xe]
80003eb0:	30 0a       	mov	r10,0
80003eb2:	f4 09 19 00 	cp.h	r9,r10
80003eb6:	c3 75       	brlt	80003f24 <_vfprintf_r+0xe4>
80003eb8:	a1 d8       	cbr	r8,0x1
80003eba:	fb 58 05 d0 	st.h	sp[1488],r8
80003ebe:	62 88       	ld.w	r8,r1[0x20]
80003ec0:	fb 48 05 e4 	st.w	sp[1508],r8
80003ec4:	62 a8       	ld.w	r8,r1[0x28]
80003ec6:	fb 48 05 ec 	st.w	sp[1516],r8
80003eca:	fa c8 ff bc 	sub	r8,sp,-68
80003ece:	fb 48 05 d4 	st.w	sp[1492],r8
80003ed2:	fb 48 05 c4 	st.w	sp[1476],r8
80003ed6:	e0 68 04 00 	mov	r8,1024
80003eda:	fb 48 05 d8 	st.w	sp[1496],r8
80003ede:	fb 48 05 cc 	st.w	sp[1484],r8
80003ee2:	30 08       	mov	r8,0
80003ee4:	fb 59 05 d2 	st.h	sp[1490],r9
80003ee8:	0e 9a       	mov	r10,r7
80003eea:	41 09       	lddsp	r9,sp[0x40]
80003eec:	fa c7 fa 3c 	sub	r7,sp,-1476
80003ef0:	fb 48 05 dc 	st.w	sp[1500],r8
80003ef4:	0a 9c       	mov	r12,r5
80003ef6:	0e 9b       	mov	r11,r7
80003ef8:	ca 4f       	rcall	80003e40 <_vfprintf_r>
80003efa:	50 bc       	stdsp	sp[0x2c],r12
80003efc:	c0 95       	brlt	80003f0e <_vfprintf_r+0xce>
80003efe:	0e 9b       	mov	r11,r7
80003f00:	0a 9c       	mov	r12,r5
80003f02:	e0 a0 16 15 	rcall	80006b2c <_fflush_r>
80003f06:	40 be       	lddsp	lr,sp[0x2c]
80003f08:	f9 be 01 ff 	movne	lr,-1
80003f0c:	50 be       	stdsp	sp[0x2c],lr
80003f0e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003f12:	ed b8 00 06 	bld	r8,0x6
80003f16:	e0 81 0f 1a 	brne	80005d4a <_vfprintf_r+0x1f0a>
80003f1a:	82 68       	ld.sh	r8,r1[0xc]
80003f1c:	a7 a8       	sbr	r8,0x6
80003f1e:	a2 68       	st.h	r1[0xc],r8
80003f20:	e0 8f 0f 15 	bral	80005d4a <_vfprintf_r+0x1f0a>
80003f24:	30 08       	mov	r8,0
80003f26:	fb 48 06 b4 	st.w	sp[1716],r8
80003f2a:	fb 48 06 90 	st.w	sp[1680],r8
80003f2e:	fb 48 06 8c 	st.w	sp[1676],r8
80003f32:	fb 48 06 b0 	st.w	sp[1712],r8
80003f36:	30 08       	mov	r8,0
80003f38:	30 09       	mov	r9,0
80003f3a:	50 a7       	stdsp	sp[0x28],r7
80003f3c:	50 78       	stdsp	sp[0x1c],r8
80003f3e:	fa c3 f9 e0 	sub	r3,sp,-1568
80003f42:	3f f8       	mov	r8,-1
80003f44:	50 59       	stdsp	sp[0x14],r9
80003f46:	fb 43 06 88 	st.w	sp[1672],r3
80003f4a:	fb 48 05 44 	st.w	sp[1348],r8
80003f4e:	12 9c       	mov	r12,r9
80003f50:	50 69       	stdsp	sp[0x18],r9
80003f52:	50 d9       	stdsp	sp[0x34],r9
80003f54:	50 e9       	stdsp	sp[0x38],r9
80003f56:	50 b9       	stdsp	sp[0x2c],r9
80003f58:	12 97       	mov	r7,r9
80003f5a:	0a 94       	mov	r4,r5
80003f5c:	40 a2       	lddsp	r2,sp[0x28]
80003f5e:	32 5a       	mov	r10,37
80003f60:	30 08       	mov	r8,0
80003f62:	c0 28       	rjmp	80003f66 <_vfprintf_r+0x126>
80003f64:	2f f2       	sub	r2,-1
80003f66:	05 89       	ld.ub	r9,r2[0x0]
80003f68:	f0 09 18 00 	cp.b	r9,r8
80003f6c:	5f 1b       	srne	r11
80003f6e:	f4 09 18 00 	cp.b	r9,r10
80003f72:	5f 19       	srne	r9
80003f74:	f3 eb 00 0b 	and	r11,r9,r11
80003f78:	f0 0b 18 00 	cp.b	r11,r8
80003f7c:	cf 41       	brne	80003f64 <_vfprintf_r+0x124>
80003f7e:	40 ab       	lddsp	r11,sp[0x28]
80003f80:	e4 0b 01 06 	sub	r6,r2,r11
80003f84:	c1 e0       	breq	80003fc0 <_vfprintf_r+0x180>
80003f86:	fa f8 06 90 	ld.w	r8,sp[1680]
80003f8a:	0c 08       	add	r8,r6
80003f8c:	87 0b       	st.w	r3[0x0],r11
80003f8e:	fb 48 06 90 	st.w	sp[1680],r8
80003f92:	87 16       	st.w	r3[0x4],r6
80003f94:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003f98:	2f f8       	sub	r8,-1
80003f9a:	fb 48 06 8c 	st.w	sp[1676],r8
80003f9e:	58 78       	cp.w	r8,7
80003fa0:	e0 89 00 04 	brgt	80003fa8 <_vfprintf_r+0x168>
80003fa4:	2f 83       	sub	r3,-8
80003fa6:	c0 a8       	rjmp	80003fba <_vfprintf_r+0x17a>
80003fa8:	fa ca f9 78 	sub	r10,sp,-1672
80003fac:	02 9b       	mov	r11,r1
80003fae:	08 9c       	mov	r12,r4
80003fb0:	c3 af       	rcall	80003e24 <__sprint_r>
80003fb2:	e0 81 0e c6 	brne	80005d3e <_vfprintf_r+0x1efe>
80003fb6:	fa c3 f9 e0 	sub	r3,sp,-1568
80003fba:	40 ba       	lddsp	r10,sp[0x2c]
80003fbc:	0c 0a       	add	r10,r6
80003fbe:	50 ba       	stdsp	sp[0x2c],r10
80003fc0:	05 89       	ld.ub	r9,r2[0x0]
80003fc2:	30 08       	mov	r8,0
80003fc4:	f0 09 18 00 	cp.b	r9,r8
80003fc8:	e0 80 0e aa 	breq	80005d1c <_vfprintf_r+0x1edc>
80003fcc:	30 09       	mov	r9,0
80003fce:	fb 68 06 bb 	st.b	sp[1723],r8
80003fd2:	0e 96       	mov	r6,r7
80003fd4:	e4 c8 ff ff 	sub	r8,r2,-1
80003fd8:	3f fe       	mov	lr,-1
80003fda:	50 93       	stdsp	sp[0x24],r3
80003fdc:	50 41       	stdsp	sp[0x10],r1
80003fde:	0e 93       	mov	r3,r7
80003fe0:	04 91       	mov	r1,r2
80003fe2:	50 89       	stdsp	sp[0x20],r9
80003fe4:	50 a8       	stdsp	sp[0x28],r8
80003fe6:	50 2e       	stdsp	sp[0x8],lr
80003fe8:	50 39       	stdsp	sp[0xc],r9
80003fea:	12 95       	mov	r5,r9
80003fec:	12 90       	mov	r0,r9
80003fee:	10 97       	mov	r7,r8
80003ff0:	08 92       	mov	r2,r4
80003ff2:	c0 78       	rjmp	80004000 <_vfprintf_r+0x1c0>
80003ff4:	3f fc       	mov	r12,-1
80003ff6:	08 97       	mov	r7,r4
80003ff8:	50 2c       	stdsp	sp[0x8],r12
80003ffa:	c0 38       	rjmp	80004000 <_vfprintf_r+0x1c0>
80003ffc:	30 0b       	mov	r11,0
80003ffe:	50 3b       	stdsp	sp[0xc],r11
80004000:	0f 38       	ld.ub	r8,r7++
80004002:	c0 28       	rjmp	80004006 <_vfprintf_r+0x1c6>
80004004:	12 90       	mov	r0,r9
80004006:	f0 c9 00 20 	sub	r9,r8,32
8000400a:	e0 49 00 58 	cp.w	r9,88
8000400e:	e0 8b 0a 30 	brhi	8000546e <_vfprintf_r+0x162e>
80004012:	fe ca ab ae 	sub	r10,pc,-21586
80004016:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000401a:	50 a7       	stdsp	sp[0x28],r7
8000401c:	50 80       	stdsp	sp[0x20],r0
8000401e:	0c 97       	mov	r7,r6
80004020:	04 94       	mov	r4,r2
80004022:	06 96       	mov	r6,r3
80004024:	02 92       	mov	r2,r1
80004026:	fe c9 a9 86 	sub	r9,pc,-22138
8000402a:	40 93       	lddsp	r3,sp[0x24]
8000402c:	10 90       	mov	r0,r8
8000402e:	40 41       	lddsp	r1,sp[0x10]
80004030:	50 d9       	stdsp	sp[0x34],r9
80004032:	e0 8f 08 8e 	bral	8000514e <_vfprintf_r+0x130e>
80004036:	30 08       	mov	r8,0
80004038:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000403c:	f0 09 18 00 	cp.b	r9,r8
80004040:	ce 01       	brne	80004000 <_vfprintf_r+0x1c0>
80004042:	32 08       	mov	r8,32
80004044:	c6 e8       	rjmp	80004120 <_vfprintf_r+0x2e0>
80004046:	a1 a5       	sbr	r5,0x0
80004048:	cd cb       	rjmp	80004000 <_vfprintf_r+0x1c0>
8000404a:	0f 89       	ld.ub	r9,r7[0x0]
8000404c:	f2 c8 00 30 	sub	r8,r9,48
80004050:	58 98       	cp.w	r8,9
80004052:	e0 8b 00 1d 	brhi	8000408c <_vfprintf_r+0x24c>
80004056:	ee c8 ff ff 	sub	r8,r7,-1
8000405a:	30 0b       	mov	r11,0
8000405c:	23 09       	sub	r9,48
8000405e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004062:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004066:	11 39       	ld.ub	r9,r8++
80004068:	f2 ca 00 30 	sub	r10,r9,48
8000406c:	58 9a       	cp.w	r10,9
8000406e:	fe 98 ff f7 	brls	8000405c <_vfprintf_r+0x21c>
80004072:	e0 49 00 24 	cp.w	r9,36
80004076:	cc 31       	brne	80003ffc <_vfprintf_r+0x1bc>
80004078:	e0 4b 00 20 	cp.w	r11,32
8000407c:	e0 89 0e 60 	brgt	80005d3c <_vfprintf_r+0x1efc>
80004080:	20 1b       	sub	r11,1
80004082:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004086:	12 3b       	cp.w	r11,r9
80004088:	c0 95       	brlt	8000409a <_vfprintf_r+0x25a>
8000408a:	c1 08       	rjmp	800040aa <_vfprintf_r+0x26a>
8000408c:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004090:	ec ca ff ff 	sub	r10,r6,-1
80004094:	12 36       	cp.w	r6,r9
80004096:	c1 f5       	brlt	800040d4 <_vfprintf_r+0x294>
80004098:	c2 68       	rjmp	800040e4 <_vfprintf_r+0x2a4>
8000409a:	fa ce f9 44 	sub	lr,sp,-1724
8000409e:	10 97       	mov	r7,r8
800040a0:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800040a4:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800040a8:	c3 58       	rjmp	80004112 <_vfprintf_r+0x2d2>
800040aa:	10 97       	mov	r7,r8
800040ac:	fa c8 f9 50 	sub	r8,sp,-1712
800040b0:	1a d8       	st.w	--sp,r8
800040b2:	fa c8 fa b8 	sub	r8,sp,-1352
800040b6:	1a d8       	st.w	--sp,r8
800040b8:	fa c8 fb b4 	sub	r8,sp,-1100
800040bc:	02 9a       	mov	r10,r1
800040be:	1a d8       	st.w	--sp,r8
800040c0:	04 9c       	mov	r12,r2
800040c2:	fa c8 f9 40 	sub	r8,sp,-1728
800040c6:	fa c9 ff b4 	sub	r9,sp,-76
800040ca:	fe b0 fd 25 	rcall	80003b14 <get_arg>
800040ce:	2f dd       	sub	sp,-12
800040d0:	78 00       	ld.w	r0,r12[0x0]
800040d2:	c2 08       	rjmp	80004112 <_vfprintf_r+0x2d2>
800040d4:	fa cc f9 44 	sub	r12,sp,-1724
800040d8:	14 96       	mov	r6,r10
800040da:	f8 03 00 38 	add	r8,r12,r3<<0x3
800040de:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800040e2:	c1 88       	rjmp	80004112 <_vfprintf_r+0x2d2>
800040e4:	41 08       	lddsp	r8,sp[0x40]
800040e6:	59 f9       	cp.w	r9,31
800040e8:	e0 89 00 11 	brgt	8000410a <_vfprintf_r+0x2ca>
800040ec:	f0 cb ff fc 	sub	r11,r8,-4
800040f0:	51 0b       	stdsp	sp[0x40],r11
800040f2:	70 00       	ld.w	r0,r8[0x0]
800040f4:	fa cb f9 44 	sub	r11,sp,-1724
800040f8:	f6 09 00 38 	add	r8,r11,r9<<0x3
800040fc:	f1 40 fd 88 	st.w	r8[-632],r0
80004100:	2f f9       	sub	r9,-1
80004102:	14 96       	mov	r6,r10
80004104:	fb 49 06 b4 	st.w	sp[1716],r9
80004108:	c0 58       	rjmp	80004112 <_vfprintf_r+0x2d2>
8000410a:	70 00       	ld.w	r0,r8[0x0]
8000410c:	14 96       	mov	r6,r10
8000410e:	2f c8       	sub	r8,-4
80004110:	51 08       	stdsp	sp[0x40],r8
80004112:	58 00       	cp.w	r0,0
80004114:	fe 94 ff 76 	brge	80004000 <_vfprintf_r+0x1c0>
80004118:	5c 30       	neg	r0
8000411a:	a3 a5       	sbr	r5,0x2
8000411c:	c7 2b       	rjmp	80004000 <_vfprintf_r+0x1c0>
8000411e:	32 b8       	mov	r8,43
80004120:	fb 68 06 bb 	st.b	sp[1723],r8
80004124:	c6 eb       	rjmp	80004000 <_vfprintf_r+0x1c0>
80004126:	0f 38       	ld.ub	r8,r7++
80004128:	e0 48 00 2a 	cp.w	r8,42
8000412c:	c0 30       	breq	80004132 <_vfprintf_r+0x2f2>
8000412e:	30 09       	mov	r9,0
80004130:	c7 98       	rjmp	80004222 <_vfprintf_r+0x3e2>
80004132:	0f 88       	ld.ub	r8,r7[0x0]
80004134:	f0 c9 00 30 	sub	r9,r8,48
80004138:	58 99       	cp.w	r9,9
8000413a:	e0 8b 00 1f 	brhi	80004178 <_vfprintf_r+0x338>
8000413e:	ee c4 ff ff 	sub	r4,r7,-1
80004142:	30 0b       	mov	r11,0
80004144:	23 08       	sub	r8,48
80004146:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000414a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000414e:	09 38       	ld.ub	r8,r4++
80004150:	f0 c9 00 30 	sub	r9,r8,48
80004154:	58 99       	cp.w	r9,9
80004156:	fe 98 ff f7 	brls	80004144 <_vfprintf_r+0x304>
8000415a:	e0 48 00 24 	cp.w	r8,36
8000415e:	fe 91 ff 4f 	brne	80003ffc <_vfprintf_r+0x1bc>
80004162:	e0 4b 00 20 	cp.w	r11,32
80004166:	e0 89 0d eb 	brgt	80005d3c <_vfprintf_r+0x1efc>
8000416a:	20 1b       	sub	r11,1
8000416c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004170:	10 3b       	cp.w	r11,r8
80004172:	c0 a5       	brlt	80004186 <_vfprintf_r+0x346>
80004174:	c1 18       	rjmp	80004196 <_vfprintf_r+0x356>
80004176:	d7 03       	nop
80004178:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000417c:	ec c9 ff ff 	sub	r9,r6,-1
80004180:	14 36       	cp.w	r6,r10
80004182:	c1 f5       	brlt	800041c0 <_vfprintf_r+0x380>
80004184:	c2 88       	rjmp	800041d4 <_vfprintf_r+0x394>
80004186:	fa ca f9 44 	sub	r10,sp,-1724
8000418a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000418e:	f6 fb fd 88 	ld.w	r11,r11[-632]
80004192:	50 2b       	stdsp	sp[0x8],r11
80004194:	c3 c8       	rjmp	8000420c <_vfprintf_r+0x3cc>
80004196:	fa c8 f9 50 	sub	r8,sp,-1712
8000419a:	1a d8       	st.w	--sp,r8
8000419c:	fa c8 fa b8 	sub	r8,sp,-1352
800041a0:	1a d8       	st.w	--sp,r8
800041a2:	fa c8 fb b4 	sub	r8,sp,-1100
800041a6:	02 9a       	mov	r10,r1
800041a8:	1a d8       	st.w	--sp,r8
800041aa:	04 9c       	mov	r12,r2
800041ac:	fa c8 f9 40 	sub	r8,sp,-1728
800041b0:	fa c9 ff b4 	sub	r9,sp,-76
800041b4:	fe b0 fc b0 	rcall	80003b14 <get_arg>
800041b8:	2f dd       	sub	sp,-12
800041ba:	78 0c       	ld.w	r12,r12[0x0]
800041bc:	50 2c       	stdsp	sp[0x8],r12
800041be:	c2 78       	rjmp	8000420c <_vfprintf_r+0x3cc>
800041c0:	12 96       	mov	r6,r9
800041c2:	0e 94       	mov	r4,r7
800041c4:	fa c9 f9 44 	sub	r9,sp,-1724
800041c8:	f2 03 00 38 	add	r8,r9,r3<<0x3
800041cc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800041d0:	50 28       	stdsp	sp[0x8],r8
800041d2:	c1 d8       	rjmp	8000420c <_vfprintf_r+0x3cc>
800041d4:	41 08       	lddsp	r8,sp[0x40]
800041d6:	59 fa       	cp.w	r10,31
800041d8:	e0 89 00 14 	brgt	80004200 <_vfprintf_r+0x3c0>
800041dc:	f0 cb ff fc 	sub	r11,r8,-4
800041e0:	70 08       	ld.w	r8,r8[0x0]
800041e2:	51 0b       	stdsp	sp[0x40],r11
800041e4:	50 28       	stdsp	sp[0x8],r8
800041e6:	fa c6 f9 44 	sub	r6,sp,-1724
800041ea:	40 2e       	lddsp	lr,sp[0x8]
800041ec:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800041f0:	f1 4e fd 88 	st.w	r8[-632],lr
800041f4:	2f fa       	sub	r10,-1
800041f6:	0e 94       	mov	r4,r7
800041f8:	fb 4a 06 b4 	st.w	sp[1716],r10
800041fc:	12 96       	mov	r6,r9
800041fe:	c0 78       	rjmp	8000420c <_vfprintf_r+0x3cc>
80004200:	70 0c       	ld.w	r12,r8[0x0]
80004202:	0e 94       	mov	r4,r7
80004204:	2f c8       	sub	r8,-4
80004206:	50 2c       	stdsp	sp[0x8],r12
80004208:	12 96       	mov	r6,r9
8000420a:	51 08       	stdsp	sp[0x40],r8
8000420c:	40 2b       	lddsp	r11,sp[0x8]
8000420e:	58 0b       	cp.w	r11,0
80004210:	fe 95 fe f2 	brlt	80003ff4 <_vfprintf_r+0x1b4>
80004214:	08 97       	mov	r7,r4
80004216:	cf 5a       	rjmp	80004000 <_vfprintf_r+0x1c0>
80004218:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000421c:	0f 38       	ld.ub	r8,r7++
8000421e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004222:	f0 ca 00 30 	sub	r10,r8,48
80004226:	58 9a       	cp.w	r10,9
80004228:	fe 98 ff f8 	brls	80004218 <_vfprintf_r+0x3d8>
8000422c:	3f fa       	mov	r10,-1
8000422e:	f2 0a 0c 49 	max	r9,r9,r10
80004232:	50 29       	stdsp	sp[0x8],r9
80004234:	ce 9a       	rjmp	80004006 <_vfprintf_r+0x1c6>
80004236:	a7 b5       	sbr	r5,0x7
80004238:	ce 4a       	rjmp	80004000 <_vfprintf_r+0x1c0>
8000423a:	30 09       	mov	r9,0
8000423c:	23 08       	sub	r8,48
8000423e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004242:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004246:	0f 38       	ld.ub	r8,r7++
80004248:	f0 ca 00 30 	sub	r10,r8,48
8000424c:	58 9a       	cp.w	r10,9
8000424e:	fe 98 ff f7 	brls	8000423c <_vfprintf_r+0x3fc>
80004252:	e0 48 00 24 	cp.w	r8,36
80004256:	fe 91 fe d7 	brne	80004004 <_vfprintf_r+0x1c4>
8000425a:	e0 49 00 20 	cp.w	r9,32
8000425e:	e0 89 0d 6f 	brgt	80005d3c <_vfprintf_r+0x1efc>
80004262:	f2 c3 00 01 	sub	r3,r9,1
80004266:	30 19       	mov	r9,1
80004268:	50 39       	stdsp	sp[0xc],r9
8000426a:	cc ba       	rjmp	80004000 <_vfprintf_r+0x1c0>
8000426c:	a3 b5       	sbr	r5,0x3
8000426e:	cc 9a       	rjmp	80004000 <_vfprintf_r+0x1c0>
80004270:	a7 a5       	sbr	r5,0x6
80004272:	cc 7a       	rjmp	80004000 <_vfprintf_r+0x1c0>
80004274:	0a 98       	mov	r8,r5
80004276:	a5 b5       	sbr	r5,0x5
80004278:	a5 a8       	sbr	r8,0x4
8000427a:	0f 89       	ld.ub	r9,r7[0x0]
8000427c:	36 ce       	mov	lr,108
8000427e:	fc 09 18 00 	cp.b	r9,lr
80004282:	f7 b7 00 ff 	subeq	r7,-1
80004286:	f0 05 17 10 	movne	r5,r8
8000428a:	cb ba       	rjmp	80004000 <_vfprintf_r+0x1c0>
8000428c:	a5 b5       	sbr	r5,0x5
8000428e:	cb 9a       	rjmp	80004000 <_vfprintf_r+0x1c0>
80004290:	50 a7       	stdsp	sp[0x28],r7
80004292:	50 80       	stdsp	sp[0x20],r0
80004294:	0c 97       	mov	r7,r6
80004296:	10 90       	mov	r0,r8
80004298:	06 96       	mov	r6,r3
8000429a:	04 94       	mov	r4,r2
8000429c:	40 93       	lddsp	r3,sp[0x24]
8000429e:	02 92       	mov	r2,r1
800042a0:	0e 99       	mov	r9,r7
800042a2:	40 41       	lddsp	r1,sp[0x10]
800042a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800042a8:	40 3c       	lddsp	r12,sp[0xc]
800042aa:	58 0c       	cp.w	r12,0
800042ac:	c1 d0       	breq	800042e6 <_vfprintf_r+0x4a6>
800042ae:	10 36       	cp.w	r6,r8
800042b0:	c0 64       	brge	800042bc <_vfprintf_r+0x47c>
800042b2:	fa cb f9 44 	sub	r11,sp,-1724
800042b6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800042ba:	c1 d8       	rjmp	800042f4 <_vfprintf_r+0x4b4>
800042bc:	fa c8 f9 50 	sub	r8,sp,-1712
800042c0:	1a d8       	st.w	--sp,r8
800042c2:	fa c8 fa b8 	sub	r8,sp,-1352
800042c6:	1a d8       	st.w	--sp,r8
800042c8:	fa c8 fb b4 	sub	r8,sp,-1100
800042cc:	1a d8       	st.w	--sp,r8
800042ce:	fa c8 f9 40 	sub	r8,sp,-1728
800042d2:	fa c9 ff b4 	sub	r9,sp,-76
800042d6:	04 9a       	mov	r10,r2
800042d8:	0c 9b       	mov	r11,r6
800042da:	08 9c       	mov	r12,r4
800042dc:	fe b0 fc 1c 	rcall	80003b14 <get_arg>
800042e0:	2f dd       	sub	sp,-12
800042e2:	19 b8       	ld.ub	r8,r12[0x3]
800042e4:	c2 28       	rjmp	80004328 <_vfprintf_r+0x4e8>
800042e6:	2f f7       	sub	r7,-1
800042e8:	10 39       	cp.w	r9,r8
800042ea:	c0 84       	brge	800042fa <_vfprintf_r+0x4ba>
800042ec:	fa ca f9 44 	sub	r10,sp,-1724
800042f0:	f4 06 00 36 	add	r6,r10,r6<<0x3
800042f4:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800042f8:	c1 88       	rjmp	80004328 <_vfprintf_r+0x4e8>
800042fa:	41 09       	lddsp	r9,sp[0x40]
800042fc:	59 f8       	cp.w	r8,31
800042fe:	e0 89 00 12 	brgt	80004322 <_vfprintf_r+0x4e2>
80004302:	f2 ca ff fc 	sub	r10,r9,-4
80004306:	51 0a       	stdsp	sp[0x40],r10
80004308:	72 09       	ld.w	r9,r9[0x0]
8000430a:	fa c6 f9 44 	sub	r6,sp,-1724
8000430e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004312:	2f f8       	sub	r8,-1
80004314:	f5 49 fd 88 	st.w	r10[-632],r9
80004318:	fb 48 06 b4 	st.w	sp[1716],r8
8000431c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004320:	c0 48       	rjmp	80004328 <_vfprintf_r+0x4e8>
80004322:	13 b8       	ld.ub	r8,r9[0x3]
80004324:	2f c9       	sub	r9,-4
80004326:	51 09       	stdsp	sp[0x40],r9
80004328:	fb 68 06 60 	st.b	sp[1632],r8
8000432c:	30 0e       	mov	lr,0
8000432e:	30 08       	mov	r8,0
80004330:	30 12       	mov	r2,1
80004332:	fb 68 06 bb 	st.b	sp[1723],r8
80004336:	50 2e       	stdsp	sp[0x8],lr
80004338:	e0 8f 08 ad 	bral	80005492 <_vfprintf_r+0x1652>
8000433c:	50 a7       	stdsp	sp[0x28],r7
8000433e:	50 80       	stdsp	sp[0x20],r0
80004340:	0c 97       	mov	r7,r6
80004342:	04 94       	mov	r4,r2
80004344:	06 96       	mov	r6,r3
80004346:	02 92       	mov	r2,r1
80004348:	40 93       	lddsp	r3,sp[0x24]
8000434a:	10 90       	mov	r0,r8
8000434c:	40 41       	lddsp	r1,sp[0x10]
8000434e:	a5 a5       	sbr	r5,0x4
80004350:	c0 a8       	rjmp	80004364 <_vfprintf_r+0x524>
80004352:	50 a7       	stdsp	sp[0x28],r7
80004354:	50 80       	stdsp	sp[0x20],r0
80004356:	0c 97       	mov	r7,r6
80004358:	04 94       	mov	r4,r2
8000435a:	06 96       	mov	r6,r3
8000435c:	02 92       	mov	r2,r1
8000435e:	40 93       	lddsp	r3,sp[0x24]
80004360:	10 90       	mov	r0,r8
80004362:	40 41       	lddsp	r1,sp[0x10]
80004364:	ed b5 00 05 	bld	r5,0x5
80004368:	c5 11       	brne	8000440a <_vfprintf_r+0x5ca>
8000436a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000436e:	40 3c       	lddsp	r12,sp[0xc]
80004370:	58 0c       	cp.w	r12,0
80004372:	c1 e0       	breq	800043ae <_vfprintf_r+0x56e>
80004374:	10 36       	cp.w	r6,r8
80004376:	c0 64       	brge	80004382 <_vfprintf_r+0x542>
80004378:	fa cb f9 44 	sub	r11,sp,-1724
8000437c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004380:	c2 08       	rjmp	800043c0 <_vfprintf_r+0x580>
80004382:	fa c8 f9 50 	sub	r8,sp,-1712
80004386:	1a d8       	st.w	--sp,r8
80004388:	fa c8 fa b8 	sub	r8,sp,-1352
8000438c:	0c 9b       	mov	r11,r6
8000438e:	1a d8       	st.w	--sp,r8
80004390:	fa c8 fb b4 	sub	r8,sp,-1100
80004394:	1a d8       	st.w	--sp,r8
80004396:	fa c9 ff b4 	sub	r9,sp,-76
8000439a:	fa c8 f9 40 	sub	r8,sp,-1728
8000439e:	04 9a       	mov	r10,r2
800043a0:	08 9c       	mov	r12,r4
800043a2:	fe b0 fb b9 	rcall	80003b14 <get_arg>
800043a6:	2f dd       	sub	sp,-12
800043a8:	78 1b       	ld.w	r11,r12[0x4]
800043aa:	78 09       	ld.w	r9,r12[0x0]
800043ac:	c2 b8       	rjmp	80004402 <_vfprintf_r+0x5c2>
800043ae:	ee ca ff ff 	sub	r10,r7,-1
800043b2:	10 37       	cp.w	r7,r8
800043b4:	c0 b4       	brge	800043ca <_vfprintf_r+0x58a>
800043b6:	fa c9 f9 44 	sub	r9,sp,-1724
800043ba:	14 97       	mov	r7,r10
800043bc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800043c0:	ec fb fd 8c 	ld.w	r11,r6[-628]
800043c4:	ec f9 fd 88 	ld.w	r9,r6[-632]
800043c8:	c1 d8       	rjmp	80004402 <_vfprintf_r+0x5c2>
800043ca:	41 09       	lddsp	r9,sp[0x40]
800043cc:	59 f8       	cp.w	r8,31
800043ce:	e0 89 00 14 	brgt	800043f6 <_vfprintf_r+0x5b6>
800043d2:	f2 cb ff f8 	sub	r11,r9,-8
800043d6:	51 0b       	stdsp	sp[0x40],r11
800043d8:	fa c6 f9 44 	sub	r6,sp,-1724
800043dc:	72 1b       	ld.w	r11,r9[0x4]
800043de:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800043e2:	72 09       	ld.w	r9,r9[0x0]
800043e4:	f9 4b fd 8c 	st.w	r12[-628],r11
800043e8:	f9 49 fd 88 	st.w	r12[-632],r9
800043ec:	2f f8       	sub	r8,-1
800043ee:	14 97       	mov	r7,r10
800043f0:	fb 48 06 b4 	st.w	sp[1716],r8
800043f4:	c0 78       	rjmp	80004402 <_vfprintf_r+0x5c2>
800043f6:	f2 c8 ff f8 	sub	r8,r9,-8
800043fa:	72 1b       	ld.w	r11,r9[0x4]
800043fc:	14 97       	mov	r7,r10
800043fe:	51 08       	stdsp	sp[0x40],r8
80004400:	72 09       	ld.w	r9,r9[0x0]
80004402:	16 98       	mov	r8,r11
80004404:	fa e9 00 00 	st.d	sp[0],r8
80004408:	ca e8       	rjmp	80004564 <_vfprintf_r+0x724>
8000440a:	ed b5 00 04 	bld	r5,0x4
8000440e:	c1 71       	brne	8000443c <_vfprintf_r+0x5fc>
80004410:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004414:	40 3e       	lddsp	lr,sp[0xc]
80004416:	58 0e       	cp.w	lr,0
80004418:	c0 80       	breq	80004428 <_vfprintf_r+0x5e8>
8000441a:	10 36       	cp.w	r6,r8
8000441c:	c6 94       	brge	800044ee <_vfprintf_r+0x6ae>
8000441e:	fa cc f9 44 	sub	r12,sp,-1724
80004422:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004426:	c8 28       	rjmp	8000452a <_vfprintf_r+0x6ea>
80004428:	ee ca ff ff 	sub	r10,r7,-1
8000442c:	10 37       	cp.w	r7,r8
8000442e:	e0 84 00 81 	brge	80004530 <_vfprintf_r+0x6f0>
80004432:	fa cb f9 44 	sub	r11,sp,-1724
80004436:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000443a:	c7 78       	rjmp	80004528 <_vfprintf_r+0x6e8>
8000443c:	ed b5 00 06 	bld	r5,0x6
80004440:	c4 b1       	brne	800044d6 <_vfprintf_r+0x696>
80004442:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004446:	40 3c       	lddsp	r12,sp[0xc]
80004448:	58 0c       	cp.w	r12,0
8000444a:	c1 d0       	breq	80004484 <_vfprintf_r+0x644>
8000444c:	10 36       	cp.w	r6,r8
8000444e:	c0 64       	brge	8000445a <_vfprintf_r+0x61a>
80004450:	fa cb f9 44 	sub	r11,sp,-1724
80004454:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004458:	c1 f8       	rjmp	80004496 <_vfprintf_r+0x656>
8000445a:	fa c8 f9 50 	sub	r8,sp,-1712
8000445e:	1a d8       	st.w	--sp,r8
80004460:	fa c8 fa b8 	sub	r8,sp,-1352
80004464:	1a d8       	st.w	--sp,r8
80004466:	fa c8 fb b4 	sub	r8,sp,-1100
8000446a:	1a d8       	st.w	--sp,r8
8000446c:	fa c8 f9 40 	sub	r8,sp,-1728
80004470:	fa c9 ff b4 	sub	r9,sp,-76
80004474:	04 9a       	mov	r10,r2
80004476:	0c 9b       	mov	r11,r6
80004478:	08 9c       	mov	r12,r4
8000447a:	fe b0 fb 4d 	rcall	80003b14 <get_arg>
8000447e:	2f dd       	sub	sp,-12
80004480:	98 18       	ld.sh	r8,r12[0x2]
80004482:	c2 68       	rjmp	800044ce <_vfprintf_r+0x68e>
80004484:	ee ca ff ff 	sub	r10,r7,-1
80004488:	10 37       	cp.w	r7,r8
8000448a:	c0 94       	brge	8000449c <_vfprintf_r+0x65c>
8000448c:	fa c9 f9 44 	sub	r9,sp,-1724
80004490:	14 97       	mov	r7,r10
80004492:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004496:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000449a:	c1 a8       	rjmp	800044ce <_vfprintf_r+0x68e>
8000449c:	41 09       	lddsp	r9,sp[0x40]
8000449e:	59 f8       	cp.w	r8,31
800044a0:	e0 89 00 13 	brgt	800044c6 <_vfprintf_r+0x686>
800044a4:	f2 cb ff fc 	sub	r11,r9,-4
800044a8:	51 0b       	stdsp	sp[0x40],r11
800044aa:	72 09       	ld.w	r9,r9[0x0]
800044ac:	fa c6 f9 44 	sub	r6,sp,-1724
800044b0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800044b4:	2f f8       	sub	r8,-1
800044b6:	f7 49 fd 88 	st.w	r11[-632],r9
800044ba:	fb 48 06 b4 	st.w	sp[1716],r8
800044be:	14 97       	mov	r7,r10
800044c0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800044c4:	c0 58       	rjmp	800044ce <_vfprintf_r+0x68e>
800044c6:	92 18       	ld.sh	r8,r9[0x2]
800044c8:	14 97       	mov	r7,r10
800044ca:	2f c9       	sub	r9,-4
800044cc:	51 09       	stdsp	sp[0x40],r9
800044ce:	50 18       	stdsp	sp[0x4],r8
800044d0:	bf 58       	asr	r8,0x1f
800044d2:	50 08       	stdsp	sp[0x0],r8
800044d4:	c4 88       	rjmp	80004564 <_vfprintf_r+0x724>
800044d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044da:	40 3c       	lddsp	r12,sp[0xc]
800044dc:	58 0c       	cp.w	r12,0
800044de:	c1 d0       	breq	80004518 <_vfprintf_r+0x6d8>
800044e0:	10 36       	cp.w	r6,r8
800044e2:	c0 64       	brge	800044ee <_vfprintf_r+0x6ae>
800044e4:	fa cb f9 44 	sub	r11,sp,-1724
800044e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044ec:	c1 f8       	rjmp	8000452a <_vfprintf_r+0x6ea>
800044ee:	fa c8 f9 50 	sub	r8,sp,-1712
800044f2:	1a d8       	st.w	--sp,r8
800044f4:	fa c8 fa b8 	sub	r8,sp,-1352
800044f8:	0c 9b       	mov	r11,r6
800044fa:	1a d8       	st.w	--sp,r8
800044fc:	fa c8 fb b4 	sub	r8,sp,-1100
80004500:	04 9a       	mov	r10,r2
80004502:	1a d8       	st.w	--sp,r8
80004504:	08 9c       	mov	r12,r4
80004506:	fa c8 f9 40 	sub	r8,sp,-1728
8000450a:	fa c9 ff b4 	sub	r9,sp,-76
8000450e:	fe b0 fb 03 	rcall	80003b14 <get_arg>
80004512:	2f dd       	sub	sp,-12
80004514:	78 0b       	ld.w	r11,r12[0x0]
80004516:	c2 48       	rjmp	8000455e <_vfprintf_r+0x71e>
80004518:	ee ca ff ff 	sub	r10,r7,-1
8000451c:	10 37       	cp.w	r7,r8
8000451e:	c0 94       	brge	80004530 <_vfprintf_r+0x6f0>
80004520:	fa c9 f9 44 	sub	r9,sp,-1724
80004524:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004528:	14 97       	mov	r7,r10
8000452a:	ec fb fd 88 	ld.w	r11,r6[-632]
8000452e:	c1 88       	rjmp	8000455e <_vfprintf_r+0x71e>
80004530:	41 09       	lddsp	r9,sp[0x40]
80004532:	59 f8       	cp.w	r8,31
80004534:	e0 89 00 11 	brgt	80004556 <_vfprintf_r+0x716>
80004538:	f2 cb ff fc 	sub	r11,r9,-4
8000453c:	51 0b       	stdsp	sp[0x40],r11
8000453e:	fa c6 f9 44 	sub	r6,sp,-1724
80004542:	72 0b       	ld.w	r11,r9[0x0]
80004544:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004548:	f3 4b fd 88 	st.w	r9[-632],r11
8000454c:	2f f8       	sub	r8,-1
8000454e:	14 97       	mov	r7,r10
80004550:	fb 48 06 b4 	st.w	sp[1716],r8
80004554:	c0 58       	rjmp	8000455e <_vfprintf_r+0x71e>
80004556:	72 0b       	ld.w	r11,r9[0x0]
80004558:	14 97       	mov	r7,r10
8000455a:	2f c9       	sub	r9,-4
8000455c:	51 09       	stdsp	sp[0x40],r9
8000455e:	50 1b       	stdsp	sp[0x4],r11
80004560:	bf 5b       	asr	r11,0x1f
80004562:	50 0b       	stdsp	sp[0x0],r11
80004564:	fa ea 00 00 	ld.d	r10,sp[0]
80004568:	58 0a       	cp.w	r10,0
8000456a:	5c 2b       	cpc	r11
8000456c:	c0 e4       	brge	80004588 <_vfprintf_r+0x748>
8000456e:	30 08       	mov	r8,0
80004570:	fa ea 00 00 	ld.d	r10,sp[0]
80004574:	30 09       	mov	r9,0
80004576:	f0 0a 01 0a 	sub	r10,r8,r10
8000457a:	f2 0b 01 4b 	sbc	r11,r9,r11
8000457e:	32 d8       	mov	r8,45
80004580:	fa eb 00 00 	st.d	sp[0],r10
80004584:	fb 68 06 bb 	st.b	sp[1723],r8
80004588:	30 18       	mov	r8,1
8000458a:	e0 8f 06 fa 	bral	8000537e <_vfprintf_r+0x153e>
8000458e:	50 a7       	stdsp	sp[0x28],r7
80004590:	50 80       	stdsp	sp[0x20],r0
80004592:	0c 97       	mov	r7,r6
80004594:	04 94       	mov	r4,r2
80004596:	06 96       	mov	r6,r3
80004598:	02 92       	mov	r2,r1
8000459a:	40 93       	lddsp	r3,sp[0x24]
8000459c:	10 90       	mov	r0,r8
8000459e:	40 41       	lddsp	r1,sp[0x10]
800045a0:	0e 99       	mov	r9,r7
800045a2:	ed b5 00 03 	bld	r5,0x3
800045a6:	c4 11       	brne	80004628 <_vfprintf_r+0x7e8>
800045a8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045ac:	40 3a       	lddsp	r10,sp[0xc]
800045ae:	58 0a       	cp.w	r10,0
800045b0:	c1 90       	breq	800045e2 <_vfprintf_r+0x7a2>
800045b2:	10 36       	cp.w	r6,r8
800045b4:	c6 45       	brlt	8000467c <_vfprintf_r+0x83c>
800045b6:	fa c8 f9 50 	sub	r8,sp,-1712
800045ba:	1a d8       	st.w	--sp,r8
800045bc:	fa c8 fa b8 	sub	r8,sp,-1352
800045c0:	1a d8       	st.w	--sp,r8
800045c2:	fa c8 fb b4 	sub	r8,sp,-1100
800045c6:	0c 9b       	mov	r11,r6
800045c8:	1a d8       	st.w	--sp,r8
800045ca:	04 9a       	mov	r10,r2
800045cc:	fa c8 f9 40 	sub	r8,sp,-1728
800045d0:	fa c9 ff b4 	sub	r9,sp,-76
800045d4:	08 9c       	mov	r12,r4
800045d6:	fe b0 fa 9f 	rcall	80003b14 <get_arg>
800045da:	2f dd       	sub	sp,-12
800045dc:	78 16       	ld.w	r6,r12[0x4]
800045de:	50 76       	stdsp	sp[0x1c],r6
800045e0:	c4 88       	rjmp	80004670 <_vfprintf_r+0x830>
800045e2:	2f f7       	sub	r7,-1
800045e4:	10 39       	cp.w	r9,r8
800045e6:	c0 c4       	brge	800045fe <_vfprintf_r+0x7be>
800045e8:	fa ce f9 44 	sub	lr,sp,-1724
800045ec:	fc 06 00 36 	add	r6,lr,r6<<0x3
800045f0:	ec fc fd 8c 	ld.w	r12,r6[-628]
800045f4:	50 7c       	stdsp	sp[0x1c],r12
800045f6:	ec f6 fd 88 	ld.w	r6,r6[-632]
800045fa:	50 56       	stdsp	sp[0x14],r6
800045fc:	c6 68       	rjmp	800046c8 <_vfprintf_r+0x888>
800045fe:	41 09       	lddsp	r9,sp[0x40]
80004600:	59 f8       	cp.w	r8,31
80004602:	e0 89 00 10 	brgt	80004622 <_vfprintf_r+0x7e2>
80004606:	f2 ca ff f8 	sub	r10,r9,-8
8000460a:	72 1b       	ld.w	r11,r9[0x4]
8000460c:	51 0a       	stdsp	sp[0x40],r10
8000460e:	72 09       	ld.w	r9,r9[0x0]
80004610:	fa ca f9 44 	sub	r10,sp,-1724
80004614:	50 7b       	stdsp	sp[0x1c],r11
80004616:	50 59       	stdsp	sp[0x14],r9
80004618:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000461c:	40 5b       	lddsp	r11,sp[0x14]
8000461e:	40 7a       	lddsp	r10,sp[0x1c]
80004620:	c4 78       	rjmp	800046ae <_vfprintf_r+0x86e>
80004622:	72 18       	ld.w	r8,r9[0x4]
80004624:	50 78       	stdsp	sp[0x1c],r8
80004626:	c4 c8       	rjmp	800046be <_vfprintf_r+0x87e>
80004628:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000462c:	40 3e       	lddsp	lr,sp[0xc]
8000462e:	58 0e       	cp.w	lr,0
80004630:	c2 30       	breq	80004676 <_vfprintf_r+0x836>
80004632:	10 36       	cp.w	r6,r8
80004634:	c0 94       	brge	80004646 <_vfprintf_r+0x806>
80004636:	fa cc f9 44 	sub	r12,sp,-1724
8000463a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000463e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004642:	50 7b       	stdsp	sp[0x1c],r11
80004644:	cd 9b       	rjmp	800045f6 <_vfprintf_r+0x7b6>
80004646:	fa c8 f9 50 	sub	r8,sp,-1712
8000464a:	1a d8       	st.w	--sp,r8
8000464c:	fa c8 fa b8 	sub	r8,sp,-1352
80004650:	04 9a       	mov	r10,r2
80004652:	1a d8       	st.w	--sp,r8
80004654:	fa c8 fb b4 	sub	r8,sp,-1100
80004658:	0c 9b       	mov	r11,r6
8000465a:	1a d8       	st.w	--sp,r8
8000465c:	08 9c       	mov	r12,r4
8000465e:	fa c8 f9 40 	sub	r8,sp,-1728
80004662:	fa c9 ff b4 	sub	r9,sp,-76
80004666:	fe b0 fa 57 	rcall	80003b14 <get_arg>
8000466a:	2f dd       	sub	sp,-12
8000466c:	78 1a       	ld.w	r10,r12[0x4]
8000466e:	50 7a       	stdsp	sp[0x1c],r10
80004670:	78 0c       	ld.w	r12,r12[0x0]
80004672:	50 5c       	stdsp	sp[0x14],r12
80004674:	c2 a8       	rjmp	800046c8 <_vfprintf_r+0x888>
80004676:	2f f7       	sub	r7,-1
80004678:	10 39       	cp.w	r9,r8
8000467a:	c0 94       	brge	8000468c <_vfprintf_r+0x84c>
8000467c:	fa c9 f9 44 	sub	r9,sp,-1724
80004680:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004684:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004688:	50 78       	stdsp	sp[0x1c],r8
8000468a:	cb 6b       	rjmp	800045f6 <_vfprintf_r+0x7b6>
8000468c:	41 09       	lddsp	r9,sp[0x40]
8000468e:	59 f8       	cp.w	r8,31
80004690:	e0 89 00 15 	brgt	800046ba <_vfprintf_r+0x87a>
80004694:	f2 ca ff f8 	sub	r10,r9,-8
80004698:	72 16       	ld.w	r6,r9[0x4]
8000469a:	72 09       	ld.w	r9,r9[0x0]
8000469c:	51 0a       	stdsp	sp[0x40],r10
8000469e:	50 59       	stdsp	sp[0x14],r9
800046a0:	fa ce f9 44 	sub	lr,sp,-1724
800046a4:	50 76       	stdsp	sp[0x1c],r6
800046a6:	fc 08 00 39 	add	r9,lr,r8<<0x3
800046aa:	40 5b       	lddsp	r11,sp[0x14]
800046ac:	0c 9a       	mov	r10,r6
800046ae:	f2 eb fd 88 	st.d	r9[-632],r10
800046b2:	2f f8       	sub	r8,-1
800046b4:	fb 48 06 b4 	st.w	sp[1716],r8
800046b8:	c0 88       	rjmp	800046c8 <_vfprintf_r+0x888>
800046ba:	72 1c       	ld.w	r12,r9[0x4]
800046bc:	50 7c       	stdsp	sp[0x1c],r12
800046be:	f2 c8 ff f8 	sub	r8,r9,-8
800046c2:	51 08       	stdsp	sp[0x40],r8
800046c4:	72 09       	ld.w	r9,r9[0x0]
800046c6:	50 59       	stdsp	sp[0x14],r9
800046c8:	40 5b       	lddsp	r11,sp[0x14]
800046ca:	40 7a       	lddsp	r10,sp[0x1c]
800046cc:	e0 a0 1c d6 	rcall	80008078 <__isinfd>
800046d0:	18 96       	mov	r6,r12
800046d2:	c1 70       	breq	80004700 <_vfprintf_r+0x8c0>
800046d4:	30 08       	mov	r8,0
800046d6:	30 09       	mov	r9,0
800046d8:	40 5b       	lddsp	r11,sp[0x14]
800046da:	40 7a       	lddsp	r10,sp[0x1c]
800046dc:	e0 a0 20 66 	rcall	800087a8 <__avr32_f64_cmp_lt>
800046e0:	c0 40       	breq	800046e8 <_vfprintf_r+0x8a8>
800046e2:	32 d8       	mov	r8,45
800046e4:	fb 68 06 bb 	st.b	sp[1723],r8
800046e8:	fe c8 b0 34 	sub	r8,pc,-20428
800046ec:	fe c6 b0 34 	sub	r6,pc,-20428
800046f0:	a7 d5       	cbr	r5,0x7
800046f2:	e0 40 00 47 	cp.w	r0,71
800046f6:	f0 06 17 a0 	movle	r6,r8
800046fa:	30 32       	mov	r2,3
800046fc:	e0 8f 06 ce 	bral	80005498 <_vfprintf_r+0x1658>
80004700:	40 5b       	lddsp	r11,sp[0x14]
80004702:	40 7a       	lddsp	r10,sp[0x1c]
80004704:	e0 a0 1c cf 	rcall	800080a2 <__isnand>
80004708:	c0 e0       	breq	80004724 <_vfprintf_r+0x8e4>
8000470a:	50 26       	stdsp	sp[0x8],r6
8000470c:	fe c8 b0 50 	sub	r8,pc,-20400
80004710:	fe c6 b0 50 	sub	r6,pc,-20400
80004714:	a7 d5       	cbr	r5,0x7
80004716:	e0 40 00 47 	cp.w	r0,71
8000471a:	f0 06 17 a0 	movle	r6,r8
8000471e:	30 32       	mov	r2,3
80004720:	e0 8f 06 c2 	bral	800054a4 <_vfprintf_r+0x1664>
80004724:	40 2a       	lddsp	r10,sp[0x8]
80004726:	5b fa       	cp.w	r10,-1
80004728:	c0 41       	brne	80004730 <_vfprintf_r+0x8f0>
8000472a:	30 69       	mov	r9,6
8000472c:	50 29       	stdsp	sp[0x8],r9
8000472e:	c1 18       	rjmp	80004750 <_vfprintf_r+0x910>
80004730:	e0 40 00 47 	cp.w	r0,71
80004734:	5f 09       	sreq	r9
80004736:	e0 40 00 67 	cp.w	r0,103
8000473a:	5f 08       	sreq	r8
8000473c:	f3 e8 10 08 	or	r8,r9,r8
80004740:	f8 08 18 00 	cp.b	r8,r12
80004744:	c0 60       	breq	80004750 <_vfprintf_r+0x910>
80004746:	40 28       	lddsp	r8,sp[0x8]
80004748:	58 08       	cp.w	r8,0
8000474a:	f9 b8 00 01 	moveq	r8,1
8000474e:	50 28       	stdsp	sp[0x8],r8
80004750:	40 78       	lddsp	r8,sp[0x1c]
80004752:	40 59       	lddsp	r9,sp[0x14]
80004754:	fa e9 06 94 	st.d	sp[1684],r8
80004758:	a9 a5       	sbr	r5,0x8
8000475a:	fa f8 06 94 	ld.w	r8,sp[1684]
8000475e:	58 08       	cp.w	r8,0
80004760:	c0 65       	brlt	8000476c <_vfprintf_r+0x92c>
80004762:	40 5e       	lddsp	lr,sp[0x14]
80004764:	30 0c       	mov	r12,0
80004766:	50 6e       	stdsp	sp[0x18],lr
80004768:	50 9c       	stdsp	sp[0x24],r12
8000476a:	c0 78       	rjmp	80004778 <_vfprintf_r+0x938>
8000476c:	40 5b       	lddsp	r11,sp[0x14]
8000476e:	32 da       	mov	r10,45
80004770:	ee 1b 80 00 	eorh	r11,0x8000
80004774:	50 9a       	stdsp	sp[0x24],r10
80004776:	50 6b       	stdsp	sp[0x18],r11
80004778:	e0 40 00 46 	cp.w	r0,70
8000477c:	5f 09       	sreq	r9
8000477e:	e0 40 00 66 	cp.w	r0,102
80004782:	5f 08       	sreq	r8
80004784:	f3 e8 10 08 	or	r8,r9,r8
80004788:	50 48       	stdsp	sp[0x10],r8
8000478a:	c0 40       	breq	80004792 <_vfprintf_r+0x952>
8000478c:	40 22       	lddsp	r2,sp[0x8]
8000478e:	30 39       	mov	r9,3
80004790:	c1 08       	rjmp	800047b0 <_vfprintf_r+0x970>
80004792:	e0 40 00 45 	cp.w	r0,69
80004796:	5f 09       	sreq	r9
80004798:	e0 40 00 65 	cp.w	r0,101
8000479c:	5f 08       	sreq	r8
8000479e:	40 22       	lddsp	r2,sp[0x8]
800047a0:	10 49       	or	r9,r8
800047a2:	2f f2       	sub	r2,-1
800047a4:	40 46       	lddsp	r6,sp[0x10]
800047a6:	ec 09 18 00 	cp.b	r9,r6
800047aa:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800047ae:	30 29       	mov	r9,2
800047b0:	fa c8 f9 5c 	sub	r8,sp,-1700
800047b4:	1a d8       	st.w	--sp,r8
800047b6:	fa c8 f9 54 	sub	r8,sp,-1708
800047ba:	1a d8       	st.w	--sp,r8
800047bc:	fa c8 f9 4c 	sub	r8,sp,-1716
800047c0:	08 9c       	mov	r12,r4
800047c2:	1a d8       	st.w	--sp,r8
800047c4:	04 98       	mov	r8,r2
800047c6:	40 9b       	lddsp	r11,sp[0x24]
800047c8:	40 aa       	lddsp	r10,sp[0x28]
800047ca:	e0 a0 0b c3 	rcall	80005f50 <_dtoa_r>
800047ce:	e0 40 00 47 	cp.w	r0,71
800047d2:	5f 19       	srne	r9
800047d4:	e0 40 00 67 	cp.w	r0,103
800047d8:	5f 18       	srne	r8
800047da:	18 96       	mov	r6,r12
800047dc:	2f dd       	sub	sp,-12
800047de:	f3 e8 00 08 	and	r8,r9,r8
800047e2:	c0 41       	brne	800047ea <_vfprintf_r+0x9aa>
800047e4:	ed b5 00 00 	bld	r5,0x0
800047e8:	c3 01       	brne	80004848 <_vfprintf_r+0xa08>
800047ea:	ec 02 00 0e 	add	lr,r6,r2
800047ee:	50 3e       	stdsp	sp[0xc],lr
800047f0:	40 4c       	lddsp	r12,sp[0x10]
800047f2:	58 0c       	cp.w	r12,0
800047f4:	c1 50       	breq	8000481e <_vfprintf_r+0x9de>
800047f6:	0d 89       	ld.ub	r9,r6[0x0]
800047f8:	33 08       	mov	r8,48
800047fa:	f0 09 18 00 	cp.b	r9,r8
800047fe:	c0 b1       	brne	80004814 <_vfprintf_r+0x9d4>
80004800:	30 08       	mov	r8,0
80004802:	30 09       	mov	r9,0
80004804:	40 6b       	lddsp	r11,sp[0x18]
80004806:	40 7a       	lddsp	r10,sp[0x1c]
80004808:	e0 a0 1f 89 	rcall	8000871a <__avr32_f64_cmp_eq>
8000480c:	fb b2 00 01 	rsubeq	r2,1
80004810:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004814:	40 3b       	lddsp	r11,sp[0xc]
80004816:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000481a:	10 0b       	add	r11,r8
8000481c:	50 3b       	stdsp	sp[0xc],r11
8000481e:	40 6b       	lddsp	r11,sp[0x18]
80004820:	30 08       	mov	r8,0
80004822:	30 09       	mov	r9,0
80004824:	40 7a       	lddsp	r10,sp[0x1c]
80004826:	e0 a0 1f 7a 	rcall	8000871a <__avr32_f64_cmp_eq>
8000482a:	c0 90       	breq	8000483c <_vfprintf_r+0x9fc>
8000482c:	40 3a       	lddsp	r10,sp[0xc]
8000482e:	fb 4a 06 a4 	st.w	sp[1700],r10
80004832:	c0 58       	rjmp	8000483c <_vfprintf_r+0x9fc>
80004834:	10 c9       	st.b	r8++,r9
80004836:	fb 48 06 a4 	st.w	sp[1700],r8
8000483a:	c0 28       	rjmp	8000483e <_vfprintf_r+0x9fe>
8000483c:	33 09       	mov	r9,48
8000483e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004842:	40 3e       	lddsp	lr,sp[0xc]
80004844:	1c 38       	cp.w	r8,lr
80004846:	cf 73       	brcs	80004834 <_vfprintf_r+0x9f4>
80004848:	e0 40 00 47 	cp.w	r0,71
8000484c:	5f 09       	sreq	r9
8000484e:	e0 40 00 67 	cp.w	r0,103
80004852:	5f 08       	sreq	r8
80004854:	f3 e8 10 08 	or	r8,r9,r8
80004858:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000485c:	0c 19       	sub	r9,r6
8000485e:	50 69       	stdsp	sp[0x18],r9
80004860:	58 08       	cp.w	r8,0
80004862:	c0 b0       	breq	80004878 <_vfprintf_r+0xa38>
80004864:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004868:	5b d8       	cp.w	r8,-3
8000486a:	c0 55       	brlt	80004874 <_vfprintf_r+0xa34>
8000486c:	40 2c       	lddsp	r12,sp[0x8]
8000486e:	18 38       	cp.w	r8,r12
80004870:	e0 8a 00 6a 	brle	80004944 <_vfprintf_r+0xb04>
80004874:	20 20       	sub	r0,2
80004876:	c0 58       	rjmp	80004880 <_vfprintf_r+0xa40>
80004878:	e0 40 00 65 	cp.w	r0,101
8000487c:	e0 89 00 46 	brgt	80004908 <_vfprintf_r+0xac8>
80004880:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004884:	fb 60 06 9c 	st.b	sp[1692],r0
80004888:	20 1b       	sub	r11,1
8000488a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000488e:	c0 47       	brpl	80004896 <_vfprintf_r+0xa56>
80004890:	5c 3b       	neg	r11
80004892:	32 d8       	mov	r8,45
80004894:	c0 28       	rjmp	80004898 <_vfprintf_r+0xa58>
80004896:	32 b8       	mov	r8,43
80004898:	fb 68 06 9d 	st.b	sp[1693],r8
8000489c:	58 9b       	cp.w	r11,9
8000489e:	e0 8a 00 1d 	brle	800048d8 <_vfprintf_r+0xa98>
800048a2:	fa c9 fa 35 	sub	r9,sp,-1483
800048a6:	30 aa       	mov	r10,10
800048a8:	12 98       	mov	r8,r9
800048aa:	0e 9c       	mov	r12,r7
800048ac:	0c 92       	mov	r2,r6
800048ae:	f6 0a 0c 06 	divs	r6,r11,r10
800048b2:	0e 9b       	mov	r11,r7
800048b4:	2d 0b       	sub	r11,-48
800048b6:	10 fb       	st.b	--r8,r11
800048b8:	0c 9b       	mov	r11,r6
800048ba:	58 96       	cp.w	r6,9
800048bc:	fe 99 ff f9 	brgt	800048ae <_vfprintf_r+0xa6e>
800048c0:	2d 0b       	sub	r11,-48
800048c2:	18 97       	mov	r7,r12
800048c4:	04 96       	mov	r6,r2
800048c6:	10 fb       	st.b	--r8,r11
800048c8:	fa ca f9 62 	sub	r10,sp,-1694
800048cc:	c0 38       	rjmp	800048d2 <_vfprintf_r+0xa92>
800048ce:	11 3b       	ld.ub	r11,r8++
800048d0:	14 cb       	st.b	r10++,r11
800048d2:	12 38       	cp.w	r8,r9
800048d4:	cf d3       	brcs	800048ce <_vfprintf_r+0xa8e>
800048d6:	c0 98       	rjmp	800048e8 <_vfprintf_r+0xaa8>
800048d8:	2d 0b       	sub	r11,-48
800048da:	33 08       	mov	r8,48
800048dc:	fb 6b 06 9f 	st.b	sp[1695],r11
800048e0:	fb 68 06 9e 	st.b	sp[1694],r8
800048e4:	fa ca f9 60 	sub	r10,sp,-1696
800048e8:	fa c8 f9 64 	sub	r8,sp,-1692
800048ec:	f4 08 01 08 	sub	r8,r10,r8
800048f0:	50 e8       	stdsp	sp[0x38],r8
800048f2:	10 92       	mov	r2,r8
800048f4:	40 6b       	lddsp	r11,sp[0x18]
800048f6:	16 02       	add	r2,r11
800048f8:	58 1b       	cp.w	r11,1
800048fa:	e0 89 00 05 	brgt	80004904 <_vfprintf_r+0xac4>
800048fe:	ed b5 00 00 	bld	r5,0x0
80004902:	c3 51       	brne	8000496c <_vfprintf_r+0xb2c>
80004904:	2f f2       	sub	r2,-1
80004906:	c3 38       	rjmp	8000496c <_vfprintf_r+0xb2c>
80004908:	e0 40 00 66 	cp.w	r0,102
8000490c:	c1 c1       	brne	80004944 <_vfprintf_r+0xb04>
8000490e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004912:	58 02       	cp.w	r2,0
80004914:	e0 8a 00 0c 	brle	8000492c <_vfprintf_r+0xaec>
80004918:	40 2a       	lddsp	r10,sp[0x8]
8000491a:	58 0a       	cp.w	r10,0
8000491c:	c0 41       	brne	80004924 <_vfprintf_r+0xae4>
8000491e:	ed b5 00 00 	bld	r5,0x0
80004922:	c2 51       	brne	8000496c <_vfprintf_r+0xb2c>
80004924:	2f f2       	sub	r2,-1
80004926:	40 29       	lddsp	r9,sp[0x8]
80004928:	12 02       	add	r2,r9
8000492a:	c0 b8       	rjmp	80004940 <_vfprintf_r+0xb00>
8000492c:	40 28       	lddsp	r8,sp[0x8]
8000492e:	58 08       	cp.w	r8,0
80004930:	c0 61       	brne	8000493c <_vfprintf_r+0xafc>
80004932:	ed b5 00 00 	bld	r5,0x0
80004936:	c0 30       	breq	8000493c <_vfprintf_r+0xafc>
80004938:	30 12       	mov	r2,1
8000493a:	c1 98       	rjmp	8000496c <_vfprintf_r+0xb2c>
8000493c:	40 22       	lddsp	r2,sp[0x8]
8000493e:	2f e2       	sub	r2,-2
80004940:	36 60       	mov	r0,102
80004942:	c1 58       	rjmp	8000496c <_vfprintf_r+0xb2c>
80004944:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004948:	40 6e       	lddsp	lr,sp[0x18]
8000494a:	1c 32       	cp.w	r2,lr
8000494c:	c0 65       	brlt	80004958 <_vfprintf_r+0xb18>
8000494e:	ed b5 00 00 	bld	r5,0x0
80004952:	f7 b2 00 ff 	subeq	r2,-1
80004956:	c0 a8       	rjmp	8000496a <_vfprintf_r+0xb2a>
80004958:	e4 08 11 02 	rsub	r8,r2,2
8000495c:	40 6c       	lddsp	r12,sp[0x18]
8000495e:	58 02       	cp.w	r2,0
80004960:	f0 02 17 a0 	movle	r2,r8
80004964:	f9 b2 09 01 	movgt	r2,1
80004968:	18 02       	add	r2,r12
8000496a:	36 70       	mov	r0,103
8000496c:	40 9b       	lddsp	r11,sp[0x24]
8000496e:	58 0b       	cp.w	r11,0
80004970:	e0 80 05 94 	breq	80005498 <_vfprintf_r+0x1658>
80004974:	32 d8       	mov	r8,45
80004976:	fb 68 06 bb 	st.b	sp[1723],r8
8000497a:	e0 8f 05 93 	bral	800054a0 <_vfprintf_r+0x1660>
8000497e:	50 a7       	stdsp	sp[0x28],r7
80004980:	04 94       	mov	r4,r2
80004982:	0c 97       	mov	r7,r6
80004984:	02 92       	mov	r2,r1
80004986:	06 96       	mov	r6,r3
80004988:	40 41       	lddsp	r1,sp[0x10]
8000498a:	40 93       	lddsp	r3,sp[0x24]
8000498c:	0e 99       	mov	r9,r7
8000498e:	ed b5 00 05 	bld	r5,0x5
80004992:	c4 81       	brne	80004a22 <_vfprintf_r+0xbe2>
80004994:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004998:	40 3e       	lddsp	lr,sp[0xc]
8000499a:	58 0e       	cp.w	lr,0
8000499c:	c1 d0       	breq	800049d6 <_vfprintf_r+0xb96>
8000499e:	10 36       	cp.w	r6,r8
800049a0:	c0 64       	brge	800049ac <_vfprintf_r+0xb6c>
800049a2:	fa cc f9 44 	sub	r12,sp,-1724
800049a6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800049aa:	c1 d8       	rjmp	800049e4 <_vfprintf_r+0xba4>
800049ac:	fa c8 f9 50 	sub	r8,sp,-1712
800049b0:	1a d8       	st.w	--sp,r8
800049b2:	fa c8 fa b8 	sub	r8,sp,-1352
800049b6:	04 9a       	mov	r10,r2
800049b8:	1a d8       	st.w	--sp,r8
800049ba:	fa c8 fb b4 	sub	r8,sp,-1100
800049be:	0c 9b       	mov	r11,r6
800049c0:	1a d8       	st.w	--sp,r8
800049c2:	08 9c       	mov	r12,r4
800049c4:	fa c8 f9 40 	sub	r8,sp,-1728
800049c8:	fa c9 ff b4 	sub	r9,sp,-76
800049cc:	fe b0 f8 a4 	rcall	80003b14 <get_arg>
800049d0:	2f dd       	sub	sp,-12
800049d2:	78 0a       	ld.w	r10,r12[0x0]
800049d4:	c2 08       	rjmp	80004a14 <_vfprintf_r+0xbd4>
800049d6:	2f f7       	sub	r7,-1
800049d8:	10 39       	cp.w	r9,r8
800049da:	c0 84       	brge	800049ea <_vfprintf_r+0xbaa>
800049dc:	fa cb f9 44 	sub	r11,sp,-1724
800049e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049e4:	ec fa fd 88 	ld.w	r10,r6[-632]
800049e8:	c1 68       	rjmp	80004a14 <_vfprintf_r+0xbd4>
800049ea:	41 09       	lddsp	r9,sp[0x40]
800049ec:	59 f8       	cp.w	r8,31
800049ee:	e0 89 00 10 	brgt	80004a0e <_vfprintf_r+0xbce>
800049f2:	f2 ca ff fc 	sub	r10,r9,-4
800049f6:	51 0a       	stdsp	sp[0x40],r10
800049f8:	fa c6 f9 44 	sub	r6,sp,-1724
800049fc:	72 0a       	ld.w	r10,r9[0x0]
800049fe:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a02:	f3 4a fd 88 	st.w	r9[-632],r10
80004a06:	2f f8       	sub	r8,-1
80004a08:	fb 48 06 b4 	st.w	sp[1716],r8
80004a0c:	c0 48       	rjmp	80004a14 <_vfprintf_r+0xbd4>
80004a0e:	72 0a       	ld.w	r10,r9[0x0]
80004a10:	2f c9       	sub	r9,-4
80004a12:	51 09       	stdsp	sp[0x40],r9
80004a14:	40 be       	lddsp	lr,sp[0x2c]
80004a16:	1c 98       	mov	r8,lr
80004a18:	95 1e       	st.w	r10[0x4],lr
80004a1a:	bf 58       	asr	r8,0x1f
80004a1c:	95 08       	st.w	r10[0x0],r8
80004a1e:	fe 9f fa 9f 	bral	80003f5c <_vfprintf_r+0x11c>
80004a22:	ed b5 00 04 	bld	r5,0x4
80004a26:	c4 80       	breq	80004ab6 <_vfprintf_r+0xc76>
80004a28:	e2 15 00 40 	andl	r5,0x40,COH
80004a2c:	c4 50       	breq	80004ab6 <_vfprintf_r+0xc76>
80004a2e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a32:	40 3c       	lddsp	r12,sp[0xc]
80004a34:	58 0c       	cp.w	r12,0
80004a36:	c1 d0       	breq	80004a70 <_vfprintf_r+0xc30>
80004a38:	10 36       	cp.w	r6,r8
80004a3a:	c0 64       	brge	80004a46 <_vfprintf_r+0xc06>
80004a3c:	fa cb f9 44 	sub	r11,sp,-1724
80004a40:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a44:	c1 d8       	rjmp	80004a7e <_vfprintf_r+0xc3e>
80004a46:	fa c8 f9 50 	sub	r8,sp,-1712
80004a4a:	1a d8       	st.w	--sp,r8
80004a4c:	fa c8 fa b8 	sub	r8,sp,-1352
80004a50:	04 9a       	mov	r10,r2
80004a52:	1a d8       	st.w	--sp,r8
80004a54:	fa c8 fb b4 	sub	r8,sp,-1100
80004a58:	0c 9b       	mov	r11,r6
80004a5a:	1a d8       	st.w	--sp,r8
80004a5c:	08 9c       	mov	r12,r4
80004a5e:	fa c8 f9 40 	sub	r8,sp,-1728
80004a62:	fa c9 ff b4 	sub	r9,sp,-76
80004a66:	fe b0 f8 57 	rcall	80003b14 <get_arg>
80004a6a:	2f dd       	sub	sp,-12
80004a6c:	78 0a       	ld.w	r10,r12[0x0]
80004a6e:	c2 08       	rjmp	80004aae <_vfprintf_r+0xc6e>
80004a70:	2f f7       	sub	r7,-1
80004a72:	10 39       	cp.w	r9,r8
80004a74:	c0 84       	brge	80004a84 <_vfprintf_r+0xc44>
80004a76:	fa ca f9 44 	sub	r10,sp,-1724
80004a7a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a7e:	ec fa fd 88 	ld.w	r10,r6[-632]
80004a82:	c1 68       	rjmp	80004aae <_vfprintf_r+0xc6e>
80004a84:	41 09       	lddsp	r9,sp[0x40]
80004a86:	59 f8       	cp.w	r8,31
80004a88:	e0 89 00 10 	brgt	80004aa8 <_vfprintf_r+0xc68>
80004a8c:	f2 ca ff fc 	sub	r10,r9,-4
80004a90:	51 0a       	stdsp	sp[0x40],r10
80004a92:	fa c6 f9 44 	sub	r6,sp,-1724
80004a96:	72 0a       	ld.w	r10,r9[0x0]
80004a98:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a9c:	f3 4a fd 88 	st.w	r9[-632],r10
80004aa0:	2f f8       	sub	r8,-1
80004aa2:	fb 48 06 b4 	st.w	sp[1716],r8
80004aa6:	c0 48       	rjmp	80004aae <_vfprintf_r+0xc6e>
80004aa8:	72 0a       	ld.w	r10,r9[0x0]
80004aaa:	2f c9       	sub	r9,-4
80004aac:	51 09       	stdsp	sp[0x40],r9
80004aae:	40 be       	lddsp	lr,sp[0x2c]
80004ab0:	b4 0e       	st.h	r10[0x0],lr
80004ab2:	fe 9f fa 55 	bral	80003f5c <_vfprintf_r+0x11c>
80004ab6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004aba:	40 3c       	lddsp	r12,sp[0xc]
80004abc:	58 0c       	cp.w	r12,0
80004abe:	c1 d0       	breq	80004af8 <_vfprintf_r+0xcb8>
80004ac0:	10 36       	cp.w	r6,r8
80004ac2:	c0 64       	brge	80004ace <_vfprintf_r+0xc8e>
80004ac4:	fa cb f9 44 	sub	r11,sp,-1724
80004ac8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004acc:	c1 d8       	rjmp	80004b06 <_vfprintf_r+0xcc6>
80004ace:	fa c8 f9 50 	sub	r8,sp,-1712
80004ad2:	1a d8       	st.w	--sp,r8
80004ad4:	fa c8 fa b8 	sub	r8,sp,-1352
80004ad8:	04 9a       	mov	r10,r2
80004ada:	1a d8       	st.w	--sp,r8
80004adc:	fa c8 fb b4 	sub	r8,sp,-1100
80004ae0:	0c 9b       	mov	r11,r6
80004ae2:	1a d8       	st.w	--sp,r8
80004ae4:	08 9c       	mov	r12,r4
80004ae6:	fa c8 f9 40 	sub	r8,sp,-1728
80004aea:	fa c9 ff b4 	sub	r9,sp,-76
80004aee:	fe b0 f8 13 	rcall	80003b14 <get_arg>
80004af2:	2f dd       	sub	sp,-12
80004af4:	78 0a       	ld.w	r10,r12[0x0]
80004af6:	c2 08       	rjmp	80004b36 <_vfprintf_r+0xcf6>
80004af8:	2f f7       	sub	r7,-1
80004afa:	10 39       	cp.w	r9,r8
80004afc:	c0 84       	brge	80004b0c <_vfprintf_r+0xccc>
80004afe:	fa ca f9 44 	sub	r10,sp,-1724
80004b02:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004b06:	ec fa fd 88 	ld.w	r10,r6[-632]
80004b0a:	c1 68       	rjmp	80004b36 <_vfprintf_r+0xcf6>
80004b0c:	41 09       	lddsp	r9,sp[0x40]
80004b0e:	59 f8       	cp.w	r8,31
80004b10:	e0 89 00 10 	brgt	80004b30 <_vfprintf_r+0xcf0>
80004b14:	f2 ca ff fc 	sub	r10,r9,-4
80004b18:	51 0a       	stdsp	sp[0x40],r10
80004b1a:	fa c6 f9 44 	sub	r6,sp,-1724
80004b1e:	72 0a       	ld.w	r10,r9[0x0]
80004b20:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b24:	f3 4a fd 88 	st.w	r9[-632],r10
80004b28:	2f f8       	sub	r8,-1
80004b2a:	fb 48 06 b4 	st.w	sp[1716],r8
80004b2e:	c0 48       	rjmp	80004b36 <_vfprintf_r+0xcf6>
80004b30:	72 0a       	ld.w	r10,r9[0x0]
80004b32:	2f c9       	sub	r9,-4
80004b34:	51 09       	stdsp	sp[0x40],r9
80004b36:	40 be       	lddsp	lr,sp[0x2c]
80004b38:	95 0e       	st.w	r10[0x0],lr
80004b3a:	fe 9f fa 11 	bral	80003f5c <_vfprintf_r+0x11c>
80004b3e:	50 a7       	stdsp	sp[0x28],r7
80004b40:	50 80       	stdsp	sp[0x20],r0
80004b42:	0c 97       	mov	r7,r6
80004b44:	04 94       	mov	r4,r2
80004b46:	06 96       	mov	r6,r3
80004b48:	02 92       	mov	r2,r1
80004b4a:	40 93       	lddsp	r3,sp[0x24]
80004b4c:	10 90       	mov	r0,r8
80004b4e:	40 41       	lddsp	r1,sp[0x10]
80004b50:	a5 a5       	sbr	r5,0x4
80004b52:	c0 a8       	rjmp	80004b66 <_vfprintf_r+0xd26>
80004b54:	50 a7       	stdsp	sp[0x28],r7
80004b56:	50 80       	stdsp	sp[0x20],r0
80004b58:	0c 97       	mov	r7,r6
80004b5a:	04 94       	mov	r4,r2
80004b5c:	06 96       	mov	r6,r3
80004b5e:	02 92       	mov	r2,r1
80004b60:	40 93       	lddsp	r3,sp[0x24]
80004b62:	10 90       	mov	r0,r8
80004b64:	40 41       	lddsp	r1,sp[0x10]
80004b66:	ed b5 00 05 	bld	r5,0x5
80004b6a:	c5 d1       	brne	80004c24 <_vfprintf_r+0xde4>
80004b6c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b70:	40 3c       	lddsp	r12,sp[0xc]
80004b72:	58 0c       	cp.w	r12,0
80004b74:	c2 60       	breq	80004bc0 <_vfprintf_r+0xd80>
80004b76:	10 36       	cp.w	r6,r8
80004b78:	c0 a4       	brge	80004b8c <_vfprintf_r+0xd4c>
80004b7a:	fa cb f9 44 	sub	r11,sp,-1724
80004b7e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b82:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004b86:	fa e9 00 00 	st.d	sp[0],r8
80004b8a:	c1 88       	rjmp	80004bba <_vfprintf_r+0xd7a>
80004b8c:	fa c8 f9 50 	sub	r8,sp,-1712
80004b90:	1a d8       	st.w	--sp,r8
80004b92:	fa c8 fa b8 	sub	r8,sp,-1352
80004b96:	04 9a       	mov	r10,r2
80004b98:	1a d8       	st.w	--sp,r8
80004b9a:	0c 9b       	mov	r11,r6
80004b9c:	fa c8 fb b4 	sub	r8,sp,-1100
80004ba0:	08 9c       	mov	r12,r4
80004ba2:	1a d8       	st.w	--sp,r8
80004ba4:	fa c8 f9 40 	sub	r8,sp,-1728
80004ba8:	fa c9 ff b4 	sub	r9,sp,-76
80004bac:	fe b0 f7 b4 	rcall	80003b14 <get_arg>
80004bb0:	2f dd       	sub	sp,-12
80004bb2:	f8 ea 00 00 	ld.d	r10,r12[0]
80004bb6:	fa eb 00 00 	st.d	sp[0],r10
80004bba:	30 08       	mov	r8,0
80004bbc:	e0 8f 03 de 	bral	80005378 <_vfprintf_r+0x1538>
80004bc0:	ee ca ff ff 	sub	r10,r7,-1
80004bc4:	10 37       	cp.w	r7,r8
80004bc6:	c0 b4       	brge	80004bdc <_vfprintf_r+0xd9c>
80004bc8:	fa c9 f9 44 	sub	r9,sp,-1724
80004bcc:	14 97       	mov	r7,r10
80004bce:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bd2:	ec ea fd 88 	ld.d	r10,r6[-632]
80004bd6:	fa eb 00 00 	st.d	sp[0],r10
80004bda:	c1 88       	rjmp	80004c0a <_vfprintf_r+0xdca>
80004bdc:	41 09       	lddsp	r9,sp[0x40]
80004bde:	59 f8       	cp.w	r8,31
80004be0:	e0 89 00 18 	brgt	80004c10 <_vfprintf_r+0xdd0>
80004be4:	f2 e6 00 00 	ld.d	r6,r9[0]
80004be8:	f2 cb ff f8 	sub	r11,r9,-8
80004bec:	fa e7 00 00 	st.d	sp[0],r6
80004bf0:	51 0b       	stdsp	sp[0x40],r11
80004bf2:	fa c6 f9 44 	sub	r6,sp,-1724
80004bf6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004bfa:	fa e6 00 00 	ld.d	r6,sp[0]
80004bfe:	f2 e7 fd 88 	st.d	r9[-632],r6
80004c02:	2f f8       	sub	r8,-1
80004c04:	14 97       	mov	r7,r10
80004c06:	fb 48 06 b4 	st.w	sp[1716],r8
80004c0a:	40 38       	lddsp	r8,sp[0xc]
80004c0c:	e0 8f 03 b6 	bral	80005378 <_vfprintf_r+0x1538>
80004c10:	f2 e6 00 00 	ld.d	r6,r9[0]
80004c14:	40 38       	lddsp	r8,sp[0xc]
80004c16:	fa e7 00 00 	st.d	sp[0],r6
80004c1a:	2f 89       	sub	r9,-8
80004c1c:	14 97       	mov	r7,r10
80004c1e:	51 09       	stdsp	sp[0x40],r9
80004c20:	e0 8f 03 ac 	bral	80005378 <_vfprintf_r+0x1538>
80004c24:	ed b5 00 04 	bld	r5,0x4
80004c28:	c1 61       	brne	80004c54 <_vfprintf_r+0xe14>
80004c2a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c2e:	40 3e       	lddsp	lr,sp[0xc]
80004c30:	58 0e       	cp.w	lr,0
80004c32:	c0 80       	breq	80004c42 <_vfprintf_r+0xe02>
80004c34:	10 36       	cp.w	r6,r8
80004c36:	c6 74       	brge	80004d04 <_vfprintf_r+0xec4>
80004c38:	fa cc f9 44 	sub	r12,sp,-1724
80004c3c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004c40:	c8 08       	rjmp	80004d40 <_vfprintf_r+0xf00>
80004c42:	ee ca ff ff 	sub	r10,r7,-1
80004c46:	10 37       	cp.w	r7,r8
80004c48:	c7 f4       	brge	80004d46 <_vfprintf_r+0xf06>
80004c4a:	fa cb f9 44 	sub	r11,sp,-1724
80004c4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c52:	c7 68       	rjmp	80004d3e <_vfprintf_r+0xefe>
80004c54:	ed b5 00 06 	bld	r5,0x6
80004c58:	c4 a1       	brne	80004cec <_vfprintf_r+0xeac>
80004c5a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c5e:	40 3c       	lddsp	r12,sp[0xc]
80004c60:	58 0c       	cp.w	r12,0
80004c62:	c1 d0       	breq	80004c9c <_vfprintf_r+0xe5c>
80004c64:	10 36       	cp.w	r6,r8
80004c66:	c0 64       	brge	80004c72 <_vfprintf_r+0xe32>
80004c68:	fa cb f9 44 	sub	r11,sp,-1724
80004c6c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c70:	c1 f8       	rjmp	80004cae <_vfprintf_r+0xe6e>
80004c72:	fa c8 f9 50 	sub	r8,sp,-1712
80004c76:	1a d8       	st.w	--sp,r8
80004c78:	fa c8 fa b8 	sub	r8,sp,-1352
80004c7c:	1a d8       	st.w	--sp,r8
80004c7e:	fa c8 fb b4 	sub	r8,sp,-1100
80004c82:	1a d8       	st.w	--sp,r8
80004c84:	fa c8 f9 40 	sub	r8,sp,-1728
80004c88:	fa c9 ff b4 	sub	r9,sp,-76
80004c8c:	04 9a       	mov	r10,r2
80004c8e:	0c 9b       	mov	r11,r6
80004c90:	08 9c       	mov	r12,r4
80004c92:	fe b0 f7 41 	rcall	80003b14 <get_arg>
80004c96:	2f dd       	sub	sp,-12
80004c98:	98 18       	ld.sh	r8,r12[0x2]
80004c9a:	c2 68       	rjmp	80004ce6 <_vfprintf_r+0xea6>
80004c9c:	ee ca ff ff 	sub	r10,r7,-1
80004ca0:	10 37       	cp.w	r7,r8
80004ca2:	c0 94       	brge	80004cb4 <_vfprintf_r+0xe74>
80004ca4:	fa c9 f9 44 	sub	r9,sp,-1724
80004ca8:	14 97       	mov	r7,r10
80004caa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cae:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004cb2:	c1 a8       	rjmp	80004ce6 <_vfprintf_r+0xea6>
80004cb4:	41 09       	lddsp	r9,sp[0x40]
80004cb6:	59 f8       	cp.w	r8,31
80004cb8:	e0 89 00 13 	brgt	80004cde <_vfprintf_r+0xe9e>
80004cbc:	f2 cb ff fc 	sub	r11,r9,-4
80004cc0:	51 0b       	stdsp	sp[0x40],r11
80004cc2:	72 09       	ld.w	r9,r9[0x0]
80004cc4:	fa c6 f9 44 	sub	r6,sp,-1724
80004cc8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004ccc:	2f f8       	sub	r8,-1
80004cce:	f7 49 fd 88 	st.w	r11[-632],r9
80004cd2:	fb 48 06 b4 	st.w	sp[1716],r8
80004cd6:	14 97       	mov	r7,r10
80004cd8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004cdc:	c0 58       	rjmp	80004ce6 <_vfprintf_r+0xea6>
80004cde:	92 18       	ld.sh	r8,r9[0x2]
80004ce0:	14 97       	mov	r7,r10
80004ce2:	2f c9       	sub	r9,-4
80004ce4:	51 09       	stdsp	sp[0x40],r9
80004ce6:	5c 78       	castu.h	r8
80004ce8:	50 18       	stdsp	sp[0x4],r8
80004cea:	c4 68       	rjmp	80004d76 <_vfprintf_r+0xf36>
80004cec:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cf0:	40 3c       	lddsp	r12,sp[0xc]
80004cf2:	58 0c       	cp.w	r12,0
80004cf4:	c1 d0       	breq	80004d2e <_vfprintf_r+0xeee>
80004cf6:	10 36       	cp.w	r6,r8
80004cf8:	c0 64       	brge	80004d04 <_vfprintf_r+0xec4>
80004cfa:	fa cb f9 44 	sub	r11,sp,-1724
80004cfe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d02:	c1 f8       	rjmp	80004d40 <_vfprintf_r+0xf00>
80004d04:	fa c8 f9 50 	sub	r8,sp,-1712
80004d08:	1a d8       	st.w	--sp,r8
80004d0a:	fa c8 fa b8 	sub	r8,sp,-1352
80004d0e:	0c 9b       	mov	r11,r6
80004d10:	1a d8       	st.w	--sp,r8
80004d12:	fa c8 fb b4 	sub	r8,sp,-1100
80004d16:	04 9a       	mov	r10,r2
80004d18:	1a d8       	st.w	--sp,r8
80004d1a:	08 9c       	mov	r12,r4
80004d1c:	fa c8 f9 40 	sub	r8,sp,-1728
80004d20:	fa c9 ff b4 	sub	r9,sp,-76
80004d24:	fe b0 f6 f8 	rcall	80003b14 <get_arg>
80004d28:	2f dd       	sub	sp,-12
80004d2a:	78 0b       	ld.w	r11,r12[0x0]
80004d2c:	c2 48       	rjmp	80004d74 <_vfprintf_r+0xf34>
80004d2e:	ee ca ff ff 	sub	r10,r7,-1
80004d32:	10 37       	cp.w	r7,r8
80004d34:	c0 94       	brge	80004d46 <_vfprintf_r+0xf06>
80004d36:	fa c9 f9 44 	sub	r9,sp,-1724
80004d3a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d3e:	14 97       	mov	r7,r10
80004d40:	ec fb fd 88 	ld.w	r11,r6[-632]
80004d44:	c1 88       	rjmp	80004d74 <_vfprintf_r+0xf34>
80004d46:	41 09       	lddsp	r9,sp[0x40]
80004d48:	59 f8       	cp.w	r8,31
80004d4a:	e0 89 00 11 	brgt	80004d6c <_vfprintf_r+0xf2c>
80004d4e:	f2 cb ff fc 	sub	r11,r9,-4
80004d52:	51 0b       	stdsp	sp[0x40],r11
80004d54:	fa c6 f9 44 	sub	r6,sp,-1724
80004d58:	72 0b       	ld.w	r11,r9[0x0]
80004d5a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d5e:	f3 4b fd 88 	st.w	r9[-632],r11
80004d62:	2f f8       	sub	r8,-1
80004d64:	14 97       	mov	r7,r10
80004d66:	fb 48 06 b4 	st.w	sp[1716],r8
80004d6a:	c0 58       	rjmp	80004d74 <_vfprintf_r+0xf34>
80004d6c:	72 0b       	ld.w	r11,r9[0x0]
80004d6e:	14 97       	mov	r7,r10
80004d70:	2f c9       	sub	r9,-4
80004d72:	51 09       	stdsp	sp[0x40],r9
80004d74:	50 1b       	stdsp	sp[0x4],r11
80004d76:	30 0e       	mov	lr,0
80004d78:	50 0e       	stdsp	sp[0x0],lr
80004d7a:	1c 98       	mov	r8,lr
80004d7c:	e0 8f 02 fe 	bral	80005378 <_vfprintf_r+0x1538>
80004d80:	50 a7       	stdsp	sp[0x28],r7
80004d82:	50 80       	stdsp	sp[0x20],r0
80004d84:	0c 97       	mov	r7,r6
80004d86:	04 94       	mov	r4,r2
80004d88:	06 96       	mov	r6,r3
80004d8a:	02 92       	mov	r2,r1
80004d8c:	40 93       	lddsp	r3,sp[0x24]
80004d8e:	40 41       	lddsp	r1,sp[0x10]
80004d90:	0e 99       	mov	r9,r7
80004d92:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d96:	40 3c       	lddsp	r12,sp[0xc]
80004d98:	58 0c       	cp.w	r12,0
80004d9a:	c1 d0       	breq	80004dd4 <_vfprintf_r+0xf94>
80004d9c:	10 36       	cp.w	r6,r8
80004d9e:	c0 64       	brge	80004daa <_vfprintf_r+0xf6a>
80004da0:	fa cb f9 44 	sub	r11,sp,-1724
80004da4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004da8:	c1 d8       	rjmp	80004de2 <_vfprintf_r+0xfa2>
80004daa:	fa c8 f9 50 	sub	r8,sp,-1712
80004dae:	1a d8       	st.w	--sp,r8
80004db0:	fa c8 fa b8 	sub	r8,sp,-1352
80004db4:	1a d8       	st.w	--sp,r8
80004db6:	fa c8 fb b4 	sub	r8,sp,-1100
80004dba:	1a d8       	st.w	--sp,r8
80004dbc:	fa c9 ff b4 	sub	r9,sp,-76
80004dc0:	fa c8 f9 40 	sub	r8,sp,-1728
80004dc4:	04 9a       	mov	r10,r2
80004dc6:	0c 9b       	mov	r11,r6
80004dc8:	08 9c       	mov	r12,r4
80004dca:	fe b0 f6 a5 	rcall	80003b14 <get_arg>
80004dce:	2f dd       	sub	sp,-12
80004dd0:	78 09       	ld.w	r9,r12[0x0]
80004dd2:	c2 18       	rjmp	80004e14 <_vfprintf_r+0xfd4>
80004dd4:	2f f7       	sub	r7,-1
80004dd6:	10 39       	cp.w	r9,r8
80004dd8:	c0 84       	brge	80004de8 <_vfprintf_r+0xfa8>
80004dda:	fa ca f9 44 	sub	r10,sp,-1724
80004dde:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004de2:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004de6:	c1 78       	rjmp	80004e14 <_vfprintf_r+0xfd4>
80004de8:	41 09       	lddsp	r9,sp[0x40]
80004dea:	59 f8       	cp.w	r8,31
80004dec:	e0 89 00 10 	brgt	80004e0c <_vfprintf_r+0xfcc>
80004df0:	f2 ca ff fc 	sub	r10,r9,-4
80004df4:	51 0a       	stdsp	sp[0x40],r10
80004df6:	fa c6 f9 44 	sub	r6,sp,-1724
80004dfa:	72 09       	ld.w	r9,r9[0x0]
80004dfc:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004e00:	f5 49 fd 88 	st.w	r10[-632],r9
80004e04:	2f f8       	sub	r8,-1
80004e06:	fb 48 06 b4 	st.w	sp[1716],r8
80004e0a:	c0 58       	rjmp	80004e14 <_vfprintf_r+0xfd4>
80004e0c:	f2 c8 ff fc 	sub	r8,r9,-4
80004e10:	51 08       	stdsp	sp[0x40],r8
80004e12:	72 09       	ld.w	r9,r9[0x0]
80004e14:	33 08       	mov	r8,48
80004e16:	fb 68 06 b8 	st.b	sp[1720],r8
80004e1a:	37 88       	mov	r8,120
80004e1c:	30 0e       	mov	lr,0
80004e1e:	fb 68 06 b9 	st.b	sp[1721],r8
80004e22:	fe cc b7 5e 	sub	r12,pc,-18594
80004e26:	50 19       	stdsp	sp[0x4],r9
80004e28:	a1 b5       	sbr	r5,0x1
80004e2a:	50 0e       	stdsp	sp[0x0],lr
80004e2c:	50 dc       	stdsp	sp[0x34],r12
80004e2e:	30 28       	mov	r8,2
80004e30:	37 80       	mov	r0,120
80004e32:	e0 8f 02 a3 	bral	80005378 <_vfprintf_r+0x1538>
80004e36:	50 a7       	stdsp	sp[0x28],r7
80004e38:	50 80       	stdsp	sp[0x20],r0
80004e3a:	10 90       	mov	r0,r8
80004e3c:	30 08       	mov	r8,0
80004e3e:	fb 68 06 bb 	st.b	sp[1723],r8
80004e42:	0c 97       	mov	r7,r6
80004e44:	04 94       	mov	r4,r2
80004e46:	06 96       	mov	r6,r3
80004e48:	02 92       	mov	r2,r1
80004e4a:	40 93       	lddsp	r3,sp[0x24]
80004e4c:	40 41       	lddsp	r1,sp[0x10]
80004e4e:	0e 99       	mov	r9,r7
80004e50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e54:	40 3b       	lddsp	r11,sp[0xc]
80004e56:	58 0b       	cp.w	r11,0
80004e58:	c1 d0       	breq	80004e92 <_vfprintf_r+0x1052>
80004e5a:	10 36       	cp.w	r6,r8
80004e5c:	c0 64       	brge	80004e68 <_vfprintf_r+0x1028>
80004e5e:	fa ca f9 44 	sub	r10,sp,-1724
80004e62:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004e66:	c1 d8       	rjmp	80004ea0 <_vfprintf_r+0x1060>
80004e68:	fa c8 f9 50 	sub	r8,sp,-1712
80004e6c:	1a d8       	st.w	--sp,r8
80004e6e:	fa c8 fa b8 	sub	r8,sp,-1352
80004e72:	1a d8       	st.w	--sp,r8
80004e74:	fa c8 fb b4 	sub	r8,sp,-1100
80004e78:	0c 9b       	mov	r11,r6
80004e7a:	1a d8       	st.w	--sp,r8
80004e7c:	04 9a       	mov	r10,r2
80004e7e:	fa c8 f9 40 	sub	r8,sp,-1728
80004e82:	fa c9 ff b4 	sub	r9,sp,-76
80004e86:	08 9c       	mov	r12,r4
80004e88:	fe b0 f6 46 	rcall	80003b14 <get_arg>
80004e8c:	2f dd       	sub	sp,-12
80004e8e:	78 06       	ld.w	r6,r12[0x0]
80004e90:	c2 08       	rjmp	80004ed0 <_vfprintf_r+0x1090>
80004e92:	2f f7       	sub	r7,-1
80004e94:	10 39       	cp.w	r9,r8
80004e96:	c0 84       	brge	80004ea6 <_vfprintf_r+0x1066>
80004e98:	fa c9 f9 44 	sub	r9,sp,-1724
80004e9c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ea0:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004ea4:	c1 68       	rjmp	80004ed0 <_vfprintf_r+0x1090>
80004ea6:	41 09       	lddsp	r9,sp[0x40]
80004ea8:	59 f8       	cp.w	r8,31
80004eaa:	e0 89 00 10 	brgt	80004eca <_vfprintf_r+0x108a>
80004eae:	f2 ca ff fc 	sub	r10,r9,-4
80004eb2:	51 0a       	stdsp	sp[0x40],r10
80004eb4:	72 06       	ld.w	r6,r9[0x0]
80004eb6:	fa ce f9 44 	sub	lr,sp,-1724
80004eba:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004ebe:	f3 46 fd 88 	st.w	r9[-632],r6
80004ec2:	2f f8       	sub	r8,-1
80004ec4:	fb 48 06 b4 	st.w	sp[1716],r8
80004ec8:	c0 48       	rjmp	80004ed0 <_vfprintf_r+0x1090>
80004eca:	72 06       	ld.w	r6,r9[0x0]
80004ecc:	2f c9       	sub	r9,-4
80004ece:	51 09       	stdsp	sp[0x40],r9
80004ed0:	40 2c       	lddsp	r12,sp[0x8]
80004ed2:	58 0c       	cp.w	r12,0
80004ed4:	c1 05       	brlt	80004ef4 <_vfprintf_r+0x10b4>
80004ed6:	18 9a       	mov	r10,r12
80004ed8:	30 0b       	mov	r11,0
80004eda:	0c 9c       	mov	r12,r6
80004edc:	e0 a0 14 58 	rcall	8000778c <memchr>
80004ee0:	e0 80 02 df 	breq	8000549e <_vfprintf_r+0x165e>
80004ee4:	f8 06 01 02 	sub	r2,r12,r6
80004ee8:	40 2b       	lddsp	r11,sp[0x8]
80004eea:	16 32       	cp.w	r2,r11
80004eec:	e0 89 02 d9 	brgt	8000549e <_vfprintf_r+0x165e>
80004ef0:	e0 8f 02 d4 	bral	80005498 <_vfprintf_r+0x1658>
80004ef4:	30 0a       	mov	r10,0
80004ef6:	0c 9c       	mov	r12,r6
80004ef8:	50 2a       	stdsp	sp[0x8],r10
80004efa:	e0 a0 19 2b 	rcall	80008150 <strlen>
80004efe:	18 92       	mov	r2,r12
80004f00:	e0 8f 02 d2 	bral	800054a4 <_vfprintf_r+0x1664>
80004f04:	50 a7       	stdsp	sp[0x28],r7
80004f06:	50 80       	stdsp	sp[0x20],r0
80004f08:	0c 97       	mov	r7,r6
80004f0a:	04 94       	mov	r4,r2
80004f0c:	06 96       	mov	r6,r3
80004f0e:	02 92       	mov	r2,r1
80004f10:	40 93       	lddsp	r3,sp[0x24]
80004f12:	10 90       	mov	r0,r8
80004f14:	40 41       	lddsp	r1,sp[0x10]
80004f16:	a5 a5       	sbr	r5,0x4
80004f18:	c0 a8       	rjmp	80004f2c <_vfprintf_r+0x10ec>
80004f1a:	50 a7       	stdsp	sp[0x28],r7
80004f1c:	50 80       	stdsp	sp[0x20],r0
80004f1e:	0c 97       	mov	r7,r6
80004f20:	04 94       	mov	r4,r2
80004f22:	06 96       	mov	r6,r3
80004f24:	02 92       	mov	r2,r1
80004f26:	40 93       	lddsp	r3,sp[0x24]
80004f28:	10 90       	mov	r0,r8
80004f2a:	40 41       	lddsp	r1,sp[0x10]
80004f2c:	ed b5 00 05 	bld	r5,0x5
80004f30:	c5 61       	brne	80004fdc <_vfprintf_r+0x119c>
80004f32:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f36:	40 39       	lddsp	r9,sp[0xc]
80004f38:	58 09       	cp.w	r9,0
80004f3a:	c2 10       	breq	80004f7c <_vfprintf_r+0x113c>
80004f3c:	10 36       	cp.w	r6,r8
80004f3e:	c0 74       	brge	80004f4c <_vfprintf_r+0x110c>
80004f40:	fa c8 f9 44 	sub	r8,sp,-1724
80004f44:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004f48:	c2 38       	rjmp	80004f8e <_vfprintf_r+0x114e>
80004f4a:	d7 03       	nop
80004f4c:	fa c8 f9 50 	sub	r8,sp,-1712
80004f50:	1a d8       	st.w	--sp,r8
80004f52:	fa c8 fa b8 	sub	r8,sp,-1352
80004f56:	1a d8       	st.w	--sp,r8
80004f58:	fa c8 fb b4 	sub	r8,sp,-1100
80004f5c:	1a d8       	st.w	--sp,r8
80004f5e:	fa c8 f9 40 	sub	r8,sp,-1728
80004f62:	fa c9 ff b4 	sub	r9,sp,-76
80004f66:	04 9a       	mov	r10,r2
80004f68:	0c 9b       	mov	r11,r6
80004f6a:	08 9c       	mov	r12,r4
80004f6c:	fe b0 f5 d4 	rcall	80003b14 <get_arg>
80004f70:	2f dd       	sub	sp,-12
80004f72:	f8 e8 00 00 	ld.d	r8,r12[0]
80004f76:	fa e9 00 00 	st.d	sp[0],r8
80004f7a:	c2 e8       	rjmp	80004fd6 <_vfprintf_r+0x1196>
80004f7c:	ee ca ff ff 	sub	r10,r7,-1
80004f80:	10 37       	cp.w	r7,r8
80004f82:	c0 b4       	brge	80004f98 <_vfprintf_r+0x1158>
80004f84:	fa c8 f9 44 	sub	r8,sp,-1724
80004f88:	14 97       	mov	r7,r10
80004f8a:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004f8e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004f92:	fa eb 00 00 	st.d	sp[0],r10
80004f96:	c2 08       	rjmp	80004fd6 <_vfprintf_r+0x1196>
80004f98:	41 09       	lddsp	r9,sp[0x40]
80004f9a:	59 f8       	cp.w	r8,31
80004f9c:	e0 89 00 16 	brgt	80004fc8 <_vfprintf_r+0x1188>
80004fa0:	f2 e6 00 00 	ld.d	r6,r9[0]
80004fa4:	f2 cb ff f8 	sub	r11,r9,-8
80004fa8:	fa e7 00 00 	st.d	sp[0],r6
80004fac:	51 0b       	stdsp	sp[0x40],r11
80004fae:	fa c6 f9 44 	sub	r6,sp,-1724
80004fb2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004fb6:	fa e6 00 00 	ld.d	r6,sp[0]
80004fba:	f2 e7 fd 88 	st.d	r9[-632],r6
80004fbe:	2f f8       	sub	r8,-1
80004fc0:	14 97       	mov	r7,r10
80004fc2:	fb 48 06 b4 	st.w	sp[1716],r8
80004fc6:	c0 88       	rjmp	80004fd6 <_vfprintf_r+0x1196>
80004fc8:	f2 e6 00 00 	ld.d	r6,r9[0]
80004fcc:	2f 89       	sub	r9,-8
80004fce:	fa e7 00 00 	st.d	sp[0],r6
80004fd2:	51 09       	stdsp	sp[0x40],r9
80004fd4:	14 97       	mov	r7,r10
80004fd6:	30 18       	mov	r8,1
80004fd8:	e0 8f 01 d0 	bral	80005378 <_vfprintf_r+0x1538>
80004fdc:	ed b5 00 04 	bld	r5,0x4
80004fe0:	c1 61       	brne	8000500c <_vfprintf_r+0x11cc>
80004fe2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fe6:	40 3e       	lddsp	lr,sp[0xc]
80004fe8:	58 0e       	cp.w	lr,0
80004fea:	c0 80       	breq	80004ffa <_vfprintf_r+0x11ba>
80004fec:	10 36       	cp.w	r6,r8
80004fee:	c6 74       	brge	800050bc <_vfprintf_r+0x127c>
80004ff0:	fa cc f9 44 	sub	r12,sp,-1724
80004ff4:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004ff8:	c8 08       	rjmp	800050f8 <_vfprintf_r+0x12b8>
80004ffa:	ee ca ff ff 	sub	r10,r7,-1
80004ffe:	10 37       	cp.w	r7,r8
80005000:	c7 f4       	brge	800050fe <_vfprintf_r+0x12be>
80005002:	fa cb f9 44 	sub	r11,sp,-1724
80005006:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000500a:	c7 68       	rjmp	800050f6 <_vfprintf_r+0x12b6>
8000500c:	ed b5 00 06 	bld	r5,0x6
80005010:	c4 a1       	brne	800050a4 <_vfprintf_r+0x1264>
80005012:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005016:	40 3c       	lddsp	r12,sp[0xc]
80005018:	58 0c       	cp.w	r12,0
8000501a:	c1 d0       	breq	80005054 <_vfprintf_r+0x1214>
8000501c:	10 36       	cp.w	r6,r8
8000501e:	c0 64       	brge	8000502a <_vfprintf_r+0x11ea>
80005020:	fa cb f9 44 	sub	r11,sp,-1724
80005024:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005028:	c1 f8       	rjmp	80005066 <_vfprintf_r+0x1226>
8000502a:	fa c8 f9 50 	sub	r8,sp,-1712
8000502e:	1a d8       	st.w	--sp,r8
80005030:	fa c8 fa b8 	sub	r8,sp,-1352
80005034:	1a d8       	st.w	--sp,r8
80005036:	fa c8 fb b4 	sub	r8,sp,-1100
8000503a:	1a d8       	st.w	--sp,r8
8000503c:	fa c8 f9 40 	sub	r8,sp,-1728
80005040:	fa c9 ff b4 	sub	r9,sp,-76
80005044:	04 9a       	mov	r10,r2
80005046:	0c 9b       	mov	r11,r6
80005048:	08 9c       	mov	r12,r4
8000504a:	fe b0 f5 65 	rcall	80003b14 <get_arg>
8000504e:	2f dd       	sub	sp,-12
80005050:	98 18       	ld.sh	r8,r12[0x2]
80005052:	c2 68       	rjmp	8000509e <_vfprintf_r+0x125e>
80005054:	ee ca ff ff 	sub	r10,r7,-1
80005058:	10 37       	cp.w	r7,r8
8000505a:	c0 94       	brge	8000506c <_vfprintf_r+0x122c>
8000505c:	fa c9 f9 44 	sub	r9,sp,-1724
80005060:	14 97       	mov	r7,r10
80005062:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005066:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000506a:	c1 a8       	rjmp	8000509e <_vfprintf_r+0x125e>
8000506c:	41 09       	lddsp	r9,sp[0x40]
8000506e:	59 f8       	cp.w	r8,31
80005070:	e0 89 00 13 	brgt	80005096 <_vfprintf_r+0x1256>
80005074:	f2 cb ff fc 	sub	r11,r9,-4
80005078:	51 0b       	stdsp	sp[0x40],r11
8000507a:	72 09       	ld.w	r9,r9[0x0]
8000507c:	fa c6 f9 44 	sub	r6,sp,-1724
80005080:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005084:	2f f8       	sub	r8,-1
80005086:	f7 49 fd 88 	st.w	r11[-632],r9
8000508a:	fb 48 06 b4 	st.w	sp[1716],r8
8000508e:	14 97       	mov	r7,r10
80005090:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005094:	c0 58       	rjmp	8000509e <_vfprintf_r+0x125e>
80005096:	92 18       	ld.sh	r8,r9[0x2]
80005098:	14 97       	mov	r7,r10
8000509a:	2f c9       	sub	r9,-4
8000509c:	51 09       	stdsp	sp[0x40],r9
8000509e:	5c 78       	castu.h	r8
800050a0:	50 18       	stdsp	sp[0x4],r8
800050a2:	c4 68       	rjmp	8000512e <_vfprintf_r+0x12ee>
800050a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050a8:	40 3c       	lddsp	r12,sp[0xc]
800050aa:	58 0c       	cp.w	r12,0
800050ac:	c1 d0       	breq	800050e6 <_vfprintf_r+0x12a6>
800050ae:	10 36       	cp.w	r6,r8
800050b0:	c0 64       	brge	800050bc <_vfprintf_r+0x127c>
800050b2:	fa cb f9 44 	sub	r11,sp,-1724
800050b6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800050ba:	c1 f8       	rjmp	800050f8 <_vfprintf_r+0x12b8>
800050bc:	fa c8 f9 50 	sub	r8,sp,-1712
800050c0:	1a d8       	st.w	--sp,r8
800050c2:	fa c8 fa b8 	sub	r8,sp,-1352
800050c6:	0c 9b       	mov	r11,r6
800050c8:	1a d8       	st.w	--sp,r8
800050ca:	fa c8 fb b4 	sub	r8,sp,-1100
800050ce:	04 9a       	mov	r10,r2
800050d0:	1a d8       	st.w	--sp,r8
800050d2:	08 9c       	mov	r12,r4
800050d4:	fa c8 f9 40 	sub	r8,sp,-1728
800050d8:	fa c9 ff b4 	sub	r9,sp,-76
800050dc:	fe b0 f5 1c 	rcall	80003b14 <get_arg>
800050e0:	2f dd       	sub	sp,-12
800050e2:	78 0b       	ld.w	r11,r12[0x0]
800050e4:	c2 48       	rjmp	8000512c <_vfprintf_r+0x12ec>
800050e6:	ee ca ff ff 	sub	r10,r7,-1
800050ea:	10 37       	cp.w	r7,r8
800050ec:	c0 94       	brge	800050fe <_vfprintf_r+0x12be>
800050ee:	fa c9 f9 44 	sub	r9,sp,-1724
800050f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800050f6:	14 97       	mov	r7,r10
800050f8:	ec fb fd 88 	ld.w	r11,r6[-632]
800050fc:	c1 88       	rjmp	8000512c <_vfprintf_r+0x12ec>
800050fe:	41 09       	lddsp	r9,sp[0x40]
80005100:	59 f8       	cp.w	r8,31
80005102:	e0 89 00 11 	brgt	80005124 <_vfprintf_r+0x12e4>
80005106:	f2 cb ff fc 	sub	r11,r9,-4
8000510a:	51 0b       	stdsp	sp[0x40],r11
8000510c:	fa c6 f9 44 	sub	r6,sp,-1724
80005110:	72 0b       	ld.w	r11,r9[0x0]
80005112:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005116:	f3 4b fd 88 	st.w	r9[-632],r11
8000511a:	2f f8       	sub	r8,-1
8000511c:	14 97       	mov	r7,r10
8000511e:	fb 48 06 b4 	st.w	sp[1716],r8
80005122:	c0 58       	rjmp	8000512c <_vfprintf_r+0x12ec>
80005124:	72 0b       	ld.w	r11,r9[0x0]
80005126:	14 97       	mov	r7,r10
80005128:	2f c9       	sub	r9,-4
8000512a:	51 09       	stdsp	sp[0x40],r9
8000512c:	50 1b       	stdsp	sp[0x4],r11
8000512e:	30 0e       	mov	lr,0
80005130:	30 18       	mov	r8,1
80005132:	50 0e       	stdsp	sp[0x0],lr
80005134:	c2 29       	rjmp	80005378 <_vfprintf_r+0x1538>
80005136:	50 a7       	stdsp	sp[0x28],r7
80005138:	50 80       	stdsp	sp[0x20],r0
8000513a:	0c 97       	mov	r7,r6
8000513c:	04 94       	mov	r4,r2
8000513e:	06 96       	mov	r6,r3
80005140:	02 92       	mov	r2,r1
80005142:	fe cc ba 7e 	sub	r12,pc,-17794
80005146:	40 93       	lddsp	r3,sp[0x24]
80005148:	10 90       	mov	r0,r8
8000514a:	40 41       	lddsp	r1,sp[0x10]
8000514c:	50 dc       	stdsp	sp[0x34],r12
8000514e:	ed b5 00 05 	bld	r5,0x5
80005152:	c5 51       	brne	800051fc <_vfprintf_r+0x13bc>
80005154:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005158:	40 3b       	lddsp	r11,sp[0xc]
8000515a:	58 0b       	cp.w	r11,0
8000515c:	c2 20       	breq	800051a0 <_vfprintf_r+0x1360>
8000515e:	10 36       	cp.w	r6,r8
80005160:	c0 a4       	brge	80005174 <_vfprintf_r+0x1334>
80005162:	fa ca f9 44 	sub	r10,sp,-1724
80005166:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000516a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000516e:	fa e9 00 00 	st.d	sp[0],r8
80005172:	cf 28       	rjmp	80005356 <_vfprintf_r+0x1516>
80005174:	fa c8 f9 50 	sub	r8,sp,-1712
80005178:	1a d8       	st.w	--sp,r8
8000517a:	fa c8 fa b8 	sub	r8,sp,-1352
8000517e:	04 9a       	mov	r10,r2
80005180:	1a d8       	st.w	--sp,r8
80005182:	0c 9b       	mov	r11,r6
80005184:	fa c8 fb b4 	sub	r8,sp,-1100
80005188:	08 9c       	mov	r12,r4
8000518a:	1a d8       	st.w	--sp,r8
8000518c:	fa c8 f9 40 	sub	r8,sp,-1728
80005190:	fa c9 ff b4 	sub	r9,sp,-76
80005194:	fe b0 f4 c0 	rcall	80003b14 <get_arg>
80005198:	2f dd       	sub	sp,-12
8000519a:	f8 ea 00 00 	ld.d	r10,r12[0]
8000519e:	c0 c8       	rjmp	800051b6 <_vfprintf_r+0x1376>
800051a0:	ee ca ff ff 	sub	r10,r7,-1
800051a4:	10 37       	cp.w	r7,r8
800051a6:	c0 b4       	brge	800051bc <_vfprintf_r+0x137c>
800051a8:	fa c9 f9 44 	sub	r9,sp,-1724
800051ac:	14 97       	mov	r7,r10
800051ae:	f2 06 00 36 	add	r6,r9,r6<<0x3
800051b2:	ec ea fd 88 	ld.d	r10,r6[-632]
800051b6:	fa eb 00 00 	st.d	sp[0],r10
800051ba:	cc e8       	rjmp	80005356 <_vfprintf_r+0x1516>
800051bc:	41 09       	lddsp	r9,sp[0x40]
800051be:	59 f8       	cp.w	r8,31
800051c0:	e0 89 00 16 	brgt	800051ec <_vfprintf_r+0x13ac>
800051c4:	f2 e6 00 00 	ld.d	r6,r9[0]
800051c8:	f2 cb ff f8 	sub	r11,r9,-8
800051cc:	fa e7 00 00 	st.d	sp[0],r6
800051d0:	51 0b       	stdsp	sp[0x40],r11
800051d2:	fa c6 f9 44 	sub	r6,sp,-1724
800051d6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800051da:	fa e6 00 00 	ld.d	r6,sp[0]
800051de:	f2 e7 fd 88 	st.d	r9[-632],r6
800051e2:	2f f8       	sub	r8,-1
800051e4:	14 97       	mov	r7,r10
800051e6:	fb 48 06 b4 	st.w	sp[1716],r8
800051ea:	cb 68       	rjmp	80005356 <_vfprintf_r+0x1516>
800051ec:	f2 e6 00 00 	ld.d	r6,r9[0]
800051f0:	2f 89       	sub	r9,-8
800051f2:	fa e7 00 00 	st.d	sp[0],r6
800051f6:	51 09       	stdsp	sp[0x40],r9
800051f8:	14 97       	mov	r7,r10
800051fa:	ca e8       	rjmp	80005356 <_vfprintf_r+0x1516>
800051fc:	ed b5 00 04 	bld	r5,0x4
80005200:	c1 71       	brne	8000522e <_vfprintf_r+0x13ee>
80005202:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005206:	40 3e       	lddsp	lr,sp[0xc]
80005208:	58 0e       	cp.w	lr,0
8000520a:	c0 80       	breq	8000521a <_vfprintf_r+0x13da>
8000520c:	10 36       	cp.w	r6,r8
8000520e:	c6 94       	brge	800052e0 <_vfprintf_r+0x14a0>
80005210:	fa cc f9 44 	sub	r12,sp,-1724
80005214:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005218:	c8 28       	rjmp	8000531c <_vfprintf_r+0x14dc>
8000521a:	ee ca ff ff 	sub	r10,r7,-1
8000521e:	10 37       	cp.w	r7,r8
80005220:	e0 84 00 81 	brge	80005322 <_vfprintf_r+0x14e2>
80005224:	fa cb f9 44 	sub	r11,sp,-1724
80005228:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000522c:	c7 78       	rjmp	8000531a <_vfprintf_r+0x14da>
8000522e:	ed b5 00 06 	bld	r5,0x6
80005232:	c4 b1       	brne	800052c8 <_vfprintf_r+0x1488>
80005234:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005238:	40 3c       	lddsp	r12,sp[0xc]
8000523a:	58 0c       	cp.w	r12,0
8000523c:	c1 d0       	breq	80005276 <_vfprintf_r+0x1436>
8000523e:	10 36       	cp.w	r6,r8
80005240:	c0 64       	brge	8000524c <_vfprintf_r+0x140c>
80005242:	fa cb f9 44 	sub	r11,sp,-1724
80005246:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000524a:	c1 f8       	rjmp	80005288 <_vfprintf_r+0x1448>
8000524c:	fa c8 f9 50 	sub	r8,sp,-1712
80005250:	1a d8       	st.w	--sp,r8
80005252:	fa c8 fa b8 	sub	r8,sp,-1352
80005256:	1a d8       	st.w	--sp,r8
80005258:	fa c8 fb b4 	sub	r8,sp,-1100
8000525c:	1a d8       	st.w	--sp,r8
8000525e:	fa c8 f9 40 	sub	r8,sp,-1728
80005262:	fa c9 ff b4 	sub	r9,sp,-76
80005266:	04 9a       	mov	r10,r2
80005268:	0c 9b       	mov	r11,r6
8000526a:	08 9c       	mov	r12,r4
8000526c:	fe b0 f4 54 	rcall	80003b14 <get_arg>
80005270:	2f dd       	sub	sp,-12
80005272:	98 18       	ld.sh	r8,r12[0x2]
80005274:	c2 78       	rjmp	800052c2 <_vfprintf_r+0x1482>
80005276:	ee ca ff ff 	sub	r10,r7,-1
8000527a:	10 37       	cp.w	r7,r8
8000527c:	c0 a4       	brge	80005290 <_vfprintf_r+0x1450>
8000527e:	fa c9 f9 44 	sub	r9,sp,-1724
80005282:	14 97       	mov	r7,r10
80005284:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005288:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000528c:	c1 b8       	rjmp	800052c2 <_vfprintf_r+0x1482>
8000528e:	d7 03       	nop
80005290:	41 09       	lddsp	r9,sp[0x40]
80005292:	59 f8       	cp.w	r8,31
80005294:	e0 89 00 13 	brgt	800052ba <_vfprintf_r+0x147a>
80005298:	f2 cb ff fc 	sub	r11,r9,-4
8000529c:	51 0b       	stdsp	sp[0x40],r11
8000529e:	72 09       	ld.w	r9,r9[0x0]
800052a0:	fa c6 f9 44 	sub	r6,sp,-1724
800052a4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800052a8:	2f f8       	sub	r8,-1
800052aa:	f7 49 fd 88 	st.w	r11[-632],r9
800052ae:	fb 48 06 b4 	st.w	sp[1716],r8
800052b2:	14 97       	mov	r7,r10
800052b4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800052b8:	c0 58       	rjmp	800052c2 <_vfprintf_r+0x1482>
800052ba:	92 18       	ld.sh	r8,r9[0x2]
800052bc:	14 97       	mov	r7,r10
800052be:	2f c9       	sub	r9,-4
800052c0:	51 09       	stdsp	sp[0x40],r9
800052c2:	5c 78       	castu.h	r8
800052c4:	50 18       	stdsp	sp[0x4],r8
800052c6:	c4 68       	rjmp	80005352 <_vfprintf_r+0x1512>
800052c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052cc:	40 3c       	lddsp	r12,sp[0xc]
800052ce:	58 0c       	cp.w	r12,0
800052d0:	c1 d0       	breq	8000530a <_vfprintf_r+0x14ca>
800052d2:	10 36       	cp.w	r6,r8
800052d4:	c0 64       	brge	800052e0 <_vfprintf_r+0x14a0>
800052d6:	fa cb f9 44 	sub	r11,sp,-1724
800052da:	f6 06 00 36 	add	r6,r11,r6<<0x3
800052de:	c1 f8       	rjmp	8000531c <_vfprintf_r+0x14dc>
800052e0:	fa c8 f9 50 	sub	r8,sp,-1712
800052e4:	1a d8       	st.w	--sp,r8
800052e6:	fa c8 fa b8 	sub	r8,sp,-1352
800052ea:	0c 9b       	mov	r11,r6
800052ec:	1a d8       	st.w	--sp,r8
800052ee:	fa c8 fb b4 	sub	r8,sp,-1100
800052f2:	04 9a       	mov	r10,r2
800052f4:	1a d8       	st.w	--sp,r8
800052f6:	08 9c       	mov	r12,r4
800052f8:	fa c8 f9 40 	sub	r8,sp,-1728
800052fc:	fa c9 ff b4 	sub	r9,sp,-76
80005300:	fe b0 f4 0a 	rcall	80003b14 <get_arg>
80005304:	2f dd       	sub	sp,-12
80005306:	78 0b       	ld.w	r11,r12[0x0]
80005308:	c2 48       	rjmp	80005350 <_vfprintf_r+0x1510>
8000530a:	ee ca ff ff 	sub	r10,r7,-1
8000530e:	10 37       	cp.w	r7,r8
80005310:	c0 94       	brge	80005322 <_vfprintf_r+0x14e2>
80005312:	fa c9 f9 44 	sub	r9,sp,-1724
80005316:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000531a:	14 97       	mov	r7,r10
8000531c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005320:	c1 88       	rjmp	80005350 <_vfprintf_r+0x1510>
80005322:	41 09       	lddsp	r9,sp[0x40]
80005324:	59 f8       	cp.w	r8,31
80005326:	e0 89 00 11 	brgt	80005348 <_vfprintf_r+0x1508>
8000532a:	f2 cb ff fc 	sub	r11,r9,-4
8000532e:	51 0b       	stdsp	sp[0x40],r11
80005330:	fa c6 f9 44 	sub	r6,sp,-1724
80005334:	72 0b       	ld.w	r11,r9[0x0]
80005336:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000533a:	f3 4b fd 88 	st.w	r9[-632],r11
8000533e:	2f f8       	sub	r8,-1
80005340:	14 97       	mov	r7,r10
80005342:	fb 48 06 b4 	st.w	sp[1716],r8
80005346:	c0 58       	rjmp	80005350 <_vfprintf_r+0x1510>
80005348:	72 0b       	ld.w	r11,r9[0x0]
8000534a:	14 97       	mov	r7,r10
8000534c:	2f c9       	sub	r9,-4
8000534e:	51 09       	stdsp	sp[0x40],r9
80005350:	50 1b       	stdsp	sp[0x4],r11
80005352:	30 0e       	mov	lr,0
80005354:	50 0e       	stdsp	sp[0x0],lr
80005356:	40 08       	lddsp	r8,sp[0x0]
80005358:	40 1c       	lddsp	r12,sp[0x4]
8000535a:	18 48       	or	r8,r12
8000535c:	5f 19       	srne	r9
8000535e:	0a 98       	mov	r8,r5
80005360:	eb e9 00 09 	and	r9,r5,r9
80005364:	a1 b8       	sbr	r8,0x1
80005366:	58 09       	cp.w	r9,0
80005368:	c0 70       	breq	80005376 <_vfprintf_r+0x1536>
8000536a:	10 95       	mov	r5,r8
8000536c:	fb 60 06 b9 	st.b	sp[1721],r0
80005370:	33 08       	mov	r8,48
80005372:	fb 68 06 b8 	st.b	sp[1720],r8
80005376:	30 28       	mov	r8,2
80005378:	30 09       	mov	r9,0
8000537a:	fb 69 06 bb 	st.b	sp[1723],r9
8000537e:	0a 99       	mov	r9,r5
80005380:	a7 d9       	cbr	r9,0x7
80005382:	40 2b       	lddsp	r11,sp[0x8]
80005384:	40 16       	lddsp	r6,sp[0x4]
80005386:	58 0b       	cp.w	r11,0
80005388:	5f 1a       	srne	r10
8000538a:	f2 05 17 40 	movge	r5,r9
8000538e:	fa c2 f9 78 	sub	r2,sp,-1672
80005392:	40 09       	lddsp	r9,sp[0x0]
80005394:	0c 49       	or	r9,r6
80005396:	5f 19       	srne	r9
80005398:	f5 e9 10 09 	or	r9,r10,r9
8000539c:	c5 c0       	breq	80005454 <_vfprintf_r+0x1614>
8000539e:	30 19       	mov	r9,1
800053a0:	f2 08 18 00 	cp.b	r8,r9
800053a4:	c0 60       	breq	800053b0 <_vfprintf_r+0x1570>
800053a6:	30 29       	mov	r9,2
800053a8:	f2 08 18 00 	cp.b	r8,r9
800053ac:	c0 41       	brne	800053b4 <_vfprintf_r+0x1574>
800053ae:	c3 c8       	rjmp	80005426 <_vfprintf_r+0x15e6>
800053b0:	04 96       	mov	r6,r2
800053b2:	c3 08       	rjmp	80005412 <_vfprintf_r+0x15d2>
800053b4:	04 96       	mov	r6,r2
800053b6:	fa e8 00 00 	ld.d	r8,sp[0]
800053ba:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800053be:	2d 0a       	sub	r10,-48
800053c0:	0c fa       	st.b	--r6,r10
800053c2:	f0 0b 16 03 	lsr	r11,r8,0x3
800053c6:	f2 0c 16 03 	lsr	r12,r9,0x3
800053ca:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800053ce:	18 99       	mov	r9,r12
800053d0:	16 98       	mov	r8,r11
800053d2:	58 08       	cp.w	r8,0
800053d4:	5c 29       	cpc	r9
800053d6:	cf 21       	brne	800053ba <_vfprintf_r+0x157a>
800053d8:	fa e9 00 00 	st.d	sp[0],r8
800053dc:	ed b5 00 00 	bld	r5,0x0
800053e0:	c4 51       	brne	8000546a <_vfprintf_r+0x162a>
800053e2:	33 09       	mov	r9,48
800053e4:	f2 0a 18 00 	cp.b	r10,r9
800053e8:	c4 10       	breq	8000546a <_vfprintf_r+0x162a>
800053ea:	0c f9       	st.b	--r6,r9
800053ec:	c3 f8       	rjmp	8000546a <_vfprintf_r+0x162a>
800053ee:	fa ea 00 00 	ld.d	r10,sp[0]
800053f2:	30 a8       	mov	r8,10
800053f4:	30 09       	mov	r9,0
800053f6:	e0 a0 1c cb 	rcall	80008d8c <__avr32_umod64>
800053fa:	30 a8       	mov	r8,10
800053fc:	2d 0a       	sub	r10,-48
800053fe:	30 09       	mov	r9,0
80005400:	ac 8a       	st.b	r6[0x0],r10
80005402:	fa ea 00 00 	ld.d	r10,sp[0]
80005406:	e0 a0 1b 91 	rcall	80008b28 <__avr32_udiv64>
8000540a:	16 99       	mov	r9,r11
8000540c:	14 98       	mov	r8,r10
8000540e:	fa e9 00 00 	st.d	sp[0],r8
80005412:	20 16       	sub	r6,1
80005414:	fa ea 00 00 	ld.d	r10,sp[0]
80005418:	58 9a       	cp.w	r10,9
8000541a:	5c 2b       	cpc	r11
8000541c:	fe 9b ff e9 	brhi	800053ee <_vfprintf_r+0x15ae>
80005420:	1b f8       	ld.ub	r8,sp[0x7]
80005422:	2d 08       	sub	r8,-48
80005424:	c2 08       	rjmp	80005464 <_vfprintf_r+0x1624>
80005426:	04 96       	mov	r6,r2
80005428:	fa e8 00 00 	ld.d	r8,sp[0]
8000542c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005430:	40 de       	lddsp	lr,sp[0x34]
80005432:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005436:	0c fa       	st.b	--r6,r10
80005438:	f2 0b 16 04 	lsr	r11,r9,0x4
8000543c:	f0 0a 16 04 	lsr	r10,r8,0x4
80005440:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005444:	16 99       	mov	r9,r11
80005446:	14 98       	mov	r8,r10
80005448:	58 08       	cp.w	r8,0
8000544a:	5c 29       	cpc	r9
8000544c:	cf 01       	brne	8000542c <_vfprintf_r+0x15ec>
8000544e:	fa e9 00 00 	st.d	sp[0],r8
80005452:	c0 c8       	rjmp	8000546a <_vfprintf_r+0x162a>
80005454:	58 08       	cp.w	r8,0
80005456:	c0 91       	brne	80005468 <_vfprintf_r+0x1628>
80005458:	ed b5 00 00 	bld	r5,0x0
8000545c:	c0 61       	brne	80005468 <_vfprintf_r+0x1628>
8000545e:	fa c6 f9 79 	sub	r6,sp,-1671
80005462:	33 08       	mov	r8,48
80005464:	ac 88       	st.b	r6[0x0],r8
80005466:	c0 28       	rjmp	8000546a <_vfprintf_r+0x162a>
80005468:	04 96       	mov	r6,r2
8000546a:	0c 12       	sub	r2,r6
8000546c:	c1 c8       	rjmp	800054a4 <_vfprintf_r+0x1664>
8000546e:	50 a7       	stdsp	sp[0x28],r7
80005470:	50 80       	stdsp	sp[0x20],r0
80005472:	40 93       	lddsp	r3,sp[0x24]
80005474:	0c 97       	mov	r7,r6
80005476:	10 90       	mov	r0,r8
80005478:	04 94       	mov	r4,r2
8000547a:	40 41       	lddsp	r1,sp[0x10]
8000547c:	58 08       	cp.w	r8,0
8000547e:	e0 80 04 4f 	breq	80005d1c <_vfprintf_r+0x1edc>
80005482:	fb 68 06 60 	st.b	sp[1632],r8
80005486:	30 0c       	mov	r12,0
80005488:	30 08       	mov	r8,0
8000548a:	30 12       	mov	r2,1
8000548c:	fb 68 06 bb 	st.b	sp[1723],r8
80005490:	50 2c       	stdsp	sp[0x8],r12
80005492:	fa c6 f9 a0 	sub	r6,sp,-1632
80005496:	c0 78       	rjmp	800054a4 <_vfprintf_r+0x1664>
80005498:	30 0b       	mov	r11,0
8000549a:	50 2b       	stdsp	sp[0x8],r11
8000549c:	c0 48       	rjmp	800054a4 <_vfprintf_r+0x1664>
8000549e:	40 22       	lddsp	r2,sp[0x8]
800054a0:	30 0a       	mov	r10,0
800054a2:	50 2a       	stdsp	sp[0x8],r10
800054a4:	40 29       	lddsp	r9,sp[0x8]
800054a6:	e4 09 0c 49 	max	r9,r2,r9
800054aa:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800054ae:	50 39       	stdsp	sp[0xc],r9
800054b0:	0a 9e       	mov	lr,r5
800054b2:	30 09       	mov	r9,0
800054b4:	e2 1e 00 02 	andl	lr,0x2,COH
800054b8:	f2 08 18 00 	cp.b	r8,r9
800054bc:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800054c0:	f7 b8 01 ff 	subne	r8,-1
800054c4:	fb f8 1a 03 	st.wne	sp[0xc],r8
800054c8:	0a 9b       	mov	r11,r5
800054ca:	58 0e       	cp.w	lr,0
800054cc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800054d0:	f7 bc 01 fe 	subne	r12,-2
800054d4:	fb fc 1a 03 	st.wne	sp[0xc],r12
800054d8:	e2 1b 00 84 	andl	r11,0x84,COH
800054dc:	50 fe       	stdsp	sp[0x3c],lr
800054de:	50 9b       	stdsp	sp[0x24],r11
800054e0:	c4 71       	brne	8000556e <_vfprintf_r+0x172e>
800054e2:	40 8a       	lddsp	r10,sp[0x20]
800054e4:	40 39       	lddsp	r9,sp[0xc]
800054e6:	12 1a       	sub	r10,r9
800054e8:	50 4a       	stdsp	sp[0x10],r10
800054ea:	58 0a       	cp.w	r10,0
800054ec:	e0 89 00 20 	brgt	8000552c <_vfprintf_r+0x16ec>
800054f0:	c3 f8       	rjmp	8000556e <_vfprintf_r+0x172e>
800054f2:	2f 09       	sub	r9,-16
800054f4:	2f f8       	sub	r8,-1
800054f6:	fe ce be 1e 	sub	lr,pc,-16866
800054fa:	31 0c       	mov	r12,16
800054fc:	fb 49 06 90 	st.w	sp[1680],r9
80005500:	87 0e       	st.w	r3[0x0],lr
80005502:	87 1c       	st.w	r3[0x4],r12
80005504:	fb 48 06 8c 	st.w	sp[1676],r8
80005508:	58 78       	cp.w	r8,7
8000550a:	e0 89 00 04 	brgt	80005512 <_vfprintf_r+0x16d2>
8000550e:	2f 83       	sub	r3,-8
80005510:	c0 b8       	rjmp	80005526 <_vfprintf_r+0x16e6>
80005512:	fa ca f9 78 	sub	r10,sp,-1672
80005516:	02 9b       	mov	r11,r1
80005518:	08 9c       	mov	r12,r4
8000551a:	fe b0 f4 85 	rcall	80003e24 <__sprint_r>
8000551e:	e0 81 04 10 	brne	80005d3e <_vfprintf_r+0x1efe>
80005522:	fa c3 f9 e0 	sub	r3,sp,-1568
80005526:	40 4b       	lddsp	r11,sp[0x10]
80005528:	21 0b       	sub	r11,16
8000552a:	50 4b       	stdsp	sp[0x10],r11
8000552c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005530:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005534:	fe ca be 5c 	sub	r10,pc,-16804
80005538:	40 4e       	lddsp	lr,sp[0x10]
8000553a:	59 0e       	cp.w	lr,16
8000553c:	fe 99 ff db 	brgt	800054f2 <_vfprintf_r+0x16b2>
80005540:	1c 09       	add	r9,lr
80005542:	2f f8       	sub	r8,-1
80005544:	87 0a       	st.w	r3[0x0],r10
80005546:	fb 49 06 90 	st.w	sp[1680],r9
8000554a:	87 1e       	st.w	r3[0x4],lr
8000554c:	fb 48 06 8c 	st.w	sp[1676],r8
80005550:	58 78       	cp.w	r8,7
80005552:	e0 89 00 04 	brgt	8000555a <_vfprintf_r+0x171a>
80005556:	2f 83       	sub	r3,-8
80005558:	c0 b8       	rjmp	8000556e <_vfprintf_r+0x172e>
8000555a:	fa ca f9 78 	sub	r10,sp,-1672
8000555e:	02 9b       	mov	r11,r1
80005560:	08 9c       	mov	r12,r4
80005562:	fe b0 f4 61 	rcall	80003e24 <__sprint_r>
80005566:	e0 81 03 ec 	brne	80005d3e <_vfprintf_r+0x1efe>
8000556a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000556e:	30 09       	mov	r9,0
80005570:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005574:	f2 08 18 00 	cp.b	r8,r9
80005578:	c1 f0       	breq	800055b6 <_vfprintf_r+0x1776>
8000557a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000557e:	fa c9 f9 45 	sub	r9,sp,-1723
80005582:	2f f8       	sub	r8,-1
80005584:	87 09       	st.w	r3[0x0],r9
80005586:	fb 48 06 90 	st.w	sp[1680],r8
8000558a:	30 19       	mov	r9,1
8000558c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005590:	87 19       	st.w	r3[0x4],r9
80005592:	2f f8       	sub	r8,-1
80005594:	fb 48 06 8c 	st.w	sp[1676],r8
80005598:	58 78       	cp.w	r8,7
8000559a:	e0 89 00 04 	brgt	800055a2 <_vfprintf_r+0x1762>
8000559e:	2f 83       	sub	r3,-8
800055a0:	c0 b8       	rjmp	800055b6 <_vfprintf_r+0x1776>
800055a2:	fa ca f9 78 	sub	r10,sp,-1672
800055a6:	02 9b       	mov	r11,r1
800055a8:	08 9c       	mov	r12,r4
800055aa:	fe b0 f4 3d 	rcall	80003e24 <__sprint_r>
800055ae:	e0 81 03 c8 	brne	80005d3e <_vfprintf_r+0x1efe>
800055b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800055b6:	40 fc       	lddsp	r12,sp[0x3c]
800055b8:	58 0c       	cp.w	r12,0
800055ba:	c1 f0       	breq	800055f8 <_vfprintf_r+0x17b8>
800055bc:	fa f8 06 90 	ld.w	r8,sp[1680]
800055c0:	fa c9 f9 48 	sub	r9,sp,-1720
800055c4:	2f e8       	sub	r8,-2
800055c6:	87 09       	st.w	r3[0x0],r9
800055c8:	fb 48 06 90 	st.w	sp[1680],r8
800055cc:	30 29       	mov	r9,2
800055ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055d2:	87 19       	st.w	r3[0x4],r9
800055d4:	2f f8       	sub	r8,-1
800055d6:	fb 48 06 8c 	st.w	sp[1676],r8
800055da:	58 78       	cp.w	r8,7
800055dc:	e0 89 00 04 	brgt	800055e4 <_vfprintf_r+0x17a4>
800055e0:	2f 83       	sub	r3,-8
800055e2:	c0 b8       	rjmp	800055f8 <_vfprintf_r+0x17b8>
800055e4:	fa ca f9 78 	sub	r10,sp,-1672
800055e8:	02 9b       	mov	r11,r1
800055ea:	08 9c       	mov	r12,r4
800055ec:	fe b0 f4 1c 	rcall	80003e24 <__sprint_r>
800055f0:	e0 81 03 a7 	brne	80005d3e <_vfprintf_r+0x1efe>
800055f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800055f8:	40 9b       	lddsp	r11,sp[0x24]
800055fa:	e0 4b 00 80 	cp.w	r11,128
800055fe:	c4 71       	brne	8000568c <_vfprintf_r+0x184c>
80005600:	40 8a       	lddsp	r10,sp[0x20]
80005602:	40 39       	lddsp	r9,sp[0xc]
80005604:	12 1a       	sub	r10,r9
80005606:	50 4a       	stdsp	sp[0x10],r10
80005608:	58 0a       	cp.w	r10,0
8000560a:	e0 89 00 20 	brgt	8000564a <_vfprintf_r+0x180a>
8000560e:	c3 f8       	rjmp	8000568c <_vfprintf_r+0x184c>
80005610:	2f 09       	sub	r9,-16
80005612:	2f f8       	sub	r8,-1
80005614:	fe ce bf 2c 	sub	lr,pc,-16596
80005618:	31 0c       	mov	r12,16
8000561a:	fb 49 06 90 	st.w	sp[1680],r9
8000561e:	87 0e       	st.w	r3[0x0],lr
80005620:	87 1c       	st.w	r3[0x4],r12
80005622:	fb 48 06 8c 	st.w	sp[1676],r8
80005626:	58 78       	cp.w	r8,7
80005628:	e0 89 00 04 	brgt	80005630 <_vfprintf_r+0x17f0>
8000562c:	2f 83       	sub	r3,-8
8000562e:	c0 b8       	rjmp	80005644 <_vfprintf_r+0x1804>
80005630:	fa ca f9 78 	sub	r10,sp,-1672
80005634:	02 9b       	mov	r11,r1
80005636:	08 9c       	mov	r12,r4
80005638:	fe b0 f3 f6 	rcall	80003e24 <__sprint_r>
8000563c:	e0 81 03 81 	brne	80005d3e <_vfprintf_r+0x1efe>
80005640:	fa c3 f9 e0 	sub	r3,sp,-1568
80005644:	40 4b       	lddsp	r11,sp[0x10]
80005646:	21 0b       	sub	r11,16
80005648:	50 4b       	stdsp	sp[0x10],r11
8000564a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000564e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005652:	fe ca bf 6a 	sub	r10,pc,-16534
80005656:	40 4e       	lddsp	lr,sp[0x10]
80005658:	59 0e       	cp.w	lr,16
8000565a:	fe 99 ff db 	brgt	80005610 <_vfprintf_r+0x17d0>
8000565e:	1c 09       	add	r9,lr
80005660:	2f f8       	sub	r8,-1
80005662:	87 0a       	st.w	r3[0x0],r10
80005664:	fb 49 06 90 	st.w	sp[1680],r9
80005668:	87 1e       	st.w	r3[0x4],lr
8000566a:	fb 48 06 8c 	st.w	sp[1676],r8
8000566e:	58 78       	cp.w	r8,7
80005670:	e0 89 00 04 	brgt	80005678 <_vfprintf_r+0x1838>
80005674:	2f 83       	sub	r3,-8
80005676:	c0 b8       	rjmp	8000568c <_vfprintf_r+0x184c>
80005678:	fa ca f9 78 	sub	r10,sp,-1672
8000567c:	02 9b       	mov	r11,r1
8000567e:	08 9c       	mov	r12,r4
80005680:	fe b0 f3 d2 	rcall	80003e24 <__sprint_r>
80005684:	e0 81 03 5d 	brne	80005d3e <_vfprintf_r+0x1efe>
80005688:	fa c3 f9 e0 	sub	r3,sp,-1568
8000568c:	40 2c       	lddsp	r12,sp[0x8]
8000568e:	04 1c       	sub	r12,r2
80005690:	50 2c       	stdsp	sp[0x8],r12
80005692:	58 0c       	cp.w	r12,0
80005694:	e0 89 00 20 	brgt	800056d4 <_vfprintf_r+0x1894>
80005698:	c3 f8       	rjmp	80005716 <_vfprintf_r+0x18d6>
8000569a:	2f 09       	sub	r9,-16
8000569c:	2f f8       	sub	r8,-1
8000569e:	fe cb bf b6 	sub	r11,pc,-16458
800056a2:	31 0a       	mov	r10,16
800056a4:	fb 49 06 90 	st.w	sp[1680],r9
800056a8:	87 0b       	st.w	r3[0x0],r11
800056aa:	87 1a       	st.w	r3[0x4],r10
800056ac:	fb 48 06 8c 	st.w	sp[1676],r8
800056b0:	58 78       	cp.w	r8,7
800056b2:	e0 89 00 04 	brgt	800056ba <_vfprintf_r+0x187a>
800056b6:	2f 83       	sub	r3,-8
800056b8:	c0 b8       	rjmp	800056ce <_vfprintf_r+0x188e>
800056ba:	fa ca f9 78 	sub	r10,sp,-1672
800056be:	02 9b       	mov	r11,r1
800056c0:	08 9c       	mov	r12,r4
800056c2:	fe b0 f3 b1 	rcall	80003e24 <__sprint_r>
800056c6:	e0 81 03 3c 	brne	80005d3e <_vfprintf_r+0x1efe>
800056ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800056ce:	40 29       	lddsp	r9,sp[0x8]
800056d0:	21 09       	sub	r9,16
800056d2:	50 29       	stdsp	sp[0x8],r9
800056d4:	fa f9 06 90 	ld.w	r9,sp[1680]
800056d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056dc:	fe ca bf f4 	sub	r10,pc,-16396
800056e0:	40 2e       	lddsp	lr,sp[0x8]
800056e2:	59 0e       	cp.w	lr,16
800056e4:	fe 99 ff db 	brgt	8000569a <_vfprintf_r+0x185a>
800056e8:	1c 09       	add	r9,lr
800056ea:	2f f8       	sub	r8,-1
800056ec:	87 0a       	st.w	r3[0x0],r10
800056ee:	fb 49 06 90 	st.w	sp[1680],r9
800056f2:	87 1e       	st.w	r3[0x4],lr
800056f4:	fb 48 06 8c 	st.w	sp[1676],r8
800056f8:	58 78       	cp.w	r8,7
800056fa:	e0 89 00 04 	brgt	80005702 <_vfprintf_r+0x18c2>
800056fe:	2f 83       	sub	r3,-8
80005700:	c0 b8       	rjmp	80005716 <_vfprintf_r+0x18d6>
80005702:	fa ca f9 78 	sub	r10,sp,-1672
80005706:	02 9b       	mov	r11,r1
80005708:	08 9c       	mov	r12,r4
8000570a:	fe b0 f3 8d 	rcall	80003e24 <__sprint_r>
8000570e:	e0 81 03 18 	brne	80005d3e <_vfprintf_r+0x1efe>
80005712:	fa c3 f9 e0 	sub	r3,sp,-1568
80005716:	ed b5 00 08 	bld	r5,0x8
8000571a:	c0 b0       	breq	80005730 <_vfprintf_r+0x18f0>
8000571c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005720:	87 12       	st.w	r3[0x4],r2
80005722:	87 06       	st.w	r3[0x0],r6
80005724:	f0 02 00 02 	add	r2,r8,r2
80005728:	fb 42 06 90 	st.w	sp[1680],r2
8000572c:	e0 8f 01 d4 	bral	80005ad4 <_vfprintf_r+0x1c94>
80005730:	e0 40 00 65 	cp.w	r0,101
80005734:	e0 8a 01 d6 	brle	80005ae0 <_vfprintf_r+0x1ca0>
80005738:	30 08       	mov	r8,0
8000573a:	30 09       	mov	r9,0
8000573c:	40 5b       	lddsp	r11,sp[0x14]
8000573e:	40 7a       	lddsp	r10,sp[0x1c]
80005740:	e0 a0 17 ed 	rcall	8000871a <__avr32_f64_cmp_eq>
80005744:	c7 90       	breq	80005836 <_vfprintf_r+0x19f6>
80005746:	fa f8 06 90 	ld.w	r8,sp[1680]
8000574a:	fe c9 c3 ca 	sub	r9,pc,-15414
8000574e:	2f f8       	sub	r8,-1
80005750:	87 09       	st.w	r3[0x0],r9
80005752:	fb 48 06 90 	st.w	sp[1680],r8
80005756:	30 19       	mov	r9,1
80005758:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000575c:	87 19       	st.w	r3[0x4],r9
8000575e:	2f f8       	sub	r8,-1
80005760:	fb 48 06 8c 	st.w	sp[1676],r8
80005764:	58 78       	cp.w	r8,7
80005766:	e0 89 00 05 	brgt	80005770 <_vfprintf_r+0x1930>
8000576a:	2f 83       	sub	r3,-8
8000576c:	c0 c8       	rjmp	80005784 <_vfprintf_r+0x1944>
8000576e:	d7 03       	nop
80005770:	fa ca f9 78 	sub	r10,sp,-1672
80005774:	02 9b       	mov	r11,r1
80005776:	08 9c       	mov	r12,r4
80005778:	fe b0 f3 56 	rcall	80003e24 <__sprint_r>
8000577c:	e0 81 02 e1 	brne	80005d3e <_vfprintf_r+0x1efe>
80005780:	fa c3 f9 e0 	sub	r3,sp,-1568
80005784:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005788:	40 6c       	lddsp	r12,sp[0x18]
8000578a:	18 38       	cp.w	r8,r12
8000578c:	c0 55       	brlt	80005796 <_vfprintf_r+0x1956>
8000578e:	ed b5 00 00 	bld	r5,0x0
80005792:	e0 81 02 6b 	brne	80005c68 <_vfprintf_r+0x1e28>
80005796:	fa f8 06 90 	ld.w	r8,sp[1680]
8000579a:	2f f8       	sub	r8,-1
8000579c:	40 cb       	lddsp	r11,sp[0x30]
8000579e:	fb 48 06 90 	st.w	sp[1680],r8
800057a2:	30 19       	mov	r9,1
800057a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057a8:	87 0b       	st.w	r3[0x0],r11
800057aa:	2f f8       	sub	r8,-1
800057ac:	87 19       	st.w	r3[0x4],r9
800057ae:	fb 48 06 8c 	st.w	sp[1676],r8
800057b2:	58 78       	cp.w	r8,7
800057b4:	e0 89 00 04 	brgt	800057bc <_vfprintf_r+0x197c>
800057b8:	2f 83       	sub	r3,-8
800057ba:	c0 b8       	rjmp	800057d0 <_vfprintf_r+0x1990>
800057bc:	fa ca f9 78 	sub	r10,sp,-1672
800057c0:	02 9b       	mov	r11,r1
800057c2:	08 9c       	mov	r12,r4
800057c4:	fe b0 f3 30 	rcall	80003e24 <__sprint_r>
800057c8:	e0 81 02 bb 	brne	80005d3e <_vfprintf_r+0x1efe>
800057cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800057d0:	40 66       	lddsp	r6,sp[0x18]
800057d2:	20 16       	sub	r6,1
800057d4:	58 06       	cp.w	r6,0
800057d6:	e0 89 00 1d 	brgt	80005810 <_vfprintf_r+0x19d0>
800057da:	e0 8f 02 47 	bral	80005c68 <_vfprintf_r+0x1e28>
800057de:	2f 09       	sub	r9,-16
800057e0:	2f f8       	sub	r8,-1
800057e2:	fb 49 06 90 	st.w	sp[1680],r9
800057e6:	87 02       	st.w	r3[0x0],r2
800057e8:	87 10       	st.w	r3[0x4],r0
800057ea:	fb 48 06 8c 	st.w	sp[1676],r8
800057ee:	58 78       	cp.w	r8,7
800057f0:	e0 89 00 04 	brgt	800057f8 <_vfprintf_r+0x19b8>
800057f4:	2f 83       	sub	r3,-8
800057f6:	c0 b8       	rjmp	8000580c <_vfprintf_r+0x19cc>
800057f8:	fa ca f9 78 	sub	r10,sp,-1672
800057fc:	02 9b       	mov	r11,r1
800057fe:	08 9c       	mov	r12,r4
80005800:	fe b0 f3 12 	rcall	80003e24 <__sprint_r>
80005804:	e0 81 02 9d 	brne	80005d3e <_vfprintf_r+0x1efe>
80005808:	fa c3 f9 e0 	sub	r3,sp,-1568
8000580c:	21 06       	sub	r6,16
8000580e:	c0 48       	rjmp	80005816 <_vfprintf_r+0x19d6>
80005810:	fe c2 c1 28 	sub	r2,pc,-16088
80005814:	31 00       	mov	r0,16
80005816:	fa f9 06 90 	ld.w	r9,sp[1680]
8000581a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000581e:	fe ca c1 36 	sub	r10,pc,-16074
80005822:	59 06       	cp.w	r6,16
80005824:	fe 99 ff dd 	brgt	800057de <_vfprintf_r+0x199e>
80005828:	0c 09       	add	r9,r6
8000582a:	87 0a       	st.w	r3[0x0],r10
8000582c:	fb 49 06 90 	st.w	sp[1680],r9
80005830:	2f f8       	sub	r8,-1
80005832:	87 16       	st.w	r3[0x4],r6
80005834:	c5 39       	rjmp	80005ada <_vfprintf_r+0x1c9a>
80005836:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000583a:	58 0a       	cp.w	r10,0
8000583c:	e0 89 00 92 	brgt	80005960 <_vfprintf_r+0x1b20>
80005840:	fa f8 06 90 	ld.w	r8,sp[1680]
80005844:	fe c9 c4 c4 	sub	r9,pc,-15164
80005848:	2f f8       	sub	r8,-1
8000584a:	87 09       	st.w	r3[0x0],r9
8000584c:	fb 48 06 90 	st.w	sp[1680],r8
80005850:	30 19       	mov	r9,1
80005852:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005856:	87 19       	st.w	r3[0x4],r9
80005858:	2f f8       	sub	r8,-1
8000585a:	fb 48 06 8c 	st.w	sp[1676],r8
8000585e:	58 78       	cp.w	r8,7
80005860:	e0 89 00 04 	brgt	80005868 <_vfprintf_r+0x1a28>
80005864:	2f 83       	sub	r3,-8
80005866:	c0 b8       	rjmp	8000587c <_vfprintf_r+0x1a3c>
80005868:	fa ca f9 78 	sub	r10,sp,-1672
8000586c:	02 9b       	mov	r11,r1
8000586e:	08 9c       	mov	r12,r4
80005870:	fe b0 f2 da 	rcall	80003e24 <__sprint_r>
80005874:	e0 81 02 65 	brne	80005d3e <_vfprintf_r+0x1efe>
80005878:	fa c3 f9 e0 	sub	r3,sp,-1568
8000587c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005880:	58 08       	cp.w	r8,0
80005882:	c0 81       	brne	80005892 <_vfprintf_r+0x1a52>
80005884:	40 6a       	lddsp	r10,sp[0x18]
80005886:	58 0a       	cp.w	r10,0
80005888:	c0 51       	brne	80005892 <_vfprintf_r+0x1a52>
8000588a:	ed b5 00 00 	bld	r5,0x0
8000588e:	e0 81 01 ed 	brne	80005c68 <_vfprintf_r+0x1e28>
80005892:	40 c9       	lddsp	r9,sp[0x30]
80005894:	fa f8 06 90 	ld.w	r8,sp[1680]
80005898:	2f f8       	sub	r8,-1
8000589a:	87 09       	st.w	r3[0x0],r9
8000589c:	fb 48 06 90 	st.w	sp[1680],r8
800058a0:	30 19       	mov	r9,1
800058a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058a6:	87 19       	st.w	r3[0x4],r9
800058a8:	2f f8       	sub	r8,-1
800058aa:	fb 48 06 8c 	st.w	sp[1676],r8
800058ae:	58 78       	cp.w	r8,7
800058b0:	e0 89 00 04 	brgt	800058b8 <_vfprintf_r+0x1a78>
800058b4:	2f 83       	sub	r3,-8
800058b6:	c0 b8       	rjmp	800058cc <_vfprintf_r+0x1a8c>
800058b8:	fa ca f9 78 	sub	r10,sp,-1672
800058bc:	02 9b       	mov	r11,r1
800058be:	08 9c       	mov	r12,r4
800058c0:	fe b0 f2 b2 	rcall	80003e24 <__sprint_r>
800058c4:	e0 81 02 3d 	brne	80005d3e <_vfprintf_r+0x1efe>
800058c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800058cc:	fa f2 06 ac 	ld.w	r2,sp[1708]
800058d0:	5c 32       	neg	r2
800058d2:	58 02       	cp.w	r2,0
800058d4:	e0 89 00 1d 	brgt	8000590e <_vfprintf_r+0x1ace>
800058d8:	c3 d8       	rjmp	80005952 <_vfprintf_r+0x1b12>
800058da:	2f 09       	sub	r9,-16
800058dc:	2f f8       	sub	r8,-1
800058de:	31 0e       	mov	lr,16
800058e0:	fb 49 06 90 	st.w	sp[1680],r9
800058e4:	87 00       	st.w	r3[0x0],r0
800058e6:	87 1e       	st.w	r3[0x4],lr
800058e8:	fb 48 06 8c 	st.w	sp[1676],r8
800058ec:	58 78       	cp.w	r8,7
800058ee:	e0 89 00 04 	brgt	800058f6 <_vfprintf_r+0x1ab6>
800058f2:	2f 83       	sub	r3,-8
800058f4:	c0 b8       	rjmp	8000590a <_vfprintf_r+0x1aca>
800058f6:	fa ca f9 78 	sub	r10,sp,-1672
800058fa:	02 9b       	mov	r11,r1
800058fc:	08 9c       	mov	r12,r4
800058fe:	fe b0 f2 93 	rcall	80003e24 <__sprint_r>
80005902:	e0 81 02 1e 	brne	80005d3e <_vfprintf_r+0x1efe>
80005906:	fa c3 f9 e0 	sub	r3,sp,-1568
8000590a:	21 02       	sub	r2,16
8000590c:	c0 38       	rjmp	80005912 <_vfprintf_r+0x1ad2>
8000590e:	fe c0 c2 26 	sub	r0,pc,-15834
80005912:	fa f9 06 90 	ld.w	r9,sp[1680]
80005916:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000591a:	fe ca c2 32 	sub	r10,pc,-15822
8000591e:	59 02       	cp.w	r2,16
80005920:	fe 99 ff dd 	brgt	800058da <_vfprintf_r+0x1a9a>
80005924:	04 09       	add	r9,r2
80005926:	2f f8       	sub	r8,-1
80005928:	87 0a       	st.w	r3[0x0],r10
8000592a:	fb 49 06 90 	st.w	sp[1680],r9
8000592e:	87 12       	st.w	r3[0x4],r2
80005930:	fb 48 06 8c 	st.w	sp[1676],r8
80005934:	58 78       	cp.w	r8,7
80005936:	e0 89 00 04 	brgt	8000593e <_vfprintf_r+0x1afe>
8000593a:	2f 83       	sub	r3,-8
8000593c:	c0 b8       	rjmp	80005952 <_vfprintf_r+0x1b12>
8000593e:	fa ca f9 78 	sub	r10,sp,-1672
80005942:	02 9b       	mov	r11,r1
80005944:	08 9c       	mov	r12,r4
80005946:	fe b0 f2 6f 	rcall	80003e24 <__sprint_r>
8000594a:	e0 81 01 fa 	brne	80005d3e <_vfprintf_r+0x1efe>
8000594e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005952:	40 6c       	lddsp	r12,sp[0x18]
80005954:	fa f8 06 90 	ld.w	r8,sp[1680]
80005958:	87 06       	st.w	r3[0x0],r6
8000595a:	87 1c       	st.w	r3[0x4],r12
8000595c:	18 08       	add	r8,r12
8000595e:	cb 98       	rjmp	80005ad0 <_vfprintf_r+0x1c90>
80005960:	fa f9 06 90 	ld.w	r9,sp[1680]
80005964:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005968:	40 6b       	lddsp	r11,sp[0x18]
8000596a:	16 3a       	cp.w	r10,r11
8000596c:	c6 f5       	brlt	80005a4a <_vfprintf_r+0x1c0a>
8000596e:	16 09       	add	r9,r11
80005970:	2f f8       	sub	r8,-1
80005972:	87 06       	st.w	r3[0x0],r6
80005974:	fb 49 06 90 	st.w	sp[1680],r9
80005978:	87 1b       	st.w	r3[0x4],r11
8000597a:	fb 48 06 8c 	st.w	sp[1676],r8
8000597e:	58 78       	cp.w	r8,7
80005980:	e0 89 00 04 	brgt	80005988 <_vfprintf_r+0x1b48>
80005984:	2f 83       	sub	r3,-8
80005986:	c0 b8       	rjmp	8000599c <_vfprintf_r+0x1b5c>
80005988:	fa ca f9 78 	sub	r10,sp,-1672
8000598c:	02 9b       	mov	r11,r1
8000598e:	08 9c       	mov	r12,r4
80005990:	fe b0 f2 4a 	rcall	80003e24 <__sprint_r>
80005994:	e0 81 01 d5 	brne	80005d3e <_vfprintf_r+0x1efe>
80005998:	fa c3 f9 e0 	sub	r3,sp,-1568
8000599c:	fa f6 06 ac 	ld.w	r6,sp[1708]
800059a0:	40 6a       	lddsp	r10,sp[0x18]
800059a2:	14 16       	sub	r6,r10
800059a4:	58 06       	cp.w	r6,0
800059a6:	e0 89 00 1c 	brgt	800059de <_vfprintf_r+0x1b9e>
800059aa:	c3 d8       	rjmp	80005a24 <_vfprintf_r+0x1be4>
800059ac:	2f 09       	sub	r9,-16
800059ae:	2f f8       	sub	r8,-1
800059b0:	fb 49 06 90 	st.w	sp[1680],r9
800059b4:	87 02       	st.w	r3[0x0],r2
800059b6:	87 10       	st.w	r3[0x4],r0
800059b8:	fb 48 06 8c 	st.w	sp[1676],r8
800059bc:	58 78       	cp.w	r8,7
800059be:	e0 89 00 04 	brgt	800059c6 <_vfprintf_r+0x1b86>
800059c2:	2f 83       	sub	r3,-8
800059c4:	c0 b8       	rjmp	800059da <_vfprintf_r+0x1b9a>
800059c6:	fa ca f9 78 	sub	r10,sp,-1672
800059ca:	02 9b       	mov	r11,r1
800059cc:	08 9c       	mov	r12,r4
800059ce:	fe b0 f2 2b 	rcall	80003e24 <__sprint_r>
800059d2:	e0 81 01 b6 	brne	80005d3e <_vfprintf_r+0x1efe>
800059d6:	fa c3 f9 e0 	sub	r3,sp,-1568
800059da:	21 06       	sub	r6,16
800059dc:	c0 48       	rjmp	800059e4 <_vfprintf_r+0x1ba4>
800059de:	fe c2 c2 f6 	sub	r2,pc,-15626
800059e2:	31 00       	mov	r0,16
800059e4:	fa f9 06 90 	ld.w	r9,sp[1680]
800059e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059ec:	fe ca c3 04 	sub	r10,pc,-15612
800059f0:	59 06       	cp.w	r6,16
800059f2:	fe 99 ff dd 	brgt	800059ac <_vfprintf_r+0x1b6c>
800059f6:	0c 09       	add	r9,r6
800059f8:	2f f8       	sub	r8,-1
800059fa:	87 0a       	st.w	r3[0x0],r10
800059fc:	fb 49 06 90 	st.w	sp[1680],r9
80005a00:	87 16       	st.w	r3[0x4],r6
80005a02:	fb 48 06 8c 	st.w	sp[1676],r8
80005a06:	58 78       	cp.w	r8,7
80005a08:	e0 89 00 04 	brgt	80005a10 <_vfprintf_r+0x1bd0>
80005a0c:	2f 83       	sub	r3,-8
80005a0e:	c0 b8       	rjmp	80005a24 <_vfprintf_r+0x1be4>
80005a10:	fa ca f9 78 	sub	r10,sp,-1672
80005a14:	02 9b       	mov	r11,r1
80005a16:	08 9c       	mov	r12,r4
80005a18:	fe b0 f2 06 	rcall	80003e24 <__sprint_r>
80005a1c:	e0 81 01 91 	brne	80005d3e <_vfprintf_r+0x1efe>
80005a20:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a24:	ed b5 00 00 	bld	r5,0x0
80005a28:	e0 81 01 20 	brne	80005c68 <_vfprintf_r+0x1e28>
80005a2c:	40 c9       	lddsp	r9,sp[0x30]
80005a2e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a32:	2f f8       	sub	r8,-1
80005a34:	87 09       	st.w	r3[0x0],r9
80005a36:	fb 48 06 90 	st.w	sp[1680],r8
80005a3a:	30 19       	mov	r9,1
80005a3c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a40:	87 19       	st.w	r3[0x4],r9
80005a42:	2f f8       	sub	r8,-1
80005a44:	fb 48 06 8c 	st.w	sp[1676],r8
80005a48:	c0 29       	rjmp	80005c4c <_vfprintf_r+0x1e0c>
80005a4a:	14 09       	add	r9,r10
80005a4c:	2f f8       	sub	r8,-1
80005a4e:	fb 49 06 90 	st.w	sp[1680],r9
80005a52:	87 06       	st.w	r3[0x0],r6
80005a54:	87 1a       	st.w	r3[0x4],r10
80005a56:	fb 48 06 8c 	st.w	sp[1676],r8
80005a5a:	58 78       	cp.w	r8,7
80005a5c:	e0 89 00 04 	brgt	80005a64 <_vfprintf_r+0x1c24>
80005a60:	2f 83       	sub	r3,-8
80005a62:	c0 b8       	rjmp	80005a78 <_vfprintf_r+0x1c38>
80005a64:	fa ca f9 78 	sub	r10,sp,-1672
80005a68:	02 9b       	mov	r11,r1
80005a6a:	08 9c       	mov	r12,r4
80005a6c:	fe b0 f1 dc 	rcall	80003e24 <__sprint_r>
80005a70:	e0 81 01 67 	brne	80005d3e <_vfprintf_r+0x1efe>
80005a74:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a78:	40 c8       	lddsp	r8,sp[0x30]
80005a7a:	87 08       	st.w	r3[0x0],r8
80005a7c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a80:	2f f8       	sub	r8,-1
80005a82:	30 19       	mov	r9,1
80005a84:	fb 48 06 90 	st.w	sp[1680],r8
80005a88:	87 19       	st.w	r3[0x4],r9
80005a8a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a8e:	2f f8       	sub	r8,-1
80005a90:	fb 48 06 8c 	st.w	sp[1676],r8
80005a94:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005a98:	58 78       	cp.w	r8,7
80005a9a:	e0 89 00 04 	brgt	80005aa2 <_vfprintf_r+0x1c62>
80005a9e:	2f 83       	sub	r3,-8
80005aa0:	c0 b8       	rjmp	80005ab6 <_vfprintf_r+0x1c76>
80005aa2:	fa ca f9 78 	sub	r10,sp,-1672
80005aa6:	02 9b       	mov	r11,r1
80005aa8:	08 9c       	mov	r12,r4
80005aaa:	fe b0 f1 bd 	rcall	80003e24 <__sprint_r>
80005aae:	e0 81 01 48 	brne	80005d3e <_vfprintf_r+0x1efe>
80005ab2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ab6:	04 06       	add	r6,r2
80005ab8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005abc:	87 06       	st.w	r3[0x0],r6
80005abe:	fa f9 06 90 	ld.w	r9,sp[1680]
80005ac2:	40 66       	lddsp	r6,sp[0x18]
80005ac4:	40 6e       	lddsp	lr,sp[0x18]
80005ac6:	10 16       	sub	r6,r8
80005ac8:	f2 08 01 08 	sub	r8,r9,r8
80005acc:	87 16       	st.w	r3[0x4],r6
80005ace:	1c 08       	add	r8,lr
80005ad0:	fb 48 06 90 	st.w	sp[1680],r8
80005ad4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ad8:	2f f8       	sub	r8,-1
80005ada:	fb 48 06 8c 	st.w	sp[1676],r8
80005ade:	cb 78       	rjmp	80005c4c <_vfprintf_r+0x1e0c>
80005ae0:	40 6c       	lddsp	r12,sp[0x18]
80005ae2:	58 1c       	cp.w	r12,1
80005ae4:	e0 89 00 06 	brgt	80005af0 <_vfprintf_r+0x1cb0>
80005ae8:	ed b5 00 00 	bld	r5,0x0
80005aec:	e0 81 00 85 	brne	80005bf6 <_vfprintf_r+0x1db6>
80005af0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005af4:	2f f8       	sub	r8,-1
80005af6:	30 19       	mov	r9,1
80005af8:	fb 48 06 90 	st.w	sp[1680],r8
80005afc:	87 06       	st.w	r3[0x0],r6
80005afe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b02:	87 19       	st.w	r3[0x4],r9
80005b04:	2f f8       	sub	r8,-1
80005b06:	fb 48 06 8c 	st.w	sp[1676],r8
80005b0a:	58 78       	cp.w	r8,7
80005b0c:	e0 89 00 04 	brgt	80005b14 <_vfprintf_r+0x1cd4>
80005b10:	2f 83       	sub	r3,-8
80005b12:	c0 b8       	rjmp	80005b28 <_vfprintf_r+0x1ce8>
80005b14:	fa ca f9 78 	sub	r10,sp,-1672
80005b18:	02 9b       	mov	r11,r1
80005b1a:	08 9c       	mov	r12,r4
80005b1c:	fe b0 f1 84 	rcall	80003e24 <__sprint_r>
80005b20:	e0 81 01 0f 	brne	80005d3e <_vfprintf_r+0x1efe>
80005b24:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b28:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b2c:	2f f8       	sub	r8,-1
80005b2e:	40 cb       	lddsp	r11,sp[0x30]
80005b30:	fb 48 06 90 	st.w	sp[1680],r8
80005b34:	30 19       	mov	r9,1
80005b36:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b3a:	87 0b       	st.w	r3[0x0],r11
80005b3c:	2f f8       	sub	r8,-1
80005b3e:	87 19       	st.w	r3[0x4],r9
80005b40:	fb 48 06 8c 	st.w	sp[1676],r8
80005b44:	58 78       	cp.w	r8,7
80005b46:	e0 89 00 05 	brgt	80005b50 <_vfprintf_r+0x1d10>
80005b4a:	2f 83       	sub	r3,-8
80005b4c:	c0 c8       	rjmp	80005b64 <_vfprintf_r+0x1d24>
80005b4e:	d7 03       	nop
80005b50:	fa ca f9 78 	sub	r10,sp,-1672
80005b54:	02 9b       	mov	r11,r1
80005b56:	08 9c       	mov	r12,r4
80005b58:	fe b0 f1 66 	rcall	80003e24 <__sprint_r>
80005b5c:	e0 81 00 f1 	brne	80005d3e <_vfprintf_r+0x1efe>
80005b60:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b64:	30 08       	mov	r8,0
80005b66:	30 09       	mov	r9,0
80005b68:	40 5b       	lddsp	r11,sp[0x14]
80005b6a:	40 7a       	lddsp	r10,sp[0x1c]
80005b6c:	e0 a0 15 d7 	rcall	8000871a <__avr32_f64_cmp_eq>
80005b70:	40 68       	lddsp	r8,sp[0x18]
80005b72:	20 18       	sub	r8,1
80005b74:	58 0c       	cp.w	r12,0
80005b76:	c0 d1       	brne	80005b90 <_vfprintf_r+0x1d50>
80005b78:	2f f6       	sub	r6,-1
80005b7a:	87 18       	st.w	r3[0x4],r8
80005b7c:	87 06       	st.w	r3[0x0],r6
80005b7e:	fa f6 06 90 	ld.w	r6,sp[1680]
80005b82:	10 06       	add	r6,r8
80005b84:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b88:	fb 46 06 90 	st.w	sp[1680],r6
80005b8c:	2f f8       	sub	r8,-1
80005b8e:	c3 18       	rjmp	80005bf0 <_vfprintf_r+0x1db0>
80005b90:	10 96       	mov	r6,r8
80005b92:	58 08       	cp.w	r8,0
80005b94:	e0 89 00 1c 	brgt	80005bcc <_vfprintf_r+0x1d8c>
80005b98:	c4 b8       	rjmp	80005c2e <_vfprintf_r+0x1dee>
80005b9a:	2f 09       	sub	r9,-16
80005b9c:	2f f8       	sub	r8,-1
80005b9e:	fb 49 06 90 	st.w	sp[1680],r9
80005ba2:	87 02       	st.w	r3[0x0],r2
80005ba4:	87 10       	st.w	r3[0x4],r0
80005ba6:	fb 48 06 8c 	st.w	sp[1676],r8
80005baa:	58 78       	cp.w	r8,7
80005bac:	e0 89 00 04 	brgt	80005bb4 <_vfprintf_r+0x1d74>
80005bb0:	2f 83       	sub	r3,-8
80005bb2:	c0 b8       	rjmp	80005bc8 <_vfprintf_r+0x1d88>
80005bb4:	fa ca f9 78 	sub	r10,sp,-1672
80005bb8:	02 9b       	mov	r11,r1
80005bba:	08 9c       	mov	r12,r4
80005bbc:	fe b0 f1 34 	rcall	80003e24 <__sprint_r>
80005bc0:	e0 81 00 bf 	brne	80005d3e <_vfprintf_r+0x1efe>
80005bc4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bc8:	21 06       	sub	r6,16
80005bca:	c0 48       	rjmp	80005bd2 <_vfprintf_r+0x1d92>
80005bcc:	fe c2 c4 e4 	sub	r2,pc,-15132
80005bd0:	31 00       	mov	r0,16
80005bd2:	fa f9 06 90 	ld.w	r9,sp[1680]
80005bd6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bda:	fe ca c4 f2 	sub	r10,pc,-15118
80005bde:	59 06       	cp.w	r6,16
80005be0:	fe 99 ff dd 	brgt	80005b9a <_vfprintf_r+0x1d5a>
80005be4:	0c 09       	add	r9,r6
80005be6:	87 0a       	st.w	r3[0x0],r10
80005be8:	fb 49 06 90 	st.w	sp[1680],r9
80005bec:	2f f8       	sub	r8,-1
80005bee:	87 16       	st.w	r3[0x4],r6
80005bf0:	fb 48 06 8c 	st.w	sp[1676],r8
80005bf4:	c0 e8       	rjmp	80005c10 <_vfprintf_r+0x1dd0>
80005bf6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bfa:	2f f8       	sub	r8,-1
80005bfc:	30 19       	mov	r9,1
80005bfe:	fb 48 06 90 	st.w	sp[1680],r8
80005c02:	87 06       	st.w	r3[0x0],r6
80005c04:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c08:	87 19       	st.w	r3[0x4],r9
80005c0a:	2f f8       	sub	r8,-1
80005c0c:	fb 48 06 8c 	st.w	sp[1676],r8
80005c10:	58 78       	cp.w	r8,7
80005c12:	e0 89 00 04 	brgt	80005c1a <_vfprintf_r+0x1dda>
80005c16:	2f 83       	sub	r3,-8
80005c18:	c0 b8       	rjmp	80005c2e <_vfprintf_r+0x1dee>
80005c1a:	fa ca f9 78 	sub	r10,sp,-1672
80005c1e:	02 9b       	mov	r11,r1
80005c20:	08 9c       	mov	r12,r4
80005c22:	fe b0 f1 01 	rcall	80003e24 <__sprint_r>
80005c26:	e0 81 00 8c 	brne	80005d3e <_vfprintf_r+0x1efe>
80005c2a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c2e:	40 ea       	lddsp	r10,sp[0x38]
80005c30:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c34:	14 08       	add	r8,r10
80005c36:	fa c9 f9 64 	sub	r9,sp,-1692
80005c3a:	fb 48 06 90 	st.w	sp[1680],r8
80005c3e:	87 1a       	st.w	r3[0x4],r10
80005c40:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c44:	87 09       	st.w	r3[0x0],r9
80005c46:	2f f8       	sub	r8,-1
80005c48:	fb 48 06 8c 	st.w	sp[1676],r8
80005c4c:	58 78       	cp.w	r8,7
80005c4e:	e0 89 00 04 	brgt	80005c56 <_vfprintf_r+0x1e16>
80005c52:	2f 83       	sub	r3,-8
80005c54:	c0 a8       	rjmp	80005c68 <_vfprintf_r+0x1e28>
80005c56:	fa ca f9 78 	sub	r10,sp,-1672
80005c5a:	02 9b       	mov	r11,r1
80005c5c:	08 9c       	mov	r12,r4
80005c5e:	fe b0 f0 e3 	rcall	80003e24 <__sprint_r>
80005c62:	c6 e1       	brne	80005d3e <_vfprintf_r+0x1efe>
80005c64:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c68:	e2 15 00 04 	andl	r5,0x4,COH
80005c6c:	c3 f0       	breq	80005cea <_vfprintf_r+0x1eaa>
80005c6e:	40 86       	lddsp	r6,sp[0x20]
80005c70:	40 39       	lddsp	r9,sp[0xc]
80005c72:	12 16       	sub	r6,r9
80005c74:	58 06       	cp.w	r6,0
80005c76:	e0 89 00 1a 	brgt	80005caa <_vfprintf_r+0x1e6a>
80005c7a:	c3 88       	rjmp	80005cea <_vfprintf_r+0x1eaa>
80005c7c:	2f 09       	sub	r9,-16
80005c7e:	2f f8       	sub	r8,-1
80005c80:	fb 49 06 90 	st.w	sp[1680],r9
80005c84:	87 05       	st.w	r3[0x0],r5
80005c86:	87 12       	st.w	r3[0x4],r2
80005c88:	fb 48 06 8c 	st.w	sp[1676],r8
80005c8c:	58 78       	cp.w	r8,7
80005c8e:	e0 89 00 04 	brgt	80005c96 <_vfprintf_r+0x1e56>
80005c92:	2f 83       	sub	r3,-8
80005c94:	c0 98       	rjmp	80005ca6 <_vfprintf_r+0x1e66>
80005c96:	00 9a       	mov	r10,r0
80005c98:	02 9b       	mov	r11,r1
80005c9a:	08 9c       	mov	r12,r4
80005c9c:	fe b0 f0 c4 	rcall	80003e24 <__sprint_r>
80005ca0:	c4 f1       	brne	80005d3e <_vfprintf_r+0x1efe>
80005ca2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ca6:	21 06       	sub	r6,16
80005ca8:	c0 68       	rjmp	80005cb4 <_vfprintf_r+0x1e74>
80005caa:	fe c5 c5 d2 	sub	r5,pc,-14894
80005cae:	31 02       	mov	r2,16
80005cb0:	fa c0 f9 78 	sub	r0,sp,-1672
80005cb4:	fa f9 06 90 	ld.w	r9,sp[1680]
80005cb8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cbc:	fe ca c5 e4 	sub	r10,pc,-14876
80005cc0:	59 06       	cp.w	r6,16
80005cc2:	fe 99 ff dd 	brgt	80005c7c <_vfprintf_r+0x1e3c>
80005cc6:	0c 09       	add	r9,r6
80005cc8:	2f f8       	sub	r8,-1
80005cca:	87 0a       	st.w	r3[0x0],r10
80005ccc:	87 16       	st.w	r3[0x4],r6
80005cce:	fb 49 06 90 	st.w	sp[1680],r9
80005cd2:	fb 48 06 8c 	st.w	sp[1676],r8
80005cd6:	58 78       	cp.w	r8,7
80005cd8:	e0 8a 00 09 	brle	80005cea <_vfprintf_r+0x1eaa>
80005cdc:	fa ca f9 78 	sub	r10,sp,-1672
80005ce0:	02 9b       	mov	r11,r1
80005ce2:	08 9c       	mov	r12,r4
80005ce4:	fe b0 f0 a0 	rcall	80003e24 <__sprint_r>
80005ce8:	c2 b1       	brne	80005d3e <_vfprintf_r+0x1efe>
80005cea:	40 bc       	lddsp	r12,sp[0x2c]
80005cec:	40 36       	lddsp	r6,sp[0xc]
80005cee:	40 8e       	lddsp	lr,sp[0x20]
80005cf0:	ec 0e 0c 48 	max	r8,r6,lr
80005cf4:	10 0c       	add	r12,r8
80005cf6:	50 bc       	stdsp	sp[0x2c],r12
80005cf8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005cfc:	58 08       	cp.w	r8,0
80005cfe:	c0 80       	breq	80005d0e <_vfprintf_r+0x1ece>
80005d00:	fa ca f9 78 	sub	r10,sp,-1672
80005d04:	02 9b       	mov	r11,r1
80005d06:	08 9c       	mov	r12,r4
80005d08:	fe b0 f0 8e 	rcall	80003e24 <__sprint_r>
80005d0c:	c1 91       	brne	80005d3e <_vfprintf_r+0x1efe>
80005d0e:	30 0b       	mov	r11,0
80005d10:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d14:	fb 4b 06 8c 	st.w	sp[1676],r11
80005d18:	fe 9f f1 22 	bral	80003f5c <_vfprintf_r+0x11c>
80005d1c:	08 95       	mov	r5,r4
80005d1e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d22:	58 08       	cp.w	r8,0
80005d24:	c0 80       	breq	80005d34 <_vfprintf_r+0x1ef4>
80005d26:	08 9c       	mov	r12,r4
80005d28:	fa ca f9 78 	sub	r10,sp,-1672
80005d2c:	02 9b       	mov	r11,r1
80005d2e:	fe b0 f0 7b 	rcall	80003e24 <__sprint_r>
80005d32:	c0 61       	brne	80005d3e <_vfprintf_r+0x1efe>
80005d34:	30 08       	mov	r8,0
80005d36:	fb 48 06 8c 	st.w	sp[1676],r8
80005d3a:	c0 28       	rjmp	80005d3e <_vfprintf_r+0x1efe>
80005d3c:	40 41       	lddsp	r1,sp[0x10]
80005d3e:	82 68       	ld.sh	r8,r1[0xc]
80005d40:	ed b8 00 06 	bld	r8,0x6
80005d44:	c0 31       	brne	80005d4a <_vfprintf_r+0x1f0a>
80005d46:	3f fa       	mov	r10,-1
80005d48:	50 ba       	stdsp	sp[0x2c],r10
80005d4a:	40 bc       	lddsp	r12,sp[0x2c]
80005d4c:	fe 3d f9 44 	sub	sp,-1724
80005d50:	d8 32       	popm	r0-r7,pc
80005d52:	d7 03       	nop

80005d54 <__swsetup_r>:
80005d54:	d4 21       	pushm	r4-r7,lr
80005d56:	e0 68 01 18 	mov	r8,280
80005d5a:	18 96       	mov	r6,r12
80005d5c:	16 97       	mov	r7,r11
80005d5e:	70 0c       	ld.w	r12,r8[0x0]
80005d60:	58 0c       	cp.w	r12,0
80005d62:	c0 60       	breq	80005d6e <__swsetup_r+0x1a>
80005d64:	78 68       	ld.w	r8,r12[0x18]
80005d66:	58 08       	cp.w	r8,0
80005d68:	c0 31       	brne	80005d6e <__swsetup_r+0x1a>
80005d6a:	e0 a0 07 b9 	rcall	80006cdc <__sinit>
80005d6e:	fe c8 c5 66 	sub	r8,pc,-15002
80005d72:	10 37       	cp.w	r7,r8
80005d74:	c0 61       	brne	80005d80 <__swsetup_r+0x2c>
80005d76:	e0 68 01 18 	mov	r8,280
80005d7a:	70 08       	ld.w	r8,r8[0x0]
80005d7c:	70 07       	ld.w	r7,r8[0x0]
80005d7e:	c1 28       	rjmp	80005da2 <__swsetup_r+0x4e>
80005d80:	fe c8 c5 58 	sub	r8,pc,-15016
80005d84:	10 37       	cp.w	r7,r8
80005d86:	c0 61       	brne	80005d92 <__swsetup_r+0x3e>
80005d88:	e0 68 01 18 	mov	r8,280
80005d8c:	70 08       	ld.w	r8,r8[0x0]
80005d8e:	70 17       	ld.w	r7,r8[0x4]
80005d90:	c0 98       	rjmp	80005da2 <__swsetup_r+0x4e>
80005d92:	fe c8 c5 4a 	sub	r8,pc,-15030
80005d96:	10 37       	cp.w	r7,r8
80005d98:	c0 51       	brne	80005da2 <__swsetup_r+0x4e>
80005d9a:	e0 68 01 18 	mov	r8,280
80005d9e:	70 08       	ld.w	r8,r8[0x0]
80005da0:	70 27       	ld.w	r7,r8[0x8]
80005da2:	8e 68       	ld.sh	r8,r7[0xc]
80005da4:	ed b8 00 03 	bld	r8,0x3
80005da8:	c1 e0       	breq	80005de4 <__swsetup_r+0x90>
80005daa:	ed b8 00 04 	bld	r8,0x4
80005dae:	c3 e1       	brne	80005e2a <__swsetup_r+0xd6>
80005db0:	ed b8 00 02 	bld	r8,0x2
80005db4:	c1 51       	brne	80005dde <__swsetup_r+0x8a>
80005db6:	6e db       	ld.w	r11,r7[0x34]
80005db8:	58 0b       	cp.w	r11,0
80005dba:	c0 a0       	breq	80005dce <__swsetup_r+0x7a>
80005dbc:	ee c8 ff bc 	sub	r8,r7,-68
80005dc0:	10 3b       	cp.w	r11,r8
80005dc2:	c0 40       	breq	80005dca <__swsetup_r+0x76>
80005dc4:	0c 9c       	mov	r12,r6
80005dc6:	e0 a0 08 25 	rcall	80006e10 <_free_r>
80005dca:	30 08       	mov	r8,0
80005dcc:	8f d8       	st.w	r7[0x34],r8
80005dce:	8e 68       	ld.sh	r8,r7[0xc]
80005dd0:	e0 18 ff db 	andl	r8,0xffdb
80005dd4:	ae 68       	st.h	r7[0xc],r8
80005dd6:	30 08       	mov	r8,0
80005dd8:	8f 18       	st.w	r7[0x4],r8
80005dda:	6e 48       	ld.w	r8,r7[0x10]
80005ddc:	8f 08       	st.w	r7[0x0],r8
80005dde:	8e 68       	ld.sh	r8,r7[0xc]
80005de0:	a3 b8       	sbr	r8,0x3
80005de2:	ae 68       	st.h	r7[0xc],r8
80005de4:	6e 48       	ld.w	r8,r7[0x10]
80005de6:	58 08       	cp.w	r8,0
80005de8:	c0 b1       	brne	80005dfe <__swsetup_r+0xaa>
80005dea:	8e 68       	ld.sh	r8,r7[0xc]
80005dec:	e2 18 02 80 	andl	r8,0x280,COH
80005df0:	e0 48 02 00 	cp.w	r8,512
80005df4:	c0 50       	breq	80005dfe <__swsetup_r+0xaa>
80005df6:	0c 9c       	mov	r12,r6
80005df8:	0e 9b       	mov	r11,r7
80005dfa:	e0 a0 0a 4b 	rcall	80007290 <__smakebuf_r>
80005dfe:	8e 69       	ld.sh	r9,r7[0xc]
80005e00:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005e04:	c0 70       	breq	80005e12 <__swsetup_r+0xbe>
80005e06:	30 08       	mov	r8,0
80005e08:	8f 28       	st.w	r7[0x8],r8
80005e0a:	6e 58       	ld.w	r8,r7[0x14]
80005e0c:	5c 38       	neg	r8
80005e0e:	8f 68       	st.w	r7[0x18],r8
80005e10:	c0 68       	rjmp	80005e1c <__swsetup_r+0xc8>
80005e12:	ed b9 00 01 	bld	r9,0x1
80005e16:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005e1a:	8f 28       	st.w	r7[0x8],r8
80005e1c:	6e 48       	ld.w	r8,r7[0x10]
80005e1e:	58 08       	cp.w	r8,0
80005e20:	c0 61       	brne	80005e2c <__swsetup_r+0xd8>
80005e22:	8e 68       	ld.sh	r8,r7[0xc]
80005e24:	ed b8 00 07 	bld	r8,0x7
80005e28:	c0 21       	brne	80005e2c <__swsetup_r+0xd8>
80005e2a:	dc 2a       	popm	r4-r7,pc,r12=-1
80005e2c:	d8 2a       	popm	r4-r7,pc,r12=0
80005e2e:	d7 03       	nop

80005e30 <quorem>:
80005e30:	d4 31       	pushm	r0-r7,lr
80005e32:	20 2d       	sub	sp,8
80005e34:	18 97       	mov	r7,r12
80005e36:	78 48       	ld.w	r8,r12[0x10]
80005e38:	76 46       	ld.w	r6,r11[0x10]
80005e3a:	0c 38       	cp.w	r8,r6
80005e3c:	c0 34       	brge	80005e42 <quorem+0x12>
80005e3e:	30 0c       	mov	r12,0
80005e40:	c8 58       	rjmp	80005f4a <quorem+0x11a>
80005e42:	ec c2 ff fc 	sub	r2,r6,-4
80005e46:	f6 c3 ff ec 	sub	r3,r11,-20
80005e4a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005e4e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005e52:	2f f9       	sub	r9,-1
80005e54:	20 16       	sub	r6,1
80005e56:	f8 09 0d 08 	divu	r8,r12,r9
80005e5a:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005e5e:	ee c4 ff ec 	sub	r4,r7,-20
80005e62:	10 95       	mov	r5,r8
80005e64:	58 08       	cp.w	r8,0
80005e66:	c4 10       	breq	80005ee8 <quorem+0xb8>
80005e68:	30 09       	mov	r9,0
80005e6a:	06 9a       	mov	r10,r3
80005e6c:	08 98       	mov	r8,r4
80005e6e:	12 91       	mov	r1,r9
80005e70:	50 0b       	stdsp	sp[0x0],r11
80005e72:	70 0e       	ld.w	lr,r8[0x0]
80005e74:	b1 8e       	lsr	lr,0x10
80005e76:	50 1e       	stdsp	sp[0x4],lr
80005e78:	15 0e       	ld.w	lr,r10++
80005e7a:	fc 00 16 10 	lsr	r0,lr,0x10
80005e7e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005e82:	ea 0e 03 41 	mac	r1,r5,lr
80005e86:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005e8a:	b1 81       	lsr	r1,0x10
80005e8c:	40 1b       	lddsp	r11,sp[0x4]
80005e8e:	ea 00 02 40 	mul	r0,r5,r0
80005e92:	e2 00 00 00 	add	r0,r1,r0
80005e96:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005e9a:	02 1b       	sub	r11,r1
80005e9c:	50 1b       	stdsp	sp[0x4],r11
80005e9e:	70 0b       	ld.w	r11,r8[0x0]
80005ea0:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005ea4:	02 09       	add	r9,r1
80005ea6:	f2 0e 01 0e 	sub	lr,r9,lr
80005eaa:	b0 1e       	st.h	r8[0x2],lr
80005eac:	fc 09 14 10 	asr	r9,lr,0x10
80005eb0:	40 1e       	lddsp	lr,sp[0x4]
80005eb2:	fc 09 00 09 	add	r9,lr,r9
80005eb6:	b0 09       	st.h	r8[0x0],r9
80005eb8:	e0 01 16 10 	lsr	r1,r0,0x10
80005ebc:	2f c8       	sub	r8,-4
80005ebe:	b1 49       	asr	r9,0x10
80005ec0:	04 3a       	cp.w	r10,r2
80005ec2:	fe 98 ff d8 	brls	80005e72 <quorem+0x42>
80005ec6:	40 0b       	lddsp	r11,sp[0x0]
80005ec8:	58 0c       	cp.w	r12,0
80005eca:	c0 f1       	brne	80005ee8 <quorem+0xb8>
80005ecc:	ec c8 ff fb 	sub	r8,r6,-5
80005ed0:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005ed4:	c0 28       	rjmp	80005ed8 <quorem+0xa8>
80005ed6:	20 16       	sub	r6,1
80005ed8:	20 48       	sub	r8,4
80005eda:	08 38       	cp.w	r8,r4
80005edc:	e0 88 00 05 	brls	80005ee6 <quorem+0xb6>
80005ee0:	70 09       	ld.w	r9,r8[0x0]
80005ee2:	58 09       	cp.w	r9,0
80005ee4:	cf 90       	breq	80005ed6 <quorem+0xa6>
80005ee6:	8f 46       	st.w	r7[0x10],r6
80005ee8:	0e 9c       	mov	r12,r7
80005eea:	e0 a0 0c f4 	rcall	800078d2 <__mcmp>
80005eee:	c2 d5       	brlt	80005f48 <quorem+0x118>
80005ef0:	2f f5       	sub	r5,-1
80005ef2:	08 98       	mov	r8,r4
80005ef4:	30 09       	mov	r9,0
80005ef6:	07 0b       	ld.w	r11,r3++
80005ef8:	f6 0a 16 10 	lsr	r10,r11,0x10
80005efc:	70 0c       	ld.w	r12,r8[0x0]
80005efe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005f02:	f8 0e 16 10 	lsr	lr,r12,0x10
80005f06:	14 1e       	sub	lr,r10
80005f08:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005f0c:	16 1a       	sub	r10,r11
80005f0e:	12 0a       	add	r10,r9
80005f10:	b0 1a       	st.h	r8[0x2],r10
80005f12:	b1 4a       	asr	r10,0x10
80005f14:	fc 0a 00 09 	add	r9,lr,r10
80005f18:	b0 09       	st.h	r8[0x0],r9
80005f1a:	2f c8       	sub	r8,-4
80005f1c:	b1 49       	asr	r9,0x10
80005f1e:	04 33       	cp.w	r3,r2
80005f20:	fe 98 ff eb 	brls	80005ef6 <quorem+0xc6>
80005f24:	ec c8 ff fb 	sub	r8,r6,-5
80005f28:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005f2c:	58 09       	cp.w	r9,0
80005f2e:	c0 d1       	brne	80005f48 <quorem+0x118>
80005f30:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005f34:	c0 28       	rjmp	80005f38 <quorem+0x108>
80005f36:	20 16       	sub	r6,1
80005f38:	20 48       	sub	r8,4
80005f3a:	08 38       	cp.w	r8,r4
80005f3c:	e0 88 00 05 	brls	80005f46 <quorem+0x116>
80005f40:	70 09       	ld.w	r9,r8[0x0]
80005f42:	58 09       	cp.w	r9,0
80005f44:	cf 90       	breq	80005f36 <quorem+0x106>
80005f46:	8f 46       	st.w	r7[0x10],r6
80005f48:	0a 9c       	mov	r12,r5
80005f4a:	2f ed       	sub	sp,-8
80005f4c:	d8 32       	popm	r0-r7,pc
80005f4e:	d7 03       	nop

80005f50 <_dtoa_r>:
80005f50:	d4 31       	pushm	r0-r7,lr
80005f52:	21 ad       	sub	sp,104
80005f54:	fa c4 ff 74 	sub	r4,sp,-140
80005f58:	18 97       	mov	r7,r12
80005f5a:	16 95       	mov	r5,r11
80005f5c:	68 2c       	ld.w	r12,r4[0x8]
80005f5e:	50 c9       	stdsp	sp[0x30],r9
80005f60:	68 16       	ld.w	r6,r4[0x4]
80005f62:	68 09       	ld.w	r9,r4[0x0]
80005f64:	50 e8       	stdsp	sp[0x38],r8
80005f66:	14 94       	mov	r4,r10
80005f68:	51 2c       	stdsp	sp[0x48],r12
80005f6a:	fa e5 00 08 	st.d	sp[8],r4
80005f6e:	51 59       	stdsp	sp[0x54],r9
80005f70:	6e 95       	ld.w	r5,r7[0x24]
80005f72:	58 05       	cp.w	r5,0
80005f74:	c0 91       	brne	80005f86 <_dtoa_r+0x36>
80005f76:	31 0c       	mov	r12,16
80005f78:	e0 a0 09 ea 	rcall	8000734c <malloc>
80005f7c:	99 35       	st.w	r12[0xc],r5
80005f7e:	8f 9c       	st.w	r7[0x24],r12
80005f80:	99 15       	st.w	r12[0x4],r5
80005f82:	99 25       	st.w	r12[0x8],r5
80005f84:	99 05       	st.w	r12[0x0],r5
80005f86:	6e 99       	ld.w	r9,r7[0x24]
80005f88:	72 08       	ld.w	r8,r9[0x0]
80005f8a:	58 08       	cp.w	r8,0
80005f8c:	c0 f0       	breq	80005faa <_dtoa_r+0x5a>
80005f8e:	72 1a       	ld.w	r10,r9[0x4]
80005f90:	91 1a       	st.w	r8[0x4],r10
80005f92:	30 1a       	mov	r10,1
80005f94:	72 19       	ld.w	r9,r9[0x4]
80005f96:	f4 09 09 49 	lsl	r9,r10,r9
80005f9a:	10 9b       	mov	r11,r8
80005f9c:	91 29       	st.w	r8[0x8],r9
80005f9e:	0e 9c       	mov	r12,r7
80005fa0:	e0 a0 0c b2 	rcall	80007904 <_Bfree>
80005fa4:	6e 98       	ld.w	r8,r7[0x24]
80005fa6:	30 09       	mov	r9,0
80005fa8:	91 09       	st.w	r8[0x0],r9
80005faa:	40 28       	lddsp	r8,sp[0x8]
80005fac:	10 94       	mov	r4,r8
80005fae:	58 08       	cp.w	r8,0
80005fb0:	c0 64       	brge	80005fbc <_dtoa_r+0x6c>
80005fb2:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005fb6:	50 28       	stdsp	sp[0x8],r8
80005fb8:	30 18       	mov	r8,1
80005fba:	c0 28       	rjmp	80005fbe <_dtoa_r+0x6e>
80005fbc:	30 08       	mov	r8,0
80005fbe:	8d 08       	st.w	r6[0x0],r8
80005fc0:	fc 1c 7f f0 	movh	r12,0x7ff0
80005fc4:	40 26       	lddsp	r6,sp[0x8]
80005fc6:	0c 98       	mov	r8,r6
80005fc8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005fcc:	18 38       	cp.w	r8,r12
80005fce:	c2 01       	brne	8000600e <_dtoa_r+0xbe>
80005fd0:	e0 68 27 0f 	mov	r8,9999
80005fd4:	41 5b       	lddsp	r11,sp[0x54]
80005fd6:	97 08       	st.w	r11[0x0],r8
80005fd8:	40 3a       	lddsp	r10,sp[0xc]
80005fda:	58 0a       	cp.w	r10,0
80005fdc:	c0 71       	brne	80005fea <_dtoa_r+0x9a>
80005fde:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005fe2:	c0 41       	brne	80005fea <_dtoa_r+0x9a>
80005fe4:	fe cc c7 ec 	sub	r12,pc,-14356
80005fe8:	c0 38       	rjmp	80005fee <_dtoa_r+0x9e>
80005fea:	fe cc c7 e6 	sub	r12,pc,-14362
80005fee:	41 29       	lddsp	r9,sp[0x48]
80005ff0:	58 09       	cp.w	r9,0
80005ff2:	e0 80 05 9a 	breq	80006b26 <_dtoa_r+0xbd6>
80005ff6:	f8 c8 ff fd 	sub	r8,r12,-3
80005ffa:	f8 c9 ff f8 	sub	r9,r12,-8
80005ffe:	11 8b       	ld.ub	r11,r8[0x0]
80006000:	30 0a       	mov	r10,0
80006002:	41 25       	lddsp	r5,sp[0x48]
80006004:	f4 0b 18 00 	cp.b	r11,r10
80006008:	f2 08 17 10 	movne	r8,r9
8000600c:	c1 68       	rjmp	80006038 <_dtoa_r+0xe8>
8000600e:	fa ea 00 08 	ld.d	r10,sp[8]
80006012:	30 08       	mov	r8,0
80006014:	fa eb 00 3c 	st.d	sp[60],r10
80006018:	30 09       	mov	r9,0
8000601a:	e0 a0 13 80 	rcall	8000871a <__avr32_f64_cmp_eq>
8000601e:	c1 00       	breq	8000603e <_dtoa_r+0xee>
80006020:	30 18       	mov	r8,1
80006022:	41 5a       	lddsp	r10,sp[0x54]
80006024:	95 08       	st.w	r10[0x0],r8
80006026:	fe cc cc a6 	sub	r12,pc,-13146
8000602a:	41 29       	lddsp	r9,sp[0x48]
8000602c:	f8 08 00 08 	add	r8,r12,r8
80006030:	58 09       	cp.w	r9,0
80006032:	e0 80 05 7a 	breq	80006b26 <_dtoa_r+0xbd6>
80006036:	12 95       	mov	r5,r9
80006038:	8b 08       	st.w	r5[0x0],r8
8000603a:	e0 8f 05 76 	bral	80006b26 <_dtoa_r+0xbd6>
8000603e:	fa c8 ff 9c 	sub	r8,sp,-100
80006042:	fa c9 ff a0 	sub	r9,sp,-96
80006046:	fa ea 00 3c 	ld.d	r10,sp[60]
8000604a:	0e 9c       	mov	r12,r7
8000604c:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006050:	e0 a0 0c ac 	rcall	800079a8 <__d2b>
80006054:	18 93       	mov	r3,r12
80006056:	58 05       	cp.w	r5,0
80006058:	c0 d0       	breq	80006072 <_dtoa_r+0x122>
8000605a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000605e:	30 04       	mov	r4,0
80006060:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006064:	ea c5 03 ff 	sub	r5,r5,1023
80006068:	10 9b       	mov	r11,r8
8000606a:	51 74       	stdsp	sp[0x5c],r4
8000606c:	ea 1b 3f f0 	orh	r11,0x3ff0
80006070:	c2 58       	rjmp	800060ba <_dtoa_r+0x16a>
80006072:	41 88       	lddsp	r8,sp[0x60]
80006074:	41 9c       	lddsp	r12,sp[0x64]
80006076:	10 0c       	add	r12,r8
80006078:	f8 c5 fb ce 	sub	r5,r12,-1074
8000607c:	e0 45 00 20 	cp.w	r5,32
80006080:	e0 8a 00 0e 	brle	8000609c <_dtoa_r+0x14c>
80006084:	f8 cc fb ee 	sub	r12,r12,-1042
80006088:	40 3b       	lddsp	r11,sp[0xc]
8000608a:	ea 08 11 40 	rsub	r8,r5,64
8000608e:	f6 0c 0a 4c 	lsr	r12,r11,r12
80006092:	ec 08 09 46 	lsl	r6,r6,r8
80006096:	0c 4c       	or	r12,r6
80006098:	c0 78       	rjmp	800060a6 <_dtoa_r+0x156>
8000609a:	d7 03       	nop
8000609c:	ea 0c 11 20 	rsub	r12,r5,32
800060a0:	40 3a       	lddsp	r10,sp[0xc]
800060a2:	f4 0c 09 4c 	lsl	r12,r10,r12
800060a6:	fe b0 eb 87 	rcall	800037b4 <__avr32_u32_to_f64>
800060aa:	fc 18 fe 10 	movh	r8,0xfe10
800060ae:	30 19       	mov	r9,1
800060b0:	ea c5 04 33 	sub	r5,r5,1075
800060b4:	f0 0b 00 0b 	add	r11,r8,r11
800060b8:	51 79       	stdsp	sp[0x5c],r9
800060ba:	30 08       	mov	r8,0
800060bc:	fc 19 3f f8 	movh	r9,0x3ff8
800060c0:	e0 a0 11 c2 	rcall	80008444 <__avr32_f64_sub>
800060c4:	e0 68 43 61 	mov	r8,17249
800060c8:	ea 18 63 6f 	orh	r8,0x636f
800060cc:	e0 69 87 a7 	mov	r9,34727
800060d0:	ea 19 3f d2 	orh	r9,0x3fd2
800060d4:	fe b0 ea 86 	rcall	800035e0 <__avr32_f64_mul>
800060d8:	e0 68 c8 b3 	mov	r8,51379
800060dc:	ea 18 8b 60 	orh	r8,0x8b60
800060e0:	e0 69 8a 28 	mov	r9,35368
800060e4:	ea 19 3f c6 	orh	r9,0x3fc6
800060e8:	e0 a0 12 7c 	rcall	800085e0 <__avr32_f64_add>
800060ec:	0a 9c       	mov	r12,r5
800060ee:	14 90       	mov	r0,r10
800060f0:	16 91       	mov	r1,r11
800060f2:	fe b0 eb 65 	rcall	800037bc <__avr32_s32_to_f64>
800060f6:	e0 68 79 fb 	mov	r8,31227
800060fa:	ea 18 50 9f 	orh	r8,0x509f
800060fe:	e0 69 44 13 	mov	r9,17427
80006102:	ea 19 3f d3 	orh	r9,0x3fd3
80006106:	fe b0 ea 6d 	rcall	800035e0 <__avr32_f64_mul>
8000610a:	14 98       	mov	r8,r10
8000610c:	16 99       	mov	r9,r11
8000610e:	00 9a       	mov	r10,r0
80006110:	02 9b       	mov	r11,r1
80006112:	e0 a0 12 67 	rcall	800085e0 <__avr32_f64_add>
80006116:	14 90       	mov	r0,r10
80006118:	16 91       	mov	r1,r11
8000611a:	e0 a0 12 ed 	rcall	800086f4 <__avr32_f64_to_s32>
8000611e:	30 08       	mov	r8,0
80006120:	18 96       	mov	r6,r12
80006122:	30 09       	mov	r9,0
80006124:	00 9a       	mov	r10,r0
80006126:	02 9b       	mov	r11,r1
80006128:	e0 a0 13 40 	rcall	800087a8 <__avr32_f64_cmp_lt>
8000612c:	c0 c0       	breq	80006144 <_dtoa_r+0x1f4>
8000612e:	0c 9c       	mov	r12,r6
80006130:	fe b0 eb 46 	rcall	800037bc <__avr32_s32_to_f64>
80006134:	14 98       	mov	r8,r10
80006136:	16 99       	mov	r9,r11
80006138:	00 9a       	mov	r10,r0
8000613a:	02 9b       	mov	r11,r1
8000613c:	e0 a0 12 ef 	rcall	8000871a <__avr32_f64_cmp_eq>
80006140:	f7 b6 00 01 	subeq	r6,1
80006144:	59 66       	cp.w	r6,22
80006146:	e0 88 00 05 	brls	80006150 <_dtoa_r+0x200>
8000614a:	30 18       	mov	r8,1
8000614c:	51 48       	stdsp	sp[0x50],r8
8000614e:	c1 38       	rjmp	80006174 <_dtoa_r+0x224>
80006150:	fe c8 c8 94 	sub	r8,pc,-14188
80006154:	fa ea 00 3c 	ld.d	r10,sp[60]
80006158:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000615c:	e0 a0 13 26 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006160:	f9 b4 00 00 	moveq	r4,0
80006164:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006168:	f7 b6 01 01 	subne	r6,1
8000616c:	f9 bc 01 00 	movne	r12,0
80006170:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006174:	41 90       	lddsp	r0,sp[0x64]
80006176:	20 10       	sub	r0,1
80006178:	0a 10       	sub	r0,r5
8000617a:	c0 46       	brmi	80006182 <_dtoa_r+0x232>
8000617c:	50 40       	stdsp	sp[0x10],r0
8000617e:	30 00       	mov	r0,0
80006180:	c0 48       	rjmp	80006188 <_dtoa_r+0x238>
80006182:	30 0b       	mov	r11,0
80006184:	5c 30       	neg	r0
80006186:	50 4b       	stdsp	sp[0x10],r11
80006188:	ec 02 11 00 	rsub	r2,r6,0
8000618c:	58 06       	cp.w	r6,0
8000618e:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80006192:	f5 d6 e4 0a 	addge	r10,r10,r6
80006196:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000619a:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000619e:	f9 b2 04 00 	movge	r2,0
800061a2:	e1 d6 e5 10 	sublt	r0,r0,r6
800061a6:	f9 b9 05 00 	movlt	r9,0
800061aa:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800061ae:	40 c8       	lddsp	r8,sp[0x30]
800061b0:	58 98       	cp.w	r8,9
800061b2:	e0 8b 00 20 	brhi	800061f2 <_dtoa_r+0x2a2>
800061b6:	58 58       	cp.w	r8,5
800061b8:	f9 b4 0a 01 	movle	r4,1
800061bc:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800061c0:	f7 b5 09 04 	subgt	r5,4
800061c4:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800061c8:	f9 b4 09 00 	movgt	r4,0
800061cc:	40 cc       	lddsp	r12,sp[0x30]
800061ce:	58 3c       	cp.w	r12,3
800061d0:	c2 d0       	breq	8000622a <_dtoa_r+0x2da>
800061d2:	e0 89 00 05 	brgt	800061dc <_dtoa_r+0x28c>
800061d6:	58 2c       	cp.w	r12,2
800061d8:	c1 01       	brne	800061f8 <_dtoa_r+0x2a8>
800061da:	c1 88       	rjmp	8000620a <_dtoa_r+0x2ba>
800061dc:	40 cb       	lddsp	r11,sp[0x30]
800061de:	58 4b       	cp.w	r11,4
800061e0:	c0 60       	breq	800061ec <_dtoa_r+0x29c>
800061e2:	58 5b       	cp.w	r11,5
800061e4:	c0 a1       	brne	800061f8 <_dtoa_r+0x2a8>
800061e6:	30 1a       	mov	r10,1
800061e8:	50 da       	stdsp	sp[0x34],r10
800061ea:	c2 28       	rjmp	8000622e <_dtoa_r+0x2de>
800061ec:	30 19       	mov	r9,1
800061ee:	50 d9       	stdsp	sp[0x34],r9
800061f0:	c0 f8       	rjmp	8000620e <_dtoa_r+0x2be>
800061f2:	30 08       	mov	r8,0
800061f4:	30 14       	mov	r4,1
800061f6:	50 c8       	stdsp	sp[0x30],r8
800061f8:	3f f5       	mov	r5,-1
800061fa:	30 1c       	mov	r12,1
800061fc:	30 0b       	mov	r11,0
800061fe:	50 95       	stdsp	sp[0x24],r5
80006200:	50 dc       	stdsp	sp[0x34],r12
80006202:	0a 91       	mov	r1,r5
80006204:	31 28       	mov	r8,18
80006206:	50 eb       	stdsp	sp[0x38],r11
80006208:	c2 08       	rjmp	80006248 <_dtoa_r+0x2f8>
8000620a:	30 0a       	mov	r10,0
8000620c:	50 da       	stdsp	sp[0x34],r10
8000620e:	40 e9       	lddsp	r9,sp[0x38]
80006210:	58 09       	cp.w	r9,0
80006212:	e0 89 00 07 	brgt	80006220 <_dtoa_r+0x2d0>
80006216:	30 18       	mov	r8,1
80006218:	50 98       	stdsp	sp[0x24],r8
8000621a:	10 91       	mov	r1,r8
8000621c:	50 e8       	stdsp	sp[0x38],r8
8000621e:	c1 58       	rjmp	80006248 <_dtoa_r+0x2f8>
80006220:	40 e5       	lddsp	r5,sp[0x38]
80006222:	50 95       	stdsp	sp[0x24],r5
80006224:	0a 91       	mov	r1,r5
80006226:	0a 98       	mov	r8,r5
80006228:	c1 08       	rjmp	80006248 <_dtoa_r+0x2f8>
8000622a:	30 0c       	mov	r12,0
8000622c:	50 dc       	stdsp	sp[0x34],r12
8000622e:	40 eb       	lddsp	r11,sp[0x38]
80006230:	ec 0b 00 0b 	add	r11,r6,r11
80006234:	50 9b       	stdsp	sp[0x24],r11
80006236:	16 98       	mov	r8,r11
80006238:	2f f8       	sub	r8,-1
8000623a:	58 08       	cp.w	r8,0
8000623c:	e0 89 00 05 	brgt	80006246 <_dtoa_r+0x2f6>
80006240:	10 91       	mov	r1,r8
80006242:	30 18       	mov	r8,1
80006244:	c0 28       	rjmp	80006248 <_dtoa_r+0x2f8>
80006246:	10 91       	mov	r1,r8
80006248:	30 09       	mov	r9,0
8000624a:	6e 9a       	ld.w	r10,r7[0x24]
8000624c:	95 19       	st.w	r10[0x4],r9
8000624e:	30 49       	mov	r9,4
80006250:	c0 68       	rjmp	8000625c <_dtoa_r+0x30c>
80006252:	d7 03       	nop
80006254:	6a 1a       	ld.w	r10,r5[0x4]
80006256:	a1 79       	lsl	r9,0x1
80006258:	2f fa       	sub	r10,-1
8000625a:	8b 1a       	st.w	r5[0x4],r10
8000625c:	6e 95       	ld.w	r5,r7[0x24]
8000625e:	f2 ca ff ec 	sub	r10,r9,-20
80006262:	10 3a       	cp.w	r10,r8
80006264:	fe 98 ff f8 	brls	80006254 <_dtoa_r+0x304>
80006268:	6a 1b       	ld.w	r11,r5[0x4]
8000626a:	0e 9c       	mov	r12,r7
8000626c:	e0 a0 0b 66 	rcall	80007938 <_Balloc>
80006270:	58 e1       	cp.w	r1,14
80006272:	5f 88       	srls	r8
80006274:	8b 0c       	st.w	r5[0x0],r12
80006276:	f1 e4 00 04 	and	r4,r8,r4
8000627a:	6e 98       	ld.w	r8,r7[0x24]
8000627c:	70 08       	ld.w	r8,r8[0x0]
8000627e:	50 88       	stdsp	sp[0x20],r8
80006280:	e0 80 01 82 	breq	80006584 <_dtoa_r+0x634>
80006284:	58 06       	cp.w	r6,0
80006286:	e0 8a 00 43 	brle	8000630c <_dtoa_r+0x3bc>
8000628a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000628e:	fe c8 c9 d2 	sub	r8,pc,-13870
80006292:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006296:	fa e5 00 18 	st.d	sp[24],r4
8000629a:	ec 04 14 04 	asr	r4,r6,0x4
8000629e:	ed b4 00 04 	bld	r4,0x4
800062a2:	c0 30       	breq	800062a8 <_dtoa_r+0x358>
800062a4:	30 25       	mov	r5,2
800062a6:	c1 08       	rjmp	800062c6 <_dtoa_r+0x376>
800062a8:	fe c8 c9 24 	sub	r8,pc,-14044
800062ac:	f0 e8 00 20 	ld.d	r8,r8[32]
800062b0:	fa ea 00 3c 	ld.d	r10,sp[60]
800062b4:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800062b8:	e0 a0 12 ac 	rcall	80008810 <__avr32_f64_div>
800062bc:	30 35       	mov	r5,3
800062be:	14 98       	mov	r8,r10
800062c0:	16 99       	mov	r9,r11
800062c2:	fa e9 00 08 	st.d	sp[8],r8
800062c6:	fe cc c9 42 	sub	r12,pc,-14014
800062ca:	50 a3       	stdsp	sp[0x28],r3
800062cc:	0c 93       	mov	r3,r6
800062ce:	18 96       	mov	r6,r12
800062d0:	c0 f8       	rjmp	800062ee <_dtoa_r+0x39e>
800062d2:	fa ea 00 18 	ld.d	r10,sp[24]
800062d6:	ed b4 00 00 	bld	r4,0x0
800062da:	c0 81       	brne	800062ea <_dtoa_r+0x39a>
800062dc:	ec e8 00 00 	ld.d	r8,r6[0]
800062e0:	2f f5       	sub	r5,-1
800062e2:	fe b0 e9 7f 	rcall	800035e0 <__avr32_f64_mul>
800062e6:	fa eb 00 18 	st.d	sp[24],r10
800062ea:	a1 54       	asr	r4,0x1
800062ec:	2f 86       	sub	r6,-8
800062ee:	58 04       	cp.w	r4,0
800062f0:	cf 11       	brne	800062d2 <_dtoa_r+0x382>
800062f2:	fa e8 00 18 	ld.d	r8,sp[24]
800062f6:	fa ea 00 08 	ld.d	r10,sp[8]
800062fa:	06 96       	mov	r6,r3
800062fc:	e0 a0 12 8a 	rcall	80008810 <__avr32_f64_div>
80006300:	40 a3       	lddsp	r3,sp[0x28]
80006302:	14 98       	mov	r8,r10
80006304:	16 99       	mov	r9,r11
80006306:	fa e9 00 08 	st.d	sp[8],r8
8000630a:	c2 f8       	rjmp	80006368 <_dtoa_r+0x418>
8000630c:	ec 08 11 00 	rsub	r8,r6,0
80006310:	c0 31       	brne	80006316 <_dtoa_r+0x3c6>
80006312:	30 25       	mov	r5,2
80006314:	c2 a8       	rjmp	80006368 <_dtoa_r+0x418>
80006316:	fe cc c9 92 	sub	r12,pc,-13934
8000631a:	f0 04 14 04 	asr	r4,r8,0x4
8000631e:	50 1c       	stdsp	sp[0x4],r12
80006320:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006324:	fe c9 ca 68 	sub	r9,pc,-13720
80006328:	fa ea 00 3c 	ld.d	r10,sp[60]
8000632c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006330:	fe b0 e9 58 	rcall	800035e0 <__avr32_f64_mul>
80006334:	40 1c       	lddsp	r12,sp[0x4]
80006336:	50 63       	stdsp	sp[0x18],r3
80006338:	30 25       	mov	r5,2
8000633a:	0c 93       	mov	r3,r6
8000633c:	fa eb 00 08 	st.d	sp[8],r10
80006340:	18 96       	mov	r6,r12
80006342:	c0 f8       	rjmp	80006360 <_dtoa_r+0x410>
80006344:	fa ea 00 08 	ld.d	r10,sp[8]
80006348:	ed b4 00 00 	bld	r4,0x0
8000634c:	c0 81       	brne	8000635c <_dtoa_r+0x40c>
8000634e:	ec e8 00 00 	ld.d	r8,r6[0]
80006352:	2f f5       	sub	r5,-1
80006354:	fe b0 e9 46 	rcall	800035e0 <__avr32_f64_mul>
80006358:	fa eb 00 08 	st.d	sp[8],r10
8000635c:	a1 54       	asr	r4,0x1
8000635e:	2f 86       	sub	r6,-8
80006360:	58 04       	cp.w	r4,0
80006362:	cf 11       	brne	80006344 <_dtoa_r+0x3f4>
80006364:	06 96       	mov	r6,r3
80006366:	40 63       	lddsp	r3,sp[0x18]
80006368:	41 4a       	lddsp	r10,sp[0x50]
8000636a:	58 0a       	cp.w	r10,0
8000636c:	c2 a0       	breq	800063c0 <_dtoa_r+0x470>
8000636e:	fa e8 00 08 	ld.d	r8,sp[8]
80006372:	58 01       	cp.w	r1,0
80006374:	5f 94       	srgt	r4
80006376:	fa e9 00 18 	st.d	sp[24],r8
8000637a:	30 08       	mov	r8,0
8000637c:	fc 19 3f f0 	movh	r9,0x3ff0
80006380:	fa ea 00 18 	ld.d	r10,sp[24]
80006384:	e0 a0 12 12 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006388:	f9 bc 00 00 	moveq	r12,0
8000638c:	f9 bc 01 01 	movne	r12,1
80006390:	e9 ec 00 0c 	and	r12,r4,r12
80006394:	c1 60       	breq	800063c0 <_dtoa_r+0x470>
80006396:	40 98       	lddsp	r8,sp[0x24]
80006398:	58 08       	cp.w	r8,0
8000639a:	e0 8a 00 f1 	brle	8000657c <_dtoa_r+0x62c>
8000639e:	30 08       	mov	r8,0
800063a0:	fc 19 40 24 	movh	r9,0x4024
800063a4:	ec c4 00 01 	sub	r4,r6,1
800063a8:	fa ea 00 18 	ld.d	r10,sp[24]
800063ac:	2f f5       	sub	r5,-1
800063ae:	50 64       	stdsp	sp[0x18],r4
800063b0:	fe b0 e9 18 	rcall	800035e0 <__avr32_f64_mul>
800063b4:	40 94       	lddsp	r4,sp[0x24]
800063b6:	14 98       	mov	r8,r10
800063b8:	16 99       	mov	r9,r11
800063ba:	fa e9 00 08 	st.d	sp[8],r8
800063be:	c0 38       	rjmp	800063c4 <_dtoa_r+0x474>
800063c0:	50 66       	stdsp	sp[0x18],r6
800063c2:	02 94       	mov	r4,r1
800063c4:	0a 9c       	mov	r12,r5
800063c6:	fe b0 e9 fb 	rcall	800037bc <__avr32_s32_to_f64>
800063ca:	fa e8 00 08 	ld.d	r8,sp[8]
800063ce:	fe b0 e9 09 	rcall	800035e0 <__avr32_f64_mul>
800063d2:	30 08       	mov	r8,0
800063d4:	fc 19 40 1c 	movh	r9,0x401c
800063d8:	e0 a0 11 04 	rcall	800085e0 <__avr32_f64_add>
800063dc:	14 98       	mov	r8,r10
800063de:	16 99       	mov	r9,r11
800063e0:	fa e9 00 28 	st.d	sp[40],r8
800063e4:	fc 18 fc c0 	movh	r8,0xfcc0
800063e8:	40 a5       	lddsp	r5,sp[0x28]
800063ea:	10 05       	add	r5,r8
800063ec:	50 a5       	stdsp	sp[0x28],r5
800063ee:	58 04       	cp.w	r4,0
800063f0:	c2 11       	brne	80006432 <_dtoa_r+0x4e2>
800063f2:	fa ea 00 08 	ld.d	r10,sp[8]
800063f6:	30 08       	mov	r8,0
800063f8:	fc 19 40 14 	movh	r9,0x4014
800063fc:	e0 a0 10 24 	rcall	80008444 <__avr32_f64_sub>
80006400:	40 bc       	lddsp	r12,sp[0x2c]
80006402:	fa eb 00 08 	st.d	sp[8],r10
80006406:	14 98       	mov	r8,r10
80006408:	16 99       	mov	r9,r11
8000640a:	18 9a       	mov	r10,r12
8000640c:	0a 9b       	mov	r11,r5
8000640e:	e0 a0 11 cd 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006412:	e0 81 02 54 	brne	800068ba <_dtoa_r+0x96a>
80006416:	0a 98       	mov	r8,r5
80006418:	40 b9       	lddsp	r9,sp[0x2c]
8000641a:	ee 18 80 00 	eorh	r8,0x8000
8000641e:	fa ea 00 08 	ld.d	r10,sp[8]
80006422:	10 95       	mov	r5,r8
80006424:	12 98       	mov	r8,r9
80006426:	0a 99       	mov	r9,r5
80006428:	e0 a0 11 c0 	rcall	800087a8 <__avr32_f64_cmp_lt>
8000642c:	e0 81 02 3e 	brne	800068a8 <_dtoa_r+0x958>
80006430:	ca 68       	rjmp	8000657c <_dtoa_r+0x62c>
80006432:	fe c9 cb 76 	sub	r9,pc,-13450
80006436:	e8 c8 00 01 	sub	r8,r4,1
8000643a:	40 d5       	lddsp	r5,sp[0x34]
8000643c:	58 05       	cp.w	r5,0
8000643e:	c4 f0       	breq	800064dc <_dtoa_r+0x58c>
80006440:	30 0c       	mov	r12,0
80006442:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006446:	51 3c       	stdsp	sp[0x4c],r12
80006448:	30 0a       	mov	r10,0
8000644a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000644e:	e0 a0 11 e1 	rcall	80008810 <__avr32_f64_div>
80006452:	fa e8 00 28 	ld.d	r8,sp[40]
80006456:	40 85       	lddsp	r5,sp[0x20]
80006458:	e0 a0 0f f6 	rcall	80008444 <__avr32_f64_sub>
8000645c:	fa eb 00 28 	st.d	sp[40],r10
80006460:	fa ea 00 08 	ld.d	r10,sp[8]
80006464:	e0 a0 11 48 	rcall	800086f4 <__avr32_f64_to_s32>
80006468:	51 6c       	stdsp	sp[0x58],r12
8000646a:	fe b0 e9 a9 	rcall	800037bc <__avr32_s32_to_f64>
8000646e:	14 98       	mov	r8,r10
80006470:	16 99       	mov	r9,r11
80006472:	fa ea 00 08 	ld.d	r10,sp[8]
80006476:	e0 a0 0f e7 	rcall	80008444 <__avr32_f64_sub>
8000647a:	fa eb 00 08 	st.d	sp[8],r10
8000647e:	41 68       	lddsp	r8,sp[0x58]
80006480:	2d 08       	sub	r8,-48
80006482:	0a c8       	st.b	r5++,r8
80006484:	41 39       	lddsp	r9,sp[0x4c]
80006486:	2f f9       	sub	r9,-1
80006488:	51 39       	stdsp	sp[0x4c],r9
8000648a:	fa e8 00 28 	ld.d	r8,sp[40]
8000648e:	e0 a0 11 8d 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006492:	e0 81 03 39 	brne	80006b04 <_dtoa_r+0xbb4>
80006496:	fa e8 00 08 	ld.d	r8,sp[8]
8000649a:	30 0a       	mov	r10,0
8000649c:	fc 1b 3f f0 	movh	r11,0x3ff0
800064a0:	e0 a0 0f d2 	rcall	80008444 <__avr32_f64_sub>
800064a4:	fa e8 00 28 	ld.d	r8,sp[40]
800064a8:	e0 a0 11 80 	rcall	800087a8 <__avr32_f64_cmp_lt>
800064ac:	fa ea 00 28 	ld.d	r10,sp[40]
800064b0:	30 08       	mov	r8,0
800064b2:	fc 19 40 24 	movh	r9,0x4024
800064b6:	e0 81 00 da 	brne	8000666a <_dtoa_r+0x71a>
800064ba:	41 3c       	lddsp	r12,sp[0x4c]
800064bc:	08 3c       	cp.w	r12,r4
800064be:	c5 f4       	brge	8000657c <_dtoa_r+0x62c>
800064c0:	fe b0 e8 90 	rcall	800035e0 <__avr32_f64_mul>
800064c4:	30 08       	mov	r8,0
800064c6:	fa eb 00 28 	st.d	sp[40],r10
800064ca:	fc 19 40 24 	movh	r9,0x4024
800064ce:	fa ea 00 08 	ld.d	r10,sp[8]
800064d2:	fe b0 e8 87 	rcall	800035e0 <__avr32_f64_mul>
800064d6:	fa eb 00 08 	st.d	sp[8],r10
800064da:	cc 3b       	rjmp	80006460 <_dtoa_r+0x510>
800064dc:	40 85       	lddsp	r5,sp[0x20]
800064de:	08 05       	add	r5,r4
800064e0:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800064e4:	51 35       	stdsp	sp[0x4c],r5
800064e6:	fa e8 00 28 	ld.d	r8,sp[40]
800064ea:	40 85       	lddsp	r5,sp[0x20]
800064ec:	fe b0 e8 7a 	rcall	800035e0 <__avr32_f64_mul>
800064f0:	fa eb 00 28 	st.d	sp[40],r10
800064f4:	fa ea 00 08 	ld.d	r10,sp[8]
800064f8:	e0 a0 10 fe 	rcall	800086f4 <__avr32_f64_to_s32>
800064fc:	51 6c       	stdsp	sp[0x58],r12
800064fe:	fe b0 e9 5f 	rcall	800037bc <__avr32_s32_to_f64>
80006502:	14 98       	mov	r8,r10
80006504:	16 99       	mov	r9,r11
80006506:	fa ea 00 08 	ld.d	r10,sp[8]
8000650a:	e0 a0 0f 9d 	rcall	80008444 <__avr32_f64_sub>
8000650e:	fa eb 00 08 	st.d	sp[8],r10
80006512:	41 68       	lddsp	r8,sp[0x58]
80006514:	2d 08       	sub	r8,-48
80006516:	0a c8       	st.b	r5++,r8
80006518:	41 3c       	lddsp	r12,sp[0x4c]
8000651a:	18 35       	cp.w	r5,r12
8000651c:	c2 81       	brne	8000656c <_dtoa_r+0x61c>
8000651e:	30 08       	mov	r8,0
80006520:	fc 19 3f e0 	movh	r9,0x3fe0
80006524:	fa ea 00 28 	ld.d	r10,sp[40]
80006528:	e0 a0 10 5c 	rcall	800085e0 <__avr32_f64_add>
8000652c:	40 85       	lddsp	r5,sp[0x20]
8000652e:	fa e8 00 08 	ld.d	r8,sp[8]
80006532:	08 05       	add	r5,r4
80006534:	e0 a0 11 3a 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006538:	e0 81 00 99 	brne	8000666a <_dtoa_r+0x71a>
8000653c:	fa e8 00 28 	ld.d	r8,sp[40]
80006540:	30 0a       	mov	r10,0
80006542:	fc 1b 3f e0 	movh	r11,0x3fe0
80006546:	e0 a0 0f 7f 	rcall	80008444 <__avr32_f64_sub>
8000654a:	14 98       	mov	r8,r10
8000654c:	16 99       	mov	r9,r11
8000654e:	fa ea 00 08 	ld.d	r10,sp[8]
80006552:	e0 a0 11 2b 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006556:	c1 30       	breq	8000657c <_dtoa_r+0x62c>
80006558:	33 09       	mov	r9,48
8000655a:	0a 98       	mov	r8,r5
8000655c:	11 7a       	ld.ub	r10,--r8
8000655e:	f2 0a 18 00 	cp.b	r10,r9
80006562:	e0 81 02 d1 	brne	80006b04 <_dtoa_r+0xbb4>
80006566:	10 95       	mov	r5,r8
80006568:	cf 9b       	rjmp	8000655a <_dtoa_r+0x60a>
8000656a:	d7 03       	nop
8000656c:	30 08       	mov	r8,0
8000656e:	fc 19 40 24 	movh	r9,0x4024
80006572:	fe b0 e8 37 	rcall	800035e0 <__avr32_f64_mul>
80006576:	fa eb 00 08 	st.d	sp[8],r10
8000657a:	cb db       	rjmp	800064f4 <_dtoa_r+0x5a4>
8000657c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006580:	fa eb 00 08 	st.d	sp[8],r10
80006584:	58 e6       	cp.w	r6,14
80006586:	5f ab       	srle	r11
80006588:	41 8a       	lddsp	r10,sp[0x60]
8000658a:	30 08       	mov	r8,0
8000658c:	f4 09 11 ff 	rsub	r9,r10,-1
80006590:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006594:	f0 09 18 00 	cp.b	r9,r8
80006598:	e0 80 00 82 	breq	8000669c <_dtoa_r+0x74c>
8000659c:	40 ea       	lddsp	r10,sp[0x38]
8000659e:	58 01       	cp.w	r1,0
800065a0:	5f a9       	srle	r9
800065a2:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800065a6:	fe ca cc ea 	sub	r10,pc,-13078
800065aa:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800065ae:	fa e5 00 10 	st.d	sp[16],r4
800065b2:	f0 09 18 00 	cp.b	r9,r8
800065b6:	c1 40       	breq	800065de <_dtoa_r+0x68e>
800065b8:	58 01       	cp.w	r1,0
800065ba:	e0 81 01 77 	brne	800068a8 <_dtoa_r+0x958>
800065be:	30 08       	mov	r8,0
800065c0:	fc 19 40 14 	movh	r9,0x4014
800065c4:	08 9a       	mov	r10,r4
800065c6:	0a 9b       	mov	r11,r5
800065c8:	fe b0 e8 0c 	rcall	800035e0 <__avr32_f64_mul>
800065cc:	fa e8 00 08 	ld.d	r8,sp[8]
800065d0:	e0 a0 10 b8 	rcall	80008740 <__avr32_f64_cmp_ge>
800065d4:	e0 81 01 6a 	brne	800068a8 <_dtoa_r+0x958>
800065d8:	02 92       	mov	r2,r1
800065da:	e0 8f 01 72 	bral	800068be <_dtoa_r+0x96e>
800065de:	40 85       	lddsp	r5,sp[0x20]
800065e0:	30 14       	mov	r4,1
800065e2:	fa e8 00 10 	ld.d	r8,sp[16]
800065e6:	fa ea 00 08 	ld.d	r10,sp[8]
800065ea:	e0 a0 11 13 	rcall	80008810 <__avr32_f64_div>
800065ee:	e0 a0 10 83 	rcall	800086f4 <__avr32_f64_to_s32>
800065f2:	18 92       	mov	r2,r12
800065f4:	fe b0 e8 e4 	rcall	800037bc <__avr32_s32_to_f64>
800065f8:	fa e8 00 10 	ld.d	r8,sp[16]
800065fc:	fe b0 e7 f2 	rcall	800035e0 <__avr32_f64_mul>
80006600:	14 98       	mov	r8,r10
80006602:	16 99       	mov	r9,r11
80006604:	fa ea 00 08 	ld.d	r10,sp[8]
80006608:	e0 a0 0f 1e 	rcall	80008444 <__avr32_f64_sub>
8000660c:	fa eb 00 08 	st.d	sp[8],r10
80006610:	e4 c8 ff d0 	sub	r8,r2,-48
80006614:	0a c8       	st.b	r5++,r8
80006616:	fc 19 40 24 	movh	r9,0x4024
8000661a:	30 08       	mov	r8,0
8000661c:	02 34       	cp.w	r4,r1
8000661e:	c3 31       	brne	80006684 <_dtoa_r+0x734>
80006620:	fa e8 00 08 	ld.d	r8,sp[8]
80006624:	e0 a0 0f de 	rcall	800085e0 <__avr32_f64_add>
80006628:	16 91       	mov	r1,r11
8000662a:	14 90       	mov	r0,r10
8000662c:	14 98       	mov	r8,r10
8000662e:	02 99       	mov	r9,r1
80006630:	fa ea 00 10 	ld.d	r10,sp[16]
80006634:	e0 a0 10 ba 	rcall	800087a8 <__avr32_f64_cmp_lt>
80006638:	c1 a1       	brne	8000666c <_dtoa_r+0x71c>
8000663a:	fa e8 00 10 	ld.d	r8,sp[16]
8000663e:	00 9a       	mov	r10,r0
80006640:	02 9b       	mov	r11,r1
80006642:	e0 a0 10 6c 	rcall	8000871a <__avr32_f64_cmp_eq>
80006646:	e0 80 02 5e 	breq	80006b02 <_dtoa_r+0xbb2>
8000664a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000664e:	c0 f1       	brne	8000666c <_dtoa_r+0x71c>
80006650:	e0 8f 02 59 	bral	80006b02 <_dtoa_r+0xbb2>
80006654:	40 8a       	lddsp	r10,sp[0x20]
80006656:	14 38       	cp.w	r8,r10
80006658:	c0 30       	breq	8000665e <_dtoa_r+0x70e>
8000665a:	10 95       	mov	r5,r8
8000665c:	c0 98       	rjmp	8000666e <_dtoa_r+0x71e>
8000665e:	33 08       	mov	r8,48
80006660:	40 89       	lddsp	r9,sp[0x20]
80006662:	2f f6       	sub	r6,-1
80006664:	b2 88       	st.b	r9[0x0],r8
80006666:	40 88       	lddsp	r8,sp[0x20]
80006668:	c0 88       	rjmp	80006678 <_dtoa_r+0x728>
8000666a:	40 66       	lddsp	r6,sp[0x18]
8000666c:	33 99       	mov	r9,57
8000666e:	0a 98       	mov	r8,r5
80006670:	11 7a       	ld.ub	r10,--r8
80006672:	f2 0a 18 00 	cp.b	r10,r9
80006676:	ce f0       	breq	80006654 <_dtoa_r+0x704>
80006678:	50 66       	stdsp	sp[0x18],r6
8000667a:	11 89       	ld.ub	r9,r8[0x0]
8000667c:	2f f9       	sub	r9,-1
8000667e:	b0 89       	st.b	r8[0x0],r9
80006680:	e0 8f 02 42 	bral	80006b04 <_dtoa_r+0xbb4>
80006684:	fe b0 e7 ae 	rcall	800035e0 <__avr32_f64_mul>
80006688:	2f f4       	sub	r4,-1
8000668a:	fa eb 00 08 	st.d	sp[8],r10
8000668e:	30 08       	mov	r8,0
80006690:	30 09       	mov	r9,0
80006692:	e0 a0 10 44 	rcall	8000871a <__avr32_f64_cmp_eq>
80006696:	ca 60       	breq	800065e2 <_dtoa_r+0x692>
80006698:	e0 8f 02 35 	bral	80006b02 <_dtoa_r+0xbb2>
8000669c:	40 d8       	lddsp	r8,sp[0x34]
8000669e:	58 08       	cp.w	r8,0
800066a0:	c0 51       	brne	800066aa <_dtoa_r+0x75a>
800066a2:	04 98       	mov	r8,r2
800066a4:	00 95       	mov	r5,r0
800066a6:	40 d4       	lddsp	r4,sp[0x34]
800066a8:	c3 78       	rjmp	80006716 <_dtoa_r+0x7c6>
800066aa:	40 c5       	lddsp	r5,sp[0x30]
800066ac:	58 15       	cp.w	r5,1
800066ae:	e0 89 00 0f 	brgt	800066cc <_dtoa_r+0x77c>
800066b2:	41 74       	lddsp	r4,sp[0x5c]
800066b4:	58 04       	cp.w	r4,0
800066b6:	c0 40       	breq	800066be <_dtoa_r+0x76e>
800066b8:	f4 c9 fb cd 	sub	r9,r10,-1075
800066bc:	c0 48       	rjmp	800066c4 <_dtoa_r+0x774>
800066be:	41 99       	lddsp	r9,sp[0x64]
800066c0:	f2 09 11 36 	rsub	r9,r9,54
800066c4:	04 98       	mov	r8,r2
800066c6:	00 95       	mov	r5,r0
800066c8:	c1 c8       	rjmp	80006700 <_dtoa_r+0x7b0>
800066ca:	d7 03       	nop
800066cc:	e2 c8 00 01 	sub	r8,r1,1
800066d0:	58 01       	cp.w	r1,0
800066d2:	e0 05 17 40 	movge	r5,r0
800066d6:	e2 09 17 40 	movge	r9,r1
800066da:	e1 d1 e5 15 	sublt	r5,r0,r1
800066de:	f9 b9 05 00 	movlt	r9,0
800066e2:	10 32       	cp.w	r2,r8
800066e4:	e5 d8 e4 18 	subge	r8,r2,r8
800066e8:	f1 d2 e5 18 	sublt	r8,r8,r2
800066ec:	e5 d8 e5 02 	addlt	r2,r2,r8
800066f0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800066f4:	f9 d8 e5 0c 	addlt	r12,r12,r8
800066f8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800066fc:	f9 b8 05 00 	movlt	r8,0
80006700:	40 4b       	lddsp	r11,sp[0x10]
80006702:	12 0b       	add	r11,r9
80006704:	50 08       	stdsp	sp[0x0],r8
80006706:	50 4b       	stdsp	sp[0x10],r11
80006708:	12 00       	add	r0,r9
8000670a:	30 1b       	mov	r11,1
8000670c:	0e 9c       	mov	r12,r7
8000670e:	e0 a0 0a c9 	rcall	80007ca0 <__i2b>
80006712:	40 08       	lddsp	r8,sp[0x0]
80006714:	18 94       	mov	r4,r12
80006716:	40 4a       	lddsp	r10,sp[0x10]
80006718:	58 05       	cp.w	r5,0
8000671a:	5f 99       	srgt	r9
8000671c:	58 0a       	cp.w	r10,0
8000671e:	5f 9a       	srgt	r10
80006720:	f5 e9 00 09 	and	r9,r10,r9
80006724:	c0 80       	breq	80006734 <_dtoa_r+0x7e4>
80006726:	40 4c       	lddsp	r12,sp[0x10]
80006728:	f8 05 0d 49 	min	r9,r12,r5
8000672c:	12 1c       	sub	r12,r9
8000672e:	12 10       	sub	r0,r9
80006730:	50 4c       	stdsp	sp[0x10],r12
80006732:	12 15       	sub	r5,r9
80006734:	58 02       	cp.w	r2,0
80006736:	e0 8a 00 27 	brle	80006784 <_dtoa_r+0x834>
8000673a:	40 db       	lddsp	r11,sp[0x34]
8000673c:	58 0b       	cp.w	r11,0
8000673e:	c1 d0       	breq	80006778 <_dtoa_r+0x828>
80006740:	58 08       	cp.w	r8,0
80006742:	e0 8a 00 17 	brle	80006770 <_dtoa_r+0x820>
80006746:	10 9a       	mov	r10,r8
80006748:	50 08       	stdsp	sp[0x0],r8
8000674a:	08 9b       	mov	r11,r4
8000674c:	0e 9c       	mov	r12,r7
8000674e:	e0 a0 0a ef 	rcall	80007d2c <__pow5mult>
80006752:	06 9a       	mov	r10,r3
80006754:	18 9b       	mov	r11,r12
80006756:	18 94       	mov	r4,r12
80006758:	0e 9c       	mov	r12,r7
8000675a:	e0 a0 0a 23 	rcall	80007ba0 <__multiply>
8000675e:	18 99       	mov	r9,r12
80006760:	06 9b       	mov	r11,r3
80006762:	50 19       	stdsp	sp[0x4],r9
80006764:	0e 9c       	mov	r12,r7
80006766:	e0 a0 08 cf 	rcall	80007904 <_Bfree>
8000676a:	40 19       	lddsp	r9,sp[0x4]
8000676c:	40 08       	lddsp	r8,sp[0x0]
8000676e:	12 93       	mov	r3,r9
80006770:	e4 08 01 0a 	sub	r10,r2,r8
80006774:	c0 80       	breq	80006784 <_dtoa_r+0x834>
80006776:	c0 28       	rjmp	8000677a <_dtoa_r+0x82a>
80006778:	04 9a       	mov	r10,r2
8000677a:	06 9b       	mov	r11,r3
8000677c:	0e 9c       	mov	r12,r7
8000677e:	e0 a0 0a d7 	rcall	80007d2c <__pow5mult>
80006782:	18 93       	mov	r3,r12
80006784:	30 1b       	mov	r11,1
80006786:	0e 9c       	mov	r12,r7
80006788:	e0 a0 0a 8c 	rcall	80007ca0 <__i2b>
8000678c:	41 1a       	lddsp	r10,sp[0x44]
8000678e:	18 92       	mov	r2,r12
80006790:	58 0a       	cp.w	r10,0
80006792:	e0 8a 00 07 	brle	800067a0 <_dtoa_r+0x850>
80006796:	18 9b       	mov	r11,r12
80006798:	0e 9c       	mov	r12,r7
8000679a:	e0 a0 0a c9 	rcall	80007d2c <__pow5mult>
8000679e:	18 92       	mov	r2,r12
800067a0:	40 c9       	lddsp	r9,sp[0x30]
800067a2:	58 19       	cp.w	r9,1
800067a4:	e0 89 00 14 	brgt	800067cc <_dtoa_r+0x87c>
800067a8:	40 38       	lddsp	r8,sp[0xc]
800067aa:	58 08       	cp.w	r8,0
800067ac:	c1 01       	brne	800067cc <_dtoa_r+0x87c>
800067ae:	40 29       	lddsp	r9,sp[0x8]
800067b0:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800067b4:	c0 c1       	brne	800067cc <_dtoa_r+0x87c>
800067b6:	12 98       	mov	r8,r9
800067b8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800067bc:	c0 80       	breq	800067cc <_dtoa_r+0x87c>
800067be:	40 4c       	lddsp	r12,sp[0x10]
800067c0:	30 1b       	mov	r11,1
800067c2:	2f fc       	sub	r12,-1
800067c4:	2f f0       	sub	r0,-1
800067c6:	50 4c       	stdsp	sp[0x10],r12
800067c8:	50 6b       	stdsp	sp[0x18],r11
800067ca:	c0 38       	rjmp	800067d0 <_dtoa_r+0x880>
800067cc:	30 0a       	mov	r10,0
800067ce:	50 6a       	stdsp	sp[0x18],r10
800067d0:	41 19       	lddsp	r9,sp[0x44]
800067d2:	58 09       	cp.w	r9,0
800067d4:	c0 31       	brne	800067da <_dtoa_r+0x88a>
800067d6:	30 1c       	mov	r12,1
800067d8:	c0 98       	rjmp	800067ea <_dtoa_r+0x89a>
800067da:	64 48       	ld.w	r8,r2[0x10]
800067dc:	2f c8       	sub	r8,-4
800067de:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800067e2:	e0 a0 08 01 	rcall	800077e4 <__hi0bits>
800067e6:	f8 0c 11 20 	rsub	r12,r12,32
800067ea:	40 4b       	lddsp	r11,sp[0x10]
800067ec:	f8 0b 00 08 	add	r8,r12,r11
800067f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800067f4:	c0 c0       	breq	8000680c <_dtoa_r+0x8bc>
800067f6:	f0 08 11 20 	rsub	r8,r8,32
800067fa:	58 48       	cp.w	r8,4
800067fc:	e0 8a 00 06 	brle	80006808 <_dtoa_r+0x8b8>
80006800:	20 48       	sub	r8,4
80006802:	10 0b       	add	r11,r8
80006804:	50 4b       	stdsp	sp[0x10],r11
80006806:	c0 78       	rjmp	80006814 <_dtoa_r+0x8c4>
80006808:	58 48       	cp.w	r8,4
8000680a:	c0 70       	breq	80006818 <_dtoa_r+0x8c8>
8000680c:	40 4a       	lddsp	r10,sp[0x10]
8000680e:	2e 48       	sub	r8,-28
80006810:	10 0a       	add	r10,r8
80006812:	50 4a       	stdsp	sp[0x10],r10
80006814:	10 00       	add	r0,r8
80006816:	10 05       	add	r5,r8
80006818:	58 00       	cp.w	r0,0
8000681a:	e0 8a 00 08 	brle	8000682a <_dtoa_r+0x8da>
8000681e:	06 9b       	mov	r11,r3
80006820:	00 9a       	mov	r10,r0
80006822:	0e 9c       	mov	r12,r7
80006824:	e0 a0 09 7a 	rcall	80007b18 <__lshift>
80006828:	18 93       	mov	r3,r12
8000682a:	40 49       	lddsp	r9,sp[0x10]
8000682c:	58 09       	cp.w	r9,0
8000682e:	e0 8a 00 08 	brle	8000683e <_dtoa_r+0x8ee>
80006832:	04 9b       	mov	r11,r2
80006834:	12 9a       	mov	r10,r9
80006836:	0e 9c       	mov	r12,r7
80006838:	e0 a0 09 70 	rcall	80007b18 <__lshift>
8000683c:	18 92       	mov	r2,r12
8000683e:	41 48       	lddsp	r8,sp[0x50]
80006840:	58 08       	cp.w	r8,0
80006842:	c1 b0       	breq	80006878 <_dtoa_r+0x928>
80006844:	04 9b       	mov	r11,r2
80006846:	06 9c       	mov	r12,r3
80006848:	e0 a0 08 45 	rcall	800078d2 <__mcmp>
8000684c:	c1 64       	brge	80006878 <_dtoa_r+0x928>
8000684e:	06 9b       	mov	r11,r3
80006850:	30 09       	mov	r9,0
80006852:	30 aa       	mov	r10,10
80006854:	0e 9c       	mov	r12,r7
80006856:	e0 a0 0a 2d 	rcall	80007cb0 <__multadd>
8000685a:	20 16       	sub	r6,1
8000685c:	18 93       	mov	r3,r12
8000685e:	40 dc       	lddsp	r12,sp[0x34]
80006860:	58 0c       	cp.w	r12,0
80006862:	c0 31       	brne	80006868 <_dtoa_r+0x918>
80006864:	40 91       	lddsp	r1,sp[0x24]
80006866:	c0 98       	rjmp	80006878 <_dtoa_r+0x928>
80006868:	08 9b       	mov	r11,r4
8000686a:	40 91       	lddsp	r1,sp[0x24]
8000686c:	30 09       	mov	r9,0
8000686e:	30 aa       	mov	r10,10
80006870:	0e 9c       	mov	r12,r7
80006872:	e0 a0 0a 1f 	rcall	80007cb0 <__multadd>
80006876:	18 94       	mov	r4,r12
80006878:	58 01       	cp.w	r1,0
8000687a:	5f a9       	srle	r9
8000687c:	40 cb       	lddsp	r11,sp[0x30]
8000687e:	58 2b       	cp.w	r11,2
80006880:	5f 98       	srgt	r8
80006882:	f3 e8 00 08 	and	r8,r9,r8
80006886:	c2 50       	breq	800068d0 <_dtoa_r+0x980>
80006888:	58 01       	cp.w	r1,0
8000688a:	c1 11       	brne	800068ac <_dtoa_r+0x95c>
8000688c:	04 9b       	mov	r11,r2
8000688e:	02 99       	mov	r9,r1
80006890:	30 5a       	mov	r10,5
80006892:	0e 9c       	mov	r12,r7
80006894:	e0 a0 0a 0e 	rcall	80007cb0 <__multadd>
80006898:	18 92       	mov	r2,r12
8000689a:	18 9b       	mov	r11,r12
8000689c:	06 9c       	mov	r12,r3
8000689e:	e0 a0 08 1a 	rcall	800078d2 <__mcmp>
800068a2:	e0 89 00 0f 	brgt	800068c0 <_dtoa_r+0x970>
800068a6:	c0 38       	rjmp	800068ac <_dtoa_r+0x95c>
800068a8:	30 02       	mov	r2,0
800068aa:	04 94       	mov	r4,r2
800068ac:	40 ea       	lddsp	r10,sp[0x38]
800068ae:	30 09       	mov	r9,0
800068b0:	5c da       	com	r10
800068b2:	40 85       	lddsp	r5,sp[0x20]
800068b4:	50 6a       	stdsp	sp[0x18],r10
800068b6:	50 49       	stdsp	sp[0x10],r9
800068b8:	c0 f9       	rjmp	80006ad6 <_dtoa_r+0xb86>
800068ba:	08 92       	mov	r2,r4
800068bc:	40 66       	lddsp	r6,sp[0x18]
800068be:	04 94       	mov	r4,r2
800068c0:	2f f6       	sub	r6,-1
800068c2:	50 66       	stdsp	sp[0x18],r6
800068c4:	33 18       	mov	r8,49
800068c6:	40 85       	lddsp	r5,sp[0x20]
800068c8:	0a c8       	st.b	r5++,r8
800068ca:	30 08       	mov	r8,0
800068cc:	50 48       	stdsp	sp[0x10],r8
800068ce:	c0 49       	rjmp	80006ad6 <_dtoa_r+0xb86>
800068d0:	40 dc       	lddsp	r12,sp[0x34]
800068d2:	58 0c       	cp.w	r12,0
800068d4:	e0 80 00 b5 	breq	80006a3e <_dtoa_r+0xaee>
800068d8:	58 05       	cp.w	r5,0
800068da:	e0 8a 00 08 	brle	800068ea <_dtoa_r+0x99a>
800068de:	08 9b       	mov	r11,r4
800068e0:	0a 9a       	mov	r10,r5
800068e2:	0e 9c       	mov	r12,r7
800068e4:	e0 a0 09 1a 	rcall	80007b18 <__lshift>
800068e8:	18 94       	mov	r4,r12
800068ea:	40 6b       	lddsp	r11,sp[0x18]
800068ec:	58 0b       	cp.w	r11,0
800068ee:	c0 31       	brne	800068f4 <_dtoa_r+0x9a4>
800068f0:	08 9c       	mov	r12,r4
800068f2:	c1 38       	rjmp	80006918 <_dtoa_r+0x9c8>
800068f4:	68 1b       	ld.w	r11,r4[0x4]
800068f6:	0e 9c       	mov	r12,r7
800068f8:	e0 a0 08 20 	rcall	80007938 <_Balloc>
800068fc:	68 4a       	ld.w	r10,r4[0x10]
800068fe:	18 95       	mov	r5,r12
80006900:	e8 cb ff f4 	sub	r11,r4,-12
80006904:	2f ea       	sub	r10,-2
80006906:	2f 4c       	sub	r12,-12
80006908:	a3 6a       	lsl	r10,0x2
8000690a:	fe b0 e8 3e 	rcall	80003986 <memcpy>
8000690e:	0a 9b       	mov	r11,r5
80006910:	30 1a       	mov	r10,1
80006912:	0e 9c       	mov	r12,r7
80006914:	e0 a0 09 02 	rcall	80007b18 <__lshift>
80006918:	50 44       	stdsp	sp[0x10],r4
8000691a:	40 3a       	lddsp	r10,sp[0xc]
8000691c:	30 19       	mov	r9,1
8000691e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006922:	18 94       	mov	r4,r12
80006924:	50 da       	stdsp	sp[0x34],r10
80006926:	40 85       	lddsp	r5,sp[0x20]
80006928:	50 99       	stdsp	sp[0x24],r9
8000692a:	50 26       	stdsp	sp[0x8],r6
8000692c:	50 e1       	stdsp	sp[0x38],r1
8000692e:	04 9b       	mov	r11,r2
80006930:	06 9c       	mov	r12,r3
80006932:	fe b0 fa 7f 	rcall	80005e30 <quorem>
80006936:	40 4b       	lddsp	r11,sp[0x10]
80006938:	f8 c0 ff d0 	sub	r0,r12,-48
8000693c:	06 9c       	mov	r12,r3
8000693e:	e0 a0 07 ca 	rcall	800078d2 <__mcmp>
80006942:	08 9a       	mov	r10,r4
80006944:	50 6c       	stdsp	sp[0x18],r12
80006946:	04 9b       	mov	r11,r2
80006948:	0e 9c       	mov	r12,r7
8000694a:	e0 a0 08 7f 	rcall	80007a48 <__mdiff>
8000694e:	18 91       	mov	r1,r12
80006950:	78 38       	ld.w	r8,r12[0xc]
80006952:	58 08       	cp.w	r8,0
80006954:	c0 30       	breq	8000695a <_dtoa_r+0xa0a>
80006956:	30 16       	mov	r6,1
80006958:	c0 68       	rjmp	80006964 <_dtoa_r+0xa14>
8000695a:	18 9b       	mov	r11,r12
8000695c:	06 9c       	mov	r12,r3
8000695e:	e0 a0 07 ba 	rcall	800078d2 <__mcmp>
80006962:	18 96       	mov	r6,r12
80006964:	0e 9c       	mov	r12,r7
80006966:	02 9b       	mov	r11,r1
80006968:	e0 a0 07 ce 	rcall	80007904 <_Bfree>
8000696c:	40 cc       	lddsp	r12,sp[0x30]
8000696e:	ed ec 10 08 	or	r8,r6,r12
80006972:	c0 d1       	brne	8000698c <_dtoa_r+0xa3c>
80006974:	40 db       	lddsp	r11,sp[0x34]
80006976:	58 0b       	cp.w	r11,0
80006978:	c0 a1       	brne	8000698c <_dtoa_r+0xa3c>
8000697a:	40 26       	lddsp	r6,sp[0x8]
8000697c:	e0 40 00 39 	cp.w	r0,57
80006980:	c3 00       	breq	800069e0 <_dtoa_r+0xa90>
80006982:	40 6a       	lddsp	r10,sp[0x18]
80006984:	58 0a       	cp.w	r10,0
80006986:	e0 89 00 24 	brgt	800069ce <_dtoa_r+0xa7e>
8000698a:	c2 f8       	rjmp	800069e8 <_dtoa_r+0xa98>
8000698c:	40 69       	lddsp	r9,sp[0x18]
8000698e:	58 09       	cp.w	r9,0
80006990:	c0 85       	brlt	800069a0 <_dtoa_r+0xa50>
80006992:	12 98       	mov	r8,r9
80006994:	40 cc       	lddsp	r12,sp[0x30]
80006996:	18 48       	or	r8,r12
80006998:	c1 d1       	brne	800069d2 <_dtoa_r+0xa82>
8000699a:	40 db       	lddsp	r11,sp[0x34]
8000699c:	58 0b       	cp.w	r11,0
8000699e:	c1 a1       	brne	800069d2 <_dtoa_r+0xa82>
800069a0:	0c 99       	mov	r9,r6
800069a2:	40 26       	lddsp	r6,sp[0x8]
800069a4:	58 09       	cp.w	r9,0
800069a6:	e0 8a 00 21 	brle	800069e8 <_dtoa_r+0xa98>
800069aa:	06 9b       	mov	r11,r3
800069ac:	30 1a       	mov	r10,1
800069ae:	0e 9c       	mov	r12,r7
800069b0:	e0 a0 08 b4 	rcall	80007b18 <__lshift>
800069b4:	04 9b       	mov	r11,r2
800069b6:	18 93       	mov	r3,r12
800069b8:	e0 a0 07 8d 	rcall	800078d2 <__mcmp>
800069bc:	e0 89 00 06 	brgt	800069c8 <_dtoa_r+0xa78>
800069c0:	c1 41       	brne	800069e8 <_dtoa_r+0xa98>
800069c2:	ed b0 00 00 	bld	r0,0x0
800069c6:	c1 11       	brne	800069e8 <_dtoa_r+0xa98>
800069c8:	e0 40 00 39 	cp.w	r0,57
800069cc:	c0 a0       	breq	800069e0 <_dtoa_r+0xa90>
800069ce:	2f f0       	sub	r0,-1
800069d0:	c0 c8       	rjmp	800069e8 <_dtoa_r+0xa98>
800069d2:	58 06       	cp.w	r6,0
800069d4:	e0 8a 00 0c 	brle	800069ec <_dtoa_r+0xa9c>
800069d8:	40 26       	lddsp	r6,sp[0x8]
800069da:	e0 40 00 39 	cp.w	r0,57
800069de:	c0 41       	brne	800069e6 <_dtoa_r+0xa96>
800069e0:	33 98       	mov	r8,57
800069e2:	0a c8       	st.b	r5++,r8
800069e4:	c6 78       	rjmp	80006ab2 <_dtoa_r+0xb62>
800069e6:	2f f0       	sub	r0,-1
800069e8:	0a c0       	st.b	r5++,r0
800069ea:	c7 58       	rjmp	80006ad4 <_dtoa_r+0xb84>
800069ec:	0a c0       	st.b	r5++,r0
800069ee:	40 9a       	lddsp	r10,sp[0x24]
800069f0:	40 e9       	lddsp	r9,sp[0x38]
800069f2:	12 3a       	cp.w	r10,r9
800069f4:	c4 30       	breq	80006a7a <_dtoa_r+0xb2a>
800069f6:	06 9b       	mov	r11,r3
800069f8:	30 09       	mov	r9,0
800069fa:	30 aa       	mov	r10,10
800069fc:	0e 9c       	mov	r12,r7
800069fe:	e0 a0 09 59 	rcall	80007cb0 <__multadd>
80006a02:	40 48       	lddsp	r8,sp[0x10]
80006a04:	18 93       	mov	r3,r12
80006a06:	08 38       	cp.w	r8,r4
80006a08:	c0 91       	brne	80006a1a <_dtoa_r+0xaca>
80006a0a:	10 9b       	mov	r11,r8
80006a0c:	30 09       	mov	r9,0
80006a0e:	30 aa       	mov	r10,10
80006a10:	0e 9c       	mov	r12,r7
80006a12:	e0 a0 09 4f 	rcall	80007cb0 <__multadd>
80006a16:	50 4c       	stdsp	sp[0x10],r12
80006a18:	c0 e8       	rjmp	80006a34 <_dtoa_r+0xae4>
80006a1a:	40 4b       	lddsp	r11,sp[0x10]
80006a1c:	30 09       	mov	r9,0
80006a1e:	30 aa       	mov	r10,10
80006a20:	0e 9c       	mov	r12,r7
80006a22:	e0 a0 09 47 	rcall	80007cb0 <__multadd>
80006a26:	08 9b       	mov	r11,r4
80006a28:	50 4c       	stdsp	sp[0x10],r12
80006a2a:	30 09       	mov	r9,0
80006a2c:	30 aa       	mov	r10,10
80006a2e:	0e 9c       	mov	r12,r7
80006a30:	e0 a0 09 40 	rcall	80007cb0 <__multadd>
80006a34:	18 94       	mov	r4,r12
80006a36:	40 9c       	lddsp	r12,sp[0x24]
80006a38:	2f fc       	sub	r12,-1
80006a3a:	50 9c       	stdsp	sp[0x24],r12
80006a3c:	c7 9b       	rjmp	8000692e <_dtoa_r+0x9de>
80006a3e:	30 18       	mov	r8,1
80006a40:	06 90       	mov	r0,r3
80006a42:	40 85       	lddsp	r5,sp[0x20]
80006a44:	08 93       	mov	r3,r4
80006a46:	0c 94       	mov	r4,r6
80006a48:	10 96       	mov	r6,r8
80006a4a:	04 9b       	mov	r11,r2
80006a4c:	00 9c       	mov	r12,r0
80006a4e:	fe b0 f9 f1 	rcall	80005e30 <quorem>
80006a52:	2d 0c       	sub	r12,-48
80006a54:	0a cc       	st.b	r5++,r12
80006a56:	02 36       	cp.w	r6,r1
80006a58:	c0 a4       	brge	80006a6c <_dtoa_r+0xb1c>
80006a5a:	00 9b       	mov	r11,r0
80006a5c:	30 09       	mov	r9,0
80006a5e:	30 aa       	mov	r10,10
80006a60:	0e 9c       	mov	r12,r7
80006a62:	2f f6       	sub	r6,-1
80006a64:	e0 a0 09 26 	rcall	80007cb0 <__multadd>
80006a68:	18 90       	mov	r0,r12
80006a6a:	cf 0b       	rjmp	80006a4a <_dtoa_r+0xafa>
80006a6c:	08 96       	mov	r6,r4
80006a6e:	30 0b       	mov	r11,0
80006a70:	06 94       	mov	r4,r3
80006a72:	50 4b       	stdsp	sp[0x10],r11
80006a74:	00 93       	mov	r3,r0
80006a76:	18 90       	mov	r0,r12
80006a78:	c0 28       	rjmp	80006a7c <_dtoa_r+0xb2c>
80006a7a:	40 26       	lddsp	r6,sp[0x8]
80006a7c:	06 9b       	mov	r11,r3
80006a7e:	30 1a       	mov	r10,1
80006a80:	0e 9c       	mov	r12,r7
80006a82:	e0 a0 08 4b 	rcall	80007b18 <__lshift>
80006a86:	04 9b       	mov	r11,r2
80006a88:	18 93       	mov	r3,r12
80006a8a:	e0 a0 07 24 	rcall	800078d2 <__mcmp>
80006a8e:	e0 89 00 12 	brgt	80006ab2 <_dtoa_r+0xb62>
80006a92:	c1 b1       	brne	80006ac8 <_dtoa_r+0xb78>
80006a94:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006a98:	c0 d1       	brne	80006ab2 <_dtoa_r+0xb62>
80006a9a:	c1 78       	rjmp	80006ac8 <_dtoa_r+0xb78>
80006a9c:	40 89       	lddsp	r9,sp[0x20]
80006a9e:	12 38       	cp.w	r8,r9
80006aa0:	c0 30       	breq	80006aa6 <_dtoa_r+0xb56>
80006aa2:	10 95       	mov	r5,r8
80006aa4:	c0 88       	rjmp	80006ab4 <_dtoa_r+0xb64>
80006aa6:	2f f6       	sub	r6,-1
80006aa8:	50 66       	stdsp	sp[0x18],r6
80006aaa:	33 18       	mov	r8,49
80006aac:	40 8c       	lddsp	r12,sp[0x20]
80006aae:	b8 88       	st.b	r12[0x0],r8
80006ab0:	c1 38       	rjmp	80006ad6 <_dtoa_r+0xb86>
80006ab2:	33 9a       	mov	r10,57
80006ab4:	0a 98       	mov	r8,r5
80006ab6:	11 79       	ld.ub	r9,--r8
80006ab8:	f4 09 18 00 	cp.b	r9,r10
80006abc:	cf 00       	breq	80006a9c <_dtoa_r+0xb4c>
80006abe:	2f f9       	sub	r9,-1
80006ac0:	b0 89       	st.b	r8[0x0],r9
80006ac2:	c0 98       	rjmp	80006ad4 <_dtoa_r+0xb84>
80006ac4:	10 95       	mov	r5,r8
80006ac6:	c0 28       	rjmp	80006aca <_dtoa_r+0xb7a>
80006ac8:	33 09       	mov	r9,48
80006aca:	0a 98       	mov	r8,r5
80006acc:	11 7a       	ld.ub	r10,--r8
80006ace:	f2 0a 18 00 	cp.b	r10,r9
80006ad2:	cf 90       	breq	80006ac4 <_dtoa_r+0xb74>
80006ad4:	50 66       	stdsp	sp[0x18],r6
80006ad6:	04 9b       	mov	r11,r2
80006ad8:	0e 9c       	mov	r12,r7
80006ada:	e0 a0 07 15 	rcall	80007904 <_Bfree>
80006ade:	58 04       	cp.w	r4,0
80006ae0:	c1 20       	breq	80006b04 <_dtoa_r+0xbb4>
80006ae2:	40 4b       	lddsp	r11,sp[0x10]
80006ae4:	08 3b       	cp.w	r11,r4
80006ae6:	5f 19       	srne	r9
80006ae8:	58 0b       	cp.w	r11,0
80006aea:	5f 18       	srne	r8
80006aec:	f3 e8 00 08 	and	r8,r9,r8
80006af0:	c0 40       	breq	80006af8 <_dtoa_r+0xba8>
80006af2:	0e 9c       	mov	r12,r7
80006af4:	e0 a0 07 08 	rcall	80007904 <_Bfree>
80006af8:	08 9b       	mov	r11,r4
80006afa:	0e 9c       	mov	r12,r7
80006afc:	e0 a0 07 04 	rcall	80007904 <_Bfree>
80006b00:	c0 28       	rjmp	80006b04 <_dtoa_r+0xbb4>
80006b02:	50 66       	stdsp	sp[0x18],r6
80006b04:	0e 9c       	mov	r12,r7
80006b06:	06 9b       	mov	r11,r3
80006b08:	e0 a0 06 fe 	rcall	80007904 <_Bfree>
80006b0c:	30 08       	mov	r8,0
80006b0e:	aa 88       	st.b	r5[0x0],r8
80006b10:	40 68       	lddsp	r8,sp[0x18]
80006b12:	41 5a       	lddsp	r10,sp[0x54]
80006b14:	2f f8       	sub	r8,-1
80006b16:	41 29       	lddsp	r9,sp[0x48]
80006b18:	95 08       	st.w	r10[0x0],r8
80006b1a:	40 8c       	lddsp	r12,sp[0x20]
80006b1c:	58 09       	cp.w	r9,0
80006b1e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006b22:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006b26:	2e 6d       	sub	sp,-104
80006b28:	d8 32       	popm	r0-r7,pc
80006b2a:	d7 03       	nop

80006b2c <_fflush_r>:
80006b2c:	d4 21       	pushm	r4-r7,lr
80006b2e:	16 97       	mov	r7,r11
80006b30:	18 96       	mov	r6,r12
80006b32:	76 48       	ld.w	r8,r11[0x10]
80006b34:	58 08       	cp.w	r8,0
80006b36:	c7 f0       	breq	80006c34 <_fflush_r+0x108>
80006b38:	58 0c       	cp.w	r12,0
80006b3a:	c0 50       	breq	80006b44 <_fflush_r+0x18>
80006b3c:	78 68       	ld.w	r8,r12[0x18]
80006b3e:	58 08       	cp.w	r8,0
80006b40:	c0 21       	brne	80006b44 <_fflush_r+0x18>
80006b42:	cc dc       	rcall	80006cdc <__sinit>
80006b44:	fe c8 d3 3c 	sub	r8,pc,-11460
80006b48:	10 37       	cp.w	r7,r8
80006b4a:	c0 31       	brne	80006b50 <_fflush_r+0x24>
80006b4c:	6c 07       	ld.w	r7,r6[0x0]
80006b4e:	c0 c8       	rjmp	80006b66 <_fflush_r+0x3a>
80006b50:	fe c8 d3 28 	sub	r8,pc,-11480
80006b54:	10 37       	cp.w	r7,r8
80006b56:	c0 31       	brne	80006b5c <_fflush_r+0x30>
80006b58:	6c 17       	ld.w	r7,r6[0x4]
80006b5a:	c0 68       	rjmp	80006b66 <_fflush_r+0x3a>
80006b5c:	fe c8 d3 14 	sub	r8,pc,-11500
80006b60:	10 37       	cp.w	r7,r8
80006b62:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006b66:	8e 6a       	ld.sh	r10,r7[0xc]
80006b68:	14 98       	mov	r8,r10
80006b6a:	ed ba 00 03 	bld	r10,0x3
80006b6e:	c4 20       	breq	80006bf2 <_fflush_r+0xc6>
80006b70:	ab ba       	sbr	r10,0xb
80006b72:	ae 6a       	st.h	r7[0xc],r10
80006b74:	6e 18       	ld.w	r8,r7[0x4]
80006b76:	58 08       	cp.w	r8,0
80006b78:	e0 89 00 06 	brgt	80006b84 <_fflush_r+0x58>
80006b7c:	6f 08       	ld.w	r8,r7[0x40]
80006b7e:	58 08       	cp.w	r8,0
80006b80:	e0 8a 00 5a 	brle	80006c34 <_fflush_r+0x108>
80006b84:	6e b8       	ld.w	r8,r7[0x2c]
80006b86:	58 08       	cp.w	r8,0
80006b88:	c5 60       	breq	80006c34 <_fflush_r+0x108>
80006b8a:	e2 1a 10 00 	andl	r10,0x1000,COH
80006b8e:	c0 30       	breq	80006b94 <_fflush_r+0x68>
80006b90:	6f 55       	ld.w	r5,r7[0x54]
80006b92:	c0 f8       	rjmp	80006bb0 <_fflush_r+0x84>
80006b94:	30 19       	mov	r9,1
80006b96:	6e 8b       	ld.w	r11,r7[0x20]
80006b98:	0c 9c       	mov	r12,r6
80006b9a:	5d 18       	icall	r8
80006b9c:	18 95       	mov	r5,r12
80006b9e:	5b fc       	cp.w	r12,-1
80006ba0:	c0 81       	brne	80006bb0 <_fflush_r+0x84>
80006ba2:	6c 38       	ld.w	r8,r6[0xc]
80006ba4:	59 d8       	cp.w	r8,29
80006ba6:	c4 70       	breq	80006c34 <_fflush_r+0x108>
80006ba8:	8e 68       	ld.sh	r8,r7[0xc]
80006baa:	a7 a8       	sbr	r8,0x6
80006bac:	ae 68       	st.h	r7[0xc],r8
80006bae:	d8 22       	popm	r4-r7,pc
80006bb0:	8e 68       	ld.sh	r8,r7[0xc]
80006bb2:	ed b8 00 02 	bld	r8,0x2
80006bb6:	c0 91       	brne	80006bc8 <_fflush_r+0x9c>
80006bb8:	6e 18       	ld.w	r8,r7[0x4]
80006bba:	10 15       	sub	r5,r8
80006bbc:	6e d8       	ld.w	r8,r7[0x34]
80006bbe:	58 08       	cp.w	r8,0
80006bc0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006bc4:	eb d8 e1 15 	subne	r5,r5,r8
80006bc8:	6e b8       	ld.w	r8,r7[0x2c]
80006bca:	0c 9c       	mov	r12,r6
80006bcc:	30 09       	mov	r9,0
80006bce:	0a 9a       	mov	r10,r5
80006bd0:	6e 8b       	ld.w	r11,r7[0x20]
80006bd2:	5d 18       	icall	r8
80006bd4:	8e 68       	ld.sh	r8,r7[0xc]
80006bd6:	0a 3c       	cp.w	r12,r5
80006bd8:	c2 61       	brne	80006c24 <_fflush_r+0xf8>
80006bda:	ab d8       	cbr	r8,0xb
80006bdc:	30 0c       	mov	r12,0
80006bde:	6e 49       	ld.w	r9,r7[0x10]
80006be0:	ae 68       	st.h	r7[0xc],r8
80006be2:	8f 1c       	st.w	r7[0x4],r12
80006be4:	8f 09       	st.w	r7[0x0],r9
80006be6:	ed b8 00 0c 	bld	r8,0xc
80006bea:	c2 51       	brne	80006c34 <_fflush_r+0x108>
80006bec:	ef 45 00 54 	st.w	r7[84],r5
80006bf0:	d8 22       	popm	r4-r7,pc
80006bf2:	6e 45       	ld.w	r5,r7[0x10]
80006bf4:	58 05       	cp.w	r5,0
80006bf6:	c1 f0       	breq	80006c34 <_fflush_r+0x108>
80006bf8:	6e 04       	ld.w	r4,r7[0x0]
80006bfa:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006bfe:	8f 05       	st.w	r7[0x0],r5
80006c00:	f9 b8 01 00 	movne	r8,0
80006c04:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006c08:	0a 14       	sub	r4,r5
80006c0a:	8f 28       	st.w	r7[0x8],r8
80006c0c:	c1 18       	rjmp	80006c2e <_fflush_r+0x102>
80006c0e:	08 99       	mov	r9,r4
80006c10:	0a 9a       	mov	r10,r5
80006c12:	6e a8       	ld.w	r8,r7[0x28]
80006c14:	6e 8b       	ld.w	r11,r7[0x20]
80006c16:	0c 9c       	mov	r12,r6
80006c18:	5d 18       	icall	r8
80006c1a:	18 14       	sub	r4,r12
80006c1c:	58 0c       	cp.w	r12,0
80006c1e:	e0 89 00 07 	brgt	80006c2c <_fflush_r+0x100>
80006c22:	8e 68       	ld.sh	r8,r7[0xc]
80006c24:	a7 a8       	sbr	r8,0x6
80006c26:	3f fc       	mov	r12,-1
80006c28:	ae 68       	st.h	r7[0xc],r8
80006c2a:	d8 22       	popm	r4-r7,pc
80006c2c:	18 05       	add	r5,r12
80006c2e:	58 04       	cp.w	r4,0
80006c30:	fe 99 ff ef 	brgt	80006c0e <_fflush_r+0xe2>
80006c34:	d8 2a       	popm	r4-r7,pc,r12=0
80006c36:	d7 03       	nop

80006c38 <__sfp_lock_acquire>:
80006c38:	5e fc       	retal	r12

80006c3a <__sfp_lock_release>:
80006c3a:	5e fc       	retal	r12

80006c3c <_cleanup_r>:
80006c3c:	d4 01       	pushm	lr
80006c3e:	fe cb e8 7a 	sub	r11,pc,-6022
80006c42:	e0 a0 02 fd 	rcall	8000723c <_fwalk>
80006c46:	d8 02       	popm	pc

80006c48 <__sfmoreglue>:
80006c48:	d4 21       	pushm	r4-r7,lr
80006c4a:	16 95       	mov	r5,r11
80006c4c:	f6 06 10 5c 	mul	r6,r11,92
80006c50:	ec cb ff f4 	sub	r11,r6,-12
80006c54:	e0 a0 03 84 	rcall	8000735c <_malloc_r>
80006c58:	18 97       	mov	r7,r12
80006c5a:	c0 90       	breq	80006c6c <__sfmoreglue+0x24>
80006c5c:	99 15       	st.w	r12[0x4],r5
80006c5e:	30 0b       	mov	r11,0
80006c60:	2f 4c       	sub	r12,-12
80006c62:	0c 9a       	mov	r10,r6
80006c64:	8f 2c       	st.w	r7[0x8],r12
80006c66:	8f 0b       	st.w	r7[0x0],r11
80006c68:	fe b0 e7 33 	rcall	80003ace <memset>
80006c6c:	0e 9c       	mov	r12,r7
80006c6e:	d8 22       	popm	r4-r7,pc

80006c70 <__sfp>:
80006c70:	d4 21       	pushm	r4-r7,lr
80006c72:	fe c8 d4 06 	sub	r8,pc,-11258
80006c76:	18 96       	mov	r6,r12
80006c78:	70 07       	ld.w	r7,r8[0x0]
80006c7a:	6e 68       	ld.w	r8,r7[0x18]
80006c7c:	58 08       	cp.w	r8,0
80006c7e:	c0 31       	brne	80006c84 <__sfp+0x14>
80006c80:	0e 9c       	mov	r12,r7
80006c82:	c2 dc       	rcall	80006cdc <__sinit>
80006c84:	ee c7 ff 28 	sub	r7,r7,-216
80006c88:	30 05       	mov	r5,0
80006c8a:	6e 2c       	ld.w	r12,r7[0x8]
80006c8c:	6e 18       	ld.w	r8,r7[0x4]
80006c8e:	c0 68       	rjmp	80006c9a <__sfp+0x2a>
80006c90:	98 69       	ld.sh	r9,r12[0xc]
80006c92:	ea 09 19 00 	cp.h	r9,r5
80006c96:	c1 10       	breq	80006cb8 <__sfp+0x48>
80006c98:	2a 4c       	sub	r12,-92
80006c9a:	20 18       	sub	r8,1
80006c9c:	cf a7       	brpl	80006c90 <__sfp+0x20>
80006c9e:	6e 08       	ld.w	r8,r7[0x0]
80006ca0:	58 08       	cp.w	r8,0
80006ca2:	c0 61       	brne	80006cae <__sfp+0x3e>
80006ca4:	30 4b       	mov	r11,4
80006ca6:	0c 9c       	mov	r12,r6
80006ca8:	cd 0f       	rcall	80006c48 <__sfmoreglue>
80006caa:	8f 0c       	st.w	r7[0x0],r12
80006cac:	c0 30       	breq	80006cb2 <__sfp+0x42>
80006cae:	6e 07       	ld.w	r7,r7[0x0]
80006cb0:	ce db       	rjmp	80006c8a <__sfp+0x1a>
80006cb2:	30 c8       	mov	r8,12
80006cb4:	8d 38       	st.w	r6[0xc],r8
80006cb6:	d8 22       	popm	r4-r7,pc
80006cb8:	30 08       	mov	r8,0
80006cba:	f9 48 00 4c 	st.w	r12[76],r8
80006cbe:	99 08       	st.w	r12[0x0],r8
80006cc0:	99 28       	st.w	r12[0x8],r8
80006cc2:	99 18       	st.w	r12[0x4],r8
80006cc4:	99 48       	st.w	r12[0x10],r8
80006cc6:	99 58       	st.w	r12[0x14],r8
80006cc8:	99 68       	st.w	r12[0x18],r8
80006cca:	99 d8       	st.w	r12[0x34],r8
80006ccc:	99 e8       	st.w	r12[0x38],r8
80006cce:	f9 48 00 48 	st.w	r12[72],r8
80006cd2:	3f f8       	mov	r8,-1
80006cd4:	b8 78       	st.h	r12[0xe],r8
80006cd6:	30 18       	mov	r8,1
80006cd8:	b8 68       	st.h	r12[0xc],r8
80006cda:	d8 22       	popm	r4-r7,pc

80006cdc <__sinit>:
80006cdc:	d4 21       	pushm	r4-r7,lr
80006cde:	18 96       	mov	r6,r12
80006ce0:	78 67       	ld.w	r7,r12[0x18]
80006ce2:	58 07       	cp.w	r7,0
80006ce4:	c4 91       	brne	80006d76 <__sinit+0x9a>
80006ce6:	fe c8 00 aa 	sub	r8,pc,170
80006cea:	30 15       	mov	r5,1
80006cec:	99 a8       	st.w	r12[0x28],r8
80006cee:	f9 47 00 d8 	st.w	r12[216],r7
80006cf2:	f9 47 00 dc 	st.w	r12[220],r7
80006cf6:	f9 47 00 e0 	st.w	r12[224],r7
80006cfa:	99 65       	st.w	r12[0x18],r5
80006cfc:	cb af       	rcall	80006c70 <__sfp>
80006cfe:	8d 0c       	st.w	r6[0x0],r12
80006d00:	0c 9c       	mov	r12,r6
80006d02:	cb 7f       	rcall	80006c70 <__sfp>
80006d04:	8d 1c       	st.w	r6[0x4],r12
80006d06:	0c 9c       	mov	r12,r6
80006d08:	cb 4f       	rcall	80006c70 <__sfp>
80006d0a:	6c 09       	ld.w	r9,r6[0x0]
80006d0c:	30 48       	mov	r8,4
80006d0e:	93 07       	st.w	r9[0x0],r7
80006d10:	b2 68       	st.h	r9[0xc],r8
80006d12:	93 17       	st.w	r9[0x4],r7
80006d14:	93 27       	st.w	r9[0x8],r7
80006d16:	6c 18       	ld.w	r8,r6[0x4]
80006d18:	b2 77       	st.h	r9[0xe],r7
80006d1a:	93 47       	st.w	r9[0x10],r7
80006d1c:	93 57       	st.w	r9[0x14],r7
80006d1e:	93 67       	st.w	r9[0x18],r7
80006d20:	93 89       	st.w	r9[0x20],r9
80006d22:	91 07       	st.w	r8[0x0],r7
80006d24:	91 17       	st.w	r8[0x4],r7
80006d26:	91 27       	st.w	r8[0x8],r7
80006d28:	fe ce eb f4 	sub	lr,pc,-5132
80006d2c:	fe cb ec 24 	sub	r11,pc,-5084
80006d30:	93 9e       	st.w	r9[0x24],lr
80006d32:	93 ab       	st.w	r9[0x28],r11
80006d34:	fe ca ec 4c 	sub	r10,pc,-5044
80006d38:	fe c4 ec 58 	sub	r4,pc,-5032
80006d3c:	93 ba       	st.w	r9[0x2c],r10
80006d3e:	93 c4       	st.w	r9[0x30],r4
80006d40:	30 99       	mov	r9,9
80006d42:	b0 69       	st.h	r8[0xc],r9
80006d44:	b0 75       	st.h	r8[0xe],r5
80006d46:	91 c4       	st.w	r8[0x30],r4
80006d48:	91 47       	st.w	r8[0x10],r7
80006d4a:	91 57       	st.w	r8[0x14],r7
80006d4c:	91 67       	st.w	r8[0x18],r7
80006d4e:	91 88       	st.w	r8[0x20],r8
80006d50:	91 9e       	st.w	r8[0x24],lr
80006d52:	91 ab       	st.w	r8[0x28],r11
80006d54:	91 ba       	st.w	r8[0x2c],r10
80006d56:	8d 2c       	st.w	r6[0x8],r12
80006d58:	31 28       	mov	r8,18
80006d5a:	99 07       	st.w	r12[0x0],r7
80006d5c:	b8 68       	st.h	r12[0xc],r8
80006d5e:	99 17       	st.w	r12[0x4],r7
80006d60:	99 27       	st.w	r12[0x8],r7
80006d62:	30 28       	mov	r8,2
80006d64:	b8 78       	st.h	r12[0xe],r8
80006d66:	99 c4       	st.w	r12[0x30],r4
80006d68:	99 67       	st.w	r12[0x18],r7
80006d6a:	99 9e       	st.w	r12[0x24],lr
80006d6c:	99 ab       	st.w	r12[0x28],r11
80006d6e:	99 ba       	st.w	r12[0x2c],r10
80006d70:	99 47       	st.w	r12[0x10],r7
80006d72:	99 57       	st.w	r12[0x14],r7
80006d74:	99 8c       	st.w	r12[0x20],r12
80006d76:	d8 22       	popm	r4-r7,pc

80006d78 <_malloc_trim_r>:
80006d78:	d4 21       	pushm	r4-r7,lr
80006d7a:	16 95       	mov	r5,r11
80006d7c:	18 97       	mov	r7,r12
80006d7e:	e0 a0 05 31 	rcall	800077e0 <__malloc_lock>
80006d82:	e0 64 01 1c 	mov	r4,284
80006d86:	68 28       	ld.w	r8,r4[0x8]
80006d88:	70 16       	ld.w	r6,r8[0x4]
80006d8a:	e0 16 ff fc 	andl	r6,0xfffc
80006d8e:	ec c8 ff 91 	sub	r8,r6,-111
80006d92:	f0 05 01 05 	sub	r5,r8,r5
80006d96:	e0 15 ff 80 	andl	r5,0xff80
80006d9a:	ea c5 00 80 	sub	r5,r5,128
80006d9e:	e0 45 00 7f 	cp.w	r5,127
80006da2:	e0 8a 00 25 	brle	80006dec <_malloc_trim_r+0x74>
80006da6:	30 0b       	mov	r11,0
80006da8:	0e 9c       	mov	r12,r7
80006daa:	e0 a0 09 8b 	rcall	800080c0 <_sbrk_r>
80006dae:	68 28       	ld.w	r8,r4[0x8]
80006db0:	0c 08       	add	r8,r6
80006db2:	10 3c       	cp.w	r12,r8
80006db4:	c1 c1       	brne	80006dec <_malloc_trim_r+0x74>
80006db6:	ea 0b 11 00 	rsub	r11,r5,0
80006dba:	0e 9c       	mov	r12,r7
80006dbc:	e0 a0 09 82 	rcall	800080c0 <_sbrk_r>
80006dc0:	5b fc       	cp.w	r12,-1
80006dc2:	c1 91       	brne	80006df4 <_malloc_trim_r+0x7c>
80006dc4:	30 0b       	mov	r11,0
80006dc6:	0e 9c       	mov	r12,r7
80006dc8:	e0 a0 09 7c 	rcall	800080c0 <_sbrk_r>
80006dcc:	68 28       	ld.w	r8,r4[0x8]
80006dce:	f8 08 01 09 	sub	r9,r12,r8
80006dd2:	58 f9       	cp.w	r9,15
80006dd4:	e0 8a 00 0c 	brle	80006dec <_malloc_trim_r+0x74>
80006dd8:	a1 a9       	sbr	r9,0x0
80006dda:	91 19       	st.w	r8[0x4],r9
80006ddc:	e0 68 05 28 	mov	r8,1320
80006de0:	70 09       	ld.w	r9,r8[0x0]
80006de2:	e0 68 07 1c 	mov	r8,1820
80006de6:	f8 09 01 09 	sub	r9,r12,r9
80006dea:	91 09       	st.w	r8[0x0],r9
80006dec:	0e 9c       	mov	r12,r7
80006dee:	e0 a0 04 fa 	rcall	800077e2 <__malloc_unlock>
80006df2:	d8 2a       	popm	r4-r7,pc,r12=0
80006df4:	68 28       	ld.w	r8,r4[0x8]
80006df6:	0a 16       	sub	r6,r5
80006df8:	a1 a6       	sbr	r6,0x0
80006dfa:	91 16       	st.w	r8[0x4],r6
80006dfc:	e0 68 07 1c 	mov	r8,1820
80006e00:	70 09       	ld.w	r9,r8[0x0]
80006e02:	0a 19       	sub	r9,r5
80006e04:	0e 9c       	mov	r12,r7
80006e06:	91 09       	st.w	r8[0x0],r9
80006e08:	e0 a0 04 ed 	rcall	800077e2 <__malloc_unlock>
80006e0c:	da 2a       	popm	r4-r7,pc,r12=1
80006e0e:	d7 03       	nop

80006e10 <_free_r>:
80006e10:	d4 21       	pushm	r4-r7,lr
80006e12:	16 96       	mov	r6,r11
80006e14:	18 97       	mov	r7,r12
80006e16:	58 0b       	cp.w	r11,0
80006e18:	e0 80 00 c0 	breq	80006f98 <_free_r+0x188>
80006e1c:	e0 a0 04 e2 	rcall	800077e0 <__malloc_lock>
80006e20:	20 86       	sub	r6,8
80006e22:	e0 6a 01 1c 	mov	r10,284
80006e26:	6c 18       	ld.w	r8,r6[0x4]
80006e28:	74 2e       	ld.w	lr,r10[0x8]
80006e2a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006e2e:	a1 c8       	cbr	r8,0x0
80006e30:	ec 08 00 09 	add	r9,r6,r8
80006e34:	72 1b       	ld.w	r11,r9[0x4]
80006e36:	e0 1b ff fc 	andl	r11,0xfffc
80006e3a:	1c 39       	cp.w	r9,lr
80006e3c:	c1 e1       	brne	80006e78 <_free_r+0x68>
80006e3e:	f6 08 00 08 	add	r8,r11,r8
80006e42:	58 0c       	cp.w	r12,0
80006e44:	c0 81       	brne	80006e54 <_free_r+0x44>
80006e46:	6c 09       	ld.w	r9,r6[0x0]
80006e48:	12 16       	sub	r6,r9
80006e4a:	12 08       	add	r8,r9
80006e4c:	6c 3b       	ld.w	r11,r6[0xc]
80006e4e:	6c 29       	ld.w	r9,r6[0x8]
80006e50:	97 29       	st.w	r11[0x8],r9
80006e52:	93 3b       	st.w	r9[0xc],r11
80006e54:	10 99       	mov	r9,r8
80006e56:	95 26       	st.w	r10[0x8],r6
80006e58:	a1 a9       	sbr	r9,0x0
80006e5a:	8d 19       	st.w	r6[0x4],r9
80006e5c:	e0 69 05 24 	mov	r9,1316
80006e60:	72 09       	ld.w	r9,r9[0x0]
80006e62:	12 38       	cp.w	r8,r9
80006e64:	c0 63       	brcs	80006e70 <_free_r+0x60>
80006e66:	e0 68 07 18 	mov	r8,1816
80006e6a:	0e 9c       	mov	r12,r7
80006e6c:	70 0b       	ld.w	r11,r8[0x0]
80006e6e:	c8 5f       	rcall	80006d78 <_malloc_trim_r>
80006e70:	0e 9c       	mov	r12,r7
80006e72:	e0 a0 04 b8 	rcall	800077e2 <__malloc_unlock>
80006e76:	d8 22       	popm	r4-r7,pc
80006e78:	93 1b       	st.w	r9[0x4],r11
80006e7a:	58 0c       	cp.w	r12,0
80006e7c:	c0 30       	breq	80006e82 <_free_r+0x72>
80006e7e:	30 0c       	mov	r12,0
80006e80:	c1 08       	rjmp	80006ea0 <_free_r+0x90>
80006e82:	6c 0e       	ld.w	lr,r6[0x0]
80006e84:	f4 c5 ff f8 	sub	r5,r10,-8
80006e88:	1c 16       	sub	r6,lr
80006e8a:	1c 08       	add	r8,lr
80006e8c:	6c 2e       	ld.w	lr,r6[0x8]
80006e8e:	0a 3e       	cp.w	lr,r5
80006e90:	f9 bc 00 01 	moveq	r12,1
80006e94:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006e98:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006e9c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006ea0:	f2 0b 00 0e 	add	lr,r9,r11
80006ea4:	7c 1e       	ld.w	lr,lr[0x4]
80006ea6:	ed be 00 00 	bld	lr,0x0
80006eaa:	c1 40       	breq	80006ed2 <_free_r+0xc2>
80006eac:	16 08       	add	r8,r11
80006eae:	58 0c       	cp.w	r12,0
80006eb0:	c0 d1       	brne	80006eca <_free_r+0xba>
80006eb2:	e0 6e 01 1c 	mov	lr,284
80006eb6:	72 2b       	ld.w	r11,r9[0x8]
80006eb8:	2f 8e       	sub	lr,-8
80006eba:	1c 3b       	cp.w	r11,lr
80006ebc:	c0 71       	brne	80006eca <_free_r+0xba>
80006ebe:	97 36       	st.w	r11[0xc],r6
80006ec0:	97 26       	st.w	r11[0x8],r6
80006ec2:	8d 2b       	st.w	r6[0x8],r11
80006ec4:	8d 3b       	st.w	r6[0xc],r11
80006ec6:	30 1c       	mov	r12,1
80006ec8:	c0 58       	rjmp	80006ed2 <_free_r+0xc2>
80006eca:	72 2b       	ld.w	r11,r9[0x8]
80006ecc:	72 39       	ld.w	r9,r9[0xc]
80006ece:	93 2b       	st.w	r9[0x8],r11
80006ed0:	97 39       	st.w	r11[0xc],r9
80006ed2:	10 99       	mov	r9,r8
80006ed4:	ec 08 09 08 	st.w	r6[r8],r8
80006ed8:	a1 a9       	sbr	r9,0x0
80006eda:	8d 19       	st.w	r6[0x4],r9
80006edc:	58 0c       	cp.w	r12,0
80006ede:	c5 a1       	brne	80006f92 <_free_r+0x182>
80006ee0:	e0 48 01 ff 	cp.w	r8,511
80006ee4:	e0 8b 00 13 	brhi	80006f0a <_free_r+0xfa>
80006ee8:	a3 98       	lsr	r8,0x3
80006eea:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006eee:	72 2b       	ld.w	r11,r9[0x8]
80006ef0:	8d 39       	st.w	r6[0xc],r9
80006ef2:	8d 2b       	st.w	r6[0x8],r11
80006ef4:	97 36       	st.w	r11[0xc],r6
80006ef6:	93 26       	st.w	r9[0x8],r6
80006ef8:	a3 48       	asr	r8,0x2
80006efa:	74 19       	ld.w	r9,r10[0x4]
80006efc:	30 1b       	mov	r11,1
80006efe:	f6 08 09 48 	lsl	r8,r11,r8
80006f02:	f3 e8 10 08 	or	r8,r9,r8
80006f06:	95 18       	st.w	r10[0x4],r8
80006f08:	c4 58       	rjmp	80006f92 <_free_r+0x182>
80006f0a:	f0 0b 16 09 	lsr	r11,r8,0x9
80006f0e:	58 4b       	cp.w	r11,4
80006f10:	e0 8b 00 06 	brhi	80006f1c <_free_r+0x10c>
80006f14:	f0 0b 16 06 	lsr	r11,r8,0x6
80006f18:	2c 8b       	sub	r11,-56
80006f1a:	c2 08       	rjmp	80006f5a <_free_r+0x14a>
80006f1c:	59 4b       	cp.w	r11,20
80006f1e:	e0 8b 00 04 	brhi	80006f26 <_free_r+0x116>
80006f22:	2a 5b       	sub	r11,-91
80006f24:	c1 b8       	rjmp	80006f5a <_free_r+0x14a>
80006f26:	e0 4b 00 54 	cp.w	r11,84
80006f2a:	e0 8b 00 06 	brhi	80006f36 <_free_r+0x126>
80006f2e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006f32:	29 2b       	sub	r11,-110
80006f34:	c1 38       	rjmp	80006f5a <_free_r+0x14a>
80006f36:	e0 4b 01 54 	cp.w	r11,340
80006f3a:	e0 8b 00 06 	brhi	80006f46 <_free_r+0x136>
80006f3e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006f42:	28 9b       	sub	r11,-119
80006f44:	c0 b8       	rjmp	80006f5a <_free_r+0x14a>
80006f46:	e0 4b 05 54 	cp.w	r11,1364
80006f4a:	e0 88 00 05 	brls	80006f54 <_free_r+0x144>
80006f4e:	37 eb       	mov	r11,126
80006f50:	c0 58       	rjmp	80006f5a <_free_r+0x14a>
80006f52:	d7 03       	nop
80006f54:	f0 0b 16 12 	lsr	r11,r8,0x12
80006f58:	28 4b       	sub	r11,-124
80006f5a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006f5e:	78 29       	ld.w	r9,r12[0x8]
80006f60:	18 39       	cp.w	r9,r12
80006f62:	c0 e1       	brne	80006f7e <_free_r+0x16e>
80006f64:	74 18       	ld.w	r8,r10[0x4]
80006f66:	a3 4b       	asr	r11,0x2
80006f68:	30 1c       	mov	r12,1
80006f6a:	f8 0b 09 4b 	lsl	r11,r12,r11
80006f6e:	f1 eb 10 0b 	or	r11,r8,r11
80006f72:	12 98       	mov	r8,r9
80006f74:	95 1b       	st.w	r10[0x4],r11
80006f76:	c0 a8       	rjmp	80006f8a <_free_r+0x17a>
80006f78:	72 29       	ld.w	r9,r9[0x8]
80006f7a:	18 39       	cp.w	r9,r12
80006f7c:	c0 60       	breq	80006f88 <_free_r+0x178>
80006f7e:	72 1a       	ld.w	r10,r9[0x4]
80006f80:	e0 1a ff fc 	andl	r10,0xfffc
80006f84:	14 38       	cp.w	r8,r10
80006f86:	cf 93       	brcs	80006f78 <_free_r+0x168>
80006f88:	72 38       	ld.w	r8,r9[0xc]
80006f8a:	8d 38       	st.w	r6[0xc],r8
80006f8c:	8d 29       	st.w	r6[0x8],r9
80006f8e:	93 36       	st.w	r9[0xc],r6
80006f90:	91 26       	st.w	r8[0x8],r6
80006f92:	0e 9c       	mov	r12,r7
80006f94:	e0 a0 04 27 	rcall	800077e2 <__malloc_unlock>
80006f98:	d8 22       	popm	r4-r7,pc
80006f9a:	d7 03       	nop

80006f9c <__sfvwrite_r>:
80006f9c:	d4 31       	pushm	r0-r7,lr
80006f9e:	20 3d       	sub	sp,12
80006fa0:	14 94       	mov	r4,r10
80006fa2:	18 95       	mov	r5,r12
80006fa4:	16 97       	mov	r7,r11
80006fa6:	74 28       	ld.w	r8,r10[0x8]
80006fa8:	58 08       	cp.w	r8,0
80006faa:	e0 80 01 45 	breq	80007234 <__sfvwrite_r+0x298>
80006fae:	96 68       	ld.sh	r8,r11[0xc]
80006fb0:	ed b8 00 03 	bld	r8,0x3
80006fb4:	c0 41       	brne	80006fbc <__sfvwrite_r+0x20>
80006fb6:	76 48       	ld.w	r8,r11[0x10]
80006fb8:	58 08       	cp.w	r8,0
80006fba:	c0 c1       	brne	80006fd2 <__sfvwrite_r+0x36>
80006fbc:	0e 9b       	mov	r11,r7
80006fbe:	0a 9c       	mov	r12,r5
80006fc0:	fe b0 f6 ca 	rcall	80005d54 <__swsetup_r>
80006fc4:	c0 70       	breq	80006fd2 <__sfvwrite_r+0x36>
80006fc6:	8e 68       	ld.sh	r8,r7[0xc]
80006fc8:	a7 a8       	sbr	r8,0x6
80006fca:	ae 68       	st.h	r7[0xc],r8
80006fcc:	30 98       	mov	r8,9
80006fce:	8b 38       	st.w	r5[0xc],r8
80006fd0:	c3 09       	rjmp	80007230 <__sfvwrite_r+0x294>
80006fd2:	8e 63       	ld.sh	r3,r7[0xc]
80006fd4:	68 00       	ld.w	r0,r4[0x0]
80006fd6:	06 96       	mov	r6,r3
80006fd8:	e2 16 00 02 	andl	r6,0x2,COH
80006fdc:	c2 10       	breq	8000701e <__sfvwrite_r+0x82>
80006fde:	30 03       	mov	r3,0
80006fe0:	e0 62 04 00 	mov	r2,1024
80006fe4:	06 96       	mov	r6,r3
80006fe6:	c0 48       	rjmp	80006fee <__sfvwrite_r+0x52>
80006fe8:	60 03       	ld.w	r3,r0[0x0]
80006fea:	60 16       	ld.w	r6,r0[0x4]
80006fec:	2f 80       	sub	r0,-8
80006fee:	58 06       	cp.w	r6,0
80006ff0:	cf c0       	breq	80006fe8 <__sfvwrite_r+0x4c>
80006ff2:	e0 46 04 00 	cp.w	r6,1024
80006ff6:	ec 09 17 80 	movls	r9,r6
80006ffa:	e4 09 17 b0 	movhi	r9,r2
80006ffe:	06 9a       	mov	r10,r3
80007000:	6e a8       	ld.w	r8,r7[0x28]
80007002:	6e 8b       	ld.w	r11,r7[0x20]
80007004:	0a 9c       	mov	r12,r5
80007006:	5d 18       	icall	r8
80007008:	18 16       	sub	r6,r12
8000700a:	58 0c       	cp.w	r12,0
8000700c:	e0 8a 01 0f 	brle	8000722a <__sfvwrite_r+0x28e>
80007010:	68 28       	ld.w	r8,r4[0x8]
80007012:	18 18       	sub	r8,r12
80007014:	89 28       	st.w	r4[0x8],r8
80007016:	e0 80 01 0f 	breq	80007234 <__sfvwrite_r+0x298>
8000701a:	18 03       	add	r3,r12
8000701c:	ce 9b       	rjmp	80006fee <__sfvwrite_r+0x52>
8000701e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007022:	c0 70       	breq	80007030 <__sfvwrite_r+0x94>
80007024:	50 06       	stdsp	sp[0x0],r6
80007026:	0c 93       	mov	r3,r6
80007028:	0c 91       	mov	r1,r6
8000702a:	50 15       	stdsp	sp[0x4],r5
8000702c:	08 92       	mov	r2,r4
8000702e:	c9 e8       	rjmp	8000716a <__sfvwrite_r+0x1ce>
80007030:	06 96       	mov	r6,r3
80007032:	08 91       	mov	r1,r4
80007034:	c0 48       	rjmp	8000703c <__sfvwrite_r+0xa0>
80007036:	60 03       	ld.w	r3,r0[0x0]
80007038:	60 16       	ld.w	r6,r0[0x4]
8000703a:	2f 80       	sub	r0,-8
8000703c:	58 06       	cp.w	r6,0
8000703e:	cf c0       	breq	80007036 <__sfvwrite_r+0x9a>
80007040:	8e 68       	ld.sh	r8,r7[0xc]
80007042:	6e 24       	ld.w	r4,r7[0x8]
80007044:	10 99       	mov	r9,r8
80007046:	e2 19 02 00 	andl	r9,0x200,COH
8000704a:	c5 50       	breq	800070f4 <__sfvwrite_r+0x158>
8000704c:	08 36       	cp.w	r6,r4
8000704e:	c4 33       	brcs	800070d4 <__sfvwrite_r+0x138>
80007050:	10 99       	mov	r9,r8
80007052:	e2 19 04 80 	andl	r9,0x480,COH
80007056:	c3 f0       	breq	800070d4 <__sfvwrite_r+0x138>
80007058:	6e 4b       	ld.w	r11,r7[0x10]
8000705a:	6e 09       	ld.w	r9,r7[0x0]
8000705c:	16 19       	sub	r9,r11
8000705e:	50 09       	stdsp	sp[0x0],r9
80007060:	6e 59       	ld.w	r9,r7[0x14]
80007062:	10 9c       	mov	r12,r8
80007064:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007068:	30 28       	mov	r8,2
8000706a:	f4 08 0c 08 	divs	r8,r10,r8
8000706e:	fa e9 00 04 	st.d	sp[4],r8
80007072:	10 94       	mov	r4,r8
80007074:	40 09       	lddsp	r9,sp[0x0]
80007076:	e2 1c 04 00 	andl	r12,0x400,COH
8000707a:	2f f9       	sub	r9,-1
8000707c:	0c 09       	add	r9,r6
8000707e:	12 38       	cp.w	r8,r9
80007080:	f2 04 17 30 	movlo	r4,r9
80007084:	58 0c       	cp.w	r12,0
80007086:	c1 00       	breq	800070a6 <__sfvwrite_r+0x10a>
80007088:	08 9b       	mov	r11,r4
8000708a:	0a 9c       	mov	r12,r5
8000708c:	c6 8d       	rcall	8000735c <_malloc_r>
8000708e:	18 92       	mov	r2,r12
80007090:	c1 40       	breq	800070b8 <__sfvwrite_r+0x11c>
80007092:	40 0a       	lddsp	r10,sp[0x0]
80007094:	6e 4b       	ld.w	r11,r7[0x10]
80007096:	fe b0 e4 78 	rcall	80003986 <memcpy>
8000709a:	8e 68       	ld.sh	r8,r7[0xc]
8000709c:	e0 18 fb 7f 	andl	r8,0xfb7f
800070a0:	a7 b8       	sbr	r8,0x7
800070a2:	ae 68       	st.h	r7[0xc],r8
800070a4:	c0 d8       	rjmp	800070be <__sfvwrite_r+0x122>
800070a6:	08 9a       	mov	r10,r4
800070a8:	0a 9c       	mov	r12,r5
800070aa:	e0 a0 06 87 	rcall	80007db8 <_realloc_r>
800070ae:	18 92       	mov	r2,r12
800070b0:	c0 71       	brne	800070be <__sfvwrite_r+0x122>
800070b2:	6e 4b       	ld.w	r11,r7[0x10]
800070b4:	0a 9c       	mov	r12,r5
800070b6:	ca de       	rcall	80006e10 <_free_r>
800070b8:	30 c8       	mov	r8,12
800070ba:	8b 38       	st.w	r5[0xc],r8
800070bc:	cb 78       	rjmp	8000722a <__sfvwrite_r+0x28e>
800070be:	40 0a       	lddsp	r10,sp[0x0]
800070c0:	40 09       	lddsp	r9,sp[0x0]
800070c2:	e8 0a 01 0a 	sub	r10,r4,r10
800070c6:	e4 09 00 08 	add	r8,r2,r9
800070ca:	8f 54       	st.w	r7[0x14],r4
800070cc:	8f 2a       	st.w	r7[0x8],r10
800070ce:	8f 08       	st.w	r7[0x0],r8
800070d0:	8f 42       	st.w	r7[0x10],r2
800070d2:	0c 94       	mov	r4,r6
800070d4:	08 36       	cp.w	r6,r4
800070d6:	ec 04 17 30 	movlo	r4,r6
800070da:	06 9b       	mov	r11,r3
800070dc:	08 9a       	mov	r10,r4
800070de:	6e 0c       	ld.w	r12,r7[0x0]
800070e0:	e0 a0 03 61 	rcall	800077a2 <memmove>
800070e4:	6e 08       	ld.w	r8,r7[0x0]
800070e6:	08 08       	add	r8,r4
800070e8:	8f 08       	st.w	r7[0x0],r8
800070ea:	6e 28       	ld.w	r8,r7[0x8]
800070ec:	08 18       	sub	r8,r4
800070ee:	0c 94       	mov	r4,r6
800070f0:	8f 28       	st.w	r7[0x8],r8
800070f2:	c3 08       	rjmp	80007152 <__sfvwrite_r+0x1b6>
800070f4:	08 36       	cp.w	r6,r4
800070f6:	5f ba       	srhi	r10
800070f8:	6e 0c       	ld.w	r12,r7[0x0]
800070fa:	6e 48       	ld.w	r8,r7[0x10]
800070fc:	10 3c       	cp.w	r12,r8
800070fe:	5f b8       	srhi	r8
80007100:	f5 e8 00 08 	and	r8,r10,r8
80007104:	f2 08 18 00 	cp.b	r8,r9
80007108:	c0 e0       	breq	80007124 <__sfvwrite_r+0x188>
8000710a:	06 9b       	mov	r11,r3
8000710c:	08 9a       	mov	r10,r4
8000710e:	e0 a0 03 4a 	rcall	800077a2 <memmove>
80007112:	6e 08       	ld.w	r8,r7[0x0]
80007114:	08 08       	add	r8,r4
80007116:	0e 9b       	mov	r11,r7
80007118:	8f 08       	st.w	r7[0x0],r8
8000711a:	0a 9c       	mov	r12,r5
8000711c:	fe b0 fd 08 	rcall	80006b2c <_fflush_r>
80007120:	c1 90       	breq	80007152 <__sfvwrite_r+0x1b6>
80007122:	c8 48       	rjmp	8000722a <__sfvwrite_r+0x28e>
80007124:	6e 59       	ld.w	r9,r7[0x14]
80007126:	12 36       	cp.w	r6,r9
80007128:	c0 a3       	brcs	8000713c <__sfvwrite_r+0x1a0>
8000712a:	6e a8       	ld.w	r8,r7[0x28]
8000712c:	06 9a       	mov	r10,r3
8000712e:	6e 8b       	ld.w	r11,r7[0x20]
80007130:	0a 9c       	mov	r12,r5
80007132:	5d 18       	icall	r8
80007134:	18 94       	mov	r4,r12
80007136:	e0 89 00 0e 	brgt	80007152 <__sfvwrite_r+0x1b6>
8000713a:	c7 88       	rjmp	8000722a <__sfvwrite_r+0x28e>
8000713c:	0c 9a       	mov	r10,r6
8000713e:	06 9b       	mov	r11,r3
80007140:	e0 a0 03 31 	rcall	800077a2 <memmove>
80007144:	6e 08       	ld.w	r8,r7[0x0]
80007146:	0c 08       	add	r8,r6
80007148:	0c 94       	mov	r4,r6
8000714a:	8f 08       	st.w	r7[0x0],r8
8000714c:	6e 28       	ld.w	r8,r7[0x8]
8000714e:	0c 18       	sub	r8,r6
80007150:	8f 28       	st.w	r7[0x8],r8
80007152:	62 28       	ld.w	r8,r1[0x8]
80007154:	08 18       	sub	r8,r4
80007156:	83 28       	st.w	r1[0x8],r8
80007158:	c6 e0       	breq	80007234 <__sfvwrite_r+0x298>
8000715a:	08 16       	sub	r6,r4
8000715c:	08 03       	add	r3,r4
8000715e:	c6 fb       	rjmp	8000703c <__sfvwrite_r+0xa0>
80007160:	60 03       	ld.w	r3,r0[0x0]
80007162:	60 11       	ld.w	r1,r0[0x4]
80007164:	30 08       	mov	r8,0
80007166:	2f 80       	sub	r0,-8
80007168:	50 08       	stdsp	sp[0x0],r8
8000716a:	58 01       	cp.w	r1,0
8000716c:	cf a0       	breq	80007160 <__sfvwrite_r+0x1c4>
8000716e:	40 0a       	lddsp	r10,sp[0x0]
80007170:	58 0a       	cp.w	r10,0
80007172:	c1 51       	brne	8000719c <__sfvwrite_r+0x200>
80007174:	e2 c6 ff ff 	sub	r6,r1,-1
80007178:	02 9a       	mov	r10,r1
8000717a:	30 ab       	mov	r11,10
8000717c:	06 9c       	mov	r12,r3
8000717e:	e0 a0 03 07 	rcall	8000778c <memchr>
80007182:	f8 c8 ff ff 	sub	r8,r12,-1
80007186:	58 0c       	cp.w	r12,0
80007188:	f1 d3 e1 16 	subne	r6,r8,r3
8000718c:	f9 b9 01 01 	movne	r9,1
80007190:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007194:	f9 b8 00 01 	moveq	r8,1
80007198:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000719c:	02 36       	cp.w	r6,r1
8000719e:	ec 04 17 80 	movls	r4,r6
800071a2:	e2 04 17 b0 	movhi	r4,r1
800071a6:	6e 59       	ld.w	r9,r7[0x14]
800071a8:	6e 25       	ld.w	r5,r7[0x8]
800071aa:	f2 05 00 05 	add	r5,r9,r5
800071ae:	0a 34       	cp.w	r4,r5
800071b0:	5f 9a       	srgt	r10
800071b2:	6e 0c       	ld.w	r12,r7[0x0]
800071b4:	6e 48       	ld.w	r8,r7[0x10]
800071b6:	10 3c       	cp.w	r12,r8
800071b8:	5f b8       	srhi	r8
800071ba:	f5 e8 00 08 	and	r8,r10,r8
800071be:	30 0a       	mov	r10,0
800071c0:	f4 08 18 00 	cp.b	r8,r10
800071c4:	c0 e0       	breq	800071e0 <__sfvwrite_r+0x244>
800071c6:	06 9b       	mov	r11,r3
800071c8:	0a 9a       	mov	r10,r5
800071ca:	e0 a0 02 ec 	rcall	800077a2 <memmove>
800071ce:	6e 08       	ld.w	r8,r7[0x0]
800071d0:	0a 08       	add	r8,r5
800071d2:	0e 9b       	mov	r11,r7
800071d4:	8f 08       	st.w	r7[0x0],r8
800071d6:	40 1c       	lddsp	r12,sp[0x4]
800071d8:	fe b0 fc aa 	rcall	80006b2c <_fflush_r>
800071dc:	c1 80       	breq	8000720c <__sfvwrite_r+0x270>
800071de:	c2 68       	rjmp	8000722a <__sfvwrite_r+0x28e>
800071e0:	12 34       	cp.w	r4,r9
800071e2:	c0 a5       	brlt	800071f6 <__sfvwrite_r+0x25a>
800071e4:	6e a8       	ld.w	r8,r7[0x28]
800071e6:	06 9a       	mov	r10,r3
800071e8:	6e 8b       	ld.w	r11,r7[0x20]
800071ea:	40 1c       	lddsp	r12,sp[0x4]
800071ec:	5d 18       	icall	r8
800071ee:	18 95       	mov	r5,r12
800071f0:	e0 89 00 0e 	brgt	8000720c <__sfvwrite_r+0x270>
800071f4:	c1 b8       	rjmp	8000722a <__sfvwrite_r+0x28e>
800071f6:	08 9a       	mov	r10,r4
800071f8:	06 9b       	mov	r11,r3
800071fa:	e0 a0 02 d4 	rcall	800077a2 <memmove>
800071fe:	6e 08       	ld.w	r8,r7[0x0]
80007200:	08 08       	add	r8,r4
80007202:	08 95       	mov	r5,r4
80007204:	8f 08       	st.w	r7[0x0],r8
80007206:	6e 28       	ld.w	r8,r7[0x8]
80007208:	08 18       	sub	r8,r4
8000720a:	8f 28       	st.w	r7[0x8],r8
8000720c:	0a 16       	sub	r6,r5
8000720e:	c0 71       	brne	8000721c <__sfvwrite_r+0x280>
80007210:	0e 9b       	mov	r11,r7
80007212:	40 1c       	lddsp	r12,sp[0x4]
80007214:	fe b0 fc 8c 	rcall	80006b2c <_fflush_r>
80007218:	c0 91       	brne	8000722a <__sfvwrite_r+0x28e>
8000721a:	50 06       	stdsp	sp[0x0],r6
8000721c:	64 28       	ld.w	r8,r2[0x8]
8000721e:	0a 18       	sub	r8,r5
80007220:	85 28       	st.w	r2[0x8],r8
80007222:	c0 90       	breq	80007234 <__sfvwrite_r+0x298>
80007224:	0a 11       	sub	r1,r5
80007226:	0a 03       	add	r3,r5
80007228:	ca 1b       	rjmp	8000716a <__sfvwrite_r+0x1ce>
8000722a:	8e 68       	ld.sh	r8,r7[0xc]
8000722c:	a7 a8       	sbr	r8,0x6
8000722e:	ae 68       	st.h	r7[0xc],r8
80007230:	3f fc       	mov	r12,-1
80007232:	c0 28       	rjmp	80007236 <__sfvwrite_r+0x29a>
80007234:	30 0c       	mov	r12,0
80007236:	2f dd       	sub	sp,-12
80007238:	d8 32       	popm	r0-r7,pc
8000723a:	d7 03       	nop

8000723c <_fwalk>:
8000723c:	d4 31       	pushm	r0-r7,lr
8000723e:	30 05       	mov	r5,0
80007240:	16 91       	mov	r1,r11
80007242:	f8 c7 ff 28 	sub	r7,r12,-216
80007246:	0a 92       	mov	r2,r5
80007248:	fe b0 fc f8 	rcall	80006c38 <__sfp_lock_acquire>
8000724c:	3f f3       	mov	r3,-1
8000724e:	c1 68       	rjmp	8000727a <_fwalk+0x3e>
80007250:	6e 26       	ld.w	r6,r7[0x8]
80007252:	6e 14       	ld.w	r4,r7[0x4]
80007254:	2f 46       	sub	r6,-12
80007256:	c0 c8       	rjmp	8000726e <_fwalk+0x32>
80007258:	8c 08       	ld.sh	r8,r6[0x0]
8000725a:	e4 08 19 00 	cp.h	r8,r2
8000725e:	c0 70       	breq	8000726c <_fwalk+0x30>
80007260:	8c 18       	ld.sh	r8,r6[0x2]
80007262:	e6 08 19 00 	cp.h	r8,r3
80007266:	c0 30       	breq	8000726c <_fwalk+0x30>
80007268:	5d 11       	icall	r1
8000726a:	18 45       	or	r5,r12
8000726c:	2a 46       	sub	r6,-92
8000726e:	20 14       	sub	r4,1
80007270:	ec cc 00 0c 	sub	r12,r6,12
80007274:	58 04       	cp.w	r4,0
80007276:	cf 14       	brge	80007258 <_fwalk+0x1c>
80007278:	6e 07       	ld.w	r7,r7[0x0]
8000727a:	58 07       	cp.w	r7,0
8000727c:	ce a1       	brne	80007250 <_fwalk+0x14>
8000727e:	fe b0 fc de 	rcall	80006c3a <__sfp_lock_release>
80007282:	0a 9c       	mov	r12,r5
80007284:	d8 32       	popm	r0-r7,pc
80007286:	d7 03       	nop

80007288 <_localeconv_r>:
80007288:	fe cc da 18 	sub	r12,pc,-9704
8000728c:	5e fc       	retal	r12
8000728e:	d7 03       	nop

80007290 <__smakebuf_r>:
80007290:	d4 21       	pushm	r4-r7,lr
80007292:	20 fd       	sub	sp,60
80007294:	96 68       	ld.sh	r8,r11[0xc]
80007296:	16 97       	mov	r7,r11
80007298:	18 96       	mov	r6,r12
8000729a:	e2 18 00 02 	andl	r8,0x2,COH
8000729e:	c3 c1       	brne	80007316 <__smakebuf_r+0x86>
800072a0:	96 7b       	ld.sh	r11,r11[0xe]
800072a2:	f0 0b 19 00 	cp.h	r11,r8
800072a6:	c0 55       	brlt	800072b0 <__smakebuf_r+0x20>
800072a8:	1a 9a       	mov	r10,sp
800072aa:	e0 a0 08 95 	rcall	800083d4 <_fstat_r>
800072ae:	c0 f4       	brge	800072cc <__smakebuf_r+0x3c>
800072b0:	8e 65       	ld.sh	r5,r7[0xc]
800072b2:	0a 98       	mov	r8,r5
800072b4:	ab b8       	sbr	r8,0xb
800072b6:	e2 15 00 80 	andl	r5,0x80,COH
800072ba:	ae 68       	st.h	r7[0xc],r8
800072bc:	30 04       	mov	r4,0
800072be:	e0 68 04 00 	mov	r8,1024
800072c2:	f9 b5 01 40 	movne	r5,64
800072c6:	f0 05 17 00 	moveq	r5,r8
800072ca:	c1 c8       	rjmp	80007302 <__smakebuf_r+0x72>
800072cc:	40 18       	lddsp	r8,sp[0x4]
800072ce:	e2 18 f0 00 	andl	r8,0xf000,COH
800072d2:	e0 48 20 00 	cp.w	r8,8192
800072d6:	5f 04       	sreq	r4
800072d8:	e0 48 80 00 	cp.w	r8,32768
800072dc:	c0 e1       	brne	800072f8 <__smakebuf_r+0x68>
800072de:	6e b9       	ld.w	r9,r7[0x2c]
800072e0:	fe c8 f1 f8 	sub	r8,pc,-3592
800072e4:	10 39       	cp.w	r9,r8
800072e6:	c0 91       	brne	800072f8 <__smakebuf_r+0x68>
800072e8:	8e 68       	ld.sh	r8,r7[0xc]
800072ea:	e0 65 04 00 	mov	r5,1024
800072ee:	ab a8       	sbr	r8,0xa
800072f0:	ef 45 00 50 	st.w	r7[80],r5
800072f4:	ae 68       	st.h	r7[0xc],r8
800072f6:	c0 68       	rjmp	80007302 <__smakebuf_r+0x72>
800072f8:	8e 68       	ld.sh	r8,r7[0xc]
800072fa:	e0 65 04 00 	mov	r5,1024
800072fe:	ab b8       	sbr	r8,0xb
80007300:	ae 68       	st.h	r7[0xc],r8
80007302:	0a 9b       	mov	r11,r5
80007304:	0c 9c       	mov	r12,r6
80007306:	c2 bc       	rcall	8000735c <_malloc_r>
80007308:	8e 68       	ld.sh	r8,r7[0xc]
8000730a:	c0 d1       	brne	80007324 <__smakebuf_r+0x94>
8000730c:	ed b8 00 09 	bld	r8,0x9
80007310:	c1 b0       	breq	80007346 <__smakebuf_r+0xb6>
80007312:	a1 b8       	sbr	r8,0x1
80007314:	ae 68       	st.h	r7[0xc],r8
80007316:	ee c8 ff b9 	sub	r8,r7,-71
8000731a:	8f 48       	st.w	r7[0x10],r8
8000731c:	8f 08       	st.w	r7[0x0],r8
8000731e:	30 18       	mov	r8,1
80007320:	8f 58       	st.w	r7[0x14],r8
80007322:	c1 28       	rjmp	80007346 <__smakebuf_r+0xb6>
80007324:	a7 b8       	sbr	r8,0x7
80007326:	8f 4c       	st.w	r7[0x10],r12
80007328:	ae 68       	st.h	r7[0xc],r8
8000732a:	8f 55       	st.w	r7[0x14],r5
8000732c:	fe c8 06 f0 	sub	r8,pc,1776
80007330:	8f 0c       	st.w	r7[0x0],r12
80007332:	8d a8       	st.w	r6[0x28],r8
80007334:	58 04       	cp.w	r4,0
80007336:	c0 80       	breq	80007346 <__smakebuf_r+0xb6>
80007338:	8e 7c       	ld.sh	r12,r7[0xe]
8000733a:	e0 a0 07 3f 	rcall	800081b8 <isatty>
8000733e:	c0 40       	breq	80007346 <__smakebuf_r+0xb6>
80007340:	8e 68       	ld.sh	r8,r7[0xc]
80007342:	a1 a8       	sbr	r8,0x0
80007344:	ae 68       	st.h	r7[0xc],r8
80007346:	2f 1d       	sub	sp,-60
80007348:	d8 22       	popm	r4-r7,pc
8000734a:	d7 03       	nop

8000734c <malloc>:
8000734c:	d4 01       	pushm	lr
8000734e:	e0 68 01 18 	mov	r8,280
80007352:	18 9b       	mov	r11,r12
80007354:	70 0c       	ld.w	r12,r8[0x0]
80007356:	c0 3c       	rcall	8000735c <_malloc_r>
80007358:	d8 02       	popm	pc
8000735a:	d7 03       	nop

8000735c <_malloc_r>:
8000735c:	d4 31       	pushm	r0-r7,lr
8000735e:	f6 c8 ff f5 	sub	r8,r11,-11
80007362:	18 95       	mov	r5,r12
80007364:	10 97       	mov	r7,r8
80007366:	e0 17 ff f8 	andl	r7,0xfff8
8000736a:	59 68       	cp.w	r8,22
8000736c:	f9 b7 08 10 	movls	r7,16
80007370:	16 37       	cp.w	r7,r11
80007372:	5f 38       	srlo	r8
80007374:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007378:	c0 50       	breq	80007382 <_malloc_r+0x26>
8000737a:	30 c8       	mov	r8,12
8000737c:	99 38       	st.w	r12[0xc],r8
8000737e:	e0 8f 01 f7 	bral	8000776c <_malloc_r+0x410>
80007382:	e0 a0 02 2f 	rcall	800077e0 <__malloc_lock>
80007386:	e0 47 01 f7 	cp.w	r7,503
8000738a:	e0 8b 00 1d 	brhi	800073c4 <_malloc_r+0x68>
8000738e:	ee 03 16 03 	lsr	r3,r7,0x3
80007392:	e0 68 01 1c 	mov	r8,284
80007396:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000739a:	70 36       	ld.w	r6,r8[0xc]
8000739c:	10 36       	cp.w	r6,r8
8000739e:	c0 61       	brne	800073aa <_malloc_r+0x4e>
800073a0:	ec c8 ff f8 	sub	r8,r6,-8
800073a4:	70 36       	ld.w	r6,r8[0xc]
800073a6:	10 36       	cp.w	r6,r8
800073a8:	c0 c0       	breq	800073c0 <_malloc_r+0x64>
800073aa:	6c 18       	ld.w	r8,r6[0x4]
800073ac:	e0 18 ff fc 	andl	r8,0xfffc
800073b0:	6c 3a       	ld.w	r10,r6[0xc]
800073b2:	ec 08 00 09 	add	r9,r6,r8
800073b6:	0a 9c       	mov	r12,r5
800073b8:	6c 28       	ld.w	r8,r6[0x8]
800073ba:	95 28       	st.w	r10[0x8],r8
800073bc:	91 3a       	st.w	r8[0xc],r10
800073be:	c4 78       	rjmp	8000744c <_malloc_r+0xf0>
800073c0:	2f e3       	sub	r3,-2
800073c2:	c4 d8       	rjmp	8000745c <_malloc_r+0x100>
800073c4:	ee 03 16 09 	lsr	r3,r7,0x9
800073c8:	c0 41       	brne	800073d0 <_malloc_r+0x74>
800073ca:	ee 03 16 03 	lsr	r3,r7,0x3
800073ce:	c2 68       	rjmp	8000741a <_malloc_r+0xbe>
800073d0:	58 43       	cp.w	r3,4
800073d2:	e0 8b 00 06 	brhi	800073de <_malloc_r+0x82>
800073d6:	ee 03 16 06 	lsr	r3,r7,0x6
800073da:	2c 83       	sub	r3,-56
800073dc:	c1 f8       	rjmp	8000741a <_malloc_r+0xbe>
800073de:	59 43       	cp.w	r3,20
800073e0:	e0 8b 00 04 	brhi	800073e8 <_malloc_r+0x8c>
800073e4:	2a 53       	sub	r3,-91
800073e6:	c1 a8       	rjmp	8000741a <_malloc_r+0xbe>
800073e8:	e0 43 00 54 	cp.w	r3,84
800073ec:	e0 8b 00 06 	brhi	800073f8 <_malloc_r+0x9c>
800073f0:	ee 03 16 0c 	lsr	r3,r7,0xc
800073f4:	29 23       	sub	r3,-110
800073f6:	c1 28       	rjmp	8000741a <_malloc_r+0xbe>
800073f8:	e0 43 01 54 	cp.w	r3,340
800073fc:	e0 8b 00 06 	brhi	80007408 <_malloc_r+0xac>
80007400:	ee 03 16 0f 	lsr	r3,r7,0xf
80007404:	28 93       	sub	r3,-119
80007406:	c0 a8       	rjmp	8000741a <_malloc_r+0xbe>
80007408:	e0 43 05 54 	cp.w	r3,1364
8000740c:	e0 88 00 04 	brls	80007414 <_malloc_r+0xb8>
80007410:	37 e3       	mov	r3,126
80007412:	c0 48       	rjmp	8000741a <_malloc_r+0xbe>
80007414:	ee 03 16 12 	lsr	r3,r7,0x12
80007418:	28 43       	sub	r3,-124
8000741a:	e0 6a 01 1c 	mov	r10,284
8000741e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007422:	74 36       	ld.w	r6,r10[0xc]
80007424:	c1 98       	rjmp	80007456 <_malloc_r+0xfa>
80007426:	6c 19       	ld.w	r9,r6[0x4]
80007428:	e0 19 ff fc 	andl	r9,0xfffc
8000742c:	f2 07 01 0b 	sub	r11,r9,r7
80007430:	58 fb       	cp.w	r11,15
80007432:	e0 8a 00 04 	brle	8000743a <_malloc_r+0xde>
80007436:	20 13       	sub	r3,1
80007438:	c1 18       	rjmp	8000745a <_malloc_r+0xfe>
8000743a:	6c 38       	ld.w	r8,r6[0xc]
8000743c:	58 0b       	cp.w	r11,0
8000743e:	c0 b5       	brlt	80007454 <_malloc_r+0xf8>
80007440:	6c 2a       	ld.w	r10,r6[0x8]
80007442:	ec 09 00 09 	add	r9,r6,r9
80007446:	0a 9c       	mov	r12,r5
80007448:	91 2a       	st.w	r8[0x8],r10
8000744a:	95 38       	st.w	r10[0xc],r8
8000744c:	72 18       	ld.w	r8,r9[0x4]
8000744e:	a1 a8       	sbr	r8,0x0
80007450:	93 18       	st.w	r9[0x4],r8
80007452:	cb c8       	rjmp	800075ca <_malloc_r+0x26e>
80007454:	10 96       	mov	r6,r8
80007456:	14 36       	cp.w	r6,r10
80007458:	ce 71       	brne	80007426 <_malloc_r+0xca>
8000745a:	2f f3       	sub	r3,-1
8000745c:	e0 6a 01 1c 	mov	r10,284
80007460:	f4 cc ff f8 	sub	r12,r10,-8
80007464:	78 26       	ld.w	r6,r12[0x8]
80007466:	18 36       	cp.w	r6,r12
80007468:	c6 c0       	breq	80007540 <_malloc_r+0x1e4>
8000746a:	6c 19       	ld.w	r9,r6[0x4]
8000746c:	e0 19 ff fc 	andl	r9,0xfffc
80007470:	f2 07 01 08 	sub	r8,r9,r7
80007474:	58 f8       	cp.w	r8,15
80007476:	e0 89 00 8f 	brgt	80007594 <_malloc_r+0x238>
8000747a:	99 3c       	st.w	r12[0xc],r12
8000747c:	99 2c       	st.w	r12[0x8],r12
8000747e:	58 08       	cp.w	r8,0
80007480:	c0 55       	brlt	8000748a <_malloc_r+0x12e>
80007482:	ec 09 00 09 	add	r9,r6,r9
80007486:	0a 9c       	mov	r12,r5
80007488:	ce 2b       	rjmp	8000744c <_malloc_r+0xf0>
8000748a:	e0 49 01 ff 	cp.w	r9,511
8000748e:	e0 8b 00 13 	brhi	800074b4 <_malloc_r+0x158>
80007492:	a3 99       	lsr	r9,0x3
80007494:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007498:	70 2b       	ld.w	r11,r8[0x8]
8000749a:	8d 38       	st.w	r6[0xc],r8
8000749c:	8d 2b       	st.w	r6[0x8],r11
8000749e:	97 36       	st.w	r11[0xc],r6
800074a0:	91 26       	st.w	r8[0x8],r6
800074a2:	a3 49       	asr	r9,0x2
800074a4:	74 18       	ld.w	r8,r10[0x4]
800074a6:	30 1b       	mov	r11,1
800074a8:	f6 09 09 49 	lsl	r9,r11,r9
800074ac:	f1 e9 10 09 	or	r9,r8,r9
800074b0:	95 19       	st.w	r10[0x4],r9
800074b2:	c4 78       	rjmp	80007540 <_malloc_r+0x1e4>
800074b4:	f2 0a 16 09 	lsr	r10,r9,0x9
800074b8:	58 4a       	cp.w	r10,4
800074ba:	e0 8b 00 07 	brhi	800074c8 <_malloc_r+0x16c>
800074be:	f2 0a 16 06 	lsr	r10,r9,0x6
800074c2:	2c 8a       	sub	r10,-56
800074c4:	c2 08       	rjmp	80007504 <_malloc_r+0x1a8>
800074c6:	d7 03       	nop
800074c8:	59 4a       	cp.w	r10,20
800074ca:	e0 8b 00 04 	brhi	800074d2 <_malloc_r+0x176>
800074ce:	2a 5a       	sub	r10,-91
800074d0:	c1 a8       	rjmp	80007504 <_malloc_r+0x1a8>
800074d2:	e0 4a 00 54 	cp.w	r10,84
800074d6:	e0 8b 00 06 	brhi	800074e2 <_malloc_r+0x186>
800074da:	f2 0a 16 0c 	lsr	r10,r9,0xc
800074de:	29 2a       	sub	r10,-110
800074e0:	c1 28       	rjmp	80007504 <_malloc_r+0x1a8>
800074e2:	e0 4a 01 54 	cp.w	r10,340
800074e6:	e0 8b 00 06 	brhi	800074f2 <_malloc_r+0x196>
800074ea:	f2 0a 16 0f 	lsr	r10,r9,0xf
800074ee:	28 9a       	sub	r10,-119
800074f0:	c0 a8       	rjmp	80007504 <_malloc_r+0x1a8>
800074f2:	e0 4a 05 54 	cp.w	r10,1364
800074f6:	e0 88 00 04 	brls	800074fe <_malloc_r+0x1a2>
800074fa:	37 ea       	mov	r10,126
800074fc:	c0 48       	rjmp	80007504 <_malloc_r+0x1a8>
800074fe:	f2 0a 16 12 	lsr	r10,r9,0x12
80007502:	28 4a       	sub	r10,-124
80007504:	e0 6b 01 1c 	mov	r11,284
80007508:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000750c:	68 28       	ld.w	r8,r4[0x8]
8000750e:	08 38       	cp.w	r8,r4
80007510:	c0 e1       	brne	8000752c <_malloc_r+0x1d0>
80007512:	76 19       	ld.w	r9,r11[0x4]
80007514:	a3 4a       	asr	r10,0x2
80007516:	30 1e       	mov	lr,1
80007518:	fc 0a 09 4a 	lsl	r10,lr,r10
8000751c:	f3 ea 10 0a 	or	r10,r9,r10
80007520:	10 99       	mov	r9,r8
80007522:	97 1a       	st.w	r11[0x4],r10
80007524:	c0 a8       	rjmp	80007538 <_malloc_r+0x1dc>
80007526:	70 28       	ld.w	r8,r8[0x8]
80007528:	08 38       	cp.w	r8,r4
8000752a:	c0 60       	breq	80007536 <_malloc_r+0x1da>
8000752c:	70 1a       	ld.w	r10,r8[0x4]
8000752e:	e0 1a ff fc 	andl	r10,0xfffc
80007532:	14 39       	cp.w	r9,r10
80007534:	cf 93       	brcs	80007526 <_malloc_r+0x1ca>
80007536:	70 39       	ld.w	r9,r8[0xc]
80007538:	8d 39       	st.w	r6[0xc],r9
8000753a:	8d 28       	st.w	r6[0x8],r8
8000753c:	91 36       	st.w	r8[0xc],r6
8000753e:	93 26       	st.w	r9[0x8],r6
80007540:	e6 08 14 02 	asr	r8,r3,0x2
80007544:	30 1b       	mov	r11,1
80007546:	e0 64 01 1c 	mov	r4,284
8000754a:	f6 08 09 4b 	lsl	r11,r11,r8
8000754e:	68 18       	ld.w	r8,r4[0x4]
80007550:	10 3b       	cp.w	r11,r8
80007552:	e0 8b 00 69 	brhi	80007624 <_malloc_r+0x2c8>
80007556:	f7 e8 00 09 	and	r9,r11,r8
8000755a:	c0 b1       	brne	80007570 <_malloc_r+0x214>
8000755c:	e0 13 ff fc 	andl	r3,0xfffc
80007560:	a1 7b       	lsl	r11,0x1
80007562:	2f c3       	sub	r3,-4
80007564:	c0 38       	rjmp	8000756a <_malloc_r+0x20e>
80007566:	2f c3       	sub	r3,-4
80007568:	a1 7b       	lsl	r11,0x1
8000756a:	f7 e8 00 09 	and	r9,r11,r8
8000756e:	cf c0       	breq	80007566 <_malloc_r+0x20a>
80007570:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007574:	06 92       	mov	r2,r3
80007576:	1c 91       	mov	r1,lr
80007578:	62 36       	ld.w	r6,r1[0xc]
8000757a:	c2 d8       	rjmp	800075d4 <_malloc_r+0x278>
8000757c:	6c 1a       	ld.w	r10,r6[0x4]
8000757e:	e0 1a ff fc 	andl	r10,0xfffc
80007582:	f4 07 01 08 	sub	r8,r10,r7
80007586:	58 f8       	cp.w	r8,15
80007588:	e0 8a 00 15 	brle	800075b2 <_malloc_r+0x256>
8000758c:	6c 3a       	ld.w	r10,r6[0xc]
8000758e:	6c 29       	ld.w	r9,r6[0x8]
80007590:	95 29       	st.w	r10[0x8],r9
80007592:	93 3a       	st.w	r9[0xc],r10
80007594:	0e 99       	mov	r9,r7
80007596:	ec 07 00 07 	add	r7,r6,r7
8000759a:	a1 a9       	sbr	r9,0x0
8000759c:	99 37       	st.w	r12[0xc],r7
8000759e:	99 27       	st.w	r12[0x8],r7
800075a0:	8d 19       	st.w	r6[0x4],r9
800075a2:	ee 08 09 08 	st.w	r7[r8],r8
800075a6:	8f 2c       	st.w	r7[0x8],r12
800075a8:	8f 3c       	st.w	r7[0xc],r12
800075aa:	a1 a8       	sbr	r8,0x0
800075ac:	0a 9c       	mov	r12,r5
800075ae:	8f 18       	st.w	r7[0x4],r8
800075b0:	c0 d8       	rjmp	800075ca <_malloc_r+0x26e>
800075b2:	6c 39       	ld.w	r9,r6[0xc]
800075b4:	58 08       	cp.w	r8,0
800075b6:	c0 e5       	brlt	800075d2 <_malloc_r+0x276>
800075b8:	ec 0a 00 0a 	add	r10,r6,r10
800075bc:	74 18       	ld.w	r8,r10[0x4]
800075be:	a1 a8       	sbr	r8,0x0
800075c0:	0a 9c       	mov	r12,r5
800075c2:	95 18       	st.w	r10[0x4],r8
800075c4:	6c 28       	ld.w	r8,r6[0x8]
800075c6:	93 28       	st.w	r9[0x8],r8
800075c8:	91 39       	st.w	r8[0xc],r9
800075ca:	c0 cd       	rcall	800077e2 <__malloc_unlock>
800075cc:	ec cc ff f8 	sub	r12,r6,-8
800075d0:	d8 32       	popm	r0-r7,pc
800075d2:	12 96       	mov	r6,r9
800075d4:	02 36       	cp.w	r6,r1
800075d6:	cd 31       	brne	8000757c <_malloc_r+0x220>
800075d8:	2f f2       	sub	r2,-1
800075da:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800075de:	c0 30       	breq	800075e4 <_malloc_r+0x288>
800075e0:	2f 81       	sub	r1,-8
800075e2:	cc bb       	rjmp	80007578 <_malloc_r+0x21c>
800075e4:	1c 98       	mov	r8,lr
800075e6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800075ea:	c0 81       	brne	800075fa <_malloc_r+0x29e>
800075ec:	68 19       	ld.w	r9,r4[0x4]
800075ee:	f6 08 11 ff 	rsub	r8,r11,-1
800075f2:	f3 e8 00 08 	and	r8,r9,r8
800075f6:	89 18       	st.w	r4[0x4],r8
800075f8:	c0 78       	rjmp	80007606 <_malloc_r+0x2aa>
800075fa:	f0 c9 00 08 	sub	r9,r8,8
800075fe:	20 13       	sub	r3,1
80007600:	70 08       	ld.w	r8,r8[0x0]
80007602:	12 38       	cp.w	r8,r9
80007604:	cf 10       	breq	800075e6 <_malloc_r+0x28a>
80007606:	a1 7b       	lsl	r11,0x1
80007608:	68 18       	ld.w	r8,r4[0x4]
8000760a:	10 3b       	cp.w	r11,r8
8000760c:	e0 8b 00 0c 	brhi	80007624 <_malloc_r+0x2c8>
80007610:	58 0b       	cp.w	r11,0
80007612:	c0 90       	breq	80007624 <_malloc_r+0x2c8>
80007614:	04 93       	mov	r3,r2
80007616:	c0 38       	rjmp	8000761c <_malloc_r+0x2c0>
80007618:	2f c3       	sub	r3,-4
8000761a:	a1 7b       	lsl	r11,0x1
8000761c:	f7 e8 00 09 	and	r9,r11,r8
80007620:	ca 81       	brne	80007570 <_malloc_r+0x214>
80007622:	cf bb       	rjmp	80007618 <_malloc_r+0x2bc>
80007624:	68 23       	ld.w	r3,r4[0x8]
80007626:	66 12       	ld.w	r2,r3[0x4]
80007628:	e0 12 ff fc 	andl	r2,0xfffc
8000762c:	0e 32       	cp.w	r2,r7
8000762e:	5f 39       	srlo	r9
80007630:	e4 07 01 08 	sub	r8,r2,r7
80007634:	58 f8       	cp.w	r8,15
80007636:	5f aa       	srle	r10
80007638:	f5 e9 10 09 	or	r9,r10,r9
8000763c:	e0 80 00 9a 	breq	80007770 <_malloc_r+0x414>
80007640:	e0 68 07 18 	mov	r8,1816
80007644:	70 01       	ld.w	r1,r8[0x0]
80007646:	e0 68 05 28 	mov	r8,1320
8000764a:	2f 01       	sub	r1,-16
8000764c:	70 08       	ld.w	r8,r8[0x0]
8000764e:	0e 01       	add	r1,r7
80007650:	5b f8       	cp.w	r8,-1
80007652:	c0 40       	breq	8000765a <_malloc_r+0x2fe>
80007654:	28 11       	sub	r1,-127
80007656:	e0 11 ff 80 	andl	r1,0xff80
8000765a:	02 9b       	mov	r11,r1
8000765c:	0a 9c       	mov	r12,r5
8000765e:	e0 a0 05 31 	rcall	800080c0 <_sbrk_r>
80007662:	18 96       	mov	r6,r12
80007664:	5b fc       	cp.w	r12,-1
80007666:	c7 50       	breq	80007750 <_malloc_r+0x3f4>
80007668:	e6 02 00 08 	add	r8,r3,r2
8000766c:	10 3c       	cp.w	r12,r8
8000766e:	c0 32       	brcc	80007674 <_malloc_r+0x318>
80007670:	08 33       	cp.w	r3,r4
80007672:	c6 f1       	brne	80007750 <_malloc_r+0x3f4>
80007674:	e0 6a 07 1c 	mov	r10,1820
80007678:	74 09       	ld.w	r9,r10[0x0]
8000767a:	e2 09 00 09 	add	r9,r1,r9
8000767e:	95 09       	st.w	r10[0x0],r9
80007680:	10 36       	cp.w	r6,r8
80007682:	c0 a1       	brne	80007696 <_malloc_r+0x33a>
80007684:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007688:	c0 71       	brne	80007696 <_malloc_r+0x33a>
8000768a:	e2 02 00 02 	add	r2,r1,r2
8000768e:	68 28       	ld.w	r8,r4[0x8]
80007690:	a1 a2       	sbr	r2,0x0
80007692:	91 12       	st.w	r8[0x4],r2
80007694:	c4 f8       	rjmp	80007732 <_malloc_r+0x3d6>
80007696:	e0 6a 05 28 	mov	r10,1320
8000769a:	74 0b       	ld.w	r11,r10[0x0]
8000769c:	5b fb       	cp.w	r11,-1
8000769e:	c0 31       	brne	800076a4 <_malloc_r+0x348>
800076a0:	95 06       	st.w	r10[0x0],r6
800076a2:	c0 78       	rjmp	800076b0 <_malloc_r+0x354>
800076a4:	ec 09 00 09 	add	r9,r6,r9
800076a8:	e0 6a 07 1c 	mov	r10,1820
800076ac:	10 19       	sub	r9,r8
800076ae:	95 09       	st.w	r10[0x0],r9
800076b0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800076b4:	f0 09 11 08 	rsub	r9,r8,8
800076b8:	58 08       	cp.w	r8,0
800076ba:	f2 08 17 10 	movne	r8,r9
800076be:	ed d8 e1 06 	addne	r6,r6,r8
800076c2:	28 08       	sub	r8,-128
800076c4:	ec 01 00 01 	add	r1,r6,r1
800076c8:	0a 9c       	mov	r12,r5
800076ca:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800076ce:	f0 01 01 01 	sub	r1,r8,r1
800076d2:	02 9b       	mov	r11,r1
800076d4:	e0 a0 04 f6 	rcall	800080c0 <_sbrk_r>
800076d8:	e0 68 07 1c 	mov	r8,1820
800076dc:	5b fc       	cp.w	r12,-1
800076de:	ec 0c 17 00 	moveq	r12,r6
800076e2:	f9 b1 00 00 	moveq	r1,0
800076e6:	70 09       	ld.w	r9,r8[0x0]
800076e8:	0c 1c       	sub	r12,r6
800076ea:	89 26       	st.w	r4[0x8],r6
800076ec:	02 0c       	add	r12,r1
800076ee:	12 01       	add	r1,r9
800076f0:	a1 ac       	sbr	r12,0x0
800076f2:	91 01       	st.w	r8[0x0],r1
800076f4:	8d 1c       	st.w	r6[0x4],r12
800076f6:	08 33       	cp.w	r3,r4
800076f8:	c1 d0       	breq	80007732 <_malloc_r+0x3d6>
800076fa:	58 f2       	cp.w	r2,15
800076fc:	e0 8b 00 05 	brhi	80007706 <_malloc_r+0x3aa>
80007700:	30 18       	mov	r8,1
80007702:	8d 18       	st.w	r6[0x4],r8
80007704:	c2 68       	rjmp	80007750 <_malloc_r+0x3f4>
80007706:	30 59       	mov	r9,5
80007708:	20 c2       	sub	r2,12
8000770a:	e0 12 ff f8 	andl	r2,0xfff8
8000770e:	e6 02 00 08 	add	r8,r3,r2
80007712:	91 29       	st.w	r8[0x8],r9
80007714:	91 19       	st.w	r8[0x4],r9
80007716:	66 18       	ld.w	r8,r3[0x4]
80007718:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000771c:	e5 e8 10 08 	or	r8,r2,r8
80007720:	87 18       	st.w	r3[0x4],r8
80007722:	58 f2       	cp.w	r2,15
80007724:	e0 88 00 07 	brls	80007732 <_malloc_r+0x3d6>
80007728:	e6 cb ff f8 	sub	r11,r3,-8
8000772c:	0a 9c       	mov	r12,r5
8000772e:	fe b0 fb 71 	rcall	80006e10 <_free_r>
80007732:	e0 69 07 14 	mov	r9,1812
80007736:	72 0a       	ld.w	r10,r9[0x0]
80007738:	e0 68 07 1c 	mov	r8,1820
8000773c:	70 08       	ld.w	r8,r8[0x0]
8000773e:	14 38       	cp.w	r8,r10
80007740:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007744:	e0 69 07 10 	mov	r9,1808
80007748:	72 0a       	ld.w	r10,r9[0x0]
8000774a:	14 38       	cp.w	r8,r10
8000774c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007750:	68 28       	ld.w	r8,r4[0x8]
80007752:	70 18       	ld.w	r8,r8[0x4]
80007754:	e0 18 ff fc 	andl	r8,0xfffc
80007758:	0e 38       	cp.w	r8,r7
8000775a:	5f 39       	srlo	r9
8000775c:	0e 18       	sub	r8,r7
8000775e:	58 f8       	cp.w	r8,15
80007760:	5f aa       	srle	r10
80007762:	f5 e9 10 09 	or	r9,r10,r9
80007766:	c0 50       	breq	80007770 <_malloc_r+0x414>
80007768:	0a 9c       	mov	r12,r5
8000776a:	c3 cc       	rcall	800077e2 <__malloc_unlock>
8000776c:	d8 3a       	popm	r0-r7,pc,r12=0
8000776e:	d7 03       	nop
80007770:	68 26       	ld.w	r6,r4[0x8]
80007772:	a1 a8       	sbr	r8,0x0
80007774:	0e 99       	mov	r9,r7
80007776:	a1 a9       	sbr	r9,0x0
80007778:	8d 19       	st.w	r6[0x4],r9
8000777a:	ec 07 00 07 	add	r7,r6,r7
8000777e:	0a 9c       	mov	r12,r5
80007780:	89 27       	st.w	r4[0x8],r7
80007782:	8f 18       	st.w	r7[0x4],r8
80007784:	c2 fc       	rcall	800077e2 <__malloc_unlock>
80007786:	ec cc ff f8 	sub	r12,r6,-8
8000778a:	d8 32       	popm	r0-r7,pc

8000778c <memchr>:
8000778c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007790:	c0 68       	rjmp	8000779c <memchr+0x10>
80007792:	20 1a       	sub	r10,1
80007794:	19 88       	ld.ub	r8,r12[0x0]
80007796:	16 38       	cp.w	r8,r11
80007798:	5e 0c       	reteq	r12
8000779a:	2f fc       	sub	r12,-1
8000779c:	58 0a       	cp.w	r10,0
8000779e:	cf a1       	brne	80007792 <memchr+0x6>
800077a0:	5e fa       	retal	r10

800077a2 <memmove>:
800077a2:	d4 01       	pushm	lr
800077a4:	18 3b       	cp.w	r11,r12
800077a6:	c1 92       	brcc	800077d8 <memmove+0x36>
800077a8:	f6 0a 00 09 	add	r9,r11,r10
800077ac:	12 3c       	cp.w	r12,r9
800077ae:	c1 52       	brcc	800077d8 <memmove+0x36>
800077b0:	f8 0a 00 0b 	add	r11,r12,r10
800077b4:	30 08       	mov	r8,0
800077b6:	c0 68       	rjmp	800077c2 <memmove+0x20>
800077b8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800077bc:	20 1a       	sub	r10,1
800077be:	f6 08 0b 0e 	st.b	r11[r8],lr
800077c2:	20 18       	sub	r8,1
800077c4:	58 0a       	cp.w	r10,0
800077c6:	cf 91       	brne	800077b8 <memmove+0x16>
800077c8:	d8 02       	popm	pc
800077ca:	f6 08 07 09 	ld.ub	r9,r11[r8]
800077ce:	20 1a       	sub	r10,1
800077d0:	f8 08 0b 09 	st.b	r12[r8],r9
800077d4:	2f f8       	sub	r8,-1
800077d6:	c0 28       	rjmp	800077da <memmove+0x38>
800077d8:	30 08       	mov	r8,0
800077da:	58 0a       	cp.w	r10,0
800077dc:	cf 71       	brne	800077ca <memmove+0x28>
800077de:	d8 02       	popm	pc

800077e0 <__malloc_lock>:
800077e0:	5e fc       	retal	r12

800077e2 <__malloc_unlock>:
800077e2:	5e fc       	retal	r12

800077e4 <__hi0bits>:
800077e4:	18 98       	mov	r8,r12
800077e6:	e0 1c 00 00 	andl	r12,0x0
800077ea:	f0 09 15 10 	lsl	r9,r8,0x10
800077ee:	58 0c       	cp.w	r12,0
800077f0:	f2 08 17 00 	moveq	r8,r9
800077f4:	f9 bc 00 10 	moveq	r12,16
800077f8:	f9 bc 01 00 	movne	r12,0
800077fc:	10 9a       	mov	r10,r8
800077fe:	f0 09 15 08 	lsl	r9,r8,0x8
80007802:	e6 1a ff 00 	andh	r10,0xff00,COH
80007806:	f7 bc 00 f8 	subeq	r12,-8
8000780a:	f2 08 17 00 	moveq	r8,r9
8000780e:	10 9a       	mov	r10,r8
80007810:	f0 09 15 04 	lsl	r9,r8,0x4
80007814:	e6 1a f0 00 	andh	r10,0xf000,COH
80007818:	f7 bc 00 fc 	subeq	r12,-4
8000781c:	f2 08 17 00 	moveq	r8,r9
80007820:	10 9a       	mov	r10,r8
80007822:	f0 09 15 02 	lsl	r9,r8,0x2
80007826:	e6 1a c0 00 	andh	r10,0xc000,COH
8000782a:	f7 bc 00 fe 	subeq	r12,-2
8000782e:	f2 08 17 00 	moveq	r8,r9
80007832:	58 08       	cp.w	r8,0
80007834:	5e 5c       	retlt	r12
80007836:	ed b8 00 1e 	bld	r8,0x1e
8000783a:	f9 bc 01 20 	movne	r12,32
8000783e:	f7 bc 00 ff 	subeq	r12,-1
80007842:	5e fc       	retal	r12

80007844 <__lo0bits>:
80007844:	18 99       	mov	r9,r12
80007846:	78 08       	ld.w	r8,r12[0x0]
80007848:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000784c:	c1 50       	breq	80007876 <__lo0bits+0x32>
8000784e:	ed b8 00 00 	bld	r8,0x0
80007852:	c0 21       	brne	80007856 <__lo0bits+0x12>
80007854:	5e fd       	retal	0
80007856:	10 9b       	mov	r11,r8
80007858:	f0 0a 16 01 	lsr	r10,r8,0x1
8000785c:	e2 1b 00 02 	andl	r11,0x2,COH
80007860:	a3 88       	lsr	r8,0x2
80007862:	58 0b       	cp.w	r11,0
80007864:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007868:	f9 bc 01 01 	movne	r12,1
8000786c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007870:	f9 bc 00 02 	moveq	r12,2
80007874:	5e fc       	retal	r12
80007876:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000787a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000787e:	58 0a       	cp.w	r10,0
80007880:	f6 08 17 00 	moveq	r8,r11
80007884:	f9 bc 00 10 	moveq	r12,16
80007888:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000788c:	f0 0a 16 08 	lsr	r10,r8,0x8
80007890:	58 0b       	cp.w	r11,0
80007892:	f7 bc 00 f8 	subeq	r12,-8
80007896:	f4 08 17 00 	moveq	r8,r10
8000789a:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000789e:	f0 0a 16 04 	lsr	r10,r8,0x4
800078a2:	58 0b       	cp.w	r11,0
800078a4:	f7 bc 00 fc 	subeq	r12,-4
800078a8:	f4 08 17 00 	moveq	r8,r10
800078ac:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800078b0:	f0 0a 16 02 	lsr	r10,r8,0x2
800078b4:	58 0b       	cp.w	r11,0
800078b6:	f7 bc 00 fe 	subeq	r12,-2
800078ba:	f4 08 17 00 	moveq	r8,r10
800078be:	ed b8 00 00 	bld	r8,0x0
800078c2:	c0 60       	breq	800078ce <__lo0bits+0x8a>
800078c4:	a1 98       	lsr	r8,0x1
800078c6:	c0 31       	brne	800078cc <__lo0bits+0x88>
800078c8:	32 0c       	mov	r12,32
800078ca:	5e fc       	retal	r12
800078cc:	2f fc       	sub	r12,-1
800078ce:	93 08       	st.w	r9[0x0],r8
800078d0:	5e fc       	retal	r12

800078d2 <__mcmp>:
800078d2:	d4 01       	pushm	lr
800078d4:	18 98       	mov	r8,r12
800078d6:	76 49       	ld.w	r9,r11[0x10]
800078d8:	78 4c       	ld.w	r12,r12[0x10]
800078da:	12 1c       	sub	r12,r9
800078dc:	c1 31       	brne	80007902 <__mcmp+0x30>
800078de:	2f b9       	sub	r9,-5
800078e0:	a3 69       	lsl	r9,0x2
800078e2:	12 0b       	add	r11,r9
800078e4:	f0 09 00 09 	add	r9,r8,r9
800078e8:	2e c8       	sub	r8,-20
800078ea:	13 4e       	ld.w	lr,--r9
800078ec:	17 4a       	ld.w	r10,--r11
800078ee:	14 3e       	cp.w	lr,r10
800078f0:	c0 60       	breq	800078fc <__mcmp+0x2a>
800078f2:	f9 bc 03 ff 	movlo	r12,-1
800078f6:	f9 bc 02 01 	movhs	r12,1
800078fa:	d8 02       	popm	pc
800078fc:	10 39       	cp.w	r9,r8
800078fe:	fe 9b ff f6 	brhi	800078ea <__mcmp+0x18>
80007902:	d8 02       	popm	pc

80007904 <_Bfree>:
80007904:	d4 21       	pushm	r4-r7,lr
80007906:	18 97       	mov	r7,r12
80007908:	16 95       	mov	r5,r11
8000790a:	78 96       	ld.w	r6,r12[0x24]
8000790c:	58 06       	cp.w	r6,0
8000790e:	c0 91       	brne	80007920 <_Bfree+0x1c>
80007910:	31 0c       	mov	r12,16
80007912:	fe b0 fd 1d 	rcall	8000734c <malloc>
80007916:	99 36       	st.w	r12[0xc],r6
80007918:	8f 9c       	st.w	r7[0x24],r12
8000791a:	99 16       	st.w	r12[0x4],r6
8000791c:	99 26       	st.w	r12[0x8],r6
8000791e:	99 06       	st.w	r12[0x0],r6
80007920:	58 05       	cp.w	r5,0
80007922:	c0 90       	breq	80007934 <_Bfree+0x30>
80007924:	6a 19       	ld.w	r9,r5[0x4]
80007926:	6e 98       	ld.w	r8,r7[0x24]
80007928:	70 38       	ld.w	r8,r8[0xc]
8000792a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000792e:	8b 0a       	st.w	r5[0x0],r10
80007930:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007934:	d8 22       	popm	r4-r7,pc
80007936:	d7 03       	nop

80007938 <_Balloc>:
80007938:	d4 21       	pushm	r4-r7,lr
8000793a:	18 97       	mov	r7,r12
8000793c:	16 96       	mov	r6,r11
8000793e:	78 95       	ld.w	r5,r12[0x24]
80007940:	58 05       	cp.w	r5,0
80007942:	c0 91       	brne	80007954 <_Balloc+0x1c>
80007944:	31 0c       	mov	r12,16
80007946:	fe b0 fd 03 	rcall	8000734c <malloc>
8000794a:	99 35       	st.w	r12[0xc],r5
8000794c:	8f 9c       	st.w	r7[0x24],r12
8000794e:	99 15       	st.w	r12[0x4],r5
80007950:	99 25       	st.w	r12[0x8],r5
80007952:	99 05       	st.w	r12[0x0],r5
80007954:	6e 95       	ld.w	r5,r7[0x24]
80007956:	6a 38       	ld.w	r8,r5[0xc]
80007958:	58 08       	cp.w	r8,0
8000795a:	c0 b1       	brne	80007970 <_Balloc+0x38>
8000795c:	31 0a       	mov	r10,16
8000795e:	30 4b       	mov	r11,4
80007960:	0e 9c       	mov	r12,r7
80007962:	e0 a0 04 93 	rcall	80008288 <_calloc_r>
80007966:	8b 3c       	st.w	r5[0xc],r12
80007968:	6e 98       	ld.w	r8,r7[0x24]
8000796a:	70 3c       	ld.w	r12,r8[0xc]
8000796c:	58 0c       	cp.w	r12,0
8000796e:	c1 b0       	breq	800079a4 <_Balloc+0x6c>
80007970:	6e 98       	ld.w	r8,r7[0x24]
80007972:	70 38       	ld.w	r8,r8[0xc]
80007974:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007978:	70 0c       	ld.w	r12,r8[0x0]
8000797a:	58 0c       	cp.w	r12,0
8000797c:	c0 40       	breq	80007984 <_Balloc+0x4c>
8000797e:	78 09       	ld.w	r9,r12[0x0]
80007980:	91 09       	st.w	r8[0x0],r9
80007982:	c0 e8       	rjmp	8000799e <_Balloc+0x66>
80007984:	0e 9c       	mov	r12,r7
80007986:	30 17       	mov	r7,1
80007988:	0e 9b       	mov	r11,r7
8000798a:	ee 06 09 47 	lsl	r7,r7,r6
8000798e:	ee ca ff fb 	sub	r10,r7,-5
80007992:	a3 6a       	lsl	r10,0x2
80007994:	e0 a0 04 7a 	rcall	80008288 <_calloc_r>
80007998:	c0 60       	breq	800079a4 <_Balloc+0x6c>
8000799a:	99 16       	st.w	r12[0x4],r6
8000799c:	99 27       	st.w	r12[0x8],r7
8000799e:	30 08       	mov	r8,0
800079a0:	99 38       	st.w	r12[0xc],r8
800079a2:	99 48       	st.w	r12[0x10],r8
800079a4:	d8 22       	popm	r4-r7,pc
800079a6:	d7 03       	nop

800079a8 <__d2b>:
800079a8:	d4 31       	pushm	r0-r7,lr
800079aa:	20 2d       	sub	sp,8
800079ac:	16 93       	mov	r3,r11
800079ae:	12 96       	mov	r6,r9
800079b0:	10 95       	mov	r5,r8
800079b2:	14 92       	mov	r2,r10
800079b4:	30 1b       	mov	r11,1
800079b6:	cc 1f       	rcall	80007938 <_Balloc>
800079b8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800079bc:	50 09       	stdsp	sp[0x0],r9
800079be:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800079c2:	b5 a9       	sbr	r9,0x14
800079c4:	f0 01 16 14 	lsr	r1,r8,0x14
800079c8:	fb f9 1a 00 	st.wne	sp[0x0],r9
800079cc:	18 94       	mov	r4,r12
800079ce:	58 02       	cp.w	r2,0
800079d0:	c1 d0       	breq	80007a0a <__d2b+0x62>
800079d2:	fa cc ff f8 	sub	r12,sp,-8
800079d6:	18 d2       	st.w	--r12,r2
800079d8:	c3 6f       	rcall	80007844 <__lo0bits>
800079da:	40 18       	lddsp	r8,sp[0x4]
800079dc:	c0 d0       	breq	800079f6 <__d2b+0x4e>
800079de:	40 09       	lddsp	r9,sp[0x0]
800079e0:	f8 0a 11 20 	rsub	r10,r12,32
800079e4:	f2 0a 09 4a 	lsl	r10,r9,r10
800079e8:	f5 e8 10 08 	or	r8,r10,r8
800079ec:	89 58       	st.w	r4[0x14],r8
800079ee:	f2 0c 0a 49 	lsr	r9,r9,r12
800079f2:	50 09       	stdsp	sp[0x0],r9
800079f4:	c0 28       	rjmp	800079f8 <__d2b+0x50>
800079f6:	89 58       	st.w	r4[0x14],r8
800079f8:	40 08       	lddsp	r8,sp[0x0]
800079fa:	58 08       	cp.w	r8,0
800079fc:	f9 b3 01 02 	movne	r3,2
80007a00:	f9 b3 00 01 	moveq	r3,1
80007a04:	89 68       	st.w	r4[0x18],r8
80007a06:	89 43       	st.w	r4[0x10],r3
80007a08:	c0 88       	rjmp	80007a18 <__d2b+0x70>
80007a0a:	1a 9c       	mov	r12,sp
80007a0c:	c1 cf       	rcall	80007844 <__lo0bits>
80007a0e:	30 13       	mov	r3,1
80007a10:	40 08       	lddsp	r8,sp[0x0]
80007a12:	2e 0c       	sub	r12,-32
80007a14:	89 43       	st.w	r4[0x10],r3
80007a16:	89 58       	st.w	r4[0x14],r8
80007a18:	58 01       	cp.w	r1,0
80007a1a:	c0 90       	breq	80007a2c <__d2b+0x84>
80007a1c:	e2 c1 04 33 	sub	r1,r1,1075
80007a20:	18 01       	add	r1,r12
80007a22:	8d 01       	st.w	r6[0x0],r1
80007a24:	f8 0c 11 35 	rsub	r12,r12,53
80007a28:	8b 0c       	st.w	r5[0x0],r12
80007a2a:	c0 c8       	rjmp	80007a42 <__d2b+0x9a>
80007a2c:	e6 c8 ff fc 	sub	r8,r3,-4
80007a30:	f8 cc 04 32 	sub	r12,r12,1074
80007a34:	a5 73       	lsl	r3,0x5
80007a36:	8d 0c       	st.w	r6[0x0],r12
80007a38:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007a3c:	cd 4e       	rcall	800077e4 <__hi0bits>
80007a3e:	18 13       	sub	r3,r12
80007a40:	8b 03       	st.w	r5[0x0],r3
80007a42:	08 9c       	mov	r12,r4
80007a44:	2f ed       	sub	sp,-8
80007a46:	d8 32       	popm	r0-r7,pc

80007a48 <__mdiff>:
80007a48:	d4 31       	pushm	r0-r7,lr
80007a4a:	74 48       	ld.w	r8,r10[0x10]
80007a4c:	76 45       	ld.w	r5,r11[0x10]
80007a4e:	16 97       	mov	r7,r11
80007a50:	14 96       	mov	r6,r10
80007a52:	10 15       	sub	r5,r8
80007a54:	c1 31       	brne	80007a7a <__mdiff+0x32>
80007a56:	2f b8       	sub	r8,-5
80007a58:	ee ce ff ec 	sub	lr,r7,-20
80007a5c:	a3 68       	lsl	r8,0x2
80007a5e:	f4 08 00 0b 	add	r11,r10,r8
80007a62:	ee 08 00 08 	add	r8,r7,r8
80007a66:	11 4a       	ld.w	r10,--r8
80007a68:	17 49       	ld.w	r9,--r11
80007a6a:	12 3a       	cp.w	r10,r9
80007a6c:	c0 30       	breq	80007a72 <__mdiff+0x2a>
80007a6e:	c0 e2       	brcc	80007a8a <__mdiff+0x42>
80007a70:	c0 78       	rjmp	80007a7e <__mdiff+0x36>
80007a72:	1c 38       	cp.w	r8,lr
80007a74:	fe 9b ff f9 	brhi	80007a66 <__mdiff+0x1e>
80007a78:	c4 98       	rjmp	80007b0a <__mdiff+0xc2>
80007a7a:	58 05       	cp.w	r5,0
80007a7c:	c0 64       	brge	80007a88 <__mdiff+0x40>
80007a7e:	0e 98       	mov	r8,r7
80007a80:	30 15       	mov	r5,1
80007a82:	0c 97       	mov	r7,r6
80007a84:	10 96       	mov	r6,r8
80007a86:	c0 28       	rjmp	80007a8a <__mdiff+0x42>
80007a88:	30 05       	mov	r5,0
80007a8a:	6e 1b       	ld.w	r11,r7[0x4]
80007a8c:	c5 6f       	rcall	80007938 <_Balloc>
80007a8e:	6e 49       	ld.w	r9,r7[0x10]
80007a90:	6c 44       	ld.w	r4,r6[0x10]
80007a92:	99 35       	st.w	r12[0xc],r5
80007a94:	2f b4       	sub	r4,-5
80007a96:	f2 c5 ff fb 	sub	r5,r9,-5
80007a9a:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007a9e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007aa2:	2e c6       	sub	r6,-20
80007aa4:	2e c7       	sub	r7,-20
80007aa6:	f8 c8 ff ec 	sub	r8,r12,-20
80007aaa:	30 0a       	mov	r10,0
80007aac:	0f 0e       	ld.w	lr,r7++
80007aae:	0d 0b       	ld.w	r11,r6++
80007ab0:	fc 02 16 10 	lsr	r2,lr,0x10
80007ab4:	f6 03 16 10 	lsr	r3,r11,0x10
80007ab8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007abc:	e4 03 01 03 	sub	r3,r2,r3
80007ac0:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007ac4:	fc 0b 01 0b 	sub	r11,lr,r11
80007ac8:	f6 0a 00 0a 	add	r10,r11,r10
80007acc:	b0 1a       	st.h	r8[0x2],r10
80007ace:	b1 4a       	asr	r10,0x10
80007ad0:	e6 0a 00 0a 	add	r10,r3,r10
80007ad4:	b0 0a       	st.h	r8[0x0],r10
80007ad6:	2f c8       	sub	r8,-4
80007ad8:	b1 4a       	asr	r10,0x10
80007ada:	08 36       	cp.w	r6,r4
80007adc:	ce 83       	brcs	80007aac <__mdiff+0x64>
80007ade:	c0 d8       	rjmp	80007af8 <__mdiff+0xb0>
80007ae0:	0f 0b       	ld.w	r11,r7++
80007ae2:	f6 0e 16 10 	lsr	lr,r11,0x10
80007ae6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007aea:	16 0a       	add	r10,r11
80007aec:	b0 1a       	st.h	r8[0x2],r10
80007aee:	b1 4a       	asr	r10,0x10
80007af0:	1c 0a       	add	r10,lr
80007af2:	b0 0a       	st.h	r8[0x0],r10
80007af4:	2f c8       	sub	r8,-4
80007af6:	b1 4a       	asr	r10,0x10
80007af8:	0a 37       	cp.w	r7,r5
80007afa:	cf 33       	brcs	80007ae0 <__mdiff+0x98>
80007afc:	c0 28       	rjmp	80007b00 <__mdiff+0xb8>
80007afe:	20 19       	sub	r9,1
80007b00:	11 4a       	ld.w	r10,--r8
80007b02:	58 0a       	cp.w	r10,0
80007b04:	cf d0       	breq	80007afe <__mdiff+0xb6>
80007b06:	99 49       	st.w	r12[0x10],r9
80007b08:	d8 32       	popm	r0-r7,pc
80007b0a:	30 0b       	mov	r11,0
80007b0c:	c1 6f       	rcall	80007938 <_Balloc>
80007b0e:	30 18       	mov	r8,1
80007b10:	99 48       	st.w	r12[0x10],r8
80007b12:	30 08       	mov	r8,0
80007b14:	99 58       	st.w	r12[0x14],r8
80007b16:	d8 32       	popm	r0-r7,pc

80007b18 <__lshift>:
80007b18:	d4 31       	pushm	r0-r7,lr
80007b1a:	16 97       	mov	r7,r11
80007b1c:	76 46       	ld.w	r6,r11[0x10]
80007b1e:	f4 02 14 05 	asr	r2,r10,0x5
80007b22:	2f f6       	sub	r6,-1
80007b24:	14 93       	mov	r3,r10
80007b26:	18 94       	mov	r4,r12
80007b28:	04 06       	add	r6,r2
80007b2a:	76 1b       	ld.w	r11,r11[0x4]
80007b2c:	6e 28       	ld.w	r8,r7[0x8]
80007b2e:	c0 38       	rjmp	80007b34 <__lshift+0x1c>
80007b30:	2f fb       	sub	r11,-1
80007b32:	a1 78       	lsl	r8,0x1
80007b34:	10 36       	cp.w	r6,r8
80007b36:	fe 99 ff fd 	brgt	80007b30 <__lshift+0x18>
80007b3a:	08 9c       	mov	r12,r4
80007b3c:	cf ee       	rcall	80007938 <_Balloc>
80007b3e:	30 09       	mov	r9,0
80007b40:	18 95       	mov	r5,r12
80007b42:	f8 c8 ff ec 	sub	r8,r12,-20
80007b46:	12 9a       	mov	r10,r9
80007b48:	c0 38       	rjmp	80007b4e <__lshift+0x36>
80007b4a:	10 aa       	st.w	r8++,r10
80007b4c:	2f f9       	sub	r9,-1
80007b4e:	04 39       	cp.w	r9,r2
80007b50:	cf d5       	brlt	80007b4a <__lshift+0x32>
80007b52:	6e 4b       	ld.w	r11,r7[0x10]
80007b54:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007b58:	2f bb       	sub	r11,-5
80007b5a:	ee c9 ff ec 	sub	r9,r7,-20
80007b5e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007b62:	58 03       	cp.w	r3,0
80007b64:	c1 30       	breq	80007b8a <__lshift+0x72>
80007b66:	e6 0c 11 20 	rsub	r12,r3,32
80007b6a:	30 0a       	mov	r10,0
80007b6c:	72 02       	ld.w	r2,r9[0x0]
80007b6e:	e4 03 09 42 	lsl	r2,r2,r3
80007b72:	04 4a       	or	r10,r2
80007b74:	10 aa       	st.w	r8++,r10
80007b76:	13 0a       	ld.w	r10,r9++
80007b78:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007b7c:	16 39       	cp.w	r9,r11
80007b7e:	cf 73       	brcs	80007b6c <__lshift+0x54>
80007b80:	91 0a       	st.w	r8[0x0],r10
80007b82:	58 0a       	cp.w	r10,0
80007b84:	c0 70       	breq	80007b92 <__lshift+0x7a>
80007b86:	2f f6       	sub	r6,-1
80007b88:	c0 58       	rjmp	80007b92 <__lshift+0x7a>
80007b8a:	13 0a       	ld.w	r10,r9++
80007b8c:	10 aa       	st.w	r8++,r10
80007b8e:	16 39       	cp.w	r9,r11
80007b90:	cf d3       	brcs	80007b8a <__lshift+0x72>
80007b92:	08 9c       	mov	r12,r4
80007b94:	20 16       	sub	r6,1
80007b96:	0e 9b       	mov	r11,r7
80007b98:	8b 46       	st.w	r5[0x10],r6
80007b9a:	cb 5e       	rcall	80007904 <_Bfree>
80007b9c:	0a 9c       	mov	r12,r5
80007b9e:	d8 32       	popm	r0-r7,pc

80007ba0 <__multiply>:
80007ba0:	d4 31       	pushm	r0-r7,lr
80007ba2:	20 2d       	sub	sp,8
80007ba4:	76 49       	ld.w	r9,r11[0x10]
80007ba6:	74 48       	ld.w	r8,r10[0x10]
80007ba8:	16 96       	mov	r6,r11
80007baa:	14 95       	mov	r5,r10
80007bac:	10 39       	cp.w	r9,r8
80007bae:	ec 08 17 50 	movlt	r8,r6
80007bb2:	ea 06 17 50 	movlt	r6,r5
80007bb6:	f0 05 17 50 	movlt	r5,r8
80007bba:	6c 28       	ld.w	r8,r6[0x8]
80007bbc:	76 43       	ld.w	r3,r11[0x10]
80007bbe:	74 42       	ld.w	r2,r10[0x10]
80007bc0:	76 1b       	ld.w	r11,r11[0x4]
80007bc2:	e4 03 00 07 	add	r7,r2,r3
80007bc6:	10 37       	cp.w	r7,r8
80007bc8:	f7 bb 09 ff 	subgt	r11,-1
80007bcc:	cb 6e       	rcall	80007938 <_Balloc>
80007bce:	ee c4 ff fb 	sub	r4,r7,-5
80007bd2:	f8 c9 ff ec 	sub	r9,r12,-20
80007bd6:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007bda:	30 0a       	mov	r10,0
80007bdc:	12 98       	mov	r8,r9
80007bde:	c0 28       	rjmp	80007be2 <__multiply+0x42>
80007be0:	10 aa       	st.w	r8++,r10
80007be2:	08 38       	cp.w	r8,r4
80007be4:	cf e3       	brcs	80007be0 <__multiply+0x40>
80007be6:	2f b3       	sub	r3,-5
80007be8:	2f b2       	sub	r2,-5
80007bea:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007bee:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007bf2:	ec cb ff ec 	sub	r11,r6,-20
80007bf6:	50 12       	stdsp	sp[0x4],r2
80007bf8:	ea ca ff ec 	sub	r10,r5,-20
80007bfc:	c4 48       	rjmp	80007c84 <__multiply+0xe4>
80007bfe:	94 95       	ld.uh	r5,r10[0x2]
80007c00:	58 05       	cp.w	r5,0
80007c02:	c2 00       	breq	80007c42 <__multiply+0xa2>
80007c04:	12 98       	mov	r8,r9
80007c06:	16 96       	mov	r6,r11
80007c08:	30 0e       	mov	lr,0
80007c0a:	50 09       	stdsp	sp[0x0],r9
80007c0c:	0d 02       	ld.w	r2,r6++
80007c0e:	e4 00 16 10 	lsr	r0,r2,0x10
80007c12:	70 01       	ld.w	r1,r8[0x0]
80007c14:	70 09       	ld.w	r9,r8[0x0]
80007c16:	b1 81       	lsr	r1,0x10
80007c18:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007c1c:	e0 05 03 41 	mac	r1,r0,r5
80007c20:	ab 32       	mul	r2,r5
80007c22:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007c26:	00 02       	add	r2,r0
80007c28:	e4 0e 00 0e 	add	lr,r2,lr
80007c2c:	b0 1e       	st.h	r8[0x2],lr
80007c2e:	b1 8e       	lsr	lr,0x10
80007c30:	1c 01       	add	r1,lr
80007c32:	b0 01       	st.h	r8[0x0],r1
80007c34:	e2 0e 16 10 	lsr	lr,r1,0x10
80007c38:	2f c8       	sub	r8,-4
80007c3a:	06 36       	cp.w	r6,r3
80007c3c:	ce 83       	brcs	80007c0c <__multiply+0x6c>
80007c3e:	40 09       	lddsp	r9,sp[0x0]
80007c40:	91 0e       	st.w	r8[0x0],lr
80007c42:	94 86       	ld.uh	r6,r10[0x0]
80007c44:	58 06       	cp.w	r6,0
80007c46:	c1 d0       	breq	80007c80 <__multiply+0xe0>
80007c48:	72 02       	ld.w	r2,r9[0x0]
80007c4a:	12 98       	mov	r8,r9
80007c4c:	16 9e       	mov	lr,r11
80007c4e:	30 05       	mov	r5,0
80007c50:	b0 12       	st.h	r8[0x2],r2
80007c52:	1d 01       	ld.w	r1,lr++
80007c54:	90 82       	ld.uh	r2,r8[0x0]
80007c56:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007c5a:	ad 30       	mul	r0,r6
80007c5c:	e0 02 00 02 	add	r2,r0,r2
80007c60:	e4 05 00 05 	add	r5,r2,r5
80007c64:	b0 05       	st.h	r8[0x0],r5
80007c66:	b1 85       	lsr	r5,0x10
80007c68:	b1 81       	lsr	r1,0x10
80007c6a:	2f c8       	sub	r8,-4
80007c6c:	ad 31       	mul	r1,r6
80007c6e:	90 92       	ld.uh	r2,r8[0x2]
80007c70:	e2 02 00 02 	add	r2,r1,r2
80007c74:	0a 02       	add	r2,r5
80007c76:	e4 05 16 10 	lsr	r5,r2,0x10
80007c7a:	06 3e       	cp.w	lr,r3
80007c7c:	ce a3       	brcs	80007c50 <__multiply+0xb0>
80007c7e:	91 02       	st.w	r8[0x0],r2
80007c80:	2f ca       	sub	r10,-4
80007c82:	2f c9       	sub	r9,-4
80007c84:	40 18       	lddsp	r8,sp[0x4]
80007c86:	10 3a       	cp.w	r10,r8
80007c88:	cb b3       	brcs	80007bfe <__multiply+0x5e>
80007c8a:	c0 28       	rjmp	80007c8e <__multiply+0xee>
80007c8c:	20 17       	sub	r7,1
80007c8e:	58 07       	cp.w	r7,0
80007c90:	e0 8a 00 05 	brle	80007c9a <__multiply+0xfa>
80007c94:	09 48       	ld.w	r8,--r4
80007c96:	58 08       	cp.w	r8,0
80007c98:	cf a0       	breq	80007c8c <__multiply+0xec>
80007c9a:	99 47       	st.w	r12[0x10],r7
80007c9c:	2f ed       	sub	sp,-8
80007c9e:	d8 32       	popm	r0-r7,pc

80007ca0 <__i2b>:
80007ca0:	d4 21       	pushm	r4-r7,lr
80007ca2:	16 97       	mov	r7,r11
80007ca4:	30 1b       	mov	r11,1
80007ca6:	c4 9e       	rcall	80007938 <_Balloc>
80007ca8:	30 19       	mov	r9,1
80007caa:	99 57       	st.w	r12[0x14],r7
80007cac:	99 49       	st.w	r12[0x10],r9
80007cae:	d8 22       	popm	r4-r7,pc

80007cb0 <__multadd>:
80007cb0:	d4 31       	pushm	r0-r7,lr
80007cb2:	30 08       	mov	r8,0
80007cb4:	12 95       	mov	r5,r9
80007cb6:	16 97       	mov	r7,r11
80007cb8:	18 96       	mov	r6,r12
80007cba:	76 44       	ld.w	r4,r11[0x10]
80007cbc:	f6 c9 ff ec 	sub	r9,r11,-20
80007cc0:	72 0b       	ld.w	r11,r9[0x0]
80007cc2:	f6 0c 16 10 	lsr	r12,r11,0x10
80007cc6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007cca:	f4 0c 02 4c 	mul	r12,r10,r12
80007cce:	f4 0b 03 45 	mac	r5,r10,r11
80007cd2:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007cd6:	b1 85       	lsr	r5,0x10
80007cd8:	18 05       	add	r5,r12
80007cda:	ea 0c 15 10 	lsl	r12,r5,0x10
80007cde:	f8 0b 00 0b 	add	r11,r12,r11
80007ce2:	12 ab       	st.w	r9++,r11
80007ce4:	2f f8       	sub	r8,-1
80007ce6:	b1 85       	lsr	r5,0x10
80007ce8:	08 38       	cp.w	r8,r4
80007cea:	ce b5       	brlt	80007cc0 <__multadd+0x10>
80007cec:	58 05       	cp.w	r5,0
80007cee:	c1 c0       	breq	80007d26 <__multadd+0x76>
80007cf0:	6e 28       	ld.w	r8,r7[0x8]
80007cf2:	10 34       	cp.w	r4,r8
80007cf4:	c1 35       	brlt	80007d1a <__multadd+0x6a>
80007cf6:	6e 1b       	ld.w	r11,r7[0x4]
80007cf8:	0c 9c       	mov	r12,r6
80007cfa:	2f fb       	sub	r11,-1
80007cfc:	c1 ee       	rcall	80007938 <_Balloc>
80007cfe:	6e 4a       	ld.w	r10,r7[0x10]
80007d00:	ee cb ff f4 	sub	r11,r7,-12
80007d04:	18 93       	mov	r3,r12
80007d06:	2f ea       	sub	r10,-2
80007d08:	2f 4c       	sub	r12,-12
80007d0a:	a3 6a       	lsl	r10,0x2
80007d0c:	fe b0 de 3d 	rcall	80003986 <memcpy>
80007d10:	0e 9b       	mov	r11,r7
80007d12:	0c 9c       	mov	r12,r6
80007d14:	fe b0 fd f8 	rcall	80007904 <_Bfree>
80007d18:	06 97       	mov	r7,r3
80007d1a:	e8 c8 ff ff 	sub	r8,r4,-1
80007d1e:	2f b4       	sub	r4,-5
80007d20:	8f 48       	st.w	r7[0x10],r8
80007d22:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007d26:	0e 9c       	mov	r12,r7
80007d28:	d8 32       	popm	r0-r7,pc
80007d2a:	d7 03       	nop

80007d2c <__pow5mult>:
80007d2c:	d4 31       	pushm	r0-r7,lr
80007d2e:	14 96       	mov	r6,r10
80007d30:	18 97       	mov	r7,r12
80007d32:	16 94       	mov	r4,r11
80007d34:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007d38:	c0 90       	breq	80007d4a <__pow5mult+0x1e>
80007d3a:	20 18       	sub	r8,1
80007d3c:	fe c9 e4 8c 	sub	r9,pc,-7028
80007d40:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007d44:	30 09       	mov	r9,0
80007d46:	cb 5f       	rcall	80007cb0 <__multadd>
80007d48:	18 94       	mov	r4,r12
80007d4a:	a3 46       	asr	r6,0x2
80007d4c:	c3 40       	breq	80007db4 <__pow5mult+0x88>
80007d4e:	6e 95       	ld.w	r5,r7[0x24]
80007d50:	58 05       	cp.w	r5,0
80007d52:	c0 91       	brne	80007d64 <__pow5mult+0x38>
80007d54:	31 0c       	mov	r12,16
80007d56:	fe b0 fa fb 	rcall	8000734c <malloc>
80007d5a:	99 35       	st.w	r12[0xc],r5
80007d5c:	8f 9c       	st.w	r7[0x24],r12
80007d5e:	99 15       	st.w	r12[0x4],r5
80007d60:	99 25       	st.w	r12[0x8],r5
80007d62:	99 05       	st.w	r12[0x0],r5
80007d64:	6e 93       	ld.w	r3,r7[0x24]
80007d66:	66 25       	ld.w	r5,r3[0x8]
80007d68:	58 05       	cp.w	r5,0
80007d6a:	c0 c1       	brne	80007d82 <__pow5mult+0x56>
80007d6c:	e0 6b 02 71 	mov	r11,625
80007d70:	0e 9c       	mov	r12,r7
80007d72:	c9 7f       	rcall	80007ca0 <__i2b>
80007d74:	87 2c       	st.w	r3[0x8],r12
80007d76:	30 08       	mov	r8,0
80007d78:	18 95       	mov	r5,r12
80007d7a:	99 08       	st.w	r12[0x0],r8
80007d7c:	c0 38       	rjmp	80007d82 <__pow5mult+0x56>
80007d7e:	06 9c       	mov	r12,r3
80007d80:	18 95       	mov	r5,r12
80007d82:	ed b6 00 00 	bld	r6,0x0
80007d86:	c0 b1       	brne	80007d9c <__pow5mult+0x70>
80007d88:	08 9b       	mov	r11,r4
80007d8a:	0a 9a       	mov	r10,r5
80007d8c:	0e 9c       	mov	r12,r7
80007d8e:	c0 9f       	rcall	80007ba0 <__multiply>
80007d90:	08 9b       	mov	r11,r4
80007d92:	18 93       	mov	r3,r12
80007d94:	0e 9c       	mov	r12,r7
80007d96:	06 94       	mov	r4,r3
80007d98:	fe b0 fd b6 	rcall	80007904 <_Bfree>
80007d9c:	a1 56       	asr	r6,0x1
80007d9e:	c0 b0       	breq	80007db4 <__pow5mult+0x88>
80007da0:	6a 03       	ld.w	r3,r5[0x0]
80007da2:	58 03       	cp.w	r3,0
80007da4:	ce d1       	brne	80007d7e <__pow5mult+0x52>
80007da6:	0a 9a       	mov	r10,r5
80007da8:	0a 9b       	mov	r11,r5
80007daa:	0e 9c       	mov	r12,r7
80007dac:	cf ae       	rcall	80007ba0 <__multiply>
80007dae:	8b 0c       	st.w	r5[0x0],r12
80007db0:	99 03       	st.w	r12[0x0],r3
80007db2:	ce 7b       	rjmp	80007d80 <__pow5mult+0x54>
80007db4:	08 9c       	mov	r12,r4
80007db6:	d8 32       	popm	r0-r7,pc

80007db8 <_realloc_r>:
80007db8:	d4 31       	pushm	r0-r7,lr
80007dba:	20 1d       	sub	sp,4
80007dbc:	16 94       	mov	r4,r11
80007dbe:	18 92       	mov	r2,r12
80007dc0:	14 9b       	mov	r11,r10
80007dc2:	58 04       	cp.w	r4,0
80007dc4:	c0 51       	brne	80007dce <_realloc_r+0x16>
80007dc6:	fe b0 fa cb 	rcall	8000735c <_malloc_r>
80007dca:	18 95       	mov	r5,r12
80007dcc:	c5 39       	rjmp	80008072 <_realloc_r+0x2ba>
80007dce:	50 0a       	stdsp	sp[0x0],r10
80007dd0:	fe b0 fd 08 	rcall	800077e0 <__malloc_lock>
80007dd4:	40 0b       	lddsp	r11,sp[0x0]
80007dd6:	f6 c8 ff f5 	sub	r8,r11,-11
80007dda:	e8 c1 00 08 	sub	r1,r4,8
80007dde:	10 96       	mov	r6,r8
80007de0:	62 1c       	ld.w	r12,r1[0x4]
80007de2:	e0 16 ff f8 	andl	r6,0xfff8
80007de6:	59 68       	cp.w	r8,22
80007de8:	f9 b6 08 10 	movls	r6,16
80007dec:	16 36       	cp.w	r6,r11
80007dee:	5f 38       	srlo	r8
80007df0:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007df4:	c0 50       	breq	80007dfe <_realloc_r+0x46>
80007df6:	30 c8       	mov	r8,12
80007df8:	30 05       	mov	r5,0
80007dfa:	85 38       	st.w	r2[0xc],r8
80007dfc:	c3 b9       	rjmp	80008072 <_realloc_r+0x2ba>
80007dfe:	18 90       	mov	r0,r12
80007e00:	e0 10 ff fc 	andl	r0,0xfffc
80007e04:	0c 30       	cp.w	r0,r6
80007e06:	e0 84 01 0b 	brge	8000801c <_realloc_r+0x264>
80007e0a:	e0 68 01 1c 	mov	r8,284
80007e0e:	e2 00 00 09 	add	r9,r1,r0
80007e12:	70 25       	ld.w	r5,r8[0x8]
80007e14:	0a 39       	cp.w	r9,r5
80007e16:	c0 90       	breq	80007e28 <_realloc_r+0x70>
80007e18:	72 1a       	ld.w	r10,r9[0x4]
80007e1a:	a1 ca       	cbr	r10,0x0
80007e1c:	f2 0a 00 0a 	add	r10,r9,r10
80007e20:	74 1a       	ld.w	r10,r10[0x4]
80007e22:	ed ba 00 00 	bld	r10,0x0
80007e26:	c2 20       	breq	80007e6a <_realloc_r+0xb2>
80007e28:	72 1a       	ld.w	r10,r9[0x4]
80007e2a:	e0 1a ff fc 	andl	r10,0xfffc
80007e2e:	f4 00 00 03 	add	r3,r10,r0
80007e32:	0a 39       	cp.w	r9,r5
80007e34:	c1 31       	brne	80007e5a <_realloc_r+0xa2>
80007e36:	ec c7 ff f0 	sub	r7,r6,-16
80007e3a:	0e 33       	cp.w	r3,r7
80007e3c:	c1 95       	brlt	80007e6e <_realloc_r+0xb6>
80007e3e:	e2 06 00 09 	add	r9,r1,r6
80007e42:	0c 13       	sub	r3,r6
80007e44:	a1 a3       	sbr	r3,0x0
80007e46:	93 13       	st.w	r9[0x4],r3
80007e48:	91 29       	st.w	r8[0x8],r9
80007e4a:	04 9c       	mov	r12,r2
80007e4c:	62 18       	ld.w	r8,r1[0x4]
80007e4e:	08 95       	mov	r5,r4
80007e50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007e54:	10 46       	or	r6,r8
80007e56:	83 16       	st.w	r1[0x4],r6
80007e58:	c0 b9       	rjmp	8000806e <_realloc_r+0x2b6>
80007e5a:	0c 33       	cp.w	r3,r6
80007e5c:	c0 95       	brlt	80007e6e <_realloc_r+0xb6>
80007e5e:	72 28       	ld.w	r8,r9[0x8]
80007e60:	02 97       	mov	r7,r1
80007e62:	72 39       	ld.w	r9,r9[0xc]
80007e64:	93 28       	st.w	r9[0x8],r8
80007e66:	91 39       	st.w	r8[0xc],r9
80007e68:	cd c8       	rjmp	80008020 <_realloc_r+0x268>
80007e6a:	30 0a       	mov	r10,0
80007e6c:	14 99       	mov	r9,r10
80007e6e:	ed bc 00 00 	bld	r12,0x0
80007e72:	e0 80 00 95 	breq	80007f9c <_realloc_r+0x1e4>
80007e76:	62 07       	ld.w	r7,r1[0x0]
80007e78:	e2 07 01 07 	sub	r7,r1,r7
80007e7c:	6e 1c       	ld.w	r12,r7[0x4]
80007e7e:	e0 1c ff fc 	andl	r12,0xfffc
80007e82:	58 09       	cp.w	r9,0
80007e84:	c5 60       	breq	80007f30 <_realloc_r+0x178>
80007e86:	f8 00 00 03 	add	r3,r12,r0
80007e8a:	0a 39       	cp.w	r9,r5
80007e8c:	c4 81       	brne	80007f1c <_realloc_r+0x164>
80007e8e:	14 03       	add	r3,r10
80007e90:	ec c9 ff f0 	sub	r9,r6,-16
80007e94:	12 33       	cp.w	r3,r9
80007e96:	c4 d5       	brlt	80007f30 <_realloc_r+0x178>
80007e98:	6e 3a       	ld.w	r10,r7[0xc]
80007e9a:	6e 29       	ld.w	r9,r7[0x8]
80007e9c:	95 29       	st.w	r10[0x8],r9
80007e9e:	93 3a       	st.w	r9[0xc],r10
80007ea0:	ee c5 ff f8 	sub	r5,r7,-8
80007ea4:	e0 ca 00 04 	sub	r10,r0,4
80007ea8:	e0 4a 00 24 	cp.w	r10,36
80007eac:	e0 8b 00 25 	brhi	80007ef6 <_realloc_r+0x13e>
80007eb0:	0a 99       	mov	r9,r5
80007eb2:	59 3a       	cp.w	r10,19
80007eb4:	e0 88 00 1a 	brls	80007ee8 <_realloc_r+0x130>
80007eb8:	09 09       	ld.w	r9,r4++
80007eba:	8b 09       	st.w	r5[0x0],r9
80007ebc:	09 09       	ld.w	r9,r4++
80007ebe:	8f 39       	st.w	r7[0xc],r9
80007ec0:	ee c9 ff f0 	sub	r9,r7,-16
80007ec4:	59 ba       	cp.w	r10,27
80007ec6:	e0 88 00 11 	brls	80007ee8 <_realloc_r+0x130>
80007eca:	09 0b       	ld.w	r11,r4++
80007ecc:	93 0b       	st.w	r9[0x0],r11
80007ece:	09 09       	ld.w	r9,r4++
80007ed0:	8f 59       	st.w	r7[0x14],r9
80007ed2:	ee c9 ff e8 	sub	r9,r7,-24
80007ed6:	e0 4a 00 24 	cp.w	r10,36
80007eda:	c0 71       	brne	80007ee8 <_realloc_r+0x130>
80007edc:	09 0a       	ld.w	r10,r4++
80007ede:	93 0a       	st.w	r9[0x0],r10
80007ee0:	ee c9 ff e0 	sub	r9,r7,-32
80007ee4:	09 0a       	ld.w	r10,r4++
80007ee6:	8f 7a       	st.w	r7[0x1c],r10
80007ee8:	09 0a       	ld.w	r10,r4++
80007eea:	12 aa       	st.w	r9++,r10
80007eec:	68 0a       	ld.w	r10,r4[0x0]
80007eee:	93 0a       	st.w	r9[0x0],r10
80007ef0:	68 1a       	ld.w	r10,r4[0x4]
80007ef2:	93 1a       	st.w	r9[0x4],r10
80007ef4:	c0 78       	rjmp	80007f02 <_realloc_r+0x14a>
80007ef6:	50 08       	stdsp	sp[0x0],r8
80007ef8:	08 9b       	mov	r11,r4
80007efa:	0a 9c       	mov	r12,r5
80007efc:	fe b0 fc 53 	rcall	800077a2 <memmove>
80007f00:	40 08       	lddsp	r8,sp[0x0]
80007f02:	ee 06 00 09 	add	r9,r7,r6
80007f06:	0c 13       	sub	r3,r6
80007f08:	a1 a3       	sbr	r3,0x0
80007f0a:	93 13       	st.w	r9[0x4],r3
80007f0c:	91 29       	st.w	r8[0x8],r9
80007f0e:	04 9c       	mov	r12,r2
80007f10:	6e 18       	ld.w	r8,r7[0x4]
80007f12:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007f16:	10 46       	or	r6,r8
80007f18:	8f 16       	st.w	r7[0x4],r6
80007f1a:	ca a8       	rjmp	8000806e <_realloc_r+0x2b6>
80007f1c:	14 03       	add	r3,r10
80007f1e:	0c 33       	cp.w	r3,r6
80007f20:	c0 85       	brlt	80007f30 <_realloc_r+0x178>
80007f22:	72 28       	ld.w	r8,r9[0x8]
80007f24:	72 39       	ld.w	r9,r9[0xc]
80007f26:	93 28       	st.w	r9[0x8],r8
80007f28:	91 39       	st.w	r8[0xc],r9
80007f2a:	6e 28       	ld.w	r8,r7[0x8]
80007f2c:	6e 39       	ld.w	r9,r7[0xc]
80007f2e:	c0 78       	rjmp	80007f3c <_realloc_r+0x184>
80007f30:	f8 00 00 03 	add	r3,r12,r0
80007f34:	0c 33       	cp.w	r3,r6
80007f36:	c3 35       	brlt	80007f9c <_realloc_r+0x1e4>
80007f38:	6e 39       	ld.w	r9,r7[0xc]
80007f3a:	6e 28       	ld.w	r8,r7[0x8]
80007f3c:	93 28       	st.w	r9[0x8],r8
80007f3e:	91 39       	st.w	r8[0xc],r9
80007f40:	e0 ca 00 04 	sub	r10,r0,4
80007f44:	ee cc ff f8 	sub	r12,r7,-8
80007f48:	e0 4a 00 24 	cp.w	r10,36
80007f4c:	e0 8b 00 24 	brhi	80007f94 <_realloc_r+0x1dc>
80007f50:	59 3a       	cp.w	r10,19
80007f52:	e0 88 00 1a 	brls	80007f86 <_realloc_r+0x1ce>
80007f56:	09 08       	ld.w	r8,r4++
80007f58:	99 08       	st.w	r12[0x0],r8
80007f5a:	09 08       	ld.w	r8,r4++
80007f5c:	8f 38       	st.w	r7[0xc],r8
80007f5e:	ee cc ff f0 	sub	r12,r7,-16
80007f62:	59 ba       	cp.w	r10,27
80007f64:	e0 88 00 11 	brls	80007f86 <_realloc_r+0x1ce>
80007f68:	09 08       	ld.w	r8,r4++
80007f6a:	99 08       	st.w	r12[0x0],r8
80007f6c:	09 08       	ld.w	r8,r4++
80007f6e:	8f 58       	st.w	r7[0x14],r8
80007f70:	ee cc ff e8 	sub	r12,r7,-24
80007f74:	e0 4a 00 24 	cp.w	r10,36
80007f78:	c0 71       	brne	80007f86 <_realloc_r+0x1ce>
80007f7a:	09 08       	ld.w	r8,r4++
80007f7c:	99 08       	st.w	r12[0x0],r8
80007f7e:	ee cc ff e0 	sub	r12,r7,-32
80007f82:	09 08       	ld.w	r8,r4++
80007f84:	8f 78       	st.w	r7[0x1c],r8
80007f86:	09 08       	ld.w	r8,r4++
80007f88:	18 a8       	st.w	r12++,r8
80007f8a:	68 08       	ld.w	r8,r4[0x0]
80007f8c:	99 08       	st.w	r12[0x0],r8
80007f8e:	68 18       	ld.w	r8,r4[0x4]
80007f90:	99 18       	st.w	r12[0x4],r8
80007f92:	c4 78       	rjmp	80008020 <_realloc_r+0x268>
80007f94:	08 9b       	mov	r11,r4
80007f96:	fe b0 fc 06 	rcall	800077a2 <memmove>
80007f9a:	c4 38       	rjmp	80008020 <_realloc_r+0x268>
80007f9c:	04 9c       	mov	r12,r2
80007f9e:	fe b0 f9 df 	rcall	8000735c <_malloc_r>
80007fa2:	18 95       	mov	r5,r12
80007fa4:	c3 a0       	breq	80008018 <_realloc_r+0x260>
80007fa6:	62 18       	ld.w	r8,r1[0x4]
80007fa8:	f8 c9 00 08 	sub	r9,r12,8
80007fac:	a1 c8       	cbr	r8,0x0
80007fae:	e2 08 00 08 	add	r8,r1,r8
80007fb2:	10 39       	cp.w	r9,r8
80007fb4:	c0 71       	brne	80007fc2 <_realloc_r+0x20a>
80007fb6:	72 13       	ld.w	r3,r9[0x4]
80007fb8:	02 97       	mov	r7,r1
80007fba:	e0 13 ff fc 	andl	r3,0xfffc
80007fbe:	00 03       	add	r3,r0
80007fc0:	c3 08       	rjmp	80008020 <_realloc_r+0x268>
80007fc2:	e0 ca 00 04 	sub	r10,r0,4
80007fc6:	e0 4a 00 24 	cp.w	r10,36
80007fca:	e0 8b 00 20 	brhi	8000800a <_realloc_r+0x252>
80007fce:	08 99       	mov	r9,r4
80007fd0:	18 98       	mov	r8,r12
80007fd2:	59 3a       	cp.w	r10,19
80007fd4:	e0 88 00 14 	brls	80007ffc <_realloc_r+0x244>
80007fd8:	13 0b       	ld.w	r11,r9++
80007fda:	10 ab       	st.w	r8++,r11
80007fdc:	13 0b       	ld.w	r11,r9++
80007fde:	10 ab       	st.w	r8++,r11
80007fe0:	59 ba       	cp.w	r10,27
80007fe2:	e0 88 00 0d 	brls	80007ffc <_realloc_r+0x244>
80007fe6:	13 0b       	ld.w	r11,r9++
80007fe8:	10 ab       	st.w	r8++,r11
80007fea:	13 0b       	ld.w	r11,r9++
80007fec:	10 ab       	st.w	r8++,r11
80007fee:	e0 4a 00 24 	cp.w	r10,36
80007ff2:	c0 51       	brne	80007ffc <_realloc_r+0x244>
80007ff4:	13 0a       	ld.w	r10,r9++
80007ff6:	10 aa       	st.w	r8++,r10
80007ff8:	13 0a       	ld.w	r10,r9++
80007ffa:	10 aa       	st.w	r8++,r10
80007ffc:	13 0a       	ld.w	r10,r9++
80007ffe:	10 aa       	st.w	r8++,r10
80008000:	72 0a       	ld.w	r10,r9[0x0]
80008002:	91 0a       	st.w	r8[0x0],r10
80008004:	72 19       	ld.w	r9,r9[0x4]
80008006:	91 19       	st.w	r8[0x4],r9
80008008:	c0 48       	rjmp	80008010 <_realloc_r+0x258>
8000800a:	08 9b       	mov	r11,r4
8000800c:	fe b0 fb cb 	rcall	800077a2 <memmove>
80008010:	08 9b       	mov	r11,r4
80008012:	04 9c       	mov	r12,r2
80008014:	fe b0 f6 fe 	rcall	80006e10 <_free_r>
80008018:	04 9c       	mov	r12,r2
8000801a:	c2 a8       	rjmp	8000806e <_realloc_r+0x2b6>
8000801c:	00 93       	mov	r3,r0
8000801e:	02 97       	mov	r7,r1
80008020:	e6 06 01 09 	sub	r9,r3,r6
80008024:	6e 18       	ld.w	r8,r7[0x4]
80008026:	58 f9       	cp.w	r9,15
80008028:	e0 88 00 16 	brls	80008054 <_realloc_r+0x29c>
8000802c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008030:	ed e8 10 08 	or	r8,r6,r8
80008034:	8f 18       	st.w	r7[0x4],r8
80008036:	12 98       	mov	r8,r9
80008038:	a1 a8       	sbr	r8,0x0
8000803a:	ee 06 00 0b 	add	r11,r7,r6
8000803e:	f6 09 00 09 	add	r9,r11,r9
80008042:	97 18       	st.w	r11[0x4],r8
80008044:	72 18       	ld.w	r8,r9[0x4]
80008046:	a1 a8       	sbr	r8,0x0
80008048:	2f 8b       	sub	r11,-8
8000804a:	93 18       	st.w	r9[0x4],r8
8000804c:	04 9c       	mov	r12,r2
8000804e:	fe b0 f6 e1 	rcall	80006e10 <_free_r>
80008052:	c0 b8       	rjmp	80008068 <_realloc_r+0x2b0>
80008054:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008058:	e7 e8 10 08 	or	r8,r3,r8
8000805c:	8f 18       	st.w	r7[0x4],r8
8000805e:	ee 03 00 03 	add	r3,r7,r3
80008062:	66 18       	ld.w	r8,r3[0x4]
80008064:	a1 a8       	sbr	r8,0x0
80008066:	87 18       	st.w	r3[0x4],r8
80008068:	04 9c       	mov	r12,r2
8000806a:	ee c5 ff f8 	sub	r5,r7,-8
8000806e:	fe b0 fb ba 	rcall	800077e2 <__malloc_unlock>
80008072:	0a 9c       	mov	r12,r5
80008074:	2f fd       	sub	sp,-4
80008076:	d8 32       	popm	r0-r7,pc

80008078 <__isinfd>:
80008078:	14 98       	mov	r8,r10
8000807a:	fc 19 7f f0 	movh	r9,0x7ff0
8000807e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008082:	f0 0b 11 00 	rsub	r11,r8,0
80008086:	f7 e8 10 08 	or	r8,r11,r8
8000808a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000808e:	f2 08 01 08 	sub	r8,r9,r8
80008092:	f0 0c 11 00 	rsub	r12,r8,0
80008096:	f9 e8 10 08 	or	r8,r12,r8
8000809a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000809e:	2f fc       	sub	r12,-1
800080a0:	5e fc       	retal	r12

800080a2 <__isnand>:
800080a2:	14 98       	mov	r8,r10
800080a4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800080a8:	f0 0c 11 00 	rsub	r12,r8,0
800080ac:	10 4c       	or	r12,r8
800080ae:	fc 18 7f f0 	movh	r8,0x7ff0
800080b2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800080b6:	f0 0c 01 0c 	sub	r12,r8,r12
800080ba:	bf 9c       	lsr	r12,0x1f
800080bc:	5e fc       	retal	r12
800080be:	d7 03       	nop

800080c0 <_sbrk_r>:
800080c0:	d4 21       	pushm	r4-r7,lr
800080c2:	30 08       	mov	r8,0
800080c4:	18 97       	mov	r7,r12
800080c6:	e0 66 08 10 	mov	r6,2064
800080ca:	16 9c       	mov	r12,r11
800080cc:	8d 08       	st.w	r6[0x0],r8
800080ce:	ca fc       	rcall	8000822c <_sbrk>
800080d0:	5b fc       	cp.w	r12,-1
800080d2:	c0 51       	brne	800080dc <_sbrk_r+0x1c>
800080d4:	6c 08       	ld.w	r8,r6[0x0]
800080d6:	58 08       	cp.w	r8,0
800080d8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800080dc:	d8 22       	popm	r4-r7,pc
800080de:	d7 03       	nop

800080e0 <__sclose>:
800080e0:	d4 01       	pushm	lr
800080e2:	96 7b       	ld.sh	r11,r11[0xe]
800080e4:	cf ec       	rcall	800082e0 <_close_r>
800080e6:	d8 02       	popm	pc

800080e8 <__sseek>:
800080e8:	d4 21       	pushm	r4-r7,lr
800080ea:	16 97       	mov	r7,r11
800080ec:	96 7b       	ld.sh	r11,r11[0xe]
800080ee:	c8 5d       	rcall	800083f8 <_lseek_r>
800080f0:	8e 68       	ld.sh	r8,r7[0xc]
800080f2:	10 99       	mov	r9,r8
800080f4:	ad c8       	cbr	r8,0xc
800080f6:	ad a9       	sbr	r9,0xc
800080f8:	5b fc       	cp.w	r12,-1
800080fa:	ef f8 0c 06 	st.heq	r7[0xc],r8
800080fe:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008102:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008106:	d8 22       	popm	r4-r7,pc

80008108 <__swrite>:
80008108:	d4 21       	pushm	r4-r7,lr
8000810a:	96 68       	ld.sh	r8,r11[0xc]
8000810c:	16 97       	mov	r7,r11
8000810e:	14 95       	mov	r5,r10
80008110:	12 94       	mov	r4,r9
80008112:	e2 18 01 00 	andl	r8,0x100,COH
80008116:	18 96       	mov	r6,r12
80008118:	c0 50       	breq	80008122 <__swrite+0x1a>
8000811a:	30 29       	mov	r9,2
8000811c:	30 0a       	mov	r10,0
8000811e:	96 7b       	ld.sh	r11,r11[0xe]
80008120:	c6 cd       	rcall	800083f8 <_lseek_r>
80008122:	8e 68       	ld.sh	r8,r7[0xc]
80008124:	ad c8       	cbr	r8,0xc
80008126:	08 99       	mov	r9,r4
80008128:	0a 9a       	mov	r10,r5
8000812a:	8e 7b       	ld.sh	r11,r7[0xe]
8000812c:	0c 9c       	mov	r12,r6
8000812e:	ae 68       	st.h	r7[0xc],r8
80008130:	c9 ac       	rcall	80008264 <_write_r>
80008132:	d8 22       	popm	r4-r7,pc

80008134 <__sread>:
80008134:	d4 21       	pushm	r4-r7,lr
80008136:	16 97       	mov	r7,r11
80008138:	96 7b       	ld.sh	r11,r11[0xe]
8000813a:	c7 1d       	rcall	8000841c <_read_r>
8000813c:	c0 65       	brlt	80008148 <__sread+0x14>
8000813e:	6f 58       	ld.w	r8,r7[0x54]
80008140:	18 08       	add	r8,r12
80008142:	ef 48 00 54 	st.w	r7[84],r8
80008146:	d8 22       	popm	r4-r7,pc
80008148:	8e 68       	ld.sh	r8,r7[0xc]
8000814a:	ad c8       	cbr	r8,0xc
8000814c:	ae 68       	st.h	r7[0xc],r8
8000814e:	d8 22       	popm	r4-r7,pc

80008150 <strlen>:
80008150:	30 09       	mov	r9,0
80008152:	18 98       	mov	r8,r12
80008154:	c0 28       	rjmp	80008158 <strlen+0x8>
80008156:	2f f8       	sub	r8,-1
80008158:	11 8a       	ld.ub	r10,r8[0x0]
8000815a:	f2 0a 18 00 	cp.b	r10,r9
8000815e:	cf c1       	brne	80008156 <strlen+0x6>
80008160:	f0 0c 01 0c 	sub	r12,r8,r12
80008164:	5e fc       	retal	r12
80008166:	d7 03       	nop

80008168 <_close>:
80008168:	30 28       	mov	r8,2
8000816a:	d6 73       	breakpoint
8000816c:	3f fc       	mov	r12,-1
8000816e:	35 8b       	mov	r11,88
80008170:	58 0c       	cp.w	r12,0
80008172:	5e 4c       	retge	r12
80008174:	e0 6a 08 10 	mov	r10,2064
80008178:	95 0b       	st.w	r10[0x0],r11
8000817a:	5e fc       	retal	r12

8000817c <_lseek>:
8000817c:	30 58       	mov	r8,5
8000817e:	d6 73       	breakpoint
80008180:	3f fc       	mov	r12,-1
80008182:	35 8b       	mov	r11,88
80008184:	58 0c       	cp.w	r12,0
80008186:	5e 4c       	retge	r12
80008188:	e0 6a 08 10 	mov	r10,2064
8000818c:	95 0b       	st.w	r10[0x0],r11
8000818e:	5e fc       	retal	r12

80008190 <_read>:
80008190:	30 38       	mov	r8,3
80008192:	d6 73       	breakpoint
80008194:	3f fc       	mov	r12,-1
80008196:	35 8b       	mov	r11,88
80008198:	58 0c       	cp.w	r12,0
8000819a:	5e 4c       	retge	r12
8000819c:	e0 6a 08 10 	mov	r10,2064
800081a0:	95 0b       	st.w	r10[0x0],r11
800081a2:	5e fc       	retal	r12

800081a4 <_write>:
800081a4:	30 48       	mov	r8,4
800081a6:	d6 73       	breakpoint
800081a8:	3f fc       	mov	r12,-1
800081aa:	35 8b       	mov	r11,88
800081ac:	58 0c       	cp.w	r12,0
800081ae:	5e 4c       	retge	r12
800081b0:	e0 6a 08 10 	mov	r10,2064
800081b4:	95 0b       	st.w	r10[0x0],r11
800081b6:	5e fc       	retal	r12

800081b8 <isatty>:
800081b8:	30 b8       	mov	r8,11
800081ba:	d6 73       	breakpoint
800081bc:	3f fc       	mov	r12,-1
800081be:	35 8b       	mov	r11,88
800081c0:	58 0c       	cp.w	r12,0
800081c2:	5e 4c       	retge	r12
800081c4:	e0 6a 08 10 	mov	r10,2064
800081c8:	95 0b       	st.w	r10[0x0],r11
800081ca:	5e fc       	retal	r12

800081cc <_fstat_host>:
800081cc:	30 98       	mov	r8,9
800081ce:	d6 73       	breakpoint
800081d0:	3f fc       	mov	r12,-1
800081d2:	35 8b       	mov	r11,88
800081d4:	58 0c       	cp.w	r12,0
800081d6:	5e 4c       	retge	r12
800081d8:	e0 6a 08 10 	mov	r10,2064
800081dc:	95 0b       	st.w	r10[0x0],r11
800081de:	5e fc       	retal	r12

800081e0 <_fstat>:
800081e0:	d4 21       	pushm	r4-r7,lr
800081e2:	21 0d       	sub	sp,64
800081e4:	16 97       	mov	r7,r11
800081e6:	1a 9b       	mov	r11,sp
800081e8:	cf 2f       	rcall	800081cc <_fstat_host>
800081ea:	c0 34       	brge	800081f0 <_fstat+0x10>
800081ec:	3f fc       	mov	r12,-1
800081ee:	c1 c8       	rjmp	80008226 <_fstat+0x46>
800081f0:	40 08       	lddsp	r8,sp[0x0]
800081f2:	ae 08       	st.h	r7[0x0],r8
800081f4:	40 18       	lddsp	r8,sp[0x4]
800081f6:	ae 18       	st.h	r7[0x2],r8
800081f8:	40 28       	lddsp	r8,sp[0x8]
800081fa:	8f 18       	st.w	r7[0x4],r8
800081fc:	40 38       	lddsp	r8,sp[0xc]
800081fe:	ae 48       	st.h	r7[0x8],r8
80008200:	40 48       	lddsp	r8,sp[0x10]
80008202:	ae 58       	st.h	r7[0xa],r8
80008204:	40 58       	lddsp	r8,sp[0x14]
80008206:	ae 68       	st.h	r7[0xc],r8
80008208:	40 68       	lddsp	r8,sp[0x18]
8000820a:	ae 78       	st.h	r7[0xe],r8
8000820c:	40 88       	lddsp	r8,sp[0x20]
8000820e:	8f 48       	st.w	r7[0x10],r8
80008210:	40 a8       	lddsp	r8,sp[0x28]
80008212:	8f b8       	st.w	r7[0x2c],r8
80008214:	40 c8       	lddsp	r8,sp[0x30]
80008216:	8f c8       	st.w	r7[0x30],r8
80008218:	40 d8       	lddsp	r8,sp[0x34]
8000821a:	8f 58       	st.w	r7[0x14],r8
8000821c:	40 e8       	lddsp	r8,sp[0x38]
8000821e:	30 0c       	mov	r12,0
80008220:	8f 78       	st.w	r7[0x1c],r8
80008222:	40 f8       	lddsp	r8,sp[0x3c]
80008224:	8f 98       	st.w	r7[0x24],r8
80008226:	2f 0d       	sub	sp,-64
80008228:	d8 22       	popm	r4-r7,pc
8000822a:	d7 03       	nop

8000822c <_sbrk>:
8000822c:	d4 01       	pushm	lr
8000822e:	e0 68 07 44 	mov	r8,1860
80008232:	70 09       	ld.w	r9,r8[0x0]
80008234:	58 09       	cp.w	r9,0
80008236:	c0 41       	brne	8000823e <_sbrk+0x12>
80008238:	e0 69 08 18 	mov	r9,2072
8000823c:	91 09       	st.w	r8[0x0],r9
8000823e:	e0 69 07 44 	mov	r9,1860
80008242:	e0 6a 30 00 	mov	r10,12288
80008246:	72 08       	ld.w	r8,r9[0x0]
80008248:	f0 0c 00 0c 	add	r12,r8,r12
8000824c:	14 3c       	cp.w	r12,r10
8000824e:	e0 8b 00 04 	brhi	80008256 <_sbrk+0x2a>
80008252:	93 0c       	st.w	r9[0x0],r12
80008254:	c0 58       	rjmp	8000825e <_sbrk+0x32>
80008256:	c5 5c       	rcall	80008300 <__errno>
80008258:	30 c8       	mov	r8,12
8000825a:	99 08       	st.w	r12[0x0],r8
8000825c:	3f f8       	mov	r8,-1
8000825e:	10 9c       	mov	r12,r8
80008260:	d8 02       	popm	pc
80008262:	d7 03       	nop

80008264 <_write_r>:
80008264:	d4 21       	pushm	r4-r7,lr
80008266:	16 98       	mov	r8,r11
80008268:	18 97       	mov	r7,r12
8000826a:	10 9c       	mov	r12,r8
8000826c:	30 08       	mov	r8,0
8000826e:	14 9b       	mov	r11,r10
80008270:	e0 66 08 10 	mov	r6,2064
80008274:	12 9a       	mov	r10,r9
80008276:	8d 08       	st.w	r6[0x0],r8
80008278:	c9 6f       	rcall	800081a4 <_write>
8000827a:	5b fc       	cp.w	r12,-1
8000827c:	c0 51       	brne	80008286 <_write_r+0x22>
8000827e:	6c 08       	ld.w	r8,r6[0x0]
80008280:	58 08       	cp.w	r8,0
80008282:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008286:	d8 22       	popm	r4-r7,pc

80008288 <_calloc_r>:
80008288:	d4 21       	pushm	r4-r7,lr
8000828a:	f4 0b 02 4b 	mul	r11,r10,r11
8000828e:	fe b0 f8 67 	rcall	8000735c <_malloc_r>
80008292:	18 97       	mov	r7,r12
80008294:	c2 30       	breq	800082da <_calloc_r+0x52>
80008296:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000829a:	e0 1a ff fc 	andl	r10,0xfffc
8000829e:	20 4a       	sub	r10,4
800082a0:	e0 4a 00 24 	cp.w	r10,36
800082a4:	e0 8b 00 18 	brhi	800082d4 <_calloc_r+0x4c>
800082a8:	18 98       	mov	r8,r12
800082aa:	59 3a       	cp.w	r10,19
800082ac:	e0 88 00 0f 	brls	800082ca <_calloc_r+0x42>
800082b0:	30 09       	mov	r9,0
800082b2:	10 a9       	st.w	r8++,r9
800082b4:	10 a9       	st.w	r8++,r9
800082b6:	59 ba       	cp.w	r10,27
800082b8:	e0 88 00 09 	brls	800082ca <_calloc_r+0x42>
800082bc:	10 a9       	st.w	r8++,r9
800082be:	10 a9       	st.w	r8++,r9
800082c0:	e0 4a 00 24 	cp.w	r10,36
800082c4:	c0 31       	brne	800082ca <_calloc_r+0x42>
800082c6:	10 a9       	st.w	r8++,r9
800082c8:	10 a9       	st.w	r8++,r9
800082ca:	30 09       	mov	r9,0
800082cc:	10 a9       	st.w	r8++,r9
800082ce:	91 19       	st.w	r8[0x4],r9
800082d0:	91 09       	st.w	r8[0x0],r9
800082d2:	c0 48       	rjmp	800082da <_calloc_r+0x52>
800082d4:	30 0b       	mov	r11,0
800082d6:	fe b0 db fc 	rcall	80003ace <memset>
800082da:	0e 9c       	mov	r12,r7
800082dc:	d8 22       	popm	r4-r7,pc
800082de:	d7 03       	nop

800082e0 <_close_r>:
800082e0:	d4 21       	pushm	r4-r7,lr
800082e2:	30 08       	mov	r8,0
800082e4:	18 97       	mov	r7,r12
800082e6:	e0 66 08 10 	mov	r6,2064
800082ea:	16 9c       	mov	r12,r11
800082ec:	8d 08       	st.w	r6[0x0],r8
800082ee:	c3 df       	rcall	80008168 <_close>
800082f0:	5b fc       	cp.w	r12,-1
800082f2:	c0 51       	brne	800082fc <_close_r+0x1c>
800082f4:	6c 08       	ld.w	r8,r6[0x0]
800082f6:	58 08       	cp.w	r8,0
800082f8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800082fc:	d8 22       	popm	r4-r7,pc
800082fe:	d7 03       	nop

80008300 <__errno>:
80008300:	e0 68 01 18 	mov	r8,280
80008304:	70 0c       	ld.w	r12,r8[0x0]
80008306:	2f 4c       	sub	r12,-12
80008308:	5e fc       	retal	r12
8000830a:	d7 03       	nop

8000830c <_fclose_r>:
8000830c:	d4 21       	pushm	r4-r7,lr
8000830e:	18 96       	mov	r6,r12
80008310:	16 97       	mov	r7,r11
80008312:	58 0b       	cp.w	r11,0
80008314:	c0 31       	brne	8000831a <_fclose_r+0xe>
80008316:	16 95       	mov	r5,r11
80008318:	c5 38       	rjmp	800083be <_fclose_r+0xb2>
8000831a:	fe b0 f4 8f 	rcall	80006c38 <__sfp_lock_acquire>
8000831e:	58 06       	cp.w	r6,0
80008320:	c0 70       	breq	8000832e <_fclose_r+0x22>
80008322:	6c 68       	ld.w	r8,r6[0x18]
80008324:	58 08       	cp.w	r8,0
80008326:	c0 41       	brne	8000832e <_fclose_r+0x22>
80008328:	0c 9c       	mov	r12,r6
8000832a:	fe b0 f4 d9 	rcall	80006cdc <__sinit>
8000832e:	fe c8 eb 26 	sub	r8,pc,-5338
80008332:	10 37       	cp.w	r7,r8
80008334:	c0 31       	brne	8000833a <_fclose_r+0x2e>
80008336:	6c 07       	ld.w	r7,r6[0x0]
80008338:	c0 c8       	rjmp	80008350 <_fclose_r+0x44>
8000833a:	fe c8 eb 12 	sub	r8,pc,-5358
8000833e:	10 37       	cp.w	r7,r8
80008340:	c0 31       	brne	80008346 <_fclose_r+0x3a>
80008342:	6c 17       	ld.w	r7,r6[0x4]
80008344:	c0 68       	rjmp	80008350 <_fclose_r+0x44>
80008346:	fe c8 ea fe 	sub	r8,pc,-5378
8000834a:	10 37       	cp.w	r7,r8
8000834c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008350:	8e 69       	ld.sh	r9,r7[0xc]
80008352:	30 08       	mov	r8,0
80008354:	f0 09 19 00 	cp.h	r9,r8
80008358:	c0 51       	brne	80008362 <_fclose_r+0x56>
8000835a:	fe b0 f4 70 	rcall	80006c3a <__sfp_lock_release>
8000835e:	30 05       	mov	r5,0
80008360:	c2 f8       	rjmp	800083be <_fclose_r+0xb2>
80008362:	0e 9b       	mov	r11,r7
80008364:	0c 9c       	mov	r12,r6
80008366:	fe b0 f3 e3 	rcall	80006b2c <_fflush_r>
8000836a:	6e c8       	ld.w	r8,r7[0x30]
8000836c:	18 95       	mov	r5,r12
8000836e:	58 08       	cp.w	r8,0
80008370:	c0 60       	breq	8000837c <_fclose_r+0x70>
80008372:	6e 8b       	ld.w	r11,r7[0x20]
80008374:	0c 9c       	mov	r12,r6
80008376:	5d 18       	icall	r8
80008378:	f9 b5 05 ff 	movlt	r5,-1
8000837c:	8e 68       	ld.sh	r8,r7[0xc]
8000837e:	ed b8 00 07 	bld	r8,0x7
80008382:	c0 51       	brne	8000838c <_fclose_r+0x80>
80008384:	6e 4b       	ld.w	r11,r7[0x10]
80008386:	0c 9c       	mov	r12,r6
80008388:	fe b0 f5 44 	rcall	80006e10 <_free_r>
8000838c:	6e db       	ld.w	r11,r7[0x34]
8000838e:	58 0b       	cp.w	r11,0
80008390:	c0 a0       	breq	800083a4 <_fclose_r+0x98>
80008392:	ee c8 ff bc 	sub	r8,r7,-68
80008396:	10 3b       	cp.w	r11,r8
80008398:	c0 40       	breq	800083a0 <_fclose_r+0x94>
8000839a:	0c 9c       	mov	r12,r6
8000839c:	fe b0 f5 3a 	rcall	80006e10 <_free_r>
800083a0:	30 08       	mov	r8,0
800083a2:	8f d8       	st.w	r7[0x34],r8
800083a4:	6f 2b       	ld.w	r11,r7[0x48]
800083a6:	58 0b       	cp.w	r11,0
800083a8:	c0 70       	breq	800083b6 <_fclose_r+0xaa>
800083aa:	0c 9c       	mov	r12,r6
800083ac:	fe b0 f5 32 	rcall	80006e10 <_free_r>
800083b0:	30 08       	mov	r8,0
800083b2:	ef 48 00 48 	st.w	r7[72],r8
800083b6:	30 08       	mov	r8,0
800083b8:	ae 68       	st.h	r7[0xc],r8
800083ba:	fe b0 f4 40 	rcall	80006c3a <__sfp_lock_release>
800083be:	0a 9c       	mov	r12,r5
800083c0:	d8 22       	popm	r4-r7,pc
800083c2:	d7 03       	nop

800083c4 <fclose>:
800083c4:	d4 01       	pushm	lr
800083c6:	e0 68 01 18 	mov	r8,280
800083ca:	18 9b       	mov	r11,r12
800083cc:	70 0c       	ld.w	r12,r8[0x0]
800083ce:	c9 ff       	rcall	8000830c <_fclose_r>
800083d0:	d8 02       	popm	pc
800083d2:	d7 03       	nop

800083d4 <_fstat_r>:
800083d4:	d4 21       	pushm	r4-r7,lr
800083d6:	16 98       	mov	r8,r11
800083d8:	18 97       	mov	r7,r12
800083da:	10 9c       	mov	r12,r8
800083dc:	30 08       	mov	r8,0
800083de:	e0 66 08 10 	mov	r6,2064
800083e2:	14 9b       	mov	r11,r10
800083e4:	8d 08       	st.w	r6[0x0],r8
800083e6:	cf de       	rcall	800081e0 <_fstat>
800083e8:	5b fc       	cp.w	r12,-1
800083ea:	c0 51       	brne	800083f4 <_fstat_r+0x20>
800083ec:	6c 08       	ld.w	r8,r6[0x0]
800083ee:	58 08       	cp.w	r8,0
800083f0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800083f4:	d8 22       	popm	r4-r7,pc
800083f6:	d7 03       	nop

800083f8 <_lseek_r>:
800083f8:	d4 21       	pushm	r4-r7,lr
800083fa:	16 98       	mov	r8,r11
800083fc:	18 97       	mov	r7,r12
800083fe:	10 9c       	mov	r12,r8
80008400:	30 08       	mov	r8,0
80008402:	14 9b       	mov	r11,r10
80008404:	e0 66 08 10 	mov	r6,2064
80008408:	12 9a       	mov	r10,r9
8000840a:	8d 08       	st.w	r6[0x0],r8
8000840c:	cb 8e       	rcall	8000817c <_lseek>
8000840e:	5b fc       	cp.w	r12,-1
80008410:	c0 51       	brne	8000841a <_lseek_r+0x22>
80008412:	6c 08       	ld.w	r8,r6[0x0]
80008414:	58 08       	cp.w	r8,0
80008416:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000841a:	d8 22       	popm	r4-r7,pc

8000841c <_read_r>:
8000841c:	d4 21       	pushm	r4-r7,lr
8000841e:	16 98       	mov	r8,r11
80008420:	18 97       	mov	r7,r12
80008422:	10 9c       	mov	r12,r8
80008424:	30 08       	mov	r8,0
80008426:	14 9b       	mov	r11,r10
80008428:	e0 66 08 10 	mov	r6,2064
8000842c:	12 9a       	mov	r10,r9
8000842e:	8d 08       	st.w	r6[0x0],r8
80008430:	cb 0e       	rcall	80008190 <_read>
80008432:	5b fc       	cp.w	r12,-1
80008434:	c0 51       	brne	8000843e <_read_r+0x22>
80008436:	6c 08       	ld.w	r8,r6[0x0]
80008438:	58 08       	cp.w	r8,0
8000843a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000843e:	d8 22       	popm	r4-r7,pc

80008440 <__avr32_f64_sub_from_add>:
80008440:	ee 19 80 00 	eorh	r9,0x8000

80008444 <__avr32_f64_sub>:
80008444:	f7 e9 20 0c 	eor	r12,r11,r9
80008448:	e0 86 00 ca 	brmi	800085dc <__avr32_f64_add_from_sub>
8000844c:	eb cd 40 e0 	pushm	r5-r7,lr
80008450:	16 9c       	mov	r12,r11
80008452:	e6 1c 80 00 	andh	r12,0x8000,COH
80008456:	bf db       	cbr	r11,0x1f
80008458:	bf d9       	cbr	r9,0x1f
8000845a:	10 3a       	cp.w	r10,r8
8000845c:	f2 0b 13 00 	cpc	r11,r9
80008460:	c0 92       	brcc	80008472 <__avr32_f64_sub+0x2e>
80008462:	16 97       	mov	r7,r11
80008464:	12 9b       	mov	r11,r9
80008466:	0e 99       	mov	r9,r7
80008468:	14 97       	mov	r7,r10
8000846a:	10 9a       	mov	r10,r8
8000846c:	0e 98       	mov	r8,r7
8000846e:	ee 1c 80 00 	eorh	r12,0x8000
80008472:	f6 07 16 14 	lsr	r7,r11,0x14
80008476:	ab 7b       	lsl	r11,0xb
80008478:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000847c:	ab 7a       	lsl	r10,0xb
8000847e:	bf bb       	sbr	r11,0x1f
80008480:	f2 06 16 14 	lsr	r6,r9,0x14
80008484:	c4 40       	breq	8000850c <__avr32_f64_sub_opL_subnormal>
80008486:	ab 79       	lsl	r9,0xb
80008488:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000848c:	ab 78       	lsl	r8,0xb
8000848e:	bf b9       	sbr	r9,0x1f

80008490 <__avr32_f64_sub_opL_subnormal_done>:
80008490:	e0 47 07 ff 	cp.w	r7,2047
80008494:	c4 f0       	breq	80008532 <__avr32_f64_sub_opH_nan_or_inf>
80008496:	0e 26       	rsub	r6,r7
80008498:	c1 20       	breq	800084bc <__avr32_f64_sub_shift_done>
8000849a:	ec 05 11 20 	rsub	r5,r6,32
8000849e:	e0 46 00 20 	cp.w	r6,32
800084a2:	c7 c2       	brcc	8000859a <__avr32_f64_sub_longshift>
800084a4:	f0 05 09 4e 	lsl	lr,r8,r5
800084a8:	f2 05 09 45 	lsl	r5,r9,r5
800084ac:	f0 06 0a 48 	lsr	r8,r8,r6
800084b0:	f2 06 0a 49 	lsr	r9,r9,r6
800084b4:	0a 48       	or	r8,r5
800084b6:	58 0e       	cp.w	lr,0
800084b8:	5f 1e       	srne	lr
800084ba:	1c 48       	or	r8,lr

800084bc <__avr32_f64_sub_shift_done>:
800084bc:	10 1a       	sub	r10,r8
800084be:	f6 09 01 4b 	sbc	r11,r11,r9
800084c2:	f6 06 12 00 	clz	r6,r11
800084c6:	c0 e0       	breq	800084e2 <__avr32_f64_sub_longnormalize_done>
800084c8:	c7 83       	brcs	800085b8 <__avr32_f64_sub_longnormalize>
800084ca:	ec 0e 11 20 	rsub	lr,r6,32
800084ce:	f6 06 09 4b 	lsl	r11,r11,r6
800084d2:	f4 0e 0a 4e 	lsr	lr,r10,lr
800084d6:	1c 4b       	or	r11,lr
800084d8:	f4 06 09 4a 	lsl	r10,r10,r6
800084dc:	0c 17       	sub	r7,r6
800084de:	e0 8a 00 39 	brle	80008550 <__avr32_f64_sub_subnormal_result>

800084e2 <__avr32_f64_sub_longnormalize_done>:
800084e2:	f4 09 15 15 	lsl	r9,r10,0x15
800084e6:	ab 9a       	lsr	r10,0xb
800084e8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800084ec:	ab 9b       	lsr	r11,0xb
800084ee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800084f2:	18 4b       	or	r11,r12

800084f4 <__avr32_f64_sub_round>:
800084f4:	fc 17 80 00 	movh	r7,0x8000
800084f8:	ed ba 00 00 	bld	r10,0x0
800084fc:	f7 b7 01 ff 	subne	r7,-1
80008500:	0e 39       	cp.w	r9,r7
80008502:	5f 29       	srhs	r9
80008504:	12 0a       	add	r10,r9
80008506:	5c 0b       	acr	r11
80008508:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000850c <__avr32_f64_sub_opL_subnormal>:
8000850c:	ab 79       	lsl	r9,0xb
8000850e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008512:	ab 78       	lsl	r8,0xb
80008514:	f3 e8 10 0e 	or	lr,r9,r8
80008518:	f9 b6 01 01 	movne	r6,1
8000851c:	ee 0e 11 00 	rsub	lr,r7,0
80008520:	f9 b7 00 01 	moveq	r7,1
80008524:	ef bb 00 1f 	bst	r11,0x1f
80008528:	f7 ea 10 0e 	or	lr,r11,r10
8000852c:	f9 b7 00 00 	moveq	r7,0
80008530:	cb 0b       	rjmp	80008490 <__avr32_f64_sub_opL_subnormal_done>

80008532 <__avr32_f64_sub_opH_nan_or_inf>:
80008532:	bf db       	cbr	r11,0x1f
80008534:	f7 ea 10 0e 	or	lr,r11,r10
80008538:	c0 81       	brne	80008548 <__avr32_f64_sub_return_nan>
8000853a:	e0 46 07 ff 	cp.w	r6,2047
8000853e:	c0 50       	breq	80008548 <__avr32_f64_sub_return_nan>
80008540:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008544:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008548 <__avr32_f64_sub_return_nan>:
80008548:	3f fa       	mov	r10,-1
8000854a:	3f fb       	mov	r11,-1
8000854c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008550 <__avr32_f64_sub_subnormal_result>:
80008550:	5c 37       	neg	r7
80008552:	2f f7       	sub	r7,-1
80008554:	f1 b7 04 c0 	satu	r7,0x6
80008558:	e0 47 00 20 	cp.w	r7,32
8000855c:	c1 14       	brge	8000857e <__avr32_f64_sub_subnormal_result+0x2e>
8000855e:	ee 08 11 20 	rsub	r8,r7,32
80008562:	f4 08 09 49 	lsl	r9,r10,r8
80008566:	5f 16       	srne	r6
80008568:	f4 07 0a 4a 	lsr	r10,r10,r7
8000856c:	0c 4a       	or	r10,r6
8000856e:	f6 08 09 49 	lsl	r9,r11,r8
80008572:	f5 e9 10 0a 	or	r10,r10,r9
80008576:	f4 07 0a 4b 	lsr	r11,r10,r7
8000857a:	30 07       	mov	r7,0
8000857c:	cb 3b       	rjmp	800084e2 <__avr32_f64_sub_longnormalize_done>
8000857e:	ee 08 11 40 	rsub	r8,r7,64
80008582:	f6 08 09 49 	lsl	r9,r11,r8
80008586:	14 49       	or	r9,r10
80008588:	5f 16       	srne	r6
8000858a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000858e:	0c 4a       	or	r10,r6
80008590:	30 0b       	mov	r11,0
80008592:	30 07       	mov	r7,0
80008594:	ca 7b       	rjmp	800084e2 <__avr32_f64_sub_longnormalize_done>
80008596:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000859a <__avr32_f64_sub_longshift>:
8000859a:	f1 b6 04 c0 	satu	r6,0x6
8000859e:	f0 0e 17 00 	moveq	lr,r8
800085a2:	c0 40       	breq	800085aa <__avr32_f64_sub_longshift+0x10>
800085a4:	f2 05 09 4e 	lsl	lr,r9,r5
800085a8:	10 4e       	or	lr,r8
800085aa:	f2 06 0a 48 	lsr	r8,r9,r6
800085ae:	30 09       	mov	r9,0
800085b0:	58 0e       	cp.w	lr,0
800085b2:	5f 1e       	srne	lr
800085b4:	1c 48       	or	r8,lr
800085b6:	c8 3b       	rjmp	800084bc <__avr32_f64_sub_shift_done>

800085b8 <__avr32_f64_sub_longnormalize>:
800085b8:	f4 06 12 00 	clz	r6,r10
800085bc:	f9 b7 03 00 	movlo	r7,0
800085c0:	f9 b6 03 00 	movlo	r6,0
800085c4:	f9 bc 03 00 	movlo	r12,0
800085c8:	f7 b6 02 e0 	subhs	r6,-32
800085cc:	f4 06 09 4b 	lsl	r11,r10,r6
800085d0:	30 0a       	mov	r10,0
800085d2:	0c 17       	sub	r7,r6
800085d4:	fe 9a ff be 	brle	80008550 <__avr32_f64_sub_subnormal_result>
800085d8:	c8 5b       	rjmp	800084e2 <__avr32_f64_sub_longnormalize_done>
800085da:	d7 03       	nop

800085dc <__avr32_f64_add_from_sub>:
800085dc:	ee 19 80 00 	eorh	r9,0x8000

800085e0 <__avr32_f64_add>:
800085e0:	f7 e9 20 0c 	eor	r12,r11,r9
800085e4:	fe 96 ff 2e 	brmi	80008440 <__avr32_f64_sub_from_add>
800085e8:	eb cd 40 e0 	pushm	r5-r7,lr
800085ec:	16 9c       	mov	r12,r11
800085ee:	e6 1c 80 00 	andh	r12,0x8000,COH
800085f2:	bf db       	cbr	r11,0x1f
800085f4:	bf d9       	cbr	r9,0x1f
800085f6:	12 3b       	cp.w	r11,r9
800085f8:	c0 72       	brcc	80008606 <__avr32_f64_add+0x26>
800085fa:	16 97       	mov	r7,r11
800085fc:	12 9b       	mov	r11,r9
800085fe:	0e 99       	mov	r9,r7
80008600:	14 97       	mov	r7,r10
80008602:	10 9a       	mov	r10,r8
80008604:	0e 98       	mov	r8,r7
80008606:	30 0e       	mov	lr,0
80008608:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000860c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008610:	b5 ab       	sbr	r11,0x14
80008612:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008616:	c6 20       	breq	800086da <__avr32_f64_add_op2_subnormal>
80008618:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000861c:	b5 a9       	sbr	r9,0x14
8000861e:	e0 47 07 ff 	cp.w	r7,2047
80008622:	c2 80       	breq	80008672 <__avr32_f64_add_opH_nan_or_inf>
80008624:	0e 26       	rsub	r6,r7
80008626:	c1 20       	breq	8000864a <__avr32_f64_add_shift_done>
80008628:	e0 46 00 36 	cp.w	r6,54
8000862c:	c1 52       	brcc	80008656 <__avr32_f64_add_res_of_done>
8000862e:	ec 05 11 20 	rsub	r5,r6,32
80008632:	e0 46 00 20 	cp.w	r6,32
80008636:	c3 52       	brcc	800086a0 <__avr32_f64_add_longshift>
80008638:	f0 05 09 4e 	lsl	lr,r8,r5
8000863c:	f2 05 09 45 	lsl	r5,r9,r5
80008640:	f0 06 0a 48 	lsr	r8,r8,r6
80008644:	f2 06 0a 49 	lsr	r9,r9,r6
80008648:	0a 48       	or	r8,r5

8000864a <__avr32_f64_add_shift_done>:
8000864a:	10 0a       	add	r10,r8
8000864c:	f6 09 00 4b 	adc	r11,r11,r9
80008650:	ed bb 00 15 	bld	r11,0x15
80008654:	c3 40       	breq	800086bc <__avr32_f64_add_res_of>

80008656 <__avr32_f64_add_res_of_done>:
80008656:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000865a:	18 4b       	or	r11,r12

8000865c <__avr32_f64_add_round>:
8000865c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008660:	18 4e       	or	lr,r12
80008662:	ee 1e 80 00 	eorh	lr,0x8000
80008666:	f1 be 04 20 	satu	lr,0x1
8000866a:	1c 0a       	add	r10,lr
8000866c:	5c 0b       	acr	r11
8000866e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008672 <__avr32_f64_add_opH_nan_or_inf>:
80008672:	b5 cb       	cbr	r11,0x14
80008674:	f7 ea 10 0e 	or	lr,r11,r10
80008678:	c1 01       	brne	80008698 <__avr32_f64_add_return_nan>
8000867a:	e0 46 07 ff 	cp.w	r6,2047
8000867e:	c0 30       	breq	80008684 <__avr32_f64_add_opL_nan_or_inf>
80008680:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008684 <__avr32_f64_add_opL_nan_or_inf>:
80008684:	b5 c9       	cbr	r9,0x14
80008686:	f3 e8 10 0e 	or	lr,r9,r8
8000868a:	c0 71       	brne	80008698 <__avr32_f64_add_return_nan>
8000868c:	30 0a       	mov	r10,0
8000868e:	fc 1b 7f f0 	movh	r11,0x7ff0
80008692:	18 4b       	or	r11,r12
80008694:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008698 <__avr32_f64_add_return_nan>:
80008698:	3f fa       	mov	r10,-1
8000869a:	3f fb       	mov	r11,-1
8000869c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800086a0 <__avr32_f64_add_longshift>:
800086a0:	f1 b6 04 c0 	satu	r6,0x6
800086a4:	f0 0e 17 00 	moveq	lr,r8
800086a8:	c0 60       	breq	800086b4 <__avr32_f64_add_longshift+0x14>
800086aa:	f2 05 09 4e 	lsl	lr,r9,r5
800086ae:	58 08       	cp.w	r8,0
800086b0:	5f 18       	srne	r8
800086b2:	10 4e       	or	lr,r8
800086b4:	f2 06 0a 48 	lsr	r8,r9,r6
800086b8:	30 09       	mov	r9,0
800086ba:	cc 8b       	rjmp	8000864a <__avr32_f64_add_shift_done>

800086bc <__avr32_f64_add_res_of>:
800086bc:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800086c0:	a1 9b       	lsr	r11,0x1
800086c2:	5d 0a       	ror	r10
800086c4:	5d 0e       	ror	lr
800086c6:	2f f7       	sub	r7,-1
800086c8:	e0 47 07 ff 	cp.w	r7,2047
800086cc:	f9 ba 00 00 	moveq	r10,0
800086d0:	f9 bb 00 00 	moveq	r11,0
800086d4:	f9 be 00 00 	moveq	lr,0
800086d8:	cb fb       	rjmp	80008656 <__avr32_f64_add_res_of_done>

800086da <__avr32_f64_add_op2_subnormal>:
800086da:	30 16       	mov	r6,1
800086dc:	58 07       	cp.w	r7,0
800086de:	ca 01       	brne	8000861e <__avr32_f64_add+0x3e>
800086e0:	b5 cb       	cbr	r11,0x14
800086e2:	10 0a       	add	r10,r8
800086e4:	f6 09 00 4b 	adc	r11,r11,r9
800086e8:	18 4b       	or	r11,r12
800086ea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800086ee:	d7 03       	nop

800086f0 <__avr32_f64_to_u32>:
800086f0:	58 0b       	cp.w	r11,0
800086f2:	5e 6d       	retmi	0

800086f4 <__avr32_f64_to_s32>:
800086f4:	f6 0c 15 01 	lsl	r12,r11,0x1
800086f8:	b5 9c       	lsr	r12,0x15
800086fa:	e0 2c 03 ff 	sub	r12,1023
800086fe:	5e 3d       	retlo	0
80008700:	f8 0c 11 1f 	rsub	r12,r12,31
80008704:	16 99       	mov	r9,r11
80008706:	ab 7b       	lsl	r11,0xb
80008708:	bf bb       	sbr	r11,0x1f
8000870a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000870e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008712:	a1 79       	lsl	r9,0x1
80008714:	5e 2b       	reths	r11
80008716:	5c 3b       	neg	r11
80008718:	5e fb       	retal	r11

8000871a <__avr32_f64_cmp_eq>:
8000871a:	10 3a       	cp.w	r10,r8
8000871c:	f2 0b 13 00 	cpc	r11,r9
80008720:	c0 80       	breq	80008730 <__avr32_f64_cmp_eq+0x16>
80008722:	a1 7b       	lsl	r11,0x1
80008724:	a1 79       	lsl	r9,0x1
80008726:	14 4b       	or	r11,r10
80008728:	12 4b       	or	r11,r9
8000872a:	10 4b       	or	r11,r8
8000872c:	5e 0f       	reteq	1
8000872e:	5e fd       	retal	0
80008730:	a1 7b       	lsl	r11,0x1
80008732:	fc 1c ff e0 	movh	r12,0xffe0
80008736:	58 0a       	cp.w	r10,0
80008738:	f8 0b 13 00 	cpc	r11,r12
8000873c:	5e 8f       	retls	1
8000873e:	5e fd       	retal	0

80008740 <__avr32_f64_cmp_ge>:
80008740:	1a de       	st.w	--sp,lr
80008742:	1a d7       	st.w	--sp,r7
80008744:	a1 7b       	lsl	r11,0x1
80008746:	5f 3c       	srlo	r12
80008748:	a1 79       	lsl	r9,0x1
8000874a:	5f 37       	srlo	r7
8000874c:	5c fc       	rol	r12
8000874e:	fc 1e ff e0 	movh	lr,0xffe0
80008752:	58 0a       	cp.w	r10,0
80008754:	fc 0b 13 00 	cpc	r11,lr
80008758:	e0 8b 00 1d 	brhi	80008792 <__avr32_f64_cmp_ge+0x52>
8000875c:	58 08       	cp.w	r8,0
8000875e:	fc 09 13 00 	cpc	r9,lr
80008762:	e0 8b 00 18 	brhi	80008792 <__avr32_f64_cmp_ge+0x52>
80008766:	58 0b       	cp.w	r11,0
80008768:	f5 ba 00 00 	subfeq	r10,0
8000876c:	c1 50       	breq	80008796 <__avr32_f64_cmp_ge+0x56>
8000876e:	1b 07       	ld.w	r7,sp++
80008770:	1b 0e       	ld.w	lr,sp++
80008772:	58 3c       	cp.w	r12,3
80008774:	c0 a0       	breq	80008788 <__avr32_f64_cmp_ge+0x48>
80008776:	58 1c       	cp.w	r12,1
80008778:	c0 33       	brcs	8000877e <__avr32_f64_cmp_ge+0x3e>
8000877a:	5e 0f       	reteq	1
8000877c:	5e 1d       	retne	0
8000877e:	10 3a       	cp.w	r10,r8
80008780:	f2 0b 13 00 	cpc	r11,r9
80008784:	5e 2f       	reths	1
80008786:	5e 3d       	retlo	0
80008788:	14 38       	cp.w	r8,r10
8000878a:	f6 09 13 00 	cpc	r9,r11
8000878e:	5e 2f       	reths	1
80008790:	5e 3d       	retlo	0
80008792:	1b 07       	ld.w	r7,sp++
80008794:	d8 0a       	popm	pc,r12=0
80008796:	58 17       	cp.w	r7,1
80008798:	5f 0c       	sreq	r12
8000879a:	58 09       	cp.w	r9,0
8000879c:	f5 b8 00 00 	subfeq	r8,0
800087a0:	1b 07       	ld.w	r7,sp++
800087a2:	1b 0e       	ld.w	lr,sp++
800087a4:	5e 0f       	reteq	1
800087a6:	5e fc       	retal	r12

800087a8 <__avr32_f64_cmp_lt>:
800087a8:	1a de       	st.w	--sp,lr
800087aa:	1a d7       	st.w	--sp,r7
800087ac:	a1 7b       	lsl	r11,0x1
800087ae:	5f 3c       	srlo	r12
800087b0:	a1 79       	lsl	r9,0x1
800087b2:	5f 37       	srlo	r7
800087b4:	5c fc       	rol	r12
800087b6:	fc 1e ff e0 	movh	lr,0xffe0
800087ba:	58 0a       	cp.w	r10,0
800087bc:	fc 0b 13 00 	cpc	r11,lr
800087c0:	e0 8b 00 1d 	brhi	800087fa <__avr32_f64_cmp_lt+0x52>
800087c4:	58 08       	cp.w	r8,0
800087c6:	fc 09 13 00 	cpc	r9,lr
800087ca:	e0 8b 00 18 	brhi	800087fa <__avr32_f64_cmp_lt+0x52>
800087ce:	58 0b       	cp.w	r11,0
800087d0:	f5 ba 00 00 	subfeq	r10,0
800087d4:	c1 50       	breq	800087fe <__avr32_f64_cmp_lt+0x56>
800087d6:	1b 07       	ld.w	r7,sp++
800087d8:	1b 0e       	ld.w	lr,sp++
800087da:	58 3c       	cp.w	r12,3
800087dc:	c0 a0       	breq	800087f0 <__avr32_f64_cmp_lt+0x48>
800087de:	58 1c       	cp.w	r12,1
800087e0:	c0 33       	brcs	800087e6 <__avr32_f64_cmp_lt+0x3e>
800087e2:	5e 0d       	reteq	0
800087e4:	5e 1f       	retne	1
800087e6:	10 3a       	cp.w	r10,r8
800087e8:	f2 0b 13 00 	cpc	r11,r9
800087ec:	5e 2d       	reths	0
800087ee:	5e 3f       	retlo	1
800087f0:	14 38       	cp.w	r8,r10
800087f2:	f6 09 13 00 	cpc	r9,r11
800087f6:	5e 2d       	reths	0
800087f8:	5e 3f       	retlo	1
800087fa:	1b 07       	ld.w	r7,sp++
800087fc:	d8 0a       	popm	pc,r12=0
800087fe:	58 17       	cp.w	r7,1
80008800:	5f 1c       	srne	r12
80008802:	58 09       	cp.w	r9,0
80008804:	f5 b8 00 00 	subfeq	r8,0
80008808:	1b 07       	ld.w	r7,sp++
8000880a:	1b 0e       	ld.w	lr,sp++
8000880c:	5e 0d       	reteq	0
8000880e:	5e fc       	retal	r12

80008810 <__avr32_f64_div>:
80008810:	eb cd 40 ff 	pushm	r0-r7,lr
80008814:	f7 e9 20 0e 	eor	lr,r11,r9
80008818:	f6 07 16 14 	lsr	r7,r11,0x14
8000881c:	a9 7b       	lsl	r11,0x9
8000881e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008822:	a9 7a       	lsl	r10,0x9
80008824:	bd bb       	sbr	r11,0x1d
80008826:	e4 1b 3f ff 	andh	r11,0x3fff
8000882a:	ab d7       	cbr	r7,0xb
8000882c:	e0 80 00 cc 	breq	800089c4 <__avr32_f64_div_round_subnormal+0x54>
80008830:	e0 47 07 ff 	cp.w	r7,2047
80008834:	e0 84 00 b5 	brge	8000899e <__avr32_f64_div_round_subnormal+0x2e>
80008838:	f2 06 16 14 	lsr	r6,r9,0x14
8000883c:	a9 79       	lsl	r9,0x9
8000883e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008842:	a9 78       	lsl	r8,0x9
80008844:	bd b9       	sbr	r9,0x1d
80008846:	e4 19 3f ff 	andh	r9,0x3fff
8000884a:	ab d6       	cbr	r6,0xb
8000884c:	e0 80 00 e2 	breq	80008a10 <__avr32_f64_div_round_subnormal+0xa0>
80008850:	e0 46 07 ff 	cp.w	r6,2047
80008854:	e0 84 00 b2 	brge	800089b8 <__avr32_f64_div_round_subnormal+0x48>
80008858:	0c 17       	sub	r7,r6
8000885a:	fe 37 fc 01 	sub	r7,-1023
8000885e:	fc 1c 80 00 	movh	r12,0x8000
80008862:	f8 03 16 01 	lsr	r3,r12,0x1
80008866:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000886a:	5c d4       	com	r4
8000886c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008870:	e6 09 06 44 	mulu.d	r4,r3,r9
80008874:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008878:	e6 05 06 44 	mulu.d	r4,r3,r5
8000887c:	ea 03 15 02 	lsl	r3,r5,0x2
80008880:	e6 09 06 44 	mulu.d	r4,r3,r9
80008884:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008888:	e6 05 06 44 	mulu.d	r4,r3,r5
8000888c:	ea 03 15 02 	lsl	r3,r5,0x2
80008890:	e6 09 06 44 	mulu.d	r4,r3,r9
80008894:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008898:	e6 05 06 44 	mulu.d	r4,r3,r5
8000889c:	ea 03 15 02 	lsl	r3,r5,0x2
800088a0:	e6 08 06 40 	mulu.d	r0,r3,r8
800088a4:	e4 09 07 40 	macu.d	r0,r2,r9
800088a8:	e6 09 06 44 	mulu.d	r4,r3,r9
800088ac:	02 04       	add	r4,r1
800088ae:	5c 05       	acr	r5
800088b0:	a3 65       	lsl	r5,0x2
800088b2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800088b6:	a3 64       	lsl	r4,0x2
800088b8:	5c 34       	neg	r4
800088ba:	f8 05 01 45 	sbc	r5,r12,r5
800088be:	e6 04 06 40 	mulu.d	r0,r3,r4
800088c2:	e4 05 07 40 	macu.d	r0,r2,r5
800088c6:	e6 05 06 44 	mulu.d	r4,r3,r5
800088ca:	02 04       	add	r4,r1
800088cc:	5c 05       	acr	r5
800088ce:	ea 03 15 02 	lsl	r3,r5,0x2
800088d2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800088d6:	e8 02 15 02 	lsl	r2,r4,0x2
800088da:	e6 08 06 40 	mulu.d	r0,r3,r8
800088de:	e4 09 07 40 	macu.d	r0,r2,r9
800088e2:	e6 09 06 44 	mulu.d	r4,r3,r9
800088e6:	02 04       	add	r4,r1
800088e8:	5c 05       	acr	r5
800088ea:	a3 65       	lsl	r5,0x2
800088ec:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800088f0:	a3 64       	lsl	r4,0x2
800088f2:	5c 34       	neg	r4
800088f4:	f8 05 01 45 	sbc	r5,r12,r5
800088f8:	e6 04 06 40 	mulu.d	r0,r3,r4
800088fc:	e4 05 07 40 	macu.d	r0,r2,r5
80008900:	e6 05 06 44 	mulu.d	r4,r3,r5
80008904:	02 04       	add	r4,r1
80008906:	5c 05       	acr	r5
80008908:	ea 03 15 02 	lsl	r3,r5,0x2
8000890c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008910:	e8 02 15 02 	lsl	r2,r4,0x2
80008914:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008918:	e4 0b 07 40 	macu.d	r0,r2,r11
8000891c:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008920:	02 02       	add	r2,r1
80008922:	5c 03       	acr	r3
80008924:	ed b3 00 1c 	bld	r3,0x1c
80008928:	c0 90       	breq	8000893a <__avr32_f64_div+0x12a>
8000892a:	a1 72       	lsl	r2,0x1
8000892c:	5c f3       	rol	r3
8000892e:	20 17       	sub	r7,1
80008930:	a3 9a       	lsr	r10,0x3
80008932:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008936:	a3 9b       	lsr	r11,0x3
80008938:	c0 58       	rjmp	80008942 <__avr32_f64_div+0x132>
8000893a:	a5 8a       	lsr	r10,0x4
8000893c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008940:	a5 8b       	lsr	r11,0x4
80008942:	58 07       	cp.w	r7,0
80008944:	e0 8a 00 8b 	brle	80008a5a <__avr32_f64_div_res_subnormal>
80008948:	e0 12 ff 00 	andl	r2,0xff00
8000894c:	e8 12 00 80 	orl	r2,0x80
80008950:	e6 08 06 40 	mulu.d	r0,r3,r8
80008954:	e4 09 07 40 	macu.d	r0,r2,r9
80008958:	e4 08 06 44 	mulu.d	r4,r2,r8
8000895c:	e6 09 06 48 	mulu.d	r8,r3,r9
80008960:	00 05       	add	r5,r0
80008962:	f0 01 00 48 	adc	r8,r8,r1
80008966:	5c 09       	acr	r9
80008968:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000896c:	58 04       	cp.w	r4,0
8000896e:	5c 25       	cpc	r5

80008970 <__avr32_f64_div_round_subnormal>:
80008970:	f4 08 13 00 	cpc	r8,r10
80008974:	f6 09 13 00 	cpc	r9,r11
80008978:	5f 36       	srlo	r6
8000897a:	f8 06 17 00 	moveq	r6,r12
8000897e:	e4 0a 16 08 	lsr	r10,r2,0x8
80008982:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008986:	e6 0b 16 08 	lsr	r11,r3,0x8
8000898a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000898e:	ed be 00 1f 	bld	lr,0x1f
80008992:	ef bb 00 1f 	bst	r11,0x1f
80008996:	0c 0a       	add	r10,r6
80008998:	5c 0b       	acr	r11
8000899a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000899e:	e4 1b 00 0f 	andh	r11,0xf
800089a2:	14 4b       	or	r11,r10
800089a4:	e0 81 00 a7 	brne	80008af2 <__avr32_f64_div_res_subnormal+0x98>
800089a8:	f2 06 16 14 	lsr	r6,r9,0x14
800089ac:	ab d6       	cbr	r6,0xb
800089ae:	e0 46 07 ff 	cp.w	r6,2047
800089b2:	e0 81 00 a4 	brne	80008afa <__avr32_f64_div_res_subnormal+0xa0>
800089b6:	c9 e8       	rjmp	80008af2 <__avr32_f64_div_res_subnormal+0x98>
800089b8:	e4 19 00 0f 	andh	r9,0xf
800089bc:	10 49       	or	r9,r8
800089be:	e0 81 00 9a 	brne	80008af2 <__avr32_f64_div_res_subnormal+0x98>
800089c2:	c9 28       	rjmp	80008ae6 <__avr32_f64_div_res_subnormal+0x8c>
800089c4:	a3 7b       	lsl	r11,0x3
800089c6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800089ca:	a3 7a       	lsl	r10,0x3
800089cc:	f5 eb 10 04 	or	r4,r10,r11
800089d0:	e0 80 00 a0 	breq	80008b10 <__avr32_f64_div_op1_zero>
800089d4:	f6 04 12 00 	clz	r4,r11
800089d8:	c1 70       	breq	80008a06 <__avr32_f64_div_round_subnormal+0x96>
800089da:	c0 c3       	brcs	800089f2 <__avr32_f64_div_round_subnormal+0x82>
800089dc:	e8 05 11 20 	rsub	r5,r4,32
800089e0:	f6 04 09 4b 	lsl	r11,r11,r4
800089e4:	f4 05 0a 45 	lsr	r5,r10,r5
800089e8:	0a 4b       	or	r11,r5
800089ea:	f4 04 09 4a 	lsl	r10,r10,r4
800089ee:	08 17       	sub	r7,r4
800089f0:	c0 b8       	rjmp	80008a06 <__avr32_f64_div_round_subnormal+0x96>
800089f2:	f4 04 12 00 	clz	r4,r10
800089f6:	f9 b4 03 00 	movlo	r4,0
800089fa:	f7 b4 02 e0 	subhs	r4,-32
800089fe:	f4 04 09 4b 	lsl	r11,r10,r4
80008a02:	30 0a       	mov	r10,0
80008a04:	08 17       	sub	r7,r4
80008a06:	a3 8a       	lsr	r10,0x2
80008a08:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008a0c:	a3 8b       	lsr	r11,0x2
80008a0e:	c1 1b       	rjmp	80008830 <__avr32_f64_div+0x20>
80008a10:	a3 79       	lsl	r9,0x3
80008a12:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008a16:	a3 78       	lsl	r8,0x3
80008a18:	f3 e8 10 04 	or	r4,r9,r8
80008a1c:	c6 f0       	breq	80008afa <__avr32_f64_div_res_subnormal+0xa0>
80008a1e:	f2 04 12 00 	clz	r4,r9
80008a22:	c1 70       	breq	80008a50 <__avr32_f64_div_round_subnormal+0xe0>
80008a24:	c0 c3       	brcs	80008a3c <__avr32_f64_div_round_subnormal+0xcc>
80008a26:	e8 05 11 20 	rsub	r5,r4,32
80008a2a:	f2 04 09 49 	lsl	r9,r9,r4
80008a2e:	f0 05 0a 45 	lsr	r5,r8,r5
80008a32:	0a 49       	or	r9,r5
80008a34:	f0 04 09 48 	lsl	r8,r8,r4
80008a38:	08 16       	sub	r6,r4
80008a3a:	c0 b8       	rjmp	80008a50 <__avr32_f64_div_round_subnormal+0xe0>
80008a3c:	f0 04 12 00 	clz	r4,r8
80008a40:	f9 b4 03 00 	movlo	r4,0
80008a44:	f7 b4 02 e0 	subhs	r4,-32
80008a48:	f0 04 09 49 	lsl	r9,r8,r4
80008a4c:	30 08       	mov	r8,0
80008a4e:	08 16       	sub	r6,r4
80008a50:	a3 88       	lsr	r8,0x2
80008a52:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008a56:	a3 89       	lsr	r9,0x2
80008a58:	cf ca       	rjmp	80008850 <__avr32_f64_div+0x40>

80008a5a <__avr32_f64_div_res_subnormal>:
80008a5a:	5c 37       	neg	r7
80008a5c:	2f f7       	sub	r7,-1
80008a5e:	f1 b7 04 c0 	satu	r7,0x6
80008a62:	e0 47 00 20 	cp.w	r7,32
80008a66:	c1 54       	brge	80008a90 <__avr32_f64_div_res_subnormal+0x36>
80008a68:	ee 06 11 20 	rsub	r6,r7,32
80008a6c:	e4 07 0a 42 	lsr	r2,r2,r7
80008a70:	e6 06 09 4c 	lsl	r12,r3,r6
80008a74:	18 42       	or	r2,r12
80008a76:	e6 07 0a 43 	lsr	r3,r3,r7
80008a7a:	f4 06 09 41 	lsl	r1,r10,r6
80008a7e:	f4 07 0a 4a 	lsr	r10,r10,r7
80008a82:	f6 06 09 4c 	lsl	r12,r11,r6
80008a86:	18 4a       	or	r10,r12
80008a88:	f6 07 0a 4b 	lsr	r11,r11,r7
80008a8c:	30 00       	mov	r0,0
80008a8e:	c1 58       	rjmp	80008ab8 <__avr32_f64_div_res_subnormal+0x5e>
80008a90:	ee 06 11 20 	rsub	r6,r7,32
80008a94:	f9 b0 00 00 	moveq	r0,0
80008a98:	f9 bc 00 00 	moveq	r12,0
80008a9c:	c0 50       	breq	80008aa6 <__avr32_f64_div_res_subnormal+0x4c>
80008a9e:	f4 06 09 40 	lsl	r0,r10,r6
80008aa2:	f6 06 09 4c 	lsl	r12,r11,r6
80008aa6:	e6 07 0a 42 	lsr	r2,r3,r7
80008aaa:	30 03       	mov	r3,0
80008aac:	f4 07 0a 41 	lsr	r1,r10,r7
80008ab0:	18 41       	or	r1,r12
80008ab2:	f6 07 0a 4a 	lsr	r10,r11,r7
80008ab6:	30 0b       	mov	r11,0
80008ab8:	e0 12 ff 00 	andl	r2,0xff00
80008abc:	e8 12 00 80 	orl	r2,0x80
80008ac0:	e6 08 06 46 	mulu.d	r6,r3,r8
80008ac4:	e4 09 07 46 	macu.d	r6,r2,r9
80008ac8:	e4 08 06 44 	mulu.d	r4,r2,r8
80008acc:	e6 09 06 48 	mulu.d	r8,r3,r9
80008ad0:	0c 05       	add	r5,r6
80008ad2:	f0 07 00 48 	adc	r8,r8,r7
80008ad6:	5c 09       	acr	r9
80008ad8:	30 07       	mov	r7,0
80008ada:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008ade:	00 34       	cp.w	r4,r0
80008ae0:	e2 05 13 00 	cpc	r5,r1
80008ae4:	c4 6b       	rjmp	80008970 <__avr32_f64_div_round_subnormal>
80008ae6:	1c 9b       	mov	r11,lr
80008ae8:	e6 1b 80 00 	andh	r11,0x8000,COH
80008aec:	30 0a       	mov	r10,0
80008aee:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008af2:	3f fb       	mov	r11,-1
80008af4:	30 0a       	mov	r10,0
80008af6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008afa:	f5 eb 10 04 	or	r4,r10,r11
80008afe:	c0 90       	breq	80008b10 <__avr32_f64_div_op1_zero>
80008b00:	1c 9b       	mov	r11,lr
80008b02:	e6 1b 80 00 	andh	r11,0x8000,COH
80008b06:	ea 1b 7f f0 	orh	r11,0x7ff0
80008b0a:	30 0a       	mov	r10,0
80008b0c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008b10 <__avr32_f64_div_op1_zero>:
80008b10:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008b14:	ce f0       	breq	80008af2 <__avr32_f64_div_res_subnormal+0x98>
80008b16:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008b1a:	e0 44 07 ff 	cp.w	r4,2047
80008b1e:	ce 41       	brne	80008ae6 <__avr32_f64_div_res_subnormal+0x8c>
80008b20:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008b24:	ce 10       	breq	80008ae6 <__avr32_f64_div_res_subnormal+0x8c>
80008b26:	ce 6b       	rjmp	80008af2 <__avr32_f64_div_res_subnormal+0x98>

80008b28 <__avr32_udiv64>:
80008b28:	d4 31       	pushm	r0-r7,lr
80008b2a:	1a 97       	mov	r7,sp
80008b2c:	20 3d       	sub	sp,12
80008b2e:	10 9c       	mov	r12,r8
80008b30:	12 9e       	mov	lr,r9
80008b32:	14 93       	mov	r3,r10
80008b34:	58 09       	cp.w	r9,0
80008b36:	e0 81 00 bd 	brne	80008cb0 <__avr32_udiv64+0x188>
80008b3a:	16 38       	cp.w	r8,r11
80008b3c:	e0 88 00 40 	brls	80008bbc <__avr32_udiv64+0x94>
80008b40:	f0 08 12 00 	clz	r8,r8
80008b44:	c0 d0       	breq	80008b5e <__avr32_udiv64+0x36>
80008b46:	f6 08 09 4b 	lsl	r11,r11,r8
80008b4a:	f0 09 11 20 	rsub	r9,r8,32
80008b4e:	f8 08 09 4c 	lsl	r12,r12,r8
80008b52:	f4 09 0a 49 	lsr	r9,r10,r9
80008b56:	f4 08 09 43 	lsl	r3,r10,r8
80008b5a:	f3 eb 10 0b 	or	r11,r9,r11
80008b5e:	f8 0e 16 10 	lsr	lr,r12,0x10
80008b62:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008b66:	f6 0e 0d 00 	divu	r0,r11,lr
80008b6a:	e6 0b 16 10 	lsr	r11,r3,0x10
80008b6e:	00 99       	mov	r9,r0
80008b70:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008b74:	e0 0a 02 48 	mul	r8,r0,r10
80008b78:	10 3b       	cp.w	r11,r8
80008b7a:	c0 a2       	brcc	80008b8e <__avr32_udiv64+0x66>
80008b7c:	20 19       	sub	r9,1
80008b7e:	18 0b       	add	r11,r12
80008b80:	18 3b       	cp.w	r11,r12
80008b82:	c0 63       	brcs	80008b8e <__avr32_udiv64+0x66>
80008b84:	10 3b       	cp.w	r11,r8
80008b86:	f7 b9 03 01 	sublo	r9,1
80008b8a:	f7 dc e3 0b 	addcs	r11,r11,r12
80008b8e:	f6 08 01 01 	sub	r1,r11,r8
80008b92:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008b96:	e2 0e 0d 00 	divu	r0,r1,lr
80008b9a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008b9e:	00 98       	mov	r8,r0
80008ba0:	e0 0a 02 4a 	mul	r10,r0,r10
80008ba4:	14 33       	cp.w	r3,r10
80008ba6:	c0 82       	brcc	80008bb6 <__avr32_udiv64+0x8e>
80008ba8:	20 18       	sub	r8,1
80008baa:	18 03       	add	r3,r12
80008bac:	18 33       	cp.w	r3,r12
80008bae:	c0 43       	brcs	80008bb6 <__avr32_udiv64+0x8e>
80008bb0:	14 33       	cp.w	r3,r10
80008bb2:	f7 b8 03 01 	sublo	r8,1
80008bb6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008bba:	cd f8       	rjmp	80008d78 <__avr32_udiv64+0x250>
80008bbc:	58 08       	cp.w	r8,0
80008bbe:	c0 51       	brne	80008bc8 <__avr32_udiv64+0xa0>
80008bc0:	30 19       	mov	r9,1
80008bc2:	f2 08 0d 08 	divu	r8,r9,r8
80008bc6:	10 9c       	mov	r12,r8
80008bc8:	f8 06 12 00 	clz	r6,r12
80008bcc:	c0 41       	brne	80008bd4 <__avr32_udiv64+0xac>
80008bce:	18 1b       	sub	r11,r12
80008bd0:	30 19       	mov	r9,1
80008bd2:	c4 08       	rjmp	80008c52 <__avr32_udiv64+0x12a>
80008bd4:	ec 01 11 20 	rsub	r1,r6,32
80008bd8:	f4 01 0a 49 	lsr	r9,r10,r1
80008bdc:	f8 06 09 4c 	lsl	r12,r12,r6
80008be0:	f6 06 09 48 	lsl	r8,r11,r6
80008be4:	f6 01 0a 41 	lsr	r1,r11,r1
80008be8:	f3 e8 10 08 	or	r8,r9,r8
80008bec:	f8 03 16 10 	lsr	r3,r12,0x10
80008bf0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008bf4:	e2 03 0d 00 	divu	r0,r1,r3
80008bf8:	f0 0b 16 10 	lsr	r11,r8,0x10
80008bfc:	00 9e       	mov	lr,r0
80008bfe:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c02:	e0 05 02 49 	mul	r9,r0,r5
80008c06:	12 3b       	cp.w	r11,r9
80008c08:	c0 a2       	brcc	80008c1c <__avr32_udiv64+0xf4>
80008c0a:	20 1e       	sub	lr,1
80008c0c:	18 0b       	add	r11,r12
80008c0e:	18 3b       	cp.w	r11,r12
80008c10:	c0 63       	brcs	80008c1c <__avr32_udiv64+0xf4>
80008c12:	12 3b       	cp.w	r11,r9
80008c14:	f7 be 03 01 	sublo	lr,1
80008c18:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c1c:	12 1b       	sub	r11,r9
80008c1e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008c22:	f6 03 0d 02 	divu	r2,r11,r3
80008c26:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008c2a:	04 99       	mov	r9,r2
80008c2c:	e4 05 02 4b 	mul	r11,r2,r5
80008c30:	16 38       	cp.w	r8,r11
80008c32:	c0 a2       	brcc	80008c46 <__avr32_udiv64+0x11e>
80008c34:	20 19       	sub	r9,1
80008c36:	18 08       	add	r8,r12
80008c38:	18 38       	cp.w	r8,r12
80008c3a:	c0 63       	brcs	80008c46 <__avr32_udiv64+0x11e>
80008c3c:	16 38       	cp.w	r8,r11
80008c3e:	f7 b9 03 01 	sublo	r9,1
80008c42:	f1 dc e3 08 	addcs	r8,r8,r12
80008c46:	f4 06 09 43 	lsl	r3,r10,r6
80008c4a:	f0 0b 01 0b 	sub	r11,r8,r11
80008c4e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008c52:	f8 06 16 10 	lsr	r6,r12,0x10
80008c56:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008c5a:	f6 06 0d 00 	divu	r0,r11,r6
80008c5e:	e6 0b 16 10 	lsr	r11,r3,0x10
80008c62:	00 9a       	mov	r10,r0
80008c64:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c68:	e0 0e 02 48 	mul	r8,r0,lr
80008c6c:	10 3b       	cp.w	r11,r8
80008c6e:	c0 a2       	brcc	80008c82 <__avr32_udiv64+0x15a>
80008c70:	20 1a       	sub	r10,1
80008c72:	18 0b       	add	r11,r12
80008c74:	18 3b       	cp.w	r11,r12
80008c76:	c0 63       	brcs	80008c82 <__avr32_udiv64+0x15a>
80008c78:	10 3b       	cp.w	r11,r8
80008c7a:	f7 ba 03 01 	sublo	r10,1
80008c7e:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c82:	f6 08 01 01 	sub	r1,r11,r8
80008c86:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008c8a:	e2 06 0d 00 	divu	r0,r1,r6
80008c8e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008c92:	00 98       	mov	r8,r0
80008c94:	e0 0e 02 4b 	mul	r11,r0,lr
80008c98:	16 33       	cp.w	r3,r11
80008c9a:	c0 82       	brcc	80008caa <__avr32_udiv64+0x182>
80008c9c:	20 18       	sub	r8,1
80008c9e:	18 03       	add	r3,r12
80008ca0:	18 33       	cp.w	r3,r12
80008ca2:	c0 43       	brcs	80008caa <__avr32_udiv64+0x182>
80008ca4:	16 33       	cp.w	r3,r11
80008ca6:	f7 b8 03 01 	sublo	r8,1
80008caa:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008cae:	c6 98       	rjmp	80008d80 <__avr32_udiv64+0x258>
80008cb0:	16 39       	cp.w	r9,r11
80008cb2:	e0 8b 00 65 	brhi	80008d7c <__avr32_udiv64+0x254>
80008cb6:	f2 09 12 00 	clz	r9,r9
80008cba:	c0 b1       	brne	80008cd0 <__avr32_udiv64+0x1a8>
80008cbc:	10 3a       	cp.w	r10,r8
80008cbe:	5f 2a       	srhs	r10
80008cc0:	1c 3b       	cp.w	r11,lr
80008cc2:	5f b8       	srhi	r8
80008cc4:	10 4a       	or	r10,r8
80008cc6:	f2 0a 18 00 	cp.b	r10,r9
80008cca:	c5 90       	breq	80008d7c <__avr32_udiv64+0x254>
80008ccc:	30 18       	mov	r8,1
80008cce:	c5 98       	rjmp	80008d80 <__avr32_udiv64+0x258>
80008cd0:	f0 09 09 46 	lsl	r6,r8,r9
80008cd4:	f2 03 11 20 	rsub	r3,r9,32
80008cd8:	fc 09 09 4e 	lsl	lr,lr,r9
80008cdc:	f0 03 0a 48 	lsr	r8,r8,r3
80008ce0:	f6 09 09 4c 	lsl	r12,r11,r9
80008ce4:	f4 03 0a 42 	lsr	r2,r10,r3
80008ce8:	ef 46 ff f4 	st.w	r7[-12],r6
80008cec:	f6 03 0a 43 	lsr	r3,r11,r3
80008cf0:	18 42       	or	r2,r12
80008cf2:	f1 ee 10 0c 	or	r12,r8,lr
80008cf6:	f8 01 16 10 	lsr	r1,r12,0x10
80008cfa:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008cfe:	e6 01 0d 04 	divu	r4,r3,r1
80008d02:	e4 03 16 10 	lsr	r3,r2,0x10
80008d06:	08 9e       	mov	lr,r4
80008d08:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008d0c:	e8 06 02 48 	mul	r8,r4,r6
80008d10:	10 33       	cp.w	r3,r8
80008d12:	c0 a2       	brcc	80008d26 <__avr32_udiv64+0x1fe>
80008d14:	20 1e       	sub	lr,1
80008d16:	18 03       	add	r3,r12
80008d18:	18 33       	cp.w	r3,r12
80008d1a:	c0 63       	brcs	80008d26 <__avr32_udiv64+0x1fe>
80008d1c:	10 33       	cp.w	r3,r8
80008d1e:	f7 be 03 01 	sublo	lr,1
80008d22:	e7 dc e3 03 	addcs	r3,r3,r12
80008d26:	10 13       	sub	r3,r8
80008d28:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008d2c:	e6 01 0d 00 	divu	r0,r3,r1
80008d30:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008d34:	00 98       	mov	r8,r0
80008d36:	e0 06 02 46 	mul	r6,r0,r6
80008d3a:	0c 3b       	cp.w	r11,r6
80008d3c:	c0 a2       	brcc	80008d50 <__avr32_udiv64+0x228>
80008d3e:	20 18       	sub	r8,1
80008d40:	18 0b       	add	r11,r12
80008d42:	18 3b       	cp.w	r11,r12
80008d44:	c0 63       	brcs	80008d50 <__avr32_udiv64+0x228>
80008d46:	0c 3b       	cp.w	r11,r6
80008d48:	f7 dc e3 0b 	addcs	r11,r11,r12
80008d4c:	f7 b8 03 01 	sublo	r8,1
80008d50:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008d54:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008d58:	0c 1b       	sub	r11,r6
80008d5a:	f0 04 06 42 	mulu.d	r2,r8,r4
80008d5e:	06 95       	mov	r5,r3
80008d60:	16 35       	cp.w	r5,r11
80008d62:	e0 8b 00 0a 	brhi	80008d76 <__avr32_udiv64+0x24e>
80008d66:	5f 0b       	sreq	r11
80008d68:	f4 09 09 49 	lsl	r9,r10,r9
80008d6c:	12 32       	cp.w	r2,r9
80008d6e:	5f b9       	srhi	r9
80008d70:	f7 e9 00 09 	and	r9,r11,r9
80008d74:	c0 60       	breq	80008d80 <__avr32_udiv64+0x258>
80008d76:	20 18       	sub	r8,1
80008d78:	30 09       	mov	r9,0
80008d7a:	c0 38       	rjmp	80008d80 <__avr32_udiv64+0x258>
80008d7c:	30 09       	mov	r9,0
80008d7e:	12 98       	mov	r8,r9
80008d80:	10 9a       	mov	r10,r8
80008d82:	12 93       	mov	r3,r9
80008d84:	10 92       	mov	r2,r8
80008d86:	12 9b       	mov	r11,r9
80008d88:	2f dd       	sub	sp,-12
80008d8a:	d8 32       	popm	r0-r7,pc

80008d8c <__avr32_umod64>:
80008d8c:	d4 31       	pushm	r0-r7,lr
80008d8e:	1a 97       	mov	r7,sp
80008d90:	20 3d       	sub	sp,12
80008d92:	10 9c       	mov	r12,r8
80008d94:	12 95       	mov	r5,r9
80008d96:	14 9e       	mov	lr,r10
80008d98:	16 91       	mov	r1,r11
80008d9a:	16 96       	mov	r6,r11
80008d9c:	58 09       	cp.w	r9,0
80008d9e:	e0 81 00 81 	brne	80008ea0 <__avr32_umod64+0x114>
80008da2:	16 38       	cp.w	r8,r11
80008da4:	e0 88 00 12 	brls	80008dc8 <__avr32_umod64+0x3c>
80008da8:	f0 08 12 00 	clz	r8,r8
80008dac:	c4 e0       	breq	80008e48 <__avr32_umod64+0xbc>
80008dae:	f6 08 09 46 	lsl	r6,r11,r8
80008db2:	f8 08 09 4c 	lsl	r12,r12,r8
80008db6:	f0 0b 11 20 	rsub	r11,r8,32
80008dba:	f4 08 09 4e 	lsl	lr,r10,r8
80008dbe:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008dc2:	f7 e6 10 06 	or	r6,r11,r6
80008dc6:	c4 18       	rjmp	80008e48 <__avr32_umod64+0xbc>
80008dc8:	58 08       	cp.w	r8,0
80008dca:	c0 51       	brne	80008dd4 <__avr32_umod64+0x48>
80008dcc:	30 19       	mov	r9,1
80008dce:	f2 08 0d 08 	divu	r8,r9,r8
80008dd2:	10 9c       	mov	r12,r8
80008dd4:	f8 08 12 00 	clz	r8,r12
80008dd8:	c0 31       	brne	80008dde <__avr32_umod64+0x52>
80008dda:	18 16       	sub	r6,r12
80008ddc:	c3 68       	rjmp	80008e48 <__avr32_umod64+0xbc>
80008dde:	f0 03 11 20 	rsub	r3,r8,32
80008de2:	f4 03 0a 4b 	lsr	r11,r10,r3
80008de6:	f8 08 09 4c 	lsl	r12,r12,r8
80008dea:	ec 08 09 49 	lsl	r9,r6,r8
80008dee:	ec 03 0a 43 	lsr	r3,r6,r3
80008df2:	f7 e9 10 09 	or	r9,r11,r9
80008df6:	f8 05 16 10 	lsr	r5,r12,0x10
80008dfa:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008dfe:	e6 05 0d 02 	divu	r2,r3,r5
80008e02:	f2 0e 16 10 	lsr	lr,r9,0x10
80008e06:	ec 02 02 4b 	mul	r11,r6,r2
80008e0a:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008e0e:	16 3e       	cp.w	lr,r11
80008e10:	c0 72       	brcc	80008e1e <__avr32_umod64+0x92>
80008e12:	18 0e       	add	lr,r12
80008e14:	18 3e       	cp.w	lr,r12
80008e16:	c0 43       	brcs	80008e1e <__avr32_umod64+0x92>
80008e18:	16 3e       	cp.w	lr,r11
80008e1a:	fd dc e3 0e 	addcs	lr,lr,r12
80008e1e:	fc 0b 01 03 	sub	r3,lr,r11
80008e22:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008e26:	e6 05 0d 02 	divu	r2,r3,r5
80008e2a:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e2e:	a5 36       	mul	r6,r2
80008e30:	0c 39       	cp.w	r9,r6
80008e32:	c0 72       	brcc	80008e40 <__avr32_umod64+0xb4>
80008e34:	18 09       	add	r9,r12
80008e36:	18 39       	cp.w	r9,r12
80008e38:	c0 43       	brcs	80008e40 <__avr32_umod64+0xb4>
80008e3a:	0c 39       	cp.w	r9,r6
80008e3c:	f3 dc e3 09 	addcs	r9,r9,r12
80008e40:	f2 06 01 06 	sub	r6,r9,r6
80008e44:	f4 08 09 4e 	lsl	lr,r10,r8
80008e48:	f8 0a 16 10 	lsr	r10,r12,0x10
80008e4c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008e50:	ec 0a 0d 02 	divu	r2,r6,r10
80008e54:	fc 09 16 10 	lsr	r9,lr,0x10
80008e58:	ea 02 02 4b 	mul	r11,r5,r2
80008e5c:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e60:	16 39       	cp.w	r9,r11
80008e62:	c0 72       	brcc	80008e70 <__avr32_umod64+0xe4>
80008e64:	18 09       	add	r9,r12
80008e66:	18 39       	cp.w	r9,r12
80008e68:	c0 43       	brcs	80008e70 <__avr32_umod64+0xe4>
80008e6a:	16 39       	cp.w	r9,r11
80008e6c:	f3 dc e3 09 	addcs	r9,r9,r12
80008e70:	f2 0b 01 0b 	sub	r11,r9,r11
80008e74:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008e78:	f6 0a 0d 0a 	divu	r10,r11,r10
80008e7c:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008e80:	ea 0a 02 4a 	mul	r10,r5,r10
80008e84:	14 3e       	cp.w	lr,r10
80008e86:	c0 72       	brcc	80008e94 <__avr32_umod64+0x108>
80008e88:	18 0e       	add	lr,r12
80008e8a:	18 3e       	cp.w	lr,r12
80008e8c:	c0 43       	brcs	80008e94 <__avr32_umod64+0x108>
80008e8e:	14 3e       	cp.w	lr,r10
80008e90:	fd dc e3 0e 	addcs	lr,lr,r12
80008e94:	fc 0a 01 0a 	sub	r10,lr,r10
80008e98:	30 0b       	mov	r11,0
80008e9a:	f4 08 0a 4a 	lsr	r10,r10,r8
80008e9e:	c7 b8       	rjmp	80008f94 <__avr32_umod64+0x208>
80008ea0:	16 39       	cp.w	r9,r11
80008ea2:	e0 8b 00 79 	brhi	80008f94 <__avr32_umod64+0x208>
80008ea6:	f2 09 12 00 	clz	r9,r9
80008eaa:	c1 21       	brne	80008ece <__avr32_umod64+0x142>
80008eac:	10 3a       	cp.w	r10,r8
80008eae:	5f 2b       	srhs	r11
80008eb0:	0a 31       	cp.w	r1,r5
80008eb2:	5f ba       	srhi	r10
80008eb4:	f7 ea 10 0a 	or	r10,r11,r10
80008eb8:	f2 0a 18 00 	cp.b	r10,r9
80008ebc:	c0 60       	breq	80008ec8 <__avr32_umod64+0x13c>
80008ebe:	fc 08 01 0c 	sub	r12,lr,r8
80008ec2:	e2 05 01 46 	sbc	r6,r1,r5
80008ec6:	18 9e       	mov	lr,r12
80008ec8:	0c 9b       	mov	r11,r6
80008eca:	1c 9a       	mov	r10,lr
80008ecc:	c6 48       	rjmp	80008f94 <__avr32_umod64+0x208>
80008ece:	ea 09 09 4c 	lsl	r12,r5,r9
80008ed2:	f2 06 11 20 	rsub	r6,r9,32
80008ed6:	f6 09 09 4b 	lsl	r11,r11,r9
80008eda:	f0 09 09 42 	lsl	r2,r8,r9
80008ede:	ef 46 ff f4 	st.w	r7[-12],r6
80008ee2:	f0 06 0a 48 	lsr	r8,r8,r6
80008ee6:	18 48       	or	r8,r12
80008ee8:	e2 06 0a 4c 	lsr	r12,r1,r6
80008eec:	f4 09 09 43 	lsl	r3,r10,r9
80008ef0:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008ef4:	f4 06 0a 4a 	lsr	r10,r10,r6
80008ef8:	16 4a       	or	r10,r11
80008efa:	f0 0b 16 10 	lsr	r11,r8,0x10
80008efe:	f8 0b 0d 04 	divu	r4,r12,r11
80008f02:	f4 0c 16 10 	lsr	r12,r10,0x10
80008f06:	08 91       	mov	r1,r4
80008f08:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008f0c:	e8 0e 02 46 	mul	r6,r4,lr
80008f10:	0c 3c       	cp.w	r12,r6
80008f12:	c0 a2       	brcc	80008f26 <__avr32_umod64+0x19a>
80008f14:	20 11       	sub	r1,1
80008f16:	10 0c       	add	r12,r8
80008f18:	10 3c       	cp.w	r12,r8
80008f1a:	c0 63       	brcs	80008f26 <__avr32_umod64+0x19a>
80008f1c:	0c 3c       	cp.w	r12,r6
80008f1e:	f7 b1 03 01 	sublo	r1,1
80008f22:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008f26:	0c 1c       	sub	r12,r6
80008f28:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008f2c:	f8 0b 0d 04 	divu	r4,r12,r11
80008f30:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008f34:	08 96       	mov	r6,r4
80008f36:	e8 0e 02 4e 	mul	lr,r4,lr
80008f3a:	1c 3b       	cp.w	r11,lr
80008f3c:	c0 a2       	brcc	80008f50 <__avr32_umod64+0x1c4>
80008f3e:	20 16       	sub	r6,1
80008f40:	10 0b       	add	r11,r8
80008f42:	10 3b       	cp.w	r11,r8
80008f44:	c0 63       	brcs	80008f50 <__avr32_umod64+0x1c4>
80008f46:	1c 3b       	cp.w	r11,lr
80008f48:	f7 b6 03 01 	sublo	r6,1
80008f4c:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008f50:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008f54:	1c 1b       	sub	r11,lr
80008f56:	e2 02 06 40 	mulu.d	r0,r1,r2
80008f5a:	00 9e       	mov	lr,r0
80008f5c:	02 9c       	mov	r12,r1
80008f5e:	16 3c       	cp.w	r12,r11
80008f60:	e0 8b 00 08 	brhi	80008f70 <__avr32_umod64+0x1e4>
80008f64:	5f 06       	sreq	r6
80008f66:	06 30       	cp.w	r0,r3
80008f68:	5f ba       	srhi	r10
80008f6a:	ed ea 00 0a 	and	r10,r6,r10
80008f6e:	c0 60       	breq	80008f7a <__avr32_umod64+0x1ee>
80008f70:	fc 02 01 04 	sub	r4,lr,r2
80008f74:	f8 08 01 4c 	sbc	r12,r12,r8
80008f78:	08 9e       	mov	lr,r4
80008f7a:	e6 0e 01 0a 	sub	r10,r3,lr
80008f7e:	f6 0c 01 4c 	sbc	r12,r11,r12
80008f82:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008f86:	f8 09 0a 4b 	lsr	r11,r12,r9
80008f8a:	f4 09 0a 4a 	lsr	r10,r10,r9
80008f8e:	f8 01 09 4c 	lsl	r12,r12,r1
80008f92:	18 4a       	or	r10,r12
80008f94:	2f dd       	sub	sp,-12
80008f96:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 cb 41 	rcall	80002788 <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 cb 3a 	rcall	80002788 <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 cb 33 	rcall	80002788 <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 cb 2c 	rcall	80002788 <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
