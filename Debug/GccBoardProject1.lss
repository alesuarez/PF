
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000072d8  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009400  80009400  00009800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000838  80009600  80009600  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000052c  00000008  80009e38  0000a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000534  8000a364  0000a934  2**0
                  ALLOC
  8 .bss          00000220  00000538  00000538  00000000  2**2
                  ALLOC
  9 .heap         000028a8  00000758  00000758  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a934  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d78  00000000  00000000  0000a968  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001a1b  00000000  00000000  0000b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00027bc0  00000000  00000000  0000d0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005807  00000000  00000000  00034cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ea84  00000000  00000000  0003a4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001fdc  00000000  00000000  00048f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005396  00000000  00000000  0004af24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a4cb  00000000  00000000  000502ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00797133  00000000  00000000  0005a785  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000e38  00000000  00000000  007f18b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 24 	sub	pc,pc,-3548

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	05 38       	ld.ub	r8,r2++
800020c0:	00 00       	add	r0,r0
800020c2:	05 4c       	ld.w	r12,--r2
800020c4:	00 00       	add	r0,r0
800020c6:	05 44       	ld.w	r4,--r2
800020c8:	00 00       	add	r0,r0
800020ca:	05 50       	ld.sh	r0,--r2
800020cc:	00 00       	add	r0,r0
800020ce:	05 3c       	ld.ub	r12,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 40       	ld.w	r0,--r2
800020d4:	00 00       	add	r0,r0
800020d6:	05 58       	ld.sh	r8,--r2
800020d8:	00 00       	add	r0,r0
800020da:	05 48       	ld.w	r8,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 54       	ld.sh	r4,--r2

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	05 38       	ld.ub	r8,r2++

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	05 38       	ld.ub	r8,r2++
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	05 48       	ld.w	r8,--r2
80002200:	00 00       	add	r0,r0
80002202:	05 58       	ld.sh	r8,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 50       	ld.sh	r0,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 44       	ld.w	r4,--r2
8000220c:	00 00       	add	r0,r0
8000220e:	05 4c       	ld.w	r12,--r2
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	18 96       	mov	r6,r12
80002236:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002238:	30 28       	mov	r8,2
8000223a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000223c:	4b 78       	lddpc	r8,80002318 <twim_read_packet+0xe8>
8000223e:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002240:	f0 1f 00 37 	mcall	8000231c <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002244:	6e 29       	ld.w	r9,r7[0x8]
80002246:	4b 78       	lddpc	r8,80002320 <twim_read_packet+0xf0>
80002248:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224a:	6e 39       	ld.w	r9,r7[0xc]
8000224c:	4b 68       	lddpc	r8,80002324 <twim_read_packet+0xf4>
8000224e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002250:	30 08       	mov	r8,0
80002252:	4b 6a       	lddpc	r10,80002328 <twim_read_packet+0xf8>
80002254:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002256:	30 0b       	mov	r11,0
80002258:	4b 5a       	lddpc	r10,8000232c <twim_read_packet+0xfc>
8000225a:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
8000225c:	0f fa       	ld.ub	r10,r7[0x7]
8000225e:	f0 0a 18 00 	cp.b	r10,r8
80002262:	c2 50       	breq	800022ac <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002264:	4a d8       	lddpc	r8,80002318 <twim_read_packet+0xe8>
80002266:	70 08       	ld.w	r8,r8[0x0]
80002268:	30 19       	mov	r9,1
8000226a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226c:	e0 69 00 80 	mov	r9,128
80002270:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002272:	30 29       	mov	r9,2
80002274:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002276:	ee ca ff fc 	sub	r10,r7,-4
8000227a:	4a e9       	lddpc	r9,80002330 <twim_read_packet+0x100>
8000227c:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000227e:	0f f9       	ld.ub	r9,r7[0x7]
80002280:	4a da       	lddpc	r10,80002334 <twim_read_packet+0x104>
80002282:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002284:	e0 6b 07 03 	mov	r11,1795
80002288:	4a ca       	lddpc	r10,80002338 <twim_read_packet+0x108>
8000228a:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000228c:	6e 0a       	ld.w	r10,r7[0x0]
8000228e:	a1 7a       	lsl	r10,0x1
80002290:	e8 1a a0 00 	orl	r10,0xa000
80002294:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002298:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229a:	6e 0a       	ld.w	r10,r7[0x0]
8000229c:	6e 39       	ld.w	r9,r7[0xc]
8000229e:	b1 69       	lsl	r9,0x10
800022a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a4:	e8 19 e0 01 	orl	r9,0xe001
800022a8:	91 49       	st.w	r8[0x10],r9
800022aa:	c1 18       	rjmp	800022cc <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022ac:	30 0a       	mov	r10,0
800022ae:	4a 28       	lddpc	r8,80002334 <twim_read_packet+0x104>
800022b0:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b2:	e0 6a 07 01 	mov	r10,1793
800022b6:	4a 18       	lddpc	r8,80002338 <twim_read_packet+0x108>
800022b8:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022ba:	49 88       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022bc:	70 08       	ld.w	r8,r8[0x0]
800022be:	6e 0a       	ld.w	r10,r7[0x0]
800022c0:	b1 69       	lsl	r9,0x10
800022c2:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022c6:	e8 19 e0 01 	orl	r9,0xe001
800022ca:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022cc:	49 38       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	49 a9       	lddpc	r9,80002338 <twim_read_packet+0x108>
800022d2:	72 09       	ld.w	r9,r9[0x0]
800022d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022d6:	30 18       	mov	r8,1
800022d8:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022da:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022dc:	49 48       	lddpc	r8,8000232c <twim_read_packet+0xfc>
800022de:	70 08       	ld.w	r8,r8[0x0]
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 80       	breq	800022f2 <twim_read_packet+0xc2>
800022e4:	c0 b8       	rjmp	800022fa <twim_read_packet+0xca>
		cpu_relax();
800022e6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ea:	6e 08       	ld.w	r8,r7[0x0]
800022ec:	58 08       	cp.w	r8,0
800022ee:	c0 30       	breq	800022f4 <twim_read_packet+0xc4>
800022f0:	c0 58       	rjmp	800022fa <twim_read_packet+0xca>
800022f2:	48 f7       	lddpc	r7,8000232c <twim_read_packet+0xfc>
800022f4:	f0 1f 00 12 	mcall	8000233c <twim_read_packet+0x10c>
800022f8:	cf 70       	breq	800022e6 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fa:	30 28       	mov	r8,2
800022fc:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022fe:	48 c8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002300:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002302:	5b c8       	cp.w	r8,-4
80002304:	c0 70       	breq	80002312 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002306:	48 a8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002308:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230a:	5b e8       	cp.w	r8,-2
8000230c:	c0 30       	breq	80002312 <twim_read_packet+0xe2>
8000230e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002312:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002316:	00 00       	add	r0,r0
80002318:	00 00       	add	r0,r0
8000231a:	05 38       	ld.ub	r8,r2++
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 54       	sub	r4,21
80002320:	00 00       	add	r0,r0
80002322:	05 3c       	ld.ub	r12,r2++
80002324:	00 00       	add	r0,r0
80002326:	05 40       	ld.w	r0,--r2
80002328:	00 00       	add	r0,r0
8000232a:	05 50       	ld.sh	r0,--r2
8000232c:	00 00       	add	r0,r0
8000232e:	05 44       	ld.w	r4,--r2
80002330:	00 00       	add	r0,r0
80002332:	05 48       	ld.w	r8,--r2
80002334:	00 00       	add	r0,r0
80002336:	05 58       	ld.sh	r8,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 4c       	ld.w	r12,--r2
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 44       	sub	r4,20

80002340 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002340:	eb cd 40 e0 	pushm	r5-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002348:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000234c:	30 0a       	mov	r10,0
8000234e:	4a 69       	lddpc	r9,800023e4 <twim_master_init+0xa4>
80002350:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002352:	e6 18 00 01 	andh	r8,0x1,COH
80002356:	c0 b1       	brne	8000236c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002358:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235a:	3f f8       	mov	r8,-1
8000235c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000235e:	30 18       	mov	r8,1
80002360:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002362:	e0 68 00 80 	mov	r8,128
80002366:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002368:	d5 03       	csrf	0x10
8000236a:	c0 88       	rjmp	8000237a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000236c:	3f f8       	mov	r8,-1
8000236e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002370:	30 18       	mov	r8,1
80002372:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002374:	e0 68 00 80 	mov	r8,128
80002378:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237a:	3f f8       	mov	r8,-1
8000237c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000237e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002382:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002384:	30 1a       	mov	r10,1
80002386:	e0 6b 02 80 	mov	r11,640
8000238a:	49 8c       	lddpc	r12,800023e8 <twim_master_init+0xa8>
8000238c:	f0 1f 00 18 	mcall	800023ec <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002390:	e6 16 00 01 	andh	r6,0x1,COH
80002394:	c0 21       	brne	80002398 <twim_master_init+0x58>
      cpu_irq_enable();
80002396:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002398:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000239c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000239e:	f0 09 18 00 	cp.b	r9,r8
800023a2:	f9 b8 01 10 	movne	r8,16
800023a6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023aa:	f9 b8 01 ff 	movne	r8,-1
800023ae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b2:	6a 0a       	ld.w	r10,r5[0x0]
800023b4:	6a 1b       	ld.w	r11,r5[0x4]
800023b6:	0e 9c       	mov	r12,r7
800023b8:	f0 1f 00 0e 	mcall	800023f0 <twim_master_init+0xb0>
800023bc:	5b 8c       	cp.w	r12,-8
800023be:	c1 00       	breq	800023de <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c0:	6a 2b       	ld.w	r11,r5[0x8]
800023c2:	0e 9c       	mov	r12,r7
800023c4:	f0 1f 00 0c 	mcall	800023f4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023c8:	48 78       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023cc:	5b c8       	cp.w	r8,-4
800023ce:	c0 70       	breq	800023dc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d0:	48 58       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d4:	5b e8       	cp.w	r8,-2
800023d6:	c0 30       	breq	800023dc <twim_master_init+0x9c>
800023d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023dc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	00 00       	add	r0,r0
800023e6:	05 44       	ld.w	r4,--r2
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	20 04       	sub	r4,0
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	27 68       	sub	r8,118
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 e0       	sub	r0,14
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 14       	sub	r4,33

800023f8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023f8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800023fc:	58 0a       	cp.w	r10,0
800023fe:	c6 30       	breq	800024c4 <eic_init+0xcc>
80002400:	30 08       	mov	r8,0
80002402:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002404:	30 19       	mov	r9,1
80002406:	30 1e       	mov	lr,1
80002408:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000240c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002410:	11 96       	ld.ub	r6,r8[0x1]
80002412:	f2 06 18 00 	cp.b	r6,r9
80002416:	c0 71       	brne	80002424 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002418:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241a:	11 86       	ld.ub	r6,r8[0x0]
8000241c:	fc 06 09 46 	lsl	r6,lr,r6
80002420:	0a 46       	or	r6,r5
80002422:	c0 78       	rjmp	80002430 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002424:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002426:	11 86       	ld.ub	r6,r8[0x0]
80002428:	fc 06 09 46 	lsl	r6,lr,r6
8000242c:	5c d6       	com	r6
8000242e:	0a 66       	and	r6,r5
80002430:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002432:	11 a6       	ld.ub	r6,r8[0x2]
80002434:	f2 06 18 00 	cp.b	r6,r9
80002438:	c0 71       	brne	80002446 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000243c:	11 86       	ld.ub	r6,r8[0x0]
8000243e:	fc 06 09 46 	lsl	r6,lr,r6
80002442:	0a 46       	or	r6,r5
80002444:	c0 78       	rjmp	80002452 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002446:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002448:	11 86       	ld.ub	r6,r8[0x0]
8000244a:	fc 06 09 46 	lsl	r6,lr,r6
8000244e:	5c d6       	com	r6
80002450:	0a 66       	and	r6,r5
80002452:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002454:	11 b6       	ld.ub	r6,r8[0x3]
80002456:	f2 06 18 00 	cp.b	r6,r9
8000245a:	c0 71       	brne	80002468 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000245c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000245e:	11 86       	ld.ub	r6,r8[0x0]
80002460:	fc 06 09 46 	lsl	r6,lr,r6
80002464:	0a 46       	or	r6,r5
80002466:	c0 78       	rjmp	80002474 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002468:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246a:	11 86       	ld.ub	r6,r8[0x0]
8000246c:	fc 06 09 46 	lsl	r6,lr,r6
80002470:	5c d6       	com	r6
80002472:	0a 66       	and	r6,r5
80002474:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002476:	11 c6       	ld.ub	r6,r8[0x4]
80002478:	f2 06 18 00 	cp.b	r6,r9
8000247c:	c0 71       	brne	8000248a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000247e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002480:	11 86       	ld.ub	r6,r8[0x0]
80002482:	fc 06 09 46 	lsl	r6,lr,r6
80002486:	0a 46       	or	r6,r5
80002488:	c0 78       	rjmp	80002496 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000248c:	11 86       	ld.ub	r6,r8[0x0]
8000248e:	fc 06 09 46 	lsl	r6,lr,r6
80002492:	5c d6       	com	r6
80002494:	0a 66       	and	r6,r5
80002496:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002498:	11 d6       	ld.ub	r6,r8[0x5]
8000249a:	f2 06 18 00 	cp.b	r6,r9
8000249e:	c0 71       	brne	800024ac <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a2:	11 88       	ld.ub	r8,r8[0x0]
800024a4:	fc 08 09 48 	lsl	r8,lr,r8
800024a8:	0c 48       	or	r8,r6
800024aa:	c0 78       	rjmp	800024b8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024ac:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024ae:	11 88       	ld.ub	r8,r8[0x0]
800024b0:	fc 08 09 48 	lsl	r8,lr,r8
800024b4:	5c d8       	com	r8
800024b6:	0c 68       	and	r8,r6
800024b8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024ba:	2f f7       	sub	r7,-1
800024bc:	0e 98       	mov	r8,r7
800024be:	0e 3a       	cp.w	r10,r7
800024c0:	fe 9b ff a4 	brhi	80002408 <eic_init+0x10>
800024c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024c8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024c8:	30 18       	mov	r8,1
800024ca:	f0 0b 09 48 	lsl	r8,r8,r11
800024ce:	99 c8       	st.w	r12[0x30],r8
}
800024d0:	5e fc       	retal	r12

800024d2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d2:	30 18       	mov	r8,1
800024d4:	f0 0b 09 48 	lsl	r8,r8,r11
800024d8:	99 08       	st.w	r12[0x0],r8
}
800024da:	5e fc       	retal	r12

800024dc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800024e8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ea:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024ec:	e6 18 00 01 	andh	r8,0x1,COH
800024f0:	c0 21       	brne	800024f4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f4:	5e fc       	retal	r12
800024f6:	d7 03       	nop

800024f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 78       	lsl	r8,0x9
800024fe:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002502:	58 7b       	cp.w	r11,7
80002504:	e0 8b 00 05 	brhi	8000250e <gpio_enable_module_pin+0x16>
80002508:	4a 09       	lddpc	r9,80002588 <gpio_enable_module_pin+0x90>
8000250a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000250e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002510:	30 19       	mov	r9,1
80002512:	f2 0c 09 49 	lsl	r9,r9,r12
80002516:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002518:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000251c:	c3 18       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251e:	30 19       	mov	r9,1
80002520:	f2 0c 09 49 	lsl	r9,r9,r12
80002524:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002526:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002528:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252a:	c2 a8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000252c:	30 19       	mov	r9,1
8000252e:	f2 0c 09 49 	lsl	r9,r9,r12
80002532:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002534:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002536:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002538:	c2 38       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002542:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002544:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002546:	c1 c8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002548:	30 19       	mov	r9,1
8000254a:	f2 0c 09 49 	lsl	r9,r9,r12
8000254e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002550:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002552:	91 d9       	st.w	r8[0x34],r9
		break;
80002554:	c1 58       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002556:	30 19       	mov	r9,1
80002558:	f2 0c 09 49 	lsl	r9,r9,r12
8000255c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000255e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002560:	91 d9       	st.w	r8[0x34],r9
		break;
80002562:	c0 e8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002564:	30 19       	mov	r9,1
80002566:	f2 0c 09 49 	lsl	r9,r9,r12
8000256a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000256c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000256e:	91 d9       	st.w	r8[0x34],r9
		break;
80002570:	c0 78       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002572:	30 19       	mov	r9,1
80002574:	f2 0c 09 49 	lsl	r9,r9,r12
80002578:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000257c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000257e:	30 19       	mov	r9,1
80002580:	f2 0c 09 4c 	lsl	r12,r9,r12
80002584:	91 2c       	st.w	r8[0x8],r12
80002586:	5e fd       	retal	0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	96 00       	ld.sh	r0,r11[0x0]

8000258c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000258c:	d4 21       	pushm	r4-r7,lr
8000258e:	18 97       	mov	r7,r12
80002590:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002592:	58 0b       	cp.w	r11,0
80002594:	c0 31       	brne	8000259a <gpio_enable_module+0xe>
80002596:	30 05       	mov	r5,0
80002598:	c0 d8       	rjmp	800025b2 <gpio_enable_module+0x26>
8000259a:	30 06       	mov	r6,0
8000259c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000259e:	6e 1b       	ld.w	r11,r7[0x4]
800025a0:	6e 0c       	ld.w	r12,r7[0x0]
800025a2:	f0 1f 00 06 	mcall	800025b8 <gpio_enable_module+0x2c>
800025a6:	18 45       	or	r5,r12
		gpiomap++;
800025a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025aa:	2f f6       	sub	r6,-1
800025ac:	0c 34       	cp.w	r4,r6
800025ae:	fe 9b ff f8 	brhi	8000259e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b2:	0a 9c       	mov	r12,r5
800025b4:	d8 22       	popm	r4-r7,pc
800025b6:	00 00       	add	r0,r0
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	24 f8       	sub	r8,79

800025bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025bc:	f8 08 16 05 	lsr	r8,r12,0x5
800025c0:	a9 78       	lsl	r8,0x9
800025c2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025c6:	16 99       	mov	r9,r11
800025c8:	e2 19 00 04 	andl	r9,0x4,COH
800025cc:	c0 70       	breq	800025da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025ce:	30 19       	mov	r9,1
800025d0:	f2 0c 09 49 	lsl	r9,r9,r12
800025d4:	f1 49 00 74 	st.w	r8[116],r9
800025d8:	c0 68       	rjmp	800025e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025da:	30 19       	mov	r9,1
800025dc:	f2 0c 09 49 	lsl	r9,r9,r12
800025e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e4:	16 99       	mov	r9,r11
800025e6:	e2 19 00 80 	andl	r9,0x80,COH
800025ea:	c2 40       	breq	80002632 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025ec:	16 99       	mov	r9,r11
800025ee:	e2 19 01 80 	andl	r9,0x180,COH
800025f2:	c0 90       	breq	80002604 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 49 	lsl	r9,r9,r12
800025fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 49 00 b8 	st.w	r8[184],r9
80002602:	c1 88       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002604:	16 99       	mov	r9,r11
80002606:	e2 19 02 80 	andl	r9,0x280,COH
8000260a:	c0 90       	breq	8000261c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000260c:	30 19       	mov	r9,1
8000260e:	f2 0c 09 49 	lsl	r9,r9,r12
80002612:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002616:	f1 49 00 b8 	st.w	r8[184],r9
8000261a:	c0 c8       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000261c:	16 99       	mov	r9,r11
8000261e:	e2 19 03 80 	andl	r9,0x380,COH
80002622:	c0 80       	breq	80002632 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002624:	30 19       	mov	r9,1
80002626:	f2 0c 09 49 	lsl	r9,r9,r12
8000262a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000262e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002632:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002636:	c1 50       	breq	80002660 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002638:	e2 1b 00 02 	andl	r11,0x2,COH
8000263c:	c0 70       	breq	8000264a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000263e:	30 19       	mov	r9,1
80002640:	f2 0c 09 49 	lsl	r9,r9,r12
80002644:	f1 49 00 54 	st.w	r8[84],r9
80002648:	c0 68       	rjmp	80002654 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264a:	30 19       	mov	r9,1
8000264c:	f2 0c 09 49 	lsl	r9,r9,r12
80002650:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 49 	lsl	r9,r9,r12
8000265a:	f1 49 00 44 	st.w	r8[68],r9
8000265e:	c0 68       	rjmp	8000266a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002660:	30 19       	mov	r9,1
80002662:	f2 0c 09 49 	lsl	r9,r9,r12
80002666:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266a:	30 19       	mov	r9,1
8000266c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002670:	91 1c       	st.w	r8[0x4],r12
}
80002672:	5e fc       	retal	r12

80002674 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002674:	f8 08 16 05 	lsr	r8,r12,0x5
80002678:	a9 78       	lsl	r8,0x9
8000267a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000267e:	30 19       	mov	r9,1
80002680:	f2 0c 09 4c 	lsl	r12,r9,r12
80002684:	f1 4c 00 54 	st.w	r8[84],r12
}
80002688:	5e fc       	retal	r12

8000268a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268a:	f8 08 16 05 	lsr	r8,r12,0x5
8000268e:	a9 78       	lsl	r8,0x9
80002690:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002694:	30 19       	mov	r9,1
80002696:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000269e:	5e fc       	retal	r12

800026a0 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026a0:	f8 08 16 05 	lsr	r8,r12,0x5
800026a4:	a9 78       	lsl	r8,0x9
800026a6:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800026aa:	30 19       	mov	r9,1
800026ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800026b0:	f1 4c 00 5c 	st.w	r8[92],r12
}
800026b4:	5e fc       	retal	r12

800026b6 <gpio_configure_edge_detector>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026b6:	f8 08 16 05 	lsr	r8,r12,0x5
800026ba:	a9 78       	lsl	r8,0x9
800026bc:	e0 28 d4 00 	sub	r8,54272

	/* Configure the edge detector. */
	switch (mode) {
800026c0:	58 1b       	cp.w	r11,1
800026c2:	c0 d0       	breq	800026dc <gpio_configure_edge_detector+0x26>
800026c4:	c0 43       	brcs	800026cc <gpio_configure_edge_detector+0x16>
800026c6:	58 2b       	cp.w	r11,2
800026c8:	c1 20       	breq	800026ec <gpio_configure_edge_detector+0x36>
800026ca:	5e ff       	retal	1
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800026cc:	30 19       	mov	r9,1
800026ce:	f2 0c 09 4c 	lsl	r12,r9,r12
800026d2:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800026d6:	f1 4c 00 b8 	st.w	r8[184],r12
800026da:	5e fd       	retal	0
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800026dc:	30 19       	mov	r9,1
800026de:	f2 0c 09 4c 	lsl	r12,r9,r12
800026e2:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800026e6:	f1 4c 00 b8 	st.w	r8[184],r12
800026ea:	5e fd       	retal	0
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800026ec:	30 19       	mov	r9,1
800026ee:	f2 0c 09 4c 	lsl	r12,r9,r12
800026f2:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
800026f6:	f1 4c 00 b4 	st.w	r8[180],r12
800026fa:	5e fd       	retal	0

800026fc <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
800026fc:	eb cd 40 c0 	pushm	r6-r7,lr
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002700:	f8 07 16 05 	lsr	r7,r12,0x5
80002704:	a9 77       	lsl	r7,0x9
80002706:	e0 27 d4 00 	sub	r7,54272

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000270a:	30 16       	mov	r6,1
8000270c:	ec 0c 09 46 	lsl	r6,r6,r12
80002710:	ef 46 00 c4 	st.w	r7[196],r6

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
80002714:	f0 1f 00 05 	mcall	80002728 <gpio_enable_pin_interrupt+0x2c>
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002718:	58 1c       	cp.w	r12,1
8000271a:	ef f6 1a 25 	st.wne	r7[0x94],r6
8000271e:	f9 bc 01 00 	movne	r12,0

	return GPIO_SUCCESS;
}
80002722:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	26 b6       	sub	r6,107

8000272c <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000272c:	f8 08 16 05 	lsr	r8,r12,0x5
80002730:	a9 78       	lsl	r8,0x9
80002732:	e0 28 d4 00 	sub	r8,54272
	
	gpio_port->ierc = 1 << (pin & 0x1F);
80002736:	30 19       	mov	r9,1
80002738:	f2 0c 09 4c 	lsl	r12,r9,r12
8000273c:	f1 4c 00 98 	st.w	r8[152],r12
}
80002740:	5e fc       	retal	r12

80002742 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002742:	f8 08 16 05 	lsr	r8,r12,0x5
80002746:	a9 78       	lsl	r8,0x9
80002748:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
8000274c:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
80002750:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
80002754:	30 1a       	mov	r10,1
80002756:	f4 0c 09 4c 	lsl	r12,r10,r12
8000275a:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
8000275e:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
80002762:	5e fc       	retal	r12

80002764 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002764:	c0 08       	rjmp	80002764 <_unhandled_interrupt>
80002766:	d7 03       	nop

80002768 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002768:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000276c:	49 99       	lddpc	r9,800027d0 <INTC_register_interrupt+0x68>
8000276e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002772:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002776:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002778:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000277c:	58 0a       	cp.w	r10,0
8000277e:	c0 91       	brne	80002790 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002780:	49 59       	lddpc	r9,800027d4 <INTC_register_interrupt+0x6c>
80002782:	49 6a       	lddpc	r10,800027d8 <INTC_register_interrupt+0x70>
80002784:	12 1a       	sub	r10,r9
80002786:	fe 79 10 00 	mov	r9,-61440
8000278a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000278e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002790:	58 1a       	cp.w	r10,1
80002792:	c0 a1       	brne	800027a6 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002794:	49 09       	lddpc	r9,800027d4 <INTC_register_interrupt+0x6c>
80002796:	49 2a       	lddpc	r10,800027dc <INTC_register_interrupt+0x74>
80002798:	12 1a       	sub	r10,r9
8000279a:	bf aa       	sbr	r10,0x1e
8000279c:	fe 79 10 00 	mov	r9,-61440
800027a0:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027a4:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800027a6:	58 2a       	cp.w	r10,2
800027a8:	c0 a1       	brne	800027bc <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800027aa:	48 b9       	lddpc	r9,800027d4 <INTC_register_interrupt+0x6c>
800027ac:	48 da       	lddpc	r10,800027e0 <INTC_register_interrupt+0x78>
800027ae:	12 1a       	sub	r10,r9
800027b0:	bf ba       	sbr	r10,0x1f
800027b2:	fe 79 10 00 	mov	r9,-61440
800027b6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027ba:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800027bc:	48 69       	lddpc	r9,800027d4 <INTC_register_interrupt+0x6c>
800027be:	48 aa       	lddpc	r10,800027e4 <INTC_register_interrupt+0x7c>
800027c0:	12 1a       	sub	r10,r9
800027c2:	ea 1a c0 00 	orh	r10,0xc000
800027c6:	fe 79 10 00 	mov	r9,-61440
800027ca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027ce:	5e fc       	retal	r12
800027d0:	80 00       	ld.sh	r0,r0[0x0]
800027d2:	96 20       	ld.sh	r0,r11[0x4]
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	94 00       	ld.sh	r0,r10[0x0]
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	95 04       	st.w	r10[0x0],r4
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	95 12       	st.w	r10[0x4],r2
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	95 20       	st.w	r10[0x8],r0
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	95 2e       	st.w	r10[0x8],lr

800027e8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800027e8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800027ea:	49 18       	lddpc	r8,8000282c <INTC_init_interrupts+0x44>
800027ec:	e3 b8 00 01 	mtsr	0x4,r8
800027f0:	49 0e       	lddpc	lr,80002830 <INTC_init_interrupts+0x48>
800027f2:	30 07       	mov	r7,0
800027f4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800027f6:	49 0c       	lddpc	r12,80002834 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800027f8:	49 05       	lddpc	r5,80002838 <INTC_init_interrupts+0x50>
800027fa:	10 15       	sub	r5,r8
800027fc:	fe 76 10 00 	mov	r6,-61440
80002800:	c1 08       	rjmp	80002820 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002802:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002804:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002806:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002808:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000280c:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000280e:	10 3a       	cp.w	r10,r8
80002810:	fe 9b ff fc 	brhi	80002808 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002814:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002818:	2f f7       	sub	r7,-1
8000281a:	2f 8e       	sub	lr,-8
8000281c:	59 f7       	cp.w	r7,31
8000281e:	c0 50       	breq	80002828 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002820:	7c 08       	ld.w	r8,lr[0x0]
80002822:	58 08       	cp.w	r8,0
80002824:	ce f1       	brne	80002802 <INTC_init_interrupts+0x1a>
80002826:	cf 7b       	rjmp	80002814 <INTC_init_interrupts+0x2c>
80002828:	d8 22       	popm	r4-r7,pc
8000282a:	00 00       	add	r0,r0
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	94 00       	ld.sh	r0,r10[0x0]
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	96 20       	ld.sh	r0,r11[0x4]
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	27 64       	sub	r4,118
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	95 04       	st.w	r10[0x0],r4

8000283c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000283c:	fe 78 10 00 	mov	r8,-61440
80002840:	e0 69 00 83 	mov	r9,131
80002844:	f2 0c 01 0c 	sub	r12,r9,r12
80002848:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000284c:	f2 ca ff c0 	sub	r10,r9,-64
80002850:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002854:	58 08       	cp.w	r8,0
80002856:	c0 21       	brne	8000285a <_get_interrupt_handler+0x1e>
80002858:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000285a:	f0 08 12 00 	clz	r8,r8
8000285e:	48 5a       	lddpc	r10,80002870 <_get_interrupt_handler+0x34>
80002860:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002864:	f0 08 11 1f 	rsub	r8,r8,31
80002868:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000286a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000286e:	5e fc       	retal	r12
80002870:	80 00       	ld.sh	r0,r0[0x0]
80002872:	96 20       	ld.sh	r0,r11[0x4]

80002874 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80002874:	f8 c8 00 01 	sub	r8,r12,1
80002878:	f0 0b 00 0b 	add	r11,r8,r11
8000287c:	f6 0c 0d 0a 	divu	r10,r11,r12
80002880:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002882:	f4 c8 00 01 	sub	r8,r10,1
80002886:	e0 48 00 fe 	cp.w	r8,254
8000288a:	e0 88 00 03 	brls	80002890 <getBaudDiv+0x1c>
8000288e:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002890:	5c 8c       	casts.h	r12
}
80002892:	5e fc       	retal	r12

80002894 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002894:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80002896:	30 18       	mov	r8,1
80002898:	f0 0b 18 00 	cp.b	r11,r8
8000289c:	5f be       	srhi	lr
8000289e:	f0 0a 18 00 	cp.b	r10,r8
800028a2:	5f b8       	srhi	r8
800028a4:	fd e8 10 08 	or	r8,lr,r8
800028a8:	c0 30       	breq	800028ae <spi_selectionMode+0x1a>
800028aa:	30 2c       	mov	r12,2
800028ac:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800028ae:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800028b0:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800028b4:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800028b8:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800028bc:	99 18       	st.w	r12[0x4],r8
800028be:	d8 0a       	popm	pc,r12=0

800028c0 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800028c0:	78 18       	ld.w	r8,r12[0x4]
800028c2:	ea 18 00 0f 	orh	r8,0xf
800028c6:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800028c8:	78 18       	ld.w	r8,r12[0x4]
800028ca:	e2 18 00 04 	andl	r8,0x4,COH
800028ce:	c0 f0       	breq	800028ec <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800028d0:	30 e8       	mov	r8,14
800028d2:	f0 0b 18 00 	cp.b	r11,r8
800028d6:	e0 8b 00 19 	brhi	80002908 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800028da:	78 18       	ld.w	r8,r12[0x4]
800028dc:	b1 6b       	lsl	r11,0x10
800028de:	ea 1b ff f0 	orh	r11,0xfff0
800028e2:	e8 1b ff ff 	orl	r11,0xffff
800028e6:	10 6b       	and	r11,r8
800028e8:	99 1b       	st.w	r12[0x4],r11
800028ea:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800028ec:	30 38       	mov	r8,3
800028ee:	f0 0b 18 00 	cp.b	r11,r8
800028f2:	e0 8b 00 0b 	brhi	80002908 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800028f6:	78 18       	ld.w	r8,r12[0x4]
800028f8:	2f 0b       	sub	r11,-16
800028fa:	30 19       	mov	r9,1
800028fc:	f2 0b 09 4b 	lsl	r11,r9,r11
80002900:	5c db       	com	r11
80002902:	10 6b       	and	r11,r8
80002904:	99 1b       	st.w	r12[0x4],r11
80002906:	5e fd       	retal	0
80002908:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000290a:	5e fc       	retal	r12

8000290c <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000290c:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002910:	c0 58       	rjmp	8000291a <spi_unselectChip+0xe>
		if (!timeout--) {
80002912:	58 08       	cp.w	r8,0
80002914:	c0 21       	brne	80002918 <spi_unselectChip+0xc>
80002916:	5e ff       	retal	1
80002918:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000291a:	78 49       	ld.w	r9,r12[0x10]
8000291c:	e2 19 02 00 	andl	r9,0x200,COH
80002920:	cf 90       	breq	80002912 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002922:	78 18       	ld.w	r8,r12[0x4]
80002924:	ea 18 00 0f 	orh	r8,0xf
80002928:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000292a:	fc 18 01 00 	movh	r8,0x100
8000292e:	99 08       	st.w	r12[0x0],r8
80002930:	5e fd       	retal	0
80002932:	d7 03       	nop

80002934 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002934:	eb cd 40 f8 	pushm	r3-r7,lr
80002938:	18 95       	mov	r5,r12
8000293a:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000293c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002940:	30 38       	mov	r8,3
80002942:	f0 06 18 00 	cp.b	r6,r8
80002946:	e0 8b 00 4d 	brhi	800029e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000294a:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000294e:	30 18       	mov	r8,1
80002950:	f0 04 18 00 	cp.b	r4,r8
80002954:	e0 8b 00 46 	brhi	800029e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80002958:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000295c:	30 78       	mov	r8,7
8000295e:	f0 03 18 00 	cp.b	r3,r8
80002962:	e0 88 00 3f 	brls	800029e0 <spi_setupChipReg+0xac>
80002966:	31 08       	mov	r8,16
80002968:	f0 03 18 00 	cp.b	r3,r8
8000296c:	e0 8b 00 3a 	brhi	800029e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002970:	14 9b       	mov	r11,r10
80002972:	6e 1c       	ld.w	r12,r7[0x4]
80002974:	f0 1f 00 1d 	mcall	800029e8 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80002978:	c3 45       	brlt	800029e0 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000297a:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000297c:	ec 09 16 01 	lsr	r9,r6,0x1
80002980:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002984:	ec 16 00 01 	eorl	r6,0x1
80002988:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000298c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002990:	20 83       	sub	r3,8
80002992:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002996:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000299a:	ef 39 00 09 	ld.ub	r9,r7[9]
8000299e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800029a2:	ef 39 00 0a 	ld.ub	r9,r7[10]
800029a6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800029aa:	0f 89       	ld.ub	r9,r7[0x0]
800029ac:	30 1a       	mov	r10,1
800029ae:	f4 09 18 00 	cp.b	r9,r10
800029b2:	c0 e0       	breq	800029ce <spi_setupChipReg+0x9a>
800029b4:	c0 a3       	brcs	800029c8 <spi_setupChipReg+0x94>
800029b6:	30 2a       	mov	r10,2
800029b8:	f4 09 18 00 	cp.b	r9,r10
800029bc:	c0 c0       	breq	800029d4 <spi_setupChipReg+0xa0>
800029be:	30 3a       	mov	r10,3
800029c0:	f4 09 18 00 	cp.b	r9,r10
800029c4:	c0 e1       	brne	800029e0 <spi_setupChipReg+0xac>
800029c6:	c0 a8       	rjmp	800029da <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800029c8:	8b c8       	st.w	r5[0x30],r8
800029ca:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800029ce:	8b d8       	st.w	r5[0x34],r8
800029d0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800029d4:	8b e8       	st.w	r5[0x38],r8
800029d6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800029da:	8b f8       	st.w	r5[0x3c],r8
800029dc:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
800029e0:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800029e2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800029e6:	00 00       	add	r0,r0
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	28 74       	sub	r4,-121

800029ec <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800029ec:	30 18       	mov	r8,1
800029ee:	99 08       	st.w	r12[0x0],r8
}
800029f0:	5e fc       	retal	r12

800029f2 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800029f2:	76 09       	ld.w	r9,r11[0x0]
800029f4:	58 29       	cp.w	r9,2
800029f6:	e0 88 00 03 	brls	800029fc <tc_init_waveform+0xa>
800029fa:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800029fc:	76 18       	ld.w	r8,r11[0x4]
800029fe:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002a02:	af ba       	sbr	r10,0xf
80002a04:	10 9b       	mov	r11,r8
80002a06:	e6 1b c0 00 	andh	r11,0xc000,COH
80002a0a:	16 4a       	or	r10,r11
80002a0c:	10 9b       	mov	r11,r8
80002a0e:	e6 1b 30 00 	andh	r11,0x3000,COH
80002a12:	16 4a       	or	r10,r11
80002a14:	10 9b       	mov	r11,r8
80002a16:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002a1a:	16 4a       	or	r10,r11
80002a1c:	10 9b       	mov	r11,r8
80002a1e:	e6 1b 03 00 	andh	r11,0x300,COH
80002a22:	16 4a       	or	r10,r11
80002a24:	10 9b       	mov	r11,r8
80002a26:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002a2a:	16 4a       	or	r10,r11
80002a2c:	10 9b       	mov	r11,r8
80002a2e:	e6 1b 00 30 	andh	r11,0x30,COH
80002a32:	16 4a       	or	r10,r11
80002a34:	10 9b       	mov	r11,r8
80002a36:	e6 1b 00 0c 	andh	r11,0xc,COH
80002a3a:	16 4a       	or	r10,r11
80002a3c:	10 9b       	mov	r11,r8
80002a3e:	e6 1b 00 03 	andh	r11,0x3,COH
80002a42:	16 4a       	or	r10,r11
80002a44:	10 9b       	mov	r11,r8
80002a46:	e2 1b 60 00 	andl	r11,0x6000,COH
80002a4a:	16 4a       	or	r10,r11
80002a4c:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002a50:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
80002a54:	10 9b       	mov	r11,r8
80002a56:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002a5a:	16 4a       	or	r10,r11
80002a5c:	10 9b       	mov	r11,r8
80002a5e:	e2 1b 03 00 	andl	r11,0x300,COH
80002a62:	16 4a       	or	r10,r11
80002a64:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80002a68:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002a6c:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002a70:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
80002a74:	10 9b       	mov	r11,r8
80002a76:	e2 1b 00 30 	andl	r11,0x30,COH
80002a7a:	16 4a       	or	r10,r11
80002a7c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002a80:	f5 e8 10 38 	or	r8,r10,r8<<0x3
80002a84:	a5 69       	lsl	r9,0x4
80002a86:	2f f9       	sub	r9,-1
80002a88:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a8c:	5e fd       	retal	0

80002a8e <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a8e:	58 2b       	cp.w	r11,2
80002a90:	e0 88 00 03 	brls	80002a96 <tc_start+0x8>
80002a94:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002a96:	a7 6b       	lsl	r11,0x6
80002a98:	16 0c       	add	r12,r11
80002a9a:	30 58       	mov	r8,5
80002a9c:	99 08       	st.w	r12[0x0],r8
80002a9e:	5e fd       	retal	0

80002aa0 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002aa0:	58 2b       	cp.w	r11,2
80002aa2:	e0 88 00 03 	brls	80002aa8 <tc_stop+0x8>
80002aa6:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80002aa8:	a7 6b       	lsl	r11,0x6
80002aaa:	16 0c       	add	r12,r11
80002aac:	30 28       	mov	r8,2
80002aae:	99 08       	st.w	r12[0x0],r8
80002ab0:	5e fd       	retal	0

80002ab2 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002ab2:	58 2b       	cp.w	r11,2
80002ab4:	e0 88 00 03 	brls	80002aba <tc_read_sr+0x8>
80002ab8:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002aba:	a7 6b       	lsl	r11,0x6
80002abc:	2e 0b       	sub	r11,-32
80002abe:	16 0c       	add	r12,r11
80002ac0:	78 0c       	ld.w	r12,r12[0x0]
}
80002ac2:	5e fc       	retal	r12

80002ac4 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002ac4:	58 2b       	cp.w	r11,2
80002ac6:	e0 88 00 03 	brls	80002acc <tc_write_rc+0x8>
80002aca:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002acc:	f6 08 15 04 	lsl	r8,r11,0x4
80002ad0:	2f f8       	sub	r8,-1
80002ad2:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002ad6:	e2 18 80 00 	andl	r8,0x8000,COH
80002ada:	c0 c0       	breq	80002af2 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002adc:	a7 6b       	lsl	r11,0x6
80002ade:	16 0c       	add	r12,r11
80002ae0:	2e 4c       	sub	r12,-28
80002ae2:	78 08       	ld.w	r8,r12[0x0]
80002ae4:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002ae8:	e0 18 00 00 	andl	r8,0x0
80002aec:	f3 e8 10 08 	or	r8,r9,r8
80002af0:	99 08       	st.w	r12[0x0],r8

  return value;
80002af2:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002af6:	5e fc       	retal	r12

80002af8 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002af8:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002afc:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002b00:	58 2b       	cp.w	r11,2
80002b02:	e0 88 00 04 	brls	80002b0a <tc_configure_interrupts+0x12>
80002b06:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002b0a:	ee 19 00 01 	eorh	r9,0x1
80002b0e:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002b12:	74 08       	ld.w	r8,r10[0x0]
80002b14:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002b18:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002b1c:	a7 6e       	lsl	lr,0x6
80002b1e:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002b22:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002b26:	0e 4e       	or	lr,r7
80002b28:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002b2c:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002b30:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002b34:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002b38:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002b3c:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002b40:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002b44:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002b48:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b4c:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002b50:	f6 0e 15 06 	lsl	lr,r11,0x6
80002b54:	f8 0e 00 0e 	add	lr,r12,lr
80002b58:	2d ce       	sub	lr,-36
80002b5a:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002b5c:	58 09       	cp.w	r9,0
80002b5e:	c0 20       	breq	80002b62 <tc_configure_interrupts+0x6a>
80002b60:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b62:	74 08       	ld.w	r8,r10[0x0]
80002b64:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002b68:	e0 65 00 80 	mov	r5,128
80002b6c:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002b70:	74 08       	ld.w	r8,r10[0x0]
80002b72:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002b76:	f9 b4 00 40 	moveq	r4,64
80002b7a:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002b7e:	74 08       	ld.w	r8,r10[0x0]
80002b80:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002b84:	f9 b3 00 20 	moveq	r3,32
80002b88:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002b8c:	74 08       	ld.w	r8,r10[0x0]
80002b8e:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002b92:	f9 b2 00 10 	moveq	r2,16
80002b96:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002b9a:	74 08       	ld.w	r8,r10[0x0]
80002b9c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002ba0:	f9 b6 00 08 	moveq	r6,8
80002ba4:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002ba8:	74 08       	ld.w	r8,r10[0x0]
80002baa:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002bae:	f9 b7 00 04 	moveq	r7,4
80002bb2:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002bb6:	74 08       	ld.w	r8,r10[0x0]
80002bb8:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002bbc:	f9 be 00 02 	moveq	lr,2
80002bc0:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002bc4:	74 08       	ld.w	r8,r10[0x0]
80002bc6:	ec 18 00 01 	eorl	r8,0x1
80002bca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bce:	eb e8 10 08 	or	r8,r5,r8
80002bd2:	08 48       	or	r8,r4
80002bd4:	06 48       	or	r8,r3
80002bd6:	04 48       	or	r8,r2
80002bd8:	0c 48       	or	r8,r6
80002bda:	0e 48       	or	r8,r7
80002bdc:	1c 48       	or	r8,lr
80002bde:	f6 0a 15 06 	lsl	r10,r11,0x6
80002be2:	f8 0a 00 0a 	add	r10,r12,r10
80002be6:	2d 8a       	sub	r10,-40
80002be8:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002bea:	a7 6b       	lsl	r11,0x6
80002bec:	2e 0b       	sub	r11,-32
80002bee:	16 0c       	add	r12,r11
80002bf0:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002bf2:	58 09       	cp.w	r9,0
80002bf4:	c0 31       	brne	80002bfa <tc_configure_interrupts+0x102>
80002bf6:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002bfa:	d5 03       	csrf	0x10
80002bfc:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002c00 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002c00:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002c02:	f6 08 15 04 	lsl	r8,r11,0x4
80002c06:	14 38       	cp.w	r8,r10
80002c08:	f9 b8 08 10 	movls	r8,16
80002c0c:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002c10:	f0 0b 02 4b 	mul	r11,r8,r11
80002c14:	f6 09 16 01 	lsr	r9,r11,0x1
80002c18:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002c1c:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002c20:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002c24:	f2 cb 00 01 	sub	r11,r9,1
80002c28:	e0 4b ff fe 	cp.w	r11,65534
80002c2c:	e0 88 00 03 	brls	80002c32 <usart_set_async_baudrate+0x32>
80002c30:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002c32:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002c34:	e8 6e 00 00 	mov	lr,524288
80002c38:	59 08       	cp.w	r8,16
80002c3a:	fc 08 17 10 	movne	r8,lr
80002c3e:	f9 b8 00 00 	moveq	r8,0
80002c42:	e4 1b ff f7 	andh	r11,0xfff7
80002c46:	e0 1b fe cf 	andl	r11,0xfecf
80002c4a:	16 48       	or	r8,r11
80002c4c:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002c4e:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002c52:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002c56:	99 89       	st.w	r12[0x20],r9
80002c58:	d8 0a       	popm	pc,r12=0

80002c5a <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002c5a:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002c5c:	e2 18 00 02 	andl	r8,0x2,COH
80002c60:	c0 31       	brne	80002c66 <usart_write_char+0xc>
80002c62:	30 2c       	mov	r12,2
80002c64:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002c66:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002c6a:	99 7b       	st.w	r12[0x1c],r11
80002c6c:	5e fd       	retal	0
80002c6e:	d7 03       	nop

80002c70 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002c70:	eb cd 40 e0 	pushm	r5-r7,lr
80002c74:	18 96       	mov	r6,r12
80002c76:	16 95       	mov	r5,r11
80002c78:	e0 67 27 0f 	mov	r7,9999
80002c7c:	c0 68       	rjmp	80002c88 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002c7e:	58 07       	cp.w	r7,0
80002c80:	c0 31       	brne	80002c86 <usart_putchar+0x16>
80002c82:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002c86:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002c88:	0a 9b       	mov	r11,r5
80002c8a:	0c 9c       	mov	r12,r6
80002c8c:	f0 1f 00 03 	mcall	80002c98 <usart_putchar+0x28>
80002c90:	cf 71       	brne	80002c7e <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002c92:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c96:	00 00       	add	r0,r0
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	2c 5a       	sub	r10,-59

80002c9c <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002c9c:	78 58       	ld.w	r8,r12[0x14]
80002c9e:	e2 18 00 e0 	andl	r8,0xe0,COH
80002ca2:	c0 30       	breq	80002ca8 <usart_read_char+0xc>
80002ca4:	30 4c       	mov	r12,4
80002ca6:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002ca8:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002caa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002cae:	c0 31       	brne	80002cb4 <usart_read_char+0x18>
80002cb0:	30 3c       	mov	r12,3
80002cb2:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002cb4:	78 68       	ld.w	r8,r12[0x18]
80002cb6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002cba:	97 08       	st.w	r11[0x0],r8
80002cbc:	5e fd       	retal	0
80002cbe:	d7 03       	nop

80002cc0 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002cc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002cc4:	18 96       	mov	r6,r12
80002cc6:	16 97       	mov	r7,r11
  while (*string != '\0')
80002cc8:	17 8b       	ld.ub	r11,r11[0x0]
80002cca:	58 0b       	cp.w	r11,0
80002ccc:	c0 80       	breq	80002cdc <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002cce:	2f f7       	sub	r7,-1
80002cd0:	0c 9c       	mov	r12,r6
80002cd2:	f0 1f 00 04 	mcall	80002ce0 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002cd6:	0f 8b       	ld.ub	r11,r7[0x0]
80002cd8:	58 0b       	cp.w	r11,0
80002cda:	cf a1       	brne	80002cce <usart_write_line+0xe>
80002cdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ce0:	80 00       	ld.sh	r0,r0[0x0]
80002ce2:	2c 70       	sub	r0,-57

80002ce4 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002ce4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002ce8:	e6 18 00 01 	andh	r8,0x1,COH
80002cec:	c0 71       	brne	80002cfa <usart_reset+0x16>
80002cee:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002cf0:	3f f8       	mov	r8,-1
80002cf2:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002cf4:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002cf6:	d5 03       	csrf	0x10
80002cf8:	c0 48       	rjmp	80002d00 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002cfa:	3f f8       	mov	r8,-1
80002cfc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002cfe:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002d00:	30 08       	mov	r8,0
80002d02:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002d04:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002d06:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002d08:	e8 68 61 0c 	mov	r8,549132
80002d0c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002d0e:	5e fc       	retal	r12

80002d10 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002d10:	eb cd 40 e0 	pushm	r5-r7,lr
80002d14:	18 96       	mov	r6,r12
80002d16:	16 97       	mov	r7,r11
80002d18:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002d1a:	f0 1f 00 2f 	mcall	80002dd4 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002d1e:	58 07       	cp.w	r7,0
80002d20:	c5 80       	breq	80002dd0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002d22:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002d24:	30 49       	mov	r9,4
80002d26:	f2 08 18 00 	cp.b	r8,r9
80002d2a:	e0 88 00 53 	brls	80002dd0 <usart_init_rs232+0xc0>
80002d2e:	30 99       	mov	r9,9
80002d30:	f2 08 18 00 	cp.b	r8,r9
80002d34:	e0 8b 00 4e 	brhi	80002dd0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002d38:	0f d9       	ld.ub	r9,r7[0x5]
80002d3a:	30 78       	mov	r8,7
80002d3c:	f0 09 18 00 	cp.b	r9,r8
80002d40:	e0 8b 00 48 	brhi	80002dd0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002d44:	8e 39       	ld.sh	r9,r7[0x6]
80002d46:	e0 68 01 01 	mov	r8,257
80002d4a:	f0 09 19 00 	cp.h	r9,r8
80002d4e:	e0 8b 00 41 	brhi	80002dd0 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002d52:	ef 39 00 08 	ld.ub	r9,r7[8]
80002d56:	30 38       	mov	r8,3
80002d58:	f0 09 18 00 	cp.b	r9,r8
80002d5c:	e0 8b 00 3a 	brhi	80002dd0 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002d60:	0a 9a       	mov	r10,r5
80002d62:	6e 0b       	ld.w	r11,r7[0x0]
80002d64:	0c 9c       	mov	r12,r6
80002d66:	f0 1f 00 1d 	mcall	80002dd8 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002d6a:	58 1c       	cp.w	r12,1
80002d6c:	c3 20       	breq	80002dd0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002d6e:	0f c8       	ld.ub	r8,r7[0x4]
80002d70:	30 99       	mov	r9,9
80002d72:	f2 08 18 00 	cp.b	r8,r9
80002d76:	c0 51       	brne	80002d80 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002d78:	6c 18       	ld.w	r8,r6[0x4]
80002d7a:	b1 b8       	sbr	r8,0x11
80002d7c:	8d 18       	st.w	r6[0x4],r8
80002d7e:	c0 68       	rjmp	80002d8a <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002d80:	6c 19       	ld.w	r9,r6[0x4]
80002d82:	20 58       	sub	r8,5
80002d84:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002d88:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002d8a:	6c 19       	ld.w	r9,r6[0x4]
80002d8c:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002d90:	0f d8       	ld.ub	r8,r7[0x5]
80002d92:	a9 78       	lsl	r8,0x9
80002d94:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002d98:	12 48       	or	r8,r9
80002d9a:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002d9c:	8e 38       	ld.sh	r8,r7[0x6]
80002d9e:	30 29       	mov	r9,2
80002da0:	f2 08 19 00 	cp.h	r8,r9
80002da4:	e0 88 00 09 	brls	80002db6 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002da8:	6c 18       	ld.w	r8,r6[0x4]
80002daa:	ad b8       	sbr	r8,0xd
80002dac:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002dae:	8e b8       	ld.uh	r8,r7[0x6]
80002db0:	20 28       	sub	r8,2
80002db2:	8d a8       	st.w	r6[0x28],r8
80002db4:	c0 68       	rjmp	80002dc0 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002db6:	6c 19       	ld.w	r9,r6[0x4]
80002db8:	5c 78       	castu.h	r8
80002dba:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002dbe:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002dc0:	6c 18       	ld.w	r8,r6[0x4]
80002dc2:	e0 18 ff f0 	andl	r8,0xfff0
80002dc6:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002dc8:	35 08       	mov	r8,80
80002dca:	8d 08       	st.w	r6[0x0],r8
80002dcc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002dd0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2c e4       	sub	r4,-50
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	2c 00       	sub	r0,-64

80002ddc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002ddc:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002de0:	fe c0 99 e0 	sub	r0,pc,-26144

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002de4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002de8:	d5 53       	csrf	0x15
  cp      r0, r1
80002dea:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002dec:	e0 61 05 38 	mov	r1,1336
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002df0:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002df2:	c0 72       	brcc	80002e00 <idata_load_loop_end>
  cp      r0, r1
80002df4:	fe c2 8f bc 	sub	r2,pc,-28740

80002df8 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002df8:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002dfa:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002dfc:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002dfe:	cf d3       	brcs	80002df8 <idata_load_loop>

80002e00 <idata_load_loop_end>:
  mov     r2, 0
80002e00:	e0 60 05 38 	mov	r0,1336
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002e04:	e0 61 07 58 	mov	r1,1880
  cp      r0, r1
  brlo    udata_clear_loop
80002e08:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002e0a:	c0 62       	brcc	80002e16 <udata_clear_loop_end>
80002e0c:	30 02       	mov	r2,0
80002e0e:	30 03       	mov	r3,0

80002e10 <udata_clear_loop>:
80002e10:	a1 22       	st.d	r0++,r2
80002e12:	02 30       	cp.w	r0,r1
80002e14:	cf e3       	brcs	80002e10 <udata_clear_loop>

80002e16 <udata_clear_loop_end>:
80002e16:	fe cf f6 d2 	sub	pc,pc,-2350
80002e1a:	d7 03       	nop

80002e1c <rxTrama>:
	
	ENABLE_TRX_IRQ();
}

uint8_t rxTrama()
{
80002e1c:	eb cd 40 40 	pushm	r6,lr
80002e20:	20 1d       	sub	sp,4
	uint8_t trama = 0;
80002e22:	fa cb ff fc 	sub	r11,sp,-4
80002e26:	30 08       	mov	r8,0
80002e28:	16 f8       	st.b	--r11,r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e2a:	e1 b6 00 00 	mfsr	r6,0x0
80002e2e:	d3 03       	ssrf	0x10
	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &trama, 1);
80002e30:	30 1a       	mov	r10,1
80002e32:	fe 7c 40 00 	mov	r12,-49152
80002e36:	f0 1f 00 09 	mcall	80002e58 <rxTrama+0x3c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e3a:	48 98       	lddpc	r8,80002e5c <rxTrama+0x40>
80002e3c:	11 8b       	ld.ub	r11,r8[0x0]
80002e3e:	fe 7c 40 00 	mov	r12,-49152
80002e42:	f0 1f 00 08 	mcall	80002e60 <rxTrama+0x44>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e46:	e6 16 00 01 	andh	r6,0x1,COH
80002e4a:	c0 21       	brne	80002e4e <rxTrama+0x32>
80002e4c:	d5 03       	csrf	0x10

	return trama;

}
80002e4e:	1b bc       	ld.ub	r12,sp[0x3]
80002e50:	2f fd       	sub	sp,-4
80002e52:	e3 cd 80 40 	ldm	sp++,r6,pc
80002e56:	00 00       	add	r0,r0
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	2f f2       	sub	r2,-1
80002e5c:	00 00       	add	r0,r0
80002e5e:	00 08       	add	r8,r0
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	29 0c       	sub	r12,-112

80002e64 <pal_trx_frame_write>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_write(uint8_t * data, uint8_t length)
{
80002e64:	eb cd 40 78 	pushm	r3-r6,lr
80002e68:	20 1d       	sub	sp,4
80002e6a:	18 94       	mov	r4,r12
80002e6c:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e6e:	e1 b3 00 00 	mfsr	r3,0x0
80002e72:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e74:	49 16       	lddpc	r6,80002eb8 <pal_trx_frame_write+0x54>
80002e76:	0d 8b       	ld.ub	r11,r6[0x0]
80002e78:	fe 7c 40 00 	mov	r12,-49152
80002e7c:	f0 1f 00 10 	mcall	80002ebc <pal_trx_frame_write+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FW;
80002e80:	fa cb ff fc 	sub	r11,sp,-4
80002e84:	36 08       	mov	r8,96
80002e86:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80002e88:	30 1a       	mov	r10,1
80002e8a:	fe 7c 40 00 	mov	r12,-49152
80002e8e:	f0 1f 00 0d 	mcall	80002ec0 <pal_trx_frame_write+0x5c>

	spi_write_packet(AT86RFX_SPI, data, length);
80002e92:	0a 9a       	mov	r10,r5
80002e94:	08 9b       	mov	r11,r4
80002e96:	fe 7c 40 00 	mov	r12,-49152
80002e9a:	f0 1f 00 0a 	mcall	80002ec0 <pal_trx_frame_write+0x5c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e9e:	0d 8b       	ld.ub	r11,r6[0x0]
80002ea0:	fe 7c 40 00 	mov	r12,-49152
80002ea4:	f0 1f 00 08 	mcall	80002ec4 <pal_trx_frame_write+0x60>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002ea8:	e6 13 00 01 	andh	r3,0x1,COH
80002eac:	c0 21       	brne	80002eb0 <pal_trx_frame_write+0x4c>
80002eae:	d5 03       	csrf	0x10
}
80002eb0:	2f fd       	sub	sp,-4
80002eb2:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002eb6:	00 00       	add	r0,r0
80002eb8:	00 00       	add	r0,r0
80002eba:	00 08       	add	r8,r0
80002ebc:	80 00       	ld.sh	r0,r0[0x0]
80002ebe:	28 c0       	sub	r0,-116
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	30 42       	mov	r2,4
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	29 0c       	sub	r12,-112

80002ec8 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002ec8:	eb cd 40 c0 	pushm	r6-r7,lr
80002ecc:	20 2d       	sub	sp,8
80002ece:	ba cc       	st.b	sp[0x4],r12
80002ed0:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002ed2:	e1 b6 00 00 	mfsr	r6,0x0
80002ed6:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002ed8:	1b c8       	ld.ub	r8,sp[0x4]
80002eda:	ea 18 ff ff 	orh	r8,0xffff
80002ede:	e8 18 ff c0 	orl	r8,0xffc0
80002ee2:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002ee4:	49 07       	lddpc	r7,80002f24 <pal_trx_reg_write+0x5c>
80002ee6:	0f 8b       	ld.ub	r11,r7[0x0]
80002ee8:	fe 7c 40 00 	mov	r12,-49152
80002eec:	f0 1f 00 0f 	mcall	80002f28 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002ef0:	30 1a       	mov	r10,1
80002ef2:	fa cb ff fc 	sub	r11,sp,-4
80002ef6:	fe 7c 40 00 	mov	r12,-49152
80002efa:	f0 1f 00 0d 	mcall	80002f2c <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002efe:	30 1a       	mov	r10,1
80002f00:	1a 9b       	mov	r11,sp
80002f02:	fe 7c 40 00 	mov	r12,-49152
80002f06:	f0 1f 00 0a 	mcall	80002f2c <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002f0a:	0f 8b       	ld.ub	r11,r7[0x0]
80002f0c:	fe 7c 40 00 	mov	r12,-49152
80002f10:	f0 1f 00 08 	mcall	80002f30 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002f14:	e6 16 00 01 	andh	r6,0x1,COH
80002f18:	c0 21       	brne	80002f1c <pal_trx_reg_write+0x54>
80002f1a:	d5 03       	csrf	0x10
}
80002f1c:	2f ed       	sub	sp,-8
80002f1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f22:	00 00       	add	r0,r0
80002f24:	00 00       	add	r0,r0
80002f26:	00 08       	add	r8,r0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	28 c0       	sub	r0,-116
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	30 42       	mov	r2,4
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	29 0c       	sub	r12,-112

80002f34 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002f34:	eb cd 40 c0 	pushm	r6-r7,lr
80002f38:	20 2d       	sub	sp,8
80002f3a:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002f3c:	30 08       	mov	r8,0
80002f3e:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002f40:	e1 b6 00 00 	mfsr	r6,0x0
80002f44:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002f46:	1b 88       	ld.ub	r8,sp[0x0]
80002f48:	ea 18 ff ff 	orh	r8,0xffff
80002f4c:	e8 18 ff 80 	orl	r8,0xff80
80002f50:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002f52:	49 17       	lddpc	r7,80002f94 <pal_trx_reg_read+0x60>
80002f54:	0f 8b       	ld.ub	r11,r7[0x0]
80002f56:	fe 7c 40 00 	mov	r12,-49152
80002f5a:	f0 1f 00 10 	mcall	80002f98 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002f5e:	30 1a       	mov	r10,1
80002f60:	1a 9b       	mov	r11,sp
80002f62:	fe 7c 40 00 	mov	r12,-49152
80002f66:	f0 1f 00 0e 	mcall	80002f9c <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002f6a:	30 1a       	mov	r10,1
80002f6c:	fa cb ff f9 	sub	r11,sp,-7
80002f70:	fe 7c 40 00 	mov	r12,-49152
80002f74:	f0 1f 00 0b 	mcall	80002fa0 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002f78:	0f 8b       	ld.ub	r11,r7[0x0]
80002f7a:	fe 7c 40 00 	mov	r12,-49152
80002f7e:	f0 1f 00 0a 	mcall	80002fa4 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002f82:	e6 16 00 01 	andh	r6,0x1,COH
80002f86:	c0 21       	brne	80002f8a <pal_trx_reg_read+0x56>
80002f88:	d5 03       	csrf	0x10

	return register_value;
}
80002f8a:	1b fc       	ld.ub	r12,sp[0x7]
80002f8c:	2f ed       	sub	sp,-8
80002f8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f92:	00 00       	add	r0,r0
80002f94:	00 00       	add	r0,r0
80002f96:	00 08       	add	r8,r0
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	28 c0       	sub	r0,-116
80002f9c:	80 00       	ld.sh	r0,r0[0x0]
80002f9e:	30 42       	mov	r2,4
80002fa0:	80 00       	ld.sh	r0,r0[0x0]
80002fa2:	2f f2       	sub	r2,-1
80002fa4:	80 00       	ld.sh	r0,r0[0x0]
80002fa6:	29 0c       	sub	r12,-112

80002fa8 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fa8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002fac:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002fae:	e6 18 00 01 	andh	r8,0x1,COH
80002fb2:	c0 21       	brne	80002fb6 <sysclk_init+0xe>
      cpu_irq_enable();
80002fb4:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002fb6:	5e fc       	retal	r12

80002fb8 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002fb8:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fba:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002fbe:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002fc0:	a3 6c       	lsl	r12,0x2
80002fc2:	fe 7a 14 20 	mov	r10,-60384
80002fc6:	f8 0a 00 08 	add	r8,r12,r10
80002fca:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002fcc:	30 1e       	mov	lr,1
80002fce:	fc 0b 09 4b 	lsl	r11,lr,r11
80002fd2:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002fd4:	32 0a       	mov	r10,32
80002fd6:	ea 1a aa 00 	orh	r10,0xaa00
80002fda:	14 0c       	add	r12,r10
80002fdc:	fe 7a 14 00 	mov	r10,-60416
80002fe0:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002fe4:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002fe6:	12 98       	mov	r8,r9
80002fe8:	e6 18 00 01 	andh	r8,0x1,COH
80002fec:	c0 21       	brne	80002ff0 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002fee:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002ff0:	d8 02       	popm	pc

80002ff2 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002ff2:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002ff6:	58 0a       	cp.w	r10,0
80002ff8:	c0 61       	brne	80003004 <spi_read_packet+0x12>
80002ffa:	c2 28       	rjmp	8000303e <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002ffc:	58 08       	cp.w	r8,0
80002ffe:	c1 d0       	breq	80003038 <spi_read_packet+0x46>
80003000:	20 18       	sub	r8,1
80003002:	c0 68       	rjmp	8000300e <spi_read_packet+0x1c>
80003004:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003008:	e0 67 00 ff 	mov	r7,255
8000300c:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8000300e:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80003010:	e2 19 00 02 	andl	r9,0x2,COH
80003014:	cf 40       	breq	80002ffc <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003016:	99 37       	st.w	r12[0xc],r7
80003018:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
8000301a:	c0 48       	rjmp	80003022 <spi_read_packet+0x30>
			if (!timeout--) {
8000301c:	58 08       	cp.w	r8,0
8000301e:	c0 d0       	breq	80003038 <spi_read_packet+0x46>
80003020:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80003022:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80003024:	e2 19 02 01 	andl	r9,0x201,COH
80003028:	e0 49 02 01 	cp.w	r9,513
8000302c:	cf 81       	brne	8000301c <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8000302e:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80003030:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80003032:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80003034:	ce c1       	brne	8000300c <spi_read_packet+0x1a>
80003036:	c0 48       	rjmp	8000303e <spi_read_packet+0x4c>
80003038:	3f dc       	mov	r12,-3
8000303a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000303e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003042 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80003042:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80003044:	58 0a       	cp.w	r10,0
80003046:	c0 81       	brne	80003056 <spi_write_packet+0x14>
80003048:	c1 28       	rjmp	8000306c <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
8000304a:	58 08       	cp.w	r8,0
8000304c:	c0 31       	brne	80003052 <spi_write_packet+0x10>
8000304e:	3f dc       	mov	r12,-3
80003050:	d8 02       	popm	pc
80003052:	20 18       	sub	r8,1
80003054:	c0 48       	rjmp	8000305c <spi_write_packet+0x1a>
80003056:	e0 6e 3a 98 	mov	lr,15000
8000305a:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8000305c:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
8000305e:	e2 19 00 02 	andl	r9,0x2,COH
80003062:	cf 40       	breq	8000304a <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003064:	17 38       	ld.ub	r8,r11++
80003066:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80003068:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
8000306a:	cf 81       	brne	8000305a <spi_write_packet+0x18>
8000306c:	d8 0a       	popm	pc,r12=0
8000306e:	d7 03       	nop
	...

8000307c <getStateAT86RF212>:
	
	else
		sprintf(temps,"%s","X");
}
uint8_t getStateAT86RF212(void)
{
8000307c:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
8000307e:	30 1c       	mov	r12,1
80003080:	f0 1f 00 03 	mcall	8000308c <getStateAT86RF212+0x10>
}
80003084:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80003088:	d8 02       	popm	pc
8000308a:	00 00       	add	r0,r0
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	2f 34       	sub	r4,-13

80003090 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80003090:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80003092:	30 0b       	mov	r11,0
80003094:	fe 7c 5c 00 	mov	r12,-41984
80003098:	f0 1f 00 17 	mcall	800030f4 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
8000309c:	49 78       	lddpc	r8,800030f8 <tc_irq+0x68>
8000309e:	70 09       	ld.w	r9,r8[0x0]
800030a0:	2f f9       	sub	r9,-1
800030a2:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
800030a4:	70 08       	ld.w	r8,r8[0x0]
800030a6:	59 38       	cp.w	r8,19
800030a8:	e0 8b 00 0c 	brhi	800030c0 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
800030ac:	32 9c       	mov	r12,41
800030ae:	f0 1f 00 14 	mcall	800030fc <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
800030b2:	30 4c       	mov	r12,4
800030b4:	f0 1f 00 12 	mcall	800030fc <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
800030b8:	30 bc       	mov	r12,11
800030ba:	f0 1f 00 11 	mcall	800030fc <tc_irq+0x6c>
		return;
800030be:	c1 98       	rjmp	800030f0 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
800030c0:	48 e8       	lddpc	r8,800030f8 <tc_irq+0x68>
800030c2:	70 08       	ld.w	r8,r8[0x0]
800030c4:	59 58       	cp.w	r8,21
800030c6:	c0 41       	brne	800030ce <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
800030c8:	32 9c       	mov	r12,41
800030ca:	f0 1f 00 0d 	mcall	800030fc <tc_irq+0x6c>
		
	if (tc_tick == 22)
800030ce:	48 b8       	lddpc	r8,800030f8 <tc_irq+0x68>
800030d0:	70 08       	ld.w	r8,r8[0x0]
800030d2:	59 68       	cp.w	r8,22
800030d4:	c0 41       	brne	800030dc <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
800030d6:	30 4c       	mov	r12,4
800030d8:	f0 1f 00 09 	mcall	800030fc <tc_irq+0x6c>
	
	if (tc_tick == 23)
800030dc:	48 78       	lddpc	r8,800030f8 <tc_irq+0x68>
800030de:	70 08       	ld.w	r8,r8[0x0]
800030e0:	59 78       	cp.w	r8,23
800030e2:	c0 71       	brne	800030f0 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
800030e4:	30 bc       	mov	r12,11
800030e6:	f0 1f 00 06 	mcall	800030fc <tc_irq+0x6c>
		tc_tick = 1;
800030ea:	30 19       	mov	r9,1
800030ec:	48 38       	lddpc	r8,800030f8 <tc_irq+0x68>
800030ee:	91 09       	st.w	r8[0x0],r9
		

	
	
	
}
800030f0:	d4 02       	popm	lr
800030f2:	d6 03       	rete
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	2a b2       	sub	r2,-85
800030f8:	00 00       	add	r0,r0
800030fa:	00 24       	rsub	r4,r0
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	26 a0       	sub	r0,106

80003100 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80003100:	d4 01       	pushm	lr
80003102:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80003104:	30 0b       	mov	r11,0
80003106:	49 38       	lddpc	r8,80003150 <usart_int_handler_RS232+0x50>
80003108:	70 0c       	ld.w	r12,r8[0x0]
8000310a:	f0 1f 00 13 	mcall	80003154 <usart_int_handler_RS232+0x54>
	
	int c=0;
8000310e:	fa cb ff fc 	sub	r11,sp,-4
80003112:	30 08       	mov	r8,0
80003114:	16 d8       	st.w	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80003116:	1a 9b       	mov	r11,sp
80003118:	fe 7c 38 00 	mov	r12,-51200
8000311c:	f0 1f 00 0f 	mcall	80003158 <usart_int_handler_RS232+0x58>
80003120:	c1 51       	brne	8000314a <usart_int_handler_RS232+0x4a>
		return;

	
		cola_PC[cola_PC_nw] = (char) c;
80003122:	48 f9       	lddpc	r9,8000315c <usart_int_handler_RS232+0x5c>
80003124:	72 08       	ld.w	r8,r9[0x0]
80003126:	40 0b       	lddsp	r11,sp[0x0]
80003128:	48 ea       	lddpc	r10,80003160 <usart_int_handler_RS232+0x60>
8000312a:	f4 08 0b 0b 	st.b	r10[r8],r11
		cola_PC_nw++;	
8000312e:	2f f8       	sub	r8,-1
80003130:	93 08       	st.w	r9[0x0],r8
	
		if (cola_PC_nw >= tamano_cola)
80003132:	e0 48 00 c7 	cp.w	r8,199
80003136:	e0 8a 00 05 	brle	80003140 <usart_int_handler_RS232+0x40>
			cola_PC_nw = 0;
8000313a:	30 09       	mov	r9,0
8000313c:	48 88       	lddpc	r8,8000315c <usart_int_handler_RS232+0x5c>
8000313e:	91 09       	st.w	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003140:	30 0b       	mov	r11,0
80003142:	48 48       	lddpc	r8,80003150 <usart_int_handler_RS232+0x50>
80003144:	70 0c       	ld.w	r12,r8[0x0]
80003146:	f0 1f 00 08 	mcall	80003164 <usart_int_handler_RS232+0x64>
	return;

	
}
8000314a:	2f fd       	sub	sp,-4
8000314c:	d4 02       	popm	lr
8000314e:	d6 03       	rete
80003150:	00 00       	add	r0,r0
80003152:	00 20       	rsub	r0,r0
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	2a a0       	sub	r0,-86
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	2c 9c       	sub	r12,-55
8000315c:	00 00       	add	r0,r0
8000315e:	06 44       	or	r4,r3
80003160:	00 00       	add	r0,r0
80003162:	06 84       	andn	r4,r3
80003164:	80 00       	ld.sh	r0,r0[0x0]
80003166:	2a 8e       	sub	lr,-88

80003168 <RESET>:
	variable1=getStateAT86RF212();
//	while (getStateAT86RF212()!=CMD_RX_ON);
}

void RESET()
{
80003168:	d4 01       	pushm	lr
	RST_LOW();
8000316a:	32 8c       	mov	r12,40
8000316c:	f0 1f 00 0d 	mcall	800031a0 <RESET+0x38>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003170:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003174:	f0 ca ff b8 	sub	r10,r8,-72
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003178:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000317c:	14 38       	cp.w	r8,r10
8000317e:	e0 88 00 08 	brls	8000318e <RESET+0x26>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003182:	12 38       	cp.w	r8,r9
80003184:	fe 98 ff fa 	brls	80003178 <RESET+0x10>
80003188:	12 3a       	cp.w	r10,r9
8000318a:	c0 73       	brcs	80003198 <RESET+0x30>
8000318c:	cf 6b       	rjmp	80003178 <RESET+0x10>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000318e:	12 38       	cp.w	r8,r9
80003190:	e0 8b 00 04 	brhi	80003198 <RESET+0x30>
80003194:	12 3a       	cp.w	r10,r9
80003196:	cf 12       	brcc	80003178 <RESET+0x10>
	
	DELAY_US(RST_PULSE_WIDTH_NS);
	RST_HIGH();
80003198:	32 8c       	mov	r12,40
8000319a:	f0 1f 00 03 	mcall	800031a4 <RESET+0x3c>
	
	//delay_ms(1);
}
8000319e:	d8 02       	popm	pc
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	26 8a       	sub	r10,104
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	26 74       	sub	r4,103

800031a8 <init_AT86RF212>:
}



uint8_t init_AT86RF212(void)
{
800031a8:	eb cd 40 80 	pushm	r7,lr
	
	variable1=getStateAT86RF212();
800031ac:	f0 1f 00 26 	mcall	80003244 <init_AT86RF212+0x9c>
800031b0:	4a 67       	lddpc	r7,80003248 <init_AT86RF212+0xa0>
800031b2:	ae 8c       	st.b	r7[0x0],r12
	SLP_TR_LOW();
800031b4:	32 7c       	mov	r12,39
800031b6:	f0 1f 00 26 	mcall	8000324c <init_AT86RF212+0xa4>
	variable1=getStateAT86RF212();
800031ba:	f0 1f 00 23 	mcall	80003244 <init_AT86RF212+0x9c>
800031be:	ae 8c       	st.b	r7[0x0],r12
	RESET();
800031c0:	f0 1f 00 24 	mcall	80003250 <init_AT86RF212+0xa8>
	variable1=getStateAT86RF212();
800031c4:	f0 1f 00 20 	mcall	80003244 <init_AT86RF212+0x9c>
800031c8:	ae 8c       	st.b	r7[0x0],r12
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
800031ca:	30 3b       	mov	r11,3
800031cc:	30 2c       	mov	r12,2
800031ce:	f0 1f 00 22 	mcall	80003254 <init_AT86RF212+0xac>
	variable1=getStateAT86RF212();
800031d2:	f0 1f 00 1d 	mcall	80003244 <init_AT86RF212+0x9c>
800031d6:	ae 8c       	st.b	r7[0x0],r12
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
800031d8:	30 87       	mov	r7,8
800031da:	f0 1f 00 1b 	mcall	80003244 <init_AT86RF212+0x9c>
800031de:	ee 0c 18 00 	cp.b	r12,r7
800031e2:	cf c1       	brne	800031da <init_AT86RF212+0x32>
	pal_trx_reg_write(RG_TRX_CTRL_0, CMD_NOP); 
800031e4:	30 0b       	mov	r11,0
800031e6:	30 3c       	mov	r12,3
800031e8:	f0 1f 00 1b 	mcall	80003254 <init_AT86RF212+0xac>
//	pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz set channel ->
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);  // IRQ_RX_START && IRQ_TRX_END
800031ec:	30 cb       	mov	r11,12
800031ee:	30 ec       	mov	r12,14
800031f0:	f0 1f 00 19 	mcall	80003254 <init_AT86RF212+0xac>
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02); // AACK_PROM_MODE Promiscuous mode is enabled 
800031f4:	30 2b       	mov	r11,2
800031f6:	31 7c       	mov	r12,23
800031f8:	f0 1f 00 17 	mcall	80003254 <init_AT86RF212+0xac>
	variable2=pal_trx_reg_read(RG_XAH_CTRL_1);
800031fc:	31 7c       	mov	r12,23
800031fe:	f0 1f 00 17 	mcall	80003258 <init_AT86RF212+0xb0>
80003202:	49 78       	lddpc	r8,8000325c <init_AT86RF212+0xb4>
80003204:	b0 8c       	st.b	r8[0x0],r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003206:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000320a:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000320e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003212:	14 38       	cp.w	r8,r10
80003214:	e0 88 00 08 	brls	80003224 <init_AT86RF212+0x7c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003218:	12 38       	cp.w	r8,r9
8000321a:	fe 98 ff fa 	brls	8000320e <init_AT86RF212+0x66>
8000321e:	12 3a       	cp.w	r10,r9
80003220:	c0 73       	brcs	8000322e <init_AT86RF212+0x86>
80003222:	cf 6b       	rjmp	8000320e <init_AT86RF212+0x66>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003224:	12 38       	cp.w	r8,r9
80003226:	e0 8b 00 04 	brhi	8000322e <init_AT86RF212+0x86>
8000322a:	12 3a       	cp.w	r10,r9
8000322c:	cf 12       	brcc	8000320e <init_AT86RF212+0x66>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);// seteo el tran en RX
8000322e:	30 6b       	mov	r11,6
80003230:	30 2c       	mov	r12,2
80003232:	f0 1f 00 09 	mcall	80003254 <init_AT86RF212+0xac>
	variable1=getStateAT86RF212();
80003236:	f0 1f 00 04 	mcall	80003244 <init_AT86RF212+0x9c>
8000323a:	48 48       	lddpc	r8,80003248 <init_AT86RF212+0xa0>
8000323c:	b0 8c       	st.b	r8[0x0],r12
//	while (getStateAT86RF212()!=CMD_RX_ON);
}
8000323e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003242:	00 00       	add	r0,r0
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	30 7c       	mov	r12,7
80003248:	00 00       	add	r0,r0
8000324a:	06 81       	andn	r1,r3
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	26 8a       	sub	r10,104
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	31 68       	mov	r8,22
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	2e c8       	sub	r8,-20
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	2f 34       	sub	r4,-13
8000325c:	00 00       	add	r0,r0
8000325e:	06 82       	andn	r2,r3

80003260 <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
80003260:	eb cd 40 80 	pushm	r7,lr
80003264:	20 6d       	sub	sp,24
80003266:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80003268:	30 08       	mov	r8,0
8000326a:	ba 98       	st.b	sp[0x1],r8
8000326c:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
8000326e:	34 89       	mov	r9,72
80003270:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
80003272:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
80003274:	30 29       	mov	r9,2
80003276:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
80003278:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
8000327c:	30 18       	mov	r8,1
8000327e:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
80003282:	fa cb ff fc 	sub	r11,sp,-4
80003286:	fe 7c 44 00 	mov	r12,-48128
8000328a:	f0 1f 00 39 	mcall	8000336c <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
8000328e:	c6 61       	brne	8000335a <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
80003290:	1b 89       	ld.ub	r9,sp[0x0]
80003292:	1b 98       	ld.ub	r8,sp[0x1]
80003294:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003298:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
8000329a:	30 09       	mov	r9,0
8000329c:	f2 08 19 00 	cp.h	r8,r9
800032a0:	c0 35       	brlt	800032a6 <leer_temp+0x46>
800032a2:	30 1b       	mov	r11,1
800032a4:	c0 58       	rjmp	800032ae <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
800032a6:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800032aa:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
800032ae:	4b 19       	lddpc	r9,80003370 <leer_temp+0x110>
800032b0:	13 89       	ld.ub	r9,r9[0x0]
800032b2:	30 1a       	mov	r10,1
800032b4:	f4 09 18 00 	cp.b	r9,r10
800032b8:	c1 c0       	breq	800032f0 <leer_temp+0x90>
800032ba:	58 09       	cp.w	r9,0
800032bc:	c0 b0       	breq	800032d2 <leer_temp+0x72>
800032be:	30 2a       	mov	r10,2
800032c0:	f4 09 18 00 	cp.b	r9,r10
800032c4:	c2 50       	breq	8000330e <leer_temp+0xae>
800032c6:	30 3a       	mov	r10,3
800032c8:	f4 09 18 00 	cp.b	r9,r10
800032cc:	c3 00       	breq	8000332c <leer_temp+0xcc>
800032ce:	30 0c       	mov	r12,0
800032d0:	c3 c8       	rjmp	80003348 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
800032d2:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
800032d6:	5c 6b       	casts.b	r11
800032d8:	f0 0b 02 4c 	mul	r12,r8,r11
800032dc:	f0 1f 00 26 	mcall	80003374 <leer_temp+0x114>
800032e0:	30 08       	mov	r8,0
800032e2:	fc 19 3f e0 	movh	r9,0x3fe0
800032e6:	f0 1f 00 25 	mcall	80003378 <leer_temp+0x118>
800032ea:	f0 1f 00 25 	mcall	8000337c <leer_temp+0x11c>
			break;
800032ee:	c2 d8       	rjmp	80003348 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
800032f0:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
800032f4:	5c 6b       	casts.b	r11
800032f6:	f0 0b 02 4c 	mul	r12,r8,r11
800032fa:	f0 1f 00 1f 	mcall	80003374 <leer_temp+0x114>
800032fe:	30 08       	mov	r8,0
80003300:	fc 19 3f d0 	movh	r9,0x3fd0
80003304:	f0 1f 00 1d 	mcall	80003378 <leer_temp+0x118>
80003308:	f0 1f 00 1d 	mcall	8000337c <leer_temp+0x11c>
			break;
8000330c:	c1 e8       	rjmp	80003348 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
8000330e:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
80003312:	5c 6b       	casts.b	r11
80003314:	f0 0b 02 4c 	mul	r12,r8,r11
80003318:	f0 1f 00 17 	mcall	80003374 <leer_temp+0x114>
8000331c:	30 08       	mov	r8,0
8000331e:	fc 19 3f c0 	movh	r9,0x3fc0
80003322:	f0 1f 00 16 	mcall	80003378 <leer_temp+0x118>
80003326:	f0 1f 00 16 	mcall	8000337c <leer_temp+0x11c>
			break;
8000332a:	c0 f8       	rjmp	80003348 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
8000332c:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
80003330:	5c 6b       	casts.b	r11
80003332:	f0 0b 02 4c 	mul	r12,r8,r11
80003336:	f0 1f 00 10 	mcall	80003374 <leer_temp+0x114>
8000333a:	30 08       	mov	r8,0
8000333c:	fc 19 3f b0 	movh	r9,0x3fb0
80003340:	f0 1f 00 0e 	mcall	80003378 <leer_temp+0x118>
80003344:	f0 1f 00 0e 	mcall	8000337c <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
80003348:	f0 1f 00 0e 	mcall	80003380 <leer_temp+0x120>
8000334c:	bb 2b       	st.d	--sp,r10
8000334e:	48 eb       	lddpc	r11,80003384 <leer_temp+0x124>
80003350:	0e 9c       	mov	r12,r7
80003352:	f0 1f 00 0e 	mcall	80003388 <leer_temp+0x128>
80003356:	2f ed       	sub	sp,-8
80003358:	c0 68       	rjmp	80003364 <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
8000335a:	30 2a       	mov	r10,2
8000335c:	48 cb       	lddpc	r11,8000338c <leer_temp+0x12c>
8000335e:	0e 9c       	mov	r12,r7
80003360:	f0 1f 00 0c 	mcall	80003390 <leer_temp+0x130>
}
80003364:	2f ad       	sub	sp,-24
80003366:	e3 cd 80 80 	ldm	sp++,r7,pc
8000336a:	00 00       	add	r0,r0
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	22 30       	sub	r0,35
80003370:	00 00       	add	r0,r0
80003372:	00 2e       	rsub	lr,r0
80003374:	80 00       	ld.sh	r0,r0[0x0]
80003376:	3b 00       	mov	r0,-80
80003378:	80 00       	ld.sh	r0,r0[0x0]
8000337a:	39 24       	mov	r4,-110
8000337c:	80 00       	ld.sh	r0,r0[0x0]
8000337e:	3c 40       	mov	r0,-60
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	3b e0       	mov	r0,-66
80003384:	80 00       	ld.sh	r0,r0[0x0]
80003386:	97 3c       	st.w	r11[0xc],r12
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	3e 20       	mov	r0,-30
8000338c:	80 00       	ld.sh	r0,r0[0x0]
8000338e:	97 44       	st.w	r11[0x10],r4
80003390:	80 00       	ld.sh	r0,r0[0x0]
80003392:	3c ca       	mov	r10,-52

80003394 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003394:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003396:	18 9b       	mov	r11,r12
80003398:	30 2c       	mov	r12,2
8000339a:	f0 1f 00 02 	mcall	800033a0 <sysclk_enable_pba_module+0xc>
}
8000339e:	d8 02       	popm	pc
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	2f b8       	sub	r8,-5

800033a4 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800033a4:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800033a6:	30 bc       	mov	r12,11
800033a8:	f0 1f 00 05 	mcall	800033bc <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
800033ac:	e0 7a c1 38 	mov	r10,115000
800033b0:	48 4b       	lddpc	r11,800033c0 <rs_232_init_usart+0x1c>
800033b2:	fe 7c 38 00 	mov	r12,-51200
800033b6:	f0 1f 00 04 	mcall	800033c4 <rs_232_init_usart+0x20>
	return estado_usart2;
}
800033ba:	d8 02       	popm	pc
800033bc:	80 00       	ld.sh	r0,r0[0x0]
800033be:	33 94       	mov	r4,57
800033c0:	00 00       	add	r0,r0
800033c2:	00 0c       	add	r12,r0
800033c4:	80 00       	ld.sh	r0,r0[0x0]
800033c6:	2d 10       	sub	r0,-47

800033c8 <rs_232_init_pins>:
	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
}

void rs_232_init_pins(void)
{
800033c8:	d4 01       	pushm	lr
800033ca:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
800033cc:	48 88       	lddpc	r8,800033ec <rs_232_init_pins+0x24>
800033ce:	1a 9c       	mov	r12,sp
800033d0:	70 09       	ld.w	r9,r8[0x0]
800033d2:	50 09       	stdsp	sp[0x0],r9
800033d4:	70 19       	ld.w	r9,r8[0x4]
800033d6:	50 19       	stdsp	sp[0x4],r9
800033d8:	70 29       	ld.w	r9,r8[0x8]
800033da:	50 29       	stdsp	sp[0x8],r9
800033dc:	70 38       	ld.w	r8,r8[0xc]
800033de:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
800033e0:	30 2b       	mov	r11,2
800033e2:	f0 1f 00 04 	mcall	800033f0 <rs_232_init_pins+0x28>
}
800033e6:	2f cd       	sub	sp,-16
800033e8:	d8 02       	popm	pc
800033ea:	00 00       	add	r0,r0
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	97 18       	st.w	r11[0x4],r8
800033f0:	80 00       	ld.sh	r0,r0[0x0]
800033f2:	25 8c       	sub	r12,88

800033f4 <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
800033f4:	d4 01       	pushm	lr
800033f6:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
800033f8:	48 88       	lddpc	r8,80003418 <init_i2c_pins+0x24>
800033fa:	1a 9c       	mov	r12,sp
800033fc:	70 09       	ld.w	r9,r8[0x0]
800033fe:	50 09       	stdsp	sp[0x0],r9
80003400:	70 19       	ld.w	r9,r8[0x4]
80003402:	50 19       	stdsp	sp[0x4],r9
80003404:	70 29       	ld.w	r9,r8[0x8]
80003406:	50 29       	stdsp	sp[0x8],r9
80003408:	70 38       	ld.w	r8,r8[0xc]
8000340a:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
8000340c:	30 2b       	mov	r11,2
8000340e:	f0 1f 00 04 	mcall	8000341c <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
80003412:	2f cd       	sub	sp,-16
80003414:	d8 02       	popm	pc
80003416:	00 00       	add	r0,r0
80003418:	80 00       	ld.sh	r0,r0[0x0]
8000341a:	98 80       	ld.uh	r0,r12[0x0]
8000341c:	80 00       	ld.sh	r0,r0[0x0]
8000341e:	25 8c       	sub	r12,88

80003420 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
80003420:	d4 01       	pushm	lr
80003422:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
80003424:	48 d8       	lddpc	r8,80003458 <spi_init_pins+0x38>
80003426:	1a 9c       	mov	r12,sp
80003428:	70 09       	ld.w	r9,r8[0x0]
8000342a:	50 09       	stdsp	sp[0x0],r9
8000342c:	70 19       	ld.w	r9,r8[0x4]
8000342e:	50 19       	stdsp	sp[0x4],r9
80003430:	70 29       	ld.w	r9,r8[0x8]
80003432:	50 29       	stdsp	sp[0x8],r9
80003434:	70 39       	ld.w	r9,r8[0xc]
80003436:	50 39       	stdsp	sp[0xc],r9
80003438:	fa c9 ff f0 	sub	r9,sp,-16
8000343c:	2f 08       	sub	r8,-16
8000343e:	70 0a       	ld.w	r10,r8[0x0]
80003440:	93 0a       	st.w	r9[0x0],r10
80003442:	70 1a       	ld.w	r10,r8[0x4]
80003444:	93 1a       	st.w	r9[0x4],r10
80003446:	70 2a       	ld.w	r10,r8[0x8]
80003448:	93 2a       	st.w	r9[0x8],r10
8000344a:	70 38       	ld.w	r8,r8[0xc]
8000344c:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
8000344e:	30 4b       	mov	r11,4
80003450:	f0 1f 00 03 	mcall	8000345c <spi_init_pins+0x3c>
}
80003454:	2f 8d       	sub	sp,-32
80003456:	d8 02       	popm	pc
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	98 90       	ld.uh	r0,r12[0x2]
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	25 8c       	sub	r12,88

80003460 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
80003460:	d4 01       	pushm	lr
//Configuracion de los pines para SPI
	spi_init_pins();
80003462:	f0 1f 00 0a 	mcall	80003488 <init_rf_pins+0x28>

	//PIN para interrupcion externa RF
	
	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
80003466:	30 1b       	mov	r11,1
80003468:	30 dc       	mov	r12,13
8000346a:	f0 1f 00 09 	mcall	8000348c <init_rf_pins+0x2c>
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
8000346e:	30 dc       	mov	r12,13
80003470:	f0 1f 00 08 	mcall	80003490 <init_rf_pins+0x30>

	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003474:	30 3b       	mov	r11,3
80003476:	32 8c       	mov	r12,40
80003478:	f0 1f 00 07 	mcall	80003494 <init_rf_pins+0x34>
	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000347c:	30 3b       	mov	r11,3
8000347e:	32 7c       	mov	r12,39
80003480:	f0 1f 00 05 	mcall	80003494 <init_rf_pins+0x34>
}
80003484:	d8 02       	popm	pc
80003486:	00 00       	add	r0,r0
80003488:	80 00       	ld.sh	r0,r0[0x0]
8000348a:	34 20       	mov	r0,66
8000348c:	80 00       	ld.sh	r0,r0[0x0]
8000348e:	26 fc       	sub	r12,111
80003490:	80 00       	ld.sh	r0,r0[0x0]
80003492:	27 42       	sub	r2,116
80003494:	80 00       	ld.sh	r0,r0[0x0]
80003496:	25 bc       	sub	r12,91

80003498 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
80003498:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
8000349a:	30 5b       	mov	r11,5
8000349c:	30 4c       	mov	r12,4
8000349e:	f0 1f 00 06 	mcall	800034b4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800034a2:	30 5b       	mov	r11,5
800034a4:	30 bc       	mov	r12,11
800034a6:	f0 1f 00 04 	mcall	800034b4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800034aa:	30 5b       	mov	r11,5
800034ac:	32 9c       	mov	r12,41
800034ae:	f0 1f 00 02 	mcall	800034b4 <led_init_pins+0x1c>
}
800034b2:	d8 02       	popm	pc
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	25 bc       	sub	r12,91

800034b8 <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
800034b8:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800034ba:	18 9b       	mov	r11,r12
800034bc:	fe 7c 38 00 	mov	r12,-51200
800034c0:	f0 1f 00 02 	mcall	800034c8 <escribir_linea_pc+0x10>
}
800034c4:	d8 02       	popm	pc
800034c6:	00 00       	add	r0,r0
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	2c c0       	sub	r0,-52

800034cc <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
800034cc:	d4 01       	pushm	lr
		uint8_t IRQ_STATUS;
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
800034ce:	30 2b       	mov	r11,2
800034d0:	fe 7c 24 00 	mov	r12,-56320
800034d4:	f0 1f 00 0c 	mcall	80003504 <eic_int_handler2+0x38>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
800034d8:	30 fc       	mov	r12,15
800034da:	f0 1f 00 0c 	mcall	80003508 <eic_int_handler2+0x3c>
		switch (IRQ_STATUS)
800034de:	30 48       	mov	r8,4
800034e0:	f0 0c 18 00 	cp.b	r12,r8
800034e4:	c0 90       	breq	800034f6 <eic_int_handler2+0x2a>
800034e6:	30 88       	mov	r8,8
800034e8:	f0 0c 18 00 	cp.b	r12,r8
800034ec:	c0 91       	brne	800034fe <eic_int_handler2+0x32>
		{
			case TRX_IRQ_TRX_END:
				escribir_linea_pc("Trama enviada\r\n");
800034ee:	48 8c       	lddpc	r12,8000350c <eic_int_handler2+0x40>
800034f0:	f0 1f 00 08 	mcall	80003510 <eic_int_handler2+0x44>
			break;
800034f4:	c0 58       	rjmp	800034fe <eic_int_handler2+0x32>
			case TRX_IRQ_RX_START:
				escribir_linea_pc(rxTrama()); // creo q se tendria que leer la interrupcion de la SPI
800034f6:	f0 1f 00 08 	mcall	80003514 <eic_int_handler2+0x48>
800034fa:	f0 1f 00 06 	mcall	80003510 <eic_int_handler2+0x44>
			break;
		}
}
800034fe:	d4 02       	popm	lr
80003500:	d6 03       	rete
80003502:	00 00       	add	r0,r0
80003504:	80 00       	ld.sh	r0,r0[0x0]
80003506:	24 dc       	sub	r12,77
80003508:	80 00       	ld.sh	r0,r0[0x0]
8000350a:	2f 34       	sub	r4,-13
8000350c:	80 00       	ld.sh	r0,r0[0x0]
8000350e:	97 48       	st.w	r11[0x10],r8
80003510:	80 00       	ld.sh	r0,r0[0x0]
80003512:	34 b8       	mov	r8,75
80003514:	80 00       	ld.sh	r0,r0[0x0]
80003516:	2e 1c       	sub	r12,-31

80003518 <estadoPorPc>:
	DELAY_US(RST_PULSE_WIDTH_NS);
	RST_HIGH();
	
	//delay_ms(1);
}
void estadoPorPc(uint8_t state){
80003518:	d4 01       	pushm	lr
	switch (state){
8000351a:	30 68       	mov	r8,6
8000351c:	f0 0c 18 00 	cp.b	r12,r8
80003520:	c1 30       	breq	80003546 <estadoPorPc+0x2e>
80003522:	e0 8b 00 05 	brhi	8000352c <estadoPorPc+0x14>
80003526:	58 0c       	cp.w	r12,0
80003528:	c1 b1       	brne	8000355e <estadoPorPc+0x46>
8000352a:	c0 a8       	rjmp	8000353e <estadoPorPc+0x26>
8000352c:	30 88       	mov	r8,8
8000352e:	f0 0c 18 00 	cp.b	r12,r8
80003532:	c0 e0       	breq	8000354e <estadoPorPc+0x36>
80003534:	31 f8       	mov	r8,31
80003536:	f0 0c 18 00 	cp.b	r12,r8
8000353a:	c1 21       	brne	8000355e <estadoPorPc+0x46>
8000353c:	c0 d8       	rjmp	80003556 <estadoPorPc+0x3e>
		case P_ON:
		escribir_linea_pc("AT86RF212 en estado ON");
8000353e:	48 bc       	lddpc	r12,80003568 <estadoPorPc+0x50>
80003540:	f0 1f 00 0b 	mcall	8000356c <estadoPorPc+0x54>
		break;
80003544:	d8 02       	popm	pc
		case RX_ON:
		escribir_linea_pc("AT86RF212 en estado RX");
80003546:	48 bc       	lddpc	r12,80003570 <estadoPorPc+0x58>
80003548:	f0 1f 00 09 	mcall	8000356c <estadoPorPc+0x54>
		break;
8000354c:	d8 02       	popm	pc
		case TRX_OFF:
		escribir_linea_pc("AT86RF212 en estado OFF");
8000354e:	48 ac       	lddpc	r12,80003574 <estadoPorPc+0x5c>
80003550:	f0 1f 00 07 	mcall	8000356c <estadoPorPc+0x54>
		break;
80003554:	d8 02       	popm	pc
		case STATE_TRANSITION_IN_PROGRESS:
		escribir_linea_pc(" : ( ");
80003556:	48 9c       	lddpc	r12,80003578 <estadoPorPc+0x60>
80003558:	f0 1f 00 05 	mcall	8000356c <estadoPorPc+0x54>
		break;
8000355c:	d8 02       	popm	pc
		default:
		escribir_linea_pc("estado no contemplado");
8000355e:	48 8c       	lddpc	r12,8000357c <estadoPorPc+0x64>
80003560:	f0 1f 00 03 	mcall	8000356c <estadoPorPc+0x54>
80003564:	d8 02       	popm	pc
80003566:	00 00       	add	r0,r0
80003568:	80 00       	ld.sh	r0,r0[0x0]
8000356a:	97 58       	st.w	r11[0x14],r8
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	34 b8       	mov	r8,75
80003570:	80 00       	ld.sh	r0,r0[0x0]
80003572:	97 70       	st.w	r11[0x1c],r0
80003574:	80 00       	ld.sh	r0,r0[0x0]
80003576:	97 88       	st.w	r11[0x20],r8
80003578:	80 00       	ld.sh	r0,r0[0x0]
8000357a:	97 a0       	st.w	r11[0x28],r0
8000357c:	80 00       	ld.sh	r0,r0[0x0]
8000357e:	97 a8       	st.w	r11[0x28],r8

80003580 <probandoAT86RF212>:
		break;
	}
}
void probandoAT86RF212()
{
80003580:	d4 01       	pushm	lr
	estadoPorPc(getStateAT86RF212());
80003582:	f0 1f 00 0e 	mcall	800035b8 <probandoAT86RF212+0x38>
80003586:	f0 1f 00 0e 	mcall	800035bc <probandoAT86RF212+0x3c>
	RESET(); // lo mandamos a OFF
8000358a:	f0 1f 00 0e 	mcall	800035c0 <probandoAT86RF212+0x40>
	estadoPorPc(getStateAT86RF212()); // deberia ser off
8000358e:	f0 1f 00 0b 	mcall	800035b8 <probandoAT86RF212+0x38>
80003592:	f0 1f 00 0b 	mcall	800035bc <probandoAT86RF212+0x3c>
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); // 
80003596:	30 6b       	mov	r11,6
80003598:	30 2c       	mov	r12,2
8000359a:	f0 1f 00 0b 	mcall	800035c4 <probandoAT86RF212+0x44>
	estadoPorPc(getStateAT86RF212()); // deberia dar on
8000359e:	f0 1f 00 07 	mcall	800035b8 <probandoAT86RF212+0x38>
800035a2:	f0 1f 00 07 	mcall	800035bc <probandoAT86RF212+0x3c>
	pal_trx_reg_write(RG_TRX_STATE,CMD_PLL_ON); // 
800035a6:	30 9b       	mov	r11,9
800035a8:	30 2c       	mov	r12,2
800035aa:	f0 1f 00 07 	mcall	800035c4 <probandoAT86RF212+0x44>
	estadoPorPc(getStateAT86RF212()); // deberia dar PLL
800035ae:	f0 1f 00 03 	mcall	800035b8 <probandoAT86RF212+0x38>
800035b2:	f0 1f 00 03 	mcall	800035bc <probandoAT86RF212+0x3c>
}
800035b6:	d8 02       	popm	pc
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	30 7c       	mov	r12,7
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	35 18       	mov	r8,81
800035c0:	80 00       	ld.sh	r0,r0[0x0]
800035c2:	31 68       	mov	r8,22
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	2e c8       	sub	r8,-20

800035c8 <txTramaManual>:
	variable1=getStateAT86RF212();
	return variable1;
}

uint8_t txTramaManual(uint8_t *data)
{
800035c8:	eb cd 40 80 	pushm	r7,lr
800035cc:	18 97       	mov	r7,r12
	uint8_t state = getStateAT86RF212();
800035ce:	f0 1f 00 15 	mcall	80003620 <txTramaManual+0x58>
	if (state==CMD_RX_ON) {
800035d2:	30 68       	mov	r8,6
800035d4:	f0 0c 18 00 	cp.b	r12,r8
800035d8:	c1 f1       	brne	80003616 <txTramaManual+0x4e>
		DISABLE_TRX_IRQ();
800035da:	30 dc       	mov	r12,13
800035dc:	f0 1f 00 12 	mcall	80003624 <txTramaManual+0x5c>
		
		variable1=getStateAT86RF212();
800035e0:	f0 1f 00 10 	mcall	80003620 <txTramaManual+0x58>
800035e4:	49 18       	lddpc	r8,80003628 <txTramaManual+0x60>
800035e6:	b0 8c       	st.b	r8[0x0],r12
		escribir_linea_pc("AT86RF por transmitir...");	
800035e8:	49 1c       	lddpc	r12,8000362c <txTramaManual+0x64>
800035ea:	f0 1f 00 12 	mcall	80003630 <txTramaManual+0x68>
		pal_trx_reg_write(RG_TRX_STATE,CMD_TX_START); //
800035ee:	30 2b       	mov	r11,2
800035f0:	16 9c       	mov	r12,r11
800035f2:	f0 1f 00 11 	mcall	80003634 <txTramaManual+0x6c>
		estadoPorPc(getStateAT86RF212());
800035f6:	f0 1f 00 0b 	mcall	80003620 <txTramaManual+0x58>
800035fa:	f0 1f 00 10 	mcall	80003638 <txTramaManual+0x70>
		pal_trx_frame_write(data,data[0] - LENGTH_FIELD_LEN);
800035fe:	0f 8b       	ld.ub	r11,r7[0x0]
80003600:	20 1b       	sub	r11,1
80003602:	5c 5b       	castu.b	r11
80003604:	0e 9c       	mov	r12,r7
80003606:	f0 1f 00 0e 	mcall	8000363c <txTramaManual+0x74>
		ENABLE_TRX_IRQ();
8000360a:	30 1b       	mov	r11,1
8000360c:	30 dc       	mov	r12,13
8000360e:	f0 1f 00 0d 	mcall	80003640 <txTramaManual+0x78>
80003612:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		escribir_linea_pc(" no se puede enviar la trama \n");
80003616:	48 cc       	lddpc	r12,80003644 <txTramaManual+0x7c>
80003618:	f0 1f 00 06 	mcall	80003630 <txTramaManual+0x68>
	}
}
8000361c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003620:	80 00       	ld.sh	r0,r0[0x0]
80003622:	30 7c       	mov	r12,7
80003624:	80 00       	ld.sh	r0,r0[0x0]
80003626:	27 2c       	sub	r12,114
80003628:	00 00       	add	r0,r0
8000362a:	06 81       	andn	r1,r3
8000362c:	80 00       	ld.sh	r0,r0[0x0]
8000362e:	97 c0       	st.w	r11[0x30],r0
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	34 b8       	mov	r8,75
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	2e c8       	sub	r8,-20
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	35 18       	mov	r8,81
8000363c:	80 00       	ld.sh	r0,r0[0x0]
8000363e:	2e 64       	sub	r4,-26
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	26 fc       	sub	r12,111
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	97 dc       	st.w	r11[0x34],r12

80003648 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003648:	d4 01       	pushm	lr
8000364a:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
8000364c:	30 eb       	mov	r11,14
8000364e:	30 2c       	mov	r12,2
80003650:	f0 1f 00 0e 	mcall	80003688 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
80003654:	e0 78 c1 38 	mov	r8,115000
80003658:	50 08       	stdsp	sp[0x0],r8
8000365a:	e0 68 27 10 	mov	r8,10000
8000365e:	50 18       	stdsp	sp[0x4],r8
80003660:	34 88       	mov	r8,72
80003662:	50 28       	stdsp	sp[0x8],r8
80003664:	30 08       	mov	r8,0
80003666:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
8000366a:	1a 9b       	mov	r11,sp
8000366c:	fe 7c 44 00 	mov	r12,-48128
80003670:	f0 1f 00 07 	mcall	8000368c <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003674:	c0 51       	brne	8000367e <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
80003676:	48 7c       	lddpc	r12,80003690 <init_i2c_module+0x48>
80003678:	f0 1f 00 07 	mcall	80003694 <init_i2c_module+0x4c>
8000367c:	c0 48       	rjmp	80003684 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
8000367e:	48 7c       	lddpc	r12,80003698 <init_i2c_module+0x50>
80003680:	f0 1f 00 05 	mcall	80003694 <init_i2c_module+0x4c>
	}
} 
80003684:	2f cd       	sub	sp,-16
80003686:	d8 02       	popm	pc
80003688:	80 00       	ld.sh	r0,r0[0x0]
8000368a:	2f b8       	sub	r8,-5
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	23 40       	sub	r0,52
80003690:	80 00       	ld.sh	r0,r0[0x0]
80003692:	97 fc       	st.w	r11[0x3c],r12
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	34 b8       	mov	r8,75
80003698:	80 00       	ld.sh	r0,r0[0x0]
8000369a:	98 10       	ld.sh	r0,r12[0x2]

8000369c <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
8000369c:	eb cd 40 e0 	pushm	r5-r7,lr
800036a0:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800036a2:	4a 48       	lddpc	r8,80003730 <spi_init_module+0x94>
800036a4:	1a 95       	mov	r5,sp
800036a6:	70 09       	ld.w	r9,r8[0x0]
800036a8:	50 09       	stdsp	sp[0x0],r9
800036aa:	70 19       	ld.w	r9,r8[0x4]
800036ac:	50 19       	stdsp	sp[0x4],r9
800036ae:	70 29       	ld.w	r9,r8[0x8]
800036b0:	50 29       	stdsp	sp[0x8],r9
800036b2:	70 38       	ld.w	r8,r8[0xc]
800036b4:	50 38       	stdsp	sp[0xc],r8
800036b6:	30 db       	mov	r11,13
800036b8:	30 2c       	mov	r12,2
800036ba:	f0 1f 00 1f 	mcall	80003734 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800036be:	fe 77 40 00 	mov	r7,-49152
800036c2:	e0 68 00 80 	mov	r8,128
800036c6:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800036c8:	6e 18       	ld.w	r8,r7[0x4]
800036ca:	30 19       	mov	r9,1
800036cc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800036d0:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
800036d2:	6e 18       	ld.w	r8,r7[0x4]
800036d4:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800036d8:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
800036da:	6e 18       	ld.w	r8,r7[0x4]
800036dc:	30 06       	mov	r6,0
800036de:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
800036e2:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
800036e4:	6e 18       	ld.w	r8,r7[0x4]
800036e6:	30 f9       	mov	r9,15
800036e8:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800036ec:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
800036ee:	6e 18       	ld.w	r8,r7[0x4]
800036f0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
800036f4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
800036f6:	6e 18       	ld.w	r8,r7[0x4]
800036f8:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
800036fc:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
800036fe:	6e 18       	ld.w	r8,r7[0x4]
80003700:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003704:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
80003706:	30 38       	mov	r8,3
80003708:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
8000370a:	e0 7a c1 38 	mov	r10,115000
8000370e:	1a 9b       	mov	r11,sp
80003710:	0e 9c       	mov	r12,r7
80003712:	f0 1f 00 0a 	mcall	80003738 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
80003716:	0c 99       	mov	r9,r6
80003718:	0c 9a       	mov	r10,r6
8000371a:	0c 9b       	mov	r11,r6
8000371c:	0e 9c       	mov	r12,r7
8000371e:	f0 1f 00 08 	mcall	8000373c <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
80003722:	0e 9c       	mov	r12,r7
80003724:	f0 1f 00 07 	mcall	80003740 <spi_init_module+0xa4>
}
80003728:	2f cd       	sub	sp,-16
8000372a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000372e:	00 00       	add	r0,r0
80003730:	80 00       	ld.sh	r0,r0[0x0]
80003732:	97 2c       	st.w	r11[0x8],r12
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	2f b8       	sub	r8,-5
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	29 34       	sub	r4,-109
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	28 94       	sub	r4,-119
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	29 ec       	sub	r12,-98

80003744 <main>:
	estadoPorPc(getStateAT86RF212()); // deberia dar on
	pal_trx_reg_write(RG_TRX_STATE,CMD_PLL_ON); // 
	estadoPorPc(getStateAT86RF212()); // deberia dar PLL
}
int main (void)
{
80003744:	d4 31       	pushm	r0-r7,lr
80003746:	20 3d       	sub	sp,12
	char temps[10] = "\0";
80003748:	4c d8       	lddpc	r8,8000387c <main+0x138>
8000374a:	90 08       	ld.sh	r8,r8[0x0]
8000374c:	ba 08       	st.h	sp[0x0],r8
8000374e:	30 8a       	mov	r10,8
80003750:	30 0b       	mov	r11,0
80003752:	fa cc ff fe 	sub	r12,sp,-2
80003756:	f0 1f 00 4b 	mcall	80003880 <main+0x13c>
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
8000375a:	f0 1f 00 4b 	mcall	80003884 <main+0x140>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
8000375e:	f0 1f 00 4b 	mcall	80003888 <main+0x144>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
80003762:	f0 1f 00 4b 	mcall	8000388c <main+0x148>
	
	//Configuracion pins para RF
	init_rf_pins();
80003766:	f0 1f 00 4b 	mcall	80003890 <main+0x14c>
	
	//Inicializacion del SPI
	spi_init_module();
8000376a:	f0 1f 00 4b 	mcall	80003894 <main+0x150>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
8000376e:	f0 1f 00 4b 	mcall	80003898 <main+0x154>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
80003772:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003774:	f0 1f 00 4a 	mcall	8000389c <main+0x158>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003778:	30 0a       	mov	r10,0
8000377a:	e0 6b 02 20 	mov	r11,544
8000377e:	4c 9c       	lddpc	r12,800038a0 <main+0x15c>
80003780:	f0 1f 00 49 	mcall	800038a4 <main+0x160>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
80003784:	30 2a       	mov	r10,2
80003786:	e0 6b 01 61 	mov	r11,353
8000378a:	4c 8c       	lddpc	r12,800038a8 <main+0x164>
8000378c:	f0 1f 00 46 	mcall	800038a4 <main+0x160>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003790:	30 3a       	mov	r10,3
80003792:	e0 6b 03 40 	mov	r11,832
80003796:	4c 6c       	lddpc	r12,800038ac <main+0x168>
80003798:	f0 1f 00 43 	mcall	800038a4 <main+0x160>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
8000379c:	30 1a       	mov	r10,1
8000379e:	4c 5b       	lddpc	r11,800038b0 <main+0x16c>
800037a0:	fe 7c 24 00 	mov	r12,-56320
800037a4:	f0 1f 00 44 	mcall	800038b4 <main+0x170>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
800037a8:	30 2b       	mov	r11,2
800037aa:	fe 7c 24 00 	mov	r12,-56320
800037ae:	f0 1f 00 43 	mcall	800038b8 <main+0x174>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
800037b2:	30 2b       	mov	r11,2
800037b4:	fe 7c 24 00 	mov	r12,-56320
800037b8:	f0 1f 00 41 	mcall	800038bc <main+0x178>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
800037bc:	30 19       	mov	r9,1
800037be:	fe 78 38 00 	mov	r8,-51200
800037c2:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
800037c4:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
800037c6:	4b f8       	lddpc	r8,800038c0 <main+0x17c>
800037c8:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800037ca:	4b fb       	lddpc	r11,800038c4 <main+0x180>
800037cc:	0e 9c       	mov	r12,r7
800037ce:	f0 1f 00 3f 	mcall	800038c8 <main+0x184>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
800037d2:	e0 6a 00 b3 	mov	r10,179
800037d6:	30 0b       	mov	r11,0
800037d8:	0e 9c       	mov	r12,r7
800037da:	f0 1f 00 3d 	mcall	800038cc <main+0x188>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
800037de:	4b da       	lddpc	r10,800038d0 <main+0x18c>
800037e0:	30 0b       	mov	r11,0
800037e2:	0e 9c       	mov	r12,r7
800037e4:	f0 1f 00 3c 	mcall	800038d4 <main+0x190>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
800037e8:	30 0b       	mov	r11,0
800037ea:	0e 9c       	mov	r12,r7
800037ec:	f0 1f 00 3b 	mcall	800038d8 <main+0x194>
// 	while (at86rfx_init() != AT86RFX_SUCCESS) {
//  	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
//  	 	}
//  		escribir_linea_pc("Modulo RF:\tPASS\r\n");
 
   	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
800037f0:	31 cc       	mov	r12,28
800037f2:	f0 1f 00 3b 	mcall	800038dc <main+0x198>
800037f6:	4b b8       	lddpc	r8,800038e0 <main+0x19c>
800037f8:	b0 8c       	st.b	r8[0x0],r12

	if (register_value == PART_NUM_AT86RF212) 
800037fa:	30 78       	mov	r8,7
800037fc:	f0 0c 18 00 	cp.b	r12,r8
80003800:	c0 51       	brne	8000380a <main+0xc6>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
80003802:	4b 9c       	lddpc	r12,800038e4 <main+0x1a0>
80003804:	f0 1f 00 39 	mcall	800038e8 <main+0x1a4>
80003808:	c0 48       	rjmp	80003810 <main+0xcc>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
8000380a:	4b 9c       	lddpc	r12,800038ec <main+0x1a8>
8000380c:	f0 1f 00 37 	mcall	800038e8 <main+0x1a4>
	escribir_linea_pc(register_value);
80003810:	4b 48       	lddpc	r8,800038e0 <main+0x19c>
80003812:	11 8c       	ld.ub	r12,r8[0x0]
80003814:	f0 1f 00 35 	mcall	800038e8 <main+0x1a4>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
80003818:	f0 1f 00 36 	mcall	800038f0 <main+0x1ac>
	init_i2c_module();
8000381c:	f0 1f 00 36 	mcall	800038f4 <main+0x1b0>
	// inicializacion del tran
	init_AT86RF212();
80003820:	f0 1f 00 36 	mcall	800038f8 <main+0x1b4>
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r");
80003824:	4b 6c       	lddpc	r12,800038fc <main+0x1b8>
80003826:	f0 1f 00 31 	mcall	800038e8 <main+0x1a4>
		
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
8000382a:	4b 67       	lddpc	r7,80003900 <main+0x1bc>
8000382c:	4b 66       	lddpc	r6,80003904 <main+0x1c0>
		{
			if (cola_PC[cola_PC_nr] == 't')
8000382e:	4b 73       	lddpc	r3,80003908 <main+0x1c4>
80003830:	37 44       	mov	r4,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
80003832:	30 02       	mov	r2,0
		if (cola_PC_nr != cola_PC_nw )
		{
			if (cola_PC[cola_PC_nr] == 't')
			{
				leer_temp(temps);
				escribir_linea_pc("Temp: ");
80003834:	4b 60       	lddpc	r0,8000390c <main+0x1c8>
			}
			cola_PC_nr++;
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
		}
		txTramaManual(tx_buffer); // funcion creada segun el manual
80003836:	4b 75       	lddpc	r5,80003910 <main+0x1cc>
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r");
		
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003838:	6e 08       	ld.w	r8,r7[0x0]
8000383a:	6c 09       	ld.w	r9,r6[0x0]
8000383c:	12 38       	cp.w	r8,r9
8000383e:	c1 90       	breq	80003870 <main+0x12c>
		{
			if (cola_PC[cola_PC_nr] == 't')
80003840:	e6 08 07 08 	ld.ub	r8,r3[r8]
80003844:	e8 08 18 00 	cp.b	r8,r4
80003848:	c0 d1       	brne	80003862 <main+0x11e>
			{
				leer_temp(temps);
8000384a:	1a 9c       	mov	r12,sp
8000384c:	f0 1f 00 32 	mcall	80003914 <main+0x1d0>
				escribir_linea_pc("Temp: ");
80003850:	00 9c       	mov	r12,r0
80003852:	f0 1f 00 26 	mcall	800038e8 <main+0x1a4>
				escribir_linea_pc(temps);
80003856:	1a 9c       	mov	r12,sp
80003858:	f0 1f 00 24 	mcall	800038e8 <main+0x1a4>
				escribir_linea_pc("*C\r\n");
8000385c:	4a fc       	lddpc	r12,80003918 <main+0x1d4>
8000385e:	f0 1f 00 23 	mcall	800038e8 <main+0x1a4>
			}
			cola_PC_nr++;
80003862:	6e 08       	ld.w	r8,r7[0x0]
80003864:	2f f8       	sub	r8,-1
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
80003866:	e0 48 00 c8 	cp.w	r8,200
8000386a:	e4 08 17 40 	movge	r8,r2
8000386e:	8f 08       	st.w	r7[0x0],r8
		}
		txTramaManual(tx_buffer); // funcion creada segun el manual
80003870:	0a 9c       	mov	r12,r5
80003872:	f0 1f 00 2b 	mcall	8000391c <main+0x1d8>
	//	txTrama(tx_buffer); // funcion creada segun un ejemplo LwMesh
		// para Rx lo hace cuando hay interrupcion y muestra por pantalla
		probandoAT86RF212(); // muestra por uart
80003876:	f0 1f 00 2b 	mcall	80003920 <main+0x1dc>
 	}
8000387a:	cd fb       	rjmp	80003838 <main+0xf4>
8000387c:	80 00       	ld.sh	r0,r0[0x0]
8000387e:	30 70       	mov	r0,7
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	3e 12       	mov	r2,-31
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	2f a8       	sub	r8,-6
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	34 98       	mov	r8,73
8000388c:	80 00       	ld.sh	r0,r0[0x0]
8000388e:	33 c8       	mov	r8,60
80003890:	80 00       	ld.sh	r0,r0[0x0]
80003892:	34 60       	mov	r0,70
80003894:	80 00       	ld.sh	r0,r0[0x0]
80003896:	36 9c       	mov	r12,105
80003898:	80 00       	ld.sh	r0,r0[0x0]
8000389a:	33 a4       	mov	r4,58
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	27 e8       	sub	r8,126
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	31 00       	mov	r0,16
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	27 68       	sub	r8,118
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	34 cc       	mov	r12,76
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	30 90       	mov	r0,9
800038b0:	00 00       	add	r0,r0
800038b2:	00 28       	rsub	r8,r0
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	23 f8       	sub	r8,63
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	24 c8       	sub	r8,76
800038bc:	80 00       	ld.sh	r0,r0[0x0]
800038be:	24 d2       	sub	r2,77
800038c0:	00 00       	add	r0,r0
800038c2:	00 20       	rsub	r0,r0
800038c4:	80 00       	ld.sh	r0,r0[0x0]
800038c6:	98 78       	ld.sh	r8,r12[0xe]
800038c8:	80 00       	ld.sh	r0,r0[0x0]
800038ca:	29 f2       	sub	r2,-97
800038cc:	80 00       	ld.sh	r0,r0[0x0]
800038ce:	2a c4       	sub	r4,-84
800038d0:	80 00       	ld.sh	r0,r0[0x0]
800038d2:	97 28       	st.w	r11[0x8],r8
800038d4:	80 00       	ld.sh	r0,r0[0x0]
800038d6:	2a f8       	sub	r8,-81
800038d8:	80 00       	ld.sh	r0,r0[0x0]
800038da:	2a 8e       	sub	lr,-88
800038dc:	80 00       	ld.sh	r0,r0[0x0]
800038de:	2f 34       	sub	r4,-13
800038e0:	00 00       	add	r0,r0
800038e2:	06 3c       	cp.w	r12,r3
800038e4:	80 00       	ld.sh	r0,r0[0x0]
800038e6:	98 28       	ld.sh	r8,r12[0x4]
800038e8:	80 00       	ld.sh	r0,r0[0x0]
800038ea:	34 b8       	mov	r8,75
800038ec:	80 00       	ld.sh	r0,r0[0x0]
800038ee:	98 3c       	ld.sh	r12,r12[0x6]
800038f0:	80 00       	ld.sh	r0,r0[0x0]
800038f2:	33 f4       	mov	r4,63
800038f4:	80 00       	ld.sh	r0,r0[0x0]
800038f6:	36 48       	mov	r8,100
800038f8:	80 00       	ld.sh	r0,r0[0x0]
800038fa:	31 a8       	mov	r8,26
800038fc:	80 00       	ld.sh	r0,r0[0x0]
800038fe:	98 50       	ld.sh	r0,r12[0xa]
80003900:	00 00       	add	r0,r0
80003902:	06 40       	or	r0,r3
80003904:	00 00       	add	r0,r0
80003906:	06 44       	or	r4,r3
80003908:	00 00       	add	r0,r0
8000390a:	06 84       	andn	r4,r3
8000390c:	80 00       	ld.sh	r0,r0[0x0]
8000390e:	98 68       	ld.sh	r8,r12[0xc]
80003910:	00 00       	add	r0,r0
80003912:	00 18       	sub	r8,r0
80003914:	80 00       	ld.sh	r0,r0[0x0]
80003916:	32 60       	mov	r0,38
80003918:	80 00       	ld.sh	r0,r0[0x0]
8000391a:	98 70       	ld.sh	r0,r12[0xe]
8000391c:	80 00       	ld.sh	r0,r0[0x0]
8000391e:	35 c8       	mov	r8,92
80003920:	80 00       	ld.sh	r0,r0[0x0]
80003922:	35 80       	mov	r0,88

80003924 <__avr32_f64_mul>:
80003924:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003928:	e0 80 00 dc 	breq	80003ae0 <__avr32_f64_mul_op1_zero>
8000392c:	d4 21       	pushm	r4-r7,lr
8000392e:	f7 e9 20 0e 	eor	lr,r11,r9
80003932:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003936:	30 15       	mov	r5,1
80003938:	c4 30       	breq	800039be <__avr32_f64_mul_op1_subnormal>
8000393a:	ab 6b       	lsl	r11,0xa
8000393c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003940:	ab 6a       	lsl	r10,0xa
80003942:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003946:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000394a:	c5 c0       	breq	80003a02 <__avr32_f64_mul_op2_subnormal>
8000394c:	a1 78       	lsl	r8,0x1
8000394e:	5c f9       	rol	r9
80003950:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003954:	e0 47 07 ff 	cp.w	r7,2047
80003958:	c7 70       	breq	80003a46 <__avr32_f64_mul_op_nan_or_inf>
8000395a:	e0 46 07 ff 	cp.w	r6,2047
8000395e:	c7 40       	breq	80003a46 <__avr32_f64_mul_op_nan_or_inf>
80003960:	ee 06 00 0c 	add	r12,r7,r6
80003964:	e0 2c 03 fe 	sub	r12,1022
80003968:	f6 08 06 44 	mulu.d	r4,r11,r8
8000396c:	f4 09 07 44 	macu.d	r4,r10,r9
80003970:	f4 08 06 46 	mulu.d	r6,r10,r8
80003974:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003978:	08 07       	add	r7,r4
8000397a:	f4 05 00 4a 	adc	r10,r10,r5
8000397e:	5c 0b       	acr	r11
80003980:	ed bb 00 14 	bld	r11,0x14
80003984:	c0 50       	breq	8000398e <__avr32_f64_mul+0x6a>
80003986:	a1 77       	lsl	r7,0x1
80003988:	5c fa       	rol	r10
8000398a:	5c fb       	rol	r11
8000398c:	20 1c       	sub	r12,1
8000398e:	58 0c       	cp.w	r12,0
80003990:	e0 8a 00 6f 	brle	80003a6e <__avr32_f64_mul_res_subnormal>
80003994:	e0 4c 07 ff 	cp.w	r12,2047
80003998:	e0 84 00 9c 	brge	80003ad0 <__avr32_f64_mul_res_inf>
8000399c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800039a0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800039a4:	ef e6 12 17 	or	r7,r7,r6>>0x1
800039a8:	ee 17 80 00 	eorh	r7,0x8000
800039ac:	f1 b7 04 20 	satu	r7,0x1
800039b0:	0e 0a       	add	r10,r7
800039b2:	5c 0b       	acr	r11
800039b4:	ed be 00 1f 	bld	lr,0x1f
800039b8:	ef bb 00 1f 	bst	r11,0x1f
800039bc:	d8 22       	popm	r4-r7,pc

800039be <__avr32_f64_mul_op1_subnormal>:
800039be:	e4 1b 00 0f 	andh	r11,0xf
800039c2:	f4 0c 12 00 	clz	r12,r10
800039c6:	f6 06 12 00 	clz	r6,r11
800039ca:	f7 bc 03 e1 	sublo	r12,-31
800039ce:	f8 06 17 30 	movlo	r6,r12
800039d2:	f7 b6 02 01 	subhs	r6,1
800039d6:	e0 46 00 20 	cp.w	r6,32
800039da:	c0 d4       	brge	800039f4 <__avr32_f64_mul_op1_subnormal+0x36>
800039dc:	ec 0c 11 20 	rsub	r12,r6,32
800039e0:	f6 06 09 4b 	lsl	r11,r11,r6
800039e4:	f4 0c 0a 4c 	lsr	r12,r10,r12
800039e8:	18 4b       	or	r11,r12
800039ea:	f4 06 09 4a 	lsl	r10,r10,r6
800039ee:	20 b6       	sub	r6,11
800039f0:	0c 17       	sub	r7,r6
800039f2:	ca ab       	rjmp	80003946 <__avr32_f64_mul+0x22>
800039f4:	f4 06 09 4b 	lsl	r11,r10,r6
800039f8:	c6 40       	breq	80003ac0 <__avr32_f64_mul_res_zero>
800039fa:	30 0a       	mov	r10,0
800039fc:	20 b6       	sub	r6,11
800039fe:	0c 17       	sub	r7,r6
80003a00:	ca 3b       	rjmp	80003946 <__avr32_f64_mul+0x22>

80003a02 <__avr32_f64_mul_op2_subnormal>:
80003a02:	e4 19 00 0f 	andh	r9,0xf
80003a06:	f0 0c 12 00 	clz	r12,r8
80003a0a:	f2 05 12 00 	clz	r5,r9
80003a0e:	f7 bc 03 ea 	sublo	r12,-22
80003a12:	f8 05 17 30 	movlo	r5,r12
80003a16:	f7 b5 02 0a 	subhs	r5,10
80003a1a:	e0 45 00 20 	cp.w	r5,32
80003a1e:	c0 d4       	brge	80003a38 <__avr32_f64_mul_op2_subnormal+0x36>
80003a20:	ea 0c 11 20 	rsub	r12,r5,32
80003a24:	f2 05 09 49 	lsl	r9,r9,r5
80003a28:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003a2c:	18 49       	or	r9,r12
80003a2e:	f0 05 09 48 	lsl	r8,r8,r5
80003a32:	20 25       	sub	r5,2
80003a34:	0a 16       	sub	r6,r5
80003a36:	c8 fb       	rjmp	80003954 <__avr32_f64_mul+0x30>
80003a38:	f0 05 09 49 	lsl	r9,r8,r5
80003a3c:	c4 20       	breq	80003ac0 <__avr32_f64_mul_res_zero>
80003a3e:	30 08       	mov	r8,0
80003a40:	20 25       	sub	r5,2
80003a42:	0a 16       	sub	r6,r5
80003a44:	c8 8b       	rjmp	80003954 <__avr32_f64_mul+0x30>

80003a46 <__avr32_f64_mul_op_nan_or_inf>:
80003a46:	e4 19 00 0f 	andh	r9,0xf
80003a4a:	e4 1b 00 0f 	andh	r11,0xf
80003a4e:	14 4b       	or	r11,r10
80003a50:	10 49       	or	r9,r8
80003a52:	e0 47 07 ff 	cp.w	r7,2047
80003a56:	c0 91       	brne	80003a68 <__avr32_f64_mul_op1_not_naninf>
80003a58:	58 0b       	cp.w	r11,0
80003a5a:	c3 81       	brne	80003aca <__avr32_f64_mul_res_nan>
80003a5c:	e0 46 07 ff 	cp.w	r6,2047
80003a60:	c3 81       	brne	80003ad0 <__avr32_f64_mul_res_inf>
80003a62:	58 09       	cp.w	r9,0
80003a64:	c3 60       	breq	80003ad0 <__avr32_f64_mul_res_inf>
80003a66:	c3 28       	rjmp	80003aca <__avr32_f64_mul_res_nan>

80003a68 <__avr32_f64_mul_op1_not_naninf>:
80003a68:	58 09       	cp.w	r9,0
80003a6a:	c3 30       	breq	80003ad0 <__avr32_f64_mul_res_inf>
80003a6c:	c2 f8       	rjmp	80003aca <__avr32_f64_mul_res_nan>

80003a6e <__avr32_f64_mul_res_subnormal>:
80003a6e:	5c 3c       	neg	r12
80003a70:	2f fc       	sub	r12,-1
80003a72:	f1 bc 04 c0 	satu	r12,0x6
80003a76:	e0 4c 00 20 	cp.w	r12,32
80003a7a:	c1 14       	brge	80003a9c <__avr32_f64_mul_res_subnormal+0x2e>
80003a7c:	f8 08 11 20 	rsub	r8,r12,32
80003a80:	0e 46       	or	r6,r7
80003a82:	ee 0c 0a 47 	lsr	r7,r7,r12
80003a86:	f4 08 09 49 	lsl	r9,r10,r8
80003a8a:	12 47       	or	r7,r9
80003a8c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003a90:	f6 08 09 49 	lsl	r9,r11,r8
80003a94:	12 4a       	or	r10,r9
80003a96:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003a9a:	c8 3b       	rjmp	800039a0 <__avr32_f64_mul+0x7c>
80003a9c:	f8 08 11 20 	rsub	r8,r12,32
80003aa0:	f9 b9 00 00 	moveq	r9,0
80003aa4:	c0 30       	breq	80003aaa <__avr32_f64_mul_res_subnormal+0x3c>
80003aa6:	f6 08 09 49 	lsl	r9,r11,r8
80003aaa:	0e 46       	or	r6,r7
80003aac:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003ab0:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003ab4:	f3 ea 10 07 	or	r7,r9,r10
80003ab8:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003abc:	30 0b       	mov	r11,0
80003abe:	c7 1b       	rjmp	800039a0 <__avr32_f64_mul+0x7c>

80003ac0 <__avr32_f64_mul_res_zero>:
80003ac0:	1c 9b       	mov	r11,lr
80003ac2:	e6 1b 80 00 	andh	r11,0x8000,COH
80003ac6:	30 0a       	mov	r10,0
80003ac8:	d8 22       	popm	r4-r7,pc

80003aca <__avr32_f64_mul_res_nan>:
80003aca:	3f fb       	mov	r11,-1
80003acc:	3f fa       	mov	r10,-1
80003ace:	d8 22       	popm	r4-r7,pc

80003ad0 <__avr32_f64_mul_res_inf>:
80003ad0:	f0 6b 00 00 	mov	r11,-1048576
80003ad4:	ed be 00 1f 	bld	lr,0x1f
80003ad8:	ef bb 00 1f 	bst	r11,0x1f
80003adc:	30 0a       	mov	r10,0
80003ade:	d8 22       	popm	r4-r7,pc

80003ae0 <__avr32_f64_mul_op1_zero>:
80003ae0:	f7 e9 20 0b 	eor	r11,r11,r9
80003ae4:	e6 1b 80 00 	andh	r11,0x8000,COH
80003ae8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003aec:	e0 4c 07 ff 	cp.w	r12,2047
80003af0:	5e 1c       	retne	r12
80003af2:	3f fa       	mov	r10,-1
80003af4:	3f fb       	mov	r11,-1
80003af6:	5e fc       	retal	r12

80003af8 <__avr32_u32_to_f64>:
80003af8:	f8 cb 00 00 	sub	r11,r12,0
80003afc:	30 0c       	mov	r12,0
80003afe:	c0 38       	rjmp	80003b04 <__avr32_s32_to_f64+0x4>

80003b00 <__avr32_s32_to_f64>:
80003b00:	18 9b       	mov	r11,r12
80003b02:	5c 4b       	abs	r11
80003b04:	30 0a       	mov	r10,0
80003b06:	5e 0b       	reteq	r11
80003b08:	d4 01       	pushm	lr
80003b0a:	e0 69 04 1e 	mov	r9,1054
80003b0e:	f6 08 12 00 	clz	r8,r11
80003b12:	c1 70       	breq	80003b40 <__avr32_s32_to_f64+0x40>
80003b14:	c0 c3       	brcs	80003b2c <__avr32_s32_to_f64+0x2c>
80003b16:	f0 0e 11 20 	rsub	lr,r8,32
80003b1a:	f6 08 09 4b 	lsl	r11,r11,r8
80003b1e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003b22:	1c 4b       	or	r11,lr
80003b24:	f4 08 09 4a 	lsl	r10,r10,r8
80003b28:	10 19       	sub	r9,r8
80003b2a:	c0 b8       	rjmp	80003b40 <__avr32_s32_to_f64+0x40>
80003b2c:	f4 08 12 00 	clz	r8,r10
80003b30:	f9 b8 03 00 	movlo	r8,0
80003b34:	f7 b8 02 e0 	subhs	r8,-32
80003b38:	f4 08 09 4b 	lsl	r11,r10,r8
80003b3c:	30 0a       	mov	r10,0
80003b3e:	10 19       	sub	r9,r8
80003b40:	58 09       	cp.w	r9,0
80003b42:	e0 89 00 30 	brgt	80003ba2 <__avr32_s32_to_f64+0xa2>
80003b46:	5c 39       	neg	r9
80003b48:	2f f9       	sub	r9,-1
80003b4a:	e0 49 00 36 	cp.w	r9,54
80003b4e:	c0 43       	brcs	80003b56 <__avr32_s32_to_f64+0x56>
80003b50:	30 0b       	mov	r11,0
80003b52:	30 0a       	mov	r10,0
80003b54:	c2 68       	rjmp	80003ba0 <__avr32_s32_to_f64+0xa0>
80003b56:	2f 69       	sub	r9,-10
80003b58:	f2 08 11 20 	rsub	r8,r9,32
80003b5c:	e0 49 00 20 	cp.w	r9,32
80003b60:	c0 b2       	brcc	80003b76 <__avr32_s32_to_f64+0x76>
80003b62:	f4 08 09 4e 	lsl	lr,r10,r8
80003b66:	f6 08 09 48 	lsl	r8,r11,r8
80003b6a:	f4 09 0a 4a 	lsr	r10,r10,r9
80003b6e:	f6 09 0a 4b 	lsr	r11,r11,r9
80003b72:	10 4b       	or	r11,r8
80003b74:	c0 88       	rjmp	80003b84 <__avr32_s32_to_f64+0x84>
80003b76:	f6 08 09 4e 	lsl	lr,r11,r8
80003b7a:	14 4e       	or	lr,r10
80003b7c:	16 9a       	mov	r10,r11
80003b7e:	30 0b       	mov	r11,0
80003b80:	f4 09 0a 4a 	lsr	r10,r10,r9
80003b84:	ed ba 00 00 	bld	r10,0x0
80003b88:	c0 92       	brcc	80003b9a <__avr32_s32_to_f64+0x9a>
80003b8a:	1c 7e       	tst	lr,lr
80003b8c:	c0 41       	brne	80003b94 <__avr32_s32_to_f64+0x94>
80003b8e:	ed ba 00 01 	bld	r10,0x1
80003b92:	c0 42       	brcc	80003b9a <__avr32_s32_to_f64+0x9a>
80003b94:	2f fa       	sub	r10,-1
80003b96:	f7 bb 02 ff 	subhs	r11,-1
80003b9a:	5c fc       	rol	r12
80003b9c:	5d 0b       	ror	r11
80003b9e:	5d 0a       	ror	r10
80003ba0:	d8 02       	popm	pc
80003ba2:	e0 68 03 ff 	mov	r8,1023
80003ba6:	ed ba 00 0b 	bld	r10,0xb
80003baa:	f7 b8 00 ff 	subeq	r8,-1
80003bae:	10 0a       	add	r10,r8
80003bb0:	5c 0b       	acr	r11
80003bb2:	f7 b9 03 fe 	sublo	r9,-2
80003bb6:	e0 49 07 ff 	cp.w	r9,2047
80003bba:	c0 55       	brlt	80003bc4 <__avr32_s32_to_f64+0xc4>
80003bbc:	30 0a       	mov	r10,0
80003bbe:	fc 1b ff e0 	movh	r11,0xffe0
80003bc2:	c0 c8       	rjmp	80003bda <__floatsidf_return_op1>
80003bc4:	ed bb 00 1f 	bld	r11,0x1f
80003bc8:	f7 b9 01 01 	subne	r9,1
80003bcc:	ab 9a       	lsr	r10,0xb
80003bce:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003bd2:	a1 7b       	lsl	r11,0x1
80003bd4:	ab 9b       	lsr	r11,0xb
80003bd6:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003bda <__floatsidf_return_op1>:
80003bda:	a1 7c       	lsl	r12,0x1
80003bdc:	5d 0b       	ror	r11
80003bde:	d8 02       	popm	pc

80003be0 <__avr32_f32_to_f64>:
80003be0:	f8 0b 15 01 	lsl	r11,r12,0x1
80003be4:	f9 ba 00 00 	moveq	r10,0
80003be8:	5e 0b       	reteq	r11
80003bea:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003bee:	e0 49 00 ff 	cp.w	r9,255
80003bf2:	c1 e0       	breq	80003c2e <__extendsfdf_return_op1+0x6>
80003bf4:	a7 7b       	lsl	r11,0x7
80003bf6:	30 0a       	mov	r10,0
80003bf8:	58 09       	cp.w	r9,0
80003bfa:	f7 b9 00 ff 	subeq	r9,-1
80003bfe:	5f 18       	srne	r8
80003c00:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003c04:	fe 39 fc 80 	sub	r9,-896
80003c08:	f6 08 12 00 	clz	r8,r11
80003c0c:	10 19       	sub	r9,r8
80003c0e:	f6 08 09 4b 	lsl	r11,r11,r8
80003c12:	ed bb 00 1f 	bld	r11,0x1f
80003c16:	f7 b9 01 01 	subne	r9,1
80003c1a:	ab 9a       	lsr	r10,0xb
80003c1c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003c20:	a1 7b       	lsl	r11,0x1
80003c22:	ab 9b       	lsr	r11,0xb
80003c24:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003c28 <__extendsfdf_return_op1>:
80003c28:	a1 7c       	lsl	r12,0x1
80003c2a:	5d 0b       	ror	r11
80003c2c:	5e fb       	retal	r11
80003c2e:	fc 1a ff e0 	movh	r10,0xffe0
80003c32:	a9 6b       	lsl	r11,0x8
80003c34:	f9 bb 01 ff 	movne	r11,-1
80003c38:	f4 0b 17 00 	moveq	r11,r10
80003c3c:	30 0a       	mov	r10,0
80003c3e:	cf 5b       	rjmp	80003c28 <__extendsfdf_return_op1>

80003c40 <__avr32_f64_to_f32>:
80003c40:	f6 09 15 01 	lsl	r9,r11,0x1
80003c44:	b5 99       	lsr	r9,0x15
80003c46:	5e 0d       	reteq	0
80003c48:	f6 08 15 0a 	lsl	r8,r11,0xa
80003c4c:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003c50:	ab 6a       	lsl	r10,0xa
80003c52:	5c 3a       	neg	r10
80003c54:	5c fc       	rol	r12
80003c56:	e0 49 07 ff 	cp.w	r9,2047
80003c5a:	c1 a0       	breq	80003c8e <__truncdfsf_return_op1+0x6>
80003c5c:	e0 29 03 80 	sub	r9,896
80003c60:	bf bc       	sbr	r12,0x1f
80003c62:	58 09       	cp.w	r9,0
80003c64:	e0 8a 00 1a 	brle	80003c98 <__truncdfsf_return_op1+0x10>
80003c68:	37 fa       	mov	r10,127
80003c6a:	ed bc 00 08 	bld	r12,0x8
80003c6e:	f7 ba 00 ff 	subeq	r10,-1
80003c72:	14 0c       	add	r12,r10
80003c74:	f7 b9 03 fe 	sublo	r9,-2
80003c78:	ed bc 00 1f 	bld	r12,0x1f
80003c7c:	f7 b9 01 01 	subne	r9,1
80003c80:	f8 0c 16 07 	lsr	r12,r12,0x7
80003c84:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003c88 <__truncdfsf_return_op1>:
80003c88:	a1 7b       	lsl	r11,0x1
80003c8a:	5d 0c       	ror	r12
80003c8c:	5e fc       	retal	r12
80003c8e:	bf dc       	cbr	r12,0x1f
80003c90:	5e 1e       	retne	-1
80003c92:	fc 1c 7f 80 	movh	r12,0x7f80
80003c96:	5e fc       	retal	r12
80003c98:	f2 09 11 01 	rsub	r9,r9,1
80003c9c:	59 99       	cp.w	r9,25
80003c9e:	f9 bc 02 00 	movhs	r12,0
80003ca2:	c1 32       	brcc	80003cc8 <__truncdfsf_return_op1+0x40>
80003ca4:	f2 0a 11 20 	rsub	r10,r9,32
80003ca8:	f8 0a 09 4a 	lsl	r10,r12,r10
80003cac:	5f 1a       	srne	r10
80003cae:	f8 09 0a 4c 	lsr	r12,r12,r9
80003cb2:	14 4c       	or	r12,r10
80003cb4:	37 fa       	mov	r10,127
80003cb6:	ed bc 00 08 	bld	r12,0x8
80003cba:	f7 ba 00 ff 	subeq	r10,-1
80003cbe:	14 0c       	add	r12,r10
80003cc0:	f8 0c 16 07 	lsr	r12,r12,0x7
80003cc4:	a1 7b       	lsl	r11,0x1
80003cc6:	5d 0c       	ror	r12
80003cc8:	5e fc       	retal	r12

80003cca <memcpy>:
80003cca:	58 8a       	cp.w	r10,8
80003ccc:	c2 f5       	brlt	80003d2a <memcpy+0x60>
80003cce:	f9 eb 10 09 	or	r9,r12,r11
80003cd2:	e2 19 00 03 	andl	r9,0x3,COH
80003cd6:	e0 81 00 97 	brne	80003e04 <memcpy+0x13a>
80003cda:	e0 4a 00 20 	cp.w	r10,32
80003cde:	c3 b4       	brge	80003d54 <memcpy+0x8a>
80003ce0:	f4 08 14 02 	asr	r8,r10,0x2
80003ce4:	f0 09 11 08 	rsub	r9,r8,8
80003ce8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003cec:	76 69       	ld.w	r9,r11[0x18]
80003cee:	99 69       	st.w	r12[0x18],r9
80003cf0:	76 59       	ld.w	r9,r11[0x14]
80003cf2:	99 59       	st.w	r12[0x14],r9
80003cf4:	76 49       	ld.w	r9,r11[0x10]
80003cf6:	99 49       	st.w	r12[0x10],r9
80003cf8:	76 39       	ld.w	r9,r11[0xc]
80003cfa:	99 39       	st.w	r12[0xc],r9
80003cfc:	76 29       	ld.w	r9,r11[0x8]
80003cfe:	99 29       	st.w	r12[0x8],r9
80003d00:	76 19       	ld.w	r9,r11[0x4]
80003d02:	99 19       	st.w	r12[0x4],r9
80003d04:	76 09       	ld.w	r9,r11[0x0]
80003d06:	99 09       	st.w	r12[0x0],r9
80003d08:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003d0c:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003d10:	e0 1a 00 03 	andl	r10,0x3
80003d14:	f4 0a 11 04 	rsub	r10,r10,4
80003d18:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003d1c:	17 a9       	ld.ub	r9,r11[0x2]
80003d1e:	b0 a9       	st.b	r8[0x2],r9
80003d20:	17 99       	ld.ub	r9,r11[0x1]
80003d22:	b0 99       	st.b	r8[0x1],r9
80003d24:	17 89       	ld.ub	r9,r11[0x0]
80003d26:	b0 89       	st.b	r8[0x0],r9
80003d28:	5e fc       	retal	r12
80003d2a:	f4 0a 11 09 	rsub	r10,r10,9
80003d2e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003d32:	17 f9       	ld.ub	r9,r11[0x7]
80003d34:	b8 f9       	st.b	r12[0x7],r9
80003d36:	17 e9       	ld.ub	r9,r11[0x6]
80003d38:	b8 e9       	st.b	r12[0x6],r9
80003d3a:	17 d9       	ld.ub	r9,r11[0x5]
80003d3c:	b8 d9       	st.b	r12[0x5],r9
80003d3e:	17 c9       	ld.ub	r9,r11[0x4]
80003d40:	b8 c9       	st.b	r12[0x4],r9
80003d42:	17 b9       	ld.ub	r9,r11[0x3]
80003d44:	b8 b9       	st.b	r12[0x3],r9
80003d46:	17 a9       	ld.ub	r9,r11[0x2]
80003d48:	b8 a9       	st.b	r12[0x2],r9
80003d4a:	17 99       	ld.ub	r9,r11[0x1]
80003d4c:	b8 99       	st.b	r12[0x1],r9
80003d4e:	17 89       	ld.ub	r9,r11[0x0]
80003d50:	b8 89       	st.b	r12[0x0],r9
80003d52:	5e fc       	retal	r12
80003d54:	eb cd 40 c0 	pushm	r6-r7,lr
80003d58:	18 99       	mov	r9,r12
80003d5a:	22 0a       	sub	r10,32
80003d5c:	b7 07       	ld.d	r6,r11++
80003d5e:	b3 26       	st.d	r9++,r6
80003d60:	b7 07       	ld.d	r6,r11++
80003d62:	b3 26       	st.d	r9++,r6
80003d64:	b7 07       	ld.d	r6,r11++
80003d66:	b3 26       	st.d	r9++,r6
80003d68:	b7 07       	ld.d	r6,r11++
80003d6a:	b3 26       	st.d	r9++,r6
80003d6c:	22 0a       	sub	r10,32
80003d6e:	cf 74       	brge	80003d5c <memcpy+0x92>
80003d70:	2f 0a       	sub	r10,-16
80003d72:	c0 65       	brlt	80003d7e <memcpy+0xb4>
80003d74:	b7 07       	ld.d	r6,r11++
80003d76:	b3 26       	st.d	r9++,r6
80003d78:	b7 07       	ld.d	r6,r11++
80003d7a:	b3 26       	st.d	r9++,r6
80003d7c:	21 0a       	sub	r10,16
80003d7e:	5c 3a       	neg	r10
80003d80:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003d84:	d7 03       	nop
80003d86:	d7 03       	nop
80003d88:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003d8c:	f3 66 00 0e 	st.b	r9[14],r6
80003d90:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003d94:	f3 66 00 0d 	st.b	r9[13],r6
80003d98:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003d9c:	f3 66 00 0c 	st.b	r9[12],r6
80003da0:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003da4:	f3 66 00 0b 	st.b	r9[11],r6
80003da8:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003dac:	f3 66 00 0a 	st.b	r9[10],r6
80003db0:	f7 36 00 09 	ld.ub	r6,r11[9]
80003db4:	f3 66 00 09 	st.b	r9[9],r6
80003db8:	f7 36 00 08 	ld.ub	r6,r11[8]
80003dbc:	f3 66 00 08 	st.b	r9[8],r6
80003dc0:	f7 36 00 07 	ld.ub	r6,r11[7]
80003dc4:	f3 66 00 07 	st.b	r9[7],r6
80003dc8:	f7 36 00 06 	ld.ub	r6,r11[6]
80003dcc:	f3 66 00 06 	st.b	r9[6],r6
80003dd0:	f7 36 00 05 	ld.ub	r6,r11[5]
80003dd4:	f3 66 00 05 	st.b	r9[5],r6
80003dd8:	f7 36 00 04 	ld.ub	r6,r11[4]
80003ddc:	f3 66 00 04 	st.b	r9[4],r6
80003de0:	f7 36 00 03 	ld.ub	r6,r11[3]
80003de4:	f3 66 00 03 	st.b	r9[3],r6
80003de8:	f7 36 00 02 	ld.ub	r6,r11[2]
80003dec:	f3 66 00 02 	st.b	r9[2],r6
80003df0:	f7 36 00 01 	ld.ub	r6,r11[1]
80003df4:	f3 66 00 01 	st.b	r9[1],r6
80003df8:	f7 36 00 00 	ld.ub	r6,r11[0]
80003dfc:	f3 66 00 00 	st.b	r9[0],r6
80003e00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003e04:	20 1a       	sub	r10,1
80003e06:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003e0a:	f8 0a 0b 09 	st.b	r12[r10],r9
80003e0e:	cf b1       	brne	80003e04 <memcpy+0x13a>
80003e10:	5e fc       	retal	r12

80003e12 <memset>:
80003e12:	18 98       	mov	r8,r12
80003e14:	c0 38       	rjmp	80003e1a <memset+0x8>
80003e16:	10 cb       	st.b	r8++,r11
80003e18:	20 1a       	sub	r10,1
80003e1a:	58 0a       	cp.w	r10,0
80003e1c:	cf d1       	brne	80003e16 <memset+0x4>
80003e1e:	5e fc       	retal	r12

80003e20 <sprintf>:
80003e20:	d4 01       	pushm	lr
80003e22:	21 7d       	sub	sp,92
80003e24:	e0 68 ff ff 	mov	r8,65535
80003e28:	ea 18 7f ff 	orh	r8,0x7fff
80003e2c:	50 58       	stdsp	sp[0x14],r8
80003e2e:	50 28       	stdsp	sp[0x8],r8
80003e30:	e0 68 02 08 	mov	r8,520
80003e34:	ba 68       	st.h	sp[0xc],r8
80003e36:	3f f8       	mov	r8,-1
80003e38:	ba 78       	st.h	sp[0xe],r8
80003e3a:	e0 68 01 20 	mov	r8,288
80003e3e:	50 4c       	stdsp	sp[0x10],r12
80003e40:	16 9a       	mov	r10,r11
80003e42:	50 0c       	stdsp	sp[0x0],r12
80003e44:	fa c9 ff a0 	sub	r9,sp,-96
80003e48:	70 0c       	ld.w	r12,r8[0x0]
80003e4a:	1a 9b       	mov	r11,sp
80003e4c:	c9 cd       	rcall	80004184 <_vfprintf_r>
80003e4e:	30 09       	mov	r9,0
80003e50:	40 08       	lddsp	r8,sp[0x0]
80003e52:	b0 89       	st.b	r8[0x0],r9
80003e54:	2e 9d       	sub	sp,-92
80003e56:	d8 02       	popm	pc

80003e58 <get_arg>:
80003e58:	d4 31       	pushm	r0-r7,lr
80003e5a:	20 8d       	sub	sp,32
80003e5c:	fa c4 ff bc 	sub	r4,sp,-68
80003e60:	50 4b       	stdsp	sp[0x10],r11
80003e62:	68 2e       	ld.w	lr,r4[0x8]
80003e64:	50 58       	stdsp	sp[0x14],r8
80003e66:	12 96       	mov	r6,r9
80003e68:	7c 0b       	ld.w	r11,lr[0x0]
80003e6a:	70 05       	ld.w	r5,r8[0x0]
80003e6c:	50 6e       	stdsp	sp[0x18],lr
80003e6e:	58 0b       	cp.w	r11,0
80003e70:	f4 0b 17 00 	moveq	r11,r10
80003e74:	68 03       	ld.w	r3,r4[0x0]
80003e76:	68 11       	ld.w	r1,r4[0x4]
80003e78:	40 49       	lddsp	r9,sp[0x10]
80003e7a:	30 08       	mov	r8,0
80003e7c:	c2 69       	rjmp	800040c8 <get_arg+0x270>
80003e7e:	2f fb       	sub	r11,-1
80003e80:	32 5c       	mov	r12,37
80003e82:	17 8a       	ld.ub	r10,r11[0x0]
80003e84:	f8 0a 18 00 	cp.b	r10,r12
80003e88:	5f 1e       	srne	lr
80003e8a:	f0 0a 18 00 	cp.b	r10,r8
80003e8e:	5f 1c       	srne	r12
80003e90:	fd ec 00 0c 	and	r12,lr,r12
80003e94:	f0 0c 18 00 	cp.b	r12,r8
80003e98:	cf 31       	brne	80003e7e <get_arg+0x26>
80003e9a:	58 0a       	cp.w	r10,0
80003e9c:	e0 80 01 23 	breq	800040e2 <get_arg+0x28a>
80003ea0:	30 0c       	mov	r12,0
80003ea2:	3f fa       	mov	r10,-1
80003ea4:	18 90       	mov	r0,r12
80003ea6:	50 3a       	stdsp	sp[0xc],r10
80003ea8:	18 94       	mov	r4,r12
80003eaa:	18 92       	mov	r2,r12
80003eac:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003eb0:	16 97       	mov	r7,r11
80003eb2:	50 7c       	stdsp	sp[0x1c],r12
80003eb4:	fe cc a3 30 	sub	r12,pc,-23760
80003eb8:	0f 3a       	ld.ub	r10,r7++
80003eba:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003ebe:	40 7c       	lddsp	r12,sp[0x1c]
80003ec0:	1c 0c       	add	r12,lr
80003ec2:	fe ce a4 06 	sub	lr,pc,-23546
80003ec6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003eca:	20 1e       	sub	lr,1
80003ecc:	50 0e       	stdsp	sp[0x0],lr
80003ece:	fe ce a4 7e 	sub	lr,pc,-23426
80003ed2:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003ed6:	50 7c       	stdsp	sp[0x1c],r12
80003ed8:	40 0c       	lddsp	r12,sp[0x0]
80003eda:	58 7c       	cp.w	r12,7
80003edc:	e0 8b 00 ef 	brhi	800040ba <get_arg+0x262>
80003ee0:	fe ce a6 30 	sub	lr,pc,-22992
80003ee4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003ee8:	36 8b       	mov	r11,104
80003eea:	f6 0a 18 00 	cp.b	r10,r11
80003eee:	e0 80 00 e6 	breq	800040ba <get_arg+0x262>
80003ef2:	37 1b       	mov	r11,113
80003ef4:	f6 0a 18 00 	cp.b	r10,r11
80003ef8:	c0 70       	breq	80003f06 <get_arg+0xae>
80003efa:	34 cb       	mov	r11,76
80003efc:	f6 0a 18 00 	cp.b	r10,r11
80003f00:	c0 51       	brne	80003f0a <get_arg+0xb2>
80003f02:	a3 b4       	sbr	r4,0x3
80003f04:	cd b8       	rjmp	800040ba <get_arg+0x262>
80003f06:	a5 b4       	sbr	r4,0x5
80003f08:	cd 98       	rjmp	800040ba <get_arg+0x262>
80003f0a:	08 9a       	mov	r10,r4
80003f0c:	0e 9b       	mov	r11,r7
80003f0e:	a5 aa       	sbr	r10,0x4
80003f10:	17 3c       	ld.ub	r12,r11++
80003f12:	a5 b4       	sbr	r4,0x5
80003f14:	36 ce       	mov	lr,108
80003f16:	fc 0c 18 00 	cp.b	r12,lr
80003f1a:	e0 80 00 d1 	breq	800040bc <get_arg+0x264>
80003f1e:	14 94       	mov	r4,r10
80003f20:	cc d8       	rjmp	800040ba <get_arg+0x262>
80003f22:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003f26:	36 7c       	mov	r12,103
80003f28:	f8 0a 18 00 	cp.b	r10,r12
80003f2c:	e0 8b 00 27 	brhi	80003f7a <get_arg+0x122>
80003f30:	36 5b       	mov	r11,101
80003f32:	f6 0a 18 00 	cp.b	r10,r11
80003f36:	c4 82       	brcc	80003fc6 <get_arg+0x16e>
80003f38:	34 fb       	mov	r11,79
80003f3a:	f6 0a 18 00 	cp.b	r10,r11
80003f3e:	c4 80       	breq	80003fce <get_arg+0x176>
80003f40:	e0 8b 00 0c 	brhi	80003f58 <get_arg+0x100>
80003f44:	34 5b       	mov	r11,69
80003f46:	f6 0a 18 00 	cp.b	r10,r11
80003f4a:	c3 e0       	breq	80003fc6 <get_arg+0x16e>
80003f4c:	34 7b       	mov	r11,71
80003f4e:	f6 0a 18 00 	cp.b	r10,r11
80003f52:	c3 a0       	breq	80003fc6 <get_arg+0x16e>
80003f54:	34 4b       	mov	r11,68
80003f56:	c0 88       	rjmp	80003f66 <get_arg+0x10e>
80003f58:	35 8b       	mov	r11,88
80003f5a:	f6 0a 18 00 	cp.b	r10,r11
80003f5e:	c2 c0       	breq	80003fb6 <get_arg+0x15e>
80003f60:	e0 8b 00 07 	brhi	80003f6e <get_arg+0x116>
80003f64:	35 5b       	mov	r11,85
80003f66:	f6 0a 18 00 	cp.b	r10,r11
80003f6a:	c3 51       	brne	80003fd4 <get_arg+0x17c>
80003f6c:	c3 18       	rjmp	80003fce <get_arg+0x176>
80003f6e:	36 3b       	mov	r11,99
80003f70:	f6 0a 18 00 	cp.b	r10,r11
80003f74:	c2 f0       	breq	80003fd2 <get_arg+0x17a>
80003f76:	36 4b       	mov	r11,100
80003f78:	c0 e8       	rjmp	80003f94 <get_arg+0x13c>
80003f7a:	37 0b       	mov	r11,112
80003f7c:	f6 0a 18 00 	cp.b	r10,r11
80003f80:	c2 50       	breq	80003fca <get_arg+0x172>
80003f82:	e0 8b 00 0d 	brhi	80003f9c <get_arg+0x144>
80003f86:	36 eb       	mov	r11,110
80003f88:	f6 0a 18 00 	cp.b	r10,r11
80003f8c:	c1 f0       	breq	80003fca <get_arg+0x172>
80003f8e:	e0 8b 00 14 	brhi	80003fb6 <get_arg+0x15e>
80003f92:	36 9b       	mov	r11,105
80003f94:	f6 0a 18 00 	cp.b	r10,r11
80003f98:	c1 e1       	brne	80003fd4 <get_arg+0x17c>
80003f9a:	c0 e8       	rjmp	80003fb6 <get_arg+0x15e>
80003f9c:	37 5b       	mov	r11,117
80003f9e:	f6 0a 18 00 	cp.b	r10,r11
80003fa2:	c0 a0       	breq	80003fb6 <get_arg+0x15e>
80003fa4:	37 8b       	mov	r11,120
80003fa6:	f6 0a 18 00 	cp.b	r10,r11
80003faa:	c0 60       	breq	80003fb6 <get_arg+0x15e>
80003fac:	37 3b       	mov	r11,115
80003fae:	f6 0a 18 00 	cp.b	r10,r11
80003fb2:	c1 11       	brne	80003fd4 <get_arg+0x17c>
80003fb4:	c0 b8       	rjmp	80003fca <get_arg+0x172>
80003fb6:	ed b4 00 04 	bld	r4,0x4
80003fba:	c0 a0       	breq	80003fce <get_arg+0x176>
80003fbc:	ed b4 00 05 	bld	r4,0x5
80003fc0:	c0 91       	brne	80003fd2 <get_arg+0x17a>
80003fc2:	30 20       	mov	r0,2
80003fc4:	c0 88       	rjmp	80003fd4 <get_arg+0x17c>
80003fc6:	30 40       	mov	r0,4
80003fc8:	c0 68       	rjmp	80003fd4 <get_arg+0x17c>
80003fca:	30 30       	mov	r0,3
80003fcc:	c0 48       	rjmp	80003fd4 <get_arg+0x17c>
80003fce:	30 10       	mov	r0,1
80003fd0:	c0 28       	rjmp	80003fd4 <get_arg+0x17c>
80003fd2:	30 00       	mov	r0,0
80003fd4:	40 3b       	lddsp	r11,sp[0xc]
80003fd6:	5b fb       	cp.w	r11,-1
80003fd8:	c0 40       	breq	80003fe0 <get_arg+0x188>
80003fda:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003fde:	c6 e8       	rjmp	800040ba <get_arg+0x262>
80003fe0:	58 60       	cp.w	r0,6
80003fe2:	e0 8b 00 6c 	brhi	800040ba <get_arg+0x262>
80003fe6:	6c 0a       	ld.w	r10,r6[0x0]
80003fe8:	ea cc ff ff 	sub	r12,r5,-1
80003fec:	fe ce a7 1c 	sub	lr,pc,-22756
80003ff0:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003ff4:	f4 cb ff f8 	sub	r11,r10,-8
80003ff8:	8d 0b       	st.w	r6[0x0],r11
80003ffa:	f4 ea 00 00 	ld.d	r10,r10[0]
80003ffe:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004002:	c0 f8       	rjmp	80004020 <get_arg+0x1c8>
80004004:	f4 cb ff fc 	sub	r11,r10,-4
80004008:	8d 0b       	st.w	r6[0x0],r11
8000400a:	74 0a       	ld.w	r10,r10[0x0]
8000400c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004010:	c0 88       	rjmp	80004020 <get_arg+0x1c8>
80004012:	f4 cb ff f8 	sub	r11,r10,-8
80004016:	8d 0b       	st.w	r6[0x0],r11
80004018:	f4 ea 00 00 	ld.d	r10,r10[0]
8000401c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004020:	0e 9b       	mov	r11,r7
80004022:	18 95       	mov	r5,r12
80004024:	c4 c8       	rjmp	800040bc <get_arg+0x264>
80004026:	62 0a       	ld.w	r10,r1[0x0]
80004028:	5b fa       	cp.w	r10,-1
8000402a:	c0 a1       	brne	8000403e <get_arg+0x1e6>
8000402c:	50 19       	stdsp	sp[0x4],r9
8000402e:	50 28       	stdsp	sp[0x8],r8
80004030:	e0 6a 00 80 	mov	r10,128
80004034:	30 0b       	mov	r11,0
80004036:	02 9c       	mov	r12,r1
80004038:	ce de       	rcall	80003e12 <memset>
8000403a:	40 28       	lddsp	r8,sp[0x8]
8000403c:	40 19       	lddsp	r9,sp[0x4]
8000403e:	e4 cc 00 01 	sub	r12,r2,1
80004042:	0e 9b       	mov	r11,r7
80004044:	50 3c       	stdsp	sp[0xc],r12
80004046:	f2 0c 0c 49 	max	r9,r9,r12
8000404a:	c3 98       	rjmp	800040bc <get_arg+0x264>
8000404c:	62 0a       	ld.w	r10,r1[0x0]
8000404e:	5b fa       	cp.w	r10,-1
80004050:	c0 a1       	brne	80004064 <get_arg+0x20c>
80004052:	50 19       	stdsp	sp[0x4],r9
80004054:	50 28       	stdsp	sp[0x8],r8
80004056:	e0 6a 00 80 	mov	r10,128
8000405a:	30 0b       	mov	r11,0
8000405c:	02 9c       	mov	r12,r1
8000405e:	cd ae       	rcall	80003e12 <memset>
80004060:	40 28       	lddsp	r8,sp[0x8]
80004062:	40 19       	lddsp	r9,sp[0x4]
80004064:	20 12       	sub	r2,1
80004066:	30 0a       	mov	r10,0
80004068:	0e 9b       	mov	r11,r7
8000406a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000406e:	f2 02 0c 49 	max	r9,r9,r2
80004072:	c2 58       	rjmp	800040bc <get_arg+0x264>
80004074:	16 97       	mov	r7,r11
80004076:	6c 0a       	ld.w	r10,r6[0x0]
80004078:	f4 cb ff fc 	sub	r11,r10,-4
8000407c:	8d 0b       	st.w	r6[0x0],r11
8000407e:	74 0a       	ld.w	r10,r10[0x0]
80004080:	0e 9b       	mov	r11,r7
80004082:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004086:	2f f5       	sub	r5,-1
80004088:	c1 a8       	rjmp	800040bc <get_arg+0x264>
8000408a:	f4 c2 00 30 	sub	r2,r10,48
8000408e:	c0 68       	rjmp	8000409a <get_arg+0x242>
80004090:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004094:	2f f7       	sub	r7,-1
80004096:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000409a:	0f 8a       	ld.ub	r10,r7[0x0]
8000409c:	58 0a       	cp.w	r10,0
8000409e:	c0 e0       	breq	800040ba <get_arg+0x262>
800040a0:	23 0a       	sub	r10,48
800040a2:	58 9a       	cp.w	r10,9
800040a4:	fe 98 ff f6 	brls	80004090 <get_arg+0x238>
800040a8:	c0 98       	rjmp	800040ba <get_arg+0x262>
800040aa:	2f f7       	sub	r7,-1
800040ac:	0f 8a       	ld.ub	r10,r7[0x0]
800040ae:	58 0a       	cp.w	r10,0
800040b0:	c0 50       	breq	800040ba <get_arg+0x262>
800040b2:	23 0a       	sub	r10,48
800040b4:	58 9a       	cp.w	r10,9
800040b6:	fe 98 ff fa 	brls	800040aa <get_arg+0x252>
800040ba:	0e 9b       	mov	r11,r7
800040bc:	40 7c       	lddsp	r12,sp[0x1c]
800040be:	30 ba       	mov	r10,11
800040c0:	f4 0c 18 00 	cp.b	r12,r10
800040c4:	fe 91 fe f4 	brne	80003eac <get_arg+0x54>
800040c8:	40 42       	lddsp	r2,sp[0x10]
800040ca:	17 8c       	ld.ub	r12,r11[0x0]
800040cc:	0a 32       	cp.w	r2,r5
800040ce:	5f 4a       	srge	r10
800040d0:	f0 0c 18 00 	cp.b	r12,r8
800040d4:	5f 1c       	srne	r12
800040d6:	f9 ea 00 0a 	and	r10,r12,r10
800040da:	f0 0a 18 00 	cp.b	r10,r8
800040de:	fe 91 fe d1 	brne	80003e80 <get_arg+0x28>
800040e2:	30 08       	mov	r8,0
800040e4:	40 4e       	lddsp	lr,sp[0x10]
800040e6:	17 8a       	ld.ub	r10,r11[0x0]
800040e8:	e2 05 00 21 	add	r1,r1,r5<<0x2
800040ec:	f0 0a 18 00 	cp.b	r10,r8
800040f0:	fc 09 17 10 	movne	r9,lr
800040f4:	e6 05 00 38 	add	r8,r3,r5<<0x3
800040f8:	06 9e       	mov	lr,r3
800040fa:	c2 a8       	rjmp	8000414e <get_arg+0x2f6>
800040fc:	62 0a       	ld.w	r10,r1[0x0]
800040fe:	58 3a       	cp.w	r10,3
80004100:	c1 e0       	breq	8000413c <get_arg+0x2e4>
80004102:	e0 89 00 07 	brgt	80004110 <get_arg+0x2b8>
80004106:	58 1a       	cp.w	r10,1
80004108:	c1 a0       	breq	8000413c <get_arg+0x2e4>
8000410a:	58 2a       	cp.w	r10,2
8000410c:	c1 81       	brne	8000413c <get_arg+0x2e4>
8000410e:	c0 58       	rjmp	80004118 <get_arg+0x2c0>
80004110:	58 5a       	cp.w	r10,5
80004112:	c0 c0       	breq	8000412a <get_arg+0x2d2>
80004114:	c0 b5       	brlt	8000412a <get_arg+0x2d2>
80004116:	c1 38       	rjmp	8000413c <get_arg+0x2e4>
80004118:	6c 0a       	ld.w	r10,r6[0x0]
8000411a:	f4 cc ff f8 	sub	r12,r10,-8
8000411e:	8d 0c       	st.w	r6[0x0],r12
80004120:	f4 e2 00 00 	ld.d	r2,r10[0]
80004124:	f0 e3 00 00 	st.d	r8[0],r2
80004128:	c1 08       	rjmp	80004148 <get_arg+0x2f0>
8000412a:	6c 0a       	ld.w	r10,r6[0x0]
8000412c:	f4 cc ff f8 	sub	r12,r10,-8
80004130:	8d 0c       	st.w	r6[0x0],r12
80004132:	f4 e2 00 00 	ld.d	r2,r10[0]
80004136:	f0 e3 00 00 	st.d	r8[0],r2
8000413a:	c0 78       	rjmp	80004148 <get_arg+0x2f0>
8000413c:	6c 0a       	ld.w	r10,r6[0x0]
8000413e:	f4 cc ff fc 	sub	r12,r10,-4
80004142:	8d 0c       	st.w	r6[0x0],r12
80004144:	74 0a       	ld.w	r10,r10[0x0]
80004146:	91 0a       	st.w	r8[0x0],r10
80004148:	2f f5       	sub	r5,-1
8000414a:	2f 88       	sub	r8,-8
8000414c:	2f c1       	sub	r1,-4
8000414e:	12 35       	cp.w	r5,r9
80004150:	fe 9a ff d6 	brle	800040fc <get_arg+0x2a4>
80004154:	1c 93       	mov	r3,lr
80004156:	40 52       	lddsp	r2,sp[0x14]
80004158:	40 6e       	lddsp	lr,sp[0x18]
8000415a:	85 05       	st.w	r2[0x0],r5
8000415c:	9d 0b       	st.w	lr[0x0],r11
8000415e:	40 4b       	lddsp	r11,sp[0x10]
80004160:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004164:	2f 8d       	sub	sp,-32
80004166:	d8 32       	popm	r0-r7,pc

80004168 <__sprint_r>:
80004168:	d4 21       	pushm	r4-r7,lr
8000416a:	14 97       	mov	r7,r10
8000416c:	74 28       	ld.w	r8,r10[0x8]
8000416e:	58 08       	cp.w	r8,0
80004170:	c0 41       	brne	80004178 <__sprint_r+0x10>
80004172:	95 18       	st.w	r10[0x4],r8
80004174:	10 9c       	mov	r12,r8
80004176:	d8 22       	popm	r4-r7,pc
80004178:	e0 a0 18 b4 	rcall	800072e0 <__sfvwrite_r>
8000417c:	30 08       	mov	r8,0
8000417e:	8f 18       	st.w	r7[0x4],r8
80004180:	8f 28       	st.w	r7[0x8],r8
80004182:	d8 22       	popm	r4-r7,pc

80004184 <_vfprintf_r>:
80004184:	d4 31       	pushm	r0-r7,lr
80004186:	fa cd 06 bc 	sub	sp,sp,1724
8000418a:	51 09       	stdsp	sp[0x40],r9
8000418c:	16 91       	mov	r1,r11
8000418e:	14 97       	mov	r7,r10
80004190:	18 95       	mov	r5,r12
80004192:	e0 a0 1a 1d 	rcall	800075cc <_localeconv_r>
80004196:	78 0c       	ld.w	r12,r12[0x0]
80004198:	50 cc       	stdsp	sp[0x30],r12
8000419a:	58 05       	cp.w	r5,0
8000419c:	c0 70       	breq	800041aa <_vfprintf_r+0x26>
8000419e:	6a 68       	ld.w	r8,r5[0x18]
800041a0:	58 08       	cp.w	r8,0
800041a2:	c0 41       	brne	800041aa <_vfprintf_r+0x26>
800041a4:	0a 9c       	mov	r12,r5
800041a6:	e0 a0 17 3d 	rcall	80007020 <__sinit>
800041aa:	fe c8 a5 16 	sub	r8,pc,-23274
800041ae:	10 31       	cp.w	r1,r8
800041b0:	c0 31       	brne	800041b6 <_vfprintf_r+0x32>
800041b2:	6a 01       	ld.w	r1,r5[0x0]
800041b4:	c0 c8       	rjmp	800041cc <_vfprintf_r+0x48>
800041b6:	fe c8 a5 02 	sub	r8,pc,-23294
800041ba:	10 31       	cp.w	r1,r8
800041bc:	c0 31       	brne	800041c2 <_vfprintf_r+0x3e>
800041be:	6a 11       	ld.w	r1,r5[0x4]
800041c0:	c0 68       	rjmp	800041cc <_vfprintf_r+0x48>
800041c2:	fe c8 a4 ee 	sub	r8,pc,-23314
800041c6:	10 31       	cp.w	r1,r8
800041c8:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800041cc:	82 68       	ld.sh	r8,r1[0xc]
800041ce:	ed b8 00 03 	bld	r8,0x3
800041d2:	c0 41       	brne	800041da <_vfprintf_r+0x56>
800041d4:	62 48       	ld.w	r8,r1[0x10]
800041d6:	58 08       	cp.w	r8,0
800041d8:	c0 71       	brne	800041e6 <_vfprintf_r+0x62>
800041da:	02 9b       	mov	r11,r1
800041dc:	0a 9c       	mov	r12,r5
800041de:	e0 a0 0f 5d 	rcall	80006098 <__swsetup_r>
800041e2:	e0 81 0f 54 	brne	8000608a <_vfprintf_r+0x1f06>
800041e6:	82 68       	ld.sh	r8,r1[0xc]
800041e8:	10 99       	mov	r9,r8
800041ea:	e2 19 00 1a 	andl	r9,0x1a,COH
800041ee:	58 a9       	cp.w	r9,10
800041f0:	c3 c1       	brne	80004268 <_vfprintf_r+0xe4>
800041f2:	82 79       	ld.sh	r9,r1[0xe]
800041f4:	30 0a       	mov	r10,0
800041f6:	f4 09 19 00 	cp.h	r9,r10
800041fa:	c3 75       	brlt	80004268 <_vfprintf_r+0xe4>
800041fc:	a1 d8       	cbr	r8,0x1
800041fe:	fb 58 05 d0 	st.h	sp[1488],r8
80004202:	62 88       	ld.w	r8,r1[0x20]
80004204:	fb 48 05 e4 	st.w	sp[1508],r8
80004208:	62 a8       	ld.w	r8,r1[0x28]
8000420a:	fb 48 05 ec 	st.w	sp[1516],r8
8000420e:	fa c8 ff bc 	sub	r8,sp,-68
80004212:	fb 48 05 d4 	st.w	sp[1492],r8
80004216:	fb 48 05 c4 	st.w	sp[1476],r8
8000421a:	e0 68 04 00 	mov	r8,1024
8000421e:	fb 48 05 d8 	st.w	sp[1496],r8
80004222:	fb 48 05 cc 	st.w	sp[1484],r8
80004226:	30 08       	mov	r8,0
80004228:	fb 59 05 d2 	st.h	sp[1490],r9
8000422c:	0e 9a       	mov	r10,r7
8000422e:	41 09       	lddsp	r9,sp[0x40]
80004230:	fa c7 fa 3c 	sub	r7,sp,-1476
80004234:	fb 48 05 dc 	st.w	sp[1500],r8
80004238:	0a 9c       	mov	r12,r5
8000423a:	0e 9b       	mov	r11,r7
8000423c:	ca 4f       	rcall	80004184 <_vfprintf_r>
8000423e:	50 bc       	stdsp	sp[0x2c],r12
80004240:	c0 95       	brlt	80004252 <_vfprintf_r+0xce>
80004242:	0e 9b       	mov	r11,r7
80004244:	0a 9c       	mov	r12,r5
80004246:	e0 a0 16 15 	rcall	80006e70 <_fflush_r>
8000424a:	40 be       	lddsp	lr,sp[0x2c]
8000424c:	f9 be 01 ff 	movne	lr,-1
80004250:	50 be       	stdsp	sp[0x2c],lr
80004252:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004256:	ed b8 00 06 	bld	r8,0x6
8000425a:	e0 81 0f 1a 	brne	8000608e <_vfprintf_r+0x1f0a>
8000425e:	82 68       	ld.sh	r8,r1[0xc]
80004260:	a7 a8       	sbr	r8,0x6
80004262:	a2 68       	st.h	r1[0xc],r8
80004264:	e0 8f 0f 15 	bral	8000608e <_vfprintf_r+0x1f0a>
80004268:	30 08       	mov	r8,0
8000426a:	fb 48 06 b4 	st.w	sp[1716],r8
8000426e:	fb 48 06 90 	st.w	sp[1680],r8
80004272:	fb 48 06 8c 	st.w	sp[1676],r8
80004276:	fb 48 06 b0 	st.w	sp[1712],r8
8000427a:	30 08       	mov	r8,0
8000427c:	30 09       	mov	r9,0
8000427e:	50 a7       	stdsp	sp[0x28],r7
80004280:	50 78       	stdsp	sp[0x1c],r8
80004282:	fa c3 f9 e0 	sub	r3,sp,-1568
80004286:	3f f8       	mov	r8,-1
80004288:	50 59       	stdsp	sp[0x14],r9
8000428a:	fb 43 06 88 	st.w	sp[1672],r3
8000428e:	fb 48 05 44 	st.w	sp[1348],r8
80004292:	12 9c       	mov	r12,r9
80004294:	50 69       	stdsp	sp[0x18],r9
80004296:	50 d9       	stdsp	sp[0x34],r9
80004298:	50 e9       	stdsp	sp[0x38],r9
8000429a:	50 b9       	stdsp	sp[0x2c],r9
8000429c:	12 97       	mov	r7,r9
8000429e:	0a 94       	mov	r4,r5
800042a0:	40 a2       	lddsp	r2,sp[0x28]
800042a2:	32 5a       	mov	r10,37
800042a4:	30 08       	mov	r8,0
800042a6:	c0 28       	rjmp	800042aa <_vfprintf_r+0x126>
800042a8:	2f f2       	sub	r2,-1
800042aa:	05 89       	ld.ub	r9,r2[0x0]
800042ac:	f0 09 18 00 	cp.b	r9,r8
800042b0:	5f 1b       	srne	r11
800042b2:	f4 09 18 00 	cp.b	r9,r10
800042b6:	5f 19       	srne	r9
800042b8:	f3 eb 00 0b 	and	r11,r9,r11
800042bc:	f0 0b 18 00 	cp.b	r11,r8
800042c0:	cf 41       	brne	800042a8 <_vfprintf_r+0x124>
800042c2:	40 ab       	lddsp	r11,sp[0x28]
800042c4:	e4 0b 01 06 	sub	r6,r2,r11
800042c8:	c1 e0       	breq	80004304 <_vfprintf_r+0x180>
800042ca:	fa f8 06 90 	ld.w	r8,sp[1680]
800042ce:	0c 08       	add	r8,r6
800042d0:	87 0b       	st.w	r3[0x0],r11
800042d2:	fb 48 06 90 	st.w	sp[1680],r8
800042d6:	87 16       	st.w	r3[0x4],r6
800042d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800042dc:	2f f8       	sub	r8,-1
800042de:	fb 48 06 8c 	st.w	sp[1676],r8
800042e2:	58 78       	cp.w	r8,7
800042e4:	e0 89 00 04 	brgt	800042ec <_vfprintf_r+0x168>
800042e8:	2f 83       	sub	r3,-8
800042ea:	c0 a8       	rjmp	800042fe <_vfprintf_r+0x17a>
800042ec:	fa ca f9 78 	sub	r10,sp,-1672
800042f0:	02 9b       	mov	r11,r1
800042f2:	08 9c       	mov	r12,r4
800042f4:	c3 af       	rcall	80004168 <__sprint_r>
800042f6:	e0 81 0e c6 	brne	80006082 <_vfprintf_r+0x1efe>
800042fa:	fa c3 f9 e0 	sub	r3,sp,-1568
800042fe:	40 ba       	lddsp	r10,sp[0x2c]
80004300:	0c 0a       	add	r10,r6
80004302:	50 ba       	stdsp	sp[0x2c],r10
80004304:	05 89       	ld.ub	r9,r2[0x0]
80004306:	30 08       	mov	r8,0
80004308:	f0 09 18 00 	cp.b	r9,r8
8000430c:	e0 80 0e aa 	breq	80006060 <_vfprintf_r+0x1edc>
80004310:	30 09       	mov	r9,0
80004312:	fb 68 06 bb 	st.b	sp[1723],r8
80004316:	0e 96       	mov	r6,r7
80004318:	e4 c8 ff ff 	sub	r8,r2,-1
8000431c:	3f fe       	mov	lr,-1
8000431e:	50 93       	stdsp	sp[0x24],r3
80004320:	50 41       	stdsp	sp[0x10],r1
80004322:	0e 93       	mov	r3,r7
80004324:	04 91       	mov	r1,r2
80004326:	50 89       	stdsp	sp[0x20],r9
80004328:	50 a8       	stdsp	sp[0x28],r8
8000432a:	50 2e       	stdsp	sp[0x8],lr
8000432c:	50 39       	stdsp	sp[0xc],r9
8000432e:	12 95       	mov	r5,r9
80004330:	12 90       	mov	r0,r9
80004332:	10 97       	mov	r7,r8
80004334:	08 92       	mov	r2,r4
80004336:	c0 78       	rjmp	80004344 <_vfprintf_r+0x1c0>
80004338:	3f fc       	mov	r12,-1
8000433a:	08 97       	mov	r7,r4
8000433c:	50 2c       	stdsp	sp[0x8],r12
8000433e:	c0 38       	rjmp	80004344 <_vfprintf_r+0x1c0>
80004340:	30 0b       	mov	r11,0
80004342:	50 3b       	stdsp	sp[0xc],r11
80004344:	0f 38       	ld.ub	r8,r7++
80004346:	c0 28       	rjmp	8000434a <_vfprintf_r+0x1c6>
80004348:	12 90       	mov	r0,r9
8000434a:	f0 c9 00 20 	sub	r9,r8,32
8000434e:	e0 49 00 58 	cp.w	r9,88
80004352:	e0 8b 0a 30 	brhi	800057b2 <_vfprintf_r+0x162e>
80004356:	fe ca aa 6a 	sub	r10,pc,-21910
8000435a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000435e:	50 a7       	stdsp	sp[0x28],r7
80004360:	50 80       	stdsp	sp[0x20],r0
80004362:	0c 97       	mov	r7,r6
80004364:	04 94       	mov	r4,r2
80004366:	06 96       	mov	r6,r3
80004368:	02 92       	mov	r2,r1
8000436a:	fe c9 a8 42 	sub	r9,pc,-22462
8000436e:	40 93       	lddsp	r3,sp[0x24]
80004370:	10 90       	mov	r0,r8
80004372:	40 41       	lddsp	r1,sp[0x10]
80004374:	50 d9       	stdsp	sp[0x34],r9
80004376:	e0 8f 08 8e 	bral	80005492 <_vfprintf_r+0x130e>
8000437a:	30 08       	mov	r8,0
8000437c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004380:	f0 09 18 00 	cp.b	r9,r8
80004384:	ce 01       	brne	80004344 <_vfprintf_r+0x1c0>
80004386:	32 08       	mov	r8,32
80004388:	c6 e8       	rjmp	80004464 <_vfprintf_r+0x2e0>
8000438a:	a1 a5       	sbr	r5,0x0
8000438c:	cd cb       	rjmp	80004344 <_vfprintf_r+0x1c0>
8000438e:	0f 89       	ld.ub	r9,r7[0x0]
80004390:	f2 c8 00 30 	sub	r8,r9,48
80004394:	58 98       	cp.w	r8,9
80004396:	e0 8b 00 1d 	brhi	800043d0 <_vfprintf_r+0x24c>
8000439a:	ee c8 ff ff 	sub	r8,r7,-1
8000439e:	30 0b       	mov	r11,0
800043a0:	23 09       	sub	r9,48
800043a2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800043a6:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800043aa:	11 39       	ld.ub	r9,r8++
800043ac:	f2 ca 00 30 	sub	r10,r9,48
800043b0:	58 9a       	cp.w	r10,9
800043b2:	fe 98 ff f7 	brls	800043a0 <_vfprintf_r+0x21c>
800043b6:	e0 49 00 24 	cp.w	r9,36
800043ba:	cc 31       	brne	80004340 <_vfprintf_r+0x1bc>
800043bc:	e0 4b 00 20 	cp.w	r11,32
800043c0:	e0 89 0e 60 	brgt	80006080 <_vfprintf_r+0x1efc>
800043c4:	20 1b       	sub	r11,1
800043c6:	fa f9 06 b4 	ld.w	r9,sp[1716]
800043ca:	12 3b       	cp.w	r11,r9
800043cc:	c0 95       	brlt	800043de <_vfprintf_r+0x25a>
800043ce:	c1 08       	rjmp	800043ee <_vfprintf_r+0x26a>
800043d0:	fa f9 06 b4 	ld.w	r9,sp[1716]
800043d4:	ec ca ff ff 	sub	r10,r6,-1
800043d8:	12 36       	cp.w	r6,r9
800043da:	c1 f5       	brlt	80004418 <_vfprintf_r+0x294>
800043dc:	c2 68       	rjmp	80004428 <_vfprintf_r+0x2a4>
800043de:	fa ce f9 44 	sub	lr,sp,-1724
800043e2:	10 97       	mov	r7,r8
800043e4:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800043e8:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800043ec:	c3 58       	rjmp	80004456 <_vfprintf_r+0x2d2>
800043ee:	10 97       	mov	r7,r8
800043f0:	fa c8 f9 50 	sub	r8,sp,-1712
800043f4:	1a d8       	st.w	--sp,r8
800043f6:	fa c8 fa b8 	sub	r8,sp,-1352
800043fa:	1a d8       	st.w	--sp,r8
800043fc:	fa c8 fb b4 	sub	r8,sp,-1100
80004400:	02 9a       	mov	r10,r1
80004402:	1a d8       	st.w	--sp,r8
80004404:	04 9c       	mov	r12,r2
80004406:	fa c8 f9 40 	sub	r8,sp,-1728
8000440a:	fa c9 ff b4 	sub	r9,sp,-76
8000440e:	fe b0 fd 25 	rcall	80003e58 <get_arg>
80004412:	2f dd       	sub	sp,-12
80004414:	78 00       	ld.w	r0,r12[0x0]
80004416:	c2 08       	rjmp	80004456 <_vfprintf_r+0x2d2>
80004418:	fa cc f9 44 	sub	r12,sp,-1724
8000441c:	14 96       	mov	r6,r10
8000441e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004422:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004426:	c1 88       	rjmp	80004456 <_vfprintf_r+0x2d2>
80004428:	41 08       	lddsp	r8,sp[0x40]
8000442a:	59 f9       	cp.w	r9,31
8000442c:	e0 89 00 11 	brgt	8000444e <_vfprintf_r+0x2ca>
80004430:	f0 cb ff fc 	sub	r11,r8,-4
80004434:	51 0b       	stdsp	sp[0x40],r11
80004436:	70 00       	ld.w	r0,r8[0x0]
80004438:	fa cb f9 44 	sub	r11,sp,-1724
8000443c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004440:	f1 40 fd 88 	st.w	r8[-632],r0
80004444:	2f f9       	sub	r9,-1
80004446:	14 96       	mov	r6,r10
80004448:	fb 49 06 b4 	st.w	sp[1716],r9
8000444c:	c0 58       	rjmp	80004456 <_vfprintf_r+0x2d2>
8000444e:	70 00       	ld.w	r0,r8[0x0]
80004450:	14 96       	mov	r6,r10
80004452:	2f c8       	sub	r8,-4
80004454:	51 08       	stdsp	sp[0x40],r8
80004456:	58 00       	cp.w	r0,0
80004458:	fe 94 ff 76 	brge	80004344 <_vfprintf_r+0x1c0>
8000445c:	5c 30       	neg	r0
8000445e:	a3 a5       	sbr	r5,0x2
80004460:	c7 2b       	rjmp	80004344 <_vfprintf_r+0x1c0>
80004462:	32 b8       	mov	r8,43
80004464:	fb 68 06 bb 	st.b	sp[1723],r8
80004468:	c6 eb       	rjmp	80004344 <_vfprintf_r+0x1c0>
8000446a:	0f 38       	ld.ub	r8,r7++
8000446c:	e0 48 00 2a 	cp.w	r8,42
80004470:	c0 30       	breq	80004476 <_vfprintf_r+0x2f2>
80004472:	30 09       	mov	r9,0
80004474:	c7 98       	rjmp	80004566 <_vfprintf_r+0x3e2>
80004476:	0f 88       	ld.ub	r8,r7[0x0]
80004478:	f0 c9 00 30 	sub	r9,r8,48
8000447c:	58 99       	cp.w	r9,9
8000447e:	e0 8b 00 1f 	brhi	800044bc <_vfprintf_r+0x338>
80004482:	ee c4 ff ff 	sub	r4,r7,-1
80004486:	30 0b       	mov	r11,0
80004488:	23 08       	sub	r8,48
8000448a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000448e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80004492:	09 38       	ld.ub	r8,r4++
80004494:	f0 c9 00 30 	sub	r9,r8,48
80004498:	58 99       	cp.w	r9,9
8000449a:	fe 98 ff f7 	brls	80004488 <_vfprintf_r+0x304>
8000449e:	e0 48 00 24 	cp.w	r8,36
800044a2:	fe 91 ff 4f 	brne	80004340 <_vfprintf_r+0x1bc>
800044a6:	e0 4b 00 20 	cp.w	r11,32
800044aa:	e0 89 0d eb 	brgt	80006080 <_vfprintf_r+0x1efc>
800044ae:	20 1b       	sub	r11,1
800044b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044b4:	10 3b       	cp.w	r11,r8
800044b6:	c0 a5       	brlt	800044ca <_vfprintf_r+0x346>
800044b8:	c1 18       	rjmp	800044da <_vfprintf_r+0x356>
800044ba:	d7 03       	nop
800044bc:	fa fa 06 b4 	ld.w	r10,sp[1716]
800044c0:	ec c9 ff ff 	sub	r9,r6,-1
800044c4:	14 36       	cp.w	r6,r10
800044c6:	c1 f5       	brlt	80004504 <_vfprintf_r+0x380>
800044c8:	c2 88       	rjmp	80004518 <_vfprintf_r+0x394>
800044ca:	fa ca f9 44 	sub	r10,sp,-1724
800044ce:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800044d2:	f6 fb fd 88 	ld.w	r11,r11[-632]
800044d6:	50 2b       	stdsp	sp[0x8],r11
800044d8:	c3 c8       	rjmp	80004550 <_vfprintf_r+0x3cc>
800044da:	fa c8 f9 50 	sub	r8,sp,-1712
800044de:	1a d8       	st.w	--sp,r8
800044e0:	fa c8 fa b8 	sub	r8,sp,-1352
800044e4:	1a d8       	st.w	--sp,r8
800044e6:	fa c8 fb b4 	sub	r8,sp,-1100
800044ea:	02 9a       	mov	r10,r1
800044ec:	1a d8       	st.w	--sp,r8
800044ee:	04 9c       	mov	r12,r2
800044f0:	fa c8 f9 40 	sub	r8,sp,-1728
800044f4:	fa c9 ff b4 	sub	r9,sp,-76
800044f8:	fe b0 fc b0 	rcall	80003e58 <get_arg>
800044fc:	2f dd       	sub	sp,-12
800044fe:	78 0c       	ld.w	r12,r12[0x0]
80004500:	50 2c       	stdsp	sp[0x8],r12
80004502:	c2 78       	rjmp	80004550 <_vfprintf_r+0x3cc>
80004504:	12 96       	mov	r6,r9
80004506:	0e 94       	mov	r4,r7
80004508:	fa c9 f9 44 	sub	r9,sp,-1724
8000450c:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004510:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004514:	50 28       	stdsp	sp[0x8],r8
80004516:	c1 d8       	rjmp	80004550 <_vfprintf_r+0x3cc>
80004518:	41 08       	lddsp	r8,sp[0x40]
8000451a:	59 fa       	cp.w	r10,31
8000451c:	e0 89 00 14 	brgt	80004544 <_vfprintf_r+0x3c0>
80004520:	f0 cb ff fc 	sub	r11,r8,-4
80004524:	70 08       	ld.w	r8,r8[0x0]
80004526:	51 0b       	stdsp	sp[0x40],r11
80004528:	50 28       	stdsp	sp[0x8],r8
8000452a:	fa c6 f9 44 	sub	r6,sp,-1724
8000452e:	40 2e       	lddsp	lr,sp[0x8]
80004530:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004534:	f1 4e fd 88 	st.w	r8[-632],lr
80004538:	2f fa       	sub	r10,-1
8000453a:	0e 94       	mov	r4,r7
8000453c:	fb 4a 06 b4 	st.w	sp[1716],r10
80004540:	12 96       	mov	r6,r9
80004542:	c0 78       	rjmp	80004550 <_vfprintf_r+0x3cc>
80004544:	70 0c       	ld.w	r12,r8[0x0]
80004546:	0e 94       	mov	r4,r7
80004548:	2f c8       	sub	r8,-4
8000454a:	50 2c       	stdsp	sp[0x8],r12
8000454c:	12 96       	mov	r6,r9
8000454e:	51 08       	stdsp	sp[0x40],r8
80004550:	40 2b       	lddsp	r11,sp[0x8]
80004552:	58 0b       	cp.w	r11,0
80004554:	fe 95 fe f2 	brlt	80004338 <_vfprintf_r+0x1b4>
80004558:	08 97       	mov	r7,r4
8000455a:	cf 5a       	rjmp	80004344 <_vfprintf_r+0x1c0>
8000455c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004560:	0f 38       	ld.ub	r8,r7++
80004562:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004566:	f0 ca 00 30 	sub	r10,r8,48
8000456a:	58 9a       	cp.w	r10,9
8000456c:	fe 98 ff f8 	brls	8000455c <_vfprintf_r+0x3d8>
80004570:	3f fa       	mov	r10,-1
80004572:	f2 0a 0c 49 	max	r9,r9,r10
80004576:	50 29       	stdsp	sp[0x8],r9
80004578:	ce 9a       	rjmp	8000434a <_vfprintf_r+0x1c6>
8000457a:	a7 b5       	sbr	r5,0x7
8000457c:	ce 4a       	rjmp	80004344 <_vfprintf_r+0x1c0>
8000457e:	30 09       	mov	r9,0
80004580:	23 08       	sub	r8,48
80004582:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004586:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000458a:	0f 38       	ld.ub	r8,r7++
8000458c:	f0 ca 00 30 	sub	r10,r8,48
80004590:	58 9a       	cp.w	r10,9
80004592:	fe 98 ff f7 	brls	80004580 <_vfprintf_r+0x3fc>
80004596:	e0 48 00 24 	cp.w	r8,36
8000459a:	fe 91 fe d7 	brne	80004348 <_vfprintf_r+0x1c4>
8000459e:	e0 49 00 20 	cp.w	r9,32
800045a2:	e0 89 0d 6f 	brgt	80006080 <_vfprintf_r+0x1efc>
800045a6:	f2 c3 00 01 	sub	r3,r9,1
800045aa:	30 19       	mov	r9,1
800045ac:	50 39       	stdsp	sp[0xc],r9
800045ae:	cc ba       	rjmp	80004344 <_vfprintf_r+0x1c0>
800045b0:	a3 b5       	sbr	r5,0x3
800045b2:	cc 9a       	rjmp	80004344 <_vfprintf_r+0x1c0>
800045b4:	a7 a5       	sbr	r5,0x6
800045b6:	cc 7a       	rjmp	80004344 <_vfprintf_r+0x1c0>
800045b8:	0a 98       	mov	r8,r5
800045ba:	a5 b5       	sbr	r5,0x5
800045bc:	a5 a8       	sbr	r8,0x4
800045be:	0f 89       	ld.ub	r9,r7[0x0]
800045c0:	36 ce       	mov	lr,108
800045c2:	fc 09 18 00 	cp.b	r9,lr
800045c6:	f7 b7 00 ff 	subeq	r7,-1
800045ca:	f0 05 17 10 	movne	r5,r8
800045ce:	cb ba       	rjmp	80004344 <_vfprintf_r+0x1c0>
800045d0:	a5 b5       	sbr	r5,0x5
800045d2:	cb 9a       	rjmp	80004344 <_vfprintf_r+0x1c0>
800045d4:	50 a7       	stdsp	sp[0x28],r7
800045d6:	50 80       	stdsp	sp[0x20],r0
800045d8:	0c 97       	mov	r7,r6
800045da:	10 90       	mov	r0,r8
800045dc:	06 96       	mov	r6,r3
800045de:	04 94       	mov	r4,r2
800045e0:	40 93       	lddsp	r3,sp[0x24]
800045e2:	02 92       	mov	r2,r1
800045e4:	0e 99       	mov	r9,r7
800045e6:	40 41       	lddsp	r1,sp[0x10]
800045e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045ec:	40 3c       	lddsp	r12,sp[0xc]
800045ee:	58 0c       	cp.w	r12,0
800045f0:	c1 d0       	breq	8000462a <_vfprintf_r+0x4a6>
800045f2:	10 36       	cp.w	r6,r8
800045f4:	c0 64       	brge	80004600 <_vfprintf_r+0x47c>
800045f6:	fa cb f9 44 	sub	r11,sp,-1724
800045fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045fe:	c1 d8       	rjmp	80004638 <_vfprintf_r+0x4b4>
80004600:	fa c8 f9 50 	sub	r8,sp,-1712
80004604:	1a d8       	st.w	--sp,r8
80004606:	fa c8 fa b8 	sub	r8,sp,-1352
8000460a:	1a d8       	st.w	--sp,r8
8000460c:	fa c8 fb b4 	sub	r8,sp,-1100
80004610:	1a d8       	st.w	--sp,r8
80004612:	fa c8 f9 40 	sub	r8,sp,-1728
80004616:	fa c9 ff b4 	sub	r9,sp,-76
8000461a:	04 9a       	mov	r10,r2
8000461c:	0c 9b       	mov	r11,r6
8000461e:	08 9c       	mov	r12,r4
80004620:	fe b0 fc 1c 	rcall	80003e58 <get_arg>
80004624:	2f dd       	sub	sp,-12
80004626:	19 b8       	ld.ub	r8,r12[0x3]
80004628:	c2 28       	rjmp	8000466c <_vfprintf_r+0x4e8>
8000462a:	2f f7       	sub	r7,-1
8000462c:	10 39       	cp.w	r9,r8
8000462e:	c0 84       	brge	8000463e <_vfprintf_r+0x4ba>
80004630:	fa ca f9 44 	sub	r10,sp,-1724
80004634:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004638:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000463c:	c1 88       	rjmp	8000466c <_vfprintf_r+0x4e8>
8000463e:	41 09       	lddsp	r9,sp[0x40]
80004640:	59 f8       	cp.w	r8,31
80004642:	e0 89 00 12 	brgt	80004666 <_vfprintf_r+0x4e2>
80004646:	f2 ca ff fc 	sub	r10,r9,-4
8000464a:	51 0a       	stdsp	sp[0x40],r10
8000464c:	72 09       	ld.w	r9,r9[0x0]
8000464e:	fa c6 f9 44 	sub	r6,sp,-1724
80004652:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004656:	2f f8       	sub	r8,-1
80004658:	f5 49 fd 88 	st.w	r10[-632],r9
8000465c:	fb 48 06 b4 	st.w	sp[1716],r8
80004660:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004664:	c0 48       	rjmp	8000466c <_vfprintf_r+0x4e8>
80004666:	13 b8       	ld.ub	r8,r9[0x3]
80004668:	2f c9       	sub	r9,-4
8000466a:	51 09       	stdsp	sp[0x40],r9
8000466c:	fb 68 06 60 	st.b	sp[1632],r8
80004670:	30 0e       	mov	lr,0
80004672:	30 08       	mov	r8,0
80004674:	30 12       	mov	r2,1
80004676:	fb 68 06 bb 	st.b	sp[1723],r8
8000467a:	50 2e       	stdsp	sp[0x8],lr
8000467c:	e0 8f 08 ad 	bral	800057d6 <_vfprintf_r+0x1652>
80004680:	50 a7       	stdsp	sp[0x28],r7
80004682:	50 80       	stdsp	sp[0x20],r0
80004684:	0c 97       	mov	r7,r6
80004686:	04 94       	mov	r4,r2
80004688:	06 96       	mov	r6,r3
8000468a:	02 92       	mov	r2,r1
8000468c:	40 93       	lddsp	r3,sp[0x24]
8000468e:	10 90       	mov	r0,r8
80004690:	40 41       	lddsp	r1,sp[0x10]
80004692:	a5 a5       	sbr	r5,0x4
80004694:	c0 a8       	rjmp	800046a8 <_vfprintf_r+0x524>
80004696:	50 a7       	stdsp	sp[0x28],r7
80004698:	50 80       	stdsp	sp[0x20],r0
8000469a:	0c 97       	mov	r7,r6
8000469c:	04 94       	mov	r4,r2
8000469e:	06 96       	mov	r6,r3
800046a0:	02 92       	mov	r2,r1
800046a2:	40 93       	lddsp	r3,sp[0x24]
800046a4:	10 90       	mov	r0,r8
800046a6:	40 41       	lddsp	r1,sp[0x10]
800046a8:	ed b5 00 05 	bld	r5,0x5
800046ac:	c5 11       	brne	8000474e <_vfprintf_r+0x5ca>
800046ae:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046b2:	40 3c       	lddsp	r12,sp[0xc]
800046b4:	58 0c       	cp.w	r12,0
800046b6:	c1 e0       	breq	800046f2 <_vfprintf_r+0x56e>
800046b8:	10 36       	cp.w	r6,r8
800046ba:	c0 64       	brge	800046c6 <_vfprintf_r+0x542>
800046bc:	fa cb f9 44 	sub	r11,sp,-1724
800046c0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800046c4:	c2 08       	rjmp	80004704 <_vfprintf_r+0x580>
800046c6:	fa c8 f9 50 	sub	r8,sp,-1712
800046ca:	1a d8       	st.w	--sp,r8
800046cc:	fa c8 fa b8 	sub	r8,sp,-1352
800046d0:	0c 9b       	mov	r11,r6
800046d2:	1a d8       	st.w	--sp,r8
800046d4:	fa c8 fb b4 	sub	r8,sp,-1100
800046d8:	1a d8       	st.w	--sp,r8
800046da:	fa c9 ff b4 	sub	r9,sp,-76
800046de:	fa c8 f9 40 	sub	r8,sp,-1728
800046e2:	04 9a       	mov	r10,r2
800046e4:	08 9c       	mov	r12,r4
800046e6:	fe b0 fb b9 	rcall	80003e58 <get_arg>
800046ea:	2f dd       	sub	sp,-12
800046ec:	78 1b       	ld.w	r11,r12[0x4]
800046ee:	78 09       	ld.w	r9,r12[0x0]
800046f0:	c2 b8       	rjmp	80004746 <_vfprintf_r+0x5c2>
800046f2:	ee ca ff ff 	sub	r10,r7,-1
800046f6:	10 37       	cp.w	r7,r8
800046f8:	c0 b4       	brge	8000470e <_vfprintf_r+0x58a>
800046fa:	fa c9 f9 44 	sub	r9,sp,-1724
800046fe:	14 97       	mov	r7,r10
80004700:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004704:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004708:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000470c:	c1 d8       	rjmp	80004746 <_vfprintf_r+0x5c2>
8000470e:	41 09       	lddsp	r9,sp[0x40]
80004710:	59 f8       	cp.w	r8,31
80004712:	e0 89 00 14 	brgt	8000473a <_vfprintf_r+0x5b6>
80004716:	f2 cb ff f8 	sub	r11,r9,-8
8000471a:	51 0b       	stdsp	sp[0x40],r11
8000471c:	fa c6 f9 44 	sub	r6,sp,-1724
80004720:	72 1b       	ld.w	r11,r9[0x4]
80004722:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004726:	72 09       	ld.w	r9,r9[0x0]
80004728:	f9 4b fd 8c 	st.w	r12[-628],r11
8000472c:	f9 49 fd 88 	st.w	r12[-632],r9
80004730:	2f f8       	sub	r8,-1
80004732:	14 97       	mov	r7,r10
80004734:	fb 48 06 b4 	st.w	sp[1716],r8
80004738:	c0 78       	rjmp	80004746 <_vfprintf_r+0x5c2>
8000473a:	f2 c8 ff f8 	sub	r8,r9,-8
8000473e:	72 1b       	ld.w	r11,r9[0x4]
80004740:	14 97       	mov	r7,r10
80004742:	51 08       	stdsp	sp[0x40],r8
80004744:	72 09       	ld.w	r9,r9[0x0]
80004746:	16 98       	mov	r8,r11
80004748:	fa e9 00 00 	st.d	sp[0],r8
8000474c:	ca e8       	rjmp	800048a8 <_vfprintf_r+0x724>
8000474e:	ed b5 00 04 	bld	r5,0x4
80004752:	c1 71       	brne	80004780 <_vfprintf_r+0x5fc>
80004754:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004758:	40 3e       	lddsp	lr,sp[0xc]
8000475a:	58 0e       	cp.w	lr,0
8000475c:	c0 80       	breq	8000476c <_vfprintf_r+0x5e8>
8000475e:	10 36       	cp.w	r6,r8
80004760:	c6 94       	brge	80004832 <_vfprintf_r+0x6ae>
80004762:	fa cc f9 44 	sub	r12,sp,-1724
80004766:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000476a:	c8 28       	rjmp	8000486e <_vfprintf_r+0x6ea>
8000476c:	ee ca ff ff 	sub	r10,r7,-1
80004770:	10 37       	cp.w	r7,r8
80004772:	e0 84 00 81 	brge	80004874 <_vfprintf_r+0x6f0>
80004776:	fa cb f9 44 	sub	r11,sp,-1724
8000477a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000477e:	c7 78       	rjmp	8000486c <_vfprintf_r+0x6e8>
80004780:	ed b5 00 06 	bld	r5,0x6
80004784:	c4 b1       	brne	8000481a <_vfprintf_r+0x696>
80004786:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000478a:	40 3c       	lddsp	r12,sp[0xc]
8000478c:	58 0c       	cp.w	r12,0
8000478e:	c1 d0       	breq	800047c8 <_vfprintf_r+0x644>
80004790:	10 36       	cp.w	r6,r8
80004792:	c0 64       	brge	8000479e <_vfprintf_r+0x61a>
80004794:	fa cb f9 44 	sub	r11,sp,-1724
80004798:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000479c:	c1 f8       	rjmp	800047da <_vfprintf_r+0x656>
8000479e:	fa c8 f9 50 	sub	r8,sp,-1712
800047a2:	1a d8       	st.w	--sp,r8
800047a4:	fa c8 fa b8 	sub	r8,sp,-1352
800047a8:	1a d8       	st.w	--sp,r8
800047aa:	fa c8 fb b4 	sub	r8,sp,-1100
800047ae:	1a d8       	st.w	--sp,r8
800047b0:	fa c8 f9 40 	sub	r8,sp,-1728
800047b4:	fa c9 ff b4 	sub	r9,sp,-76
800047b8:	04 9a       	mov	r10,r2
800047ba:	0c 9b       	mov	r11,r6
800047bc:	08 9c       	mov	r12,r4
800047be:	fe b0 fb 4d 	rcall	80003e58 <get_arg>
800047c2:	2f dd       	sub	sp,-12
800047c4:	98 18       	ld.sh	r8,r12[0x2]
800047c6:	c2 68       	rjmp	80004812 <_vfprintf_r+0x68e>
800047c8:	ee ca ff ff 	sub	r10,r7,-1
800047cc:	10 37       	cp.w	r7,r8
800047ce:	c0 94       	brge	800047e0 <_vfprintf_r+0x65c>
800047d0:	fa c9 f9 44 	sub	r9,sp,-1724
800047d4:	14 97       	mov	r7,r10
800047d6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047da:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800047de:	c1 a8       	rjmp	80004812 <_vfprintf_r+0x68e>
800047e0:	41 09       	lddsp	r9,sp[0x40]
800047e2:	59 f8       	cp.w	r8,31
800047e4:	e0 89 00 13 	brgt	8000480a <_vfprintf_r+0x686>
800047e8:	f2 cb ff fc 	sub	r11,r9,-4
800047ec:	51 0b       	stdsp	sp[0x40],r11
800047ee:	72 09       	ld.w	r9,r9[0x0]
800047f0:	fa c6 f9 44 	sub	r6,sp,-1724
800047f4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800047f8:	2f f8       	sub	r8,-1
800047fa:	f7 49 fd 88 	st.w	r11[-632],r9
800047fe:	fb 48 06 b4 	st.w	sp[1716],r8
80004802:	14 97       	mov	r7,r10
80004804:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004808:	c0 58       	rjmp	80004812 <_vfprintf_r+0x68e>
8000480a:	92 18       	ld.sh	r8,r9[0x2]
8000480c:	14 97       	mov	r7,r10
8000480e:	2f c9       	sub	r9,-4
80004810:	51 09       	stdsp	sp[0x40],r9
80004812:	50 18       	stdsp	sp[0x4],r8
80004814:	bf 58       	asr	r8,0x1f
80004816:	50 08       	stdsp	sp[0x0],r8
80004818:	c4 88       	rjmp	800048a8 <_vfprintf_r+0x724>
8000481a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000481e:	40 3c       	lddsp	r12,sp[0xc]
80004820:	58 0c       	cp.w	r12,0
80004822:	c1 d0       	breq	8000485c <_vfprintf_r+0x6d8>
80004824:	10 36       	cp.w	r6,r8
80004826:	c0 64       	brge	80004832 <_vfprintf_r+0x6ae>
80004828:	fa cb f9 44 	sub	r11,sp,-1724
8000482c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004830:	c1 f8       	rjmp	8000486e <_vfprintf_r+0x6ea>
80004832:	fa c8 f9 50 	sub	r8,sp,-1712
80004836:	1a d8       	st.w	--sp,r8
80004838:	fa c8 fa b8 	sub	r8,sp,-1352
8000483c:	0c 9b       	mov	r11,r6
8000483e:	1a d8       	st.w	--sp,r8
80004840:	fa c8 fb b4 	sub	r8,sp,-1100
80004844:	04 9a       	mov	r10,r2
80004846:	1a d8       	st.w	--sp,r8
80004848:	08 9c       	mov	r12,r4
8000484a:	fa c8 f9 40 	sub	r8,sp,-1728
8000484e:	fa c9 ff b4 	sub	r9,sp,-76
80004852:	fe b0 fb 03 	rcall	80003e58 <get_arg>
80004856:	2f dd       	sub	sp,-12
80004858:	78 0b       	ld.w	r11,r12[0x0]
8000485a:	c2 48       	rjmp	800048a2 <_vfprintf_r+0x71e>
8000485c:	ee ca ff ff 	sub	r10,r7,-1
80004860:	10 37       	cp.w	r7,r8
80004862:	c0 94       	brge	80004874 <_vfprintf_r+0x6f0>
80004864:	fa c9 f9 44 	sub	r9,sp,-1724
80004868:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000486c:	14 97       	mov	r7,r10
8000486e:	ec fb fd 88 	ld.w	r11,r6[-632]
80004872:	c1 88       	rjmp	800048a2 <_vfprintf_r+0x71e>
80004874:	41 09       	lddsp	r9,sp[0x40]
80004876:	59 f8       	cp.w	r8,31
80004878:	e0 89 00 11 	brgt	8000489a <_vfprintf_r+0x716>
8000487c:	f2 cb ff fc 	sub	r11,r9,-4
80004880:	51 0b       	stdsp	sp[0x40],r11
80004882:	fa c6 f9 44 	sub	r6,sp,-1724
80004886:	72 0b       	ld.w	r11,r9[0x0]
80004888:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000488c:	f3 4b fd 88 	st.w	r9[-632],r11
80004890:	2f f8       	sub	r8,-1
80004892:	14 97       	mov	r7,r10
80004894:	fb 48 06 b4 	st.w	sp[1716],r8
80004898:	c0 58       	rjmp	800048a2 <_vfprintf_r+0x71e>
8000489a:	72 0b       	ld.w	r11,r9[0x0]
8000489c:	14 97       	mov	r7,r10
8000489e:	2f c9       	sub	r9,-4
800048a0:	51 09       	stdsp	sp[0x40],r9
800048a2:	50 1b       	stdsp	sp[0x4],r11
800048a4:	bf 5b       	asr	r11,0x1f
800048a6:	50 0b       	stdsp	sp[0x0],r11
800048a8:	fa ea 00 00 	ld.d	r10,sp[0]
800048ac:	58 0a       	cp.w	r10,0
800048ae:	5c 2b       	cpc	r11
800048b0:	c0 e4       	brge	800048cc <_vfprintf_r+0x748>
800048b2:	30 08       	mov	r8,0
800048b4:	fa ea 00 00 	ld.d	r10,sp[0]
800048b8:	30 09       	mov	r9,0
800048ba:	f0 0a 01 0a 	sub	r10,r8,r10
800048be:	f2 0b 01 4b 	sbc	r11,r9,r11
800048c2:	32 d8       	mov	r8,45
800048c4:	fa eb 00 00 	st.d	sp[0],r10
800048c8:	fb 68 06 bb 	st.b	sp[1723],r8
800048cc:	30 18       	mov	r8,1
800048ce:	e0 8f 06 fa 	bral	800056c2 <_vfprintf_r+0x153e>
800048d2:	50 a7       	stdsp	sp[0x28],r7
800048d4:	50 80       	stdsp	sp[0x20],r0
800048d6:	0c 97       	mov	r7,r6
800048d8:	04 94       	mov	r4,r2
800048da:	06 96       	mov	r6,r3
800048dc:	02 92       	mov	r2,r1
800048de:	40 93       	lddsp	r3,sp[0x24]
800048e0:	10 90       	mov	r0,r8
800048e2:	40 41       	lddsp	r1,sp[0x10]
800048e4:	0e 99       	mov	r9,r7
800048e6:	ed b5 00 03 	bld	r5,0x3
800048ea:	c4 11       	brne	8000496c <_vfprintf_r+0x7e8>
800048ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048f0:	40 3a       	lddsp	r10,sp[0xc]
800048f2:	58 0a       	cp.w	r10,0
800048f4:	c1 90       	breq	80004926 <_vfprintf_r+0x7a2>
800048f6:	10 36       	cp.w	r6,r8
800048f8:	c6 45       	brlt	800049c0 <_vfprintf_r+0x83c>
800048fa:	fa c8 f9 50 	sub	r8,sp,-1712
800048fe:	1a d8       	st.w	--sp,r8
80004900:	fa c8 fa b8 	sub	r8,sp,-1352
80004904:	1a d8       	st.w	--sp,r8
80004906:	fa c8 fb b4 	sub	r8,sp,-1100
8000490a:	0c 9b       	mov	r11,r6
8000490c:	1a d8       	st.w	--sp,r8
8000490e:	04 9a       	mov	r10,r2
80004910:	fa c8 f9 40 	sub	r8,sp,-1728
80004914:	fa c9 ff b4 	sub	r9,sp,-76
80004918:	08 9c       	mov	r12,r4
8000491a:	fe b0 fa 9f 	rcall	80003e58 <get_arg>
8000491e:	2f dd       	sub	sp,-12
80004920:	78 16       	ld.w	r6,r12[0x4]
80004922:	50 76       	stdsp	sp[0x1c],r6
80004924:	c4 88       	rjmp	800049b4 <_vfprintf_r+0x830>
80004926:	2f f7       	sub	r7,-1
80004928:	10 39       	cp.w	r9,r8
8000492a:	c0 c4       	brge	80004942 <_vfprintf_r+0x7be>
8000492c:	fa ce f9 44 	sub	lr,sp,-1724
80004930:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004934:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004938:	50 7c       	stdsp	sp[0x1c],r12
8000493a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000493e:	50 56       	stdsp	sp[0x14],r6
80004940:	c6 68       	rjmp	80004a0c <_vfprintf_r+0x888>
80004942:	41 09       	lddsp	r9,sp[0x40]
80004944:	59 f8       	cp.w	r8,31
80004946:	e0 89 00 10 	brgt	80004966 <_vfprintf_r+0x7e2>
8000494a:	f2 ca ff f8 	sub	r10,r9,-8
8000494e:	72 1b       	ld.w	r11,r9[0x4]
80004950:	51 0a       	stdsp	sp[0x40],r10
80004952:	72 09       	ld.w	r9,r9[0x0]
80004954:	fa ca f9 44 	sub	r10,sp,-1724
80004958:	50 7b       	stdsp	sp[0x1c],r11
8000495a:	50 59       	stdsp	sp[0x14],r9
8000495c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004960:	40 5b       	lddsp	r11,sp[0x14]
80004962:	40 7a       	lddsp	r10,sp[0x1c]
80004964:	c4 78       	rjmp	800049f2 <_vfprintf_r+0x86e>
80004966:	72 18       	ld.w	r8,r9[0x4]
80004968:	50 78       	stdsp	sp[0x1c],r8
8000496a:	c4 c8       	rjmp	80004a02 <_vfprintf_r+0x87e>
8000496c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004970:	40 3e       	lddsp	lr,sp[0xc]
80004972:	58 0e       	cp.w	lr,0
80004974:	c2 30       	breq	800049ba <_vfprintf_r+0x836>
80004976:	10 36       	cp.w	r6,r8
80004978:	c0 94       	brge	8000498a <_vfprintf_r+0x806>
8000497a:	fa cc f9 44 	sub	r12,sp,-1724
8000497e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004982:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004986:	50 7b       	stdsp	sp[0x1c],r11
80004988:	cd 9b       	rjmp	8000493a <_vfprintf_r+0x7b6>
8000498a:	fa c8 f9 50 	sub	r8,sp,-1712
8000498e:	1a d8       	st.w	--sp,r8
80004990:	fa c8 fa b8 	sub	r8,sp,-1352
80004994:	04 9a       	mov	r10,r2
80004996:	1a d8       	st.w	--sp,r8
80004998:	fa c8 fb b4 	sub	r8,sp,-1100
8000499c:	0c 9b       	mov	r11,r6
8000499e:	1a d8       	st.w	--sp,r8
800049a0:	08 9c       	mov	r12,r4
800049a2:	fa c8 f9 40 	sub	r8,sp,-1728
800049a6:	fa c9 ff b4 	sub	r9,sp,-76
800049aa:	fe b0 fa 57 	rcall	80003e58 <get_arg>
800049ae:	2f dd       	sub	sp,-12
800049b0:	78 1a       	ld.w	r10,r12[0x4]
800049b2:	50 7a       	stdsp	sp[0x1c],r10
800049b4:	78 0c       	ld.w	r12,r12[0x0]
800049b6:	50 5c       	stdsp	sp[0x14],r12
800049b8:	c2 a8       	rjmp	80004a0c <_vfprintf_r+0x888>
800049ba:	2f f7       	sub	r7,-1
800049bc:	10 39       	cp.w	r9,r8
800049be:	c0 94       	brge	800049d0 <_vfprintf_r+0x84c>
800049c0:	fa c9 f9 44 	sub	r9,sp,-1724
800049c4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800049c8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800049cc:	50 78       	stdsp	sp[0x1c],r8
800049ce:	cb 6b       	rjmp	8000493a <_vfprintf_r+0x7b6>
800049d0:	41 09       	lddsp	r9,sp[0x40]
800049d2:	59 f8       	cp.w	r8,31
800049d4:	e0 89 00 15 	brgt	800049fe <_vfprintf_r+0x87a>
800049d8:	f2 ca ff f8 	sub	r10,r9,-8
800049dc:	72 16       	ld.w	r6,r9[0x4]
800049de:	72 09       	ld.w	r9,r9[0x0]
800049e0:	51 0a       	stdsp	sp[0x40],r10
800049e2:	50 59       	stdsp	sp[0x14],r9
800049e4:	fa ce f9 44 	sub	lr,sp,-1724
800049e8:	50 76       	stdsp	sp[0x1c],r6
800049ea:	fc 08 00 39 	add	r9,lr,r8<<0x3
800049ee:	40 5b       	lddsp	r11,sp[0x14]
800049f0:	0c 9a       	mov	r10,r6
800049f2:	f2 eb fd 88 	st.d	r9[-632],r10
800049f6:	2f f8       	sub	r8,-1
800049f8:	fb 48 06 b4 	st.w	sp[1716],r8
800049fc:	c0 88       	rjmp	80004a0c <_vfprintf_r+0x888>
800049fe:	72 1c       	ld.w	r12,r9[0x4]
80004a00:	50 7c       	stdsp	sp[0x1c],r12
80004a02:	f2 c8 ff f8 	sub	r8,r9,-8
80004a06:	51 08       	stdsp	sp[0x40],r8
80004a08:	72 09       	ld.w	r9,r9[0x0]
80004a0a:	50 59       	stdsp	sp[0x14],r9
80004a0c:	40 5b       	lddsp	r11,sp[0x14]
80004a0e:	40 7a       	lddsp	r10,sp[0x1c]
80004a10:	e0 a0 1c d6 	rcall	800083bc <__isinfd>
80004a14:	18 96       	mov	r6,r12
80004a16:	c1 70       	breq	80004a44 <_vfprintf_r+0x8c0>
80004a18:	30 08       	mov	r8,0
80004a1a:	30 09       	mov	r9,0
80004a1c:	40 5b       	lddsp	r11,sp[0x14]
80004a1e:	40 7a       	lddsp	r10,sp[0x1c]
80004a20:	e0 a0 20 66 	rcall	80008aec <__avr32_f64_cmp_lt>
80004a24:	c0 40       	breq	80004a2c <_vfprintf_r+0x8a8>
80004a26:	32 d8       	mov	r8,45
80004a28:	fb 68 06 bb 	st.b	sp[1723],r8
80004a2c:	fe c8 ae f0 	sub	r8,pc,-20752
80004a30:	fe c6 ae f0 	sub	r6,pc,-20752
80004a34:	a7 d5       	cbr	r5,0x7
80004a36:	e0 40 00 47 	cp.w	r0,71
80004a3a:	f0 06 17 a0 	movle	r6,r8
80004a3e:	30 32       	mov	r2,3
80004a40:	e0 8f 06 ce 	bral	800057dc <_vfprintf_r+0x1658>
80004a44:	40 5b       	lddsp	r11,sp[0x14]
80004a46:	40 7a       	lddsp	r10,sp[0x1c]
80004a48:	e0 a0 1c cf 	rcall	800083e6 <__isnand>
80004a4c:	c0 e0       	breq	80004a68 <_vfprintf_r+0x8e4>
80004a4e:	50 26       	stdsp	sp[0x8],r6
80004a50:	fe c8 af 0c 	sub	r8,pc,-20724
80004a54:	fe c6 af 0c 	sub	r6,pc,-20724
80004a58:	a7 d5       	cbr	r5,0x7
80004a5a:	e0 40 00 47 	cp.w	r0,71
80004a5e:	f0 06 17 a0 	movle	r6,r8
80004a62:	30 32       	mov	r2,3
80004a64:	e0 8f 06 c2 	bral	800057e8 <_vfprintf_r+0x1664>
80004a68:	40 2a       	lddsp	r10,sp[0x8]
80004a6a:	5b fa       	cp.w	r10,-1
80004a6c:	c0 41       	brne	80004a74 <_vfprintf_r+0x8f0>
80004a6e:	30 69       	mov	r9,6
80004a70:	50 29       	stdsp	sp[0x8],r9
80004a72:	c1 18       	rjmp	80004a94 <_vfprintf_r+0x910>
80004a74:	e0 40 00 47 	cp.w	r0,71
80004a78:	5f 09       	sreq	r9
80004a7a:	e0 40 00 67 	cp.w	r0,103
80004a7e:	5f 08       	sreq	r8
80004a80:	f3 e8 10 08 	or	r8,r9,r8
80004a84:	f8 08 18 00 	cp.b	r8,r12
80004a88:	c0 60       	breq	80004a94 <_vfprintf_r+0x910>
80004a8a:	40 28       	lddsp	r8,sp[0x8]
80004a8c:	58 08       	cp.w	r8,0
80004a8e:	f9 b8 00 01 	moveq	r8,1
80004a92:	50 28       	stdsp	sp[0x8],r8
80004a94:	40 78       	lddsp	r8,sp[0x1c]
80004a96:	40 59       	lddsp	r9,sp[0x14]
80004a98:	fa e9 06 94 	st.d	sp[1684],r8
80004a9c:	a9 a5       	sbr	r5,0x8
80004a9e:	fa f8 06 94 	ld.w	r8,sp[1684]
80004aa2:	58 08       	cp.w	r8,0
80004aa4:	c0 65       	brlt	80004ab0 <_vfprintf_r+0x92c>
80004aa6:	40 5e       	lddsp	lr,sp[0x14]
80004aa8:	30 0c       	mov	r12,0
80004aaa:	50 6e       	stdsp	sp[0x18],lr
80004aac:	50 9c       	stdsp	sp[0x24],r12
80004aae:	c0 78       	rjmp	80004abc <_vfprintf_r+0x938>
80004ab0:	40 5b       	lddsp	r11,sp[0x14]
80004ab2:	32 da       	mov	r10,45
80004ab4:	ee 1b 80 00 	eorh	r11,0x8000
80004ab8:	50 9a       	stdsp	sp[0x24],r10
80004aba:	50 6b       	stdsp	sp[0x18],r11
80004abc:	e0 40 00 46 	cp.w	r0,70
80004ac0:	5f 09       	sreq	r9
80004ac2:	e0 40 00 66 	cp.w	r0,102
80004ac6:	5f 08       	sreq	r8
80004ac8:	f3 e8 10 08 	or	r8,r9,r8
80004acc:	50 48       	stdsp	sp[0x10],r8
80004ace:	c0 40       	breq	80004ad6 <_vfprintf_r+0x952>
80004ad0:	40 22       	lddsp	r2,sp[0x8]
80004ad2:	30 39       	mov	r9,3
80004ad4:	c1 08       	rjmp	80004af4 <_vfprintf_r+0x970>
80004ad6:	e0 40 00 45 	cp.w	r0,69
80004ada:	5f 09       	sreq	r9
80004adc:	e0 40 00 65 	cp.w	r0,101
80004ae0:	5f 08       	sreq	r8
80004ae2:	40 22       	lddsp	r2,sp[0x8]
80004ae4:	10 49       	or	r9,r8
80004ae6:	2f f2       	sub	r2,-1
80004ae8:	40 46       	lddsp	r6,sp[0x10]
80004aea:	ec 09 18 00 	cp.b	r9,r6
80004aee:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004af2:	30 29       	mov	r9,2
80004af4:	fa c8 f9 5c 	sub	r8,sp,-1700
80004af8:	1a d8       	st.w	--sp,r8
80004afa:	fa c8 f9 54 	sub	r8,sp,-1708
80004afe:	1a d8       	st.w	--sp,r8
80004b00:	fa c8 f9 4c 	sub	r8,sp,-1716
80004b04:	08 9c       	mov	r12,r4
80004b06:	1a d8       	st.w	--sp,r8
80004b08:	04 98       	mov	r8,r2
80004b0a:	40 9b       	lddsp	r11,sp[0x24]
80004b0c:	40 aa       	lddsp	r10,sp[0x28]
80004b0e:	e0 a0 0b c3 	rcall	80006294 <_dtoa_r>
80004b12:	e0 40 00 47 	cp.w	r0,71
80004b16:	5f 19       	srne	r9
80004b18:	e0 40 00 67 	cp.w	r0,103
80004b1c:	5f 18       	srne	r8
80004b1e:	18 96       	mov	r6,r12
80004b20:	2f dd       	sub	sp,-12
80004b22:	f3 e8 00 08 	and	r8,r9,r8
80004b26:	c0 41       	brne	80004b2e <_vfprintf_r+0x9aa>
80004b28:	ed b5 00 00 	bld	r5,0x0
80004b2c:	c3 01       	brne	80004b8c <_vfprintf_r+0xa08>
80004b2e:	ec 02 00 0e 	add	lr,r6,r2
80004b32:	50 3e       	stdsp	sp[0xc],lr
80004b34:	40 4c       	lddsp	r12,sp[0x10]
80004b36:	58 0c       	cp.w	r12,0
80004b38:	c1 50       	breq	80004b62 <_vfprintf_r+0x9de>
80004b3a:	0d 89       	ld.ub	r9,r6[0x0]
80004b3c:	33 08       	mov	r8,48
80004b3e:	f0 09 18 00 	cp.b	r9,r8
80004b42:	c0 b1       	brne	80004b58 <_vfprintf_r+0x9d4>
80004b44:	30 08       	mov	r8,0
80004b46:	30 09       	mov	r9,0
80004b48:	40 6b       	lddsp	r11,sp[0x18]
80004b4a:	40 7a       	lddsp	r10,sp[0x1c]
80004b4c:	e0 a0 1f 89 	rcall	80008a5e <__avr32_f64_cmp_eq>
80004b50:	fb b2 00 01 	rsubeq	r2,1
80004b54:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004b58:	40 3b       	lddsp	r11,sp[0xc]
80004b5a:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004b5e:	10 0b       	add	r11,r8
80004b60:	50 3b       	stdsp	sp[0xc],r11
80004b62:	40 6b       	lddsp	r11,sp[0x18]
80004b64:	30 08       	mov	r8,0
80004b66:	30 09       	mov	r9,0
80004b68:	40 7a       	lddsp	r10,sp[0x1c]
80004b6a:	e0 a0 1f 7a 	rcall	80008a5e <__avr32_f64_cmp_eq>
80004b6e:	c0 90       	breq	80004b80 <_vfprintf_r+0x9fc>
80004b70:	40 3a       	lddsp	r10,sp[0xc]
80004b72:	fb 4a 06 a4 	st.w	sp[1700],r10
80004b76:	c0 58       	rjmp	80004b80 <_vfprintf_r+0x9fc>
80004b78:	10 c9       	st.b	r8++,r9
80004b7a:	fb 48 06 a4 	st.w	sp[1700],r8
80004b7e:	c0 28       	rjmp	80004b82 <_vfprintf_r+0x9fe>
80004b80:	33 09       	mov	r9,48
80004b82:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004b86:	40 3e       	lddsp	lr,sp[0xc]
80004b88:	1c 38       	cp.w	r8,lr
80004b8a:	cf 73       	brcs	80004b78 <_vfprintf_r+0x9f4>
80004b8c:	e0 40 00 47 	cp.w	r0,71
80004b90:	5f 09       	sreq	r9
80004b92:	e0 40 00 67 	cp.w	r0,103
80004b96:	5f 08       	sreq	r8
80004b98:	f3 e8 10 08 	or	r8,r9,r8
80004b9c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004ba0:	0c 19       	sub	r9,r6
80004ba2:	50 69       	stdsp	sp[0x18],r9
80004ba4:	58 08       	cp.w	r8,0
80004ba6:	c0 b0       	breq	80004bbc <_vfprintf_r+0xa38>
80004ba8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004bac:	5b d8       	cp.w	r8,-3
80004bae:	c0 55       	brlt	80004bb8 <_vfprintf_r+0xa34>
80004bb0:	40 2c       	lddsp	r12,sp[0x8]
80004bb2:	18 38       	cp.w	r8,r12
80004bb4:	e0 8a 00 6a 	brle	80004c88 <_vfprintf_r+0xb04>
80004bb8:	20 20       	sub	r0,2
80004bba:	c0 58       	rjmp	80004bc4 <_vfprintf_r+0xa40>
80004bbc:	e0 40 00 65 	cp.w	r0,101
80004bc0:	e0 89 00 46 	brgt	80004c4c <_vfprintf_r+0xac8>
80004bc4:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004bc8:	fb 60 06 9c 	st.b	sp[1692],r0
80004bcc:	20 1b       	sub	r11,1
80004bce:	fb 4b 06 ac 	st.w	sp[1708],r11
80004bd2:	c0 47       	brpl	80004bda <_vfprintf_r+0xa56>
80004bd4:	5c 3b       	neg	r11
80004bd6:	32 d8       	mov	r8,45
80004bd8:	c0 28       	rjmp	80004bdc <_vfprintf_r+0xa58>
80004bda:	32 b8       	mov	r8,43
80004bdc:	fb 68 06 9d 	st.b	sp[1693],r8
80004be0:	58 9b       	cp.w	r11,9
80004be2:	e0 8a 00 1d 	brle	80004c1c <_vfprintf_r+0xa98>
80004be6:	fa c9 fa 35 	sub	r9,sp,-1483
80004bea:	30 aa       	mov	r10,10
80004bec:	12 98       	mov	r8,r9
80004bee:	0e 9c       	mov	r12,r7
80004bf0:	0c 92       	mov	r2,r6
80004bf2:	f6 0a 0c 06 	divs	r6,r11,r10
80004bf6:	0e 9b       	mov	r11,r7
80004bf8:	2d 0b       	sub	r11,-48
80004bfa:	10 fb       	st.b	--r8,r11
80004bfc:	0c 9b       	mov	r11,r6
80004bfe:	58 96       	cp.w	r6,9
80004c00:	fe 99 ff f9 	brgt	80004bf2 <_vfprintf_r+0xa6e>
80004c04:	2d 0b       	sub	r11,-48
80004c06:	18 97       	mov	r7,r12
80004c08:	04 96       	mov	r6,r2
80004c0a:	10 fb       	st.b	--r8,r11
80004c0c:	fa ca f9 62 	sub	r10,sp,-1694
80004c10:	c0 38       	rjmp	80004c16 <_vfprintf_r+0xa92>
80004c12:	11 3b       	ld.ub	r11,r8++
80004c14:	14 cb       	st.b	r10++,r11
80004c16:	12 38       	cp.w	r8,r9
80004c18:	cf d3       	brcs	80004c12 <_vfprintf_r+0xa8e>
80004c1a:	c0 98       	rjmp	80004c2c <_vfprintf_r+0xaa8>
80004c1c:	2d 0b       	sub	r11,-48
80004c1e:	33 08       	mov	r8,48
80004c20:	fb 6b 06 9f 	st.b	sp[1695],r11
80004c24:	fb 68 06 9e 	st.b	sp[1694],r8
80004c28:	fa ca f9 60 	sub	r10,sp,-1696
80004c2c:	fa c8 f9 64 	sub	r8,sp,-1692
80004c30:	f4 08 01 08 	sub	r8,r10,r8
80004c34:	50 e8       	stdsp	sp[0x38],r8
80004c36:	10 92       	mov	r2,r8
80004c38:	40 6b       	lddsp	r11,sp[0x18]
80004c3a:	16 02       	add	r2,r11
80004c3c:	58 1b       	cp.w	r11,1
80004c3e:	e0 89 00 05 	brgt	80004c48 <_vfprintf_r+0xac4>
80004c42:	ed b5 00 00 	bld	r5,0x0
80004c46:	c3 51       	brne	80004cb0 <_vfprintf_r+0xb2c>
80004c48:	2f f2       	sub	r2,-1
80004c4a:	c3 38       	rjmp	80004cb0 <_vfprintf_r+0xb2c>
80004c4c:	e0 40 00 66 	cp.w	r0,102
80004c50:	c1 c1       	brne	80004c88 <_vfprintf_r+0xb04>
80004c52:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004c56:	58 02       	cp.w	r2,0
80004c58:	e0 8a 00 0c 	brle	80004c70 <_vfprintf_r+0xaec>
80004c5c:	40 2a       	lddsp	r10,sp[0x8]
80004c5e:	58 0a       	cp.w	r10,0
80004c60:	c0 41       	brne	80004c68 <_vfprintf_r+0xae4>
80004c62:	ed b5 00 00 	bld	r5,0x0
80004c66:	c2 51       	brne	80004cb0 <_vfprintf_r+0xb2c>
80004c68:	2f f2       	sub	r2,-1
80004c6a:	40 29       	lddsp	r9,sp[0x8]
80004c6c:	12 02       	add	r2,r9
80004c6e:	c0 b8       	rjmp	80004c84 <_vfprintf_r+0xb00>
80004c70:	40 28       	lddsp	r8,sp[0x8]
80004c72:	58 08       	cp.w	r8,0
80004c74:	c0 61       	brne	80004c80 <_vfprintf_r+0xafc>
80004c76:	ed b5 00 00 	bld	r5,0x0
80004c7a:	c0 30       	breq	80004c80 <_vfprintf_r+0xafc>
80004c7c:	30 12       	mov	r2,1
80004c7e:	c1 98       	rjmp	80004cb0 <_vfprintf_r+0xb2c>
80004c80:	40 22       	lddsp	r2,sp[0x8]
80004c82:	2f e2       	sub	r2,-2
80004c84:	36 60       	mov	r0,102
80004c86:	c1 58       	rjmp	80004cb0 <_vfprintf_r+0xb2c>
80004c88:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004c8c:	40 6e       	lddsp	lr,sp[0x18]
80004c8e:	1c 32       	cp.w	r2,lr
80004c90:	c0 65       	brlt	80004c9c <_vfprintf_r+0xb18>
80004c92:	ed b5 00 00 	bld	r5,0x0
80004c96:	f7 b2 00 ff 	subeq	r2,-1
80004c9a:	c0 a8       	rjmp	80004cae <_vfprintf_r+0xb2a>
80004c9c:	e4 08 11 02 	rsub	r8,r2,2
80004ca0:	40 6c       	lddsp	r12,sp[0x18]
80004ca2:	58 02       	cp.w	r2,0
80004ca4:	f0 02 17 a0 	movle	r2,r8
80004ca8:	f9 b2 09 01 	movgt	r2,1
80004cac:	18 02       	add	r2,r12
80004cae:	36 70       	mov	r0,103
80004cb0:	40 9b       	lddsp	r11,sp[0x24]
80004cb2:	58 0b       	cp.w	r11,0
80004cb4:	e0 80 05 94 	breq	800057dc <_vfprintf_r+0x1658>
80004cb8:	32 d8       	mov	r8,45
80004cba:	fb 68 06 bb 	st.b	sp[1723],r8
80004cbe:	e0 8f 05 93 	bral	800057e4 <_vfprintf_r+0x1660>
80004cc2:	50 a7       	stdsp	sp[0x28],r7
80004cc4:	04 94       	mov	r4,r2
80004cc6:	0c 97       	mov	r7,r6
80004cc8:	02 92       	mov	r2,r1
80004cca:	06 96       	mov	r6,r3
80004ccc:	40 41       	lddsp	r1,sp[0x10]
80004cce:	40 93       	lddsp	r3,sp[0x24]
80004cd0:	0e 99       	mov	r9,r7
80004cd2:	ed b5 00 05 	bld	r5,0x5
80004cd6:	c4 81       	brne	80004d66 <_vfprintf_r+0xbe2>
80004cd8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cdc:	40 3e       	lddsp	lr,sp[0xc]
80004cde:	58 0e       	cp.w	lr,0
80004ce0:	c1 d0       	breq	80004d1a <_vfprintf_r+0xb96>
80004ce2:	10 36       	cp.w	r6,r8
80004ce4:	c0 64       	brge	80004cf0 <_vfprintf_r+0xb6c>
80004ce6:	fa cc f9 44 	sub	r12,sp,-1724
80004cea:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004cee:	c1 d8       	rjmp	80004d28 <_vfprintf_r+0xba4>
80004cf0:	fa c8 f9 50 	sub	r8,sp,-1712
80004cf4:	1a d8       	st.w	--sp,r8
80004cf6:	fa c8 fa b8 	sub	r8,sp,-1352
80004cfa:	04 9a       	mov	r10,r2
80004cfc:	1a d8       	st.w	--sp,r8
80004cfe:	fa c8 fb b4 	sub	r8,sp,-1100
80004d02:	0c 9b       	mov	r11,r6
80004d04:	1a d8       	st.w	--sp,r8
80004d06:	08 9c       	mov	r12,r4
80004d08:	fa c8 f9 40 	sub	r8,sp,-1728
80004d0c:	fa c9 ff b4 	sub	r9,sp,-76
80004d10:	fe b0 f8 a4 	rcall	80003e58 <get_arg>
80004d14:	2f dd       	sub	sp,-12
80004d16:	78 0a       	ld.w	r10,r12[0x0]
80004d18:	c2 08       	rjmp	80004d58 <_vfprintf_r+0xbd4>
80004d1a:	2f f7       	sub	r7,-1
80004d1c:	10 39       	cp.w	r9,r8
80004d1e:	c0 84       	brge	80004d2e <_vfprintf_r+0xbaa>
80004d20:	fa cb f9 44 	sub	r11,sp,-1724
80004d24:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d28:	ec fa fd 88 	ld.w	r10,r6[-632]
80004d2c:	c1 68       	rjmp	80004d58 <_vfprintf_r+0xbd4>
80004d2e:	41 09       	lddsp	r9,sp[0x40]
80004d30:	59 f8       	cp.w	r8,31
80004d32:	e0 89 00 10 	brgt	80004d52 <_vfprintf_r+0xbce>
80004d36:	f2 ca ff fc 	sub	r10,r9,-4
80004d3a:	51 0a       	stdsp	sp[0x40],r10
80004d3c:	fa c6 f9 44 	sub	r6,sp,-1724
80004d40:	72 0a       	ld.w	r10,r9[0x0]
80004d42:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d46:	f3 4a fd 88 	st.w	r9[-632],r10
80004d4a:	2f f8       	sub	r8,-1
80004d4c:	fb 48 06 b4 	st.w	sp[1716],r8
80004d50:	c0 48       	rjmp	80004d58 <_vfprintf_r+0xbd4>
80004d52:	72 0a       	ld.w	r10,r9[0x0]
80004d54:	2f c9       	sub	r9,-4
80004d56:	51 09       	stdsp	sp[0x40],r9
80004d58:	40 be       	lddsp	lr,sp[0x2c]
80004d5a:	1c 98       	mov	r8,lr
80004d5c:	95 1e       	st.w	r10[0x4],lr
80004d5e:	bf 58       	asr	r8,0x1f
80004d60:	95 08       	st.w	r10[0x0],r8
80004d62:	fe 9f fa 9f 	bral	800042a0 <_vfprintf_r+0x11c>
80004d66:	ed b5 00 04 	bld	r5,0x4
80004d6a:	c4 80       	breq	80004dfa <_vfprintf_r+0xc76>
80004d6c:	e2 15 00 40 	andl	r5,0x40,COH
80004d70:	c4 50       	breq	80004dfa <_vfprintf_r+0xc76>
80004d72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d76:	40 3c       	lddsp	r12,sp[0xc]
80004d78:	58 0c       	cp.w	r12,0
80004d7a:	c1 d0       	breq	80004db4 <_vfprintf_r+0xc30>
80004d7c:	10 36       	cp.w	r6,r8
80004d7e:	c0 64       	brge	80004d8a <_vfprintf_r+0xc06>
80004d80:	fa cb f9 44 	sub	r11,sp,-1724
80004d84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d88:	c1 d8       	rjmp	80004dc2 <_vfprintf_r+0xc3e>
80004d8a:	fa c8 f9 50 	sub	r8,sp,-1712
80004d8e:	1a d8       	st.w	--sp,r8
80004d90:	fa c8 fa b8 	sub	r8,sp,-1352
80004d94:	04 9a       	mov	r10,r2
80004d96:	1a d8       	st.w	--sp,r8
80004d98:	fa c8 fb b4 	sub	r8,sp,-1100
80004d9c:	0c 9b       	mov	r11,r6
80004d9e:	1a d8       	st.w	--sp,r8
80004da0:	08 9c       	mov	r12,r4
80004da2:	fa c8 f9 40 	sub	r8,sp,-1728
80004da6:	fa c9 ff b4 	sub	r9,sp,-76
80004daa:	fe b0 f8 57 	rcall	80003e58 <get_arg>
80004dae:	2f dd       	sub	sp,-12
80004db0:	78 0a       	ld.w	r10,r12[0x0]
80004db2:	c2 08       	rjmp	80004df2 <_vfprintf_r+0xc6e>
80004db4:	2f f7       	sub	r7,-1
80004db6:	10 39       	cp.w	r9,r8
80004db8:	c0 84       	brge	80004dc8 <_vfprintf_r+0xc44>
80004dba:	fa ca f9 44 	sub	r10,sp,-1724
80004dbe:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004dc2:	ec fa fd 88 	ld.w	r10,r6[-632]
80004dc6:	c1 68       	rjmp	80004df2 <_vfprintf_r+0xc6e>
80004dc8:	41 09       	lddsp	r9,sp[0x40]
80004dca:	59 f8       	cp.w	r8,31
80004dcc:	e0 89 00 10 	brgt	80004dec <_vfprintf_r+0xc68>
80004dd0:	f2 ca ff fc 	sub	r10,r9,-4
80004dd4:	51 0a       	stdsp	sp[0x40],r10
80004dd6:	fa c6 f9 44 	sub	r6,sp,-1724
80004dda:	72 0a       	ld.w	r10,r9[0x0]
80004ddc:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004de0:	f3 4a fd 88 	st.w	r9[-632],r10
80004de4:	2f f8       	sub	r8,-1
80004de6:	fb 48 06 b4 	st.w	sp[1716],r8
80004dea:	c0 48       	rjmp	80004df2 <_vfprintf_r+0xc6e>
80004dec:	72 0a       	ld.w	r10,r9[0x0]
80004dee:	2f c9       	sub	r9,-4
80004df0:	51 09       	stdsp	sp[0x40],r9
80004df2:	40 be       	lddsp	lr,sp[0x2c]
80004df4:	b4 0e       	st.h	r10[0x0],lr
80004df6:	fe 9f fa 55 	bral	800042a0 <_vfprintf_r+0x11c>
80004dfa:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dfe:	40 3c       	lddsp	r12,sp[0xc]
80004e00:	58 0c       	cp.w	r12,0
80004e02:	c1 d0       	breq	80004e3c <_vfprintf_r+0xcb8>
80004e04:	10 36       	cp.w	r6,r8
80004e06:	c0 64       	brge	80004e12 <_vfprintf_r+0xc8e>
80004e08:	fa cb f9 44 	sub	r11,sp,-1724
80004e0c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e10:	c1 d8       	rjmp	80004e4a <_vfprintf_r+0xcc6>
80004e12:	fa c8 f9 50 	sub	r8,sp,-1712
80004e16:	1a d8       	st.w	--sp,r8
80004e18:	fa c8 fa b8 	sub	r8,sp,-1352
80004e1c:	04 9a       	mov	r10,r2
80004e1e:	1a d8       	st.w	--sp,r8
80004e20:	fa c8 fb b4 	sub	r8,sp,-1100
80004e24:	0c 9b       	mov	r11,r6
80004e26:	1a d8       	st.w	--sp,r8
80004e28:	08 9c       	mov	r12,r4
80004e2a:	fa c8 f9 40 	sub	r8,sp,-1728
80004e2e:	fa c9 ff b4 	sub	r9,sp,-76
80004e32:	fe b0 f8 13 	rcall	80003e58 <get_arg>
80004e36:	2f dd       	sub	sp,-12
80004e38:	78 0a       	ld.w	r10,r12[0x0]
80004e3a:	c2 08       	rjmp	80004e7a <_vfprintf_r+0xcf6>
80004e3c:	2f f7       	sub	r7,-1
80004e3e:	10 39       	cp.w	r9,r8
80004e40:	c0 84       	brge	80004e50 <_vfprintf_r+0xccc>
80004e42:	fa ca f9 44 	sub	r10,sp,-1724
80004e46:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004e4a:	ec fa fd 88 	ld.w	r10,r6[-632]
80004e4e:	c1 68       	rjmp	80004e7a <_vfprintf_r+0xcf6>
80004e50:	41 09       	lddsp	r9,sp[0x40]
80004e52:	59 f8       	cp.w	r8,31
80004e54:	e0 89 00 10 	brgt	80004e74 <_vfprintf_r+0xcf0>
80004e58:	f2 ca ff fc 	sub	r10,r9,-4
80004e5c:	51 0a       	stdsp	sp[0x40],r10
80004e5e:	fa c6 f9 44 	sub	r6,sp,-1724
80004e62:	72 0a       	ld.w	r10,r9[0x0]
80004e64:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e68:	f3 4a fd 88 	st.w	r9[-632],r10
80004e6c:	2f f8       	sub	r8,-1
80004e6e:	fb 48 06 b4 	st.w	sp[1716],r8
80004e72:	c0 48       	rjmp	80004e7a <_vfprintf_r+0xcf6>
80004e74:	72 0a       	ld.w	r10,r9[0x0]
80004e76:	2f c9       	sub	r9,-4
80004e78:	51 09       	stdsp	sp[0x40],r9
80004e7a:	40 be       	lddsp	lr,sp[0x2c]
80004e7c:	95 0e       	st.w	r10[0x0],lr
80004e7e:	fe 9f fa 11 	bral	800042a0 <_vfprintf_r+0x11c>
80004e82:	50 a7       	stdsp	sp[0x28],r7
80004e84:	50 80       	stdsp	sp[0x20],r0
80004e86:	0c 97       	mov	r7,r6
80004e88:	04 94       	mov	r4,r2
80004e8a:	06 96       	mov	r6,r3
80004e8c:	02 92       	mov	r2,r1
80004e8e:	40 93       	lddsp	r3,sp[0x24]
80004e90:	10 90       	mov	r0,r8
80004e92:	40 41       	lddsp	r1,sp[0x10]
80004e94:	a5 a5       	sbr	r5,0x4
80004e96:	c0 a8       	rjmp	80004eaa <_vfprintf_r+0xd26>
80004e98:	50 a7       	stdsp	sp[0x28],r7
80004e9a:	50 80       	stdsp	sp[0x20],r0
80004e9c:	0c 97       	mov	r7,r6
80004e9e:	04 94       	mov	r4,r2
80004ea0:	06 96       	mov	r6,r3
80004ea2:	02 92       	mov	r2,r1
80004ea4:	40 93       	lddsp	r3,sp[0x24]
80004ea6:	10 90       	mov	r0,r8
80004ea8:	40 41       	lddsp	r1,sp[0x10]
80004eaa:	ed b5 00 05 	bld	r5,0x5
80004eae:	c5 d1       	brne	80004f68 <_vfprintf_r+0xde4>
80004eb0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004eb4:	40 3c       	lddsp	r12,sp[0xc]
80004eb6:	58 0c       	cp.w	r12,0
80004eb8:	c2 60       	breq	80004f04 <_vfprintf_r+0xd80>
80004eba:	10 36       	cp.w	r6,r8
80004ebc:	c0 a4       	brge	80004ed0 <_vfprintf_r+0xd4c>
80004ebe:	fa cb f9 44 	sub	r11,sp,-1724
80004ec2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ec6:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004eca:	fa e9 00 00 	st.d	sp[0],r8
80004ece:	c1 88       	rjmp	80004efe <_vfprintf_r+0xd7a>
80004ed0:	fa c8 f9 50 	sub	r8,sp,-1712
80004ed4:	1a d8       	st.w	--sp,r8
80004ed6:	fa c8 fa b8 	sub	r8,sp,-1352
80004eda:	04 9a       	mov	r10,r2
80004edc:	1a d8       	st.w	--sp,r8
80004ede:	0c 9b       	mov	r11,r6
80004ee0:	fa c8 fb b4 	sub	r8,sp,-1100
80004ee4:	08 9c       	mov	r12,r4
80004ee6:	1a d8       	st.w	--sp,r8
80004ee8:	fa c8 f9 40 	sub	r8,sp,-1728
80004eec:	fa c9 ff b4 	sub	r9,sp,-76
80004ef0:	fe b0 f7 b4 	rcall	80003e58 <get_arg>
80004ef4:	2f dd       	sub	sp,-12
80004ef6:	f8 ea 00 00 	ld.d	r10,r12[0]
80004efa:	fa eb 00 00 	st.d	sp[0],r10
80004efe:	30 08       	mov	r8,0
80004f00:	e0 8f 03 de 	bral	800056bc <_vfprintf_r+0x1538>
80004f04:	ee ca ff ff 	sub	r10,r7,-1
80004f08:	10 37       	cp.w	r7,r8
80004f0a:	c0 b4       	brge	80004f20 <_vfprintf_r+0xd9c>
80004f0c:	fa c9 f9 44 	sub	r9,sp,-1724
80004f10:	14 97       	mov	r7,r10
80004f12:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004f16:	ec ea fd 88 	ld.d	r10,r6[-632]
80004f1a:	fa eb 00 00 	st.d	sp[0],r10
80004f1e:	c1 88       	rjmp	80004f4e <_vfprintf_r+0xdca>
80004f20:	41 09       	lddsp	r9,sp[0x40]
80004f22:	59 f8       	cp.w	r8,31
80004f24:	e0 89 00 18 	brgt	80004f54 <_vfprintf_r+0xdd0>
80004f28:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f2c:	f2 cb ff f8 	sub	r11,r9,-8
80004f30:	fa e7 00 00 	st.d	sp[0],r6
80004f34:	51 0b       	stdsp	sp[0x40],r11
80004f36:	fa c6 f9 44 	sub	r6,sp,-1724
80004f3a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f3e:	fa e6 00 00 	ld.d	r6,sp[0]
80004f42:	f2 e7 fd 88 	st.d	r9[-632],r6
80004f46:	2f f8       	sub	r8,-1
80004f48:	14 97       	mov	r7,r10
80004f4a:	fb 48 06 b4 	st.w	sp[1716],r8
80004f4e:	40 38       	lddsp	r8,sp[0xc]
80004f50:	e0 8f 03 b6 	bral	800056bc <_vfprintf_r+0x1538>
80004f54:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f58:	40 38       	lddsp	r8,sp[0xc]
80004f5a:	fa e7 00 00 	st.d	sp[0],r6
80004f5e:	2f 89       	sub	r9,-8
80004f60:	14 97       	mov	r7,r10
80004f62:	51 09       	stdsp	sp[0x40],r9
80004f64:	e0 8f 03 ac 	bral	800056bc <_vfprintf_r+0x1538>
80004f68:	ed b5 00 04 	bld	r5,0x4
80004f6c:	c1 61       	brne	80004f98 <_vfprintf_r+0xe14>
80004f6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f72:	40 3e       	lddsp	lr,sp[0xc]
80004f74:	58 0e       	cp.w	lr,0
80004f76:	c0 80       	breq	80004f86 <_vfprintf_r+0xe02>
80004f78:	10 36       	cp.w	r6,r8
80004f7a:	c6 74       	brge	80005048 <_vfprintf_r+0xec4>
80004f7c:	fa cc f9 44 	sub	r12,sp,-1724
80004f80:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004f84:	c8 08       	rjmp	80005084 <_vfprintf_r+0xf00>
80004f86:	ee ca ff ff 	sub	r10,r7,-1
80004f8a:	10 37       	cp.w	r7,r8
80004f8c:	c7 f4       	brge	8000508a <_vfprintf_r+0xf06>
80004f8e:	fa cb f9 44 	sub	r11,sp,-1724
80004f92:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f96:	c7 68       	rjmp	80005082 <_vfprintf_r+0xefe>
80004f98:	ed b5 00 06 	bld	r5,0x6
80004f9c:	c4 a1       	brne	80005030 <_vfprintf_r+0xeac>
80004f9e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fa2:	40 3c       	lddsp	r12,sp[0xc]
80004fa4:	58 0c       	cp.w	r12,0
80004fa6:	c1 d0       	breq	80004fe0 <_vfprintf_r+0xe5c>
80004fa8:	10 36       	cp.w	r6,r8
80004faa:	c0 64       	brge	80004fb6 <_vfprintf_r+0xe32>
80004fac:	fa cb f9 44 	sub	r11,sp,-1724
80004fb0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004fb4:	c1 f8       	rjmp	80004ff2 <_vfprintf_r+0xe6e>
80004fb6:	fa c8 f9 50 	sub	r8,sp,-1712
80004fba:	1a d8       	st.w	--sp,r8
80004fbc:	fa c8 fa b8 	sub	r8,sp,-1352
80004fc0:	1a d8       	st.w	--sp,r8
80004fc2:	fa c8 fb b4 	sub	r8,sp,-1100
80004fc6:	1a d8       	st.w	--sp,r8
80004fc8:	fa c8 f9 40 	sub	r8,sp,-1728
80004fcc:	fa c9 ff b4 	sub	r9,sp,-76
80004fd0:	04 9a       	mov	r10,r2
80004fd2:	0c 9b       	mov	r11,r6
80004fd4:	08 9c       	mov	r12,r4
80004fd6:	fe b0 f7 41 	rcall	80003e58 <get_arg>
80004fda:	2f dd       	sub	sp,-12
80004fdc:	98 18       	ld.sh	r8,r12[0x2]
80004fde:	c2 68       	rjmp	8000502a <_vfprintf_r+0xea6>
80004fe0:	ee ca ff ff 	sub	r10,r7,-1
80004fe4:	10 37       	cp.w	r7,r8
80004fe6:	c0 94       	brge	80004ff8 <_vfprintf_r+0xe74>
80004fe8:	fa c9 f9 44 	sub	r9,sp,-1724
80004fec:	14 97       	mov	r7,r10
80004fee:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ff2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004ff6:	c1 a8       	rjmp	8000502a <_vfprintf_r+0xea6>
80004ff8:	41 09       	lddsp	r9,sp[0x40]
80004ffa:	59 f8       	cp.w	r8,31
80004ffc:	e0 89 00 13 	brgt	80005022 <_vfprintf_r+0xe9e>
80005000:	f2 cb ff fc 	sub	r11,r9,-4
80005004:	51 0b       	stdsp	sp[0x40],r11
80005006:	72 09       	ld.w	r9,r9[0x0]
80005008:	fa c6 f9 44 	sub	r6,sp,-1724
8000500c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005010:	2f f8       	sub	r8,-1
80005012:	f7 49 fd 88 	st.w	r11[-632],r9
80005016:	fb 48 06 b4 	st.w	sp[1716],r8
8000501a:	14 97       	mov	r7,r10
8000501c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005020:	c0 58       	rjmp	8000502a <_vfprintf_r+0xea6>
80005022:	92 18       	ld.sh	r8,r9[0x2]
80005024:	14 97       	mov	r7,r10
80005026:	2f c9       	sub	r9,-4
80005028:	51 09       	stdsp	sp[0x40],r9
8000502a:	5c 78       	castu.h	r8
8000502c:	50 18       	stdsp	sp[0x4],r8
8000502e:	c4 68       	rjmp	800050ba <_vfprintf_r+0xf36>
80005030:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005034:	40 3c       	lddsp	r12,sp[0xc]
80005036:	58 0c       	cp.w	r12,0
80005038:	c1 d0       	breq	80005072 <_vfprintf_r+0xeee>
8000503a:	10 36       	cp.w	r6,r8
8000503c:	c0 64       	brge	80005048 <_vfprintf_r+0xec4>
8000503e:	fa cb f9 44 	sub	r11,sp,-1724
80005042:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005046:	c1 f8       	rjmp	80005084 <_vfprintf_r+0xf00>
80005048:	fa c8 f9 50 	sub	r8,sp,-1712
8000504c:	1a d8       	st.w	--sp,r8
8000504e:	fa c8 fa b8 	sub	r8,sp,-1352
80005052:	0c 9b       	mov	r11,r6
80005054:	1a d8       	st.w	--sp,r8
80005056:	fa c8 fb b4 	sub	r8,sp,-1100
8000505a:	04 9a       	mov	r10,r2
8000505c:	1a d8       	st.w	--sp,r8
8000505e:	08 9c       	mov	r12,r4
80005060:	fa c8 f9 40 	sub	r8,sp,-1728
80005064:	fa c9 ff b4 	sub	r9,sp,-76
80005068:	fe b0 f6 f8 	rcall	80003e58 <get_arg>
8000506c:	2f dd       	sub	sp,-12
8000506e:	78 0b       	ld.w	r11,r12[0x0]
80005070:	c2 48       	rjmp	800050b8 <_vfprintf_r+0xf34>
80005072:	ee ca ff ff 	sub	r10,r7,-1
80005076:	10 37       	cp.w	r7,r8
80005078:	c0 94       	brge	8000508a <_vfprintf_r+0xf06>
8000507a:	fa c9 f9 44 	sub	r9,sp,-1724
8000507e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005082:	14 97       	mov	r7,r10
80005084:	ec fb fd 88 	ld.w	r11,r6[-632]
80005088:	c1 88       	rjmp	800050b8 <_vfprintf_r+0xf34>
8000508a:	41 09       	lddsp	r9,sp[0x40]
8000508c:	59 f8       	cp.w	r8,31
8000508e:	e0 89 00 11 	brgt	800050b0 <_vfprintf_r+0xf2c>
80005092:	f2 cb ff fc 	sub	r11,r9,-4
80005096:	51 0b       	stdsp	sp[0x40],r11
80005098:	fa c6 f9 44 	sub	r6,sp,-1724
8000509c:	72 0b       	ld.w	r11,r9[0x0]
8000509e:	ec 08 00 39 	add	r9,r6,r8<<0x3
800050a2:	f3 4b fd 88 	st.w	r9[-632],r11
800050a6:	2f f8       	sub	r8,-1
800050a8:	14 97       	mov	r7,r10
800050aa:	fb 48 06 b4 	st.w	sp[1716],r8
800050ae:	c0 58       	rjmp	800050b8 <_vfprintf_r+0xf34>
800050b0:	72 0b       	ld.w	r11,r9[0x0]
800050b2:	14 97       	mov	r7,r10
800050b4:	2f c9       	sub	r9,-4
800050b6:	51 09       	stdsp	sp[0x40],r9
800050b8:	50 1b       	stdsp	sp[0x4],r11
800050ba:	30 0e       	mov	lr,0
800050bc:	50 0e       	stdsp	sp[0x0],lr
800050be:	1c 98       	mov	r8,lr
800050c0:	e0 8f 02 fe 	bral	800056bc <_vfprintf_r+0x1538>
800050c4:	50 a7       	stdsp	sp[0x28],r7
800050c6:	50 80       	stdsp	sp[0x20],r0
800050c8:	0c 97       	mov	r7,r6
800050ca:	04 94       	mov	r4,r2
800050cc:	06 96       	mov	r6,r3
800050ce:	02 92       	mov	r2,r1
800050d0:	40 93       	lddsp	r3,sp[0x24]
800050d2:	40 41       	lddsp	r1,sp[0x10]
800050d4:	0e 99       	mov	r9,r7
800050d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050da:	40 3c       	lddsp	r12,sp[0xc]
800050dc:	58 0c       	cp.w	r12,0
800050de:	c1 d0       	breq	80005118 <_vfprintf_r+0xf94>
800050e0:	10 36       	cp.w	r6,r8
800050e2:	c0 64       	brge	800050ee <_vfprintf_r+0xf6a>
800050e4:	fa cb f9 44 	sub	r11,sp,-1724
800050e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800050ec:	c1 d8       	rjmp	80005126 <_vfprintf_r+0xfa2>
800050ee:	fa c8 f9 50 	sub	r8,sp,-1712
800050f2:	1a d8       	st.w	--sp,r8
800050f4:	fa c8 fa b8 	sub	r8,sp,-1352
800050f8:	1a d8       	st.w	--sp,r8
800050fa:	fa c8 fb b4 	sub	r8,sp,-1100
800050fe:	1a d8       	st.w	--sp,r8
80005100:	fa c9 ff b4 	sub	r9,sp,-76
80005104:	fa c8 f9 40 	sub	r8,sp,-1728
80005108:	04 9a       	mov	r10,r2
8000510a:	0c 9b       	mov	r11,r6
8000510c:	08 9c       	mov	r12,r4
8000510e:	fe b0 f6 a5 	rcall	80003e58 <get_arg>
80005112:	2f dd       	sub	sp,-12
80005114:	78 09       	ld.w	r9,r12[0x0]
80005116:	c2 18       	rjmp	80005158 <_vfprintf_r+0xfd4>
80005118:	2f f7       	sub	r7,-1
8000511a:	10 39       	cp.w	r9,r8
8000511c:	c0 84       	brge	8000512c <_vfprintf_r+0xfa8>
8000511e:	fa ca f9 44 	sub	r10,sp,-1724
80005122:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005126:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000512a:	c1 78       	rjmp	80005158 <_vfprintf_r+0xfd4>
8000512c:	41 09       	lddsp	r9,sp[0x40]
8000512e:	59 f8       	cp.w	r8,31
80005130:	e0 89 00 10 	brgt	80005150 <_vfprintf_r+0xfcc>
80005134:	f2 ca ff fc 	sub	r10,r9,-4
80005138:	51 0a       	stdsp	sp[0x40],r10
8000513a:	fa c6 f9 44 	sub	r6,sp,-1724
8000513e:	72 09       	ld.w	r9,r9[0x0]
80005140:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005144:	f5 49 fd 88 	st.w	r10[-632],r9
80005148:	2f f8       	sub	r8,-1
8000514a:	fb 48 06 b4 	st.w	sp[1716],r8
8000514e:	c0 58       	rjmp	80005158 <_vfprintf_r+0xfd4>
80005150:	f2 c8 ff fc 	sub	r8,r9,-4
80005154:	51 08       	stdsp	sp[0x40],r8
80005156:	72 09       	ld.w	r9,r9[0x0]
80005158:	33 08       	mov	r8,48
8000515a:	fb 68 06 b8 	st.b	sp[1720],r8
8000515e:	37 88       	mov	r8,120
80005160:	30 0e       	mov	lr,0
80005162:	fb 68 06 b9 	st.b	sp[1721],r8
80005166:	fe cc b6 1a 	sub	r12,pc,-18918
8000516a:	50 19       	stdsp	sp[0x4],r9
8000516c:	a1 b5       	sbr	r5,0x1
8000516e:	50 0e       	stdsp	sp[0x0],lr
80005170:	50 dc       	stdsp	sp[0x34],r12
80005172:	30 28       	mov	r8,2
80005174:	37 80       	mov	r0,120
80005176:	e0 8f 02 a3 	bral	800056bc <_vfprintf_r+0x1538>
8000517a:	50 a7       	stdsp	sp[0x28],r7
8000517c:	50 80       	stdsp	sp[0x20],r0
8000517e:	10 90       	mov	r0,r8
80005180:	30 08       	mov	r8,0
80005182:	fb 68 06 bb 	st.b	sp[1723],r8
80005186:	0c 97       	mov	r7,r6
80005188:	04 94       	mov	r4,r2
8000518a:	06 96       	mov	r6,r3
8000518c:	02 92       	mov	r2,r1
8000518e:	40 93       	lddsp	r3,sp[0x24]
80005190:	40 41       	lddsp	r1,sp[0x10]
80005192:	0e 99       	mov	r9,r7
80005194:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005198:	40 3b       	lddsp	r11,sp[0xc]
8000519a:	58 0b       	cp.w	r11,0
8000519c:	c1 d0       	breq	800051d6 <_vfprintf_r+0x1052>
8000519e:	10 36       	cp.w	r6,r8
800051a0:	c0 64       	brge	800051ac <_vfprintf_r+0x1028>
800051a2:	fa ca f9 44 	sub	r10,sp,-1724
800051a6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800051aa:	c1 d8       	rjmp	800051e4 <_vfprintf_r+0x1060>
800051ac:	fa c8 f9 50 	sub	r8,sp,-1712
800051b0:	1a d8       	st.w	--sp,r8
800051b2:	fa c8 fa b8 	sub	r8,sp,-1352
800051b6:	1a d8       	st.w	--sp,r8
800051b8:	fa c8 fb b4 	sub	r8,sp,-1100
800051bc:	0c 9b       	mov	r11,r6
800051be:	1a d8       	st.w	--sp,r8
800051c0:	04 9a       	mov	r10,r2
800051c2:	fa c8 f9 40 	sub	r8,sp,-1728
800051c6:	fa c9 ff b4 	sub	r9,sp,-76
800051ca:	08 9c       	mov	r12,r4
800051cc:	fe b0 f6 46 	rcall	80003e58 <get_arg>
800051d0:	2f dd       	sub	sp,-12
800051d2:	78 06       	ld.w	r6,r12[0x0]
800051d4:	c2 08       	rjmp	80005214 <_vfprintf_r+0x1090>
800051d6:	2f f7       	sub	r7,-1
800051d8:	10 39       	cp.w	r9,r8
800051da:	c0 84       	brge	800051ea <_vfprintf_r+0x1066>
800051dc:	fa c9 f9 44 	sub	r9,sp,-1724
800051e0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800051e4:	ec f6 fd 88 	ld.w	r6,r6[-632]
800051e8:	c1 68       	rjmp	80005214 <_vfprintf_r+0x1090>
800051ea:	41 09       	lddsp	r9,sp[0x40]
800051ec:	59 f8       	cp.w	r8,31
800051ee:	e0 89 00 10 	brgt	8000520e <_vfprintf_r+0x108a>
800051f2:	f2 ca ff fc 	sub	r10,r9,-4
800051f6:	51 0a       	stdsp	sp[0x40],r10
800051f8:	72 06       	ld.w	r6,r9[0x0]
800051fa:	fa ce f9 44 	sub	lr,sp,-1724
800051fe:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005202:	f3 46 fd 88 	st.w	r9[-632],r6
80005206:	2f f8       	sub	r8,-1
80005208:	fb 48 06 b4 	st.w	sp[1716],r8
8000520c:	c0 48       	rjmp	80005214 <_vfprintf_r+0x1090>
8000520e:	72 06       	ld.w	r6,r9[0x0]
80005210:	2f c9       	sub	r9,-4
80005212:	51 09       	stdsp	sp[0x40],r9
80005214:	40 2c       	lddsp	r12,sp[0x8]
80005216:	58 0c       	cp.w	r12,0
80005218:	c1 05       	brlt	80005238 <_vfprintf_r+0x10b4>
8000521a:	18 9a       	mov	r10,r12
8000521c:	30 0b       	mov	r11,0
8000521e:	0c 9c       	mov	r12,r6
80005220:	e0 a0 14 58 	rcall	80007ad0 <memchr>
80005224:	e0 80 02 df 	breq	800057e2 <_vfprintf_r+0x165e>
80005228:	f8 06 01 02 	sub	r2,r12,r6
8000522c:	40 2b       	lddsp	r11,sp[0x8]
8000522e:	16 32       	cp.w	r2,r11
80005230:	e0 89 02 d9 	brgt	800057e2 <_vfprintf_r+0x165e>
80005234:	e0 8f 02 d4 	bral	800057dc <_vfprintf_r+0x1658>
80005238:	30 0a       	mov	r10,0
8000523a:	0c 9c       	mov	r12,r6
8000523c:	50 2a       	stdsp	sp[0x8],r10
8000523e:	e0 a0 19 2b 	rcall	80008494 <strlen>
80005242:	18 92       	mov	r2,r12
80005244:	e0 8f 02 d2 	bral	800057e8 <_vfprintf_r+0x1664>
80005248:	50 a7       	stdsp	sp[0x28],r7
8000524a:	50 80       	stdsp	sp[0x20],r0
8000524c:	0c 97       	mov	r7,r6
8000524e:	04 94       	mov	r4,r2
80005250:	06 96       	mov	r6,r3
80005252:	02 92       	mov	r2,r1
80005254:	40 93       	lddsp	r3,sp[0x24]
80005256:	10 90       	mov	r0,r8
80005258:	40 41       	lddsp	r1,sp[0x10]
8000525a:	a5 a5       	sbr	r5,0x4
8000525c:	c0 a8       	rjmp	80005270 <_vfprintf_r+0x10ec>
8000525e:	50 a7       	stdsp	sp[0x28],r7
80005260:	50 80       	stdsp	sp[0x20],r0
80005262:	0c 97       	mov	r7,r6
80005264:	04 94       	mov	r4,r2
80005266:	06 96       	mov	r6,r3
80005268:	02 92       	mov	r2,r1
8000526a:	40 93       	lddsp	r3,sp[0x24]
8000526c:	10 90       	mov	r0,r8
8000526e:	40 41       	lddsp	r1,sp[0x10]
80005270:	ed b5 00 05 	bld	r5,0x5
80005274:	c5 61       	brne	80005320 <_vfprintf_r+0x119c>
80005276:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000527a:	40 39       	lddsp	r9,sp[0xc]
8000527c:	58 09       	cp.w	r9,0
8000527e:	c2 10       	breq	800052c0 <_vfprintf_r+0x113c>
80005280:	10 36       	cp.w	r6,r8
80005282:	c0 74       	brge	80005290 <_vfprintf_r+0x110c>
80005284:	fa c8 f9 44 	sub	r8,sp,-1724
80005288:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000528c:	c2 38       	rjmp	800052d2 <_vfprintf_r+0x114e>
8000528e:	d7 03       	nop
80005290:	fa c8 f9 50 	sub	r8,sp,-1712
80005294:	1a d8       	st.w	--sp,r8
80005296:	fa c8 fa b8 	sub	r8,sp,-1352
8000529a:	1a d8       	st.w	--sp,r8
8000529c:	fa c8 fb b4 	sub	r8,sp,-1100
800052a0:	1a d8       	st.w	--sp,r8
800052a2:	fa c8 f9 40 	sub	r8,sp,-1728
800052a6:	fa c9 ff b4 	sub	r9,sp,-76
800052aa:	04 9a       	mov	r10,r2
800052ac:	0c 9b       	mov	r11,r6
800052ae:	08 9c       	mov	r12,r4
800052b0:	fe b0 f5 d4 	rcall	80003e58 <get_arg>
800052b4:	2f dd       	sub	sp,-12
800052b6:	f8 e8 00 00 	ld.d	r8,r12[0]
800052ba:	fa e9 00 00 	st.d	sp[0],r8
800052be:	c2 e8       	rjmp	8000531a <_vfprintf_r+0x1196>
800052c0:	ee ca ff ff 	sub	r10,r7,-1
800052c4:	10 37       	cp.w	r7,r8
800052c6:	c0 b4       	brge	800052dc <_vfprintf_r+0x1158>
800052c8:	fa c8 f9 44 	sub	r8,sp,-1724
800052cc:	14 97       	mov	r7,r10
800052ce:	f0 06 00 36 	add	r6,r8,r6<<0x3
800052d2:	ec ea fd 88 	ld.d	r10,r6[-632]
800052d6:	fa eb 00 00 	st.d	sp[0],r10
800052da:	c2 08       	rjmp	8000531a <_vfprintf_r+0x1196>
800052dc:	41 09       	lddsp	r9,sp[0x40]
800052de:	59 f8       	cp.w	r8,31
800052e0:	e0 89 00 16 	brgt	8000530c <_vfprintf_r+0x1188>
800052e4:	f2 e6 00 00 	ld.d	r6,r9[0]
800052e8:	f2 cb ff f8 	sub	r11,r9,-8
800052ec:	fa e7 00 00 	st.d	sp[0],r6
800052f0:	51 0b       	stdsp	sp[0x40],r11
800052f2:	fa c6 f9 44 	sub	r6,sp,-1724
800052f6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800052fa:	fa e6 00 00 	ld.d	r6,sp[0]
800052fe:	f2 e7 fd 88 	st.d	r9[-632],r6
80005302:	2f f8       	sub	r8,-1
80005304:	14 97       	mov	r7,r10
80005306:	fb 48 06 b4 	st.w	sp[1716],r8
8000530a:	c0 88       	rjmp	8000531a <_vfprintf_r+0x1196>
8000530c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005310:	2f 89       	sub	r9,-8
80005312:	fa e7 00 00 	st.d	sp[0],r6
80005316:	51 09       	stdsp	sp[0x40],r9
80005318:	14 97       	mov	r7,r10
8000531a:	30 18       	mov	r8,1
8000531c:	e0 8f 01 d0 	bral	800056bc <_vfprintf_r+0x1538>
80005320:	ed b5 00 04 	bld	r5,0x4
80005324:	c1 61       	brne	80005350 <_vfprintf_r+0x11cc>
80005326:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000532a:	40 3e       	lddsp	lr,sp[0xc]
8000532c:	58 0e       	cp.w	lr,0
8000532e:	c0 80       	breq	8000533e <_vfprintf_r+0x11ba>
80005330:	10 36       	cp.w	r6,r8
80005332:	c6 74       	brge	80005400 <_vfprintf_r+0x127c>
80005334:	fa cc f9 44 	sub	r12,sp,-1724
80005338:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000533c:	c8 08       	rjmp	8000543c <_vfprintf_r+0x12b8>
8000533e:	ee ca ff ff 	sub	r10,r7,-1
80005342:	10 37       	cp.w	r7,r8
80005344:	c7 f4       	brge	80005442 <_vfprintf_r+0x12be>
80005346:	fa cb f9 44 	sub	r11,sp,-1724
8000534a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000534e:	c7 68       	rjmp	8000543a <_vfprintf_r+0x12b6>
80005350:	ed b5 00 06 	bld	r5,0x6
80005354:	c4 a1       	brne	800053e8 <_vfprintf_r+0x1264>
80005356:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000535a:	40 3c       	lddsp	r12,sp[0xc]
8000535c:	58 0c       	cp.w	r12,0
8000535e:	c1 d0       	breq	80005398 <_vfprintf_r+0x1214>
80005360:	10 36       	cp.w	r6,r8
80005362:	c0 64       	brge	8000536e <_vfprintf_r+0x11ea>
80005364:	fa cb f9 44 	sub	r11,sp,-1724
80005368:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000536c:	c1 f8       	rjmp	800053aa <_vfprintf_r+0x1226>
8000536e:	fa c8 f9 50 	sub	r8,sp,-1712
80005372:	1a d8       	st.w	--sp,r8
80005374:	fa c8 fa b8 	sub	r8,sp,-1352
80005378:	1a d8       	st.w	--sp,r8
8000537a:	fa c8 fb b4 	sub	r8,sp,-1100
8000537e:	1a d8       	st.w	--sp,r8
80005380:	fa c8 f9 40 	sub	r8,sp,-1728
80005384:	fa c9 ff b4 	sub	r9,sp,-76
80005388:	04 9a       	mov	r10,r2
8000538a:	0c 9b       	mov	r11,r6
8000538c:	08 9c       	mov	r12,r4
8000538e:	fe b0 f5 65 	rcall	80003e58 <get_arg>
80005392:	2f dd       	sub	sp,-12
80005394:	98 18       	ld.sh	r8,r12[0x2]
80005396:	c2 68       	rjmp	800053e2 <_vfprintf_r+0x125e>
80005398:	ee ca ff ff 	sub	r10,r7,-1
8000539c:	10 37       	cp.w	r7,r8
8000539e:	c0 94       	brge	800053b0 <_vfprintf_r+0x122c>
800053a0:	fa c9 f9 44 	sub	r9,sp,-1724
800053a4:	14 97       	mov	r7,r10
800053a6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800053aa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800053ae:	c1 a8       	rjmp	800053e2 <_vfprintf_r+0x125e>
800053b0:	41 09       	lddsp	r9,sp[0x40]
800053b2:	59 f8       	cp.w	r8,31
800053b4:	e0 89 00 13 	brgt	800053da <_vfprintf_r+0x1256>
800053b8:	f2 cb ff fc 	sub	r11,r9,-4
800053bc:	51 0b       	stdsp	sp[0x40],r11
800053be:	72 09       	ld.w	r9,r9[0x0]
800053c0:	fa c6 f9 44 	sub	r6,sp,-1724
800053c4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800053c8:	2f f8       	sub	r8,-1
800053ca:	f7 49 fd 88 	st.w	r11[-632],r9
800053ce:	fb 48 06 b4 	st.w	sp[1716],r8
800053d2:	14 97       	mov	r7,r10
800053d4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800053d8:	c0 58       	rjmp	800053e2 <_vfprintf_r+0x125e>
800053da:	92 18       	ld.sh	r8,r9[0x2]
800053dc:	14 97       	mov	r7,r10
800053de:	2f c9       	sub	r9,-4
800053e0:	51 09       	stdsp	sp[0x40],r9
800053e2:	5c 78       	castu.h	r8
800053e4:	50 18       	stdsp	sp[0x4],r8
800053e6:	c4 68       	rjmp	80005472 <_vfprintf_r+0x12ee>
800053e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053ec:	40 3c       	lddsp	r12,sp[0xc]
800053ee:	58 0c       	cp.w	r12,0
800053f0:	c1 d0       	breq	8000542a <_vfprintf_r+0x12a6>
800053f2:	10 36       	cp.w	r6,r8
800053f4:	c0 64       	brge	80005400 <_vfprintf_r+0x127c>
800053f6:	fa cb f9 44 	sub	r11,sp,-1724
800053fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053fe:	c1 f8       	rjmp	8000543c <_vfprintf_r+0x12b8>
80005400:	fa c8 f9 50 	sub	r8,sp,-1712
80005404:	1a d8       	st.w	--sp,r8
80005406:	fa c8 fa b8 	sub	r8,sp,-1352
8000540a:	0c 9b       	mov	r11,r6
8000540c:	1a d8       	st.w	--sp,r8
8000540e:	fa c8 fb b4 	sub	r8,sp,-1100
80005412:	04 9a       	mov	r10,r2
80005414:	1a d8       	st.w	--sp,r8
80005416:	08 9c       	mov	r12,r4
80005418:	fa c8 f9 40 	sub	r8,sp,-1728
8000541c:	fa c9 ff b4 	sub	r9,sp,-76
80005420:	fe b0 f5 1c 	rcall	80003e58 <get_arg>
80005424:	2f dd       	sub	sp,-12
80005426:	78 0b       	ld.w	r11,r12[0x0]
80005428:	c2 48       	rjmp	80005470 <_vfprintf_r+0x12ec>
8000542a:	ee ca ff ff 	sub	r10,r7,-1
8000542e:	10 37       	cp.w	r7,r8
80005430:	c0 94       	brge	80005442 <_vfprintf_r+0x12be>
80005432:	fa c9 f9 44 	sub	r9,sp,-1724
80005436:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000543a:	14 97       	mov	r7,r10
8000543c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005440:	c1 88       	rjmp	80005470 <_vfprintf_r+0x12ec>
80005442:	41 09       	lddsp	r9,sp[0x40]
80005444:	59 f8       	cp.w	r8,31
80005446:	e0 89 00 11 	brgt	80005468 <_vfprintf_r+0x12e4>
8000544a:	f2 cb ff fc 	sub	r11,r9,-4
8000544e:	51 0b       	stdsp	sp[0x40],r11
80005450:	fa c6 f9 44 	sub	r6,sp,-1724
80005454:	72 0b       	ld.w	r11,r9[0x0]
80005456:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000545a:	f3 4b fd 88 	st.w	r9[-632],r11
8000545e:	2f f8       	sub	r8,-1
80005460:	14 97       	mov	r7,r10
80005462:	fb 48 06 b4 	st.w	sp[1716],r8
80005466:	c0 58       	rjmp	80005470 <_vfprintf_r+0x12ec>
80005468:	72 0b       	ld.w	r11,r9[0x0]
8000546a:	14 97       	mov	r7,r10
8000546c:	2f c9       	sub	r9,-4
8000546e:	51 09       	stdsp	sp[0x40],r9
80005470:	50 1b       	stdsp	sp[0x4],r11
80005472:	30 0e       	mov	lr,0
80005474:	30 18       	mov	r8,1
80005476:	50 0e       	stdsp	sp[0x0],lr
80005478:	c2 29       	rjmp	800056bc <_vfprintf_r+0x1538>
8000547a:	50 a7       	stdsp	sp[0x28],r7
8000547c:	50 80       	stdsp	sp[0x20],r0
8000547e:	0c 97       	mov	r7,r6
80005480:	04 94       	mov	r4,r2
80005482:	06 96       	mov	r6,r3
80005484:	02 92       	mov	r2,r1
80005486:	fe cc b9 3a 	sub	r12,pc,-18118
8000548a:	40 93       	lddsp	r3,sp[0x24]
8000548c:	10 90       	mov	r0,r8
8000548e:	40 41       	lddsp	r1,sp[0x10]
80005490:	50 dc       	stdsp	sp[0x34],r12
80005492:	ed b5 00 05 	bld	r5,0x5
80005496:	c5 51       	brne	80005540 <_vfprintf_r+0x13bc>
80005498:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000549c:	40 3b       	lddsp	r11,sp[0xc]
8000549e:	58 0b       	cp.w	r11,0
800054a0:	c2 20       	breq	800054e4 <_vfprintf_r+0x1360>
800054a2:	10 36       	cp.w	r6,r8
800054a4:	c0 a4       	brge	800054b8 <_vfprintf_r+0x1334>
800054a6:	fa ca f9 44 	sub	r10,sp,-1724
800054aa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800054ae:	ec e8 fd 88 	ld.d	r8,r6[-632]
800054b2:	fa e9 00 00 	st.d	sp[0],r8
800054b6:	cf 28       	rjmp	8000569a <_vfprintf_r+0x1516>
800054b8:	fa c8 f9 50 	sub	r8,sp,-1712
800054bc:	1a d8       	st.w	--sp,r8
800054be:	fa c8 fa b8 	sub	r8,sp,-1352
800054c2:	04 9a       	mov	r10,r2
800054c4:	1a d8       	st.w	--sp,r8
800054c6:	0c 9b       	mov	r11,r6
800054c8:	fa c8 fb b4 	sub	r8,sp,-1100
800054cc:	08 9c       	mov	r12,r4
800054ce:	1a d8       	st.w	--sp,r8
800054d0:	fa c8 f9 40 	sub	r8,sp,-1728
800054d4:	fa c9 ff b4 	sub	r9,sp,-76
800054d8:	fe b0 f4 c0 	rcall	80003e58 <get_arg>
800054dc:	2f dd       	sub	sp,-12
800054de:	f8 ea 00 00 	ld.d	r10,r12[0]
800054e2:	c0 c8       	rjmp	800054fa <_vfprintf_r+0x1376>
800054e4:	ee ca ff ff 	sub	r10,r7,-1
800054e8:	10 37       	cp.w	r7,r8
800054ea:	c0 b4       	brge	80005500 <_vfprintf_r+0x137c>
800054ec:	fa c9 f9 44 	sub	r9,sp,-1724
800054f0:	14 97       	mov	r7,r10
800054f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054f6:	ec ea fd 88 	ld.d	r10,r6[-632]
800054fa:	fa eb 00 00 	st.d	sp[0],r10
800054fe:	cc e8       	rjmp	8000569a <_vfprintf_r+0x1516>
80005500:	41 09       	lddsp	r9,sp[0x40]
80005502:	59 f8       	cp.w	r8,31
80005504:	e0 89 00 16 	brgt	80005530 <_vfprintf_r+0x13ac>
80005508:	f2 e6 00 00 	ld.d	r6,r9[0]
8000550c:	f2 cb ff f8 	sub	r11,r9,-8
80005510:	fa e7 00 00 	st.d	sp[0],r6
80005514:	51 0b       	stdsp	sp[0x40],r11
80005516:	fa c6 f9 44 	sub	r6,sp,-1724
8000551a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000551e:	fa e6 00 00 	ld.d	r6,sp[0]
80005522:	f2 e7 fd 88 	st.d	r9[-632],r6
80005526:	2f f8       	sub	r8,-1
80005528:	14 97       	mov	r7,r10
8000552a:	fb 48 06 b4 	st.w	sp[1716],r8
8000552e:	cb 68       	rjmp	8000569a <_vfprintf_r+0x1516>
80005530:	f2 e6 00 00 	ld.d	r6,r9[0]
80005534:	2f 89       	sub	r9,-8
80005536:	fa e7 00 00 	st.d	sp[0],r6
8000553a:	51 09       	stdsp	sp[0x40],r9
8000553c:	14 97       	mov	r7,r10
8000553e:	ca e8       	rjmp	8000569a <_vfprintf_r+0x1516>
80005540:	ed b5 00 04 	bld	r5,0x4
80005544:	c1 71       	brne	80005572 <_vfprintf_r+0x13ee>
80005546:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000554a:	40 3e       	lddsp	lr,sp[0xc]
8000554c:	58 0e       	cp.w	lr,0
8000554e:	c0 80       	breq	8000555e <_vfprintf_r+0x13da>
80005550:	10 36       	cp.w	r6,r8
80005552:	c6 94       	brge	80005624 <_vfprintf_r+0x14a0>
80005554:	fa cc f9 44 	sub	r12,sp,-1724
80005558:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000555c:	c8 28       	rjmp	80005660 <_vfprintf_r+0x14dc>
8000555e:	ee ca ff ff 	sub	r10,r7,-1
80005562:	10 37       	cp.w	r7,r8
80005564:	e0 84 00 81 	brge	80005666 <_vfprintf_r+0x14e2>
80005568:	fa cb f9 44 	sub	r11,sp,-1724
8000556c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005570:	c7 78       	rjmp	8000565e <_vfprintf_r+0x14da>
80005572:	ed b5 00 06 	bld	r5,0x6
80005576:	c4 b1       	brne	8000560c <_vfprintf_r+0x1488>
80005578:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000557c:	40 3c       	lddsp	r12,sp[0xc]
8000557e:	58 0c       	cp.w	r12,0
80005580:	c1 d0       	breq	800055ba <_vfprintf_r+0x1436>
80005582:	10 36       	cp.w	r6,r8
80005584:	c0 64       	brge	80005590 <_vfprintf_r+0x140c>
80005586:	fa cb f9 44 	sub	r11,sp,-1724
8000558a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000558e:	c1 f8       	rjmp	800055cc <_vfprintf_r+0x1448>
80005590:	fa c8 f9 50 	sub	r8,sp,-1712
80005594:	1a d8       	st.w	--sp,r8
80005596:	fa c8 fa b8 	sub	r8,sp,-1352
8000559a:	1a d8       	st.w	--sp,r8
8000559c:	fa c8 fb b4 	sub	r8,sp,-1100
800055a0:	1a d8       	st.w	--sp,r8
800055a2:	fa c8 f9 40 	sub	r8,sp,-1728
800055a6:	fa c9 ff b4 	sub	r9,sp,-76
800055aa:	04 9a       	mov	r10,r2
800055ac:	0c 9b       	mov	r11,r6
800055ae:	08 9c       	mov	r12,r4
800055b0:	fe b0 f4 54 	rcall	80003e58 <get_arg>
800055b4:	2f dd       	sub	sp,-12
800055b6:	98 18       	ld.sh	r8,r12[0x2]
800055b8:	c2 78       	rjmp	80005606 <_vfprintf_r+0x1482>
800055ba:	ee ca ff ff 	sub	r10,r7,-1
800055be:	10 37       	cp.w	r7,r8
800055c0:	c0 a4       	brge	800055d4 <_vfprintf_r+0x1450>
800055c2:	fa c9 f9 44 	sub	r9,sp,-1724
800055c6:	14 97       	mov	r7,r10
800055c8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055cc:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800055d0:	c1 b8       	rjmp	80005606 <_vfprintf_r+0x1482>
800055d2:	d7 03       	nop
800055d4:	41 09       	lddsp	r9,sp[0x40]
800055d6:	59 f8       	cp.w	r8,31
800055d8:	e0 89 00 13 	brgt	800055fe <_vfprintf_r+0x147a>
800055dc:	f2 cb ff fc 	sub	r11,r9,-4
800055e0:	51 0b       	stdsp	sp[0x40],r11
800055e2:	72 09       	ld.w	r9,r9[0x0]
800055e4:	fa c6 f9 44 	sub	r6,sp,-1724
800055e8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800055ec:	2f f8       	sub	r8,-1
800055ee:	f7 49 fd 88 	st.w	r11[-632],r9
800055f2:	fb 48 06 b4 	st.w	sp[1716],r8
800055f6:	14 97       	mov	r7,r10
800055f8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800055fc:	c0 58       	rjmp	80005606 <_vfprintf_r+0x1482>
800055fe:	92 18       	ld.sh	r8,r9[0x2]
80005600:	14 97       	mov	r7,r10
80005602:	2f c9       	sub	r9,-4
80005604:	51 09       	stdsp	sp[0x40],r9
80005606:	5c 78       	castu.h	r8
80005608:	50 18       	stdsp	sp[0x4],r8
8000560a:	c4 68       	rjmp	80005696 <_vfprintf_r+0x1512>
8000560c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005610:	40 3c       	lddsp	r12,sp[0xc]
80005612:	58 0c       	cp.w	r12,0
80005614:	c1 d0       	breq	8000564e <_vfprintf_r+0x14ca>
80005616:	10 36       	cp.w	r6,r8
80005618:	c0 64       	brge	80005624 <_vfprintf_r+0x14a0>
8000561a:	fa cb f9 44 	sub	r11,sp,-1724
8000561e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005622:	c1 f8       	rjmp	80005660 <_vfprintf_r+0x14dc>
80005624:	fa c8 f9 50 	sub	r8,sp,-1712
80005628:	1a d8       	st.w	--sp,r8
8000562a:	fa c8 fa b8 	sub	r8,sp,-1352
8000562e:	0c 9b       	mov	r11,r6
80005630:	1a d8       	st.w	--sp,r8
80005632:	fa c8 fb b4 	sub	r8,sp,-1100
80005636:	04 9a       	mov	r10,r2
80005638:	1a d8       	st.w	--sp,r8
8000563a:	08 9c       	mov	r12,r4
8000563c:	fa c8 f9 40 	sub	r8,sp,-1728
80005640:	fa c9 ff b4 	sub	r9,sp,-76
80005644:	fe b0 f4 0a 	rcall	80003e58 <get_arg>
80005648:	2f dd       	sub	sp,-12
8000564a:	78 0b       	ld.w	r11,r12[0x0]
8000564c:	c2 48       	rjmp	80005694 <_vfprintf_r+0x1510>
8000564e:	ee ca ff ff 	sub	r10,r7,-1
80005652:	10 37       	cp.w	r7,r8
80005654:	c0 94       	brge	80005666 <_vfprintf_r+0x14e2>
80005656:	fa c9 f9 44 	sub	r9,sp,-1724
8000565a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000565e:	14 97       	mov	r7,r10
80005660:	ec fb fd 88 	ld.w	r11,r6[-632]
80005664:	c1 88       	rjmp	80005694 <_vfprintf_r+0x1510>
80005666:	41 09       	lddsp	r9,sp[0x40]
80005668:	59 f8       	cp.w	r8,31
8000566a:	e0 89 00 11 	brgt	8000568c <_vfprintf_r+0x1508>
8000566e:	f2 cb ff fc 	sub	r11,r9,-4
80005672:	51 0b       	stdsp	sp[0x40],r11
80005674:	fa c6 f9 44 	sub	r6,sp,-1724
80005678:	72 0b       	ld.w	r11,r9[0x0]
8000567a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000567e:	f3 4b fd 88 	st.w	r9[-632],r11
80005682:	2f f8       	sub	r8,-1
80005684:	14 97       	mov	r7,r10
80005686:	fb 48 06 b4 	st.w	sp[1716],r8
8000568a:	c0 58       	rjmp	80005694 <_vfprintf_r+0x1510>
8000568c:	72 0b       	ld.w	r11,r9[0x0]
8000568e:	14 97       	mov	r7,r10
80005690:	2f c9       	sub	r9,-4
80005692:	51 09       	stdsp	sp[0x40],r9
80005694:	50 1b       	stdsp	sp[0x4],r11
80005696:	30 0e       	mov	lr,0
80005698:	50 0e       	stdsp	sp[0x0],lr
8000569a:	40 08       	lddsp	r8,sp[0x0]
8000569c:	40 1c       	lddsp	r12,sp[0x4]
8000569e:	18 48       	or	r8,r12
800056a0:	5f 19       	srne	r9
800056a2:	0a 98       	mov	r8,r5
800056a4:	eb e9 00 09 	and	r9,r5,r9
800056a8:	a1 b8       	sbr	r8,0x1
800056aa:	58 09       	cp.w	r9,0
800056ac:	c0 70       	breq	800056ba <_vfprintf_r+0x1536>
800056ae:	10 95       	mov	r5,r8
800056b0:	fb 60 06 b9 	st.b	sp[1721],r0
800056b4:	33 08       	mov	r8,48
800056b6:	fb 68 06 b8 	st.b	sp[1720],r8
800056ba:	30 28       	mov	r8,2
800056bc:	30 09       	mov	r9,0
800056be:	fb 69 06 bb 	st.b	sp[1723],r9
800056c2:	0a 99       	mov	r9,r5
800056c4:	a7 d9       	cbr	r9,0x7
800056c6:	40 2b       	lddsp	r11,sp[0x8]
800056c8:	40 16       	lddsp	r6,sp[0x4]
800056ca:	58 0b       	cp.w	r11,0
800056cc:	5f 1a       	srne	r10
800056ce:	f2 05 17 40 	movge	r5,r9
800056d2:	fa c2 f9 78 	sub	r2,sp,-1672
800056d6:	40 09       	lddsp	r9,sp[0x0]
800056d8:	0c 49       	or	r9,r6
800056da:	5f 19       	srne	r9
800056dc:	f5 e9 10 09 	or	r9,r10,r9
800056e0:	c5 c0       	breq	80005798 <_vfprintf_r+0x1614>
800056e2:	30 19       	mov	r9,1
800056e4:	f2 08 18 00 	cp.b	r8,r9
800056e8:	c0 60       	breq	800056f4 <_vfprintf_r+0x1570>
800056ea:	30 29       	mov	r9,2
800056ec:	f2 08 18 00 	cp.b	r8,r9
800056f0:	c0 41       	brne	800056f8 <_vfprintf_r+0x1574>
800056f2:	c3 c8       	rjmp	8000576a <_vfprintf_r+0x15e6>
800056f4:	04 96       	mov	r6,r2
800056f6:	c3 08       	rjmp	80005756 <_vfprintf_r+0x15d2>
800056f8:	04 96       	mov	r6,r2
800056fa:	fa e8 00 00 	ld.d	r8,sp[0]
800056fe:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005702:	2d 0a       	sub	r10,-48
80005704:	0c fa       	st.b	--r6,r10
80005706:	f0 0b 16 03 	lsr	r11,r8,0x3
8000570a:	f2 0c 16 03 	lsr	r12,r9,0x3
8000570e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005712:	18 99       	mov	r9,r12
80005714:	16 98       	mov	r8,r11
80005716:	58 08       	cp.w	r8,0
80005718:	5c 29       	cpc	r9
8000571a:	cf 21       	brne	800056fe <_vfprintf_r+0x157a>
8000571c:	fa e9 00 00 	st.d	sp[0],r8
80005720:	ed b5 00 00 	bld	r5,0x0
80005724:	c4 51       	brne	800057ae <_vfprintf_r+0x162a>
80005726:	33 09       	mov	r9,48
80005728:	f2 0a 18 00 	cp.b	r10,r9
8000572c:	c4 10       	breq	800057ae <_vfprintf_r+0x162a>
8000572e:	0c f9       	st.b	--r6,r9
80005730:	c3 f8       	rjmp	800057ae <_vfprintf_r+0x162a>
80005732:	fa ea 00 00 	ld.d	r10,sp[0]
80005736:	30 a8       	mov	r8,10
80005738:	30 09       	mov	r9,0
8000573a:	e0 a0 1c cb 	rcall	800090d0 <__avr32_umod64>
8000573e:	30 a8       	mov	r8,10
80005740:	2d 0a       	sub	r10,-48
80005742:	30 09       	mov	r9,0
80005744:	ac 8a       	st.b	r6[0x0],r10
80005746:	fa ea 00 00 	ld.d	r10,sp[0]
8000574a:	e0 a0 1b 91 	rcall	80008e6c <__avr32_udiv64>
8000574e:	16 99       	mov	r9,r11
80005750:	14 98       	mov	r8,r10
80005752:	fa e9 00 00 	st.d	sp[0],r8
80005756:	20 16       	sub	r6,1
80005758:	fa ea 00 00 	ld.d	r10,sp[0]
8000575c:	58 9a       	cp.w	r10,9
8000575e:	5c 2b       	cpc	r11
80005760:	fe 9b ff e9 	brhi	80005732 <_vfprintf_r+0x15ae>
80005764:	1b f8       	ld.ub	r8,sp[0x7]
80005766:	2d 08       	sub	r8,-48
80005768:	c2 08       	rjmp	800057a8 <_vfprintf_r+0x1624>
8000576a:	04 96       	mov	r6,r2
8000576c:	fa e8 00 00 	ld.d	r8,sp[0]
80005770:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005774:	40 de       	lddsp	lr,sp[0x34]
80005776:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000577a:	0c fa       	st.b	--r6,r10
8000577c:	f2 0b 16 04 	lsr	r11,r9,0x4
80005780:	f0 0a 16 04 	lsr	r10,r8,0x4
80005784:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005788:	16 99       	mov	r9,r11
8000578a:	14 98       	mov	r8,r10
8000578c:	58 08       	cp.w	r8,0
8000578e:	5c 29       	cpc	r9
80005790:	cf 01       	brne	80005770 <_vfprintf_r+0x15ec>
80005792:	fa e9 00 00 	st.d	sp[0],r8
80005796:	c0 c8       	rjmp	800057ae <_vfprintf_r+0x162a>
80005798:	58 08       	cp.w	r8,0
8000579a:	c0 91       	brne	800057ac <_vfprintf_r+0x1628>
8000579c:	ed b5 00 00 	bld	r5,0x0
800057a0:	c0 61       	brne	800057ac <_vfprintf_r+0x1628>
800057a2:	fa c6 f9 79 	sub	r6,sp,-1671
800057a6:	33 08       	mov	r8,48
800057a8:	ac 88       	st.b	r6[0x0],r8
800057aa:	c0 28       	rjmp	800057ae <_vfprintf_r+0x162a>
800057ac:	04 96       	mov	r6,r2
800057ae:	0c 12       	sub	r2,r6
800057b0:	c1 c8       	rjmp	800057e8 <_vfprintf_r+0x1664>
800057b2:	50 a7       	stdsp	sp[0x28],r7
800057b4:	50 80       	stdsp	sp[0x20],r0
800057b6:	40 93       	lddsp	r3,sp[0x24]
800057b8:	0c 97       	mov	r7,r6
800057ba:	10 90       	mov	r0,r8
800057bc:	04 94       	mov	r4,r2
800057be:	40 41       	lddsp	r1,sp[0x10]
800057c0:	58 08       	cp.w	r8,0
800057c2:	e0 80 04 4f 	breq	80006060 <_vfprintf_r+0x1edc>
800057c6:	fb 68 06 60 	st.b	sp[1632],r8
800057ca:	30 0c       	mov	r12,0
800057cc:	30 08       	mov	r8,0
800057ce:	30 12       	mov	r2,1
800057d0:	fb 68 06 bb 	st.b	sp[1723],r8
800057d4:	50 2c       	stdsp	sp[0x8],r12
800057d6:	fa c6 f9 a0 	sub	r6,sp,-1632
800057da:	c0 78       	rjmp	800057e8 <_vfprintf_r+0x1664>
800057dc:	30 0b       	mov	r11,0
800057de:	50 2b       	stdsp	sp[0x8],r11
800057e0:	c0 48       	rjmp	800057e8 <_vfprintf_r+0x1664>
800057e2:	40 22       	lddsp	r2,sp[0x8]
800057e4:	30 0a       	mov	r10,0
800057e6:	50 2a       	stdsp	sp[0x8],r10
800057e8:	40 29       	lddsp	r9,sp[0x8]
800057ea:	e4 09 0c 49 	max	r9,r2,r9
800057ee:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800057f2:	50 39       	stdsp	sp[0xc],r9
800057f4:	0a 9e       	mov	lr,r5
800057f6:	30 09       	mov	r9,0
800057f8:	e2 1e 00 02 	andl	lr,0x2,COH
800057fc:	f2 08 18 00 	cp.b	r8,r9
80005800:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005804:	f7 b8 01 ff 	subne	r8,-1
80005808:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000580c:	0a 9b       	mov	r11,r5
8000580e:	58 0e       	cp.w	lr,0
80005810:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005814:	f7 bc 01 fe 	subne	r12,-2
80005818:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000581c:	e2 1b 00 84 	andl	r11,0x84,COH
80005820:	50 fe       	stdsp	sp[0x3c],lr
80005822:	50 9b       	stdsp	sp[0x24],r11
80005824:	c4 71       	brne	800058b2 <_vfprintf_r+0x172e>
80005826:	40 8a       	lddsp	r10,sp[0x20]
80005828:	40 39       	lddsp	r9,sp[0xc]
8000582a:	12 1a       	sub	r10,r9
8000582c:	50 4a       	stdsp	sp[0x10],r10
8000582e:	58 0a       	cp.w	r10,0
80005830:	e0 89 00 20 	brgt	80005870 <_vfprintf_r+0x16ec>
80005834:	c3 f8       	rjmp	800058b2 <_vfprintf_r+0x172e>
80005836:	2f 09       	sub	r9,-16
80005838:	2f f8       	sub	r8,-1
8000583a:	fe ce bc d6 	sub	lr,pc,-17194
8000583e:	31 0c       	mov	r12,16
80005840:	fb 49 06 90 	st.w	sp[1680],r9
80005844:	87 0e       	st.w	r3[0x0],lr
80005846:	87 1c       	st.w	r3[0x4],r12
80005848:	fb 48 06 8c 	st.w	sp[1676],r8
8000584c:	58 78       	cp.w	r8,7
8000584e:	e0 89 00 04 	brgt	80005856 <_vfprintf_r+0x16d2>
80005852:	2f 83       	sub	r3,-8
80005854:	c0 b8       	rjmp	8000586a <_vfprintf_r+0x16e6>
80005856:	fa ca f9 78 	sub	r10,sp,-1672
8000585a:	02 9b       	mov	r11,r1
8000585c:	08 9c       	mov	r12,r4
8000585e:	fe b0 f4 85 	rcall	80004168 <__sprint_r>
80005862:	e0 81 04 10 	brne	80006082 <_vfprintf_r+0x1efe>
80005866:	fa c3 f9 e0 	sub	r3,sp,-1568
8000586a:	40 4b       	lddsp	r11,sp[0x10]
8000586c:	21 0b       	sub	r11,16
8000586e:	50 4b       	stdsp	sp[0x10],r11
80005870:	fa f9 06 90 	ld.w	r9,sp[1680]
80005874:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005878:	fe ca bd 14 	sub	r10,pc,-17132
8000587c:	40 4e       	lddsp	lr,sp[0x10]
8000587e:	59 0e       	cp.w	lr,16
80005880:	fe 99 ff db 	brgt	80005836 <_vfprintf_r+0x16b2>
80005884:	1c 09       	add	r9,lr
80005886:	2f f8       	sub	r8,-1
80005888:	87 0a       	st.w	r3[0x0],r10
8000588a:	fb 49 06 90 	st.w	sp[1680],r9
8000588e:	87 1e       	st.w	r3[0x4],lr
80005890:	fb 48 06 8c 	st.w	sp[1676],r8
80005894:	58 78       	cp.w	r8,7
80005896:	e0 89 00 04 	brgt	8000589e <_vfprintf_r+0x171a>
8000589a:	2f 83       	sub	r3,-8
8000589c:	c0 b8       	rjmp	800058b2 <_vfprintf_r+0x172e>
8000589e:	fa ca f9 78 	sub	r10,sp,-1672
800058a2:	02 9b       	mov	r11,r1
800058a4:	08 9c       	mov	r12,r4
800058a6:	fe b0 f4 61 	rcall	80004168 <__sprint_r>
800058aa:	e0 81 03 ec 	brne	80006082 <_vfprintf_r+0x1efe>
800058ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800058b2:	30 09       	mov	r9,0
800058b4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800058b8:	f2 08 18 00 	cp.b	r8,r9
800058bc:	c1 f0       	breq	800058fa <_vfprintf_r+0x1776>
800058be:	fa f8 06 90 	ld.w	r8,sp[1680]
800058c2:	fa c9 f9 45 	sub	r9,sp,-1723
800058c6:	2f f8       	sub	r8,-1
800058c8:	87 09       	st.w	r3[0x0],r9
800058ca:	fb 48 06 90 	st.w	sp[1680],r8
800058ce:	30 19       	mov	r9,1
800058d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058d4:	87 19       	st.w	r3[0x4],r9
800058d6:	2f f8       	sub	r8,-1
800058d8:	fb 48 06 8c 	st.w	sp[1676],r8
800058dc:	58 78       	cp.w	r8,7
800058de:	e0 89 00 04 	brgt	800058e6 <_vfprintf_r+0x1762>
800058e2:	2f 83       	sub	r3,-8
800058e4:	c0 b8       	rjmp	800058fa <_vfprintf_r+0x1776>
800058e6:	fa ca f9 78 	sub	r10,sp,-1672
800058ea:	02 9b       	mov	r11,r1
800058ec:	08 9c       	mov	r12,r4
800058ee:	fe b0 f4 3d 	rcall	80004168 <__sprint_r>
800058f2:	e0 81 03 c8 	brne	80006082 <_vfprintf_r+0x1efe>
800058f6:	fa c3 f9 e0 	sub	r3,sp,-1568
800058fa:	40 fc       	lddsp	r12,sp[0x3c]
800058fc:	58 0c       	cp.w	r12,0
800058fe:	c1 f0       	breq	8000593c <_vfprintf_r+0x17b8>
80005900:	fa f8 06 90 	ld.w	r8,sp[1680]
80005904:	fa c9 f9 48 	sub	r9,sp,-1720
80005908:	2f e8       	sub	r8,-2
8000590a:	87 09       	st.w	r3[0x0],r9
8000590c:	fb 48 06 90 	st.w	sp[1680],r8
80005910:	30 29       	mov	r9,2
80005912:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005916:	87 19       	st.w	r3[0x4],r9
80005918:	2f f8       	sub	r8,-1
8000591a:	fb 48 06 8c 	st.w	sp[1676],r8
8000591e:	58 78       	cp.w	r8,7
80005920:	e0 89 00 04 	brgt	80005928 <_vfprintf_r+0x17a4>
80005924:	2f 83       	sub	r3,-8
80005926:	c0 b8       	rjmp	8000593c <_vfprintf_r+0x17b8>
80005928:	fa ca f9 78 	sub	r10,sp,-1672
8000592c:	02 9b       	mov	r11,r1
8000592e:	08 9c       	mov	r12,r4
80005930:	fe b0 f4 1c 	rcall	80004168 <__sprint_r>
80005934:	e0 81 03 a7 	brne	80006082 <_vfprintf_r+0x1efe>
80005938:	fa c3 f9 e0 	sub	r3,sp,-1568
8000593c:	40 9b       	lddsp	r11,sp[0x24]
8000593e:	e0 4b 00 80 	cp.w	r11,128
80005942:	c4 71       	brne	800059d0 <_vfprintf_r+0x184c>
80005944:	40 8a       	lddsp	r10,sp[0x20]
80005946:	40 39       	lddsp	r9,sp[0xc]
80005948:	12 1a       	sub	r10,r9
8000594a:	50 4a       	stdsp	sp[0x10],r10
8000594c:	58 0a       	cp.w	r10,0
8000594e:	e0 89 00 20 	brgt	8000598e <_vfprintf_r+0x180a>
80005952:	c3 f8       	rjmp	800059d0 <_vfprintf_r+0x184c>
80005954:	2f 09       	sub	r9,-16
80005956:	2f f8       	sub	r8,-1
80005958:	fe ce bd e4 	sub	lr,pc,-16924
8000595c:	31 0c       	mov	r12,16
8000595e:	fb 49 06 90 	st.w	sp[1680],r9
80005962:	87 0e       	st.w	r3[0x0],lr
80005964:	87 1c       	st.w	r3[0x4],r12
80005966:	fb 48 06 8c 	st.w	sp[1676],r8
8000596a:	58 78       	cp.w	r8,7
8000596c:	e0 89 00 04 	brgt	80005974 <_vfprintf_r+0x17f0>
80005970:	2f 83       	sub	r3,-8
80005972:	c0 b8       	rjmp	80005988 <_vfprintf_r+0x1804>
80005974:	fa ca f9 78 	sub	r10,sp,-1672
80005978:	02 9b       	mov	r11,r1
8000597a:	08 9c       	mov	r12,r4
8000597c:	fe b0 f3 f6 	rcall	80004168 <__sprint_r>
80005980:	e0 81 03 81 	brne	80006082 <_vfprintf_r+0x1efe>
80005984:	fa c3 f9 e0 	sub	r3,sp,-1568
80005988:	40 4b       	lddsp	r11,sp[0x10]
8000598a:	21 0b       	sub	r11,16
8000598c:	50 4b       	stdsp	sp[0x10],r11
8000598e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005992:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005996:	fe ca be 22 	sub	r10,pc,-16862
8000599a:	40 4e       	lddsp	lr,sp[0x10]
8000599c:	59 0e       	cp.w	lr,16
8000599e:	fe 99 ff db 	brgt	80005954 <_vfprintf_r+0x17d0>
800059a2:	1c 09       	add	r9,lr
800059a4:	2f f8       	sub	r8,-1
800059a6:	87 0a       	st.w	r3[0x0],r10
800059a8:	fb 49 06 90 	st.w	sp[1680],r9
800059ac:	87 1e       	st.w	r3[0x4],lr
800059ae:	fb 48 06 8c 	st.w	sp[1676],r8
800059b2:	58 78       	cp.w	r8,7
800059b4:	e0 89 00 04 	brgt	800059bc <_vfprintf_r+0x1838>
800059b8:	2f 83       	sub	r3,-8
800059ba:	c0 b8       	rjmp	800059d0 <_vfprintf_r+0x184c>
800059bc:	fa ca f9 78 	sub	r10,sp,-1672
800059c0:	02 9b       	mov	r11,r1
800059c2:	08 9c       	mov	r12,r4
800059c4:	fe b0 f3 d2 	rcall	80004168 <__sprint_r>
800059c8:	e0 81 03 5d 	brne	80006082 <_vfprintf_r+0x1efe>
800059cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800059d0:	40 2c       	lddsp	r12,sp[0x8]
800059d2:	04 1c       	sub	r12,r2
800059d4:	50 2c       	stdsp	sp[0x8],r12
800059d6:	58 0c       	cp.w	r12,0
800059d8:	e0 89 00 20 	brgt	80005a18 <_vfprintf_r+0x1894>
800059dc:	c3 f8       	rjmp	80005a5a <_vfprintf_r+0x18d6>
800059de:	2f 09       	sub	r9,-16
800059e0:	2f f8       	sub	r8,-1
800059e2:	fe cb be 6e 	sub	r11,pc,-16786
800059e6:	31 0a       	mov	r10,16
800059e8:	fb 49 06 90 	st.w	sp[1680],r9
800059ec:	87 0b       	st.w	r3[0x0],r11
800059ee:	87 1a       	st.w	r3[0x4],r10
800059f0:	fb 48 06 8c 	st.w	sp[1676],r8
800059f4:	58 78       	cp.w	r8,7
800059f6:	e0 89 00 04 	brgt	800059fe <_vfprintf_r+0x187a>
800059fa:	2f 83       	sub	r3,-8
800059fc:	c0 b8       	rjmp	80005a12 <_vfprintf_r+0x188e>
800059fe:	fa ca f9 78 	sub	r10,sp,-1672
80005a02:	02 9b       	mov	r11,r1
80005a04:	08 9c       	mov	r12,r4
80005a06:	fe b0 f3 b1 	rcall	80004168 <__sprint_r>
80005a0a:	e0 81 03 3c 	brne	80006082 <_vfprintf_r+0x1efe>
80005a0e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a12:	40 29       	lddsp	r9,sp[0x8]
80005a14:	21 09       	sub	r9,16
80005a16:	50 29       	stdsp	sp[0x8],r9
80005a18:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a1c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a20:	fe ca be ac 	sub	r10,pc,-16724
80005a24:	40 2e       	lddsp	lr,sp[0x8]
80005a26:	59 0e       	cp.w	lr,16
80005a28:	fe 99 ff db 	brgt	800059de <_vfprintf_r+0x185a>
80005a2c:	1c 09       	add	r9,lr
80005a2e:	2f f8       	sub	r8,-1
80005a30:	87 0a       	st.w	r3[0x0],r10
80005a32:	fb 49 06 90 	st.w	sp[1680],r9
80005a36:	87 1e       	st.w	r3[0x4],lr
80005a38:	fb 48 06 8c 	st.w	sp[1676],r8
80005a3c:	58 78       	cp.w	r8,7
80005a3e:	e0 89 00 04 	brgt	80005a46 <_vfprintf_r+0x18c2>
80005a42:	2f 83       	sub	r3,-8
80005a44:	c0 b8       	rjmp	80005a5a <_vfprintf_r+0x18d6>
80005a46:	fa ca f9 78 	sub	r10,sp,-1672
80005a4a:	02 9b       	mov	r11,r1
80005a4c:	08 9c       	mov	r12,r4
80005a4e:	fe b0 f3 8d 	rcall	80004168 <__sprint_r>
80005a52:	e0 81 03 18 	brne	80006082 <_vfprintf_r+0x1efe>
80005a56:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a5a:	ed b5 00 08 	bld	r5,0x8
80005a5e:	c0 b0       	breq	80005a74 <_vfprintf_r+0x18f0>
80005a60:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a64:	87 12       	st.w	r3[0x4],r2
80005a66:	87 06       	st.w	r3[0x0],r6
80005a68:	f0 02 00 02 	add	r2,r8,r2
80005a6c:	fb 42 06 90 	st.w	sp[1680],r2
80005a70:	e0 8f 01 d4 	bral	80005e18 <_vfprintf_r+0x1c94>
80005a74:	e0 40 00 65 	cp.w	r0,101
80005a78:	e0 8a 01 d6 	brle	80005e24 <_vfprintf_r+0x1ca0>
80005a7c:	30 08       	mov	r8,0
80005a7e:	30 09       	mov	r9,0
80005a80:	40 5b       	lddsp	r11,sp[0x14]
80005a82:	40 7a       	lddsp	r10,sp[0x1c]
80005a84:	e0 a0 17 ed 	rcall	80008a5e <__avr32_f64_cmp_eq>
80005a88:	c7 90       	breq	80005b7a <_vfprintf_r+0x19f6>
80005a8a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a8e:	fe c9 bf 2e 	sub	r9,pc,-16594
80005a92:	2f f8       	sub	r8,-1
80005a94:	87 09       	st.w	r3[0x0],r9
80005a96:	fb 48 06 90 	st.w	sp[1680],r8
80005a9a:	30 19       	mov	r9,1
80005a9c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005aa0:	87 19       	st.w	r3[0x4],r9
80005aa2:	2f f8       	sub	r8,-1
80005aa4:	fb 48 06 8c 	st.w	sp[1676],r8
80005aa8:	58 78       	cp.w	r8,7
80005aaa:	e0 89 00 05 	brgt	80005ab4 <_vfprintf_r+0x1930>
80005aae:	2f 83       	sub	r3,-8
80005ab0:	c0 c8       	rjmp	80005ac8 <_vfprintf_r+0x1944>
80005ab2:	d7 03       	nop
80005ab4:	fa ca f9 78 	sub	r10,sp,-1672
80005ab8:	02 9b       	mov	r11,r1
80005aba:	08 9c       	mov	r12,r4
80005abc:	fe b0 f3 56 	rcall	80004168 <__sprint_r>
80005ac0:	e0 81 02 e1 	brne	80006082 <_vfprintf_r+0x1efe>
80005ac4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ac8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005acc:	40 6c       	lddsp	r12,sp[0x18]
80005ace:	18 38       	cp.w	r8,r12
80005ad0:	c0 55       	brlt	80005ada <_vfprintf_r+0x1956>
80005ad2:	ed b5 00 00 	bld	r5,0x0
80005ad6:	e0 81 02 6b 	brne	80005fac <_vfprintf_r+0x1e28>
80005ada:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ade:	2f f8       	sub	r8,-1
80005ae0:	40 cb       	lddsp	r11,sp[0x30]
80005ae2:	fb 48 06 90 	st.w	sp[1680],r8
80005ae6:	30 19       	mov	r9,1
80005ae8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005aec:	87 0b       	st.w	r3[0x0],r11
80005aee:	2f f8       	sub	r8,-1
80005af0:	87 19       	st.w	r3[0x4],r9
80005af2:	fb 48 06 8c 	st.w	sp[1676],r8
80005af6:	58 78       	cp.w	r8,7
80005af8:	e0 89 00 04 	brgt	80005b00 <_vfprintf_r+0x197c>
80005afc:	2f 83       	sub	r3,-8
80005afe:	c0 b8       	rjmp	80005b14 <_vfprintf_r+0x1990>
80005b00:	fa ca f9 78 	sub	r10,sp,-1672
80005b04:	02 9b       	mov	r11,r1
80005b06:	08 9c       	mov	r12,r4
80005b08:	fe b0 f3 30 	rcall	80004168 <__sprint_r>
80005b0c:	e0 81 02 bb 	brne	80006082 <_vfprintf_r+0x1efe>
80005b10:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b14:	40 66       	lddsp	r6,sp[0x18]
80005b16:	20 16       	sub	r6,1
80005b18:	58 06       	cp.w	r6,0
80005b1a:	e0 89 00 1d 	brgt	80005b54 <_vfprintf_r+0x19d0>
80005b1e:	e0 8f 02 47 	bral	80005fac <_vfprintf_r+0x1e28>
80005b22:	2f 09       	sub	r9,-16
80005b24:	2f f8       	sub	r8,-1
80005b26:	fb 49 06 90 	st.w	sp[1680],r9
80005b2a:	87 02       	st.w	r3[0x0],r2
80005b2c:	87 10       	st.w	r3[0x4],r0
80005b2e:	fb 48 06 8c 	st.w	sp[1676],r8
80005b32:	58 78       	cp.w	r8,7
80005b34:	e0 89 00 04 	brgt	80005b3c <_vfprintf_r+0x19b8>
80005b38:	2f 83       	sub	r3,-8
80005b3a:	c0 b8       	rjmp	80005b50 <_vfprintf_r+0x19cc>
80005b3c:	fa ca f9 78 	sub	r10,sp,-1672
80005b40:	02 9b       	mov	r11,r1
80005b42:	08 9c       	mov	r12,r4
80005b44:	fe b0 f3 12 	rcall	80004168 <__sprint_r>
80005b48:	e0 81 02 9d 	brne	80006082 <_vfprintf_r+0x1efe>
80005b4c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b50:	21 06       	sub	r6,16
80005b52:	c0 48       	rjmp	80005b5a <_vfprintf_r+0x19d6>
80005b54:	fe c2 bf e0 	sub	r2,pc,-16416
80005b58:	31 00       	mov	r0,16
80005b5a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b5e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b62:	fe ca bf ee 	sub	r10,pc,-16402
80005b66:	59 06       	cp.w	r6,16
80005b68:	fe 99 ff dd 	brgt	80005b22 <_vfprintf_r+0x199e>
80005b6c:	0c 09       	add	r9,r6
80005b6e:	87 0a       	st.w	r3[0x0],r10
80005b70:	fb 49 06 90 	st.w	sp[1680],r9
80005b74:	2f f8       	sub	r8,-1
80005b76:	87 16       	st.w	r3[0x4],r6
80005b78:	c5 39       	rjmp	80005e1e <_vfprintf_r+0x1c9a>
80005b7a:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005b7e:	58 0a       	cp.w	r10,0
80005b80:	e0 89 00 92 	brgt	80005ca4 <_vfprintf_r+0x1b20>
80005b84:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b88:	fe c9 c0 28 	sub	r9,pc,-16344
80005b8c:	2f f8       	sub	r8,-1
80005b8e:	87 09       	st.w	r3[0x0],r9
80005b90:	fb 48 06 90 	st.w	sp[1680],r8
80005b94:	30 19       	mov	r9,1
80005b96:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b9a:	87 19       	st.w	r3[0x4],r9
80005b9c:	2f f8       	sub	r8,-1
80005b9e:	fb 48 06 8c 	st.w	sp[1676],r8
80005ba2:	58 78       	cp.w	r8,7
80005ba4:	e0 89 00 04 	brgt	80005bac <_vfprintf_r+0x1a28>
80005ba8:	2f 83       	sub	r3,-8
80005baa:	c0 b8       	rjmp	80005bc0 <_vfprintf_r+0x1a3c>
80005bac:	fa ca f9 78 	sub	r10,sp,-1672
80005bb0:	02 9b       	mov	r11,r1
80005bb2:	08 9c       	mov	r12,r4
80005bb4:	fe b0 f2 da 	rcall	80004168 <__sprint_r>
80005bb8:	e0 81 02 65 	brne	80006082 <_vfprintf_r+0x1efe>
80005bbc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bc0:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005bc4:	58 08       	cp.w	r8,0
80005bc6:	c0 81       	brne	80005bd6 <_vfprintf_r+0x1a52>
80005bc8:	40 6a       	lddsp	r10,sp[0x18]
80005bca:	58 0a       	cp.w	r10,0
80005bcc:	c0 51       	brne	80005bd6 <_vfprintf_r+0x1a52>
80005bce:	ed b5 00 00 	bld	r5,0x0
80005bd2:	e0 81 01 ed 	brne	80005fac <_vfprintf_r+0x1e28>
80005bd6:	40 c9       	lddsp	r9,sp[0x30]
80005bd8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bdc:	2f f8       	sub	r8,-1
80005bde:	87 09       	st.w	r3[0x0],r9
80005be0:	fb 48 06 90 	st.w	sp[1680],r8
80005be4:	30 19       	mov	r9,1
80005be6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bea:	87 19       	st.w	r3[0x4],r9
80005bec:	2f f8       	sub	r8,-1
80005bee:	fb 48 06 8c 	st.w	sp[1676],r8
80005bf2:	58 78       	cp.w	r8,7
80005bf4:	e0 89 00 04 	brgt	80005bfc <_vfprintf_r+0x1a78>
80005bf8:	2f 83       	sub	r3,-8
80005bfa:	c0 b8       	rjmp	80005c10 <_vfprintf_r+0x1a8c>
80005bfc:	fa ca f9 78 	sub	r10,sp,-1672
80005c00:	02 9b       	mov	r11,r1
80005c02:	08 9c       	mov	r12,r4
80005c04:	fe b0 f2 b2 	rcall	80004168 <__sprint_r>
80005c08:	e0 81 02 3d 	brne	80006082 <_vfprintf_r+0x1efe>
80005c0c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c10:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005c14:	5c 32       	neg	r2
80005c16:	58 02       	cp.w	r2,0
80005c18:	e0 89 00 1d 	brgt	80005c52 <_vfprintf_r+0x1ace>
80005c1c:	c3 d8       	rjmp	80005c96 <_vfprintf_r+0x1b12>
80005c1e:	2f 09       	sub	r9,-16
80005c20:	2f f8       	sub	r8,-1
80005c22:	31 0e       	mov	lr,16
80005c24:	fb 49 06 90 	st.w	sp[1680],r9
80005c28:	87 00       	st.w	r3[0x0],r0
80005c2a:	87 1e       	st.w	r3[0x4],lr
80005c2c:	fb 48 06 8c 	st.w	sp[1676],r8
80005c30:	58 78       	cp.w	r8,7
80005c32:	e0 89 00 04 	brgt	80005c3a <_vfprintf_r+0x1ab6>
80005c36:	2f 83       	sub	r3,-8
80005c38:	c0 b8       	rjmp	80005c4e <_vfprintf_r+0x1aca>
80005c3a:	fa ca f9 78 	sub	r10,sp,-1672
80005c3e:	02 9b       	mov	r11,r1
80005c40:	08 9c       	mov	r12,r4
80005c42:	fe b0 f2 93 	rcall	80004168 <__sprint_r>
80005c46:	e0 81 02 1e 	brne	80006082 <_vfprintf_r+0x1efe>
80005c4a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c4e:	21 02       	sub	r2,16
80005c50:	c0 38       	rjmp	80005c56 <_vfprintf_r+0x1ad2>
80005c52:	fe c0 c0 de 	sub	r0,pc,-16162
80005c56:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c5a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c5e:	fe ca c0 ea 	sub	r10,pc,-16150
80005c62:	59 02       	cp.w	r2,16
80005c64:	fe 99 ff dd 	brgt	80005c1e <_vfprintf_r+0x1a9a>
80005c68:	04 09       	add	r9,r2
80005c6a:	2f f8       	sub	r8,-1
80005c6c:	87 0a       	st.w	r3[0x0],r10
80005c6e:	fb 49 06 90 	st.w	sp[1680],r9
80005c72:	87 12       	st.w	r3[0x4],r2
80005c74:	fb 48 06 8c 	st.w	sp[1676],r8
80005c78:	58 78       	cp.w	r8,7
80005c7a:	e0 89 00 04 	brgt	80005c82 <_vfprintf_r+0x1afe>
80005c7e:	2f 83       	sub	r3,-8
80005c80:	c0 b8       	rjmp	80005c96 <_vfprintf_r+0x1b12>
80005c82:	fa ca f9 78 	sub	r10,sp,-1672
80005c86:	02 9b       	mov	r11,r1
80005c88:	08 9c       	mov	r12,r4
80005c8a:	fe b0 f2 6f 	rcall	80004168 <__sprint_r>
80005c8e:	e0 81 01 fa 	brne	80006082 <_vfprintf_r+0x1efe>
80005c92:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c96:	40 6c       	lddsp	r12,sp[0x18]
80005c98:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c9c:	87 06       	st.w	r3[0x0],r6
80005c9e:	87 1c       	st.w	r3[0x4],r12
80005ca0:	18 08       	add	r8,r12
80005ca2:	cb 98       	rjmp	80005e14 <_vfprintf_r+0x1c90>
80005ca4:	fa f9 06 90 	ld.w	r9,sp[1680]
80005ca8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cac:	40 6b       	lddsp	r11,sp[0x18]
80005cae:	16 3a       	cp.w	r10,r11
80005cb0:	c6 f5       	brlt	80005d8e <_vfprintf_r+0x1c0a>
80005cb2:	16 09       	add	r9,r11
80005cb4:	2f f8       	sub	r8,-1
80005cb6:	87 06       	st.w	r3[0x0],r6
80005cb8:	fb 49 06 90 	st.w	sp[1680],r9
80005cbc:	87 1b       	st.w	r3[0x4],r11
80005cbe:	fb 48 06 8c 	st.w	sp[1676],r8
80005cc2:	58 78       	cp.w	r8,7
80005cc4:	e0 89 00 04 	brgt	80005ccc <_vfprintf_r+0x1b48>
80005cc8:	2f 83       	sub	r3,-8
80005cca:	c0 b8       	rjmp	80005ce0 <_vfprintf_r+0x1b5c>
80005ccc:	fa ca f9 78 	sub	r10,sp,-1672
80005cd0:	02 9b       	mov	r11,r1
80005cd2:	08 9c       	mov	r12,r4
80005cd4:	fe b0 f2 4a 	rcall	80004168 <__sprint_r>
80005cd8:	e0 81 01 d5 	brne	80006082 <_vfprintf_r+0x1efe>
80005cdc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ce0:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005ce4:	40 6a       	lddsp	r10,sp[0x18]
80005ce6:	14 16       	sub	r6,r10
80005ce8:	58 06       	cp.w	r6,0
80005cea:	e0 89 00 1c 	brgt	80005d22 <_vfprintf_r+0x1b9e>
80005cee:	c3 d8       	rjmp	80005d68 <_vfprintf_r+0x1be4>
80005cf0:	2f 09       	sub	r9,-16
80005cf2:	2f f8       	sub	r8,-1
80005cf4:	fb 49 06 90 	st.w	sp[1680],r9
80005cf8:	87 02       	st.w	r3[0x0],r2
80005cfa:	87 10       	st.w	r3[0x4],r0
80005cfc:	fb 48 06 8c 	st.w	sp[1676],r8
80005d00:	58 78       	cp.w	r8,7
80005d02:	e0 89 00 04 	brgt	80005d0a <_vfprintf_r+0x1b86>
80005d06:	2f 83       	sub	r3,-8
80005d08:	c0 b8       	rjmp	80005d1e <_vfprintf_r+0x1b9a>
80005d0a:	fa ca f9 78 	sub	r10,sp,-1672
80005d0e:	02 9b       	mov	r11,r1
80005d10:	08 9c       	mov	r12,r4
80005d12:	fe b0 f2 2b 	rcall	80004168 <__sprint_r>
80005d16:	e0 81 01 b6 	brne	80006082 <_vfprintf_r+0x1efe>
80005d1a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d1e:	21 06       	sub	r6,16
80005d20:	c0 48       	rjmp	80005d28 <_vfprintf_r+0x1ba4>
80005d22:	fe c2 c1 ae 	sub	r2,pc,-15954
80005d26:	31 00       	mov	r0,16
80005d28:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d2c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d30:	fe ca c1 bc 	sub	r10,pc,-15940
80005d34:	59 06       	cp.w	r6,16
80005d36:	fe 99 ff dd 	brgt	80005cf0 <_vfprintf_r+0x1b6c>
80005d3a:	0c 09       	add	r9,r6
80005d3c:	2f f8       	sub	r8,-1
80005d3e:	87 0a       	st.w	r3[0x0],r10
80005d40:	fb 49 06 90 	st.w	sp[1680],r9
80005d44:	87 16       	st.w	r3[0x4],r6
80005d46:	fb 48 06 8c 	st.w	sp[1676],r8
80005d4a:	58 78       	cp.w	r8,7
80005d4c:	e0 89 00 04 	brgt	80005d54 <_vfprintf_r+0x1bd0>
80005d50:	2f 83       	sub	r3,-8
80005d52:	c0 b8       	rjmp	80005d68 <_vfprintf_r+0x1be4>
80005d54:	fa ca f9 78 	sub	r10,sp,-1672
80005d58:	02 9b       	mov	r11,r1
80005d5a:	08 9c       	mov	r12,r4
80005d5c:	fe b0 f2 06 	rcall	80004168 <__sprint_r>
80005d60:	e0 81 01 91 	brne	80006082 <_vfprintf_r+0x1efe>
80005d64:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d68:	ed b5 00 00 	bld	r5,0x0
80005d6c:	e0 81 01 20 	brne	80005fac <_vfprintf_r+0x1e28>
80005d70:	40 c9       	lddsp	r9,sp[0x30]
80005d72:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d76:	2f f8       	sub	r8,-1
80005d78:	87 09       	st.w	r3[0x0],r9
80005d7a:	fb 48 06 90 	st.w	sp[1680],r8
80005d7e:	30 19       	mov	r9,1
80005d80:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d84:	87 19       	st.w	r3[0x4],r9
80005d86:	2f f8       	sub	r8,-1
80005d88:	fb 48 06 8c 	st.w	sp[1676],r8
80005d8c:	c0 29       	rjmp	80005f90 <_vfprintf_r+0x1e0c>
80005d8e:	14 09       	add	r9,r10
80005d90:	2f f8       	sub	r8,-1
80005d92:	fb 49 06 90 	st.w	sp[1680],r9
80005d96:	87 06       	st.w	r3[0x0],r6
80005d98:	87 1a       	st.w	r3[0x4],r10
80005d9a:	fb 48 06 8c 	st.w	sp[1676],r8
80005d9e:	58 78       	cp.w	r8,7
80005da0:	e0 89 00 04 	brgt	80005da8 <_vfprintf_r+0x1c24>
80005da4:	2f 83       	sub	r3,-8
80005da6:	c0 b8       	rjmp	80005dbc <_vfprintf_r+0x1c38>
80005da8:	fa ca f9 78 	sub	r10,sp,-1672
80005dac:	02 9b       	mov	r11,r1
80005dae:	08 9c       	mov	r12,r4
80005db0:	fe b0 f1 dc 	rcall	80004168 <__sprint_r>
80005db4:	e0 81 01 67 	brne	80006082 <_vfprintf_r+0x1efe>
80005db8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dbc:	40 c8       	lddsp	r8,sp[0x30]
80005dbe:	87 08       	st.w	r3[0x0],r8
80005dc0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005dc4:	2f f8       	sub	r8,-1
80005dc6:	30 19       	mov	r9,1
80005dc8:	fb 48 06 90 	st.w	sp[1680],r8
80005dcc:	87 19       	st.w	r3[0x4],r9
80005dce:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005dd2:	2f f8       	sub	r8,-1
80005dd4:	fb 48 06 8c 	st.w	sp[1676],r8
80005dd8:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005ddc:	58 78       	cp.w	r8,7
80005dde:	e0 89 00 04 	brgt	80005de6 <_vfprintf_r+0x1c62>
80005de2:	2f 83       	sub	r3,-8
80005de4:	c0 b8       	rjmp	80005dfa <_vfprintf_r+0x1c76>
80005de6:	fa ca f9 78 	sub	r10,sp,-1672
80005dea:	02 9b       	mov	r11,r1
80005dec:	08 9c       	mov	r12,r4
80005dee:	fe b0 f1 bd 	rcall	80004168 <__sprint_r>
80005df2:	e0 81 01 48 	brne	80006082 <_vfprintf_r+0x1efe>
80005df6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dfa:	04 06       	add	r6,r2
80005dfc:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005e00:	87 06       	st.w	r3[0x0],r6
80005e02:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e06:	40 66       	lddsp	r6,sp[0x18]
80005e08:	40 6e       	lddsp	lr,sp[0x18]
80005e0a:	10 16       	sub	r6,r8
80005e0c:	f2 08 01 08 	sub	r8,r9,r8
80005e10:	87 16       	st.w	r3[0x4],r6
80005e12:	1c 08       	add	r8,lr
80005e14:	fb 48 06 90 	st.w	sp[1680],r8
80005e18:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e1c:	2f f8       	sub	r8,-1
80005e1e:	fb 48 06 8c 	st.w	sp[1676],r8
80005e22:	cb 78       	rjmp	80005f90 <_vfprintf_r+0x1e0c>
80005e24:	40 6c       	lddsp	r12,sp[0x18]
80005e26:	58 1c       	cp.w	r12,1
80005e28:	e0 89 00 06 	brgt	80005e34 <_vfprintf_r+0x1cb0>
80005e2c:	ed b5 00 00 	bld	r5,0x0
80005e30:	e0 81 00 85 	brne	80005f3a <_vfprintf_r+0x1db6>
80005e34:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e38:	2f f8       	sub	r8,-1
80005e3a:	30 19       	mov	r9,1
80005e3c:	fb 48 06 90 	st.w	sp[1680],r8
80005e40:	87 06       	st.w	r3[0x0],r6
80005e42:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e46:	87 19       	st.w	r3[0x4],r9
80005e48:	2f f8       	sub	r8,-1
80005e4a:	fb 48 06 8c 	st.w	sp[1676],r8
80005e4e:	58 78       	cp.w	r8,7
80005e50:	e0 89 00 04 	brgt	80005e58 <_vfprintf_r+0x1cd4>
80005e54:	2f 83       	sub	r3,-8
80005e56:	c0 b8       	rjmp	80005e6c <_vfprintf_r+0x1ce8>
80005e58:	fa ca f9 78 	sub	r10,sp,-1672
80005e5c:	02 9b       	mov	r11,r1
80005e5e:	08 9c       	mov	r12,r4
80005e60:	fe b0 f1 84 	rcall	80004168 <__sprint_r>
80005e64:	e0 81 01 0f 	brne	80006082 <_vfprintf_r+0x1efe>
80005e68:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e6c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e70:	2f f8       	sub	r8,-1
80005e72:	40 cb       	lddsp	r11,sp[0x30]
80005e74:	fb 48 06 90 	st.w	sp[1680],r8
80005e78:	30 19       	mov	r9,1
80005e7a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e7e:	87 0b       	st.w	r3[0x0],r11
80005e80:	2f f8       	sub	r8,-1
80005e82:	87 19       	st.w	r3[0x4],r9
80005e84:	fb 48 06 8c 	st.w	sp[1676],r8
80005e88:	58 78       	cp.w	r8,7
80005e8a:	e0 89 00 05 	brgt	80005e94 <_vfprintf_r+0x1d10>
80005e8e:	2f 83       	sub	r3,-8
80005e90:	c0 c8       	rjmp	80005ea8 <_vfprintf_r+0x1d24>
80005e92:	d7 03       	nop
80005e94:	fa ca f9 78 	sub	r10,sp,-1672
80005e98:	02 9b       	mov	r11,r1
80005e9a:	08 9c       	mov	r12,r4
80005e9c:	fe b0 f1 66 	rcall	80004168 <__sprint_r>
80005ea0:	e0 81 00 f1 	brne	80006082 <_vfprintf_r+0x1efe>
80005ea4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ea8:	30 08       	mov	r8,0
80005eaa:	30 09       	mov	r9,0
80005eac:	40 5b       	lddsp	r11,sp[0x14]
80005eae:	40 7a       	lddsp	r10,sp[0x1c]
80005eb0:	e0 a0 15 d7 	rcall	80008a5e <__avr32_f64_cmp_eq>
80005eb4:	40 68       	lddsp	r8,sp[0x18]
80005eb6:	20 18       	sub	r8,1
80005eb8:	58 0c       	cp.w	r12,0
80005eba:	c0 d1       	brne	80005ed4 <_vfprintf_r+0x1d50>
80005ebc:	2f f6       	sub	r6,-1
80005ebe:	87 18       	st.w	r3[0x4],r8
80005ec0:	87 06       	st.w	r3[0x0],r6
80005ec2:	fa f6 06 90 	ld.w	r6,sp[1680]
80005ec6:	10 06       	add	r6,r8
80005ec8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ecc:	fb 46 06 90 	st.w	sp[1680],r6
80005ed0:	2f f8       	sub	r8,-1
80005ed2:	c3 18       	rjmp	80005f34 <_vfprintf_r+0x1db0>
80005ed4:	10 96       	mov	r6,r8
80005ed6:	58 08       	cp.w	r8,0
80005ed8:	e0 89 00 1c 	brgt	80005f10 <_vfprintf_r+0x1d8c>
80005edc:	c4 b8       	rjmp	80005f72 <_vfprintf_r+0x1dee>
80005ede:	2f 09       	sub	r9,-16
80005ee0:	2f f8       	sub	r8,-1
80005ee2:	fb 49 06 90 	st.w	sp[1680],r9
80005ee6:	87 02       	st.w	r3[0x0],r2
80005ee8:	87 10       	st.w	r3[0x4],r0
80005eea:	fb 48 06 8c 	st.w	sp[1676],r8
80005eee:	58 78       	cp.w	r8,7
80005ef0:	e0 89 00 04 	brgt	80005ef8 <_vfprintf_r+0x1d74>
80005ef4:	2f 83       	sub	r3,-8
80005ef6:	c0 b8       	rjmp	80005f0c <_vfprintf_r+0x1d88>
80005ef8:	fa ca f9 78 	sub	r10,sp,-1672
80005efc:	02 9b       	mov	r11,r1
80005efe:	08 9c       	mov	r12,r4
80005f00:	fe b0 f1 34 	rcall	80004168 <__sprint_r>
80005f04:	e0 81 00 bf 	brne	80006082 <_vfprintf_r+0x1efe>
80005f08:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f0c:	21 06       	sub	r6,16
80005f0e:	c0 48       	rjmp	80005f16 <_vfprintf_r+0x1d92>
80005f10:	fe c2 c3 9c 	sub	r2,pc,-15460
80005f14:	31 00       	mov	r0,16
80005f16:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f1a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f1e:	fe ca c3 aa 	sub	r10,pc,-15446
80005f22:	59 06       	cp.w	r6,16
80005f24:	fe 99 ff dd 	brgt	80005ede <_vfprintf_r+0x1d5a>
80005f28:	0c 09       	add	r9,r6
80005f2a:	87 0a       	st.w	r3[0x0],r10
80005f2c:	fb 49 06 90 	st.w	sp[1680],r9
80005f30:	2f f8       	sub	r8,-1
80005f32:	87 16       	st.w	r3[0x4],r6
80005f34:	fb 48 06 8c 	st.w	sp[1676],r8
80005f38:	c0 e8       	rjmp	80005f54 <_vfprintf_r+0x1dd0>
80005f3a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f3e:	2f f8       	sub	r8,-1
80005f40:	30 19       	mov	r9,1
80005f42:	fb 48 06 90 	st.w	sp[1680],r8
80005f46:	87 06       	st.w	r3[0x0],r6
80005f48:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f4c:	87 19       	st.w	r3[0x4],r9
80005f4e:	2f f8       	sub	r8,-1
80005f50:	fb 48 06 8c 	st.w	sp[1676],r8
80005f54:	58 78       	cp.w	r8,7
80005f56:	e0 89 00 04 	brgt	80005f5e <_vfprintf_r+0x1dda>
80005f5a:	2f 83       	sub	r3,-8
80005f5c:	c0 b8       	rjmp	80005f72 <_vfprintf_r+0x1dee>
80005f5e:	fa ca f9 78 	sub	r10,sp,-1672
80005f62:	02 9b       	mov	r11,r1
80005f64:	08 9c       	mov	r12,r4
80005f66:	fe b0 f1 01 	rcall	80004168 <__sprint_r>
80005f6a:	e0 81 00 8c 	brne	80006082 <_vfprintf_r+0x1efe>
80005f6e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f72:	40 ea       	lddsp	r10,sp[0x38]
80005f74:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f78:	14 08       	add	r8,r10
80005f7a:	fa c9 f9 64 	sub	r9,sp,-1692
80005f7e:	fb 48 06 90 	st.w	sp[1680],r8
80005f82:	87 1a       	st.w	r3[0x4],r10
80005f84:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f88:	87 09       	st.w	r3[0x0],r9
80005f8a:	2f f8       	sub	r8,-1
80005f8c:	fb 48 06 8c 	st.w	sp[1676],r8
80005f90:	58 78       	cp.w	r8,7
80005f92:	e0 89 00 04 	brgt	80005f9a <_vfprintf_r+0x1e16>
80005f96:	2f 83       	sub	r3,-8
80005f98:	c0 a8       	rjmp	80005fac <_vfprintf_r+0x1e28>
80005f9a:	fa ca f9 78 	sub	r10,sp,-1672
80005f9e:	02 9b       	mov	r11,r1
80005fa0:	08 9c       	mov	r12,r4
80005fa2:	fe b0 f0 e3 	rcall	80004168 <__sprint_r>
80005fa6:	c6 e1       	brne	80006082 <_vfprintf_r+0x1efe>
80005fa8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fac:	e2 15 00 04 	andl	r5,0x4,COH
80005fb0:	c3 f0       	breq	8000602e <_vfprintf_r+0x1eaa>
80005fb2:	40 86       	lddsp	r6,sp[0x20]
80005fb4:	40 39       	lddsp	r9,sp[0xc]
80005fb6:	12 16       	sub	r6,r9
80005fb8:	58 06       	cp.w	r6,0
80005fba:	e0 89 00 1a 	brgt	80005fee <_vfprintf_r+0x1e6a>
80005fbe:	c3 88       	rjmp	8000602e <_vfprintf_r+0x1eaa>
80005fc0:	2f 09       	sub	r9,-16
80005fc2:	2f f8       	sub	r8,-1
80005fc4:	fb 49 06 90 	st.w	sp[1680],r9
80005fc8:	87 05       	st.w	r3[0x0],r5
80005fca:	87 12       	st.w	r3[0x4],r2
80005fcc:	fb 48 06 8c 	st.w	sp[1676],r8
80005fd0:	58 78       	cp.w	r8,7
80005fd2:	e0 89 00 04 	brgt	80005fda <_vfprintf_r+0x1e56>
80005fd6:	2f 83       	sub	r3,-8
80005fd8:	c0 98       	rjmp	80005fea <_vfprintf_r+0x1e66>
80005fda:	00 9a       	mov	r10,r0
80005fdc:	02 9b       	mov	r11,r1
80005fde:	08 9c       	mov	r12,r4
80005fe0:	fe b0 f0 c4 	rcall	80004168 <__sprint_r>
80005fe4:	c4 f1       	brne	80006082 <_vfprintf_r+0x1efe>
80005fe6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fea:	21 06       	sub	r6,16
80005fec:	c0 68       	rjmp	80005ff8 <_vfprintf_r+0x1e74>
80005fee:	fe c5 c4 8a 	sub	r5,pc,-15222
80005ff2:	31 02       	mov	r2,16
80005ff4:	fa c0 f9 78 	sub	r0,sp,-1672
80005ff8:	fa f9 06 90 	ld.w	r9,sp[1680]
80005ffc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006000:	fe ca c4 9c 	sub	r10,pc,-15204
80006004:	59 06       	cp.w	r6,16
80006006:	fe 99 ff dd 	brgt	80005fc0 <_vfprintf_r+0x1e3c>
8000600a:	0c 09       	add	r9,r6
8000600c:	2f f8       	sub	r8,-1
8000600e:	87 0a       	st.w	r3[0x0],r10
80006010:	87 16       	st.w	r3[0x4],r6
80006012:	fb 49 06 90 	st.w	sp[1680],r9
80006016:	fb 48 06 8c 	st.w	sp[1676],r8
8000601a:	58 78       	cp.w	r8,7
8000601c:	e0 8a 00 09 	brle	8000602e <_vfprintf_r+0x1eaa>
80006020:	fa ca f9 78 	sub	r10,sp,-1672
80006024:	02 9b       	mov	r11,r1
80006026:	08 9c       	mov	r12,r4
80006028:	fe b0 f0 a0 	rcall	80004168 <__sprint_r>
8000602c:	c2 b1       	brne	80006082 <_vfprintf_r+0x1efe>
8000602e:	40 bc       	lddsp	r12,sp[0x2c]
80006030:	40 36       	lddsp	r6,sp[0xc]
80006032:	40 8e       	lddsp	lr,sp[0x20]
80006034:	ec 0e 0c 48 	max	r8,r6,lr
80006038:	10 0c       	add	r12,r8
8000603a:	50 bc       	stdsp	sp[0x2c],r12
8000603c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006040:	58 08       	cp.w	r8,0
80006042:	c0 80       	breq	80006052 <_vfprintf_r+0x1ece>
80006044:	fa ca f9 78 	sub	r10,sp,-1672
80006048:	02 9b       	mov	r11,r1
8000604a:	08 9c       	mov	r12,r4
8000604c:	fe b0 f0 8e 	rcall	80004168 <__sprint_r>
80006050:	c1 91       	brne	80006082 <_vfprintf_r+0x1efe>
80006052:	30 0b       	mov	r11,0
80006054:	fa c3 f9 e0 	sub	r3,sp,-1568
80006058:	fb 4b 06 8c 	st.w	sp[1676],r11
8000605c:	fe 9f f1 22 	bral	800042a0 <_vfprintf_r+0x11c>
80006060:	08 95       	mov	r5,r4
80006062:	fa f8 06 90 	ld.w	r8,sp[1680]
80006066:	58 08       	cp.w	r8,0
80006068:	c0 80       	breq	80006078 <_vfprintf_r+0x1ef4>
8000606a:	08 9c       	mov	r12,r4
8000606c:	fa ca f9 78 	sub	r10,sp,-1672
80006070:	02 9b       	mov	r11,r1
80006072:	fe b0 f0 7b 	rcall	80004168 <__sprint_r>
80006076:	c0 61       	brne	80006082 <_vfprintf_r+0x1efe>
80006078:	30 08       	mov	r8,0
8000607a:	fb 48 06 8c 	st.w	sp[1676],r8
8000607e:	c0 28       	rjmp	80006082 <_vfprintf_r+0x1efe>
80006080:	40 41       	lddsp	r1,sp[0x10]
80006082:	82 68       	ld.sh	r8,r1[0xc]
80006084:	ed b8 00 06 	bld	r8,0x6
80006088:	c0 31       	brne	8000608e <_vfprintf_r+0x1f0a>
8000608a:	3f fa       	mov	r10,-1
8000608c:	50 ba       	stdsp	sp[0x2c],r10
8000608e:	40 bc       	lddsp	r12,sp[0x2c]
80006090:	fe 3d f9 44 	sub	sp,-1724
80006094:	d8 32       	popm	r0-r7,pc
80006096:	d7 03       	nop

80006098 <__swsetup_r>:
80006098:	d4 21       	pushm	r4-r7,lr
8000609a:	e0 68 01 20 	mov	r8,288
8000609e:	18 96       	mov	r6,r12
800060a0:	16 97       	mov	r7,r11
800060a2:	70 0c       	ld.w	r12,r8[0x0]
800060a4:	58 0c       	cp.w	r12,0
800060a6:	c0 60       	breq	800060b2 <__swsetup_r+0x1a>
800060a8:	78 68       	ld.w	r8,r12[0x18]
800060aa:	58 08       	cp.w	r8,0
800060ac:	c0 31       	brne	800060b2 <__swsetup_r+0x1a>
800060ae:	e0 a0 07 b9 	rcall	80007020 <__sinit>
800060b2:	fe c8 c4 1e 	sub	r8,pc,-15330
800060b6:	10 37       	cp.w	r7,r8
800060b8:	c0 61       	brne	800060c4 <__swsetup_r+0x2c>
800060ba:	e0 68 01 20 	mov	r8,288
800060be:	70 08       	ld.w	r8,r8[0x0]
800060c0:	70 07       	ld.w	r7,r8[0x0]
800060c2:	c1 28       	rjmp	800060e6 <__swsetup_r+0x4e>
800060c4:	fe c8 c4 10 	sub	r8,pc,-15344
800060c8:	10 37       	cp.w	r7,r8
800060ca:	c0 61       	brne	800060d6 <__swsetup_r+0x3e>
800060cc:	e0 68 01 20 	mov	r8,288
800060d0:	70 08       	ld.w	r8,r8[0x0]
800060d2:	70 17       	ld.w	r7,r8[0x4]
800060d4:	c0 98       	rjmp	800060e6 <__swsetup_r+0x4e>
800060d6:	fe c8 c4 02 	sub	r8,pc,-15358
800060da:	10 37       	cp.w	r7,r8
800060dc:	c0 51       	brne	800060e6 <__swsetup_r+0x4e>
800060de:	e0 68 01 20 	mov	r8,288
800060e2:	70 08       	ld.w	r8,r8[0x0]
800060e4:	70 27       	ld.w	r7,r8[0x8]
800060e6:	8e 68       	ld.sh	r8,r7[0xc]
800060e8:	ed b8 00 03 	bld	r8,0x3
800060ec:	c1 e0       	breq	80006128 <__swsetup_r+0x90>
800060ee:	ed b8 00 04 	bld	r8,0x4
800060f2:	c3 e1       	brne	8000616e <__swsetup_r+0xd6>
800060f4:	ed b8 00 02 	bld	r8,0x2
800060f8:	c1 51       	brne	80006122 <__swsetup_r+0x8a>
800060fa:	6e db       	ld.w	r11,r7[0x34]
800060fc:	58 0b       	cp.w	r11,0
800060fe:	c0 a0       	breq	80006112 <__swsetup_r+0x7a>
80006100:	ee c8 ff bc 	sub	r8,r7,-68
80006104:	10 3b       	cp.w	r11,r8
80006106:	c0 40       	breq	8000610e <__swsetup_r+0x76>
80006108:	0c 9c       	mov	r12,r6
8000610a:	e0 a0 08 25 	rcall	80007154 <_free_r>
8000610e:	30 08       	mov	r8,0
80006110:	8f d8       	st.w	r7[0x34],r8
80006112:	8e 68       	ld.sh	r8,r7[0xc]
80006114:	e0 18 ff db 	andl	r8,0xffdb
80006118:	ae 68       	st.h	r7[0xc],r8
8000611a:	30 08       	mov	r8,0
8000611c:	8f 18       	st.w	r7[0x4],r8
8000611e:	6e 48       	ld.w	r8,r7[0x10]
80006120:	8f 08       	st.w	r7[0x0],r8
80006122:	8e 68       	ld.sh	r8,r7[0xc]
80006124:	a3 b8       	sbr	r8,0x3
80006126:	ae 68       	st.h	r7[0xc],r8
80006128:	6e 48       	ld.w	r8,r7[0x10]
8000612a:	58 08       	cp.w	r8,0
8000612c:	c0 b1       	brne	80006142 <__swsetup_r+0xaa>
8000612e:	8e 68       	ld.sh	r8,r7[0xc]
80006130:	e2 18 02 80 	andl	r8,0x280,COH
80006134:	e0 48 02 00 	cp.w	r8,512
80006138:	c0 50       	breq	80006142 <__swsetup_r+0xaa>
8000613a:	0c 9c       	mov	r12,r6
8000613c:	0e 9b       	mov	r11,r7
8000613e:	e0 a0 0a 4b 	rcall	800075d4 <__smakebuf_r>
80006142:	8e 69       	ld.sh	r9,r7[0xc]
80006144:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006148:	c0 70       	breq	80006156 <__swsetup_r+0xbe>
8000614a:	30 08       	mov	r8,0
8000614c:	8f 28       	st.w	r7[0x8],r8
8000614e:	6e 58       	ld.w	r8,r7[0x14]
80006150:	5c 38       	neg	r8
80006152:	8f 68       	st.w	r7[0x18],r8
80006154:	c0 68       	rjmp	80006160 <__swsetup_r+0xc8>
80006156:	ed b9 00 01 	bld	r9,0x1
8000615a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000615e:	8f 28       	st.w	r7[0x8],r8
80006160:	6e 48       	ld.w	r8,r7[0x10]
80006162:	58 08       	cp.w	r8,0
80006164:	c0 61       	brne	80006170 <__swsetup_r+0xd8>
80006166:	8e 68       	ld.sh	r8,r7[0xc]
80006168:	ed b8 00 07 	bld	r8,0x7
8000616c:	c0 21       	brne	80006170 <__swsetup_r+0xd8>
8000616e:	dc 2a       	popm	r4-r7,pc,r12=-1
80006170:	d8 2a       	popm	r4-r7,pc,r12=0
80006172:	d7 03       	nop

80006174 <quorem>:
80006174:	d4 31       	pushm	r0-r7,lr
80006176:	20 2d       	sub	sp,8
80006178:	18 97       	mov	r7,r12
8000617a:	78 48       	ld.w	r8,r12[0x10]
8000617c:	76 46       	ld.w	r6,r11[0x10]
8000617e:	0c 38       	cp.w	r8,r6
80006180:	c0 34       	brge	80006186 <quorem+0x12>
80006182:	30 0c       	mov	r12,0
80006184:	c8 58       	rjmp	8000628e <quorem+0x11a>
80006186:	ec c2 ff fc 	sub	r2,r6,-4
8000618a:	f6 c3 ff ec 	sub	r3,r11,-20
8000618e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80006192:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006196:	2f f9       	sub	r9,-1
80006198:	20 16       	sub	r6,1
8000619a:	f8 09 0d 08 	divu	r8,r12,r9
8000619e:	f6 02 00 22 	add	r2,r11,r2<<0x2
800061a2:	ee c4 ff ec 	sub	r4,r7,-20
800061a6:	10 95       	mov	r5,r8
800061a8:	58 08       	cp.w	r8,0
800061aa:	c4 10       	breq	8000622c <quorem+0xb8>
800061ac:	30 09       	mov	r9,0
800061ae:	06 9a       	mov	r10,r3
800061b0:	08 98       	mov	r8,r4
800061b2:	12 91       	mov	r1,r9
800061b4:	50 0b       	stdsp	sp[0x0],r11
800061b6:	70 0e       	ld.w	lr,r8[0x0]
800061b8:	b1 8e       	lsr	lr,0x10
800061ba:	50 1e       	stdsp	sp[0x4],lr
800061bc:	15 0e       	ld.w	lr,r10++
800061be:	fc 00 16 10 	lsr	r0,lr,0x10
800061c2:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800061c6:	ea 0e 03 41 	mac	r1,r5,lr
800061ca:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800061ce:	b1 81       	lsr	r1,0x10
800061d0:	40 1b       	lddsp	r11,sp[0x4]
800061d2:	ea 00 02 40 	mul	r0,r5,r0
800061d6:	e2 00 00 00 	add	r0,r1,r0
800061da:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800061de:	02 1b       	sub	r11,r1
800061e0:	50 1b       	stdsp	sp[0x4],r11
800061e2:	70 0b       	ld.w	r11,r8[0x0]
800061e4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800061e8:	02 09       	add	r9,r1
800061ea:	f2 0e 01 0e 	sub	lr,r9,lr
800061ee:	b0 1e       	st.h	r8[0x2],lr
800061f0:	fc 09 14 10 	asr	r9,lr,0x10
800061f4:	40 1e       	lddsp	lr,sp[0x4]
800061f6:	fc 09 00 09 	add	r9,lr,r9
800061fa:	b0 09       	st.h	r8[0x0],r9
800061fc:	e0 01 16 10 	lsr	r1,r0,0x10
80006200:	2f c8       	sub	r8,-4
80006202:	b1 49       	asr	r9,0x10
80006204:	04 3a       	cp.w	r10,r2
80006206:	fe 98 ff d8 	brls	800061b6 <quorem+0x42>
8000620a:	40 0b       	lddsp	r11,sp[0x0]
8000620c:	58 0c       	cp.w	r12,0
8000620e:	c0 f1       	brne	8000622c <quorem+0xb8>
80006210:	ec c8 ff fb 	sub	r8,r6,-5
80006214:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006218:	c0 28       	rjmp	8000621c <quorem+0xa8>
8000621a:	20 16       	sub	r6,1
8000621c:	20 48       	sub	r8,4
8000621e:	08 38       	cp.w	r8,r4
80006220:	e0 88 00 05 	brls	8000622a <quorem+0xb6>
80006224:	70 09       	ld.w	r9,r8[0x0]
80006226:	58 09       	cp.w	r9,0
80006228:	cf 90       	breq	8000621a <quorem+0xa6>
8000622a:	8f 46       	st.w	r7[0x10],r6
8000622c:	0e 9c       	mov	r12,r7
8000622e:	e0 a0 0c f4 	rcall	80007c16 <__mcmp>
80006232:	c2 d5       	brlt	8000628c <quorem+0x118>
80006234:	2f f5       	sub	r5,-1
80006236:	08 98       	mov	r8,r4
80006238:	30 09       	mov	r9,0
8000623a:	07 0b       	ld.w	r11,r3++
8000623c:	f6 0a 16 10 	lsr	r10,r11,0x10
80006240:	70 0c       	ld.w	r12,r8[0x0]
80006242:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80006246:	f8 0e 16 10 	lsr	lr,r12,0x10
8000624a:	14 1e       	sub	lr,r10
8000624c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006250:	16 1a       	sub	r10,r11
80006252:	12 0a       	add	r10,r9
80006254:	b0 1a       	st.h	r8[0x2],r10
80006256:	b1 4a       	asr	r10,0x10
80006258:	fc 0a 00 09 	add	r9,lr,r10
8000625c:	b0 09       	st.h	r8[0x0],r9
8000625e:	2f c8       	sub	r8,-4
80006260:	b1 49       	asr	r9,0x10
80006262:	04 33       	cp.w	r3,r2
80006264:	fe 98 ff eb 	brls	8000623a <quorem+0xc6>
80006268:	ec c8 ff fb 	sub	r8,r6,-5
8000626c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006270:	58 09       	cp.w	r9,0
80006272:	c0 d1       	brne	8000628c <quorem+0x118>
80006274:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006278:	c0 28       	rjmp	8000627c <quorem+0x108>
8000627a:	20 16       	sub	r6,1
8000627c:	20 48       	sub	r8,4
8000627e:	08 38       	cp.w	r8,r4
80006280:	e0 88 00 05 	brls	8000628a <quorem+0x116>
80006284:	70 09       	ld.w	r9,r8[0x0]
80006286:	58 09       	cp.w	r9,0
80006288:	cf 90       	breq	8000627a <quorem+0x106>
8000628a:	8f 46       	st.w	r7[0x10],r6
8000628c:	0a 9c       	mov	r12,r5
8000628e:	2f ed       	sub	sp,-8
80006290:	d8 32       	popm	r0-r7,pc
80006292:	d7 03       	nop

80006294 <_dtoa_r>:
80006294:	d4 31       	pushm	r0-r7,lr
80006296:	21 ad       	sub	sp,104
80006298:	fa c4 ff 74 	sub	r4,sp,-140
8000629c:	18 97       	mov	r7,r12
8000629e:	16 95       	mov	r5,r11
800062a0:	68 2c       	ld.w	r12,r4[0x8]
800062a2:	50 c9       	stdsp	sp[0x30],r9
800062a4:	68 16       	ld.w	r6,r4[0x4]
800062a6:	68 09       	ld.w	r9,r4[0x0]
800062a8:	50 e8       	stdsp	sp[0x38],r8
800062aa:	14 94       	mov	r4,r10
800062ac:	51 2c       	stdsp	sp[0x48],r12
800062ae:	fa e5 00 08 	st.d	sp[8],r4
800062b2:	51 59       	stdsp	sp[0x54],r9
800062b4:	6e 95       	ld.w	r5,r7[0x24]
800062b6:	58 05       	cp.w	r5,0
800062b8:	c0 91       	brne	800062ca <_dtoa_r+0x36>
800062ba:	31 0c       	mov	r12,16
800062bc:	e0 a0 09 ea 	rcall	80007690 <malloc>
800062c0:	99 35       	st.w	r12[0xc],r5
800062c2:	8f 9c       	st.w	r7[0x24],r12
800062c4:	99 15       	st.w	r12[0x4],r5
800062c6:	99 25       	st.w	r12[0x8],r5
800062c8:	99 05       	st.w	r12[0x0],r5
800062ca:	6e 99       	ld.w	r9,r7[0x24]
800062cc:	72 08       	ld.w	r8,r9[0x0]
800062ce:	58 08       	cp.w	r8,0
800062d0:	c0 f0       	breq	800062ee <_dtoa_r+0x5a>
800062d2:	72 1a       	ld.w	r10,r9[0x4]
800062d4:	91 1a       	st.w	r8[0x4],r10
800062d6:	30 1a       	mov	r10,1
800062d8:	72 19       	ld.w	r9,r9[0x4]
800062da:	f4 09 09 49 	lsl	r9,r10,r9
800062de:	10 9b       	mov	r11,r8
800062e0:	91 29       	st.w	r8[0x8],r9
800062e2:	0e 9c       	mov	r12,r7
800062e4:	e0 a0 0c b2 	rcall	80007c48 <_Bfree>
800062e8:	6e 98       	ld.w	r8,r7[0x24]
800062ea:	30 09       	mov	r9,0
800062ec:	91 09       	st.w	r8[0x0],r9
800062ee:	40 28       	lddsp	r8,sp[0x8]
800062f0:	10 94       	mov	r4,r8
800062f2:	58 08       	cp.w	r8,0
800062f4:	c0 64       	brge	80006300 <_dtoa_r+0x6c>
800062f6:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800062fa:	50 28       	stdsp	sp[0x8],r8
800062fc:	30 18       	mov	r8,1
800062fe:	c0 28       	rjmp	80006302 <_dtoa_r+0x6e>
80006300:	30 08       	mov	r8,0
80006302:	8d 08       	st.w	r6[0x0],r8
80006304:	fc 1c 7f f0 	movh	r12,0x7ff0
80006308:	40 26       	lddsp	r6,sp[0x8]
8000630a:	0c 98       	mov	r8,r6
8000630c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006310:	18 38       	cp.w	r8,r12
80006312:	c2 01       	brne	80006352 <_dtoa_r+0xbe>
80006314:	e0 68 27 0f 	mov	r8,9999
80006318:	41 5b       	lddsp	r11,sp[0x54]
8000631a:	97 08       	st.w	r11[0x0],r8
8000631c:	40 3a       	lddsp	r10,sp[0xc]
8000631e:	58 0a       	cp.w	r10,0
80006320:	c0 71       	brne	8000632e <_dtoa_r+0x9a>
80006322:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80006326:	c0 41       	brne	8000632e <_dtoa_r+0x9a>
80006328:	fe cc c6 a4 	sub	r12,pc,-14684
8000632c:	c0 38       	rjmp	80006332 <_dtoa_r+0x9e>
8000632e:	fe cc c6 9e 	sub	r12,pc,-14690
80006332:	41 29       	lddsp	r9,sp[0x48]
80006334:	58 09       	cp.w	r9,0
80006336:	e0 80 05 9a 	breq	80006e6a <_dtoa_r+0xbd6>
8000633a:	f8 c8 ff fd 	sub	r8,r12,-3
8000633e:	f8 c9 ff f8 	sub	r9,r12,-8
80006342:	11 8b       	ld.ub	r11,r8[0x0]
80006344:	30 0a       	mov	r10,0
80006346:	41 25       	lddsp	r5,sp[0x48]
80006348:	f4 0b 18 00 	cp.b	r11,r10
8000634c:	f2 08 17 10 	movne	r8,r9
80006350:	c1 68       	rjmp	8000637c <_dtoa_r+0xe8>
80006352:	fa ea 00 08 	ld.d	r10,sp[8]
80006356:	30 08       	mov	r8,0
80006358:	fa eb 00 3c 	st.d	sp[60],r10
8000635c:	30 09       	mov	r9,0
8000635e:	e0 a0 13 80 	rcall	80008a5e <__avr32_f64_cmp_eq>
80006362:	c1 00       	breq	80006382 <_dtoa_r+0xee>
80006364:	30 18       	mov	r8,1
80006366:	41 5a       	lddsp	r10,sp[0x54]
80006368:	95 08       	st.w	r10[0x0],r8
8000636a:	fe cc c8 0a 	sub	r12,pc,-14326
8000636e:	41 29       	lddsp	r9,sp[0x48]
80006370:	f8 08 00 08 	add	r8,r12,r8
80006374:	58 09       	cp.w	r9,0
80006376:	e0 80 05 7a 	breq	80006e6a <_dtoa_r+0xbd6>
8000637a:	12 95       	mov	r5,r9
8000637c:	8b 08       	st.w	r5[0x0],r8
8000637e:	e0 8f 05 76 	bral	80006e6a <_dtoa_r+0xbd6>
80006382:	fa c8 ff 9c 	sub	r8,sp,-100
80006386:	fa c9 ff a0 	sub	r9,sp,-96
8000638a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000638e:	0e 9c       	mov	r12,r7
80006390:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006394:	e0 a0 0c ac 	rcall	80007cec <__d2b>
80006398:	18 93       	mov	r3,r12
8000639a:	58 05       	cp.w	r5,0
8000639c:	c0 d0       	breq	800063b6 <_dtoa_r+0x122>
8000639e:	fa ea 00 3c 	ld.d	r10,sp[60]
800063a2:	30 04       	mov	r4,0
800063a4:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800063a8:	ea c5 03 ff 	sub	r5,r5,1023
800063ac:	10 9b       	mov	r11,r8
800063ae:	51 74       	stdsp	sp[0x5c],r4
800063b0:	ea 1b 3f f0 	orh	r11,0x3ff0
800063b4:	c2 58       	rjmp	800063fe <_dtoa_r+0x16a>
800063b6:	41 88       	lddsp	r8,sp[0x60]
800063b8:	41 9c       	lddsp	r12,sp[0x64]
800063ba:	10 0c       	add	r12,r8
800063bc:	f8 c5 fb ce 	sub	r5,r12,-1074
800063c0:	e0 45 00 20 	cp.w	r5,32
800063c4:	e0 8a 00 0e 	brle	800063e0 <_dtoa_r+0x14c>
800063c8:	f8 cc fb ee 	sub	r12,r12,-1042
800063cc:	40 3b       	lddsp	r11,sp[0xc]
800063ce:	ea 08 11 40 	rsub	r8,r5,64
800063d2:	f6 0c 0a 4c 	lsr	r12,r11,r12
800063d6:	ec 08 09 46 	lsl	r6,r6,r8
800063da:	0c 4c       	or	r12,r6
800063dc:	c0 78       	rjmp	800063ea <_dtoa_r+0x156>
800063de:	d7 03       	nop
800063e0:	ea 0c 11 20 	rsub	r12,r5,32
800063e4:	40 3a       	lddsp	r10,sp[0xc]
800063e6:	f4 0c 09 4c 	lsl	r12,r10,r12
800063ea:	fe b0 eb 87 	rcall	80003af8 <__avr32_u32_to_f64>
800063ee:	fc 18 fe 10 	movh	r8,0xfe10
800063f2:	30 19       	mov	r9,1
800063f4:	ea c5 04 33 	sub	r5,r5,1075
800063f8:	f0 0b 00 0b 	add	r11,r8,r11
800063fc:	51 79       	stdsp	sp[0x5c],r9
800063fe:	30 08       	mov	r8,0
80006400:	fc 19 3f f8 	movh	r9,0x3ff8
80006404:	e0 a0 11 c2 	rcall	80008788 <__avr32_f64_sub>
80006408:	e0 68 43 61 	mov	r8,17249
8000640c:	ea 18 63 6f 	orh	r8,0x636f
80006410:	e0 69 87 a7 	mov	r9,34727
80006414:	ea 19 3f d2 	orh	r9,0x3fd2
80006418:	fe b0 ea 86 	rcall	80003924 <__avr32_f64_mul>
8000641c:	e0 68 c8 b3 	mov	r8,51379
80006420:	ea 18 8b 60 	orh	r8,0x8b60
80006424:	e0 69 8a 28 	mov	r9,35368
80006428:	ea 19 3f c6 	orh	r9,0x3fc6
8000642c:	e0 a0 12 7c 	rcall	80008924 <__avr32_f64_add>
80006430:	0a 9c       	mov	r12,r5
80006432:	14 90       	mov	r0,r10
80006434:	16 91       	mov	r1,r11
80006436:	fe b0 eb 65 	rcall	80003b00 <__avr32_s32_to_f64>
8000643a:	e0 68 79 fb 	mov	r8,31227
8000643e:	ea 18 50 9f 	orh	r8,0x509f
80006442:	e0 69 44 13 	mov	r9,17427
80006446:	ea 19 3f d3 	orh	r9,0x3fd3
8000644a:	fe b0 ea 6d 	rcall	80003924 <__avr32_f64_mul>
8000644e:	14 98       	mov	r8,r10
80006450:	16 99       	mov	r9,r11
80006452:	00 9a       	mov	r10,r0
80006454:	02 9b       	mov	r11,r1
80006456:	e0 a0 12 67 	rcall	80008924 <__avr32_f64_add>
8000645a:	14 90       	mov	r0,r10
8000645c:	16 91       	mov	r1,r11
8000645e:	e0 a0 12 ed 	rcall	80008a38 <__avr32_f64_to_s32>
80006462:	30 08       	mov	r8,0
80006464:	18 96       	mov	r6,r12
80006466:	30 09       	mov	r9,0
80006468:	00 9a       	mov	r10,r0
8000646a:	02 9b       	mov	r11,r1
8000646c:	e0 a0 13 40 	rcall	80008aec <__avr32_f64_cmp_lt>
80006470:	c0 c0       	breq	80006488 <_dtoa_r+0x1f4>
80006472:	0c 9c       	mov	r12,r6
80006474:	fe b0 eb 46 	rcall	80003b00 <__avr32_s32_to_f64>
80006478:	14 98       	mov	r8,r10
8000647a:	16 99       	mov	r9,r11
8000647c:	00 9a       	mov	r10,r0
8000647e:	02 9b       	mov	r11,r1
80006480:	e0 a0 12 ef 	rcall	80008a5e <__avr32_f64_cmp_eq>
80006484:	f7 b6 00 01 	subeq	r6,1
80006488:	59 66       	cp.w	r6,22
8000648a:	e0 88 00 05 	brls	80006494 <_dtoa_r+0x200>
8000648e:	30 18       	mov	r8,1
80006490:	51 48       	stdsp	sp[0x50],r8
80006492:	c1 38       	rjmp	800064b8 <_dtoa_r+0x224>
80006494:	fe c8 c7 4c 	sub	r8,pc,-14516
80006498:	fa ea 00 3c 	ld.d	r10,sp[60]
8000649c:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800064a0:	e0 a0 13 26 	rcall	80008aec <__avr32_f64_cmp_lt>
800064a4:	f9 b4 00 00 	moveq	r4,0
800064a8:	fb f4 0a 14 	st.weq	sp[0x50],r4
800064ac:	f7 b6 01 01 	subne	r6,1
800064b0:	f9 bc 01 00 	movne	r12,0
800064b4:	fb fc 1a 14 	st.wne	sp[0x50],r12
800064b8:	41 90       	lddsp	r0,sp[0x64]
800064ba:	20 10       	sub	r0,1
800064bc:	0a 10       	sub	r0,r5
800064be:	c0 46       	brmi	800064c6 <_dtoa_r+0x232>
800064c0:	50 40       	stdsp	sp[0x10],r0
800064c2:	30 00       	mov	r0,0
800064c4:	c0 48       	rjmp	800064cc <_dtoa_r+0x238>
800064c6:	30 0b       	mov	r11,0
800064c8:	5c 30       	neg	r0
800064ca:	50 4b       	stdsp	sp[0x10],r11
800064cc:	ec 02 11 00 	rsub	r2,r6,0
800064d0:	58 06       	cp.w	r6,0
800064d2:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800064d6:	f5 d6 e4 0a 	addge	r10,r10,r6
800064da:	fb fa 4a 04 	st.wge	sp[0x10],r10
800064de:	fb f6 4a 11 	st.wge	sp[0x44],r6
800064e2:	f9 b2 04 00 	movge	r2,0
800064e6:	e1 d6 e5 10 	sublt	r0,r0,r6
800064ea:	f9 b9 05 00 	movlt	r9,0
800064ee:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800064f2:	40 c8       	lddsp	r8,sp[0x30]
800064f4:	58 98       	cp.w	r8,9
800064f6:	e0 8b 00 20 	brhi	80006536 <_dtoa_r+0x2a2>
800064fa:	58 58       	cp.w	r8,5
800064fc:	f9 b4 0a 01 	movle	r4,1
80006500:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006504:	f7 b5 09 04 	subgt	r5,4
80006508:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000650c:	f9 b4 09 00 	movgt	r4,0
80006510:	40 cc       	lddsp	r12,sp[0x30]
80006512:	58 3c       	cp.w	r12,3
80006514:	c2 d0       	breq	8000656e <_dtoa_r+0x2da>
80006516:	e0 89 00 05 	brgt	80006520 <_dtoa_r+0x28c>
8000651a:	58 2c       	cp.w	r12,2
8000651c:	c1 01       	brne	8000653c <_dtoa_r+0x2a8>
8000651e:	c1 88       	rjmp	8000654e <_dtoa_r+0x2ba>
80006520:	40 cb       	lddsp	r11,sp[0x30]
80006522:	58 4b       	cp.w	r11,4
80006524:	c0 60       	breq	80006530 <_dtoa_r+0x29c>
80006526:	58 5b       	cp.w	r11,5
80006528:	c0 a1       	brne	8000653c <_dtoa_r+0x2a8>
8000652a:	30 1a       	mov	r10,1
8000652c:	50 da       	stdsp	sp[0x34],r10
8000652e:	c2 28       	rjmp	80006572 <_dtoa_r+0x2de>
80006530:	30 19       	mov	r9,1
80006532:	50 d9       	stdsp	sp[0x34],r9
80006534:	c0 f8       	rjmp	80006552 <_dtoa_r+0x2be>
80006536:	30 08       	mov	r8,0
80006538:	30 14       	mov	r4,1
8000653a:	50 c8       	stdsp	sp[0x30],r8
8000653c:	3f f5       	mov	r5,-1
8000653e:	30 1c       	mov	r12,1
80006540:	30 0b       	mov	r11,0
80006542:	50 95       	stdsp	sp[0x24],r5
80006544:	50 dc       	stdsp	sp[0x34],r12
80006546:	0a 91       	mov	r1,r5
80006548:	31 28       	mov	r8,18
8000654a:	50 eb       	stdsp	sp[0x38],r11
8000654c:	c2 08       	rjmp	8000658c <_dtoa_r+0x2f8>
8000654e:	30 0a       	mov	r10,0
80006550:	50 da       	stdsp	sp[0x34],r10
80006552:	40 e9       	lddsp	r9,sp[0x38]
80006554:	58 09       	cp.w	r9,0
80006556:	e0 89 00 07 	brgt	80006564 <_dtoa_r+0x2d0>
8000655a:	30 18       	mov	r8,1
8000655c:	50 98       	stdsp	sp[0x24],r8
8000655e:	10 91       	mov	r1,r8
80006560:	50 e8       	stdsp	sp[0x38],r8
80006562:	c1 58       	rjmp	8000658c <_dtoa_r+0x2f8>
80006564:	40 e5       	lddsp	r5,sp[0x38]
80006566:	50 95       	stdsp	sp[0x24],r5
80006568:	0a 91       	mov	r1,r5
8000656a:	0a 98       	mov	r8,r5
8000656c:	c1 08       	rjmp	8000658c <_dtoa_r+0x2f8>
8000656e:	30 0c       	mov	r12,0
80006570:	50 dc       	stdsp	sp[0x34],r12
80006572:	40 eb       	lddsp	r11,sp[0x38]
80006574:	ec 0b 00 0b 	add	r11,r6,r11
80006578:	50 9b       	stdsp	sp[0x24],r11
8000657a:	16 98       	mov	r8,r11
8000657c:	2f f8       	sub	r8,-1
8000657e:	58 08       	cp.w	r8,0
80006580:	e0 89 00 05 	brgt	8000658a <_dtoa_r+0x2f6>
80006584:	10 91       	mov	r1,r8
80006586:	30 18       	mov	r8,1
80006588:	c0 28       	rjmp	8000658c <_dtoa_r+0x2f8>
8000658a:	10 91       	mov	r1,r8
8000658c:	30 09       	mov	r9,0
8000658e:	6e 9a       	ld.w	r10,r7[0x24]
80006590:	95 19       	st.w	r10[0x4],r9
80006592:	30 49       	mov	r9,4
80006594:	c0 68       	rjmp	800065a0 <_dtoa_r+0x30c>
80006596:	d7 03       	nop
80006598:	6a 1a       	ld.w	r10,r5[0x4]
8000659a:	a1 79       	lsl	r9,0x1
8000659c:	2f fa       	sub	r10,-1
8000659e:	8b 1a       	st.w	r5[0x4],r10
800065a0:	6e 95       	ld.w	r5,r7[0x24]
800065a2:	f2 ca ff ec 	sub	r10,r9,-20
800065a6:	10 3a       	cp.w	r10,r8
800065a8:	fe 98 ff f8 	brls	80006598 <_dtoa_r+0x304>
800065ac:	6a 1b       	ld.w	r11,r5[0x4]
800065ae:	0e 9c       	mov	r12,r7
800065b0:	e0 a0 0b 66 	rcall	80007c7c <_Balloc>
800065b4:	58 e1       	cp.w	r1,14
800065b6:	5f 88       	srls	r8
800065b8:	8b 0c       	st.w	r5[0x0],r12
800065ba:	f1 e4 00 04 	and	r4,r8,r4
800065be:	6e 98       	ld.w	r8,r7[0x24]
800065c0:	70 08       	ld.w	r8,r8[0x0]
800065c2:	50 88       	stdsp	sp[0x20],r8
800065c4:	e0 80 01 82 	breq	800068c8 <_dtoa_r+0x634>
800065c8:	58 06       	cp.w	r6,0
800065ca:	e0 8a 00 43 	brle	80006650 <_dtoa_r+0x3bc>
800065ce:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800065d2:	fe c8 c8 8a 	sub	r8,pc,-14198
800065d6:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800065da:	fa e5 00 18 	st.d	sp[24],r4
800065de:	ec 04 14 04 	asr	r4,r6,0x4
800065e2:	ed b4 00 04 	bld	r4,0x4
800065e6:	c0 30       	breq	800065ec <_dtoa_r+0x358>
800065e8:	30 25       	mov	r5,2
800065ea:	c1 08       	rjmp	8000660a <_dtoa_r+0x376>
800065ec:	fe c8 c7 dc 	sub	r8,pc,-14372
800065f0:	f0 e8 00 20 	ld.d	r8,r8[32]
800065f4:	fa ea 00 3c 	ld.d	r10,sp[60]
800065f8:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800065fc:	e0 a0 12 ac 	rcall	80008b54 <__avr32_f64_div>
80006600:	30 35       	mov	r5,3
80006602:	14 98       	mov	r8,r10
80006604:	16 99       	mov	r9,r11
80006606:	fa e9 00 08 	st.d	sp[8],r8
8000660a:	fe cc c7 fa 	sub	r12,pc,-14342
8000660e:	50 a3       	stdsp	sp[0x28],r3
80006610:	0c 93       	mov	r3,r6
80006612:	18 96       	mov	r6,r12
80006614:	c0 f8       	rjmp	80006632 <_dtoa_r+0x39e>
80006616:	fa ea 00 18 	ld.d	r10,sp[24]
8000661a:	ed b4 00 00 	bld	r4,0x0
8000661e:	c0 81       	brne	8000662e <_dtoa_r+0x39a>
80006620:	ec e8 00 00 	ld.d	r8,r6[0]
80006624:	2f f5       	sub	r5,-1
80006626:	fe b0 e9 7f 	rcall	80003924 <__avr32_f64_mul>
8000662a:	fa eb 00 18 	st.d	sp[24],r10
8000662e:	a1 54       	asr	r4,0x1
80006630:	2f 86       	sub	r6,-8
80006632:	58 04       	cp.w	r4,0
80006634:	cf 11       	brne	80006616 <_dtoa_r+0x382>
80006636:	fa e8 00 18 	ld.d	r8,sp[24]
8000663a:	fa ea 00 08 	ld.d	r10,sp[8]
8000663e:	06 96       	mov	r6,r3
80006640:	e0 a0 12 8a 	rcall	80008b54 <__avr32_f64_div>
80006644:	40 a3       	lddsp	r3,sp[0x28]
80006646:	14 98       	mov	r8,r10
80006648:	16 99       	mov	r9,r11
8000664a:	fa e9 00 08 	st.d	sp[8],r8
8000664e:	c2 f8       	rjmp	800066ac <_dtoa_r+0x418>
80006650:	ec 08 11 00 	rsub	r8,r6,0
80006654:	c0 31       	brne	8000665a <_dtoa_r+0x3c6>
80006656:	30 25       	mov	r5,2
80006658:	c2 a8       	rjmp	800066ac <_dtoa_r+0x418>
8000665a:	fe cc c8 4a 	sub	r12,pc,-14262
8000665e:	f0 04 14 04 	asr	r4,r8,0x4
80006662:	50 1c       	stdsp	sp[0x4],r12
80006664:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006668:	fe c9 c9 20 	sub	r9,pc,-14048
8000666c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006670:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006674:	fe b0 e9 58 	rcall	80003924 <__avr32_f64_mul>
80006678:	40 1c       	lddsp	r12,sp[0x4]
8000667a:	50 63       	stdsp	sp[0x18],r3
8000667c:	30 25       	mov	r5,2
8000667e:	0c 93       	mov	r3,r6
80006680:	fa eb 00 08 	st.d	sp[8],r10
80006684:	18 96       	mov	r6,r12
80006686:	c0 f8       	rjmp	800066a4 <_dtoa_r+0x410>
80006688:	fa ea 00 08 	ld.d	r10,sp[8]
8000668c:	ed b4 00 00 	bld	r4,0x0
80006690:	c0 81       	brne	800066a0 <_dtoa_r+0x40c>
80006692:	ec e8 00 00 	ld.d	r8,r6[0]
80006696:	2f f5       	sub	r5,-1
80006698:	fe b0 e9 46 	rcall	80003924 <__avr32_f64_mul>
8000669c:	fa eb 00 08 	st.d	sp[8],r10
800066a0:	a1 54       	asr	r4,0x1
800066a2:	2f 86       	sub	r6,-8
800066a4:	58 04       	cp.w	r4,0
800066a6:	cf 11       	brne	80006688 <_dtoa_r+0x3f4>
800066a8:	06 96       	mov	r6,r3
800066aa:	40 63       	lddsp	r3,sp[0x18]
800066ac:	41 4a       	lddsp	r10,sp[0x50]
800066ae:	58 0a       	cp.w	r10,0
800066b0:	c2 a0       	breq	80006704 <_dtoa_r+0x470>
800066b2:	fa e8 00 08 	ld.d	r8,sp[8]
800066b6:	58 01       	cp.w	r1,0
800066b8:	5f 94       	srgt	r4
800066ba:	fa e9 00 18 	st.d	sp[24],r8
800066be:	30 08       	mov	r8,0
800066c0:	fc 19 3f f0 	movh	r9,0x3ff0
800066c4:	fa ea 00 18 	ld.d	r10,sp[24]
800066c8:	e0 a0 12 12 	rcall	80008aec <__avr32_f64_cmp_lt>
800066cc:	f9 bc 00 00 	moveq	r12,0
800066d0:	f9 bc 01 01 	movne	r12,1
800066d4:	e9 ec 00 0c 	and	r12,r4,r12
800066d8:	c1 60       	breq	80006704 <_dtoa_r+0x470>
800066da:	40 98       	lddsp	r8,sp[0x24]
800066dc:	58 08       	cp.w	r8,0
800066de:	e0 8a 00 f1 	brle	800068c0 <_dtoa_r+0x62c>
800066e2:	30 08       	mov	r8,0
800066e4:	fc 19 40 24 	movh	r9,0x4024
800066e8:	ec c4 00 01 	sub	r4,r6,1
800066ec:	fa ea 00 18 	ld.d	r10,sp[24]
800066f0:	2f f5       	sub	r5,-1
800066f2:	50 64       	stdsp	sp[0x18],r4
800066f4:	fe b0 e9 18 	rcall	80003924 <__avr32_f64_mul>
800066f8:	40 94       	lddsp	r4,sp[0x24]
800066fa:	14 98       	mov	r8,r10
800066fc:	16 99       	mov	r9,r11
800066fe:	fa e9 00 08 	st.d	sp[8],r8
80006702:	c0 38       	rjmp	80006708 <_dtoa_r+0x474>
80006704:	50 66       	stdsp	sp[0x18],r6
80006706:	02 94       	mov	r4,r1
80006708:	0a 9c       	mov	r12,r5
8000670a:	fe b0 e9 fb 	rcall	80003b00 <__avr32_s32_to_f64>
8000670e:	fa e8 00 08 	ld.d	r8,sp[8]
80006712:	fe b0 e9 09 	rcall	80003924 <__avr32_f64_mul>
80006716:	30 08       	mov	r8,0
80006718:	fc 19 40 1c 	movh	r9,0x401c
8000671c:	e0 a0 11 04 	rcall	80008924 <__avr32_f64_add>
80006720:	14 98       	mov	r8,r10
80006722:	16 99       	mov	r9,r11
80006724:	fa e9 00 28 	st.d	sp[40],r8
80006728:	fc 18 fc c0 	movh	r8,0xfcc0
8000672c:	40 a5       	lddsp	r5,sp[0x28]
8000672e:	10 05       	add	r5,r8
80006730:	50 a5       	stdsp	sp[0x28],r5
80006732:	58 04       	cp.w	r4,0
80006734:	c2 11       	brne	80006776 <_dtoa_r+0x4e2>
80006736:	fa ea 00 08 	ld.d	r10,sp[8]
8000673a:	30 08       	mov	r8,0
8000673c:	fc 19 40 14 	movh	r9,0x4014
80006740:	e0 a0 10 24 	rcall	80008788 <__avr32_f64_sub>
80006744:	40 bc       	lddsp	r12,sp[0x2c]
80006746:	fa eb 00 08 	st.d	sp[8],r10
8000674a:	14 98       	mov	r8,r10
8000674c:	16 99       	mov	r9,r11
8000674e:	18 9a       	mov	r10,r12
80006750:	0a 9b       	mov	r11,r5
80006752:	e0 a0 11 cd 	rcall	80008aec <__avr32_f64_cmp_lt>
80006756:	e0 81 02 54 	brne	80006bfe <_dtoa_r+0x96a>
8000675a:	0a 98       	mov	r8,r5
8000675c:	40 b9       	lddsp	r9,sp[0x2c]
8000675e:	ee 18 80 00 	eorh	r8,0x8000
80006762:	fa ea 00 08 	ld.d	r10,sp[8]
80006766:	10 95       	mov	r5,r8
80006768:	12 98       	mov	r8,r9
8000676a:	0a 99       	mov	r9,r5
8000676c:	e0 a0 11 c0 	rcall	80008aec <__avr32_f64_cmp_lt>
80006770:	e0 81 02 3e 	brne	80006bec <_dtoa_r+0x958>
80006774:	ca 68       	rjmp	800068c0 <_dtoa_r+0x62c>
80006776:	fe c9 ca 2e 	sub	r9,pc,-13778
8000677a:	e8 c8 00 01 	sub	r8,r4,1
8000677e:	40 d5       	lddsp	r5,sp[0x34]
80006780:	58 05       	cp.w	r5,0
80006782:	c4 f0       	breq	80006820 <_dtoa_r+0x58c>
80006784:	30 0c       	mov	r12,0
80006786:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000678a:	51 3c       	stdsp	sp[0x4c],r12
8000678c:	30 0a       	mov	r10,0
8000678e:	fc 1b 3f e0 	movh	r11,0x3fe0
80006792:	e0 a0 11 e1 	rcall	80008b54 <__avr32_f64_div>
80006796:	fa e8 00 28 	ld.d	r8,sp[40]
8000679a:	40 85       	lddsp	r5,sp[0x20]
8000679c:	e0 a0 0f f6 	rcall	80008788 <__avr32_f64_sub>
800067a0:	fa eb 00 28 	st.d	sp[40],r10
800067a4:	fa ea 00 08 	ld.d	r10,sp[8]
800067a8:	e0 a0 11 48 	rcall	80008a38 <__avr32_f64_to_s32>
800067ac:	51 6c       	stdsp	sp[0x58],r12
800067ae:	fe b0 e9 a9 	rcall	80003b00 <__avr32_s32_to_f64>
800067b2:	14 98       	mov	r8,r10
800067b4:	16 99       	mov	r9,r11
800067b6:	fa ea 00 08 	ld.d	r10,sp[8]
800067ba:	e0 a0 0f e7 	rcall	80008788 <__avr32_f64_sub>
800067be:	fa eb 00 08 	st.d	sp[8],r10
800067c2:	41 68       	lddsp	r8,sp[0x58]
800067c4:	2d 08       	sub	r8,-48
800067c6:	0a c8       	st.b	r5++,r8
800067c8:	41 39       	lddsp	r9,sp[0x4c]
800067ca:	2f f9       	sub	r9,-1
800067cc:	51 39       	stdsp	sp[0x4c],r9
800067ce:	fa e8 00 28 	ld.d	r8,sp[40]
800067d2:	e0 a0 11 8d 	rcall	80008aec <__avr32_f64_cmp_lt>
800067d6:	e0 81 03 39 	brne	80006e48 <_dtoa_r+0xbb4>
800067da:	fa e8 00 08 	ld.d	r8,sp[8]
800067de:	30 0a       	mov	r10,0
800067e0:	fc 1b 3f f0 	movh	r11,0x3ff0
800067e4:	e0 a0 0f d2 	rcall	80008788 <__avr32_f64_sub>
800067e8:	fa e8 00 28 	ld.d	r8,sp[40]
800067ec:	e0 a0 11 80 	rcall	80008aec <__avr32_f64_cmp_lt>
800067f0:	fa ea 00 28 	ld.d	r10,sp[40]
800067f4:	30 08       	mov	r8,0
800067f6:	fc 19 40 24 	movh	r9,0x4024
800067fa:	e0 81 00 da 	brne	800069ae <_dtoa_r+0x71a>
800067fe:	41 3c       	lddsp	r12,sp[0x4c]
80006800:	08 3c       	cp.w	r12,r4
80006802:	c5 f4       	brge	800068c0 <_dtoa_r+0x62c>
80006804:	fe b0 e8 90 	rcall	80003924 <__avr32_f64_mul>
80006808:	30 08       	mov	r8,0
8000680a:	fa eb 00 28 	st.d	sp[40],r10
8000680e:	fc 19 40 24 	movh	r9,0x4024
80006812:	fa ea 00 08 	ld.d	r10,sp[8]
80006816:	fe b0 e8 87 	rcall	80003924 <__avr32_f64_mul>
8000681a:	fa eb 00 08 	st.d	sp[8],r10
8000681e:	cc 3b       	rjmp	800067a4 <_dtoa_r+0x510>
80006820:	40 85       	lddsp	r5,sp[0x20]
80006822:	08 05       	add	r5,r4
80006824:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006828:	51 35       	stdsp	sp[0x4c],r5
8000682a:	fa e8 00 28 	ld.d	r8,sp[40]
8000682e:	40 85       	lddsp	r5,sp[0x20]
80006830:	fe b0 e8 7a 	rcall	80003924 <__avr32_f64_mul>
80006834:	fa eb 00 28 	st.d	sp[40],r10
80006838:	fa ea 00 08 	ld.d	r10,sp[8]
8000683c:	e0 a0 10 fe 	rcall	80008a38 <__avr32_f64_to_s32>
80006840:	51 6c       	stdsp	sp[0x58],r12
80006842:	fe b0 e9 5f 	rcall	80003b00 <__avr32_s32_to_f64>
80006846:	14 98       	mov	r8,r10
80006848:	16 99       	mov	r9,r11
8000684a:	fa ea 00 08 	ld.d	r10,sp[8]
8000684e:	e0 a0 0f 9d 	rcall	80008788 <__avr32_f64_sub>
80006852:	fa eb 00 08 	st.d	sp[8],r10
80006856:	41 68       	lddsp	r8,sp[0x58]
80006858:	2d 08       	sub	r8,-48
8000685a:	0a c8       	st.b	r5++,r8
8000685c:	41 3c       	lddsp	r12,sp[0x4c]
8000685e:	18 35       	cp.w	r5,r12
80006860:	c2 81       	brne	800068b0 <_dtoa_r+0x61c>
80006862:	30 08       	mov	r8,0
80006864:	fc 19 3f e0 	movh	r9,0x3fe0
80006868:	fa ea 00 28 	ld.d	r10,sp[40]
8000686c:	e0 a0 10 5c 	rcall	80008924 <__avr32_f64_add>
80006870:	40 85       	lddsp	r5,sp[0x20]
80006872:	fa e8 00 08 	ld.d	r8,sp[8]
80006876:	08 05       	add	r5,r4
80006878:	e0 a0 11 3a 	rcall	80008aec <__avr32_f64_cmp_lt>
8000687c:	e0 81 00 99 	brne	800069ae <_dtoa_r+0x71a>
80006880:	fa e8 00 28 	ld.d	r8,sp[40]
80006884:	30 0a       	mov	r10,0
80006886:	fc 1b 3f e0 	movh	r11,0x3fe0
8000688a:	e0 a0 0f 7f 	rcall	80008788 <__avr32_f64_sub>
8000688e:	14 98       	mov	r8,r10
80006890:	16 99       	mov	r9,r11
80006892:	fa ea 00 08 	ld.d	r10,sp[8]
80006896:	e0 a0 11 2b 	rcall	80008aec <__avr32_f64_cmp_lt>
8000689a:	c1 30       	breq	800068c0 <_dtoa_r+0x62c>
8000689c:	33 09       	mov	r9,48
8000689e:	0a 98       	mov	r8,r5
800068a0:	11 7a       	ld.ub	r10,--r8
800068a2:	f2 0a 18 00 	cp.b	r10,r9
800068a6:	e0 81 02 d1 	brne	80006e48 <_dtoa_r+0xbb4>
800068aa:	10 95       	mov	r5,r8
800068ac:	cf 9b       	rjmp	8000689e <_dtoa_r+0x60a>
800068ae:	d7 03       	nop
800068b0:	30 08       	mov	r8,0
800068b2:	fc 19 40 24 	movh	r9,0x4024
800068b6:	fe b0 e8 37 	rcall	80003924 <__avr32_f64_mul>
800068ba:	fa eb 00 08 	st.d	sp[8],r10
800068be:	cb db       	rjmp	80006838 <_dtoa_r+0x5a4>
800068c0:	fa ea 00 3c 	ld.d	r10,sp[60]
800068c4:	fa eb 00 08 	st.d	sp[8],r10
800068c8:	58 e6       	cp.w	r6,14
800068ca:	5f ab       	srle	r11
800068cc:	41 8a       	lddsp	r10,sp[0x60]
800068ce:	30 08       	mov	r8,0
800068d0:	f4 09 11 ff 	rsub	r9,r10,-1
800068d4:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800068d8:	f0 09 18 00 	cp.b	r9,r8
800068dc:	e0 80 00 82 	breq	800069e0 <_dtoa_r+0x74c>
800068e0:	40 ea       	lddsp	r10,sp[0x38]
800068e2:	58 01       	cp.w	r1,0
800068e4:	5f a9       	srle	r9
800068e6:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800068ea:	fe ca cb a2 	sub	r10,pc,-13406
800068ee:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800068f2:	fa e5 00 10 	st.d	sp[16],r4
800068f6:	f0 09 18 00 	cp.b	r9,r8
800068fa:	c1 40       	breq	80006922 <_dtoa_r+0x68e>
800068fc:	58 01       	cp.w	r1,0
800068fe:	e0 81 01 77 	brne	80006bec <_dtoa_r+0x958>
80006902:	30 08       	mov	r8,0
80006904:	fc 19 40 14 	movh	r9,0x4014
80006908:	08 9a       	mov	r10,r4
8000690a:	0a 9b       	mov	r11,r5
8000690c:	fe b0 e8 0c 	rcall	80003924 <__avr32_f64_mul>
80006910:	fa e8 00 08 	ld.d	r8,sp[8]
80006914:	e0 a0 10 b8 	rcall	80008a84 <__avr32_f64_cmp_ge>
80006918:	e0 81 01 6a 	brne	80006bec <_dtoa_r+0x958>
8000691c:	02 92       	mov	r2,r1
8000691e:	e0 8f 01 72 	bral	80006c02 <_dtoa_r+0x96e>
80006922:	40 85       	lddsp	r5,sp[0x20]
80006924:	30 14       	mov	r4,1
80006926:	fa e8 00 10 	ld.d	r8,sp[16]
8000692a:	fa ea 00 08 	ld.d	r10,sp[8]
8000692e:	e0 a0 11 13 	rcall	80008b54 <__avr32_f64_div>
80006932:	e0 a0 10 83 	rcall	80008a38 <__avr32_f64_to_s32>
80006936:	18 92       	mov	r2,r12
80006938:	fe b0 e8 e4 	rcall	80003b00 <__avr32_s32_to_f64>
8000693c:	fa e8 00 10 	ld.d	r8,sp[16]
80006940:	fe b0 e7 f2 	rcall	80003924 <__avr32_f64_mul>
80006944:	14 98       	mov	r8,r10
80006946:	16 99       	mov	r9,r11
80006948:	fa ea 00 08 	ld.d	r10,sp[8]
8000694c:	e0 a0 0f 1e 	rcall	80008788 <__avr32_f64_sub>
80006950:	fa eb 00 08 	st.d	sp[8],r10
80006954:	e4 c8 ff d0 	sub	r8,r2,-48
80006958:	0a c8       	st.b	r5++,r8
8000695a:	fc 19 40 24 	movh	r9,0x4024
8000695e:	30 08       	mov	r8,0
80006960:	02 34       	cp.w	r4,r1
80006962:	c3 31       	brne	800069c8 <_dtoa_r+0x734>
80006964:	fa e8 00 08 	ld.d	r8,sp[8]
80006968:	e0 a0 0f de 	rcall	80008924 <__avr32_f64_add>
8000696c:	16 91       	mov	r1,r11
8000696e:	14 90       	mov	r0,r10
80006970:	14 98       	mov	r8,r10
80006972:	02 99       	mov	r9,r1
80006974:	fa ea 00 10 	ld.d	r10,sp[16]
80006978:	e0 a0 10 ba 	rcall	80008aec <__avr32_f64_cmp_lt>
8000697c:	c1 a1       	brne	800069b0 <_dtoa_r+0x71c>
8000697e:	fa e8 00 10 	ld.d	r8,sp[16]
80006982:	00 9a       	mov	r10,r0
80006984:	02 9b       	mov	r11,r1
80006986:	e0 a0 10 6c 	rcall	80008a5e <__avr32_f64_cmp_eq>
8000698a:	e0 80 02 5e 	breq	80006e46 <_dtoa_r+0xbb2>
8000698e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006992:	c0 f1       	brne	800069b0 <_dtoa_r+0x71c>
80006994:	e0 8f 02 59 	bral	80006e46 <_dtoa_r+0xbb2>
80006998:	40 8a       	lddsp	r10,sp[0x20]
8000699a:	14 38       	cp.w	r8,r10
8000699c:	c0 30       	breq	800069a2 <_dtoa_r+0x70e>
8000699e:	10 95       	mov	r5,r8
800069a0:	c0 98       	rjmp	800069b2 <_dtoa_r+0x71e>
800069a2:	33 08       	mov	r8,48
800069a4:	40 89       	lddsp	r9,sp[0x20]
800069a6:	2f f6       	sub	r6,-1
800069a8:	b2 88       	st.b	r9[0x0],r8
800069aa:	40 88       	lddsp	r8,sp[0x20]
800069ac:	c0 88       	rjmp	800069bc <_dtoa_r+0x728>
800069ae:	40 66       	lddsp	r6,sp[0x18]
800069b0:	33 99       	mov	r9,57
800069b2:	0a 98       	mov	r8,r5
800069b4:	11 7a       	ld.ub	r10,--r8
800069b6:	f2 0a 18 00 	cp.b	r10,r9
800069ba:	ce f0       	breq	80006998 <_dtoa_r+0x704>
800069bc:	50 66       	stdsp	sp[0x18],r6
800069be:	11 89       	ld.ub	r9,r8[0x0]
800069c0:	2f f9       	sub	r9,-1
800069c2:	b0 89       	st.b	r8[0x0],r9
800069c4:	e0 8f 02 42 	bral	80006e48 <_dtoa_r+0xbb4>
800069c8:	fe b0 e7 ae 	rcall	80003924 <__avr32_f64_mul>
800069cc:	2f f4       	sub	r4,-1
800069ce:	fa eb 00 08 	st.d	sp[8],r10
800069d2:	30 08       	mov	r8,0
800069d4:	30 09       	mov	r9,0
800069d6:	e0 a0 10 44 	rcall	80008a5e <__avr32_f64_cmp_eq>
800069da:	ca 60       	breq	80006926 <_dtoa_r+0x692>
800069dc:	e0 8f 02 35 	bral	80006e46 <_dtoa_r+0xbb2>
800069e0:	40 d8       	lddsp	r8,sp[0x34]
800069e2:	58 08       	cp.w	r8,0
800069e4:	c0 51       	brne	800069ee <_dtoa_r+0x75a>
800069e6:	04 98       	mov	r8,r2
800069e8:	00 95       	mov	r5,r0
800069ea:	40 d4       	lddsp	r4,sp[0x34]
800069ec:	c3 78       	rjmp	80006a5a <_dtoa_r+0x7c6>
800069ee:	40 c5       	lddsp	r5,sp[0x30]
800069f0:	58 15       	cp.w	r5,1
800069f2:	e0 89 00 0f 	brgt	80006a10 <_dtoa_r+0x77c>
800069f6:	41 74       	lddsp	r4,sp[0x5c]
800069f8:	58 04       	cp.w	r4,0
800069fa:	c0 40       	breq	80006a02 <_dtoa_r+0x76e>
800069fc:	f4 c9 fb cd 	sub	r9,r10,-1075
80006a00:	c0 48       	rjmp	80006a08 <_dtoa_r+0x774>
80006a02:	41 99       	lddsp	r9,sp[0x64]
80006a04:	f2 09 11 36 	rsub	r9,r9,54
80006a08:	04 98       	mov	r8,r2
80006a0a:	00 95       	mov	r5,r0
80006a0c:	c1 c8       	rjmp	80006a44 <_dtoa_r+0x7b0>
80006a0e:	d7 03       	nop
80006a10:	e2 c8 00 01 	sub	r8,r1,1
80006a14:	58 01       	cp.w	r1,0
80006a16:	e0 05 17 40 	movge	r5,r0
80006a1a:	e2 09 17 40 	movge	r9,r1
80006a1e:	e1 d1 e5 15 	sublt	r5,r0,r1
80006a22:	f9 b9 05 00 	movlt	r9,0
80006a26:	10 32       	cp.w	r2,r8
80006a28:	e5 d8 e4 18 	subge	r8,r2,r8
80006a2c:	f1 d2 e5 18 	sublt	r8,r8,r2
80006a30:	e5 d8 e5 02 	addlt	r2,r2,r8
80006a34:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006a38:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006a3c:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006a40:	f9 b8 05 00 	movlt	r8,0
80006a44:	40 4b       	lddsp	r11,sp[0x10]
80006a46:	12 0b       	add	r11,r9
80006a48:	50 08       	stdsp	sp[0x0],r8
80006a4a:	50 4b       	stdsp	sp[0x10],r11
80006a4c:	12 00       	add	r0,r9
80006a4e:	30 1b       	mov	r11,1
80006a50:	0e 9c       	mov	r12,r7
80006a52:	e0 a0 0a c9 	rcall	80007fe4 <__i2b>
80006a56:	40 08       	lddsp	r8,sp[0x0]
80006a58:	18 94       	mov	r4,r12
80006a5a:	40 4a       	lddsp	r10,sp[0x10]
80006a5c:	58 05       	cp.w	r5,0
80006a5e:	5f 99       	srgt	r9
80006a60:	58 0a       	cp.w	r10,0
80006a62:	5f 9a       	srgt	r10
80006a64:	f5 e9 00 09 	and	r9,r10,r9
80006a68:	c0 80       	breq	80006a78 <_dtoa_r+0x7e4>
80006a6a:	40 4c       	lddsp	r12,sp[0x10]
80006a6c:	f8 05 0d 49 	min	r9,r12,r5
80006a70:	12 1c       	sub	r12,r9
80006a72:	12 10       	sub	r0,r9
80006a74:	50 4c       	stdsp	sp[0x10],r12
80006a76:	12 15       	sub	r5,r9
80006a78:	58 02       	cp.w	r2,0
80006a7a:	e0 8a 00 27 	brle	80006ac8 <_dtoa_r+0x834>
80006a7e:	40 db       	lddsp	r11,sp[0x34]
80006a80:	58 0b       	cp.w	r11,0
80006a82:	c1 d0       	breq	80006abc <_dtoa_r+0x828>
80006a84:	58 08       	cp.w	r8,0
80006a86:	e0 8a 00 17 	brle	80006ab4 <_dtoa_r+0x820>
80006a8a:	10 9a       	mov	r10,r8
80006a8c:	50 08       	stdsp	sp[0x0],r8
80006a8e:	08 9b       	mov	r11,r4
80006a90:	0e 9c       	mov	r12,r7
80006a92:	e0 a0 0a ef 	rcall	80008070 <__pow5mult>
80006a96:	06 9a       	mov	r10,r3
80006a98:	18 9b       	mov	r11,r12
80006a9a:	18 94       	mov	r4,r12
80006a9c:	0e 9c       	mov	r12,r7
80006a9e:	e0 a0 0a 23 	rcall	80007ee4 <__multiply>
80006aa2:	18 99       	mov	r9,r12
80006aa4:	06 9b       	mov	r11,r3
80006aa6:	50 19       	stdsp	sp[0x4],r9
80006aa8:	0e 9c       	mov	r12,r7
80006aaa:	e0 a0 08 cf 	rcall	80007c48 <_Bfree>
80006aae:	40 19       	lddsp	r9,sp[0x4]
80006ab0:	40 08       	lddsp	r8,sp[0x0]
80006ab2:	12 93       	mov	r3,r9
80006ab4:	e4 08 01 0a 	sub	r10,r2,r8
80006ab8:	c0 80       	breq	80006ac8 <_dtoa_r+0x834>
80006aba:	c0 28       	rjmp	80006abe <_dtoa_r+0x82a>
80006abc:	04 9a       	mov	r10,r2
80006abe:	06 9b       	mov	r11,r3
80006ac0:	0e 9c       	mov	r12,r7
80006ac2:	e0 a0 0a d7 	rcall	80008070 <__pow5mult>
80006ac6:	18 93       	mov	r3,r12
80006ac8:	30 1b       	mov	r11,1
80006aca:	0e 9c       	mov	r12,r7
80006acc:	e0 a0 0a 8c 	rcall	80007fe4 <__i2b>
80006ad0:	41 1a       	lddsp	r10,sp[0x44]
80006ad2:	18 92       	mov	r2,r12
80006ad4:	58 0a       	cp.w	r10,0
80006ad6:	e0 8a 00 07 	brle	80006ae4 <_dtoa_r+0x850>
80006ada:	18 9b       	mov	r11,r12
80006adc:	0e 9c       	mov	r12,r7
80006ade:	e0 a0 0a c9 	rcall	80008070 <__pow5mult>
80006ae2:	18 92       	mov	r2,r12
80006ae4:	40 c9       	lddsp	r9,sp[0x30]
80006ae6:	58 19       	cp.w	r9,1
80006ae8:	e0 89 00 14 	brgt	80006b10 <_dtoa_r+0x87c>
80006aec:	40 38       	lddsp	r8,sp[0xc]
80006aee:	58 08       	cp.w	r8,0
80006af0:	c1 01       	brne	80006b10 <_dtoa_r+0x87c>
80006af2:	40 29       	lddsp	r9,sp[0x8]
80006af4:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006af8:	c0 c1       	brne	80006b10 <_dtoa_r+0x87c>
80006afa:	12 98       	mov	r8,r9
80006afc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006b00:	c0 80       	breq	80006b10 <_dtoa_r+0x87c>
80006b02:	40 4c       	lddsp	r12,sp[0x10]
80006b04:	30 1b       	mov	r11,1
80006b06:	2f fc       	sub	r12,-1
80006b08:	2f f0       	sub	r0,-1
80006b0a:	50 4c       	stdsp	sp[0x10],r12
80006b0c:	50 6b       	stdsp	sp[0x18],r11
80006b0e:	c0 38       	rjmp	80006b14 <_dtoa_r+0x880>
80006b10:	30 0a       	mov	r10,0
80006b12:	50 6a       	stdsp	sp[0x18],r10
80006b14:	41 19       	lddsp	r9,sp[0x44]
80006b16:	58 09       	cp.w	r9,0
80006b18:	c0 31       	brne	80006b1e <_dtoa_r+0x88a>
80006b1a:	30 1c       	mov	r12,1
80006b1c:	c0 98       	rjmp	80006b2e <_dtoa_r+0x89a>
80006b1e:	64 48       	ld.w	r8,r2[0x10]
80006b20:	2f c8       	sub	r8,-4
80006b22:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006b26:	e0 a0 08 01 	rcall	80007b28 <__hi0bits>
80006b2a:	f8 0c 11 20 	rsub	r12,r12,32
80006b2e:	40 4b       	lddsp	r11,sp[0x10]
80006b30:	f8 0b 00 08 	add	r8,r12,r11
80006b34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006b38:	c0 c0       	breq	80006b50 <_dtoa_r+0x8bc>
80006b3a:	f0 08 11 20 	rsub	r8,r8,32
80006b3e:	58 48       	cp.w	r8,4
80006b40:	e0 8a 00 06 	brle	80006b4c <_dtoa_r+0x8b8>
80006b44:	20 48       	sub	r8,4
80006b46:	10 0b       	add	r11,r8
80006b48:	50 4b       	stdsp	sp[0x10],r11
80006b4a:	c0 78       	rjmp	80006b58 <_dtoa_r+0x8c4>
80006b4c:	58 48       	cp.w	r8,4
80006b4e:	c0 70       	breq	80006b5c <_dtoa_r+0x8c8>
80006b50:	40 4a       	lddsp	r10,sp[0x10]
80006b52:	2e 48       	sub	r8,-28
80006b54:	10 0a       	add	r10,r8
80006b56:	50 4a       	stdsp	sp[0x10],r10
80006b58:	10 00       	add	r0,r8
80006b5a:	10 05       	add	r5,r8
80006b5c:	58 00       	cp.w	r0,0
80006b5e:	e0 8a 00 08 	brle	80006b6e <_dtoa_r+0x8da>
80006b62:	06 9b       	mov	r11,r3
80006b64:	00 9a       	mov	r10,r0
80006b66:	0e 9c       	mov	r12,r7
80006b68:	e0 a0 09 7a 	rcall	80007e5c <__lshift>
80006b6c:	18 93       	mov	r3,r12
80006b6e:	40 49       	lddsp	r9,sp[0x10]
80006b70:	58 09       	cp.w	r9,0
80006b72:	e0 8a 00 08 	brle	80006b82 <_dtoa_r+0x8ee>
80006b76:	04 9b       	mov	r11,r2
80006b78:	12 9a       	mov	r10,r9
80006b7a:	0e 9c       	mov	r12,r7
80006b7c:	e0 a0 09 70 	rcall	80007e5c <__lshift>
80006b80:	18 92       	mov	r2,r12
80006b82:	41 48       	lddsp	r8,sp[0x50]
80006b84:	58 08       	cp.w	r8,0
80006b86:	c1 b0       	breq	80006bbc <_dtoa_r+0x928>
80006b88:	04 9b       	mov	r11,r2
80006b8a:	06 9c       	mov	r12,r3
80006b8c:	e0 a0 08 45 	rcall	80007c16 <__mcmp>
80006b90:	c1 64       	brge	80006bbc <_dtoa_r+0x928>
80006b92:	06 9b       	mov	r11,r3
80006b94:	30 09       	mov	r9,0
80006b96:	30 aa       	mov	r10,10
80006b98:	0e 9c       	mov	r12,r7
80006b9a:	e0 a0 0a 2d 	rcall	80007ff4 <__multadd>
80006b9e:	20 16       	sub	r6,1
80006ba0:	18 93       	mov	r3,r12
80006ba2:	40 dc       	lddsp	r12,sp[0x34]
80006ba4:	58 0c       	cp.w	r12,0
80006ba6:	c0 31       	brne	80006bac <_dtoa_r+0x918>
80006ba8:	40 91       	lddsp	r1,sp[0x24]
80006baa:	c0 98       	rjmp	80006bbc <_dtoa_r+0x928>
80006bac:	08 9b       	mov	r11,r4
80006bae:	40 91       	lddsp	r1,sp[0x24]
80006bb0:	30 09       	mov	r9,0
80006bb2:	30 aa       	mov	r10,10
80006bb4:	0e 9c       	mov	r12,r7
80006bb6:	e0 a0 0a 1f 	rcall	80007ff4 <__multadd>
80006bba:	18 94       	mov	r4,r12
80006bbc:	58 01       	cp.w	r1,0
80006bbe:	5f a9       	srle	r9
80006bc0:	40 cb       	lddsp	r11,sp[0x30]
80006bc2:	58 2b       	cp.w	r11,2
80006bc4:	5f 98       	srgt	r8
80006bc6:	f3 e8 00 08 	and	r8,r9,r8
80006bca:	c2 50       	breq	80006c14 <_dtoa_r+0x980>
80006bcc:	58 01       	cp.w	r1,0
80006bce:	c1 11       	brne	80006bf0 <_dtoa_r+0x95c>
80006bd0:	04 9b       	mov	r11,r2
80006bd2:	02 99       	mov	r9,r1
80006bd4:	30 5a       	mov	r10,5
80006bd6:	0e 9c       	mov	r12,r7
80006bd8:	e0 a0 0a 0e 	rcall	80007ff4 <__multadd>
80006bdc:	18 92       	mov	r2,r12
80006bde:	18 9b       	mov	r11,r12
80006be0:	06 9c       	mov	r12,r3
80006be2:	e0 a0 08 1a 	rcall	80007c16 <__mcmp>
80006be6:	e0 89 00 0f 	brgt	80006c04 <_dtoa_r+0x970>
80006bea:	c0 38       	rjmp	80006bf0 <_dtoa_r+0x95c>
80006bec:	30 02       	mov	r2,0
80006bee:	04 94       	mov	r4,r2
80006bf0:	40 ea       	lddsp	r10,sp[0x38]
80006bf2:	30 09       	mov	r9,0
80006bf4:	5c da       	com	r10
80006bf6:	40 85       	lddsp	r5,sp[0x20]
80006bf8:	50 6a       	stdsp	sp[0x18],r10
80006bfa:	50 49       	stdsp	sp[0x10],r9
80006bfc:	c0 f9       	rjmp	80006e1a <_dtoa_r+0xb86>
80006bfe:	08 92       	mov	r2,r4
80006c00:	40 66       	lddsp	r6,sp[0x18]
80006c02:	04 94       	mov	r4,r2
80006c04:	2f f6       	sub	r6,-1
80006c06:	50 66       	stdsp	sp[0x18],r6
80006c08:	33 18       	mov	r8,49
80006c0a:	40 85       	lddsp	r5,sp[0x20]
80006c0c:	0a c8       	st.b	r5++,r8
80006c0e:	30 08       	mov	r8,0
80006c10:	50 48       	stdsp	sp[0x10],r8
80006c12:	c0 49       	rjmp	80006e1a <_dtoa_r+0xb86>
80006c14:	40 dc       	lddsp	r12,sp[0x34]
80006c16:	58 0c       	cp.w	r12,0
80006c18:	e0 80 00 b5 	breq	80006d82 <_dtoa_r+0xaee>
80006c1c:	58 05       	cp.w	r5,0
80006c1e:	e0 8a 00 08 	brle	80006c2e <_dtoa_r+0x99a>
80006c22:	08 9b       	mov	r11,r4
80006c24:	0a 9a       	mov	r10,r5
80006c26:	0e 9c       	mov	r12,r7
80006c28:	e0 a0 09 1a 	rcall	80007e5c <__lshift>
80006c2c:	18 94       	mov	r4,r12
80006c2e:	40 6b       	lddsp	r11,sp[0x18]
80006c30:	58 0b       	cp.w	r11,0
80006c32:	c0 31       	brne	80006c38 <_dtoa_r+0x9a4>
80006c34:	08 9c       	mov	r12,r4
80006c36:	c1 38       	rjmp	80006c5c <_dtoa_r+0x9c8>
80006c38:	68 1b       	ld.w	r11,r4[0x4]
80006c3a:	0e 9c       	mov	r12,r7
80006c3c:	e0 a0 08 20 	rcall	80007c7c <_Balloc>
80006c40:	68 4a       	ld.w	r10,r4[0x10]
80006c42:	18 95       	mov	r5,r12
80006c44:	e8 cb ff f4 	sub	r11,r4,-12
80006c48:	2f ea       	sub	r10,-2
80006c4a:	2f 4c       	sub	r12,-12
80006c4c:	a3 6a       	lsl	r10,0x2
80006c4e:	fe b0 e8 3e 	rcall	80003cca <memcpy>
80006c52:	0a 9b       	mov	r11,r5
80006c54:	30 1a       	mov	r10,1
80006c56:	0e 9c       	mov	r12,r7
80006c58:	e0 a0 09 02 	rcall	80007e5c <__lshift>
80006c5c:	50 44       	stdsp	sp[0x10],r4
80006c5e:	40 3a       	lddsp	r10,sp[0xc]
80006c60:	30 19       	mov	r9,1
80006c62:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006c66:	18 94       	mov	r4,r12
80006c68:	50 da       	stdsp	sp[0x34],r10
80006c6a:	40 85       	lddsp	r5,sp[0x20]
80006c6c:	50 99       	stdsp	sp[0x24],r9
80006c6e:	50 26       	stdsp	sp[0x8],r6
80006c70:	50 e1       	stdsp	sp[0x38],r1
80006c72:	04 9b       	mov	r11,r2
80006c74:	06 9c       	mov	r12,r3
80006c76:	fe b0 fa 7f 	rcall	80006174 <quorem>
80006c7a:	40 4b       	lddsp	r11,sp[0x10]
80006c7c:	f8 c0 ff d0 	sub	r0,r12,-48
80006c80:	06 9c       	mov	r12,r3
80006c82:	e0 a0 07 ca 	rcall	80007c16 <__mcmp>
80006c86:	08 9a       	mov	r10,r4
80006c88:	50 6c       	stdsp	sp[0x18],r12
80006c8a:	04 9b       	mov	r11,r2
80006c8c:	0e 9c       	mov	r12,r7
80006c8e:	e0 a0 08 7f 	rcall	80007d8c <__mdiff>
80006c92:	18 91       	mov	r1,r12
80006c94:	78 38       	ld.w	r8,r12[0xc]
80006c96:	58 08       	cp.w	r8,0
80006c98:	c0 30       	breq	80006c9e <_dtoa_r+0xa0a>
80006c9a:	30 16       	mov	r6,1
80006c9c:	c0 68       	rjmp	80006ca8 <_dtoa_r+0xa14>
80006c9e:	18 9b       	mov	r11,r12
80006ca0:	06 9c       	mov	r12,r3
80006ca2:	e0 a0 07 ba 	rcall	80007c16 <__mcmp>
80006ca6:	18 96       	mov	r6,r12
80006ca8:	0e 9c       	mov	r12,r7
80006caa:	02 9b       	mov	r11,r1
80006cac:	e0 a0 07 ce 	rcall	80007c48 <_Bfree>
80006cb0:	40 cc       	lddsp	r12,sp[0x30]
80006cb2:	ed ec 10 08 	or	r8,r6,r12
80006cb6:	c0 d1       	brne	80006cd0 <_dtoa_r+0xa3c>
80006cb8:	40 db       	lddsp	r11,sp[0x34]
80006cba:	58 0b       	cp.w	r11,0
80006cbc:	c0 a1       	brne	80006cd0 <_dtoa_r+0xa3c>
80006cbe:	40 26       	lddsp	r6,sp[0x8]
80006cc0:	e0 40 00 39 	cp.w	r0,57
80006cc4:	c3 00       	breq	80006d24 <_dtoa_r+0xa90>
80006cc6:	40 6a       	lddsp	r10,sp[0x18]
80006cc8:	58 0a       	cp.w	r10,0
80006cca:	e0 89 00 24 	brgt	80006d12 <_dtoa_r+0xa7e>
80006cce:	c2 f8       	rjmp	80006d2c <_dtoa_r+0xa98>
80006cd0:	40 69       	lddsp	r9,sp[0x18]
80006cd2:	58 09       	cp.w	r9,0
80006cd4:	c0 85       	brlt	80006ce4 <_dtoa_r+0xa50>
80006cd6:	12 98       	mov	r8,r9
80006cd8:	40 cc       	lddsp	r12,sp[0x30]
80006cda:	18 48       	or	r8,r12
80006cdc:	c1 d1       	brne	80006d16 <_dtoa_r+0xa82>
80006cde:	40 db       	lddsp	r11,sp[0x34]
80006ce0:	58 0b       	cp.w	r11,0
80006ce2:	c1 a1       	brne	80006d16 <_dtoa_r+0xa82>
80006ce4:	0c 99       	mov	r9,r6
80006ce6:	40 26       	lddsp	r6,sp[0x8]
80006ce8:	58 09       	cp.w	r9,0
80006cea:	e0 8a 00 21 	brle	80006d2c <_dtoa_r+0xa98>
80006cee:	06 9b       	mov	r11,r3
80006cf0:	30 1a       	mov	r10,1
80006cf2:	0e 9c       	mov	r12,r7
80006cf4:	e0 a0 08 b4 	rcall	80007e5c <__lshift>
80006cf8:	04 9b       	mov	r11,r2
80006cfa:	18 93       	mov	r3,r12
80006cfc:	e0 a0 07 8d 	rcall	80007c16 <__mcmp>
80006d00:	e0 89 00 06 	brgt	80006d0c <_dtoa_r+0xa78>
80006d04:	c1 41       	brne	80006d2c <_dtoa_r+0xa98>
80006d06:	ed b0 00 00 	bld	r0,0x0
80006d0a:	c1 11       	brne	80006d2c <_dtoa_r+0xa98>
80006d0c:	e0 40 00 39 	cp.w	r0,57
80006d10:	c0 a0       	breq	80006d24 <_dtoa_r+0xa90>
80006d12:	2f f0       	sub	r0,-1
80006d14:	c0 c8       	rjmp	80006d2c <_dtoa_r+0xa98>
80006d16:	58 06       	cp.w	r6,0
80006d18:	e0 8a 00 0c 	brle	80006d30 <_dtoa_r+0xa9c>
80006d1c:	40 26       	lddsp	r6,sp[0x8]
80006d1e:	e0 40 00 39 	cp.w	r0,57
80006d22:	c0 41       	brne	80006d2a <_dtoa_r+0xa96>
80006d24:	33 98       	mov	r8,57
80006d26:	0a c8       	st.b	r5++,r8
80006d28:	c6 78       	rjmp	80006df6 <_dtoa_r+0xb62>
80006d2a:	2f f0       	sub	r0,-1
80006d2c:	0a c0       	st.b	r5++,r0
80006d2e:	c7 58       	rjmp	80006e18 <_dtoa_r+0xb84>
80006d30:	0a c0       	st.b	r5++,r0
80006d32:	40 9a       	lddsp	r10,sp[0x24]
80006d34:	40 e9       	lddsp	r9,sp[0x38]
80006d36:	12 3a       	cp.w	r10,r9
80006d38:	c4 30       	breq	80006dbe <_dtoa_r+0xb2a>
80006d3a:	06 9b       	mov	r11,r3
80006d3c:	30 09       	mov	r9,0
80006d3e:	30 aa       	mov	r10,10
80006d40:	0e 9c       	mov	r12,r7
80006d42:	e0 a0 09 59 	rcall	80007ff4 <__multadd>
80006d46:	40 48       	lddsp	r8,sp[0x10]
80006d48:	18 93       	mov	r3,r12
80006d4a:	08 38       	cp.w	r8,r4
80006d4c:	c0 91       	brne	80006d5e <_dtoa_r+0xaca>
80006d4e:	10 9b       	mov	r11,r8
80006d50:	30 09       	mov	r9,0
80006d52:	30 aa       	mov	r10,10
80006d54:	0e 9c       	mov	r12,r7
80006d56:	e0 a0 09 4f 	rcall	80007ff4 <__multadd>
80006d5a:	50 4c       	stdsp	sp[0x10],r12
80006d5c:	c0 e8       	rjmp	80006d78 <_dtoa_r+0xae4>
80006d5e:	40 4b       	lddsp	r11,sp[0x10]
80006d60:	30 09       	mov	r9,0
80006d62:	30 aa       	mov	r10,10
80006d64:	0e 9c       	mov	r12,r7
80006d66:	e0 a0 09 47 	rcall	80007ff4 <__multadd>
80006d6a:	08 9b       	mov	r11,r4
80006d6c:	50 4c       	stdsp	sp[0x10],r12
80006d6e:	30 09       	mov	r9,0
80006d70:	30 aa       	mov	r10,10
80006d72:	0e 9c       	mov	r12,r7
80006d74:	e0 a0 09 40 	rcall	80007ff4 <__multadd>
80006d78:	18 94       	mov	r4,r12
80006d7a:	40 9c       	lddsp	r12,sp[0x24]
80006d7c:	2f fc       	sub	r12,-1
80006d7e:	50 9c       	stdsp	sp[0x24],r12
80006d80:	c7 9b       	rjmp	80006c72 <_dtoa_r+0x9de>
80006d82:	30 18       	mov	r8,1
80006d84:	06 90       	mov	r0,r3
80006d86:	40 85       	lddsp	r5,sp[0x20]
80006d88:	08 93       	mov	r3,r4
80006d8a:	0c 94       	mov	r4,r6
80006d8c:	10 96       	mov	r6,r8
80006d8e:	04 9b       	mov	r11,r2
80006d90:	00 9c       	mov	r12,r0
80006d92:	fe b0 f9 f1 	rcall	80006174 <quorem>
80006d96:	2d 0c       	sub	r12,-48
80006d98:	0a cc       	st.b	r5++,r12
80006d9a:	02 36       	cp.w	r6,r1
80006d9c:	c0 a4       	brge	80006db0 <_dtoa_r+0xb1c>
80006d9e:	00 9b       	mov	r11,r0
80006da0:	30 09       	mov	r9,0
80006da2:	30 aa       	mov	r10,10
80006da4:	0e 9c       	mov	r12,r7
80006da6:	2f f6       	sub	r6,-1
80006da8:	e0 a0 09 26 	rcall	80007ff4 <__multadd>
80006dac:	18 90       	mov	r0,r12
80006dae:	cf 0b       	rjmp	80006d8e <_dtoa_r+0xafa>
80006db0:	08 96       	mov	r6,r4
80006db2:	30 0b       	mov	r11,0
80006db4:	06 94       	mov	r4,r3
80006db6:	50 4b       	stdsp	sp[0x10],r11
80006db8:	00 93       	mov	r3,r0
80006dba:	18 90       	mov	r0,r12
80006dbc:	c0 28       	rjmp	80006dc0 <_dtoa_r+0xb2c>
80006dbe:	40 26       	lddsp	r6,sp[0x8]
80006dc0:	06 9b       	mov	r11,r3
80006dc2:	30 1a       	mov	r10,1
80006dc4:	0e 9c       	mov	r12,r7
80006dc6:	e0 a0 08 4b 	rcall	80007e5c <__lshift>
80006dca:	04 9b       	mov	r11,r2
80006dcc:	18 93       	mov	r3,r12
80006dce:	e0 a0 07 24 	rcall	80007c16 <__mcmp>
80006dd2:	e0 89 00 12 	brgt	80006df6 <_dtoa_r+0xb62>
80006dd6:	c1 b1       	brne	80006e0c <_dtoa_r+0xb78>
80006dd8:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006ddc:	c0 d1       	brne	80006df6 <_dtoa_r+0xb62>
80006dde:	c1 78       	rjmp	80006e0c <_dtoa_r+0xb78>
80006de0:	40 89       	lddsp	r9,sp[0x20]
80006de2:	12 38       	cp.w	r8,r9
80006de4:	c0 30       	breq	80006dea <_dtoa_r+0xb56>
80006de6:	10 95       	mov	r5,r8
80006de8:	c0 88       	rjmp	80006df8 <_dtoa_r+0xb64>
80006dea:	2f f6       	sub	r6,-1
80006dec:	50 66       	stdsp	sp[0x18],r6
80006dee:	33 18       	mov	r8,49
80006df0:	40 8c       	lddsp	r12,sp[0x20]
80006df2:	b8 88       	st.b	r12[0x0],r8
80006df4:	c1 38       	rjmp	80006e1a <_dtoa_r+0xb86>
80006df6:	33 9a       	mov	r10,57
80006df8:	0a 98       	mov	r8,r5
80006dfa:	11 79       	ld.ub	r9,--r8
80006dfc:	f4 09 18 00 	cp.b	r9,r10
80006e00:	cf 00       	breq	80006de0 <_dtoa_r+0xb4c>
80006e02:	2f f9       	sub	r9,-1
80006e04:	b0 89       	st.b	r8[0x0],r9
80006e06:	c0 98       	rjmp	80006e18 <_dtoa_r+0xb84>
80006e08:	10 95       	mov	r5,r8
80006e0a:	c0 28       	rjmp	80006e0e <_dtoa_r+0xb7a>
80006e0c:	33 09       	mov	r9,48
80006e0e:	0a 98       	mov	r8,r5
80006e10:	11 7a       	ld.ub	r10,--r8
80006e12:	f2 0a 18 00 	cp.b	r10,r9
80006e16:	cf 90       	breq	80006e08 <_dtoa_r+0xb74>
80006e18:	50 66       	stdsp	sp[0x18],r6
80006e1a:	04 9b       	mov	r11,r2
80006e1c:	0e 9c       	mov	r12,r7
80006e1e:	e0 a0 07 15 	rcall	80007c48 <_Bfree>
80006e22:	58 04       	cp.w	r4,0
80006e24:	c1 20       	breq	80006e48 <_dtoa_r+0xbb4>
80006e26:	40 4b       	lddsp	r11,sp[0x10]
80006e28:	08 3b       	cp.w	r11,r4
80006e2a:	5f 19       	srne	r9
80006e2c:	58 0b       	cp.w	r11,0
80006e2e:	5f 18       	srne	r8
80006e30:	f3 e8 00 08 	and	r8,r9,r8
80006e34:	c0 40       	breq	80006e3c <_dtoa_r+0xba8>
80006e36:	0e 9c       	mov	r12,r7
80006e38:	e0 a0 07 08 	rcall	80007c48 <_Bfree>
80006e3c:	08 9b       	mov	r11,r4
80006e3e:	0e 9c       	mov	r12,r7
80006e40:	e0 a0 07 04 	rcall	80007c48 <_Bfree>
80006e44:	c0 28       	rjmp	80006e48 <_dtoa_r+0xbb4>
80006e46:	50 66       	stdsp	sp[0x18],r6
80006e48:	0e 9c       	mov	r12,r7
80006e4a:	06 9b       	mov	r11,r3
80006e4c:	e0 a0 06 fe 	rcall	80007c48 <_Bfree>
80006e50:	30 08       	mov	r8,0
80006e52:	aa 88       	st.b	r5[0x0],r8
80006e54:	40 68       	lddsp	r8,sp[0x18]
80006e56:	41 5a       	lddsp	r10,sp[0x54]
80006e58:	2f f8       	sub	r8,-1
80006e5a:	41 29       	lddsp	r9,sp[0x48]
80006e5c:	95 08       	st.w	r10[0x0],r8
80006e5e:	40 8c       	lddsp	r12,sp[0x20]
80006e60:	58 09       	cp.w	r9,0
80006e62:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006e66:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006e6a:	2e 6d       	sub	sp,-104
80006e6c:	d8 32       	popm	r0-r7,pc
80006e6e:	d7 03       	nop

80006e70 <_fflush_r>:
80006e70:	d4 21       	pushm	r4-r7,lr
80006e72:	16 97       	mov	r7,r11
80006e74:	18 96       	mov	r6,r12
80006e76:	76 48       	ld.w	r8,r11[0x10]
80006e78:	58 08       	cp.w	r8,0
80006e7a:	c7 f0       	breq	80006f78 <_fflush_r+0x108>
80006e7c:	58 0c       	cp.w	r12,0
80006e7e:	c0 50       	breq	80006e88 <_fflush_r+0x18>
80006e80:	78 68       	ld.w	r8,r12[0x18]
80006e82:	58 08       	cp.w	r8,0
80006e84:	c0 21       	brne	80006e88 <_fflush_r+0x18>
80006e86:	cc dc       	rcall	80007020 <__sinit>
80006e88:	fe c8 d1 f4 	sub	r8,pc,-11788
80006e8c:	10 37       	cp.w	r7,r8
80006e8e:	c0 31       	brne	80006e94 <_fflush_r+0x24>
80006e90:	6c 07       	ld.w	r7,r6[0x0]
80006e92:	c0 c8       	rjmp	80006eaa <_fflush_r+0x3a>
80006e94:	fe c8 d1 e0 	sub	r8,pc,-11808
80006e98:	10 37       	cp.w	r7,r8
80006e9a:	c0 31       	brne	80006ea0 <_fflush_r+0x30>
80006e9c:	6c 17       	ld.w	r7,r6[0x4]
80006e9e:	c0 68       	rjmp	80006eaa <_fflush_r+0x3a>
80006ea0:	fe c8 d1 cc 	sub	r8,pc,-11828
80006ea4:	10 37       	cp.w	r7,r8
80006ea6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006eaa:	8e 6a       	ld.sh	r10,r7[0xc]
80006eac:	14 98       	mov	r8,r10
80006eae:	ed ba 00 03 	bld	r10,0x3
80006eb2:	c4 20       	breq	80006f36 <_fflush_r+0xc6>
80006eb4:	ab ba       	sbr	r10,0xb
80006eb6:	ae 6a       	st.h	r7[0xc],r10
80006eb8:	6e 18       	ld.w	r8,r7[0x4]
80006eba:	58 08       	cp.w	r8,0
80006ebc:	e0 89 00 06 	brgt	80006ec8 <_fflush_r+0x58>
80006ec0:	6f 08       	ld.w	r8,r7[0x40]
80006ec2:	58 08       	cp.w	r8,0
80006ec4:	e0 8a 00 5a 	brle	80006f78 <_fflush_r+0x108>
80006ec8:	6e b8       	ld.w	r8,r7[0x2c]
80006eca:	58 08       	cp.w	r8,0
80006ecc:	c5 60       	breq	80006f78 <_fflush_r+0x108>
80006ece:	e2 1a 10 00 	andl	r10,0x1000,COH
80006ed2:	c0 30       	breq	80006ed8 <_fflush_r+0x68>
80006ed4:	6f 55       	ld.w	r5,r7[0x54]
80006ed6:	c0 f8       	rjmp	80006ef4 <_fflush_r+0x84>
80006ed8:	30 19       	mov	r9,1
80006eda:	6e 8b       	ld.w	r11,r7[0x20]
80006edc:	0c 9c       	mov	r12,r6
80006ede:	5d 18       	icall	r8
80006ee0:	18 95       	mov	r5,r12
80006ee2:	5b fc       	cp.w	r12,-1
80006ee4:	c0 81       	brne	80006ef4 <_fflush_r+0x84>
80006ee6:	6c 38       	ld.w	r8,r6[0xc]
80006ee8:	59 d8       	cp.w	r8,29
80006eea:	c4 70       	breq	80006f78 <_fflush_r+0x108>
80006eec:	8e 68       	ld.sh	r8,r7[0xc]
80006eee:	a7 a8       	sbr	r8,0x6
80006ef0:	ae 68       	st.h	r7[0xc],r8
80006ef2:	d8 22       	popm	r4-r7,pc
80006ef4:	8e 68       	ld.sh	r8,r7[0xc]
80006ef6:	ed b8 00 02 	bld	r8,0x2
80006efa:	c0 91       	brne	80006f0c <_fflush_r+0x9c>
80006efc:	6e 18       	ld.w	r8,r7[0x4]
80006efe:	10 15       	sub	r5,r8
80006f00:	6e d8       	ld.w	r8,r7[0x34]
80006f02:	58 08       	cp.w	r8,0
80006f04:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006f08:	eb d8 e1 15 	subne	r5,r5,r8
80006f0c:	6e b8       	ld.w	r8,r7[0x2c]
80006f0e:	0c 9c       	mov	r12,r6
80006f10:	30 09       	mov	r9,0
80006f12:	0a 9a       	mov	r10,r5
80006f14:	6e 8b       	ld.w	r11,r7[0x20]
80006f16:	5d 18       	icall	r8
80006f18:	8e 68       	ld.sh	r8,r7[0xc]
80006f1a:	0a 3c       	cp.w	r12,r5
80006f1c:	c2 61       	brne	80006f68 <_fflush_r+0xf8>
80006f1e:	ab d8       	cbr	r8,0xb
80006f20:	30 0c       	mov	r12,0
80006f22:	6e 49       	ld.w	r9,r7[0x10]
80006f24:	ae 68       	st.h	r7[0xc],r8
80006f26:	8f 1c       	st.w	r7[0x4],r12
80006f28:	8f 09       	st.w	r7[0x0],r9
80006f2a:	ed b8 00 0c 	bld	r8,0xc
80006f2e:	c2 51       	brne	80006f78 <_fflush_r+0x108>
80006f30:	ef 45 00 54 	st.w	r7[84],r5
80006f34:	d8 22       	popm	r4-r7,pc
80006f36:	6e 45       	ld.w	r5,r7[0x10]
80006f38:	58 05       	cp.w	r5,0
80006f3a:	c1 f0       	breq	80006f78 <_fflush_r+0x108>
80006f3c:	6e 04       	ld.w	r4,r7[0x0]
80006f3e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006f42:	8f 05       	st.w	r7[0x0],r5
80006f44:	f9 b8 01 00 	movne	r8,0
80006f48:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006f4c:	0a 14       	sub	r4,r5
80006f4e:	8f 28       	st.w	r7[0x8],r8
80006f50:	c1 18       	rjmp	80006f72 <_fflush_r+0x102>
80006f52:	08 99       	mov	r9,r4
80006f54:	0a 9a       	mov	r10,r5
80006f56:	6e a8       	ld.w	r8,r7[0x28]
80006f58:	6e 8b       	ld.w	r11,r7[0x20]
80006f5a:	0c 9c       	mov	r12,r6
80006f5c:	5d 18       	icall	r8
80006f5e:	18 14       	sub	r4,r12
80006f60:	58 0c       	cp.w	r12,0
80006f62:	e0 89 00 07 	brgt	80006f70 <_fflush_r+0x100>
80006f66:	8e 68       	ld.sh	r8,r7[0xc]
80006f68:	a7 a8       	sbr	r8,0x6
80006f6a:	3f fc       	mov	r12,-1
80006f6c:	ae 68       	st.h	r7[0xc],r8
80006f6e:	d8 22       	popm	r4-r7,pc
80006f70:	18 05       	add	r5,r12
80006f72:	58 04       	cp.w	r4,0
80006f74:	fe 99 ff ef 	brgt	80006f52 <_fflush_r+0xe2>
80006f78:	d8 2a       	popm	r4-r7,pc,r12=0
80006f7a:	d7 03       	nop

80006f7c <__sfp_lock_acquire>:
80006f7c:	5e fc       	retal	r12

80006f7e <__sfp_lock_release>:
80006f7e:	5e fc       	retal	r12

80006f80 <_cleanup_r>:
80006f80:	d4 01       	pushm	lr
80006f82:	fe cb e8 7a 	sub	r11,pc,-6022
80006f86:	e0 a0 02 fd 	rcall	80007580 <_fwalk>
80006f8a:	d8 02       	popm	pc

80006f8c <__sfmoreglue>:
80006f8c:	d4 21       	pushm	r4-r7,lr
80006f8e:	16 95       	mov	r5,r11
80006f90:	f6 06 10 5c 	mul	r6,r11,92
80006f94:	ec cb ff f4 	sub	r11,r6,-12
80006f98:	e0 a0 03 84 	rcall	800076a0 <_malloc_r>
80006f9c:	18 97       	mov	r7,r12
80006f9e:	c0 90       	breq	80006fb0 <__sfmoreglue+0x24>
80006fa0:	99 15       	st.w	r12[0x4],r5
80006fa2:	30 0b       	mov	r11,0
80006fa4:	2f 4c       	sub	r12,-12
80006fa6:	0c 9a       	mov	r10,r6
80006fa8:	8f 2c       	st.w	r7[0x8],r12
80006faa:	8f 0b       	st.w	r7[0x0],r11
80006fac:	fe b0 e7 33 	rcall	80003e12 <memset>
80006fb0:	0e 9c       	mov	r12,r7
80006fb2:	d8 22       	popm	r4-r7,pc

80006fb4 <__sfp>:
80006fb4:	d4 21       	pushm	r4-r7,lr
80006fb6:	fe c8 d2 be 	sub	r8,pc,-11586
80006fba:	18 96       	mov	r6,r12
80006fbc:	70 07       	ld.w	r7,r8[0x0]
80006fbe:	6e 68       	ld.w	r8,r7[0x18]
80006fc0:	58 08       	cp.w	r8,0
80006fc2:	c0 31       	brne	80006fc8 <__sfp+0x14>
80006fc4:	0e 9c       	mov	r12,r7
80006fc6:	c2 dc       	rcall	80007020 <__sinit>
80006fc8:	ee c7 ff 28 	sub	r7,r7,-216
80006fcc:	30 05       	mov	r5,0
80006fce:	6e 2c       	ld.w	r12,r7[0x8]
80006fd0:	6e 18       	ld.w	r8,r7[0x4]
80006fd2:	c0 68       	rjmp	80006fde <__sfp+0x2a>
80006fd4:	98 69       	ld.sh	r9,r12[0xc]
80006fd6:	ea 09 19 00 	cp.h	r9,r5
80006fda:	c1 10       	breq	80006ffc <__sfp+0x48>
80006fdc:	2a 4c       	sub	r12,-92
80006fde:	20 18       	sub	r8,1
80006fe0:	cf a7       	brpl	80006fd4 <__sfp+0x20>
80006fe2:	6e 08       	ld.w	r8,r7[0x0]
80006fe4:	58 08       	cp.w	r8,0
80006fe6:	c0 61       	brne	80006ff2 <__sfp+0x3e>
80006fe8:	30 4b       	mov	r11,4
80006fea:	0c 9c       	mov	r12,r6
80006fec:	cd 0f       	rcall	80006f8c <__sfmoreglue>
80006fee:	8f 0c       	st.w	r7[0x0],r12
80006ff0:	c0 30       	breq	80006ff6 <__sfp+0x42>
80006ff2:	6e 07       	ld.w	r7,r7[0x0]
80006ff4:	ce db       	rjmp	80006fce <__sfp+0x1a>
80006ff6:	30 c8       	mov	r8,12
80006ff8:	8d 38       	st.w	r6[0xc],r8
80006ffa:	d8 22       	popm	r4-r7,pc
80006ffc:	30 08       	mov	r8,0
80006ffe:	f9 48 00 4c 	st.w	r12[76],r8
80007002:	99 08       	st.w	r12[0x0],r8
80007004:	99 28       	st.w	r12[0x8],r8
80007006:	99 18       	st.w	r12[0x4],r8
80007008:	99 48       	st.w	r12[0x10],r8
8000700a:	99 58       	st.w	r12[0x14],r8
8000700c:	99 68       	st.w	r12[0x18],r8
8000700e:	99 d8       	st.w	r12[0x34],r8
80007010:	99 e8       	st.w	r12[0x38],r8
80007012:	f9 48 00 48 	st.w	r12[72],r8
80007016:	3f f8       	mov	r8,-1
80007018:	b8 78       	st.h	r12[0xe],r8
8000701a:	30 18       	mov	r8,1
8000701c:	b8 68       	st.h	r12[0xc],r8
8000701e:	d8 22       	popm	r4-r7,pc

80007020 <__sinit>:
80007020:	d4 21       	pushm	r4-r7,lr
80007022:	18 96       	mov	r6,r12
80007024:	78 67       	ld.w	r7,r12[0x18]
80007026:	58 07       	cp.w	r7,0
80007028:	c4 91       	brne	800070ba <__sinit+0x9a>
8000702a:	fe c8 00 aa 	sub	r8,pc,170
8000702e:	30 15       	mov	r5,1
80007030:	99 a8       	st.w	r12[0x28],r8
80007032:	f9 47 00 d8 	st.w	r12[216],r7
80007036:	f9 47 00 dc 	st.w	r12[220],r7
8000703a:	f9 47 00 e0 	st.w	r12[224],r7
8000703e:	99 65       	st.w	r12[0x18],r5
80007040:	cb af       	rcall	80006fb4 <__sfp>
80007042:	8d 0c       	st.w	r6[0x0],r12
80007044:	0c 9c       	mov	r12,r6
80007046:	cb 7f       	rcall	80006fb4 <__sfp>
80007048:	8d 1c       	st.w	r6[0x4],r12
8000704a:	0c 9c       	mov	r12,r6
8000704c:	cb 4f       	rcall	80006fb4 <__sfp>
8000704e:	6c 09       	ld.w	r9,r6[0x0]
80007050:	30 48       	mov	r8,4
80007052:	93 07       	st.w	r9[0x0],r7
80007054:	b2 68       	st.h	r9[0xc],r8
80007056:	93 17       	st.w	r9[0x4],r7
80007058:	93 27       	st.w	r9[0x8],r7
8000705a:	6c 18       	ld.w	r8,r6[0x4]
8000705c:	b2 77       	st.h	r9[0xe],r7
8000705e:	93 47       	st.w	r9[0x10],r7
80007060:	93 57       	st.w	r9[0x14],r7
80007062:	93 67       	st.w	r9[0x18],r7
80007064:	93 89       	st.w	r9[0x20],r9
80007066:	91 07       	st.w	r8[0x0],r7
80007068:	91 17       	st.w	r8[0x4],r7
8000706a:	91 27       	st.w	r8[0x8],r7
8000706c:	fe ce eb f4 	sub	lr,pc,-5132
80007070:	fe cb ec 24 	sub	r11,pc,-5084
80007074:	93 9e       	st.w	r9[0x24],lr
80007076:	93 ab       	st.w	r9[0x28],r11
80007078:	fe ca ec 4c 	sub	r10,pc,-5044
8000707c:	fe c4 ec 58 	sub	r4,pc,-5032
80007080:	93 ba       	st.w	r9[0x2c],r10
80007082:	93 c4       	st.w	r9[0x30],r4
80007084:	30 99       	mov	r9,9
80007086:	b0 69       	st.h	r8[0xc],r9
80007088:	b0 75       	st.h	r8[0xe],r5
8000708a:	91 c4       	st.w	r8[0x30],r4
8000708c:	91 47       	st.w	r8[0x10],r7
8000708e:	91 57       	st.w	r8[0x14],r7
80007090:	91 67       	st.w	r8[0x18],r7
80007092:	91 88       	st.w	r8[0x20],r8
80007094:	91 9e       	st.w	r8[0x24],lr
80007096:	91 ab       	st.w	r8[0x28],r11
80007098:	91 ba       	st.w	r8[0x2c],r10
8000709a:	8d 2c       	st.w	r6[0x8],r12
8000709c:	31 28       	mov	r8,18
8000709e:	99 07       	st.w	r12[0x0],r7
800070a0:	b8 68       	st.h	r12[0xc],r8
800070a2:	99 17       	st.w	r12[0x4],r7
800070a4:	99 27       	st.w	r12[0x8],r7
800070a6:	30 28       	mov	r8,2
800070a8:	b8 78       	st.h	r12[0xe],r8
800070aa:	99 c4       	st.w	r12[0x30],r4
800070ac:	99 67       	st.w	r12[0x18],r7
800070ae:	99 9e       	st.w	r12[0x24],lr
800070b0:	99 ab       	st.w	r12[0x28],r11
800070b2:	99 ba       	st.w	r12[0x2c],r10
800070b4:	99 47       	st.w	r12[0x10],r7
800070b6:	99 57       	st.w	r12[0x14],r7
800070b8:	99 8c       	st.w	r12[0x20],r12
800070ba:	d8 22       	popm	r4-r7,pc

800070bc <_malloc_trim_r>:
800070bc:	d4 21       	pushm	r4-r7,lr
800070be:	16 95       	mov	r5,r11
800070c0:	18 97       	mov	r7,r12
800070c2:	e0 a0 05 31 	rcall	80007b24 <__malloc_lock>
800070c6:	e0 64 01 24 	mov	r4,292
800070ca:	68 28       	ld.w	r8,r4[0x8]
800070cc:	70 16       	ld.w	r6,r8[0x4]
800070ce:	e0 16 ff fc 	andl	r6,0xfffc
800070d2:	ec c8 ff 91 	sub	r8,r6,-111
800070d6:	f0 05 01 05 	sub	r5,r8,r5
800070da:	e0 15 ff 80 	andl	r5,0xff80
800070de:	ea c5 00 80 	sub	r5,r5,128
800070e2:	e0 45 00 7f 	cp.w	r5,127
800070e6:	e0 8a 00 25 	brle	80007130 <_malloc_trim_r+0x74>
800070ea:	30 0b       	mov	r11,0
800070ec:	0e 9c       	mov	r12,r7
800070ee:	e0 a0 09 8b 	rcall	80008404 <_sbrk_r>
800070f2:	68 28       	ld.w	r8,r4[0x8]
800070f4:	0c 08       	add	r8,r6
800070f6:	10 3c       	cp.w	r12,r8
800070f8:	c1 c1       	brne	80007130 <_malloc_trim_r+0x74>
800070fa:	ea 0b 11 00 	rsub	r11,r5,0
800070fe:	0e 9c       	mov	r12,r7
80007100:	e0 a0 09 82 	rcall	80008404 <_sbrk_r>
80007104:	5b fc       	cp.w	r12,-1
80007106:	c1 91       	brne	80007138 <_malloc_trim_r+0x7c>
80007108:	30 0b       	mov	r11,0
8000710a:	0e 9c       	mov	r12,r7
8000710c:	e0 a0 09 7c 	rcall	80008404 <_sbrk_r>
80007110:	68 28       	ld.w	r8,r4[0x8]
80007112:	f8 08 01 09 	sub	r9,r12,r8
80007116:	58 f9       	cp.w	r9,15
80007118:	e0 8a 00 0c 	brle	80007130 <_malloc_trim_r+0x74>
8000711c:	a1 a9       	sbr	r9,0x0
8000711e:	91 19       	st.w	r8[0x4],r9
80007120:	e0 68 05 30 	mov	r8,1328
80007124:	70 09       	ld.w	r9,r8[0x0]
80007126:	e0 68 06 54 	mov	r8,1620
8000712a:	f8 09 01 09 	sub	r9,r12,r9
8000712e:	91 09       	st.w	r8[0x0],r9
80007130:	0e 9c       	mov	r12,r7
80007132:	e0 a0 04 fa 	rcall	80007b26 <__malloc_unlock>
80007136:	d8 2a       	popm	r4-r7,pc,r12=0
80007138:	68 28       	ld.w	r8,r4[0x8]
8000713a:	0a 16       	sub	r6,r5
8000713c:	a1 a6       	sbr	r6,0x0
8000713e:	91 16       	st.w	r8[0x4],r6
80007140:	e0 68 06 54 	mov	r8,1620
80007144:	70 09       	ld.w	r9,r8[0x0]
80007146:	0a 19       	sub	r9,r5
80007148:	0e 9c       	mov	r12,r7
8000714a:	91 09       	st.w	r8[0x0],r9
8000714c:	e0 a0 04 ed 	rcall	80007b26 <__malloc_unlock>
80007150:	da 2a       	popm	r4-r7,pc,r12=1
80007152:	d7 03       	nop

80007154 <_free_r>:
80007154:	d4 21       	pushm	r4-r7,lr
80007156:	16 96       	mov	r6,r11
80007158:	18 97       	mov	r7,r12
8000715a:	58 0b       	cp.w	r11,0
8000715c:	e0 80 00 c0 	breq	800072dc <_free_r+0x188>
80007160:	e0 a0 04 e2 	rcall	80007b24 <__malloc_lock>
80007164:	20 86       	sub	r6,8
80007166:	e0 6a 01 24 	mov	r10,292
8000716a:	6c 18       	ld.w	r8,r6[0x4]
8000716c:	74 2e       	ld.w	lr,r10[0x8]
8000716e:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80007172:	a1 c8       	cbr	r8,0x0
80007174:	ec 08 00 09 	add	r9,r6,r8
80007178:	72 1b       	ld.w	r11,r9[0x4]
8000717a:	e0 1b ff fc 	andl	r11,0xfffc
8000717e:	1c 39       	cp.w	r9,lr
80007180:	c1 e1       	brne	800071bc <_free_r+0x68>
80007182:	f6 08 00 08 	add	r8,r11,r8
80007186:	58 0c       	cp.w	r12,0
80007188:	c0 81       	brne	80007198 <_free_r+0x44>
8000718a:	6c 09       	ld.w	r9,r6[0x0]
8000718c:	12 16       	sub	r6,r9
8000718e:	12 08       	add	r8,r9
80007190:	6c 3b       	ld.w	r11,r6[0xc]
80007192:	6c 29       	ld.w	r9,r6[0x8]
80007194:	97 29       	st.w	r11[0x8],r9
80007196:	93 3b       	st.w	r9[0xc],r11
80007198:	10 99       	mov	r9,r8
8000719a:	95 26       	st.w	r10[0x8],r6
8000719c:	a1 a9       	sbr	r9,0x0
8000719e:	8d 19       	st.w	r6[0x4],r9
800071a0:	e0 69 05 2c 	mov	r9,1324
800071a4:	72 09       	ld.w	r9,r9[0x0]
800071a6:	12 38       	cp.w	r8,r9
800071a8:	c0 63       	brcs	800071b4 <_free_r+0x60>
800071aa:	e0 68 06 50 	mov	r8,1616
800071ae:	0e 9c       	mov	r12,r7
800071b0:	70 0b       	ld.w	r11,r8[0x0]
800071b2:	c8 5f       	rcall	800070bc <_malloc_trim_r>
800071b4:	0e 9c       	mov	r12,r7
800071b6:	e0 a0 04 b8 	rcall	80007b26 <__malloc_unlock>
800071ba:	d8 22       	popm	r4-r7,pc
800071bc:	93 1b       	st.w	r9[0x4],r11
800071be:	58 0c       	cp.w	r12,0
800071c0:	c0 30       	breq	800071c6 <_free_r+0x72>
800071c2:	30 0c       	mov	r12,0
800071c4:	c1 08       	rjmp	800071e4 <_free_r+0x90>
800071c6:	6c 0e       	ld.w	lr,r6[0x0]
800071c8:	f4 c5 ff f8 	sub	r5,r10,-8
800071cc:	1c 16       	sub	r6,lr
800071ce:	1c 08       	add	r8,lr
800071d0:	6c 2e       	ld.w	lr,r6[0x8]
800071d2:	0a 3e       	cp.w	lr,r5
800071d4:	f9 bc 00 01 	moveq	r12,1
800071d8:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800071dc:	eb fe 1a 02 	st.wne	r5[0x8],lr
800071e0:	fd f5 1a 03 	st.wne	lr[0xc],r5
800071e4:	f2 0b 00 0e 	add	lr,r9,r11
800071e8:	7c 1e       	ld.w	lr,lr[0x4]
800071ea:	ed be 00 00 	bld	lr,0x0
800071ee:	c1 40       	breq	80007216 <_free_r+0xc2>
800071f0:	16 08       	add	r8,r11
800071f2:	58 0c       	cp.w	r12,0
800071f4:	c0 d1       	brne	8000720e <_free_r+0xba>
800071f6:	e0 6e 01 24 	mov	lr,292
800071fa:	72 2b       	ld.w	r11,r9[0x8]
800071fc:	2f 8e       	sub	lr,-8
800071fe:	1c 3b       	cp.w	r11,lr
80007200:	c0 71       	brne	8000720e <_free_r+0xba>
80007202:	97 36       	st.w	r11[0xc],r6
80007204:	97 26       	st.w	r11[0x8],r6
80007206:	8d 2b       	st.w	r6[0x8],r11
80007208:	8d 3b       	st.w	r6[0xc],r11
8000720a:	30 1c       	mov	r12,1
8000720c:	c0 58       	rjmp	80007216 <_free_r+0xc2>
8000720e:	72 2b       	ld.w	r11,r9[0x8]
80007210:	72 39       	ld.w	r9,r9[0xc]
80007212:	93 2b       	st.w	r9[0x8],r11
80007214:	97 39       	st.w	r11[0xc],r9
80007216:	10 99       	mov	r9,r8
80007218:	ec 08 09 08 	st.w	r6[r8],r8
8000721c:	a1 a9       	sbr	r9,0x0
8000721e:	8d 19       	st.w	r6[0x4],r9
80007220:	58 0c       	cp.w	r12,0
80007222:	c5 a1       	brne	800072d6 <_free_r+0x182>
80007224:	e0 48 01 ff 	cp.w	r8,511
80007228:	e0 8b 00 13 	brhi	8000724e <_free_r+0xfa>
8000722c:	a3 98       	lsr	r8,0x3
8000722e:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007232:	72 2b       	ld.w	r11,r9[0x8]
80007234:	8d 39       	st.w	r6[0xc],r9
80007236:	8d 2b       	st.w	r6[0x8],r11
80007238:	97 36       	st.w	r11[0xc],r6
8000723a:	93 26       	st.w	r9[0x8],r6
8000723c:	a3 48       	asr	r8,0x2
8000723e:	74 19       	ld.w	r9,r10[0x4]
80007240:	30 1b       	mov	r11,1
80007242:	f6 08 09 48 	lsl	r8,r11,r8
80007246:	f3 e8 10 08 	or	r8,r9,r8
8000724a:	95 18       	st.w	r10[0x4],r8
8000724c:	c4 58       	rjmp	800072d6 <_free_r+0x182>
8000724e:	f0 0b 16 09 	lsr	r11,r8,0x9
80007252:	58 4b       	cp.w	r11,4
80007254:	e0 8b 00 06 	brhi	80007260 <_free_r+0x10c>
80007258:	f0 0b 16 06 	lsr	r11,r8,0x6
8000725c:	2c 8b       	sub	r11,-56
8000725e:	c2 08       	rjmp	8000729e <_free_r+0x14a>
80007260:	59 4b       	cp.w	r11,20
80007262:	e0 8b 00 04 	brhi	8000726a <_free_r+0x116>
80007266:	2a 5b       	sub	r11,-91
80007268:	c1 b8       	rjmp	8000729e <_free_r+0x14a>
8000726a:	e0 4b 00 54 	cp.w	r11,84
8000726e:	e0 8b 00 06 	brhi	8000727a <_free_r+0x126>
80007272:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007276:	29 2b       	sub	r11,-110
80007278:	c1 38       	rjmp	8000729e <_free_r+0x14a>
8000727a:	e0 4b 01 54 	cp.w	r11,340
8000727e:	e0 8b 00 06 	brhi	8000728a <_free_r+0x136>
80007282:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007286:	28 9b       	sub	r11,-119
80007288:	c0 b8       	rjmp	8000729e <_free_r+0x14a>
8000728a:	e0 4b 05 54 	cp.w	r11,1364
8000728e:	e0 88 00 05 	brls	80007298 <_free_r+0x144>
80007292:	37 eb       	mov	r11,126
80007294:	c0 58       	rjmp	8000729e <_free_r+0x14a>
80007296:	d7 03       	nop
80007298:	f0 0b 16 12 	lsr	r11,r8,0x12
8000729c:	28 4b       	sub	r11,-124
8000729e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800072a2:	78 29       	ld.w	r9,r12[0x8]
800072a4:	18 39       	cp.w	r9,r12
800072a6:	c0 e1       	brne	800072c2 <_free_r+0x16e>
800072a8:	74 18       	ld.w	r8,r10[0x4]
800072aa:	a3 4b       	asr	r11,0x2
800072ac:	30 1c       	mov	r12,1
800072ae:	f8 0b 09 4b 	lsl	r11,r12,r11
800072b2:	f1 eb 10 0b 	or	r11,r8,r11
800072b6:	12 98       	mov	r8,r9
800072b8:	95 1b       	st.w	r10[0x4],r11
800072ba:	c0 a8       	rjmp	800072ce <_free_r+0x17a>
800072bc:	72 29       	ld.w	r9,r9[0x8]
800072be:	18 39       	cp.w	r9,r12
800072c0:	c0 60       	breq	800072cc <_free_r+0x178>
800072c2:	72 1a       	ld.w	r10,r9[0x4]
800072c4:	e0 1a ff fc 	andl	r10,0xfffc
800072c8:	14 38       	cp.w	r8,r10
800072ca:	cf 93       	brcs	800072bc <_free_r+0x168>
800072cc:	72 38       	ld.w	r8,r9[0xc]
800072ce:	8d 38       	st.w	r6[0xc],r8
800072d0:	8d 29       	st.w	r6[0x8],r9
800072d2:	93 36       	st.w	r9[0xc],r6
800072d4:	91 26       	st.w	r8[0x8],r6
800072d6:	0e 9c       	mov	r12,r7
800072d8:	e0 a0 04 27 	rcall	80007b26 <__malloc_unlock>
800072dc:	d8 22       	popm	r4-r7,pc
800072de:	d7 03       	nop

800072e0 <__sfvwrite_r>:
800072e0:	d4 31       	pushm	r0-r7,lr
800072e2:	20 3d       	sub	sp,12
800072e4:	14 94       	mov	r4,r10
800072e6:	18 95       	mov	r5,r12
800072e8:	16 97       	mov	r7,r11
800072ea:	74 28       	ld.w	r8,r10[0x8]
800072ec:	58 08       	cp.w	r8,0
800072ee:	e0 80 01 45 	breq	80007578 <__sfvwrite_r+0x298>
800072f2:	96 68       	ld.sh	r8,r11[0xc]
800072f4:	ed b8 00 03 	bld	r8,0x3
800072f8:	c0 41       	brne	80007300 <__sfvwrite_r+0x20>
800072fa:	76 48       	ld.w	r8,r11[0x10]
800072fc:	58 08       	cp.w	r8,0
800072fe:	c0 c1       	brne	80007316 <__sfvwrite_r+0x36>
80007300:	0e 9b       	mov	r11,r7
80007302:	0a 9c       	mov	r12,r5
80007304:	fe b0 f6 ca 	rcall	80006098 <__swsetup_r>
80007308:	c0 70       	breq	80007316 <__sfvwrite_r+0x36>
8000730a:	8e 68       	ld.sh	r8,r7[0xc]
8000730c:	a7 a8       	sbr	r8,0x6
8000730e:	ae 68       	st.h	r7[0xc],r8
80007310:	30 98       	mov	r8,9
80007312:	8b 38       	st.w	r5[0xc],r8
80007314:	c3 09       	rjmp	80007574 <__sfvwrite_r+0x294>
80007316:	8e 63       	ld.sh	r3,r7[0xc]
80007318:	68 00       	ld.w	r0,r4[0x0]
8000731a:	06 96       	mov	r6,r3
8000731c:	e2 16 00 02 	andl	r6,0x2,COH
80007320:	c2 10       	breq	80007362 <__sfvwrite_r+0x82>
80007322:	30 03       	mov	r3,0
80007324:	e0 62 04 00 	mov	r2,1024
80007328:	06 96       	mov	r6,r3
8000732a:	c0 48       	rjmp	80007332 <__sfvwrite_r+0x52>
8000732c:	60 03       	ld.w	r3,r0[0x0]
8000732e:	60 16       	ld.w	r6,r0[0x4]
80007330:	2f 80       	sub	r0,-8
80007332:	58 06       	cp.w	r6,0
80007334:	cf c0       	breq	8000732c <__sfvwrite_r+0x4c>
80007336:	e0 46 04 00 	cp.w	r6,1024
8000733a:	ec 09 17 80 	movls	r9,r6
8000733e:	e4 09 17 b0 	movhi	r9,r2
80007342:	06 9a       	mov	r10,r3
80007344:	6e a8       	ld.w	r8,r7[0x28]
80007346:	6e 8b       	ld.w	r11,r7[0x20]
80007348:	0a 9c       	mov	r12,r5
8000734a:	5d 18       	icall	r8
8000734c:	18 16       	sub	r6,r12
8000734e:	58 0c       	cp.w	r12,0
80007350:	e0 8a 01 0f 	brle	8000756e <__sfvwrite_r+0x28e>
80007354:	68 28       	ld.w	r8,r4[0x8]
80007356:	18 18       	sub	r8,r12
80007358:	89 28       	st.w	r4[0x8],r8
8000735a:	e0 80 01 0f 	breq	80007578 <__sfvwrite_r+0x298>
8000735e:	18 03       	add	r3,r12
80007360:	ce 9b       	rjmp	80007332 <__sfvwrite_r+0x52>
80007362:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007366:	c0 70       	breq	80007374 <__sfvwrite_r+0x94>
80007368:	50 06       	stdsp	sp[0x0],r6
8000736a:	0c 93       	mov	r3,r6
8000736c:	0c 91       	mov	r1,r6
8000736e:	50 15       	stdsp	sp[0x4],r5
80007370:	08 92       	mov	r2,r4
80007372:	c9 e8       	rjmp	800074ae <__sfvwrite_r+0x1ce>
80007374:	06 96       	mov	r6,r3
80007376:	08 91       	mov	r1,r4
80007378:	c0 48       	rjmp	80007380 <__sfvwrite_r+0xa0>
8000737a:	60 03       	ld.w	r3,r0[0x0]
8000737c:	60 16       	ld.w	r6,r0[0x4]
8000737e:	2f 80       	sub	r0,-8
80007380:	58 06       	cp.w	r6,0
80007382:	cf c0       	breq	8000737a <__sfvwrite_r+0x9a>
80007384:	8e 68       	ld.sh	r8,r7[0xc]
80007386:	6e 24       	ld.w	r4,r7[0x8]
80007388:	10 99       	mov	r9,r8
8000738a:	e2 19 02 00 	andl	r9,0x200,COH
8000738e:	c5 50       	breq	80007438 <__sfvwrite_r+0x158>
80007390:	08 36       	cp.w	r6,r4
80007392:	c4 33       	brcs	80007418 <__sfvwrite_r+0x138>
80007394:	10 99       	mov	r9,r8
80007396:	e2 19 04 80 	andl	r9,0x480,COH
8000739a:	c3 f0       	breq	80007418 <__sfvwrite_r+0x138>
8000739c:	6e 4b       	ld.w	r11,r7[0x10]
8000739e:	6e 09       	ld.w	r9,r7[0x0]
800073a0:	16 19       	sub	r9,r11
800073a2:	50 09       	stdsp	sp[0x0],r9
800073a4:	6e 59       	ld.w	r9,r7[0x14]
800073a6:	10 9c       	mov	r12,r8
800073a8:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800073ac:	30 28       	mov	r8,2
800073ae:	f4 08 0c 08 	divs	r8,r10,r8
800073b2:	fa e9 00 04 	st.d	sp[4],r8
800073b6:	10 94       	mov	r4,r8
800073b8:	40 09       	lddsp	r9,sp[0x0]
800073ba:	e2 1c 04 00 	andl	r12,0x400,COH
800073be:	2f f9       	sub	r9,-1
800073c0:	0c 09       	add	r9,r6
800073c2:	12 38       	cp.w	r8,r9
800073c4:	f2 04 17 30 	movlo	r4,r9
800073c8:	58 0c       	cp.w	r12,0
800073ca:	c1 00       	breq	800073ea <__sfvwrite_r+0x10a>
800073cc:	08 9b       	mov	r11,r4
800073ce:	0a 9c       	mov	r12,r5
800073d0:	c6 8d       	rcall	800076a0 <_malloc_r>
800073d2:	18 92       	mov	r2,r12
800073d4:	c1 40       	breq	800073fc <__sfvwrite_r+0x11c>
800073d6:	40 0a       	lddsp	r10,sp[0x0]
800073d8:	6e 4b       	ld.w	r11,r7[0x10]
800073da:	fe b0 e4 78 	rcall	80003cca <memcpy>
800073de:	8e 68       	ld.sh	r8,r7[0xc]
800073e0:	e0 18 fb 7f 	andl	r8,0xfb7f
800073e4:	a7 b8       	sbr	r8,0x7
800073e6:	ae 68       	st.h	r7[0xc],r8
800073e8:	c0 d8       	rjmp	80007402 <__sfvwrite_r+0x122>
800073ea:	08 9a       	mov	r10,r4
800073ec:	0a 9c       	mov	r12,r5
800073ee:	e0 a0 06 87 	rcall	800080fc <_realloc_r>
800073f2:	18 92       	mov	r2,r12
800073f4:	c0 71       	brne	80007402 <__sfvwrite_r+0x122>
800073f6:	6e 4b       	ld.w	r11,r7[0x10]
800073f8:	0a 9c       	mov	r12,r5
800073fa:	ca de       	rcall	80007154 <_free_r>
800073fc:	30 c8       	mov	r8,12
800073fe:	8b 38       	st.w	r5[0xc],r8
80007400:	cb 78       	rjmp	8000756e <__sfvwrite_r+0x28e>
80007402:	40 0a       	lddsp	r10,sp[0x0]
80007404:	40 09       	lddsp	r9,sp[0x0]
80007406:	e8 0a 01 0a 	sub	r10,r4,r10
8000740a:	e4 09 00 08 	add	r8,r2,r9
8000740e:	8f 54       	st.w	r7[0x14],r4
80007410:	8f 2a       	st.w	r7[0x8],r10
80007412:	8f 08       	st.w	r7[0x0],r8
80007414:	8f 42       	st.w	r7[0x10],r2
80007416:	0c 94       	mov	r4,r6
80007418:	08 36       	cp.w	r6,r4
8000741a:	ec 04 17 30 	movlo	r4,r6
8000741e:	06 9b       	mov	r11,r3
80007420:	08 9a       	mov	r10,r4
80007422:	6e 0c       	ld.w	r12,r7[0x0]
80007424:	e0 a0 03 61 	rcall	80007ae6 <memmove>
80007428:	6e 08       	ld.w	r8,r7[0x0]
8000742a:	08 08       	add	r8,r4
8000742c:	8f 08       	st.w	r7[0x0],r8
8000742e:	6e 28       	ld.w	r8,r7[0x8]
80007430:	08 18       	sub	r8,r4
80007432:	0c 94       	mov	r4,r6
80007434:	8f 28       	st.w	r7[0x8],r8
80007436:	c3 08       	rjmp	80007496 <__sfvwrite_r+0x1b6>
80007438:	08 36       	cp.w	r6,r4
8000743a:	5f ba       	srhi	r10
8000743c:	6e 0c       	ld.w	r12,r7[0x0]
8000743e:	6e 48       	ld.w	r8,r7[0x10]
80007440:	10 3c       	cp.w	r12,r8
80007442:	5f b8       	srhi	r8
80007444:	f5 e8 00 08 	and	r8,r10,r8
80007448:	f2 08 18 00 	cp.b	r8,r9
8000744c:	c0 e0       	breq	80007468 <__sfvwrite_r+0x188>
8000744e:	06 9b       	mov	r11,r3
80007450:	08 9a       	mov	r10,r4
80007452:	e0 a0 03 4a 	rcall	80007ae6 <memmove>
80007456:	6e 08       	ld.w	r8,r7[0x0]
80007458:	08 08       	add	r8,r4
8000745a:	0e 9b       	mov	r11,r7
8000745c:	8f 08       	st.w	r7[0x0],r8
8000745e:	0a 9c       	mov	r12,r5
80007460:	fe b0 fd 08 	rcall	80006e70 <_fflush_r>
80007464:	c1 90       	breq	80007496 <__sfvwrite_r+0x1b6>
80007466:	c8 48       	rjmp	8000756e <__sfvwrite_r+0x28e>
80007468:	6e 59       	ld.w	r9,r7[0x14]
8000746a:	12 36       	cp.w	r6,r9
8000746c:	c0 a3       	brcs	80007480 <__sfvwrite_r+0x1a0>
8000746e:	6e a8       	ld.w	r8,r7[0x28]
80007470:	06 9a       	mov	r10,r3
80007472:	6e 8b       	ld.w	r11,r7[0x20]
80007474:	0a 9c       	mov	r12,r5
80007476:	5d 18       	icall	r8
80007478:	18 94       	mov	r4,r12
8000747a:	e0 89 00 0e 	brgt	80007496 <__sfvwrite_r+0x1b6>
8000747e:	c7 88       	rjmp	8000756e <__sfvwrite_r+0x28e>
80007480:	0c 9a       	mov	r10,r6
80007482:	06 9b       	mov	r11,r3
80007484:	e0 a0 03 31 	rcall	80007ae6 <memmove>
80007488:	6e 08       	ld.w	r8,r7[0x0]
8000748a:	0c 08       	add	r8,r6
8000748c:	0c 94       	mov	r4,r6
8000748e:	8f 08       	st.w	r7[0x0],r8
80007490:	6e 28       	ld.w	r8,r7[0x8]
80007492:	0c 18       	sub	r8,r6
80007494:	8f 28       	st.w	r7[0x8],r8
80007496:	62 28       	ld.w	r8,r1[0x8]
80007498:	08 18       	sub	r8,r4
8000749a:	83 28       	st.w	r1[0x8],r8
8000749c:	c6 e0       	breq	80007578 <__sfvwrite_r+0x298>
8000749e:	08 16       	sub	r6,r4
800074a0:	08 03       	add	r3,r4
800074a2:	c6 fb       	rjmp	80007380 <__sfvwrite_r+0xa0>
800074a4:	60 03       	ld.w	r3,r0[0x0]
800074a6:	60 11       	ld.w	r1,r0[0x4]
800074a8:	30 08       	mov	r8,0
800074aa:	2f 80       	sub	r0,-8
800074ac:	50 08       	stdsp	sp[0x0],r8
800074ae:	58 01       	cp.w	r1,0
800074b0:	cf a0       	breq	800074a4 <__sfvwrite_r+0x1c4>
800074b2:	40 0a       	lddsp	r10,sp[0x0]
800074b4:	58 0a       	cp.w	r10,0
800074b6:	c1 51       	brne	800074e0 <__sfvwrite_r+0x200>
800074b8:	e2 c6 ff ff 	sub	r6,r1,-1
800074bc:	02 9a       	mov	r10,r1
800074be:	30 ab       	mov	r11,10
800074c0:	06 9c       	mov	r12,r3
800074c2:	e0 a0 03 07 	rcall	80007ad0 <memchr>
800074c6:	f8 c8 ff ff 	sub	r8,r12,-1
800074ca:	58 0c       	cp.w	r12,0
800074cc:	f1 d3 e1 16 	subne	r6,r8,r3
800074d0:	f9 b9 01 01 	movne	r9,1
800074d4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800074d8:	f9 b8 00 01 	moveq	r8,1
800074dc:	fb f8 0a 00 	st.weq	sp[0x0],r8
800074e0:	02 36       	cp.w	r6,r1
800074e2:	ec 04 17 80 	movls	r4,r6
800074e6:	e2 04 17 b0 	movhi	r4,r1
800074ea:	6e 59       	ld.w	r9,r7[0x14]
800074ec:	6e 25       	ld.w	r5,r7[0x8]
800074ee:	f2 05 00 05 	add	r5,r9,r5
800074f2:	0a 34       	cp.w	r4,r5
800074f4:	5f 9a       	srgt	r10
800074f6:	6e 0c       	ld.w	r12,r7[0x0]
800074f8:	6e 48       	ld.w	r8,r7[0x10]
800074fa:	10 3c       	cp.w	r12,r8
800074fc:	5f b8       	srhi	r8
800074fe:	f5 e8 00 08 	and	r8,r10,r8
80007502:	30 0a       	mov	r10,0
80007504:	f4 08 18 00 	cp.b	r8,r10
80007508:	c0 e0       	breq	80007524 <__sfvwrite_r+0x244>
8000750a:	06 9b       	mov	r11,r3
8000750c:	0a 9a       	mov	r10,r5
8000750e:	e0 a0 02 ec 	rcall	80007ae6 <memmove>
80007512:	6e 08       	ld.w	r8,r7[0x0]
80007514:	0a 08       	add	r8,r5
80007516:	0e 9b       	mov	r11,r7
80007518:	8f 08       	st.w	r7[0x0],r8
8000751a:	40 1c       	lddsp	r12,sp[0x4]
8000751c:	fe b0 fc aa 	rcall	80006e70 <_fflush_r>
80007520:	c1 80       	breq	80007550 <__sfvwrite_r+0x270>
80007522:	c2 68       	rjmp	8000756e <__sfvwrite_r+0x28e>
80007524:	12 34       	cp.w	r4,r9
80007526:	c0 a5       	brlt	8000753a <__sfvwrite_r+0x25a>
80007528:	6e a8       	ld.w	r8,r7[0x28]
8000752a:	06 9a       	mov	r10,r3
8000752c:	6e 8b       	ld.w	r11,r7[0x20]
8000752e:	40 1c       	lddsp	r12,sp[0x4]
80007530:	5d 18       	icall	r8
80007532:	18 95       	mov	r5,r12
80007534:	e0 89 00 0e 	brgt	80007550 <__sfvwrite_r+0x270>
80007538:	c1 b8       	rjmp	8000756e <__sfvwrite_r+0x28e>
8000753a:	08 9a       	mov	r10,r4
8000753c:	06 9b       	mov	r11,r3
8000753e:	e0 a0 02 d4 	rcall	80007ae6 <memmove>
80007542:	6e 08       	ld.w	r8,r7[0x0]
80007544:	08 08       	add	r8,r4
80007546:	08 95       	mov	r5,r4
80007548:	8f 08       	st.w	r7[0x0],r8
8000754a:	6e 28       	ld.w	r8,r7[0x8]
8000754c:	08 18       	sub	r8,r4
8000754e:	8f 28       	st.w	r7[0x8],r8
80007550:	0a 16       	sub	r6,r5
80007552:	c0 71       	brne	80007560 <__sfvwrite_r+0x280>
80007554:	0e 9b       	mov	r11,r7
80007556:	40 1c       	lddsp	r12,sp[0x4]
80007558:	fe b0 fc 8c 	rcall	80006e70 <_fflush_r>
8000755c:	c0 91       	brne	8000756e <__sfvwrite_r+0x28e>
8000755e:	50 06       	stdsp	sp[0x0],r6
80007560:	64 28       	ld.w	r8,r2[0x8]
80007562:	0a 18       	sub	r8,r5
80007564:	85 28       	st.w	r2[0x8],r8
80007566:	c0 90       	breq	80007578 <__sfvwrite_r+0x298>
80007568:	0a 11       	sub	r1,r5
8000756a:	0a 03       	add	r3,r5
8000756c:	ca 1b       	rjmp	800074ae <__sfvwrite_r+0x1ce>
8000756e:	8e 68       	ld.sh	r8,r7[0xc]
80007570:	a7 a8       	sbr	r8,0x6
80007572:	ae 68       	st.h	r7[0xc],r8
80007574:	3f fc       	mov	r12,-1
80007576:	c0 28       	rjmp	8000757a <__sfvwrite_r+0x29a>
80007578:	30 0c       	mov	r12,0
8000757a:	2f dd       	sub	sp,-12
8000757c:	d8 32       	popm	r0-r7,pc
8000757e:	d7 03       	nop

80007580 <_fwalk>:
80007580:	d4 31       	pushm	r0-r7,lr
80007582:	30 05       	mov	r5,0
80007584:	16 91       	mov	r1,r11
80007586:	f8 c7 ff 28 	sub	r7,r12,-216
8000758a:	0a 92       	mov	r2,r5
8000758c:	fe b0 fc f8 	rcall	80006f7c <__sfp_lock_acquire>
80007590:	3f f3       	mov	r3,-1
80007592:	c1 68       	rjmp	800075be <_fwalk+0x3e>
80007594:	6e 26       	ld.w	r6,r7[0x8]
80007596:	6e 14       	ld.w	r4,r7[0x4]
80007598:	2f 46       	sub	r6,-12
8000759a:	c0 c8       	rjmp	800075b2 <_fwalk+0x32>
8000759c:	8c 08       	ld.sh	r8,r6[0x0]
8000759e:	e4 08 19 00 	cp.h	r8,r2
800075a2:	c0 70       	breq	800075b0 <_fwalk+0x30>
800075a4:	8c 18       	ld.sh	r8,r6[0x2]
800075a6:	e6 08 19 00 	cp.h	r8,r3
800075aa:	c0 30       	breq	800075b0 <_fwalk+0x30>
800075ac:	5d 11       	icall	r1
800075ae:	18 45       	or	r5,r12
800075b0:	2a 46       	sub	r6,-92
800075b2:	20 14       	sub	r4,1
800075b4:	ec cc 00 0c 	sub	r12,r6,12
800075b8:	58 04       	cp.w	r4,0
800075ba:	cf 14       	brge	8000759c <_fwalk+0x1c>
800075bc:	6e 07       	ld.w	r7,r7[0x0]
800075be:	58 07       	cp.w	r7,0
800075c0:	ce a1       	brne	80007594 <_fwalk+0x14>
800075c2:	fe b0 fc de 	rcall	80006f7e <__sfp_lock_release>
800075c6:	0a 9c       	mov	r12,r5
800075c8:	d8 32       	popm	r0-r7,pc
800075ca:	d7 03       	nop

800075cc <_localeconv_r>:
800075cc:	fe cc d8 d0 	sub	r12,pc,-10032
800075d0:	5e fc       	retal	r12
800075d2:	d7 03       	nop

800075d4 <__smakebuf_r>:
800075d4:	d4 21       	pushm	r4-r7,lr
800075d6:	20 fd       	sub	sp,60
800075d8:	96 68       	ld.sh	r8,r11[0xc]
800075da:	16 97       	mov	r7,r11
800075dc:	18 96       	mov	r6,r12
800075de:	e2 18 00 02 	andl	r8,0x2,COH
800075e2:	c3 c1       	brne	8000765a <__smakebuf_r+0x86>
800075e4:	96 7b       	ld.sh	r11,r11[0xe]
800075e6:	f0 0b 19 00 	cp.h	r11,r8
800075ea:	c0 55       	brlt	800075f4 <__smakebuf_r+0x20>
800075ec:	1a 9a       	mov	r10,sp
800075ee:	e0 a0 08 95 	rcall	80008718 <_fstat_r>
800075f2:	c0 f4       	brge	80007610 <__smakebuf_r+0x3c>
800075f4:	8e 65       	ld.sh	r5,r7[0xc]
800075f6:	0a 98       	mov	r8,r5
800075f8:	ab b8       	sbr	r8,0xb
800075fa:	e2 15 00 80 	andl	r5,0x80,COH
800075fe:	ae 68       	st.h	r7[0xc],r8
80007600:	30 04       	mov	r4,0
80007602:	e0 68 04 00 	mov	r8,1024
80007606:	f9 b5 01 40 	movne	r5,64
8000760a:	f0 05 17 00 	moveq	r5,r8
8000760e:	c1 c8       	rjmp	80007646 <__smakebuf_r+0x72>
80007610:	40 18       	lddsp	r8,sp[0x4]
80007612:	e2 18 f0 00 	andl	r8,0xf000,COH
80007616:	e0 48 20 00 	cp.w	r8,8192
8000761a:	5f 04       	sreq	r4
8000761c:	e0 48 80 00 	cp.w	r8,32768
80007620:	c0 e1       	brne	8000763c <__smakebuf_r+0x68>
80007622:	6e b9       	ld.w	r9,r7[0x2c]
80007624:	fe c8 f1 f8 	sub	r8,pc,-3592
80007628:	10 39       	cp.w	r9,r8
8000762a:	c0 91       	brne	8000763c <__smakebuf_r+0x68>
8000762c:	8e 68       	ld.sh	r8,r7[0xc]
8000762e:	e0 65 04 00 	mov	r5,1024
80007632:	ab a8       	sbr	r8,0xa
80007634:	ef 45 00 50 	st.w	r7[80],r5
80007638:	ae 68       	st.h	r7[0xc],r8
8000763a:	c0 68       	rjmp	80007646 <__smakebuf_r+0x72>
8000763c:	8e 68       	ld.sh	r8,r7[0xc]
8000763e:	e0 65 04 00 	mov	r5,1024
80007642:	ab b8       	sbr	r8,0xb
80007644:	ae 68       	st.h	r7[0xc],r8
80007646:	0a 9b       	mov	r11,r5
80007648:	0c 9c       	mov	r12,r6
8000764a:	c2 bc       	rcall	800076a0 <_malloc_r>
8000764c:	8e 68       	ld.sh	r8,r7[0xc]
8000764e:	c0 d1       	brne	80007668 <__smakebuf_r+0x94>
80007650:	ed b8 00 09 	bld	r8,0x9
80007654:	c1 b0       	breq	8000768a <__smakebuf_r+0xb6>
80007656:	a1 b8       	sbr	r8,0x1
80007658:	ae 68       	st.h	r7[0xc],r8
8000765a:	ee c8 ff b9 	sub	r8,r7,-71
8000765e:	8f 48       	st.w	r7[0x10],r8
80007660:	8f 08       	st.w	r7[0x0],r8
80007662:	30 18       	mov	r8,1
80007664:	8f 58       	st.w	r7[0x14],r8
80007666:	c1 28       	rjmp	8000768a <__smakebuf_r+0xb6>
80007668:	a7 b8       	sbr	r8,0x7
8000766a:	8f 4c       	st.w	r7[0x10],r12
8000766c:	ae 68       	st.h	r7[0xc],r8
8000766e:	8f 55       	st.w	r7[0x14],r5
80007670:	fe c8 06 f0 	sub	r8,pc,1776
80007674:	8f 0c       	st.w	r7[0x0],r12
80007676:	8d a8       	st.w	r6[0x28],r8
80007678:	58 04       	cp.w	r4,0
8000767a:	c0 80       	breq	8000768a <__smakebuf_r+0xb6>
8000767c:	8e 7c       	ld.sh	r12,r7[0xe]
8000767e:	e0 a0 07 3f 	rcall	800084fc <isatty>
80007682:	c0 40       	breq	8000768a <__smakebuf_r+0xb6>
80007684:	8e 68       	ld.sh	r8,r7[0xc]
80007686:	a1 a8       	sbr	r8,0x0
80007688:	ae 68       	st.h	r7[0xc],r8
8000768a:	2f 1d       	sub	sp,-60
8000768c:	d8 22       	popm	r4-r7,pc
8000768e:	d7 03       	nop

80007690 <malloc>:
80007690:	d4 01       	pushm	lr
80007692:	e0 68 01 20 	mov	r8,288
80007696:	18 9b       	mov	r11,r12
80007698:	70 0c       	ld.w	r12,r8[0x0]
8000769a:	c0 3c       	rcall	800076a0 <_malloc_r>
8000769c:	d8 02       	popm	pc
8000769e:	d7 03       	nop

800076a0 <_malloc_r>:
800076a0:	d4 31       	pushm	r0-r7,lr
800076a2:	f6 c8 ff f5 	sub	r8,r11,-11
800076a6:	18 95       	mov	r5,r12
800076a8:	10 97       	mov	r7,r8
800076aa:	e0 17 ff f8 	andl	r7,0xfff8
800076ae:	59 68       	cp.w	r8,22
800076b0:	f9 b7 08 10 	movls	r7,16
800076b4:	16 37       	cp.w	r7,r11
800076b6:	5f 38       	srlo	r8
800076b8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800076bc:	c0 50       	breq	800076c6 <_malloc_r+0x26>
800076be:	30 c8       	mov	r8,12
800076c0:	99 38       	st.w	r12[0xc],r8
800076c2:	e0 8f 01 f7 	bral	80007ab0 <_malloc_r+0x410>
800076c6:	e0 a0 02 2f 	rcall	80007b24 <__malloc_lock>
800076ca:	e0 47 01 f7 	cp.w	r7,503
800076ce:	e0 8b 00 1d 	brhi	80007708 <_malloc_r+0x68>
800076d2:	ee 03 16 03 	lsr	r3,r7,0x3
800076d6:	e0 68 01 24 	mov	r8,292
800076da:	f0 03 00 38 	add	r8,r8,r3<<0x3
800076de:	70 36       	ld.w	r6,r8[0xc]
800076e0:	10 36       	cp.w	r6,r8
800076e2:	c0 61       	brne	800076ee <_malloc_r+0x4e>
800076e4:	ec c8 ff f8 	sub	r8,r6,-8
800076e8:	70 36       	ld.w	r6,r8[0xc]
800076ea:	10 36       	cp.w	r6,r8
800076ec:	c0 c0       	breq	80007704 <_malloc_r+0x64>
800076ee:	6c 18       	ld.w	r8,r6[0x4]
800076f0:	e0 18 ff fc 	andl	r8,0xfffc
800076f4:	6c 3a       	ld.w	r10,r6[0xc]
800076f6:	ec 08 00 09 	add	r9,r6,r8
800076fa:	0a 9c       	mov	r12,r5
800076fc:	6c 28       	ld.w	r8,r6[0x8]
800076fe:	95 28       	st.w	r10[0x8],r8
80007700:	91 3a       	st.w	r8[0xc],r10
80007702:	c4 78       	rjmp	80007790 <_malloc_r+0xf0>
80007704:	2f e3       	sub	r3,-2
80007706:	c4 d8       	rjmp	800077a0 <_malloc_r+0x100>
80007708:	ee 03 16 09 	lsr	r3,r7,0x9
8000770c:	c0 41       	brne	80007714 <_malloc_r+0x74>
8000770e:	ee 03 16 03 	lsr	r3,r7,0x3
80007712:	c2 68       	rjmp	8000775e <_malloc_r+0xbe>
80007714:	58 43       	cp.w	r3,4
80007716:	e0 8b 00 06 	brhi	80007722 <_malloc_r+0x82>
8000771a:	ee 03 16 06 	lsr	r3,r7,0x6
8000771e:	2c 83       	sub	r3,-56
80007720:	c1 f8       	rjmp	8000775e <_malloc_r+0xbe>
80007722:	59 43       	cp.w	r3,20
80007724:	e0 8b 00 04 	brhi	8000772c <_malloc_r+0x8c>
80007728:	2a 53       	sub	r3,-91
8000772a:	c1 a8       	rjmp	8000775e <_malloc_r+0xbe>
8000772c:	e0 43 00 54 	cp.w	r3,84
80007730:	e0 8b 00 06 	brhi	8000773c <_malloc_r+0x9c>
80007734:	ee 03 16 0c 	lsr	r3,r7,0xc
80007738:	29 23       	sub	r3,-110
8000773a:	c1 28       	rjmp	8000775e <_malloc_r+0xbe>
8000773c:	e0 43 01 54 	cp.w	r3,340
80007740:	e0 8b 00 06 	brhi	8000774c <_malloc_r+0xac>
80007744:	ee 03 16 0f 	lsr	r3,r7,0xf
80007748:	28 93       	sub	r3,-119
8000774a:	c0 a8       	rjmp	8000775e <_malloc_r+0xbe>
8000774c:	e0 43 05 54 	cp.w	r3,1364
80007750:	e0 88 00 04 	brls	80007758 <_malloc_r+0xb8>
80007754:	37 e3       	mov	r3,126
80007756:	c0 48       	rjmp	8000775e <_malloc_r+0xbe>
80007758:	ee 03 16 12 	lsr	r3,r7,0x12
8000775c:	28 43       	sub	r3,-124
8000775e:	e0 6a 01 24 	mov	r10,292
80007762:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007766:	74 36       	ld.w	r6,r10[0xc]
80007768:	c1 98       	rjmp	8000779a <_malloc_r+0xfa>
8000776a:	6c 19       	ld.w	r9,r6[0x4]
8000776c:	e0 19 ff fc 	andl	r9,0xfffc
80007770:	f2 07 01 0b 	sub	r11,r9,r7
80007774:	58 fb       	cp.w	r11,15
80007776:	e0 8a 00 04 	brle	8000777e <_malloc_r+0xde>
8000777a:	20 13       	sub	r3,1
8000777c:	c1 18       	rjmp	8000779e <_malloc_r+0xfe>
8000777e:	6c 38       	ld.w	r8,r6[0xc]
80007780:	58 0b       	cp.w	r11,0
80007782:	c0 b5       	brlt	80007798 <_malloc_r+0xf8>
80007784:	6c 2a       	ld.w	r10,r6[0x8]
80007786:	ec 09 00 09 	add	r9,r6,r9
8000778a:	0a 9c       	mov	r12,r5
8000778c:	91 2a       	st.w	r8[0x8],r10
8000778e:	95 38       	st.w	r10[0xc],r8
80007790:	72 18       	ld.w	r8,r9[0x4]
80007792:	a1 a8       	sbr	r8,0x0
80007794:	93 18       	st.w	r9[0x4],r8
80007796:	cb c8       	rjmp	8000790e <_malloc_r+0x26e>
80007798:	10 96       	mov	r6,r8
8000779a:	14 36       	cp.w	r6,r10
8000779c:	ce 71       	brne	8000776a <_malloc_r+0xca>
8000779e:	2f f3       	sub	r3,-1
800077a0:	e0 6a 01 24 	mov	r10,292
800077a4:	f4 cc ff f8 	sub	r12,r10,-8
800077a8:	78 26       	ld.w	r6,r12[0x8]
800077aa:	18 36       	cp.w	r6,r12
800077ac:	c6 c0       	breq	80007884 <_malloc_r+0x1e4>
800077ae:	6c 19       	ld.w	r9,r6[0x4]
800077b0:	e0 19 ff fc 	andl	r9,0xfffc
800077b4:	f2 07 01 08 	sub	r8,r9,r7
800077b8:	58 f8       	cp.w	r8,15
800077ba:	e0 89 00 8f 	brgt	800078d8 <_malloc_r+0x238>
800077be:	99 3c       	st.w	r12[0xc],r12
800077c0:	99 2c       	st.w	r12[0x8],r12
800077c2:	58 08       	cp.w	r8,0
800077c4:	c0 55       	brlt	800077ce <_malloc_r+0x12e>
800077c6:	ec 09 00 09 	add	r9,r6,r9
800077ca:	0a 9c       	mov	r12,r5
800077cc:	ce 2b       	rjmp	80007790 <_malloc_r+0xf0>
800077ce:	e0 49 01 ff 	cp.w	r9,511
800077d2:	e0 8b 00 13 	brhi	800077f8 <_malloc_r+0x158>
800077d6:	a3 99       	lsr	r9,0x3
800077d8:	f4 09 00 38 	add	r8,r10,r9<<0x3
800077dc:	70 2b       	ld.w	r11,r8[0x8]
800077de:	8d 38       	st.w	r6[0xc],r8
800077e0:	8d 2b       	st.w	r6[0x8],r11
800077e2:	97 36       	st.w	r11[0xc],r6
800077e4:	91 26       	st.w	r8[0x8],r6
800077e6:	a3 49       	asr	r9,0x2
800077e8:	74 18       	ld.w	r8,r10[0x4]
800077ea:	30 1b       	mov	r11,1
800077ec:	f6 09 09 49 	lsl	r9,r11,r9
800077f0:	f1 e9 10 09 	or	r9,r8,r9
800077f4:	95 19       	st.w	r10[0x4],r9
800077f6:	c4 78       	rjmp	80007884 <_malloc_r+0x1e4>
800077f8:	f2 0a 16 09 	lsr	r10,r9,0x9
800077fc:	58 4a       	cp.w	r10,4
800077fe:	e0 8b 00 07 	brhi	8000780c <_malloc_r+0x16c>
80007802:	f2 0a 16 06 	lsr	r10,r9,0x6
80007806:	2c 8a       	sub	r10,-56
80007808:	c2 08       	rjmp	80007848 <_malloc_r+0x1a8>
8000780a:	d7 03       	nop
8000780c:	59 4a       	cp.w	r10,20
8000780e:	e0 8b 00 04 	brhi	80007816 <_malloc_r+0x176>
80007812:	2a 5a       	sub	r10,-91
80007814:	c1 a8       	rjmp	80007848 <_malloc_r+0x1a8>
80007816:	e0 4a 00 54 	cp.w	r10,84
8000781a:	e0 8b 00 06 	brhi	80007826 <_malloc_r+0x186>
8000781e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007822:	29 2a       	sub	r10,-110
80007824:	c1 28       	rjmp	80007848 <_malloc_r+0x1a8>
80007826:	e0 4a 01 54 	cp.w	r10,340
8000782a:	e0 8b 00 06 	brhi	80007836 <_malloc_r+0x196>
8000782e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007832:	28 9a       	sub	r10,-119
80007834:	c0 a8       	rjmp	80007848 <_malloc_r+0x1a8>
80007836:	e0 4a 05 54 	cp.w	r10,1364
8000783a:	e0 88 00 04 	brls	80007842 <_malloc_r+0x1a2>
8000783e:	37 ea       	mov	r10,126
80007840:	c0 48       	rjmp	80007848 <_malloc_r+0x1a8>
80007842:	f2 0a 16 12 	lsr	r10,r9,0x12
80007846:	28 4a       	sub	r10,-124
80007848:	e0 6b 01 24 	mov	r11,292
8000784c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007850:	68 28       	ld.w	r8,r4[0x8]
80007852:	08 38       	cp.w	r8,r4
80007854:	c0 e1       	brne	80007870 <_malloc_r+0x1d0>
80007856:	76 19       	ld.w	r9,r11[0x4]
80007858:	a3 4a       	asr	r10,0x2
8000785a:	30 1e       	mov	lr,1
8000785c:	fc 0a 09 4a 	lsl	r10,lr,r10
80007860:	f3 ea 10 0a 	or	r10,r9,r10
80007864:	10 99       	mov	r9,r8
80007866:	97 1a       	st.w	r11[0x4],r10
80007868:	c0 a8       	rjmp	8000787c <_malloc_r+0x1dc>
8000786a:	70 28       	ld.w	r8,r8[0x8]
8000786c:	08 38       	cp.w	r8,r4
8000786e:	c0 60       	breq	8000787a <_malloc_r+0x1da>
80007870:	70 1a       	ld.w	r10,r8[0x4]
80007872:	e0 1a ff fc 	andl	r10,0xfffc
80007876:	14 39       	cp.w	r9,r10
80007878:	cf 93       	brcs	8000786a <_malloc_r+0x1ca>
8000787a:	70 39       	ld.w	r9,r8[0xc]
8000787c:	8d 39       	st.w	r6[0xc],r9
8000787e:	8d 28       	st.w	r6[0x8],r8
80007880:	91 36       	st.w	r8[0xc],r6
80007882:	93 26       	st.w	r9[0x8],r6
80007884:	e6 08 14 02 	asr	r8,r3,0x2
80007888:	30 1b       	mov	r11,1
8000788a:	e0 64 01 24 	mov	r4,292
8000788e:	f6 08 09 4b 	lsl	r11,r11,r8
80007892:	68 18       	ld.w	r8,r4[0x4]
80007894:	10 3b       	cp.w	r11,r8
80007896:	e0 8b 00 69 	brhi	80007968 <_malloc_r+0x2c8>
8000789a:	f7 e8 00 09 	and	r9,r11,r8
8000789e:	c0 b1       	brne	800078b4 <_malloc_r+0x214>
800078a0:	e0 13 ff fc 	andl	r3,0xfffc
800078a4:	a1 7b       	lsl	r11,0x1
800078a6:	2f c3       	sub	r3,-4
800078a8:	c0 38       	rjmp	800078ae <_malloc_r+0x20e>
800078aa:	2f c3       	sub	r3,-4
800078ac:	a1 7b       	lsl	r11,0x1
800078ae:	f7 e8 00 09 	and	r9,r11,r8
800078b2:	cf c0       	breq	800078aa <_malloc_r+0x20a>
800078b4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800078b8:	06 92       	mov	r2,r3
800078ba:	1c 91       	mov	r1,lr
800078bc:	62 36       	ld.w	r6,r1[0xc]
800078be:	c2 d8       	rjmp	80007918 <_malloc_r+0x278>
800078c0:	6c 1a       	ld.w	r10,r6[0x4]
800078c2:	e0 1a ff fc 	andl	r10,0xfffc
800078c6:	f4 07 01 08 	sub	r8,r10,r7
800078ca:	58 f8       	cp.w	r8,15
800078cc:	e0 8a 00 15 	brle	800078f6 <_malloc_r+0x256>
800078d0:	6c 3a       	ld.w	r10,r6[0xc]
800078d2:	6c 29       	ld.w	r9,r6[0x8]
800078d4:	95 29       	st.w	r10[0x8],r9
800078d6:	93 3a       	st.w	r9[0xc],r10
800078d8:	0e 99       	mov	r9,r7
800078da:	ec 07 00 07 	add	r7,r6,r7
800078de:	a1 a9       	sbr	r9,0x0
800078e0:	99 37       	st.w	r12[0xc],r7
800078e2:	99 27       	st.w	r12[0x8],r7
800078e4:	8d 19       	st.w	r6[0x4],r9
800078e6:	ee 08 09 08 	st.w	r7[r8],r8
800078ea:	8f 2c       	st.w	r7[0x8],r12
800078ec:	8f 3c       	st.w	r7[0xc],r12
800078ee:	a1 a8       	sbr	r8,0x0
800078f0:	0a 9c       	mov	r12,r5
800078f2:	8f 18       	st.w	r7[0x4],r8
800078f4:	c0 d8       	rjmp	8000790e <_malloc_r+0x26e>
800078f6:	6c 39       	ld.w	r9,r6[0xc]
800078f8:	58 08       	cp.w	r8,0
800078fa:	c0 e5       	brlt	80007916 <_malloc_r+0x276>
800078fc:	ec 0a 00 0a 	add	r10,r6,r10
80007900:	74 18       	ld.w	r8,r10[0x4]
80007902:	a1 a8       	sbr	r8,0x0
80007904:	0a 9c       	mov	r12,r5
80007906:	95 18       	st.w	r10[0x4],r8
80007908:	6c 28       	ld.w	r8,r6[0x8]
8000790a:	93 28       	st.w	r9[0x8],r8
8000790c:	91 39       	st.w	r8[0xc],r9
8000790e:	c0 cd       	rcall	80007b26 <__malloc_unlock>
80007910:	ec cc ff f8 	sub	r12,r6,-8
80007914:	d8 32       	popm	r0-r7,pc
80007916:	12 96       	mov	r6,r9
80007918:	02 36       	cp.w	r6,r1
8000791a:	cd 31       	brne	800078c0 <_malloc_r+0x220>
8000791c:	2f f2       	sub	r2,-1
8000791e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007922:	c0 30       	breq	80007928 <_malloc_r+0x288>
80007924:	2f 81       	sub	r1,-8
80007926:	cc bb       	rjmp	800078bc <_malloc_r+0x21c>
80007928:	1c 98       	mov	r8,lr
8000792a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000792e:	c0 81       	brne	8000793e <_malloc_r+0x29e>
80007930:	68 19       	ld.w	r9,r4[0x4]
80007932:	f6 08 11 ff 	rsub	r8,r11,-1
80007936:	f3 e8 00 08 	and	r8,r9,r8
8000793a:	89 18       	st.w	r4[0x4],r8
8000793c:	c0 78       	rjmp	8000794a <_malloc_r+0x2aa>
8000793e:	f0 c9 00 08 	sub	r9,r8,8
80007942:	20 13       	sub	r3,1
80007944:	70 08       	ld.w	r8,r8[0x0]
80007946:	12 38       	cp.w	r8,r9
80007948:	cf 10       	breq	8000792a <_malloc_r+0x28a>
8000794a:	a1 7b       	lsl	r11,0x1
8000794c:	68 18       	ld.w	r8,r4[0x4]
8000794e:	10 3b       	cp.w	r11,r8
80007950:	e0 8b 00 0c 	brhi	80007968 <_malloc_r+0x2c8>
80007954:	58 0b       	cp.w	r11,0
80007956:	c0 90       	breq	80007968 <_malloc_r+0x2c8>
80007958:	04 93       	mov	r3,r2
8000795a:	c0 38       	rjmp	80007960 <_malloc_r+0x2c0>
8000795c:	2f c3       	sub	r3,-4
8000795e:	a1 7b       	lsl	r11,0x1
80007960:	f7 e8 00 09 	and	r9,r11,r8
80007964:	ca 81       	brne	800078b4 <_malloc_r+0x214>
80007966:	cf bb       	rjmp	8000795c <_malloc_r+0x2bc>
80007968:	68 23       	ld.w	r3,r4[0x8]
8000796a:	66 12       	ld.w	r2,r3[0x4]
8000796c:	e0 12 ff fc 	andl	r2,0xfffc
80007970:	0e 32       	cp.w	r2,r7
80007972:	5f 39       	srlo	r9
80007974:	e4 07 01 08 	sub	r8,r2,r7
80007978:	58 f8       	cp.w	r8,15
8000797a:	5f aa       	srle	r10
8000797c:	f5 e9 10 09 	or	r9,r10,r9
80007980:	e0 80 00 9a 	breq	80007ab4 <_malloc_r+0x414>
80007984:	e0 68 06 50 	mov	r8,1616
80007988:	70 01       	ld.w	r1,r8[0x0]
8000798a:	e0 68 05 30 	mov	r8,1328
8000798e:	2f 01       	sub	r1,-16
80007990:	70 08       	ld.w	r8,r8[0x0]
80007992:	0e 01       	add	r1,r7
80007994:	5b f8       	cp.w	r8,-1
80007996:	c0 40       	breq	8000799e <_malloc_r+0x2fe>
80007998:	28 11       	sub	r1,-127
8000799a:	e0 11 ff 80 	andl	r1,0xff80
8000799e:	02 9b       	mov	r11,r1
800079a0:	0a 9c       	mov	r12,r5
800079a2:	e0 a0 05 31 	rcall	80008404 <_sbrk_r>
800079a6:	18 96       	mov	r6,r12
800079a8:	5b fc       	cp.w	r12,-1
800079aa:	c7 50       	breq	80007a94 <_malloc_r+0x3f4>
800079ac:	e6 02 00 08 	add	r8,r3,r2
800079b0:	10 3c       	cp.w	r12,r8
800079b2:	c0 32       	brcc	800079b8 <_malloc_r+0x318>
800079b4:	08 33       	cp.w	r3,r4
800079b6:	c6 f1       	brne	80007a94 <_malloc_r+0x3f4>
800079b8:	e0 6a 06 54 	mov	r10,1620
800079bc:	74 09       	ld.w	r9,r10[0x0]
800079be:	e2 09 00 09 	add	r9,r1,r9
800079c2:	95 09       	st.w	r10[0x0],r9
800079c4:	10 36       	cp.w	r6,r8
800079c6:	c0 a1       	brne	800079da <_malloc_r+0x33a>
800079c8:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800079cc:	c0 71       	brne	800079da <_malloc_r+0x33a>
800079ce:	e2 02 00 02 	add	r2,r1,r2
800079d2:	68 28       	ld.w	r8,r4[0x8]
800079d4:	a1 a2       	sbr	r2,0x0
800079d6:	91 12       	st.w	r8[0x4],r2
800079d8:	c4 f8       	rjmp	80007a76 <_malloc_r+0x3d6>
800079da:	e0 6a 05 30 	mov	r10,1328
800079de:	74 0b       	ld.w	r11,r10[0x0]
800079e0:	5b fb       	cp.w	r11,-1
800079e2:	c0 31       	brne	800079e8 <_malloc_r+0x348>
800079e4:	95 06       	st.w	r10[0x0],r6
800079e6:	c0 78       	rjmp	800079f4 <_malloc_r+0x354>
800079e8:	ec 09 00 09 	add	r9,r6,r9
800079ec:	e0 6a 06 54 	mov	r10,1620
800079f0:	10 19       	sub	r9,r8
800079f2:	95 09       	st.w	r10[0x0],r9
800079f4:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800079f8:	f0 09 11 08 	rsub	r9,r8,8
800079fc:	58 08       	cp.w	r8,0
800079fe:	f2 08 17 10 	movne	r8,r9
80007a02:	ed d8 e1 06 	addne	r6,r6,r8
80007a06:	28 08       	sub	r8,-128
80007a08:	ec 01 00 01 	add	r1,r6,r1
80007a0c:	0a 9c       	mov	r12,r5
80007a0e:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007a12:	f0 01 01 01 	sub	r1,r8,r1
80007a16:	02 9b       	mov	r11,r1
80007a18:	e0 a0 04 f6 	rcall	80008404 <_sbrk_r>
80007a1c:	e0 68 06 54 	mov	r8,1620
80007a20:	5b fc       	cp.w	r12,-1
80007a22:	ec 0c 17 00 	moveq	r12,r6
80007a26:	f9 b1 00 00 	moveq	r1,0
80007a2a:	70 09       	ld.w	r9,r8[0x0]
80007a2c:	0c 1c       	sub	r12,r6
80007a2e:	89 26       	st.w	r4[0x8],r6
80007a30:	02 0c       	add	r12,r1
80007a32:	12 01       	add	r1,r9
80007a34:	a1 ac       	sbr	r12,0x0
80007a36:	91 01       	st.w	r8[0x0],r1
80007a38:	8d 1c       	st.w	r6[0x4],r12
80007a3a:	08 33       	cp.w	r3,r4
80007a3c:	c1 d0       	breq	80007a76 <_malloc_r+0x3d6>
80007a3e:	58 f2       	cp.w	r2,15
80007a40:	e0 8b 00 05 	brhi	80007a4a <_malloc_r+0x3aa>
80007a44:	30 18       	mov	r8,1
80007a46:	8d 18       	st.w	r6[0x4],r8
80007a48:	c2 68       	rjmp	80007a94 <_malloc_r+0x3f4>
80007a4a:	30 59       	mov	r9,5
80007a4c:	20 c2       	sub	r2,12
80007a4e:	e0 12 ff f8 	andl	r2,0xfff8
80007a52:	e6 02 00 08 	add	r8,r3,r2
80007a56:	91 29       	st.w	r8[0x8],r9
80007a58:	91 19       	st.w	r8[0x4],r9
80007a5a:	66 18       	ld.w	r8,r3[0x4]
80007a5c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a60:	e5 e8 10 08 	or	r8,r2,r8
80007a64:	87 18       	st.w	r3[0x4],r8
80007a66:	58 f2       	cp.w	r2,15
80007a68:	e0 88 00 07 	brls	80007a76 <_malloc_r+0x3d6>
80007a6c:	e6 cb ff f8 	sub	r11,r3,-8
80007a70:	0a 9c       	mov	r12,r5
80007a72:	fe b0 fb 71 	rcall	80007154 <_free_r>
80007a76:	e0 69 06 4c 	mov	r9,1612
80007a7a:	72 0a       	ld.w	r10,r9[0x0]
80007a7c:	e0 68 06 54 	mov	r8,1620
80007a80:	70 08       	ld.w	r8,r8[0x0]
80007a82:	14 38       	cp.w	r8,r10
80007a84:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007a88:	e0 69 06 48 	mov	r9,1608
80007a8c:	72 0a       	ld.w	r10,r9[0x0]
80007a8e:	14 38       	cp.w	r8,r10
80007a90:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007a94:	68 28       	ld.w	r8,r4[0x8]
80007a96:	70 18       	ld.w	r8,r8[0x4]
80007a98:	e0 18 ff fc 	andl	r8,0xfffc
80007a9c:	0e 38       	cp.w	r8,r7
80007a9e:	5f 39       	srlo	r9
80007aa0:	0e 18       	sub	r8,r7
80007aa2:	58 f8       	cp.w	r8,15
80007aa4:	5f aa       	srle	r10
80007aa6:	f5 e9 10 09 	or	r9,r10,r9
80007aaa:	c0 50       	breq	80007ab4 <_malloc_r+0x414>
80007aac:	0a 9c       	mov	r12,r5
80007aae:	c3 cc       	rcall	80007b26 <__malloc_unlock>
80007ab0:	d8 3a       	popm	r0-r7,pc,r12=0
80007ab2:	d7 03       	nop
80007ab4:	68 26       	ld.w	r6,r4[0x8]
80007ab6:	a1 a8       	sbr	r8,0x0
80007ab8:	0e 99       	mov	r9,r7
80007aba:	a1 a9       	sbr	r9,0x0
80007abc:	8d 19       	st.w	r6[0x4],r9
80007abe:	ec 07 00 07 	add	r7,r6,r7
80007ac2:	0a 9c       	mov	r12,r5
80007ac4:	89 27       	st.w	r4[0x8],r7
80007ac6:	8f 18       	st.w	r7[0x4],r8
80007ac8:	c2 fc       	rcall	80007b26 <__malloc_unlock>
80007aca:	ec cc ff f8 	sub	r12,r6,-8
80007ace:	d8 32       	popm	r0-r7,pc

80007ad0 <memchr>:
80007ad0:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007ad4:	c0 68       	rjmp	80007ae0 <memchr+0x10>
80007ad6:	20 1a       	sub	r10,1
80007ad8:	19 88       	ld.ub	r8,r12[0x0]
80007ada:	16 38       	cp.w	r8,r11
80007adc:	5e 0c       	reteq	r12
80007ade:	2f fc       	sub	r12,-1
80007ae0:	58 0a       	cp.w	r10,0
80007ae2:	cf a1       	brne	80007ad6 <memchr+0x6>
80007ae4:	5e fa       	retal	r10

80007ae6 <memmove>:
80007ae6:	d4 01       	pushm	lr
80007ae8:	18 3b       	cp.w	r11,r12
80007aea:	c1 92       	brcc	80007b1c <memmove+0x36>
80007aec:	f6 0a 00 09 	add	r9,r11,r10
80007af0:	12 3c       	cp.w	r12,r9
80007af2:	c1 52       	brcc	80007b1c <memmove+0x36>
80007af4:	f8 0a 00 0b 	add	r11,r12,r10
80007af8:	30 08       	mov	r8,0
80007afa:	c0 68       	rjmp	80007b06 <memmove+0x20>
80007afc:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007b00:	20 1a       	sub	r10,1
80007b02:	f6 08 0b 0e 	st.b	r11[r8],lr
80007b06:	20 18       	sub	r8,1
80007b08:	58 0a       	cp.w	r10,0
80007b0a:	cf 91       	brne	80007afc <memmove+0x16>
80007b0c:	d8 02       	popm	pc
80007b0e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007b12:	20 1a       	sub	r10,1
80007b14:	f8 08 0b 09 	st.b	r12[r8],r9
80007b18:	2f f8       	sub	r8,-1
80007b1a:	c0 28       	rjmp	80007b1e <memmove+0x38>
80007b1c:	30 08       	mov	r8,0
80007b1e:	58 0a       	cp.w	r10,0
80007b20:	cf 71       	brne	80007b0e <memmove+0x28>
80007b22:	d8 02       	popm	pc

80007b24 <__malloc_lock>:
80007b24:	5e fc       	retal	r12

80007b26 <__malloc_unlock>:
80007b26:	5e fc       	retal	r12

80007b28 <__hi0bits>:
80007b28:	18 98       	mov	r8,r12
80007b2a:	e0 1c 00 00 	andl	r12,0x0
80007b2e:	f0 09 15 10 	lsl	r9,r8,0x10
80007b32:	58 0c       	cp.w	r12,0
80007b34:	f2 08 17 00 	moveq	r8,r9
80007b38:	f9 bc 00 10 	moveq	r12,16
80007b3c:	f9 bc 01 00 	movne	r12,0
80007b40:	10 9a       	mov	r10,r8
80007b42:	f0 09 15 08 	lsl	r9,r8,0x8
80007b46:	e6 1a ff 00 	andh	r10,0xff00,COH
80007b4a:	f7 bc 00 f8 	subeq	r12,-8
80007b4e:	f2 08 17 00 	moveq	r8,r9
80007b52:	10 9a       	mov	r10,r8
80007b54:	f0 09 15 04 	lsl	r9,r8,0x4
80007b58:	e6 1a f0 00 	andh	r10,0xf000,COH
80007b5c:	f7 bc 00 fc 	subeq	r12,-4
80007b60:	f2 08 17 00 	moveq	r8,r9
80007b64:	10 9a       	mov	r10,r8
80007b66:	f0 09 15 02 	lsl	r9,r8,0x2
80007b6a:	e6 1a c0 00 	andh	r10,0xc000,COH
80007b6e:	f7 bc 00 fe 	subeq	r12,-2
80007b72:	f2 08 17 00 	moveq	r8,r9
80007b76:	58 08       	cp.w	r8,0
80007b78:	5e 5c       	retlt	r12
80007b7a:	ed b8 00 1e 	bld	r8,0x1e
80007b7e:	f9 bc 01 20 	movne	r12,32
80007b82:	f7 bc 00 ff 	subeq	r12,-1
80007b86:	5e fc       	retal	r12

80007b88 <__lo0bits>:
80007b88:	18 99       	mov	r9,r12
80007b8a:	78 08       	ld.w	r8,r12[0x0]
80007b8c:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007b90:	c1 50       	breq	80007bba <__lo0bits+0x32>
80007b92:	ed b8 00 00 	bld	r8,0x0
80007b96:	c0 21       	brne	80007b9a <__lo0bits+0x12>
80007b98:	5e fd       	retal	0
80007b9a:	10 9b       	mov	r11,r8
80007b9c:	f0 0a 16 01 	lsr	r10,r8,0x1
80007ba0:	e2 1b 00 02 	andl	r11,0x2,COH
80007ba4:	a3 88       	lsr	r8,0x2
80007ba6:	58 0b       	cp.w	r11,0
80007ba8:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007bac:	f9 bc 01 01 	movne	r12,1
80007bb0:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007bb4:	f9 bc 00 02 	moveq	r12,2
80007bb8:	5e fc       	retal	r12
80007bba:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007bbe:	f0 0b 16 10 	lsr	r11,r8,0x10
80007bc2:	58 0a       	cp.w	r10,0
80007bc4:	f6 08 17 00 	moveq	r8,r11
80007bc8:	f9 bc 00 10 	moveq	r12,16
80007bcc:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007bd0:	f0 0a 16 08 	lsr	r10,r8,0x8
80007bd4:	58 0b       	cp.w	r11,0
80007bd6:	f7 bc 00 f8 	subeq	r12,-8
80007bda:	f4 08 17 00 	moveq	r8,r10
80007bde:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007be2:	f0 0a 16 04 	lsr	r10,r8,0x4
80007be6:	58 0b       	cp.w	r11,0
80007be8:	f7 bc 00 fc 	subeq	r12,-4
80007bec:	f4 08 17 00 	moveq	r8,r10
80007bf0:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007bf4:	f0 0a 16 02 	lsr	r10,r8,0x2
80007bf8:	58 0b       	cp.w	r11,0
80007bfa:	f7 bc 00 fe 	subeq	r12,-2
80007bfe:	f4 08 17 00 	moveq	r8,r10
80007c02:	ed b8 00 00 	bld	r8,0x0
80007c06:	c0 60       	breq	80007c12 <__lo0bits+0x8a>
80007c08:	a1 98       	lsr	r8,0x1
80007c0a:	c0 31       	brne	80007c10 <__lo0bits+0x88>
80007c0c:	32 0c       	mov	r12,32
80007c0e:	5e fc       	retal	r12
80007c10:	2f fc       	sub	r12,-1
80007c12:	93 08       	st.w	r9[0x0],r8
80007c14:	5e fc       	retal	r12

80007c16 <__mcmp>:
80007c16:	d4 01       	pushm	lr
80007c18:	18 98       	mov	r8,r12
80007c1a:	76 49       	ld.w	r9,r11[0x10]
80007c1c:	78 4c       	ld.w	r12,r12[0x10]
80007c1e:	12 1c       	sub	r12,r9
80007c20:	c1 31       	brne	80007c46 <__mcmp+0x30>
80007c22:	2f b9       	sub	r9,-5
80007c24:	a3 69       	lsl	r9,0x2
80007c26:	12 0b       	add	r11,r9
80007c28:	f0 09 00 09 	add	r9,r8,r9
80007c2c:	2e c8       	sub	r8,-20
80007c2e:	13 4e       	ld.w	lr,--r9
80007c30:	17 4a       	ld.w	r10,--r11
80007c32:	14 3e       	cp.w	lr,r10
80007c34:	c0 60       	breq	80007c40 <__mcmp+0x2a>
80007c36:	f9 bc 03 ff 	movlo	r12,-1
80007c3a:	f9 bc 02 01 	movhs	r12,1
80007c3e:	d8 02       	popm	pc
80007c40:	10 39       	cp.w	r9,r8
80007c42:	fe 9b ff f6 	brhi	80007c2e <__mcmp+0x18>
80007c46:	d8 02       	popm	pc

80007c48 <_Bfree>:
80007c48:	d4 21       	pushm	r4-r7,lr
80007c4a:	18 97       	mov	r7,r12
80007c4c:	16 95       	mov	r5,r11
80007c4e:	78 96       	ld.w	r6,r12[0x24]
80007c50:	58 06       	cp.w	r6,0
80007c52:	c0 91       	brne	80007c64 <_Bfree+0x1c>
80007c54:	31 0c       	mov	r12,16
80007c56:	fe b0 fd 1d 	rcall	80007690 <malloc>
80007c5a:	99 36       	st.w	r12[0xc],r6
80007c5c:	8f 9c       	st.w	r7[0x24],r12
80007c5e:	99 16       	st.w	r12[0x4],r6
80007c60:	99 26       	st.w	r12[0x8],r6
80007c62:	99 06       	st.w	r12[0x0],r6
80007c64:	58 05       	cp.w	r5,0
80007c66:	c0 90       	breq	80007c78 <_Bfree+0x30>
80007c68:	6a 19       	ld.w	r9,r5[0x4]
80007c6a:	6e 98       	ld.w	r8,r7[0x24]
80007c6c:	70 38       	ld.w	r8,r8[0xc]
80007c6e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007c72:	8b 0a       	st.w	r5[0x0],r10
80007c74:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007c78:	d8 22       	popm	r4-r7,pc
80007c7a:	d7 03       	nop

80007c7c <_Balloc>:
80007c7c:	d4 21       	pushm	r4-r7,lr
80007c7e:	18 97       	mov	r7,r12
80007c80:	16 96       	mov	r6,r11
80007c82:	78 95       	ld.w	r5,r12[0x24]
80007c84:	58 05       	cp.w	r5,0
80007c86:	c0 91       	brne	80007c98 <_Balloc+0x1c>
80007c88:	31 0c       	mov	r12,16
80007c8a:	fe b0 fd 03 	rcall	80007690 <malloc>
80007c8e:	99 35       	st.w	r12[0xc],r5
80007c90:	8f 9c       	st.w	r7[0x24],r12
80007c92:	99 15       	st.w	r12[0x4],r5
80007c94:	99 25       	st.w	r12[0x8],r5
80007c96:	99 05       	st.w	r12[0x0],r5
80007c98:	6e 95       	ld.w	r5,r7[0x24]
80007c9a:	6a 38       	ld.w	r8,r5[0xc]
80007c9c:	58 08       	cp.w	r8,0
80007c9e:	c0 b1       	brne	80007cb4 <_Balloc+0x38>
80007ca0:	31 0a       	mov	r10,16
80007ca2:	30 4b       	mov	r11,4
80007ca4:	0e 9c       	mov	r12,r7
80007ca6:	e0 a0 04 93 	rcall	800085cc <_calloc_r>
80007caa:	8b 3c       	st.w	r5[0xc],r12
80007cac:	6e 98       	ld.w	r8,r7[0x24]
80007cae:	70 3c       	ld.w	r12,r8[0xc]
80007cb0:	58 0c       	cp.w	r12,0
80007cb2:	c1 b0       	breq	80007ce8 <_Balloc+0x6c>
80007cb4:	6e 98       	ld.w	r8,r7[0x24]
80007cb6:	70 38       	ld.w	r8,r8[0xc]
80007cb8:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007cbc:	70 0c       	ld.w	r12,r8[0x0]
80007cbe:	58 0c       	cp.w	r12,0
80007cc0:	c0 40       	breq	80007cc8 <_Balloc+0x4c>
80007cc2:	78 09       	ld.w	r9,r12[0x0]
80007cc4:	91 09       	st.w	r8[0x0],r9
80007cc6:	c0 e8       	rjmp	80007ce2 <_Balloc+0x66>
80007cc8:	0e 9c       	mov	r12,r7
80007cca:	30 17       	mov	r7,1
80007ccc:	0e 9b       	mov	r11,r7
80007cce:	ee 06 09 47 	lsl	r7,r7,r6
80007cd2:	ee ca ff fb 	sub	r10,r7,-5
80007cd6:	a3 6a       	lsl	r10,0x2
80007cd8:	e0 a0 04 7a 	rcall	800085cc <_calloc_r>
80007cdc:	c0 60       	breq	80007ce8 <_Balloc+0x6c>
80007cde:	99 16       	st.w	r12[0x4],r6
80007ce0:	99 27       	st.w	r12[0x8],r7
80007ce2:	30 08       	mov	r8,0
80007ce4:	99 38       	st.w	r12[0xc],r8
80007ce6:	99 48       	st.w	r12[0x10],r8
80007ce8:	d8 22       	popm	r4-r7,pc
80007cea:	d7 03       	nop

80007cec <__d2b>:
80007cec:	d4 31       	pushm	r0-r7,lr
80007cee:	20 2d       	sub	sp,8
80007cf0:	16 93       	mov	r3,r11
80007cf2:	12 96       	mov	r6,r9
80007cf4:	10 95       	mov	r5,r8
80007cf6:	14 92       	mov	r2,r10
80007cf8:	30 1b       	mov	r11,1
80007cfa:	cc 1f       	rcall	80007c7c <_Balloc>
80007cfc:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007d00:	50 09       	stdsp	sp[0x0],r9
80007d02:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007d06:	b5 a9       	sbr	r9,0x14
80007d08:	f0 01 16 14 	lsr	r1,r8,0x14
80007d0c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007d10:	18 94       	mov	r4,r12
80007d12:	58 02       	cp.w	r2,0
80007d14:	c1 d0       	breq	80007d4e <__d2b+0x62>
80007d16:	fa cc ff f8 	sub	r12,sp,-8
80007d1a:	18 d2       	st.w	--r12,r2
80007d1c:	c3 6f       	rcall	80007b88 <__lo0bits>
80007d1e:	40 18       	lddsp	r8,sp[0x4]
80007d20:	c0 d0       	breq	80007d3a <__d2b+0x4e>
80007d22:	40 09       	lddsp	r9,sp[0x0]
80007d24:	f8 0a 11 20 	rsub	r10,r12,32
80007d28:	f2 0a 09 4a 	lsl	r10,r9,r10
80007d2c:	f5 e8 10 08 	or	r8,r10,r8
80007d30:	89 58       	st.w	r4[0x14],r8
80007d32:	f2 0c 0a 49 	lsr	r9,r9,r12
80007d36:	50 09       	stdsp	sp[0x0],r9
80007d38:	c0 28       	rjmp	80007d3c <__d2b+0x50>
80007d3a:	89 58       	st.w	r4[0x14],r8
80007d3c:	40 08       	lddsp	r8,sp[0x0]
80007d3e:	58 08       	cp.w	r8,0
80007d40:	f9 b3 01 02 	movne	r3,2
80007d44:	f9 b3 00 01 	moveq	r3,1
80007d48:	89 68       	st.w	r4[0x18],r8
80007d4a:	89 43       	st.w	r4[0x10],r3
80007d4c:	c0 88       	rjmp	80007d5c <__d2b+0x70>
80007d4e:	1a 9c       	mov	r12,sp
80007d50:	c1 cf       	rcall	80007b88 <__lo0bits>
80007d52:	30 13       	mov	r3,1
80007d54:	40 08       	lddsp	r8,sp[0x0]
80007d56:	2e 0c       	sub	r12,-32
80007d58:	89 43       	st.w	r4[0x10],r3
80007d5a:	89 58       	st.w	r4[0x14],r8
80007d5c:	58 01       	cp.w	r1,0
80007d5e:	c0 90       	breq	80007d70 <__d2b+0x84>
80007d60:	e2 c1 04 33 	sub	r1,r1,1075
80007d64:	18 01       	add	r1,r12
80007d66:	8d 01       	st.w	r6[0x0],r1
80007d68:	f8 0c 11 35 	rsub	r12,r12,53
80007d6c:	8b 0c       	st.w	r5[0x0],r12
80007d6e:	c0 c8       	rjmp	80007d86 <__d2b+0x9a>
80007d70:	e6 c8 ff fc 	sub	r8,r3,-4
80007d74:	f8 cc 04 32 	sub	r12,r12,1074
80007d78:	a5 73       	lsl	r3,0x5
80007d7a:	8d 0c       	st.w	r6[0x0],r12
80007d7c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007d80:	cd 4e       	rcall	80007b28 <__hi0bits>
80007d82:	18 13       	sub	r3,r12
80007d84:	8b 03       	st.w	r5[0x0],r3
80007d86:	08 9c       	mov	r12,r4
80007d88:	2f ed       	sub	sp,-8
80007d8a:	d8 32       	popm	r0-r7,pc

80007d8c <__mdiff>:
80007d8c:	d4 31       	pushm	r0-r7,lr
80007d8e:	74 48       	ld.w	r8,r10[0x10]
80007d90:	76 45       	ld.w	r5,r11[0x10]
80007d92:	16 97       	mov	r7,r11
80007d94:	14 96       	mov	r6,r10
80007d96:	10 15       	sub	r5,r8
80007d98:	c1 31       	brne	80007dbe <__mdiff+0x32>
80007d9a:	2f b8       	sub	r8,-5
80007d9c:	ee ce ff ec 	sub	lr,r7,-20
80007da0:	a3 68       	lsl	r8,0x2
80007da2:	f4 08 00 0b 	add	r11,r10,r8
80007da6:	ee 08 00 08 	add	r8,r7,r8
80007daa:	11 4a       	ld.w	r10,--r8
80007dac:	17 49       	ld.w	r9,--r11
80007dae:	12 3a       	cp.w	r10,r9
80007db0:	c0 30       	breq	80007db6 <__mdiff+0x2a>
80007db2:	c0 e2       	brcc	80007dce <__mdiff+0x42>
80007db4:	c0 78       	rjmp	80007dc2 <__mdiff+0x36>
80007db6:	1c 38       	cp.w	r8,lr
80007db8:	fe 9b ff f9 	brhi	80007daa <__mdiff+0x1e>
80007dbc:	c4 98       	rjmp	80007e4e <__mdiff+0xc2>
80007dbe:	58 05       	cp.w	r5,0
80007dc0:	c0 64       	brge	80007dcc <__mdiff+0x40>
80007dc2:	0e 98       	mov	r8,r7
80007dc4:	30 15       	mov	r5,1
80007dc6:	0c 97       	mov	r7,r6
80007dc8:	10 96       	mov	r6,r8
80007dca:	c0 28       	rjmp	80007dce <__mdiff+0x42>
80007dcc:	30 05       	mov	r5,0
80007dce:	6e 1b       	ld.w	r11,r7[0x4]
80007dd0:	c5 6f       	rcall	80007c7c <_Balloc>
80007dd2:	6e 49       	ld.w	r9,r7[0x10]
80007dd4:	6c 44       	ld.w	r4,r6[0x10]
80007dd6:	99 35       	st.w	r12[0xc],r5
80007dd8:	2f b4       	sub	r4,-5
80007dda:	f2 c5 ff fb 	sub	r5,r9,-5
80007dde:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007de2:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007de6:	2e c6       	sub	r6,-20
80007de8:	2e c7       	sub	r7,-20
80007dea:	f8 c8 ff ec 	sub	r8,r12,-20
80007dee:	30 0a       	mov	r10,0
80007df0:	0f 0e       	ld.w	lr,r7++
80007df2:	0d 0b       	ld.w	r11,r6++
80007df4:	fc 02 16 10 	lsr	r2,lr,0x10
80007df8:	f6 03 16 10 	lsr	r3,r11,0x10
80007dfc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007e00:	e4 03 01 03 	sub	r3,r2,r3
80007e04:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007e08:	fc 0b 01 0b 	sub	r11,lr,r11
80007e0c:	f6 0a 00 0a 	add	r10,r11,r10
80007e10:	b0 1a       	st.h	r8[0x2],r10
80007e12:	b1 4a       	asr	r10,0x10
80007e14:	e6 0a 00 0a 	add	r10,r3,r10
80007e18:	b0 0a       	st.h	r8[0x0],r10
80007e1a:	2f c8       	sub	r8,-4
80007e1c:	b1 4a       	asr	r10,0x10
80007e1e:	08 36       	cp.w	r6,r4
80007e20:	ce 83       	brcs	80007df0 <__mdiff+0x64>
80007e22:	c0 d8       	rjmp	80007e3c <__mdiff+0xb0>
80007e24:	0f 0b       	ld.w	r11,r7++
80007e26:	f6 0e 16 10 	lsr	lr,r11,0x10
80007e2a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007e2e:	16 0a       	add	r10,r11
80007e30:	b0 1a       	st.h	r8[0x2],r10
80007e32:	b1 4a       	asr	r10,0x10
80007e34:	1c 0a       	add	r10,lr
80007e36:	b0 0a       	st.h	r8[0x0],r10
80007e38:	2f c8       	sub	r8,-4
80007e3a:	b1 4a       	asr	r10,0x10
80007e3c:	0a 37       	cp.w	r7,r5
80007e3e:	cf 33       	brcs	80007e24 <__mdiff+0x98>
80007e40:	c0 28       	rjmp	80007e44 <__mdiff+0xb8>
80007e42:	20 19       	sub	r9,1
80007e44:	11 4a       	ld.w	r10,--r8
80007e46:	58 0a       	cp.w	r10,0
80007e48:	cf d0       	breq	80007e42 <__mdiff+0xb6>
80007e4a:	99 49       	st.w	r12[0x10],r9
80007e4c:	d8 32       	popm	r0-r7,pc
80007e4e:	30 0b       	mov	r11,0
80007e50:	c1 6f       	rcall	80007c7c <_Balloc>
80007e52:	30 18       	mov	r8,1
80007e54:	99 48       	st.w	r12[0x10],r8
80007e56:	30 08       	mov	r8,0
80007e58:	99 58       	st.w	r12[0x14],r8
80007e5a:	d8 32       	popm	r0-r7,pc

80007e5c <__lshift>:
80007e5c:	d4 31       	pushm	r0-r7,lr
80007e5e:	16 97       	mov	r7,r11
80007e60:	76 46       	ld.w	r6,r11[0x10]
80007e62:	f4 02 14 05 	asr	r2,r10,0x5
80007e66:	2f f6       	sub	r6,-1
80007e68:	14 93       	mov	r3,r10
80007e6a:	18 94       	mov	r4,r12
80007e6c:	04 06       	add	r6,r2
80007e6e:	76 1b       	ld.w	r11,r11[0x4]
80007e70:	6e 28       	ld.w	r8,r7[0x8]
80007e72:	c0 38       	rjmp	80007e78 <__lshift+0x1c>
80007e74:	2f fb       	sub	r11,-1
80007e76:	a1 78       	lsl	r8,0x1
80007e78:	10 36       	cp.w	r6,r8
80007e7a:	fe 99 ff fd 	brgt	80007e74 <__lshift+0x18>
80007e7e:	08 9c       	mov	r12,r4
80007e80:	cf ee       	rcall	80007c7c <_Balloc>
80007e82:	30 09       	mov	r9,0
80007e84:	18 95       	mov	r5,r12
80007e86:	f8 c8 ff ec 	sub	r8,r12,-20
80007e8a:	12 9a       	mov	r10,r9
80007e8c:	c0 38       	rjmp	80007e92 <__lshift+0x36>
80007e8e:	10 aa       	st.w	r8++,r10
80007e90:	2f f9       	sub	r9,-1
80007e92:	04 39       	cp.w	r9,r2
80007e94:	cf d5       	brlt	80007e8e <__lshift+0x32>
80007e96:	6e 4b       	ld.w	r11,r7[0x10]
80007e98:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007e9c:	2f bb       	sub	r11,-5
80007e9e:	ee c9 ff ec 	sub	r9,r7,-20
80007ea2:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007ea6:	58 03       	cp.w	r3,0
80007ea8:	c1 30       	breq	80007ece <__lshift+0x72>
80007eaa:	e6 0c 11 20 	rsub	r12,r3,32
80007eae:	30 0a       	mov	r10,0
80007eb0:	72 02       	ld.w	r2,r9[0x0]
80007eb2:	e4 03 09 42 	lsl	r2,r2,r3
80007eb6:	04 4a       	or	r10,r2
80007eb8:	10 aa       	st.w	r8++,r10
80007eba:	13 0a       	ld.w	r10,r9++
80007ebc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007ec0:	16 39       	cp.w	r9,r11
80007ec2:	cf 73       	brcs	80007eb0 <__lshift+0x54>
80007ec4:	91 0a       	st.w	r8[0x0],r10
80007ec6:	58 0a       	cp.w	r10,0
80007ec8:	c0 70       	breq	80007ed6 <__lshift+0x7a>
80007eca:	2f f6       	sub	r6,-1
80007ecc:	c0 58       	rjmp	80007ed6 <__lshift+0x7a>
80007ece:	13 0a       	ld.w	r10,r9++
80007ed0:	10 aa       	st.w	r8++,r10
80007ed2:	16 39       	cp.w	r9,r11
80007ed4:	cf d3       	brcs	80007ece <__lshift+0x72>
80007ed6:	08 9c       	mov	r12,r4
80007ed8:	20 16       	sub	r6,1
80007eda:	0e 9b       	mov	r11,r7
80007edc:	8b 46       	st.w	r5[0x10],r6
80007ede:	cb 5e       	rcall	80007c48 <_Bfree>
80007ee0:	0a 9c       	mov	r12,r5
80007ee2:	d8 32       	popm	r0-r7,pc

80007ee4 <__multiply>:
80007ee4:	d4 31       	pushm	r0-r7,lr
80007ee6:	20 2d       	sub	sp,8
80007ee8:	76 49       	ld.w	r9,r11[0x10]
80007eea:	74 48       	ld.w	r8,r10[0x10]
80007eec:	16 96       	mov	r6,r11
80007eee:	14 95       	mov	r5,r10
80007ef0:	10 39       	cp.w	r9,r8
80007ef2:	ec 08 17 50 	movlt	r8,r6
80007ef6:	ea 06 17 50 	movlt	r6,r5
80007efa:	f0 05 17 50 	movlt	r5,r8
80007efe:	6c 28       	ld.w	r8,r6[0x8]
80007f00:	76 43       	ld.w	r3,r11[0x10]
80007f02:	74 42       	ld.w	r2,r10[0x10]
80007f04:	76 1b       	ld.w	r11,r11[0x4]
80007f06:	e4 03 00 07 	add	r7,r2,r3
80007f0a:	10 37       	cp.w	r7,r8
80007f0c:	f7 bb 09 ff 	subgt	r11,-1
80007f10:	cb 6e       	rcall	80007c7c <_Balloc>
80007f12:	ee c4 ff fb 	sub	r4,r7,-5
80007f16:	f8 c9 ff ec 	sub	r9,r12,-20
80007f1a:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007f1e:	30 0a       	mov	r10,0
80007f20:	12 98       	mov	r8,r9
80007f22:	c0 28       	rjmp	80007f26 <__multiply+0x42>
80007f24:	10 aa       	st.w	r8++,r10
80007f26:	08 38       	cp.w	r8,r4
80007f28:	cf e3       	brcs	80007f24 <__multiply+0x40>
80007f2a:	2f b3       	sub	r3,-5
80007f2c:	2f b2       	sub	r2,-5
80007f2e:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007f32:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007f36:	ec cb ff ec 	sub	r11,r6,-20
80007f3a:	50 12       	stdsp	sp[0x4],r2
80007f3c:	ea ca ff ec 	sub	r10,r5,-20
80007f40:	c4 48       	rjmp	80007fc8 <__multiply+0xe4>
80007f42:	94 95       	ld.uh	r5,r10[0x2]
80007f44:	58 05       	cp.w	r5,0
80007f46:	c2 00       	breq	80007f86 <__multiply+0xa2>
80007f48:	12 98       	mov	r8,r9
80007f4a:	16 96       	mov	r6,r11
80007f4c:	30 0e       	mov	lr,0
80007f4e:	50 09       	stdsp	sp[0x0],r9
80007f50:	0d 02       	ld.w	r2,r6++
80007f52:	e4 00 16 10 	lsr	r0,r2,0x10
80007f56:	70 01       	ld.w	r1,r8[0x0]
80007f58:	70 09       	ld.w	r9,r8[0x0]
80007f5a:	b1 81       	lsr	r1,0x10
80007f5c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007f60:	e0 05 03 41 	mac	r1,r0,r5
80007f64:	ab 32       	mul	r2,r5
80007f66:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007f6a:	00 02       	add	r2,r0
80007f6c:	e4 0e 00 0e 	add	lr,r2,lr
80007f70:	b0 1e       	st.h	r8[0x2],lr
80007f72:	b1 8e       	lsr	lr,0x10
80007f74:	1c 01       	add	r1,lr
80007f76:	b0 01       	st.h	r8[0x0],r1
80007f78:	e2 0e 16 10 	lsr	lr,r1,0x10
80007f7c:	2f c8       	sub	r8,-4
80007f7e:	06 36       	cp.w	r6,r3
80007f80:	ce 83       	brcs	80007f50 <__multiply+0x6c>
80007f82:	40 09       	lddsp	r9,sp[0x0]
80007f84:	91 0e       	st.w	r8[0x0],lr
80007f86:	94 86       	ld.uh	r6,r10[0x0]
80007f88:	58 06       	cp.w	r6,0
80007f8a:	c1 d0       	breq	80007fc4 <__multiply+0xe0>
80007f8c:	72 02       	ld.w	r2,r9[0x0]
80007f8e:	12 98       	mov	r8,r9
80007f90:	16 9e       	mov	lr,r11
80007f92:	30 05       	mov	r5,0
80007f94:	b0 12       	st.h	r8[0x2],r2
80007f96:	1d 01       	ld.w	r1,lr++
80007f98:	90 82       	ld.uh	r2,r8[0x0]
80007f9a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007f9e:	ad 30       	mul	r0,r6
80007fa0:	e0 02 00 02 	add	r2,r0,r2
80007fa4:	e4 05 00 05 	add	r5,r2,r5
80007fa8:	b0 05       	st.h	r8[0x0],r5
80007faa:	b1 85       	lsr	r5,0x10
80007fac:	b1 81       	lsr	r1,0x10
80007fae:	2f c8       	sub	r8,-4
80007fb0:	ad 31       	mul	r1,r6
80007fb2:	90 92       	ld.uh	r2,r8[0x2]
80007fb4:	e2 02 00 02 	add	r2,r1,r2
80007fb8:	0a 02       	add	r2,r5
80007fba:	e4 05 16 10 	lsr	r5,r2,0x10
80007fbe:	06 3e       	cp.w	lr,r3
80007fc0:	ce a3       	brcs	80007f94 <__multiply+0xb0>
80007fc2:	91 02       	st.w	r8[0x0],r2
80007fc4:	2f ca       	sub	r10,-4
80007fc6:	2f c9       	sub	r9,-4
80007fc8:	40 18       	lddsp	r8,sp[0x4]
80007fca:	10 3a       	cp.w	r10,r8
80007fcc:	cb b3       	brcs	80007f42 <__multiply+0x5e>
80007fce:	c0 28       	rjmp	80007fd2 <__multiply+0xee>
80007fd0:	20 17       	sub	r7,1
80007fd2:	58 07       	cp.w	r7,0
80007fd4:	e0 8a 00 05 	brle	80007fde <__multiply+0xfa>
80007fd8:	09 48       	ld.w	r8,--r4
80007fda:	58 08       	cp.w	r8,0
80007fdc:	cf a0       	breq	80007fd0 <__multiply+0xec>
80007fde:	99 47       	st.w	r12[0x10],r7
80007fe0:	2f ed       	sub	sp,-8
80007fe2:	d8 32       	popm	r0-r7,pc

80007fe4 <__i2b>:
80007fe4:	d4 21       	pushm	r4-r7,lr
80007fe6:	16 97       	mov	r7,r11
80007fe8:	30 1b       	mov	r11,1
80007fea:	c4 9e       	rcall	80007c7c <_Balloc>
80007fec:	30 19       	mov	r9,1
80007fee:	99 57       	st.w	r12[0x14],r7
80007ff0:	99 49       	st.w	r12[0x10],r9
80007ff2:	d8 22       	popm	r4-r7,pc

80007ff4 <__multadd>:
80007ff4:	d4 31       	pushm	r0-r7,lr
80007ff6:	30 08       	mov	r8,0
80007ff8:	12 95       	mov	r5,r9
80007ffa:	16 97       	mov	r7,r11
80007ffc:	18 96       	mov	r6,r12
80007ffe:	76 44       	ld.w	r4,r11[0x10]
80008000:	f6 c9 ff ec 	sub	r9,r11,-20
80008004:	72 0b       	ld.w	r11,r9[0x0]
80008006:	f6 0c 16 10 	lsr	r12,r11,0x10
8000800a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000800e:	f4 0c 02 4c 	mul	r12,r10,r12
80008012:	f4 0b 03 45 	mac	r5,r10,r11
80008016:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000801a:	b1 85       	lsr	r5,0x10
8000801c:	18 05       	add	r5,r12
8000801e:	ea 0c 15 10 	lsl	r12,r5,0x10
80008022:	f8 0b 00 0b 	add	r11,r12,r11
80008026:	12 ab       	st.w	r9++,r11
80008028:	2f f8       	sub	r8,-1
8000802a:	b1 85       	lsr	r5,0x10
8000802c:	08 38       	cp.w	r8,r4
8000802e:	ce b5       	brlt	80008004 <__multadd+0x10>
80008030:	58 05       	cp.w	r5,0
80008032:	c1 c0       	breq	8000806a <__multadd+0x76>
80008034:	6e 28       	ld.w	r8,r7[0x8]
80008036:	10 34       	cp.w	r4,r8
80008038:	c1 35       	brlt	8000805e <__multadd+0x6a>
8000803a:	6e 1b       	ld.w	r11,r7[0x4]
8000803c:	0c 9c       	mov	r12,r6
8000803e:	2f fb       	sub	r11,-1
80008040:	c1 ee       	rcall	80007c7c <_Balloc>
80008042:	6e 4a       	ld.w	r10,r7[0x10]
80008044:	ee cb ff f4 	sub	r11,r7,-12
80008048:	18 93       	mov	r3,r12
8000804a:	2f ea       	sub	r10,-2
8000804c:	2f 4c       	sub	r12,-12
8000804e:	a3 6a       	lsl	r10,0x2
80008050:	fe b0 de 3d 	rcall	80003cca <memcpy>
80008054:	0e 9b       	mov	r11,r7
80008056:	0c 9c       	mov	r12,r6
80008058:	fe b0 fd f8 	rcall	80007c48 <_Bfree>
8000805c:	06 97       	mov	r7,r3
8000805e:	e8 c8 ff ff 	sub	r8,r4,-1
80008062:	2f b4       	sub	r4,-5
80008064:	8f 48       	st.w	r7[0x10],r8
80008066:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000806a:	0e 9c       	mov	r12,r7
8000806c:	d8 32       	popm	r0-r7,pc
8000806e:	d7 03       	nop

80008070 <__pow5mult>:
80008070:	d4 31       	pushm	r0-r7,lr
80008072:	14 96       	mov	r6,r10
80008074:	18 97       	mov	r7,r12
80008076:	16 94       	mov	r4,r11
80008078:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000807c:	c0 90       	breq	8000808e <__pow5mult+0x1e>
8000807e:	20 18       	sub	r8,1
80008080:	fe c9 e3 44 	sub	r9,pc,-7356
80008084:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008088:	30 09       	mov	r9,0
8000808a:	cb 5f       	rcall	80007ff4 <__multadd>
8000808c:	18 94       	mov	r4,r12
8000808e:	a3 46       	asr	r6,0x2
80008090:	c3 40       	breq	800080f8 <__pow5mult+0x88>
80008092:	6e 95       	ld.w	r5,r7[0x24]
80008094:	58 05       	cp.w	r5,0
80008096:	c0 91       	brne	800080a8 <__pow5mult+0x38>
80008098:	31 0c       	mov	r12,16
8000809a:	fe b0 fa fb 	rcall	80007690 <malloc>
8000809e:	99 35       	st.w	r12[0xc],r5
800080a0:	8f 9c       	st.w	r7[0x24],r12
800080a2:	99 15       	st.w	r12[0x4],r5
800080a4:	99 25       	st.w	r12[0x8],r5
800080a6:	99 05       	st.w	r12[0x0],r5
800080a8:	6e 93       	ld.w	r3,r7[0x24]
800080aa:	66 25       	ld.w	r5,r3[0x8]
800080ac:	58 05       	cp.w	r5,0
800080ae:	c0 c1       	brne	800080c6 <__pow5mult+0x56>
800080b0:	e0 6b 02 71 	mov	r11,625
800080b4:	0e 9c       	mov	r12,r7
800080b6:	c9 7f       	rcall	80007fe4 <__i2b>
800080b8:	87 2c       	st.w	r3[0x8],r12
800080ba:	30 08       	mov	r8,0
800080bc:	18 95       	mov	r5,r12
800080be:	99 08       	st.w	r12[0x0],r8
800080c0:	c0 38       	rjmp	800080c6 <__pow5mult+0x56>
800080c2:	06 9c       	mov	r12,r3
800080c4:	18 95       	mov	r5,r12
800080c6:	ed b6 00 00 	bld	r6,0x0
800080ca:	c0 b1       	brne	800080e0 <__pow5mult+0x70>
800080cc:	08 9b       	mov	r11,r4
800080ce:	0a 9a       	mov	r10,r5
800080d0:	0e 9c       	mov	r12,r7
800080d2:	c0 9f       	rcall	80007ee4 <__multiply>
800080d4:	08 9b       	mov	r11,r4
800080d6:	18 93       	mov	r3,r12
800080d8:	0e 9c       	mov	r12,r7
800080da:	06 94       	mov	r4,r3
800080dc:	fe b0 fd b6 	rcall	80007c48 <_Bfree>
800080e0:	a1 56       	asr	r6,0x1
800080e2:	c0 b0       	breq	800080f8 <__pow5mult+0x88>
800080e4:	6a 03       	ld.w	r3,r5[0x0]
800080e6:	58 03       	cp.w	r3,0
800080e8:	ce d1       	brne	800080c2 <__pow5mult+0x52>
800080ea:	0a 9a       	mov	r10,r5
800080ec:	0a 9b       	mov	r11,r5
800080ee:	0e 9c       	mov	r12,r7
800080f0:	cf ae       	rcall	80007ee4 <__multiply>
800080f2:	8b 0c       	st.w	r5[0x0],r12
800080f4:	99 03       	st.w	r12[0x0],r3
800080f6:	ce 7b       	rjmp	800080c4 <__pow5mult+0x54>
800080f8:	08 9c       	mov	r12,r4
800080fa:	d8 32       	popm	r0-r7,pc

800080fc <_realloc_r>:
800080fc:	d4 31       	pushm	r0-r7,lr
800080fe:	20 1d       	sub	sp,4
80008100:	16 94       	mov	r4,r11
80008102:	18 92       	mov	r2,r12
80008104:	14 9b       	mov	r11,r10
80008106:	58 04       	cp.w	r4,0
80008108:	c0 51       	brne	80008112 <_realloc_r+0x16>
8000810a:	fe b0 fa cb 	rcall	800076a0 <_malloc_r>
8000810e:	18 95       	mov	r5,r12
80008110:	c5 39       	rjmp	800083b6 <_realloc_r+0x2ba>
80008112:	50 0a       	stdsp	sp[0x0],r10
80008114:	fe b0 fd 08 	rcall	80007b24 <__malloc_lock>
80008118:	40 0b       	lddsp	r11,sp[0x0]
8000811a:	f6 c8 ff f5 	sub	r8,r11,-11
8000811e:	e8 c1 00 08 	sub	r1,r4,8
80008122:	10 96       	mov	r6,r8
80008124:	62 1c       	ld.w	r12,r1[0x4]
80008126:	e0 16 ff f8 	andl	r6,0xfff8
8000812a:	59 68       	cp.w	r8,22
8000812c:	f9 b6 08 10 	movls	r6,16
80008130:	16 36       	cp.w	r6,r11
80008132:	5f 38       	srlo	r8
80008134:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008138:	c0 50       	breq	80008142 <_realloc_r+0x46>
8000813a:	30 c8       	mov	r8,12
8000813c:	30 05       	mov	r5,0
8000813e:	85 38       	st.w	r2[0xc],r8
80008140:	c3 b9       	rjmp	800083b6 <_realloc_r+0x2ba>
80008142:	18 90       	mov	r0,r12
80008144:	e0 10 ff fc 	andl	r0,0xfffc
80008148:	0c 30       	cp.w	r0,r6
8000814a:	e0 84 01 0b 	brge	80008360 <_realloc_r+0x264>
8000814e:	e0 68 01 24 	mov	r8,292
80008152:	e2 00 00 09 	add	r9,r1,r0
80008156:	70 25       	ld.w	r5,r8[0x8]
80008158:	0a 39       	cp.w	r9,r5
8000815a:	c0 90       	breq	8000816c <_realloc_r+0x70>
8000815c:	72 1a       	ld.w	r10,r9[0x4]
8000815e:	a1 ca       	cbr	r10,0x0
80008160:	f2 0a 00 0a 	add	r10,r9,r10
80008164:	74 1a       	ld.w	r10,r10[0x4]
80008166:	ed ba 00 00 	bld	r10,0x0
8000816a:	c2 20       	breq	800081ae <_realloc_r+0xb2>
8000816c:	72 1a       	ld.w	r10,r9[0x4]
8000816e:	e0 1a ff fc 	andl	r10,0xfffc
80008172:	f4 00 00 03 	add	r3,r10,r0
80008176:	0a 39       	cp.w	r9,r5
80008178:	c1 31       	brne	8000819e <_realloc_r+0xa2>
8000817a:	ec c7 ff f0 	sub	r7,r6,-16
8000817e:	0e 33       	cp.w	r3,r7
80008180:	c1 95       	brlt	800081b2 <_realloc_r+0xb6>
80008182:	e2 06 00 09 	add	r9,r1,r6
80008186:	0c 13       	sub	r3,r6
80008188:	a1 a3       	sbr	r3,0x0
8000818a:	93 13       	st.w	r9[0x4],r3
8000818c:	91 29       	st.w	r8[0x8],r9
8000818e:	04 9c       	mov	r12,r2
80008190:	62 18       	ld.w	r8,r1[0x4]
80008192:	08 95       	mov	r5,r4
80008194:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008198:	10 46       	or	r6,r8
8000819a:	83 16       	st.w	r1[0x4],r6
8000819c:	c0 b9       	rjmp	800083b2 <_realloc_r+0x2b6>
8000819e:	0c 33       	cp.w	r3,r6
800081a0:	c0 95       	brlt	800081b2 <_realloc_r+0xb6>
800081a2:	72 28       	ld.w	r8,r9[0x8]
800081a4:	02 97       	mov	r7,r1
800081a6:	72 39       	ld.w	r9,r9[0xc]
800081a8:	93 28       	st.w	r9[0x8],r8
800081aa:	91 39       	st.w	r8[0xc],r9
800081ac:	cd c8       	rjmp	80008364 <_realloc_r+0x268>
800081ae:	30 0a       	mov	r10,0
800081b0:	14 99       	mov	r9,r10
800081b2:	ed bc 00 00 	bld	r12,0x0
800081b6:	e0 80 00 95 	breq	800082e0 <_realloc_r+0x1e4>
800081ba:	62 07       	ld.w	r7,r1[0x0]
800081bc:	e2 07 01 07 	sub	r7,r1,r7
800081c0:	6e 1c       	ld.w	r12,r7[0x4]
800081c2:	e0 1c ff fc 	andl	r12,0xfffc
800081c6:	58 09       	cp.w	r9,0
800081c8:	c5 60       	breq	80008274 <_realloc_r+0x178>
800081ca:	f8 00 00 03 	add	r3,r12,r0
800081ce:	0a 39       	cp.w	r9,r5
800081d0:	c4 81       	brne	80008260 <_realloc_r+0x164>
800081d2:	14 03       	add	r3,r10
800081d4:	ec c9 ff f0 	sub	r9,r6,-16
800081d8:	12 33       	cp.w	r3,r9
800081da:	c4 d5       	brlt	80008274 <_realloc_r+0x178>
800081dc:	6e 3a       	ld.w	r10,r7[0xc]
800081de:	6e 29       	ld.w	r9,r7[0x8]
800081e0:	95 29       	st.w	r10[0x8],r9
800081e2:	93 3a       	st.w	r9[0xc],r10
800081e4:	ee c5 ff f8 	sub	r5,r7,-8
800081e8:	e0 ca 00 04 	sub	r10,r0,4
800081ec:	e0 4a 00 24 	cp.w	r10,36
800081f0:	e0 8b 00 25 	brhi	8000823a <_realloc_r+0x13e>
800081f4:	0a 99       	mov	r9,r5
800081f6:	59 3a       	cp.w	r10,19
800081f8:	e0 88 00 1a 	brls	8000822c <_realloc_r+0x130>
800081fc:	09 09       	ld.w	r9,r4++
800081fe:	8b 09       	st.w	r5[0x0],r9
80008200:	09 09       	ld.w	r9,r4++
80008202:	8f 39       	st.w	r7[0xc],r9
80008204:	ee c9 ff f0 	sub	r9,r7,-16
80008208:	59 ba       	cp.w	r10,27
8000820a:	e0 88 00 11 	brls	8000822c <_realloc_r+0x130>
8000820e:	09 0b       	ld.w	r11,r4++
80008210:	93 0b       	st.w	r9[0x0],r11
80008212:	09 09       	ld.w	r9,r4++
80008214:	8f 59       	st.w	r7[0x14],r9
80008216:	ee c9 ff e8 	sub	r9,r7,-24
8000821a:	e0 4a 00 24 	cp.w	r10,36
8000821e:	c0 71       	brne	8000822c <_realloc_r+0x130>
80008220:	09 0a       	ld.w	r10,r4++
80008222:	93 0a       	st.w	r9[0x0],r10
80008224:	ee c9 ff e0 	sub	r9,r7,-32
80008228:	09 0a       	ld.w	r10,r4++
8000822a:	8f 7a       	st.w	r7[0x1c],r10
8000822c:	09 0a       	ld.w	r10,r4++
8000822e:	12 aa       	st.w	r9++,r10
80008230:	68 0a       	ld.w	r10,r4[0x0]
80008232:	93 0a       	st.w	r9[0x0],r10
80008234:	68 1a       	ld.w	r10,r4[0x4]
80008236:	93 1a       	st.w	r9[0x4],r10
80008238:	c0 78       	rjmp	80008246 <_realloc_r+0x14a>
8000823a:	50 08       	stdsp	sp[0x0],r8
8000823c:	08 9b       	mov	r11,r4
8000823e:	0a 9c       	mov	r12,r5
80008240:	fe b0 fc 53 	rcall	80007ae6 <memmove>
80008244:	40 08       	lddsp	r8,sp[0x0]
80008246:	ee 06 00 09 	add	r9,r7,r6
8000824a:	0c 13       	sub	r3,r6
8000824c:	a1 a3       	sbr	r3,0x0
8000824e:	93 13       	st.w	r9[0x4],r3
80008250:	91 29       	st.w	r8[0x8],r9
80008252:	04 9c       	mov	r12,r2
80008254:	6e 18       	ld.w	r8,r7[0x4]
80008256:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000825a:	10 46       	or	r6,r8
8000825c:	8f 16       	st.w	r7[0x4],r6
8000825e:	ca a8       	rjmp	800083b2 <_realloc_r+0x2b6>
80008260:	14 03       	add	r3,r10
80008262:	0c 33       	cp.w	r3,r6
80008264:	c0 85       	brlt	80008274 <_realloc_r+0x178>
80008266:	72 28       	ld.w	r8,r9[0x8]
80008268:	72 39       	ld.w	r9,r9[0xc]
8000826a:	93 28       	st.w	r9[0x8],r8
8000826c:	91 39       	st.w	r8[0xc],r9
8000826e:	6e 28       	ld.w	r8,r7[0x8]
80008270:	6e 39       	ld.w	r9,r7[0xc]
80008272:	c0 78       	rjmp	80008280 <_realloc_r+0x184>
80008274:	f8 00 00 03 	add	r3,r12,r0
80008278:	0c 33       	cp.w	r3,r6
8000827a:	c3 35       	brlt	800082e0 <_realloc_r+0x1e4>
8000827c:	6e 39       	ld.w	r9,r7[0xc]
8000827e:	6e 28       	ld.w	r8,r7[0x8]
80008280:	93 28       	st.w	r9[0x8],r8
80008282:	91 39       	st.w	r8[0xc],r9
80008284:	e0 ca 00 04 	sub	r10,r0,4
80008288:	ee cc ff f8 	sub	r12,r7,-8
8000828c:	e0 4a 00 24 	cp.w	r10,36
80008290:	e0 8b 00 24 	brhi	800082d8 <_realloc_r+0x1dc>
80008294:	59 3a       	cp.w	r10,19
80008296:	e0 88 00 1a 	brls	800082ca <_realloc_r+0x1ce>
8000829a:	09 08       	ld.w	r8,r4++
8000829c:	99 08       	st.w	r12[0x0],r8
8000829e:	09 08       	ld.w	r8,r4++
800082a0:	8f 38       	st.w	r7[0xc],r8
800082a2:	ee cc ff f0 	sub	r12,r7,-16
800082a6:	59 ba       	cp.w	r10,27
800082a8:	e0 88 00 11 	brls	800082ca <_realloc_r+0x1ce>
800082ac:	09 08       	ld.w	r8,r4++
800082ae:	99 08       	st.w	r12[0x0],r8
800082b0:	09 08       	ld.w	r8,r4++
800082b2:	8f 58       	st.w	r7[0x14],r8
800082b4:	ee cc ff e8 	sub	r12,r7,-24
800082b8:	e0 4a 00 24 	cp.w	r10,36
800082bc:	c0 71       	brne	800082ca <_realloc_r+0x1ce>
800082be:	09 08       	ld.w	r8,r4++
800082c0:	99 08       	st.w	r12[0x0],r8
800082c2:	ee cc ff e0 	sub	r12,r7,-32
800082c6:	09 08       	ld.w	r8,r4++
800082c8:	8f 78       	st.w	r7[0x1c],r8
800082ca:	09 08       	ld.w	r8,r4++
800082cc:	18 a8       	st.w	r12++,r8
800082ce:	68 08       	ld.w	r8,r4[0x0]
800082d0:	99 08       	st.w	r12[0x0],r8
800082d2:	68 18       	ld.w	r8,r4[0x4]
800082d4:	99 18       	st.w	r12[0x4],r8
800082d6:	c4 78       	rjmp	80008364 <_realloc_r+0x268>
800082d8:	08 9b       	mov	r11,r4
800082da:	fe b0 fc 06 	rcall	80007ae6 <memmove>
800082de:	c4 38       	rjmp	80008364 <_realloc_r+0x268>
800082e0:	04 9c       	mov	r12,r2
800082e2:	fe b0 f9 df 	rcall	800076a0 <_malloc_r>
800082e6:	18 95       	mov	r5,r12
800082e8:	c3 a0       	breq	8000835c <_realloc_r+0x260>
800082ea:	62 18       	ld.w	r8,r1[0x4]
800082ec:	f8 c9 00 08 	sub	r9,r12,8
800082f0:	a1 c8       	cbr	r8,0x0
800082f2:	e2 08 00 08 	add	r8,r1,r8
800082f6:	10 39       	cp.w	r9,r8
800082f8:	c0 71       	brne	80008306 <_realloc_r+0x20a>
800082fa:	72 13       	ld.w	r3,r9[0x4]
800082fc:	02 97       	mov	r7,r1
800082fe:	e0 13 ff fc 	andl	r3,0xfffc
80008302:	00 03       	add	r3,r0
80008304:	c3 08       	rjmp	80008364 <_realloc_r+0x268>
80008306:	e0 ca 00 04 	sub	r10,r0,4
8000830a:	e0 4a 00 24 	cp.w	r10,36
8000830e:	e0 8b 00 20 	brhi	8000834e <_realloc_r+0x252>
80008312:	08 99       	mov	r9,r4
80008314:	18 98       	mov	r8,r12
80008316:	59 3a       	cp.w	r10,19
80008318:	e0 88 00 14 	brls	80008340 <_realloc_r+0x244>
8000831c:	13 0b       	ld.w	r11,r9++
8000831e:	10 ab       	st.w	r8++,r11
80008320:	13 0b       	ld.w	r11,r9++
80008322:	10 ab       	st.w	r8++,r11
80008324:	59 ba       	cp.w	r10,27
80008326:	e0 88 00 0d 	brls	80008340 <_realloc_r+0x244>
8000832a:	13 0b       	ld.w	r11,r9++
8000832c:	10 ab       	st.w	r8++,r11
8000832e:	13 0b       	ld.w	r11,r9++
80008330:	10 ab       	st.w	r8++,r11
80008332:	e0 4a 00 24 	cp.w	r10,36
80008336:	c0 51       	brne	80008340 <_realloc_r+0x244>
80008338:	13 0a       	ld.w	r10,r9++
8000833a:	10 aa       	st.w	r8++,r10
8000833c:	13 0a       	ld.w	r10,r9++
8000833e:	10 aa       	st.w	r8++,r10
80008340:	13 0a       	ld.w	r10,r9++
80008342:	10 aa       	st.w	r8++,r10
80008344:	72 0a       	ld.w	r10,r9[0x0]
80008346:	91 0a       	st.w	r8[0x0],r10
80008348:	72 19       	ld.w	r9,r9[0x4]
8000834a:	91 19       	st.w	r8[0x4],r9
8000834c:	c0 48       	rjmp	80008354 <_realloc_r+0x258>
8000834e:	08 9b       	mov	r11,r4
80008350:	fe b0 fb cb 	rcall	80007ae6 <memmove>
80008354:	08 9b       	mov	r11,r4
80008356:	04 9c       	mov	r12,r2
80008358:	fe b0 f6 fe 	rcall	80007154 <_free_r>
8000835c:	04 9c       	mov	r12,r2
8000835e:	c2 a8       	rjmp	800083b2 <_realloc_r+0x2b6>
80008360:	00 93       	mov	r3,r0
80008362:	02 97       	mov	r7,r1
80008364:	e6 06 01 09 	sub	r9,r3,r6
80008368:	6e 18       	ld.w	r8,r7[0x4]
8000836a:	58 f9       	cp.w	r9,15
8000836c:	e0 88 00 16 	brls	80008398 <_realloc_r+0x29c>
80008370:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008374:	ed e8 10 08 	or	r8,r6,r8
80008378:	8f 18       	st.w	r7[0x4],r8
8000837a:	12 98       	mov	r8,r9
8000837c:	a1 a8       	sbr	r8,0x0
8000837e:	ee 06 00 0b 	add	r11,r7,r6
80008382:	f6 09 00 09 	add	r9,r11,r9
80008386:	97 18       	st.w	r11[0x4],r8
80008388:	72 18       	ld.w	r8,r9[0x4]
8000838a:	a1 a8       	sbr	r8,0x0
8000838c:	2f 8b       	sub	r11,-8
8000838e:	93 18       	st.w	r9[0x4],r8
80008390:	04 9c       	mov	r12,r2
80008392:	fe b0 f6 e1 	rcall	80007154 <_free_r>
80008396:	c0 b8       	rjmp	800083ac <_realloc_r+0x2b0>
80008398:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000839c:	e7 e8 10 08 	or	r8,r3,r8
800083a0:	8f 18       	st.w	r7[0x4],r8
800083a2:	ee 03 00 03 	add	r3,r7,r3
800083a6:	66 18       	ld.w	r8,r3[0x4]
800083a8:	a1 a8       	sbr	r8,0x0
800083aa:	87 18       	st.w	r3[0x4],r8
800083ac:	04 9c       	mov	r12,r2
800083ae:	ee c5 ff f8 	sub	r5,r7,-8
800083b2:	fe b0 fb ba 	rcall	80007b26 <__malloc_unlock>
800083b6:	0a 9c       	mov	r12,r5
800083b8:	2f fd       	sub	sp,-4
800083ba:	d8 32       	popm	r0-r7,pc

800083bc <__isinfd>:
800083bc:	14 98       	mov	r8,r10
800083be:	fc 19 7f f0 	movh	r9,0x7ff0
800083c2:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800083c6:	f0 0b 11 00 	rsub	r11,r8,0
800083ca:	f7 e8 10 08 	or	r8,r11,r8
800083ce:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800083d2:	f2 08 01 08 	sub	r8,r9,r8
800083d6:	f0 0c 11 00 	rsub	r12,r8,0
800083da:	f9 e8 10 08 	or	r8,r12,r8
800083de:	f0 0c 14 1f 	asr	r12,r8,0x1f
800083e2:	2f fc       	sub	r12,-1
800083e4:	5e fc       	retal	r12

800083e6 <__isnand>:
800083e6:	14 98       	mov	r8,r10
800083e8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800083ec:	f0 0c 11 00 	rsub	r12,r8,0
800083f0:	10 4c       	or	r12,r8
800083f2:	fc 18 7f f0 	movh	r8,0x7ff0
800083f6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800083fa:	f0 0c 01 0c 	sub	r12,r8,r12
800083fe:	bf 9c       	lsr	r12,0x1f
80008400:	5e fc       	retal	r12
80008402:	d7 03       	nop

80008404 <_sbrk_r>:
80008404:	d4 21       	pushm	r4-r7,lr
80008406:	30 08       	mov	r8,0
80008408:	18 97       	mov	r7,r12
8000840a:	e0 66 07 50 	mov	r6,1872
8000840e:	16 9c       	mov	r12,r11
80008410:	8d 08       	st.w	r6[0x0],r8
80008412:	ca fc       	rcall	80008570 <_sbrk>
80008414:	5b fc       	cp.w	r12,-1
80008416:	c0 51       	brne	80008420 <_sbrk_r+0x1c>
80008418:	6c 08       	ld.w	r8,r6[0x0]
8000841a:	58 08       	cp.w	r8,0
8000841c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008420:	d8 22       	popm	r4-r7,pc
80008422:	d7 03       	nop

80008424 <__sclose>:
80008424:	d4 01       	pushm	lr
80008426:	96 7b       	ld.sh	r11,r11[0xe]
80008428:	cf ec       	rcall	80008624 <_close_r>
8000842a:	d8 02       	popm	pc

8000842c <__sseek>:
8000842c:	d4 21       	pushm	r4-r7,lr
8000842e:	16 97       	mov	r7,r11
80008430:	96 7b       	ld.sh	r11,r11[0xe]
80008432:	c8 5d       	rcall	8000873c <_lseek_r>
80008434:	8e 68       	ld.sh	r8,r7[0xc]
80008436:	10 99       	mov	r9,r8
80008438:	ad c8       	cbr	r8,0xc
8000843a:	ad a9       	sbr	r9,0xc
8000843c:	5b fc       	cp.w	r12,-1
8000843e:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008442:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008446:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000844a:	d8 22       	popm	r4-r7,pc

8000844c <__swrite>:
8000844c:	d4 21       	pushm	r4-r7,lr
8000844e:	96 68       	ld.sh	r8,r11[0xc]
80008450:	16 97       	mov	r7,r11
80008452:	14 95       	mov	r5,r10
80008454:	12 94       	mov	r4,r9
80008456:	e2 18 01 00 	andl	r8,0x100,COH
8000845a:	18 96       	mov	r6,r12
8000845c:	c0 50       	breq	80008466 <__swrite+0x1a>
8000845e:	30 29       	mov	r9,2
80008460:	30 0a       	mov	r10,0
80008462:	96 7b       	ld.sh	r11,r11[0xe]
80008464:	c6 cd       	rcall	8000873c <_lseek_r>
80008466:	8e 68       	ld.sh	r8,r7[0xc]
80008468:	ad c8       	cbr	r8,0xc
8000846a:	08 99       	mov	r9,r4
8000846c:	0a 9a       	mov	r10,r5
8000846e:	8e 7b       	ld.sh	r11,r7[0xe]
80008470:	0c 9c       	mov	r12,r6
80008472:	ae 68       	st.h	r7[0xc],r8
80008474:	c9 ac       	rcall	800085a8 <_write_r>
80008476:	d8 22       	popm	r4-r7,pc

80008478 <__sread>:
80008478:	d4 21       	pushm	r4-r7,lr
8000847a:	16 97       	mov	r7,r11
8000847c:	96 7b       	ld.sh	r11,r11[0xe]
8000847e:	c7 1d       	rcall	80008760 <_read_r>
80008480:	c0 65       	brlt	8000848c <__sread+0x14>
80008482:	6f 58       	ld.w	r8,r7[0x54]
80008484:	18 08       	add	r8,r12
80008486:	ef 48 00 54 	st.w	r7[84],r8
8000848a:	d8 22       	popm	r4-r7,pc
8000848c:	8e 68       	ld.sh	r8,r7[0xc]
8000848e:	ad c8       	cbr	r8,0xc
80008490:	ae 68       	st.h	r7[0xc],r8
80008492:	d8 22       	popm	r4-r7,pc

80008494 <strlen>:
80008494:	30 09       	mov	r9,0
80008496:	18 98       	mov	r8,r12
80008498:	c0 28       	rjmp	8000849c <strlen+0x8>
8000849a:	2f f8       	sub	r8,-1
8000849c:	11 8a       	ld.ub	r10,r8[0x0]
8000849e:	f2 0a 18 00 	cp.b	r10,r9
800084a2:	cf c1       	brne	8000849a <strlen+0x6>
800084a4:	f0 0c 01 0c 	sub	r12,r8,r12
800084a8:	5e fc       	retal	r12
800084aa:	d7 03       	nop

800084ac <_close>:
800084ac:	30 28       	mov	r8,2
800084ae:	d6 73       	breakpoint
800084b0:	3f fc       	mov	r12,-1
800084b2:	35 8b       	mov	r11,88
800084b4:	58 0c       	cp.w	r12,0
800084b6:	5e 4c       	retge	r12
800084b8:	e0 6a 07 50 	mov	r10,1872
800084bc:	95 0b       	st.w	r10[0x0],r11
800084be:	5e fc       	retal	r12

800084c0 <_lseek>:
800084c0:	30 58       	mov	r8,5
800084c2:	d6 73       	breakpoint
800084c4:	3f fc       	mov	r12,-1
800084c6:	35 8b       	mov	r11,88
800084c8:	58 0c       	cp.w	r12,0
800084ca:	5e 4c       	retge	r12
800084cc:	e0 6a 07 50 	mov	r10,1872
800084d0:	95 0b       	st.w	r10[0x0],r11
800084d2:	5e fc       	retal	r12

800084d4 <_read>:
800084d4:	30 38       	mov	r8,3
800084d6:	d6 73       	breakpoint
800084d8:	3f fc       	mov	r12,-1
800084da:	35 8b       	mov	r11,88
800084dc:	58 0c       	cp.w	r12,0
800084de:	5e 4c       	retge	r12
800084e0:	e0 6a 07 50 	mov	r10,1872
800084e4:	95 0b       	st.w	r10[0x0],r11
800084e6:	5e fc       	retal	r12

800084e8 <_write>:
800084e8:	30 48       	mov	r8,4
800084ea:	d6 73       	breakpoint
800084ec:	3f fc       	mov	r12,-1
800084ee:	35 8b       	mov	r11,88
800084f0:	58 0c       	cp.w	r12,0
800084f2:	5e 4c       	retge	r12
800084f4:	e0 6a 07 50 	mov	r10,1872
800084f8:	95 0b       	st.w	r10[0x0],r11
800084fa:	5e fc       	retal	r12

800084fc <isatty>:
800084fc:	30 b8       	mov	r8,11
800084fe:	d6 73       	breakpoint
80008500:	3f fc       	mov	r12,-1
80008502:	35 8b       	mov	r11,88
80008504:	58 0c       	cp.w	r12,0
80008506:	5e 4c       	retge	r12
80008508:	e0 6a 07 50 	mov	r10,1872
8000850c:	95 0b       	st.w	r10[0x0],r11
8000850e:	5e fc       	retal	r12

80008510 <_fstat_host>:
80008510:	30 98       	mov	r8,9
80008512:	d6 73       	breakpoint
80008514:	3f fc       	mov	r12,-1
80008516:	35 8b       	mov	r11,88
80008518:	58 0c       	cp.w	r12,0
8000851a:	5e 4c       	retge	r12
8000851c:	e0 6a 07 50 	mov	r10,1872
80008520:	95 0b       	st.w	r10[0x0],r11
80008522:	5e fc       	retal	r12

80008524 <_fstat>:
80008524:	d4 21       	pushm	r4-r7,lr
80008526:	21 0d       	sub	sp,64
80008528:	16 97       	mov	r7,r11
8000852a:	1a 9b       	mov	r11,sp
8000852c:	cf 2f       	rcall	80008510 <_fstat_host>
8000852e:	c0 34       	brge	80008534 <_fstat+0x10>
80008530:	3f fc       	mov	r12,-1
80008532:	c1 c8       	rjmp	8000856a <_fstat+0x46>
80008534:	40 08       	lddsp	r8,sp[0x0]
80008536:	ae 08       	st.h	r7[0x0],r8
80008538:	40 18       	lddsp	r8,sp[0x4]
8000853a:	ae 18       	st.h	r7[0x2],r8
8000853c:	40 28       	lddsp	r8,sp[0x8]
8000853e:	8f 18       	st.w	r7[0x4],r8
80008540:	40 38       	lddsp	r8,sp[0xc]
80008542:	ae 48       	st.h	r7[0x8],r8
80008544:	40 48       	lddsp	r8,sp[0x10]
80008546:	ae 58       	st.h	r7[0xa],r8
80008548:	40 58       	lddsp	r8,sp[0x14]
8000854a:	ae 68       	st.h	r7[0xc],r8
8000854c:	40 68       	lddsp	r8,sp[0x18]
8000854e:	ae 78       	st.h	r7[0xe],r8
80008550:	40 88       	lddsp	r8,sp[0x20]
80008552:	8f 48       	st.w	r7[0x10],r8
80008554:	40 a8       	lddsp	r8,sp[0x28]
80008556:	8f b8       	st.w	r7[0x2c],r8
80008558:	40 c8       	lddsp	r8,sp[0x30]
8000855a:	8f c8       	st.w	r7[0x30],r8
8000855c:	40 d8       	lddsp	r8,sp[0x34]
8000855e:	8f 58       	st.w	r7[0x14],r8
80008560:	40 e8       	lddsp	r8,sp[0x38]
80008562:	30 0c       	mov	r12,0
80008564:	8f 78       	st.w	r7[0x1c],r8
80008566:	40 f8       	lddsp	r8,sp[0x3c]
80008568:	8f 98       	st.w	r7[0x24],r8
8000856a:	2f 0d       	sub	sp,-64
8000856c:	d8 22       	popm	r4-r7,pc
8000856e:	d7 03       	nop

80008570 <_sbrk>:
80008570:	d4 01       	pushm	lr
80008572:	e0 68 06 7c 	mov	r8,1660
80008576:	70 09       	ld.w	r9,r8[0x0]
80008578:	58 09       	cp.w	r9,0
8000857a:	c0 41       	brne	80008582 <_sbrk+0x12>
8000857c:	e0 69 07 58 	mov	r9,1880
80008580:	91 09       	st.w	r8[0x0],r9
80008582:	e0 69 06 7c 	mov	r9,1660
80008586:	e0 6a 30 00 	mov	r10,12288
8000858a:	72 08       	ld.w	r8,r9[0x0]
8000858c:	f0 0c 00 0c 	add	r12,r8,r12
80008590:	14 3c       	cp.w	r12,r10
80008592:	e0 8b 00 04 	brhi	8000859a <_sbrk+0x2a>
80008596:	93 0c       	st.w	r9[0x0],r12
80008598:	c0 58       	rjmp	800085a2 <_sbrk+0x32>
8000859a:	c5 5c       	rcall	80008644 <__errno>
8000859c:	30 c8       	mov	r8,12
8000859e:	99 08       	st.w	r12[0x0],r8
800085a0:	3f f8       	mov	r8,-1
800085a2:	10 9c       	mov	r12,r8
800085a4:	d8 02       	popm	pc
800085a6:	d7 03       	nop

800085a8 <_write_r>:
800085a8:	d4 21       	pushm	r4-r7,lr
800085aa:	16 98       	mov	r8,r11
800085ac:	18 97       	mov	r7,r12
800085ae:	10 9c       	mov	r12,r8
800085b0:	30 08       	mov	r8,0
800085b2:	14 9b       	mov	r11,r10
800085b4:	e0 66 07 50 	mov	r6,1872
800085b8:	12 9a       	mov	r10,r9
800085ba:	8d 08       	st.w	r6[0x0],r8
800085bc:	c9 6f       	rcall	800084e8 <_write>
800085be:	5b fc       	cp.w	r12,-1
800085c0:	c0 51       	brne	800085ca <_write_r+0x22>
800085c2:	6c 08       	ld.w	r8,r6[0x0]
800085c4:	58 08       	cp.w	r8,0
800085c6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800085ca:	d8 22       	popm	r4-r7,pc

800085cc <_calloc_r>:
800085cc:	d4 21       	pushm	r4-r7,lr
800085ce:	f4 0b 02 4b 	mul	r11,r10,r11
800085d2:	fe b0 f8 67 	rcall	800076a0 <_malloc_r>
800085d6:	18 97       	mov	r7,r12
800085d8:	c2 30       	breq	8000861e <_calloc_r+0x52>
800085da:	f8 fa ff fc 	ld.w	r10,r12[-4]
800085de:	e0 1a ff fc 	andl	r10,0xfffc
800085e2:	20 4a       	sub	r10,4
800085e4:	e0 4a 00 24 	cp.w	r10,36
800085e8:	e0 8b 00 18 	brhi	80008618 <_calloc_r+0x4c>
800085ec:	18 98       	mov	r8,r12
800085ee:	59 3a       	cp.w	r10,19
800085f0:	e0 88 00 0f 	brls	8000860e <_calloc_r+0x42>
800085f4:	30 09       	mov	r9,0
800085f6:	10 a9       	st.w	r8++,r9
800085f8:	10 a9       	st.w	r8++,r9
800085fa:	59 ba       	cp.w	r10,27
800085fc:	e0 88 00 09 	brls	8000860e <_calloc_r+0x42>
80008600:	10 a9       	st.w	r8++,r9
80008602:	10 a9       	st.w	r8++,r9
80008604:	e0 4a 00 24 	cp.w	r10,36
80008608:	c0 31       	brne	8000860e <_calloc_r+0x42>
8000860a:	10 a9       	st.w	r8++,r9
8000860c:	10 a9       	st.w	r8++,r9
8000860e:	30 09       	mov	r9,0
80008610:	10 a9       	st.w	r8++,r9
80008612:	91 19       	st.w	r8[0x4],r9
80008614:	91 09       	st.w	r8[0x0],r9
80008616:	c0 48       	rjmp	8000861e <_calloc_r+0x52>
80008618:	30 0b       	mov	r11,0
8000861a:	fe b0 db fc 	rcall	80003e12 <memset>
8000861e:	0e 9c       	mov	r12,r7
80008620:	d8 22       	popm	r4-r7,pc
80008622:	d7 03       	nop

80008624 <_close_r>:
80008624:	d4 21       	pushm	r4-r7,lr
80008626:	30 08       	mov	r8,0
80008628:	18 97       	mov	r7,r12
8000862a:	e0 66 07 50 	mov	r6,1872
8000862e:	16 9c       	mov	r12,r11
80008630:	8d 08       	st.w	r6[0x0],r8
80008632:	c3 df       	rcall	800084ac <_close>
80008634:	5b fc       	cp.w	r12,-1
80008636:	c0 51       	brne	80008640 <_close_r+0x1c>
80008638:	6c 08       	ld.w	r8,r6[0x0]
8000863a:	58 08       	cp.w	r8,0
8000863c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008640:	d8 22       	popm	r4-r7,pc
80008642:	d7 03       	nop

80008644 <__errno>:
80008644:	e0 68 01 20 	mov	r8,288
80008648:	70 0c       	ld.w	r12,r8[0x0]
8000864a:	2f 4c       	sub	r12,-12
8000864c:	5e fc       	retal	r12
8000864e:	d7 03       	nop

80008650 <_fclose_r>:
80008650:	d4 21       	pushm	r4-r7,lr
80008652:	18 96       	mov	r6,r12
80008654:	16 97       	mov	r7,r11
80008656:	58 0b       	cp.w	r11,0
80008658:	c0 31       	brne	8000865e <_fclose_r+0xe>
8000865a:	16 95       	mov	r5,r11
8000865c:	c5 38       	rjmp	80008702 <_fclose_r+0xb2>
8000865e:	fe b0 f4 8f 	rcall	80006f7c <__sfp_lock_acquire>
80008662:	58 06       	cp.w	r6,0
80008664:	c0 70       	breq	80008672 <_fclose_r+0x22>
80008666:	6c 68       	ld.w	r8,r6[0x18]
80008668:	58 08       	cp.w	r8,0
8000866a:	c0 41       	brne	80008672 <_fclose_r+0x22>
8000866c:	0c 9c       	mov	r12,r6
8000866e:	fe b0 f4 d9 	rcall	80007020 <__sinit>
80008672:	fe c8 e9 de 	sub	r8,pc,-5666
80008676:	10 37       	cp.w	r7,r8
80008678:	c0 31       	brne	8000867e <_fclose_r+0x2e>
8000867a:	6c 07       	ld.w	r7,r6[0x0]
8000867c:	c0 c8       	rjmp	80008694 <_fclose_r+0x44>
8000867e:	fe c8 e9 ca 	sub	r8,pc,-5686
80008682:	10 37       	cp.w	r7,r8
80008684:	c0 31       	brne	8000868a <_fclose_r+0x3a>
80008686:	6c 17       	ld.w	r7,r6[0x4]
80008688:	c0 68       	rjmp	80008694 <_fclose_r+0x44>
8000868a:	fe c8 e9 b6 	sub	r8,pc,-5706
8000868e:	10 37       	cp.w	r7,r8
80008690:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008694:	8e 69       	ld.sh	r9,r7[0xc]
80008696:	30 08       	mov	r8,0
80008698:	f0 09 19 00 	cp.h	r9,r8
8000869c:	c0 51       	brne	800086a6 <_fclose_r+0x56>
8000869e:	fe b0 f4 70 	rcall	80006f7e <__sfp_lock_release>
800086a2:	30 05       	mov	r5,0
800086a4:	c2 f8       	rjmp	80008702 <_fclose_r+0xb2>
800086a6:	0e 9b       	mov	r11,r7
800086a8:	0c 9c       	mov	r12,r6
800086aa:	fe b0 f3 e3 	rcall	80006e70 <_fflush_r>
800086ae:	6e c8       	ld.w	r8,r7[0x30]
800086b0:	18 95       	mov	r5,r12
800086b2:	58 08       	cp.w	r8,0
800086b4:	c0 60       	breq	800086c0 <_fclose_r+0x70>
800086b6:	6e 8b       	ld.w	r11,r7[0x20]
800086b8:	0c 9c       	mov	r12,r6
800086ba:	5d 18       	icall	r8
800086bc:	f9 b5 05 ff 	movlt	r5,-1
800086c0:	8e 68       	ld.sh	r8,r7[0xc]
800086c2:	ed b8 00 07 	bld	r8,0x7
800086c6:	c0 51       	brne	800086d0 <_fclose_r+0x80>
800086c8:	6e 4b       	ld.w	r11,r7[0x10]
800086ca:	0c 9c       	mov	r12,r6
800086cc:	fe b0 f5 44 	rcall	80007154 <_free_r>
800086d0:	6e db       	ld.w	r11,r7[0x34]
800086d2:	58 0b       	cp.w	r11,0
800086d4:	c0 a0       	breq	800086e8 <_fclose_r+0x98>
800086d6:	ee c8 ff bc 	sub	r8,r7,-68
800086da:	10 3b       	cp.w	r11,r8
800086dc:	c0 40       	breq	800086e4 <_fclose_r+0x94>
800086de:	0c 9c       	mov	r12,r6
800086e0:	fe b0 f5 3a 	rcall	80007154 <_free_r>
800086e4:	30 08       	mov	r8,0
800086e6:	8f d8       	st.w	r7[0x34],r8
800086e8:	6f 2b       	ld.w	r11,r7[0x48]
800086ea:	58 0b       	cp.w	r11,0
800086ec:	c0 70       	breq	800086fa <_fclose_r+0xaa>
800086ee:	0c 9c       	mov	r12,r6
800086f0:	fe b0 f5 32 	rcall	80007154 <_free_r>
800086f4:	30 08       	mov	r8,0
800086f6:	ef 48 00 48 	st.w	r7[72],r8
800086fa:	30 08       	mov	r8,0
800086fc:	ae 68       	st.h	r7[0xc],r8
800086fe:	fe b0 f4 40 	rcall	80006f7e <__sfp_lock_release>
80008702:	0a 9c       	mov	r12,r5
80008704:	d8 22       	popm	r4-r7,pc
80008706:	d7 03       	nop

80008708 <fclose>:
80008708:	d4 01       	pushm	lr
8000870a:	e0 68 01 20 	mov	r8,288
8000870e:	18 9b       	mov	r11,r12
80008710:	70 0c       	ld.w	r12,r8[0x0]
80008712:	c9 ff       	rcall	80008650 <_fclose_r>
80008714:	d8 02       	popm	pc
80008716:	d7 03       	nop

80008718 <_fstat_r>:
80008718:	d4 21       	pushm	r4-r7,lr
8000871a:	16 98       	mov	r8,r11
8000871c:	18 97       	mov	r7,r12
8000871e:	10 9c       	mov	r12,r8
80008720:	30 08       	mov	r8,0
80008722:	e0 66 07 50 	mov	r6,1872
80008726:	14 9b       	mov	r11,r10
80008728:	8d 08       	st.w	r6[0x0],r8
8000872a:	cf de       	rcall	80008524 <_fstat>
8000872c:	5b fc       	cp.w	r12,-1
8000872e:	c0 51       	brne	80008738 <_fstat_r+0x20>
80008730:	6c 08       	ld.w	r8,r6[0x0]
80008732:	58 08       	cp.w	r8,0
80008734:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008738:	d8 22       	popm	r4-r7,pc
8000873a:	d7 03       	nop

8000873c <_lseek_r>:
8000873c:	d4 21       	pushm	r4-r7,lr
8000873e:	16 98       	mov	r8,r11
80008740:	18 97       	mov	r7,r12
80008742:	10 9c       	mov	r12,r8
80008744:	30 08       	mov	r8,0
80008746:	14 9b       	mov	r11,r10
80008748:	e0 66 07 50 	mov	r6,1872
8000874c:	12 9a       	mov	r10,r9
8000874e:	8d 08       	st.w	r6[0x0],r8
80008750:	cb 8e       	rcall	800084c0 <_lseek>
80008752:	5b fc       	cp.w	r12,-1
80008754:	c0 51       	brne	8000875e <_lseek_r+0x22>
80008756:	6c 08       	ld.w	r8,r6[0x0]
80008758:	58 08       	cp.w	r8,0
8000875a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000875e:	d8 22       	popm	r4-r7,pc

80008760 <_read_r>:
80008760:	d4 21       	pushm	r4-r7,lr
80008762:	16 98       	mov	r8,r11
80008764:	18 97       	mov	r7,r12
80008766:	10 9c       	mov	r12,r8
80008768:	30 08       	mov	r8,0
8000876a:	14 9b       	mov	r11,r10
8000876c:	e0 66 07 50 	mov	r6,1872
80008770:	12 9a       	mov	r10,r9
80008772:	8d 08       	st.w	r6[0x0],r8
80008774:	cb 0e       	rcall	800084d4 <_read>
80008776:	5b fc       	cp.w	r12,-1
80008778:	c0 51       	brne	80008782 <_read_r+0x22>
8000877a:	6c 08       	ld.w	r8,r6[0x0]
8000877c:	58 08       	cp.w	r8,0
8000877e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008782:	d8 22       	popm	r4-r7,pc

80008784 <__avr32_f64_sub_from_add>:
80008784:	ee 19 80 00 	eorh	r9,0x8000

80008788 <__avr32_f64_sub>:
80008788:	f7 e9 20 0c 	eor	r12,r11,r9
8000878c:	e0 86 00 ca 	brmi	80008920 <__avr32_f64_add_from_sub>
80008790:	eb cd 40 e0 	pushm	r5-r7,lr
80008794:	16 9c       	mov	r12,r11
80008796:	e6 1c 80 00 	andh	r12,0x8000,COH
8000879a:	bf db       	cbr	r11,0x1f
8000879c:	bf d9       	cbr	r9,0x1f
8000879e:	10 3a       	cp.w	r10,r8
800087a0:	f2 0b 13 00 	cpc	r11,r9
800087a4:	c0 92       	brcc	800087b6 <__avr32_f64_sub+0x2e>
800087a6:	16 97       	mov	r7,r11
800087a8:	12 9b       	mov	r11,r9
800087aa:	0e 99       	mov	r9,r7
800087ac:	14 97       	mov	r7,r10
800087ae:	10 9a       	mov	r10,r8
800087b0:	0e 98       	mov	r8,r7
800087b2:	ee 1c 80 00 	eorh	r12,0x8000
800087b6:	f6 07 16 14 	lsr	r7,r11,0x14
800087ba:	ab 7b       	lsl	r11,0xb
800087bc:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800087c0:	ab 7a       	lsl	r10,0xb
800087c2:	bf bb       	sbr	r11,0x1f
800087c4:	f2 06 16 14 	lsr	r6,r9,0x14
800087c8:	c4 40       	breq	80008850 <__avr32_f64_sub_opL_subnormal>
800087ca:	ab 79       	lsl	r9,0xb
800087cc:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800087d0:	ab 78       	lsl	r8,0xb
800087d2:	bf b9       	sbr	r9,0x1f

800087d4 <__avr32_f64_sub_opL_subnormal_done>:
800087d4:	e0 47 07 ff 	cp.w	r7,2047
800087d8:	c4 f0       	breq	80008876 <__avr32_f64_sub_opH_nan_or_inf>
800087da:	0e 26       	rsub	r6,r7
800087dc:	c1 20       	breq	80008800 <__avr32_f64_sub_shift_done>
800087de:	ec 05 11 20 	rsub	r5,r6,32
800087e2:	e0 46 00 20 	cp.w	r6,32
800087e6:	c7 c2       	brcc	800088de <__avr32_f64_sub_longshift>
800087e8:	f0 05 09 4e 	lsl	lr,r8,r5
800087ec:	f2 05 09 45 	lsl	r5,r9,r5
800087f0:	f0 06 0a 48 	lsr	r8,r8,r6
800087f4:	f2 06 0a 49 	lsr	r9,r9,r6
800087f8:	0a 48       	or	r8,r5
800087fa:	58 0e       	cp.w	lr,0
800087fc:	5f 1e       	srne	lr
800087fe:	1c 48       	or	r8,lr

80008800 <__avr32_f64_sub_shift_done>:
80008800:	10 1a       	sub	r10,r8
80008802:	f6 09 01 4b 	sbc	r11,r11,r9
80008806:	f6 06 12 00 	clz	r6,r11
8000880a:	c0 e0       	breq	80008826 <__avr32_f64_sub_longnormalize_done>
8000880c:	c7 83       	brcs	800088fc <__avr32_f64_sub_longnormalize>
8000880e:	ec 0e 11 20 	rsub	lr,r6,32
80008812:	f6 06 09 4b 	lsl	r11,r11,r6
80008816:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000881a:	1c 4b       	or	r11,lr
8000881c:	f4 06 09 4a 	lsl	r10,r10,r6
80008820:	0c 17       	sub	r7,r6
80008822:	e0 8a 00 39 	brle	80008894 <__avr32_f64_sub_subnormal_result>

80008826 <__avr32_f64_sub_longnormalize_done>:
80008826:	f4 09 15 15 	lsl	r9,r10,0x15
8000882a:	ab 9a       	lsr	r10,0xb
8000882c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008830:	ab 9b       	lsr	r11,0xb
80008832:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008836:	18 4b       	or	r11,r12

80008838 <__avr32_f64_sub_round>:
80008838:	fc 17 80 00 	movh	r7,0x8000
8000883c:	ed ba 00 00 	bld	r10,0x0
80008840:	f7 b7 01 ff 	subne	r7,-1
80008844:	0e 39       	cp.w	r9,r7
80008846:	5f 29       	srhs	r9
80008848:	12 0a       	add	r10,r9
8000884a:	5c 0b       	acr	r11
8000884c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008850 <__avr32_f64_sub_opL_subnormal>:
80008850:	ab 79       	lsl	r9,0xb
80008852:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008856:	ab 78       	lsl	r8,0xb
80008858:	f3 e8 10 0e 	or	lr,r9,r8
8000885c:	f9 b6 01 01 	movne	r6,1
80008860:	ee 0e 11 00 	rsub	lr,r7,0
80008864:	f9 b7 00 01 	moveq	r7,1
80008868:	ef bb 00 1f 	bst	r11,0x1f
8000886c:	f7 ea 10 0e 	or	lr,r11,r10
80008870:	f9 b7 00 00 	moveq	r7,0
80008874:	cb 0b       	rjmp	800087d4 <__avr32_f64_sub_opL_subnormal_done>

80008876 <__avr32_f64_sub_opH_nan_or_inf>:
80008876:	bf db       	cbr	r11,0x1f
80008878:	f7 ea 10 0e 	or	lr,r11,r10
8000887c:	c0 81       	brne	8000888c <__avr32_f64_sub_return_nan>
8000887e:	e0 46 07 ff 	cp.w	r6,2047
80008882:	c0 50       	breq	8000888c <__avr32_f64_sub_return_nan>
80008884:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008888:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000888c <__avr32_f64_sub_return_nan>:
8000888c:	3f fa       	mov	r10,-1
8000888e:	3f fb       	mov	r11,-1
80008890:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008894 <__avr32_f64_sub_subnormal_result>:
80008894:	5c 37       	neg	r7
80008896:	2f f7       	sub	r7,-1
80008898:	f1 b7 04 c0 	satu	r7,0x6
8000889c:	e0 47 00 20 	cp.w	r7,32
800088a0:	c1 14       	brge	800088c2 <__avr32_f64_sub_subnormal_result+0x2e>
800088a2:	ee 08 11 20 	rsub	r8,r7,32
800088a6:	f4 08 09 49 	lsl	r9,r10,r8
800088aa:	5f 16       	srne	r6
800088ac:	f4 07 0a 4a 	lsr	r10,r10,r7
800088b0:	0c 4a       	or	r10,r6
800088b2:	f6 08 09 49 	lsl	r9,r11,r8
800088b6:	f5 e9 10 0a 	or	r10,r10,r9
800088ba:	f4 07 0a 4b 	lsr	r11,r10,r7
800088be:	30 07       	mov	r7,0
800088c0:	cb 3b       	rjmp	80008826 <__avr32_f64_sub_longnormalize_done>
800088c2:	ee 08 11 40 	rsub	r8,r7,64
800088c6:	f6 08 09 49 	lsl	r9,r11,r8
800088ca:	14 49       	or	r9,r10
800088cc:	5f 16       	srne	r6
800088ce:	f6 07 0a 4a 	lsr	r10,r11,r7
800088d2:	0c 4a       	or	r10,r6
800088d4:	30 0b       	mov	r11,0
800088d6:	30 07       	mov	r7,0
800088d8:	ca 7b       	rjmp	80008826 <__avr32_f64_sub_longnormalize_done>
800088da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800088de <__avr32_f64_sub_longshift>:
800088de:	f1 b6 04 c0 	satu	r6,0x6
800088e2:	f0 0e 17 00 	moveq	lr,r8
800088e6:	c0 40       	breq	800088ee <__avr32_f64_sub_longshift+0x10>
800088e8:	f2 05 09 4e 	lsl	lr,r9,r5
800088ec:	10 4e       	or	lr,r8
800088ee:	f2 06 0a 48 	lsr	r8,r9,r6
800088f2:	30 09       	mov	r9,0
800088f4:	58 0e       	cp.w	lr,0
800088f6:	5f 1e       	srne	lr
800088f8:	1c 48       	or	r8,lr
800088fa:	c8 3b       	rjmp	80008800 <__avr32_f64_sub_shift_done>

800088fc <__avr32_f64_sub_longnormalize>:
800088fc:	f4 06 12 00 	clz	r6,r10
80008900:	f9 b7 03 00 	movlo	r7,0
80008904:	f9 b6 03 00 	movlo	r6,0
80008908:	f9 bc 03 00 	movlo	r12,0
8000890c:	f7 b6 02 e0 	subhs	r6,-32
80008910:	f4 06 09 4b 	lsl	r11,r10,r6
80008914:	30 0a       	mov	r10,0
80008916:	0c 17       	sub	r7,r6
80008918:	fe 9a ff be 	brle	80008894 <__avr32_f64_sub_subnormal_result>
8000891c:	c8 5b       	rjmp	80008826 <__avr32_f64_sub_longnormalize_done>
8000891e:	d7 03       	nop

80008920 <__avr32_f64_add_from_sub>:
80008920:	ee 19 80 00 	eorh	r9,0x8000

80008924 <__avr32_f64_add>:
80008924:	f7 e9 20 0c 	eor	r12,r11,r9
80008928:	fe 96 ff 2e 	brmi	80008784 <__avr32_f64_sub_from_add>
8000892c:	eb cd 40 e0 	pushm	r5-r7,lr
80008930:	16 9c       	mov	r12,r11
80008932:	e6 1c 80 00 	andh	r12,0x8000,COH
80008936:	bf db       	cbr	r11,0x1f
80008938:	bf d9       	cbr	r9,0x1f
8000893a:	12 3b       	cp.w	r11,r9
8000893c:	c0 72       	brcc	8000894a <__avr32_f64_add+0x26>
8000893e:	16 97       	mov	r7,r11
80008940:	12 9b       	mov	r11,r9
80008942:	0e 99       	mov	r9,r7
80008944:	14 97       	mov	r7,r10
80008946:	10 9a       	mov	r10,r8
80008948:	0e 98       	mov	r8,r7
8000894a:	30 0e       	mov	lr,0
8000894c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008950:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008954:	b5 ab       	sbr	r11,0x14
80008956:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000895a:	c6 20       	breq	80008a1e <__avr32_f64_add_op2_subnormal>
8000895c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008960:	b5 a9       	sbr	r9,0x14
80008962:	e0 47 07 ff 	cp.w	r7,2047
80008966:	c2 80       	breq	800089b6 <__avr32_f64_add_opH_nan_or_inf>
80008968:	0e 26       	rsub	r6,r7
8000896a:	c1 20       	breq	8000898e <__avr32_f64_add_shift_done>
8000896c:	e0 46 00 36 	cp.w	r6,54
80008970:	c1 52       	brcc	8000899a <__avr32_f64_add_res_of_done>
80008972:	ec 05 11 20 	rsub	r5,r6,32
80008976:	e0 46 00 20 	cp.w	r6,32
8000897a:	c3 52       	brcc	800089e4 <__avr32_f64_add_longshift>
8000897c:	f0 05 09 4e 	lsl	lr,r8,r5
80008980:	f2 05 09 45 	lsl	r5,r9,r5
80008984:	f0 06 0a 48 	lsr	r8,r8,r6
80008988:	f2 06 0a 49 	lsr	r9,r9,r6
8000898c:	0a 48       	or	r8,r5

8000898e <__avr32_f64_add_shift_done>:
8000898e:	10 0a       	add	r10,r8
80008990:	f6 09 00 4b 	adc	r11,r11,r9
80008994:	ed bb 00 15 	bld	r11,0x15
80008998:	c3 40       	breq	80008a00 <__avr32_f64_add_res_of>

8000899a <__avr32_f64_add_res_of_done>:
8000899a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000899e:	18 4b       	or	r11,r12

800089a0 <__avr32_f64_add_round>:
800089a0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800089a4:	18 4e       	or	lr,r12
800089a6:	ee 1e 80 00 	eorh	lr,0x8000
800089aa:	f1 be 04 20 	satu	lr,0x1
800089ae:	1c 0a       	add	r10,lr
800089b0:	5c 0b       	acr	r11
800089b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089b6 <__avr32_f64_add_opH_nan_or_inf>:
800089b6:	b5 cb       	cbr	r11,0x14
800089b8:	f7 ea 10 0e 	or	lr,r11,r10
800089bc:	c1 01       	brne	800089dc <__avr32_f64_add_return_nan>
800089be:	e0 46 07 ff 	cp.w	r6,2047
800089c2:	c0 30       	breq	800089c8 <__avr32_f64_add_opL_nan_or_inf>
800089c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089c8 <__avr32_f64_add_opL_nan_or_inf>:
800089c8:	b5 c9       	cbr	r9,0x14
800089ca:	f3 e8 10 0e 	or	lr,r9,r8
800089ce:	c0 71       	brne	800089dc <__avr32_f64_add_return_nan>
800089d0:	30 0a       	mov	r10,0
800089d2:	fc 1b 7f f0 	movh	r11,0x7ff0
800089d6:	18 4b       	or	r11,r12
800089d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089dc <__avr32_f64_add_return_nan>:
800089dc:	3f fa       	mov	r10,-1
800089de:	3f fb       	mov	r11,-1
800089e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089e4 <__avr32_f64_add_longshift>:
800089e4:	f1 b6 04 c0 	satu	r6,0x6
800089e8:	f0 0e 17 00 	moveq	lr,r8
800089ec:	c0 60       	breq	800089f8 <__avr32_f64_add_longshift+0x14>
800089ee:	f2 05 09 4e 	lsl	lr,r9,r5
800089f2:	58 08       	cp.w	r8,0
800089f4:	5f 18       	srne	r8
800089f6:	10 4e       	or	lr,r8
800089f8:	f2 06 0a 48 	lsr	r8,r9,r6
800089fc:	30 09       	mov	r9,0
800089fe:	cc 8b       	rjmp	8000898e <__avr32_f64_add_shift_done>

80008a00 <__avr32_f64_add_res_of>:
80008a00:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008a04:	a1 9b       	lsr	r11,0x1
80008a06:	5d 0a       	ror	r10
80008a08:	5d 0e       	ror	lr
80008a0a:	2f f7       	sub	r7,-1
80008a0c:	e0 47 07 ff 	cp.w	r7,2047
80008a10:	f9 ba 00 00 	moveq	r10,0
80008a14:	f9 bb 00 00 	moveq	r11,0
80008a18:	f9 be 00 00 	moveq	lr,0
80008a1c:	cb fb       	rjmp	8000899a <__avr32_f64_add_res_of_done>

80008a1e <__avr32_f64_add_op2_subnormal>:
80008a1e:	30 16       	mov	r6,1
80008a20:	58 07       	cp.w	r7,0
80008a22:	ca 01       	brne	80008962 <__avr32_f64_add+0x3e>
80008a24:	b5 cb       	cbr	r11,0x14
80008a26:	10 0a       	add	r10,r8
80008a28:	f6 09 00 4b 	adc	r11,r11,r9
80008a2c:	18 4b       	or	r11,r12
80008a2e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008a32:	d7 03       	nop

80008a34 <__avr32_f64_to_u32>:
80008a34:	58 0b       	cp.w	r11,0
80008a36:	5e 6d       	retmi	0

80008a38 <__avr32_f64_to_s32>:
80008a38:	f6 0c 15 01 	lsl	r12,r11,0x1
80008a3c:	b5 9c       	lsr	r12,0x15
80008a3e:	e0 2c 03 ff 	sub	r12,1023
80008a42:	5e 3d       	retlo	0
80008a44:	f8 0c 11 1f 	rsub	r12,r12,31
80008a48:	16 99       	mov	r9,r11
80008a4a:	ab 7b       	lsl	r11,0xb
80008a4c:	bf bb       	sbr	r11,0x1f
80008a4e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008a52:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008a56:	a1 79       	lsl	r9,0x1
80008a58:	5e 2b       	reths	r11
80008a5a:	5c 3b       	neg	r11
80008a5c:	5e fb       	retal	r11

80008a5e <__avr32_f64_cmp_eq>:
80008a5e:	10 3a       	cp.w	r10,r8
80008a60:	f2 0b 13 00 	cpc	r11,r9
80008a64:	c0 80       	breq	80008a74 <__avr32_f64_cmp_eq+0x16>
80008a66:	a1 7b       	lsl	r11,0x1
80008a68:	a1 79       	lsl	r9,0x1
80008a6a:	14 4b       	or	r11,r10
80008a6c:	12 4b       	or	r11,r9
80008a6e:	10 4b       	or	r11,r8
80008a70:	5e 0f       	reteq	1
80008a72:	5e fd       	retal	0
80008a74:	a1 7b       	lsl	r11,0x1
80008a76:	fc 1c ff e0 	movh	r12,0xffe0
80008a7a:	58 0a       	cp.w	r10,0
80008a7c:	f8 0b 13 00 	cpc	r11,r12
80008a80:	5e 8f       	retls	1
80008a82:	5e fd       	retal	0

80008a84 <__avr32_f64_cmp_ge>:
80008a84:	1a de       	st.w	--sp,lr
80008a86:	1a d7       	st.w	--sp,r7
80008a88:	a1 7b       	lsl	r11,0x1
80008a8a:	5f 3c       	srlo	r12
80008a8c:	a1 79       	lsl	r9,0x1
80008a8e:	5f 37       	srlo	r7
80008a90:	5c fc       	rol	r12
80008a92:	fc 1e ff e0 	movh	lr,0xffe0
80008a96:	58 0a       	cp.w	r10,0
80008a98:	fc 0b 13 00 	cpc	r11,lr
80008a9c:	e0 8b 00 1d 	brhi	80008ad6 <__avr32_f64_cmp_ge+0x52>
80008aa0:	58 08       	cp.w	r8,0
80008aa2:	fc 09 13 00 	cpc	r9,lr
80008aa6:	e0 8b 00 18 	brhi	80008ad6 <__avr32_f64_cmp_ge+0x52>
80008aaa:	58 0b       	cp.w	r11,0
80008aac:	f5 ba 00 00 	subfeq	r10,0
80008ab0:	c1 50       	breq	80008ada <__avr32_f64_cmp_ge+0x56>
80008ab2:	1b 07       	ld.w	r7,sp++
80008ab4:	1b 0e       	ld.w	lr,sp++
80008ab6:	58 3c       	cp.w	r12,3
80008ab8:	c0 a0       	breq	80008acc <__avr32_f64_cmp_ge+0x48>
80008aba:	58 1c       	cp.w	r12,1
80008abc:	c0 33       	brcs	80008ac2 <__avr32_f64_cmp_ge+0x3e>
80008abe:	5e 0f       	reteq	1
80008ac0:	5e 1d       	retne	0
80008ac2:	10 3a       	cp.w	r10,r8
80008ac4:	f2 0b 13 00 	cpc	r11,r9
80008ac8:	5e 2f       	reths	1
80008aca:	5e 3d       	retlo	0
80008acc:	14 38       	cp.w	r8,r10
80008ace:	f6 09 13 00 	cpc	r9,r11
80008ad2:	5e 2f       	reths	1
80008ad4:	5e 3d       	retlo	0
80008ad6:	1b 07       	ld.w	r7,sp++
80008ad8:	d8 0a       	popm	pc,r12=0
80008ada:	58 17       	cp.w	r7,1
80008adc:	5f 0c       	sreq	r12
80008ade:	58 09       	cp.w	r9,0
80008ae0:	f5 b8 00 00 	subfeq	r8,0
80008ae4:	1b 07       	ld.w	r7,sp++
80008ae6:	1b 0e       	ld.w	lr,sp++
80008ae8:	5e 0f       	reteq	1
80008aea:	5e fc       	retal	r12

80008aec <__avr32_f64_cmp_lt>:
80008aec:	1a de       	st.w	--sp,lr
80008aee:	1a d7       	st.w	--sp,r7
80008af0:	a1 7b       	lsl	r11,0x1
80008af2:	5f 3c       	srlo	r12
80008af4:	a1 79       	lsl	r9,0x1
80008af6:	5f 37       	srlo	r7
80008af8:	5c fc       	rol	r12
80008afa:	fc 1e ff e0 	movh	lr,0xffe0
80008afe:	58 0a       	cp.w	r10,0
80008b00:	fc 0b 13 00 	cpc	r11,lr
80008b04:	e0 8b 00 1d 	brhi	80008b3e <__avr32_f64_cmp_lt+0x52>
80008b08:	58 08       	cp.w	r8,0
80008b0a:	fc 09 13 00 	cpc	r9,lr
80008b0e:	e0 8b 00 18 	brhi	80008b3e <__avr32_f64_cmp_lt+0x52>
80008b12:	58 0b       	cp.w	r11,0
80008b14:	f5 ba 00 00 	subfeq	r10,0
80008b18:	c1 50       	breq	80008b42 <__avr32_f64_cmp_lt+0x56>
80008b1a:	1b 07       	ld.w	r7,sp++
80008b1c:	1b 0e       	ld.w	lr,sp++
80008b1e:	58 3c       	cp.w	r12,3
80008b20:	c0 a0       	breq	80008b34 <__avr32_f64_cmp_lt+0x48>
80008b22:	58 1c       	cp.w	r12,1
80008b24:	c0 33       	brcs	80008b2a <__avr32_f64_cmp_lt+0x3e>
80008b26:	5e 0d       	reteq	0
80008b28:	5e 1f       	retne	1
80008b2a:	10 3a       	cp.w	r10,r8
80008b2c:	f2 0b 13 00 	cpc	r11,r9
80008b30:	5e 2d       	reths	0
80008b32:	5e 3f       	retlo	1
80008b34:	14 38       	cp.w	r8,r10
80008b36:	f6 09 13 00 	cpc	r9,r11
80008b3a:	5e 2d       	reths	0
80008b3c:	5e 3f       	retlo	1
80008b3e:	1b 07       	ld.w	r7,sp++
80008b40:	d8 0a       	popm	pc,r12=0
80008b42:	58 17       	cp.w	r7,1
80008b44:	5f 1c       	srne	r12
80008b46:	58 09       	cp.w	r9,0
80008b48:	f5 b8 00 00 	subfeq	r8,0
80008b4c:	1b 07       	ld.w	r7,sp++
80008b4e:	1b 0e       	ld.w	lr,sp++
80008b50:	5e 0d       	reteq	0
80008b52:	5e fc       	retal	r12

80008b54 <__avr32_f64_div>:
80008b54:	eb cd 40 ff 	pushm	r0-r7,lr
80008b58:	f7 e9 20 0e 	eor	lr,r11,r9
80008b5c:	f6 07 16 14 	lsr	r7,r11,0x14
80008b60:	a9 7b       	lsl	r11,0x9
80008b62:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008b66:	a9 7a       	lsl	r10,0x9
80008b68:	bd bb       	sbr	r11,0x1d
80008b6a:	e4 1b 3f ff 	andh	r11,0x3fff
80008b6e:	ab d7       	cbr	r7,0xb
80008b70:	e0 80 00 cc 	breq	80008d08 <__avr32_f64_div_round_subnormal+0x54>
80008b74:	e0 47 07 ff 	cp.w	r7,2047
80008b78:	e0 84 00 b5 	brge	80008ce2 <__avr32_f64_div_round_subnormal+0x2e>
80008b7c:	f2 06 16 14 	lsr	r6,r9,0x14
80008b80:	a9 79       	lsl	r9,0x9
80008b82:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008b86:	a9 78       	lsl	r8,0x9
80008b88:	bd b9       	sbr	r9,0x1d
80008b8a:	e4 19 3f ff 	andh	r9,0x3fff
80008b8e:	ab d6       	cbr	r6,0xb
80008b90:	e0 80 00 e2 	breq	80008d54 <__avr32_f64_div_round_subnormal+0xa0>
80008b94:	e0 46 07 ff 	cp.w	r6,2047
80008b98:	e0 84 00 b2 	brge	80008cfc <__avr32_f64_div_round_subnormal+0x48>
80008b9c:	0c 17       	sub	r7,r6
80008b9e:	fe 37 fc 01 	sub	r7,-1023
80008ba2:	fc 1c 80 00 	movh	r12,0x8000
80008ba6:	f8 03 16 01 	lsr	r3,r12,0x1
80008baa:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008bae:	5c d4       	com	r4
80008bb0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008bb4:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bb8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008bbc:	e6 05 06 44 	mulu.d	r4,r3,r5
80008bc0:	ea 03 15 02 	lsl	r3,r5,0x2
80008bc4:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bc8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008bcc:	e6 05 06 44 	mulu.d	r4,r3,r5
80008bd0:	ea 03 15 02 	lsl	r3,r5,0x2
80008bd4:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bd8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008bdc:	e6 05 06 44 	mulu.d	r4,r3,r5
80008be0:	ea 03 15 02 	lsl	r3,r5,0x2
80008be4:	e6 08 06 40 	mulu.d	r0,r3,r8
80008be8:	e4 09 07 40 	macu.d	r0,r2,r9
80008bec:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bf0:	02 04       	add	r4,r1
80008bf2:	5c 05       	acr	r5
80008bf4:	a3 65       	lsl	r5,0x2
80008bf6:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008bfa:	a3 64       	lsl	r4,0x2
80008bfc:	5c 34       	neg	r4
80008bfe:	f8 05 01 45 	sbc	r5,r12,r5
80008c02:	e6 04 06 40 	mulu.d	r0,r3,r4
80008c06:	e4 05 07 40 	macu.d	r0,r2,r5
80008c0a:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c0e:	02 04       	add	r4,r1
80008c10:	5c 05       	acr	r5
80008c12:	ea 03 15 02 	lsl	r3,r5,0x2
80008c16:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008c1a:	e8 02 15 02 	lsl	r2,r4,0x2
80008c1e:	e6 08 06 40 	mulu.d	r0,r3,r8
80008c22:	e4 09 07 40 	macu.d	r0,r2,r9
80008c26:	e6 09 06 44 	mulu.d	r4,r3,r9
80008c2a:	02 04       	add	r4,r1
80008c2c:	5c 05       	acr	r5
80008c2e:	a3 65       	lsl	r5,0x2
80008c30:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008c34:	a3 64       	lsl	r4,0x2
80008c36:	5c 34       	neg	r4
80008c38:	f8 05 01 45 	sbc	r5,r12,r5
80008c3c:	e6 04 06 40 	mulu.d	r0,r3,r4
80008c40:	e4 05 07 40 	macu.d	r0,r2,r5
80008c44:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c48:	02 04       	add	r4,r1
80008c4a:	5c 05       	acr	r5
80008c4c:	ea 03 15 02 	lsl	r3,r5,0x2
80008c50:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008c54:	e8 02 15 02 	lsl	r2,r4,0x2
80008c58:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008c5c:	e4 0b 07 40 	macu.d	r0,r2,r11
80008c60:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008c64:	02 02       	add	r2,r1
80008c66:	5c 03       	acr	r3
80008c68:	ed b3 00 1c 	bld	r3,0x1c
80008c6c:	c0 90       	breq	80008c7e <__avr32_f64_div+0x12a>
80008c6e:	a1 72       	lsl	r2,0x1
80008c70:	5c f3       	rol	r3
80008c72:	20 17       	sub	r7,1
80008c74:	a3 9a       	lsr	r10,0x3
80008c76:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008c7a:	a3 9b       	lsr	r11,0x3
80008c7c:	c0 58       	rjmp	80008c86 <__avr32_f64_div+0x132>
80008c7e:	a5 8a       	lsr	r10,0x4
80008c80:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008c84:	a5 8b       	lsr	r11,0x4
80008c86:	58 07       	cp.w	r7,0
80008c88:	e0 8a 00 8b 	brle	80008d9e <__avr32_f64_div_res_subnormal>
80008c8c:	e0 12 ff 00 	andl	r2,0xff00
80008c90:	e8 12 00 80 	orl	r2,0x80
80008c94:	e6 08 06 40 	mulu.d	r0,r3,r8
80008c98:	e4 09 07 40 	macu.d	r0,r2,r9
80008c9c:	e4 08 06 44 	mulu.d	r4,r2,r8
80008ca0:	e6 09 06 48 	mulu.d	r8,r3,r9
80008ca4:	00 05       	add	r5,r0
80008ca6:	f0 01 00 48 	adc	r8,r8,r1
80008caa:	5c 09       	acr	r9
80008cac:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008cb0:	58 04       	cp.w	r4,0
80008cb2:	5c 25       	cpc	r5

80008cb4 <__avr32_f64_div_round_subnormal>:
80008cb4:	f4 08 13 00 	cpc	r8,r10
80008cb8:	f6 09 13 00 	cpc	r9,r11
80008cbc:	5f 36       	srlo	r6
80008cbe:	f8 06 17 00 	moveq	r6,r12
80008cc2:	e4 0a 16 08 	lsr	r10,r2,0x8
80008cc6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008cca:	e6 0b 16 08 	lsr	r11,r3,0x8
80008cce:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008cd2:	ed be 00 1f 	bld	lr,0x1f
80008cd6:	ef bb 00 1f 	bst	r11,0x1f
80008cda:	0c 0a       	add	r10,r6
80008cdc:	5c 0b       	acr	r11
80008cde:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008ce2:	e4 1b 00 0f 	andh	r11,0xf
80008ce6:	14 4b       	or	r11,r10
80008ce8:	e0 81 00 a7 	brne	80008e36 <__avr32_f64_div_res_subnormal+0x98>
80008cec:	f2 06 16 14 	lsr	r6,r9,0x14
80008cf0:	ab d6       	cbr	r6,0xb
80008cf2:	e0 46 07 ff 	cp.w	r6,2047
80008cf6:	e0 81 00 a4 	brne	80008e3e <__avr32_f64_div_res_subnormal+0xa0>
80008cfa:	c9 e8       	rjmp	80008e36 <__avr32_f64_div_res_subnormal+0x98>
80008cfc:	e4 19 00 0f 	andh	r9,0xf
80008d00:	10 49       	or	r9,r8
80008d02:	e0 81 00 9a 	brne	80008e36 <__avr32_f64_div_res_subnormal+0x98>
80008d06:	c9 28       	rjmp	80008e2a <__avr32_f64_div_res_subnormal+0x8c>
80008d08:	a3 7b       	lsl	r11,0x3
80008d0a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008d0e:	a3 7a       	lsl	r10,0x3
80008d10:	f5 eb 10 04 	or	r4,r10,r11
80008d14:	e0 80 00 a0 	breq	80008e54 <__avr32_f64_div_op1_zero>
80008d18:	f6 04 12 00 	clz	r4,r11
80008d1c:	c1 70       	breq	80008d4a <__avr32_f64_div_round_subnormal+0x96>
80008d1e:	c0 c3       	brcs	80008d36 <__avr32_f64_div_round_subnormal+0x82>
80008d20:	e8 05 11 20 	rsub	r5,r4,32
80008d24:	f6 04 09 4b 	lsl	r11,r11,r4
80008d28:	f4 05 0a 45 	lsr	r5,r10,r5
80008d2c:	0a 4b       	or	r11,r5
80008d2e:	f4 04 09 4a 	lsl	r10,r10,r4
80008d32:	08 17       	sub	r7,r4
80008d34:	c0 b8       	rjmp	80008d4a <__avr32_f64_div_round_subnormal+0x96>
80008d36:	f4 04 12 00 	clz	r4,r10
80008d3a:	f9 b4 03 00 	movlo	r4,0
80008d3e:	f7 b4 02 e0 	subhs	r4,-32
80008d42:	f4 04 09 4b 	lsl	r11,r10,r4
80008d46:	30 0a       	mov	r10,0
80008d48:	08 17       	sub	r7,r4
80008d4a:	a3 8a       	lsr	r10,0x2
80008d4c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008d50:	a3 8b       	lsr	r11,0x2
80008d52:	c1 1b       	rjmp	80008b74 <__avr32_f64_div+0x20>
80008d54:	a3 79       	lsl	r9,0x3
80008d56:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008d5a:	a3 78       	lsl	r8,0x3
80008d5c:	f3 e8 10 04 	or	r4,r9,r8
80008d60:	c6 f0       	breq	80008e3e <__avr32_f64_div_res_subnormal+0xa0>
80008d62:	f2 04 12 00 	clz	r4,r9
80008d66:	c1 70       	breq	80008d94 <__avr32_f64_div_round_subnormal+0xe0>
80008d68:	c0 c3       	brcs	80008d80 <__avr32_f64_div_round_subnormal+0xcc>
80008d6a:	e8 05 11 20 	rsub	r5,r4,32
80008d6e:	f2 04 09 49 	lsl	r9,r9,r4
80008d72:	f0 05 0a 45 	lsr	r5,r8,r5
80008d76:	0a 49       	or	r9,r5
80008d78:	f0 04 09 48 	lsl	r8,r8,r4
80008d7c:	08 16       	sub	r6,r4
80008d7e:	c0 b8       	rjmp	80008d94 <__avr32_f64_div_round_subnormal+0xe0>
80008d80:	f0 04 12 00 	clz	r4,r8
80008d84:	f9 b4 03 00 	movlo	r4,0
80008d88:	f7 b4 02 e0 	subhs	r4,-32
80008d8c:	f0 04 09 49 	lsl	r9,r8,r4
80008d90:	30 08       	mov	r8,0
80008d92:	08 16       	sub	r6,r4
80008d94:	a3 88       	lsr	r8,0x2
80008d96:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008d9a:	a3 89       	lsr	r9,0x2
80008d9c:	cf ca       	rjmp	80008b94 <__avr32_f64_div+0x40>

80008d9e <__avr32_f64_div_res_subnormal>:
80008d9e:	5c 37       	neg	r7
80008da0:	2f f7       	sub	r7,-1
80008da2:	f1 b7 04 c0 	satu	r7,0x6
80008da6:	e0 47 00 20 	cp.w	r7,32
80008daa:	c1 54       	brge	80008dd4 <__avr32_f64_div_res_subnormal+0x36>
80008dac:	ee 06 11 20 	rsub	r6,r7,32
80008db0:	e4 07 0a 42 	lsr	r2,r2,r7
80008db4:	e6 06 09 4c 	lsl	r12,r3,r6
80008db8:	18 42       	or	r2,r12
80008dba:	e6 07 0a 43 	lsr	r3,r3,r7
80008dbe:	f4 06 09 41 	lsl	r1,r10,r6
80008dc2:	f4 07 0a 4a 	lsr	r10,r10,r7
80008dc6:	f6 06 09 4c 	lsl	r12,r11,r6
80008dca:	18 4a       	or	r10,r12
80008dcc:	f6 07 0a 4b 	lsr	r11,r11,r7
80008dd0:	30 00       	mov	r0,0
80008dd2:	c1 58       	rjmp	80008dfc <__avr32_f64_div_res_subnormal+0x5e>
80008dd4:	ee 06 11 20 	rsub	r6,r7,32
80008dd8:	f9 b0 00 00 	moveq	r0,0
80008ddc:	f9 bc 00 00 	moveq	r12,0
80008de0:	c0 50       	breq	80008dea <__avr32_f64_div_res_subnormal+0x4c>
80008de2:	f4 06 09 40 	lsl	r0,r10,r6
80008de6:	f6 06 09 4c 	lsl	r12,r11,r6
80008dea:	e6 07 0a 42 	lsr	r2,r3,r7
80008dee:	30 03       	mov	r3,0
80008df0:	f4 07 0a 41 	lsr	r1,r10,r7
80008df4:	18 41       	or	r1,r12
80008df6:	f6 07 0a 4a 	lsr	r10,r11,r7
80008dfa:	30 0b       	mov	r11,0
80008dfc:	e0 12 ff 00 	andl	r2,0xff00
80008e00:	e8 12 00 80 	orl	r2,0x80
80008e04:	e6 08 06 46 	mulu.d	r6,r3,r8
80008e08:	e4 09 07 46 	macu.d	r6,r2,r9
80008e0c:	e4 08 06 44 	mulu.d	r4,r2,r8
80008e10:	e6 09 06 48 	mulu.d	r8,r3,r9
80008e14:	0c 05       	add	r5,r6
80008e16:	f0 07 00 48 	adc	r8,r8,r7
80008e1a:	5c 09       	acr	r9
80008e1c:	30 07       	mov	r7,0
80008e1e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008e22:	00 34       	cp.w	r4,r0
80008e24:	e2 05 13 00 	cpc	r5,r1
80008e28:	c4 6b       	rjmp	80008cb4 <__avr32_f64_div_round_subnormal>
80008e2a:	1c 9b       	mov	r11,lr
80008e2c:	e6 1b 80 00 	andh	r11,0x8000,COH
80008e30:	30 0a       	mov	r10,0
80008e32:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008e36:	3f fb       	mov	r11,-1
80008e38:	30 0a       	mov	r10,0
80008e3a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008e3e:	f5 eb 10 04 	or	r4,r10,r11
80008e42:	c0 90       	breq	80008e54 <__avr32_f64_div_op1_zero>
80008e44:	1c 9b       	mov	r11,lr
80008e46:	e6 1b 80 00 	andh	r11,0x8000,COH
80008e4a:	ea 1b 7f f0 	orh	r11,0x7ff0
80008e4e:	30 0a       	mov	r10,0
80008e50:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008e54 <__avr32_f64_div_op1_zero>:
80008e54:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008e58:	ce f0       	breq	80008e36 <__avr32_f64_div_res_subnormal+0x98>
80008e5a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008e5e:	e0 44 07 ff 	cp.w	r4,2047
80008e62:	ce 41       	brne	80008e2a <__avr32_f64_div_res_subnormal+0x8c>
80008e64:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008e68:	ce 10       	breq	80008e2a <__avr32_f64_div_res_subnormal+0x8c>
80008e6a:	ce 6b       	rjmp	80008e36 <__avr32_f64_div_res_subnormal+0x98>

80008e6c <__avr32_udiv64>:
80008e6c:	d4 31       	pushm	r0-r7,lr
80008e6e:	1a 97       	mov	r7,sp
80008e70:	20 3d       	sub	sp,12
80008e72:	10 9c       	mov	r12,r8
80008e74:	12 9e       	mov	lr,r9
80008e76:	14 93       	mov	r3,r10
80008e78:	58 09       	cp.w	r9,0
80008e7a:	e0 81 00 bd 	brne	80008ff4 <__avr32_udiv64+0x188>
80008e7e:	16 38       	cp.w	r8,r11
80008e80:	e0 88 00 40 	brls	80008f00 <__avr32_udiv64+0x94>
80008e84:	f0 08 12 00 	clz	r8,r8
80008e88:	c0 d0       	breq	80008ea2 <__avr32_udiv64+0x36>
80008e8a:	f6 08 09 4b 	lsl	r11,r11,r8
80008e8e:	f0 09 11 20 	rsub	r9,r8,32
80008e92:	f8 08 09 4c 	lsl	r12,r12,r8
80008e96:	f4 09 0a 49 	lsr	r9,r10,r9
80008e9a:	f4 08 09 43 	lsl	r3,r10,r8
80008e9e:	f3 eb 10 0b 	or	r11,r9,r11
80008ea2:	f8 0e 16 10 	lsr	lr,r12,0x10
80008ea6:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008eaa:	f6 0e 0d 00 	divu	r0,r11,lr
80008eae:	e6 0b 16 10 	lsr	r11,r3,0x10
80008eb2:	00 99       	mov	r9,r0
80008eb4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008eb8:	e0 0a 02 48 	mul	r8,r0,r10
80008ebc:	10 3b       	cp.w	r11,r8
80008ebe:	c0 a2       	brcc	80008ed2 <__avr32_udiv64+0x66>
80008ec0:	20 19       	sub	r9,1
80008ec2:	18 0b       	add	r11,r12
80008ec4:	18 3b       	cp.w	r11,r12
80008ec6:	c0 63       	brcs	80008ed2 <__avr32_udiv64+0x66>
80008ec8:	10 3b       	cp.w	r11,r8
80008eca:	f7 b9 03 01 	sublo	r9,1
80008ece:	f7 dc e3 0b 	addcs	r11,r11,r12
80008ed2:	f6 08 01 01 	sub	r1,r11,r8
80008ed6:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008eda:	e2 0e 0d 00 	divu	r0,r1,lr
80008ede:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008ee2:	00 98       	mov	r8,r0
80008ee4:	e0 0a 02 4a 	mul	r10,r0,r10
80008ee8:	14 33       	cp.w	r3,r10
80008eea:	c0 82       	brcc	80008efa <__avr32_udiv64+0x8e>
80008eec:	20 18       	sub	r8,1
80008eee:	18 03       	add	r3,r12
80008ef0:	18 33       	cp.w	r3,r12
80008ef2:	c0 43       	brcs	80008efa <__avr32_udiv64+0x8e>
80008ef4:	14 33       	cp.w	r3,r10
80008ef6:	f7 b8 03 01 	sublo	r8,1
80008efa:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008efe:	cd f8       	rjmp	800090bc <__avr32_udiv64+0x250>
80008f00:	58 08       	cp.w	r8,0
80008f02:	c0 51       	brne	80008f0c <__avr32_udiv64+0xa0>
80008f04:	30 19       	mov	r9,1
80008f06:	f2 08 0d 08 	divu	r8,r9,r8
80008f0a:	10 9c       	mov	r12,r8
80008f0c:	f8 06 12 00 	clz	r6,r12
80008f10:	c0 41       	brne	80008f18 <__avr32_udiv64+0xac>
80008f12:	18 1b       	sub	r11,r12
80008f14:	30 19       	mov	r9,1
80008f16:	c4 08       	rjmp	80008f96 <__avr32_udiv64+0x12a>
80008f18:	ec 01 11 20 	rsub	r1,r6,32
80008f1c:	f4 01 0a 49 	lsr	r9,r10,r1
80008f20:	f8 06 09 4c 	lsl	r12,r12,r6
80008f24:	f6 06 09 48 	lsl	r8,r11,r6
80008f28:	f6 01 0a 41 	lsr	r1,r11,r1
80008f2c:	f3 e8 10 08 	or	r8,r9,r8
80008f30:	f8 03 16 10 	lsr	r3,r12,0x10
80008f34:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008f38:	e2 03 0d 00 	divu	r0,r1,r3
80008f3c:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f40:	00 9e       	mov	lr,r0
80008f42:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008f46:	e0 05 02 49 	mul	r9,r0,r5
80008f4a:	12 3b       	cp.w	r11,r9
80008f4c:	c0 a2       	brcc	80008f60 <__avr32_udiv64+0xf4>
80008f4e:	20 1e       	sub	lr,1
80008f50:	18 0b       	add	r11,r12
80008f52:	18 3b       	cp.w	r11,r12
80008f54:	c0 63       	brcs	80008f60 <__avr32_udiv64+0xf4>
80008f56:	12 3b       	cp.w	r11,r9
80008f58:	f7 be 03 01 	sublo	lr,1
80008f5c:	f7 dc e3 0b 	addcs	r11,r11,r12
80008f60:	12 1b       	sub	r11,r9
80008f62:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008f66:	f6 03 0d 02 	divu	r2,r11,r3
80008f6a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008f6e:	04 99       	mov	r9,r2
80008f70:	e4 05 02 4b 	mul	r11,r2,r5
80008f74:	16 38       	cp.w	r8,r11
80008f76:	c0 a2       	brcc	80008f8a <__avr32_udiv64+0x11e>
80008f78:	20 19       	sub	r9,1
80008f7a:	18 08       	add	r8,r12
80008f7c:	18 38       	cp.w	r8,r12
80008f7e:	c0 63       	brcs	80008f8a <__avr32_udiv64+0x11e>
80008f80:	16 38       	cp.w	r8,r11
80008f82:	f7 b9 03 01 	sublo	r9,1
80008f86:	f1 dc e3 08 	addcs	r8,r8,r12
80008f8a:	f4 06 09 43 	lsl	r3,r10,r6
80008f8e:	f0 0b 01 0b 	sub	r11,r8,r11
80008f92:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008f96:	f8 06 16 10 	lsr	r6,r12,0x10
80008f9a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008f9e:	f6 06 0d 00 	divu	r0,r11,r6
80008fa2:	e6 0b 16 10 	lsr	r11,r3,0x10
80008fa6:	00 9a       	mov	r10,r0
80008fa8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008fac:	e0 0e 02 48 	mul	r8,r0,lr
80008fb0:	10 3b       	cp.w	r11,r8
80008fb2:	c0 a2       	brcc	80008fc6 <__avr32_udiv64+0x15a>
80008fb4:	20 1a       	sub	r10,1
80008fb6:	18 0b       	add	r11,r12
80008fb8:	18 3b       	cp.w	r11,r12
80008fba:	c0 63       	brcs	80008fc6 <__avr32_udiv64+0x15a>
80008fbc:	10 3b       	cp.w	r11,r8
80008fbe:	f7 ba 03 01 	sublo	r10,1
80008fc2:	f7 dc e3 0b 	addcs	r11,r11,r12
80008fc6:	f6 08 01 01 	sub	r1,r11,r8
80008fca:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008fce:	e2 06 0d 00 	divu	r0,r1,r6
80008fd2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008fd6:	00 98       	mov	r8,r0
80008fd8:	e0 0e 02 4b 	mul	r11,r0,lr
80008fdc:	16 33       	cp.w	r3,r11
80008fde:	c0 82       	brcc	80008fee <__avr32_udiv64+0x182>
80008fe0:	20 18       	sub	r8,1
80008fe2:	18 03       	add	r3,r12
80008fe4:	18 33       	cp.w	r3,r12
80008fe6:	c0 43       	brcs	80008fee <__avr32_udiv64+0x182>
80008fe8:	16 33       	cp.w	r3,r11
80008fea:	f7 b8 03 01 	sublo	r8,1
80008fee:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008ff2:	c6 98       	rjmp	800090c4 <__avr32_udiv64+0x258>
80008ff4:	16 39       	cp.w	r9,r11
80008ff6:	e0 8b 00 65 	brhi	800090c0 <__avr32_udiv64+0x254>
80008ffa:	f2 09 12 00 	clz	r9,r9
80008ffe:	c0 b1       	brne	80009014 <__avr32_udiv64+0x1a8>
80009000:	10 3a       	cp.w	r10,r8
80009002:	5f 2a       	srhs	r10
80009004:	1c 3b       	cp.w	r11,lr
80009006:	5f b8       	srhi	r8
80009008:	10 4a       	or	r10,r8
8000900a:	f2 0a 18 00 	cp.b	r10,r9
8000900e:	c5 90       	breq	800090c0 <__avr32_udiv64+0x254>
80009010:	30 18       	mov	r8,1
80009012:	c5 98       	rjmp	800090c4 <__avr32_udiv64+0x258>
80009014:	f0 09 09 46 	lsl	r6,r8,r9
80009018:	f2 03 11 20 	rsub	r3,r9,32
8000901c:	fc 09 09 4e 	lsl	lr,lr,r9
80009020:	f0 03 0a 48 	lsr	r8,r8,r3
80009024:	f6 09 09 4c 	lsl	r12,r11,r9
80009028:	f4 03 0a 42 	lsr	r2,r10,r3
8000902c:	ef 46 ff f4 	st.w	r7[-12],r6
80009030:	f6 03 0a 43 	lsr	r3,r11,r3
80009034:	18 42       	or	r2,r12
80009036:	f1 ee 10 0c 	or	r12,r8,lr
8000903a:	f8 01 16 10 	lsr	r1,r12,0x10
8000903e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009042:	e6 01 0d 04 	divu	r4,r3,r1
80009046:	e4 03 16 10 	lsr	r3,r2,0x10
8000904a:	08 9e       	mov	lr,r4
8000904c:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009050:	e8 06 02 48 	mul	r8,r4,r6
80009054:	10 33       	cp.w	r3,r8
80009056:	c0 a2       	brcc	8000906a <__avr32_udiv64+0x1fe>
80009058:	20 1e       	sub	lr,1
8000905a:	18 03       	add	r3,r12
8000905c:	18 33       	cp.w	r3,r12
8000905e:	c0 63       	brcs	8000906a <__avr32_udiv64+0x1fe>
80009060:	10 33       	cp.w	r3,r8
80009062:	f7 be 03 01 	sublo	lr,1
80009066:	e7 dc e3 03 	addcs	r3,r3,r12
8000906a:	10 13       	sub	r3,r8
8000906c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80009070:	e6 01 0d 00 	divu	r0,r3,r1
80009074:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009078:	00 98       	mov	r8,r0
8000907a:	e0 06 02 46 	mul	r6,r0,r6
8000907e:	0c 3b       	cp.w	r11,r6
80009080:	c0 a2       	brcc	80009094 <__avr32_udiv64+0x228>
80009082:	20 18       	sub	r8,1
80009084:	18 0b       	add	r11,r12
80009086:	18 3b       	cp.w	r11,r12
80009088:	c0 63       	brcs	80009094 <__avr32_udiv64+0x228>
8000908a:	0c 3b       	cp.w	r11,r6
8000908c:	f7 dc e3 0b 	addcs	r11,r11,r12
80009090:	f7 b8 03 01 	sublo	r8,1
80009094:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80009098:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000909c:	0c 1b       	sub	r11,r6
8000909e:	f0 04 06 42 	mulu.d	r2,r8,r4
800090a2:	06 95       	mov	r5,r3
800090a4:	16 35       	cp.w	r5,r11
800090a6:	e0 8b 00 0a 	brhi	800090ba <__avr32_udiv64+0x24e>
800090aa:	5f 0b       	sreq	r11
800090ac:	f4 09 09 49 	lsl	r9,r10,r9
800090b0:	12 32       	cp.w	r2,r9
800090b2:	5f b9       	srhi	r9
800090b4:	f7 e9 00 09 	and	r9,r11,r9
800090b8:	c0 60       	breq	800090c4 <__avr32_udiv64+0x258>
800090ba:	20 18       	sub	r8,1
800090bc:	30 09       	mov	r9,0
800090be:	c0 38       	rjmp	800090c4 <__avr32_udiv64+0x258>
800090c0:	30 09       	mov	r9,0
800090c2:	12 98       	mov	r8,r9
800090c4:	10 9a       	mov	r10,r8
800090c6:	12 93       	mov	r3,r9
800090c8:	10 92       	mov	r2,r8
800090ca:	12 9b       	mov	r11,r9
800090cc:	2f dd       	sub	sp,-12
800090ce:	d8 32       	popm	r0-r7,pc

800090d0 <__avr32_umod64>:
800090d0:	d4 31       	pushm	r0-r7,lr
800090d2:	1a 97       	mov	r7,sp
800090d4:	20 3d       	sub	sp,12
800090d6:	10 9c       	mov	r12,r8
800090d8:	12 95       	mov	r5,r9
800090da:	14 9e       	mov	lr,r10
800090dc:	16 91       	mov	r1,r11
800090de:	16 96       	mov	r6,r11
800090e0:	58 09       	cp.w	r9,0
800090e2:	e0 81 00 81 	brne	800091e4 <__avr32_umod64+0x114>
800090e6:	16 38       	cp.w	r8,r11
800090e8:	e0 88 00 12 	brls	8000910c <__avr32_umod64+0x3c>
800090ec:	f0 08 12 00 	clz	r8,r8
800090f0:	c4 e0       	breq	8000918c <__avr32_umod64+0xbc>
800090f2:	f6 08 09 46 	lsl	r6,r11,r8
800090f6:	f8 08 09 4c 	lsl	r12,r12,r8
800090fa:	f0 0b 11 20 	rsub	r11,r8,32
800090fe:	f4 08 09 4e 	lsl	lr,r10,r8
80009102:	f4 0b 0a 4b 	lsr	r11,r10,r11
80009106:	f7 e6 10 06 	or	r6,r11,r6
8000910a:	c4 18       	rjmp	8000918c <__avr32_umod64+0xbc>
8000910c:	58 08       	cp.w	r8,0
8000910e:	c0 51       	brne	80009118 <__avr32_umod64+0x48>
80009110:	30 19       	mov	r9,1
80009112:	f2 08 0d 08 	divu	r8,r9,r8
80009116:	10 9c       	mov	r12,r8
80009118:	f8 08 12 00 	clz	r8,r12
8000911c:	c0 31       	brne	80009122 <__avr32_umod64+0x52>
8000911e:	18 16       	sub	r6,r12
80009120:	c3 68       	rjmp	8000918c <__avr32_umod64+0xbc>
80009122:	f0 03 11 20 	rsub	r3,r8,32
80009126:	f4 03 0a 4b 	lsr	r11,r10,r3
8000912a:	f8 08 09 4c 	lsl	r12,r12,r8
8000912e:	ec 08 09 49 	lsl	r9,r6,r8
80009132:	ec 03 0a 43 	lsr	r3,r6,r3
80009136:	f7 e9 10 09 	or	r9,r11,r9
8000913a:	f8 05 16 10 	lsr	r5,r12,0x10
8000913e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009142:	e6 05 0d 02 	divu	r2,r3,r5
80009146:	f2 0e 16 10 	lsr	lr,r9,0x10
8000914a:	ec 02 02 4b 	mul	r11,r6,r2
8000914e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009152:	16 3e       	cp.w	lr,r11
80009154:	c0 72       	brcc	80009162 <__avr32_umod64+0x92>
80009156:	18 0e       	add	lr,r12
80009158:	18 3e       	cp.w	lr,r12
8000915a:	c0 43       	brcs	80009162 <__avr32_umod64+0x92>
8000915c:	16 3e       	cp.w	lr,r11
8000915e:	fd dc e3 0e 	addcs	lr,lr,r12
80009162:	fc 0b 01 03 	sub	r3,lr,r11
80009166:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000916a:	e6 05 0d 02 	divu	r2,r3,r5
8000916e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009172:	a5 36       	mul	r6,r2
80009174:	0c 39       	cp.w	r9,r6
80009176:	c0 72       	brcc	80009184 <__avr32_umod64+0xb4>
80009178:	18 09       	add	r9,r12
8000917a:	18 39       	cp.w	r9,r12
8000917c:	c0 43       	brcs	80009184 <__avr32_umod64+0xb4>
8000917e:	0c 39       	cp.w	r9,r6
80009180:	f3 dc e3 09 	addcs	r9,r9,r12
80009184:	f2 06 01 06 	sub	r6,r9,r6
80009188:	f4 08 09 4e 	lsl	lr,r10,r8
8000918c:	f8 0a 16 10 	lsr	r10,r12,0x10
80009190:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009194:	ec 0a 0d 02 	divu	r2,r6,r10
80009198:	fc 09 16 10 	lsr	r9,lr,0x10
8000919c:	ea 02 02 4b 	mul	r11,r5,r2
800091a0:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800091a4:	16 39       	cp.w	r9,r11
800091a6:	c0 72       	brcc	800091b4 <__avr32_umod64+0xe4>
800091a8:	18 09       	add	r9,r12
800091aa:	18 39       	cp.w	r9,r12
800091ac:	c0 43       	brcs	800091b4 <__avr32_umod64+0xe4>
800091ae:	16 39       	cp.w	r9,r11
800091b0:	f3 dc e3 09 	addcs	r9,r9,r12
800091b4:	f2 0b 01 0b 	sub	r11,r9,r11
800091b8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800091bc:	f6 0a 0d 0a 	divu	r10,r11,r10
800091c0:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800091c4:	ea 0a 02 4a 	mul	r10,r5,r10
800091c8:	14 3e       	cp.w	lr,r10
800091ca:	c0 72       	brcc	800091d8 <__avr32_umod64+0x108>
800091cc:	18 0e       	add	lr,r12
800091ce:	18 3e       	cp.w	lr,r12
800091d0:	c0 43       	brcs	800091d8 <__avr32_umod64+0x108>
800091d2:	14 3e       	cp.w	lr,r10
800091d4:	fd dc e3 0e 	addcs	lr,lr,r12
800091d8:	fc 0a 01 0a 	sub	r10,lr,r10
800091dc:	30 0b       	mov	r11,0
800091de:	f4 08 0a 4a 	lsr	r10,r10,r8
800091e2:	c7 b8       	rjmp	800092d8 <__avr32_umod64+0x208>
800091e4:	16 39       	cp.w	r9,r11
800091e6:	e0 8b 00 79 	brhi	800092d8 <__avr32_umod64+0x208>
800091ea:	f2 09 12 00 	clz	r9,r9
800091ee:	c1 21       	brne	80009212 <__avr32_umod64+0x142>
800091f0:	10 3a       	cp.w	r10,r8
800091f2:	5f 2b       	srhs	r11
800091f4:	0a 31       	cp.w	r1,r5
800091f6:	5f ba       	srhi	r10
800091f8:	f7 ea 10 0a 	or	r10,r11,r10
800091fc:	f2 0a 18 00 	cp.b	r10,r9
80009200:	c0 60       	breq	8000920c <__avr32_umod64+0x13c>
80009202:	fc 08 01 0c 	sub	r12,lr,r8
80009206:	e2 05 01 46 	sbc	r6,r1,r5
8000920a:	18 9e       	mov	lr,r12
8000920c:	0c 9b       	mov	r11,r6
8000920e:	1c 9a       	mov	r10,lr
80009210:	c6 48       	rjmp	800092d8 <__avr32_umod64+0x208>
80009212:	ea 09 09 4c 	lsl	r12,r5,r9
80009216:	f2 06 11 20 	rsub	r6,r9,32
8000921a:	f6 09 09 4b 	lsl	r11,r11,r9
8000921e:	f0 09 09 42 	lsl	r2,r8,r9
80009222:	ef 46 ff f4 	st.w	r7[-12],r6
80009226:	f0 06 0a 48 	lsr	r8,r8,r6
8000922a:	18 48       	or	r8,r12
8000922c:	e2 06 0a 4c 	lsr	r12,r1,r6
80009230:	f4 09 09 43 	lsl	r3,r10,r9
80009234:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80009238:	f4 06 0a 4a 	lsr	r10,r10,r6
8000923c:	16 4a       	or	r10,r11
8000923e:	f0 0b 16 10 	lsr	r11,r8,0x10
80009242:	f8 0b 0d 04 	divu	r4,r12,r11
80009246:	f4 0c 16 10 	lsr	r12,r10,0x10
8000924a:	08 91       	mov	r1,r4
8000924c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009250:	e8 0e 02 46 	mul	r6,r4,lr
80009254:	0c 3c       	cp.w	r12,r6
80009256:	c0 a2       	brcc	8000926a <__avr32_umod64+0x19a>
80009258:	20 11       	sub	r1,1
8000925a:	10 0c       	add	r12,r8
8000925c:	10 3c       	cp.w	r12,r8
8000925e:	c0 63       	brcs	8000926a <__avr32_umod64+0x19a>
80009260:	0c 3c       	cp.w	r12,r6
80009262:	f7 b1 03 01 	sublo	r1,1
80009266:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000926a:	0c 1c       	sub	r12,r6
8000926c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009270:	f8 0b 0d 04 	divu	r4,r12,r11
80009274:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80009278:	08 96       	mov	r6,r4
8000927a:	e8 0e 02 4e 	mul	lr,r4,lr
8000927e:	1c 3b       	cp.w	r11,lr
80009280:	c0 a2       	brcc	80009294 <__avr32_umod64+0x1c4>
80009282:	20 16       	sub	r6,1
80009284:	10 0b       	add	r11,r8
80009286:	10 3b       	cp.w	r11,r8
80009288:	c0 63       	brcs	80009294 <__avr32_umod64+0x1c4>
8000928a:	1c 3b       	cp.w	r11,lr
8000928c:	f7 b6 03 01 	sublo	r6,1
80009290:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009294:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009298:	1c 1b       	sub	r11,lr
8000929a:	e2 02 06 40 	mulu.d	r0,r1,r2
8000929e:	00 9e       	mov	lr,r0
800092a0:	02 9c       	mov	r12,r1
800092a2:	16 3c       	cp.w	r12,r11
800092a4:	e0 8b 00 08 	brhi	800092b4 <__avr32_umod64+0x1e4>
800092a8:	5f 06       	sreq	r6
800092aa:	06 30       	cp.w	r0,r3
800092ac:	5f ba       	srhi	r10
800092ae:	ed ea 00 0a 	and	r10,r6,r10
800092b2:	c0 60       	breq	800092be <__avr32_umod64+0x1ee>
800092b4:	fc 02 01 04 	sub	r4,lr,r2
800092b8:	f8 08 01 4c 	sbc	r12,r12,r8
800092bc:	08 9e       	mov	lr,r4
800092be:	e6 0e 01 0a 	sub	r10,r3,lr
800092c2:	f6 0c 01 4c 	sbc	r12,r11,r12
800092c6:	ee f1 ff f4 	ld.w	r1,r7[-12]
800092ca:	f8 09 0a 4b 	lsr	r11,r12,r9
800092ce:	f4 09 0a 4a 	lsr	r10,r10,r9
800092d2:	f8 01 09 4c 	lsl	r12,r12,r1
800092d6:	18 4a       	or	r10,r12
800092d8:	2f dd       	sub	sp,-12
800092da:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009400:	c0 08       	rjmp	80009400 <_evba>
	...

80009404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009404:	c0 08       	rjmp	80009404 <_handle_TLB_Multiple_Hit>
	...

80009408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009408:	c0 08       	rjmp	80009408 <_handle_Bus_Error_Data_Fetch>
	...

8000940c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000940c:	c0 08       	rjmp	8000940c <_handle_Bus_Error_Instruction_Fetch>
	...

80009410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009410:	c0 08       	rjmp	80009410 <_handle_NMI>
	...

80009414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009414:	c0 08       	rjmp	80009414 <_handle_Instruction_Address>
	...

80009418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009418:	c0 08       	rjmp	80009418 <_handle_ITLB_Protection>
	...

8000941c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000941c:	c0 08       	rjmp	8000941c <_handle_Breakpoint>
	...

80009420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009420:	c0 08       	rjmp	80009420 <_handle_Illegal_Opcode>
	...

80009424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009424:	c0 08       	rjmp	80009424 <_handle_Unimplemented_Instruction>
	...

80009428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009428:	c0 08       	rjmp	80009428 <_handle_Privilege_Violation>
	...

8000942c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000942c:	c0 08       	rjmp	8000942c <_handle_Floating_Point>
	...

80009430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009430:	c0 08       	rjmp	80009430 <_handle_Coprocessor_Absent>
	...

80009434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009434:	c0 08       	rjmp	80009434 <_handle_Data_Address_Read>
	...

80009438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009438:	c0 08       	rjmp	80009438 <_handle_Data_Address_Write>
	...

8000943c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000943c:	c0 08       	rjmp	8000943c <_handle_DTLB_Protection_Read>
	...

80009440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009440:	c0 08       	rjmp	80009440 <_handle_DTLB_Protection_Write>
	...

80009444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009444:	c0 08       	rjmp	80009444 <_handle_DTLB_Modified>
	...

80009450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009450:	c0 08       	rjmp	80009450 <_handle_ITLB_Miss>
	...

80009460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009460:	c0 08       	rjmp	80009460 <_handle_DTLB_Miss_Read>
	...

80009470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009470:	c0 08       	rjmp	80009470 <_handle_DTLB_Miss_Write>
	...

80009500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009500:	c0 08       	rjmp	80009500 <_handle_Supervisor_Call>
80009502:	d7 03       	nop

80009504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009504:	30 0c       	mov	r12,0
80009506:	fe b0 c9 9b 	rcall	8000283c <_get_interrupt_handler>
8000950a:	58 0c       	cp.w	r12,0
8000950c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009510:	d6 03       	rete

80009512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009512:	30 1c       	mov	r12,1
80009514:	fe b0 c9 94 	rcall	8000283c <_get_interrupt_handler>
80009518:	58 0c       	cp.w	r12,0
8000951a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000951e:	d6 03       	rete

80009520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009520:	30 2c       	mov	r12,2
80009522:	fe b0 c9 8d 	rcall	8000283c <_get_interrupt_handler>
80009526:	58 0c       	cp.w	r12,0
80009528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000952c:	d6 03       	rete

8000952e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000952e:	30 3c       	mov	r12,3
80009530:	fe b0 c9 86 	rcall	8000283c <_get_interrupt_handler>
80009534:	58 0c       	cp.w	r12,0
80009536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000953a:	d6 03       	rete
8000953c:	d7 03       	nop
8000953e:	d7 03       	nop
80009540:	d7 03       	nop
80009542:	d7 03       	nop
80009544:	d7 03       	nop
80009546:	d7 03       	nop
80009548:	d7 03       	nop
8000954a:	d7 03       	nop
8000954c:	d7 03       	nop
8000954e:	d7 03       	nop
80009550:	d7 03       	nop
80009552:	d7 03       	nop
80009554:	d7 03       	nop
80009556:	d7 03       	nop
80009558:	d7 03       	nop
8000955a:	d7 03       	nop
8000955c:	d7 03       	nop
8000955e:	d7 03       	nop
80009560:	d7 03       	nop
80009562:	d7 03       	nop
80009564:	d7 03       	nop
80009566:	d7 03       	nop
80009568:	d7 03       	nop
8000956a:	d7 03       	nop
8000956c:	d7 03       	nop
8000956e:	d7 03       	nop
80009570:	d7 03       	nop
80009572:	d7 03       	nop
80009574:	d7 03       	nop
80009576:	d7 03       	nop
80009578:	d7 03       	nop
8000957a:	d7 03       	nop
8000957c:	d7 03       	nop
8000957e:	d7 03       	nop
80009580:	d7 03       	nop
80009582:	d7 03       	nop
80009584:	d7 03       	nop
80009586:	d7 03       	nop
80009588:	d7 03       	nop
8000958a:	d7 03       	nop
8000958c:	d7 03       	nop
8000958e:	d7 03       	nop
80009590:	d7 03       	nop
80009592:	d7 03       	nop
80009594:	d7 03       	nop
80009596:	d7 03       	nop
80009598:	d7 03       	nop
8000959a:	d7 03       	nop
8000959c:	d7 03       	nop
8000959e:	d7 03       	nop
800095a0:	d7 03       	nop
800095a2:	d7 03       	nop
800095a4:	d7 03       	nop
800095a6:	d7 03       	nop
800095a8:	d7 03       	nop
800095aa:	d7 03       	nop
800095ac:	d7 03       	nop
800095ae:	d7 03       	nop
800095b0:	d7 03       	nop
800095b2:	d7 03       	nop
800095b4:	d7 03       	nop
800095b6:	d7 03       	nop
800095b8:	d7 03       	nop
800095ba:	d7 03       	nop
800095bc:	d7 03       	nop
800095be:	d7 03       	nop
800095c0:	d7 03       	nop
800095c2:	d7 03       	nop
800095c4:	d7 03       	nop
800095c6:	d7 03       	nop
800095c8:	d7 03       	nop
800095ca:	d7 03       	nop
800095cc:	d7 03       	nop
800095ce:	d7 03       	nop
800095d0:	d7 03       	nop
800095d2:	d7 03       	nop
800095d4:	d7 03       	nop
800095d6:	d7 03       	nop
800095d8:	d7 03       	nop
800095da:	d7 03       	nop
800095dc:	d7 03       	nop
800095de:	d7 03       	nop
800095e0:	d7 03       	nop
800095e2:	d7 03       	nop
800095e4:	d7 03       	nop
800095e6:	d7 03       	nop
800095e8:	d7 03       	nop
800095ea:	d7 03       	nop
800095ec:	d7 03       	nop
800095ee:	d7 03       	nop
800095f0:	d7 03       	nop
800095f2:	d7 03       	nop
800095f4:	d7 03       	nop
800095f6:	d7 03       	nop
800095f8:	d7 03       	nop
800095fa:	d7 03       	nop
800095fc:	d7 03       	nop
800095fe:	d7 03       	nop
