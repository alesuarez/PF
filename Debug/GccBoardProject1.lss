
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a78  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003c00  80003c00  00004000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000208  80003e00  80003e00  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000028  00000008  80004008  00004408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  00000030  00000030  00000000  2**2
                  ALLOC
  8 .heap         00002df0  00000210  00000210  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000006a8  00000000  00000000  00004460  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001013  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00013bc9  00000000  00000000  00005b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e5f  00000000  00000000  000196e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006cb2  00000000  00000000  0001b543  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f68  00000000  00000000  000221f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035cf  00000000  00000000  00023160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000030c1  00000000  00000000  0002672f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00797133  00000000  00000000  000297f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 20 .debug_ranges 000006c0  00000000  00000000  007c0923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 fc 	sub	pc,pc,-3332

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	00 30       	cp.w	r0,r0
800020c0:	00 00       	add	r0,r0
800020c2:	00 44       	or	r4,r0
800020c4:	00 00       	add	r0,r0
800020c6:	00 3c       	cp.w	r12,r0
800020c8:	00 00       	add	r0,r0
800020ca:	00 48       	or	r8,r0
800020cc:	00 00       	add	r0,r0
800020ce:	00 34       	cp.w	r4,r0
800020d0:	00 00       	add	r0,r0
800020d2:	00 38       	cp.w	r8,r0
800020d4:	00 00       	add	r0,r0
800020d6:	00 50       	eor	r0,r0
800020d8:	00 00       	add	r0,r0
800020da:	00 40       	or	r0,r0
800020dc:	00 00       	add	r0,r0
800020de:	00 4c       	or	r12,r0

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	00 30       	cp.w	r0,r0

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	00 30       	cp.w	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	00 40       	or	r0,r0
80002200:	00 00       	add	r0,r0
80002202:	00 50       	eor	r0,r0
80002204:	00 00       	add	r0,r0
80002206:	00 48       	or	r8,r0
80002208:	00 00       	add	r0,r0
8000220a:	00 3c       	cp.w	r12,r0
8000220c:	00 00       	add	r0,r0
8000220e:	00 44       	or	r4,r0
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002230:	eb cd 40 e0 	pushm	r5-r7,lr
80002234:	18 97       	mov	r7,r12
80002236:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002238:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000223c:	30 0a       	mov	r10,0
8000223e:	4a 69       	lddpc	r9,800022d4 <twim_master_init+0xa4>
80002240:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002242:	e6 18 00 01 	andh	r8,0x1,COH
80002246:	c0 b1       	brne	8000225c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002248:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000224a:	3f f8       	mov	r8,-1
8000224c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000224e:	30 18       	mov	r8,1
80002250:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002252:	e0 68 00 80 	mov	r8,128
80002256:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002258:	d5 03       	csrf	0x10
8000225a:	c0 88       	rjmp	8000226a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000225c:	3f f8       	mov	r8,-1
8000225e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002260:	30 18       	mov	r8,1
80002262:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002264:	e0 68 00 80 	mov	r8,128
80002268:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000226a:	3f f8       	mov	r8,-1
8000226c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000226e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002272:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002274:	30 1a       	mov	r10,1
80002276:	e0 6b 02 80 	mov	r11,640
8000227a:	49 8c       	lddpc	r12,800022d8 <twim_master_init+0xa8>
8000227c:	f0 1f 00 18 	mcall	800022dc <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002280:	e6 16 00 01 	andh	r6,0x1,COH
80002284:	c0 21       	brne	80002288 <twim_master_init+0x58>
      cpu_irq_enable();
80002286:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002288:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000228c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000228e:	f0 09 18 00 	cp.b	r9,r8
80002292:	f9 b8 01 10 	movne	r8,16
80002296:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
8000229a:	f9 b8 01 ff 	movne	r8,-1
8000229e:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800022a2:	6a 0a       	ld.w	r10,r5[0x0]
800022a4:	6a 1b       	ld.w	r11,r5[0x4]
800022a6:	0e 9c       	mov	r12,r7
800022a8:	f0 1f 00 0e 	mcall	800022e0 <twim_master_init+0xb0>
800022ac:	5b 8c       	cp.w	r12,-8
800022ae:	c1 00       	breq	800022ce <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800022b0:	6a 2b       	ld.w	r11,r5[0x8]
800022b2:	0e 9c       	mov	r12,r7
800022b4:	f0 1f 00 0c 	mcall	800022e4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022b8:	48 78       	lddpc	r8,800022d4 <twim_master_init+0xa4>
800022ba:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022bc:	5b c8       	cp.w	r8,-4
800022be:	c0 70       	breq	800022cc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022c0:	48 58       	lddpc	r8,800022d4 <twim_master_init+0xa4>
800022c2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022c4:	5b e8       	cp.w	r8,-2
800022c6:	c0 30       	breq	800022cc <twim_master_init+0x9c>
800022c8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800022cc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800022ce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022d2:	00 00       	add	r0,r0
800022d4:	00 00       	add	r0,r0
800022d6:	00 3c       	cp.w	r12,r0
800022d8:	80 00       	ld.sh	r0,r0[0x0]
800022da:	20 04       	sub	r4,0
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	26 90       	sub	r0,105
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	20 e0       	sub	r0,14
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	22 14       	sub	r4,33

800022e8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800022e8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800022ec:	58 0a       	cp.w	r10,0
800022ee:	c6 30       	breq	800023b4 <eic_init+0xcc>
800022f0:	30 08       	mov	r8,0
800022f2:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800022f4:	30 19       	mov	r9,1
800022f6:	30 1e       	mov	lr,1
800022f8:	f0 08 00 18 	add	r8,r8,r8<<0x1
800022fc:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002300:	11 96       	ld.ub	r6,r8[0x1]
80002302:	f2 06 18 00 	cp.b	r6,r9
80002306:	c0 71       	brne	80002314 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002308:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000230a:	11 86       	ld.ub	r6,r8[0x0]
8000230c:	fc 06 09 46 	lsl	r6,lr,r6
80002310:	0a 46       	or	r6,r5
80002312:	c0 78       	rjmp	80002320 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002314:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002316:	11 86       	ld.ub	r6,r8[0x0]
80002318:	fc 06 09 46 	lsl	r6,lr,r6
8000231c:	5c d6       	com	r6
8000231e:	0a 66       	and	r6,r5
80002320:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002322:	11 a6       	ld.ub	r6,r8[0x2]
80002324:	f2 06 18 00 	cp.b	r6,r9
80002328:	c0 71       	brne	80002336 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000232a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000232c:	11 86       	ld.ub	r6,r8[0x0]
8000232e:	fc 06 09 46 	lsl	r6,lr,r6
80002332:	0a 46       	or	r6,r5
80002334:	c0 78       	rjmp	80002342 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002336:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002338:	11 86       	ld.ub	r6,r8[0x0]
8000233a:	fc 06 09 46 	lsl	r6,lr,r6
8000233e:	5c d6       	com	r6
80002340:	0a 66       	and	r6,r5
80002342:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002344:	11 b6       	ld.ub	r6,r8[0x3]
80002346:	f2 06 18 00 	cp.b	r6,r9
8000234a:	c0 71       	brne	80002358 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000234c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000234e:	11 86       	ld.ub	r6,r8[0x0]
80002350:	fc 06 09 46 	lsl	r6,lr,r6
80002354:	0a 46       	or	r6,r5
80002356:	c0 78       	rjmp	80002364 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002358:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000235a:	11 86       	ld.ub	r6,r8[0x0]
8000235c:	fc 06 09 46 	lsl	r6,lr,r6
80002360:	5c d6       	com	r6
80002362:	0a 66       	and	r6,r5
80002364:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002366:	11 c6       	ld.ub	r6,r8[0x4]
80002368:	f2 06 18 00 	cp.b	r6,r9
8000236c:	c0 71       	brne	8000237a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000236e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002370:	11 86       	ld.ub	r6,r8[0x0]
80002372:	fc 06 09 46 	lsl	r6,lr,r6
80002376:	0a 46       	or	r6,r5
80002378:	c0 78       	rjmp	80002386 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000237a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000237c:	11 86       	ld.ub	r6,r8[0x0]
8000237e:	fc 06 09 46 	lsl	r6,lr,r6
80002382:	5c d6       	com	r6
80002384:	0a 66       	and	r6,r5
80002386:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002388:	11 d6       	ld.ub	r6,r8[0x5]
8000238a:	f2 06 18 00 	cp.b	r6,r9
8000238e:	c0 71       	brne	8000239c <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002390:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002392:	11 88       	ld.ub	r8,r8[0x0]
80002394:	fc 08 09 48 	lsl	r8,lr,r8
80002398:	0c 48       	or	r8,r6
8000239a:	c0 78       	rjmp	800023a8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
8000239c:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000239e:	11 88       	ld.ub	r8,r8[0x0]
800023a0:	fc 08 09 48 	lsl	r8,lr,r8
800023a4:	5c d8       	com	r8
800023a6:	0c 68       	and	r8,r6
800023a8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800023aa:	2f f7       	sub	r7,-1
800023ac:	0e 98       	mov	r8,r7
800023ae:	0e 3a       	cp.w	r10,r7
800023b0:	fe 9b ff a4 	brhi	800022f8 <eic_init+0x10>
800023b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800023b8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800023b8:	30 18       	mov	r8,1
800023ba:	f0 0b 09 48 	lsl	r8,r8,r11
800023be:	99 c8       	st.w	r12[0x30],r8
}
800023c0:	5e fc       	retal	r12

800023c2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800023c2:	30 18       	mov	r8,1
800023c4:	f0 0b 09 48 	lsl	r8,r8,r11
800023c8:	99 08       	st.w	r12[0x0],r8
}
800023ca:	5e fc       	retal	r12

800023cc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800023cc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800023d0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800023d2:	30 19       	mov	r9,1
800023d4:	f2 0b 09 4b 	lsl	r11,r9,r11
800023d8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800023da:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800023dc:	e6 18 00 01 	andh	r8,0x1,COH
800023e0:	c0 21       	brne	800023e4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800023e2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800023e4:	5e fc       	retal	r12
800023e6:	d7 03       	nop

800023e8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800023e8:	f8 08 16 05 	lsr	r8,r12,0x5
800023ec:	a9 78       	lsl	r8,0x9
800023ee:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
800023f2:	58 7b       	cp.w	r11,7
800023f4:	e0 8b 00 05 	brhi	800023fe <gpio_enable_module_pin+0x16>
800023f8:	4a 09       	lddpc	r9,80002478 <gpio_enable_module_pin+0x90>
800023fa:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800023fe:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002400:	30 19       	mov	r9,1
80002402:	f2 0c 09 49 	lsl	r9,r9,r12
80002406:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002408:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000240a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000240c:	c3 18       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000240e:	30 19       	mov	r9,1
80002410:	f2 0c 09 49 	lsl	r9,r9,r12
80002414:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002416:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002418:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000241a:	c2 a8       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000241c:	30 19       	mov	r9,1
8000241e:	f2 0c 09 49 	lsl	r9,r9,r12
80002422:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002424:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002426:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002428:	c2 38       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000242a:	30 19       	mov	r9,1
8000242c:	f2 0c 09 49 	lsl	r9,r9,r12
80002430:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002432:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002434:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002436:	c1 c8       	rjmp	8000246e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002438:	30 19       	mov	r9,1
8000243a:	f2 0c 09 49 	lsl	r9,r9,r12
8000243e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002440:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002442:	91 d9       	st.w	r8[0x34],r9
		break;
80002444:	c1 58       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002446:	30 19       	mov	r9,1
80002448:	f2 0c 09 49 	lsl	r9,r9,r12
8000244c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000244e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002450:	91 d9       	st.w	r8[0x34],r9
		break;
80002452:	c0 e8       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002454:	30 19       	mov	r9,1
80002456:	f2 0c 09 49 	lsl	r9,r9,r12
8000245a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000245c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000245e:	91 d9       	st.w	r8[0x34],r9
		break;
80002460:	c0 78       	rjmp	8000246e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002462:	30 19       	mov	r9,1
80002464:	f2 0c 09 49 	lsl	r9,r9,r12
80002468:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000246a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000246c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000246e:	30 19       	mov	r9,1
80002470:	f2 0c 09 4c 	lsl	r12,r9,r12
80002474:	91 2c       	st.w	r8[0x8],r12
80002476:	5e fd       	retal	0
80002478:	80 00       	ld.sh	r0,r0[0x0]
8000247a:	3e 00       	mov	r0,-32

8000247c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000247c:	d4 21       	pushm	r4-r7,lr
8000247e:	18 97       	mov	r7,r12
80002480:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002482:	58 0b       	cp.w	r11,0
80002484:	c0 31       	brne	8000248a <gpio_enable_module+0xe>
80002486:	30 05       	mov	r5,0
80002488:	c0 d8       	rjmp	800024a2 <gpio_enable_module+0x26>
8000248a:	30 06       	mov	r6,0
8000248c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000248e:	6e 1b       	ld.w	r11,r7[0x4]
80002490:	6e 0c       	ld.w	r12,r7[0x0]
80002492:	f0 1f 00 06 	mcall	800024a8 <gpio_enable_module+0x2c>
80002496:	18 45       	or	r5,r12
		gpiomap++;
80002498:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000249a:	2f f6       	sub	r6,-1
8000249c:	0c 34       	cp.w	r4,r6
8000249e:	fe 9b ff f8 	brhi	8000248e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800024a2:	0a 9c       	mov	r12,r5
800024a4:	d8 22       	popm	r4-r7,pc
800024a6:	00 00       	add	r0,r0
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	23 e8       	sub	r8,62

800024ac <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024ac:	f8 08 16 05 	lsr	r8,r12,0x5
800024b0:	a9 78       	lsl	r8,0x9
800024b2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800024b6:	16 99       	mov	r9,r11
800024b8:	e2 19 00 04 	andl	r9,0x4,COH
800024bc:	c0 70       	breq	800024ca <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800024be:	30 19       	mov	r9,1
800024c0:	f2 0c 09 49 	lsl	r9,r9,r12
800024c4:	f1 49 00 74 	st.w	r8[116],r9
800024c8:	c0 68       	rjmp	800024d4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800024ca:	30 19       	mov	r9,1
800024cc:	f2 0c 09 49 	lsl	r9,r9,r12
800024d0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800024d4:	16 99       	mov	r9,r11
800024d6:	e2 19 00 80 	andl	r9,0x80,COH
800024da:	c2 40       	breq	80002522 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800024dc:	16 99       	mov	r9,r11
800024de:	e2 19 01 80 	andl	r9,0x180,COH
800024e2:	c0 90       	breq	800024f4 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800024e4:	30 19       	mov	r9,1
800024e6:	f2 0c 09 49 	lsl	r9,r9,r12
800024ea:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800024ee:	f1 49 00 b8 	st.w	r8[184],r9
800024f2:	c1 88       	rjmp	80002522 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800024f4:	16 99       	mov	r9,r11
800024f6:	e2 19 02 80 	andl	r9,0x280,COH
800024fa:	c0 90       	breq	8000250c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800024fc:	30 19       	mov	r9,1
800024fe:	f2 0c 09 49 	lsl	r9,r9,r12
80002502:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002506:	f1 49 00 b8 	st.w	r8[184],r9
8000250a:	c0 c8       	rjmp	80002522 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000250c:	16 99       	mov	r9,r11
8000250e:	e2 19 03 80 	andl	r9,0x380,COH
80002512:	c0 80       	breq	80002522 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002514:	30 19       	mov	r9,1
80002516:	f2 0c 09 49 	lsl	r9,r9,r12
8000251a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000251e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002522:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002526:	c1 50       	breq	80002550 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002528:	e2 1b 00 02 	andl	r11,0x2,COH
8000252c:	c0 70       	breq	8000253a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000252e:	30 19       	mov	r9,1
80002530:	f2 0c 09 49 	lsl	r9,r9,r12
80002534:	f1 49 00 54 	st.w	r8[84],r9
80002538:	c0 68       	rjmp	80002544 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002544:	30 19       	mov	r9,1
80002546:	f2 0c 09 49 	lsl	r9,r9,r12
8000254a:	f1 49 00 44 	st.w	r8[68],r9
8000254e:	c0 68       	rjmp	8000255a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002550:	30 19       	mov	r9,1
80002552:	f2 0c 09 49 	lsl	r9,r9,r12
80002556:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000255a:	30 19       	mov	r9,1
8000255c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002560:	91 1c       	st.w	r8[0x4],r12
}
80002562:	5e fc       	retal	r12

80002564 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002564:	f8 08 16 05 	lsr	r8,r12,0x5
80002568:	a9 78       	lsl	r8,0x9
8000256a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000256e:	30 19       	mov	r9,1
80002570:	f2 0c 09 4c 	lsl	r12,r9,r12
80002574:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002578:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000257c:	91 1c       	st.w	r8[0x4],r12
}
8000257e:	5e fc       	retal	r12

80002580 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002580:	f8 08 16 05 	lsr	r8,r12,0x5
80002584:	a9 78       	lsl	r8,0x9
80002586:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000258a:	30 19       	mov	r9,1
8000258c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002590:	f1 4c 00 54 	st.w	r8[84],r12
}
80002594:	5e fc       	retal	r12

80002596 <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002596:	f8 08 16 05 	lsr	r8,r12,0x5
8000259a:	a9 78       	lsl	r8,0x9
8000259c:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800025a0:	30 19       	mov	r9,1
800025a2:	f2 0c 09 4c 	lsl	r12,r9,r12
800025a6:	f1 4c 00 58 	st.w	r8[88],r12
}
800025aa:	5e fc       	retal	r12

800025ac <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025ac:	f8 08 16 05 	lsr	r8,r12,0x5
800025b0:	a9 78       	lsl	r8,0x9
800025b2:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800025b6:	30 19       	mov	r9,1
800025b8:	f2 0c 09 4c 	lsl	r12,r9,r12
800025bc:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800025c0:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800025c4:	91 1c       	st.w	r8[0x4],r12
}
800025c6:	5e fc       	retal	r12

800025c8 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025c8:	f8 08 16 05 	lsr	r8,r12,0x5
800025cc:	a9 78       	lsl	r8,0x9
800025ce:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800025d2:	30 19       	mov	r9,1
800025d4:	f2 0c 09 4c 	lsl	r12,r9,r12
800025d8:	f1 4c 00 5c 	st.w	r8[92],r12
}
800025dc:	5e fc       	retal	r12

800025de <gpio_configure_edge_detector>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025de:	f8 08 16 05 	lsr	r8,r12,0x5
800025e2:	a9 78       	lsl	r8,0x9
800025e4:	e0 28 d4 00 	sub	r8,54272

	/* Configure the edge detector. */
	switch (mode) {
800025e8:	58 1b       	cp.w	r11,1
800025ea:	c0 d0       	breq	80002604 <gpio_configure_edge_detector+0x26>
800025ec:	c0 43       	brcs	800025f4 <gpio_configure_edge_detector+0x16>
800025ee:	58 2b       	cp.w	r11,2
800025f0:	c1 20       	breq	80002614 <gpio_configure_edge_detector+0x36>
800025f2:	5e ff       	retal	1
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800025fa:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 4c 00 b8 	st.w	r8[184],r12
80002602:	5e fd       	retal	0
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80002604:	30 19       	mov	r9,1
80002606:	f2 0c 09 4c 	lsl	r12,r9,r12
8000260a:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000260e:	f1 4c 00 b8 	st.w	r8[184],r12
80002612:	5e fd       	retal	0
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002614:	30 19       	mov	r9,1
80002616:	f2 0c 09 4c 	lsl	r12,r9,r12
8000261a:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000261e:	f1 4c 00 b4 	st.w	r8[180],r12
80002622:	5e fd       	retal	0

80002624 <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80002624:	eb cd 40 c0 	pushm	r6-r7,lr
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002628:	f8 07 16 05 	lsr	r7,r12,0x5
8000262c:	a9 77       	lsl	r7,0x9
8000262e:	e0 27 d4 00 	sub	r7,54272

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80002632:	30 16       	mov	r6,1
80002634:	ec 0c 09 46 	lsl	r6,r6,r12
80002638:	ef 46 00 c4 	st.w	r7[196],r6

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
8000263c:	f0 1f 00 05 	mcall	80002650 <gpio_enable_pin_interrupt+0x2c>
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002640:	58 1c       	cp.w	r12,1
80002642:	ef f6 1a 25 	st.wne	r7[0x94],r6
80002646:	f9 bc 01 00 	movne	r12,0

	return GPIO_SUCCESS;
}
8000264a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000264e:	00 00       	add	r0,r0
80002650:	80 00       	ld.sh	r0,r0[0x0]
80002652:	25 de       	sub	lr,93

80002654 <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002654:	f8 08 16 05 	lsr	r8,r12,0x5
80002658:	a9 78       	lsl	r8,0x9
8000265a:	e0 28 d4 00 	sub	r8,54272
	
	gpio_port->ierc = 1 << (pin & 0x1F);
8000265e:	30 19       	mov	r9,1
80002660:	f2 0c 09 4c 	lsl	r12,r9,r12
80002664:	f1 4c 00 98 	st.w	r8[152],r12
}
80002668:	5e fc       	retal	r12

8000266a <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000266a:	f8 08 16 05 	lsr	r8,r12,0x5
8000266e:	a9 78       	lsl	r8,0x9
80002670:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
80002674:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
80002678:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000267c:	30 1a       	mov	r10,1
8000267e:	f4 0c 09 4c 	lsl	r12,r10,r12
80002682:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
80002686:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
8000268a:	5e fc       	retal	r12

8000268c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000268c:	c0 08       	rjmp	8000268c <_unhandled_interrupt>
8000268e:	d7 03       	nop

80002690 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002690:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002694:	49 99       	lddpc	r9,800026f8 <INTC_register_interrupt+0x68>
80002696:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000269a:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000269e:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026a0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026a4:	58 0a       	cp.w	r10,0
800026a6:	c0 91       	brne	800026b8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026a8:	49 59       	lddpc	r9,800026fc <INTC_register_interrupt+0x6c>
800026aa:	49 6a       	lddpc	r10,80002700 <INTC_register_interrupt+0x70>
800026ac:	12 1a       	sub	r10,r9
800026ae:	fe 79 10 00 	mov	r9,-61440
800026b2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026b6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800026b8:	58 1a       	cp.w	r10,1
800026ba:	c0 a1       	brne	800026ce <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800026bc:	49 09       	lddpc	r9,800026fc <INTC_register_interrupt+0x6c>
800026be:	49 2a       	lddpc	r10,80002704 <INTC_register_interrupt+0x74>
800026c0:	12 1a       	sub	r10,r9
800026c2:	bf aa       	sbr	r10,0x1e
800026c4:	fe 79 10 00 	mov	r9,-61440
800026c8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026cc:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800026ce:	58 2a       	cp.w	r10,2
800026d0:	c0 a1       	brne	800026e4 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800026d2:	48 b9       	lddpc	r9,800026fc <INTC_register_interrupt+0x6c>
800026d4:	48 da       	lddpc	r10,80002708 <INTC_register_interrupt+0x78>
800026d6:	12 1a       	sub	r10,r9
800026d8:	bf ba       	sbr	r10,0x1f
800026da:	fe 79 10 00 	mov	r9,-61440
800026de:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026e2:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800026e4:	48 69       	lddpc	r9,800026fc <INTC_register_interrupt+0x6c>
800026e6:	48 aa       	lddpc	r10,8000270c <INTC_register_interrupt+0x7c>
800026e8:	12 1a       	sub	r10,r9
800026ea:	ea 1a c0 00 	orh	r10,0xc000
800026ee:	fe 79 10 00 	mov	r9,-61440
800026f2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026f6:	5e fc       	retal	r12
800026f8:	80 00       	ld.sh	r0,r0[0x0]
800026fa:	3e 20       	mov	r0,-30
800026fc:	80 00       	ld.sh	r0,r0[0x0]
800026fe:	3c 00       	mov	r0,-64
80002700:	80 00       	ld.sh	r0,r0[0x0]
80002702:	3d 04       	mov	r4,-48
80002704:	80 00       	ld.sh	r0,r0[0x0]
80002706:	3d 12       	mov	r2,-47
80002708:	80 00       	ld.sh	r0,r0[0x0]
8000270a:	3d 20       	mov	r0,-46
8000270c:	80 00       	ld.sh	r0,r0[0x0]
8000270e:	3d 2e       	mov	lr,-46

80002710 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002710:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002712:	49 18       	lddpc	r8,80002754 <INTC_init_interrupts+0x44>
80002714:	e3 b8 00 01 	mtsr	0x4,r8
80002718:	49 0e       	lddpc	lr,80002758 <INTC_init_interrupts+0x48>
8000271a:	30 07       	mov	r7,0
8000271c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000271e:	49 0c       	lddpc	r12,8000275c <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002720:	49 05       	lddpc	r5,80002760 <INTC_init_interrupts+0x50>
80002722:	10 15       	sub	r5,r8
80002724:	fe 76 10 00 	mov	r6,-61440
80002728:	c1 08       	rjmp	80002748 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000272a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000272c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000272e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002730:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002734:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002736:	10 3a       	cp.w	r10,r8
80002738:	fe 9b ff fc 	brhi	80002730 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000273c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002740:	2f f7       	sub	r7,-1
80002742:	2f 8e       	sub	lr,-8
80002744:	59 f7       	cp.w	r7,31
80002746:	c0 50       	breq	80002750 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002748:	7c 08       	ld.w	r8,lr[0x0]
8000274a:	58 08       	cp.w	r8,0
8000274c:	ce f1       	brne	8000272a <INTC_init_interrupts+0x1a>
8000274e:	cf 7b       	rjmp	8000273c <INTC_init_interrupts+0x2c>
80002750:	d8 22       	popm	r4-r7,pc
80002752:	00 00       	add	r0,r0
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	3c 00       	mov	r0,-64
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	3e 20       	mov	r0,-30
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	26 8c       	sub	r12,104
80002760:	80 00       	ld.sh	r0,r0[0x0]
80002762:	3d 04       	mov	r4,-48

80002764 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002764:	fe 78 10 00 	mov	r8,-61440
80002768:	e0 69 00 83 	mov	r9,131
8000276c:	f2 0c 01 0c 	sub	r12,r9,r12
80002770:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002774:	f2 ca ff c0 	sub	r10,r9,-64
80002778:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000277c:	58 08       	cp.w	r8,0
8000277e:	c0 21       	brne	80002782 <_get_interrupt_handler+0x1e>
80002780:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002782:	f0 08 12 00 	clz	r8,r8
80002786:	48 5a       	lddpc	r10,80002798 <_get_interrupt_handler+0x34>
80002788:	f4 09 00 39 	add	r9,r10,r9<<0x3
8000278c:	f0 08 11 1f 	rsub	r8,r8,31
80002790:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002792:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002796:	5e fc       	retal	r12
80002798:	80 00       	ld.sh	r0,r0[0x0]
8000279a:	3e 20       	mov	r0,-30

8000279c <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000279c:	f8 c8 00 01 	sub	r8,r12,1
800027a0:	f0 0b 00 0b 	add	r11,r8,r11
800027a4:	f6 0c 0d 0a 	divu	r10,r11,r12
800027a8:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027aa:	f4 c8 00 01 	sub	r8,r10,1
800027ae:	e0 48 00 fe 	cp.w	r8,254
800027b2:	e0 88 00 03 	brls	800027b8 <getBaudDiv+0x1c>
800027b6:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800027b8:	5c 8c       	casts.h	r12
}
800027ba:	5e fc       	retal	r12

800027bc <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800027bc:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800027be:	30 18       	mov	r8,1
800027c0:	f0 0b 18 00 	cp.b	r11,r8
800027c4:	5f be       	srhi	lr
800027c6:	f0 0a 18 00 	cp.b	r10,r8
800027ca:	5f b8       	srhi	r8
800027cc:	fd e8 10 08 	or	r8,lr,r8
800027d0:	c0 30       	breq	800027d6 <spi_selectionMode+0x1a>
800027d2:	30 2c       	mov	r12,2
800027d4:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800027d6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800027d8:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800027dc:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800027e0:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800027e4:	99 18       	st.w	r12[0x4],r8
800027e6:	d8 0a       	popm	pc,r12=0

800027e8 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800027e8:	78 18       	ld.w	r8,r12[0x4]
800027ea:	ea 18 00 0f 	orh	r8,0xf
800027ee:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800027f0:	78 18       	ld.w	r8,r12[0x4]
800027f2:	e2 18 00 04 	andl	r8,0x4,COH
800027f6:	c0 f0       	breq	80002814 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800027f8:	30 e8       	mov	r8,14
800027fa:	f0 0b 18 00 	cp.b	r11,r8
800027fe:	e0 8b 00 19 	brhi	80002830 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002802:	78 18       	ld.w	r8,r12[0x4]
80002804:	b1 6b       	lsl	r11,0x10
80002806:	ea 1b ff f0 	orh	r11,0xfff0
8000280a:	e8 1b ff ff 	orl	r11,0xffff
8000280e:	10 6b       	and	r11,r8
80002810:	99 1b       	st.w	r12[0x4],r11
80002812:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002814:	30 38       	mov	r8,3
80002816:	f0 0b 18 00 	cp.b	r11,r8
8000281a:	e0 8b 00 0b 	brhi	80002830 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000281e:	78 18       	ld.w	r8,r12[0x4]
80002820:	2f 0b       	sub	r11,-16
80002822:	30 19       	mov	r9,1
80002824:	f2 0b 09 4b 	lsl	r11,r9,r11
80002828:	5c db       	com	r11
8000282a:	10 6b       	and	r11,r8
8000282c:	99 1b       	st.w	r12[0x4],r11
8000282e:	5e fd       	retal	0
80002830:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002832:	5e fc       	retal	r12

80002834 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002834:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002838:	c0 58       	rjmp	80002842 <spi_unselectChip+0xe>
		if (!timeout--) {
8000283a:	58 08       	cp.w	r8,0
8000283c:	c0 21       	brne	80002840 <spi_unselectChip+0xc>
8000283e:	5e ff       	retal	1
80002840:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002842:	78 49       	ld.w	r9,r12[0x10]
80002844:	e2 19 02 00 	andl	r9,0x200,COH
80002848:	cf 90       	breq	8000283a <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000284a:	78 18       	ld.w	r8,r12[0x4]
8000284c:	ea 18 00 0f 	orh	r8,0xf
80002850:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002852:	fc 18 01 00 	movh	r8,0x100
80002856:	99 08       	st.w	r12[0x0],r8
80002858:	5e fd       	retal	0
8000285a:	d7 03       	nop

8000285c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000285c:	eb cd 40 f8 	pushm	r3-r7,lr
80002860:	18 95       	mov	r5,r12
80002862:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002864:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002868:	30 38       	mov	r8,3
8000286a:	f0 06 18 00 	cp.b	r6,r8
8000286e:	e0 8b 00 4d 	brhi	80002908 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002872:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002876:	30 18       	mov	r8,1
80002878:	f0 04 18 00 	cp.b	r4,r8
8000287c:	e0 8b 00 46 	brhi	80002908 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80002880:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002884:	30 78       	mov	r8,7
80002886:	f0 03 18 00 	cp.b	r3,r8
8000288a:	e0 88 00 3f 	brls	80002908 <spi_setupChipReg+0xac>
8000288e:	31 08       	mov	r8,16
80002890:	f0 03 18 00 	cp.b	r3,r8
80002894:	e0 8b 00 3a 	brhi	80002908 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002898:	14 9b       	mov	r11,r10
8000289a:	6e 1c       	ld.w	r12,r7[0x4]
8000289c:	f0 1f 00 1d 	mcall	80002910 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028a0:	c3 45       	brlt	80002908 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028a2:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028a4:	ec 09 16 01 	lsr	r9,r6,0x1
800028a8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028ac:	ec 16 00 01 	eorl	r6,0x1
800028b0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800028b4:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800028b8:	20 83       	sub	r3,8
800028ba:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800028be:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800028c2:	ef 39 00 09 	ld.ub	r9,r7[9]
800028c6:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800028ca:	ef 39 00 0a 	ld.ub	r9,r7[10]
800028ce:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800028d2:	0f 89       	ld.ub	r9,r7[0x0]
800028d4:	30 1a       	mov	r10,1
800028d6:	f4 09 18 00 	cp.b	r9,r10
800028da:	c0 e0       	breq	800028f6 <spi_setupChipReg+0x9a>
800028dc:	c0 a3       	brcs	800028f0 <spi_setupChipReg+0x94>
800028de:	30 2a       	mov	r10,2
800028e0:	f4 09 18 00 	cp.b	r9,r10
800028e4:	c0 c0       	breq	800028fc <spi_setupChipReg+0xa0>
800028e6:	30 3a       	mov	r10,3
800028e8:	f4 09 18 00 	cp.b	r9,r10
800028ec:	c0 e1       	brne	80002908 <spi_setupChipReg+0xac>
800028ee:	c0 a8       	rjmp	80002902 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800028f0:	8b c8       	st.w	r5[0x30],r8
800028f2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800028f6:	8b d8       	st.w	r5[0x34],r8
800028f8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800028fc:	8b e8       	st.w	r5[0x38],r8
800028fe:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002902:	8b f8       	st.w	r5[0x3c],r8
80002904:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002908:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000290a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000290e:	00 00       	add	r0,r0
80002910:	80 00       	ld.sh	r0,r0[0x0]
80002912:	27 9c       	sub	r12,121

80002914 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002914:	30 18       	mov	r8,1
80002916:	99 08       	st.w	r12[0x0],r8
}
80002918:	5e fc       	retal	r12

8000291a <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000291a:	76 09       	ld.w	r9,r11[0x0]
8000291c:	58 29       	cp.w	r9,2
8000291e:	e0 88 00 03 	brls	80002924 <tc_init_waveform+0xa>
80002922:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002924:	76 18       	ld.w	r8,r11[0x4]
80002926:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000292a:	af ba       	sbr	r10,0xf
8000292c:	10 9b       	mov	r11,r8
8000292e:	e6 1b c0 00 	andh	r11,0xc000,COH
80002932:	16 4a       	or	r10,r11
80002934:	10 9b       	mov	r11,r8
80002936:	e6 1b 30 00 	andh	r11,0x3000,COH
8000293a:	16 4a       	or	r10,r11
8000293c:	10 9b       	mov	r11,r8
8000293e:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002942:	16 4a       	or	r10,r11
80002944:	10 9b       	mov	r11,r8
80002946:	e6 1b 03 00 	andh	r11,0x300,COH
8000294a:	16 4a       	or	r10,r11
8000294c:	10 9b       	mov	r11,r8
8000294e:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002952:	16 4a       	or	r10,r11
80002954:	10 9b       	mov	r11,r8
80002956:	e6 1b 00 30 	andh	r11,0x30,COH
8000295a:	16 4a       	or	r10,r11
8000295c:	10 9b       	mov	r11,r8
8000295e:	e6 1b 00 0c 	andh	r11,0xc,COH
80002962:	16 4a       	or	r10,r11
80002964:	10 9b       	mov	r11,r8
80002966:	e6 1b 00 03 	andh	r11,0x3,COH
8000296a:	16 4a       	or	r10,r11
8000296c:	10 9b       	mov	r11,r8
8000296e:	e2 1b 60 00 	andl	r11,0x6000,COH
80002972:	16 4a       	or	r10,r11
80002974:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002978:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
8000297c:	10 9b       	mov	r11,r8
8000297e:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002982:	16 4a       	or	r10,r11
80002984:	10 9b       	mov	r11,r8
80002986:	e2 1b 03 00 	andl	r11,0x300,COH
8000298a:	16 4a       	or	r10,r11
8000298c:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80002990:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002994:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002998:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
8000299c:	10 9b       	mov	r11,r8
8000299e:	e2 1b 00 30 	andl	r11,0x30,COH
800029a2:	16 4a       	or	r10,r11
800029a4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029a8:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029ac:	a5 69       	lsl	r9,0x4
800029ae:	2f f9       	sub	r9,-1
800029b0:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800029b4:	5e fd       	retal	0

800029b6 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029b6:	58 2b       	cp.w	r11,2
800029b8:	e0 88 00 03 	brls	800029be <tc_start+0x8>
800029bc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800029be:	a7 6b       	lsl	r11,0x6
800029c0:	16 0c       	add	r12,r11
800029c2:	30 58       	mov	r8,5
800029c4:	99 08       	st.w	r12[0x0],r8
800029c6:	5e fd       	retal	0

800029c8 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029c8:	58 2b       	cp.w	r11,2
800029ca:	e0 88 00 03 	brls	800029d0 <tc_stop+0x8>
800029ce:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
800029d0:	a7 6b       	lsl	r11,0x6
800029d2:	16 0c       	add	r12,r11
800029d4:	30 28       	mov	r8,2
800029d6:	99 08       	st.w	r12[0x0],r8
800029d8:	5e fd       	retal	0

800029da <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029da:	58 2b       	cp.w	r11,2
800029dc:	e0 88 00 03 	brls	800029e2 <tc_read_sr+0x8>
800029e0:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800029e2:	a7 6b       	lsl	r11,0x6
800029e4:	2e 0b       	sub	r11,-32
800029e6:	16 0c       	add	r12,r11
800029e8:	78 0c       	ld.w	r12,r12[0x0]
}
800029ea:	5e fc       	retal	r12

800029ec <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029ec:	58 2b       	cp.w	r11,2
800029ee:	e0 88 00 03 	brls	800029f4 <tc_write_rc+0x8>
800029f2:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800029f4:	f6 08 15 04 	lsl	r8,r11,0x4
800029f8:	2f f8       	sub	r8,-1
800029fa:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800029fe:	e2 18 80 00 	andl	r8,0x8000,COH
80002a02:	c0 c0       	breq	80002a1a <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a04:	a7 6b       	lsl	r11,0x6
80002a06:	16 0c       	add	r12,r11
80002a08:	2e 4c       	sub	r12,-28
80002a0a:	78 08       	ld.w	r8,r12[0x0]
80002a0c:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a10:	e0 18 00 00 	andl	r8,0x0
80002a14:	f3 e8 10 08 	or	r8,r9,r8
80002a18:	99 08       	st.w	r12[0x0],r8

  return value;
80002a1a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a1e:	5e fc       	retal	r12

80002a20 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a20:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a24:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a28:	58 2b       	cp.w	r11,2
80002a2a:	e0 88 00 04 	brls	80002a32 <tc_configure_interrupts+0x12>
80002a2e:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a32:	ee 19 00 01 	eorh	r9,0x1
80002a36:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a3a:	74 08       	ld.w	r8,r10[0x0]
80002a3c:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a40:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a44:	a7 6e       	lsl	lr,0x6
80002a46:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a4a:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a4e:	0e 4e       	or	lr,r7
80002a50:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002a54:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002a58:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002a5c:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002a60:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002a64:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002a68:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002a6c:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002a70:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a74:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002a78:	f6 0e 15 06 	lsl	lr,r11,0x6
80002a7c:	f8 0e 00 0e 	add	lr,r12,lr
80002a80:	2d ce       	sub	lr,-36
80002a82:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002a84:	58 09       	cp.w	r9,0
80002a86:	c0 20       	breq	80002a8a <tc_configure_interrupts+0x6a>
80002a88:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002a8a:	74 08       	ld.w	r8,r10[0x0]
80002a8c:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002a90:	e0 65 00 80 	mov	r5,128
80002a94:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002a98:	74 08       	ld.w	r8,r10[0x0]
80002a9a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002a9e:	f9 b4 00 40 	moveq	r4,64
80002aa2:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002aa6:	74 08       	ld.w	r8,r10[0x0]
80002aa8:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002aac:	f9 b3 00 20 	moveq	r3,32
80002ab0:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002ab4:	74 08       	ld.w	r8,r10[0x0]
80002ab6:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002aba:	f9 b2 00 10 	moveq	r2,16
80002abe:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002ac2:	74 08       	ld.w	r8,r10[0x0]
80002ac4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002ac8:	f9 b6 00 08 	moveq	r6,8
80002acc:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002ad0:	74 08       	ld.w	r8,r10[0x0]
80002ad2:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002ad6:	f9 b7 00 04 	moveq	r7,4
80002ada:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002ade:	74 08       	ld.w	r8,r10[0x0]
80002ae0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002ae4:	f9 be 00 02 	moveq	lr,2
80002ae8:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002aec:	74 08       	ld.w	r8,r10[0x0]
80002aee:	ec 18 00 01 	eorl	r8,0x1
80002af2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002af6:	eb e8 10 08 	or	r8,r5,r8
80002afa:	08 48       	or	r8,r4
80002afc:	06 48       	or	r8,r3
80002afe:	04 48       	or	r8,r2
80002b00:	0c 48       	or	r8,r6
80002b02:	0e 48       	or	r8,r7
80002b04:	1c 48       	or	r8,lr
80002b06:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b0a:	f8 0a 00 0a 	add	r10,r12,r10
80002b0e:	2d 8a       	sub	r10,-40
80002b10:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b12:	a7 6b       	lsl	r11,0x6
80002b14:	2e 0b       	sub	r11,-32
80002b16:	16 0c       	add	r12,r11
80002b18:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b1a:	58 09       	cp.w	r9,0
80002b1c:	c0 31       	brne	80002b22 <tc_configure_interrupts+0x102>
80002b1e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b22:	d5 03       	csrf	0x10
80002b24:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b28 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b28:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b2a:	f6 08 15 04 	lsl	r8,r11,0x4
80002b2e:	14 38       	cp.w	r8,r10
80002b30:	f9 b8 08 10 	movls	r8,16
80002b34:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b38:	f0 0b 02 4b 	mul	r11,r8,r11
80002b3c:	f6 09 16 01 	lsr	r9,r11,0x1
80002b40:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b44:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b48:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b4c:	f2 cb 00 01 	sub	r11,r9,1
80002b50:	e0 4b ff fe 	cp.w	r11,65534
80002b54:	e0 88 00 03 	brls	80002b5a <usart_set_async_baudrate+0x32>
80002b58:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002b5a:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002b5c:	e8 6e 00 00 	mov	lr,524288
80002b60:	59 08       	cp.w	r8,16
80002b62:	fc 08 17 10 	movne	r8,lr
80002b66:	f9 b8 00 00 	moveq	r8,0
80002b6a:	e4 1b ff f7 	andh	r11,0xfff7
80002b6e:	e0 1b fe cf 	andl	r11,0xfecf
80002b72:	16 48       	or	r8,r11
80002b74:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002b76:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002b7a:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002b7e:	99 89       	st.w	r12[0x20],r9
80002b80:	d8 0a       	popm	pc,r12=0

80002b82 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002b82:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002b84:	e2 18 00 02 	andl	r8,0x2,COH
80002b88:	c0 31       	brne	80002b8e <usart_write_char+0xc>
80002b8a:	30 2c       	mov	r12,2
80002b8c:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002b8e:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002b92:	99 7b       	st.w	r12[0x1c],r11
80002b94:	5e fd       	retal	0
80002b96:	d7 03       	nop

80002b98 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002b98:	eb cd 40 e0 	pushm	r5-r7,lr
80002b9c:	18 96       	mov	r6,r12
80002b9e:	16 95       	mov	r5,r11
80002ba0:	e0 67 27 0f 	mov	r7,9999
80002ba4:	c0 68       	rjmp	80002bb0 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ba6:	58 07       	cp.w	r7,0
80002ba8:	c0 31       	brne	80002bae <usart_putchar+0x16>
80002baa:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bae:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bb0:	0a 9b       	mov	r11,r5
80002bb2:	0c 9c       	mov	r12,r6
80002bb4:	f0 1f 00 03 	mcall	80002bc0 <usart_putchar+0x28>
80002bb8:	cf 71       	brne	80002ba6 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002bba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002bbe:	00 00       	add	r0,r0
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	2b 82       	sub	r2,-72

80002bc4 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002bc4:	78 58       	ld.w	r8,r12[0x14]
80002bc6:	e2 18 00 e0 	andl	r8,0xe0,COH
80002bca:	c0 30       	breq	80002bd0 <usart_read_char+0xc>
80002bcc:	30 4c       	mov	r12,4
80002bce:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002bd0:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002bd2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bd6:	c0 31       	brne	80002bdc <usart_read_char+0x18>
80002bd8:	30 3c       	mov	r12,3
80002bda:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002bdc:	78 68       	ld.w	r8,r12[0x18]
80002bde:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002be2:	97 08       	st.w	r11[0x0],r8
80002be4:	5e fd       	retal	0
80002be6:	d7 03       	nop

80002be8 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002be8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bec:	18 96       	mov	r6,r12
80002bee:	16 97       	mov	r7,r11
  while (*string != '\0')
80002bf0:	17 8b       	ld.ub	r11,r11[0x0]
80002bf2:	58 0b       	cp.w	r11,0
80002bf4:	c0 80       	breq	80002c04 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002bf6:	2f f7       	sub	r7,-1
80002bf8:	0c 9c       	mov	r12,r6
80002bfa:	f0 1f 00 04 	mcall	80002c08 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002bfe:	0f 8b       	ld.ub	r11,r7[0x0]
80002c00:	58 0b       	cp.w	r11,0
80002c02:	cf a1       	brne	80002bf6 <usart_write_line+0xe>
80002c04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2b 98       	sub	r8,-71

80002c0c <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c0c:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c10:	e6 18 00 01 	andh	r8,0x1,COH
80002c14:	c0 71       	brne	80002c22 <usart_reset+0x16>
80002c16:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c18:	3f f8       	mov	r8,-1
80002c1a:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c1c:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c1e:	d5 03       	csrf	0x10
80002c20:	c0 48       	rjmp	80002c28 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c22:	3f f8       	mov	r8,-1
80002c24:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c26:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c28:	30 08       	mov	r8,0
80002c2a:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c2c:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c2e:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c30:	e8 68 61 0c 	mov	r8,549132
80002c34:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c36:	5e fc       	retal	r12

80002c38 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c38:	eb cd 40 e0 	pushm	r5-r7,lr
80002c3c:	18 96       	mov	r6,r12
80002c3e:	16 97       	mov	r7,r11
80002c40:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c42:	f0 1f 00 2f 	mcall	80002cfc <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c46:	58 07       	cp.w	r7,0
80002c48:	c5 80       	breq	80002cf8 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c4a:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c4c:	30 49       	mov	r9,4
80002c4e:	f2 08 18 00 	cp.b	r8,r9
80002c52:	e0 88 00 53 	brls	80002cf8 <usart_init_rs232+0xc0>
80002c56:	30 99       	mov	r9,9
80002c58:	f2 08 18 00 	cp.b	r8,r9
80002c5c:	e0 8b 00 4e 	brhi	80002cf8 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c60:	0f d9       	ld.ub	r9,r7[0x5]
80002c62:	30 78       	mov	r8,7
80002c64:	f0 09 18 00 	cp.b	r9,r8
80002c68:	e0 8b 00 48 	brhi	80002cf8 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002c6c:	8e 39       	ld.sh	r9,r7[0x6]
80002c6e:	e0 68 01 01 	mov	r8,257
80002c72:	f0 09 19 00 	cp.h	r9,r8
80002c76:	e0 8b 00 41 	brhi	80002cf8 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002c7a:	ef 39 00 08 	ld.ub	r9,r7[8]
80002c7e:	30 38       	mov	r8,3
80002c80:	f0 09 18 00 	cp.b	r9,r8
80002c84:	e0 8b 00 3a 	brhi	80002cf8 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002c88:	0a 9a       	mov	r10,r5
80002c8a:	6e 0b       	ld.w	r11,r7[0x0]
80002c8c:	0c 9c       	mov	r12,r6
80002c8e:	f0 1f 00 1d 	mcall	80002d00 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c92:	58 1c       	cp.w	r12,1
80002c94:	c3 20       	breq	80002cf8 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002c96:	0f c8       	ld.ub	r8,r7[0x4]
80002c98:	30 99       	mov	r9,9
80002c9a:	f2 08 18 00 	cp.b	r8,r9
80002c9e:	c0 51       	brne	80002ca8 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002ca0:	6c 18       	ld.w	r8,r6[0x4]
80002ca2:	b1 b8       	sbr	r8,0x11
80002ca4:	8d 18       	st.w	r6[0x4],r8
80002ca6:	c0 68       	rjmp	80002cb2 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002ca8:	6c 19       	ld.w	r9,r6[0x4]
80002caa:	20 58       	sub	r8,5
80002cac:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cb0:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cb2:	6c 19       	ld.w	r9,r6[0x4]
80002cb4:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002cb8:	0f d8       	ld.ub	r8,r7[0x5]
80002cba:	a9 78       	lsl	r8,0x9
80002cbc:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002cc0:	12 48       	or	r8,r9
80002cc2:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002cc4:	8e 38       	ld.sh	r8,r7[0x6]
80002cc6:	30 29       	mov	r9,2
80002cc8:	f2 08 19 00 	cp.h	r8,r9
80002ccc:	e0 88 00 09 	brls	80002cde <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002cd0:	6c 18       	ld.w	r8,r6[0x4]
80002cd2:	ad b8       	sbr	r8,0xd
80002cd4:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002cd6:	8e b8       	ld.uh	r8,r7[0x6]
80002cd8:	20 28       	sub	r8,2
80002cda:	8d a8       	st.w	r6[0x28],r8
80002cdc:	c0 68       	rjmp	80002ce8 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002cde:	6c 19       	ld.w	r9,r6[0x4]
80002ce0:	5c 78       	castu.h	r8
80002ce2:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002ce6:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002ce8:	6c 18       	ld.w	r8,r6[0x4]
80002cea:	e0 18 ff f0 	andl	r8,0xfff0
80002cee:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002cf0:	35 08       	mov	r8,80
80002cf2:	8d 08       	st.w	r6[0x0],r8
80002cf4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002cf8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	2c 0c       	sub	r12,-64
80002d00:	80 00       	ld.sh	r0,r0[0x0]
80002d02:	2b 28       	sub	r8,-78

80002d04 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d04:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d08:	fe c0 f1 08 	sub	r0,pc,-3832

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d0c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d10:	d5 53       	csrf	0x15
  cp      r0, r1
80002d12:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d14:	33 01       	mov	r1,48
  lda.w   r2, _data_lma
80002d16:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002d18:	c0 72       	brcc	80002d26 <idata_load_loop_end>
  st.d    r0++, r4
80002d1a:	fe c2 ed 12 	sub	r2,pc,-4846

80002d1e <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002d1e:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d20:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002d22:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002d24:	cf d3       	brcs	80002d1e <idata_load_loop>

80002d26 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002d26:	33 00       	mov	r0,48
  mov     r2, 0
80002d28:	e0 61 02 10 	mov	r1,528
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d2c:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002d2e:	c0 62       	brcc	80002d3a <udata_clear_loop_end>
  brlo    udata_clear_loop
80002d30:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d32:	30 03       	mov	r3,0

80002d34 <udata_clear_loop>:
80002d34:	a1 22       	st.d	r0++,r2
80002d36:	02 30       	cp.w	r0,r1
80002d38:	cf e3       	brcs	80002d34 <udata_clear_loop>

80002d3a <udata_clear_loop_end>:
80002d3a:	fe cf f6 e2 	sub	pc,pc,-2334
80002d3e:	d7 03       	nop

80002d40 <pal_trx_frame_write>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_write(uint8_t * data, uint8_t length)
{
80002d40:	eb cd 40 78 	pushm	r3-r6,lr
80002d44:	20 1d       	sub	sp,4
80002d46:	18 94       	mov	r4,r12
80002d48:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d4a:	e1 b3 00 00 	mfsr	r3,0x0
80002d4e:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002d50:	49 16       	lddpc	r6,80002d94 <pal_trx_frame_write+0x54>
80002d52:	0d 8b       	ld.ub	r11,r6[0x0]
80002d54:	fe 7c 40 00 	mov	r12,-49152
80002d58:	f0 1f 00 10 	mcall	80002d98 <pal_trx_frame_write+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FW;
80002d5c:	fa cb ff fc 	sub	r11,sp,-4
80002d60:	36 08       	mov	r8,96
80002d62:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80002d64:	30 1a       	mov	r10,1
80002d66:	fe 7c 40 00 	mov	r12,-49152
80002d6a:	f0 1f 00 0d 	mcall	80002d9c <pal_trx_frame_write+0x5c>

	spi_write_packet(AT86RFX_SPI, data, length);
80002d6e:	0a 9a       	mov	r10,r5
80002d70:	08 9b       	mov	r11,r4
80002d72:	fe 7c 40 00 	mov	r12,-49152
80002d76:	f0 1f 00 0a 	mcall	80002d9c <pal_trx_frame_write+0x5c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002d7a:	0d 8b       	ld.ub	r11,r6[0x0]
80002d7c:	fe 7c 40 00 	mov	r12,-49152
80002d80:	f0 1f 00 08 	mcall	80002da0 <pal_trx_frame_write+0x60>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002d84:	e6 13 00 01 	andh	r3,0x1,COH
80002d88:	c0 21       	brne	80002d8c <pal_trx_frame_write+0x4c>
80002d8a:	d5 03       	csrf	0x10
}
80002d8c:	2f fd       	sub	sp,-4
80002d8e:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002d92:	00 00       	add	r0,r0
80002d94:	00 00       	add	r0,r0
80002d96:	00 08       	add	r8,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	27 e8       	sub	r8,126
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2f 1e       	sub	lr,-15
80002da0:	80 00       	ld.sh	r0,r0[0x0]
80002da2:	28 34       	sub	r4,-125

80002da4 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002da4:	eb cd 40 c0 	pushm	r6-r7,lr
80002da8:	20 2d       	sub	sp,8
80002daa:	ba cc       	st.b	sp[0x4],r12
80002dac:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002dae:	e1 b6 00 00 	mfsr	r6,0x0
80002db2:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002db4:	1b c8       	ld.ub	r8,sp[0x4]
80002db6:	ea 18 ff ff 	orh	r8,0xffff
80002dba:	e8 18 ff c0 	orl	r8,0xffc0
80002dbe:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002dc0:	49 07       	lddpc	r7,80002e00 <pal_trx_reg_write+0x5c>
80002dc2:	0f 8b       	ld.ub	r11,r7[0x0]
80002dc4:	fe 7c 40 00 	mov	r12,-49152
80002dc8:	f0 1f 00 0f 	mcall	80002e04 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002dcc:	30 1a       	mov	r10,1
80002dce:	fa cb ff fc 	sub	r11,sp,-4
80002dd2:	fe 7c 40 00 	mov	r12,-49152
80002dd6:	f0 1f 00 0d 	mcall	80002e08 <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002dda:	30 1a       	mov	r10,1
80002ddc:	1a 9b       	mov	r11,sp
80002dde:	fe 7c 40 00 	mov	r12,-49152
80002de2:	f0 1f 00 0a 	mcall	80002e08 <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002de6:	0f 8b       	ld.ub	r11,r7[0x0]
80002de8:	fe 7c 40 00 	mov	r12,-49152
80002dec:	f0 1f 00 08 	mcall	80002e0c <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002df0:	e6 16 00 01 	andh	r6,0x1,COH
80002df4:	c0 21       	brne	80002df8 <pal_trx_reg_write+0x54>
80002df6:	d5 03       	csrf	0x10
}
80002df8:	2f ed       	sub	sp,-8
80002dfa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dfe:	00 00       	add	r0,r0
80002e00:	00 00       	add	r0,r0
80002e02:	00 08       	add	r8,r0
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	27 e8       	sub	r8,126
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	2f 1e       	sub	lr,-15
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	28 34       	sub	r4,-125

80002e10 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002e10:	eb cd 40 c0 	pushm	r6-r7,lr
80002e14:	20 2d       	sub	sp,8
80002e16:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002e18:	30 08       	mov	r8,0
80002e1a:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e1c:	e1 b6 00 00 	mfsr	r6,0x0
80002e20:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002e22:	1b 88       	ld.ub	r8,sp[0x0]
80002e24:	ea 18 ff ff 	orh	r8,0xffff
80002e28:	e8 18 ff 80 	orl	r8,0xff80
80002e2c:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e2e:	49 17       	lddpc	r7,80002e70 <pal_trx_reg_read+0x60>
80002e30:	0f 8b       	ld.ub	r11,r7[0x0]
80002e32:	fe 7c 40 00 	mov	r12,-49152
80002e36:	f0 1f 00 10 	mcall	80002e74 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002e3a:	30 1a       	mov	r10,1
80002e3c:	1a 9b       	mov	r11,sp
80002e3e:	fe 7c 40 00 	mov	r12,-49152
80002e42:	f0 1f 00 0e 	mcall	80002e78 <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002e46:	30 1a       	mov	r10,1
80002e48:	fa cb ff f9 	sub	r11,sp,-7
80002e4c:	fe 7c 40 00 	mov	r12,-49152
80002e50:	f0 1f 00 0b 	mcall	80002e7c <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e54:	0f 8b       	ld.ub	r11,r7[0x0]
80002e56:	fe 7c 40 00 	mov	r12,-49152
80002e5a:	f0 1f 00 0a 	mcall	80002e80 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e5e:	e6 16 00 01 	andh	r6,0x1,COH
80002e62:	c0 21       	brne	80002e66 <pal_trx_reg_read+0x56>
80002e64:	d5 03       	csrf	0x10

	return register_value;
}
80002e66:	1b fc       	ld.ub	r12,sp[0x7]
80002e68:	2f ed       	sub	sp,-8
80002e6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e6e:	00 00       	add	r0,r0
80002e70:	00 00       	add	r0,r0
80002e72:	00 08       	add	r8,r0
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	27 e8       	sub	r8,126
80002e78:	80 00       	ld.sh	r0,r0[0x0]
80002e7a:	2f 1e       	sub	lr,-15
80002e7c:	80 00       	ld.sh	r0,r0[0x0]
80002e7e:	2e ce       	sub	lr,-20
80002e80:	80 00       	ld.sh	r0,r0[0x0]
80002e82:	28 34       	sub	r4,-125

80002e84 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e84:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002e88:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e8a:	e6 18 00 01 	andh	r8,0x1,COH
80002e8e:	c0 21       	brne	80002e92 <sysclk_init+0xe>
      cpu_irq_enable();
80002e90:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002e92:	5e fc       	retal	r12

80002e94 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002e94:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e96:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002e9a:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002e9c:	a3 6c       	lsl	r12,0x2
80002e9e:	fe 7a 14 20 	mov	r10,-60384
80002ea2:	f8 0a 00 08 	add	r8,r12,r10
80002ea6:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002ea8:	30 1e       	mov	lr,1
80002eaa:	fc 0b 09 4b 	lsl	r11,lr,r11
80002eae:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002eb0:	32 0a       	mov	r10,32
80002eb2:	ea 1a aa 00 	orh	r10,0xaa00
80002eb6:	14 0c       	add	r12,r10
80002eb8:	fe 7a 14 00 	mov	r10,-60416
80002ebc:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002ec0:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ec2:	12 98       	mov	r8,r9
80002ec4:	e6 18 00 01 	andh	r8,0x1,COH
80002ec8:	c0 21       	brne	80002ecc <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002eca:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002ecc:	d8 02       	popm	pc

80002ece <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002ece:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002ed2:	58 0a       	cp.w	r10,0
80002ed4:	c0 61       	brne	80002ee0 <spi_read_packet+0x12>
80002ed6:	c2 28       	rjmp	80002f1a <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002ed8:	58 08       	cp.w	r8,0
80002eda:	c1 d0       	breq	80002f14 <spi_read_packet+0x46>
80002edc:	20 18       	sub	r8,1
80002ede:	c0 68       	rjmp	80002eea <spi_read_packet+0x1c>
80002ee0:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ee4:	e0 67 00 ff 	mov	r7,255
80002ee8:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002eea:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002eec:	e2 19 00 02 	andl	r9,0x2,COH
80002ef0:	cf 40       	breq	80002ed8 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ef2:	99 37       	st.w	r12[0xc],r7
80002ef4:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002ef6:	c0 48       	rjmp	80002efe <spi_read_packet+0x30>
			if (!timeout--) {
80002ef8:	58 08       	cp.w	r8,0
80002efa:	c0 d0       	breq	80002f14 <spi_read_packet+0x46>
80002efc:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002efe:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002f00:	e2 19 02 01 	andl	r9,0x201,COH
80002f04:	e0 49 02 01 	cp.w	r9,513
80002f08:	cf 81       	brne	80002ef8 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002f0a:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002f0c:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002f0e:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002f10:	ce c1       	brne	80002ee8 <spi_read_packet+0x1a>
80002f12:	c0 48       	rjmp	80002f1a <spi_read_packet+0x4c>
80002f14:	3f dc       	mov	r12,-3
80002f16:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f1a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002f1e <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002f1e:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f20:	58 0a       	cp.w	r10,0
80002f22:	c0 81       	brne	80002f32 <spi_write_packet+0x14>
80002f24:	c1 28       	rjmp	80002f48 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002f26:	58 08       	cp.w	r8,0
80002f28:	c0 31       	brne	80002f2e <spi_write_packet+0x10>
80002f2a:	3f dc       	mov	r12,-3
80002f2c:	d8 02       	popm	pc
80002f2e:	20 18       	sub	r8,1
80002f30:	c0 48       	rjmp	80002f38 <spi_write_packet+0x1a>
80002f32:	e0 6e 3a 98 	mov	lr,15000
80002f36:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002f38:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002f3a:	e2 19 00 02 	andl	r9,0x2,COH
80002f3e:	cf 40       	breq	80002f26 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f40:	17 38       	ld.ub	r8,r11++
80002f42:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002f44:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f46:	cf 81       	brne	80002f36 <spi_write_packet+0x18>
80002f48:	d8 0a       	popm	pc,r12=0
80002f4a:	d7 03       	nop

80002f4c <getStateAT86RF212>:
//*******************************************************************************************************
	
	TRX_STATUS=pal_trx_reg_read(RG_TRX_STATUS);
}
uint8_t getStateAT86RF212(void)
{
80002f4c:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80002f4e:	30 1c       	mov	r12,1
80002f50:	f0 1f 00 03 	mcall	80002f5c <getStateAT86RF212+0x10>
}
80002f54:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002f58:	d8 02       	popm	pc
80002f5a:	00 00       	add	r0,r0
80002f5c:	80 00       	ld.sh	r0,r0[0x0]
80002f5e:	2e 10       	sub	r0,-31

80002f60 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002f60:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002f62:	30 0b       	mov	r11,0
80002f64:	fe 7c 5c 00 	mov	r12,-41984
80002f68:	f0 1f 00 17 	mcall	80002fc4 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002f6c:	49 78       	lddpc	r8,80002fc8 <tc_irq+0x68>
80002f6e:	70 09       	ld.w	r9,r8[0x0]
80002f70:	2f f9       	sub	r9,-1
80002f72:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002f74:	70 08       	ld.w	r8,r8[0x0]
80002f76:	59 38       	cp.w	r8,19
80002f78:	e0 8b 00 0c 	brhi	80002f90 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002f7c:	32 9c       	mov	r12,41
80002f7e:	f0 1f 00 14 	mcall	80002fcc <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002f82:	30 4c       	mov	r12,4
80002f84:	f0 1f 00 12 	mcall	80002fcc <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002f88:	30 bc       	mov	r12,11
80002f8a:	f0 1f 00 11 	mcall	80002fcc <tc_irq+0x6c>
		return;
80002f8e:	c1 98       	rjmp	80002fc0 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002f90:	48 e8       	lddpc	r8,80002fc8 <tc_irq+0x68>
80002f92:	70 08       	ld.w	r8,r8[0x0]
80002f94:	59 58       	cp.w	r8,21
80002f96:	c0 41       	brne	80002f9e <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002f98:	32 9c       	mov	r12,41
80002f9a:	f0 1f 00 0d 	mcall	80002fcc <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002f9e:	48 b8       	lddpc	r8,80002fc8 <tc_irq+0x68>
80002fa0:	70 08       	ld.w	r8,r8[0x0]
80002fa2:	59 68       	cp.w	r8,22
80002fa4:	c0 41       	brne	80002fac <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002fa6:	30 4c       	mov	r12,4
80002fa8:	f0 1f 00 09 	mcall	80002fcc <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002fac:	48 78       	lddpc	r8,80002fc8 <tc_irq+0x68>
80002fae:	70 08       	ld.w	r8,r8[0x0]
80002fb0:	59 78       	cp.w	r8,23
80002fb2:	c0 71       	brne	80002fc0 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002fb4:	30 bc       	mov	r12,11
80002fb6:	f0 1f 00 06 	mcall	80002fcc <tc_irq+0x6c>
		tc_tick = 1;
80002fba:	30 19       	mov	r9,1
80002fbc:	48 38       	lddpc	r8,80002fc8 <tc_irq+0x68>
80002fbe:	91 09       	st.w	r8[0x0],r9
		

	
	
	
}
80002fc0:	d4 02       	popm	lr
80002fc2:	d6 03       	rete
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	29 da       	sub	r10,-99
80002fc8:	00 00       	add	r0,r0
80002fca:	00 1c       	sub	r12,r0
80002fcc:	80 00       	ld.sh	r0,r0[0x0]
80002fce:	25 c8       	sub	r8,92

80002fd0 <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
80002fd0:	d4 01       	pushm	lr
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
80002fd2:	30 2b       	mov	r11,2
80002fd4:	fe 7c 24 00 	mov	r12,-56320
80002fd8:	f0 1f 00 06 	mcall	80002ff0 <eic_int_handler2+0x20>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		algo2=pal_trx_reg_read(RG_IRQ_STATUS);
80002fdc:	30 fc       	mov	r12,15
80002fde:	f0 1f 00 06 	mcall	80002ff4 <eic_int_handler2+0x24>
80002fe2:	48 68       	lddpc	r8,80002ff8 <eic_int_handler2+0x28>
80002fe4:	b0 8c       	st.b	r8[0x0],r12
		tx_end=1;
80002fe6:	30 19       	mov	r9,1
80002fe8:	48 58       	lddpc	r8,80002ffc <eic_int_handler2+0x2c>
80002fea:	b0 89       	st.b	r8[0x0],r9
		
		
}
80002fec:	d4 02       	popm	lr
80002fee:	d6 03       	rete
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	23 cc       	sub	r12,60
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	2e 10       	sub	r0,-31
80002ff8:	00 00       	add	r0,r0
80002ffa:	01 3c       	ld.ub	r12,r0++
80002ffc:	00 00       	add	r0,r0
80002ffe:	01 3d       	ld.ub	sp,r0++

80003000 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80003000:	d4 01       	pushm	lr
80003002:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80003004:	30 0b       	mov	r11,0
80003006:	49 38       	lddpc	r8,80003050 <usart_int_handler_RS232+0x50>
80003008:	70 0c       	ld.w	r12,r8[0x0]
8000300a:	f0 1f 00 13 	mcall	80003054 <usart_int_handler_RS232+0x54>
	
	int c=0;
8000300e:	fa cb ff fc 	sub	r11,sp,-4
80003012:	30 08       	mov	r8,0
80003014:	16 d8       	st.w	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80003016:	1a 9b       	mov	r11,sp
80003018:	fe 7c 38 00 	mov	r12,-51200
8000301c:	f0 1f 00 0f 	mcall	80003058 <usart_int_handler_RS232+0x58>
80003020:	c1 51       	brne	8000304a <usart_int_handler_RS232+0x4a>
		return;

	
		cola_PC[cola_PC_nw] = (char) c;
80003022:	48 f9       	lddpc	r9,8000305c <usart_int_handler_RS232+0x5c>
80003024:	72 08       	ld.w	r8,r9[0x0]
80003026:	40 0b       	lddsp	r11,sp[0x0]
80003028:	48 ea       	lddpc	r10,80003060 <usart_int_handler_RS232+0x60>
8000302a:	f4 08 0b 0b 	st.b	r10[r8],r11
		cola_PC_nw++;	
8000302e:	2f f8       	sub	r8,-1
80003030:	93 08       	st.w	r9[0x0],r8
	
		if (cola_PC_nw >= tamano_cola)
80003032:	e0 48 00 c7 	cp.w	r8,199
80003036:	e0 8a 00 05 	brle	80003040 <usart_int_handler_RS232+0x40>
			cola_PC_nw = 0;
8000303a:	30 09       	mov	r9,0
8000303c:	48 88       	lddpc	r8,8000305c <usart_int_handler_RS232+0x5c>
8000303e:	91 09       	st.w	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003040:	30 0b       	mov	r11,0
80003042:	48 48       	lddpc	r8,80003050 <usart_int_handler_RS232+0x50>
80003044:	70 0c       	ld.w	r12,r8[0x0]
80003046:	f0 1f 00 08 	mcall	80003064 <usart_int_handler_RS232+0x64>
	return;

	
}
8000304a:	2f fd       	sub	sp,-4
8000304c:	d4 02       	popm	lr
8000304e:	d6 03       	rete
80003050:	00 00       	add	r0,r0
80003052:	00 18       	sub	r8,r0
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	29 c8       	sub	r8,-100
80003058:	80 00       	ld.sh	r0,r0[0x0]
8000305a:	2b c4       	sub	r4,-68
8000305c:	00 00       	add	r0,r0
8000305e:	01 38       	ld.ub	r8,r0++
80003060:	00 00       	add	r0,r0
80003062:	01 44       	ld.w	r4,--r0
80003064:	80 00       	ld.sh	r0,r0[0x0]
80003066:	29 b6       	sub	r6,-101

80003068 <setState>:
	tmp &= ~mask;               // mask off bits in reg val
	tmp |= val;                 // copy val into reg val
	pal_trx_reg_write(addr, tmp);   // write back to reg
}
uint8_t setState(uint8_t state)
{
80003068:	d4 21       	pushm	r4-r7,lr
8000306a:	18 96       	mov	r6,r12
// 	{
// 		return RADIO_WRONG_STATE;
// 	}

	// if we're in a transition state, wait for the state to become stable
	curr_state = getStateAT86RF212();
8000306c:	f0 1f 00 59 	mcall	800031d0 <setState+0x168>
80003070:	18 97       	mov	r7,r12
	variable2=curr_state;
80003072:	4d 98       	lddpc	r8,800031d4 <setState+0x16c>
80003074:	b0 8c       	st.b	r8[0x0],r12
	if ((curr_state == BUSY_TX_ARET) || (curr_state == BUSY_RX_AACK) || (curr_state == BUSY_RX) || (curr_state == BUSY_TX))
80003076:	18 99       	mov	r9,r12
80003078:	21 19       	sub	r9,17
8000307a:	30 18       	mov	r8,1
8000307c:	f0 09 18 00 	cp.b	r9,r8
80003080:	5f 89       	srls	r9
80003082:	f0 0c 18 00 	cp.b	r12,r8
80003086:	5f 08       	sreq	r8
80003088:	f3 e8 10 08 	or	r8,r9,r8
8000308c:	c0 51       	brne	80003096 <setState+0x2e>
8000308e:	30 28       	mov	r8,2
80003090:	f0 0c 18 00 	cp.b	r12,r8
80003094:	c0 61       	brne	800030a0 <setState+0x38>
	{
		while (getStateAT86RF212() == curr_state);
80003096:	f0 1f 00 4f 	mcall	800031d0 <setState+0x168>
8000309a:	f8 07 18 00 	cp.b	r7,r12
8000309e:	cf c0       	breq	80003096 <setState+0x2e>
	}

	// At this point it is clear that the requested new_state is:
	// TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
	// we need to handle some special cases before we transition to the new state
	switch (state)
800030a0:	31 68       	mov	r8,22
800030a2:	f0 06 18 00 	cp.b	r6,r8
800030a6:	c4 20       	breq	8000312a <setState+0xc2>
800030a8:	31 98       	mov	r8,25
800030aa:	f0 06 18 00 	cp.b	r6,r8
800030ae:	c2 10       	breq	800030f0 <setState+0x88>
800030b0:	30 88       	mov	r8,8
800030b2:	f0 06 18 00 	cp.b	r6,r8
800030b6:	c5 71       	brne	80003164 <setState+0xfc>
	{
		case CMD_TRX_OFF:
			/* Go to TRX_OFF from any state. */
			SLP_TR_LOW();		
800030b8:	32 7c       	mov	r12,39
800030ba:	f0 1f 00 48 	mcall	800031d8 <setState+0x170>
			pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
800030be:	30 3b       	mov	r11,3
800030c0:	30 2c       	mov	r12,2
800030c2:	f0 1f 00 47 	mcall	800031dc <setState+0x174>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030c6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030ca:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030ce:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030d2:	14 38       	cp.w	r8,r10
800030d4:	e0 88 00 08 	brls	800030e4 <setState+0x7c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030d8:	12 38       	cp.w	r8,r9
800030da:	fe 98 ff fa 	brls	800030ce <setState+0x66>
800030de:	12 3a       	cp.w	r10,r9
800030e0:	c4 23       	brcs	80003164 <setState+0xfc>
800030e2:	cf 6b       	rjmp	800030ce <setState+0x66>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030e4:	12 38       	cp.w	r8,r9
800030e6:	e0 8b 00 3f 	brhi	80003164 <setState+0xfc>
800030ea:	12 3a       	cp.w	r10,r9
800030ec:	c3 c3       	brcs	80003164 <setState+0xfc>
800030ee:	cf 0b       	rjmp	800030ce <setState+0x66>
			DELAY_US(TIME_ALL_STATES_TRX_OFF); // 
		break;

		case CMD_TX_ARET_ON:
		if (curr_state == RX_AACK_ON)
800030f0:	31 68       	mov	r8,22
800030f2:	f0 07 18 00 	cp.b	r7,r8
800030f6:	c3 71       	brne	80003164 <setState+0xfc>
		{
			/* First do intermediate state transition to PLL_ON, then to TX_ARET_ON. */
			pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
800030f8:	30 9b       	mov	r11,9
800030fa:	30 2c       	mov	r12,2
800030fc:	f0 1f 00 38 	mcall	800031dc <setState+0x174>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003100:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003104:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003108:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000310c:	14 38       	cp.w	r8,r10
8000310e:	e0 88 00 08 	brls	8000311e <setState+0xb6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003112:	12 38       	cp.w	r8,r9
80003114:	fe 98 ff fa 	brls	80003108 <setState+0xa0>
80003118:	12 3a       	cp.w	r10,r9
8000311a:	c2 b3       	brcs	80003170 <setState+0x108>
8000311c:	cf 6b       	rjmp	80003108 <setState+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000311e:	12 38       	cp.w	r8,r9
80003120:	e0 8b 00 28 	brhi	80003170 <setState+0x108>
80003124:	12 3a       	cp.w	r10,r9
80003126:	c2 53       	brcs	80003170 <setState+0x108>
80003128:	cf 0b       	rjmp	80003108 <setState+0xa0>
			DELAY_US(TIME_ALL_STATES_TRX_OFF); // 
		}
		break;

		case CMD_RX_AACK_ON:
		if (curr_state == TX_ARET_ON)
8000312a:	31 98       	mov	r8,25
8000312c:	f0 07 18 00 	cp.b	r7,r8
80003130:	c1 a1       	brne	80003164 <setState+0xfc>
		{
			/* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
			pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
80003132:	30 9b       	mov	r11,9
80003134:	30 2c       	mov	r12,2
80003136:	f0 1f 00 2a 	mcall	800031dc <setState+0x174>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000313a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000313e:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003142:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003146:	14 38       	cp.w	r8,r10
80003148:	e0 88 00 08 	brls	80003158 <setState+0xf0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000314c:	12 38       	cp.w	r8,r9
8000314e:	fe 98 ff fa 	brls	80003142 <setState+0xda>
80003152:	12 3a       	cp.w	r10,r9
80003154:	c0 e3       	brcs	80003170 <setState+0x108>
80003156:	cf 6b       	rjmp	80003142 <setState+0xda>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003158:	12 38       	cp.w	r8,r9
8000315a:	e0 8b 00 0b 	brhi	80003170 <setState+0x108>
8000315e:	12 3a       	cp.w	r10,r9
80003160:	c0 83       	brcs	80003170 <setState+0x108>
80003162:	cf 0b       	rjmp	80003142 <setState+0xda>
	/* Now we're okay to transition to any new state. */
	//pal_trx_reg_write(RG_TRX_STATE, state);

	/* When the PLL is active most states can be reached in 1us. However, from */
	/* TRX_OFF the PLL needs time to activate. */
	delay = (curr_state == TRX_OFF) ? TIME_TRX_OFF_PLL_ON : TIME_RX_ON_PLL_ON; 
80003164:	30 88       	mov	r8,8
80003166:	f0 07 18 00 	cp.b	r7,r8
8000316a:	c0 31       	brne	80003170 <setState+0x108>
8000316c:	36 e5       	mov	r5,110
8000316e:	c0 28       	rjmp	80003172 <setState+0x10a>
80003170:	30 15       	mov	r5,1
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003172:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003176:	e0 78 c1 38 	mov	r8,115000
8000317a:	ea 08 06 44 	mulu.d	r4,r5,r8
8000317e:	ee 78 42 40 	mov	r8,1000000
80003182:	30 09       	mov	r9,0
80003184:	ee 7a 42 3f 	mov	r10,999999
80003188:	30 0b       	mov	r11,0
8000318a:	e8 0a 00 0a 	add	r10,r4,r10
8000318e:	ea 0b 00 4b 	adc	r11,r5,r11
80003192:	f0 1f 00 14 	mcall	800031e0 <setState+0x178>
80003196:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000319a:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000319e:	14 37       	cp.w	r7,r10
800031a0:	e0 88 00 08 	brls	800031b0 <setState+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031a4:	10 37       	cp.w	r7,r8
800031a6:	fe 98 ff fa 	brls	8000319a <setState+0x132>
800031aa:	10 3a       	cp.w	r10,r8
800031ac:	c0 73       	brcs	800031ba <setState+0x152>
800031ae:	cf 6b       	rjmp	8000319a <setState+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800031b0:	10 37       	cp.w	r7,r8
800031b2:	e0 8b 00 04 	brhi	800031ba <setState+0x152>
800031b6:	10 3a       	cp.w	r10,r8
800031b8:	cf 12       	brcc	8000319a <setState+0x132>
	DELAY_US(delay);
	variable3=getStateAT86RF212();
800031ba:	f0 1f 00 06 	mcall	800031d0 <setState+0x168>
800031be:	48 a8       	lddpc	r8,800031e4 <setState+0x17c>
800031c0:	b0 8c       	st.b	r8[0x0],r12
	if ( variable3== state)
	{
		return RADIO_SUCCESS;
	}
	return RADIO_TIMED_OUT;
}
800031c2:	f8 06 18 00 	cp.b	r6,r12
800031c6:	f9 bc 01 43 	movne	r12,67
800031ca:	f9 bc 00 40 	moveq	r12,64
800031ce:	d8 22       	popm	r4-r7,pc
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	2f 4c       	sub	r12,-12
800031d4:	00 00       	add	r0,r0
800031d6:	01 42       	ld.w	r2,--r0
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	25 96       	sub	r6,89
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	2d a4       	sub	r4,-38
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	38 18       	mov	r8,-127
800031e4:	00 00       	add	r0,r0
800031e6:	01 40       	ld.w	r0,--r0

800031e8 <iniciarAT86RF212>:
	pal_trx_reg_write(addr, aux);
	aux=pal_trx_reg_read(addr);
}

void iniciarAT86RF212(void)
{
800031e8:	eb cd 40 c0 	pushm	r6-r7,lr
	
	RST_HIGH();
800031ec:	32 8c       	mov	r12,40
800031ee:	f0 1f 00 3b 	mcall	800032d8 <iniciarAT86RF212+0xf0>
	SLP_TR_LOW();
800031f2:	32 7c       	mov	r12,39
800031f4:	f0 1f 00 3a 	mcall	800032dc <iniciarAT86RF212+0xf4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031f8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031fc:	f0 ca ff da 	sub	r10,r8,-38
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003200:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003204:	14 38       	cp.w	r8,r10
80003206:	e0 88 00 08 	brls	80003216 <iniciarAT86RF212+0x2e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000320a:	12 38       	cp.w	r8,r9
8000320c:	fe 98 ff fa 	brls	80003200 <iniciarAT86RF212+0x18>
80003210:	12 3a       	cp.w	r10,r9
80003212:	c4 c3       	brcs	800032aa <iniciarAT86RF212+0xc2>
80003214:	cf 6b       	rjmp	80003200 <iniciarAT86RF212+0x18>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003216:	12 38       	cp.w	r8,r9
80003218:	e0 8b 00 49 	brhi	800032aa <iniciarAT86RF212+0xc2>
8000321c:	12 3a       	cp.w	r10,r9
8000321e:	c4 63       	brcs	800032aa <iniciarAT86RF212+0xc2>
80003220:	cf 0b       	rjmp	80003200 <iniciarAT86RF212+0x18>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003222:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003226:	14 38       	cp.w	r8,r10
80003228:	e0 88 00 08 	brls	80003238 <iniciarAT86RF212+0x50>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000322c:	12 38       	cp.w	r8,r9
8000322e:	fe 98 ff fa 	brls	80003222 <iniciarAT86RF212+0x3a>
80003232:	12 3a       	cp.w	r10,r9
80003234:	c4 33       	brcs	800032ba <iniciarAT86RF212+0xd2>
80003236:	cf 6b       	rjmp	80003222 <iniciarAT86RF212+0x3a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003238:	12 38       	cp.w	r8,r9
8000323a:	e0 8b 00 40 	brhi	800032ba <iniciarAT86RF212+0xd2>
8000323e:	12 3a       	cp.w	r10,r9
80003240:	c3 d3       	brcs	800032ba <iniciarAT86RF212+0xd2>
80003242:	cf 0b       	rjmp	80003222 <iniciarAT86RF212+0x3a>
	RST_LOW();
	DELAY_US(RST_PULSE_WIDTH_US);
	RST_HIGH();
	
	pal_trx_reg_write(RG_IRQ_MASK, CMD_NOP); // deshabilitar interrupciones del AT86RF212 mientras lo configuro
	while ((pal_trx_reg_read(RG_IRQ_STATUS))!= CMD_NOP);// espero al estado de off
80003244:	0e 9c       	mov	r12,r7
80003246:	f0 1f 00 27 	mcall	800032e0 <iniciarAT86RF212+0xf8>
8000324a:	cf d1       	brne	80003244 <iniciarAT86RF212+0x5c>
	while (setState(CMD_TRX_OFF)!=RADIO_SUCCESS);
8000324c:	30 86       	mov	r6,8
8000324e:	34 07       	mov	r7,64
80003250:	0c 9c       	mov	r12,r6
80003252:	f0 1f 00 25 	mcall	800032e4 <iniciarAT86RF212+0xfc>
80003256:	ee 0c 18 00 	cp.b	r12,r7
8000325a:	cf b1       	brne	80003250 <iniciarAT86RF212+0x68>
// 			DELAY_US(300);
// 			pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
// 		}
	
	
	pal_trx_reg_write(RG_TRX_CTRL_0, CMD_NOP); 
8000325c:	30 0b       	mov	r11,0
8000325e:	30 3c       	mov	r12,3
80003260:	f0 1f 00 22 	mcall	800032e8 <iniciarAT86RF212+0x100>
	
	// set channel ->
//	pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz
	pal_trx_reg_write(RG_IRQ_MASK,0x0C);  // IRQ_RX_START && IRQ_TRX_END
80003264:	30 cb       	mov	r11,12
80003266:	30 ec       	mov	r12,14
80003268:	f0 1f 00 20 	mcall	800032e8 <iniciarAT86RF212+0x100>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000326c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003270:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003274:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003278:	14 38       	cp.w	r8,r10
8000327a:	e0 88 00 08 	brls	8000328a <iniciarAT86RF212+0xa2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000327e:	12 38       	cp.w	r8,r9
80003280:	fe 98 ff fa 	brls	80003274 <iniciarAT86RF212+0x8c>
80003284:	12 3a       	cp.w	r10,r9
80003286:	c2 33       	brcs	800032cc <iniciarAT86RF212+0xe4>
80003288:	cf 6b       	rjmp	80003274 <iniciarAT86RF212+0x8c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000328a:	12 38       	cp.w	r8,r9
8000328c:	e0 8b 00 20 	brhi	800032cc <iniciarAT86RF212+0xe4>
80003290:	12 3a       	cp.w	r10,r9
80003292:	c1 d3       	brcs	800032cc <iniciarAT86RF212+0xe4>
80003294:	cf 0b       	rjmp	80003274 <iniciarAT86RF212+0x8c>

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
       	escribir_linea_pc("ERROR Modulo RF %c \n",buf);
    }*/
   while ((pal_trx_reg_read(RG_TRX_STATUS)&0x1F)!=CMD_RX_ON);
80003296:	0e 9c       	mov	r12,r7
80003298:	f0 1f 00 12 	mcall	800032e0 <iniciarAT86RF212+0xf8>
8000329c:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
800032a0:	58 6c       	cp.w	r12,6
800032a2:	cf a1       	brne	80003296 <iniciarAT86RF212+0xae>
  cpu_irq_enable();
800032a4:	d5 03       	csrf	0x10
}
800032a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

	/* Wait typical time. */
	DELAY_US(P_ON_TO_CLKM_AVAILABLE_TYP_US);

	/* Apply reset pulse */
	RST_LOW();
800032aa:	32 8c       	mov	r12,40
800032ac:	f0 1f 00 0c 	mcall	800032dc <iniciarAT86RF212+0xf4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032b0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032b4:	f0 ca ff ff 	sub	r10,r8,-1
800032b8:	cb 5b       	rjmp	80003222 <iniciarAT86RF212+0x3a>
	DELAY_US(RST_PULSE_WIDTH_US);
	RST_HIGH();
800032ba:	32 8c       	mov	r12,40
800032bc:	f0 1f 00 07 	mcall	800032d8 <iniciarAT86RF212+0xf0>
	
	pal_trx_reg_write(RG_IRQ_MASK, CMD_NOP); // deshabilitar interrupciones del AT86RF212 mientras lo configuro
800032c0:	30 0b       	mov	r11,0
800032c2:	30 ec       	mov	r12,14
800032c4:	f0 1f 00 09 	mcall	800032e8 <iniciarAT86RF212+0x100>
	while ((pal_trx_reg_read(RG_IRQ_STATUS))!= CMD_NOP);// espero al estado de off
800032c8:	30 f7       	mov	r7,15
800032ca:	cb db       	rjmp	80003244 <iniciarAT86RF212+0x5c>
	
	// set channel ->
//	pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz
	pal_trx_reg_write(RG_IRQ_MASK,0x0C);  // IRQ_RX_START && IRQ_TRX_END
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON);// seteo el tran en RX
800032cc:	30 6b       	mov	r11,6
800032ce:	30 2c       	mov	r12,2
800032d0:	f0 1f 00 06 	mcall	800032e8 <iniciarAT86RF212+0x100>

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
       	escribir_linea_pc("ERROR Modulo RF %c \n",buf);
    }*/
   while ((pal_trx_reg_read(RG_TRX_STATUS)&0x1F)!=CMD_RX_ON);
800032d4:	30 17       	mov	r7,1
800032d6:	ce 0b       	rjmp	80003296 <iniciarAT86RF212+0xae>
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	25 80       	sub	r0,88
800032dc:	80 00       	ld.sh	r0,r0[0x0]
800032de:	25 96       	sub	r6,89
800032e0:	80 00       	ld.sh	r0,r0[0x0]
800032e2:	2e 10       	sub	r0,-31
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	30 68       	mov	r8,6
800032e8:	80 00       	ld.sh	r0,r0[0x0]
800032ea:	2d a4       	sub	r4,-38

800032ec <txTrama>:
		return RADIO_SUCCESS;
	}
	return RADIO_TIMED_OUT;
}
uint8_t txTrama(uint8_t *data)
{
800032ec:	d4 21       	pushm	r4-r7,lr
800032ee:	18 94       	mov	r4,r12
	uint8_t state = getStateAT86RF212();
800032f0:	f0 1f 00 46 	mcall	80003408 <txTrama+0x11c>
	//pcb_t *pcb = chb_get_pcb();
	tx_end=0;
800032f4:	30 08       	mov	r8,0
800032f6:	4c 69       	lddpc	r9,8000340c <txTrama+0x120>
800032f8:	b2 88       	st.b	r9[0x0],r8
	if ((state == BUSY_TX) || (state == BUSY_TX_ARET))
800032fa:	30 29       	mov	r9,2
800032fc:	f2 0c 18 00 	cp.b	r12,r9
80003300:	5f 0a       	sreq	r10
80003302:	31 29       	mov	r9,18
80003304:	f2 0c 18 00 	cp.b	r12,r9
80003308:	5f 09       	sreq	r9
8000330a:	f5 e9 10 09 	or	r9,r10,r9
8000330e:	f0 09 18 00 	cp.b	r9,r8
80003312:	c6 d1       	brne	800033ec <txTrama+0x100>
	{
		return RADIO_WRONG_STATE;
	}
	DISABLE_TRX_IRQ();
80003314:	30 dc       	mov	r12,13
80003316:	f0 1f 00 3f 	mcall	80003410 <txTrama+0x124>
// 	while ((pal_trx_reg_read(RG_TRX_STATUS)&0x1F)!= CMD_TRX_OFF)// espero al estado de off
// 	{
// 		DELAY_US(300);
// 		pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
// 	}
	while (setState(CMD_TRX_OFF)!=RADIO_SUCCESS);
8000331a:	30 86       	mov	r6,8
8000331c:	34 07       	mov	r7,64
8000331e:	0c 9c       	mov	r12,r6
80003320:	f0 1f 00 3d 	mcall	80003414 <txTrama+0x128>
80003324:	ee 0c 18 00 	cp.b	r12,r7
80003328:	cf b1       	brne	8000331e <txTrama+0x32>
	/////////
	pal_trx_reg_write(RG_TRX_STATE,CMD_TX_ARET_ON); // off o force off -forzar al AT86RF212 a estar en estado de off para configurar
8000332a:	31 9b       	mov	r11,25
8000332c:	30 2c       	mov	r12,2
8000332e:	f0 1f 00 3b 	mcall	80003418 <txTrama+0x12c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003332:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003336:	f0 ca ff e9 	sub	r10,r8,-23
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000333a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000333e:	14 38       	cp.w	r8,r10
80003340:	e0 88 00 08 	brls	80003350 <txTrama+0x64>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003344:	12 38       	cp.w	r8,r9
80003346:	fe 98 ff fa 	brls	8000333a <txTrama+0x4e>
8000334a:	12 3a       	cp.w	r10,r9
8000334c:	c1 d3       	brcs	80003386 <txTrama+0x9a>
8000334e:	cf 6b       	rjmp	8000333a <txTrama+0x4e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003350:	12 38       	cp.w	r8,r9
80003352:	e0 8b 00 1a 	brhi	80003386 <txTrama+0x9a>
80003356:	12 3a       	cp.w	r10,r9
80003358:	c1 73       	brcs	80003386 <txTrama+0x9a>
8000335a:	cf 0b       	rjmp	8000333a <txTrama+0x4e>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000335c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003360:	f0 ca ff dd 	sub	r10,r8,-35
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003364:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003368:	14 38       	cp.w	r8,r10
8000336a:	e0 88 00 08 	brls	8000337a <txTrama+0x8e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000336e:	12 38       	cp.w	r8,r9
80003370:	fe 98 ff fa 	brls	80003364 <txTrama+0x78>
80003374:	12 3a       	cp.w	r10,r9
80003376:	c3 d3       	brcs	800033f0 <txTrama+0x104>
80003378:	cf 6b       	rjmp	80003364 <txTrama+0x78>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000337a:	12 38       	cp.w	r8,r9
8000337c:	e0 8b 00 3a 	brhi	800033f0 <txTrama+0x104>
80003380:	12 3a       	cp.w	r10,r9
80003382:	c3 73       	brcs	800033f0 <txTrama+0x104>
80003384:	cf 0b       	rjmp	80003364 <txTrama+0x78>
	DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);
	while ((pal_trx_reg_read(RG_TRX_STATUS)&0x1F)!=CMD_TX_ARET_ON)// espero al estado de off
80003386:	30 15       	mov	r5,1
	{
		DELAY_US(300);
		pal_trx_reg_write(RG_TRX_STATE,CMD_TX_ARET_ON);
80003388:	31 96       	mov	r6,25
8000338a:	30 27       	mov	r7,2
// 	}
	while (setState(CMD_TRX_OFF)!=RADIO_SUCCESS);
	/////////
	pal_trx_reg_write(RG_TRX_STATE,CMD_TX_ARET_ON); // off o force off -forzar al AT86RF212 a estar en estado de off para configurar
	DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);
	while ((pal_trx_reg_read(RG_TRX_STATUS)&0x1F)!=CMD_TX_ARET_ON)// espero al estado de off
8000338c:	0a 9c       	mov	r12,r5
8000338e:	f0 1f 00 24 	mcall	8000341c <txTrama+0x130>
80003392:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80003396:	59 9c       	cp.w	r12,25
80003398:	ce 21       	brne	8000335c <txTrama+0x70>
	
	// TODO: try and start the frame transmission by writing TX_START command instead of toggling
	// sleep pin...i just feel like it's kind of weird...

	// write frame to buffer. first write header into buffer (add 1 for len byte), then data.
	pal_trx_frame_write(data,data[0] - LENGTH_FIELD_LEN);
8000339a:	09 8b       	ld.ub	r11,r4[0x0]
8000339c:	20 1b       	sub	r11,1
8000339e:	5c 5b       	castu.b	r11
800033a0:	08 9c       	mov	r12,r4
800033a2:	f0 1f 00 20 	mcall	80003420 <txTrama+0x134>
	
// 	chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len); // -------------------------
// 
// 	//Do frame transmission.
	pal_trx_reg_write(RG_TRX_STATE,CMD_TX_START);
800033a6:	30 2b       	mov	r11,2
800033a8:	16 9c       	mov	r12,r11
800033aa:	f0 1f 00 1c 	mcall	80003418 <txTrama+0x12c>
// 	pcb->tx_end = false;
// 
// 	// check the status of the transmission
	//while (); ciclo para esperar la interrupcion e podria actualizar el estado
	
	ENABLE_TRX_IRQ();
800033ae:	30 1b       	mov	r11,1
800033b0:	30 dc       	mov	r12,13
800033b2:	f0 1f 00 1d 	mcall	80003424 <txTrama+0x138>
	while (tx_end!=0);
800033b6:	49 68       	lddpc	r8,8000340c <txTrama+0x120>
800033b8:	11 89       	ld.ub	r9,r8[0x0]
800033ba:	30 08       	mov	r8,0
800033bc:	f0 09 18 00 	cp.b	r9,r8
800033c0:	c2 21       	brne	80003404 <txTrama+0x118>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800033c2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800033c6:	f0 ca ff d2 	sub	r10,r8,-46
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033ca:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033ce:	14 38       	cp.w	r8,r10
800033d0:	e0 88 00 08 	brls	800033e0 <txTrama+0xf4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033d4:	12 38       	cp.w	r8,r9
800033d6:	fe 98 ff fa 	brls	800033ca <txTrama+0xde>
800033da:	12 3a       	cp.w	r10,r9
800033dc:	c0 f3       	brcs	800033fa <txTrama+0x10e>
800033de:	cf 6b       	rjmp	800033ca <txTrama+0xde>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033e0:	12 38       	cp.w	r8,r9
800033e2:	e0 8b 00 0c 	brhi	800033fa <txTrama+0x10e>
800033e6:	12 3a       	cp.w	r10,r9
800033e8:	c0 93       	brcs	800033fa <txTrama+0x10e>
800033ea:	cf 0b       	rjmp	800033ca <txTrama+0xde>
800033ec:	34 4c       	mov	r12,68
	DELAY_US(400);
	variable1=getStateAT86RF212();
	return variable1;
}
800033ee:	d8 22       	popm	r4-r7,pc
	pal_trx_reg_write(RG_TRX_STATE,CMD_TX_ARET_ON); // off o force off -forzar al AT86RF212 a estar en estado de off para configurar
	DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);
	while ((pal_trx_reg_read(RG_TRX_STATUS)&0x1F)!=CMD_TX_ARET_ON)// espero al estado de off
	{
		DELAY_US(300);
		pal_trx_reg_write(RG_TRX_STATE,CMD_TX_ARET_ON);
800033f0:	0c 9b       	mov	r11,r6
800033f2:	0e 9c       	mov	r12,r7
800033f4:	f0 1f 00 09 	mcall	80003418 <txTrama+0x12c>
800033f8:	cc ab       	rjmp	8000338c <txTrama+0xa0>
	//while (); ciclo para esperar la interrupcion e podria actualizar el estado
	
	ENABLE_TRX_IRQ();
	while (tx_end!=0);
	DELAY_US(400);
	variable1=getStateAT86RF212();
800033fa:	f0 1f 00 04 	mcall	80003408 <txTrama+0x11c>
800033fe:	48 b8       	lddpc	r8,80003428 <txTrama+0x13c>
80003400:	b0 8c       	st.b	r8[0x0],r12
	return variable1;
80003402:	d8 22       	popm	r4-r7,pc
80003404:	c0 08       	rjmp	80003404 <txTrama+0x118>
80003406:	00 00       	add	r0,r0
80003408:	80 00       	ld.sh	r0,r0[0x0]
8000340a:	2f 4c       	sub	r12,-12
8000340c:	00 00       	add	r0,r0
8000340e:	01 3d       	ld.ub	sp,r0++
80003410:	80 00       	ld.sh	r0,r0[0x0]
80003412:	26 54       	sub	r4,101
80003414:	80 00       	ld.sh	r0,r0[0x0]
80003416:	30 68       	mov	r8,6
80003418:	80 00       	ld.sh	r0,r0[0x0]
8000341a:	2d a4       	sub	r4,-38
8000341c:	80 00       	ld.sh	r0,r0[0x0]
8000341e:	2e 10       	sub	r0,-31
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	2d 40       	sub	r0,-44
80003424:	80 00       	ld.sh	r0,r0[0x0]
80003426:	26 24       	sub	r4,98
80003428:	00 00       	add	r0,r0
8000342a:	01 41       	ld.w	r1,--r0

8000342c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
8000342c:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
8000342e:	18 9b       	mov	r11,r12
80003430:	30 2c       	mov	r12,2
80003432:	f0 1f 00 02 	mcall	80003438 <sysclk_enable_pba_module+0xc>
}
80003436:	d8 02       	popm	pc
80003438:	80 00       	ld.sh	r0,r0[0x0]
8000343a:	2e 94       	sub	r4,-23

8000343c <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
8000343c:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
8000343e:	30 bc       	mov	r12,11
80003440:	f0 1f 00 05 	mcall	80003454 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
80003444:	e0 7a c1 38 	mov	r10,115000
80003448:	48 4b       	lddpc	r11,80003458 <rs_232_init_usart+0x1c>
8000344a:	fe 7c 38 00 	mov	r12,-51200
8000344e:	f0 1f 00 04 	mcall	8000345c <rs_232_init_usart+0x20>
	return estado_usart2;
}
80003452:	d8 02       	popm	pc
80003454:	80 00       	ld.sh	r0,r0[0x0]
80003456:	34 2c       	mov	r12,66
80003458:	00 00       	add	r0,r0
8000345a:	00 0c       	add	r12,r0
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	2c 38       	sub	r8,-61

80003460 <rs_232_init_pins>:
// 	

}

void rs_232_init_pins(void)
{
80003460:	d4 01       	pushm	lr
80003462:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
80003464:	48 88       	lddpc	r8,80003484 <rs_232_init_pins+0x24>
80003466:	1a 9c       	mov	r12,sp
80003468:	70 09       	ld.w	r9,r8[0x0]
8000346a:	50 09       	stdsp	sp[0x0],r9
8000346c:	70 19       	ld.w	r9,r8[0x4]
8000346e:	50 19       	stdsp	sp[0x4],r9
80003470:	70 29       	ld.w	r9,r8[0x8]
80003472:	50 29       	stdsp	sp[0x8],r9
80003474:	70 38       	ld.w	r8,r8[0xc]
80003476:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
80003478:	30 2b       	mov	r11,2
8000347a:	f0 1f 00 04 	mcall	80003488 <rs_232_init_pins+0x28>
}
8000347e:	2f cd       	sub	sp,-16
80003480:	d8 02       	popm	pc
80003482:	00 00       	add	r0,r0
80003484:	80 00       	ld.sh	r0,r0[0x0]
80003486:	3f f8       	mov	r8,-1
80003488:	80 00       	ld.sh	r0,r0[0x0]
8000348a:	24 7c       	sub	r12,71

8000348c <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
8000348c:	d4 01       	pushm	lr
8000348e:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003490:	48 88       	lddpc	r8,800034b0 <init_i2c_pins+0x24>
80003492:	1a 9c       	mov	r12,sp
80003494:	70 09       	ld.w	r9,r8[0x0]
80003496:	50 09       	stdsp	sp[0x0],r9
80003498:	70 19       	ld.w	r9,r8[0x4]
8000349a:	50 19       	stdsp	sp[0x4],r9
8000349c:	70 29       	ld.w	r9,r8[0x8]
8000349e:	50 29       	stdsp	sp[0x8],r9
800034a0:	70 38       	ld.w	r8,r8[0xc]
800034a2:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
800034a4:	30 2b       	mov	r11,2
800034a6:	f0 1f 00 04 	mcall	800034b4 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
800034aa:	2f cd       	sub	sp,-16
800034ac:	d8 02       	popm	pc
800034ae:	00 00       	add	r0,r0
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	3f c8       	mov	r8,-4
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	24 7c       	sub	r12,71

800034b8 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
800034b8:	d4 01       	pushm	lr
800034ba:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
800034bc:	48 d8       	lddpc	r8,800034f0 <spi_init_pins+0x38>
800034be:	1a 9c       	mov	r12,sp
800034c0:	70 09       	ld.w	r9,r8[0x0]
800034c2:	50 09       	stdsp	sp[0x0],r9
800034c4:	70 19       	ld.w	r9,r8[0x4]
800034c6:	50 19       	stdsp	sp[0x4],r9
800034c8:	70 29       	ld.w	r9,r8[0x8]
800034ca:	50 29       	stdsp	sp[0x8],r9
800034cc:	70 39       	ld.w	r9,r8[0xc]
800034ce:	50 39       	stdsp	sp[0xc],r9
800034d0:	fa c9 ff f0 	sub	r9,sp,-16
800034d4:	2f 08       	sub	r8,-16
800034d6:	70 0a       	ld.w	r10,r8[0x0]
800034d8:	93 0a       	st.w	r9[0x0],r10
800034da:	70 1a       	ld.w	r10,r8[0x4]
800034dc:	93 1a       	st.w	r9[0x4],r10
800034de:	70 2a       	ld.w	r10,r8[0x8]
800034e0:	93 2a       	st.w	r9[0x8],r10
800034e2:	70 38       	ld.w	r8,r8[0xc]
800034e4:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
800034e6:	30 4b       	mov	r11,4
800034e8:	f0 1f 00 03 	mcall	800034f4 <spi_init_pins+0x3c>
}
800034ec:	2f 8d       	sub	sp,-32
800034ee:	d8 02       	popm	pc
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	3f d8       	mov	r8,-3
800034f4:	80 00       	ld.sh	r0,r0[0x0]
800034f6:	24 7c       	sub	r12,71

800034f8 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
800034f8:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
800034fa:	30 5b       	mov	r11,5
800034fc:	30 4c       	mov	r12,4
800034fe:	f0 1f 00 06 	mcall	80003514 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
80003502:	30 5b       	mov	r11,5
80003504:	30 bc       	mov	r12,11
80003506:	f0 1f 00 04 	mcall	80003514 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
8000350a:	30 5b       	mov	r11,5
8000350c:	32 9c       	mov	r12,41
8000350e:	f0 1f 00 02 	mcall	80003514 <led_init_pins+0x1c>
}
80003512:	d8 02       	popm	pc
80003514:	80 00       	ld.sh	r0,r0[0x0]
80003516:	24 ac       	sub	r12,74

80003518 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
80003518:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
8000351a:	f0 1f 00 08 	mcall	80003538 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
8000351e:	30 4b       	mov	r11,4
80003520:	30 dc       	mov	r12,13
80003522:	f0 1f 00 07 	mcall	8000353c <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
80003526:	30 6b       	mov	r11,6
80003528:	30 dc       	mov	r12,13
8000352a:	f0 1f 00 06 	mcall	80003540 <init_rf_pins+0x28>
//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
8000352e:	30 dc       	mov	r12,13
80003530:	f0 1f 00 05 	mcall	80003544 <init_rf_pins+0x2c>

// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
// 	

}
80003534:	d8 02       	popm	pc
80003536:	00 00       	add	r0,r0
80003538:	80 00       	ld.sh	r0,r0[0x0]
8000353a:	34 b8       	mov	r8,75
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	24 ac       	sub	r12,74
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	23 e8       	sub	r8,62
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	26 6a       	sub	r10,102

80003548 <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
80003548:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
8000354a:	18 9b       	mov	r11,r12
8000354c:	fe 7c 38 00 	mov	r12,-51200
80003550:	f0 1f 00 02 	mcall	80003558 <escribir_linea_pc+0x10>
}
80003554:	d8 02       	popm	pc
80003556:	00 00       	add	r0,r0
80003558:	80 00       	ld.sh	r0,r0[0x0]
8000355a:	2b e8       	sub	r8,-66

8000355c <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
8000355c:	d4 01       	pushm	lr
8000355e:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003560:	30 eb       	mov	r11,14
80003562:	30 2c       	mov	r12,2
80003564:	f0 1f 00 0e 	mcall	8000359c <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
80003568:	e0 78 c1 38 	mov	r8,115000
8000356c:	50 08       	stdsp	sp[0x0],r8
8000356e:	e0 68 27 10 	mov	r8,10000
80003572:	50 18       	stdsp	sp[0x4],r8
80003574:	34 88       	mov	r8,72
80003576:	50 28       	stdsp	sp[0x8],r8
80003578:	30 08       	mov	r8,0
8000357a:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
8000357e:	1a 9b       	mov	r11,sp
80003580:	fe 7c 44 00 	mov	r12,-48128
80003584:	f0 1f 00 07 	mcall	800035a0 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003588:	c0 51       	brne	80003592 <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
8000358a:	48 7c       	lddpc	r12,800035a4 <init_i2c_module+0x48>
8000358c:	f0 1f 00 07 	mcall	800035a8 <init_i2c_module+0x4c>
80003590:	c0 48       	rjmp	80003598 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
80003592:	48 7c       	lddpc	r12,800035ac <init_i2c_module+0x50>
80003594:	f0 1f 00 05 	mcall	800035a8 <init_i2c_module+0x4c>
	}
} 
80003598:	2f cd       	sub	sp,-16
8000359a:	d8 02       	popm	pc
8000359c:	80 00       	ld.sh	r0,r0[0x0]
8000359e:	2e 94       	sub	r4,-23
800035a0:	80 00       	ld.sh	r0,r0[0x0]
800035a2:	22 30       	sub	r0,35
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	3f 38       	mov	r8,-13
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	35 48       	mov	r8,84
800035ac:	80 00       	ld.sh	r0,r0[0x0]
800035ae:	3f 4c       	mov	r12,-12

800035b0 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
800035b0:	eb cd 40 e0 	pushm	r5-r7,lr
800035b4:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800035b6:	4a 48       	lddpc	r8,80003644 <spi_init_module+0x94>
800035b8:	1a 95       	mov	r5,sp
800035ba:	70 09       	ld.w	r9,r8[0x0]
800035bc:	50 09       	stdsp	sp[0x0],r9
800035be:	70 19       	ld.w	r9,r8[0x4]
800035c0:	50 19       	stdsp	sp[0x4],r9
800035c2:	70 29       	ld.w	r9,r8[0x8]
800035c4:	50 29       	stdsp	sp[0x8],r9
800035c6:	70 38       	ld.w	r8,r8[0xc]
800035c8:	50 38       	stdsp	sp[0xc],r8
800035ca:	30 db       	mov	r11,13
800035cc:	30 2c       	mov	r12,2
800035ce:	f0 1f 00 1f 	mcall	80003648 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800035d2:	fe 77 40 00 	mov	r7,-49152
800035d6:	e0 68 00 80 	mov	r8,128
800035da:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800035dc:	6e 18       	ld.w	r8,r7[0x4]
800035de:	30 19       	mov	r9,1
800035e0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800035e4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
800035e6:	6e 18       	ld.w	r8,r7[0x4]
800035e8:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800035ec:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
800035ee:	6e 18       	ld.w	r8,r7[0x4]
800035f0:	30 06       	mov	r6,0
800035f2:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
800035f6:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
800035f8:	6e 18       	ld.w	r8,r7[0x4]
800035fa:	30 f9       	mov	r9,15
800035fc:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003600:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
80003602:	6e 18       	ld.w	r8,r7[0x4]
80003604:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003608:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
8000360a:	6e 18       	ld.w	r8,r7[0x4]
8000360c:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003610:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
80003612:	6e 18       	ld.w	r8,r7[0x4]
80003614:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003618:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
8000361a:	30 38       	mov	r8,3
8000361c:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
8000361e:	e0 7a c1 38 	mov	r10,115000
80003622:	1a 9b       	mov	r11,sp
80003624:	0e 9c       	mov	r12,r7
80003626:	f0 1f 00 0a 	mcall	8000364c <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
8000362a:	0c 99       	mov	r9,r6
8000362c:	0c 9a       	mov	r10,r6
8000362e:	0c 9b       	mov	r11,r6
80003630:	0e 9c       	mov	r12,r7
80003632:	f0 1f 00 08 	mcall	80003650 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
80003636:	0e 9c       	mov	r12,r7
80003638:	f0 1f 00 07 	mcall	80003654 <spi_init_module+0xa4>
}
8000363c:	2f cd       	sub	sp,-16
8000363e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003642:	00 00       	add	r0,r0
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	3f 18       	mov	r8,-15
80003648:	80 00       	ld.sh	r0,r0[0x0]
8000364a:	2e 94       	sub	r4,-23
8000364c:	80 00       	ld.sh	r0,r0[0x0]
8000364e:	28 5c       	sub	r12,-123
80003650:	80 00       	ld.sh	r0,r0[0x0]
80003652:	27 bc       	sub	r12,123
80003654:	80 00       	ld.sh	r0,r0[0x0]
80003656:	29 14       	sub	r4,-111

80003658 <main>:
  cpu_irq_enable();
}


int main (void)
{
80003658:	eb cd 40 c0 	pushm	r6-r7,lr
	char temps[10] = "\0";
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
8000365c:	f0 1f 00 4b 	mcall	80003788 <main+0x130>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
80003660:	f0 1f 00 4b 	mcall	8000378c <main+0x134>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
80003664:	f0 1f 00 4b 	mcall	80003790 <main+0x138>
	
	//Configuracion pins para RF
	init_rf_pins();
80003668:	f0 1f 00 4b 	mcall	80003794 <main+0x13c>
	
	//Inicializacion del SPI
	spi_init_module();
8000366c:	f0 1f 00 4b 	mcall	80003798 <main+0x140>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
80003670:	f0 1f 00 4b 	mcall	8000379c <main+0x144>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
80003674:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003676:	f0 1f 00 4b 	mcall	800037a0 <main+0x148>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
8000367a:	30 0a       	mov	r10,0
8000367c:	e0 6b 02 20 	mov	r11,544
80003680:	4c 9c       	lddpc	r12,800037a4 <main+0x14c>
80003682:	f0 1f 00 4a 	mcall	800037a8 <main+0x150>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
80003686:	30 2a       	mov	r10,2
80003688:	e0 6b 01 61 	mov	r11,353
8000368c:	4c 8c       	lddpc	r12,800037ac <main+0x154>
8000368e:	f0 1f 00 47 	mcall	800037a8 <main+0x150>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003692:	30 3a       	mov	r10,3
80003694:	e0 6b 03 40 	mov	r11,832
80003698:	4c 6c       	lddpc	r12,800037b0 <main+0x158>
8000369a:	f0 1f 00 44 	mcall	800037a8 <main+0x150>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
8000369e:	30 1a       	mov	r10,1
800036a0:	4c 5b       	lddpc	r11,800037b4 <main+0x15c>
800036a2:	fe 7c 24 00 	mov	r12,-56320
800036a6:	f0 1f 00 45 	mcall	800037b8 <main+0x160>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
800036aa:	30 2b       	mov	r11,2
800036ac:	fe 7c 24 00 	mov	r12,-56320
800036b0:	f0 1f 00 43 	mcall	800037bc <main+0x164>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
800036b4:	30 2b       	mov	r11,2
800036b6:	fe 7c 24 00 	mov	r12,-56320
800036ba:	f0 1f 00 42 	mcall	800037c0 <main+0x168>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
800036be:	30 19       	mov	r9,1
800036c0:	fe 78 38 00 	mov	r8,-51200
800036c4:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
800036c6:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
800036c8:	4b f8       	lddpc	r8,800037c4 <main+0x16c>
800036ca:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800036cc:	4b fb       	lddpc	r11,800037c8 <main+0x170>
800036ce:	0e 9c       	mov	r12,r7
800036d0:	f0 1f 00 3f 	mcall	800037cc <main+0x174>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
800036d4:	e0 6a 00 b3 	mov	r10,179
800036d8:	30 0b       	mov	r11,0
800036da:	0e 9c       	mov	r12,r7
800036dc:	f0 1f 00 3d 	mcall	800037d0 <main+0x178>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
800036e0:	4b da       	lddpc	r10,800037d4 <main+0x17c>
800036e2:	30 0b       	mov	r11,0
800036e4:	0e 9c       	mov	r12,r7
800036e6:	f0 1f 00 3d 	mcall	800037d8 <main+0x180>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
800036ea:	30 0b       	mov	r11,0
800036ec:	0e 9c       	mov	r12,r7
800036ee:	f0 1f 00 3c 	mcall	800037dc <main+0x184>
// 	while (at86rfx_init() != AT86RFX_SUCCESS) {
//  	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
//  	 	}
//  		escribir_linea_pc("Modulo RF:\tPASS\r\n");
 
	iniciarAT86RF212();
800036f2:	f0 1f 00 3c 	mcall	800037e0 <main+0x188>
	/*iniciarAT86();*/
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
800036f6:	31 cc       	mov	r12,28
800036f8:	f0 1f 00 3b 	mcall	800037e4 <main+0x18c>
800036fc:	4b b8       	lddpc	r8,800037e8 <main+0x190>
800036fe:	b0 8c       	st.b	r8[0x0],r12

	if (register_value == PART_NUM_AT86RF212) 
80003700:	30 78       	mov	r8,7
80003702:	f0 0c 18 00 	cp.b	r12,r8
80003706:	c0 51       	brne	80003710 <main+0xb8>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
80003708:	4b 9c       	lddpc	r12,800037ec <main+0x194>
8000370a:	f0 1f 00 3a 	mcall	800037f0 <main+0x198>
8000370e:	c0 48       	rjmp	80003716 <main+0xbe>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
80003710:	4b 9c       	lddpc	r12,800037f4 <main+0x19c>
80003712:	f0 1f 00 38 	mcall	800037f0 <main+0x198>
	escribir_linea_pc(register_value);
80003716:	4b 58       	lddpc	r8,800037e8 <main+0x190>
80003718:	11 8c       	ld.ub	r12,r8[0x0]
8000371a:	f0 1f 00 36 	mcall	800037f0 <main+0x198>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
8000371e:	f0 1f 00 37 	mcall	800037f8 <main+0x1a0>
	init_i2c_module();
80003722:	f0 1f 00 37 	mcall	800037fc <main+0x1a4>
	//iniciarAT86();
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r");
80003726:	4b 7c       	lddpc	r12,80003800 <main+0x1a8>
80003728:	f0 1f 00 32 	mcall	800037f0 <main+0x198>
	escribir_linea_pc("- - - B u e n a s - - - \n\r");
8000372c:	4b 6c       	lddpc	r12,80003804 <main+0x1ac>
8000372e:	f0 1f 00 31 	mcall	800037f0 <main+0x198>
	gpio_clr_gpio_pin(LED_1);
80003732:	30 4c       	mov	r12,4
80003734:	f0 1f 00 35 	mcall	80003808 <main+0x1b0>
	gpio_clr_gpio_pin(LED_2);
80003738:	30 bc       	mov	r12,11
8000373a:	f0 1f 00 34 	mcall	80003808 <main+0x1b0>
	gpio_clr_gpio_pin(LED_3);
8000373e:	32 9c       	mov	r12,41
80003740:	f0 1f 00 32 	mcall	80003808 <main+0x1b0>
	{
	//irq_status=pal_trx_reg_read(RG_IRQ_STATUS);
	//txTrama(0xff,tx_buffer,8);
// 	if (getStateAT86RF212()==CMD_PLL_ON)
// 	{
	txTrama(tx_buffer);
80003744:	4b 26       	lddpc	r6,8000380c <main+0x1b4>
// 			cola_PC_nr++;
// 			if (cola_PC_nr >= tamano_cola)
// 				cola_PC_nr = 0;
// 		}
// 		
		gpio_set_gpio_pin(LED_1);
80003746:	30 47       	mov	r7,4
	{
	//irq_status=pal_trx_reg_read(RG_IRQ_STATUS);
	//txTrama(0xff,tx_buffer,8);
// 	if (getStateAT86RF212()==CMD_PLL_ON)
// 	{
	txTrama(tx_buffer);
80003748:	0c 9c       	mov	r12,r6
8000374a:	f0 1f 00 32 	mcall	80003810 <main+0x1b8>
// 			cola_PC_nr++;
// 			if (cola_PC_nr >= tamano_cola)
// 				cola_PC_nr = 0;
// 		}
// 		
		gpio_set_gpio_pin(LED_1);
8000374e:	0e 9c       	mov	r12,r7
80003750:	f0 1f 00 31 	mcall	80003814 <main+0x1bc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003754:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003758:	e6 79 04 e0 	mov	r9,460000
8000375c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003760:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003764:	14 38       	cp.w	r8,r10
80003766:	e0 88 00 08 	brls	80003776 <main+0x11e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000376a:	12 38       	cp.w	r8,r9
8000376c:	fe 98 ff fa 	brls	80003760 <main+0x108>
80003770:	12 3a       	cp.w	r10,r9
80003772:	c0 73       	brcs	80003780 <main+0x128>
80003774:	cf 6b       	rjmp	80003760 <main+0x108>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003776:	12 38       	cp.w	r8,r9
80003778:	e0 8b 00 04 	brhi	80003780 <main+0x128>
8000377c:	12 3a       	cp.w	r10,r9
8000377e:	cf 12       	brcc	80003760 <main+0x108>
 		delay_ms(4000);
		gpio_clr_gpio_pin(LED_1);
80003780:	0e 9c       	mov	r12,r7
80003782:	f0 1f 00 22 	mcall	80003808 <main+0x1b0>
 	}
80003786:	ce 1b       	rjmp	80003748 <main+0xf0>
80003788:	80 00       	ld.sh	r0,r0[0x0]
8000378a:	2e 84       	sub	r4,-24
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	34 f8       	mov	r8,79
80003790:	80 00       	ld.sh	r0,r0[0x0]
80003792:	34 60       	mov	r0,70
80003794:	80 00       	ld.sh	r0,r0[0x0]
80003796:	35 18       	mov	r8,81
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	35 b0       	mov	r0,91
8000379c:	80 00       	ld.sh	r0,r0[0x0]
8000379e:	34 3c       	mov	r12,67
800037a0:	80 00       	ld.sh	r0,r0[0x0]
800037a2:	27 10       	sub	r0,113
800037a4:	80 00       	ld.sh	r0,r0[0x0]
800037a6:	30 00       	mov	r0,0
800037a8:	80 00       	ld.sh	r0,r0[0x0]
800037aa:	26 90       	sub	r0,105
800037ac:	80 00       	ld.sh	r0,r0[0x0]
800037ae:	2f d0       	sub	r0,-3
800037b0:	80 00       	ld.sh	r0,r0[0x0]
800037b2:	2f 60       	sub	r0,-10
800037b4:	00 00       	add	r0,r0
800037b6:	00 20       	rsub	r0,r0
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	22 e8       	sub	r8,46
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	23 b8       	sub	r8,59
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	23 c2       	sub	r2,60
800037c4:	00 00       	add	r0,r0
800037c6:	00 18       	sub	r8,r0
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	3f c0       	mov	r0,-4
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	29 1a       	sub	r10,-111
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	29 ec       	sub	r12,-98
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	3f 28       	mov	r8,-14
800037d8:	80 00       	ld.sh	r0,r0[0x0]
800037da:	2a 20       	sub	r0,-94
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	29 b6       	sub	r6,-101
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	31 e8       	mov	r8,30
800037e4:	80 00       	ld.sh	r0,r0[0x0]
800037e6:	2e 10       	sub	r0,-31
800037e8:	00 00       	add	r0,r0
800037ea:	01 34       	ld.ub	r4,r0++
800037ec:	80 00       	ld.sh	r0,r0[0x0]
800037ee:	3f 64       	mov	r4,-10
800037f0:	80 00       	ld.sh	r0,r0[0x0]
800037f2:	35 48       	mov	r8,84
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	3f 78       	mov	r8,-9
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	34 8c       	mov	r12,72
800037fc:	80 00       	ld.sh	r0,r0[0x0]
800037fe:	35 5c       	mov	r12,85
80003800:	80 00       	ld.sh	r0,r0[0x0]
80003802:	3f 8c       	mov	r12,-8
80003804:	80 00       	ld.sh	r0,r0[0x0]
80003806:	3f a4       	mov	r4,-6
80003808:	80 00       	ld.sh	r0,r0[0x0]
8000380a:	25 ac       	sub	r12,90
8000380c:	00 00       	add	r0,r0
8000380e:	00 28       	rsub	r8,r0
80003810:	80 00       	ld.sh	r0,r0[0x0]
80003812:	32 ec       	mov	r12,46
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	25 64       	sub	r4,86

80003818 <__avr32_udiv64>:
80003818:	d4 31       	pushm	r0-r7,lr
8000381a:	1a 97       	mov	r7,sp
8000381c:	20 3d       	sub	sp,12
8000381e:	10 9c       	mov	r12,r8
80003820:	12 9e       	mov	lr,r9
80003822:	14 93       	mov	r3,r10
80003824:	58 09       	cp.w	r9,0
80003826:	e0 81 00 bd 	brne	800039a0 <__avr32_udiv64+0x188>
8000382a:	16 38       	cp.w	r8,r11
8000382c:	e0 88 00 40 	brls	800038ac <__avr32_udiv64+0x94>
80003830:	f0 08 12 00 	clz	r8,r8
80003834:	c0 d0       	breq	8000384e <__avr32_udiv64+0x36>
80003836:	f6 08 09 4b 	lsl	r11,r11,r8
8000383a:	f0 09 11 20 	rsub	r9,r8,32
8000383e:	f8 08 09 4c 	lsl	r12,r12,r8
80003842:	f4 09 0a 49 	lsr	r9,r10,r9
80003846:	f4 08 09 43 	lsl	r3,r10,r8
8000384a:	f3 eb 10 0b 	or	r11,r9,r11
8000384e:	f8 0e 16 10 	lsr	lr,r12,0x10
80003852:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003856:	f6 0e 0d 00 	divu	r0,r11,lr
8000385a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000385e:	00 99       	mov	r9,r0
80003860:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003864:	e0 0a 02 48 	mul	r8,r0,r10
80003868:	10 3b       	cp.w	r11,r8
8000386a:	c0 a2       	brcc	8000387e <__avr32_udiv64+0x66>
8000386c:	20 19       	sub	r9,1
8000386e:	18 0b       	add	r11,r12
80003870:	18 3b       	cp.w	r11,r12
80003872:	c0 63       	brcs	8000387e <__avr32_udiv64+0x66>
80003874:	10 3b       	cp.w	r11,r8
80003876:	f7 b9 03 01 	sublo	r9,1
8000387a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000387e:	f6 08 01 01 	sub	r1,r11,r8
80003882:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003886:	e2 0e 0d 00 	divu	r0,r1,lr
8000388a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000388e:	00 98       	mov	r8,r0
80003890:	e0 0a 02 4a 	mul	r10,r0,r10
80003894:	14 33       	cp.w	r3,r10
80003896:	c0 82       	brcc	800038a6 <__avr32_udiv64+0x8e>
80003898:	20 18       	sub	r8,1
8000389a:	18 03       	add	r3,r12
8000389c:	18 33       	cp.w	r3,r12
8000389e:	c0 43       	brcs	800038a6 <__avr32_udiv64+0x8e>
800038a0:	14 33       	cp.w	r3,r10
800038a2:	f7 b8 03 01 	sublo	r8,1
800038a6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800038aa:	cd f8       	rjmp	80003a68 <__avr32_udiv64+0x250>
800038ac:	58 08       	cp.w	r8,0
800038ae:	c0 51       	brne	800038b8 <__avr32_udiv64+0xa0>
800038b0:	30 19       	mov	r9,1
800038b2:	f2 08 0d 08 	divu	r8,r9,r8
800038b6:	10 9c       	mov	r12,r8
800038b8:	f8 06 12 00 	clz	r6,r12
800038bc:	c0 41       	brne	800038c4 <__avr32_udiv64+0xac>
800038be:	18 1b       	sub	r11,r12
800038c0:	30 19       	mov	r9,1
800038c2:	c4 08       	rjmp	80003942 <__avr32_udiv64+0x12a>
800038c4:	ec 01 11 20 	rsub	r1,r6,32
800038c8:	f4 01 0a 49 	lsr	r9,r10,r1
800038cc:	f8 06 09 4c 	lsl	r12,r12,r6
800038d0:	f6 06 09 48 	lsl	r8,r11,r6
800038d4:	f6 01 0a 41 	lsr	r1,r11,r1
800038d8:	f3 e8 10 08 	or	r8,r9,r8
800038dc:	f8 03 16 10 	lsr	r3,r12,0x10
800038e0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800038e4:	e2 03 0d 00 	divu	r0,r1,r3
800038e8:	f0 0b 16 10 	lsr	r11,r8,0x10
800038ec:	00 9e       	mov	lr,r0
800038ee:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800038f2:	e0 05 02 49 	mul	r9,r0,r5
800038f6:	12 3b       	cp.w	r11,r9
800038f8:	c0 a2       	brcc	8000390c <__avr32_udiv64+0xf4>
800038fa:	20 1e       	sub	lr,1
800038fc:	18 0b       	add	r11,r12
800038fe:	18 3b       	cp.w	r11,r12
80003900:	c0 63       	brcs	8000390c <__avr32_udiv64+0xf4>
80003902:	12 3b       	cp.w	r11,r9
80003904:	f7 be 03 01 	sublo	lr,1
80003908:	f7 dc e3 0b 	addcs	r11,r11,r12
8000390c:	12 1b       	sub	r11,r9
8000390e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003912:	f6 03 0d 02 	divu	r2,r11,r3
80003916:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000391a:	04 99       	mov	r9,r2
8000391c:	e4 05 02 4b 	mul	r11,r2,r5
80003920:	16 38       	cp.w	r8,r11
80003922:	c0 a2       	brcc	80003936 <__avr32_udiv64+0x11e>
80003924:	20 19       	sub	r9,1
80003926:	18 08       	add	r8,r12
80003928:	18 38       	cp.w	r8,r12
8000392a:	c0 63       	brcs	80003936 <__avr32_udiv64+0x11e>
8000392c:	16 38       	cp.w	r8,r11
8000392e:	f7 b9 03 01 	sublo	r9,1
80003932:	f1 dc e3 08 	addcs	r8,r8,r12
80003936:	f4 06 09 43 	lsl	r3,r10,r6
8000393a:	f0 0b 01 0b 	sub	r11,r8,r11
8000393e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003942:	f8 06 16 10 	lsr	r6,r12,0x10
80003946:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000394a:	f6 06 0d 00 	divu	r0,r11,r6
8000394e:	e6 0b 16 10 	lsr	r11,r3,0x10
80003952:	00 9a       	mov	r10,r0
80003954:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003958:	e0 0e 02 48 	mul	r8,r0,lr
8000395c:	10 3b       	cp.w	r11,r8
8000395e:	c0 a2       	brcc	80003972 <__avr32_udiv64+0x15a>
80003960:	20 1a       	sub	r10,1
80003962:	18 0b       	add	r11,r12
80003964:	18 3b       	cp.w	r11,r12
80003966:	c0 63       	brcs	80003972 <__avr32_udiv64+0x15a>
80003968:	10 3b       	cp.w	r11,r8
8000396a:	f7 ba 03 01 	sublo	r10,1
8000396e:	f7 dc e3 0b 	addcs	r11,r11,r12
80003972:	f6 08 01 01 	sub	r1,r11,r8
80003976:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000397a:	e2 06 0d 00 	divu	r0,r1,r6
8000397e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003982:	00 98       	mov	r8,r0
80003984:	e0 0e 02 4b 	mul	r11,r0,lr
80003988:	16 33       	cp.w	r3,r11
8000398a:	c0 82       	brcc	8000399a <__avr32_udiv64+0x182>
8000398c:	20 18       	sub	r8,1
8000398e:	18 03       	add	r3,r12
80003990:	18 33       	cp.w	r3,r12
80003992:	c0 43       	brcs	8000399a <__avr32_udiv64+0x182>
80003994:	16 33       	cp.w	r3,r11
80003996:	f7 b8 03 01 	sublo	r8,1
8000399a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000399e:	c6 98       	rjmp	80003a70 <__avr32_udiv64+0x258>
800039a0:	16 39       	cp.w	r9,r11
800039a2:	e0 8b 00 65 	brhi	80003a6c <__avr32_udiv64+0x254>
800039a6:	f2 09 12 00 	clz	r9,r9
800039aa:	c0 b1       	brne	800039c0 <__avr32_udiv64+0x1a8>
800039ac:	10 3a       	cp.w	r10,r8
800039ae:	5f 2a       	srhs	r10
800039b0:	1c 3b       	cp.w	r11,lr
800039b2:	5f b8       	srhi	r8
800039b4:	10 4a       	or	r10,r8
800039b6:	f2 0a 18 00 	cp.b	r10,r9
800039ba:	c5 90       	breq	80003a6c <__avr32_udiv64+0x254>
800039bc:	30 18       	mov	r8,1
800039be:	c5 98       	rjmp	80003a70 <__avr32_udiv64+0x258>
800039c0:	f0 09 09 46 	lsl	r6,r8,r9
800039c4:	f2 03 11 20 	rsub	r3,r9,32
800039c8:	fc 09 09 4e 	lsl	lr,lr,r9
800039cc:	f0 03 0a 48 	lsr	r8,r8,r3
800039d0:	f6 09 09 4c 	lsl	r12,r11,r9
800039d4:	f4 03 0a 42 	lsr	r2,r10,r3
800039d8:	ef 46 ff f4 	st.w	r7[-12],r6
800039dc:	f6 03 0a 43 	lsr	r3,r11,r3
800039e0:	18 42       	or	r2,r12
800039e2:	f1 ee 10 0c 	or	r12,r8,lr
800039e6:	f8 01 16 10 	lsr	r1,r12,0x10
800039ea:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800039ee:	e6 01 0d 04 	divu	r4,r3,r1
800039f2:	e4 03 16 10 	lsr	r3,r2,0x10
800039f6:	08 9e       	mov	lr,r4
800039f8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800039fc:	e8 06 02 48 	mul	r8,r4,r6
80003a00:	10 33       	cp.w	r3,r8
80003a02:	c0 a2       	brcc	80003a16 <__avr32_udiv64+0x1fe>
80003a04:	20 1e       	sub	lr,1
80003a06:	18 03       	add	r3,r12
80003a08:	18 33       	cp.w	r3,r12
80003a0a:	c0 63       	brcs	80003a16 <__avr32_udiv64+0x1fe>
80003a0c:	10 33       	cp.w	r3,r8
80003a0e:	f7 be 03 01 	sublo	lr,1
80003a12:	e7 dc e3 03 	addcs	r3,r3,r12
80003a16:	10 13       	sub	r3,r8
80003a18:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003a1c:	e6 01 0d 00 	divu	r0,r3,r1
80003a20:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003a24:	00 98       	mov	r8,r0
80003a26:	e0 06 02 46 	mul	r6,r0,r6
80003a2a:	0c 3b       	cp.w	r11,r6
80003a2c:	c0 a2       	brcc	80003a40 <__avr32_udiv64+0x228>
80003a2e:	20 18       	sub	r8,1
80003a30:	18 0b       	add	r11,r12
80003a32:	18 3b       	cp.w	r11,r12
80003a34:	c0 63       	brcs	80003a40 <__avr32_udiv64+0x228>
80003a36:	0c 3b       	cp.w	r11,r6
80003a38:	f7 dc e3 0b 	addcs	r11,r11,r12
80003a3c:	f7 b8 03 01 	sublo	r8,1
80003a40:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003a44:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003a48:	0c 1b       	sub	r11,r6
80003a4a:	f0 04 06 42 	mulu.d	r2,r8,r4
80003a4e:	06 95       	mov	r5,r3
80003a50:	16 35       	cp.w	r5,r11
80003a52:	e0 8b 00 0a 	brhi	80003a66 <__avr32_udiv64+0x24e>
80003a56:	5f 0b       	sreq	r11
80003a58:	f4 09 09 49 	lsl	r9,r10,r9
80003a5c:	12 32       	cp.w	r2,r9
80003a5e:	5f b9       	srhi	r9
80003a60:	f7 e9 00 09 	and	r9,r11,r9
80003a64:	c0 60       	breq	80003a70 <__avr32_udiv64+0x258>
80003a66:	20 18       	sub	r8,1
80003a68:	30 09       	mov	r9,0
80003a6a:	c0 38       	rjmp	80003a70 <__avr32_udiv64+0x258>
80003a6c:	30 09       	mov	r9,0
80003a6e:	12 98       	mov	r8,r9
80003a70:	10 9a       	mov	r10,r8
80003a72:	12 93       	mov	r3,r9
80003a74:	10 92       	mov	r2,r8
80003a76:	12 9b       	mov	r11,r9
80003a78:	2f dd       	sub	sp,-12
80003a7a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80003c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80003c00:	c0 08       	rjmp	80003c00 <_evba>
	...

80003c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80003c04:	c0 08       	rjmp	80003c04 <_handle_TLB_Multiple_Hit>
	...

80003c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80003c08:	c0 08       	rjmp	80003c08 <_handle_Bus_Error_Data_Fetch>
	...

80003c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80003c0c:	c0 08       	rjmp	80003c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80003c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80003c10:	c0 08       	rjmp	80003c10 <_handle_NMI>
	...

80003c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80003c14:	c0 08       	rjmp	80003c14 <_handle_Instruction_Address>
	...

80003c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80003c18:	c0 08       	rjmp	80003c18 <_handle_ITLB_Protection>
	...

80003c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80003c1c:	c0 08       	rjmp	80003c1c <_handle_Breakpoint>
	...

80003c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80003c20:	c0 08       	rjmp	80003c20 <_handle_Illegal_Opcode>
	...

80003c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80003c24:	c0 08       	rjmp	80003c24 <_handle_Unimplemented_Instruction>
	...

80003c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80003c28:	c0 08       	rjmp	80003c28 <_handle_Privilege_Violation>
	...

80003c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80003c2c:	c0 08       	rjmp	80003c2c <_handle_Floating_Point>
	...

80003c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80003c30:	c0 08       	rjmp	80003c30 <_handle_Coprocessor_Absent>
	...

80003c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80003c34:	c0 08       	rjmp	80003c34 <_handle_Data_Address_Read>
	...

80003c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80003c38:	c0 08       	rjmp	80003c38 <_handle_Data_Address_Write>
	...

80003c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80003c3c:	c0 08       	rjmp	80003c3c <_handle_DTLB_Protection_Read>
	...

80003c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80003c40:	c0 08       	rjmp	80003c40 <_handle_DTLB_Protection_Write>
	...

80003c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80003c44:	c0 08       	rjmp	80003c44 <_handle_DTLB_Modified>
	...

80003c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80003c50:	c0 08       	rjmp	80003c50 <_handle_ITLB_Miss>
	...

80003c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80003c60:	c0 08       	rjmp	80003c60 <_handle_DTLB_Miss_Read>
	...

80003c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80003c70:	c0 08       	rjmp	80003c70 <_handle_DTLB_Miss_Write>
	...

80003d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80003d00:	c0 08       	rjmp	80003d00 <_handle_Supervisor_Call>
80003d02:	d7 03       	nop

80003d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003d04:	30 0c       	mov	r12,0
80003d06:	fe b0 f5 2f 	rcall	80002764 <_get_interrupt_handler>
80003d0a:	58 0c       	cp.w	r12,0
80003d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003d10:	d6 03       	rete

80003d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003d12:	30 1c       	mov	r12,1
80003d14:	fe b0 f5 28 	rcall	80002764 <_get_interrupt_handler>
80003d18:	58 0c       	cp.w	r12,0
80003d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003d1e:	d6 03       	rete

80003d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003d20:	30 2c       	mov	r12,2
80003d22:	fe b0 f5 21 	rcall	80002764 <_get_interrupt_handler>
80003d26:	58 0c       	cp.w	r12,0
80003d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003d2c:	d6 03       	rete

80003d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003d2e:	30 3c       	mov	r12,3
80003d30:	fe b0 f5 1a 	rcall	80002764 <_get_interrupt_handler>
80003d34:	58 0c       	cp.w	r12,0
80003d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003d3a:	d6 03       	rete
80003d3c:	d7 03       	nop
80003d3e:	d7 03       	nop
80003d40:	d7 03       	nop
80003d42:	d7 03       	nop
80003d44:	d7 03       	nop
80003d46:	d7 03       	nop
80003d48:	d7 03       	nop
80003d4a:	d7 03       	nop
80003d4c:	d7 03       	nop
80003d4e:	d7 03       	nop
80003d50:	d7 03       	nop
80003d52:	d7 03       	nop
80003d54:	d7 03       	nop
80003d56:	d7 03       	nop
80003d58:	d7 03       	nop
80003d5a:	d7 03       	nop
80003d5c:	d7 03       	nop
80003d5e:	d7 03       	nop
80003d60:	d7 03       	nop
80003d62:	d7 03       	nop
80003d64:	d7 03       	nop
80003d66:	d7 03       	nop
80003d68:	d7 03       	nop
80003d6a:	d7 03       	nop
80003d6c:	d7 03       	nop
80003d6e:	d7 03       	nop
80003d70:	d7 03       	nop
80003d72:	d7 03       	nop
80003d74:	d7 03       	nop
80003d76:	d7 03       	nop
80003d78:	d7 03       	nop
80003d7a:	d7 03       	nop
80003d7c:	d7 03       	nop
80003d7e:	d7 03       	nop
80003d80:	d7 03       	nop
80003d82:	d7 03       	nop
80003d84:	d7 03       	nop
80003d86:	d7 03       	nop
80003d88:	d7 03       	nop
80003d8a:	d7 03       	nop
80003d8c:	d7 03       	nop
80003d8e:	d7 03       	nop
80003d90:	d7 03       	nop
80003d92:	d7 03       	nop
80003d94:	d7 03       	nop
80003d96:	d7 03       	nop
80003d98:	d7 03       	nop
80003d9a:	d7 03       	nop
80003d9c:	d7 03       	nop
80003d9e:	d7 03       	nop
80003da0:	d7 03       	nop
80003da2:	d7 03       	nop
80003da4:	d7 03       	nop
80003da6:	d7 03       	nop
80003da8:	d7 03       	nop
80003daa:	d7 03       	nop
80003dac:	d7 03       	nop
80003dae:	d7 03       	nop
80003db0:	d7 03       	nop
80003db2:	d7 03       	nop
80003db4:	d7 03       	nop
80003db6:	d7 03       	nop
80003db8:	d7 03       	nop
80003dba:	d7 03       	nop
80003dbc:	d7 03       	nop
80003dbe:	d7 03       	nop
80003dc0:	d7 03       	nop
80003dc2:	d7 03       	nop
80003dc4:	d7 03       	nop
80003dc6:	d7 03       	nop
80003dc8:	d7 03       	nop
80003dca:	d7 03       	nop
80003dcc:	d7 03       	nop
80003dce:	d7 03       	nop
80003dd0:	d7 03       	nop
80003dd2:	d7 03       	nop
80003dd4:	d7 03       	nop
80003dd6:	d7 03       	nop
80003dd8:	d7 03       	nop
80003dda:	d7 03       	nop
80003ddc:	d7 03       	nop
80003dde:	d7 03       	nop
80003de0:	d7 03       	nop
80003de2:	d7 03       	nop
80003de4:	d7 03       	nop
80003de6:	d7 03       	nop
80003de8:	d7 03       	nop
80003dea:	d7 03       	nop
80003dec:	d7 03       	nop
80003dee:	d7 03       	nop
80003df0:	d7 03       	nop
80003df2:	d7 03       	nop
80003df4:	d7 03       	nop
80003df6:	d7 03       	nop
80003df8:	d7 03       	nop
80003dfa:	d7 03       	nop
80003dfc:	d7 03       	nop
80003dfe:	d7 03       	nop
