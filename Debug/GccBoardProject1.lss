
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000072a8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009400  80009400  00009800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007a0  80009600  80009600  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000524  00000008  80009da0  0000a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000052c  8000a2c4  0000a92c  2**0
                  ALLOC
  8 .bss          000002e0  00000530  00000530  00000000  2**2
                  ALLOC
  9 .heap         000027f0  00000810  00000810  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a92c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d88  00000000  00000000  0000a960  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001916  00000000  00000000  0000b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000282bd  00000000  00000000  0000cffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005a23  00000000  00000000  000352bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f56b  00000000  00000000  0003acde  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001fd4  00000000  00000000  0004a24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000054cc  00000000  00000000  0004c220  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a65d  00000000  00000000  000516ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0084ac87  00000000  00000000  0005bd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000f30  00000000  00000000  008a69d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d2 20 	sub	pc,pc,-11744

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f2 24 	sub	pc,pc,-3548

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 30       	ld.ub	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 44       	ld.w	r4,--r2
800020c8:	00 00       	add	r0,r0
800020ca:	05 3c       	ld.ub	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 48       	ld.w	r8,--r2
800020d0:	00 00       	add	r0,r0
800020d2:	05 34       	ld.ub	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 38       	ld.ub	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 50       	ld.sh	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 40       	ld.w	r0,--r2
800020e0:	00 00       	add	r0,r0
800020e2:	05 4c       	ld.w	r12,--r2

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c1 a8       	rjmp	8000212e <twim_set_speed+0x4a>
800020fc:	30 09       	mov	r9,0
800020fe:	30 77       	mov	r7,7
80002100:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
80002102:	2f f9       	sub	r9,-1
80002104:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002106:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002108:	e0 48 00 ff 	cp.w	r8,255
8000210c:	5f bb       	srhi	r11
8000210e:	ee 09 18 00 	cp.b	r9,r7
80002112:	5f 8a       	srls	r10
80002114:	f7 ea 00 0a 	and	r10,r11,r10
80002118:	fc 0a 18 00 	cp.b	r10,lr
8000211c:	cf 31       	brne	80002102 <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211e:	30 7a       	mov	r10,7
80002120:	f4 09 18 00 	cp.b	r9,r10
80002124:	e0 88 00 05 	brls	8000212e <twim_set_speed+0x4a>
80002128:	3f 8c       	mov	r12,-8
8000212a:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212e:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002132:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002136:	14 18       	sub	r8,r10
80002138:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000213c:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80002140:	99 19       	st.w	r12[0x4],r9
80002142:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002146:	d7 03       	nop

80002148 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002148:	48 38       	lddpc	r8,80002154 <twim_status+0xc>
8000214a:	70 08       	ld.w	r8,r8[0x0]
8000214c:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214e:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002152:	5e fc       	retal	r12
80002154:	00 00       	add	r0,r0
80002156:	05 30       	ld.ub	r0,r2++

80002158 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002158:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
8000215c:	e6 18 00 01 	andh	r8,0x1,COH
80002160:	c0 21       	brne	80002164 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80002162:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002164:	3f f8       	mov	r8,-1
80002166:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002168:	99 b8       	st.w	r12[0x2c],r8
}
8000216a:	5e fc       	retal	r12

8000216c <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8000216c:	eb cd 40 fc 	pushm	r2-r7,lr
80002170:	16 94       	mov	r4,r11
80002172:	14 97       	mov	r7,r10
80002174:	12 93       	mov	r3,r9
80002176:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002178:	30 15       	mov	r5,1
8000217a:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000217c:	e0 68 00 80 	mov	r8,128
80002180:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002182:	30 28       	mov	r8,2
80002184:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002186:	49 d6       	lddpc	r6,800021f8 <twim_write+0x8c>
80002188:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000218a:	f0 1f 00 1d 	mcall	800021fc <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x94>
80002190:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002192:	49 d8       	lddpc	r8,80002204 <twim_write+0x98>
80002194:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002196:	30 09       	mov	r9,0
80002198:	49 c8       	lddpc	r8,80002208 <twim_write+0x9c>
8000219a:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000219c:	49 c9       	lddpc	r9,8000220c <twim_write+0xa0>
8000219e:	30 08       	mov	r8,0
800021a0:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021a2:	6c 08       	ld.w	r8,r6[0x0]
800021a4:	b1 67       	lsl	r7,0x10
800021a6:	e8 17 e0 00 	orl	r7,0xe000
800021aa:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021ae:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021b2:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b4:	49 7a       	lddpc	r10,80002210 <twim_write+0xa4>
800021b6:	e0 6b 03 02 	mov	r11,770
800021ba:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021bc:	74 0a       	ld.w	r10,r10[0x0]
800021be:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021c0:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021c2:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c4:	72 08       	ld.w	r8,r9[0x0]
800021c6:	58 08       	cp.w	r8,0
800021c8:	c0 80       	breq	800021d8 <twim_write+0x6c>
800021ca:	c0 b8       	rjmp	800021e0 <twim_write+0x74>
		cpu_relax();
800021cc:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d0:	6e 08       	ld.w	r8,r7[0x0]
800021d2:	58 08       	cp.w	r8,0
800021d4:	c0 30       	breq	800021da <twim_write+0x6e>
800021d6:	c0 58       	rjmp	800021e0 <twim_write+0x74>
800021d8:	48 d7       	lddpc	r7,8000220c <twim_write+0xa0>
800021da:	f0 1f 00 0f 	mcall	80002214 <twim_write+0xa8>
800021de:	cf 70       	breq	800021cc <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e0:	48 b8       	lddpc	r8,8000220c <twim_write+0xa0>
800021e2:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e4:	5b c8       	cp.w	r8,-4
800021e6:	c0 70       	breq	800021f4 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e8:	48 98       	lddpc	r8,8000220c <twim_write+0xa0>
800021ea:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021ec:	5b e8       	cp.w	r8,-2
800021ee:	c0 30       	breq	800021f4 <twim_write+0x88>
800021f0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f4:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f8:	00 00       	add	r0,r0
800021fa:	05 30       	ld.ub	r0,r2++
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	21 58       	sub	r8,21
80002200:	00 00       	add	r0,r0
80002202:	05 40       	ld.w	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 50       	ld.sh	r0,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 48       	ld.w	r8,--r2
8000220c:	00 00       	add	r0,r0
8000220e:	05 3c       	ld.ub	r12,r2++
80002210:	00 00       	add	r0,r0
80002212:	05 44       	ld.w	r4,--r2
80002214:	80 00       	ld.sh	r0,r0[0x0]
80002216:	21 48       	sub	r8,20

80002218 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002218:	d4 01       	pushm	lr
8000221a:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
8000221c:	30 08       	mov	r8,0
8000221e:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002220:	30 08       	mov	r8,0
80002222:	16 99       	mov	r9,r11
80002224:	10 9a       	mov	r10,r8
80002226:	1a 9b       	mov	r11,sp
80002228:	f0 1f 00 02 	mcall	80002230 <twim_probe+0x18>
}
8000222c:	2f fd       	sub	sp,-4
8000222e:	d8 02       	popm	pc
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	21 6c       	sub	r12,22

80002234 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002234:	eb cd 40 c0 	pushm	r6-r7,lr
80002238:	18 96       	mov	r6,r12
8000223a:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000223c:	30 28       	mov	r8,2
8000223e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002240:	4b 78       	lddpc	r8,8000231c <twim_read_packet+0xe8>
80002242:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002244:	f0 1f 00 37 	mcall	80002320 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002248:	6e 29       	ld.w	r9,r7[0x8]
8000224a:	4b 78       	lddpc	r8,80002324 <twim_read_packet+0xf0>
8000224c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224e:	6e 39       	ld.w	r9,r7[0xc]
80002250:	4b 68       	lddpc	r8,80002328 <twim_read_packet+0xf4>
80002252:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002254:	30 08       	mov	r8,0
80002256:	4b 6a       	lddpc	r10,8000232c <twim_read_packet+0xf8>
80002258:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000225a:	30 0b       	mov	r11,0
8000225c:	4b 5a       	lddpc	r10,80002330 <twim_read_packet+0xfc>
8000225e:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
80002260:	0f fa       	ld.ub	r10,r7[0x7]
80002262:	f0 0a 18 00 	cp.b	r10,r8
80002266:	c2 50       	breq	800022b0 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002268:	4a d8       	lddpc	r8,8000231c <twim_read_packet+0xe8>
8000226a:	70 08       	ld.w	r8,r8[0x0]
8000226c:	30 19       	mov	r9,1
8000226e:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80002270:	e0 69 00 80 	mov	r9,128
80002274:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002276:	30 29       	mov	r9,2
80002278:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
8000227a:	ee ca ff fc 	sub	r10,r7,-4
8000227e:	4a e9       	lddpc	r9,80002334 <twim_read_packet+0x100>
80002280:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80002282:	0f f9       	ld.ub	r9,r7[0x7]
80002284:	4a da       	lddpc	r10,80002338 <twim_read_packet+0x104>
80002286:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002288:	e0 6b 07 03 	mov	r11,1795
8000228c:	4a ca       	lddpc	r10,8000233c <twim_read_packet+0x108>
8000228e:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002290:	6e 0a       	ld.w	r10,r7[0x0]
80002292:	a1 7a       	lsl	r10,0x1
80002294:	e8 1a a0 00 	orl	r10,0xa000
80002298:	f5 e9 11 09 	or	r9,r10,r9<<0x10
8000229c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229e:	6e 0a       	ld.w	r10,r7[0x0]
800022a0:	6e 39       	ld.w	r9,r7[0xc]
800022a2:	b1 69       	lsl	r9,0x10
800022a4:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a8:	e8 19 e0 01 	orl	r9,0xe001
800022ac:	91 49       	st.w	r8[0x10],r9
800022ae:	c1 18       	rjmp	800022d0 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022b0:	30 0a       	mov	r10,0
800022b2:	4a 28       	lddpc	r8,80002338 <twim_read_packet+0x104>
800022b4:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b6:	e0 6a 07 01 	mov	r10,1793
800022ba:	4a 18       	lddpc	r8,8000233c <twim_read_packet+0x108>
800022bc:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022be:	49 88       	lddpc	r8,8000231c <twim_read_packet+0xe8>
800022c0:	70 08       	ld.w	r8,r8[0x0]
800022c2:	6e 0a       	ld.w	r10,r7[0x0]
800022c4:	b1 69       	lsl	r9,0x10
800022c6:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022ca:	e8 19 e0 01 	orl	r9,0xe001
800022ce:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022d0:	49 38       	lddpc	r8,8000231c <twim_read_packet+0xe8>
800022d2:	70 08       	ld.w	r8,r8[0x0]
800022d4:	49 a9       	lddpc	r9,8000233c <twim_read_packet+0x108>
800022d6:	72 09       	ld.w	r9,r9[0x0]
800022d8:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022da:	30 18       	mov	r8,1
800022dc:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022de:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022e0:	49 48       	lddpc	r8,80002330 <twim_read_packet+0xfc>
800022e2:	70 08       	ld.w	r8,r8[0x0]
800022e4:	58 08       	cp.w	r8,0
800022e6:	c0 80       	breq	800022f6 <twim_read_packet+0xc2>
800022e8:	c0 b8       	rjmp	800022fe <twim_read_packet+0xca>
		cpu_relax();
800022ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ee:	6e 08       	ld.w	r8,r7[0x0]
800022f0:	58 08       	cp.w	r8,0
800022f2:	c0 30       	breq	800022f8 <twim_read_packet+0xc4>
800022f4:	c0 58       	rjmp	800022fe <twim_read_packet+0xca>
800022f6:	48 f7       	lddpc	r7,80002330 <twim_read_packet+0xfc>
800022f8:	f0 1f 00 12 	mcall	80002340 <twim_read_packet+0x10c>
800022fc:	cf 70       	breq	800022ea <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fe:	30 28       	mov	r8,2
80002300:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002302:	48 c8       	lddpc	r8,80002330 <twim_read_packet+0xfc>
80002304:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002306:	5b c8       	cp.w	r8,-4
80002308:	c0 70       	breq	80002316 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000230a:	48 a8       	lddpc	r8,80002330 <twim_read_packet+0xfc>
8000230c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230e:	5b e8       	cp.w	r8,-2
80002310:	c0 30       	breq	80002316 <twim_read_packet+0xe2>
80002312:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002316:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
8000231a:	00 00       	add	r0,r0
8000231c:	00 00       	add	r0,r0
8000231e:	05 30       	ld.ub	r0,r2++
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	21 58       	sub	r8,21
80002324:	00 00       	add	r0,r0
80002326:	05 34       	ld.ub	r4,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 38       	ld.ub	r8,r2++
8000232c:	00 00       	add	r0,r0
8000232e:	05 48       	ld.w	r8,--r2
80002330:	00 00       	add	r0,r0
80002332:	05 3c       	ld.ub	r12,r2++
80002334:	00 00       	add	r0,r0
80002336:	05 40       	ld.w	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 50       	ld.sh	r0,--r2
8000233c:	00 00       	add	r0,r0
8000233e:	05 44       	ld.w	r4,--r2
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	21 48       	sub	r8,20

80002344 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002344:	eb cd 40 e0 	pushm	r5-r7,lr
80002348:	18 97       	mov	r7,r12
8000234a:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000234c:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002350:	30 0a       	mov	r10,0
80002352:	4a 69       	lddpc	r9,800023e8 <twim_master_init+0xa4>
80002354:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002356:	e6 18 00 01 	andh	r8,0x1,COH
8000235a:	c0 b1       	brne	80002370 <twim_master_init+0x2c>
		cpu_irq_disable ();
8000235c:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235e:	3f f8       	mov	r8,-1
80002360:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002362:	30 18       	mov	r8,1
80002364:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002366:	e0 68 00 80 	mov	r8,128
8000236a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
8000236c:	d5 03       	csrf	0x10
8000236e:	c0 88       	rjmp	8000237e <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002370:	3f f8       	mov	r8,-1
80002372:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002374:	30 18       	mov	r8,1
80002376:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002378:	e0 68 00 80 	mov	r8,128
8000237c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237e:	3f f8       	mov	r8,-1
80002380:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002382:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002386:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002388:	30 1a       	mov	r10,1
8000238a:	e0 6b 02 80 	mov	r11,640
8000238e:	49 8c       	lddpc	r12,800023ec <twim_master_init+0xa8>
80002390:	f0 1f 00 18 	mcall	800023f0 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002394:	e6 16 00 01 	andh	r6,0x1,COH
80002398:	c0 21       	brne	8000239c <twim_master_init+0x58>
      cpu_irq_enable();
8000239a:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
8000239c:	eb 39 00 0c 	ld.ub	r9,r5[12]
800023a0:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800023a2:	f0 09 18 00 	cp.b	r9,r8
800023a6:	f9 b8 01 10 	movne	r8,16
800023aa:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023ae:	f9 b8 01 ff 	movne	r8,-1
800023b2:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b6:	6a 0a       	ld.w	r10,r5[0x0]
800023b8:	6a 1b       	ld.w	r11,r5[0x4]
800023ba:	0e 9c       	mov	r12,r7
800023bc:	f0 1f 00 0e 	mcall	800023f4 <twim_master_init+0xb0>
800023c0:	5b 8c       	cp.w	r12,-8
800023c2:	c1 00       	breq	800023e2 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c4:	6a 2b       	ld.w	r11,r5[0x8]
800023c6:	0e 9c       	mov	r12,r7
800023c8:	f0 1f 00 0c 	mcall	800023f8 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023cc:	48 78       	lddpc	r8,800023e8 <twim_master_init+0xa4>
800023ce:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d0:	5b c8       	cp.w	r8,-4
800023d2:	c0 70       	breq	800023e0 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d4:	48 58       	lddpc	r8,800023e8 <twim_master_init+0xa4>
800023d6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d8:	5b e8       	cp.w	r8,-2
800023da:	c0 30       	breq	800023e0 <twim_master_init+0x9c>
800023dc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023e0:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e6:	00 00       	add	r0,r0
800023e8:	00 00       	add	r0,r0
800023ea:	05 3c       	ld.ub	r12,r2++
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	20 08       	sub	r8,0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	27 6c       	sub	r12,118
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	20 e4       	sub	r4,14
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	22 18       	sub	r8,33

800023fc <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023fc:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002400:	58 0a       	cp.w	r10,0
80002402:	c6 30       	breq	800024c8 <eic_init+0xcc>
80002404:	30 08       	mov	r8,0
80002406:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002408:	30 19       	mov	r9,1
8000240a:	30 1e       	mov	lr,1
8000240c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002410:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002414:	11 96       	ld.ub	r6,r8[0x1]
80002416:	f2 06 18 00 	cp.b	r6,r9
8000241a:	c0 71       	brne	80002428 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
8000241c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241e:	11 86       	ld.ub	r6,r8[0x0]
80002420:	fc 06 09 46 	lsl	r6,lr,r6
80002424:	0a 46       	or	r6,r5
80002426:	c0 78       	rjmp	80002434 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002428:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000242a:	11 86       	ld.ub	r6,r8[0x0]
8000242c:	fc 06 09 46 	lsl	r6,lr,r6
80002430:	5c d6       	com	r6
80002432:	0a 66       	and	r6,r5
80002434:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002436:	11 a6       	ld.ub	r6,r8[0x2]
80002438:	f2 06 18 00 	cp.b	r6,r9
8000243c:	c0 71       	brne	8000244a <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002440:	11 86       	ld.ub	r6,r8[0x0]
80002442:	fc 06 09 46 	lsl	r6,lr,r6
80002446:	0a 46       	or	r6,r5
80002448:	c0 78       	rjmp	80002456 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8000244a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000244c:	11 86       	ld.ub	r6,r8[0x0]
8000244e:	fc 06 09 46 	lsl	r6,lr,r6
80002452:	5c d6       	com	r6
80002454:	0a 66       	and	r6,r5
80002456:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002458:	11 b6       	ld.ub	r6,r8[0x3]
8000245a:	f2 06 18 00 	cp.b	r6,r9
8000245e:	c0 71       	brne	8000246c <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002460:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002462:	11 86       	ld.ub	r6,r8[0x0]
80002464:	fc 06 09 46 	lsl	r6,lr,r6
80002468:	0a 46       	or	r6,r5
8000246a:	c0 78       	rjmp	80002478 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
8000246c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246e:	11 86       	ld.ub	r6,r8[0x0]
80002470:	fc 06 09 46 	lsl	r6,lr,r6
80002474:	5c d6       	com	r6
80002476:	0a 66       	and	r6,r5
80002478:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000247a:	11 c6       	ld.ub	r6,r8[0x4]
8000247c:	f2 06 18 00 	cp.b	r6,r9
80002480:	c0 71       	brne	8000248e <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002482:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002484:	11 86       	ld.ub	r6,r8[0x0]
80002486:	fc 06 09 46 	lsl	r6,lr,r6
8000248a:	0a 46       	or	r6,r5
8000248c:	c0 78       	rjmp	8000249a <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002490:	11 86       	ld.ub	r6,r8[0x0]
80002492:	fc 06 09 46 	lsl	r6,lr,r6
80002496:	5c d6       	com	r6
80002498:	0a 66       	and	r6,r5
8000249a:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000249c:	11 d6       	ld.ub	r6,r8[0x5]
8000249e:	f2 06 18 00 	cp.b	r6,r9
800024a2:	c0 71       	brne	800024b0 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a4:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a6:	11 88       	ld.ub	r8,r8[0x0]
800024a8:	fc 08 09 48 	lsl	r8,lr,r8
800024ac:	0c 48       	or	r8,r6
800024ae:	c0 78       	rjmp	800024bc <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024b0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024b2:	11 88       	ld.ub	r8,r8[0x0]
800024b4:	fc 08 09 48 	lsl	r8,lr,r8
800024b8:	5c d8       	com	r8
800024ba:	0c 68       	and	r8,r6
800024bc:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024be:	2f f7       	sub	r7,-1
800024c0:	0e 98       	mov	r8,r7
800024c2:	0e 3a       	cp.w	r10,r7
800024c4:	fe 9b ff a4 	brhi	8000240c <eic_init+0x10>
800024c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024cc <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024cc:	30 18       	mov	r8,1
800024ce:	f0 0b 09 48 	lsl	r8,r8,r11
800024d2:	99 c8       	st.w	r12[0x30],r8
}
800024d4:	5e fc       	retal	r12

800024d6 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d6:	30 18       	mov	r8,1
800024d8:	f0 0b 09 48 	lsl	r8,r8,r11
800024dc:	99 08       	st.w	r12[0x0],r8
}
800024de:	5e fc       	retal	r12

800024e0 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024e0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e4:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e6:	30 19       	mov	r9,1
800024e8:	f2 0b 09 4b 	lsl	r11,r9,r11
800024ec:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ee:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024f0:	e6 18 00 01 	andh	r8,0x1,COH
800024f4:	c0 21       	brne	800024f8 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f6:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f8:	5e fc       	retal	r12
800024fa:	d7 03       	nop

800024fc <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024fc:	f8 08 16 05 	lsr	r8,r12,0x5
80002500:	a9 78       	lsl	r8,0x9
80002502:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002506:	58 7b       	cp.w	r11,7
80002508:	e0 8b 00 05 	brhi	80002512 <gpio_enable_module_pin+0x16>
8000250c:	4a 09       	lddpc	r9,8000258c <gpio_enable_module_pin+0x90>
8000250e:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002512:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002514:	30 19       	mov	r9,1
80002516:	f2 0c 09 49 	lsl	r9,r9,r12
8000251a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000251c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002520:	c3 18       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002522:	30 19       	mov	r9,1
80002524:	f2 0c 09 49 	lsl	r9,r9,r12
80002528:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000252a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000252c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252e:	c2 a8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002530:	30 19       	mov	r9,1
80002532:	f2 0c 09 49 	lsl	r9,r9,r12
80002536:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002538:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000253a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000253c:	c2 38       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253e:	30 19       	mov	r9,1
80002540:	f2 0c 09 49 	lsl	r9,r9,r12
80002544:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002546:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002548:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000254a:	c1 c8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000254c:	30 19       	mov	r9,1
8000254e:	f2 0c 09 49 	lsl	r9,r9,r12
80002552:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002554:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002556:	91 d9       	st.w	r8[0x34],r9
		break;
80002558:	c1 58       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000255a:	30 19       	mov	r9,1
8000255c:	f2 0c 09 49 	lsl	r9,r9,r12
80002560:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002562:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002564:	91 d9       	st.w	r8[0x34],r9
		break;
80002566:	c0 e8       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002568:	30 19       	mov	r9,1
8000256a:	f2 0c 09 49 	lsl	r9,r9,r12
8000256e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002570:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002572:	91 d9       	st.w	r8[0x34],r9
		break;
80002574:	c0 78       	rjmp	80002582 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002576:	30 19       	mov	r9,1
80002578:	f2 0c 09 49 	lsl	r9,r9,r12
8000257c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257e:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002580:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002582:	30 19       	mov	r9,1
80002584:	f2 0c 09 4c 	lsl	r12,r9,r12
80002588:	91 2c       	st.w	r8[0x8],r12
8000258a:	5e fd       	retal	0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	96 00       	ld.sh	r0,r11[0x0]

80002590 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002590:	d4 21       	pushm	r4-r7,lr
80002592:	18 97       	mov	r7,r12
80002594:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002596:	58 0b       	cp.w	r11,0
80002598:	c0 31       	brne	8000259e <gpio_enable_module+0xe>
8000259a:	30 05       	mov	r5,0
8000259c:	c0 d8       	rjmp	800025b6 <gpio_enable_module+0x26>
8000259e:	30 06       	mov	r6,0
800025a0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800025a2:	6e 1b       	ld.w	r11,r7[0x4]
800025a4:	6e 0c       	ld.w	r12,r7[0x0]
800025a6:	f0 1f 00 06 	mcall	800025bc <gpio_enable_module+0x2c>
800025aa:	18 45       	or	r5,r12
		gpiomap++;
800025ac:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025ae:	2f f6       	sub	r6,-1
800025b0:	0c 34       	cp.w	r4,r6
800025b2:	fe 9b ff f8 	brhi	800025a2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b6:	0a 9c       	mov	r12,r5
800025b8:	d8 22       	popm	r4-r7,pc
800025ba:	00 00       	add	r0,r0
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	24 fc       	sub	r12,79

800025c0 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025c0:	f8 08 16 05 	lsr	r8,r12,0x5
800025c4:	a9 78       	lsl	r8,0x9
800025c6:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025ca:	16 99       	mov	r9,r11
800025cc:	e2 19 00 04 	andl	r9,0x4,COH
800025d0:	c0 70       	breq	800025de <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025d2:	30 19       	mov	r9,1
800025d4:	f2 0c 09 49 	lsl	r9,r9,r12
800025d8:	f1 49 00 74 	st.w	r8[116],r9
800025dc:	c0 68       	rjmp	800025e8 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025de:	30 19       	mov	r9,1
800025e0:	f2 0c 09 49 	lsl	r9,r9,r12
800025e4:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e8:	16 99       	mov	r9,r11
800025ea:	e2 19 00 80 	andl	r9,0x80,COH
800025ee:	c2 40       	breq	80002636 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025f0:	16 99       	mov	r9,r11
800025f2:	e2 19 01 80 	andl	r9,0x180,COH
800025f6:	c0 90       	breq	80002608 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f8:	30 19       	mov	r9,1
800025fa:	f2 0c 09 49 	lsl	r9,r9,r12
800025fe:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002602:	f1 49 00 b8 	st.w	r8[184],r9
80002606:	c1 88       	rjmp	80002636 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002608:	16 99       	mov	r9,r11
8000260a:	e2 19 02 80 	andl	r9,0x280,COH
8000260e:	c0 90       	breq	80002620 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002610:	30 19       	mov	r9,1
80002612:	f2 0c 09 49 	lsl	r9,r9,r12
80002616:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000261a:	f1 49 00 b8 	st.w	r8[184],r9
8000261e:	c0 c8       	rjmp	80002636 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002620:	16 99       	mov	r9,r11
80002622:	e2 19 03 80 	andl	r9,0x380,COH
80002626:	c0 80       	breq	80002636 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002628:	30 19       	mov	r9,1
8000262a:	f2 0c 09 49 	lsl	r9,r9,r12
8000262e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002632:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002636:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000263a:	c1 50       	breq	80002664 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
8000263c:	e2 1b 00 02 	andl	r11,0x2,COH
80002640:	c0 70       	breq	8000264e <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002642:	30 19       	mov	r9,1
80002644:	f2 0c 09 49 	lsl	r9,r9,r12
80002648:	f1 49 00 54 	st.w	r8[84],r9
8000264c:	c0 68       	rjmp	80002658 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264e:	30 19       	mov	r9,1
80002650:	f2 0c 09 49 	lsl	r9,r9,r12
80002654:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002658:	30 19       	mov	r9,1
8000265a:	f2 0c 09 49 	lsl	r9,r9,r12
8000265e:	f1 49 00 44 	st.w	r8[68],r9
80002662:	c0 68       	rjmp	8000266e <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002664:	30 19       	mov	r9,1
80002666:	f2 0c 09 49 	lsl	r9,r9,r12
8000266a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266e:	30 19       	mov	r9,1
80002670:	f2 0c 09 4c 	lsl	r12,r9,r12
80002674:	91 1c       	st.w	r8[0x4],r12
}
80002676:	5e fc       	retal	r12

80002678 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002678:	f8 08 16 05 	lsr	r8,r12,0x5
8000267c:	a9 78       	lsl	r8,0x9
8000267e:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002682:	30 19       	mov	r9,1
80002684:	f2 0c 09 4c 	lsl	r12,r9,r12
80002688:	f1 4c 00 54 	st.w	r8[84],r12
}
8000268c:	5e fc       	retal	r12

8000268e <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268e:	f8 08 16 05 	lsr	r8,r12,0x5
80002692:	a9 78       	lsl	r8,0x9
80002694:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002698:	30 19       	mov	r9,1
8000269a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269e:	f1 4c 00 58 	st.w	r8[88],r12
}
800026a2:	5e fc       	retal	r12

800026a4 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026a4:	f8 08 16 05 	lsr	r8,r12,0x5
800026a8:	a9 78       	lsl	r8,0x9
800026aa:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800026ae:	30 19       	mov	r9,1
800026b0:	f2 0c 09 4c 	lsl	r12,r9,r12
800026b4:	f1 4c 00 5c 	st.w	r8[92],r12
}
800026b8:	5e fc       	retal	r12

800026ba <gpio_configure_edge_detector>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026ba:	f8 08 16 05 	lsr	r8,r12,0x5
800026be:	a9 78       	lsl	r8,0x9
800026c0:	e0 28 d4 00 	sub	r8,54272

	/* Configure the edge detector. */
	switch (mode) {
800026c4:	58 1b       	cp.w	r11,1
800026c6:	c0 d0       	breq	800026e0 <gpio_configure_edge_detector+0x26>
800026c8:	c0 43       	brcs	800026d0 <gpio_configure_edge_detector+0x16>
800026ca:	58 2b       	cp.w	r11,2
800026cc:	c1 20       	breq	800026f0 <gpio_configure_edge_detector+0x36>
800026ce:	5e ff       	retal	1
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800026d0:	30 19       	mov	r9,1
800026d2:	f2 0c 09 4c 	lsl	r12,r9,r12
800026d6:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800026da:	f1 4c 00 b8 	st.w	r8[184],r12
800026de:	5e fd       	retal	0
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800026e0:	30 19       	mov	r9,1
800026e2:	f2 0c 09 4c 	lsl	r12,r9,r12
800026e6:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800026ea:	f1 4c 00 b8 	st.w	r8[184],r12
800026ee:	5e fd       	retal	0
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800026f0:	30 19       	mov	r9,1
800026f2:	f2 0c 09 4c 	lsl	r12,r9,r12
800026f6:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
800026fa:	f1 4c 00 b4 	st.w	r8[180],r12
800026fe:	5e fd       	retal	0

80002700 <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80002700:	eb cd 40 c0 	pushm	r6-r7,lr
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002704:	f8 07 16 05 	lsr	r7,r12,0x5
80002708:	a9 77       	lsl	r7,0x9
8000270a:	e0 27 d4 00 	sub	r7,54272

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000270e:	30 16       	mov	r6,1
80002710:	ec 0c 09 46 	lsl	r6,r6,r12
80002714:	ef 46 00 c4 	st.w	r7[196],r6

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
80002718:	f0 1f 00 05 	mcall	8000272c <gpio_enable_pin_interrupt+0x2c>
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8000271c:	58 1c       	cp.w	r12,1
8000271e:	ef f6 1a 25 	st.wne	r7[0x94],r6
80002722:	f9 bc 01 00 	movne	r12,0

	return GPIO_SUCCESS;
}
80002726:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000272a:	00 00       	add	r0,r0
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	26 ba       	sub	r10,107

80002730 <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002730:	f8 08 16 05 	lsr	r8,r12,0x5
80002734:	a9 78       	lsl	r8,0x9
80002736:	e0 28 d4 00 	sub	r8,54272
	
	gpio_port->ierc = 1 << (pin & 0x1F);
8000273a:	30 19       	mov	r9,1
8000273c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002740:	f1 4c 00 98 	st.w	r8[152],r12
}
80002744:	5e fc       	retal	r12

80002746 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002746:	f8 08 16 05 	lsr	r8,r12,0x5
8000274a:	a9 78       	lsl	r8,0x9
8000274c:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
80002750:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
80002754:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
80002758:	30 1a       	mov	r10,1
8000275a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000275e:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
80002762:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
80002766:	5e fc       	retal	r12

80002768 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002768:	c0 08       	rjmp	80002768 <_unhandled_interrupt>
8000276a:	d7 03       	nop

8000276c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000276c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002770:	49 99       	lddpc	r9,800027d4 <INTC_register_interrupt+0x68>
80002772:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002776:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000277a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000277c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002780:	58 0a       	cp.w	r10,0
80002782:	c0 91       	brne	80002794 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002784:	49 59       	lddpc	r9,800027d8 <INTC_register_interrupt+0x6c>
80002786:	49 6a       	lddpc	r10,800027dc <INTC_register_interrupt+0x70>
80002788:	12 1a       	sub	r10,r9
8000278a:	fe 79 10 00 	mov	r9,-61440
8000278e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002792:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002794:	58 1a       	cp.w	r10,1
80002796:	c0 a1       	brne	800027aa <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002798:	49 09       	lddpc	r9,800027d8 <INTC_register_interrupt+0x6c>
8000279a:	49 2a       	lddpc	r10,800027e0 <INTC_register_interrupt+0x74>
8000279c:	12 1a       	sub	r10,r9
8000279e:	bf aa       	sbr	r10,0x1e
800027a0:	fe 79 10 00 	mov	r9,-61440
800027a4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027a8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800027aa:	58 2a       	cp.w	r10,2
800027ac:	c0 a1       	brne	800027c0 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800027ae:	48 b9       	lddpc	r9,800027d8 <INTC_register_interrupt+0x6c>
800027b0:	48 da       	lddpc	r10,800027e4 <INTC_register_interrupt+0x78>
800027b2:	12 1a       	sub	r10,r9
800027b4:	bf ba       	sbr	r10,0x1f
800027b6:	fe 79 10 00 	mov	r9,-61440
800027ba:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027be:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800027c0:	48 69       	lddpc	r9,800027d8 <INTC_register_interrupt+0x6c>
800027c2:	48 aa       	lddpc	r10,800027e8 <INTC_register_interrupt+0x7c>
800027c4:	12 1a       	sub	r10,r9
800027c6:	ea 1a c0 00 	orh	r10,0xc000
800027ca:	fe 79 10 00 	mov	r9,-61440
800027ce:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800027d2:	5e fc       	retal	r12
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	96 20       	ld.sh	r0,r11[0x4]
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	94 00       	ld.sh	r0,r10[0x0]
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	95 04       	st.w	r10[0x0],r4
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	95 12       	st.w	r10[0x4],r2
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	95 20       	st.w	r10[0x8],r0
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	95 2e       	st.w	r10[0x8],lr

800027ec <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800027ec:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800027ee:	49 18       	lddpc	r8,80002830 <INTC_init_interrupts+0x44>
800027f0:	e3 b8 00 01 	mtsr	0x4,r8
800027f4:	49 0e       	lddpc	lr,80002834 <INTC_init_interrupts+0x48>
800027f6:	30 07       	mov	r7,0
800027f8:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800027fa:	49 0c       	lddpc	r12,80002838 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800027fc:	49 05       	lddpc	r5,8000283c <INTC_init_interrupts+0x50>
800027fe:	10 15       	sub	r5,r8
80002800:	fe 76 10 00 	mov	r6,-61440
80002804:	c1 08       	rjmp	80002824 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002806:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002808:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000280a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000280c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002810:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002812:	10 3a       	cp.w	r10,r8
80002814:	fe 9b ff fc 	brhi	8000280c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002818:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000281c:	2f f7       	sub	r7,-1
8000281e:	2f 8e       	sub	lr,-8
80002820:	59 f7       	cp.w	r7,31
80002822:	c0 50       	breq	8000282c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002824:	7c 08       	ld.w	r8,lr[0x0]
80002826:	58 08       	cp.w	r8,0
80002828:	ce f1       	brne	80002806 <INTC_init_interrupts+0x1a>
8000282a:	cf 7b       	rjmp	80002818 <INTC_init_interrupts+0x2c>
8000282c:	d8 22       	popm	r4-r7,pc
8000282e:	00 00       	add	r0,r0
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	94 00       	ld.sh	r0,r10[0x0]
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	96 20       	ld.sh	r0,r11[0x4]
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	27 68       	sub	r8,118
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	95 04       	st.w	r10[0x0],r4

80002840 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002840:	fe 78 10 00 	mov	r8,-61440
80002844:	e0 69 00 83 	mov	r9,131
80002848:	f2 0c 01 0c 	sub	r12,r9,r12
8000284c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002850:	f2 ca ff c0 	sub	r10,r9,-64
80002854:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002858:	58 08       	cp.w	r8,0
8000285a:	c0 21       	brne	8000285e <_get_interrupt_handler+0x1e>
8000285c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000285e:	f0 08 12 00 	clz	r8,r8
80002862:	48 5a       	lddpc	r10,80002874 <_get_interrupt_handler+0x34>
80002864:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002868:	f0 08 11 1f 	rsub	r8,r8,31
8000286c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000286e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002872:	5e fc       	retal	r12
80002874:	80 00       	ld.sh	r0,r0[0x0]
80002876:	96 20       	ld.sh	r0,r11[0x4]

80002878 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80002878:	f8 c8 00 01 	sub	r8,r12,1
8000287c:	f0 0b 00 0b 	add	r11,r8,r11
80002880:	f6 0c 0d 0a 	divu	r10,r11,r12
80002884:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002886:	f4 c8 00 01 	sub	r8,r10,1
8000288a:	e0 48 00 fe 	cp.w	r8,254
8000288e:	e0 88 00 03 	brls	80002894 <getBaudDiv+0x1c>
80002892:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002894:	5c 8c       	casts.h	r12
}
80002896:	5e fc       	retal	r12

80002898 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002898:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000289a:	30 18       	mov	r8,1
8000289c:	f0 0b 18 00 	cp.b	r11,r8
800028a0:	5f be       	srhi	lr
800028a2:	f0 0a 18 00 	cp.b	r10,r8
800028a6:	5f b8       	srhi	r8
800028a8:	fd e8 10 08 	or	r8,lr,r8
800028ac:	c0 30       	breq	800028b2 <spi_selectionMode+0x1a>
800028ae:	30 2c       	mov	r12,2
800028b0:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800028b2:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800028b4:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800028b8:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800028bc:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800028c0:	99 18       	st.w	r12[0x4],r8
800028c2:	d8 0a       	popm	pc,r12=0

800028c4 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800028c4:	78 18       	ld.w	r8,r12[0x4]
800028c6:	ea 18 00 0f 	orh	r8,0xf
800028ca:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800028cc:	78 18       	ld.w	r8,r12[0x4]
800028ce:	e2 18 00 04 	andl	r8,0x4,COH
800028d2:	c0 f0       	breq	800028f0 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800028d4:	30 e8       	mov	r8,14
800028d6:	f0 0b 18 00 	cp.b	r11,r8
800028da:	e0 8b 00 19 	brhi	8000290c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800028de:	78 18       	ld.w	r8,r12[0x4]
800028e0:	b1 6b       	lsl	r11,0x10
800028e2:	ea 1b ff f0 	orh	r11,0xfff0
800028e6:	e8 1b ff ff 	orl	r11,0xffff
800028ea:	10 6b       	and	r11,r8
800028ec:	99 1b       	st.w	r12[0x4],r11
800028ee:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800028f0:	30 38       	mov	r8,3
800028f2:	f0 0b 18 00 	cp.b	r11,r8
800028f6:	e0 8b 00 0b 	brhi	8000290c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800028fa:	78 18       	ld.w	r8,r12[0x4]
800028fc:	2f 0b       	sub	r11,-16
800028fe:	30 19       	mov	r9,1
80002900:	f2 0b 09 4b 	lsl	r11,r9,r11
80002904:	5c db       	com	r11
80002906:	10 6b       	and	r11,r8
80002908:	99 1b       	st.w	r12[0x4],r11
8000290a:	5e fd       	retal	0
8000290c:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000290e:	5e fc       	retal	r12

80002910 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002910:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002914:	c0 58       	rjmp	8000291e <spi_unselectChip+0xe>
		if (!timeout--) {
80002916:	58 08       	cp.w	r8,0
80002918:	c0 21       	brne	8000291c <spi_unselectChip+0xc>
8000291a:	5e ff       	retal	1
8000291c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000291e:	78 49       	ld.w	r9,r12[0x10]
80002920:	e2 19 02 00 	andl	r9,0x200,COH
80002924:	cf 90       	breq	80002916 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002926:	78 18       	ld.w	r8,r12[0x4]
80002928:	ea 18 00 0f 	orh	r8,0xf
8000292c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000292e:	fc 18 01 00 	movh	r8,0x100
80002932:	99 08       	st.w	r12[0x0],r8
80002934:	5e fd       	retal	0
80002936:	d7 03       	nop

80002938 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002938:	eb cd 40 f8 	pushm	r3-r7,lr
8000293c:	18 95       	mov	r5,r12
8000293e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002940:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002944:	30 38       	mov	r8,3
80002946:	f0 06 18 00 	cp.b	r6,r8
8000294a:	e0 8b 00 4d 	brhi	800029e4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000294e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002952:	30 18       	mov	r8,1
80002954:	f0 04 18 00 	cp.b	r4,r8
80002958:	e0 8b 00 46 	brhi	800029e4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
8000295c:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002960:	30 78       	mov	r8,7
80002962:	f0 03 18 00 	cp.b	r3,r8
80002966:	e0 88 00 3f 	brls	800029e4 <spi_setupChipReg+0xac>
8000296a:	31 08       	mov	r8,16
8000296c:	f0 03 18 00 	cp.b	r3,r8
80002970:	e0 8b 00 3a 	brhi	800029e4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002974:	14 9b       	mov	r11,r10
80002976:	6e 1c       	ld.w	r12,r7[0x4]
80002978:	f0 1f 00 1d 	mcall	800029ec <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
8000297c:	c3 45       	brlt	800029e4 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000297e:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80002980:	ec 09 16 01 	lsr	r9,r6,0x1
80002984:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002988:	ec 16 00 01 	eorl	r6,0x1
8000298c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002990:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002994:	20 83       	sub	r3,8
80002996:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000299a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000299e:	ef 39 00 09 	ld.ub	r9,r7[9]
800029a2:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800029a6:	ef 39 00 0a 	ld.ub	r9,r7[10]
800029aa:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800029ae:	0f 89       	ld.ub	r9,r7[0x0]
800029b0:	30 1a       	mov	r10,1
800029b2:	f4 09 18 00 	cp.b	r9,r10
800029b6:	c0 e0       	breq	800029d2 <spi_setupChipReg+0x9a>
800029b8:	c0 a3       	brcs	800029cc <spi_setupChipReg+0x94>
800029ba:	30 2a       	mov	r10,2
800029bc:	f4 09 18 00 	cp.b	r9,r10
800029c0:	c0 c0       	breq	800029d8 <spi_setupChipReg+0xa0>
800029c2:	30 3a       	mov	r10,3
800029c4:	f4 09 18 00 	cp.b	r9,r10
800029c8:	c0 e1       	brne	800029e4 <spi_setupChipReg+0xac>
800029ca:	c0 a8       	rjmp	800029de <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800029cc:	8b c8       	st.w	r5[0x30],r8
800029ce:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800029d2:	8b d8       	st.w	r5[0x34],r8
800029d4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800029d8:	8b e8       	st.w	r5[0x38],r8
800029da:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800029de:	8b f8       	st.w	r5[0x3c],r8
800029e0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
800029e4:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800029e6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800029ea:	00 00       	add	r0,r0
800029ec:	80 00       	ld.sh	r0,r0[0x0]
800029ee:	28 78       	sub	r8,-121

800029f0 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800029f0:	30 18       	mov	r8,1
800029f2:	99 08       	st.w	r12[0x0],r8
}
800029f4:	5e fc       	retal	r12

800029f6 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800029f6:	76 09       	ld.w	r9,r11[0x0]
800029f8:	58 29       	cp.w	r9,2
800029fa:	e0 88 00 03 	brls	80002a00 <tc_init_waveform+0xa>
800029fe:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002a00:	76 18       	ld.w	r8,r11[0x4]
80002a02:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002a06:	af ba       	sbr	r10,0xf
80002a08:	10 9b       	mov	r11,r8
80002a0a:	e6 1b c0 00 	andh	r11,0xc000,COH
80002a0e:	16 4a       	or	r10,r11
80002a10:	10 9b       	mov	r11,r8
80002a12:	e6 1b 30 00 	andh	r11,0x3000,COH
80002a16:	16 4a       	or	r10,r11
80002a18:	10 9b       	mov	r11,r8
80002a1a:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002a1e:	16 4a       	or	r10,r11
80002a20:	10 9b       	mov	r11,r8
80002a22:	e6 1b 03 00 	andh	r11,0x300,COH
80002a26:	16 4a       	or	r10,r11
80002a28:	10 9b       	mov	r11,r8
80002a2a:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002a2e:	16 4a       	or	r10,r11
80002a30:	10 9b       	mov	r11,r8
80002a32:	e6 1b 00 30 	andh	r11,0x30,COH
80002a36:	16 4a       	or	r10,r11
80002a38:	10 9b       	mov	r11,r8
80002a3a:	e6 1b 00 0c 	andh	r11,0xc,COH
80002a3e:	16 4a       	or	r10,r11
80002a40:	10 9b       	mov	r11,r8
80002a42:	e6 1b 00 03 	andh	r11,0x3,COH
80002a46:	16 4a       	or	r10,r11
80002a48:	10 9b       	mov	r11,r8
80002a4a:	e2 1b 60 00 	andl	r11,0x6000,COH
80002a4e:	16 4a       	or	r10,r11
80002a50:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002a54:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
80002a58:	10 9b       	mov	r11,r8
80002a5a:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002a5e:	16 4a       	or	r10,r11
80002a60:	10 9b       	mov	r11,r8
80002a62:	e2 1b 03 00 	andl	r11,0x300,COH
80002a66:	16 4a       	or	r10,r11
80002a68:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80002a6c:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002a70:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002a74:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
80002a78:	10 9b       	mov	r11,r8
80002a7a:	e2 1b 00 30 	andl	r11,0x30,COH
80002a7e:	16 4a       	or	r10,r11
80002a80:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002a84:	f5 e8 10 38 	or	r8,r10,r8<<0x3
80002a88:	a5 69       	lsl	r9,0x4
80002a8a:	2f f9       	sub	r9,-1
80002a8c:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a90:	5e fd       	retal	0

80002a92 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a92:	58 2b       	cp.w	r11,2
80002a94:	e0 88 00 03 	brls	80002a9a <tc_start+0x8>
80002a98:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002a9a:	a7 6b       	lsl	r11,0x6
80002a9c:	16 0c       	add	r12,r11
80002a9e:	30 58       	mov	r8,5
80002aa0:	99 08       	st.w	r12[0x0],r8
80002aa2:	5e fd       	retal	0

80002aa4 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002aa4:	58 2b       	cp.w	r11,2
80002aa6:	e0 88 00 03 	brls	80002aac <tc_stop+0x8>
80002aaa:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80002aac:	a7 6b       	lsl	r11,0x6
80002aae:	16 0c       	add	r12,r11
80002ab0:	30 28       	mov	r8,2
80002ab2:	99 08       	st.w	r12[0x0],r8
80002ab4:	5e fd       	retal	0

80002ab6 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002ab6:	58 2b       	cp.w	r11,2
80002ab8:	e0 88 00 03 	brls	80002abe <tc_read_sr+0x8>
80002abc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002abe:	a7 6b       	lsl	r11,0x6
80002ac0:	2e 0b       	sub	r11,-32
80002ac2:	16 0c       	add	r12,r11
80002ac4:	78 0c       	ld.w	r12,r12[0x0]
}
80002ac6:	5e fc       	retal	r12

80002ac8 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002ac8:	58 2b       	cp.w	r11,2
80002aca:	e0 88 00 03 	brls	80002ad0 <tc_write_rc+0x8>
80002ace:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002ad0:	f6 08 15 04 	lsl	r8,r11,0x4
80002ad4:	2f f8       	sub	r8,-1
80002ad6:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002ada:	e2 18 80 00 	andl	r8,0x8000,COH
80002ade:	c0 c0       	breq	80002af6 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002ae0:	a7 6b       	lsl	r11,0x6
80002ae2:	16 0c       	add	r12,r11
80002ae4:	2e 4c       	sub	r12,-28
80002ae6:	78 08       	ld.w	r8,r12[0x0]
80002ae8:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002aec:	e0 18 00 00 	andl	r8,0x0
80002af0:	f3 e8 10 08 	or	r8,r9,r8
80002af4:	99 08       	st.w	r12[0x0],r8

  return value;
80002af6:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002afa:	5e fc       	retal	r12

80002afc <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002afc:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002b00:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002b04:	58 2b       	cp.w	r11,2
80002b06:	e0 88 00 04 	brls	80002b0e <tc_configure_interrupts+0x12>
80002b0a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002b0e:	ee 19 00 01 	eorh	r9,0x1
80002b12:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002b16:	74 08       	ld.w	r8,r10[0x0]
80002b18:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002b1c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002b20:	a7 6e       	lsl	lr,0x6
80002b22:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002b26:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002b2a:	0e 4e       	or	lr,r7
80002b2c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002b30:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002b34:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002b38:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002b3c:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002b40:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002b44:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002b48:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002b4c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b50:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002b54:	f6 0e 15 06 	lsl	lr,r11,0x6
80002b58:	f8 0e 00 0e 	add	lr,r12,lr
80002b5c:	2d ce       	sub	lr,-36
80002b5e:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002b60:	58 09       	cp.w	r9,0
80002b62:	c0 20       	breq	80002b66 <tc_configure_interrupts+0x6a>
80002b64:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b66:	74 08       	ld.w	r8,r10[0x0]
80002b68:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002b6c:	e0 65 00 80 	mov	r5,128
80002b70:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002b74:	74 08       	ld.w	r8,r10[0x0]
80002b76:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002b7a:	f9 b4 00 40 	moveq	r4,64
80002b7e:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002b82:	74 08       	ld.w	r8,r10[0x0]
80002b84:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002b88:	f9 b3 00 20 	moveq	r3,32
80002b8c:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002b90:	74 08       	ld.w	r8,r10[0x0]
80002b92:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002b96:	f9 b2 00 10 	moveq	r2,16
80002b9a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002b9e:	74 08       	ld.w	r8,r10[0x0]
80002ba0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002ba4:	f9 b6 00 08 	moveq	r6,8
80002ba8:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002bac:	74 08       	ld.w	r8,r10[0x0]
80002bae:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002bb2:	f9 b7 00 04 	moveq	r7,4
80002bb6:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002bba:	74 08       	ld.w	r8,r10[0x0]
80002bbc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002bc0:	f9 be 00 02 	moveq	lr,2
80002bc4:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002bc8:	74 08       	ld.w	r8,r10[0x0]
80002bca:	ec 18 00 01 	eorl	r8,0x1
80002bce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bd2:	eb e8 10 08 	or	r8,r5,r8
80002bd6:	08 48       	or	r8,r4
80002bd8:	06 48       	or	r8,r3
80002bda:	04 48       	or	r8,r2
80002bdc:	0c 48       	or	r8,r6
80002bde:	0e 48       	or	r8,r7
80002be0:	1c 48       	or	r8,lr
80002be2:	f6 0a 15 06 	lsl	r10,r11,0x6
80002be6:	f8 0a 00 0a 	add	r10,r12,r10
80002bea:	2d 8a       	sub	r10,-40
80002bec:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002bee:	a7 6b       	lsl	r11,0x6
80002bf0:	2e 0b       	sub	r11,-32
80002bf2:	16 0c       	add	r12,r11
80002bf4:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002bf6:	58 09       	cp.w	r9,0
80002bf8:	c0 31       	brne	80002bfe <tc_configure_interrupts+0x102>
80002bfa:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002bfe:	d5 03       	csrf	0x10
80002c00:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002c04 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002c04:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002c06:	f6 08 15 04 	lsl	r8,r11,0x4
80002c0a:	14 38       	cp.w	r8,r10
80002c0c:	f9 b8 08 10 	movls	r8,16
80002c10:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002c14:	f0 0b 02 4b 	mul	r11,r8,r11
80002c18:	f6 09 16 01 	lsr	r9,r11,0x1
80002c1c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002c20:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002c24:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002c28:	f2 cb 00 01 	sub	r11,r9,1
80002c2c:	e0 4b ff fe 	cp.w	r11,65534
80002c30:	e0 88 00 03 	brls	80002c36 <usart_set_async_baudrate+0x32>
80002c34:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002c36:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002c38:	e8 6e 00 00 	mov	lr,524288
80002c3c:	59 08       	cp.w	r8,16
80002c3e:	fc 08 17 10 	movne	r8,lr
80002c42:	f9 b8 00 00 	moveq	r8,0
80002c46:	e4 1b ff f7 	andh	r11,0xfff7
80002c4a:	e0 1b fe cf 	andl	r11,0xfecf
80002c4e:	16 48       	or	r8,r11
80002c50:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002c52:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002c56:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002c5a:	99 89       	st.w	r12[0x20],r9
80002c5c:	d8 0a       	popm	pc,r12=0

80002c5e <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002c5e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002c60:	e2 18 00 02 	andl	r8,0x2,COH
80002c64:	c0 31       	brne	80002c6a <usart_write_char+0xc>
80002c66:	30 2c       	mov	r12,2
80002c68:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002c6a:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002c6e:	99 7b       	st.w	r12[0x1c],r11
80002c70:	5e fd       	retal	0
80002c72:	d7 03       	nop

80002c74 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002c74:	eb cd 40 e0 	pushm	r5-r7,lr
80002c78:	18 96       	mov	r6,r12
80002c7a:	16 95       	mov	r5,r11
80002c7c:	e0 67 27 0f 	mov	r7,9999
80002c80:	c0 68       	rjmp	80002c8c <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002c82:	58 07       	cp.w	r7,0
80002c84:	c0 31       	brne	80002c8a <usart_putchar+0x16>
80002c86:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002c8a:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002c8c:	0a 9b       	mov	r11,r5
80002c8e:	0c 9c       	mov	r12,r6
80002c90:	f0 1f 00 03 	mcall	80002c9c <usart_putchar+0x28>
80002c94:	cf 71       	brne	80002c82 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002c96:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c9a:	00 00       	add	r0,r0
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	2c 5e       	sub	lr,-59

80002ca0 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002ca0:	78 58       	ld.w	r8,r12[0x14]
80002ca2:	e2 18 00 e0 	andl	r8,0xe0,COH
80002ca6:	c0 30       	breq	80002cac <usart_read_char+0xc>
80002ca8:	30 4c       	mov	r12,4
80002caa:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002cac:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002cae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002cb2:	c0 31       	brne	80002cb8 <usart_read_char+0x18>
80002cb4:	30 3c       	mov	r12,3
80002cb6:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002cb8:	78 68       	ld.w	r8,r12[0x18]
80002cba:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002cbe:	97 08       	st.w	r11[0x0],r8
80002cc0:	5e fd       	retal	0
80002cc2:	d7 03       	nop

80002cc4 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80002cc8:	18 96       	mov	r6,r12
80002cca:	16 97       	mov	r7,r11
  while (*string != '\0')
80002ccc:	17 8b       	ld.ub	r11,r11[0x0]
80002cce:	58 0b       	cp.w	r11,0
80002cd0:	c0 80       	breq	80002ce0 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002cd2:	2f f7       	sub	r7,-1
80002cd4:	0c 9c       	mov	r12,r6
80002cd6:	f0 1f 00 04 	mcall	80002ce4 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002cda:	0f 8b       	ld.ub	r11,r7[0x0]
80002cdc:	58 0b       	cp.w	r11,0
80002cde:	cf a1       	brne	80002cd2 <usart_write_line+0xe>
80002ce0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	2c 74       	sub	r4,-57

80002ce8 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002ce8:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002cec:	e6 18 00 01 	andh	r8,0x1,COH
80002cf0:	c0 71       	brne	80002cfe <usart_reset+0x16>
80002cf2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002cf4:	3f f8       	mov	r8,-1
80002cf6:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002cf8:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002cfa:	d5 03       	csrf	0x10
80002cfc:	c0 48       	rjmp	80002d04 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002cfe:	3f f8       	mov	r8,-1
80002d00:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002d02:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002d04:	30 08       	mov	r8,0
80002d06:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002d08:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002d0a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002d0c:	e8 68 61 0c 	mov	r8,549132
80002d10:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002d12:	5e fc       	retal	r12

80002d14 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002d14:	eb cd 40 e0 	pushm	r5-r7,lr
80002d18:	18 96       	mov	r6,r12
80002d1a:	16 97       	mov	r7,r11
80002d1c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002d1e:	f0 1f 00 2f 	mcall	80002dd8 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002d22:	58 07       	cp.w	r7,0
80002d24:	c5 80       	breq	80002dd4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002d26:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002d28:	30 49       	mov	r9,4
80002d2a:	f2 08 18 00 	cp.b	r8,r9
80002d2e:	e0 88 00 53 	brls	80002dd4 <usart_init_rs232+0xc0>
80002d32:	30 99       	mov	r9,9
80002d34:	f2 08 18 00 	cp.b	r8,r9
80002d38:	e0 8b 00 4e 	brhi	80002dd4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002d3c:	0f d9       	ld.ub	r9,r7[0x5]
80002d3e:	30 78       	mov	r8,7
80002d40:	f0 09 18 00 	cp.b	r9,r8
80002d44:	e0 8b 00 48 	brhi	80002dd4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002d48:	8e 39       	ld.sh	r9,r7[0x6]
80002d4a:	e0 68 01 01 	mov	r8,257
80002d4e:	f0 09 19 00 	cp.h	r9,r8
80002d52:	e0 8b 00 41 	brhi	80002dd4 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002d56:	ef 39 00 08 	ld.ub	r9,r7[8]
80002d5a:	30 38       	mov	r8,3
80002d5c:	f0 09 18 00 	cp.b	r9,r8
80002d60:	e0 8b 00 3a 	brhi	80002dd4 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002d64:	0a 9a       	mov	r10,r5
80002d66:	6e 0b       	ld.w	r11,r7[0x0]
80002d68:	0c 9c       	mov	r12,r6
80002d6a:	f0 1f 00 1d 	mcall	80002ddc <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002d6e:	58 1c       	cp.w	r12,1
80002d70:	c3 20       	breq	80002dd4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002d72:	0f c8       	ld.ub	r8,r7[0x4]
80002d74:	30 99       	mov	r9,9
80002d76:	f2 08 18 00 	cp.b	r8,r9
80002d7a:	c0 51       	brne	80002d84 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002d7c:	6c 18       	ld.w	r8,r6[0x4]
80002d7e:	b1 b8       	sbr	r8,0x11
80002d80:	8d 18       	st.w	r6[0x4],r8
80002d82:	c0 68       	rjmp	80002d8e <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002d84:	6c 19       	ld.w	r9,r6[0x4]
80002d86:	20 58       	sub	r8,5
80002d88:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002d8c:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002d8e:	6c 19       	ld.w	r9,r6[0x4]
80002d90:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002d94:	0f d8       	ld.ub	r8,r7[0x5]
80002d96:	a9 78       	lsl	r8,0x9
80002d98:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002d9c:	12 48       	or	r8,r9
80002d9e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002da0:	8e 38       	ld.sh	r8,r7[0x6]
80002da2:	30 29       	mov	r9,2
80002da4:	f2 08 19 00 	cp.h	r8,r9
80002da8:	e0 88 00 09 	brls	80002dba <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002dac:	6c 18       	ld.w	r8,r6[0x4]
80002dae:	ad b8       	sbr	r8,0xd
80002db0:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002db2:	8e b8       	ld.uh	r8,r7[0x6]
80002db4:	20 28       	sub	r8,2
80002db6:	8d a8       	st.w	r6[0x28],r8
80002db8:	c0 68       	rjmp	80002dc4 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002dba:	6c 19       	ld.w	r9,r6[0x4]
80002dbc:	5c 78       	castu.h	r8
80002dbe:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002dc2:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002dc4:	6c 18       	ld.w	r8,r6[0x4]
80002dc6:	e0 18 ff f0 	andl	r8,0xfff0
80002dca:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002dcc:	35 08       	mov	r8,80
80002dce:	8d 08       	st.w	r6[0x0],r8
80002dd0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002dd4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	2c e8       	sub	r8,-50
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	2c 04       	sub	r4,-64

80002de0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002de0:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002de4:	fe c0 99 e4 	sub	r0,pc,-26140

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002de8:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002dec:	d5 53       	csrf	0x15
  cp      r0, r1
80002dee:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002df0:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002df4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002df6:	c0 72       	brcc	80002e04 <idata_load_loop_end>
  cp      r0, r1
80002df8:	fe c2 90 58 	sub	r2,pc,-28584

80002dfc <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002dfc:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002dfe:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002e00:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002e02:	cf d3       	brcs	80002dfc <idata_load_loop>

80002e04 <idata_load_loop_end>:
  mov     r2, 0
80002e04:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002e08:	e0 61 08 10 	mov	r1,2064
  cp      r0, r1
  brlo    udata_clear_loop
80002e0c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002e0e:	c0 62       	brcc	80002e1a <udata_clear_loop_end>
80002e10:	30 02       	mov	r2,0
80002e12:	30 03       	mov	r3,0

80002e14 <udata_clear_loop>:
80002e14:	a1 22       	st.d	r0++,r2
80002e16:	02 30       	cp.w	r0,r1
80002e18:	cf e3       	brcs	80002e14 <udata_clear_loop>

80002e1a <udata_clear_loop_end>:
80002e1a:	fe cf f7 2e 	sub	pc,pc,-2258
80002e1e:	d7 03       	nop

80002e20 <switch_pll_on>:

	return TRX_SUCCESS;
}

static void switch_pll_on(void)
{
80002e20:	eb cd 40 e0 	pushm	r5-r7,lr
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure is applicable */
	if (pal_trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
80002e24:	30 0a       	mov	r10,0
80002e26:	31 fb       	mov	r11,31
80002e28:	30 1c       	mov	r12,1
80002e2a:	f0 1f 00 19 	mcall	80002e8c <switch_pll_on+0x6c>
80002e2e:	30 88       	mov	r8,8
80002e30:	f0 0c 18 00 	cp.b	r12,r8
80002e34:	c2 a1       	brne	80002e88 <switch_pll_on+0x68>
		Assert("Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	pal_trx_reg_read(RG_IRQ_STATUS);	/* clear PLL lock bit */
80002e36:	30 fc       	mov	r12,15
80002e38:	f0 1f 00 16 	mcall	80002e90 <switch_pll_on+0x70>

	/* Switch PLL on */
	pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
80002e3c:	30 9b       	mov	r11,9
80002e3e:	30 2c       	mov	r12,2
80002e40:	f0 1f 00 15 	mcall	80002e94 <switch_pll_on+0x74>
80002e44:	30 07       	mov	r7,0

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t) pal_trx_reg_read(RG_IRQ_STATUS);
80002e46:	30 f5       	mov	r5,15

		/* Wait a time interval of typical value for state change. */
		DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
80002e48:	30 36       	mov	r6,3
	/* Switch PLL on */
	pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t) pal_trx_reg_read(RG_IRQ_STATUS);
80002e4a:	0a 9c       	mov	r12,r5
80002e4c:	f0 1f 00 11 	mcall	80002e90 <switch_pll_on+0x70>

		if (irq_status & TRX_IRQ_PLL_LOCK) {
80002e50:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002e54:	c1 a1       	brne	80002e88 <switch_pll_on+0x68>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e56:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e5a:	f0 ca ff e9 	sub	r10,r8,-23
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e5e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e62:	14 38       	cp.w	r8,r10
80002e64:	e0 88 00 08 	brls	80002e74 <switch_pll_on+0x54>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e68:	12 38       	cp.w	r8,r9
80002e6a:	fe 98 ff fa 	brls	80002e5e <switch_pll_on+0x3e>
80002e6e:	12 3a       	cp.w	r10,r9
80002e70:	c0 73       	brcs	80002e7e <switch_pll_on+0x5e>
80002e72:	cf 6b       	rjmp	80002e5e <switch_pll_on+0x3e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e74:	12 38       	cp.w	r8,r9
80002e76:	e0 8b 00 04 	brhi	80002e7e <switch_pll_on+0x5e>
80002e7a:	12 3a       	cp.w	r10,r9
80002e7c:	cf 12       	brcc	80002e5e <switch_pll_on+0x3e>
		}

		/* Wait a time interval of typical value for state change. */
		DELAY_US(TRX_OFF_TO_PLL_ON_TIME_US);

		poll_counter++;
80002e7e:	2f f7       	sub	r7,-1
80002e80:	5c 57       	castu.b	r7
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
80002e82:	ec 07 18 00 	cp.b	r7,r6
80002e86:	ce 21       	brne	80002e4a <switch_pll_on+0x2a>
80002e88:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002e8c:	80 00       	ld.sh	r0,r0[0x0]
80002e8e:	31 a8       	mov	r8,26
80002e90:	80 00       	ld.sh	r0,r0[0x0]
80002e92:	31 34       	mov	r4,19
80002e94:	80 00       	ld.sh	r0,r0[0x0]
80002e96:	30 c8       	mov	r8,12

80002e98 <set_trx_state>:
	/* The TRX_END interrupt of the transceiver is enabled. */
	pal_trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
}

static tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
80002e98:	eb cd 40 f8 	pushm	r3-r7,lr
80002e9c:	18 97       	mov	r7,r12
	tal_trx_status = (tal_trx_status_t) pal_trx_bit_read(SR_TRX_STATUS);
80002e9e:	30 0a       	mov	r10,0
80002ea0:	31 fb       	mov	r11,31
80002ea2:	30 1c       	mov	r12,1
80002ea4:	f0 1f 00 4e 	mcall	80002fdc <set_trx_state+0x144>
80002ea8:	4c e8       	lddpc	r8,80002fe0 <set_trx_state+0x148>
80002eaa:	b0 8c       	st.b	r8[0x0],r12
	/*
	 * State transition is handled among FORCE_TRX_OFF, RX_ON and PLL_ON.
	 * These are the essential states required for a basic transmission
	 * and reception.
	 */
	switch (trx_cmd) {	/* requested state */
80002eac:	30 68       	mov	r8,6
80002eae:	f0 07 18 00 	cp.b	r7,r8
80002eb2:	c4 a0       	breq	80002f46 <set_trx_state+0xae>
80002eb4:	30 98       	mov	r8,9
80002eb6:	f0 07 18 00 	cp.b	r7,r8
80002eba:	c2 20       	breq	80002efe <set_trx_state+0x66>
80002ebc:	30 38       	mov	r8,3
80002ebe:	f0 07 18 00 	cp.b	r7,r8
80002ec2:	c7 d1       	brne	80002fbc <set_trx_state+0x124>
	case CMD_FORCE_TRX_OFF:
		/* Handling FORCE_TRX_OFF state */
		switch (tal_trx_status) {
80002ec4:	30 88       	mov	r8,8
80002ec6:	f0 0c 18 00 	cp.b	r12,r8
80002eca:	c7 90       	breq	80002fbc <set_trx_state+0x124>
		case TRX_OFF:
			/* Do nothing - maintain the previous state */
			break;

		default:
			pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
80002ecc:	30 3b       	mov	r11,3
80002ece:	30 2c       	mov	r12,2
80002ed0:	f0 1f 00 45 	mcall	80002fe4 <set_trx_state+0x14c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ed4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ed8:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002edc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ee0:	14 38       	cp.w	r8,r10
80002ee2:	e0 88 00 08 	brls	80002ef2 <set_trx_state+0x5a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ee6:	12 38       	cp.w	r8,r9
80002ee8:	fe 98 ff fa 	brls	80002edc <set_trx_state+0x44>
80002eec:	12 3a       	cp.w	r10,r9
80002eee:	c6 73       	brcs	80002fbc <set_trx_state+0x124>
80002ef0:	cf 6b       	rjmp	80002edc <set_trx_state+0x44>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ef2:	12 38       	cp.w	r8,r9
80002ef4:	e0 8b 00 64 	brhi	80002fbc <set_trx_state+0x124>
80002ef8:	12 3a       	cp.w	r10,r9
80002efa:	c6 13       	brcs	80002fbc <set_trx_state+0x124>
80002efc:	cf 0b       	rjmp	80002edc <set_trx_state+0x44>
		}
		break;

	case CMD_PLL_ON:
		/* Handling PLL_ON state */
		switch (tal_trx_status) {
80002efe:	30 68       	mov	r8,6
80002f00:	f0 0c 18 00 	cp.b	r12,r8
80002f04:	c0 80       	breq	80002f14 <set_trx_state+0x7c>
80002f06:	30 88       	mov	r8,8
80002f08:	f0 0c 18 00 	cp.b	r12,r8
80002f0c:	c5 81       	brne	80002fbc <set_trx_state+0x124>
		case PLL_ON:
			/* Do nothing - maintain the previous state */
			break;

		case TRX_OFF:
			switch_pll_on();
80002f0e:	f0 1f 00 37 	mcall	80002fe8 <set_trx_state+0x150>
			break;
80002f12:	c5 58       	rjmp	80002fbc <set_trx_state+0x124>

		case RX_ON:
			pal_trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
80002f14:	30 9b       	mov	r11,9
80002f16:	30 2c       	mov	r12,2
80002f18:	f0 1f 00 33 	mcall	80002fe4 <set_trx_state+0x14c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f1c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f20:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f24:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f28:	14 38       	cp.w	r8,r10
80002f2a:	e0 88 00 08 	brls	80002f3a <set_trx_state+0xa2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f2e:	12 38       	cp.w	r8,r9
80002f30:	fe 98 ff fa 	brls	80002f24 <set_trx_state+0x8c>
80002f34:	12 3a       	cp.w	r10,r9
80002f36:	c4 33       	brcs	80002fbc <set_trx_state+0x124>
80002f38:	cf 6b       	rjmp	80002f24 <set_trx_state+0x8c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f3a:	12 38       	cp.w	r8,r9
80002f3c:	e0 8b 00 40 	brhi	80002fbc <set_trx_state+0x124>
80002f40:	12 3a       	cp.w	r10,r9
80002f42:	c3 d3       	brcs	80002fbc <set_trx_state+0x124>
80002f44:	cf 0b       	rjmp	80002f24 <set_trx_state+0x8c>
		}
		break;

	case CMD_RX_ON:
		/* Handling the RX_ON state */
		switch (tal_trx_status) {
80002f46:	30 88       	mov	r8,8
80002f48:	f0 0c 18 00 	cp.b	r12,r8
80002f4c:	c1 e0       	breq	80002f88 <set_trx_state+0xf0>
80002f4e:	30 98       	mov	r8,9
80002f50:	f0 0c 18 00 	cp.b	r12,r8
80002f54:	c3 41       	brne	80002fbc <set_trx_state+0x124>
		case RX_ON:
			/* Do nothing - maintain the previous state */
			break;

		case PLL_ON:
			pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
80002f56:	30 6b       	mov	r11,6
80002f58:	30 2c       	mov	r12,2
80002f5a:	f0 1f 00 23 	mcall	80002fe4 <set_trx_state+0x14c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f5e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f62:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f66:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f6a:	14 38       	cp.w	r8,r10
80002f6c:	e0 88 00 08 	brls	80002f7c <set_trx_state+0xe4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f70:	12 38       	cp.w	r8,r9
80002f72:	fe 98 ff fa 	brls	80002f66 <set_trx_state+0xce>
80002f76:	12 3a       	cp.w	r10,r9
80002f78:	c2 23       	brcs	80002fbc <set_trx_state+0x124>
80002f7a:	cf 6b       	rjmp	80002f66 <set_trx_state+0xce>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f7c:	12 38       	cp.w	r8,r9
80002f7e:	e0 8b 00 1f 	brhi	80002fbc <set_trx_state+0x124>
80002f82:	12 3a       	cp.w	r10,r9
80002f84:	c1 c3       	brcs	80002fbc <set_trx_state+0x124>
80002f86:	cf 0b       	rjmp	80002f66 <set_trx_state+0xce>
			PAL_WAIT_1_US();
			break;

		case TRX_OFF:
			switch_pll_on();
80002f88:	f0 1f 00 18 	mcall	80002fe8 <set_trx_state+0x150>
			pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
80002f8c:	30 6b       	mov	r11,6
80002f8e:	30 2c       	mov	r12,2
80002f90:	f0 1f 00 15 	mcall	80002fe4 <set_trx_state+0x14c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f94:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f98:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f9c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002fa0:	14 38       	cp.w	r8,r10
80002fa2:	e0 88 00 08 	brls	80002fb2 <set_trx_state+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002fa6:	12 38       	cp.w	r8,r9
80002fa8:	fe 98 ff fa 	brls	80002f9c <set_trx_state+0x104>
80002fac:	12 3a       	cp.w	r10,r9
80002fae:	c0 73       	brcs	80002fbc <set_trx_state+0x124>
80002fb0:	cf 6b       	rjmp	80002f9c <set_trx_state+0x104>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002fb2:	12 38       	cp.w	r8,r9
80002fb4:	e0 8b 00 04 	brhi	80002fbc <set_trx_state+0x124>
80002fb8:	12 3a       	cp.w	r10,r9
80002fba:	cf 12       	brcc	80002f9c <set_trx_state+0x104>
		break;
	}

	/* Hold till the state transition is complete */
	do {
		tal_trx_status = (tal_trx_status_t)
80002fbc:	30 06       	mov	r6,0
80002fbe:	31 f5       	mov	r5,31
80002fc0:	30 14       	mov	r4,1
80002fc2:	48 83       	lddpc	r3,80002fe0 <set_trx_state+0x148>
				pal_trx_bit_read(SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
80002fc4:	31 f7       	mov	r7,31
		break;
	}

	/* Hold till the state transition is complete */
	do {
		tal_trx_status = (tal_trx_status_t)
80002fc6:	0c 9a       	mov	r10,r6
80002fc8:	0a 9b       	mov	r11,r5
80002fca:	08 9c       	mov	r12,r4
80002fcc:	f0 1f 00 04 	mcall	80002fdc <set_trx_state+0x144>
80002fd0:	a6 8c       	st.b	r3[0x0],r12
				pal_trx_bit_read(SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
80002fd2:	ee 0c 18 00 	cp.b	r12,r7
80002fd6:	cf 80       	breq	80002fc6 <set_trx_state+0x12e>

	return tal_trx_status;
}
80002fd8:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	31 a8       	mov	r8,26
80002fe0:	00 00       	add	r0,r0
80002fe2:	06 35       	cp.w	r5,r3
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	30 c8       	mov	r8,12
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	2e 20       	sub	r0,-30

80002fec <tx_frame_config>:
	 */
	set_trx_state(CMD_RX_ON);
}

void tx_frame_config(void)
{
80002fec:	eb cd 40 c0 	pushm	r6-r7,lr
	tal_trx_status_t trx_status;

	/* Set trx to PLL_ON state to initiate transmission procedure */
	do {
		trx_status = set_trx_state(CMD_PLL_ON);
80002ff0:	30 96       	mov	r6,9
	} while (trx_status != PLL_ON);
80002ff2:	30 97       	mov	r7,9
{
	tal_trx_status_t trx_status;

	/* Set trx to PLL_ON state to initiate transmission procedure */
	do {
		trx_status = set_trx_state(CMD_PLL_ON);
80002ff4:	0c 9c       	mov	r12,r6
80002ff6:	f0 1f 00 0a 	mcall	8000301c <tx_frame_config+0x30>
	} while (trx_status != PLL_ON);
80002ffa:	ee 0c 18 00 	cp.b	r12,r7
80002ffe:	cf b1       	brne	80002ff4 <tx_frame_config+0x8>

	tal_state = TAL_TX_AUTO;
80003000:	30 19       	mov	r9,1
80003002:	48 88       	lddpc	r8,80003020 <tx_frame_config+0x34>
80003004:	b0 89       	st.b	r8[0x0],r9

	/* Toggle the SLP_TR pin triggering transmission. */
	SLP_TR_HIGH();
80003006:	31 3c       	mov	r12,19
80003008:	f0 1f 00 07 	mcall	80003024 <tx_frame_config+0x38>
	WAIT_65_NS();
8000300c:	d7 03       	nop
8000300e:	d7 03       	nop
	SLP_TR_LOW();
80003010:	31 3c       	mov	r12,19
80003012:	f0 1f 00 06 	mcall	80003028 <tx_frame_config+0x3c>
}
80003016:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000301a:	00 00       	add	r0,r0
8000301c:	80 00       	ld.sh	r0,r0[0x0]
8000301e:	2e 98       	sub	r8,-23
80003020:	00 00       	add	r0,r0
80003022:	06 34       	cp.w	r4,r3
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	26 78       	sub	r8,103
80003028:	80 00       	ld.sh	r0,r0[0x0]
8000302a:	26 8e       	sub	lr,104

8000302c <pal_trx_frame_write>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_write(uint8_t * data, uint8_t length)
{
8000302c:	eb cd 40 78 	pushm	r3-r6,lr
80003030:	20 1d       	sub	sp,4
80003032:	18 94       	mov	r4,r12
80003034:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80003036:	e1 b3 00 00 	mfsr	r3,0x0
8000303a:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
8000303c:	49 16       	lddpc	r6,80003080 <pal_trx_frame_write+0x54>
8000303e:	0d 8b       	ld.ub	r11,r6[0x0]
80003040:	fe 7c 40 00 	mov	r12,-49152
80003044:	f0 1f 00 10 	mcall	80003084 <pal_trx_frame_write+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FW;
80003048:	fa cb ff fc 	sub	r11,sp,-4
8000304c:	36 08       	mov	r8,96
8000304e:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80003050:	30 1a       	mov	r10,1
80003052:	fe 7c 40 00 	mov	r12,-49152
80003056:	f0 1f 00 0d 	mcall	80003088 <pal_trx_frame_write+0x5c>

	spi_write_packet(AT86RFX_SPI, data, length);
8000305a:	0a 9a       	mov	r10,r5
8000305c:	08 9b       	mov	r11,r4
8000305e:	fe 7c 40 00 	mov	r12,-49152
80003062:	f0 1f 00 0a 	mcall	80003088 <pal_trx_frame_write+0x5c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003066:	0d 8b       	ld.ub	r11,r6[0x0]
80003068:	fe 7c 40 00 	mov	r12,-49152
8000306c:	f0 1f 00 08 	mcall	8000308c <pal_trx_frame_write+0x60>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003070:	e6 13 00 01 	andh	r3,0x1,COH
80003074:	c0 21       	brne	80003078 <pal_trx_frame_write+0x4c>
80003076:	d5 03       	csrf	0x10
}
80003078:	2f fd       	sub	sp,-4
8000307a:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
8000307e:	00 00       	add	r0,r0
80003080:	00 00       	add	r0,r0
80003082:	00 08       	add	r8,r0
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	28 c4       	sub	r4,-116
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	32 66       	mov	r6,38
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	29 10       	sub	r0,-111

80003090 <at86rfx_tx_frame>:
	gpio_configure_pin(TRX_RST, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	gpio_configure_pin(SLP_TR, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
}

void at86rfx_tx_frame(uint8_t * frame_tx)
{
80003090:	eb cd 40 80 	pushm	r7,lr
80003094:	18 97       	mov	r7,r12
	DISABLE_TRX_IRQ();
80003096:	31 4c       	mov	r12,20
80003098:	f0 1f 00 08 	mcall	800030b8 <at86rfx_tx_frame+0x28>

	tx_frame_config();
8000309c:	f0 1f 00 08 	mcall	800030bc <at86rfx_tx_frame+0x2c>
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS. Shall be added automatically
	 */
	pal_trx_frame_write(frame_tx, frame_tx[0] - LENGTH_FIELD_LEN);
800030a0:	0f 8b       	ld.ub	r11,r7[0x0]
800030a2:	20 1b       	sub	r11,1
800030a4:	5c 5b       	castu.b	r11
800030a6:	0e 9c       	mov	r12,r7
800030a8:	f0 1f 00 06 	mcall	800030c0 <at86rfx_tx_frame+0x30>

	ENABLE_TRX_IRQ();
800030ac:	30 1b       	mov	r11,1
800030ae:	31 4c       	mov	r12,20
800030b0:	f0 1f 00 05 	mcall	800030c4 <at86rfx_tx_frame+0x34>
}
800030b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800030b8:	80 00       	ld.sh	r0,r0[0x0]
800030ba:	27 30       	sub	r0,115
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	2f ec       	sub	r12,-2
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	30 2c       	mov	r12,2
800030c4:	80 00       	ld.sh	r0,r0[0x0]
800030c6:	27 00       	sub	r0,112

800030c8 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
800030c8:	eb cd 40 c0 	pushm	r6-r7,lr
800030cc:	20 2d       	sub	sp,8
800030ce:	ba cc       	st.b	sp[0x4],r12
800030d0:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
800030d2:	e1 b6 00 00 	mfsr	r6,0x0
800030d6:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
800030d8:	1b c8       	ld.ub	r8,sp[0x4]
800030da:	ea 18 ff ff 	orh	r8,0xffff
800030de:	e8 18 ff c0 	orl	r8,0xffc0
800030e2:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
800030e4:	49 07       	lddpc	r7,80003124 <pal_trx_reg_write+0x5c>
800030e6:	0f 8b       	ld.ub	r11,r7[0x0]
800030e8:	fe 7c 40 00 	mov	r12,-49152
800030ec:	f0 1f 00 0f 	mcall	80003128 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
800030f0:	30 1a       	mov	r10,1
800030f2:	fa cb ff fc 	sub	r11,sp,-4
800030f6:	fe 7c 40 00 	mov	r12,-49152
800030fa:	f0 1f 00 0d 	mcall	8000312c <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
800030fe:	30 1a       	mov	r10,1
80003100:	1a 9b       	mov	r11,sp
80003102:	fe 7c 40 00 	mov	r12,-49152
80003106:	f0 1f 00 0a 	mcall	8000312c <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
8000310a:	0f 8b       	ld.ub	r11,r7[0x0]
8000310c:	fe 7c 40 00 	mov	r12,-49152
80003110:	f0 1f 00 08 	mcall	80003130 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003114:	e6 16 00 01 	andh	r6,0x1,COH
80003118:	c0 21       	brne	8000311c <pal_trx_reg_write+0x54>
8000311a:	d5 03       	csrf	0x10
}
8000311c:	2f ed       	sub	sp,-8
8000311e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003122:	00 00       	add	r0,r0
80003124:	00 00       	add	r0,r0
80003126:	00 08       	add	r8,r0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	28 c4       	sub	r4,-116
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	32 66       	mov	r6,38
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	29 10       	sub	r0,-111

80003134 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80003134:	eb cd 40 c0 	pushm	r6-r7,lr
80003138:	20 2d       	sub	sp,8
8000313a:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
8000313c:	30 08       	mov	r8,0
8000313e:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80003140:	e1 b6 00 00 	mfsr	r6,0x0
80003144:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80003146:	1b 88       	ld.ub	r8,sp[0x0]
80003148:	ea 18 ff ff 	orh	r8,0xffff
8000314c:	e8 18 ff 80 	orl	r8,0xff80
80003150:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80003152:	49 17       	lddpc	r7,80003194 <pal_trx_reg_read+0x60>
80003154:	0f 8b       	ld.ub	r11,r7[0x0]
80003156:	fe 7c 40 00 	mov	r12,-49152
8000315a:	f0 1f 00 10 	mcall	80003198 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
8000315e:	30 1a       	mov	r10,1
80003160:	1a 9b       	mov	r11,sp
80003162:	fe 7c 40 00 	mov	r12,-49152
80003166:	f0 1f 00 0e 	mcall	8000319c <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
8000316a:	30 1a       	mov	r10,1
8000316c:	fa cb ff f9 	sub	r11,sp,-7
80003170:	fe 7c 40 00 	mov	r12,-49152
80003174:	f0 1f 00 0b 	mcall	800031a0 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80003178:	0f 8b       	ld.ub	r11,r7[0x0]
8000317a:	fe 7c 40 00 	mov	r12,-49152
8000317e:	f0 1f 00 0a 	mcall	800031a4 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80003182:	e6 16 00 01 	andh	r6,0x1,COH
80003186:	c0 21       	brne	8000318a <pal_trx_reg_read+0x56>
80003188:	d5 03       	csrf	0x10

	return register_value;
}
8000318a:	1b fc       	ld.ub	r12,sp[0x7]
8000318c:	2f ed       	sub	sp,-8
8000318e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003192:	00 00       	add	r0,r0
80003194:	00 00       	add	r0,r0
80003196:	00 08       	add	r8,r0
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	28 c4       	sub	r4,-116
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	32 66       	mov	r6,38
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	32 16       	mov	r6,33
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	29 10       	sub	r0,-111

800031a8 <pal_trx_bit_read>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

uint8_t pal_trx_bit_read(uint8_t addr, uint8_t mask, uint8_t pos)
{
800031a8:	eb cd 40 c0 	pushm	r6-r7,lr
800031ac:	16 96       	mov	r6,r11
800031ae:	14 97       	mov	r7,r10
	uint8_t ret;
	ret = pal_trx_reg_read(addr);
800031b0:	f0 1f 00 06 	mcall	800031c8 <pal_trx_bit_read+0x20>
	ret &= mask;
	ret >>= pos;
800031b4:	f9 e6 00 06 	and	r6,r12,r6
800031b8:	5c 56       	castu.b	r6
800031ba:	ec 07 08 46 	asr	r6,r6,r7
800031be:	0c 97       	mov	r7,r6
	return ret;
}
800031c0:	f9 d6 c0 08 	bfextu	r12,r6,0x0,0x8
800031c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	31 34       	mov	r4,19

800031cc <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800031cc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800031d0:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800031d2:	e6 18 00 01 	andh	r8,0x1,COH
800031d6:	c0 21       	brne	800031da <sysclk_init+0xe>
      cpu_irq_enable();
800031d8:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800031da:	5e fc       	retal	r12

800031dc <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
800031dc:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800031de:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800031e2:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800031e4:	a3 6c       	lsl	r12,0x2
800031e6:	fe 7a 14 20 	mov	r10,-60384
800031ea:	f8 0a 00 08 	add	r8,r12,r10
800031ee:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
800031f0:	30 1e       	mov	lr,1
800031f2:	fc 0b 09 4b 	lsl	r11,lr,r11
800031f6:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
800031f8:	32 0a       	mov	r10,32
800031fa:	ea 1a aa 00 	orh	r10,0xaa00
800031fe:	14 0c       	add	r12,r10
80003200:	fe 7a 14 00 	mov	r10,-60416
80003204:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003208:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000320a:	12 98       	mov	r8,r9
8000320c:	e6 18 00 01 	andh	r8,0x1,COH
80003210:	c0 21       	brne	80003214 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80003212:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80003214:	d8 02       	popm	pc

80003216 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80003216:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
8000321a:	58 0a       	cp.w	r10,0
8000321c:	c0 61       	brne	80003228 <spi_read_packet+0x12>
8000321e:	c2 28       	rjmp	80003262 <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80003220:	58 08       	cp.w	r8,0
80003222:	c1 d0       	breq	8000325c <spi_read_packet+0x46>
80003224:	20 18       	sub	r8,1
80003226:	c0 68       	rjmp	80003232 <spi_read_packet+0x1c>
80003228:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000322c:	e0 67 00 ff 	mov	r7,255
80003230:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80003232:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80003234:	e2 19 00 02 	andl	r9,0x2,COH
80003238:	cf 40       	breq	80003220 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000323a:	99 37       	st.w	r12[0xc],r7
8000323c:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
8000323e:	c0 48       	rjmp	80003246 <spi_read_packet+0x30>
			if (!timeout--) {
80003240:	58 08       	cp.w	r8,0
80003242:	c0 d0       	breq	8000325c <spi_read_packet+0x46>
80003244:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80003246:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80003248:	e2 19 02 01 	andl	r9,0x201,COH
8000324c:	e0 49 02 01 	cp.w	r9,513
80003250:	cf 81       	brne	80003240 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80003252:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80003254:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80003256:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80003258:	ce c1       	brne	80003230 <spi_read_packet+0x1a>
8000325a:	c0 48       	rjmp	80003262 <spi_read_packet+0x4c>
8000325c:	3f dc       	mov	r12,-3
8000325e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003262:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003266 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80003266:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80003268:	58 0a       	cp.w	r10,0
8000326a:	c0 81       	brne	8000327a <spi_write_packet+0x14>
8000326c:	c1 28       	rjmp	80003290 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
8000326e:	58 08       	cp.w	r8,0
80003270:	c0 31       	brne	80003276 <spi_write_packet+0x10>
80003272:	3f dc       	mov	r12,-3
80003274:	d8 02       	popm	pc
80003276:	20 18       	sub	r8,1
80003278:	c0 48       	rjmp	80003280 <spi_write_packet+0x1a>
8000327a:	e0 6e 3a 98 	mov	lr,15000
8000327e:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80003280:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80003282:	e2 19 00 02 	andl	r9,0x2,COH
80003286:	cf 40       	breq	8000326e <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003288:	17 38       	ld.ub	r8,r11++
8000328a:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
8000328c:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
8000328e:	cf 81       	brne	8000327e <spi_write_packet+0x18>
80003290:	d8 0a       	popm	pc,r12=0
80003292:	d7 03       	nop
	...

800032a0 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
800032a0:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800032a2:	30 0b       	mov	r11,0
800032a4:	fe 7c 5c 00 	mov	r12,-41984
800032a8:	f0 1f 00 17 	mcall	80003304 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
800032ac:	49 78       	lddpc	r8,80003308 <tc_irq+0x68>
800032ae:	70 09       	ld.w	r9,r8[0x0]
800032b0:	2f f9       	sub	r9,-1
800032b2:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
800032b4:	70 08       	ld.w	r8,r8[0x0]
800032b6:	59 38       	cp.w	r8,19
800032b8:	e0 8b 00 0c 	brhi	800032d0 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
800032bc:	32 9c       	mov	r12,41
800032be:	f0 1f 00 14 	mcall	8000330c <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
800032c2:	30 4c       	mov	r12,4
800032c4:	f0 1f 00 12 	mcall	8000330c <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
800032c8:	30 bc       	mov	r12,11
800032ca:	f0 1f 00 11 	mcall	8000330c <tc_irq+0x6c>
		return;
800032ce:	c1 98       	rjmp	80003300 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
800032d0:	48 e8       	lddpc	r8,80003308 <tc_irq+0x68>
800032d2:	70 08       	ld.w	r8,r8[0x0]
800032d4:	59 58       	cp.w	r8,21
800032d6:	c0 41       	brne	800032de <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
800032d8:	32 9c       	mov	r12,41
800032da:	f0 1f 00 0d 	mcall	8000330c <tc_irq+0x6c>
		
	if (tc_tick == 22)
800032de:	48 b8       	lddpc	r8,80003308 <tc_irq+0x68>
800032e0:	70 08       	ld.w	r8,r8[0x0]
800032e2:	59 68       	cp.w	r8,22
800032e4:	c0 41       	brne	800032ec <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
800032e6:	30 4c       	mov	r12,4
800032e8:	f0 1f 00 09 	mcall	8000330c <tc_irq+0x6c>
	
	if (tc_tick == 23)
800032ec:	48 78       	lddpc	r8,80003308 <tc_irq+0x68>
800032ee:	70 08       	ld.w	r8,r8[0x0]
800032f0:	59 78       	cp.w	r8,23
800032f2:	c0 71       	brne	80003300 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
800032f4:	30 bc       	mov	r12,11
800032f6:	f0 1f 00 06 	mcall	8000330c <tc_irq+0x6c>
		tc_tick = 1;
800032fa:	30 19       	mov	r9,1
800032fc:	48 38       	lddpc	r8,80003308 <tc_irq+0x68>
800032fe:	91 09       	st.w	r8[0x0],r9
		

	
	
	
}
80003300:	d4 02       	popm	lr
80003302:	d6 03       	rete
80003304:	80 00       	ld.sh	r0,r0[0x0]
80003306:	2a b6       	sub	r6,-85
80003308:	00 00       	add	r0,r0
8000330a:	00 10       	sub	r0,r0
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	26 a4       	sub	r4,106

80003310 <eic_int_handler2>:
__interrupt
#endif

// Manejo INTERRUPCION externa 2 (RF)
static void eic_int_handler2(void)
{
80003310:	d4 01       	pushm	lr
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
80003312:	30 2b       	mov	r11,2
80003314:	fe 7c 24 00 	mov	r12,-56320
80003318:	f0 1f 00 02 	mcall	80003320 <eic_int_handler2+0x10>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		
}
8000331c:	d4 02       	popm	lr
8000331e:	d6 03       	rete
80003320:	80 00       	ld.sh	r0,r0[0x0]
80003322:	24 e0       	sub	r0,78

80003324 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80003324:	d4 01       	pushm	lr
80003326:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80003328:	30 0b       	mov	r11,0
8000332a:	49 38       	lddpc	r8,80003374 <usart_int_handler_RS232+0x50>
8000332c:	70 0c       	ld.w	r12,r8[0x0]
8000332e:	f0 1f 00 13 	mcall	80003378 <usart_int_handler_RS232+0x54>
	
	int c=0;
80003332:	fa cb ff fc 	sub	r11,sp,-4
80003336:	30 08       	mov	r8,0
80003338:	16 d8       	st.w	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
8000333a:	1a 9b       	mov	r11,sp
8000333c:	fe 7c 38 00 	mov	r12,-51200
80003340:	f0 1f 00 0f 	mcall	8000337c <usart_int_handler_RS232+0x58>
80003344:	c1 51       	brne	8000336e <usart_int_handler_RS232+0x4a>
		return;

	
		cola_PC[cola_PC_nw] = (char) c;
80003346:	48 f9       	lddpc	r9,80003380 <usart_int_handler_RS232+0x5c>
80003348:	72 08       	ld.w	r8,r9[0x0]
8000334a:	40 0b       	lddsp	r11,sp[0x0]
8000334c:	48 ea       	lddpc	r10,80003384 <usart_int_handler_RS232+0x60>
8000334e:	f4 08 0b 0b 	st.b	r10[r8],r11
		cola_PC_nw++;	
80003352:	2f f8       	sub	r8,-1
80003354:	93 08       	st.w	r9[0x0],r8
	
		if (cola_PC_nw >= tamano_cola)
80003356:	e0 48 00 c7 	cp.w	r8,199
8000335a:	e0 8a 00 05 	brle	80003364 <usart_int_handler_RS232+0x40>
			cola_PC_nw = 0;
8000335e:	30 09       	mov	r9,0
80003360:	48 88       	lddpc	r8,80003380 <usart_int_handler_RS232+0x5c>
80003362:	91 09       	st.w	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003364:	30 0b       	mov	r11,0
80003366:	48 48       	lddpc	r8,80003374 <usart_int_handler_RS232+0x50>
80003368:	70 0c       	ld.w	r12,r8[0x0]
8000336a:	f0 1f 00 08 	mcall	80003388 <usart_int_handler_RS232+0x64>
	return;

	
}
8000336e:	2f fd       	sub	sp,-4
80003370:	d4 02       	popm	lr
80003372:	d6 03       	rete
80003374:	00 00       	add	r0,r0
80003376:	00 14       	sub	r4,r0
80003378:	80 00       	ld.sh	r0,r0[0x0]
8000337a:	2a a4       	sub	r4,-86
8000337c:	80 00       	ld.sh	r0,r0[0x0]
8000337e:	2c a0       	sub	r0,-54
80003380:	00 00       	add	r0,r0
80003382:	07 04       	ld.w	r4,r3++
80003384:	00 00       	add	r0,r0
80003386:	07 40       	ld.w	r0,--r3
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	2a 92       	sub	r2,-87

8000338c <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
8000338c:	eb cd 40 80 	pushm	r7,lr
80003390:	20 6d       	sub	sp,24
80003392:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80003394:	30 08       	mov	r8,0
80003396:	ba 98       	st.b	sp[0x1],r8
80003398:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
8000339a:	34 89       	mov	r9,72
8000339c:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
8000339e:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
800033a0:	30 29       	mov	r9,2
800033a2:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
800033a4:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
800033a8:	30 18       	mov	r8,1
800033aa:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
800033ae:	fa cb ff fc 	sub	r11,sp,-4
800033b2:	fe 7c 44 00 	mov	r12,-48128
800033b6:	f0 1f 00 39 	mcall	80003498 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
800033ba:	c6 61       	brne	80003486 <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
800033bc:	1b 89       	ld.ub	r9,sp[0x0]
800033be:	1b 98       	ld.ub	r8,sp[0x1]
800033c0:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800033c4:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
800033c6:	30 09       	mov	r9,0
800033c8:	f2 08 19 00 	cp.h	r8,r9
800033cc:	c0 35       	brlt	800033d2 <leer_temp+0x46>
800033ce:	30 1b       	mov	r11,1
800033d0:	c0 58       	rjmp	800033da <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
800033d2:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800033d6:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
800033da:	4b 19       	lddpc	r9,8000349c <leer_temp+0x110>
800033dc:	13 89       	ld.ub	r9,r9[0x0]
800033de:	30 1a       	mov	r10,1
800033e0:	f4 09 18 00 	cp.b	r9,r10
800033e4:	c1 c0       	breq	8000341c <leer_temp+0x90>
800033e6:	58 09       	cp.w	r9,0
800033e8:	c0 b0       	breq	800033fe <leer_temp+0x72>
800033ea:	30 2a       	mov	r10,2
800033ec:	f4 09 18 00 	cp.b	r9,r10
800033f0:	c2 50       	breq	8000343a <leer_temp+0xae>
800033f2:	30 3a       	mov	r10,3
800033f4:	f4 09 18 00 	cp.b	r9,r10
800033f8:	c3 00       	breq	80003458 <leer_temp+0xcc>
800033fa:	30 0c       	mov	r12,0
800033fc:	c3 c8       	rjmp	80003474 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
800033fe:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
80003402:	5c 6b       	casts.b	r11
80003404:	f0 0b 02 4c 	mul	r12,r8,r11
80003408:	f0 1f 00 26 	mcall	800034a0 <leer_temp+0x114>
8000340c:	30 08       	mov	r8,0
8000340e:	fc 19 3f e0 	movh	r9,0x3fe0
80003412:	f0 1f 00 25 	mcall	800034a4 <leer_temp+0x118>
80003416:	f0 1f 00 25 	mcall	800034a8 <leer_temp+0x11c>
			break;
8000341a:	c2 d8       	rjmp	80003474 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
8000341c:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
80003420:	5c 6b       	casts.b	r11
80003422:	f0 0b 02 4c 	mul	r12,r8,r11
80003426:	f0 1f 00 1f 	mcall	800034a0 <leer_temp+0x114>
8000342a:	30 08       	mov	r8,0
8000342c:	fc 19 3f d0 	movh	r9,0x3fd0
80003430:	f0 1f 00 1d 	mcall	800034a4 <leer_temp+0x118>
80003434:	f0 1f 00 1d 	mcall	800034a8 <leer_temp+0x11c>
			break;
80003438:	c1 e8       	rjmp	80003474 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
8000343a:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
8000343e:	5c 6b       	casts.b	r11
80003440:	f0 0b 02 4c 	mul	r12,r8,r11
80003444:	f0 1f 00 17 	mcall	800034a0 <leer_temp+0x114>
80003448:	30 08       	mov	r8,0
8000344a:	fc 19 3f c0 	movh	r9,0x3fc0
8000344e:	f0 1f 00 16 	mcall	800034a4 <leer_temp+0x118>
80003452:	f0 1f 00 16 	mcall	800034a8 <leer_temp+0x11c>
			break;
80003456:	c0 f8       	rjmp	80003474 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
80003458:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
8000345c:	5c 6b       	casts.b	r11
8000345e:	f0 0b 02 4c 	mul	r12,r8,r11
80003462:	f0 1f 00 10 	mcall	800034a0 <leer_temp+0x114>
80003466:	30 08       	mov	r8,0
80003468:	fc 19 3f b0 	movh	r9,0x3fb0
8000346c:	f0 1f 00 0e 	mcall	800034a4 <leer_temp+0x118>
80003470:	f0 1f 00 0e 	mcall	800034a8 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
80003474:	f0 1f 00 0e 	mcall	800034ac <leer_temp+0x120>
80003478:	bb 2b       	st.d	--sp,r10
8000347a:	48 eb       	lddpc	r11,800034b0 <leer_temp+0x124>
8000347c:	0e 9c       	mov	r12,r7
8000347e:	f0 1f 00 0e 	mcall	800034b4 <leer_temp+0x128>
80003482:	2f ed       	sub	sp,-8
80003484:	c0 68       	rjmp	80003490 <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
80003486:	30 2a       	mov	r10,2
80003488:	48 cb       	lddpc	r11,800034b8 <leer_temp+0x12c>
8000348a:	0e 9c       	mov	r12,r7
8000348c:	f0 1f 00 0c 	mcall	800034bc <leer_temp+0x130>
}
80003490:	2f ad       	sub	sp,-24
80003492:	e3 cd 80 80 	ldm	sp++,r7,pc
80003496:	00 00       	add	r0,r0
80003498:	80 00       	ld.sh	r0,r0[0x0]
8000349a:	22 34       	sub	r4,35
8000349c:	00 00       	add	r0,r0
8000349e:	00 24       	rsub	r4,r0
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	3a d4       	mov	r4,-83
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	38 f8       	mov	r8,-113
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	3c 14       	mov	r4,-63
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	3b b4       	mov	r4,-69
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	97 50       	st.w	r11[0x14],r0
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	3d f4       	mov	r4,-33
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	97 58       	st.w	r11[0x14],r8
800034bc:	80 00       	ld.sh	r0,r0[0x0]
800034be:	3c 9e       	mov	lr,-55

800034c0 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800034c0:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800034c2:	18 9b       	mov	r11,r12
800034c4:	30 2c       	mov	r12,2
800034c6:	f0 1f 00 02 	mcall	800034cc <sysclk_enable_pba_module+0xc>
}
800034ca:	d8 02       	popm	pc
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	31 dc       	mov	r12,29

800034d0 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800034d0:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800034d2:	30 bc       	mov	r12,11
800034d4:	f0 1f 00 05 	mcall	800034e8 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
800034d8:	e0 7a c1 38 	mov	r10,115000
800034dc:	48 4b       	lddpc	r11,800034ec <rs_232_init_usart+0x1c>
800034de:	fe 7c 38 00 	mov	r12,-51200
800034e2:	f0 1f 00 04 	mcall	800034f0 <rs_232_init_usart+0x20>
	return estado_usart2;
}
800034e6:	d8 02       	popm	pc
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	34 c0       	mov	r0,76
800034ec:	00 00       	add	r0,r0
800034ee:	00 18       	sub	r8,r0
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	2d 14       	sub	r4,-47

800034f4 <rs_232_init_pins>:
// 	

}

void rs_232_init_pins(void)
{
800034f4:	d4 01       	pushm	lr
800034f6:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
800034f8:	48 88       	lddpc	r8,80003518 <rs_232_init_pins+0x24>
800034fa:	1a 9c       	mov	r12,sp
800034fc:	70 09       	ld.w	r9,r8[0x0]
800034fe:	50 09       	stdsp	sp[0x0],r9
80003500:	70 19       	ld.w	r9,r8[0x4]
80003502:	50 19       	stdsp	sp[0x4],r9
80003504:	70 29       	ld.w	r9,r8[0x8]
80003506:	50 29       	stdsp	sp[0x8],r9
80003508:	70 38       	ld.w	r8,r8[0xc]
8000350a:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
8000350c:	30 2b       	mov	r11,2
8000350e:	f0 1f 00 04 	mcall	8000351c <rs_232_init_pins+0x28>
}
80003512:	2f cd       	sub	sp,-16
80003514:	d8 02       	popm	pc
80003516:	00 00       	add	r0,r0
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	97 f8       	st.w	r11[0x3c],r8
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	25 90       	sub	r0,89

80003520 <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
80003520:	d4 01       	pushm	lr
80003522:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003524:	48 88       	lddpc	r8,80003544 <init_i2c_pins+0x24>
80003526:	1a 9c       	mov	r12,sp
80003528:	70 09       	ld.w	r9,r8[0x0]
8000352a:	50 09       	stdsp	sp[0x0],r9
8000352c:	70 19       	ld.w	r9,r8[0x4]
8000352e:	50 19       	stdsp	sp[0x4],r9
80003530:	70 29       	ld.w	r9,r8[0x8]
80003532:	50 29       	stdsp	sp[0x8],r9
80003534:	70 38       	ld.w	r8,r8[0xc]
80003536:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003538:	30 2b       	mov	r11,2
8000353a:	f0 1f 00 04 	mcall	80003548 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000353e:	2f cd       	sub	sp,-16
80003540:	d8 02       	popm	pc
80003542:	00 00       	add	r0,r0
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	98 08       	ld.sh	r8,r12[0x0]
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	25 90       	sub	r0,89

8000354c <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
8000354c:	d4 01       	pushm	lr
8000354e:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
80003550:	48 d8       	lddpc	r8,80003584 <spi_init_pins+0x38>
80003552:	1a 9c       	mov	r12,sp
80003554:	70 09       	ld.w	r9,r8[0x0]
80003556:	50 09       	stdsp	sp[0x0],r9
80003558:	70 19       	ld.w	r9,r8[0x4]
8000355a:	50 19       	stdsp	sp[0x4],r9
8000355c:	70 29       	ld.w	r9,r8[0x8]
8000355e:	50 29       	stdsp	sp[0x8],r9
80003560:	70 39       	ld.w	r9,r8[0xc]
80003562:	50 39       	stdsp	sp[0xc],r9
80003564:	fa c9 ff f0 	sub	r9,sp,-16
80003568:	2f 08       	sub	r8,-16
8000356a:	70 0a       	ld.w	r10,r8[0x0]
8000356c:	93 0a       	st.w	r9[0x0],r10
8000356e:	70 1a       	ld.w	r10,r8[0x4]
80003570:	93 1a       	st.w	r9[0x4],r10
80003572:	70 2a       	ld.w	r10,r8[0x8]
80003574:	93 2a       	st.w	r9[0x8],r10
80003576:	70 38       	ld.w	r8,r8[0xc]
80003578:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
8000357a:	30 4b       	mov	r11,4
8000357c:	f0 1f 00 03 	mcall	80003588 <spi_init_pins+0x3c>
}
80003580:	2f 8d       	sub	sp,-32
80003582:	d8 02       	popm	pc
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	97 18       	st.w	r11[0x4],r8
80003588:	80 00       	ld.sh	r0,r0[0x0]
8000358a:	25 90       	sub	r0,89

8000358c <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
8000358c:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
8000358e:	30 5b       	mov	r11,5
80003590:	30 4c       	mov	r12,4
80003592:	f0 1f 00 06 	mcall	800035a8 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
80003596:	30 5b       	mov	r11,5
80003598:	30 bc       	mov	r12,11
8000359a:	f0 1f 00 04 	mcall	800035a8 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
8000359e:	30 5b       	mov	r11,5
800035a0:	32 9c       	mov	r12,41
800035a2:	f0 1f 00 02 	mcall	800035a8 <led_init_pins+0x1c>
}
800035a6:	d8 02       	popm	pc
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	25 c0       	sub	r0,92

800035ac <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
800035ac:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800035ae:	f0 1f 00 08 	mcall	800035cc <init_rf_pins+0x20>

	//PIN para interrupcion externa RF
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800035b2:	30 4b       	mov	r11,4
800035b4:	30 dc       	mov	r12,13
800035b6:	f0 1f 00 07 	mcall	800035d0 <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800035ba:	30 6b       	mov	r11,6
800035bc:	30 dc       	mov	r12,13
800035be:	f0 1f 00 06 	mcall	800035d4 <init_rf_pins+0x28>
	//gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
800035c2:	30 dc       	mov	r12,13
800035c4:	f0 1f 00 05 	mcall	800035d8 <init_rf_pins+0x2c>

// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
// 	

}
800035c8:	d8 02       	popm	pc
800035ca:	00 00       	add	r0,r0
800035cc:	80 00       	ld.sh	r0,r0[0x0]
800035ce:	35 4c       	mov	r12,84
800035d0:	80 00       	ld.sh	r0,r0[0x0]
800035d2:	25 c0       	sub	r0,92
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	24 fc       	sub	r12,79
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	27 46       	sub	r6,116

800035dc <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
800035dc:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800035de:	18 9b       	mov	r11,r12
800035e0:	fe 7c 38 00 	mov	r12,-51200
800035e4:	f0 1f 00 02 	mcall	800035ec <escribir_linea_pc+0x10>
}
800035e8:	d8 02       	popm	pc
800035ea:	00 00       	add	r0,r0
800035ec:	80 00       	ld.sh	r0,r0[0x0]
800035ee:	2c c4       	sub	r4,-52

800035f0 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
800035f0:	d4 01       	pushm	lr
800035f2:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800035f4:	30 eb       	mov	r11,14
800035f6:	30 2c       	mov	r12,2
800035f8:	f0 1f 00 0e 	mcall	80003630 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
800035fc:	e0 78 c1 38 	mov	r8,115000
80003600:	50 08       	stdsp	sp[0x0],r8
80003602:	e0 68 27 10 	mov	r8,10000
80003606:	50 18       	stdsp	sp[0x4],r8
80003608:	34 88       	mov	r8,72
8000360a:	50 28       	stdsp	sp[0x8],r8
8000360c:	30 08       	mov	r8,0
8000360e:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
80003612:	1a 9b       	mov	r11,sp
80003614:	fe 7c 44 00 	mov	r12,-48128
80003618:	f0 1f 00 07 	mcall	80003634 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
8000361c:	c0 51       	brne	80003626 <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
8000361e:	48 7c       	lddpc	r12,80003638 <init_i2c_module+0x48>
80003620:	f0 1f 00 07 	mcall	8000363c <init_i2c_module+0x4c>
80003624:	c0 48       	rjmp	8000362c <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
80003626:	48 7c       	lddpc	r12,80003640 <init_i2c_module+0x50>
80003628:	f0 1f 00 05 	mcall	8000363c <init_i2c_module+0x4c>
	}
} 
8000362c:	2f cd       	sub	sp,-16
8000362e:	d8 02       	popm	pc
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	31 dc       	mov	r12,29
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	23 44       	sub	r4,52
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	97 5c       	st.w	r11[0x14],r12
8000363c:	80 00       	ld.sh	r0,r0[0x0]
8000363e:	35 dc       	mov	r12,93
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	97 70       	st.w	r11[0x1c],r0

80003644 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
80003644:	eb cd 40 e0 	pushm	r5-r7,lr
80003648:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
8000364a:	4a 48       	lddpc	r8,800036d8 <spi_init_module+0x94>
8000364c:	1a 95       	mov	r5,sp
8000364e:	70 09       	ld.w	r9,r8[0x0]
80003650:	50 09       	stdsp	sp[0x0],r9
80003652:	70 19       	ld.w	r9,r8[0x4]
80003654:	50 19       	stdsp	sp[0x4],r9
80003656:	70 29       	ld.w	r9,r8[0x8]
80003658:	50 29       	stdsp	sp[0x8],r9
8000365a:	70 38       	ld.w	r8,r8[0xc]
8000365c:	50 38       	stdsp	sp[0xc],r8
8000365e:	30 db       	mov	r11,13
80003660:	30 2c       	mov	r12,2
80003662:	f0 1f 00 1f 	mcall	800036dc <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003666:	fe 77 40 00 	mov	r7,-49152
8000366a:	e0 68 00 80 	mov	r8,128
8000366e:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
80003670:	6e 18       	ld.w	r8,r7[0x4]
80003672:	30 19       	mov	r9,1
80003674:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003678:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
8000367a:	6e 18       	ld.w	r8,r7[0x4]
8000367c:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003680:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
80003682:	6e 18       	ld.w	r8,r7[0x4]
80003684:	30 06       	mov	r6,0
80003686:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
8000368a:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
8000368c:	6e 18       	ld.w	r8,r7[0x4]
8000368e:	30 f9       	mov	r9,15
80003690:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003694:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
80003696:	6e 18       	ld.w	r8,r7[0x4]
80003698:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
8000369c:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
8000369e:	6e 18       	ld.w	r8,r7[0x4]
800036a0:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
800036a4:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
800036a6:	6e 18       	ld.w	r8,r7[0x4]
800036a8:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
800036ac:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
800036ae:	30 38       	mov	r8,3
800036b0:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
800036b2:	e0 7a c1 38 	mov	r10,115000
800036b6:	1a 9b       	mov	r11,sp
800036b8:	0e 9c       	mov	r12,r7
800036ba:	f0 1f 00 0a 	mcall	800036e0 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
800036be:	0c 99       	mov	r9,r6
800036c0:	0c 9a       	mov	r10,r6
800036c2:	0c 9b       	mov	r11,r6
800036c4:	0e 9c       	mov	r12,r7
800036c6:	f0 1f 00 08 	mcall	800036e4 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
800036ca:	0e 9c       	mov	r12,r7
800036cc:	f0 1f 00 07 	mcall	800036e8 <spi_init_module+0xa4>
}
800036d0:	2f cd       	sub	sp,-16
800036d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800036d6:	00 00       	add	r0,r0
800036d8:	80 00       	ld.sh	r0,r0[0x0]
800036da:	97 40       	st.w	r11[0x10],r0
800036dc:	80 00       	ld.sh	r0,r0[0x0]
800036de:	31 dc       	mov	r12,29
800036e0:	80 00       	ld.sh	r0,r0[0x0]
800036e2:	29 38       	sub	r8,-109
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	28 98       	sub	r8,-119
800036e8:	80 00       	ld.sh	r0,r0[0x0]
800036ea:	29 f0       	sub	r0,-97

800036ec <main>:
		sprintf(temps,"%s","X");
}


int main (void)
{
800036ec:	d4 31       	pushm	r0-r7,lr
800036ee:	20 3d       	sub	sp,12
	char temps[10] = "\0";
800036f0:	4d a8       	lddpc	r8,80003858 <main+0x16c>
800036f2:	90 08       	ld.sh	r8,r8[0x0]
800036f4:	ba 08       	st.h	sp[0x0],r8
800036f6:	30 8a       	mov	r10,8
800036f8:	30 0b       	mov	r11,0
800036fa:	fa cc ff fe 	sub	r12,sp,-2
800036fe:	f0 1f 00 58 	mcall	8000385c <main+0x170>
	uint8_t register_value = 0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
80003702:	f0 1f 00 58 	mcall	80003860 <main+0x174>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
80003706:	f0 1f 00 58 	mcall	80003864 <main+0x178>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
8000370a:	f0 1f 00 58 	mcall	80003868 <main+0x17c>
	
	//Configuracion pins para RF
	init_rf_pins();
8000370e:	f0 1f 00 58 	mcall	8000386c <main+0x180>
	
	//Inicializacion del SPI
	spi_init_module();
80003712:	f0 1f 00 58 	mcall	80003870 <main+0x184>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
80003716:	f0 1f 00 58 	mcall	80003874 <main+0x188>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
8000371a:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
8000371c:	f0 1f 00 57 	mcall	80003878 <main+0x18c>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003720:	30 0a       	mov	r10,0
80003722:	e0 6b 02 20 	mov	r11,544
80003726:	4d 6c       	lddpc	r12,8000387c <main+0x190>
80003728:	f0 1f 00 56 	mcall	80003880 <main+0x194>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
8000372c:	30 2a       	mov	r10,2
8000372e:	e0 6b 01 61 	mov	r11,353
80003732:	4d 5c       	lddpc	r12,80003884 <main+0x198>
80003734:	f0 1f 00 53 	mcall	80003880 <main+0x194>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003738:	30 3a       	mov	r10,3
8000373a:	e0 6b 03 40 	mov	r11,832
8000373e:	4d 3c       	lddpc	r12,80003888 <main+0x19c>
80003740:	f0 1f 00 50 	mcall	80003880 <main+0x194>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
80003744:	30 1a       	mov	r10,1
80003746:	4d 2b       	lddpc	r11,8000388c <main+0x1a0>
80003748:	fe 7c 24 00 	mov	r12,-56320
8000374c:	f0 1f 00 51 	mcall	80003890 <main+0x1a4>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
80003750:	30 2b       	mov	r11,2
80003752:	fe 7c 24 00 	mov	r12,-56320
80003756:	f0 1f 00 50 	mcall	80003894 <main+0x1a8>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
8000375a:	30 2b       	mov	r11,2
8000375c:	fe 7c 24 00 	mov	r12,-56320
80003760:	f0 1f 00 4e 	mcall	80003898 <main+0x1ac>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
80003764:	30 19       	mov	r9,1
80003766:	fe 78 38 00 	mov	r8,-51200
8000376a:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
8000376c:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
8000376e:	4c c8       	lddpc	r8,8000389c <main+0x1b0>
80003770:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003772:	4c cb       	lddpc	r11,800038a0 <main+0x1b4>
80003774:	0e 9c       	mov	r12,r7
80003776:	f0 1f 00 4c 	mcall	800038a4 <main+0x1b8>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
8000377a:	e0 6a 00 b3 	mov	r10,179
8000377e:	30 0b       	mov	r11,0
80003780:	0e 9c       	mov	r12,r7
80003782:	f0 1f 00 4a 	mcall	800038a8 <main+0x1bc>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003786:	4c aa       	lddpc	r10,800038ac <main+0x1c0>
80003788:	30 0b       	mov	r11,0
8000378a:	0e 9c       	mov	r12,r7
8000378c:	f0 1f 00 49 	mcall	800038b0 <main+0x1c4>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003790:	30 0b       	mov	r11,0
80003792:	0e 9c       	mov	r12,r7
80003794:	f0 1f 00 48 	mcall	800038b4 <main+0x1c8>
 	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
 	 	}
 		else
 			escribir_linea_pc("Modulo RF:\tPASS\r\n");
 	 */	
	tx_buffer[0]='h';
80003798:	4c 8c       	lddpc	r12,800038b8 <main+0x1cc>
8000379a:	36 88       	mov	r8,104
8000379c:	b8 88       	st.b	r12[0x0],r8
	tx_buffer[1]='0';
8000379e:	33 08       	mov	r8,48
800037a0:	b8 98       	st.b	r12[0x1],r8
	tx_buffer[2]='l';
800037a2:	36 c8       	mov	r8,108
800037a4:	b8 a8       	st.b	r12[0x2],r8
	tx_buffer[3]='a';
800037a6:	36 18       	mov	r8,97
800037a8:	b8 b8       	st.b	r12[0x3],r8
	at86rfx_tx_frame(tx_buffer);
800037aa:	f0 1f 00 45 	mcall	800038bc <main+0x1d0>
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
800037ae:	31 cc       	mov	r12,28
800037b0:	f0 1f 00 44 	mcall	800038c0 <main+0x1d4>
800037b4:	18 97       	mov	r7,r12
	
	if (register_value == PART_NUM_AT86RF212) 
800037b6:	30 78       	mov	r8,7
800037b8:	f0 0c 18 00 	cp.b	r12,r8
800037bc:	c0 51       	brne	800037c6 <main+0xda>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
800037be:	4c 2c       	lddpc	r12,800038c4 <main+0x1d8>
800037c0:	f0 1f 00 42 	mcall	800038c8 <main+0x1dc>
800037c4:	c0 48       	rjmp	800037cc <main+0xe0>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
800037c6:	4c 2c       	lddpc	r12,800038cc <main+0x1e0>
800037c8:	f0 1f 00 40 	mcall	800038c8 <main+0x1dc>
	escribir_linea_pc(register_value);
800037cc:	0e 9c       	mov	r12,r7
800037ce:	f0 1f 00 3f 	mcall	800038c8 <main+0x1dc>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
800037d2:	f0 1f 00 40 	mcall	800038d0 <main+0x1e4>
	init_i2c_module();
800037d6:	f0 1f 00 40 	mcall	800038d4 <main+0x1e8>
	
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r");
800037da:	4c 0c       	lddpc	r12,800038d8 <main+0x1ec>
800037dc:	f0 1f 00 3b 	mcall	800038c8 <main+0x1dc>
	escribir_linea_pc("- - - B u e n a s - - - \n\r");
800037e0:	4b fc       	lddpc	r12,800038dc <main+0x1f0>
800037e2:	f0 1f 00 3a 	mcall	800038c8 <main+0x1dc>
	while(true)
	{
	
	
		
		if (cola_PC_nr != cola_PC_nw )
800037e6:	4b f7       	lddpc	r7,800038e0 <main+0x1f4>
800037e8:	4b f6       	lddpc	r6,800038e4 <main+0x1f8>
		{
			if (cola_PC[cola_PC_nr] == 't')
800037ea:	4c 04       	lddpc	r4,800038e8 <main+0x1fc>
800037ec:	37 45       	mov	r5,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
800037ee:	30 03       	mov	r3,0
		if (cola_PC_nr != cola_PC_nw )
		{
			if (cola_PC[cola_PC_nr] == 't')
			{
				leer_temp(temps);
				escribir_linea_pc("Temp: ");
800037f0:	4b f1       	lddpc	r1,800038ec <main+0x200>
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
800037f2:	4c 00       	lddpc	r0,800038f0 <main+0x204>
	while(true)
	{
	
	
		
		if (cola_PC_nr != cola_PC_nw )
800037f4:	6e 08       	ld.w	r8,r7[0x0]
800037f6:	6c 09       	ld.w	r9,r6[0x0]
800037f8:	12 38       	cp.w	r8,r9
800037fa:	c1 90       	breq	8000382c <main+0x140>
		{
			if (cola_PC[cola_PC_nr] == 't')
800037fc:	e8 08 07 08 	ld.ub	r8,r4[r8]
80003800:	ea 08 18 00 	cp.b	r8,r5
80003804:	c0 d1       	brne	8000381e <main+0x132>
			{
				leer_temp(temps);
80003806:	1a 9c       	mov	r12,sp
80003808:	f0 1f 00 3b 	mcall	800038f4 <main+0x208>
				escribir_linea_pc("Temp: ");
8000380c:	02 9c       	mov	r12,r1
8000380e:	f0 1f 00 2f 	mcall	800038c8 <main+0x1dc>
				escribir_linea_pc(temps);
80003812:	1a 9c       	mov	r12,sp
80003814:	f0 1f 00 2d 	mcall	800038c8 <main+0x1dc>
				escribir_linea_pc("*C\r\n");
80003818:	00 9c       	mov	r12,r0
8000381a:	f0 1f 00 2c 	mcall	800038c8 <main+0x1dc>
			}
			cola_PC_nr++;
8000381e:	6e 08       	ld.w	r8,r7[0x0]
80003820:	2f f8       	sub	r8,-1
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
80003822:	e0 48 00 c8 	cp.w	r8,200
80003826:	e6 08 17 40 	movge	r8,r3
8000382a:	8f 08       	st.w	r7[0x0],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000382c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003830:	f0 ca fb 82 	sub	r10,r8,-1150
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003834:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003838:	14 38       	cp.w	r8,r10
8000383a:	e0 88 00 08 	brls	8000384a <main+0x15e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000383e:	12 38       	cp.w	r8,r9
80003840:	fe 98 ff fa 	brls	80003834 <main+0x148>
80003844:	12 3a       	cp.w	r10,r9
80003846:	cd 73       	brcs	800037f4 <main+0x108>
80003848:	cf 6b       	rjmp	80003834 <main+0x148>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000384a:	12 38       	cp.w	r8,r9
8000384c:	fe 9b ff d4 	brhi	800037f4 <main+0x108>
80003850:	12 3a       	cp.w	r10,r9
80003852:	cd 13       	brcs	800037f4 <main+0x108>
80003854:	cf 0b       	rjmp	80003834 <main+0x148>
80003856:	00 00       	add	r0,r0
80003858:	80 00       	ld.sh	r0,r0[0x0]
8000385a:	32 94       	mov	r4,41
8000385c:	80 00       	ld.sh	r0,r0[0x0]
8000385e:	3d e6       	mov	r6,-34
80003860:	80 00       	ld.sh	r0,r0[0x0]
80003862:	31 cc       	mov	r12,28
80003864:	80 00       	ld.sh	r0,r0[0x0]
80003866:	35 8c       	mov	r12,88
80003868:	80 00       	ld.sh	r0,r0[0x0]
8000386a:	34 f4       	mov	r4,79
8000386c:	80 00       	ld.sh	r0,r0[0x0]
8000386e:	35 ac       	mov	r12,90
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	36 44       	mov	r4,100
80003874:	80 00       	ld.sh	r0,r0[0x0]
80003876:	34 d0       	mov	r0,77
80003878:	80 00       	ld.sh	r0,r0[0x0]
8000387a:	27 ec       	sub	r12,126
8000387c:	80 00       	ld.sh	r0,r0[0x0]
8000387e:	33 24       	mov	r4,50
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	27 6c       	sub	r12,118
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	33 10       	mov	r0,49
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	32 a0       	mov	r0,42
8000388c:	00 00       	add	r0,r0
8000388e:	00 09       	add	r9,r0
80003890:	80 00       	ld.sh	r0,r0[0x0]
80003892:	23 fc       	sub	r12,63
80003894:	80 00       	ld.sh	r0,r0[0x0]
80003896:	24 cc       	sub	r12,76
80003898:	80 00       	ld.sh	r0,r0[0x0]
8000389a:	24 d6       	sub	r6,77
8000389c:	00 00       	add	r0,r0
8000389e:	00 14       	sub	r4,r0
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	97 38       	st.w	r11[0xc],r8
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	29 f6       	sub	r6,-97
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	2a c8       	sub	r8,-84
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	97 f4       	st.w	r11[0x3c],r4
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	2a fc       	sub	r12,-81
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	2a 92       	sub	r2,-87
800038b8:	00 00       	add	r0,r0
800038ba:	06 3c       	cp.w	r12,r3
800038bc:	80 00       	ld.sh	r0,r0[0x0]
800038be:	30 90       	mov	r0,9
800038c0:	80 00       	ld.sh	r0,r0[0x0]
800038c2:	31 34       	mov	r4,19
800038c4:	80 00       	ld.sh	r0,r0[0x0]
800038c6:	97 88       	st.w	r11[0x20],r8
800038c8:	80 00       	ld.sh	r0,r0[0x0]
800038ca:	35 dc       	mov	r12,93
800038cc:	80 00       	ld.sh	r0,r0[0x0]
800038ce:	97 9c       	st.w	r11[0x24],r12
800038d0:	80 00       	ld.sh	r0,r0[0x0]
800038d2:	35 20       	mov	r0,82
800038d4:	80 00       	ld.sh	r0,r0[0x0]
800038d6:	35 f0       	mov	r0,95
800038d8:	80 00       	ld.sh	r0,r0[0x0]
800038da:	97 b0       	st.w	r11[0x2c],r0
800038dc:	80 00       	ld.sh	r0,r0[0x0]
800038de:	97 c8       	st.w	r11[0x30],r8
800038e0:	00 00       	add	r0,r0
800038e2:	06 38       	cp.w	r8,r3
800038e4:	00 00       	add	r0,r0
800038e6:	07 04       	ld.w	r4,r3++
800038e8:	00 00       	add	r0,r0
800038ea:	07 40       	ld.w	r0,--r3
800038ec:	80 00       	ld.sh	r0,r0[0x0]
800038ee:	97 e4       	st.w	r11[0x38],r4
800038f0:	80 00       	ld.sh	r0,r0[0x0]
800038f2:	97 ec       	st.w	r11[0x38],r12
800038f4:	80 00       	ld.sh	r0,r0[0x0]
800038f6:	33 8c       	mov	r12,56

800038f8 <__avr32_f64_mul>:
800038f8:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800038fc:	e0 80 00 dc 	breq	80003ab4 <__avr32_f64_mul_op1_zero>
80003900:	d4 21       	pushm	r4-r7,lr
80003902:	f7 e9 20 0e 	eor	lr,r11,r9
80003906:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000390a:	30 15       	mov	r5,1
8000390c:	c4 30       	breq	80003992 <__avr32_f64_mul_op1_subnormal>
8000390e:	ab 6b       	lsl	r11,0xa
80003910:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003914:	ab 6a       	lsl	r10,0xa
80003916:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000391a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000391e:	c5 c0       	breq	800039d6 <__avr32_f64_mul_op2_subnormal>
80003920:	a1 78       	lsl	r8,0x1
80003922:	5c f9       	rol	r9
80003924:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003928:	e0 47 07 ff 	cp.w	r7,2047
8000392c:	c7 70       	breq	80003a1a <__avr32_f64_mul_op_nan_or_inf>
8000392e:	e0 46 07 ff 	cp.w	r6,2047
80003932:	c7 40       	breq	80003a1a <__avr32_f64_mul_op_nan_or_inf>
80003934:	ee 06 00 0c 	add	r12,r7,r6
80003938:	e0 2c 03 fe 	sub	r12,1022
8000393c:	f6 08 06 44 	mulu.d	r4,r11,r8
80003940:	f4 09 07 44 	macu.d	r4,r10,r9
80003944:	f4 08 06 46 	mulu.d	r6,r10,r8
80003948:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000394c:	08 07       	add	r7,r4
8000394e:	f4 05 00 4a 	adc	r10,r10,r5
80003952:	5c 0b       	acr	r11
80003954:	ed bb 00 14 	bld	r11,0x14
80003958:	c0 50       	breq	80003962 <__avr32_f64_mul+0x6a>
8000395a:	a1 77       	lsl	r7,0x1
8000395c:	5c fa       	rol	r10
8000395e:	5c fb       	rol	r11
80003960:	20 1c       	sub	r12,1
80003962:	58 0c       	cp.w	r12,0
80003964:	e0 8a 00 6f 	brle	80003a42 <__avr32_f64_mul_res_subnormal>
80003968:	e0 4c 07 ff 	cp.w	r12,2047
8000396c:	e0 84 00 9c 	brge	80003aa4 <__avr32_f64_mul_res_inf>
80003970:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003974:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003978:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000397c:	ee 17 80 00 	eorh	r7,0x8000
80003980:	f1 b7 04 20 	satu	r7,0x1
80003984:	0e 0a       	add	r10,r7
80003986:	5c 0b       	acr	r11
80003988:	ed be 00 1f 	bld	lr,0x1f
8000398c:	ef bb 00 1f 	bst	r11,0x1f
80003990:	d8 22       	popm	r4-r7,pc

80003992 <__avr32_f64_mul_op1_subnormal>:
80003992:	e4 1b 00 0f 	andh	r11,0xf
80003996:	f4 0c 12 00 	clz	r12,r10
8000399a:	f6 06 12 00 	clz	r6,r11
8000399e:	f7 bc 03 e1 	sublo	r12,-31
800039a2:	f8 06 17 30 	movlo	r6,r12
800039a6:	f7 b6 02 01 	subhs	r6,1
800039aa:	e0 46 00 20 	cp.w	r6,32
800039ae:	c0 d4       	brge	800039c8 <__avr32_f64_mul_op1_subnormal+0x36>
800039b0:	ec 0c 11 20 	rsub	r12,r6,32
800039b4:	f6 06 09 4b 	lsl	r11,r11,r6
800039b8:	f4 0c 0a 4c 	lsr	r12,r10,r12
800039bc:	18 4b       	or	r11,r12
800039be:	f4 06 09 4a 	lsl	r10,r10,r6
800039c2:	20 b6       	sub	r6,11
800039c4:	0c 17       	sub	r7,r6
800039c6:	ca ab       	rjmp	8000391a <__avr32_f64_mul+0x22>
800039c8:	f4 06 09 4b 	lsl	r11,r10,r6
800039cc:	c6 40       	breq	80003a94 <__avr32_f64_mul_res_zero>
800039ce:	30 0a       	mov	r10,0
800039d0:	20 b6       	sub	r6,11
800039d2:	0c 17       	sub	r7,r6
800039d4:	ca 3b       	rjmp	8000391a <__avr32_f64_mul+0x22>

800039d6 <__avr32_f64_mul_op2_subnormal>:
800039d6:	e4 19 00 0f 	andh	r9,0xf
800039da:	f0 0c 12 00 	clz	r12,r8
800039de:	f2 05 12 00 	clz	r5,r9
800039e2:	f7 bc 03 ea 	sublo	r12,-22
800039e6:	f8 05 17 30 	movlo	r5,r12
800039ea:	f7 b5 02 0a 	subhs	r5,10
800039ee:	e0 45 00 20 	cp.w	r5,32
800039f2:	c0 d4       	brge	80003a0c <__avr32_f64_mul_op2_subnormal+0x36>
800039f4:	ea 0c 11 20 	rsub	r12,r5,32
800039f8:	f2 05 09 49 	lsl	r9,r9,r5
800039fc:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003a00:	18 49       	or	r9,r12
80003a02:	f0 05 09 48 	lsl	r8,r8,r5
80003a06:	20 25       	sub	r5,2
80003a08:	0a 16       	sub	r6,r5
80003a0a:	c8 fb       	rjmp	80003928 <__avr32_f64_mul+0x30>
80003a0c:	f0 05 09 49 	lsl	r9,r8,r5
80003a10:	c4 20       	breq	80003a94 <__avr32_f64_mul_res_zero>
80003a12:	30 08       	mov	r8,0
80003a14:	20 25       	sub	r5,2
80003a16:	0a 16       	sub	r6,r5
80003a18:	c8 8b       	rjmp	80003928 <__avr32_f64_mul+0x30>

80003a1a <__avr32_f64_mul_op_nan_or_inf>:
80003a1a:	e4 19 00 0f 	andh	r9,0xf
80003a1e:	e4 1b 00 0f 	andh	r11,0xf
80003a22:	14 4b       	or	r11,r10
80003a24:	10 49       	or	r9,r8
80003a26:	e0 47 07 ff 	cp.w	r7,2047
80003a2a:	c0 91       	brne	80003a3c <__avr32_f64_mul_op1_not_naninf>
80003a2c:	58 0b       	cp.w	r11,0
80003a2e:	c3 81       	brne	80003a9e <__avr32_f64_mul_res_nan>
80003a30:	e0 46 07 ff 	cp.w	r6,2047
80003a34:	c3 81       	brne	80003aa4 <__avr32_f64_mul_res_inf>
80003a36:	58 09       	cp.w	r9,0
80003a38:	c3 60       	breq	80003aa4 <__avr32_f64_mul_res_inf>
80003a3a:	c3 28       	rjmp	80003a9e <__avr32_f64_mul_res_nan>

80003a3c <__avr32_f64_mul_op1_not_naninf>:
80003a3c:	58 09       	cp.w	r9,0
80003a3e:	c3 30       	breq	80003aa4 <__avr32_f64_mul_res_inf>
80003a40:	c2 f8       	rjmp	80003a9e <__avr32_f64_mul_res_nan>

80003a42 <__avr32_f64_mul_res_subnormal>:
80003a42:	5c 3c       	neg	r12
80003a44:	2f fc       	sub	r12,-1
80003a46:	f1 bc 04 c0 	satu	r12,0x6
80003a4a:	e0 4c 00 20 	cp.w	r12,32
80003a4e:	c1 14       	brge	80003a70 <__avr32_f64_mul_res_subnormal+0x2e>
80003a50:	f8 08 11 20 	rsub	r8,r12,32
80003a54:	0e 46       	or	r6,r7
80003a56:	ee 0c 0a 47 	lsr	r7,r7,r12
80003a5a:	f4 08 09 49 	lsl	r9,r10,r8
80003a5e:	12 47       	or	r7,r9
80003a60:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003a64:	f6 08 09 49 	lsl	r9,r11,r8
80003a68:	12 4a       	or	r10,r9
80003a6a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003a6e:	c8 3b       	rjmp	80003974 <__avr32_f64_mul+0x7c>
80003a70:	f8 08 11 20 	rsub	r8,r12,32
80003a74:	f9 b9 00 00 	moveq	r9,0
80003a78:	c0 30       	breq	80003a7e <__avr32_f64_mul_res_subnormal+0x3c>
80003a7a:	f6 08 09 49 	lsl	r9,r11,r8
80003a7e:	0e 46       	or	r6,r7
80003a80:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003a84:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003a88:	f3 ea 10 07 	or	r7,r9,r10
80003a8c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003a90:	30 0b       	mov	r11,0
80003a92:	c7 1b       	rjmp	80003974 <__avr32_f64_mul+0x7c>

80003a94 <__avr32_f64_mul_res_zero>:
80003a94:	1c 9b       	mov	r11,lr
80003a96:	e6 1b 80 00 	andh	r11,0x8000,COH
80003a9a:	30 0a       	mov	r10,0
80003a9c:	d8 22       	popm	r4-r7,pc

80003a9e <__avr32_f64_mul_res_nan>:
80003a9e:	3f fb       	mov	r11,-1
80003aa0:	3f fa       	mov	r10,-1
80003aa2:	d8 22       	popm	r4-r7,pc

80003aa4 <__avr32_f64_mul_res_inf>:
80003aa4:	f0 6b 00 00 	mov	r11,-1048576
80003aa8:	ed be 00 1f 	bld	lr,0x1f
80003aac:	ef bb 00 1f 	bst	r11,0x1f
80003ab0:	30 0a       	mov	r10,0
80003ab2:	d8 22       	popm	r4-r7,pc

80003ab4 <__avr32_f64_mul_op1_zero>:
80003ab4:	f7 e9 20 0b 	eor	r11,r11,r9
80003ab8:	e6 1b 80 00 	andh	r11,0x8000,COH
80003abc:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003ac0:	e0 4c 07 ff 	cp.w	r12,2047
80003ac4:	5e 1c       	retne	r12
80003ac6:	3f fa       	mov	r10,-1
80003ac8:	3f fb       	mov	r11,-1
80003aca:	5e fc       	retal	r12

80003acc <__avr32_u32_to_f64>:
80003acc:	f8 cb 00 00 	sub	r11,r12,0
80003ad0:	30 0c       	mov	r12,0
80003ad2:	c0 38       	rjmp	80003ad8 <__avr32_s32_to_f64+0x4>

80003ad4 <__avr32_s32_to_f64>:
80003ad4:	18 9b       	mov	r11,r12
80003ad6:	5c 4b       	abs	r11
80003ad8:	30 0a       	mov	r10,0
80003ada:	5e 0b       	reteq	r11
80003adc:	d4 01       	pushm	lr
80003ade:	e0 69 04 1e 	mov	r9,1054
80003ae2:	f6 08 12 00 	clz	r8,r11
80003ae6:	c1 70       	breq	80003b14 <__avr32_s32_to_f64+0x40>
80003ae8:	c0 c3       	brcs	80003b00 <__avr32_s32_to_f64+0x2c>
80003aea:	f0 0e 11 20 	rsub	lr,r8,32
80003aee:	f6 08 09 4b 	lsl	r11,r11,r8
80003af2:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003af6:	1c 4b       	or	r11,lr
80003af8:	f4 08 09 4a 	lsl	r10,r10,r8
80003afc:	10 19       	sub	r9,r8
80003afe:	c0 b8       	rjmp	80003b14 <__avr32_s32_to_f64+0x40>
80003b00:	f4 08 12 00 	clz	r8,r10
80003b04:	f9 b8 03 00 	movlo	r8,0
80003b08:	f7 b8 02 e0 	subhs	r8,-32
80003b0c:	f4 08 09 4b 	lsl	r11,r10,r8
80003b10:	30 0a       	mov	r10,0
80003b12:	10 19       	sub	r9,r8
80003b14:	58 09       	cp.w	r9,0
80003b16:	e0 89 00 30 	brgt	80003b76 <__avr32_s32_to_f64+0xa2>
80003b1a:	5c 39       	neg	r9
80003b1c:	2f f9       	sub	r9,-1
80003b1e:	e0 49 00 36 	cp.w	r9,54
80003b22:	c0 43       	brcs	80003b2a <__avr32_s32_to_f64+0x56>
80003b24:	30 0b       	mov	r11,0
80003b26:	30 0a       	mov	r10,0
80003b28:	c2 68       	rjmp	80003b74 <__avr32_s32_to_f64+0xa0>
80003b2a:	2f 69       	sub	r9,-10
80003b2c:	f2 08 11 20 	rsub	r8,r9,32
80003b30:	e0 49 00 20 	cp.w	r9,32
80003b34:	c0 b2       	brcc	80003b4a <__avr32_s32_to_f64+0x76>
80003b36:	f4 08 09 4e 	lsl	lr,r10,r8
80003b3a:	f6 08 09 48 	lsl	r8,r11,r8
80003b3e:	f4 09 0a 4a 	lsr	r10,r10,r9
80003b42:	f6 09 0a 4b 	lsr	r11,r11,r9
80003b46:	10 4b       	or	r11,r8
80003b48:	c0 88       	rjmp	80003b58 <__avr32_s32_to_f64+0x84>
80003b4a:	f6 08 09 4e 	lsl	lr,r11,r8
80003b4e:	14 4e       	or	lr,r10
80003b50:	16 9a       	mov	r10,r11
80003b52:	30 0b       	mov	r11,0
80003b54:	f4 09 0a 4a 	lsr	r10,r10,r9
80003b58:	ed ba 00 00 	bld	r10,0x0
80003b5c:	c0 92       	brcc	80003b6e <__avr32_s32_to_f64+0x9a>
80003b5e:	1c 7e       	tst	lr,lr
80003b60:	c0 41       	brne	80003b68 <__avr32_s32_to_f64+0x94>
80003b62:	ed ba 00 01 	bld	r10,0x1
80003b66:	c0 42       	brcc	80003b6e <__avr32_s32_to_f64+0x9a>
80003b68:	2f fa       	sub	r10,-1
80003b6a:	f7 bb 02 ff 	subhs	r11,-1
80003b6e:	5c fc       	rol	r12
80003b70:	5d 0b       	ror	r11
80003b72:	5d 0a       	ror	r10
80003b74:	d8 02       	popm	pc
80003b76:	e0 68 03 ff 	mov	r8,1023
80003b7a:	ed ba 00 0b 	bld	r10,0xb
80003b7e:	f7 b8 00 ff 	subeq	r8,-1
80003b82:	10 0a       	add	r10,r8
80003b84:	5c 0b       	acr	r11
80003b86:	f7 b9 03 fe 	sublo	r9,-2
80003b8a:	e0 49 07 ff 	cp.w	r9,2047
80003b8e:	c0 55       	brlt	80003b98 <__avr32_s32_to_f64+0xc4>
80003b90:	30 0a       	mov	r10,0
80003b92:	fc 1b ff e0 	movh	r11,0xffe0
80003b96:	c0 c8       	rjmp	80003bae <__floatsidf_return_op1>
80003b98:	ed bb 00 1f 	bld	r11,0x1f
80003b9c:	f7 b9 01 01 	subne	r9,1
80003ba0:	ab 9a       	lsr	r10,0xb
80003ba2:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003ba6:	a1 7b       	lsl	r11,0x1
80003ba8:	ab 9b       	lsr	r11,0xb
80003baa:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003bae <__floatsidf_return_op1>:
80003bae:	a1 7c       	lsl	r12,0x1
80003bb0:	5d 0b       	ror	r11
80003bb2:	d8 02       	popm	pc

80003bb4 <__avr32_f32_to_f64>:
80003bb4:	f8 0b 15 01 	lsl	r11,r12,0x1
80003bb8:	f9 ba 00 00 	moveq	r10,0
80003bbc:	5e 0b       	reteq	r11
80003bbe:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003bc2:	e0 49 00 ff 	cp.w	r9,255
80003bc6:	c1 e0       	breq	80003c02 <__extendsfdf_return_op1+0x6>
80003bc8:	a7 7b       	lsl	r11,0x7
80003bca:	30 0a       	mov	r10,0
80003bcc:	58 09       	cp.w	r9,0
80003bce:	f7 b9 00 ff 	subeq	r9,-1
80003bd2:	5f 18       	srne	r8
80003bd4:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003bd8:	fe 39 fc 80 	sub	r9,-896
80003bdc:	f6 08 12 00 	clz	r8,r11
80003be0:	10 19       	sub	r9,r8
80003be2:	f6 08 09 4b 	lsl	r11,r11,r8
80003be6:	ed bb 00 1f 	bld	r11,0x1f
80003bea:	f7 b9 01 01 	subne	r9,1
80003bee:	ab 9a       	lsr	r10,0xb
80003bf0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003bf4:	a1 7b       	lsl	r11,0x1
80003bf6:	ab 9b       	lsr	r11,0xb
80003bf8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003bfc <__extendsfdf_return_op1>:
80003bfc:	a1 7c       	lsl	r12,0x1
80003bfe:	5d 0b       	ror	r11
80003c00:	5e fb       	retal	r11
80003c02:	fc 1a ff e0 	movh	r10,0xffe0
80003c06:	a9 6b       	lsl	r11,0x8
80003c08:	f9 bb 01 ff 	movne	r11,-1
80003c0c:	f4 0b 17 00 	moveq	r11,r10
80003c10:	30 0a       	mov	r10,0
80003c12:	cf 5b       	rjmp	80003bfc <__extendsfdf_return_op1>

80003c14 <__avr32_f64_to_f32>:
80003c14:	f6 09 15 01 	lsl	r9,r11,0x1
80003c18:	b5 99       	lsr	r9,0x15
80003c1a:	5e 0d       	reteq	0
80003c1c:	f6 08 15 0a 	lsl	r8,r11,0xa
80003c20:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003c24:	ab 6a       	lsl	r10,0xa
80003c26:	5c 3a       	neg	r10
80003c28:	5c fc       	rol	r12
80003c2a:	e0 49 07 ff 	cp.w	r9,2047
80003c2e:	c1 a0       	breq	80003c62 <__truncdfsf_return_op1+0x6>
80003c30:	e0 29 03 80 	sub	r9,896
80003c34:	bf bc       	sbr	r12,0x1f
80003c36:	58 09       	cp.w	r9,0
80003c38:	e0 8a 00 1a 	brle	80003c6c <__truncdfsf_return_op1+0x10>
80003c3c:	37 fa       	mov	r10,127
80003c3e:	ed bc 00 08 	bld	r12,0x8
80003c42:	f7 ba 00 ff 	subeq	r10,-1
80003c46:	14 0c       	add	r12,r10
80003c48:	f7 b9 03 fe 	sublo	r9,-2
80003c4c:	ed bc 00 1f 	bld	r12,0x1f
80003c50:	f7 b9 01 01 	subne	r9,1
80003c54:	f8 0c 16 07 	lsr	r12,r12,0x7
80003c58:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003c5c <__truncdfsf_return_op1>:
80003c5c:	a1 7b       	lsl	r11,0x1
80003c5e:	5d 0c       	ror	r12
80003c60:	5e fc       	retal	r12
80003c62:	bf dc       	cbr	r12,0x1f
80003c64:	5e 1e       	retne	-1
80003c66:	fc 1c 7f 80 	movh	r12,0x7f80
80003c6a:	5e fc       	retal	r12
80003c6c:	f2 09 11 01 	rsub	r9,r9,1
80003c70:	59 99       	cp.w	r9,25
80003c72:	f9 bc 02 00 	movhs	r12,0
80003c76:	c1 32       	brcc	80003c9c <__truncdfsf_return_op1+0x40>
80003c78:	f2 0a 11 20 	rsub	r10,r9,32
80003c7c:	f8 0a 09 4a 	lsl	r10,r12,r10
80003c80:	5f 1a       	srne	r10
80003c82:	f8 09 0a 4c 	lsr	r12,r12,r9
80003c86:	14 4c       	or	r12,r10
80003c88:	37 fa       	mov	r10,127
80003c8a:	ed bc 00 08 	bld	r12,0x8
80003c8e:	f7 ba 00 ff 	subeq	r10,-1
80003c92:	14 0c       	add	r12,r10
80003c94:	f8 0c 16 07 	lsr	r12,r12,0x7
80003c98:	a1 7b       	lsl	r11,0x1
80003c9a:	5d 0c       	ror	r12
80003c9c:	5e fc       	retal	r12

80003c9e <memcpy>:
80003c9e:	58 8a       	cp.w	r10,8
80003ca0:	c2 f5       	brlt	80003cfe <memcpy+0x60>
80003ca2:	f9 eb 10 09 	or	r9,r12,r11
80003ca6:	e2 19 00 03 	andl	r9,0x3,COH
80003caa:	e0 81 00 97 	brne	80003dd8 <memcpy+0x13a>
80003cae:	e0 4a 00 20 	cp.w	r10,32
80003cb2:	c3 b4       	brge	80003d28 <memcpy+0x8a>
80003cb4:	f4 08 14 02 	asr	r8,r10,0x2
80003cb8:	f0 09 11 08 	rsub	r9,r8,8
80003cbc:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003cc0:	76 69       	ld.w	r9,r11[0x18]
80003cc2:	99 69       	st.w	r12[0x18],r9
80003cc4:	76 59       	ld.w	r9,r11[0x14]
80003cc6:	99 59       	st.w	r12[0x14],r9
80003cc8:	76 49       	ld.w	r9,r11[0x10]
80003cca:	99 49       	st.w	r12[0x10],r9
80003ccc:	76 39       	ld.w	r9,r11[0xc]
80003cce:	99 39       	st.w	r12[0xc],r9
80003cd0:	76 29       	ld.w	r9,r11[0x8]
80003cd2:	99 29       	st.w	r12[0x8],r9
80003cd4:	76 19       	ld.w	r9,r11[0x4]
80003cd6:	99 19       	st.w	r12[0x4],r9
80003cd8:	76 09       	ld.w	r9,r11[0x0]
80003cda:	99 09       	st.w	r12[0x0],r9
80003cdc:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003ce0:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003ce4:	e0 1a 00 03 	andl	r10,0x3
80003ce8:	f4 0a 11 04 	rsub	r10,r10,4
80003cec:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003cf0:	17 a9       	ld.ub	r9,r11[0x2]
80003cf2:	b0 a9       	st.b	r8[0x2],r9
80003cf4:	17 99       	ld.ub	r9,r11[0x1]
80003cf6:	b0 99       	st.b	r8[0x1],r9
80003cf8:	17 89       	ld.ub	r9,r11[0x0]
80003cfa:	b0 89       	st.b	r8[0x0],r9
80003cfc:	5e fc       	retal	r12
80003cfe:	f4 0a 11 09 	rsub	r10,r10,9
80003d02:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003d06:	17 f9       	ld.ub	r9,r11[0x7]
80003d08:	b8 f9       	st.b	r12[0x7],r9
80003d0a:	17 e9       	ld.ub	r9,r11[0x6]
80003d0c:	b8 e9       	st.b	r12[0x6],r9
80003d0e:	17 d9       	ld.ub	r9,r11[0x5]
80003d10:	b8 d9       	st.b	r12[0x5],r9
80003d12:	17 c9       	ld.ub	r9,r11[0x4]
80003d14:	b8 c9       	st.b	r12[0x4],r9
80003d16:	17 b9       	ld.ub	r9,r11[0x3]
80003d18:	b8 b9       	st.b	r12[0x3],r9
80003d1a:	17 a9       	ld.ub	r9,r11[0x2]
80003d1c:	b8 a9       	st.b	r12[0x2],r9
80003d1e:	17 99       	ld.ub	r9,r11[0x1]
80003d20:	b8 99       	st.b	r12[0x1],r9
80003d22:	17 89       	ld.ub	r9,r11[0x0]
80003d24:	b8 89       	st.b	r12[0x0],r9
80003d26:	5e fc       	retal	r12
80003d28:	eb cd 40 c0 	pushm	r6-r7,lr
80003d2c:	18 99       	mov	r9,r12
80003d2e:	22 0a       	sub	r10,32
80003d30:	b7 07       	ld.d	r6,r11++
80003d32:	b3 26       	st.d	r9++,r6
80003d34:	b7 07       	ld.d	r6,r11++
80003d36:	b3 26       	st.d	r9++,r6
80003d38:	b7 07       	ld.d	r6,r11++
80003d3a:	b3 26       	st.d	r9++,r6
80003d3c:	b7 07       	ld.d	r6,r11++
80003d3e:	b3 26       	st.d	r9++,r6
80003d40:	22 0a       	sub	r10,32
80003d42:	cf 74       	brge	80003d30 <memcpy+0x92>
80003d44:	2f 0a       	sub	r10,-16
80003d46:	c0 65       	brlt	80003d52 <memcpy+0xb4>
80003d48:	b7 07       	ld.d	r6,r11++
80003d4a:	b3 26       	st.d	r9++,r6
80003d4c:	b7 07       	ld.d	r6,r11++
80003d4e:	b3 26       	st.d	r9++,r6
80003d50:	21 0a       	sub	r10,16
80003d52:	5c 3a       	neg	r10
80003d54:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003d58:	d7 03       	nop
80003d5a:	d7 03       	nop
80003d5c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003d60:	f3 66 00 0e 	st.b	r9[14],r6
80003d64:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003d68:	f3 66 00 0d 	st.b	r9[13],r6
80003d6c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003d70:	f3 66 00 0c 	st.b	r9[12],r6
80003d74:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003d78:	f3 66 00 0b 	st.b	r9[11],r6
80003d7c:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003d80:	f3 66 00 0a 	st.b	r9[10],r6
80003d84:	f7 36 00 09 	ld.ub	r6,r11[9]
80003d88:	f3 66 00 09 	st.b	r9[9],r6
80003d8c:	f7 36 00 08 	ld.ub	r6,r11[8]
80003d90:	f3 66 00 08 	st.b	r9[8],r6
80003d94:	f7 36 00 07 	ld.ub	r6,r11[7]
80003d98:	f3 66 00 07 	st.b	r9[7],r6
80003d9c:	f7 36 00 06 	ld.ub	r6,r11[6]
80003da0:	f3 66 00 06 	st.b	r9[6],r6
80003da4:	f7 36 00 05 	ld.ub	r6,r11[5]
80003da8:	f3 66 00 05 	st.b	r9[5],r6
80003dac:	f7 36 00 04 	ld.ub	r6,r11[4]
80003db0:	f3 66 00 04 	st.b	r9[4],r6
80003db4:	f7 36 00 03 	ld.ub	r6,r11[3]
80003db8:	f3 66 00 03 	st.b	r9[3],r6
80003dbc:	f7 36 00 02 	ld.ub	r6,r11[2]
80003dc0:	f3 66 00 02 	st.b	r9[2],r6
80003dc4:	f7 36 00 01 	ld.ub	r6,r11[1]
80003dc8:	f3 66 00 01 	st.b	r9[1],r6
80003dcc:	f7 36 00 00 	ld.ub	r6,r11[0]
80003dd0:	f3 66 00 00 	st.b	r9[0],r6
80003dd4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003dd8:	20 1a       	sub	r10,1
80003dda:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003dde:	f8 0a 0b 09 	st.b	r12[r10],r9
80003de2:	cf b1       	brne	80003dd8 <memcpy+0x13a>
80003de4:	5e fc       	retal	r12

80003de6 <memset>:
80003de6:	18 98       	mov	r8,r12
80003de8:	c0 38       	rjmp	80003dee <memset+0x8>
80003dea:	10 cb       	st.b	r8++,r11
80003dec:	20 1a       	sub	r10,1
80003dee:	58 0a       	cp.w	r10,0
80003df0:	cf d1       	brne	80003dea <memset+0x4>
80003df2:	5e fc       	retal	r12

80003df4 <sprintf>:
80003df4:	d4 01       	pushm	lr
80003df6:	21 7d       	sub	sp,92
80003df8:	e0 68 ff ff 	mov	r8,65535
80003dfc:	ea 18 7f ff 	orh	r8,0x7fff
80003e00:	50 58       	stdsp	sp[0x14],r8
80003e02:	50 28       	stdsp	sp[0x8],r8
80003e04:	e0 68 02 08 	mov	r8,520
80003e08:	ba 68       	st.h	sp[0xc],r8
80003e0a:	3f f8       	mov	r8,-1
80003e0c:	ba 78       	st.h	sp[0xe],r8
80003e0e:	e0 68 01 18 	mov	r8,280
80003e12:	50 4c       	stdsp	sp[0x10],r12
80003e14:	16 9a       	mov	r10,r11
80003e16:	50 0c       	stdsp	sp[0x0],r12
80003e18:	fa c9 ff a0 	sub	r9,sp,-96
80003e1c:	70 0c       	ld.w	r12,r8[0x0]
80003e1e:	1a 9b       	mov	r11,sp
80003e20:	c9 cd       	rcall	80004158 <_vfprintf_r>
80003e22:	30 09       	mov	r9,0
80003e24:	40 08       	lddsp	r8,sp[0x0]
80003e26:	b0 89       	st.b	r8[0x0],r9
80003e28:	2e 9d       	sub	sp,-92
80003e2a:	d8 02       	popm	pc

80003e2c <get_arg>:
80003e2c:	d4 31       	pushm	r0-r7,lr
80003e2e:	20 8d       	sub	sp,32
80003e30:	fa c4 ff bc 	sub	r4,sp,-68
80003e34:	50 4b       	stdsp	sp[0x10],r11
80003e36:	68 2e       	ld.w	lr,r4[0x8]
80003e38:	50 58       	stdsp	sp[0x14],r8
80003e3a:	12 96       	mov	r6,r9
80003e3c:	7c 0b       	ld.w	r11,lr[0x0]
80003e3e:	70 05       	ld.w	r5,r8[0x0]
80003e40:	50 6e       	stdsp	sp[0x18],lr
80003e42:	58 0b       	cp.w	r11,0
80003e44:	f4 0b 17 00 	moveq	r11,r10
80003e48:	68 03       	ld.w	r3,r4[0x0]
80003e4a:	68 11       	ld.w	r1,r4[0x4]
80003e4c:	40 49       	lddsp	r9,sp[0x10]
80003e4e:	30 08       	mov	r8,0
80003e50:	c2 69       	rjmp	8000409c <get_arg+0x270>
80003e52:	2f fb       	sub	r11,-1
80003e54:	32 5c       	mov	r12,37
80003e56:	17 8a       	ld.ub	r10,r11[0x0]
80003e58:	f8 0a 18 00 	cp.b	r10,r12
80003e5c:	5f 1e       	srne	lr
80003e5e:	f0 0a 18 00 	cp.b	r10,r8
80003e62:	5f 1c       	srne	r12
80003e64:	fd ec 00 0c 	and	r12,lr,r12
80003e68:	f0 0c 18 00 	cp.b	r12,r8
80003e6c:	cf 31       	brne	80003e52 <get_arg+0x26>
80003e6e:	58 0a       	cp.w	r10,0
80003e70:	e0 80 01 23 	breq	800040b6 <get_arg+0x28a>
80003e74:	30 0c       	mov	r12,0
80003e76:	3f fa       	mov	r10,-1
80003e78:	18 90       	mov	r0,r12
80003e7a:	50 3a       	stdsp	sp[0xc],r10
80003e7c:	18 94       	mov	r4,r12
80003e7e:	18 92       	mov	r2,r12
80003e80:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003e84:	16 97       	mov	r7,r11
80003e86:	50 7c       	stdsp	sp[0x1c],r12
80003e88:	fe cc a3 9c 	sub	r12,pc,-23652
80003e8c:	0f 3a       	ld.ub	r10,r7++
80003e8e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003e92:	40 7c       	lddsp	r12,sp[0x1c]
80003e94:	1c 0c       	add	r12,lr
80003e96:	fe ce a4 72 	sub	lr,pc,-23438
80003e9a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003e9e:	20 1e       	sub	lr,1
80003ea0:	50 0e       	stdsp	sp[0x0],lr
80003ea2:	fe ce a4 ea 	sub	lr,pc,-23318
80003ea6:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003eaa:	50 7c       	stdsp	sp[0x1c],r12
80003eac:	40 0c       	lddsp	r12,sp[0x0]
80003eae:	58 7c       	cp.w	r12,7
80003eb0:	e0 8b 00 ef 	brhi	8000408e <get_arg+0x262>
80003eb4:	fe ce a6 9c 	sub	lr,pc,-22884
80003eb8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003ebc:	36 8b       	mov	r11,104
80003ebe:	f6 0a 18 00 	cp.b	r10,r11
80003ec2:	e0 80 00 e6 	breq	8000408e <get_arg+0x262>
80003ec6:	37 1b       	mov	r11,113
80003ec8:	f6 0a 18 00 	cp.b	r10,r11
80003ecc:	c0 70       	breq	80003eda <get_arg+0xae>
80003ece:	34 cb       	mov	r11,76
80003ed0:	f6 0a 18 00 	cp.b	r10,r11
80003ed4:	c0 51       	brne	80003ede <get_arg+0xb2>
80003ed6:	a3 b4       	sbr	r4,0x3
80003ed8:	cd b8       	rjmp	8000408e <get_arg+0x262>
80003eda:	a5 b4       	sbr	r4,0x5
80003edc:	cd 98       	rjmp	8000408e <get_arg+0x262>
80003ede:	08 9a       	mov	r10,r4
80003ee0:	0e 9b       	mov	r11,r7
80003ee2:	a5 aa       	sbr	r10,0x4
80003ee4:	17 3c       	ld.ub	r12,r11++
80003ee6:	a5 b4       	sbr	r4,0x5
80003ee8:	36 ce       	mov	lr,108
80003eea:	fc 0c 18 00 	cp.b	r12,lr
80003eee:	e0 80 00 d1 	breq	80004090 <get_arg+0x264>
80003ef2:	14 94       	mov	r4,r10
80003ef4:	cc d8       	rjmp	8000408e <get_arg+0x262>
80003ef6:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003efa:	36 7c       	mov	r12,103
80003efc:	f8 0a 18 00 	cp.b	r10,r12
80003f00:	e0 8b 00 27 	brhi	80003f4e <get_arg+0x122>
80003f04:	36 5b       	mov	r11,101
80003f06:	f6 0a 18 00 	cp.b	r10,r11
80003f0a:	c4 82       	brcc	80003f9a <get_arg+0x16e>
80003f0c:	34 fb       	mov	r11,79
80003f0e:	f6 0a 18 00 	cp.b	r10,r11
80003f12:	c4 80       	breq	80003fa2 <get_arg+0x176>
80003f14:	e0 8b 00 0c 	brhi	80003f2c <get_arg+0x100>
80003f18:	34 5b       	mov	r11,69
80003f1a:	f6 0a 18 00 	cp.b	r10,r11
80003f1e:	c3 e0       	breq	80003f9a <get_arg+0x16e>
80003f20:	34 7b       	mov	r11,71
80003f22:	f6 0a 18 00 	cp.b	r10,r11
80003f26:	c3 a0       	breq	80003f9a <get_arg+0x16e>
80003f28:	34 4b       	mov	r11,68
80003f2a:	c0 88       	rjmp	80003f3a <get_arg+0x10e>
80003f2c:	35 8b       	mov	r11,88
80003f2e:	f6 0a 18 00 	cp.b	r10,r11
80003f32:	c2 c0       	breq	80003f8a <get_arg+0x15e>
80003f34:	e0 8b 00 07 	brhi	80003f42 <get_arg+0x116>
80003f38:	35 5b       	mov	r11,85
80003f3a:	f6 0a 18 00 	cp.b	r10,r11
80003f3e:	c3 51       	brne	80003fa8 <get_arg+0x17c>
80003f40:	c3 18       	rjmp	80003fa2 <get_arg+0x176>
80003f42:	36 3b       	mov	r11,99
80003f44:	f6 0a 18 00 	cp.b	r10,r11
80003f48:	c2 f0       	breq	80003fa6 <get_arg+0x17a>
80003f4a:	36 4b       	mov	r11,100
80003f4c:	c0 e8       	rjmp	80003f68 <get_arg+0x13c>
80003f4e:	37 0b       	mov	r11,112
80003f50:	f6 0a 18 00 	cp.b	r10,r11
80003f54:	c2 50       	breq	80003f9e <get_arg+0x172>
80003f56:	e0 8b 00 0d 	brhi	80003f70 <get_arg+0x144>
80003f5a:	36 eb       	mov	r11,110
80003f5c:	f6 0a 18 00 	cp.b	r10,r11
80003f60:	c1 f0       	breq	80003f9e <get_arg+0x172>
80003f62:	e0 8b 00 14 	brhi	80003f8a <get_arg+0x15e>
80003f66:	36 9b       	mov	r11,105
80003f68:	f6 0a 18 00 	cp.b	r10,r11
80003f6c:	c1 e1       	brne	80003fa8 <get_arg+0x17c>
80003f6e:	c0 e8       	rjmp	80003f8a <get_arg+0x15e>
80003f70:	37 5b       	mov	r11,117
80003f72:	f6 0a 18 00 	cp.b	r10,r11
80003f76:	c0 a0       	breq	80003f8a <get_arg+0x15e>
80003f78:	37 8b       	mov	r11,120
80003f7a:	f6 0a 18 00 	cp.b	r10,r11
80003f7e:	c0 60       	breq	80003f8a <get_arg+0x15e>
80003f80:	37 3b       	mov	r11,115
80003f82:	f6 0a 18 00 	cp.b	r10,r11
80003f86:	c1 11       	brne	80003fa8 <get_arg+0x17c>
80003f88:	c0 b8       	rjmp	80003f9e <get_arg+0x172>
80003f8a:	ed b4 00 04 	bld	r4,0x4
80003f8e:	c0 a0       	breq	80003fa2 <get_arg+0x176>
80003f90:	ed b4 00 05 	bld	r4,0x5
80003f94:	c0 91       	brne	80003fa6 <get_arg+0x17a>
80003f96:	30 20       	mov	r0,2
80003f98:	c0 88       	rjmp	80003fa8 <get_arg+0x17c>
80003f9a:	30 40       	mov	r0,4
80003f9c:	c0 68       	rjmp	80003fa8 <get_arg+0x17c>
80003f9e:	30 30       	mov	r0,3
80003fa0:	c0 48       	rjmp	80003fa8 <get_arg+0x17c>
80003fa2:	30 10       	mov	r0,1
80003fa4:	c0 28       	rjmp	80003fa8 <get_arg+0x17c>
80003fa6:	30 00       	mov	r0,0
80003fa8:	40 3b       	lddsp	r11,sp[0xc]
80003faa:	5b fb       	cp.w	r11,-1
80003fac:	c0 40       	breq	80003fb4 <get_arg+0x188>
80003fae:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003fb2:	c6 e8       	rjmp	8000408e <get_arg+0x262>
80003fb4:	58 60       	cp.w	r0,6
80003fb6:	e0 8b 00 6c 	brhi	8000408e <get_arg+0x262>
80003fba:	6c 0a       	ld.w	r10,r6[0x0]
80003fbc:	ea cc ff ff 	sub	r12,r5,-1
80003fc0:	fe ce a7 88 	sub	lr,pc,-22648
80003fc4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003fc8:	f4 cb ff f8 	sub	r11,r10,-8
80003fcc:	8d 0b       	st.w	r6[0x0],r11
80003fce:	f4 ea 00 00 	ld.d	r10,r10[0]
80003fd2:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003fd6:	c0 f8       	rjmp	80003ff4 <get_arg+0x1c8>
80003fd8:	f4 cb ff fc 	sub	r11,r10,-4
80003fdc:	8d 0b       	st.w	r6[0x0],r11
80003fde:	74 0a       	ld.w	r10,r10[0x0]
80003fe0:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003fe4:	c0 88       	rjmp	80003ff4 <get_arg+0x1c8>
80003fe6:	f4 cb ff f8 	sub	r11,r10,-8
80003fea:	8d 0b       	st.w	r6[0x0],r11
80003fec:	f4 ea 00 00 	ld.d	r10,r10[0]
80003ff0:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003ff4:	0e 9b       	mov	r11,r7
80003ff6:	18 95       	mov	r5,r12
80003ff8:	c4 c8       	rjmp	80004090 <get_arg+0x264>
80003ffa:	62 0a       	ld.w	r10,r1[0x0]
80003ffc:	5b fa       	cp.w	r10,-1
80003ffe:	c0 a1       	brne	80004012 <get_arg+0x1e6>
80004000:	50 19       	stdsp	sp[0x4],r9
80004002:	50 28       	stdsp	sp[0x8],r8
80004004:	e0 6a 00 80 	mov	r10,128
80004008:	30 0b       	mov	r11,0
8000400a:	02 9c       	mov	r12,r1
8000400c:	ce de       	rcall	80003de6 <memset>
8000400e:	40 28       	lddsp	r8,sp[0x8]
80004010:	40 19       	lddsp	r9,sp[0x4]
80004012:	e4 cc 00 01 	sub	r12,r2,1
80004016:	0e 9b       	mov	r11,r7
80004018:	50 3c       	stdsp	sp[0xc],r12
8000401a:	f2 0c 0c 49 	max	r9,r9,r12
8000401e:	c3 98       	rjmp	80004090 <get_arg+0x264>
80004020:	62 0a       	ld.w	r10,r1[0x0]
80004022:	5b fa       	cp.w	r10,-1
80004024:	c0 a1       	brne	80004038 <get_arg+0x20c>
80004026:	50 19       	stdsp	sp[0x4],r9
80004028:	50 28       	stdsp	sp[0x8],r8
8000402a:	e0 6a 00 80 	mov	r10,128
8000402e:	30 0b       	mov	r11,0
80004030:	02 9c       	mov	r12,r1
80004032:	cd ae       	rcall	80003de6 <memset>
80004034:	40 28       	lddsp	r8,sp[0x8]
80004036:	40 19       	lddsp	r9,sp[0x4]
80004038:	20 12       	sub	r2,1
8000403a:	30 0a       	mov	r10,0
8000403c:	0e 9b       	mov	r11,r7
8000403e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004042:	f2 02 0c 49 	max	r9,r9,r2
80004046:	c2 58       	rjmp	80004090 <get_arg+0x264>
80004048:	16 97       	mov	r7,r11
8000404a:	6c 0a       	ld.w	r10,r6[0x0]
8000404c:	f4 cb ff fc 	sub	r11,r10,-4
80004050:	8d 0b       	st.w	r6[0x0],r11
80004052:	74 0a       	ld.w	r10,r10[0x0]
80004054:	0e 9b       	mov	r11,r7
80004056:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000405a:	2f f5       	sub	r5,-1
8000405c:	c1 a8       	rjmp	80004090 <get_arg+0x264>
8000405e:	f4 c2 00 30 	sub	r2,r10,48
80004062:	c0 68       	rjmp	8000406e <get_arg+0x242>
80004064:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004068:	2f f7       	sub	r7,-1
8000406a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000406e:	0f 8a       	ld.ub	r10,r7[0x0]
80004070:	58 0a       	cp.w	r10,0
80004072:	c0 e0       	breq	8000408e <get_arg+0x262>
80004074:	23 0a       	sub	r10,48
80004076:	58 9a       	cp.w	r10,9
80004078:	fe 98 ff f6 	brls	80004064 <get_arg+0x238>
8000407c:	c0 98       	rjmp	8000408e <get_arg+0x262>
8000407e:	2f f7       	sub	r7,-1
80004080:	0f 8a       	ld.ub	r10,r7[0x0]
80004082:	58 0a       	cp.w	r10,0
80004084:	c0 50       	breq	8000408e <get_arg+0x262>
80004086:	23 0a       	sub	r10,48
80004088:	58 9a       	cp.w	r10,9
8000408a:	fe 98 ff fa 	brls	8000407e <get_arg+0x252>
8000408e:	0e 9b       	mov	r11,r7
80004090:	40 7c       	lddsp	r12,sp[0x1c]
80004092:	30 ba       	mov	r10,11
80004094:	f4 0c 18 00 	cp.b	r12,r10
80004098:	fe 91 fe f4 	brne	80003e80 <get_arg+0x54>
8000409c:	40 42       	lddsp	r2,sp[0x10]
8000409e:	17 8c       	ld.ub	r12,r11[0x0]
800040a0:	0a 32       	cp.w	r2,r5
800040a2:	5f 4a       	srge	r10
800040a4:	f0 0c 18 00 	cp.b	r12,r8
800040a8:	5f 1c       	srne	r12
800040aa:	f9 ea 00 0a 	and	r10,r12,r10
800040ae:	f0 0a 18 00 	cp.b	r10,r8
800040b2:	fe 91 fe d1 	brne	80003e54 <get_arg+0x28>
800040b6:	30 08       	mov	r8,0
800040b8:	40 4e       	lddsp	lr,sp[0x10]
800040ba:	17 8a       	ld.ub	r10,r11[0x0]
800040bc:	e2 05 00 21 	add	r1,r1,r5<<0x2
800040c0:	f0 0a 18 00 	cp.b	r10,r8
800040c4:	fc 09 17 10 	movne	r9,lr
800040c8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800040cc:	06 9e       	mov	lr,r3
800040ce:	c2 a8       	rjmp	80004122 <get_arg+0x2f6>
800040d0:	62 0a       	ld.w	r10,r1[0x0]
800040d2:	58 3a       	cp.w	r10,3
800040d4:	c1 e0       	breq	80004110 <get_arg+0x2e4>
800040d6:	e0 89 00 07 	brgt	800040e4 <get_arg+0x2b8>
800040da:	58 1a       	cp.w	r10,1
800040dc:	c1 a0       	breq	80004110 <get_arg+0x2e4>
800040de:	58 2a       	cp.w	r10,2
800040e0:	c1 81       	brne	80004110 <get_arg+0x2e4>
800040e2:	c0 58       	rjmp	800040ec <get_arg+0x2c0>
800040e4:	58 5a       	cp.w	r10,5
800040e6:	c0 c0       	breq	800040fe <get_arg+0x2d2>
800040e8:	c0 b5       	brlt	800040fe <get_arg+0x2d2>
800040ea:	c1 38       	rjmp	80004110 <get_arg+0x2e4>
800040ec:	6c 0a       	ld.w	r10,r6[0x0]
800040ee:	f4 cc ff f8 	sub	r12,r10,-8
800040f2:	8d 0c       	st.w	r6[0x0],r12
800040f4:	f4 e2 00 00 	ld.d	r2,r10[0]
800040f8:	f0 e3 00 00 	st.d	r8[0],r2
800040fc:	c1 08       	rjmp	8000411c <get_arg+0x2f0>
800040fe:	6c 0a       	ld.w	r10,r6[0x0]
80004100:	f4 cc ff f8 	sub	r12,r10,-8
80004104:	8d 0c       	st.w	r6[0x0],r12
80004106:	f4 e2 00 00 	ld.d	r2,r10[0]
8000410a:	f0 e3 00 00 	st.d	r8[0],r2
8000410e:	c0 78       	rjmp	8000411c <get_arg+0x2f0>
80004110:	6c 0a       	ld.w	r10,r6[0x0]
80004112:	f4 cc ff fc 	sub	r12,r10,-4
80004116:	8d 0c       	st.w	r6[0x0],r12
80004118:	74 0a       	ld.w	r10,r10[0x0]
8000411a:	91 0a       	st.w	r8[0x0],r10
8000411c:	2f f5       	sub	r5,-1
8000411e:	2f 88       	sub	r8,-8
80004120:	2f c1       	sub	r1,-4
80004122:	12 35       	cp.w	r5,r9
80004124:	fe 9a ff d6 	brle	800040d0 <get_arg+0x2a4>
80004128:	1c 93       	mov	r3,lr
8000412a:	40 52       	lddsp	r2,sp[0x14]
8000412c:	40 6e       	lddsp	lr,sp[0x18]
8000412e:	85 05       	st.w	r2[0x0],r5
80004130:	9d 0b       	st.w	lr[0x0],r11
80004132:	40 4b       	lddsp	r11,sp[0x10]
80004134:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004138:	2f 8d       	sub	sp,-32
8000413a:	d8 32       	popm	r0-r7,pc

8000413c <__sprint_r>:
8000413c:	d4 21       	pushm	r4-r7,lr
8000413e:	14 97       	mov	r7,r10
80004140:	74 28       	ld.w	r8,r10[0x8]
80004142:	58 08       	cp.w	r8,0
80004144:	c0 41       	brne	8000414c <__sprint_r+0x10>
80004146:	95 18       	st.w	r10[0x4],r8
80004148:	10 9c       	mov	r12,r8
8000414a:	d8 22       	popm	r4-r7,pc
8000414c:	e0 a0 18 b4 	rcall	800072b4 <__sfvwrite_r>
80004150:	30 08       	mov	r8,0
80004152:	8f 18       	st.w	r7[0x4],r8
80004154:	8f 28       	st.w	r7[0x8],r8
80004156:	d8 22       	popm	r4-r7,pc

80004158 <_vfprintf_r>:
80004158:	d4 31       	pushm	r0-r7,lr
8000415a:	fa cd 06 bc 	sub	sp,sp,1724
8000415e:	51 09       	stdsp	sp[0x40],r9
80004160:	16 91       	mov	r1,r11
80004162:	14 97       	mov	r7,r10
80004164:	18 95       	mov	r5,r12
80004166:	e0 a0 1a 1d 	rcall	800075a0 <_localeconv_r>
8000416a:	78 0c       	ld.w	r12,r12[0x0]
8000416c:	50 cc       	stdsp	sp[0x30],r12
8000416e:	58 05       	cp.w	r5,0
80004170:	c0 70       	breq	8000417e <_vfprintf_r+0x26>
80004172:	6a 68       	ld.w	r8,r5[0x18]
80004174:	58 08       	cp.w	r8,0
80004176:	c0 41       	brne	8000417e <_vfprintf_r+0x26>
80004178:	0a 9c       	mov	r12,r5
8000417a:	e0 a0 17 3d 	rcall	80006ff4 <__sinit>
8000417e:	fe c8 a5 82 	sub	r8,pc,-23166
80004182:	10 31       	cp.w	r1,r8
80004184:	c0 31       	brne	8000418a <_vfprintf_r+0x32>
80004186:	6a 01       	ld.w	r1,r5[0x0]
80004188:	c0 c8       	rjmp	800041a0 <_vfprintf_r+0x48>
8000418a:	fe c8 a5 6e 	sub	r8,pc,-23186
8000418e:	10 31       	cp.w	r1,r8
80004190:	c0 31       	brne	80004196 <_vfprintf_r+0x3e>
80004192:	6a 11       	ld.w	r1,r5[0x4]
80004194:	c0 68       	rjmp	800041a0 <_vfprintf_r+0x48>
80004196:	fe c8 a5 5a 	sub	r8,pc,-23206
8000419a:	10 31       	cp.w	r1,r8
8000419c:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800041a0:	82 68       	ld.sh	r8,r1[0xc]
800041a2:	ed b8 00 03 	bld	r8,0x3
800041a6:	c0 41       	brne	800041ae <_vfprintf_r+0x56>
800041a8:	62 48       	ld.w	r8,r1[0x10]
800041aa:	58 08       	cp.w	r8,0
800041ac:	c0 71       	brne	800041ba <_vfprintf_r+0x62>
800041ae:	02 9b       	mov	r11,r1
800041b0:	0a 9c       	mov	r12,r5
800041b2:	e0 a0 0f 5d 	rcall	8000606c <__swsetup_r>
800041b6:	e0 81 0f 54 	brne	8000605e <_vfprintf_r+0x1f06>
800041ba:	82 68       	ld.sh	r8,r1[0xc]
800041bc:	10 99       	mov	r9,r8
800041be:	e2 19 00 1a 	andl	r9,0x1a,COH
800041c2:	58 a9       	cp.w	r9,10
800041c4:	c3 c1       	brne	8000423c <_vfprintf_r+0xe4>
800041c6:	82 79       	ld.sh	r9,r1[0xe]
800041c8:	30 0a       	mov	r10,0
800041ca:	f4 09 19 00 	cp.h	r9,r10
800041ce:	c3 75       	brlt	8000423c <_vfprintf_r+0xe4>
800041d0:	a1 d8       	cbr	r8,0x1
800041d2:	fb 58 05 d0 	st.h	sp[1488],r8
800041d6:	62 88       	ld.w	r8,r1[0x20]
800041d8:	fb 48 05 e4 	st.w	sp[1508],r8
800041dc:	62 a8       	ld.w	r8,r1[0x28]
800041de:	fb 48 05 ec 	st.w	sp[1516],r8
800041e2:	fa c8 ff bc 	sub	r8,sp,-68
800041e6:	fb 48 05 d4 	st.w	sp[1492],r8
800041ea:	fb 48 05 c4 	st.w	sp[1476],r8
800041ee:	e0 68 04 00 	mov	r8,1024
800041f2:	fb 48 05 d8 	st.w	sp[1496],r8
800041f6:	fb 48 05 cc 	st.w	sp[1484],r8
800041fa:	30 08       	mov	r8,0
800041fc:	fb 59 05 d2 	st.h	sp[1490],r9
80004200:	0e 9a       	mov	r10,r7
80004202:	41 09       	lddsp	r9,sp[0x40]
80004204:	fa c7 fa 3c 	sub	r7,sp,-1476
80004208:	fb 48 05 dc 	st.w	sp[1500],r8
8000420c:	0a 9c       	mov	r12,r5
8000420e:	0e 9b       	mov	r11,r7
80004210:	ca 4f       	rcall	80004158 <_vfprintf_r>
80004212:	50 bc       	stdsp	sp[0x2c],r12
80004214:	c0 95       	brlt	80004226 <_vfprintf_r+0xce>
80004216:	0e 9b       	mov	r11,r7
80004218:	0a 9c       	mov	r12,r5
8000421a:	e0 a0 16 15 	rcall	80006e44 <_fflush_r>
8000421e:	40 be       	lddsp	lr,sp[0x2c]
80004220:	f9 be 01 ff 	movne	lr,-1
80004224:	50 be       	stdsp	sp[0x2c],lr
80004226:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000422a:	ed b8 00 06 	bld	r8,0x6
8000422e:	e0 81 0f 1a 	brne	80006062 <_vfprintf_r+0x1f0a>
80004232:	82 68       	ld.sh	r8,r1[0xc]
80004234:	a7 a8       	sbr	r8,0x6
80004236:	a2 68       	st.h	r1[0xc],r8
80004238:	e0 8f 0f 15 	bral	80006062 <_vfprintf_r+0x1f0a>
8000423c:	30 08       	mov	r8,0
8000423e:	fb 48 06 b4 	st.w	sp[1716],r8
80004242:	fb 48 06 90 	st.w	sp[1680],r8
80004246:	fb 48 06 8c 	st.w	sp[1676],r8
8000424a:	fb 48 06 b0 	st.w	sp[1712],r8
8000424e:	30 08       	mov	r8,0
80004250:	30 09       	mov	r9,0
80004252:	50 a7       	stdsp	sp[0x28],r7
80004254:	50 78       	stdsp	sp[0x1c],r8
80004256:	fa c3 f9 e0 	sub	r3,sp,-1568
8000425a:	3f f8       	mov	r8,-1
8000425c:	50 59       	stdsp	sp[0x14],r9
8000425e:	fb 43 06 88 	st.w	sp[1672],r3
80004262:	fb 48 05 44 	st.w	sp[1348],r8
80004266:	12 9c       	mov	r12,r9
80004268:	50 69       	stdsp	sp[0x18],r9
8000426a:	50 d9       	stdsp	sp[0x34],r9
8000426c:	50 e9       	stdsp	sp[0x38],r9
8000426e:	50 b9       	stdsp	sp[0x2c],r9
80004270:	12 97       	mov	r7,r9
80004272:	0a 94       	mov	r4,r5
80004274:	40 a2       	lddsp	r2,sp[0x28]
80004276:	32 5a       	mov	r10,37
80004278:	30 08       	mov	r8,0
8000427a:	c0 28       	rjmp	8000427e <_vfprintf_r+0x126>
8000427c:	2f f2       	sub	r2,-1
8000427e:	05 89       	ld.ub	r9,r2[0x0]
80004280:	f0 09 18 00 	cp.b	r9,r8
80004284:	5f 1b       	srne	r11
80004286:	f4 09 18 00 	cp.b	r9,r10
8000428a:	5f 19       	srne	r9
8000428c:	f3 eb 00 0b 	and	r11,r9,r11
80004290:	f0 0b 18 00 	cp.b	r11,r8
80004294:	cf 41       	brne	8000427c <_vfprintf_r+0x124>
80004296:	40 ab       	lddsp	r11,sp[0x28]
80004298:	e4 0b 01 06 	sub	r6,r2,r11
8000429c:	c1 e0       	breq	800042d8 <_vfprintf_r+0x180>
8000429e:	fa f8 06 90 	ld.w	r8,sp[1680]
800042a2:	0c 08       	add	r8,r6
800042a4:	87 0b       	st.w	r3[0x0],r11
800042a6:	fb 48 06 90 	st.w	sp[1680],r8
800042aa:	87 16       	st.w	r3[0x4],r6
800042ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800042b0:	2f f8       	sub	r8,-1
800042b2:	fb 48 06 8c 	st.w	sp[1676],r8
800042b6:	58 78       	cp.w	r8,7
800042b8:	e0 89 00 04 	brgt	800042c0 <_vfprintf_r+0x168>
800042bc:	2f 83       	sub	r3,-8
800042be:	c0 a8       	rjmp	800042d2 <_vfprintf_r+0x17a>
800042c0:	fa ca f9 78 	sub	r10,sp,-1672
800042c4:	02 9b       	mov	r11,r1
800042c6:	08 9c       	mov	r12,r4
800042c8:	c3 af       	rcall	8000413c <__sprint_r>
800042ca:	e0 81 0e c6 	brne	80006056 <_vfprintf_r+0x1efe>
800042ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800042d2:	40 ba       	lddsp	r10,sp[0x2c]
800042d4:	0c 0a       	add	r10,r6
800042d6:	50 ba       	stdsp	sp[0x2c],r10
800042d8:	05 89       	ld.ub	r9,r2[0x0]
800042da:	30 08       	mov	r8,0
800042dc:	f0 09 18 00 	cp.b	r9,r8
800042e0:	e0 80 0e aa 	breq	80006034 <_vfprintf_r+0x1edc>
800042e4:	30 09       	mov	r9,0
800042e6:	fb 68 06 bb 	st.b	sp[1723],r8
800042ea:	0e 96       	mov	r6,r7
800042ec:	e4 c8 ff ff 	sub	r8,r2,-1
800042f0:	3f fe       	mov	lr,-1
800042f2:	50 93       	stdsp	sp[0x24],r3
800042f4:	50 41       	stdsp	sp[0x10],r1
800042f6:	0e 93       	mov	r3,r7
800042f8:	04 91       	mov	r1,r2
800042fa:	50 89       	stdsp	sp[0x20],r9
800042fc:	50 a8       	stdsp	sp[0x28],r8
800042fe:	50 2e       	stdsp	sp[0x8],lr
80004300:	50 39       	stdsp	sp[0xc],r9
80004302:	12 95       	mov	r5,r9
80004304:	12 90       	mov	r0,r9
80004306:	10 97       	mov	r7,r8
80004308:	08 92       	mov	r2,r4
8000430a:	c0 78       	rjmp	80004318 <_vfprintf_r+0x1c0>
8000430c:	3f fc       	mov	r12,-1
8000430e:	08 97       	mov	r7,r4
80004310:	50 2c       	stdsp	sp[0x8],r12
80004312:	c0 38       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004314:	30 0b       	mov	r11,0
80004316:	50 3b       	stdsp	sp[0xc],r11
80004318:	0f 38       	ld.ub	r8,r7++
8000431a:	c0 28       	rjmp	8000431e <_vfprintf_r+0x1c6>
8000431c:	12 90       	mov	r0,r9
8000431e:	f0 c9 00 20 	sub	r9,r8,32
80004322:	e0 49 00 58 	cp.w	r9,88
80004326:	e0 8b 0a 30 	brhi	80005786 <_vfprintf_r+0x162e>
8000432a:	fe ca aa d6 	sub	r10,pc,-21802
8000432e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004332:	50 a7       	stdsp	sp[0x28],r7
80004334:	50 80       	stdsp	sp[0x20],r0
80004336:	0c 97       	mov	r7,r6
80004338:	04 94       	mov	r4,r2
8000433a:	06 96       	mov	r6,r3
8000433c:	02 92       	mov	r2,r1
8000433e:	fe c9 a8 ae 	sub	r9,pc,-22354
80004342:	40 93       	lddsp	r3,sp[0x24]
80004344:	10 90       	mov	r0,r8
80004346:	40 41       	lddsp	r1,sp[0x10]
80004348:	50 d9       	stdsp	sp[0x34],r9
8000434a:	e0 8f 08 8e 	bral	80005466 <_vfprintf_r+0x130e>
8000434e:	30 08       	mov	r8,0
80004350:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004354:	f0 09 18 00 	cp.b	r9,r8
80004358:	ce 01       	brne	80004318 <_vfprintf_r+0x1c0>
8000435a:	32 08       	mov	r8,32
8000435c:	c6 e8       	rjmp	80004438 <_vfprintf_r+0x2e0>
8000435e:	a1 a5       	sbr	r5,0x0
80004360:	cd cb       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004362:	0f 89       	ld.ub	r9,r7[0x0]
80004364:	f2 c8 00 30 	sub	r8,r9,48
80004368:	58 98       	cp.w	r8,9
8000436a:	e0 8b 00 1d 	brhi	800043a4 <_vfprintf_r+0x24c>
8000436e:	ee c8 ff ff 	sub	r8,r7,-1
80004372:	30 0b       	mov	r11,0
80004374:	23 09       	sub	r9,48
80004376:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000437a:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000437e:	11 39       	ld.ub	r9,r8++
80004380:	f2 ca 00 30 	sub	r10,r9,48
80004384:	58 9a       	cp.w	r10,9
80004386:	fe 98 ff f7 	brls	80004374 <_vfprintf_r+0x21c>
8000438a:	e0 49 00 24 	cp.w	r9,36
8000438e:	cc 31       	brne	80004314 <_vfprintf_r+0x1bc>
80004390:	e0 4b 00 20 	cp.w	r11,32
80004394:	e0 89 0e 60 	brgt	80006054 <_vfprintf_r+0x1efc>
80004398:	20 1b       	sub	r11,1
8000439a:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000439e:	12 3b       	cp.w	r11,r9
800043a0:	c0 95       	brlt	800043b2 <_vfprintf_r+0x25a>
800043a2:	c1 08       	rjmp	800043c2 <_vfprintf_r+0x26a>
800043a4:	fa f9 06 b4 	ld.w	r9,sp[1716]
800043a8:	ec ca ff ff 	sub	r10,r6,-1
800043ac:	12 36       	cp.w	r6,r9
800043ae:	c1 f5       	brlt	800043ec <_vfprintf_r+0x294>
800043b0:	c2 68       	rjmp	800043fc <_vfprintf_r+0x2a4>
800043b2:	fa ce f9 44 	sub	lr,sp,-1724
800043b6:	10 97       	mov	r7,r8
800043b8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800043bc:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800043c0:	c3 58       	rjmp	8000442a <_vfprintf_r+0x2d2>
800043c2:	10 97       	mov	r7,r8
800043c4:	fa c8 f9 50 	sub	r8,sp,-1712
800043c8:	1a d8       	st.w	--sp,r8
800043ca:	fa c8 fa b8 	sub	r8,sp,-1352
800043ce:	1a d8       	st.w	--sp,r8
800043d0:	fa c8 fb b4 	sub	r8,sp,-1100
800043d4:	02 9a       	mov	r10,r1
800043d6:	1a d8       	st.w	--sp,r8
800043d8:	04 9c       	mov	r12,r2
800043da:	fa c8 f9 40 	sub	r8,sp,-1728
800043de:	fa c9 ff b4 	sub	r9,sp,-76
800043e2:	fe b0 fd 25 	rcall	80003e2c <get_arg>
800043e6:	2f dd       	sub	sp,-12
800043e8:	78 00       	ld.w	r0,r12[0x0]
800043ea:	c2 08       	rjmp	8000442a <_vfprintf_r+0x2d2>
800043ec:	fa cc f9 44 	sub	r12,sp,-1724
800043f0:	14 96       	mov	r6,r10
800043f2:	f8 03 00 38 	add	r8,r12,r3<<0x3
800043f6:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800043fa:	c1 88       	rjmp	8000442a <_vfprintf_r+0x2d2>
800043fc:	41 08       	lddsp	r8,sp[0x40]
800043fe:	59 f9       	cp.w	r9,31
80004400:	e0 89 00 11 	brgt	80004422 <_vfprintf_r+0x2ca>
80004404:	f0 cb ff fc 	sub	r11,r8,-4
80004408:	51 0b       	stdsp	sp[0x40],r11
8000440a:	70 00       	ld.w	r0,r8[0x0]
8000440c:	fa cb f9 44 	sub	r11,sp,-1724
80004410:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004414:	f1 40 fd 88 	st.w	r8[-632],r0
80004418:	2f f9       	sub	r9,-1
8000441a:	14 96       	mov	r6,r10
8000441c:	fb 49 06 b4 	st.w	sp[1716],r9
80004420:	c0 58       	rjmp	8000442a <_vfprintf_r+0x2d2>
80004422:	70 00       	ld.w	r0,r8[0x0]
80004424:	14 96       	mov	r6,r10
80004426:	2f c8       	sub	r8,-4
80004428:	51 08       	stdsp	sp[0x40],r8
8000442a:	58 00       	cp.w	r0,0
8000442c:	fe 94 ff 76 	brge	80004318 <_vfprintf_r+0x1c0>
80004430:	5c 30       	neg	r0
80004432:	a3 a5       	sbr	r5,0x2
80004434:	c7 2b       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004436:	32 b8       	mov	r8,43
80004438:	fb 68 06 bb 	st.b	sp[1723],r8
8000443c:	c6 eb       	rjmp	80004318 <_vfprintf_r+0x1c0>
8000443e:	0f 38       	ld.ub	r8,r7++
80004440:	e0 48 00 2a 	cp.w	r8,42
80004444:	c0 30       	breq	8000444a <_vfprintf_r+0x2f2>
80004446:	30 09       	mov	r9,0
80004448:	c7 98       	rjmp	8000453a <_vfprintf_r+0x3e2>
8000444a:	0f 88       	ld.ub	r8,r7[0x0]
8000444c:	f0 c9 00 30 	sub	r9,r8,48
80004450:	58 99       	cp.w	r9,9
80004452:	e0 8b 00 1f 	brhi	80004490 <_vfprintf_r+0x338>
80004456:	ee c4 ff ff 	sub	r4,r7,-1
8000445a:	30 0b       	mov	r11,0
8000445c:	23 08       	sub	r8,48
8000445e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004462:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80004466:	09 38       	ld.ub	r8,r4++
80004468:	f0 c9 00 30 	sub	r9,r8,48
8000446c:	58 99       	cp.w	r9,9
8000446e:	fe 98 ff f7 	brls	8000445c <_vfprintf_r+0x304>
80004472:	e0 48 00 24 	cp.w	r8,36
80004476:	fe 91 ff 4f 	brne	80004314 <_vfprintf_r+0x1bc>
8000447a:	e0 4b 00 20 	cp.w	r11,32
8000447e:	e0 89 0d eb 	brgt	80006054 <_vfprintf_r+0x1efc>
80004482:	20 1b       	sub	r11,1
80004484:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004488:	10 3b       	cp.w	r11,r8
8000448a:	c0 a5       	brlt	8000449e <_vfprintf_r+0x346>
8000448c:	c1 18       	rjmp	800044ae <_vfprintf_r+0x356>
8000448e:	d7 03       	nop
80004490:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004494:	ec c9 ff ff 	sub	r9,r6,-1
80004498:	14 36       	cp.w	r6,r10
8000449a:	c1 f5       	brlt	800044d8 <_vfprintf_r+0x380>
8000449c:	c2 88       	rjmp	800044ec <_vfprintf_r+0x394>
8000449e:	fa ca f9 44 	sub	r10,sp,-1724
800044a2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800044a6:	f6 fb fd 88 	ld.w	r11,r11[-632]
800044aa:	50 2b       	stdsp	sp[0x8],r11
800044ac:	c3 c8       	rjmp	80004524 <_vfprintf_r+0x3cc>
800044ae:	fa c8 f9 50 	sub	r8,sp,-1712
800044b2:	1a d8       	st.w	--sp,r8
800044b4:	fa c8 fa b8 	sub	r8,sp,-1352
800044b8:	1a d8       	st.w	--sp,r8
800044ba:	fa c8 fb b4 	sub	r8,sp,-1100
800044be:	02 9a       	mov	r10,r1
800044c0:	1a d8       	st.w	--sp,r8
800044c2:	04 9c       	mov	r12,r2
800044c4:	fa c8 f9 40 	sub	r8,sp,-1728
800044c8:	fa c9 ff b4 	sub	r9,sp,-76
800044cc:	fe b0 fc b0 	rcall	80003e2c <get_arg>
800044d0:	2f dd       	sub	sp,-12
800044d2:	78 0c       	ld.w	r12,r12[0x0]
800044d4:	50 2c       	stdsp	sp[0x8],r12
800044d6:	c2 78       	rjmp	80004524 <_vfprintf_r+0x3cc>
800044d8:	12 96       	mov	r6,r9
800044da:	0e 94       	mov	r4,r7
800044dc:	fa c9 f9 44 	sub	r9,sp,-1724
800044e0:	f2 03 00 38 	add	r8,r9,r3<<0x3
800044e4:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800044e8:	50 28       	stdsp	sp[0x8],r8
800044ea:	c1 d8       	rjmp	80004524 <_vfprintf_r+0x3cc>
800044ec:	41 08       	lddsp	r8,sp[0x40]
800044ee:	59 fa       	cp.w	r10,31
800044f0:	e0 89 00 14 	brgt	80004518 <_vfprintf_r+0x3c0>
800044f4:	f0 cb ff fc 	sub	r11,r8,-4
800044f8:	70 08       	ld.w	r8,r8[0x0]
800044fa:	51 0b       	stdsp	sp[0x40],r11
800044fc:	50 28       	stdsp	sp[0x8],r8
800044fe:	fa c6 f9 44 	sub	r6,sp,-1724
80004502:	40 2e       	lddsp	lr,sp[0x8]
80004504:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004508:	f1 4e fd 88 	st.w	r8[-632],lr
8000450c:	2f fa       	sub	r10,-1
8000450e:	0e 94       	mov	r4,r7
80004510:	fb 4a 06 b4 	st.w	sp[1716],r10
80004514:	12 96       	mov	r6,r9
80004516:	c0 78       	rjmp	80004524 <_vfprintf_r+0x3cc>
80004518:	70 0c       	ld.w	r12,r8[0x0]
8000451a:	0e 94       	mov	r4,r7
8000451c:	2f c8       	sub	r8,-4
8000451e:	50 2c       	stdsp	sp[0x8],r12
80004520:	12 96       	mov	r6,r9
80004522:	51 08       	stdsp	sp[0x40],r8
80004524:	40 2b       	lddsp	r11,sp[0x8]
80004526:	58 0b       	cp.w	r11,0
80004528:	fe 95 fe f2 	brlt	8000430c <_vfprintf_r+0x1b4>
8000452c:	08 97       	mov	r7,r4
8000452e:	cf 5a       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004530:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004534:	0f 38       	ld.ub	r8,r7++
80004536:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000453a:	f0 ca 00 30 	sub	r10,r8,48
8000453e:	58 9a       	cp.w	r10,9
80004540:	fe 98 ff f8 	brls	80004530 <_vfprintf_r+0x3d8>
80004544:	3f fa       	mov	r10,-1
80004546:	f2 0a 0c 49 	max	r9,r9,r10
8000454a:	50 29       	stdsp	sp[0x8],r9
8000454c:	ce 9a       	rjmp	8000431e <_vfprintf_r+0x1c6>
8000454e:	a7 b5       	sbr	r5,0x7
80004550:	ce 4a       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004552:	30 09       	mov	r9,0
80004554:	23 08       	sub	r8,48
80004556:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000455a:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000455e:	0f 38       	ld.ub	r8,r7++
80004560:	f0 ca 00 30 	sub	r10,r8,48
80004564:	58 9a       	cp.w	r10,9
80004566:	fe 98 ff f7 	brls	80004554 <_vfprintf_r+0x3fc>
8000456a:	e0 48 00 24 	cp.w	r8,36
8000456e:	fe 91 fe d7 	brne	8000431c <_vfprintf_r+0x1c4>
80004572:	e0 49 00 20 	cp.w	r9,32
80004576:	e0 89 0d 6f 	brgt	80006054 <_vfprintf_r+0x1efc>
8000457a:	f2 c3 00 01 	sub	r3,r9,1
8000457e:	30 19       	mov	r9,1
80004580:	50 39       	stdsp	sp[0xc],r9
80004582:	cc ba       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004584:	a3 b5       	sbr	r5,0x3
80004586:	cc 9a       	rjmp	80004318 <_vfprintf_r+0x1c0>
80004588:	a7 a5       	sbr	r5,0x6
8000458a:	cc 7a       	rjmp	80004318 <_vfprintf_r+0x1c0>
8000458c:	0a 98       	mov	r8,r5
8000458e:	a5 b5       	sbr	r5,0x5
80004590:	a5 a8       	sbr	r8,0x4
80004592:	0f 89       	ld.ub	r9,r7[0x0]
80004594:	36 ce       	mov	lr,108
80004596:	fc 09 18 00 	cp.b	r9,lr
8000459a:	f7 b7 00 ff 	subeq	r7,-1
8000459e:	f0 05 17 10 	movne	r5,r8
800045a2:	cb ba       	rjmp	80004318 <_vfprintf_r+0x1c0>
800045a4:	a5 b5       	sbr	r5,0x5
800045a6:	cb 9a       	rjmp	80004318 <_vfprintf_r+0x1c0>
800045a8:	50 a7       	stdsp	sp[0x28],r7
800045aa:	50 80       	stdsp	sp[0x20],r0
800045ac:	0c 97       	mov	r7,r6
800045ae:	10 90       	mov	r0,r8
800045b0:	06 96       	mov	r6,r3
800045b2:	04 94       	mov	r4,r2
800045b4:	40 93       	lddsp	r3,sp[0x24]
800045b6:	02 92       	mov	r2,r1
800045b8:	0e 99       	mov	r9,r7
800045ba:	40 41       	lddsp	r1,sp[0x10]
800045bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045c0:	40 3c       	lddsp	r12,sp[0xc]
800045c2:	58 0c       	cp.w	r12,0
800045c4:	c1 d0       	breq	800045fe <_vfprintf_r+0x4a6>
800045c6:	10 36       	cp.w	r6,r8
800045c8:	c0 64       	brge	800045d4 <_vfprintf_r+0x47c>
800045ca:	fa cb f9 44 	sub	r11,sp,-1724
800045ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045d2:	c1 d8       	rjmp	8000460c <_vfprintf_r+0x4b4>
800045d4:	fa c8 f9 50 	sub	r8,sp,-1712
800045d8:	1a d8       	st.w	--sp,r8
800045da:	fa c8 fa b8 	sub	r8,sp,-1352
800045de:	1a d8       	st.w	--sp,r8
800045e0:	fa c8 fb b4 	sub	r8,sp,-1100
800045e4:	1a d8       	st.w	--sp,r8
800045e6:	fa c8 f9 40 	sub	r8,sp,-1728
800045ea:	fa c9 ff b4 	sub	r9,sp,-76
800045ee:	04 9a       	mov	r10,r2
800045f0:	0c 9b       	mov	r11,r6
800045f2:	08 9c       	mov	r12,r4
800045f4:	fe b0 fc 1c 	rcall	80003e2c <get_arg>
800045f8:	2f dd       	sub	sp,-12
800045fa:	19 b8       	ld.ub	r8,r12[0x3]
800045fc:	c2 28       	rjmp	80004640 <_vfprintf_r+0x4e8>
800045fe:	2f f7       	sub	r7,-1
80004600:	10 39       	cp.w	r9,r8
80004602:	c0 84       	brge	80004612 <_vfprintf_r+0x4ba>
80004604:	fa ca f9 44 	sub	r10,sp,-1724
80004608:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000460c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004610:	c1 88       	rjmp	80004640 <_vfprintf_r+0x4e8>
80004612:	41 09       	lddsp	r9,sp[0x40]
80004614:	59 f8       	cp.w	r8,31
80004616:	e0 89 00 12 	brgt	8000463a <_vfprintf_r+0x4e2>
8000461a:	f2 ca ff fc 	sub	r10,r9,-4
8000461e:	51 0a       	stdsp	sp[0x40],r10
80004620:	72 09       	ld.w	r9,r9[0x0]
80004622:	fa c6 f9 44 	sub	r6,sp,-1724
80004626:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000462a:	2f f8       	sub	r8,-1
8000462c:	f5 49 fd 88 	st.w	r10[-632],r9
80004630:	fb 48 06 b4 	st.w	sp[1716],r8
80004634:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004638:	c0 48       	rjmp	80004640 <_vfprintf_r+0x4e8>
8000463a:	13 b8       	ld.ub	r8,r9[0x3]
8000463c:	2f c9       	sub	r9,-4
8000463e:	51 09       	stdsp	sp[0x40],r9
80004640:	fb 68 06 60 	st.b	sp[1632],r8
80004644:	30 0e       	mov	lr,0
80004646:	30 08       	mov	r8,0
80004648:	30 12       	mov	r2,1
8000464a:	fb 68 06 bb 	st.b	sp[1723],r8
8000464e:	50 2e       	stdsp	sp[0x8],lr
80004650:	e0 8f 08 ad 	bral	800057aa <_vfprintf_r+0x1652>
80004654:	50 a7       	stdsp	sp[0x28],r7
80004656:	50 80       	stdsp	sp[0x20],r0
80004658:	0c 97       	mov	r7,r6
8000465a:	04 94       	mov	r4,r2
8000465c:	06 96       	mov	r6,r3
8000465e:	02 92       	mov	r2,r1
80004660:	40 93       	lddsp	r3,sp[0x24]
80004662:	10 90       	mov	r0,r8
80004664:	40 41       	lddsp	r1,sp[0x10]
80004666:	a5 a5       	sbr	r5,0x4
80004668:	c0 a8       	rjmp	8000467c <_vfprintf_r+0x524>
8000466a:	50 a7       	stdsp	sp[0x28],r7
8000466c:	50 80       	stdsp	sp[0x20],r0
8000466e:	0c 97       	mov	r7,r6
80004670:	04 94       	mov	r4,r2
80004672:	06 96       	mov	r6,r3
80004674:	02 92       	mov	r2,r1
80004676:	40 93       	lddsp	r3,sp[0x24]
80004678:	10 90       	mov	r0,r8
8000467a:	40 41       	lddsp	r1,sp[0x10]
8000467c:	ed b5 00 05 	bld	r5,0x5
80004680:	c5 11       	brne	80004722 <_vfprintf_r+0x5ca>
80004682:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004686:	40 3c       	lddsp	r12,sp[0xc]
80004688:	58 0c       	cp.w	r12,0
8000468a:	c1 e0       	breq	800046c6 <_vfprintf_r+0x56e>
8000468c:	10 36       	cp.w	r6,r8
8000468e:	c0 64       	brge	8000469a <_vfprintf_r+0x542>
80004690:	fa cb f9 44 	sub	r11,sp,-1724
80004694:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004698:	c2 08       	rjmp	800046d8 <_vfprintf_r+0x580>
8000469a:	fa c8 f9 50 	sub	r8,sp,-1712
8000469e:	1a d8       	st.w	--sp,r8
800046a0:	fa c8 fa b8 	sub	r8,sp,-1352
800046a4:	0c 9b       	mov	r11,r6
800046a6:	1a d8       	st.w	--sp,r8
800046a8:	fa c8 fb b4 	sub	r8,sp,-1100
800046ac:	1a d8       	st.w	--sp,r8
800046ae:	fa c9 ff b4 	sub	r9,sp,-76
800046b2:	fa c8 f9 40 	sub	r8,sp,-1728
800046b6:	04 9a       	mov	r10,r2
800046b8:	08 9c       	mov	r12,r4
800046ba:	fe b0 fb b9 	rcall	80003e2c <get_arg>
800046be:	2f dd       	sub	sp,-12
800046c0:	78 1b       	ld.w	r11,r12[0x4]
800046c2:	78 09       	ld.w	r9,r12[0x0]
800046c4:	c2 b8       	rjmp	8000471a <_vfprintf_r+0x5c2>
800046c6:	ee ca ff ff 	sub	r10,r7,-1
800046ca:	10 37       	cp.w	r7,r8
800046cc:	c0 b4       	brge	800046e2 <_vfprintf_r+0x58a>
800046ce:	fa c9 f9 44 	sub	r9,sp,-1724
800046d2:	14 97       	mov	r7,r10
800046d4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800046d8:	ec fb fd 8c 	ld.w	r11,r6[-628]
800046dc:	ec f9 fd 88 	ld.w	r9,r6[-632]
800046e0:	c1 d8       	rjmp	8000471a <_vfprintf_r+0x5c2>
800046e2:	41 09       	lddsp	r9,sp[0x40]
800046e4:	59 f8       	cp.w	r8,31
800046e6:	e0 89 00 14 	brgt	8000470e <_vfprintf_r+0x5b6>
800046ea:	f2 cb ff f8 	sub	r11,r9,-8
800046ee:	51 0b       	stdsp	sp[0x40],r11
800046f0:	fa c6 f9 44 	sub	r6,sp,-1724
800046f4:	72 1b       	ld.w	r11,r9[0x4]
800046f6:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800046fa:	72 09       	ld.w	r9,r9[0x0]
800046fc:	f9 4b fd 8c 	st.w	r12[-628],r11
80004700:	f9 49 fd 88 	st.w	r12[-632],r9
80004704:	2f f8       	sub	r8,-1
80004706:	14 97       	mov	r7,r10
80004708:	fb 48 06 b4 	st.w	sp[1716],r8
8000470c:	c0 78       	rjmp	8000471a <_vfprintf_r+0x5c2>
8000470e:	f2 c8 ff f8 	sub	r8,r9,-8
80004712:	72 1b       	ld.w	r11,r9[0x4]
80004714:	14 97       	mov	r7,r10
80004716:	51 08       	stdsp	sp[0x40],r8
80004718:	72 09       	ld.w	r9,r9[0x0]
8000471a:	16 98       	mov	r8,r11
8000471c:	fa e9 00 00 	st.d	sp[0],r8
80004720:	ca e8       	rjmp	8000487c <_vfprintf_r+0x724>
80004722:	ed b5 00 04 	bld	r5,0x4
80004726:	c1 71       	brne	80004754 <_vfprintf_r+0x5fc>
80004728:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000472c:	40 3e       	lddsp	lr,sp[0xc]
8000472e:	58 0e       	cp.w	lr,0
80004730:	c0 80       	breq	80004740 <_vfprintf_r+0x5e8>
80004732:	10 36       	cp.w	r6,r8
80004734:	c6 94       	brge	80004806 <_vfprintf_r+0x6ae>
80004736:	fa cc f9 44 	sub	r12,sp,-1724
8000473a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000473e:	c8 28       	rjmp	80004842 <_vfprintf_r+0x6ea>
80004740:	ee ca ff ff 	sub	r10,r7,-1
80004744:	10 37       	cp.w	r7,r8
80004746:	e0 84 00 81 	brge	80004848 <_vfprintf_r+0x6f0>
8000474a:	fa cb f9 44 	sub	r11,sp,-1724
8000474e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004752:	c7 78       	rjmp	80004840 <_vfprintf_r+0x6e8>
80004754:	ed b5 00 06 	bld	r5,0x6
80004758:	c4 b1       	brne	800047ee <_vfprintf_r+0x696>
8000475a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000475e:	40 3c       	lddsp	r12,sp[0xc]
80004760:	58 0c       	cp.w	r12,0
80004762:	c1 d0       	breq	8000479c <_vfprintf_r+0x644>
80004764:	10 36       	cp.w	r6,r8
80004766:	c0 64       	brge	80004772 <_vfprintf_r+0x61a>
80004768:	fa cb f9 44 	sub	r11,sp,-1724
8000476c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004770:	c1 f8       	rjmp	800047ae <_vfprintf_r+0x656>
80004772:	fa c8 f9 50 	sub	r8,sp,-1712
80004776:	1a d8       	st.w	--sp,r8
80004778:	fa c8 fa b8 	sub	r8,sp,-1352
8000477c:	1a d8       	st.w	--sp,r8
8000477e:	fa c8 fb b4 	sub	r8,sp,-1100
80004782:	1a d8       	st.w	--sp,r8
80004784:	fa c8 f9 40 	sub	r8,sp,-1728
80004788:	fa c9 ff b4 	sub	r9,sp,-76
8000478c:	04 9a       	mov	r10,r2
8000478e:	0c 9b       	mov	r11,r6
80004790:	08 9c       	mov	r12,r4
80004792:	fe b0 fb 4d 	rcall	80003e2c <get_arg>
80004796:	2f dd       	sub	sp,-12
80004798:	98 18       	ld.sh	r8,r12[0x2]
8000479a:	c2 68       	rjmp	800047e6 <_vfprintf_r+0x68e>
8000479c:	ee ca ff ff 	sub	r10,r7,-1
800047a0:	10 37       	cp.w	r7,r8
800047a2:	c0 94       	brge	800047b4 <_vfprintf_r+0x65c>
800047a4:	fa c9 f9 44 	sub	r9,sp,-1724
800047a8:	14 97       	mov	r7,r10
800047aa:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047ae:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800047b2:	c1 a8       	rjmp	800047e6 <_vfprintf_r+0x68e>
800047b4:	41 09       	lddsp	r9,sp[0x40]
800047b6:	59 f8       	cp.w	r8,31
800047b8:	e0 89 00 13 	brgt	800047de <_vfprintf_r+0x686>
800047bc:	f2 cb ff fc 	sub	r11,r9,-4
800047c0:	51 0b       	stdsp	sp[0x40],r11
800047c2:	72 09       	ld.w	r9,r9[0x0]
800047c4:	fa c6 f9 44 	sub	r6,sp,-1724
800047c8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800047cc:	2f f8       	sub	r8,-1
800047ce:	f7 49 fd 88 	st.w	r11[-632],r9
800047d2:	fb 48 06 b4 	st.w	sp[1716],r8
800047d6:	14 97       	mov	r7,r10
800047d8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800047dc:	c0 58       	rjmp	800047e6 <_vfprintf_r+0x68e>
800047de:	92 18       	ld.sh	r8,r9[0x2]
800047e0:	14 97       	mov	r7,r10
800047e2:	2f c9       	sub	r9,-4
800047e4:	51 09       	stdsp	sp[0x40],r9
800047e6:	50 18       	stdsp	sp[0x4],r8
800047e8:	bf 58       	asr	r8,0x1f
800047ea:	50 08       	stdsp	sp[0x0],r8
800047ec:	c4 88       	rjmp	8000487c <_vfprintf_r+0x724>
800047ee:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047f2:	40 3c       	lddsp	r12,sp[0xc]
800047f4:	58 0c       	cp.w	r12,0
800047f6:	c1 d0       	breq	80004830 <_vfprintf_r+0x6d8>
800047f8:	10 36       	cp.w	r6,r8
800047fa:	c0 64       	brge	80004806 <_vfprintf_r+0x6ae>
800047fc:	fa cb f9 44 	sub	r11,sp,-1724
80004800:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004804:	c1 f8       	rjmp	80004842 <_vfprintf_r+0x6ea>
80004806:	fa c8 f9 50 	sub	r8,sp,-1712
8000480a:	1a d8       	st.w	--sp,r8
8000480c:	fa c8 fa b8 	sub	r8,sp,-1352
80004810:	0c 9b       	mov	r11,r6
80004812:	1a d8       	st.w	--sp,r8
80004814:	fa c8 fb b4 	sub	r8,sp,-1100
80004818:	04 9a       	mov	r10,r2
8000481a:	1a d8       	st.w	--sp,r8
8000481c:	08 9c       	mov	r12,r4
8000481e:	fa c8 f9 40 	sub	r8,sp,-1728
80004822:	fa c9 ff b4 	sub	r9,sp,-76
80004826:	fe b0 fb 03 	rcall	80003e2c <get_arg>
8000482a:	2f dd       	sub	sp,-12
8000482c:	78 0b       	ld.w	r11,r12[0x0]
8000482e:	c2 48       	rjmp	80004876 <_vfprintf_r+0x71e>
80004830:	ee ca ff ff 	sub	r10,r7,-1
80004834:	10 37       	cp.w	r7,r8
80004836:	c0 94       	brge	80004848 <_vfprintf_r+0x6f0>
80004838:	fa c9 f9 44 	sub	r9,sp,-1724
8000483c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004840:	14 97       	mov	r7,r10
80004842:	ec fb fd 88 	ld.w	r11,r6[-632]
80004846:	c1 88       	rjmp	80004876 <_vfprintf_r+0x71e>
80004848:	41 09       	lddsp	r9,sp[0x40]
8000484a:	59 f8       	cp.w	r8,31
8000484c:	e0 89 00 11 	brgt	8000486e <_vfprintf_r+0x716>
80004850:	f2 cb ff fc 	sub	r11,r9,-4
80004854:	51 0b       	stdsp	sp[0x40],r11
80004856:	fa c6 f9 44 	sub	r6,sp,-1724
8000485a:	72 0b       	ld.w	r11,r9[0x0]
8000485c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004860:	f3 4b fd 88 	st.w	r9[-632],r11
80004864:	2f f8       	sub	r8,-1
80004866:	14 97       	mov	r7,r10
80004868:	fb 48 06 b4 	st.w	sp[1716],r8
8000486c:	c0 58       	rjmp	80004876 <_vfprintf_r+0x71e>
8000486e:	72 0b       	ld.w	r11,r9[0x0]
80004870:	14 97       	mov	r7,r10
80004872:	2f c9       	sub	r9,-4
80004874:	51 09       	stdsp	sp[0x40],r9
80004876:	50 1b       	stdsp	sp[0x4],r11
80004878:	bf 5b       	asr	r11,0x1f
8000487a:	50 0b       	stdsp	sp[0x0],r11
8000487c:	fa ea 00 00 	ld.d	r10,sp[0]
80004880:	58 0a       	cp.w	r10,0
80004882:	5c 2b       	cpc	r11
80004884:	c0 e4       	brge	800048a0 <_vfprintf_r+0x748>
80004886:	30 08       	mov	r8,0
80004888:	fa ea 00 00 	ld.d	r10,sp[0]
8000488c:	30 09       	mov	r9,0
8000488e:	f0 0a 01 0a 	sub	r10,r8,r10
80004892:	f2 0b 01 4b 	sbc	r11,r9,r11
80004896:	32 d8       	mov	r8,45
80004898:	fa eb 00 00 	st.d	sp[0],r10
8000489c:	fb 68 06 bb 	st.b	sp[1723],r8
800048a0:	30 18       	mov	r8,1
800048a2:	e0 8f 06 fa 	bral	80005696 <_vfprintf_r+0x153e>
800048a6:	50 a7       	stdsp	sp[0x28],r7
800048a8:	50 80       	stdsp	sp[0x20],r0
800048aa:	0c 97       	mov	r7,r6
800048ac:	04 94       	mov	r4,r2
800048ae:	06 96       	mov	r6,r3
800048b0:	02 92       	mov	r2,r1
800048b2:	40 93       	lddsp	r3,sp[0x24]
800048b4:	10 90       	mov	r0,r8
800048b6:	40 41       	lddsp	r1,sp[0x10]
800048b8:	0e 99       	mov	r9,r7
800048ba:	ed b5 00 03 	bld	r5,0x3
800048be:	c4 11       	brne	80004940 <_vfprintf_r+0x7e8>
800048c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048c4:	40 3a       	lddsp	r10,sp[0xc]
800048c6:	58 0a       	cp.w	r10,0
800048c8:	c1 90       	breq	800048fa <_vfprintf_r+0x7a2>
800048ca:	10 36       	cp.w	r6,r8
800048cc:	c6 45       	brlt	80004994 <_vfprintf_r+0x83c>
800048ce:	fa c8 f9 50 	sub	r8,sp,-1712
800048d2:	1a d8       	st.w	--sp,r8
800048d4:	fa c8 fa b8 	sub	r8,sp,-1352
800048d8:	1a d8       	st.w	--sp,r8
800048da:	fa c8 fb b4 	sub	r8,sp,-1100
800048de:	0c 9b       	mov	r11,r6
800048e0:	1a d8       	st.w	--sp,r8
800048e2:	04 9a       	mov	r10,r2
800048e4:	fa c8 f9 40 	sub	r8,sp,-1728
800048e8:	fa c9 ff b4 	sub	r9,sp,-76
800048ec:	08 9c       	mov	r12,r4
800048ee:	fe b0 fa 9f 	rcall	80003e2c <get_arg>
800048f2:	2f dd       	sub	sp,-12
800048f4:	78 16       	ld.w	r6,r12[0x4]
800048f6:	50 76       	stdsp	sp[0x1c],r6
800048f8:	c4 88       	rjmp	80004988 <_vfprintf_r+0x830>
800048fa:	2f f7       	sub	r7,-1
800048fc:	10 39       	cp.w	r9,r8
800048fe:	c0 c4       	brge	80004916 <_vfprintf_r+0x7be>
80004900:	fa ce f9 44 	sub	lr,sp,-1724
80004904:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004908:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000490c:	50 7c       	stdsp	sp[0x1c],r12
8000490e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004912:	50 56       	stdsp	sp[0x14],r6
80004914:	c6 68       	rjmp	800049e0 <_vfprintf_r+0x888>
80004916:	41 09       	lddsp	r9,sp[0x40]
80004918:	59 f8       	cp.w	r8,31
8000491a:	e0 89 00 10 	brgt	8000493a <_vfprintf_r+0x7e2>
8000491e:	f2 ca ff f8 	sub	r10,r9,-8
80004922:	72 1b       	ld.w	r11,r9[0x4]
80004924:	51 0a       	stdsp	sp[0x40],r10
80004926:	72 09       	ld.w	r9,r9[0x0]
80004928:	fa ca f9 44 	sub	r10,sp,-1724
8000492c:	50 7b       	stdsp	sp[0x1c],r11
8000492e:	50 59       	stdsp	sp[0x14],r9
80004930:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004934:	40 5b       	lddsp	r11,sp[0x14]
80004936:	40 7a       	lddsp	r10,sp[0x1c]
80004938:	c4 78       	rjmp	800049c6 <_vfprintf_r+0x86e>
8000493a:	72 18       	ld.w	r8,r9[0x4]
8000493c:	50 78       	stdsp	sp[0x1c],r8
8000493e:	c4 c8       	rjmp	800049d6 <_vfprintf_r+0x87e>
80004940:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004944:	40 3e       	lddsp	lr,sp[0xc]
80004946:	58 0e       	cp.w	lr,0
80004948:	c2 30       	breq	8000498e <_vfprintf_r+0x836>
8000494a:	10 36       	cp.w	r6,r8
8000494c:	c0 94       	brge	8000495e <_vfprintf_r+0x806>
8000494e:	fa cc f9 44 	sub	r12,sp,-1724
80004952:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004956:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000495a:	50 7b       	stdsp	sp[0x1c],r11
8000495c:	cd 9b       	rjmp	8000490e <_vfprintf_r+0x7b6>
8000495e:	fa c8 f9 50 	sub	r8,sp,-1712
80004962:	1a d8       	st.w	--sp,r8
80004964:	fa c8 fa b8 	sub	r8,sp,-1352
80004968:	04 9a       	mov	r10,r2
8000496a:	1a d8       	st.w	--sp,r8
8000496c:	fa c8 fb b4 	sub	r8,sp,-1100
80004970:	0c 9b       	mov	r11,r6
80004972:	1a d8       	st.w	--sp,r8
80004974:	08 9c       	mov	r12,r4
80004976:	fa c8 f9 40 	sub	r8,sp,-1728
8000497a:	fa c9 ff b4 	sub	r9,sp,-76
8000497e:	fe b0 fa 57 	rcall	80003e2c <get_arg>
80004982:	2f dd       	sub	sp,-12
80004984:	78 1a       	ld.w	r10,r12[0x4]
80004986:	50 7a       	stdsp	sp[0x1c],r10
80004988:	78 0c       	ld.w	r12,r12[0x0]
8000498a:	50 5c       	stdsp	sp[0x14],r12
8000498c:	c2 a8       	rjmp	800049e0 <_vfprintf_r+0x888>
8000498e:	2f f7       	sub	r7,-1
80004990:	10 39       	cp.w	r9,r8
80004992:	c0 94       	brge	800049a4 <_vfprintf_r+0x84c>
80004994:	fa c9 f9 44 	sub	r9,sp,-1724
80004998:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000499c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800049a0:	50 78       	stdsp	sp[0x1c],r8
800049a2:	cb 6b       	rjmp	8000490e <_vfprintf_r+0x7b6>
800049a4:	41 09       	lddsp	r9,sp[0x40]
800049a6:	59 f8       	cp.w	r8,31
800049a8:	e0 89 00 15 	brgt	800049d2 <_vfprintf_r+0x87a>
800049ac:	f2 ca ff f8 	sub	r10,r9,-8
800049b0:	72 16       	ld.w	r6,r9[0x4]
800049b2:	72 09       	ld.w	r9,r9[0x0]
800049b4:	51 0a       	stdsp	sp[0x40],r10
800049b6:	50 59       	stdsp	sp[0x14],r9
800049b8:	fa ce f9 44 	sub	lr,sp,-1724
800049bc:	50 76       	stdsp	sp[0x1c],r6
800049be:	fc 08 00 39 	add	r9,lr,r8<<0x3
800049c2:	40 5b       	lddsp	r11,sp[0x14]
800049c4:	0c 9a       	mov	r10,r6
800049c6:	f2 eb fd 88 	st.d	r9[-632],r10
800049ca:	2f f8       	sub	r8,-1
800049cc:	fb 48 06 b4 	st.w	sp[1716],r8
800049d0:	c0 88       	rjmp	800049e0 <_vfprintf_r+0x888>
800049d2:	72 1c       	ld.w	r12,r9[0x4]
800049d4:	50 7c       	stdsp	sp[0x1c],r12
800049d6:	f2 c8 ff f8 	sub	r8,r9,-8
800049da:	51 08       	stdsp	sp[0x40],r8
800049dc:	72 09       	ld.w	r9,r9[0x0]
800049de:	50 59       	stdsp	sp[0x14],r9
800049e0:	40 5b       	lddsp	r11,sp[0x14]
800049e2:	40 7a       	lddsp	r10,sp[0x1c]
800049e4:	e0 a0 1c d6 	rcall	80008390 <__isinfd>
800049e8:	18 96       	mov	r6,r12
800049ea:	c1 70       	breq	80004a18 <_vfprintf_r+0x8c0>
800049ec:	30 08       	mov	r8,0
800049ee:	30 09       	mov	r9,0
800049f0:	40 5b       	lddsp	r11,sp[0x14]
800049f2:	40 7a       	lddsp	r10,sp[0x1c]
800049f4:	e0 a0 20 66 	rcall	80008ac0 <__avr32_f64_cmp_lt>
800049f8:	c0 40       	breq	80004a00 <_vfprintf_r+0x8a8>
800049fa:	32 d8       	mov	r8,45
800049fc:	fb 68 06 bb 	st.b	sp[1723],r8
80004a00:	fe c8 af 5c 	sub	r8,pc,-20644
80004a04:	fe c6 af 5c 	sub	r6,pc,-20644
80004a08:	a7 d5       	cbr	r5,0x7
80004a0a:	e0 40 00 47 	cp.w	r0,71
80004a0e:	f0 06 17 a0 	movle	r6,r8
80004a12:	30 32       	mov	r2,3
80004a14:	e0 8f 06 ce 	bral	800057b0 <_vfprintf_r+0x1658>
80004a18:	40 5b       	lddsp	r11,sp[0x14]
80004a1a:	40 7a       	lddsp	r10,sp[0x1c]
80004a1c:	e0 a0 1c cf 	rcall	800083ba <__isnand>
80004a20:	c0 e0       	breq	80004a3c <_vfprintf_r+0x8e4>
80004a22:	50 26       	stdsp	sp[0x8],r6
80004a24:	fe c8 af 78 	sub	r8,pc,-20616
80004a28:	fe c6 af 78 	sub	r6,pc,-20616
80004a2c:	a7 d5       	cbr	r5,0x7
80004a2e:	e0 40 00 47 	cp.w	r0,71
80004a32:	f0 06 17 a0 	movle	r6,r8
80004a36:	30 32       	mov	r2,3
80004a38:	e0 8f 06 c2 	bral	800057bc <_vfprintf_r+0x1664>
80004a3c:	40 2a       	lddsp	r10,sp[0x8]
80004a3e:	5b fa       	cp.w	r10,-1
80004a40:	c0 41       	brne	80004a48 <_vfprintf_r+0x8f0>
80004a42:	30 69       	mov	r9,6
80004a44:	50 29       	stdsp	sp[0x8],r9
80004a46:	c1 18       	rjmp	80004a68 <_vfprintf_r+0x910>
80004a48:	e0 40 00 47 	cp.w	r0,71
80004a4c:	5f 09       	sreq	r9
80004a4e:	e0 40 00 67 	cp.w	r0,103
80004a52:	5f 08       	sreq	r8
80004a54:	f3 e8 10 08 	or	r8,r9,r8
80004a58:	f8 08 18 00 	cp.b	r8,r12
80004a5c:	c0 60       	breq	80004a68 <_vfprintf_r+0x910>
80004a5e:	40 28       	lddsp	r8,sp[0x8]
80004a60:	58 08       	cp.w	r8,0
80004a62:	f9 b8 00 01 	moveq	r8,1
80004a66:	50 28       	stdsp	sp[0x8],r8
80004a68:	40 78       	lddsp	r8,sp[0x1c]
80004a6a:	40 59       	lddsp	r9,sp[0x14]
80004a6c:	fa e9 06 94 	st.d	sp[1684],r8
80004a70:	a9 a5       	sbr	r5,0x8
80004a72:	fa f8 06 94 	ld.w	r8,sp[1684]
80004a76:	58 08       	cp.w	r8,0
80004a78:	c0 65       	brlt	80004a84 <_vfprintf_r+0x92c>
80004a7a:	40 5e       	lddsp	lr,sp[0x14]
80004a7c:	30 0c       	mov	r12,0
80004a7e:	50 6e       	stdsp	sp[0x18],lr
80004a80:	50 9c       	stdsp	sp[0x24],r12
80004a82:	c0 78       	rjmp	80004a90 <_vfprintf_r+0x938>
80004a84:	40 5b       	lddsp	r11,sp[0x14]
80004a86:	32 da       	mov	r10,45
80004a88:	ee 1b 80 00 	eorh	r11,0x8000
80004a8c:	50 9a       	stdsp	sp[0x24],r10
80004a8e:	50 6b       	stdsp	sp[0x18],r11
80004a90:	e0 40 00 46 	cp.w	r0,70
80004a94:	5f 09       	sreq	r9
80004a96:	e0 40 00 66 	cp.w	r0,102
80004a9a:	5f 08       	sreq	r8
80004a9c:	f3 e8 10 08 	or	r8,r9,r8
80004aa0:	50 48       	stdsp	sp[0x10],r8
80004aa2:	c0 40       	breq	80004aaa <_vfprintf_r+0x952>
80004aa4:	40 22       	lddsp	r2,sp[0x8]
80004aa6:	30 39       	mov	r9,3
80004aa8:	c1 08       	rjmp	80004ac8 <_vfprintf_r+0x970>
80004aaa:	e0 40 00 45 	cp.w	r0,69
80004aae:	5f 09       	sreq	r9
80004ab0:	e0 40 00 65 	cp.w	r0,101
80004ab4:	5f 08       	sreq	r8
80004ab6:	40 22       	lddsp	r2,sp[0x8]
80004ab8:	10 49       	or	r9,r8
80004aba:	2f f2       	sub	r2,-1
80004abc:	40 46       	lddsp	r6,sp[0x10]
80004abe:	ec 09 18 00 	cp.b	r9,r6
80004ac2:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004ac6:	30 29       	mov	r9,2
80004ac8:	fa c8 f9 5c 	sub	r8,sp,-1700
80004acc:	1a d8       	st.w	--sp,r8
80004ace:	fa c8 f9 54 	sub	r8,sp,-1708
80004ad2:	1a d8       	st.w	--sp,r8
80004ad4:	fa c8 f9 4c 	sub	r8,sp,-1716
80004ad8:	08 9c       	mov	r12,r4
80004ada:	1a d8       	st.w	--sp,r8
80004adc:	04 98       	mov	r8,r2
80004ade:	40 9b       	lddsp	r11,sp[0x24]
80004ae0:	40 aa       	lddsp	r10,sp[0x28]
80004ae2:	e0 a0 0b c3 	rcall	80006268 <_dtoa_r>
80004ae6:	e0 40 00 47 	cp.w	r0,71
80004aea:	5f 19       	srne	r9
80004aec:	e0 40 00 67 	cp.w	r0,103
80004af0:	5f 18       	srne	r8
80004af2:	18 96       	mov	r6,r12
80004af4:	2f dd       	sub	sp,-12
80004af6:	f3 e8 00 08 	and	r8,r9,r8
80004afa:	c0 41       	brne	80004b02 <_vfprintf_r+0x9aa>
80004afc:	ed b5 00 00 	bld	r5,0x0
80004b00:	c3 01       	brne	80004b60 <_vfprintf_r+0xa08>
80004b02:	ec 02 00 0e 	add	lr,r6,r2
80004b06:	50 3e       	stdsp	sp[0xc],lr
80004b08:	40 4c       	lddsp	r12,sp[0x10]
80004b0a:	58 0c       	cp.w	r12,0
80004b0c:	c1 50       	breq	80004b36 <_vfprintf_r+0x9de>
80004b0e:	0d 89       	ld.ub	r9,r6[0x0]
80004b10:	33 08       	mov	r8,48
80004b12:	f0 09 18 00 	cp.b	r9,r8
80004b16:	c0 b1       	brne	80004b2c <_vfprintf_r+0x9d4>
80004b18:	30 08       	mov	r8,0
80004b1a:	30 09       	mov	r9,0
80004b1c:	40 6b       	lddsp	r11,sp[0x18]
80004b1e:	40 7a       	lddsp	r10,sp[0x1c]
80004b20:	e0 a0 1f 89 	rcall	80008a32 <__avr32_f64_cmp_eq>
80004b24:	fb b2 00 01 	rsubeq	r2,1
80004b28:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004b2c:	40 3b       	lddsp	r11,sp[0xc]
80004b2e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004b32:	10 0b       	add	r11,r8
80004b34:	50 3b       	stdsp	sp[0xc],r11
80004b36:	40 6b       	lddsp	r11,sp[0x18]
80004b38:	30 08       	mov	r8,0
80004b3a:	30 09       	mov	r9,0
80004b3c:	40 7a       	lddsp	r10,sp[0x1c]
80004b3e:	e0 a0 1f 7a 	rcall	80008a32 <__avr32_f64_cmp_eq>
80004b42:	c0 90       	breq	80004b54 <_vfprintf_r+0x9fc>
80004b44:	40 3a       	lddsp	r10,sp[0xc]
80004b46:	fb 4a 06 a4 	st.w	sp[1700],r10
80004b4a:	c0 58       	rjmp	80004b54 <_vfprintf_r+0x9fc>
80004b4c:	10 c9       	st.b	r8++,r9
80004b4e:	fb 48 06 a4 	st.w	sp[1700],r8
80004b52:	c0 28       	rjmp	80004b56 <_vfprintf_r+0x9fe>
80004b54:	33 09       	mov	r9,48
80004b56:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004b5a:	40 3e       	lddsp	lr,sp[0xc]
80004b5c:	1c 38       	cp.w	r8,lr
80004b5e:	cf 73       	brcs	80004b4c <_vfprintf_r+0x9f4>
80004b60:	e0 40 00 47 	cp.w	r0,71
80004b64:	5f 09       	sreq	r9
80004b66:	e0 40 00 67 	cp.w	r0,103
80004b6a:	5f 08       	sreq	r8
80004b6c:	f3 e8 10 08 	or	r8,r9,r8
80004b70:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004b74:	0c 19       	sub	r9,r6
80004b76:	50 69       	stdsp	sp[0x18],r9
80004b78:	58 08       	cp.w	r8,0
80004b7a:	c0 b0       	breq	80004b90 <_vfprintf_r+0xa38>
80004b7c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004b80:	5b d8       	cp.w	r8,-3
80004b82:	c0 55       	brlt	80004b8c <_vfprintf_r+0xa34>
80004b84:	40 2c       	lddsp	r12,sp[0x8]
80004b86:	18 38       	cp.w	r8,r12
80004b88:	e0 8a 00 6a 	brle	80004c5c <_vfprintf_r+0xb04>
80004b8c:	20 20       	sub	r0,2
80004b8e:	c0 58       	rjmp	80004b98 <_vfprintf_r+0xa40>
80004b90:	e0 40 00 65 	cp.w	r0,101
80004b94:	e0 89 00 46 	brgt	80004c20 <_vfprintf_r+0xac8>
80004b98:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004b9c:	fb 60 06 9c 	st.b	sp[1692],r0
80004ba0:	20 1b       	sub	r11,1
80004ba2:	fb 4b 06 ac 	st.w	sp[1708],r11
80004ba6:	c0 47       	brpl	80004bae <_vfprintf_r+0xa56>
80004ba8:	5c 3b       	neg	r11
80004baa:	32 d8       	mov	r8,45
80004bac:	c0 28       	rjmp	80004bb0 <_vfprintf_r+0xa58>
80004bae:	32 b8       	mov	r8,43
80004bb0:	fb 68 06 9d 	st.b	sp[1693],r8
80004bb4:	58 9b       	cp.w	r11,9
80004bb6:	e0 8a 00 1d 	brle	80004bf0 <_vfprintf_r+0xa98>
80004bba:	fa c9 fa 35 	sub	r9,sp,-1483
80004bbe:	30 aa       	mov	r10,10
80004bc0:	12 98       	mov	r8,r9
80004bc2:	0e 9c       	mov	r12,r7
80004bc4:	0c 92       	mov	r2,r6
80004bc6:	f6 0a 0c 06 	divs	r6,r11,r10
80004bca:	0e 9b       	mov	r11,r7
80004bcc:	2d 0b       	sub	r11,-48
80004bce:	10 fb       	st.b	--r8,r11
80004bd0:	0c 9b       	mov	r11,r6
80004bd2:	58 96       	cp.w	r6,9
80004bd4:	fe 99 ff f9 	brgt	80004bc6 <_vfprintf_r+0xa6e>
80004bd8:	2d 0b       	sub	r11,-48
80004bda:	18 97       	mov	r7,r12
80004bdc:	04 96       	mov	r6,r2
80004bde:	10 fb       	st.b	--r8,r11
80004be0:	fa ca f9 62 	sub	r10,sp,-1694
80004be4:	c0 38       	rjmp	80004bea <_vfprintf_r+0xa92>
80004be6:	11 3b       	ld.ub	r11,r8++
80004be8:	14 cb       	st.b	r10++,r11
80004bea:	12 38       	cp.w	r8,r9
80004bec:	cf d3       	brcs	80004be6 <_vfprintf_r+0xa8e>
80004bee:	c0 98       	rjmp	80004c00 <_vfprintf_r+0xaa8>
80004bf0:	2d 0b       	sub	r11,-48
80004bf2:	33 08       	mov	r8,48
80004bf4:	fb 6b 06 9f 	st.b	sp[1695],r11
80004bf8:	fb 68 06 9e 	st.b	sp[1694],r8
80004bfc:	fa ca f9 60 	sub	r10,sp,-1696
80004c00:	fa c8 f9 64 	sub	r8,sp,-1692
80004c04:	f4 08 01 08 	sub	r8,r10,r8
80004c08:	50 e8       	stdsp	sp[0x38],r8
80004c0a:	10 92       	mov	r2,r8
80004c0c:	40 6b       	lddsp	r11,sp[0x18]
80004c0e:	16 02       	add	r2,r11
80004c10:	58 1b       	cp.w	r11,1
80004c12:	e0 89 00 05 	brgt	80004c1c <_vfprintf_r+0xac4>
80004c16:	ed b5 00 00 	bld	r5,0x0
80004c1a:	c3 51       	brne	80004c84 <_vfprintf_r+0xb2c>
80004c1c:	2f f2       	sub	r2,-1
80004c1e:	c3 38       	rjmp	80004c84 <_vfprintf_r+0xb2c>
80004c20:	e0 40 00 66 	cp.w	r0,102
80004c24:	c1 c1       	brne	80004c5c <_vfprintf_r+0xb04>
80004c26:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004c2a:	58 02       	cp.w	r2,0
80004c2c:	e0 8a 00 0c 	brle	80004c44 <_vfprintf_r+0xaec>
80004c30:	40 2a       	lddsp	r10,sp[0x8]
80004c32:	58 0a       	cp.w	r10,0
80004c34:	c0 41       	brne	80004c3c <_vfprintf_r+0xae4>
80004c36:	ed b5 00 00 	bld	r5,0x0
80004c3a:	c2 51       	brne	80004c84 <_vfprintf_r+0xb2c>
80004c3c:	2f f2       	sub	r2,-1
80004c3e:	40 29       	lddsp	r9,sp[0x8]
80004c40:	12 02       	add	r2,r9
80004c42:	c0 b8       	rjmp	80004c58 <_vfprintf_r+0xb00>
80004c44:	40 28       	lddsp	r8,sp[0x8]
80004c46:	58 08       	cp.w	r8,0
80004c48:	c0 61       	brne	80004c54 <_vfprintf_r+0xafc>
80004c4a:	ed b5 00 00 	bld	r5,0x0
80004c4e:	c0 30       	breq	80004c54 <_vfprintf_r+0xafc>
80004c50:	30 12       	mov	r2,1
80004c52:	c1 98       	rjmp	80004c84 <_vfprintf_r+0xb2c>
80004c54:	40 22       	lddsp	r2,sp[0x8]
80004c56:	2f e2       	sub	r2,-2
80004c58:	36 60       	mov	r0,102
80004c5a:	c1 58       	rjmp	80004c84 <_vfprintf_r+0xb2c>
80004c5c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004c60:	40 6e       	lddsp	lr,sp[0x18]
80004c62:	1c 32       	cp.w	r2,lr
80004c64:	c0 65       	brlt	80004c70 <_vfprintf_r+0xb18>
80004c66:	ed b5 00 00 	bld	r5,0x0
80004c6a:	f7 b2 00 ff 	subeq	r2,-1
80004c6e:	c0 a8       	rjmp	80004c82 <_vfprintf_r+0xb2a>
80004c70:	e4 08 11 02 	rsub	r8,r2,2
80004c74:	40 6c       	lddsp	r12,sp[0x18]
80004c76:	58 02       	cp.w	r2,0
80004c78:	f0 02 17 a0 	movle	r2,r8
80004c7c:	f9 b2 09 01 	movgt	r2,1
80004c80:	18 02       	add	r2,r12
80004c82:	36 70       	mov	r0,103
80004c84:	40 9b       	lddsp	r11,sp[0x24]
80004c86:	58 0b       	cp.w	r11,0
80004c88:	e0 80 05 94 	breq	800057b0 <_vfprintf_r+0x1658>
80004c8c:	32 d8       	mov	r8,45
80004c8e:	fb 68 06 bb 	st.b	sp[1723],r8
80004c92:	e0 8f 05 93 	bral	800057b8 <_vfprintf_r+0x1660>
80004c96:	50 a7       	stdsp	sp[0x28],r7
80004c98:	04 94       	mov	r4,r2
80004c9a:	0c 97       	mov	r7,r6
80004c9c:	02 92       	mov	r2,r1
80004c9e:	06 96       	mov	r6,r3
80004ca0:	40 41       	lddsp	r1,sp[0x10]
80004ca2:	40 93       	lddsp	r3,sp[0x24]
80004ca4:	0e 99       	mov	r9,r7
80004ca6:	ed b5 00 05 	bld	r5,0x5
80004caa:	c4 81       	brne	80004d3a <_vfprintf_r+0xbe2>
80004cac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cb0:	40 3e       	lddsp	lr,sp[0xc]
80004cb2:	58 0e       	cp.w	lr,0
80004cb4:	c1 d0       	breq	80004cee <_vfprintf_r+0xb96>
80004cb6:	10 36       	cp.w	r6,r8
80004cb8:	c0 64       	brge	80004cc4 <_vfprintf_r+0xb6c>
80004cba:	fa cc f9 44 	sub	r12,sp,-1724
80004cbe:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004cc2:	c1 d8       	rjmp	80004cfc <_vfprintf_r+0xba4>
80004cc4:	fa c8 f9 50 	sub	r8,sp,-1712
80004cc8:	1a d8       	st.w	--sp,r8
80004cca:	fa c8 fa b8 	sub	r8,sp,-1352
80004cce:	04 9a       	mov	r10,r2
80004cd0:	1a d8       	st.w	--sp,r8
80004cd2:	fa c8 fb b4 	sub	r8,sp,-1100
80004cd6:	0c 9b       	mov	r11,r6
80004cd8:	1a d8       	st.w	--sp,r8
80004cda:	08 9c       	mov	r12,r4
80004cdc:	fa c8 f9 40 	sub	r8,sp,-1728
80004ce0:	fa c9 ff b4 	sub	r9,sp,-76
80004ce4:	fe b0 f8 a4 	rcall	80003e2c <get_arg>
80004ce8:	2f dd       	sub	sp,-12
80004cea:	78 0a       	ld.w	r10,r12[0x0]
80004cec:	c2 08       	rjmp	80004d2c <_vfprintf_r+0xbd4>
80004cee:	2f f7       	sub	r7,-1
80004cf0:	10 39       	cp.w	r9,r8
80004cf2:	c0 84       	brge	80004d02 <_vfprintf_r+0xbaa>
80004cf4:	fa cb f9 44 	sub	r11,sp,-1724
80004cf8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004cfc:	ec fa fd 88 	ld.w	r10,r6[-632]
80004d00:	c1 68       	rjmp	80004d2c <_vfprintf_r+0xbd4>
80004d02:	41 09       	lddsp	r9,sp[0x40]
80004d04:	59 f8       	cp.w	r8,31
80004d06:	e0 89 00 10 	brgt	80004d26 <_vfprintf_r+0xbce>
80004d0a:	f2 ca ff fc 	sub	r10,r9,-4
80004d0e:	51 0a       	stdsp	sp[0x40],r10
80004d10:	fa c6 f9 44 	sub	r6,sp,-1724
80004d14:	72 0a       	ld.w	r10,r9[0x0]
80004d16:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d1a:	f3 4a fd 88 	st.w	r9[-632],r10
80004d1e:	2f f8       	sub	r8,-1
80004d20:	fb 48 06 b4 	st.w	sp[1716],r8
80004d24:	c0 48       	rjmp	80004d2c <_vfprintf_r+0xbd4>
80004d26:	72 0a       	ld.w	r10,r9[0x0]
80004d28:	2f c9       	sub	r9,-4
80004d2a:	51 09       	stdsp	sp[0x40],r9
80004d2c:	40 be       	lddsp	lr,sp[0x2c]
80004d2e:	1c 98       	mov	r8,lr
80004d30:	95 1e       	st.w	r10[0x4],lr
80004d32:	bf 58       	asr	r8,0x1f
80004d34:	95 08       	st.w	r10[0x0],r8
80004d36:	fe 9f fa 9f 	bral	80004274 <_vfprintf_r+0x11c>
80004d3a:	ed b5 00 04 	bld	r5,0x4
80004d3e:	c4 80       	breq	80004dce <_vfprintf_r+0xc76>
80004d40:	e2 15 00 40 	andl	r5,0x40,COH
80004d44:	c4 50       	breq	80004dce <_vfprintf_r+0xc76>
80004d46:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d4a:	40 3c       	lddsp	r12,sp[0xc]
80004d4c:	58 0c       	cp.w	r12,0
80004d4e:	c1 d0       	breq	80004d88 <_vfprintf_r+0xc30>
80004d50:	10 36       	cp.w	r6,r8
80004d52:	c0 64       	brge	80004d5e <_vfprintf_r+0xc06>
80004d54:	fa cb f9 44 	sub	r11,sp,-1724
80004d58:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d5c:	c1 d8       	rjmp	80004d96 <_vfprintf_r+0xc3e>
80004d5e:	fa c8 f9 50 	sub	r8,sp,-1712
80004d62:	1a d8       	st.w	--sp,r8
80004d64:	fa c8 fa b8 	sub	r8,sp,-1352
80004d68:	04 9a       	mov	r10,r2
80004d6a:	1a d8       	st.w	--sp,r8
80004d6c:	fa c8 fb b4 	sub	r8,sp,-1100
80004d70:	0c 9b       	mov	r11,r6
80004d72:	1a d8       	st.w	--sp,r8
80004d74:	08 9c       	mov	r12,r4
80004d76:	fa c8 f9 40 	sub	r8,sp,-1728
80004d7a:	fa c9 ff b4 	sub	r9,sp,-76
80004d7e:	fe b0 f8 57 	rcall	80003e2c <get_arg>
80004d82:	2f dd       	sub	sp,-12
80004d84:	78 0a       	ld.w	r10,r12[0x0]
80004d86:	c2 08       	rjmp	80004dc6 <_vfprintf_r+0xc6e>
80004d88:	2f f7       	sub	r7,-1
80004d8a:	10 39       	cp.w	r9,r8
80004d8c:	c0 84       	brge	80004d9c <_vfprintf_r+0xc44>
80004d8e:	fa ca f9 44 	sub	r10,sp,-1724
80004d92:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004d96:	ec fa fd 88 	ld.w	r10,r6[-632]
80004d9a:	c1 68       	rjmp	80004dc6 <_vfprintf_r+0xc6e>
80004d9c:	41 09       	lddsp	r9,sp[0x40]
80004d9e:	59 f8       	cp.w	r8,31
80004da0:	e0 89 00 10 	brgt	80004dc0 <_vfprintf_r+0xc68>
80004da4:	f2 ca ff fc 	sub	r10,r9,-4
80004da8:	51 0a       	stdsp	sp[0x40],r10
80004daa:	fa c6 f9 44 	sub	r6,sp,-1724
80004dae:	72 0a       	ld.w	r10,r9[0x0]
80004db0:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004db4:	f3 4a fd 88 	st.w	r9[-632],r10
80004db8:	2f f8       	sub	r8,-1
80004dba:	fb 48 06 b4 	st.w	sp[1716],r8
80004dbe:	c0 48       	rjmp	80004dc6 <_vfprintf_r+0xc6e>
80004dc0:	72 0a       	ld.w	r10,r9[0x0]
80004dc2:	2f c9       	sub	r9,-4
80004dc4:	51 09       	stdsp	sp[0x40],r9
80004dc6:	40 be       	lddsp	lr,sp[0x2c]
80004dc8:	b4 0e       	st.h	r10[0x0],lr
80004dca:	fe 9f fa 55 	bral	80004274 <_vfprintf_r+0x11c>
80004dce:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dd2:	40 3c       	lddsp	r12,sp[0xc]
80004dd4:	58 0c       	cp.w	r12,0
80004dd6:	c1 d0       	breq	80004e10 <_vfprintf_r+0xcb8>
80004dd8:	10 36       	cp.w	r6,r8
80004dda:	c0 64       	brge	80004de6 <_vfprintf_r+0xc8e>
80004ddc:	fa cb f9 44 	sub	r11,sp,-1724
80004de0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004de4:	c1 d8       	rjmp	80004e1e <_vfprintf_r+0xcc6>
80004de6:	fa c8 f9 50 	sub	r8,sp,-1712
80004dea:	1a d8       	st.w	--sp,r8
80004dec:	fa c8 fa b8 	sub	r8,sp,-1352
80004df0:	04 9a       	mov	r10,r2
80004df2:	1a d8       	st.w	--sp,r8
80004df4:	fa c8 fb b4 	sub	r8,sp,-1100
80004df8:	0c 9b       	mov	r11,r6
80004dfa:	1a d8       	st.w	--sp,r8
80004dfc:	08 9c       	mov	r12,r4
80004dfe:	fa c8 f9 40 	sub	r8,sp,-1728
80004e02:	fa c9 ff b4 	sub	r9,sp,-76
80004e06:	fe b0 f8 13 	rcall	80003e2c <get_arg>
80004e0a:	2f dd       	sub	sp,-12
80004e0c:	78 0a       	ld.w	r10,r12[0x0]
80004e0e:	c2 08       	rjmp	80004e4e <_vfprintf_r+0xcf6>
80004e10:	2f f7       	sub	r7,-1
80004e12:	10 39       	cp.w	r9,r8
80004e14:	c0 84       	brge	80004e24 <_vfprintf_r+0xccc>
80004e16:	fa ca f9 44 	sub	r10,sp,-1724
80004e1a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004e1e:	ec fa fd 88 	ld.w	r10,r6[-632]
80004e22:	c1 68       	rjmp	80004e4e <_vfprintf_r+0xcf6>
80004e24:	41 09       	lddsp	r9,sp[0x40]
80004e26:	59 f8       	cp.w	r8,31
80004e28:	e0 89 00 10 	brgt	80004e48 <_vfprintf_r+0xcf0>
80004e2c:	f2 ca ff fc 	sub	r10,r9,-4
80004e30:	51 0a       	stdsp	sp[0x40],r10
80004e32:	fa c6 f9 44 	sub	r6,sp,-1724
80004e36:	72 0a       	ld.w	r10,r9[0x0]
80004e38:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e3c:	f3 4a fd 88 	st.w	r9[-632],r10
80004e40:	2f f8       	sub	r8,-1
80004e42:	fb 48 06 b4 	st.w	sp[1716],r8
80004e46:	c0 48       	rjmp	80004e4e <_vfprintf_r+0xcf6>
80004e48:	72 0a       	ld.w	r10,r9[0x0]
80004e4a:	2f c9       	sub	r9,-4
80004e4c:	51 09       	stdsp	sp[0x40],r9
80004e4e:	40 be       	lddsp	lr,sp[0x2c]
80004e50:	95 0e       	st.w	r10[0x0],lr
80004e52:	fe 9f fa 11 	bral	80004274 <_vfprintf_r+0x11c>
80004e56:	50 a7       	stdsp	sp[0x28],r7
80004e58:	50 80       	stdsp	sp[0x20],r0
80004e5a:	0c 97       	mov	r7,r6
80004e5c:	04 94       	mov	r4,r2
80004e5e:	06 96       	mov	r6,r3
80004e60:	02 92       	mov	r2,r1
80004e62:	40 93       	lddsp	r3,sp[0x24]
80004e64:	10 90       	mov	r0,r8
80004e66:	40 41       	lddsp	r1,sp[0x10]
80004e68:	a5 a5       	sbr	r5,0x4
80004e6a:	c0 a8       	rjmp	80004e7e <_vfprintf_r+0xd26>
80004e6c:	50 a7       	stdsp	sp[0x28],r7
80004e6e:	50 80       	stdsp	sp[0x20],r0
80004e70:	0c 97       	mov	r7,r6
80004e72:	04 94       	mov	r4,r2
80004e74:	06 96       	mov	r6,r3
80004e76:	02 92       	mov	r2,r1
80004e78:	40 93       	lddsp	r3,sp[0x24]
80004e7a:	10 90       	mov	r0,r8
80004e7c:	40 41       	lddsp	r1,sp[0x10]
80004e7e:	ed b5 00 05 	bld	r5,0x5
80004e82:	c5 d1       	brne	80004f3c <_vfprintf_r+0xde4>
80004e84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e88:	40 3c       	lddsp	r12,sp[0xc]
80004e8a:	58 0c       	cp.w	r12,0
80004e8c:	c2 60       	breq	80004ed8 <_vfprintf_r+0xd80>
80004e8e:	10 36       	cp.w	r6,r8
80004e90:	c0 a4       	brge	80004ea4 <_vfprintf_r+0xd4c>
80004e92:	fa cb f9 44 	sub	r11,sp,-1724
80004e96:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e9a:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004e9e:	fa e9 00 00 	st.d	sp[0],r8
80004ea2:	c1 88       	rjmp	80004ed2 <_vfprintf_r+0xd7a>
80004ea4:	fa c8 f9 50 	sub	r8,sp,-1712
80004ea8:	1a d8       	st.w	--sp,r8
80004eaa:	fa c8 fa b8 	sub	r8,sp,-1352
80004eae:	04 9a       	mov	r10,r2
80004eb0:	1a d8       	st.w	--sp,r8
80004eb2:	0c 9b       	mov	r11,r6
80004eb4:	fa c8 fb b4 	sub	r8,sp,-1100
80004eb8:	08 9c       	mov	r12,r4
80004eba:	1a d8       	st.w	--sp,r8
80004ebc:	fa c8 f9 40 	sub	r8,sp,-1728
80004ec0:	fa c9 ff b4 	sub	r9,sp,-76
80004ec4:	fe b0 f7 b4 	rcall	80003e2c <get_arg>
80004ec8:	2f dd       	sub	sp,-12
80004eca:	f8 ea 00 00 	ld.d	r10,r12[0]
80004ece:	fa eb 00 00 	st.d	sp[0],r10
80004ed2:	30 08       	mov	r8,0
80004ed4:	e0 8f 03 de 	bral	80005690 <_vfprintf_r+0x1538>
80004ed8:	ee ca ff ff 	sub	r10,r7,-1
80004edc:	10 37       	cp.w	r7,r8
80004ede:	c0 b4       	brge	80004ef4 <_vfprintf_r+0xd9c>
80004ee0:	fa c9 f9 44 	sub	r9,sp,-1724
80004ee4:	14 97       	mov	r7,r10
80004ee6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004eea:	ec ea fd 88 	ld.d	r10,r6[-632]
80004eee:	fa eb 00 00 	st.d	sp[0],r10
80004ef2:	c1 88       	rjmp	80004f22 <_vfprintf_r+0xdca>
80004ef4:	41 09       	lddsp	r9,sp[0x40]
80004ef6:	59 f8       	cp.w	r8,31
80004ef8:	e0 89 00 18 	brgt	80004f28 <_vfprintf_r+0xdd0>
80004efc:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f00:	f2 cb ff f8 	sub	r11,r9,-8
80004f04:	fa e7 00 00 	st.d	sp[0],r6
80004f08:	51 0b       	stdsp	sp[0x40],r11
80004f0a:	fa c6 f9 44 	sub	r6,sp,-1724
80004f0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f12:	fa e6 00 00 	ld.d	r6,sp[0]
80004f16:	f2 e7 fd 88 	st.d	r9[-632],r6
80004f1a:	2f f8       	sub	r8,-1
80004f1c:	14 97       	mov	r7,r10
80004f1e:	fb 48 06 b4 	st.w	sp[1716],r8
80004f22:	40 38       	lddsp	r8,sp[0xc]
80004f24:	e0 8f 03 b6 	bral	80005690 <_vfprintf_r+0x1538>
80004f28:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f2c:	40 38       	lddsp	r8,sp[0xc]
80004f2e:	fa e7 00 00 	st.d	sp[0],r6
80004f32:	2f 89       	sub	r9,-8
80004f34:	14 97       	mov	r7,r10
80004f36:	51 09       	stdsp	sp[0x40],r9
80004f38:	e0 8f 03 ac 	bral	80005690 <_vfprintf_r+0x1538>
80004f3c:	ed b5 00 04 	bld	r5,0x4
80004f40:	c1 61       	brne	80004f6c <_vfprintf_r+0xe14>
80004f42:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f46:	40 3e       	lddsp	lr,sp[0xc]
80004f48:	58 0e       	cp.w	lr,0
80004f4a:	c0 80       	breq	80004f5a <_vfprintf_r+0xe02>
80004f4c:	10 36       	cp.w	r6,r8
80004f4e:	c6 74       	brge	8000501c <_vfprintf_r+0xec4>
80004f50:	fa cc f9 44 	sub	r12,sp,-1724
80004f54:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004f58:	c8 08       	rjmp	80005058 <_vfprintf_r+0xf00>
80004f5a:	ee ca ff ff 	sub	r10,r7,-1
80004f5e:	10 37       	cp.w	r7,r8
80004f60:	c7 f4       	brge	8000505e <_vfprintf_r+0xf06>
80004f62:	fa cb f9 44 	sub	r11,sp,-1724
80004f66:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f6a:	c7 68       	rjmp	80005056 <_vfprintf_r+0xefe>
80004f6c:	ed b5 00 06 	bld	r5,0x6
80004f70:	c4 a1       	brne	80005004 <_vfprintf_r+0xeac>
80004f72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f76:	40 3c       	lddsp	r12,sp[0xc]
80004f78:	58 0c       	cp.w	r12,0
80004f7a:	c1 d0       	breq	80004fb4 <_vfprintf_r+0xe5c>
80004f7c:	10 36       	cp.w	r6,r8
80004f7e:	c0 64       	brge	80004f8a <_vfprintf_r+0xe32>
80004f80:	fa cb f9 44 	sub	r11,sp,-1724
80004f84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f88:	c1 f8       	rjmp	80004fc6 <_vfprintf_r+0xe6e>
80004f8a:	fa c8 f9 50 	sub	r8,sp,-1712
80004f8e:	1a d8       	st.w	--sp,r8
80004f90:	fa c8 fa b8 	sub	r8,sp,-1352
80004f94:	1a d8       	st.w	--sp,r8
80004f96:	fa c8 fb b4 	sub	r8,sp,-1100
80004f9a:	1a d8       	st.w	--sp,r8
80004f9c:	fa c8 f9 40 	sub	r8,sp,-1728
80004fa0:	fa c9 ff b4 	sub	r9,sp,-76
80004fa4:	04 9a       	mov	r10,r2
80004fa6:	0c 9b       	mov	r11,r6
80004fa8:	08 9c       	mov	r12,r4
80004faa:	fe b0 f7 41 	rcall	80003e2c <get_arg>
80004fae:	2f dd       	sub	sp,-12
80004fb0:	98 18       	ld.sh	r8,r12[0x2]
80004fb2:	c2 68       	rjmp	80004ffe <_vfprintf_r+0xea6>
80004fb4:	ee ca ff ff 	sub	r10,r7,-1
80004fb8:	10 37       	cp.w	r7,r8
80004fba:	c0 94       	brge	80004fcc <_vfprintf_r+0xe74>
80004fbc:	fa c9 f9 44 	sub	r9,sp,-1724
80004fc0:	14 97       	mov	r7,r10
80004fc2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004fc6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004fca:	c1 a8       	rjmp	80004ffe <_vfprintf_r+0xea6>
80004fcc:	41 09       	lddsp	r9,sp[0x40]
80004fce:	59 f8       	cp.w	r8,31
80004fd0:	e0 89 00 13 	brgt	80004ff6 <_vfprintf_r+0xe9e>
80004fd4:	f2 cb ff fc 	sub	r11,r9,-4
80004fd8:	51 0b       	stdsp	sp[0x40],r11
80004fda:	72 09       	ld.w	r9,r9[0x0]
80004fdc:	fa c6 f9 44 	sub	r6,sp,-1724
80004fe0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004fe4:	2f f8       	sub	r8,-1
80004fe6:	f7 49 fd 88 	st.w	r11[-632],r9
80004fea:	fb 48 06 b4 	st.w	sp[1716],r8
80004fee:	14 97       	mov	r7,r10
80004ff0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004ff4:	c0 58       	rjmp	80004ffe <_vfprintf_r+0xea6>
80004ff6:	92 18       	ld.sh	r8,r9[0x2]
80004ff8:	14 97       	mov	r7,r10
80004ffa:	2f c9       	sub	r9,-4
80004ffc:	51 09       	stdsp	sp[0x40],r9
80004ffe:	5c 78       	castu.h	r8
80005000:	50 18       	stdsp	sp[0x4],r8
80005002:	c4 68       	rjmp	8000508e <_vfprintf_r+0xf36>
80005004:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005008:	40 3c       	lddsp	r12,sp[0xc]
8000500a:	58 0c       	cp.w	r12,0
8000500c:	c1 d0       	breq	80005046 <_vfprintf_r+0xeee>
8000500e:	10 36       	cp.w	r6,r8
80005010:	c0 64       	brge	8000501c <_vfprintf_r+0xec4>
80005012:	fa cb f9 44 	sub	r11,sp,-1724
80005016:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000501a:	c1 f8       	rjmp	80005058 <_vfprintf_r+0xf00>
8000501c:	fa c8 f9 50 	sub	r8,sp,-1712
80005020:	1a d8       	st.w	--sp,r8
80005022:	fa c8 fa b8 	sub	r8,sp,-1352
80005026:	0c 9b       	mov	r11,r6
80005028:	1a d8       	st.w	--sp,r8
8000502a:	fa c8 fb b4 	sub	r8,sp,-1100
8000502e:	04 9a       	mov	r10,r2
80005030:	1a d8       	st.w	--sp,r8
80005032:	08 9c       	mov	r12,r4
80005034:	fa c8 f9 40 	sub	r8,sp,-1728
80005038:	fa c9 ff b4 	sub	r9,sp,-76
8000503c:	fe b0 f6 f8 	rcall	80003e2c <get_arg>
80005040:	2f dd       	sub	sp,-12
80005042:	78 0b       	ld.w	r11,r12[0x0]
80005044:	c2 48       	rjmp	8000508c <_vfprintf_r+0xf34>
80005046:	ee ca ff ff 	sub	r10,r7,-1
8000504a:	10 37       	cp.w	r7,r8
8000504c:	c0 94       	brge	8000505e <_vfprintf_r+0xf06>
8000504e:	fa c9 f9 44 	sub	r9,sp,-1724
80005052:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005056:	14 97       	mov	r7,r10
80005058:	ec fb fd 88 	ld.w	r11,r6[-632]
8000505c:	c1 88       	rjmp	8000508c <_vfprintf_r+0xf34>
8000505e:	41 09       	lddsp	r9,sp[0x40]
80005060:	59 f8       	cp.w	r8,31
80005062:	e0 89 00 11 	brgt	80005084 <_vfprintf_r+0xf2c>
80005066:	f2 cb ff fc 	sub	r11,r9,-4
8000506a:	51 0b       	stdsp	sp[0x40],r11
8000506c:	fa c6 f9 44 	sub	r6,sp,-1724
80005070:	72 0b       	ld.w	r11,r9[0x0]
80005072:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005076:	f3 4b fd 88 	st.w	r9[-632],r11
8000507a:	2f f8       	sub	r8,-1
8000507c:	14 97       	mov	r7,r10
8000507e:	fb 48 06 b4 	st.w	sp[1716],r8
80005082:	c0 58       	rjmp	8000508c <_vfprintf_r+0xf34>
80005084:	72 0b       	ld.w	r11,r9[0x0]
80005086:	14 97       	mov	r7,r10
80005088:	2f c9       	sub	r9,-4
8000508a:	51 09       	stdsp	sp[0x40],r9
8000508c:	50 1b       	stdsp	sp[0x4],r11
8000508e:	30 0e       	mov	lr,0
80005090:	50 0e       	stdsp	sp[0x0],lr
80005092:	1c 98       	mov	r8,lr
80005094:	e0 8f 02 fe 	bral	80005690 <_vfprintf_r+0x1538>
80005098:	50 a7       	stdsp	sp[0x28],r7
8000509a:	50 80       	stdsp	sp[0x20],r0
8000509c:	0c 97       	mov	r7,r6
8000509e:	04 94       	mov	r4,r2
800050a0:	06 96       	mov	r6,r3
800050a2:	02 92       	mov	r2,r1
800050a4:	40 93       	lddsp	r3,sp[0x24]
800050a6:	40 41       	lddsp	r1,sp[0x10]
800050a8:	0e 99       	mov	r9,r7
800050aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050ae:	40 3c       	lddsp	r12,sp[0xc]
800050b0:	58 0c       	cp.w	r12,0
800050b2:	c1 d0       	breq	800050ec <_vfprintf_r+0xf94>
800050b4:	10 36       	cp.w	r6,r8
800050b6:	c0 64       	brge	800050c2 <_vfprintf_r+0xf6a>
800050b8:	fa cb f9 44 	sub	r11,sp,-1724
800050bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800050c0:	c1 d8       	rjmp	800050fa <_vfprintf_r+0xfa2>
800050c2:	fa c8 f9 50 	sub	r8,sp,-1712
800050c6:	1a d8       	st.w	--sp,r8
800050c8:	fa c8 fa b8 	sub	r8,sp,-1352
800050cc:	1a d8       	st.w	--sp,r8
800050ce:	fa c8 fb b4 	sub	r8,sp,-1100
800050d2:	1a d8       	st.w	--sp,r8
800050d4:	fa c9 ff b4 	sub	r9,sp,-76
800050d8:	fa c8 f9 40 	sub	r8,sp,-1728
800050dc:	04 9a       	mov	r10,r2
800050de:	0c 9b       	mov	r11,r6
800050e0:	08 9c       	mov	r12,r4
800050e2:	fe b0 f6 a5 	rcall	80003e2c <get_arg>
800050e6:	2f dd       	sub	sp,-12
800050e8:	78 09       	ld.w	r9,r12[0x0]
800050ea:	c2 18       	rjmp	8000512c <_vfprintf_r+0xfd4>
800050ec:	2f f7       	sub	r7,-1
800050ee:	10 39       	cp.w	r9,r8
800050f0:	c0 84       	brge	80005100 <_vfprintf_r+0xfa8>
800050f2:	fa ca f9 44 	sub	r10,sp,-1724
800050f6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800050fa:	ec f9 fd 88 	ld.w	r9,r6[-632]
800050fe:	c1 78       	rjmp	8000512c <_vfprintf_r+0xfd4>
80005100:	41 09       	lddsp	r9,sp[0x40]
80005102:	59 f8       	cp.w	r8,31
80005104:	e0 89 00 10 	brgt	80005124 <_vfprintf_r+0xfcc>
80005108:	f2 ca ff fc 	sub	r10,r9,-4
8000510c:	51 0a       	stdsp	sp[0x40],r10
8000510e:	fa c6 f9 44 	sub	r6,sp,-1724
80005112:	72 09       	ld.w	r9,r9[0x0]
80005114:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005118:	f5 49 fd 88 	st.w	r10[-632],r9
8000511c:	2f f8       	sub	r8,-1
8000511e:	fb 48 06 b4 	st.w	sp[1716],r8
80005122:	c0 58       	rjmp	8000512c <_vfprintf_r+0xfd4>
80005124:	f2 c8 ff fc 	sub	r8,r9,-4
80005128:	51 08       	stdsp	sp[0x40],r8
8000512a:	72 09       	ld.w	r9,r9[0x0]
8000512c:	33 08       	mov	r8,48
8000512e:	fb 68 06 b8 	st.b	sp[1720],r8
80005132:	37 88       	mov	r8,120
80005134:	30 0e       	mov	lr,0
80005136:	fb 68 06 b9 	st.b	sp[1721],r8
8000513a:	fe cc b6 86 	sub	r12,pc,-18810
8000513e:	50 19       	stdsp	sp[0x4],r9
80005140:	a1 b5       	sbr	r5,0x1
80005142:	50 0e       	stdsp	sp[0x0],lr
80005144:	50 dc       	stdsp	sp[0x34],r12
80005146:	30 28       	mov	r8,2
80005148:	37 80       	mov	r0,120
8000514a:	e0 8f 02 a3 	bral	80005690 <_vfprintf_r+0x1538>
8000514e:	50 a7       	stdsp	sp[0x28],r7
80005150:	50 80       	stdsp	sp[0x20],r0
80005152:	10 90       	mov	r0,r8
80005154:	30 08       	mov	r8,0
80005156:	fb 68 06 bb 	st.b	sp[1723],r8
8000515a:	0c 97       	mov	r7,r6
8000515c:	04 94       	mov	r4,r2
8000515e:	06 96       	mov	r6,r3
80005160:	02 92       	mov	r2,r1
80005162:	40 93       	lddsp	r3,sp[0x24]
80005164:	40 41       	lddsp	r1,sp[0x10]
80005166:	0e 99       	mov	r9,r7
80005168:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000516c:	40 3b       	lddsp	r11,sp[0xc]
8000516e:	58 0b       	cp.w	r11,0
80005170:	c1 d0       	breq	800051aa <_vfprintf_r+0x1052>
80005172:	10 36       	cp.w	r6,r8
80005174:	c0 64       	brge	80005180 <_vfprintf_r+0x1028>
80005176:	fa ca f9 44 	sub	r10,sp,-1724
8000517a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000517e:	c1 d8       	rjmp	800051b8 <_vfprintf_r+0x1060>
80005180:	fa c8 f9 50 	sub	r8,sp,-1712
80005184:	1a d8       	st.w	--sp,r8
80005186:	fa c8 fa b8 	sub	r8,sp,-1352
8000518a:	1a d8       	st.w	--sp,r8
8000518c:	fa c8 fb b4 	sub	r8,sp,-1100
80005190:	0c 9b       	mov	r11,r6
80005192:	1a d8       	st.w	--sp,r8
80005194:	04 9a       	mov	r10,r2
80005196:	fa c8 f9 40 	sub	r8,sp,-1728
8000519a:	fa c9 ff b4 	sub	r9,sp,-76
8000519e:	08 9c       	mov	r12,r4
800051a0:	fe b0 f6 46 	rcall	80003e2c <get_arg>
800051a4:	2f dd       	sub	sp,-12
800051a6:	78 06       	ld.w	r6,r12[0x0]
800051a8:	c2 08       	rjmp	800051e8 <_vfprintf_r+0x1090>
800051aa:	2f f7       	sub	r7,-1
800051ac:	10 39       	cp.w	r9,r8
800051ae:	c0 84       	brge	800051be <_vfprintf_r+0x1066>
800051b0:	fa c9 f9 44 	sub	r9,sp,-1724
800051b4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800051b8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800051bc:	c1 68       	rjmp	800051e8 <_vfprintf_r+0x1090>
800051be:	41 09       	lddsp	r9,sp[0x40]
800051c0:	59 f8       	cp.w	r8,31
800051c2:	e0 89 00 10 	brgt	800051e2 <_vfprintf_r+0x108a>
800051c6:	f2 ca ff fc 	sub	r10,r9,-4
800051ca:	51 0a       	stdsp	sp[0x40],r10
800051cc:	72 06       	ld.w	r6,r9[0x0]
800051ce:	fa ce f9 44 	sub	lr,sp,-1724
800051d2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800051d6:	f3 46 fd 88 	st.w	r9[-632],r6
800051da:	2f f8       	sub	r8,-1
800051dc:	fb 48 06 b4 	st.w	sp[1716],r8
800051e0:	c0 48       	rjmp	800051e8 <_vfprintf_r+0x1090>
800051e2:	72 06       	ld.w	r6,r9[0x0]
800051e4:	2f c9       	sub	r9,-4
800051e6:	51 09       	stdsp	sp[0x40],r9
800051e8:	40 2c       	lddsp	r12,sp[0x8]
800051ea:	58 0c       	cp.w	r12,0
800051ec:	c1 05       	brlt	8000520c <_vfprintf_r+0x10b4>
800051ee:	18 9a       	mov	r10,r12
800051f0:	30 0b       	mov	r11,0
800051f2:	0c 9c       	mov	r12,r6
800051f4:	e0 a0 14 58 	rcall	80007aa4 <memchr>
800051f8:	e0 80 02 df 	breq	800057b6 <_vfprintf_r+0x165e>
800051fc:	f8 06 01 02 	sub	r2,r12,r6
80005200:	40 2b       	lddsp	r11,sp[0x8]
80005202:	16 32       	cp.w	r2,r11
80005204:	e0 89 02 d9 	brgt	800057b6 <_vfprintf_r+0x165e>
80005208:	e0 8f 02 d4 	bral	800057b0 <_vfprintf_r+0x1658>
8000520c:	30 0a       	mov	r10,0
8000520e:	0c 9c       	mov	r12,r6
80005210:	50 2a       	stdsp	sp[0x8],r10
80005212:	e0 a0 19 2b 	rcall	80008468 <strlen>
80005216:	18 92       	mov	r2,r12
80005218:	e0 8f 02 d2 	bral	800057bc <_vfprintf_r+0x1664>
8000521c:	50 a7       	stdsp	sp[0x28],r7
8000521e:	50 80       	stdsp	sp[0x20],r0
80005220:	0c 97       	mov	r7,r6
80005222:	04 94       	mov	r4,r2
80005224:	06 96       	mov	r6,r3
80005226:	02 92       	mov	r2,r1
80005228:	40 93       	lddsp	r3,sp[0x24]
8000522a:	10 90       	mov	r0,r8
8000522c:	40 41       	lddsp	r1,sp[0x10]
8000522e:	a5 a5       	sbr	r5,0x4
80005230:	c0 a8       	rjmp	80005244 <_vfprintf_r+0x10ec>
80005232:	50 a7       	stdsp	sp[0x28],r7
80005234:	50 80       	stdsp	sp[0x20],r0
80005236:	0c 97       	mov	r7,r6
80005238:	04 94       	mov	r4,r2
8000523a:	06 96       	mov	r6,r3
8000523c:	02 92       	mov	r2,r1
8000523e:	40 93       	lddsp	r3,sp[0x24]
80005240:	10 90       	mov	r0,r8
80005242:	40 41       	lddsp	r1,sp[0x10]
80005244:	ed b5 00 05 	bld	r5,0x5
80005248:	c5 61       	brne	800052f4 <_vfprintf_r+0x119c>
8000524a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000524e:	40 39       	lddsp	r9,sp[0xc]
80005250:	58 09       	cp.w	r9,0
80005252:	c2 10       	breq	80005294 <_vfprintf_r+0x113c>
80005254:	10 36       	cp.w	r6,r8
80005256:	c0 74       	brge	80005264 <_vfprintf_r+0x110c>
80005258:	fa c8 f9 44 	sub	r8,sp,-1724
8000525c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005260:	c2 38       	rjmp	800052a6 <_vfprintf_r+0x114e>
80005262:	d7 03       	nop
80005264:	fa c8 f9 50 	sub	r8,sp,-1712
80005268:	1a d8       	st.w	--sp,r8
8000526a:	fa c8 fa b8 	sub	r8,sp,-1352
8000526e:	1a d8       	st.w	--sp,r8
80005270:	fa c8 fb b4 	sub	r8,sp,-1100
80005274:	1a d8       	st.w	--sp,r8
80005276:	fa c8 f9 40 	sub	r8,sp,-1728
8000527a:	fa c9 ff b4 	sub	r9,sp,-76
8000527e:	04 9a       	mov	r10,r2
80005280:	0c 9b       	mov	r11,r6
80005282:	08 9c       	mov	r12,r4
80005284:	fe b0 f5 d4 	rcall	80003e2c <get_arg>
80005288:	2f dd       	sub	sp,-12
8000528a:	f8 e8 00 00 	ld.d	r8,r12[0]
8000528e:	fa e9 00 00 	st.d	sp[0],r8
80005292:	c2 e8       	rjmp	800052ee <_vfprintf_r+0x1196>
80005294:	ee ca ff ff 	sub	r10,r7,-1
80005298:	10 37       	cp.w	r7,r8
8000529a:	c0 b4       	brge	800052b0 <_vfprintf_r+0x1158>
8000529c:	fa c8 f9 44 	sub	r8,sp,-1724
800052a0:	14 97       	mov	r7,r10
800052a2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800052a6:	ec ea fd 88 	ld.d	r10,r6[-632]
800052aa:	fa eb 00 00 	st.d	sp[0],r10
800052ae:	c2 08       	rjmp	800052ee <_vfprintf_r+0x1196>
800052b0:	41 09       	lddsp	r9,sp[0x40]
800052b2:	59 f8       	cp.w	r8,31
800052b4:	e0 89 00 16 	brgt	800052e0 <_vfprintf_r+0x1188>
800052b8:	f2 e6 00 00 	ld.d	r6,r9[0]
800052bc:	f2 cb ff f8 	sub	r11,r9,-8
800052c0:	fa e7 00 00 	st.d	sp[0],r6
800052c4:	51 0b       	stdsp	sp[0x40],r11
800052c6:	fa c6 f9 44 	sub	r6,sp,-1724
800052ca:	ec 08 00 39 	add	r9,r6,r8<<0x3
800052ce:	fa e6 00 00 	ld.d	r6,sp[0]
800052d2:	f2 e7 fd 88 	st.d	r9[-632],r6
800052d6:	2f f8       	sub	r8,-1
800052d8:	14 97       	mov	r7,r10
800052da:	fb 48 06 b4 	st.w	sp[1716],r8
800052de:	c0 88       	rjmp	800052ee <_vfprintf_r+0x1196>
800052e0:	f2 e6 00 00 	ld.d	r6,r9[0]
800052e4:	2f 89       	sub	r9,-8
800052e6:	fa e7 00 00 	st.d	sp[0],r6
800052ea:	51 09       	stdsp	sp[0x40],r9
800052ec:	14 97       	mov	r7,r10
800052ee:	30 18       	mov	r8,1
800052f0:	e0 8f 01 d0 	bral	80005690 <_vfprintf_r+0x1538>
800052f4:	ed b5 00 04 	bld	r5,0x4
800052f8:	c1 61       	brne	80005324 <_vfprintf_r+0x11cc>
800052fa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052fe:	40 3e       	lddsp	lr,sp[0xc]
80005300:	58 0e       	cp.w	lr,0
80005302:	c0 80       	breq	80005312 <_vfprintf_r+0x11ba>
80005304:	10 36       	cp.w	r6,r8
80005306:	c6 74       	brge	800053d4 <_vfprintf_r+0x127c>
80005308:	fa cc f9 44 	sub	r12,sp,-1724
8000530c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005310:	c8 08       	rjmp	80005410 <_vfprintf_r+0x12b8>
80005312:	ee ca ff ff 	sub	r10,r7,-1
80005316:	10 37       	cp.w	r7,r8
80005318:	c7 f4       	brge	80005416 <_vfprintf_r+0x12be>
8000531a:	fa cb f9 44 	sub	r11,sp,-1724
8000531e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005322:	c7 68       	rjmp	8000540e <_vfprintf_r+0x12b6>
80005324:	ed b5 00 06 	bld	r5,0x6
80005328:	c4 a1       	brne	800053bc <_vfprintf_r+0x1264>
8000532a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000532e:	40 3c       	lddsp	r12,sp[0xc]
80005330:	58 0c       	cp.w	r12,0
80005332:	c1 d0       	breq	8000536c <_vfprintf_r+0x1214>
80005334:	10 36       	cp.w	r6,r8
80005336:	c0 64       	brge	80005342 <_vfprintf_r+0x11ea>
80005338:	fa cb f9 44 	sub	r11,sp,-1724
8000533c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005340:	c1 f8       	rjmp	8000537e <_vfprintf_r+0x1226>
80005342:	fa c8 f9 50 	sub	r8,sp,-1712
80005346:	1a d8       	st.w	--sp,r8
80005348:	fa c8 fa b8 	sub	r8,sp,-1352
8000534c:	1a d8       	st.w	--sp,r8
8000534e:	fa c8 fb b4 	sub	r8,sp,-1100
80005352:	1a d8       	st.w	--sp,r8
80005354:	fa c8 f9 40 	sub	r8,sp,-1728
80005358:	fa c9 ff b4 	sub	r9,sp,-76
8000535c:	04 9a       	mov	r10,r2
8000535e:	0c 9b       	mov	r11,r6
80005360:	08 9c       	mov	r12,r4
80005362:	fe b0 f5 65 	rcall	80003e2c <get_arg>
80005366:	2f dd       	sub	sp,-12
80005368:	98 18       	ld.sh	r8,r12[0x2]
8000536a:	c2 68       	rjmp	800053b6 <_vfprintf_r+0x125e>
8000536c:	ee ca ff ff 	sub	r10,r7,-1
80005370:	10 37       	cp.w	r7,r8
80005372:	c0 94       	brge	80005384 <_vfprintf_r+0x122c>
80005374:	fa c9 f9 44 	sub	r9,sp,-1724
80005378:	14 97       	mov	r7,r10
8000537a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000537e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005382:	c1 a8       	rjmp	800053b6 <_vfprintf_r+0x125e>
80005384:	41 09       	lddsp	r9,sp[0x40]
80005386:	59 f8       	cp.w	r8,31
80005388:	e0 89 00 13 	brgt	800053ae <_vfprintf_r+0x1256>
8000538c:	f2 cb ff fc 	sub	r11,r9,-4
80005390:	51 0b       	stdsp	sp[0x40],r11
80005392:	72 09       	ld.w	r9,r9[0x0]
80005394:	fa c6 f9 44 	sub	r6,sp,-1724
80005398:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000539c:	2f f8       	sub	r8,-1
8000539e:	f7 49 fd 88 	st.w	r11[-632],r9
800053a2:	fb 48 06 b4 	st.w	sp[1716],r8
800053a6:	14 97       	mov	r7,r10
800053a8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800053ac:	c0 58       	rjmp	800053b6 <_vfprintf_r+0x125e>
800053ae:	92 18       	ld.sh	r8,r9[0x2]
800053b0:	14 97       	mov	r7,r10
800053b2:	2f c9       	sub	r9,-4
800053b4:	51 09       	stdsp	sp[0x40],r9
800053b6:	5c 78       	castu.h	r8
800053b8:	50 18       	stdsp	sp[0x4],r8
800053ba:	c4 68       	rjmp	80005446 <_vfprintf_r+0x12ee>
800053bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053c0:	40 3c       	lddsp	r12,sp[0xc]
800053c2:	58 0c       	cp.w	r12,0
800053c4:	c1 d0       	breq	800053fe <_vfprintf_r+0x12a6>
800053c6:	10 36       	cp.w	r6,r8
800053c8:	c0 64       	brge	800053d4 <_vfprintf_r+0x127c>
800053ca:	fa cb f9 44 	sub	r11,sp,-1724
800053ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053d2:	c1 f8       	rjmp	80005410 <_vfprintf_r+0x12b8>
800053d4:	fa c8 f9 50 	sub	r8,sp,-1712
800053d8:	1a d8       	st.w	--sp,r8
800053da:	fa c8 fa b8 	sub	r8,sp,-1352
800053de:	0c 9b       	mov	r11,r6
800053e0:	1a d8       	st.w	--sp,r8
800053e2:	fa c8 fb b4 	sub	r8,sp,-1100
800053e6:	04 9a       	mov	r10,r2
800053e8:	1a d8       	st.w	--sp,r8
800053ea:	08 9c       	mov	r12,r4
800053ec:	fa c8 f9 40 	sub	r8,sp,-1728
800053f0:	fa c9 ff b4 	sub	r9,sp,-76
800053f4:	fe b0 f5 1c 	rcall	80003e2c <get_arg>
800053f8:	2f dd       	sub	sp,-12
800053fa:	78 0b       	ld.w	r11,r12[0x0]
800053fc:	c2 48       	rjmp	80005444 <_vfprintf_r+0x12ec>
800053fe:	ee ca ff ff 	sub	r10,r7,-1
80005402:	10 37       	cp.w	r7,r8
80005404:	c0 94       	brge	80005416 <_vfprintf_r+0x12be>
80005406:	fa c9 f9 44 	sub	r9,sp,-1724
8000540a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000540e:	14 97       	mov	r7,r10
80005410:	ec fb fd 88 	ld.w	r11,r6[-632]
80005414:	c1 88       	rjmp	80005444 <_vfprintf_r+0x12ec>
80005416:	41 09       	lddsp	r9,sp[0x40]
80005418:	59 f8       	cp.w	r8,31
8000541a:	e0 89 00 11 	brgt	8000543c <_vfprintf_r+0x12e4>
8000541e:	f2 cb ff fc 	sub	r11,r9,-4
80005422:	51 0b       	stdsp	sp[0x40],r11
80005424:	fa c6 f9 44 	sub	r6,sp,-1724
80005428:	72 0b       	ld.w	r11,r9[0x0]
8000542a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000542e:	f3 4b fd 88 	st.w	r9[-632],r11
80005432:	2f f8       	sub	r8,-1
80005434:	14 97       	mov	r7,r10
80005436:	fb 48 06 b4 	st.w	sp[1716],r8
8000543a:	c0 58       	rjmp	80005444 <_vfprintf_r+0x12ec>
8000543c:	72 0b       	ld.w	r11,r9[0x0]
8000543e:	14 97       	mov	r7,r10
80005440:	2f c9       	sub	r9,-4
80005442:	51 09       	stdsp	sp[0x40],r9
80005444:	50 1b       	stdsp	sp[0x4],r11
80005446:	30 0e       	mov	lr,0
80005448:	30 18       	mov	r8,1
8000544a:	50 0e       	stdsp	sp[0x0],lr
8000544c:	c2 29       	rjmp	80005690 <_vfprintf_r+0x1538>
8000544e:	50 a7       	stdsp	sp[0x28],r7
80005450:	50 80       	stdsp	sp[0x20],r0
80005452:	0c 97       	mov	r7,r6
80005454:	04 94       	mov	r4,r2
80005456:	06 96       	mov	r6,r3
80005458:	02 92       	mov	r2,r1
8000545a:	fe cc b9 a6 	sub	r12,pc,-18010
8000545e:	40 93       	lddsp	r3,sp[0x24]
80005460:	10 90       	mov	r0,r8
80005462:	40 41       	lddsp	r1,sp[0x10]
80005464:	50 dc       	stdsp	sp[0x34],r12
80005466:	ed b5 00 05 	bld	r5,0x5
8000546a:	c5 51       	brne	80005514 <_vfprintf_r+0x13bc>
8000546c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005470:	40 3b       	lddsp	r11,sp[0xc]
80005472:	58 0b       	cp.w	r11,0
80005474:	c2 20       	breq	800054b8 <_vfprintf_r+0x1360>
80005476:	10 36       	cp.w	r6,r8
80005478:	c0 a4       	brge	8000548c <_vfprintf_r+0x1334>
8000547a:	fa ca f9 44 	sub	r10,sp,-1724
8000547e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005482:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005486:	fa e9 00 00 	st.d	sp[0],r8
8000548a:	cf 28       	rjmp	8000566e <_vfprintf_r+0x1516>
8000548c:	fa c8 f9 50 	sub	r8,sp,-1712
80005490:	1a d8       	st.w	--sp,r8
80005492:	fa c8 fa b8 	sub	r8,sp,-1352
80005496:	04 9a       	mov	r10,r2
80005498:	1a d8       	st.w	--sp,r8
8000549a:	0c 9b       	mov	r11,r6
8000549c:	fa c8 fb b4 	sub	r8,sp,-1100
800054a0:	08 9c       	mov	r12,r4
800054a2:	1a d8       	st.w	--sp,r8
800054a4:	fa c8 f9 40 	sub	r8,sp,-1728
800054a8:	fa c9 ff b4 	sub	r9,sp,-76
800054ac:	fe b0 f4 c0 	rcall	80003e2c <get_arg>
800054b0:	2f dd       	sub	sp,-12
800054b2:	f8 ea 00 00 	ld.d	r10,r12[0]
800054b6:	c0 c8       	rjmp	800054ce <_vfprintf_r+0x1376>
800054b8:	ee ca ff ff 	sub	r10,r7,-1
800054bc:	10 37       	cp.w	r7,r8
800054be:	c0 b4       	brge	800054d4 <_vfprintf_r+0x137c>
800054c0:	fa c9 f9 44 	sub	r9,sp,-1724
800054c4:	14 97       	mov	r7,r10
800054c6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054ca:	ec ea fd 88 	ld.d	r10,r6[-632]
800054ce:	fa eb 00 00 	st.d	sp[0],r10
800054d2:	cc e8       	rjmp	8000566e <_vfprintf_r+0x1516>
800054d4:	41 09       	lddsp	r9,sp[0x40]
800054d6:	59 f8       	cp.w	r8,31
800054d8:	e0 89 00 16 	brgt	80005504 <_vfprintf_r+0x13ac>
800054dc:	f2 e6 00 00 	ld.d	r6,r9[0]
800054e0:	f2 cb ff f8 	sub	r11,r9,-8
800054e4:	fa e7 00 00 	st.d	sp[0],r6
800054e8:	51 0b       	stdsp	sp[0x40],r11
800054ea:	fa c6 f9 44 	sub	r6,sp,-1724
800054ee:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054f2:	fa e6 00 00 	ld.d	r6,sp[0]
800054f6:	f2 e7 fd 88 	st.d	r9[-632],r6
800054fa:	2f f8       	sub	r8,-1
800054fc:	14 97       	mov	r7,r10
800054fe:	fb 48 06 b4 	st.w	sp[1716],r8
80005502:	cb 68       	rjmp	8000566e <_vfprintf_r+0x1516>
80005504:	f2 e6 00 00 	ld.d	r6,r9[0]
80005508:	2f 89       	sub	r9,-8
8000550a:	fa e7 00 00 	st.d	sp[0],r6
8000550e:	51 09       	stdsp	sp[0x40],r9
80005510:	14 97       	mov	r7,r10
80005512:	ca e8       	rjmp	8000566e <_vfprintf_r+0x1516>
80005514:	ed b5 00 04 	bld	r5,0x4
80005518:	c1 71       	brne	80005546 <_vfprintf_r+0x13ee>
8000551a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000551e:	40 3e       	lddsp	lr,sp[0xc]
80005520:	58 0e       	cp.w	lr,0
80005522:	c0 80       	breq	80005532 <_vfprintf_r+0x13da>
80005524:	10 36       	cp.w	r6,r8
80005526:	c6 94       	brge	800055f8 <_vfprintf_r+0x14a0>
80005528:	fa cc f9 44 	sub	r12,sp,-1724
8000552c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005530:	c8 28       	rjmp	80005634 <_vfprintf_r+0x14dc>
80005532:	ee ca ff ff 	sub	r10,r7,-1
80005536:	10 37       	cp.w	r7,r8
80005538:	e0 84 00 81 	brge	8000563a <_vfprintf_r+0x14e2>
8000553c:	fa cb f9 44 	sub	r11,sp,-1724
80005540:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005544:	c7 78       	rjmp	80005632 <_vfprintf_r+0x14da>
80005546:	ed b5 00 06 	bld	r5,0x6
8000554a:	c4 b1       	brne	800055e0 <_vfprintf_r+0x1488>
8000554c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005550:	40 3c       	lddsp	r12,sp[0xc]
80005552:	58 0c       	cp.w	r12,0
80005554:	c1 d0       	breq	8000558e <_vfprintf_r+0x1436>
80005556:	10 36       	cp.w	r6,r8
80005558:	c0 64       	brge	80005564 <_vfprintf_r+0x140c>
8000555a:	fa cb f9 44 	sub	r11,sp,-1724
8000555e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005562:	c1 f8       	rjmp	800055a0 <_vfprintf_r+0x1448>
80005564:	fa c8 f9 50 	sub	r8,sp,-1712
80005568:	1a d8       	st.w	--sp,r8
8000556a:	fa c8 fa b8 	sub	r8,sp,-1352
8000556e:	1a d8       	st.w	--sp,r8
80005570:	fa c8 fb b4 	sub	r8,sp,-1100
80005574:	1a d8       	st.w	--sp,r8
80005576:	fa c8 f9 40 	sub	r8,sp,-1728
8000557a:	fa c9 ff b4 	sub	r9,sp,-76
8000557e:	04 9a       	mov	r10,r2
80005580:	0c 9b       	mov	r11,r6
80005582:	08 9c       	mov	r12,r4
80005584:	fe b0 f4 54 	rcall	80003e2c <get_arg>
80005588:	2f dd       	sub	sp,-12
8000558a:	98 18       	ld.sh	r8,r12[0x2]
8000558c:	c2 78       	rjmp	800055da <_vfprintf_r+0x1482>
8000558e:	ee ca ff ff 	sub	r10,r7,-1
80005592:	10 37       	cp.w	r7,r8
80005594:	c0 a4       	brge	800055a8 <_vfprintf_r+0x1450>
80005596:	fa c9 f9 44 	sub	r9,sp,-1724
8000559a:	14 97       	mov	r7,r10
8000559c:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055a0:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800055a4:	c1 b8       	rjmp	800055da <_vfprintf_r+0x1482>
800055a6:	d7 03       	nop
800055a8:	41 09       	lddsp	r9,sp[0x40]
800055aa:	59 f8       	cp.w	r8,31
800055ac:	e0 89 00 13 	brgt	800055d2 <_vfprintf_r+0x147a>
800055b0:	f2 cb ff fc 	sub	r11,r9,-4
800055b4:	51 0b       	stdsp	sp[0x40],r11
800055b6:	72 09       	ld.w	r9,r9[0x0]
800055b8:	fa c6 f9 44 	sub	r6,sp,-1724
800055bc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800055c0:	2f f8       	sub	r8,-1
800055c2:	f7 49 fd 88 	st.w	r11[-632],r9
800055c6:	fb 48 06 b4 	st.w	sp[1716],r8
800055ca:	14 97       	mov	r7,r10
800055cc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800055d0:	c0 58       	rjmp	800055da <_vfprintf_r+0x1482>
800055d2:	92 18       	ld.sh	r8,r9[0x2]
800055d4:	14 97       	mov	r7,r10
800055d6:	2f c9       	sub	r9,-4
800055d8:	51 09       	stdsp	sp[0x40],r9
800055da:	5c 78       	castu.h	r8
800055dc:	50 18       	stdsp	sp[0x4],r8
800055de:	c4 68       	rjmp	8000566a <_vfprintf_r+0x1512>
800055e0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055e4:	40 3c       	lddsp	r12,sp[0xc]
800055e6:	58 0c       	cp.w	r12,0
800055e8:	c1 d0       	breq	80005622 <_vfprintf_r+0x14ca>
800055ea:	10 36       	cp.w	r6,r8
800055ec:	c0 64       	brge	800055f8 <_vfprintf_r+0x14a0>
800055ee:	fa cb f9 44 	sub	r11,sp,-1724
800055f2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800055f6:	c1 f8       	rjmp	80005634 <_vfprintf_r+0x14dc>
800055f8:	fa c8 f9 50 	sub	r8,sp,-1712
800055fc:	1a d8       	st.w	--sp,r8
800055fe:	fa c8 fa b8 	sub	r8,sp,-1352
80005602:	0c 9b       	mov	r11,r6
80005604:	1a d8       	st.w	--sp,r8
80005606:	fa c8 fb b4 	sub	r8,sp,-1100
8000560a:	04 9a       	mov	r10,r2
8000560c:	1a d8       	st.w	--sp,r8
8000560e:	08 9c       	mov	r12,r4
80005610:	fa c8 f9 40 	sub	r8,sp,-1728
80005614:	fa c9 ff b4 	sub	r9,sp,-76
80005618:	fe b0 f4 0a 	rcall	80003e2c <get_arg>
8000561c:	2f dd       	sub	sp,-12
8000561e:	78 0b       	ld.w	r11,r12[0x0]
80005620:	c2 48       	rjmp	80005668 <_vfprintf_r+0x1510>
80005622:	ee ca ff ff 	sub	r10,r7,-1
80005626:	10 37       	cp.w	r7,r8
80005628:	c0 94       	brge	8000563a <_vfprintf_r+0x14e2>
8000562a:	fa c9 f9 44 	sub	r9,sp,-1724
8000562e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005632:	14 97       	mov	r7,r10
80005634:	ec fb fd 88 	ld.w	r11,r6[-632]
80005638:	c1 88       	rjmp	80005668 <_vfprintf_r+0x1510>
8000563a:	41 09       	lddsp	r9,sp[0x40]
8000563c:	59 f8       	cp.w	r8,31
8000563e:	e0 89 00 11 	brgt	80005660 <_vfprintf_r+0x1508>
80005642:	f2 cb ff fc 	sub	r11,r9,-4
80005646:	51 0b       	stdsp	sp[0x40],r11
80005648:	fa c6 f9 44 	sub	r6,sp,-1724
8000564c:	72 0b       	ld.w	r11,r9[0x0]
8000564e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005652:	f3 4b fd 88 	st.w	r9[-632],r11
80005656:	2f f8       	sub	r8,-1
80005658:	14 97       	mov	r7,r10
8000565a:	fb 48 06 b4 	st.w	sp[1716],r8
8000565e:	c0 58       	rjmp	80005668 <_vfprintf_r+0x1510>
80005660:	72 0b       	ld.w	r11,r9[0x0]
80005662:	14 97       	mov	r7,r10
80005664:	2f c9       	sub	r9,-4
80005666:	51 09       	stdsp	sp[0x40],r9
80005668:	50 1b       	stdsp	sp[0x4],r11
8000566a:	30 0e       	mov	lr,0
8000566c:	50 0e       	stdsp	sp[0x0],lr
8000566e:	40 08       	lddsp	r8,sp[0x0]
80005670:	40 1c       	lddsp	r12,sp[0x4]
80005672:	18 48       	or	r8,r12
80005674:	5f 19       	srne	r9
80005676:	0a 98       	mov	r8,r5
80005678:	eb e9 00 09 	and	r9,r5,r9
8000567c:	a1 b8       	sbr	r8,0x1
8000567e:	58 09       	cp.w	r9,0
80005680:	c0 70       	breq	8000568e <_vfprintf_r+0x1536>
80005682:	10 95       	mov	r5,r8
80005684:	fb 60 06 b9 	st.b	sp[1721],r0
80005688:	33 08       	mov	r8,48
8000568a:	fb 68 06 b8 	st.b	sp[1720],r8
8000568e:	30 28       	mov	r8,2
80005690:	30 09       	mov	r9,0
80005692:	fb 69 06 bb 	st.b	sp[1723],r9
80005696:	0a 99       	mov	r9,r5
80005698:	a7 d9       	cbr	r9,0x7
8000569a:	40 2b       	lddsp	r11,sp[0x8]
8000569c:	40 16       	lddsp	r6,sp[0x4]
8000569e:	58 0b       	cp.w	r11,0
800056a0:	5f 1a       	srne	r10
800056a2:	f2 05 17 40 	movge	r5,r9
800056a6:	fa c2 f9 78 	sub	r2,sp,-1672
800056aa:	40 09       	lddsp	r9,sp[0x0]
800056ac:	0c 49       	or	r9,r6
800056ae:	5f 19       	srne	r9
800056b0:	f5 e9 10 09 	or	r9,r10,r9
800056b4:	c5 c0       	breq	8000576c <_vfprintf_r+0x1614>
800056b6:	30 19       	mov	r9,1
800056b8:	f2 08 18 00 	cp.b	r8,r9
800056bc:	c0 60       	breq	800056c8 <_vfprintf_r+0x1570>
800056be:	30 29       	mov	r9,2
800056c0:	f2 08 18 00 	cp.b	r8,r9
800056c4:	c0 41       	brne	800056cc <_vfprintf_r+0x1574>
800056c6:	c3 c8       	rjmp	8000573e <_vfprintf_r+0x15e6>
800056c8:	04 96       	mov	r6,r2
800056ca:	c3 08       	rjmp	8000572a <_vfprintf_r+0x15d2>
800056cc:	04 96       	mov	r6,r2
800056ce:	fa e8 00 00 	ld.d	r8,sp[0]
800056d2:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800056d6:	2d 0a       	sub	r10,-48
800056d8:	0c fa       	st.b	--r6,r10
800056da:	f0 0b 16 03 	lsr	r11,r8,0x3
800056de:	f2 0c 16 03 	lsr	r12,r9,0x3
800056e2:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800056e6:	18 99       	mov	r9,r12
800056e8:	16 98       	mov	r8,r11
800056ea:	58 08       	cp.w	r8,0
800056ec:	5c 29       	cpc	r9
800056ee:	cf 21       	brne	800056d2 <_vfprintf_r+0x157a>
800056f0:	fa e9 00 00 	st.d	sp[0],r8
800056f4:	ed b5 00 00 	bld	r5,0x0
800056f8:	c4 51       	brne	80005782 <_vfprintf_r+0x162a>
800056fa:	33 09       	mov	r9,48
800056fc:	f2 0a 18 00 	cp.b	r10,r9
80005700:	c4 10       	breq	80005782 <_vfprintf_r+0x162a>
80005702:	0c f9       	st.b	--r6,r9
80005704:	c3 f8       	rjmp	80005782 <_vfprintf_r+0x162a>
80005706:	fa ea 00 00 	ld.d	r10,sp[0]
8000570a:	30 a8       	mov	r8,10
8000570c:	30 09       	mov	r9,0
8000570e:	e0 a0 1c cb 	rcall	800090a4 <__avr32_umod64>
80005712:	30 a8       	mov	r8,10
80005714:	2d 0a       	sub	r10,-48
80005716:	30 09       	mov	r9,0
80005718:	ac 8a       	st.b	r6[0x0],r10
8000571a:	fa ea 00 00 	ld.d	r10,sp[0]
8000571e:	e0 a0 1b 91 	rcall	80008e40 <__avr32_udiv64>
80005722:	16 99       	mov	r9,r11
80005724:	14 98       	mov	r8,r10
80005726:	fa e9 00 00 	st.d	sp[0],r8
8000572a:	20 16       	sub	r6,1
8000572c:	fa ea 00 00 	ld.d	r10,sp[0]
80005730:	58 9a       	cp.w	r10,9
80005732:	5c 2b       	cpc	r11
80005734:	fe 9b ff e9 	brhi	80005706 <_vfprintf_r+0x15ae>
80005738:	1b f8       	ld.ub	r8,sp[0x7]
8000573a:	2d 08       	sub	r8,-48
8000573c:	c2 08       	rjmp	8000577c <_vfprintf_r+0x1624>
8000573e:	04 96       	mov	r6,r2
80005740:	fa e8 00 00 	ld.d	r8,sp[0]
80005744:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005748:	40 de       	lddsp	lr,sp[0x34]
8000574a:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000574e:	0c fa       	st.b	--r6,r10
80005750:	f2 0b 16 04 	lsr	r11,r9,0x4
80005754:	f0 0a 16 04 	lsr	r10,r8,0x4
80005758:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000575c:	16 99       	mov	r9,r11
8000575e:	14 98       	mov	r8,r10
80005760:	58 08       	cp.w	r8,0
80005762:	5c 29       	cpc	r9
80005764:	cf 01       	brne	80005744 <_vfprintf_r+0x15ec>
80005766:	fa e9 00 00 	st.d	sp[0],r8
8000576a:	c0 c8       	rjmp	80005782 <_vfprintf_r+0x162a>
8000576c:	58 08       	cp.w	r8,0
8000576e:	c0 91       	brne	80005780 <_vfprintf_r+0x1628>
80005770:	ed b5 00 00 	bld	r5,0x0
80005774:	c0 61       	brne	80005780 <_vfprintf_r+0x1628>
80005776:	fa c6 f9 79 	sub	r6,sp,-1671
8000577a:	33 08       	mov	r8,48
8000577c:	ac 88       	st.b	r6[0x0],r8
8000577e:	c0 28       	rjmp	80005782 <_vfprintf_r+0x162a>
80005780:	04 96       	mov	r6,r2
80005782:	0c 12       	sub	r2,r6
80005784:	c1 c8       	rjmp	800057bc <_vfprintf_r+0x1664>
80005786:	50 a7       	stdsp	sp[0x28],r7
80005788:	50 80       	stdsp	sp[0x20],r0
8000578a:	40 93       	lddsp	r3,sp[0x24]
8000578c:	0c 97       	mov	r7,r6
8000578e:	10 90       	mov	r0,r8
80005790:	04 94       	mov	r4,r2
80005792:	40 41       	lddsp	r1,sp[0x10]
80005794:	58 08       	cp.w	r8,0
80005796:	e0 80 04 4f 	breq	80006034 <_vfprintf_r+0x1edc>
8000579a:	fb 68 06 60 	st.b	sp[1632],r8
8000579e:	30 0c       	mov	r12,0
800057a0:	30 08       	mov	r8,0
800057a2:	30 12       	mov	r2,1
800057a4:	fb 68 06 bb 	st.b	sp[1723],r8
800057a8:	50 2c       	stdsp	sp[0x8],r12
800057aa:	fa c6 f9 a0 	sub	r6,sp,-1632
800057ae:	c0 78       	rjmp	800057bc <_vfprintf_r+0x1664>
800057b0:	30 0b       	mov	r11,0
800057b2:	50 2b       	stdsp	sp[0x8],r11
800057b4:	c0 48       	rjmp	800057bc <_vfprintf_r+0x1664>
800057b6:	40 22       	lddsp	r2,sp[0x8]
800057b8:	30 0a       	mov	r10,0
800057ba:	50 2a       	stdsp	sp[0x8],r10
800057bc:	40 29       	lddsp	r9,sp[0x8]
800057be:	e4 09 0c 49 	max	r9,r2,r9
800057c2:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800057c6:	50 39       	stdsp	sp[0xc],r9
800057c8:	0a 9e       	mov	lr,r5
800057ca:	30 09       	mov	r9,0
800057cc:	e2 1e 00 02 	andl	lr,0x2,COH
800057d0:	f2 08 18 00 	cp.b	r8,r9
800057d4:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800057d8:	f7 b8 01 ff 	subne	r8,-1
800057dc:	fb f8 1a 03 	st.wne	sp[0xc],r8
800057e0:	0a 9b       	mov	r11,r5
800057e2:	58 0e       	cp.w	lr,0
800057e4:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800057e8:	f7 bc 01 fe 	subne	r12,-2
800057ec:	fb fc 1a 03 	st.wne	sp[0xc],r12
800057f0:	e2 1b 00 84 	andl	r11,0x84,COH
800057f4:	50 fe       	stdsp	sp[0x3c],lr
800057f6:	50 9b       	stdsp	sp[0x24],r11
800057f8:	c4 71       	brne	80005886 <_vfprintf_r+0x172e>
800057fa:	40 8a       	lddsp	r10,sp[0x20]
800057fc:	40 39       	lddsp	r9,sp[0xc]
800057fe:	12 1a       	sub	r10,r9
80005800:	50 4a       	stdsp	sp[0x10],r10
80005802:	58 0a       	cp.w	r10,0
80005804:	e0 89 00 20 	brgt	80005844 <_vfprintf_r+0x16ec>
80005808:	c3 f8       	rjmp	80005886 <_vfprintf_r+0x172e>
8000580a:	2f 09       	sub	r9,-16
8000580c:	2f f8       	sub	r8,-1
8000580e:	fe ce bd 42 	sub	lr,pc,-17086
80005812:	31 0c       	mov	r12,16
80005814:	fb 49 06 90 	st.w	sp[1680],r9
80005818:	87 0e       	st.w	r3[0x0],lr
8000581a:	87 1c       	st.w	r3[0x4],r12
8000581c:	fb 48 06 8c 	st.w	sp[1676],r8
80005820:	58 78       	cp.w	r8,7
80005822:	e0 89 00 04 	brgt	8000582a <_vfprintf_r+0x16d2>
80005826:	2f 83       	sub	r3,-8
80005828:	c0 b8       	rjmp	8000583e <_vfprintf_r+0x16e6>
8000582a:	fa ca f9 78 	sub	r10,sp,-1672
8000582e:	02 9b       	mov	r11,r1
80005830:	08 9c       	mov	r12,r4
80005832:	fe b0 f4 85 	rcall	8000413c <__sprint_r>
80005836:	e0 81 04 10 	brne	80006056 <_vfprintf_r+0x1efe>
8000583a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000583e:	40 4b       	lddsp	r11,sp[0x10]
80005840:	21 0b       	sub	r11,16
80005842:	50 4b       	stdsp	sp[0x10],r11
80005844:	fa f9 06 90 	ld.w	r9,sp[1680]
80005848:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000584c:	fe ca bd 80 	sub	r10,pc,-17024
80005850:	40 4e       	lddsp	lr,sp[0x10]
80005852:	59 0e       	cp.w	lr,16
80005854:	fe 99 ff db 	brgt	8000580a <_vfprintf_r+0x16b2>
80005858:	1c 09       	add	r9,lr
8000585a:	2f f8       	sub	r8,-1
8000585c:	87 0a       	st.w	r3[0x0],r10
8000585e:	fb 49 06 90 	st.w	sp[1680],r9
80005862:	87 1e       	st.w	r3[0x4],lr
80005864:	fb 48 06 8c 	st.w	sp[1676],r8
80005868:	58 78       	cp.w	r8,7
8000586a:	e0 89 00 04 	brgt	80005872 <_vfprintf_r+0x171a>
8000586e:	2f 83       	sub	r3,-8
80005870:	c0 b8       	rjmp	80005886 <_vfprintf_r+0x172e>
80005872:	fa ca f9 78 	sub	r10,sp,-1672
80005876:	02 9b       	mov	r11,r1
80005878:	08 9c       	mov	r12,r4
8000587a:	fe b0 f4 61 	rcall	8000413c <__sprint_r>
8000587e:	e0 81 03 ec 	brne	80006056 <_vfprintf_r+0x1efe>
80005882:	fa c3 f9 e0 	sub	r3,sp,-1568
80005886:	30 09       	mov	r9,0
80005888:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000588c:	f2 08 18 00 	cp.b	r8,r9
80005890:	c1 f0       	breq	800058ce <_vfprintf_r+0x1776>
80005892:	fa f8 06 90 	ld.w	r8,sp[1680]
80005896:	fa c9 f9 45 	sub	r9,sp,-1723
8000589a:	2f f8       	sub	r8,-1
8000589c:	87 09       	st.w	r3[0x0],r9
8000589e:	fb 48 06 90 	st.w	sp[1680],r8
800058a2:	30 19       	mov	r9,1
800058a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058a8:	87 19       	st.w	r3[0x4],r9
800058aa:	2f f8       	sub	r8,-1
800058ac:	fb 48 06 8c 	st.w	sp[1676],r8
800058b0:	58 78       	cp.w	r8,7
800058b2:	e0 89 00 04 	brgt	800058ba <_vfprintf_r+0x1762>
800058b6:	2f 83       	sub	r3,-8
800058b8:	c0 b8       	rjmp	800058ce <_vfprintf_r+0x1776>
800058ba:	fa ca f9 78 	sub	r10,sp,-1672
800058be:	02 9b       	mov	r11,r1
800058c0:	08 9c       	mov	r12,r4
800058c2:	fe b0 f4 3d 	rcall	8000413c <__sprint_r>
800058c6:	e0 81 03 c8 	brne	80006056 <_vfprintf_r+0x1efe>
800058ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800058ce:	40 fc       	lddsp	r12,sp[0x3c]
800058d0:	58 0c       	cp.w	r12,0
800058d2:	c1 f0       	breq	80005910 <_vfprintf_r+0x17b8>
800058d4:	fa f8 06 90 	ld.w	r8,sp[1680]
800058d8:	fa c9 f9 48 	sub	r9,sp,-1720
800058dc:	2f e8       	sub	r8,-2
800058de:	87 09       	st.w	r3[0x0],r9
800058e0:	fb 48 06 90 	st.w	sp[1680],r8
800058e4:	30 29       	mov	r9,2
800058e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058ea:	87 19       	st.w	r3[0x4],r9
800058ec:	2f f8       	sub	r8,-1
800058ee:	fb 48 06 8c 	st.w	sp[1676],r8
800058f2:	58 78       	cp.w	r8,7
800058f4:	e0 89 00 04 	brgt	800058fc <_vfprintf_r+0x17a4>
800058f8:	2f 83       	sub	r3,-8
800058fa:	c0 b8       	rjmp	80005910 <_vfprintf_r+0x17b8>
800058fc:	fa ca f9 78 	sub	r10,sp,-1672
80005900:	02 9b       	mov	r11,r1
80005902:	08 9c       	mov	r12,r4
80005904:	fe b0 f4 1c 	rcall	8000413c <__sprint_r>
80005908:	e0 81 03 a7 	brne	80006056 <_vfprintf_r+0x1efe>
8000590c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005910:	40 9b       	lddsp	r11,sp[0x24]
80005912:	e0 4b 00 80 	cp.w	r11,128
80005916:	c4 71       	brne	800059a4 <_vfprintf_r+0x184c>
80005918:	40 8a       	lddsp	r10,sp[0x20]
8000591a:	40 39       	lddsp	r9,sp[0xc]
8000591c:	12 1a       	sub	r10,r9
8000591e:	50 4a       	stdsp	sp[0x10],r10
80005920:	58 0a       	cp.w	r10,0
80005922:	e0 89 00 20 	brgt	80005962 <_vfprintf_r+0x180a>
80005926:	c3 f8       	rjmp	800059a4 <_vfprintf_r+0x184c>
80005928:	2f 09       	sub	r9,-16
8000592a:	2f f8       	sub	r8,-1
8000592c:	fe ce be 50 	sub	lr,pc,-16816
80005930:	31 0c       	mov	r12,16
80005932:	fb 49 06 90 	st.w	sp[1680],r9
80005936:	87 0e       	st.w	r3[0x0],lr
80005938:	87 1c       	st.w	r3[0x4],r12
8000593a:	fb 48 06 8c 	st.w	sp[1676],r8
8000593e:	58 78       	cp.w	r8,7
80005940:	e0 89 00 04 	brgt	80005948 <_vfprintf_r+0x17f0>
80005944:	2f 83       	sub	r3,-8
80005946:	c0 b8       	rjmp	8000595c <_vfprintf_r+0x1804>
80005948:	fa ca f9 78 	sub	r10,sp,-1672
8000594c:	02 9b       	mov	r11,r1
8000594e:	08 9c       	mov	r12,r4
80005950:	fe b0 f3 f6 	rcall	8000413c <__sprint_r>
80005954:	e0 81 03 81 	brne	80006056 <_vfprintf_r+0x1efe>
80005958:	fa c3 f9 e0 	sub	r3,sp,-1568
8000595c:	40 4b       	lddsp	r11,sp[0x10]
8000595e:	21 0b       	sub	r11,16
80005960:	50 4b       	stdsp	sp[0x10],r11
80005962:	fa f9 06 90 	ld.w	r9,sp[1680]
80005966:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000596a:	fe ca be 8e 	sub	r10,pc,-16754
8000596e:	40 4e       	lddsp	lr,sp[0x10]
80005970:	59 0e       	cp.w	lr,16
80005972:	fe 99 ff db 	brgt	80005928 <_vfprintf_r+0x17d0>
80005976:	1c 09       	add	r9,lr
80005978:	2f f8       	sub	r8,-1
8000597a:	87 0a       	st.w	r3[0x0],r10
8000597c:	fb 49 06 90 	st.w	sp[1680],r9
80005980:	87 1e       	st.w	r3[0x4],lr
80005982:	fb 48 06 8c 	st.w	sp[1676],r8
80005986:	58 78       	cp.w	r8,7
80005988:	e0 89 00 04 	brgt	80005990 <_vfprintf_r+0x1838>
8000598c:	2f 83       	sub	r3,-8
8000598e:	c0 b8       	rjmp	800059a4 <_vfprintf_r+0x184c>
80005990:	fa ca f9 78 	sub	r10,sp,-1672
80005994:	02 9b       	mov	r11,r1
80005996:	08 9c       	mov	r12,r4
80005998:	fe b0 f3 d2 	rcall	8000413c <__sprint_r>
8000599c:	e0 81 03 5d 	brne	80006056 <_vfprintf_r+0x1efe>
800059a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800059a4:	40 2c       	lddsp	r12,sp[0x8]
800059a6:	04 1c       	sub	r12,r2
800059a8:	50 2c       	stdsp	sp[0x8],r12
800059aa:	58 0c       	cp.w	r12,0
800059ac:	e0 89 00 20 	brgt	800059ec <_vfprintf_r+0x1894>
800059b0:	c3 f8       	rjmp	80005a2e <_vfprintf_r+0x18d6>
800059b2:	2f 09       	sub	r9,-16
800059b4:	2f f8       	sub	r8,-1
800059b6:	fe cb be da 	sub	r11,pc,-16678
800059ba:	31 0a       	mov	r10,16
800059bc:	fb 49 06 90 	st.w	sp[1680],r9
800059c0:	87 0b       	st.w	r3[0x0],r11
800059c2:	87 1a       	st.w	r3[0x4],r10
800059c4:	fb 48 06 8c 	st.w	sp[1676],r8
800059c8:	58 78       	cp.w	r8,7
800059ca:	e0 89 00 04 	brgt	800059d2 <_vfprintf_r+0x187a>
800059ce:	2f 83       	sub	r3,-8
800059d0:	c0 b8       	rjmp	800059e6 <_vfprintf_r+0x188e>
800059d2:	fa ca f9 78 	sub	r10,sp,-1672
800059d6:	02 9b       	mov	r11,r1
800059d8:	08 9c       	mov	r12,r4
800059da:	fe b0 f3 b1 	rcall	8000413c <__sprint_r>
800059de:	e0 81 03 3c 	brne	80006056 <_vfprintf_r+0x1efe>
800059e2:	fa c3 f9 e0 	sub	r3,sp,-1568
800059e6:	40 29       	lddsp	r9,sp[0x8]
800059e8:	21 09       	sub	r9,16
800059ea:	50 29       	stdsp	sp[0x8],r9
800059ec:	fa f9 06 90 	ld.w	r9,sp[1680]
800059f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059f4:	fe ca bf 18 	sub	r10,pc,-16616
800059f8:	40 2e       	lddsp	lr,sp[0x8]
800059fa:	59 0e       	cp.w	lr,16
800059fc:	fe 99 ff db 	brgt	800059b2 <_vfprintf_r+0x185a>
80005a00:	1c 09       	add	r9,lr
80005a02:	2f f8       	sub	r8,-1
80005a04:	87 0a       	st.w	r3[0x0],r10
80005a06:	fb 49 06 90 	st.w	sp[1680],r9
80005a0a:	87 1e       	st.w	r3[0x4],lr
80005a0c:	fb 48 06 8c 	st.w	sp[1676],r8
80005a10:	58 78       	cp.w	r8,7
80005a12:	e0 89 00 04 	brgt	80005a1a <_vfprintf_r+0x18c2>
80005a16:	2f 83       	sub	r3,-8
80005a18:	c0 b8       	rjmp	80005a2e <_vfprintf_r+0x18d6>
80005a1a:	fa ca f9 78 	sub	r10,sp,-1672
80005a1e:	02 9b       	mov	r11,r1
80005a20:	08 9c       	mov	r12,r4
80005a22:	fe b0 f3 8d 	rcall	8000413c <__sprint_r>
80005a26:	e0 81 03 18 	brne	80006056 <_vfprintf_r+0x1efe>
80005a2a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a2e:	ed b5 00 08 	bld	r5,0x8
80005a32:	c0 b0       	breq	80005a48 <_vfprintf_r+0x18f0>
80005a34:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a38:	87 12       	st.w	r3[0x4],r2
80005a3a:	87 06       	st.w	r3[0x0],r6
80005a3c:	f0 02 00 02 	add	r2,r8,r2
80005a40:	fb 42 06 90 	st.w	sp[1680],r2
80005a44:	e0 8f 01 d4 	bral	80005dec <_vfprintf_r+0x1c94>
80005a48:	e0 40 00 65 	cp.w	r0,101
80005a4c:	e0 8a 01 d6 	brle	80005df8 <_vfprintf_r+0x1ca0>
80005a50:	30 08       	mov	r8,0
80005a52:	30 09       	mov	r9,0
80005a54:	40 5b       	lddsp	r11,sp[0x14]
80005a56:	40 7a       	lddsp	r10,sp[0x1c]
80005a58:	e0 a0 17 ed 	rcall	80008a32 <__avr32_f64_cmp_eq>
80005a5c:	c7 90       	breq	80005b4e <_vfprintf_r+0x19f6>
80005a5e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a62:	fe c9 bf 9a 	sub	r9,pc,-16486
80005a66:	2f f8       	sub	r8,-1
80005a68:	87 09       	st.w	r3[0x0],r9
80005a6a:	fb 48 06 90 	st.w	sp[1680],r8
80005a6e:	30 19       	mov	r9,1
80005a70:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a74:	87 19       	st.w	r3[0x4],r9
80005a76:	2f f8       	sub	r8,-1
80005a78:	fb 48 06 8c 	st.w	sp[1676],r8
80005a7c:	58 78       	cp.w	r8,7
80005a7e:	e0 89 00 05 	brgt	80005a88 <_vfprintf_r+0x1930>
80005a82:	2f 83       	sub	r3,-8
80005a84:	c0 c8       	rjmp	80005a9c <_vfprintf_r+0x1944>
80005a86:	d7 03       	nop
80005a88:	fa ca f9 78 	sub	r10,sp,-1672
80005a8c:	02 9b       	mov	r11,r1
80005a8e:	08 9c       	mov	r12,r4
80005a90:	fe b0 f3 56 	rcall	8000413c <__sprint_r>
80005a94:	e0 81 02 e1 	brne	80006056 <_vfprintf_r+0x1efe>
80005a98:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a9c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005aa0:	40 6c       	lddsp	r12,sp[0x18]
80005aa2:	18 38       	cp.w	r8,r12
80005aa4:	c0 55       	brlt	80005aae <_vfprintf_r+0x1956>
80005aa6:	ed b5 00 00 	bld	r5,0x0
80005aaa:	e0 81 02 6b 	brne	80005f80 <_vfprintf_r+0x1e28>
80005aae:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ab2:	2f f8       	sub	r8,-1
80005ab4:	40 cb       	lddsp	r11,sp[0x30]
80005ab6:	fb 48 06 90 	st.w	sp[1680],r8
80005aba:	30 19       	mov	r9,1
80005abc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ac0:	87 0b       	st.w	r3[0x0],r11
80005ac2:	2f f8       	sub	r8,-1
80005ac4:	87 19       	st.w	r3[0x4],r9
80005ac6:	fb 48 06 8c 	st.w	sp[1676],r8
80005aca:	58 78       	cp.w	r8,7
80005acc:	e0 89 00 04 	brgt	80005ad4 <_vfprintf_r+0x197c>
80005ad0:	2f 83       	sub	r3,-8
80005ad2:	c0 b8       	rjmp	80005ae8 <_vfprintf_r+0x1990>
80005ad4:	fa ca f9 78 	sub	r10,sp,-1672
80005ad8:	02 9b       	mov	r11,r1
80005ada:	08 9c       	mov	r12,r4
80005adc:	fe b0 f3 30 	rcall	8000413c <__sprint_r>
80005ae0:	e0 81 02 bb 	brne	80006056 <_vfprintf_r+0x1efe>
80005ae4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ae8:	40 66       	lddsp	r6,sp[0x18]
80005aea:	20 16       	sub	r6,1
80005aec:	58 06       	cp.w	r6,0
80005aee:	e0 89 00 1d 	brgt	80005b28 <_vfprintf_r+0x19d0>
80005af2:	e0 8f 02 47 	bral	80005f80 <_vfprintf_r+0x1e28>
80005af6:	2f 09       	sub	r9,-16
80005af8:	2f f8       	sub	r8,-1
80005afa:	fb 49 06 90 	st.w	sp[1680],r9
80005afe:	87 02       	st.w	r3[0x0],r2
80005b00:	87 10       	st.w	r3[0x4],r0
80005b02:	fb 48 06 8c 	st.w	sp[1676],r8
80005b06:	58 78       	cp.w	r8,7
80005b08:	e0 89 00 04 	brgt	80005b10 <_vfprintf_r+0x19b8>
80005b0c:	2f 83       	sub	r3,-8
80005b0e:	c0 b8       	rjmp	80005b24 <_vfprintf_r+0x19cc>
80005b10:	fa ca f9 78 	sub	r10,sp,-1672
80005b14:	02 9b       	mov	r11,r1
80005b16:	08 9c       	mov	r12,r4
80005b18:	fe b0 f3 12 	rcall	8000413c <__sprint_r>
80005b1c:	e0 81 02 9d 	brne	80006056 <_vfprintf_r+0x1efe>
80005b20:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b24:	21 06       	sub	r6,16
80005b26:	c0 48       	rjmp	80005b2e <_vfprintf_r+0x19d6>
80005b28:	fe c2 c0 4c 	sub	r2,pc,-16308
80005b2c:	31 00       	mov	r0,16
80005b2e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b32:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b36:	fe ca c0 5a 	sub	r10,pc,-16294
80005b3a:	59 06       	cp.w	r6,16
80005b3c:	fe 99 ff dd 	brgt	80005af6 <_vfprintf_r+0x199e>
80005b40:	0c 09       	add	r9,r6
80005b42:	87 0a       	st.w	r3[0x0],r10
80005b44:	fb 49 06 90 	st.w	sp[1680],r9
80005b48:	2f f8       	sub	r8,-1
80005b4a:	87 16       	st.w	r3[0x4],r6
80005b4c:	c5 39       	rjmp	80005df2 <_vfprintf_r+0x1c9a>
80005b4e:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005b52:	58 0a       	cp.w	r10,0
80005b54:	e0 89 00 92 	brgt	80005c78 <_vfprintf_r+0x1b20>
80005b58:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b5c:	fe c9 c0 94 	sub	r9,pc,-16236
80005b60:	2f f8       	sub	r8,-1
80005b62:	87 09       	st.w	r3[0x0],r9
80005b64:	fb 48 06 90 	st.w	sp[1680],r8
80005b68:	30 19       	mov	r9,1
80005b6a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b6e:	87 19       	st.w	r3[0x4],r9
80005b70:	2f f8       	sub	r8,-1
80005b72:	fb 48 06 8c 	st.w	sp[1676],r8
80005b76:	58 78       	cp.w	r8,7
80005b78:	e0 89 00 04 	brgt	80005b80 <_vfprintf_r+0x1a28>
80005b7c:	2f 83       	sub	r3,-8
80005b7e:	c0 b8       	rjmp	80005b94 <_vfprintf_r+0x1a3c>
80005b80:	fa ca f9 78 	sub	r10,sp,-1672
80005b84:	02 9b       	mov	r11,r1
80005b86:	08 9c       	mov	r12,r4
80005b88:	fe b0 f2 da 	rcall	8000413c <__sprint_r>
80005b8c:	e0 81 02 65 	brne	80006056 <_vfprintf_r+0x1efe>
80005b90:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b94:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005b98:	58 08       	cp.w	r8,0
80005b9a:	c0 81       	brne	80005baa <_vfprintf_r+0x1a52>
80005b9c:	40 6a       	lddsp	r10,sp[0x18]
80005b9e:	58 0a       	cp.w	r10,0
80005ba0:	c0 51       	brne	80005baa <_vfprintf_r+0x1a52>
80005ba2:	ed b5 00 00 	bld	r5,0x0
80005ba6:	e0 81 01 ed 	brne	80005f80 <_vfprintf_r+0x1e28>
80005baa:	40 c9       	lddsp	r9,sp[0x30]
80005bac:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bb0:	2f f8       	sub	r8,-1
80005bb2:	87 09       	st.w	r3[0x0],r9
80005bb4:	fb 48 06 90 	st.w	sp[1680],r8
80005bb8:	30 19       	mov	r9,1
80005bba:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bbe:	87 19       	st.w	r3[0x4],r9
80005bc0:	2f f8       	sub	r8,-1
80005bc2:	fb 48 06 8c 	st.w	sp[1676],r8
80005bc6:	58 78       	cp.w	r8,7
80005bc8:	e0 89 00 04 	brgt	80005bd0 <_vfprintf_r+0x1a78>
80005bcc:	2f 83       	sub	r3,-8
80005bce:	c0 b8       	rjmp	80005be4 <_vfprintf_r+0x1a8c>
80005bd0:	fa ca f9 78 	sub	r10,sp,-1672
80005bd4:	02 9b       	mov	r11,r1
80005bd6:	08 9c       	mov	r12,r4
80005bd8:	fe b0 f2 b2 	rcall	8000413c <__sprint_r>
80005bdc:	e0 81 02 3d 	brne	80006056 <_vfprintf_r+0x1efe>
80005be0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005be4:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005be8:	5c 32       	neg	r2
80005bea:	58 02       	cp.w	r2,0
80005bec:	e0 89 00 1d 	brgt	80005c26 <_vfprintf_r+0x1ace>
80005bf0:	c3 d8       	rjmp	80005c6a <_vfprintf_r+0x1b12>
80005bf2:	2f 09       	sub	r9,-16
80005bf4:	2f f8       	sub	r8,-1
80005bf6:	31 0e       	mov	lr,16
80005bf8:	fb 49 06 90 	st.w	sp[1680],r9
80005bfc:	87 00       	st.w	r3[0x0],r0
80005bfe:	87 1e       	st.w	r3[0x4],lr
80005c00:	fb 48 06 8c 	st.w	sp[1676],r8
80005c04:	58 78       	cp.w	r8,7
80005c06:	e0 89 00 04 	brgt	80005c0e <_vfprintf_r+0x1ab6>
80005c0a:	2f 83       	sub	r3,-8
80005c0c:	c0 b8       	rjmp	80005c22 <_vfprintf_r+0x1aca>
80005c0e:	fa ca f9 78 	sub	r10,sp,-1672
80005c12:	02 9b       	mov	r11,r1
80005c14:	08 9c       	mov	r12,r4
80005c16:	fe b0 f2 93 	rcall	8000413c <__sprint_r>
80005c1a:	e0 81 02 1e 	brne	80006056 <_vfprintf_r+0x1efe>
80005c1e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c22:	21 02       	sub	r2,16
80005c24:	c0 38       	rjmp	80005c2a <_vfprintf_r+0x1ad2>
80005c26:	fe c0 c1 4a 	sub	r0,pc,-16054
80005c2a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c2e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c32:	fe ca c1 56 	sub	r10,pc,-16042
80005c36:	59 02       	cp.w	r2,16
80005c38:	fe 99 ff dd 	brgt	80005bf2 <_vfprintf_r+0x1a9a>
80005c3c:	04 09       	add	r9,r2
80005c3e:	2f f8       	sub	r8,-1
80005c40:	87 0a       	st.w	r3[0x0],r10
80005c42:	fb 49 06 90 	st.w	sp[1680],r9
80005c46:	87 12       	st.w	r3[0x4],r2
80005c48:	fb 48 06 8c 	st.w	sp[1676],r8
80005c4c:	58 78       	cp.w	r8,7
80005c4e:	e0 89 00 04 	brgt	80005c56 <_vfprintf_r+0x1afe>
80005c52:	2f 83       	sub	r3,-8
80005c54:	c0 b8       	rjmp	80005c6a <_vfprintf_r+0x1b12>
80005c56:	fa ca f9 78 	sub	r10,sp,-1672
80005c5a:	02 9b       	mov	r11,r1
80005c5c:	08 9c       	mov	r12,r4
80005c5e:	fe b0 f2 6f 	rcall	8000413c <__sprint_r>
80005c62:	e0 81 01 fa 	brne	80006056 <_vfprintf_r+0x1efe>
80005c66:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c6a:	40 6c       	lddsp	r12,sp[0x18]
80005c6c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c70:	87 06       	st.w	r3[0x0],r6
80005c72:	87 1c       	st.w	r3[0x4],r12
80005c74:	18 08       	add	r8,r12
80005c76:	cb 98       	rjmp	80005de8 <_vfprintf_r+0x1c90>
80005c78:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c80:	40 6b       	lddsp	r11,sp[0x18]
80005c82:	16 3a       	cp.w	r10,r11
80005c84:	c6 f5       	brlt	80005d62 <_vfprintf_r+0x1c0a>
80005c86:	16 09       	add	r9,r11
80005c88:	2f f8       	sub	r8,-1
80005c8a:	87 06       	st.w	r3[0x0],r6
80005c8c:	fb 49 06 90 	st.w	sp[1680],r9
80005c90:	87 1b       	st.w	r3[0x4],r11
80005c92:	fb 48 06 8c 	st.w	sp[1676],r8
80005c96:	58 78       	cp.w	r8,7
80005c98:	e0 89 00 04 	brgt	80005ca0 <_vfprintf_r+0x1b48>
80005c9c:	2f 83       	sub	r3,-8
80005c9e:	c0 b8       	rjmp	80005cb4 <_vfprintf_r+0x1b5c>
80005ca0:	fa ca f9 78 	sub	r10,sp,-1672
80005ca4:	02 9b       	mov	r11,r1
80005ca6:	08 9c       	mov	r12,r4
80005ca8:	fe b0 f2 4a 	rcall	8000413c <__sprint_r>
80005cac:	e0 81 01 d5 	brne	80006056 <_vfprintf_r+0x1efe>
80005cb0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cb4:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005cb8:	40 6a       	lddsp	r10,sp[0x18]
80005cba:	14 16       	sub	r6,r10
80005cbc:	58 06       	cp.w	r6,0
80005cbe:	e0 89 00 1c 	brgt	80005cf6 <_vfprintf_r+0x1b9e>
80005cc2:	c3 d8       	rjmp	80005d3c <_vfprintf_r+0x1be4>
80005cc4:	2f 09       	sub	r9,-16
80005cc6:	2f f8       	sub	r8,-1
80005cc8:	fb 49 06 90 	st.w	sp[1680],r9
80005ccc:	87 02       	st.w	r3[0x0],r2
80005cce:	87 10       	st.w	r3[0x4],r0
80005cd0:	fb 48 06 8c 	st.w	sp[1676],r8
80005cd4:	58 78       	cp.w	r8,7
80005cd6:	e0 89 00 04 	brgt	80005cde <_vfprintf_r+0x1b86>
80005cda:	2f 83       	sub	r3,-8
80005cdc:	c0 b8       	rjmp	80005cf2 <_vfprintf_r+0x1b9a>
80005cde:	fa ca f9 78 	sub	r10,sp,-1672
80005ce2:	02 9b       	mov	r11,r1
80005ce4:	08 9c       	mov	r12,r4
80005ce6:	fe b0 f2 2b 	rcall	8000413c <__sprint_r>
80005cea:	e0 81 01 b6 	brne	80006056 <_vfprintf_r+0x1efe>
80005cee:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cf2:	21 06       	sub	r6,16
80005cf4:	c0 48       	rjmp	80005cfc <_vfprintf_r+0x1ba4>
80005cf6:	fe c2 c2 1a 	sub	r2,pc,-15846
80005cfa:	31 00       	mov	r0,16
80005cfc:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d00:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d04:	fe ca c2 28 	sub	r10,pc,-15832
80005d08:	59 06       	cp.w	r6,16
80005d0a:	fe 99 ff dd 	brgt	80005cc4 <_vfprintf_r+0x1b6c>
80005d0e:	0c 09       	add	r9,r6
80005d10:	2f f8       	sub	r8,-1
80005d12:	87 0a       	st.w	r3[0x0],r10
80005d14:	fb 49 06 90 	st.w	sp[1680],r9
80005d18:	87 16       	st.w	r3[0x4],r6
80005d1a:	fb 48 06 8c 	st.w	sp[1676],r8
80005d1e:	58 78       	cp.w	r8,7
80005d20:	e0 89 00 04 	brgt	80005d28 <_vfprintf_r+0x1bd0>
80005d24:	2f 83       	sub	r3,-8
80005d26:	c0 b8       	rjmp	80005d3c <_vfprintf_r+0x1be4>
80005d28:	fa ca f9 78 	sub	r10,sp,-1672
80005d2c:	02 9b       	mov	r11,r1
80005d2e:	08 9c       	mov	r12,r4
80005d30:	fe b0 f2 06 	rcall	8000413c <__sprint_r>
80005d34:	e0 81 01 91 	brne	80006056 <_vfprintf_r+0x1efe>
80005d38:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d3c:	ed b5 00 00 	bld	r5,0x0
80005d40:	e0 81 01 20 	brne	80005f80 <_vfprintf_r+0x1e28>
80005d44:	40 c9       	lddsp	r9,sp[0x30]
80005d46:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d4a:	2f f8       	sub	r8,-1
80005d4c:	87 09       	st.w	r3[0x0],r9
80005d4e:	fb 48 06 90 	st.w	sp[1680],r8
80005d52:	30 19       	mov	r9,1
80005d54:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d58:	87 19       	st.w	r3[0x4],r9
80005d5a:	2f f8       	sub	r8,-1
80005d5c:	fb 48 06 8c 	st.w	sp[1676],r8
80005d60:	c0 29       	rjmp	80005f64 <_vfprintf_r+0x1e0c>
80005d62:	14 09       	add	r9,r10
80005d64:	2f f8       	sub	r8,-1
80005d66:	fb 49 06 90 	st.w	sp[1680],r9
80005d6a:	87 06       	st.w	r3[0x0],r6
80005d6c:	87 1a       	st.w	r3[0x4],r10
80005d6e:	fb 48 06 8c 	st.w	sp[1676],r8
80005d72:	58 78       	cp.w	r8,7
80005d74:	e0 89 00 04 	brgt	80005d7c <_vfprintf_r+0x1c24>
80005d78:	2f 83       	sub	r3,-8
80005d7a:	c0 b8       	rjmp	80005d90 <_vfprintf_r+0x1c38>
80005d7c:	fa ca f9 78 	sub	r10,sp,-1672
80005d80:	02 9b       	mov	r11,r1
80005d82:	08 9c       	mov	r12,r4
80005d84:	fe b0 f1 dc 	rcall	8000413c <__sprint_r>
80005d88:	e0 81 01 67 	brne	80006056 <_vfprintf_r+0x1efe>
80005d8c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d90:	40 c8       	lddsp	r8,sp[0x30]
80005d92:	87 08       	st.w	r3[0x0],r8
80005d94:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d98:	2f f8       	sub	r8,-1
80005d9a:	30 19       	mov	r9,1
80005d9c:	fb 48 06 90 	st.w	sp[1680],r8
80005da0:	87 19       	st.w	r3[0x4],r9
80005da2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005da6:	2f f8       	sub	r8,-1
80005da8:	fb 48 06 8c 	st.w	sp[1676],r8
80005dac:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005db0:	58 78       	cp.w	r8,7
80005db2:	e0 89 00 04 	brgt	80005dba <_vfprintf_r+0x1c62>
80005db6:	2f 83       	sub	r3,-8
80005db8:	c0 b8       	rjmp	80005dce <_vfprintf_r+0x1c76>
80005dba:	fa ca f9 78 	sub	r10,sp,-1672
80005dbe:	02 9b       	mov	r11,r1
80005dc0:	08 9c       	mov	r12,r4
80005dc2:	fe b0 f1 bd 	rcall	8000413c <__sprint_r>
80005dc6:	e0 81 01 48 	brne	80006056 <_vfprintf_r+0x1efe>
80005dca:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dce:	04 06       	add	r6,r2
80005dd0:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005dd4:	87 06       	st.w	r3[0x0],r6
80005dd6:	fa f9 06 90 	ld.w	r9,sp[1680]
80005dda:	40 66       	lddsp	r6,sp[0x18]
80005ddc:	40 6e       	lddsp	lr,sp[0x18]
80005dde:	10 16       	sub	r6,r8
80005de0:	f2 08 01 08 	sub	r8,r9,r8
80005de4:	87 16       	st.w	r3[0x4],r6
80005de6:	1c 08       	add	r8,lr
80005de8:	fb 48 06 90 	st.w	sp[1680],r8
80005dec:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005df0:	2f f8       	sub	r8,-1
80005df2:	fb 48 06 8c 	st.w	sp[1676],r8
80005df6:	cb 78       	rjmp	80005f64 <_vfprintf_r+0x1e0c>
80005df8:	40 6c       	lddsp	r12,sp[0x18]
80005dfa:	58 1c       	cp.w	r12,1
80005dfc:	e0 89 00 06 	brgt	80005e08 <_vfprintf_r+0x1cb0>
80005e00:	ed b5 00 00 	bld	r5,0x0
80005e04:	e0 81 00 85 	brne	80005f0e <_vfprintf_r+0x1db6>
80005e08:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e0c:	2f f8       	sub	r8,-1
80005e0e:	30 19       	mov	r9,1
80005e10:	fb 48 06 90 	st.w	sp[1680],r8
80005e14:	87 06       	st.w	r3[0x0],r6
80005e16:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e1a:	87 19       	st.w	r3[0x4],r9
80005e1c:	2f f8       	sub	r8,-1
80005e1e:	fb 48 06 8c 	st.w	sp[1676],r8
80005e22:	58 78       	cp.w	r8,7
80005e24:	e0 89 00 04 	brgt	80005e2c <_vfprintf_r+0x1cd4>
80005e28:	2f 83       	sub	r3,-8
80005e2a:	c0 b8       	rjmp	80005e40 <_vfprintf_r+0x1ce8>
80005e2c:	fa ca f9 78 	sub	r10,sp,-1672
80005e30:	02 9b       	mov	r11,r1
80005e32:	08 9c       	mov	r12,r4
80005e34:	fe b0 f1 84 	rcall	8000413c <__sprint_r>
80005e38:	e0 81 01 0f 	brne	80006056 <_vfprintf_r+0x1efe>
80005e3c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e40:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e44:	2f f8       	sub	r8,-1
80005e46:	40 cb       	lddsp	r11,sp[0x30]
80005e48:	fb 48 06 90 	st.w	sp[1680],r8
80005e4c:	30 19       	mov	r9,1
80005e4e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e52:	87 0b       	st.w	r3[0x0],r11
80005e54:	2f f8       	sub	r8,-1
80005e56:	87 19       	st.w	r3[0x4],r9
80005e58:	fb 48 06 8c 	st.w	sp[1676],r8
80005e5c:	58 78       	cp.w	r8,7
80005e5e:	e0 89 00 05 	brgt	80005e68 <_vfprintf_r+0x1d10>
80005e62:	2f 83       	sub	r3,-8
80005e64:	c0 c8       	rjmp	80005e7c <_vfprintf_r+0x1d24>
80005e66:	d7 03       	nop
80005e68:	fa ca f9 78 	sub	r10,sp,-1672
80005e6c:	02 9b       	mov	r11,r1
80005e6e:	08 9c       	mov	r12,r4
80005e70:	fe b0 f1 66 	rcall	8000413c <__sprint_r>
80005e74:	e0 81 00 f1 	brne	80006056 <_vfprintf_r+0x1efe>
80005e78:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e7c:	30 08       	mov	r8,0
80005e7e:	30 09       	mov	r9,0
80005e80:	40 5b       	lddsp	r11,sp[0x14]
80005e82:	40 7a       	lddsp	r10,sp[0x1c]
80005e84:	e0 a0 15 d7 	rcall	80008a32 <__avr32_f64_cmp_eq>
80005e88:	40 68       	lddsp	r8,sp[0x18]
80005e8a:	20 18       	sub	r8,1
80005e8c:	58 0c       	cp.w	r12,0
80005e8e:	c0 d1       	brne	80005ea8 <_vfprintf_r+0x1d50>
80005e90:	2f f6       	sub	r6,-1
80005e92:	87 18       	st.w	r3[0x4],r8
80005e94:	87 06       	st.w	r3[0x0],r6
80005e96:	fa f6 06 90 	ld.w	r6,sp[1680]
80005e9a:	10 06       	add	r6,r8
80005e9c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ea0:	fb 46 06 90 	st.w	sp[1680],r6
80005ea4:	2f f8       	sub	r8,-1
80005ea6:	c3 18       	rjmp	80005f08 <_vfprintf_r+0x1db0>
80005ea8:	10 96       	mov	r6,r8
80005eaa:	58 08       	cp.w	r8,0
80005eac:	e0 89 00 1c 	brgt	80005ee4 <_vfprintf_r+0x1d8c>
80005eb0:	c4 b8       	rjmp	80005f46 <_vfprintf_r+0x1dee>
80005eb2:	2f 09       	sub	r9,-16
80005eb4:	2f f8       	sub	r8,-1
80005eb6:	fb 49 06 90 	st.w	sp[1680],r9
80005eba:	87 02       	st.w	r3[0x0],r2
80005ebc:	87 10       	st.w	r3[0x4],r0
80005ebe:	fb 48 06 8c 	st.w	sp[1676],r8
80005ec2:	58 78       	cp.w	r8,7
80005ec4:	e0 89 00 04 	brgt	80005ecc <_vfprintf_r+0x1d74>
80005ec8:	2f 83       	sub	r3,-8
80005eca:	c0 b8       	rjmp	80005ee0 <_vfprintf_r+0x1d88>
80005ecc:	fa ca f9 78 	sub	r10,sp,-1672
80005ed0:	02 9b       	mov	r11,r1
80005ed2:	08 9c       	mov	r12,r4
80005ed4:	fe b0 f1 34 	rcall	8000413c <__sprint_r>
80005ed8:	e0 81 00 bf 	brne	80006056 <_vfprintf_r+0x1efe>
80005edc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ee0:	21 06       	sub	r6,16
80005ee2:	c0 48       	rjmp	80005eea <_vfprintf_r+0x1d92>
80005ee4:	fe c2 c4 08 	sub	r2,pc,-15352
80005ee8:	31 00       	mov	r0,16
80005eea:	fa f9 06 90 	ld.w	r9,sp[1680]
80005eee:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ef2:	fe ca c4 16 	sub	r10,pc,-15338
80005ef6:	59 06       	cp.w	r6,16
80005ef8:	fe 99 ff dd 	brgt	80005eb2 <_vfprintf_r+0x1d5a>
80005efc:	0c 09       	add	r9,r6
80005efe:	87 0a       	st.w	r3[0x0],r10
80005f00:	fb 49 06 90 	st.w	sp[1680],r9
80005f04:	2f f8       	sub	r8,-1
80005f06:	87 16       	st.w	r3[0x4],r6
80005f08:	fb 48 06 8c 	st.w	sp[1676],r8
80005f0c:	c0 e8       	rjmp	80005f28 <_vfprintf_r+0x1dd0>
80005f0e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f12:	2f f8       	sub	r8,-1
80005f14:	30 19       	mov	r9,1
80005f16:	fb 48 06 90 	st.w	sp[1680],r8
80005f1a:	87 06       	st.w	r3[0x0],r6
80005f1c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f20:	87 19       	st.w	r3[0x4],r9
80005f22:	2f f8       	sub	r8,-1
80005f24:	fb 48 06 8c 	st.w	sp[1676],r8
80005f28:	58 78       	cp.w	r8,7
80005f2a:	e0 89 00 04 	brgt	80005f32 <_vfprintf_r+0x1dda>
80005f2e:	2f 83       	sub	r3,-8
80005f30:	c0 b8       	rjmp	80005f46 <_vfprintf_r+0x1dee>
80005f32:	fa ca f9 78 	sub	r10,sp,-1672
80005f36:	02 9b       	mov	r11,r1
80005f38:	08 9c       	mov	r12,r4
80005f3a:	fe b0 f1 01 	rcall	8000413c <__sprint_r>
80005f3e:	e0 81 00 8c 	brne	80006056 <_vfprintf_r+0x1efe>
80005f42:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f46:	40 ea       	lddsp	r10,sp[0x38]
80005f48:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f4c:	14 08       	add	r8,r10
80005f4e:	fa c9 f9 64 	sub	r9,sp,-1692
80005f52:	fb 48 06 90 	st.w	sp[1680],r8
80005f56:	87 1a       	st.w	r3[0x4],r10
80005f58:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f5c:	87 09       	st.w	r3[0x0],r9
80005f5e:	2f f8       	sub	r8,-1
80005f60:	fb 48 06 8c 	st.w	sp[1676],r8
80005f64:	58 78       	cp.w	r8,7
80005f66:	e0 89 00 04 	brgt	80005f6e <_vfprintf_r+0x1e16>
80005f6a:	2f 83       	sub	r3,-8
80005f6c:	c0 a8       	rjmp	80005f80 <_vfprintf_r+0x1e28>
80005f6e:	fa ca f9 78 	sub	r10,sp,-1672
80005f72:	02 9b       	mov	r11,r1
80005f74:	08 9c       	mov	r12,r4
80005f76:	fe b0 f0 e3 	rcall	8000413c <__sprint_r>
80005f7a:	c6 e1       	brne	80006056 <_vfprintf_r+0x1efe>
80005f7c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f80:	e2 15 00 04 	andl	r5,0x4,COH
80005f84:	c3 f0       	breq	80006002 <_vfprintf_r+0x1eaa>
80005f86:	40 86       	lddsp	r6,sp[0x20]
80005f88:	40 39       	lddsp	r9,sp[0xc]
80005f8a:	12 16       	sub	r6,r9
80005f8c:	58 06       	cp.w	r6,0
80005f8e:	e0 89 00 1a 	brgt	80005fc2 <_vfprintf_r+0x1e6a>
80005f92:	c3 88       	rjmp	80006002 <_vfprintf_r+0x1eaa>
80005f94:	2f 09       	sub	r9,-16
80005f96:	2f f8       	sub	r8,-1
80005f98:	fb 49 06 90 	st.w	sp[1680],r9
80005f9c:	87 05       	st.w	r3[0x0],r5
80005f9e:	87 12       	st.w	r3[0x4],r2
80005fa0:	fb 48 06 8c 	st.w	sp[1676],r8
80005fa4:	58 78       	cp.w	r8,7
80005fa6:	e0 89 00 04 	brgt	80005fae <_vfprintf_r+0x1e56>
80005faa:	2f 83       	sub	r3,-8
80005fac:	c0 98       	rjmp	80005fbe <_vfprintf_r+0x1e66>
80005fae:	00 9a       	mov	r10,r0
80005fb0:	02 9b       	mov	r11,r1
80005fb2:	08 9c       	mov	r12,r4
80005fb4:	fe b0 f0 c4 	rcall	8000413c <__sprint_r>
80005fb8:	c4 f1       	brne	80006056 <_vfprintf_r+0x1efe>
80005fba:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fbe:	21 06       	sub	r6,16
80005fc0:	c0 68       	rjmp	80005fcc <_vfprintf_r+0x1e74>
80005fc2:	fe c5 c4 f6 	sub	r5,pc,-15114
80005fc6:	31 02       	mov	r2,16
80005fc8:	fa c0 f9 78 	sub	r0,sp,-1672
80005fcc:	fa f9 06 90 	ld.w	r9,sp[1680]
80005fd0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fd4:	fe ca c5 08 	sub	r10,pc,-15096
80005fd8:	59 06       	cp.w	r6,16
80005fda:	fe 99 ff dd 	brgt	80005f94 <_vfprintf_r+0x1e3c>
80005fde:	0c 09       	add	r9,r6
80005fe0:	2f f8       	sub	r8,-1
80005fe2:	87 0a       	st.w	r3[0x0],r10
80005fe4:	87 16       	st.w	r3[0x4],r6
80005fe6:	fb 49 06 90 	st.w	sp[1680],r9
80005fea:	fb 48 06 8c 	st.w	sp[1676],r8
80005fee:	58 78       	cp.w	r8,7
80005ff0:	e0 8a 00 09 	brle	80006002 <_vfprintf_r+0x1eaa>
80005ff4:	fa ca f9 78 	sub	r10,sp,-1672
80005ff8:	02 9b       	mov	r11,r1
80005ffa:	08 9c       	mov	r12,r4
80005ffc:	fe b0 f0 a0 	rcall	8000413c <__sprint_r>
80006000:	c2 b1       	brne	80006056 <_vfprintf_r+0x1efe>
80006002:	40 bc       	lddsp	r12,sp[0x2c]
80006004:	40 36       	lddsp	r6,sp[0xc]
80006006:	40 8e       	lddsp	lr,sp[0x20]
80006008:	ec 0e 0c 48 	max	r8,r6,lr
8000600c:	10 0c       	add	r12,r8
8000600e:	50 bc       	stdsp	sp[0x2c],r12
80006010:	fa f8 06 90 	ld.w	r8,sp[1680]
80006014:	58 08       	cp.w	r8,0
80006016:	c0 80       	breq	80006026 <_vfprintf_r+0x1ece>
80006018:	fa ca f9 78 	sub	r10,sp,-1672
8000601c:	02 9b       	mov	r11,r1
8000601e:	08 9c       	mov	r12,r4
80006020:	fe b0 f0 8e 	rcall	8000413c <__sprint_r>
80006024:	c1 91       	brne	80006056 <_vfprintf_r+0x1efe>
80006026:	30 0b       	mov	r11,0
80006028:	fa c3 f9 e0 	sub	r3,sp,-1568
8000602c:	fb 4b 06 8c 	st.w	sp[1676],r11
80006030:	fe 9f f1 22 	bral	80004274 <_vfprintf_r+0x11c>
80006034:	08 95       	mov	r5,r4
80006036:	fa f8 06 90 	ld.w	r8,sp[1680]
8000603a:	58 08       	cp.w	r8,0
8000603c:	c0 80       	breq	8000604c <_vfprintf_r+0x1ef4>
8000603e:	08 9c       	mov	r12,r4
80006040:	fa ca f9 78 	sub	r10,sp,-1672
80006044:	02 9b       	mov	r11,r1
80006046:	fe b0 f0 7b 	rcall	8000413c <__sprint_r>
8000604a:	c0 61       	brne	80006056 <_vfprintf_r+0x1efe>
8000604c:	30 08       	mov	r8,0
8000604e:	fb 48 06 8c 	st.w	sp[1676],r8
80006052:	c0 28       	rjmp	80006056 <_vfprintf_r+0x1efe>
80006054:	40 41       	lddsp	r1,sp[0x10]
80006056:	82 68       	ld.sh	r8,r1[0xc]
80006058:	ed b8 00 06 	bld	r8,0x6
8000605c:	c0 31       	brne	80006062 <_vfprintf_r+0x1f0a>
8000605e:	3f fa       	mov	r10,-1
80006060:	50 ba       	stdsp	sp[0x2c],r10
80006062:	40 bc       	lddsp	r12,sp[0x2c]
80006064:	fe 3d f9 44 	sub	sp,-1724
80006068:	d8 32       	popm	r0-r7,pc
8000606a:	d7 03       	nop

8000606c <__swsetup_r>:
8000606c:	d4 21       	pushm	r4-r7,lr
8000606e:	e0 68 01 18 	mov	r8,280
80006072:	18 96       	mov	r6,r12
80006074:	16 97       	mov	r7,r11
80006076:	70 0c       	ld.w	r12,r8[0x0]
80006078:	58 0c       	cp.w	r12,0
8000607a:	c0 60       	breq	80006086 <__swsetup_r+0x1a>
8000607c:	78 68       	ld.w	r8,r12[0x18]
8000607e:	58 08       	cp.w	r8,0
80006080:	c0 31       	brne	80006086 <__swsetup_r+0x1a>
80006082:	e0 a0 07 b9 	rcall	80006ff4 <__sinit>
80006086:	fe c8 c4 8a 	sub	r8,pc,-15222
8000608a:	10 37       	cp.w	r7,r8
8000608c:	c0 61       	brne	80006098 <__swsetup_r+0x2c>
8000608e:	e0 68 01 18 	mov	r8,280
80006092:	70 08       	ld.w	r8,r8[0x0]
80006094:	70 07       	ld.w	r7,r8[0x0]
80006096:	c1 28       	rjmp	800060ba <__swsetup_r+0x4e>
80006098:	fe c8 c4 7c 	sub	r8,pc,-15236
8000609c:	10 37       	cp.w	r7,r8
8000609e:	c0 61       	brne	800060aa <__swsetup_r+0x3e>
800060a0:	e0 68 01 18 	mov	r8,280
800060a4:	70 08       	ld.w	r8,r8[0x0]
800060a6:	70 17       	ld.w	r7,r8[0x4]
800060a8:	c0 98       	rjmp	800060ba <__swsetup_r+0x4e>
800060aa:	fe c8 c4 6e 	sub	r8,pc,-15250
800060ae:	10 37       	cp.w	r7,r8
800060b0:	c0 51       	brne	800060ba <__swsetup_r+0x4e>
800060b2:	e0 68 01 18 	mov	r8,280
800060b6:	70 08       	ld.w	r8,r8[0x0]
800060b8:	70 27       	ld.w	r7,r8[0x8]
800060ba:	8e 68       	ld.sh	r8,r7[0xc]
800060bc:	ed b8 00 03 	bld	r8,0x3
800060c0:	c1 e0       	breq	800060fc <__swsetup_r+0x90>
800060c2:	ed b8 00 04 	bld	r8,0x4
800060c6:	c3 e1       	brne	80006142 <__swsetup_r+0xd6>
800060c8:	ed b8 00 02 	bld	r8,0x2
800060cc:	c1 51       	brne	800060f6 <__swsetup_r+0x8a>
800060ce:	6e db       	ld.w	r11,r7[0x34]
800060d0:	58 0b       	cp.w	r11,0
800060d2:	c0 a0       	breq	800060e6 <__swsetup_r+0x7a>
800060d4:	ee c8 ff bc 	sub	r8,r7,-68
800060d8:	10 3b       	cp.w	r11,r8
800060da:	c0 40       	breq	800060e2 <__swsetup_r+0x76>
800060dc:	0c 9c       	mov	r12,r6
800060de:	e0 a0 08 25 	rcall	80007128 <_free_r>
800060e2:	30 08       	mov	r8,0
800060e4:	8f d8       	st.w	r7[0x34],r8
800060e6:	8e 68       	ld.sh	r8,r7[0xc]
800060e8:	e0 18 ff db 	andl	r8,0xffdb
800060ec:	ae 68       	st.h	r7[0xc],r8
800060ee:	30 08       	mov	r8,0
800060f0:	8f 18       	st.w	r7[0x4],r8
800060f2:	6e 48       	ld.w	r8,r7[0x10]
800060f4:	8f 08       	st.w	r7[0x0],r8
800060f6:	8e 68       	ld.sh	r8,r7[0xc]
800060f8:	a3 b8       	sbr	r8,0x3
800060fa:	ae 68       	st.h	r7[0xc],r8
800060fc:	6e 48       	ld.w	r8,r7[0x10]
800060fe:	58 08       	cp.w	r8,0
80006100:	c0 b1       	brne	80006116 <__swsetup_r+0xaa>
80006102:	8e 68       	ld.sh	r8,r7[0xc]
80006104:	e2 18 02 80 	andl	r8,0x280,COH
80006108:	e0 48 02 00 	cp.w	r8,512
8000610c:	c0 50       	breq	80006116 <__swsetup_r+0xaa>
8000610e:	0c 9c       	mov	r12,r6
80006110:	0e 9b       	mov	r11,r7
80006112:	e0 a0 0a 4b 	rcall	800075a8 <__smakebuf_r>
80006116:	8e 69       	ld.sh	r9,r7[0xc]
80006118:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000611c:	c0 70       	breq	8000612a <__swsetup_r+0xbe>
8000611e:	30 08       	mov	r8,0
80006120:	8f 28       	st.w	r7[0x8],r8
80006122:	6e 58       	ld.w	r8,r7[0x14]
80006124:	5c 38       	neg	r8
80006126:	8f 68       	st.w	r7[0x18],r8
80006128:	c0 68       	rjmp	80006134 <__swsetup_r+0xc8>
8000612a:	ed b9 00 01 	bld	r9,0x1
8000612e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80006132:	8f 28       	st.w	r7[0x8],r8
80006134:	6e 48       	ld.w	r8,r7[0x10]
80006136:	58 08       	cp.w	r8,0
80006138:	c0 61       	brne	80006144 <__swsetup_r+0xd8>
8000613a:	8e 68       	ld.sh	r8,r7[0xc]
8000613c:	ed b8 00 07 	bld	r8,0x7
80006140:	c0 21       	brne	80006144 <__swsetup_r+0xd8>
80006142:	dc 2a       	popm	r4-r7,pc,r12=-1
80006144:	d8 2a       	popm	r4-r7,pc,r12=0
80006146:	d7 03       	nop

80006148 <quorem>:
80006148:	d4 31       	pushm	r0-r7,lr
8000614a:	20 2d       	sub	sp,8
8000614c:	18 97       	mov	r7,r12
8000614e:	78 48       	ld.w	r8,r12[0x10]
80006150:	76 46       	ld.w	r6,r11[0x10]
80006152:	0c 38       	cp.w	r8,r6
80006154:	c0 34       	brge	8000615a <quorem+0x12>
80006156:	30 0c       	mov	r12,0
80006158:	c8 58       	rjmp	80006262 <quorem+0x11a>
8000615a:	ec c2 ff fc 	sub	r2,r6,-4
8000615e:	f6 c3 ff ec 	sub	r3,r11,-20
80006162:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80006166:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000616a:	2f f9       	sub	r9,-1
8000616c:	20 16       	sub	r6,1
8000616e:	f8 09 0d 08 	divu	r8,r12,r9
80006172:	f6 02 00 22 	add	r2,r11,r2<<0x2
80006176:	ee c4 ff ec 	sub	r4,r7,-20
8000617a:	10 95       	mov	r5,r8
8000617c:	58 08       	cp.w	r8,0
8000617e:	c4 10       	breq	80006200 <quorem+0xb8>
80006180:	30 09       	mov	r9,0
80006182:	06 9a       	mov	r10,r3
80006184:	08 98       	mov	r8,r4
80006186:	12 91       	mov	r1,r9
80006188:	50 0b       	stdsp	sp[0x0],r11
8000618a:	70 0e       	ld.w	lr,r8[0x0]
8000618c:	b1 8e       	lsr	lr,0x10
8000618e:	50 1e       	stdsp	sp[0x4],lr
80006190:	15 0e       	ld.w	lr,r10++
80006192:	fc 00 16 10 	lsr	r0,lr,0x10
80006196:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000619a:	ea 0e 03 41 	mac	r1,r5,lr
8000619e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800061a2:	b1 81       	lsr	r1,0x10
800061a4:	40 1b       	lddsp	r11,sp[0x4]
800061a6:	ea 00 02 40 	mul	r0,r5,r0
800061aa:	e2 00 00 00 	add	r0,r1,r0
800061ae:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800061b2:	02 1b       	sub	r11,r1
800061b4:	50 1b       	stdsp	sp[0x4],r11
800061b6:	70 0b       	ld.w	r11,r8[0x0]
800061b8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800061bc:	02 09       	add	r9,r1
800061be:	f2 0e 01 0e 	sub	lr,r9,lr
800061c2:	b0 1e       	st.h	r8[0x2],lr
800061c4:	fc 09 14 10 	asr	r9,lr,0x10
800061c8:	40 1e       	lddsp	lr,sp[0x4]
800061ca:	fc 09 00 09 	add	r9,lr,r9
800061ce:	b0 09       	st.h	r8[0x0],r9
800061d0:	e0 01 16 10 	lsr	r1,r0,0x10
800061d4:	2f c8       	sub	r8,-4
800061d6:	b1 49       	asr	r9,0x10
800061d8:	04 3a       	cp.w	r10,r2
800061da:	fe 98 ff d8 	brls	8000618a <quorem+0x42>
800061de:	40 0b       	lddsp	r11,sp[0x0]
800061e0:	58 0c       	cp.w	r12,0
800061e2:	c0 f1       	brne	80006200 <quorem+0xb8>
800061e4:	ec c8 ff fb 	sub	r8,r6,-5
800061e8:	ee 08 00 28 	add	r8,r7,r8<<0x2
800061ec:	c0 28       	rjmp	800061f0 <quorem+0xa8>
800061ee:	20 16       	sub	r6,1
800061f0:	20 48       	sub	r8,4
800061f2:	08 38       	cp.w	r8,r4
800061f4:	e0 88 00 05 	brls	800061fe <quorem+0xb6>
800061f8:	70 09       	ld.w	r9,r8[0x0]
800061fa:	58 09       	cp.w	r9,0
800061fc:	cf 90       	breq	800061ee <quorem+0xa6>
800061fe:	8f 46       	st.w	r7[0x10],r6
80006200:	0e 9c       	mov	r12,r7
80006202:	e0 a0 0c f4 	rcall	80007bea <__mcmp>
80006206:	c2 d5       	brlt	80006260 <quorem+0x118>
80006208:	2f f5       	sub	r5,-1
8000620a:	08 98       	mov	r8,r4
8000620c:	30 09       	mov	r9,0
8000620e:	07 0b       	ld.w	r11,r3++
80006210:	f6 0a 16 10 	lsr	r10,r11,0x10
80006214:	70 0c       	ld.w	r12,r8[0x0]
80006216:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000621a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000621e:	14 1e       	sub	lr,r10
80006220:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006224:	16 1a       	sub	r10,r11
80006226:	12 0a       	add	r10,r9
80006228:	b0 1a       	st.h	r8[0x2],r10
8000622a:	b1 4a       	asr	r10,0x10
8000622c:	fc 0a 00 09 	add	r9,lr,r10
80006230:	b0 09       	st.h	r8[0x0],r9
80006232:	2f c8       	sub	r8,-4
80006234:	b1 49       	asr	r9,0x10
80006236:	04 33       	cp.w	r3,r2
80006238:	fe 98 ff eb 	brls	8000620e <quorem+0xc6>
8000623c:	ec c8 ff fb 	sub	r8,r6,-5
80006240:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006244:	58 09       	cp.w	r9,0
80006246:	c0 d1       	brne	80006260 <quorem+0x118>
80006248:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000624c:	c0 28       	rjmp	80006250 <quorem+0x108>
8000624e:	20 16       	sub	r6,1
80006250:	20 48       	sub	r8,4
80006252:	08 38       	cp.w	r8,r4
80006254:	e0 88 00 05 	brls	8000625e <quorem+0x116>
80006258:	70 09       	ld.w	r9,r8[0x0]
8000625a:	58 09       	cp.w	r9,0
8000625c:	cf 90       	breq	8000624e <quorem+0x106>
8000625e:	8f 46       	st.w	r7[0x10],r6
80006260:	0a 9c       	mov	r12,r5
80006262:	2f ed       	sub	sp,-8
80006264:	d8 32       	popm	r0-r7,pc
80006266:	d7 03       	nop

80006268 <_dtoa_r>:
80006268:	d4 31       	pushm	r0-r7,lr
8000626a:	21 ad       	sub	sp,104
8000626c:	fa c4 ff 74 	sub	r4,sp,-140
80006270:	18 97       	mov	r7,r12
80006272:	16 95       	mov	r5,r11
80006274:	68 2c       	ld.w	r12,r4[0x8]
80006276:	50 c9       	stdsp	sp[0x30],r9
80006278:	68 16       	ld.w	r6,r4[0x4]
8000627a:	68 09       	ld.w	r9,r4[0x0]
8000627c:	50 e8       	stdsp	sp[0x38],r8
8000627e:	14 94       	mov	r4,r10
80006280:	51 2c       	stdsp	sp[0x48],r12
80006282:	fa e5 00 08 	st.d	sp[8],r4
80006286:	51 59       	stdsp	sp[0x54],r9
80006288:	6e 95       	ld.w	r5,r7[0x24]
8000628a:	58 05       	cp.w	r5,0
8000628c:	c0 91       	brne	8000629e <_dtoa_r+0x36>
8000628e:	31 0c       	mov	r12,16
80006290:	e0 a0 09 ea 	rcall	80007664 <malloc>
80006294:	99 35       	st.w	r12[0xc],r5
80006296:	8f 9c       	st.w	r7[0x24],r12
80006298:	99 15       	st.w	r12[0x4],r5
8000629a:	99 25       	st.w	r12[0x8],r5
8000629c:	99 05       	st.w	r12[0x0],r5
8000629e:	6e 99       	ld.w	r9,r7[0x24]
800062a0:	72 08       	ld.w	r8,r9[0x0]
800062a2:	58 08       	cp.w	r8,0
800062a4:	c0 f0       	breq	800062c2 <_dtoa_r+0x5a>
800062a6:	72 1a       	ld.w	r10,r9[0x4]
800062a8:	91 1a       	st.w	r8[0x4],r10
800062aa:	30 1a       	mov	r10,1
800062ac:	72 19       	ld.w	r9,r9[0x4]
800062ae:	f4 09 09 49 	lsl	r9,r10,r9
800062b2:	10 9b       	mov	r11,r8
800062b4:	91 29       	st.w	r8[0x8],r9
800062b6:	0e 9c       	mov	r12,r7
800062b8:	e0 a0 0c b2 	rcall	80007c1c <_Bfree>
800062bc:	6e 98       	ld.w	r8,r7[0x24]
800062be:	30 09       	mov	r9,0
800062c0:	91 09       	st.w	r8[0x0],r9
800062c2:	40 28       	lddsp	r8,sp[0x8]
800062c4:	10 94       	mov	r4,r8
800062c6:	58 08       	cp.w	r8,0
800062c8:	c0 64       	brge	800062d4 <_dtoa_r+0x6c>
800062ca:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800062ce:	50 28       	stdsp	sp[0x8],r8
800062d0:	30 18       	mov	r8,1
800062d2:	c0 28       	rjmp	800062d6 <_dtoa_r+0x6e>
800062d4:	30 08       	mov	r8,0
800062d6:	8d 08       	st.w	r6[0x0],r8
800062d8:	fc 1c 7f f0 	movh	r12,0x7ff0
800062dc:	40 26       	lddsp	r6,sp[0x8]
800062de:	0c 98       	mov	r8,r6
800062e0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800062e4:	18 38       	cp.w	r8,r12
800062e6:	c2 01       	brne	80006326 <_dtoa_r+0xbe>
800062e8:	e0 68 27 0f 	mov	r8,9999
800062ec:	41 5b       	lddsp	r11,sp[0x54]
800062ee:	97 08       	st.w	r11[0x0],r8
800062f0:	40 3a       	lddsp	r10,sp[0xc]
800062f2:	58 0a       	cp.w	r10,0
800062f4:	c0 71       	brne	80006302 <_dtoa_r+0x9a>
800062f6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800062fa:	c0 41       	brne	80006302 <_dtoa_r+0x9a>
800062fc:	fe cc c7 10 	sub	r12,pc,-14576
80006300:	c0 38       	rjmp	80006306 <_dtoa_r+0x9e>
80006302:	fe cc c7 0a 	sub	r12,pc,-14582
80006306:	41 29       	lddsp	r9,sp[0x48]
80006308:	58 09       	cp.w	r9,0
8000630a:	e0 80 05 9a 	breq	80006e3e <_dtoa_r+0xbd6>
8000630e:	f8 c8 ff fd 	sub	r8,r12,-3
80006312:	f8 c9 ff f8 	sub	r9,r12,-8
80006316:	11 8b       	ld.ub	r11,r8[0x0]
80006318:	30 0a       	mov	r10,0
8000631a:	41 25       	lddsp	r5,sp[0x48]
8000631c:	f4 0b 18 00 	cp.b	r11,r10
80006320:	f2 08 17 10 	movne	r8,r9
80006324:	c1 68       	rjmp	80006350 <_dtoa_r+0xe8>
80006326:	fa ea 00 08 	ld.d	r10,sp[8]
8000632a:	30 08       	mov	r8,0
8000632c:	fa eb 00 3c 	st.d	sp[60],r10
80006330:	30 09       	mov	r9,0
80006332:	e0 a0 13 80 	rcall	80008a32 <__avr32_f64_cmp_eq>
80006336:	c1 00       	breq	80006356 <_dtoa_r+0xee>
80006338:	30 18       	mov	r8,1
8000633a:	41 5a       	lddsp	r10,sp[0x54]
8000633c:	95 08       	st.w	r10[0x0],r8
8000633e:	fe cc c8 76 	sub	r12,pc,-14218
80006342:	41 29       	lddsp	r9,sp[0x48]
80006344:	f8 08 00 08 	add	r8,r12,r8
80006348:	58 09       	cp.w	r9,0
8000634a:	e0 80 05 7a 	breq	80006e3e <_dtoa_r+0xbd6>
8000634e:	12 95       	mov	r5,r9
80006350:	8b 08       	st.w	r5[0x0],r8
80006352:	e0 8f 05 76 	bral	80006e3e <_dtoa_r+0xbd6>
80006356:	fa c8 ff 9c 	sub	r8,sp,-100
8000635a:	fa c9 ff a0 	sub	r9,sp,-96
8000635e:	fa ea 00 3c 	ld.d	r10,sp[60]
80006362:	0e 9c       	mov	r12,r7
80006364:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006368:	e0 a0 0c ac 	rcall	80007cc0 <__d2b>
8000636c:	18 93       	mov	r3,r12
8000636e:	58 05       	cp.w	r5,0
80006370:	c0 d0       	breq	8000638a <_dtoa_r+0x122>
80006372:	fa ea 00 3c 	ld.d	r10,sp[60]
80006376:	30 04       	mov	r4,0
80006378:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000637c:	ea c5 03 ff 	sub	r5,r5,1023
80006380:	10 9b       	mov	r11,r8
80006382:	51 74       	stdsp	sp[0x5c],r4
80006384:	ea 1b 3f f0 	orh	r11,0x3ff0
80006388:	c2 58       	rjmp	800063d2 <_dtoa_r+0x16a>
8000638a:	41 88       	lddsp	r8,sp[0x60]
8000638c:	41 9c       	lddsp	r12,sp[0x64]
8000638e:	10 0c       	add	r12,r8
80006390:	f8 c5 fb ce 	sub	r5,r12,-1074
80006394:	e0 45 00 20 	cp.w	r5,32
80006398:	e0 8a 00 0e 	brle	800063b4 <_dtoa_r+0x14c>
8000639c:	f8 cc fb ee 	sub	r12,r12,-1042
800063a0:	40 3b       	lddsp	r11,sp[0xc]
800063a2:	ea 08 11 40 	rsub	r8,r5,64
800063a6:	f6 0c 0a 4c 	lsr	r12,r11,r12
800063aa:	ec 08 09 46 	lsl	r6,r6,r8
800063ae:	0c 4c       	or	r12,r6
800063b0:	c0 78       	rjmp	800063be <_dtoa_r+0x156>
800063b2:	d7 03       	nop
800063b4:	ea 0c 11 20 	rsub	r12,r5,32
800063b8:	40 3a       	lddsp	r10,sp[0xc]
800063ba:	f4 0c 09 4c 	lsl	r12,r10,r12
800063be:	fe b0 eb 87 	rcall	80003acc <__avr32_u32_to_f64>
800063c2:	fc 18 fe 10 	movh	r8,0xfe10
800063c6:	30 19       	mov	r9,1
800063c8:	ea c5 04 33 	sub	r5,r5,1075
800063cc:	f0 0b 00 0b 	add	r11,r8,r11
800063d0:	51 79       	stdsp	sp[0x5c],r9
800063d2:	30 08       	mov	r8,0
800063d4:	fc 19 3f f8 	movh	r9,0x3ff8
800063d8:	e0 a0 11 c2 	rcall	8000875c <__avr32_f64_sub>
800063dc:	e0 68 43 61 	mov	r8,17249
800063e0:	ea 18 63 6f 	orh	r8,0x636f
800063e4:	e0 69 87 a7 	mov	r9,34727
800063e8:	ea 19 3f d2 	orh	r9,0x3fd2
800063ec:	fe b0 ea 86 	rcall	800038f8 <__avr32_f64_mul>
800063f0:	e0 68 c8 b3 	mov	r8,51379
800063f4:	ea 18 8b 60 	orh	r8,0x8b60
800063f8:	e0 69 8a 28 	mov	r9,35368
800063fc:	ea 19 3f c6 	orh	r9,0x3fc6
80006400:	e0 a0 12 7c 	rcall	800088f8 <__avr32_f64_add>
80006404:	0a 9c       	mov	r12,r5
80006406:	14 90       	mov	r0,r10
80006408:	16 91       	mov	r1,r11
8000640a:	fe b0 eb 65 	rcall	80003ad4 <__avr32_s32_to_f64>
8000640e:	e0 68 79 fb 	mov	r8,31227
80006412:	ea 18 50 9f 	orh	r8,0x509f
80006416:	e0 69 44 13 	mov	r9,17427
8000641a:	ea 19 3f d3 	orh	r9,0x3fd3
8000641e:	fe b0 ea 6d 	rcall	800038f8 <__avr32_f64_mul>
80006422:	14 98       	mov	r8,r10
80006424:	16 99       	mov	r9,r11
80006426:	00 9a       	mov	r10,r0
80006428:	02 9b       	mov	r11,r1
8000642a:	e0 a0 12 67 	rcall	800088f8 <__avr32_f64_add>
8000642e:	14 90       	mov	r0,r10
80006430:	16 91       	mov	r1,r11
80006432:	e0 a0 12 ed 	rcall	80008a0c <__avr32_f64_to_s32>
80006436:	30 08       	mov	r8,0
80006438:	18 96       	mov	r6,r12
8000643a:	30 09       	mov	r9,0
8000643c:	00 9a       	mov	r10,r0
8000643e:	02 9b       	mov	r11,r1
80006440:	e0 a0 13 40 	rcall	80008ac0 <__avr32_f64_cmp_lt>
80006444:	c0 c0       	breq	8000645c <_dtoa_r+0x1f4>
80006446:	0c 9c       	mov	r12,r6
80006448:	fe b0 eb 46 	rcall	80003ad4 <__avr32_s32_to_f64>
8000644c:	14 98       	mov	r8,r10
8000644e:	16 99       	mov	r9,r11
80006450:	00 9a       	mov	r10,r0
80006452:	02 9b       	mov	r11,r1
80006454:	e0 a0 12 ef 	rcall	80008a32 <__avr32_f64_cmp_eq>
80006458:	f7 b6 00 01 	subeq	r6,1
8000645c:	59 66       	cp.w	r6,22
8000645e:	e0 88 00 05 	brls	80006468 <_dtoa_r+0x200>
80006462:	30 18       	mov	r8,1
80006464:	51 48       	stdsp	sp[0x50],r8
80006466:	c1 38       	rjmp	8000648c <_dtoa_r+0x224>
80006468:	fe c8 c7 b8 	sub	r8,pc,-14408
8000646c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006470:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006474:	e0 a0 13 26 	rcall	80008ac0 <__avr32_f64_cmp_lt>
80006478:	f9 b4 00 00 	moveq	r4,0
8000647c:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006480:	f7 b6 01 01 	subne	r6,1
80006484:	f9 bc 01 00 	movne	r12,0
80006488:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000648c:	41 90       	lddsp	r0,sp[0x64]
8000648e:	20 10       	sub	r0,1
80006490:	0a 10       	sub	r0,r5
80006492:	c0 46       	brmi	8000649a <_dtoa_r+0x232>
80006494:	50 40       	stdsp	sp[0x10],r0
80006496:	30 00       	mov	r0,0
80006498:	c0 48       	rjmp	800064a0 <_dtoa_r+0x238>
8000649a:	30 0b       	mov	r11,0
8000649c:	5c 30       	neg	r0
8000649e:	50 4b       	stdsp	sp[0x10],r11
800064a0:	ec 02 11 00 	rsub	r2,r6,0
800064a4:	58 06       	cp.w	r6,0
800064a6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800064aa:	f5 d6 e4 0a 	addge	r10,r10,r6
800064ae:	fb fa 4a 04 	st.wge	sp[0x10],r10
800064b2:	fb f6 4a 11 	st.wge	sp[0x44],r6
800064b6:	f9 b2 04 00 	movge	r2,0
800064ba:	e1 d6 e5 10 	sublt	r0,r0,r6
800064be:	f9 b9 05 00 	movlt	r9,0
800064c2:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800064c6:	40 c8       	lddsp	r8,sp[0x30]
800064c8:	58 98       	cp.w	r8,9
800064ca:	e0 8b 00 20 	brhi	8000650a <_dtoa_r+0x2a2>
800064ce:	58 58       	cp.w	r8,5
800064d0:	f9 b4 0a 01 	movle	r4,1
800064d4:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800064d8:	f7 b5 09 04 	subgt	r5,4
800064dc:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800064e0:	f9 b4 09 00 	movgt	r4,0
800064e4:	40 cc       	lddsp	r12,sp[0x30]
800064e6:	58 3c       	cp.w	r12,3
800064e8:	c2 d0       	breq	80006542 <_dtoa_r+0x2da>
800064ea:	e0 89 00 05 	brgt	800064f4 <_dtoa_r+0x28c>
800064ee:	58 2c       	cp.w	r12,2
800064f0:	c1 01       	brne	80006510 <_dtoa_r+0x2a8>
800064f2:	c1 88       	rjmp	80006522 <_dtoa_r+0x2ba>
800064f4:	40 cb       	lddsp	r11,sp[0x30]
800064f6:	58 4b       	cp.w	r11,4
800064f8:	c0 60       	breq	80006504 <_dtoa_r+0x29c>
800064fa:	58 5b       	cp.w	r11,5
800064fc:	c0 a1       	brne	80006510 <_dtoa_r+0x2a8>
800064fe:	30 1a       	mov	r10,1
80006500:	50 da       	stdsp	sp[0x34],r10
80006502:	c2 28       	rjmp	80006546 <_dtoa_r+0x2de>
80006504:	30 19       	mov	r9,1
80006506:	50 d9       	stdsp	sp[0x34],r9
80006508:	c0 f8       	rjmp	80006526 <_dtoa_r+0x2be>
8000650a:	30 08       	mov	r8,0
8000650c:	30 14       	mov	r4,1
8000650e:	50 c8       	stdsp	sp[0x30],r8
80006510:	3f f5       	mov	r5,-1
80006512:	30 1c       	mov	r12,1
80006514:	30 0b       	mov	r11,0
80006516:	50 95       	stdsp	sp[0x24],r5
80006518:	50 dc       	stdsp	sp[0x34],r12
8000651a:	0a 91       	mov	r1,r5
8000651c:	31 28       	mov	r8,18
8000651e:	50 eb       	stdsp	sp[0x38],r11
80006520:	c2 08       	rjmp	80006560 <_dtoa_r+0x2f8>
80006522:	30 0a       	mov	r10,0
80006524:	50 da       	stdsp	sp[0x34],r10
80006526:	40 e9       	lddsp	r9,sp[0x38]
80006528:	58 09       	cp.w	r9,0
8000652a:	e0 89 00 07 	brgt	80006538 <_dtoa_r+0x2d0>
8000652e:	30 18       	mov	r8,1
80006530:	50 98       	stdsp	sp[0x24],r8
80006532:	10 91       	mov	r1,r8
80006534:	50 e8       	stdsp	sp[0x38],r8
80006536:	c1 58       	rjmp	80006560 <_dtoa_r+0x2f8>
80006538:	40 e5       	lddsp	r5,sp[0x38]
8000653a:	50 95       	stdsp	sp[0x24],r5
8000653c:	0a 91       	mov	r1,r5
8000653e:	0a 98       	mov	r8,r5
80006540:	c1 08       	rjmp	80006560 <_dtoa_r+0x2f8>
80006542:	30 0c       	mov	r12,0
80006544:	50 dc       	stdsp	sp[0x34],r12
80006546:	40 eb       	lddsp	r11,sp[0x38]
80006548:	ec 0b 00 0b 	add	r11,r6,r11
8000654c:	50 9b       	stdsp	sp[0x24],r11
8000654e:	16 98       	mov	r8,r11
80006550:	2f f8       	sub	r8,-1
80006552:	58 08       	cp.w	r8,0
80006554:	e0 89 00 05 	brgt	8000655e <_dtoa_r+0x2f6>
80006558:	10 91       	mov	r1,r8
8000655a:	30 18       	mov	r8,1
8000655c:	c0 28       	rjmp	80006560 <_dtoa_r+0x2f8>
8000655e:	10 91       	mov	r1,r8
80006560:	30 09       	mov	r9,0
80006562:	6e 9a       	ld.w	r10,r7[0x24]
80006564:	95 19       	st.w	r10[0x4],r9
80006566:	30 49       	mov	r9,4
80006568:	c0 68       	rjmp	80006574 <_dtoa_r+0x30c>
8000656a:	d7 03       	nop
8000656c:	6a 1a       	ld.w	r10,r5[0x4]
8000656e:	a1 79       	lsl	r9,0x1
80006570:	2f fa       	sub	r10,-1
80006572:	8b 1a       	st.w	r5[0x4],r10
80006574:	6e 95       	ld.w	r5,r7[0x24]
80006576:	f2 ca ff ec 	sub	r10,r9,-20
8000657a:	10 3a       	cp.w	r10,r8
8000657c:	fe 98 ff f8 	brls	8000656c <_dtoa_r+0x304>
80006580:	6a 1b       	ld.w	r11,r5[0x4]
80006582:	0e 9c       	mov	r12,r7
80006584:	e0 a0 0b 66 	rcall	80007c50 <_Balloc>
80006588:	58 e1       	cp.w	r1,14
8000658a:	5f 88       	srls	r8
8000658c:	8b 0c       	st.w	r5[0x0],r12
8000658e:	f1 e4 00 04 	and	r4,r8,r4
80006592:	6e 98       	ld.w	r8,r7[0x24]
80006594:	70 08       	ld.w	r8,r8[0x0]
80006596:	50 88       	stdsp	sp[0x20],r8
80006598:	e0 80 01 82 	breq	8000689c <_dtoa_r+0x634>
8000659c:	58 06       	cp.w	r6,0
8000659e:	e0 8a 00 43 	brle	80006624 <_dtoa_r+0x3bc>
800065a2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800065a6:	fe c8 c8 f6 	sub	r8,pc,-14090
800065aa:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800065ae:	fa e5 00 18 	st.d	sp[24],r4
800065b2:	ec 04 14 04 	asr	r4,r6,0x4
800065b6:	ed b4 00 04 	bld	r4,0x4
800065ba:	c0 30       	breq	800065c0 <_dtoa_r+0x358>
800065bc:	30 25       	mov	r5,2
800065be:	c1 08       	rjmp	800065de <_dtoa_r+0x376>
800065c0:	fe c8 c8 48 	sub	r8,pc,-14264
800065c4:	f0 e8 00 20 	ld.d	r8,r8[32]
800065c8:	fa ea 00 3c 	ld.d	r10,sp[60]
800065cc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800065d0:	e0 a0 12 ac 	rcall	80008b28 <__avr32_f64_div>
800065d4:	30 35       	mov	r5,3
800065d6:	14 98       	mov	r8,r10
800065d8:	16 99       	mov	r9,r11
800065da:	fa e9 00 08 	st.d	sp[8],r8
800065de:	fe cc c8 66 	sub	r12,pc,-14234
800065e2:	50 a3       	stdsp	sp[0x28],r3
800065e4:	0c 93       	mov	r3,r6
800065e6:	18 96       	mov	r6,r12
800065e8:	c0 f8       	rjmp	80006606 <_dtoa_r+0x39e>
800065ea:	fa ea 00 18 	ld.d	r10,sp[24]
800065ee:	ed b4 00 00 	bld	r4,0x0
800065f2:	c0 81       	brne	80006602 <_dtoa_r+0x39a>
800065f4:	ec e8 00 00 	ld.d	r8,r6[0]
800065f8:	2f f5       	sub	r5,-1
800065fa:	fe b0 e9 7f 	rcall	800038f8 <__avr32_f64_mul>
800065fe:	fa eb 00 18 	st.d	sp[24],r10
80006602:	a1 54       	asr	r4,0x1
80006604:	2f 86       	sub	r6,-8
80006606:	58 04       	cp.w	r4,0
80006608:	cf 11       	brne	800065ea <_dtoa_r+0x382>
8000660a:	fa e8 00 18 	ld.d	r8,sp[24]
8000660e:	fa ea 00 08 	ld.d	r10,sp[8]
80006612:	06 96       	mov	r6,r3
80006614:	e0 a0 12 8a 	rcall	80008b28 <__avr32_f64_div>
80006618:	40 a3       	lddsp	r3,sp[0x28]
8000661a:	14 98       	mov	r8,r10
8000661c:	16 99       	mov	r9,r11
8000661e:	fa e9 00 08 	st.d	sp[8],r8
80006622:	c2 f8       	rjmp	80006680 <_dtoa_r+0x418>
80006624:	ec 08 11 00 	rsub	r8,r6,0
80006628:	c0 31       	brne	8000662e <_dtoa_r+0x3c6>
8000662a:	30 25       	mov	r5,2
8000662c:	c2 a8       	rjmp	80006680 <_dtoa_r+0x418>
8000662e:	fe cc c8 b6 	sub	r12,pc,-14154
80006632:	f0 04 14 04 	asr	r4,r8,0x4
80006636:	50 1c       	stdsp	sp[0x4],r12
80006638:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000663c:	fe c9 c9 8c 	sub	r9,pc,-13940
80006640:	fa ea 00 3c 	ld.d	r10,sp[60]
80006644:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006648:	fe b0 e9 58 	rcall	800038f8 <__avr32_f64_mul>
8000664c:	40 1c       	lddsp	r12,sp[0x4]
8000664e:	50 63       	stdsp	sp[0x18],r3
80006650:	30 25       	mov	r5,2
80006652:	0c 93       	mov	r3,r6
80006654:	fa eb 00 08 	st.d	sp[8],r10
80006658:	18 96       	mov	r6,r12
8000665a:	c0 f8       	rjmp	80006678 <_dtoa_r+0x410>
8000665c:	fa ea 00 08 	ld.d	r10,sp[8]
80006660:	ed b4 00 00 	bld	r4,0x0
80006664:	c0 81       	brne	80006674 <_dtoa_r+0x40c>
80006666:	ec e8 00 00 	ld.d	r8,r6[0]
8000666a:	2f f5       	sub	r5,-1
8000666c:	fe b0 e9 46 	rcall	800038f8 <__avr32_f64_mul>
80006670:	fa eb 00 08 	st.d	sp[8],r10
80006674:	a1 54       	asr	r4,0x1
80006676:	2f 86       	sub	r6,-8
80006678:	58 04       	cp.w	r4,0
8000667a:	cf 11       	brne	8000665c <_dtoa_r+0x3f4>
8000667c:	06 96       	mov	r6,r3
8000667e:	40 63       	lddsp	r3,sp[0x18]
80006680:	41 4a       	lddsp	r10,sp[0x50]
80006682:	58 0a       	cp.w	r10,0
80006684:	c2 a0       	breq	800066d8 <_dtoa_r+0x470>
80006686:	fa e8 00 08 	ld.d	r8,sp[8]
8000668a:	58 01       	cp.w	r1,0
8000668c:	5f 94       	srgt	r4
8000668e:	fa e9 00 18 	st.d	sp[24],r8
80006692:	30 08       	mov	r8,0
80006694:	fc 19 3f f0 	movh	r9,0x3ff0
80006698:	fa ea 00 18 	ld.d	r10,sp[24]
8000669c:	e0 a0 12 12 	rcall	80008ac0 <__avr32_f64_cmp_lt>
800066a0:	f9 bc 00 00 	moveq	r12,0
800066a4:	f9 bc 01 01 	movne	r12,1
800066a8:	e9 ec 00 0c 	and	r12,r4,r12
800066ac:	c1 60       	breq	800066d8 <_dtoa_r+0x470>
800066ae:	40 98       	lddsp	r8,sp[0x24]
800066b0:	58 08       	cp.w	r8,0
800066b2:	e0 8a 00 f1 	brle	80006894 <_dtoa_r+0x62c>
800066b6:	30 08       	mov	r8,0
800066b8:	fc 19 40 24 	movh	r9,0x4024
800066bc:	ec c4 00 01 	sub	r4,r6,1
800066c0:	fa ea 00 18 	ld.d	r10,sp[24]
800066c4:	2f f5       	sub	r5,-1
800066c6:	50 64       	stdsp	sp[0x18],r4
800066c8:	fe b0 e9 18 	rcall	800038f8 <__avr32_f64_mul>
800066cc:	40 94       	lddsp	r4,sp[0x24]
800066ce:	14 98       	mov	r8,r10
800066d0:	16 99       	mov	r9,r11
800066d2:	fa e9 00 08 	st.d	sp[8],r8
800066d6:	c0 38       	rjmp	800066dc <_dtoa_r+0x474>
800066d8:	50 66       	stdsp	sp[0x18],r6
800066da:	02 94       	mov	r4,r1
800066dc:	0a 9c       	mov	r12,r5
800066de:	fe b0 e9 fb 	rcall	80003ad4 <__avr32_s32_to_f64>
800066e2:	fa e8 00 08 	ld.d	r8,sp[8]
800066e6:	fe b0 e9 09 	rcall	800038f8 <__avr32_f64_mul>
800066ea:	30 08       	mov	r8,0
800066ec:	fc 19 40 1c 	movh	r9,0x401c
800066f0:	e0 a0 11 04 	rcall	800088f8 <__avr32_f64_add>
800066f4:	14 98       	mov	r8,r10
800066f6:	16 99       	mov	r9,r11
800066f8:	fa e9 00 28 	st.d	sp[40],r8
800066fc:	fc 18 fc c0 	movh	r8,0xfcc0
80006700:	40 a5       	lddsp	r5,sp[0x28]
80006702:	10 05       	add	r5,r8
80006704:	50 a5       	stdsp	sp[0x28],r5
80006706:	58 04       	cp.w	r4,0
80006708:	c2 11       	brne	8000674a <_dtoa_r+0x4e2>
8000670a:	fa ea 00 08 	ld.d	r10,sp[8]
8000670e:	30 08       	mov	r8,0
80006710:	fc 19 40 14 	movh	r9,0x4014
80006714:	e0 a0 10 24 	rcall	8000875c <__avr32_f64_sub>
80006718:	40 bc       	lddsp	r12,sp[0x2c]
8000671a:	fa eb 00 08 	st.d	sp[8],r10
8000671e:	14 98       	mov	r8,r10
80006720:	16 99       	mov	r9,r11
80006722:	18 9a       	mov	r10,r12
80006724:	0a 9b       	mov	r11,r5
80006726:	e0 a0 11 cd 	rcall	80008ac0 <__avr32_f64_cmp_lt>
8000672a:	e0 81 02 54 	brne	80006bd2 <_dtoa_r+0x96a>
8000672e:	0a 98       	mov	r8,r5
80006730:	40 b9       	lddsp	r9,sp[0x2c]
80006732:	ee 18 80 00 	eorh	r8,0x8000
80006736:	fa ea 00 08 	ld.d	r10,sp[8]
8000673a:	10 95       	mov	r5,r8
8000673c:	12 98       	mov	r8,r9
8000673e:	0a 99       	mov	r9,r5
80006740:	e0 a0 11 c0 	rcall	80008ac0 <__avr32_f64_cmp_lt>
80006744:	e0 81 02 3e 	brne	80006bc0 <_dtoa_r+0x958>
80006748:	ca 68       	rjmp	80006894 <_dtoa_r+0x62c>
8000674a:	fe c9 ca 9a 	sub	r9,pc,-13670
8000674e:	e8 c8 00 01 	sub	r8,r4,1
80006752:	40 d5       	lddsp	r5,sp[0x34]
80006754:	58 05       	cp.w	r5,0
80006756:	c4 f0       	breq	800067f4 <_dtoa_r+0x58c>
80006758:	30 0c       	mov	r12,0
8000675a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000675e:	51 3c       	stdsp	sp[0x4c],r12
80006760:	30 0a       	mov	r10,0
80006762:	fc 1b 3f e0 	movh	r11,0x3fe0
80006766:	e0 a0 11 e1 	rcall	80008b28 <__avr32_f64_div>
8000676a:	fa e8 00 28 	ld.d	r8,sp[40]
8000676e:	40 85       	lddsp	r5,sp[0x20]
80006770:	e0 a0 0f f6 	rcall	8000875c <__avr32_f64_sub>
80006774:	fa eb 00 28 	st.d	sp[40],r10
80006778:	fa ea 00 08 	ld.d	r10,sp[8]
8000677c:	e0 a0 11 48 	rcall	80008a0c <__avr32_f64_to_s32>
80006780:	51 6c       	stdsp	sp[0x58],r12
80006782:	fe b0 e9 a9 	rcall	80003ad4 <__avr32_s32_to_f64>
80006786:	14 98       	mov	r8,r10
80006788:	16 99       	mov	r9,r11
8000678a:	fa ea 00 08 	ld.d	r10,sp[8]
8000678e:	e0 a0 0f e7 	rcall	8000875c <__avr32_f64_sub>
80006792:	fa eb 00 08 	st.d	sp[8],r10
80006796:	41 68       	lddsp	r8,sp[0x58]
80006798:	2d 08       	sub	r8,-48
8000679a:	0a c8       	st.b	r5++,r8
8000679c:	41 39       	lddsp	r9,sp[0x4c]
8000679e:	2f f9       	sub	r9,-1
800067a0:	51 39       	stdsp	sp[0x4c],r9
800067a2:	fa e8 00 28 	ld.d	r8,sp[40]
800067a6:	e0 a0 11 8d 	rcall	80008ac0 <__avr32_f64_cmp_lt>
800067aa:	e0 81 03 39 	brne	80006e1c <_dtoa_r+0xbb4>
800067ae:	fa e8 00 08 	ld.d	r8,sp[8]
800067b2:	30 0a       	mov	r10,0
800067b4:	fc 1b 3f f0 	movh	r11,0x3ff0
800067b8:	e0 a0 0f d2 	rcall	8000875c <__avr32_f64_sub>
800067bc:	fa e8 00 28 	ld.d	r8,sp[40]
800067c0:	e0 a0 11 80 	rcall	80008ac0 <__avr32_f64_cmp_lt>
800067c4:	fa ea 00 28 	ld.d	r10,sp[40]
800067c8:	30 08       	mov	r8,0
800067ca:	fc 19 40 24 	movh	r9,0x4024
800067ce:	e0 81 00 da 	brne	80006982 <_dtoa_r+0x71a>
800067d2:	41 3c       	lddsp	r12,sp[0x4c]
800067d4:	08 3c       	cp.w	r12,r4
800067d6:	c5 f4       	brge	80006894 <_dtoa_r+0x62c>
800067d8:	fe b0 e8 90 	rcall	800038f8 <__avr32_f64_mul>
800067dc:	30 08       	mov	r8,0
800067de:	fa eb 00 28 	st.d	sp[40],r10
800067e2:	fc 19 40 24 	movh	r9,0x4024
800067e6:	fa ea 00 08 	ld.d	r10,sp[8]
800067ea:	fe b0 e8 87 	rcall	800038f8 <__avr32_f64_mul>
800067ee:	fa eb 00 08 	st.d	sp[8],r10
800067f2:	cc 3b       	rjmp	80006778 <_dtoa_r+0x510>
800067f4:	40 85       	lddsp	r5,sp[0x20]
800067f6:	08 05       	add	r5,r4
800067f8:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800067fc:	51 35       	stdsp	sp[0x4c],r5
800067fe:	fa e8 00 28 	ld.d	r8,sp[40]
80006802:	40 85       	lddsp	r5,sp[0x20]
80006804:	fe b0 e8 7a 	rcall	800038f8 <__avr32_f64_mul>
80006808:	fa eb 00 28 	st.d	sp[40],r10
8000680c:	fa ea 00 08 	ld.d	r10,sp[8]
80006810:	e0 a0 10 fe 	rcall	80008a0c <__avr32_f64_to_s32>
80006814:	51 6c       	stdsp	sp[0x58],r12
80006816:	fe b0 e9 5f 	rcall	80003ad4 <__avr32_s32_to_f64>
8000681a:	14 98       	mov	r8,r10
8000681c:	16 99       	mov	r9,r11
8000681e:	fa ea 00 08 	ld.d	r10,sp[8]
80006822:	e0 a0 0f 9d 	rcall	8000875c <__avr32_f64_sub>
80006826:	fa eb 00 08 	st.d	sp[8],r10
8000682a:	41 68       	lddsp	r8,sp[0x58]
8000682c:	2d 08       	sub	r8,-48
8000682e:	0a c8       	st.b	r5++,r8
80006830:	41 3c       	lddsp	r12,sp[0x4c]
80006832:	18 35       	cp.w	r5,r12
80006834:	c2 81       	brne	80006884 <_dtoa_r+0x61c>
80006836:	30 08       	mov	r8,0
80006838:	fc 19 3f e0 	movh	r9,0x3fe0
8000683c:	fa ea 00 28 	ld.d	r10,sp[40]
80006840:	e0 a0 10 5c 	rcall	800088f8 <__avr32_f64_add>
80006844:	40 85       	lddsp	r5,sp[0x20]
80006846:	fa e8 00 08 	ld.d	r8,sp[8]
8000684a:	08 05       	add	r5,r4
8000684c:	e0 a0 11 3a 	rcall	80008ac0 <__avr32_f64_cmp_lt>
80006850:	e0 81 00 99 	brne	80006982 <_dtoa_r+0x71a>
80006854:	fa e8 00 28 	ld.d	r8,sp[40]
80006858:	30 0a       	mov	r10,0
8000685a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000685e:	e0 a0 0f 7f 	rcall	8000875c <__avr32_f64_sub>
80006862:	14 98       	mov	r8,r10
80006864:	16 99       	mov	r9,r11
80006866:	fa ea 00 08 	ld.d	r10,sp[8]
8000686a:	e0 a0 11 2b 	rcall	80008ac0 <__avr32_f64_cmp_lt>
8000686e:	c1 30       	breq	80006894 <_dtoa_r+0x62c>
80006870:	33 09       	mov	r9,48
80006872:	0a 98       	mov	r8,r5
80006874:	11 7a       	ld.ub	r10,--r8
80006876:	f2 0a 18 00 	cp.b	r10,r9
8000687a:	e0 81 02 d1 	brne	80006e1c <_dtoa_r+0xbb4>
8000687e:	10 95       	mov	r5,r8
80006880:	cf 9b       	rjmp	80006872 <_dtoa_r+0x60a>
80006882:	d7 03       	nop
80006884:	30 08       	mov	r8,0
80006886:	fc 19 40 24 	movh	r9,0x4024
8000688a:	fe b0 e8 37 	rcall	800038f8 <__avr32_f64_mul>
8000688e:	fa eb 00 08 	st.d	sp[8],r10
80006892:	cb db       	rjmp	8000680c <_dtoa_r+0x5a4>
80006894:	fa ea 00 3c 	ld.d	r10,sp[60]
80006898:	fa eb 00 08 	st.d	sp[8],r10
8000689c:	58 e6       	cp.w	r6,14
8000689e:	5f ab       	srle	r11
800068a0:	41 8a       	lddsp	r10,sp[0x60]
800068a2:	30 08       	mov	r8,0
800068a4:	f4 09 11 ff 	rsub	r9,r10,-1
800068a8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800068ac:	f0 09 18 00 	cp.b	r9,r8
800068b0:	e0 80 00 82 	breq	800069b4 <_dtoa_r+0x74c>
800068b4:	40 ea       	lddsp	r10,sp[0x38]
800068b6:	58 01       	cp.w	r1,0
800068b8:	5f a9       	srle	r9
800068ba:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800068be:	fe ca cc 0e 	sub	r10,pc,-13298
800068c2:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800068c6:	fa e5 00 10 	st.d	sp[16],r4
800068ca:	f0 09 18 00 	cp.b	r9,r8
800068ce:	c1 40       	breq	800068f6 <_dtoa_r+0x68e>
800068d0:	58 01       	cp.w	r1,0
800068d2:	e0 81 01 77 	brne	80006bc0 <_dtoa_r+0x958>
800068d6:	30 08       	mov	r8,0
800068d8:	fc 19 40 14 	movh	r9,0x4014
800068dc:	08 9a       	mov	r10,r4
800068de:	0a 9b       	mov	r11,r5
800068e0:	fe b0 e8 0c 	rcall	800038f8 <__avr32_f64_mul>
800068e4:	fa e8 00 08 	ld.d	r8,sp[8]
800068e8:	e0 a0 10 b8 	rcall	80008a58 <__avr32_f64_cmp_ge>
800068ec:	e0 81 01 6a 	brne	80006bc0 <_dtoa_r+0x958>
800068f0:	02 92       	mov	r2,r1
800068f2:	e0 8f 01 72 	bral	80006bd6 <_dtoa_r+0x96e>
800068f6:	40 85       	lddsp	r5,sp[0x20]
800068f8:	30 14       	mov	r4,1
800068fa:	fa e8 00 10 	ld.d	r8,sp[16]
800068fe:	fa ea 00 08 	ld.d	r10,sp[8]
80006902:	e0 a0 11 13 	rcall	80008b28 <__avr32_f64_div>
80006906:	e0 a0 10 83 	rcall	80008a0c <__avr32_f64_to_s32>
8000690a:	18 92       	mov	r2,r12
8000690c:	fe b0 e8 e4 	rcall	80003ad4 <__avr32_s32_to_f64>
80006910:	fa e8 00 10 	ld.d	r8,sp[16]
80006914:	fe b0 e7 f2 	rcall	800038f8 <__avr32_f64_mul>
80006918:	14 98       	mov	r8,r10
8000691a:	16 99       	mov	r9,r11
8000691c:	fa ea 00 08 	ld.d	r10,sp[8]
80006920:	e0 a0 0f 1e 	rcall	8000875c <__avr32_f64_sub>
80006924:	fa eb 00 08 	st.d	sp[8],r10
80006928:	e4 c8 ff d0 	sub	r8,r2,-48
8000692c:	0a c8       	st.b	r5++,r8
8000692e:	fc 19 40 24 	movh	r9,0x4024
80006932:	30 08       	mov	r8,0
80006934:	02 34       	cp.w	r4,r1
80006936:	c3 31       	brne	8000699c <_dtoa_r+0x734>
80006938:	fa e8 00 08 	ld.d	r8,sp[8]
8000693c:	e0 a0 0f de 	rcall	800088f8 <__avr32_f64_add>
80006940:	16 91       	mov	r1,r11
80006942:	14 90       	mov	r0,r10
80006944:	14 98       	mov	r8,r10
80006946:	02 99       	mov	r9,r1
80006948:	fa ea 00 10 	ld.d	r10,sp[16]
8000694c:	e0 a0 10 ba 	rcall	80008ac0 <__avr32_f64_cmp_lt>
80006950:	c1 a1       	brne	80006984 <_dtoa_r+0x71c>
80006952:	fa e8 00 10 	ld.d	r8,sp[16]
80006956:	00 9a       	mov	r10,r0
80006958:	02 9b       	mov	r11,r1
8000695a:	e0 a0 10 6c 	rcall	80008a32 <__avr32_f64_cmp_eq>
8000695e:	e0 80 02 5e 	breq	80006e1a <_dtoa_r+0xbb2>
80006962:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006966:	c0 f1       	brne	80006984 <_dtoa_r+0x71c>
80006968:	e0 8f 02 59 	bral	80006e1a <_dtoa_r+0xbb2>
8000696c:	40 8a       	lddsp	r10,sp[0x20]
8000696e:	14 38       	cp.w	r8,r10
80006970:	c0 30       	breq	80006976 <_dtoa_r+0x70e>
80006972:	10 95       	mov	r5,r8
80006974:	c0 98       	rjmp	80006986 <_dtoa_r+0x71e>
80006976:	33 08       	mov	r8,48
80006978:	40 89       	lddsp	r9,sp[0x20]
8000697a:	2f f6       	sub	r6,-1
8000697c:	b2 88       	st.b	r9[0x0],r8
8000697e:	40 88       	lddsp	r8,sp[0x20]
80006980:	c0 88       	rjmp	80006990 <_dtoa_r+0x728>
80006982:	40 66       	lddsp	r6,sp[0x18]
80006984:	33 99       	mov	r9,57
80006986:	0a 98       	mov	r8,r5
80006988:	11 7a       	ld.ub	r10,--r8
8000698a:	f2 0a 18 00 	cp.b	r10,r9
8000698e:	ce f0       	breq	8000696c <_dtoa_r+0x704>
80006990:	50 66       	stdsp	sp[0x18],r6
80006992:	11 89       	ld.ub	r9,r8[0x0]
80006994:	2f f9       	sub	r9,-1
80006996:	b0 89       	st.b	r8[0x0],r9
80006998:	e0 8f 02 42 	bral	80006e1c <_dtoa_r+0xbb4>
8000699c:	fe b0 e7 ae 	rcall	800038f8 <__avr32_f64_mul>
800069a0:	2f f4       	sub	r4,-1
800069a2:	fa eb 00 08 	st.d	sp[8],r10
800069a6:	30 08       	mov	r8,0
800069a8:	30 09       	mov	r9,0
800069aa:	e0 a0 10 44 	rcall	80008a32 <__avr32_f64_cmp_eq>
800069ae:	ca 60       	breq	800068fa <_dtoa_r+0x692>
800069b0:	e0 8f 02 35 	bral	80006e1a <_dtoa_r+0xbb2>
800069b4:	40 d8       	lddsp	r8,sp[0x34]
800069b6:	58 08       	cp.w	r8,0
800069b8:	c0 51       	brne	800069c2 <_dtoa_r+0x75a>
800069ba:	04 98       	mov	r8,r2
800069bc:	00 95       	mov	r5,r0
800069be:	40 d4       	lddsp	r4,sp[0x34]
800069c0:	c3 78       	rjmp	80006a2e <_dtoa_r+0x7c6>
800069c2:	40 c5       	lddsp	r5,sp[0x30]
800069c4:	58 15       	cp.w	r5,1
800069c6:	e0 89 00 0f 	brgt	800069e4 <_dtoa_r+0x77c>
800069ca:	41 74       	lddsp	r4,sp[0x5c]
800069cc:	58 04       	cp.w	r4,0
800069ce:	c0 40       	breq	800069d6 <_dtoa_r+0x76e>
800069d0:	f4 c9 fb cd 	sub	r9,r10,-1075
800069d4:	c0 48       	rjmp	800069dc <_dtoa_r+0x774>
800069d6:	41 99       	lddsp	r9,sp[0x64]
800069d8:	f2 09 11 36 	rsub	r9,r9,54
800069dc:	04 98       	mov	r8,r2
800069de:	00 95       	mov	r5,r0
800069e0:	c1 c8       	rjmp	80006a18 <_dtoa_r+0x7b0>
800069e2:	d7 03       	nop
800069e4:	e2 c8 00 01 	sub	r8,r1,1
800069e8:	58 01       	cp.w	r1,0
800069ea:	e0 05 17 40 	movge	r5,r0
800069ee:	e2 09 17 40 	movge	r9,r1
800069f2:	e1 d1 e5 15 	sublt	r5,r0,r1
800069f6:	f9 b9 05 00 	movlt	r9,0
800069fa:	10 32       	cp.w	r2,r8
800069fc:	e5 d8 e4 18 	subge	r8,r2,r8
80006a00:	f1 d2 e5 18 	sublt	r8,r8,r2
80006a04:	e5 d8 e5 02 	addlt	r2,r2,r8
80006a08:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006a0c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006a10:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006a14:	f9 b8 05 00 	movlt	r8,0
80006a18:	40 4b       	lddsp	r11,sp[0x10]
80006a1a:	12 0b       	add	r11,r9
80006a1c:	50 08       	stdsp	sp[0x0],r8
80006a1e:	50 4b       	stdsp	sp[0x10],r11
80006a20:	12 00       	add	r0,r9
80006a22:	30 1b       	mov	r11,1
80006a24:	0e 9c       	mov	r12,r7
80006a26:	e0 a0 0a c9 	rcall	80007fb8 <__i2b>
80006a2a:	40 08       	lddsp	r8,sp[0x0]
80006a2c:	18 94       	mov	r4,r12
80006a2e:	40 4a       	lddsp	r10,sp[0x10]
80006a30:	58 05       	cp.w	r5,0
80006a32:	5f 99       	srgt	r9
80006a34:	58 0a       	cp.w	r10,0
80006a36:	5f 9a       	srgt	r10
80006a38:	f5 e9 00 09 	and	r9,r10,r9
80006a3c:	c0 80       	breq	80006a4c <_dtoa_r+0x7e4>
80006a3e:	40 4c       	lddsp	r12,sp[0x10]
80006a40:	f8 05 0d 49 	min	r9,r12,r5
80006a44:	12 1c       	sub	r12,r9
80006a46:	12 10       	sub	r0,r9
80006a48:	50 4c       	stdsp	sp[0x10],r12
80006a4a:	12 15       	sub	r5,r9
80006a4c:	58 02       	cp.w	r2,0
80006a4e:	e0 8a 00 27 	brle	80006a9c <_dtoa_r+0x834>
80006a52:	40 db       	lddsp	r11,sp[0x34]
80006a54:	58 0b       	cp.w	r11,0
80006a56:	c1 d0       	breq	80006a90 <_dtoa_r+0x828>
80006a58:	58 08       	cp.w	r8,0
80006a5a:	e0 8a 00 17 	brle	80006a88 <_dtoa_r+0x820>
80006a5e:	10 9a       	mov	r10,r8
80006a60:	50 08       	stdsp	sp[0x0],r8
80006a62:	08 9b       	mov	r11,r4
80006a64:	0e 9c       	mov	r12,r7
80006a66:	e0 a0 0a ef 	rcall	80008044 <__pow5mult>
80006a6a:	06 9a       	mov	r10,r3
80006a6c:	18 9b       	mov	r11,r12
80006a6e:	18 94       	mov	r4,r12
80006a70:	0e 9c       	mov	r12,r7
80006a72:	e0 a0 0a 23 	rcall	80007eb8 <__multiply>
80006a76:	18 99       	mov	r9,r12
80006a78:	06 9b       	mov	r11,r3
80006a7a:	50 19       	stdsp	sp[0x4],r9
80006a7c:	0e 9c       	mov	r12,r7
80006a7e:	e0 a0 08 cf 	rcall	80007c1c <_Bfree>
80006a82:	40 19       	lddsp	r9,sp[0x4]
80006a84:	40 08       	lddsp	r8,sp[0x0]
80006a86:	12 93       	mov	r3,r9
80006a88:	e4 08 01 0a 	sub	r10,r2,r8
80006a8c:	c0 80       	breq	80006a9c <_dtoa_r+0x834>
80006a8e:	c0 28       	rjmp	80006a92 <_dtoa_r+0x82a>
80006a90:	04 9a       	mov	r10,r2
80006a92:	06 9b       	mov	r11,r3
80006a94:	0e 9c       	mov	r12,r7
80006a96:	e0 a0 0a d7 	rcall	80008044 <__pow5mult>
80006a9a:	18 93       	mov	r3,r12
80006a9c:	30 1b       	mov	r11,1
80006a9e:	0e 9c       	mov	r12,r7
80006aa0:	e0 a0 0a 8c 	rcall	80007fb8 <__i2b>
80006aa4:	41 1a       	lddsp	r10,sp[0x44]
80006aa6:	18 92       	mov	r2,r12
80006aa8:	58 0a       	cp.w	r10,0
80006aaa:	e0 8a 00 07 	brle	80006ab8 <_dtoa_r+0x850>
80006aae:	18 9b       	mov	r11,r12
80006ab0:	0e 9c       	mov	r12,r7
80006ab2:	e0 a0 0a c9 	rcall	80008044 <__pow5mult>
80006ab6:	18 92       	mov	r2,r12
80006ab8:	40 c9       	lddsp	r9,sp[0x30]
80006aba:	58 19       	cp.w	r9,1
80006abc:	e0 89 00 14 	brgt	80006ae4 <_dtoa_r+0x87c>
80006ac0:	40 38       	lddsp	r8,sp[0xc]
80006ac2:	58 08       	cp.w	r8,0
80006ac4:	c1 01       	brne	80006ae4 <_dtoa_r+0x87c>
80006ac6:	40 29       	lddsp	r9,sp[0x8]
80006ac8:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006acc:	c0 c1       	brne	80006ae4 <_dtoa_r+0x87c>
80006ace:	12 98       	mov	r8,r9
80006ad0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006ad4:	c0 80       	breq	80006ae4 <_dtoa_r+0x87c>
80006ad6:	40 4c       	lddsp	r12,sp[0x10]
80006ad8:	30 1b       	mov	r11,1
80006ada:	2f fc       	sub	r12,-1
80006adc:	2f f0       	sub	r0,-1
80006ade:	50 4c       	stdsp	sp[0x10],r12
80006ae0:	50 6b       	stdsp	sp[0x18],r11
80006ae2:	c0 38       	rjmp	80006ae8 <_dtoa_r+0x880>
80006ae4:	30 0a       	mov	r10,0
80006ae6:	50 6a       	stdsp	sp[0x18],r10
80006ae8:	41 19       	lddsp	r9,sp[0x44]
80006aea:	58 09       	cp.w	r9,0
80006aec:	c0 31       	brne	80006af2 <_dtoa_r+0x88a>
80006aee:	30 1c       	mov	r12,1
80006af0:	c0 98       	rjmp	80006b02 <_dtoa_r+0x89a>
80006af2:	64 48       	ld.w	r8,r2[0x10]
80006af4:	2f c8       	sub	r8,-4
80006af6:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006afa:	e0 a0 08 01 	rcall	80007afc <__hi0bits>
80006afe:	f8 0c 11 20 	rsub	r12,r12,32
80006b02:	40 4b       	lddsp	r11,sp[0x10]
80006b04:	f8 0b 00 08 	add	r8,r12,r11
80006b08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006b0c:	c0 c0       	breq	80006b24 <_dtoa_r+0x8bc>
80006b0e:	f0 08 11 20 	rsub	r8,r8,32
80006b12:	58 48       	cp.w	r8,4
80006b14:	e0 8a 00 06 	brle	80006b20 <_dtoa_r+0x8b8>
80006b18:	20 48       	sub	r8,4
80006b1a:	10 0b       	add	r11,r8
80006b1c:	50 4b       	stdsp	sp[0x10],r11
80006b1e:	c0 78       	rjmp	80006b2c <_dtoa_r+0x8c4>
80006b20:	58 48       	cp.w	r8,4
80006b22:	c0 70       	breq	80006b30 <_dtoa_r+0x8c8>
80006b24:	40 4a       	lddsp	r10,sp[0x10]
80006b26:	2e 48       	sub	r8,-28
80006b28:	10 0a       	add	r10,r8
80006b2a:	50 4a       	stdsp	sp[0x10],r10
80006b2c:	10 00       	add	r0,r8
80006b2e:	10 05       	add	r5,r8
80006b30:	58 00       	cp.w	r0,0
80006b32:	e0 8a 00 08 	brle	80006b42 <_dtoa_r+0x8da>
80006b36:	06 9b       	mov	r11,r3
80006b38:	00 9a       	mov	r10,r0
80006b3a:	0e 9c       	mov	r12,r7
80006b3c:	e0 a0 09 7a 	rcall	80007e30 <__lshift>
80006b40:	18 93       	mov	r3,r12
80006b42:	40 49       	lddsp	r9,sp[0x10]
80006b44:	58 09       	cp.w	r9,0
80006b46:	e0 8a 00 08 	brle	80006b56 <_dtoa_r+0x8ee>
80006b4a:	04 9b       	mov	r11,r2
80006b4c:	12 9a       	mov	r10,r9
80006b4e:	0e 9c       	mov	r12,r7
80006b50:	e0 a0 09 70 	rcall	80007e30 <__lshift>
80006b54:	18 92       	mov	r2,r12
80006b56:	41 48       	lddsp	r8,sp[0x50]
80006b58:	58 08       	cp.w	r8,0
80006b5a:	c1 b0       	breq	80006b90 <_dtoa_r+0x928>
80006b5c:	04 9b       	mov	r11,r2
80006b5e:	06 9c       	mov	r12,r3
80006b60:	e0 a0 08 45 	rcall	80007bea <__mcmp>
80006b64:	c1 64       	brge	80006b90 <_dtoa_r+0x928>
80006b66:	06 9b       	mov	r11,r3
80006b68:	30 09       	mov	r9,0
80006b6a:	30 aa       	mov	r10,10
80006b6c:	0e 9c       	mov	r12,r7
80006b6e:	e0 a0 0a 2d 	rcall	80007fc8 <__multadd>
80006b72:	20 16       	sub	r6,1
80006b74:	18 93       	mov	r3,r12
80006b76:	40 dc       	lddsp	r12,sp[0x34]
80006b78:	58 0c       	cp.w	r12,0
80006b7a:	c0 31       	brne	80006b80 <_dtoa_r+0x918>
80006b7c:	40 91       	lddsp	r1,sp[0x24]
80006b7e:	c0 98       	rjmp	80006b90 <_dtoa_r+0x928>
80006b80:	08 9b       	mov	r11,r4
80006b82:	40 91       	lddsp	r1,sp[0x24]
80006b84:	30 09       	mov	r9,0
80006b86:	30 aa       	mov	r10,10
80006b88:	0e 9c       	mov	r12,r7
80006b8a:	e0 a0 0a 1f 	rcall	80007fc8 <__multadd>
80006b8e:	18 94       	mov	r4,r12
80006b90:	58 01       	cp.w	r1,0
80006b92:	5f a9       	srle	r9
80006b94:	40 cb       	lddsp	r11,sp[0x30]
80006b96:	58 2b       	cp.w	r11,2
80006b98:	5f 98       	srgt	r8
80006b9a:	f3 e8 00 08 	and	r8,r9,r8
80006b9e:	c2 50       	breq	80006be8 <_dtoa_r+0x980>
80006ba0:	58 01       	cp.w	r1,0
80006ba2:	c1 11       	brne	80006bc4 <_dtoa_r+0x95c>
80006ba4:	04 9b       	mov	r11,r2
80006ba6:	02 99       	mov	r9,r1
80006ba8:	30 5a       	mov	r10,5
80006baa:	0e 9c       	mov	r12,r7
80006bac:	e0 a0 0a 0e 	rcall	80007fc8 <__multadd>
80006bb0:	18 92       	mov	r2,r12
80006bb2:	18 9b       	mov	r11,r12
80006bb4:	06 9c       	mov	r12,r3
80006bb6:	e0 a0 08 1a 	rcall	80007bea <__mcmp>
80006bba:	e0 89 00 0f 	brgt	80006bd8 <_dtoa_r+0x970>
80006bbe:	c0 38       	rjmp	80006bc4 <_dtoa_r+0x95c>
80006bc0:	30 02       	mov	r2,0
80006bc2:	04 94       	mov	r4,r2
80006bc4:	40 ea       	lddsp	r10,sp[0x38]
80006bc6:	30 09       	mov	r9,0
80006bc8:	5c da       	com	r10
80006bca:	40 85       	lddsp	r5,sp[0x20]
80006bcc:	50 6a       	stdsp	sp[0x18],r10
80006bce:	50 49       	stdsp	sp[0x10],r9
80006bd0:	c0 f9       	rjmp	80006dee <_dtoa_r+0xb86>
80006bd2:	08 92       	mov	r2,r4
80006bd4:	40 66       	lddsp	r6,sp[0x18]
80006bd6:	04 94       	mov	r4,r2
80006bd8:	2f f6       	sub	r6,-1
80006bda:	50 66       	stdsp	sp[0x18],r6
80006bdc:	33 18       	mov	r8,49
80006bde:	40 85       	lddsp	r5,sp[0x20]
80006be0:	0a c8       	st.b	r5++,r8
80006be2:	30 08       	mov	r8,0
80006be4:	50 48       	stdsp	sp[0x10],r8
80006be6:	c0 49       	rjmp	80006dee <_dtoa_r+0xb86>
80006be8:	40 dc       	lddsp	r12,sp[0x34]
80006bea:	58 0c       	cp.w	r12,0
80006bec:	e0 80 00 b5 	breq	80006d56 <_dtoa_r+0xaee>
80006bf0:	58 05       	cp.w	r5,0
80006bf2:	e0 8a 00 08 	brle	80006c02 <_dtoa_r+0x99a>
80006bf6:	08 9b       	mov	r11,r4
80006bf8:	0a 9a       	mov	r10,r5
80006bfa:	0e 9c       	mov	r12,r7
80006bfc:	e0 a0 09 1a 	rcall	80007e30 <__lshift>
80006c00:	18 94       	mov	r4,r12
80006c02:	40 6b       	lddsp	r11,sp[0x18]
80006c04:	58 0b       	cp.w	r11,0
80006c06:	c0 31       	brne	80006c0c <_dtoa_r+0x9a4>
80006c08:	08 9c       	mov	r12,r4
80006c0a:	c1 38       	rjmp	80006c30 <_dtoa_r+0x9c8>
80006c0c:	68 1b       	ld.w	r11,r4[0x4]
80006c0e:	0e 9c       	mov	r12,r7
80006c10:	e0 a0 08 20 	rcall	80007c50 <_Balloc>
80006c14:	68 4a       	ld.w	r10,r4[0x10]
80006c16:	18 95       	mov	r5,r12
80006c18:	e8 cb ff f4 	sub	r11,r4,-12
80006c1c:	2f ea       	sub	r10,-2
80006c1e:	2f 4c       	sub	r12,-12
80006c20:	a3 6a       	lsl	r10,0x2
80006c22:	fe b0 e8 3e 	rcall	80003c9e <memcpy>
80006c26:	0a 9b       	mov	r11,r5
80006c28:	30 1a       	mov	r10,1
80006c2a:	0e 9c       	mov	r12,r7
80006c2c:	e0 a0 09 02 	rcall	80007e30 <__lshift>
80006c30:	50 44       	stdsp	sp[0x10],r4
80006c32:	40 3a       	lddsp	r10,sp[0xc]
80006c34:	30 19       	mov	r9,1
80006c36:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006c3a:	18 94       	mov	r4,r12
80006c3c:	50 da       	stdsp	sp[0x34],r10
80006c3e:	40 85       	lddsp	r5,sp[0x20]
80006c40:	50 99       	stdsp	sp[0x24],r9
80006c42:	50 26       	stdsp	sp[0x8],r6
80006c44:	50 e1       	stdsp	sp[0x38],r1
80006c46:	04 9b       	mov	r11,r2
80006c48:	06 9c       	mov	r12,r3
80006c4a:	fe b0 fa 7f 	rcall	80006148 <quorem>
80006c4e:	40 4b       	lddsp	r11,sp[0x10]
80006c50:	f8 c0 ff d0 	sub	r0,r12,-48
80006c54:	06 9c       	mov	r12,r3
80006c56:	e0 a0 07 ca 	rcall	80007bea <__mcmp>
80006c5a:	08 9a       	mov	r10,r4
80006c5c:	50 6c       	stdsp	sp[0x18],r12
80006c5e:	04 9b       	mov	r11,r2
80006c60:	0e 9c       	mov	r12,r7
80006c62:	e0 a0 08 7f 	rcall	80007d60 <__mdiff>
80006c66:	18 91       	mov	r1,r12
80006c68:	78 38       	ld.w	r8,r12[0xc]
80006c6a:	58 08       	cp.w	r8,0
80006c6c:	c0 30       	breq	80006c72 <_dtoa_r+0xa0a>
80006c6e:	30 16       	mov	r6,1
80006c70:	c0 68       	rjmp	80006c7c <_dtoa_r+0xa14>
80006c72:	18 9b       	mov	r11,r12
80006c74:	06 9c       	mov	r12,r3
80006c76:	e0 a0 07 ba 	rcall	80007bea <__mcmp>
80006c7a:	18 96       	mov	r6,r12
80006c7c:	0e 9c       	mov	r12,r7
80006c7e:	02 9b       	mov	r11,r1
80006c80:	e0 a0 07 ce 	rcall	80007c1c <_Bfree>
80006c84:	40 cc       	lddsp	r12,sp[0x30]
80006c86:	ed ec 10 08 	or	r8,r6,r12
80006c8a:	c0 d1       	brne	80006ca4 <_dtoa_r+0xa3c>
80006c8c:	40 db       	lddsp	r11,sp[0x34]
80006c8e:	58 0b       	cp.w	r11,0
80006c90:	c0 a1       	brne	80006ca4 <_dtoa_r+0xa3c>
80006c92:	40 26       	lddsp	r6,sp[0x8]
80006c94:	e0 40 00 39 	cp.w	r0,57
80006c98:	c3 00       	breq	80006cf8 <_dtoa_r+0xa90>
80006c9a:	40 6a       	lddsp	r10,sp[0x18]
80006c9c:	58 0a       	cp.w	r10,0
80006c9e:	e0 89 00 24 	brgt	80006ce6 <_dtoa_r+0xa7e>
80006ca2:	c2 f8       	rjmp	80006d00 <_dtoa_r+0xa98>
80006ca4:	40 69       	lddsp	r9,sp[0x18]
80006ca6:	58 09       	cp.w	r9,0
80006ca8:	c0 85       	brlt	80006cb8 <_dtoa_r+0xa50>
80006caa:	12 98       	mov	r8,r9
80006cac:	40 cc       	lddsp	r12,sp[0x30]
80006cae:	18 48       	or	r8,r12
80006cb0:	c1 d1       	brne	80006cea <_dtoa_r+0xa82>
80006cb2:	40 db       	lddsp	r11,sp[0x34]
80006cb4:	58 0b       	cp.w	r11,0
80006cb6:	c1 a1       	brne	80006cea <_dtoa_r+0xa82>
80006cb8:	0c 99       	mov	r9,r6
80006cba:	40 26       	lddsp	r6,sp[0x8]
80006cbc:	58 09       	cp.w	r9,0
80006cbe:	e0 8a 00 21 	brle	80006d00 <_dtoa_r+0xa98>
80006cc2:	06 9b       	mov	r11,r3
80006cc4:	30 1a       	mov	r10,1
80006cc6:	0e 9c       	mov	r12,r7
80006cc8:	e0 a0 08 b4 	rcall	80007e30 <__lshift>
80006ccc:	04 9b       	mov	r11,r2
80006cce:	18 93       	mov	r3,r12
80006cd0:	e0 a0 07 8d 	rcall	80007bea <__mcmp>
80006cd4:	e0 89 00 06 	brgt	80006ce0 <_dtoa_r+0xa78>
80006cd8:	c1 41       	brne	80006d00 <_dtoa_r+0xa98>
80006cda:	ed b0 00 00 	bld	r0,0x0
80006cde:	c1 11       	brne	80006d00 <_dtoa_r+0xa98>
80006ce0:	e0 40 00 39 	cp.w	r0,57
80006ce4:	c0 a0       	breq	80006cf8 <_dtoa_r+0xa90>
80006ce6:	2f f0       	sub	r0,-1
80006ce8:	c0 c8       	rjmp	80006d00 <_dtoa_r+0xa98>
80006cea:	58 06       	cp.w	r6,0
80006cec:	e0 8a 00 0c 	brle	80006d04 <_dtoa_r+0xa9c>
80006cf0:	40 26       	lddsp	r6,sp[0x8]
80006cf2:	e0 40 00 39 	cp.w	r0,57
80006cf6:	c0 41       	brne	80006cfe <_dtoa_r+0xa96>
80006cf8:	33 98       	mov	r8,57
80006cfa:	0a c8       	st.b	r5++,r8
80006cfc:	c6 78       	rjmp	80006dca <_dtoa_r+0xb62>
80006cfe:	2f f0       	sub	r0,-1
80006d00:	0a c0       	st.b	r5++,r0
80006d02:	c7 58       	rjmp	80006dec <_dtoa_r+0xb84>
80006d04:	0a c0       	st.b	r5++,r0
80006d06:	40 9a       	lddsp	r10,sp[0x24]
80006d08:	40 e9       	lddsp	r9,sp[0x38]
80006d0a:	12 3a       	cp.w	r10,r9
80006d0c:	c4 30       	breq	80006d92 <_dtoa_r+0xb2a>
80006d0e:	06 9b       	mov	r11,r3
80006d10:	30 09       	mov	r9,0
80006d12:	30 aa       	mov	r10,10
80006d14:	0e 9c       	mov	r12,r7
80006d16:	e0 a0 09 59 	rcall	80007fc8 <__multadd>
80006d1a:	40 48       	lddsp	r8,sp[0x10]
80006d1c:	18 93       	mov	r3,r12
80006d1e:	08 38       	cp.w	r8,r4
80006d20:	c0 91       	brne	80006d32 <_dtoa_r+0xaca>
80006d22:	10 9b       	mov	r11,r8
80006d24:	30 09       	mov	r9,0
80006d26:	30 aa       	mov	r10,10
80006d28:	0e 9c       	mov	r12,r7
80006d2a:	e0 a0 09 4f 	rcall	80007fc8 <__multadd>
80006d2e:	50 4c       	stdsp	sp[0x10],r12
80006d30:	c0 e8       	rjmp	80006d4c <_dtoa_r+0xae4>
80006d32:	40 4b       	lddsp	r11,sp[0x10]
80006d34:	30 09       	mov	r9,0
80006d36:	30 aa       	mov	r10,10
80006d38:	0e 9c       	mov	r12,r7
80006d3a:	e0 a0 09 47 	rcall	80007fc8 <__multadd>
80006d3e:	08 9b       	mov	r11,r4
80006d40:	50 4c       	stdsp	sp[0x10],r12
80006d42:	30 09       	mov	r9,0
80006d44:	30 aa       	mov	r10,10
80006d46:	0e 9c       	mov	r12,r7
80006d48:	e0 a0 09 40 	rcall	80007fc8 <__multadd>
80006d4c:	18 94       	mov	r4,r12
80006d4e:	40 9c       	lddsp	r12,sp[0x24]
80006d50:	2f fc       	sub	r12,-1
80006d52:	50 9c       	stdsp	sp[0x24],r12
80006d54:	c7 9b       	rjmp	80006c46 <_dtoa_r+0x9de>
80006d56:	30 18       	mov	r8,1
80006d58:	06 90       	mov	r0,r3
80006d5a:	40 85       	lddsp	r5,sp[0x20]
80006d5c:	08 93       	mov	r3,r4
80006d5e:	0c 94       	mov	r4,r6
80006d60:	10 96       	mov	r6,r8
80006d62:	04 9b       	mov	r11,r2
80006d64:	00 9c       	mov	r12,r0
80006d66:	fe b0 f9 f1 	rcall	80006148 <quorem>
80006d6a:	2d 0c       	sub	r12,-48
80006d6c:	0a cc       	st.b	r5++,r12
80006d6e:	02 36       	cp.w	r6,r1
80006d70:	c0 a4       	brge	80006d84 <_dtoa_r+0xb1c>
80006d72:	00 9b       	mov	r11,r0
80006d74:	30 09       	mov	r9,0
80006d76:	30 aa       	mov	r10,10
80006d78:	0e 9c       	mov	r12,r7
80006d7a:	2f f6       	sub	r6,-1
80006d7c:	e0 a0 09 26 	rcall	80007fc8 <__multadd>
80006d80:	18 90       	mov	r0,r12
80006d82:	cf 0b       	rjmp	80006d62 <_dtoa_r+0xafa>
80006d84:	08 96       	mov	r6,r4
80006d86:	30 0b       	mov	r11,0
80006d88:	06 94       	mov	r4,r3
80006d8a:	50 4b       	stdsp	sp[0x10],r11
80006d8c:	00 93       	mov	r3,r0
80006d8e:	18 90       	mov	r0,r12
80006d90:	c0 28       	rjmp	80006d94 <_dtoa_r+0xb2c>
80006d92:	40 26       	lddsp	r6,sp[0x8]
80006d94:	06 9b       	mov	r11,r3
80006d96:	30 1a       	mov	r10,1
80006d98:	0e 9c       	mov	r12,r7
80006d9a:	e0 a0 08 4b 	rcall	80007e30 <__lshift>
80006d9e:	04 9b       	mov	r11,r2
80006da0:	18 93       	mov	r3,r12
80006da2:	e0 a0 07 24 	rcall	80007bea <__mcmp>
80006da6:	e0 89 00 12 	brgt	80006dca <_dtoa_r+0xb62>
80006daa:	c1 b1       	brne	80006de0 <_dtoa_r+0xb78>
80006dac:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006db0:	c0 d1       	brne	80006dca <_dtoa_r+0xb62>
80006db2:	c1 78       	rjmp	80006de0 <_dtoa_r+0xb78>
80006db4:	40 89       	lddsp	r9,sp[0x20]
80006db6:	12 38       	cp.w	r8,r9
80006db8:	c0 30       	breq	80006dbe <_dtoa_r+0xb56>
80006dba:	10 95       	mov	r5,r8
80006dbc:	c0 88       	rjmp	80006dcc <_dtoa_r+0xb64>
80006dbe:	2f f6       	sub	r6,-1
80006dc0:	50 66       	stdsp	sp[0x18],r6
80006dc2:	33 18       	mov	r8,49
80006dc4:	40 8c       	lddsp	r12,sp[0x20]
80006dc6:	b8 88       	st.b	r12[0x0],r8
80006dc8:	c1 38       	rjmp	80006dee <_dtoa_r+0xb86>
80006dca:	33 9a       	mov	r10,57
80006dcc:	0a 98       	mov	r8,r5
80006dce:	11 79       	ld.ub	r9,--r8
80006dd0:	f4 09 18 00 	cp.b	r9,r10
80006dd4:	cf 00       	breq	80006db4 <_dtoa_r+0xb4c>
80006dd6:	2f f9       	sub	r9,-1
80006dd8:	b0 89       	st.b	r8[0x0],r9
80006dda:	c0 98       	rjmp	80006dec <_dtoa_r+0xb84>
80006ddc:	10 95       	mov	r5,r8
80006dde:	c0 28       	rjmp	80006de2 <_dtoa_r+0xb7a>
80006de0:	33 09       	mov	r9,48
80006de2:	0a 98       	mov	r8,r5
80006de4:	11 7a       	ld.ub	r10,--r8
80006de6:	f2 0a 18 00 	cp.b	r10,r9
80006dea:	cf 90       	breq	80006ddc <_dtoa_r+0xb74>
80006dec:	50 66       	stdsp	sp[0x18],r6
80006dee:	04 9b       	mov	r11,r2
80006df0:	0e 9c       	mov	r12,r7
80006df2:	e0 a0 07 15 	rcall	80007c1c <_Bfree>
80006df6:	58 04       	cp.w	r4,0
80006df8:	c1 20       	breq	80006e1c <_dtoa_r+0xbb4>
80006dfa:	40 4b       	lddsp	r11,sp[0x10]
80006dfc:	08 3b       	cp.w	r11,r4
80006dfe:	5f 19       	srne	r9
80006e00:	58 0b       	cp.w	r11,0
80006e02:	5f 18       	srne	r8
80006e04:	f3 e8 00 08 	and	r8,r9,r8
80006e08:	c0 40       	breq	80006e10 <_dtoa_r+0xba8>
80006e0a:	0e 9c       	mov	r12,r7
80006e0c:	e0 a0 07 08 	rcall	80007c1c <_Bfree>
80006e10:	08 9b       	mov	r11,r4
80006e12:	0e 9c       	mov	r12,r7
80006e14:	e0 a0 07 04 	rcall	80007c1c <_Bfree>
80006e18:	c0 28       	rjmp	80006e1c <_dtoa_r+0xbb4>
80006e1a:	50 66       	stdsp	sp[0x18],r6
80006e1c:	0e 9c       	mov	r12,r7
80006e1e:	06 9b       	mov	r11,r3
80006e20:	e0 a0 06 fe 	rcall	80007c1c <_Bfree>
80006e24:	30 08       	mov	r8,0
80006e26:	aa 88       	st.b	r5[0x0],r8
80006e28:	40 68       	lddsp	r8,sp[0x18]
80006e2a:	41 5a       	lddsp	r10,sp[0x54]
80006e2c:	2f f8       	sub	r8,-1
80006e2e:	41 29       	lddsp	r9,sp[0x48]
80006e30:	95 08       	st.w	r10[0x0],r8
80006e32:	40 8c       	lddsp	r12,sp[0x20]
80006e34:	58 09       	cp.w	r9,0
80006e36:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006e3a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006e3e:	2e 6d       	sub	sp,-104
80006e40:	d8 32       	popm	r0-r7,pc
80006e42:	d7 03       	nop

80006e44 <_fflush_r>:
80006e44:	d4 21       	pushm	r4-r7,lr
80006e46:	16 97       	mov	r7,r11
80006e48:	18 96       	mov	r6,r12
80006e4a:	76 48       	ld.w	r8,r11[0x10]
80006e4c:	58 08       	cp.w	r8,0
80006e4e:	c7 f0       	breq	80006f4c <_fflush_r+0x108>
80006e50:	58 0c       	cp.w	r12,0
80006e52:	c0 50       	breq	80006e5c <_fflush_r+0x18>
80006e54:	78 68       	ld.w	r8,r12[0x18]
80006e56:	58 08       	cp.w	r8,0
80006e58:	c0 21       	brne	80006e5c <_fflush_r+0x18>
80006e5a:	cc dc       	rcall	80006ff4 <__sinit>
80006e5c:	fe c8 d2 60 	sub	r8,pc,-11680
80006e60:	10 37       	cp.w	r7,r8
80006e62:	c0 31       	brne	80006e68 <_fflush_r+0x24>
80006e64:	6c 07       	ld.w	r7,r6[0x0]
80006e66:	c0 c8       	rjmp	80006e7e <_fflush_r+0x3a>
80006e68:	fe c8 d2 4c 	sub	r8,pc,-11700
80006e6c:	10 37       	cp.w	r7,r8
80006e6e:	c0 31       	brne	80006e74 <_fflush_r+0x30>
80006e70:	6c 17       	ld.w	r7,r6[0x4]
80006e72:	c0 68       	rjmp	80006e7e <_fflush_r+0x3a>
80006e74:	fe c8 d2 38 	sub	r8,pc,-11720
80006e78:	10 37       	cp.w	r7,r8
80006e7a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006e7e:	8e 6a       	ld.sh	r10,r7[0xc]
80006e80:	14 98       	mov	r8,r10
80006e82:	ed ba 00 03 	bld	r10,0x3
80006e86:	c4 20       	breq	80006f0a <_fflush_r+0xc6>
80006e88:	ab ba       	sbr	r10,0xb
80006e8a:	ae 6a       	st.h	r7[0xc],r10
80006e8c:	6e 18       	ld.w	r8,r7[0x4]
80006e8e:	58 08       	cp.w	r8,0
80006e90:	e0 89 00 06 	brgt	80006e9c <_fflush_r+0x58>
80006e94:	6f 08       	ld.w	r8,r7[0x40]
80006e96:	58 08       	cp.w	r8,0
80006e98:	e0 8a 00 5a 	brle	80006f4c <_fflush_r+0x108>
80006e9c:	6e b8       	ld.w	r8,r7[0x2c]
80006e9e:	58 08       	cp.w	r8,0
80006ea0:	c5 60       	breq	80006f4c <_fflush_r+0x108>
80006ea2:	e2 1a 10 00 	andl	r10,0x1000,COH
80006ea6:	c0 30       	breq	80006eac <_fflush_r+0x68>
80006ea8:	6f 55       	ld.w	r5,r7[0x54]
80006eaa:	c0 f8       	rjmp	80006ec8 <_fflush_r+0x84>
80006eac:	30 19       	mov	r9,1
80006eae:	6e 8b       	ld.w	r11,r7[0x20]
80006eb0:	0c 9c       	mov	r12,r6
80006eb2:	5d 18       	icall	r8
80006eb4:	18 95       	mov	r5,r12
80006eb6:	5b fc       	cp.w	r12,-1
80006eb8:	c0 81       	brne	80006ec8 <_fflush_r+0x84>
80006eba:	6c 38       	ld.w	r8,r6[0xc]
80006ebc:	59 d8       	cp.w	r8,29
80006ebe:	c4 70       	breq	80006f4c <_fflush_r+0x108>
80006ec0:	8e 68       	ld.sh	r8,r7[0xc]
80006ec2:	a7 a8       	sbr	r8,0x6
80006ec4:	ae 68       	st.h	r7[0xc],r8
80006ec6:	d8 22       	popm	r4-r7,pc
80006ec8:	8e 68       	ld.sh	r8,r7[0xc]
80006eca:	ed b8 00 02 	bld	r8,0x2
80006ece:	c0 91       	brne	80006ee0 <_fflush_r+0x9c>
80006ed0:	6e 18       	ld.w	r8,r7[0x4]
80006ed2:	10 15       	sub	r5,r8
80006ed4:	6e d8       	ld.w	r8,r7[0x34]
80006ed6:	58 08       	cp.w	r8,0
80006ed8:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006edc:	eb d8 e1 15 	subne	r5,r5,r8
80006ee0:	6e b8       	ld.w	r8,r7[0x2c]
80006ee2:	0c 9c       	mov	r12,r6
80006ee4:	30 09       	mov	r9,0
80006ee6:	0a 9a       	mov	r10,r5
80006ee8:	6e 8b       	ld.w	r11,r7[0x20]
80006eea:	5d 18       	icall	r8
80006eec:	8e 68       	ld.sh	r8,r7[0xc]
80006eee:	0a 3c       	cp.w	r12,r5
80006ef0:	c2 61       	brne	80006f3c <_fflush_r+0xf8>
80006ef2:	ab d8       	cbr	r8,0xb
80006ef4:	30 0c       	mov	r12,0
80006ef6:	6e 49       	ld.w	r9,r7[0x10]
80006ef8:	ae 68       	st.h	r7[0xc],r8
80006efa:	8f 1c       	st.w	r7[0x4],r12
80006efc:	8f 09       	st.w	r7[0x0],r9
80006efe:	ed b8 00 0c 	bld	r8,0xc
80006f02:	c2 51       	brne	80006f4c <_fflush_r+0x108>
80006f04:	ef 45 00 54 	st.w	r7[84],r5
80006f08:	d8 22       	popm	r4-r7,pc
80006f0a:	6e 45       	ld.w	r5,r7[0x10]
80006f0c:	58 05       	cp.w	r5,0
80006f0e:	c1 f0       	breq	80006f4c <_fflush_r+0x108>
80006f10:	6e 04       	ld.w	r4,r7[0x0]
80006f12:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006f16:	8f 05       	st.w	r7[0x0],r5
80006f18:	f9 b8 01 00 	movne	r8,0
80006f1c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006f20:	0a 14       	sub	r4,r5
80006f22:	8f 28       	st.w	r7[0x8],r8
80006f24:	c1 18       	rjmp	80006f46 <_fflush_r+0x102>
80006f26:	08 99       	mov	r9,r4
80006f28:	0a 9a       	mov	r10,r5
80006f2a:	6e a8       	ld.w	r8,r7[0x28]
80006f2c:	6e 8b       	ld.w	r11,r7[0x20]
80006f2e:	0c 9c       	mov	r12,r6
80006f30:	5d 18       	icall	r8
80006f32:	18 14       	sub	r4,r12
80006f34:	58 0c       	cp.w	r12,0
80006f36:	e0 89 00 07 	brgt	80006f44 <_fflush_r+0x100>
80006f3a:	8e 68       	ld.sh	r8,r7[0xc]
80006f3c:	a7 a8       	sbr	r8,0x6
80006f3e:	3f fc       	mov	r12,-1
80006f40:	ae 68       	st.h	r7[0xc],r8
80006f42:	d8 22       	popm	r4-r7,pc
80006f44:	18 05       	add	r5,r12
80006f46:	58 04       	cp.w	r4,0
80006f48:	fe 99 ff ef 	brgt	80006f26 <_fflush_r+0xe2>
80006f4c:	d8 2a       	popm	r4-r7,pc,r12=0
80006f4e:	d7 03       	nop

80006f50 <__sfp_lock_acquire>:
80006f50:	5e fc       	retal	r12

80006f52 <__sfp_lock_release>:
80006f52:	5e fc       	retal	r12

80006f54 <_cleanup_r>:
80006f54:	d4 01       	pushm	lr
80006f56:	fe cb e8 7a 	sub	r11,pc,-6022
80006f5a:	e0 a0 02 fd 	rcall	80007554 <_fwalk>
80006f5e:	d8 02       	popm	pc

80006f60 <__sfmoreglue>:
80006f60:	d4 21       	pushm	r4-r7,lr
80006f62:	16 95       	mov	r5,r11
80006f64:	f6 06 10 5c 	mul	r6,r11,92
80006f68:	ec cb ff f4 	sub	r11,r6,-12
80006f6c:	e0 a0 03 84 	rcall	80007674 <_malloc_r>
80006f70:	18 97       	mov	r7,r12
80006f72:	c0 90       	breq	80006f84 <__sfmoreglue+0x24>
80006f74:	99 15       	st.w	r12[0x4],r5
80006f76:	30 0b       	mov	r11,0
80006f78:	2f 4c       	sub	r12,-12
80006f7a:	0c 9a       	mov	r10,r6
80006f7c:	8f 2c       	st.w	r7[0x8],r12
80006f7e:	8f 0b       	st.w	r7[0x0],r11
80006f80:	fe b0 e7 33 	rcall	80003de6 <memset>
80006f84:	0e 9c       	mov	r12,r7
80006f86:	d8 22       	popm	r4-r7,pc

80006f88 <__sfp>:
80006f88:	d4 21       	pushm	r4-r7,lr
80006f8a:	fe c8 d3 2a 	sub	r8,pc,-11478
80006f8e:	18 96       	mov	r6,r12
80006f90:	70 07       	ld.w	r7,r8[0x0]
80006f92:	6e 68       	ld.w	r8,r7[0x18]
80006f94:	58 08       	cp.w	r8,0
80006f96:	c0 31       	brne	80006f9c <__sfp+0x14>
80006f98:	0e 9c       	mov	r12,r7
80006f9a:	c2 dc       	rcall	80006ff4 <__sinit>
80006f9c:	ee c7 ff 28 	sub	r7,r7,-216
80006fa0:	30 05       	mov	r5,0
80006fa2:	6e 2c       	ld.w	r12,r7[0x8]
80006fa4:	6e 18       	ld.w	r8,r7[0x4]
80006fa6:	c0 68       	rjmp	80006fb2 <__sfp+0x2a>
80006fa8:	98 69       	ld.sh	r9,r12[0xc]
80006faa:	ea 09 19 00 	cp.h	r9,r5
80006fae:	c1 10       	breq	80006fd0 <__sfp+0x48>
80006fb0:	2a 4c       	sub	r12,-92
80006fb2:	20 18       	sub	r8,1
80006fb4:	cf a7       	brpl	80006fa8 <__sfp+0x20>
80006fb6:	6e 08       	ld.w	r8,r7[0x0]
80006fb8:	58 08       	cp.w	r8,0
80006fba:	c0 61       	brne	80006fc6 <__sfp+0x3e>
80006fbc:	30 4b       	mov	r11,4
80006fbe:	0c 9c       	mov	r12,r6
80006fc0:	cd 0f       	rcall	80006f60 <__sfmoreglue>
80006fc2:	8f 0c       	st.w	r7[0x0],r12
80006fc4:	c0 30       	breq	80006fca <__sfp+0x42>
80006fc6:	6e 07       	ld.w	r7,r7[0x0]
80006fc8:	ce db       	rjmp	80006fa2 <__sfp+0x1a>
80006fca:	30 c8       	mov	r8,12
80006fcc:	8d 38       	st.w	r6[0xc],r8
80006fce:	d8 22       	popm	r4-r7,pc
80006fd0:	30 08       	mov	r8,0
80006fd2:	f9 48 00 4c 	st.w	r12[76],r8
80006fd6:	99 08       	st.w	r12[0x0],r8
80006fd8:	99 28       	st.w	r12[0x8],r8
80006fda:	99 18       	st.w	r12[0x4],r8
80006fdc:	99 48       	st.w	r12[0x10],r8
80006fde:	99 58       	st.w	r12[0x14],r8
80006fe0:	99 68       	st.w	r12[0x18],r8
80006fe2:	99 d8       	st.w	r12[0x34],r8
80006fe4:	99 e8       	st.w	r12[0x38],r8
80006fe6:	f9 48 00 48 	st.w	r12[72],r8
80006fea:	3f f8       	mov	r8,-1
80006fec:	b8 78       	st.h	r12[0xe],r8
80006fee:	30 18       	mov	r8,1
80006ff0:	b8 68       	st.h	r12[0xc],r8
80006ff2:	d8 22       	popm	r4-r7,pc

80006ff4 <__sinit>:
80006ff4:	d4 21       	pushm	r4-r7,lr
80006ff6:	18 96       	mov	r6,r12
80006ff8:	78 67       	ld.w	r7,r12[0x18]
80006ffa:	58 07       	cp.w	r7,0
80006ffc:	c4 91       	brne	8000708e <__sinit+0x9a>
80006ffe:	fe c8 00 aa 	sub	r8,pc,170
80007002:	30 15       	mov	r5,1
80007004:	99 a8       	st.w	r12[0x28],r8
80007006:	f9 47 00 d8 	st.w	r12[216],r7
8000700a:	f9 47 00 dc 	st.w	r12[220],r7
8000700e:	f9 47 00 e0 	st.w	r12[224],r7
80007012:	99 65       	st.w	r12[0x18],r5
80007014:	cb af       	rcall	80006f88 <__sfp>
80007016:	8d 0c       	st.w	r6[0x0],r12
80007018:	0c 9c       	mov	r12,r6
8000701a:	cb 7f       	rcall	80006f88 <__sfp>
8000701c:	8d 1c       	st.w	r6[0x4],r12
8000701e:	0c 9c       	mov	r12,r6
80007020:	cb 4f       	rcall	80006f88 <__sfp>
80007022:	6c 09       	ld.w	r9,r6[0x0]
80007024:	30 48       	mov	r8,4
80007026:	93 07       	st.w	r9[0x0],r7
80007028:	b2 68       	st.h	r9[0xc],r8
8000702a:	93 17       	st.w	r9[0x4],r7
8000702c:	93 27       	st.w	r9[0x8],r7
8000702e:	6c 18       	ld.w	r8,r6[0x4]
80007030:	b2 77       	st.h	r9[0xe],r7
80007032:	93 47       	st.w	r9[0x10],r7
80007034:	93 57       	st.w	r9[0x14],r7
80007036:	93 67       	st.w	r9[0x18],r7
80007038:	93 89       	st.w	r9[0x20],r9
8000703a:	91 07       	st.w	r8[0x0],r7
8000703c:	91 17       	st.w	r8[0x4],r7
8000703e:	91 27       	st.w	r8[0x8],r7
80007040:	fe ce eb f4 	sub	lr,pc,-5132
80007044:	fe cb ec 24 	sub	r11,pc,-5084
80007048:	93 9e       	st.w	r9[0x24],lr
8000704a:	93 ab       	st.w	r9[0x28],r11
8000704c:	fe ca ec 4c 	sub	r10,pc,-5044
80007050:	fe c4 ec 58 	sub	r4,pc,-5032
80007054:	93 ba       	st.w	r9[0x2c],r10
80007056:	93 c4       	st.w	r9[0x30],r4
80007058:	30 99       	mov	r9,9
8000705a:	b0 69       	st.h	r8[0xc],r9
8000705c:	b0 75       	st.h	r8[0xe],r5
8000705e:	91 c4       	st.w	r8[0x30],r4
80007060:	91 47       	st.w	r8[0x10],r7
80007062:	91 57       	st.w	r8[0x14],r7
80007064:	91 67       	st.w	r8[0x18],r7
80007066:	91 88       	st.w	r8[0x20],r8
80007068:	91 9e       	st.w	r8[0x24],lr
8000706a:	91 ab       	st.w	r8[0x28],r11
8000706c:	91 ba       	st.w	r8[0x2c],r10
8000706e:	8d 2c       	st.w	r6[0x8],r12
80007070:	31 28       	mov	r8,18
80007072:	99 07       	st.w	r12[0x0],r7
80007074:	b8 68       	st.h	r12[0xc],r8
80007076:	99 17       	st.w	r12[0x4],r7
80007078:	99 27       	st.w	r12[0x8],r7
8000707a:	30 28       	mov	r8,2
8000707c:	b8 78       	st.h	r12[0xe],r8
8000707e:	99 c4       	st.w	r12[0x30],r4
80007080:	99 67       	st.w	r12[0x18],r7
80007082:	99 9e       	st.w	r12[0x24],lr
80007084:	99 ab       	st.w	r12[0x28],r11
80007086:	99 ba       	st.w	r12[0x2c],r10
80007088:	99 47       	st.w	r12[0x10],r7
8000708a:	99 57       	st.w	r12[0x14],r7
8000708c:	99 8c       	st.w	r12[0x20],r12
8000708e:	d8 22       	popm	r4-r7,pc

80007090 <_malloc_trim_r>:
80007090:	d4 21       	pushm	r4-r7,lr
80007092:	16 95       	mov	r5,r11
80007094:	18 97       	mov	r7,r12
80007096:	e0 a0 05 31 	rcall	80007af8 <__malloc_lock>
8000709a:	e0 64 01 1c 	mov	r4,284
8000709e:	68 28       	ld.w	r8,r4[0x8]
800070a0:	70 16       	ld.w	r6,r8[0x4]
800070a2:	e0 16 ff fc 	andl	r6,0xfffc
800070a6:	ec c8 ff 91 	sub	r8,r6,-111
800070aa:	f0 05 01 05 	sub	r5,r8,r5
800070ae:	e0 15 ff 80 	andl	r5,0xff80
800070b2:	ea c5 00 80 	sub	r5,r5,128
800070b6:	e0 45 00 7f 	cp.w	r5,127
800070ba:	e0 8a 00 25 	brle	80007104 <_malloc_trim_r+0x74>
800070be:	30 0b       	mov	r11,0
800070c0:	0e 9c       	mov	r12,r7
800070c2:	e0 a0 09 8b 	rcall	800083d8 <_sbrk_r>
800070c6:	68 28       	ld.w	r8,r4[0x8]
800070c8:	0c 08       	add	r8,r6
800070ca:	10 3c       	cp.w	r12,r8
800070cc:	c1 c1       	brne	80007104 <_malloc_trim_r+0x74>
800070ce:	ea 0b 11 00 	rsub	r11,r5,0
800070d2:	0e 9c       	mov	r12,r7
800070d4:	e0 a0 09 82 	rcall	800083d8 <_sbrk_r>
800070d8:	5b fc       	cp.w	r12,-1
800070da:	c1 91       	brne	8000710c <_malloc_trim_r+0x7c>
800070dc:	30 0b       	mov	r11,0
800070de:	0e 9c       	mov	r12,r7
800070e0:	e0 a0 09 7c 	rcall	800083d8 <_sbrk_r>
800070e4:	68 28       	ld.w	r8,r4[0x8]
800070e6:	f8 08 01 09 	sub	r9,r12,r8
800070ea:	58 f9       	cp.w	r9,15
800070ec:	e0 8a 00 0c 	brle	80007104 <_malloc_trim_r+0x74>
800070f0:	a1 a9       	sbr	r9,0x0
800070f2:	91 19       	st.w	r8[0x4],r9
800070f4:	e0 68 05 28 	mov	r8,1320
800070f8:	70 09       	ld.w	r9,r8[0x0]
800070fa:	e0 68 07 14 	mov	r8,1812
800070fe:	f8 09 01 09 	sub	r9,r12,r9
80007102:	91 09       	st.w	r8[0x0],r9
80007104:	0e 9c       	mov	r12,r7
80007106:	e0 a0 04 fa 	rcall	80007afa <__malloc_unlock>
8000710a:	d8 2a       	popm	r4-r7,pc,r12=0
8000710c:	68 28       	ld.w	r8,r4[0x8]
8000710e:	0a 16       	sub	r6,r5
80007110:	a1 a6       	sbr	r6,0x0
80007112:	91 16       	st.w	r8[0x4],r6
80007114:	e0 68 07 14 	mov	r8,1812
80007118:	70 09       	ld.w	r9,r8[0x0]
8000711a:	0a 19       	sub	r9,r5
8000711c:	0e 9c       	mov	r12,r7
8000711e:	91 09       	st.w	r8[0x0],r9
80007120:	e0 a0 04 ed 	rcall	80007afa <__malloc_unlock>
80007124:	da 2a       	popm	r4-r7,pc,r12=1
80007126:	d7 03       	nop

80007128 <_free_r>:
80007128:	d4 21       	pushm	r4-r7,lr
8000712a:	16 96       	mov	r6,r11
8000712c:	18 97       	mov	r7,r12
8000712e:	58 0b       	cp.w	r11,0
80007130:	e0 80 00 c0 	breq	800072b0 <_free_r+0x188>
80007134:	e0 a0 04 e2 	rcall	80007af8 <__malloc_lock>
80007138:	20 86       	sub	r6,8
8000713a:	e0 6a 01 1c 	mov	r10,284
8000713e:	6c 18       	ld.w	r8,r6[0x4]
80007140:	74 2e       	ld.w	lr,r10[0x8]
80007142:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80007146:	a1 c8       	cbr	r8,0x0
80007148:	ec 08 00 09 	add	r9,r6,r8
8000714c:	72 1b       	ld.w	r11,r9[0x4]
8000714e:	e0 1b ff fc 	andl	r11,0xfffc
80007152:	1c 39       	cp.w	r9,lr
80007154:	c1 e1       	brne	80007190 <_free_r+0x68>
80007156:	f6 08 00 08 	add	r8,r11,r8
8000715a:	58 0c       	cp.w	r12,0
8000715c:	c0 81       	brne	8000716c <_free_r+0x44>
8000715e:	6c 09       	ld.w	r9,r6[0x0]
80007160:	12 16       	sub	r6,r9
80007162:	12 08       	add	r8,r9
80007164:	6c 3b       	ld.w	r11,r6[0xc]
80007166:	6c 29       	ld.w	r9,r6[0x8]
80007168:	97 29       	st.w	r11[0x8],r9
8000716a:	93 3b       	st.w	r9[0xc],r11
8000716c:	10 99       	mov	r9,r8
8000716e:	95 26       	st.w	r10[0x8],r6
80007170:	a1 a9       	sbr	r9,0x0
80007172:	8d 19       	st.w	r6[0x4],r9
80007174:	e0 69 05 24 	mov	r9,1316
80007178:	72 09       	ld.w	r9,r9[0x0]
8000717a:	12 38       	cp.w	r8,r9
8000717c:	c0 63       	brcs	80007188 <_free_r+0x60>
8000717e:	e0 68 07 10 	mov	r8,1808
80007182:	0e 9c       	mov	r12,r7
80007184:	70 0b       	ld.w	r11,r8[0x0]
80007186:	c8 5f       	rcall	80007090 <_malloc_trim_r>
80007188:	0e 9c       	mov	r12,r7
8000718a:	e0 a0 04 b8 	rcall	80007afa <__malloc_unlock>
8000718e:	d8 22       	popm	r4-r7,pc
80007190:	93 1b       	st.w	r9[0x4],r11
80007192:	58 0c       	cp.w	r12,0
80007194:	c0 30       	breq	8000719a <_free_r+0x72>
80007196:	30 0c       	mov	r12,0
80007198:	c1 08       	rjmp	800071b8 <_free_r+0x90>
8000719a:	6c 0e       	ld.w	lr,r6[0x0]
8000719c:	f4 c5 ff f8 	sub	r5,r10,-8
800071a0:	1c 16       	sub	r6,lr
800071a2:	1c 08       	add	r8,lr
800071a4:	6c 2e       	ld.w	lr,r6[0x8]
800071a6:	0a 3e       	cp.w	lr,r5
800071a8:	f9 bc 00 01 	moveq	r12,1
800071ac:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800071b0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800071b4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800071b8:	f2 0b 00 0e 	add	lr,r9,r11
800071bc:	7c 1e       	ld.w	lr,lr[0x4]
800071be:	ed be 00 00 	bld	lr,0x0
800071c2:	c1 40       	breq	800071ea <_free_r+0xc2>
800071c4:	16 08       	add	r8,r11
800071c6:	58 0c       	cp.w	r12,0
800071c8:	c0 d1       	brne	800071e2 <_free_r+0xba>
800071ca:	e0 6e 01 1c 	mov	lr,284
800071ce:	72 2b       	ld.w	r11,r9[0x8]
800071d0:	2f 8e       	sub	lr,-8
800071d2:	1c 3b       	cp.w	r11,lr
800071d4:	c0 71       	brne	800071e2 <_free_r+0xba>
800071d6:	97 36       	st.w	r11[0xc],r6
800071d8:	97 26       	st.w	r11[0x8],r6
800071da:	8d 2b       	st.w	r6[0x8],r11
800071dc:	8d 3b       	st.w	r6[0xc],r11
800071de:	30 1c       	mov	r12,1
800071e0:	c0 58       	rjmp	800071ea <_free_r+0xc2>
800071e2:	72 2b       	ld.w	r11,r9[0x8]
800071e4:	72 39       	ld.w	r9,r9[0xc]
800071e6:	93 2b       	st.w	r9[0x8],r11
800071e8:	97 39       	st.w	r11[0xc],r9
800071ea:	10 99       	mov	r9,r8
800071ec:	ec 08 09 08 	st.w	r6[r8],r8
800071f0:	a1 a9       	sbr	r9,0x0
800071f2:	8d 19       	st.w	r6[0x4],r9
800071f4:	58 0c       	cp.w	r12,0
800071f6:	c5 a1       	brne	800072aa <_free_r+0x182>
800071f8:	e0 48 01 ff 	cp.w	r8,511
800071fc:	e0 8b 00 13 	brhi	80007222 <_free_r+0xfa>
80007200:	a3 98       	lsr	r8,0x3
80007202:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007206:	72 2b       	ld.w	r11,r9[0x8]
80007208:	8d 39       	st.w	r6[0xc],r9
8000720a:	8d 2b       	st.w	r6[0x8],r11
8000720c:	97 36       	st.w	r11[0xc],r6
8000720e:	93 26       	st.w	r9[0x8],r6
80007210:	a3 48       	asr	r8,0x2
80007212:	74 19       	ld.w	r9,r10[0x4]
80007214:	30 1b       	mov	r11,1
80007216:	f6 08 09 48 	lsl	r8,r11,r8
8000721a:	f3 e8 10 08 	or	r8,r9,r8
8000721e:	95 18       	st.w	r10[0x4],r8
80007220:	c4 58       	rjmp	800072aa <_free_r+0x182>
80007222:	f0 0b 16 09 	lsr	r11,r8,0x9
80007226:	58 4b       	cp.w	r11,4
80007228:	e0 8b 00 06 	brhi	80007234 <_free_r+0x10c>
8000722c:	f0 0b 16 06 	lsr	r11,r8,0x6
80007230:	2c 8b       	sub	r11,-56
80007232:	c2 08       	rjmp	80007272 <_free_r+0x14a>
80007234:	59 4b       	cp.w	r11,20
80007236:	e0 8b 00 04 	brhi	8000723e <_free_r+0x116>
8000723a:	2a 5b       	sub	r11,-91
8000723c:	c1 b8       	rjmp	80007272 <_free_r+0x14a>
8000723e:	e0 4b 00 54 	cp.w	r11,84
80007242:	e0 8b 00 06 	brhi	8000724e <_free_r+0x126>
80007246:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000724a:	29 2b       	sub	r11,-110
8000724c:	c1 38       	rjmp	80007272 <_free_r+0x14a>
8000724e:	e0 4b 01 54 	cp.w	r11,340
80007252:	e0 8b 00 06 	brhi	8000725e <_free_r+0x136>
80007256:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000725a:	28 9b       	sub	r11,-119
8000725c:	c0 b8       	rjmp	80007272 <_free_r+0x14a>
8000725e:	e0 4b 05 54 	cp.w	r11,1364
80007262:	e0 88 00 05 	brls	8000726c <_free_r+0x144>
80007266:	37 eb       	mov	r11,126
80007268:	c0 58       	rjmp	80007272 <_free_r+0x14a>
8000726a:	d7 03       	nop
8000726c:	f0 0b 16 12 	lsr	r11,r8,0x12
80007270:	28 4b       	sub	r11,-124
80007272:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80007276:	78 29       	ld.w	r9,r12[0x8]
80007278:	18 39       	cp.w	r9,r12
8000727a:	c0 e1       	brne	80007296 <_free_r+0x16e>
8000727c:	74 18       	ld.w	r8,r10[0x4]
8000727e:	a3 4b       	asr	r11,0x2
80007280:	30 1c       	mov	r12,1
80007282:	f8 0b 09 4b 	lsl	r11,r12,r11
80007286:	f1 eb 10 0b 	or	r11,r8,r11
8000728a:	12 98       	mov	r8,r9
8000728c:	95 1b       	st.w	r10[0x4],r11
8000728e:	c0 a8       	rjmp	800072a2 <_free_r+0x17a>
80007290:	72 29       	ld.w	r9,r9[0x8]
80007292:	18 39       	cp.w	r9,r12
80007294:	c0 60       	breq	800072a0 <_free_r+0x178>
80007296:	72 1a       	ld.w	r10,r9[0x4]
80007298:	e0 1a ff fc 	andl	r10,0xfffc
8000729c:	14 38       	cp.w	r8,r10
8000729e:	cf 93       	brcs	80007290 <_free_r+0x168>
800072a0:	72 38       	ld.w	r8,r9[0xc]
800072a2:	8d 38       	st.w	r6[0xc],r8
800072a4:	8d 29       	st.w	r6[0x8],r9
800072a6:	93 36       	st.w	r9[0xc],r6
800072a8:	91 26       	st.w	r8[0x8],r6
800072aa:	0e 9c       	mov	r12,r7
800072ac:	e0 a0 04 27 	rcall	80007afa <__malloc_unlock>
800072b0:	d8 22       	popm	r4-r7,pc
800072b2:	d7 03       	nop

800072b4 <__sfvwrite_r>:
800072b4:	d4 31       	pushm	r0-r7,lr
800072b6:	20 3d       	sub	sp,12
800072b8:	14 94       	mov	r4,r10
800072ba:	18 95       	mov	r5,r12
800072bc:	16 97       	mov	r7,r11
800072be:	74 28       	ld.w	r8,r10[0x8]
800072c0:	58 08       	cp.w	r8,0
800072c2:	e0 80 01 45 	breq	8000754c <__sfvwrite_r+0x298>
800072c6:	96 68       	ld.sh	r8,r11[0xc]
800072c8:	ed b8 00 03 	bld	r8,0x3
800072cc:	c0 41       	brne	800072d4 <__sfvwrite_r+0x20>
800072ce:	76 48       	ld.w	r8,r11[0x10]
800072d0:	58 08       	cp.w	r8,0
800072d2:	c0 c1       	brne	800072ea <__sfvwrite_r+0x36>
800072d4:	0e 9b       	mov	r11,r7
800072d6:	0a 9c       	mov	r12,r5
800072d8:	fe b0 f6 ca 	rcall	8000606c <__swsetup_r>
800072dc:	c0 70       	breq	800072ea <__sfvwrite_r+0x36>
800072de:	8e 68       	ld.sh	r8,r7[0xc]
800072e0:	a7 a8       	sbr	r8,0x6
800072e2:	ae 68       	st.h	r7[0xc],r8
800072e4:	30 98       	mov	r8,9
800072e6:	8b 38       	st.w	r5[0xc],r8
800072e8:	c3 09       	rjmp	80007548 <__sfvwrite_r+0x294>
800072ea:	8e 63       	ld.sh	r3,r7[0xc]
800072ec:	68 00       	ld.w	r0,r4[0x0]
800072ee:	06 96       	mov	r6,r3
800072f0:	e2 16 00 02 	andl	r6,0x2,COH
800072f4:	c2 10       	breq	80007336 <__sfvwrite_r+0x82>
800072f6:	30 03       	mov	r3,0
800072f8:	e0 62 04 00 	mov	r2,1024
800072fc:	06 96       	mov	r6,r3
800072fe:	c0 48       	rjmp	80007306 <__sfvwrite_r+0x52>
80007300:	60 03       	ld.w	r3,r0[0x0]
80007302:	60 16       	ld.w	r6,r0[0x4]
80007304:	2f 80       	sub	r0,-8
80007306:	58 06       	cp.w	r6,0
80007308:	cf c0       	breq	80007300 <__sfvwrite_r+0x4c>
8000730a:	e0 46 04 00 	cp.w	r6,1024
8000730e:	ec 09 17 80 	movls	r9,r6
80007312:	e4 09 17 b0 	movhi	r9,r2
80007316:	06 9a       	mov	r10,r3
80007318:	6e a8       	ld.w	r8,r7[0x28]
8000731a:	6e 8b       	ld.w	r11,r7[0x20]
8000731c:	0a 9c       	mov	r12,r5
8000731e:	5d 18       	icall	r8
80007320:	18 16       	sub	r6,r12
80007322:	58 0c       	cp.w	r12,0
80007324:	e0 8a 01 0f 	brle	80007542 <__sfvwrite_r+0x28e>
80007328:	68 28       	ld.w	r8,r4[0x8]
8000732a:	18 18       	sub	r8,r12
8000732c:	89 28       	st.w	r4[0x8],r8
8000732e:	e0 80 01 0f 	breq	8000754c <__sfvwrite_r+0x298>
80007332:	18 03       	add	r3,r12
80007334:	ce 9b       	rjmp	80007306 <__sfvwrite_r+0x52>
80007336:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000733a:	c0 70       	breq	80007348 <__sfvwrite_r+0x94>
8000733c:	50 06       	stdsp	sp[0x0],r6
8000733e:	0c 93       	mov	r3,r6
80007340:	0c 91       	mov	r1,r6
80007342:	50 15       	stdsp	sp[0x4],r5
80007344:	08 92       	mov	r2,r4
80007346:	c9 e8       	rjmp	80007482 <__sfvwrite_r+0x1ce>
80007348:	06 96       	mov	r6,r3
8000734a:	08 91       	mov	r1,r4
8000734c:	c0 48       	rjmp	80007354 <__sfvwrite_r+0xa0>
8000734e:	60 03       	ld.w	r3,r0[0x0]
80007350:	60 16       	ld.w	r6,r0[0x4]
80007352:	2f 80       	sub	r0,-8
80007354:	58 06       	cp.w	r6,0
80007356:	cf c0       	breq	8000734e <__sfvwrite_r+0x9a>
80007358:	8e 68       	ld.sh	r8,r7[0xc]
8000735a:	6e 24       	ld.w	r4,r7[0x8]
8000735c:	10 99       	mov	r9,r8
8000735e:	e2 19 02 00 	andl	r9,0x200,COH
80007362:	c5 50       	breq	8000740c <__sfvwrite_r+0x158>
80007364:	08 36       	cp.w	r6,r4
80007366:	c4 33       	brcs	800073ec <__sfvwrite_r+0x138>
80007368:	10 99       	mov	r9,r8
8000736a:	e2 19 04 80 	andl	r9,0x480,COH
8000736e:	c3 f0       	breq	800073ec <__sfvwrite_r+0x138>
80007370:	6e 4b       	ld.w	r11,r7[0x10]
80007372:	6e 09       	ld.w	r9,r7[0x0]
80007374:	16 19       	sub	r9,r11
80007376:	50 09       	stdsp	sp[0x0],r9
80007378:	6e 59       	ld.w	r9,r7[0x14]
8000737a:	10 9c       	mov	r12,r8
8000737c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007380:	30 28       	mov	r8,2
80007382:	f4 08 0c 08 	divs	r8,r10,r8
80007386:	fa e9 00 04 	st.d	sp[4],r8
8000738a:	10 94       	mov	r4,r8
8000738c:	40 09       	lddsp	r9,sp[0x0]
8000738e:	e2 1c 04 00 	andl	r12,0x400,COH
80007392:	2f f9       	sub	r9,-1
80007394:	0c 09       	add	r9,r6
80007396:	12 38       	cp.w	r8,r9
80007398:	f2 04 17 30 	movlo	r4,r9
8000739c:	58 0c       	cp.w	r12,0
8000739e:	c1 00       	breq	800073be <__sfvwrite_r+0x10a>
800073a0:	08 9b       	mov	r11,r4
800073a2:	0a 9c       	mov	r12,r5
800073a4:	c6 8d       	rcall	80007674 <_malloc_r>
800073a6:	18 92       	mov	r2,r12
800073a8:	c1 40       	breq	800073d0 <__sfvwrite_r+0x11c>
800073aa:	40 0a       	lddsp	r10,sp[0x0]
800073ac:	6e 4b       	ld.w	r11,r7[0x10]
800073ae:	fe b0 e4 78 	rcall	80003c9e <memcpy>
800073b2:	8e 68       	ld.sh	r8,r7[0xc]
800073b4:	e0 18 fb 7f 	andl	r8,0xfb7f
800073b8:	a7 b8       	sbr	r8,0x7
800073ba:	ae 68       	st.h	r7[0xc],r8
800073bc:	c0 d8       	rjmp	800073d6 <__sfvwrite_r+0x122>
800073be:	08 9a       	mov	r10,r4
800073c0:	0a 9c       	mov	r12,r5
800073c2:	e0 a0 06 87 	rcall	800080d0 <_realloc_r>
800073c6:	18 92       	mov	r2,r12
800073c8:	c0 71       	brne	800073d6 <__sfvwrite_r+0x122>
800073ca:	6e 4b       	ld.w	r11,r7[0x10]
800073cc:	0a 9c       	mov	r12,r5
800073ce:	ca de       	rcall	80007128 <_free_r>
800073d0:	30 c8       	mov	r8,12
800073d2:	8b 38       	st.w	r5[0xc],r8
800073d4:	cb 78       	rjmp	80007542 <__sfvwrite_r+0x28e>
800073d6:	40 0a       	lddsp	r10,sp[0x0]
800073d8:	40 09       	lddsp	r9,sp[0x0]
800073da:	e8 0a 01 0a 	sub	r10,r4,r10
800073de:	e4 09 00 08 	add	r8,r2,r9
800073e2:	8f 54       	st.w	r7[0x14],r4
800073e4:	8f 2a       	st.w	r7[0x8],r10
800073e6:	8f 08       	st.w	r7[0x0],r8
800073e8:	8f 42       	st.w	r7[0x10],r2
800073ea:	0c 94       	mov	r4,r6
800073ec:	08 36       	cp.w	r6,r4
800073ee:	ec 04 17 30 	movlo	r4,r6
800073f2:	06 9b       	mov	r11,r3
800073f4:	08 9a       	mov	r10,r4
800073f6:	6e 0c       	ld.w	r12,r7[0x0]
800073f8:	e0 a0 03 61 	rcall	80007aba <memmove>
800073fc:	6e 08       	ld.w	r8,r7[0x0]
800073fe:	08 08       	add	r8,r4
80007400:	8f 08       	st.w	r7[0x0],r8
80007402:	6e 28       	ld.w	r8,r7[0x8]
80007404:	08 18       	sub	r8,r4
80007406:	0c 94       	mov	r4,r6
80007408:	8f 28       	st.w	r7[0x8],r8
8000740a:	c3 08       	rjmp	8000746a <__sfvwrite_r+0x1b6>
8000740c:	08 36       	cp.w	r6,r4
8000740e:	5f ba       	srhi	r10
80007410:	6e 0c       	ld.w	r12,r7[0x0]
80007412:	6e 48       	ld.w	r8,r7[0x10]
80007414:	10 3c       	cp.w	r12,r8
80007416:	5f b8       	srhi	r8
80007418:	f5 e8 00 08 	and	r8,r10,r8
8000741c:	f2 08 18 00 	cp.b	r8,r9
80007420:	c0 e0       	breq	8000743c <__sfvwrite_r+0x188>
80007422:	06 9b       	mov	r11,r3
80007424:	08 9a       	mov	r10,r4
80007426:	e0 a0 03 4a 	rcall	80007aba <memmove>
8000742a:	6e 08       	ld.w	r8,r7[0x0]
8000742c:	08 08       	add	r8,r4
8000742e:	0e 9b       	mov	r11,r7
80007430:	8f 08       	st.w	r7[0x0],r8
80007432:	0a 9c       	mov	r12,r5
80007434:	fe b0 fd 08 	rcall	80006e44 <_fflush_r>
80007438:	c1 90       	breq	8000746a <__sfvwrite_r+0x1b6>
8000743a:	c8 48       	rjmp	80007542 <__sfvwrite_r+0x28e>
8000743c:	6e 59       	ld.w	r9,r7[0x14]
8000743e:	12 36       	cp.w	r6,r9
80007440:	c0 a3       	brcs	80007454 <__sfvwrite_r+0x1a0>
80007442:	6e a8       	ld.w	r8,r7[0x28]
80007444:	06 9a       	mov	r10,r3
80007446:	6e 8b       	ld.w	r11,r7[0x20]
80007448:	0a 9c       	mov	r12,r5
8000744a:	5d 18       	icall	r8
8000744c:	18 94       	mov	r4,r12
8000744e:	e0 89 00 0e 	brgt	8000746a <__sfvwrite_r+0x1b6>
80007452:	c7 88       	rjmp	80007542 <__sfvwrite_r+0x28e>
80007454:	0c 9a       	mov	r10,r6
80007456:	06 9b       	mov	r11,r3
80007458:	e0 a0 03 31 	rcall	80007aba <memmove>
8000745c:	6e 08       	ld.w	r8,r7[0x0]
8000745e:	0c 08       	add	r8,r6
80007460:	0c 94       	mov	r4,r6
80007462:	8f 08       	st.w	r7[0x0],r8
80007464:	6e 28       	ld.w	r8,r7[0x8]
80007466:	0c 18       	sub	r8,r6
80007468:	8f 28       	st.w	r7[0x8],r8
8000746a:	62 28       	ld.w	r8,r1[0x8]
8000746c:	08 18       	sub	r8,r4
8000746e:	83 28       	st.w	r1[0x8],r8
80007470:	c6 e0       	breq	8000754c <__sfvwrite_r+0x298>
80007472:	08 16       	sub	r6,r4
80007474:	08 03       	add	r3,r4
80007476:	c6 fb       	rjmp	80007354 <__sfvwrite_r+0xa0>
80007478:	60 03       	ld.w	r3,r0[0x0]
8000747a:	60 11       	ld.w	r1,r0[0x4]
8000747c:	30 08       	mov	r8,0
8000747e:	2f 80       	sub	r0,-8
80007480:	50 08       	stdsp	sp[0x0],r8
80007482:	58 01       	cp.w	r1,0
80007484:	cf a0       	breq	80007478 <__sfvwrite_r+0x1c4>
80007486:	40 0a       	lddsp	r10,sp[0x0]
80007488:	58 0a       	cp.w	r10,0
8000748a:	c1 51       	brne	800074b4 <__sfvwrite_r+0x200>
8000748c:	e2 c6 ff ff 	sub	r6,r1,-1
80007490:	02 9a       	mov	r10,r1
80007492:	30 ab       	mov	r11,10
80007494:	06 9c       	mov	r12,r3
80007496:	e0 a0 03 07 	rcall	80007aa4 <memchr>
8000749a:	f8 c8 ff ff 	sub	r8,r12,-1
8000749e:	58 0c       	cp.w	r12,0
800074a0:	f1 d3 e1 16 	subne	r6,r8,r3
800074a4:	f9 b9 01 01 	movne	r9,1
800074a8:	fb f9 1a 00 	st.wne	sp[0x0],r9
800074ac:	f9 b8 00 01 	moveq	r8,1
800074b0:	fb f8 0a 00 	st.weq	sp[0x0],r8
800074b4:	02 36       	cp.w	r6,r1
800074b6:	ec 04 17 80 	movls	r4,r6
800074ba:	e2 04 17 b0 	movhi	r4,r1
800074be:	6e 59       	ld.w	r9,r7[0x14]
800074c0:	6e 25       	ld.w	r5,r7[0x8]
800074c2:	f2 05 00 05 	add	r5,r9,r5
800074c6:	0a 34       	cp.w	r4,r5
800074c8:	5f 9a       	srgt	r10
800074ca:	6e 0c       	ld.w	r12,r7[0x0]
800074cc:	6e 48       	ld.w	r8,r7[0x10]
800074ce:	10 3c       	cp.w	r12,r8
800074d0:	5f b8       	srhi	r8
800074d2:	f5 e8 00 08 	and	r8,r10,r8
800074d6:	30 0a       	mov	r10,0
800074d8:	f4 08 18 00 	cp.b	r8,r10
800074dc:	c0 e0       	breq	800074f8 <__sfvwrite_r+0x244>
800074de:	06 9b       	mov	r11,r3
800074e0:	0a 9a       	mov	r10,r5
800074e2:	e0 a0 02 ec 	rcall	80007aba <memmove>
800074e6:	6e 08       	ld.w	r8,r7[0x0]
800074e8:	0a 08       	add	r8,r5
800074ea:	0e 9b       	mov	r11,r7
800074ec:	8f 08       	st.w	r7[0x0],r8
800074ee:	40 1c       	lddsp	r12,sp[0x4]
800074f0:	fe b0 fc aa 	rcall	80006e44 <_fflush_r>
800074f4:	c1 80       	breq	80007524 <__sfvwrite_r+0x270>
800074f6:	c2 68       	rjmp	80007542 <__sfvwrite_r+0x28e>
800074f8:	12 34       	cp.w	r4,r9
800074fa:	c0 a5       	brlt	8000750e <__sfvwrite_r+0x25a>
800074fc:	6e a8       	ld.w	r8,r7[0x28]
800074fe:	06 9a       	mov	r10,r3
80007500:	6e 8b       	ld.w	r11,r7[0x20]
80007502:	40 1c       	lddsp	r12,sp[0x4]
80007504:	5d 18       	icall	r8
80007506:	18 95       	mov	r5,r12
80007508:	e0 89 00 0e 	brgt	80007524 <__sfvwrite_r+0x270>
8000750c:	c1 b8       	rjmp	80007542 <__sfvwrite_r+0x28e>
8000750e:	08 9a       	mov	r10,r4
80007510:	06 9b       	mov	r11,r3
80007512:	e0 a0 02 d4 	rcall	80007aba <memmove>
80007516:	6e 08       	ld.w	r8,r7[0x0]
80007518:	08 08       	add	r8,r4
8000751a:	08 95       	mov	r5,r4
8000751c:	8f 08       	st.w	r7[0x0],r8
8000751e:	6e 28       	ld.w	r8,r7[0x8]
80007520:	08 18       	sub	r8,r4
80007522:	8f 28       	st.w	r7[0x8],r8
80007524:	0a 16       	sub	r6,r5
80007526:	c0 71       	brne	80007534 <__sfvwrite_r+0x280>
80007528:	0e 9b       	mov	r11,r7
8000752a:	40 1c       	lddsp	r12,sp[0x4]
8000752c:	fe b0 fc 8c 	rcall	80006e44 <_fflush_r>
80007530:	c0 91       	brne	80007542 <__sfvwrite_r+0x28e>
80007532:	50 06       	stdsp	sp[0x0],r6
80007534:	64 28       	ld.w	r8,r2[0x8]
80007536:	0a 18       	sub	r8,r5
80007538:	85 28       	st.w	r2[0x8],r8
8000753a:	c0 90       	breq	8000754c <__sfvwrite_r+0x298>
8000753c:	0a 11       	sub	r1,r5
8000753e:	0a 03       	add	r3,r5
80007540:	ca 1b       	rjmp	80007482 <__sfvwrite_r+0x1ce>
80007542:	8e 68       	ld.sh	r8,r7[0xc]
80007544:	a7 a8       	sbr	r8,0x6
80007546:	ae 68       	st.h	r7[0xc],r8
80007548:	3f fc       	mov	r12,-1
8000754a:	c0 28       	rjmp	8000754e <__sfvwrite_r+0x29a>
8000754c:	30 0c       	mov	r12,0
8000754e:	2f dd       	sub	sp,-12
80007550:	d8 32       	popm	r0-r7,pc
80007552:	d7 03       	nop

80007554 <_fwalk>:
80007554:	d4 31       	pushm	r0-r7,lr
80007556:	30 05       	mov	r5,0
80007558:	16 91       	mov	r1,r11
8000755a:	f8 c7 ff 28 	sub	r7,r12,-216
8000755e:	0a 92       	mov	r2,r5
80007560:	fe b0 fc f8 	rcall	80006f50 <__sfp_lock_acquire>
80007564:	3f f3       	mov	r3,-1
80007566:	c1 68       	rjmp	80007592 <_fwalk+0x3e>
80007568:	6e 26       	ld.w	r6,r7[0x8]
8000756a:	6e 14       	ld.w	r4,r7[0x4]
8000756c:	2f 46       	sub	r6,-12
8000756e:	c0 c8       	rjmp	80007586 <_fwalk+0x32>
80007570:	8c 08       	ld.sh	r8,r6[0x0]
80007572:	e4 08 19 00 	cp.h	r8,r2
80007576:	c0 70       	breq	80007584 <_fwalk+0x30>
80007578:	8c 18       	ld.sh	r8,r6[0x2]
8000757a:	e6 08 19 00 	cp.h	r8,r3
8000757e:	c0 30       	breq	80007584 <_fwalk+0x30>
80007580:	5d 11       	icall	r1
80007582:	18 45       	or	r5,r12
80007584:	2a 46       	sub	r6,-92
80007586:	20 14       	sub	r4,1
80007588:	ec cc 00 0c 	sub	r12,r6,12
8000758c:	58 04       	cp.w	r4,0
8000758e:	cf 14       	brge	80007570 <_fwalk+0x1c>
80007590:	6e 07       	ld.w	r7,r7[0x0]
80007592:	58 07       	cp.w	r7,0
80007594:	ce a1       	brne	80007568 <_fwalk+0x14>
80007596:	fe b0 fc de 	rcall	80006f52 <__sfp_lock_release>
8000759a:	0a 9c       	mov	r12,r5
8000759c:	d8 32       	popm	r0-r7,pc
8000759e:	d7 03       	nop

800075a0 <_localeconv_r>:
800075a0:	fe cc d9 3c 	sub	r12,pc,-9924
800075a4:	5e fc       	retal	r12
800075a6:	d7 03       	nop

800075a8 <__smakebuf_r>:
800075a8:	d4 21       	pushm	r4-r7,lr
800075aa:	20 fd       	sub	sp,60
800075ac:	96 68       	ld.sh	r8,r11[0xc]
800075ae:	16 97       	mov	r7,r11
800075b0:	18 96       	mov	r6,r12
800075b2:	e2 18 00 02 	andl	r8,0x2,COH
800075b6:	c3 c1       	brne	8000762e <__smakebuf_r+0x86>
800075b8:	96 7b       	ld.sh	r11,r11[0xe]
800075ba:	f0 0b 19 00 	cp.h	r11,r8
800075be:	c0 55       	brlt	800075c8 <__smakebuf_r+0x20>
800075c0:	1a 9a       	mov	r10,sp
800075c2:	e0 a0 08 95 	rcall	800086ec <_fstat_r>
800075c6:	c0 f4       	brge	800075e4 <__smakebuf_r+0x3c>
800075c8:	8e 65       	ld.sh	r5,r7[0xc]
800075ca:	0a 98       	mov	r8,r5
800075cc:	ab b8       	sbr	r8,0xb
800075ce:	e2 15 00 80 	andl	r5,0x80,COH
800075d2:	ae 68       	st.h	r7[0xc],r8
800075d4:	30 04       	mov	r4,0
800075d6:	e0 68 04 00 	mov	r8,1024
800075da:	f9 b5 01 40 	movne	r5,64
800075de:	f0 05 17 00 	moveq	r5,r8
800075e2:	c1 c8       	rjmp	8000761a <__smakebuf_r+0x72>
800075e4:	40 18       	lddsp	r8,sp[0x4]
800075e6:	e2 18 f0 00 	andl	r8,0xf000,COH
800075ea:	e0 48 20 00 	cp.w	r8,8192
800075ee:	5f 04       	sreq	r4
800075f0:	e0 48 80 00 	cp.w	r8,32768
800075f4:	c0 e1       	brne	80007610 <__smakebuf_r+0x68>
800075f6:	6e b9       	ld.w	r9,r7[0x2c]
800075f8:	fe c8 f1 f8 	sub	r8,pc,-3592
800075fc:	10 39       	cp.w	r9,r8
800075fe:	c0 91       	brne	80007610 <__smakebuf_r+0x68>
80007600:	8e 68       	ld.sh	r8,r7[0xc]
80007602:	e0 65 04 00 	mov	r5,1024
80007606:	ab a8       	sbr	r8,0xa
80007608:	ef 45 00 50 	st.w	r7[80],r5
8000760c:	ae 68       	st.h	r7[0xc],r8
8000760e:	c0 68       	rjmp	8000761a <__smakebuf_r+0x72>
80007610:	8e 68       	ld.sh	r8,r7[0xc]
80007612:	e0 65 04 00 	mov	r5,1024
80007616:	ab b8       	sbr	r8,0xb
80007618:	ae 68       	st.h	r7[0xc],r8
8000761a:	0a 9b       	mov	r11,r5
8000761c:	0c 9c       	mov	r12,r6
8000761e:	c2 bc       	rcall	80007674 <_malloc_r>
80007620:	8e 68       	ld.sh	r8,r7[0xc]
80007622:	c0 d1       	brne	8000763c <__smakebuf_r+0x94>
80007624:	ed b8 00 09 	bld	r8,0x9
80007628:	c1 b0       	breq	8000765e <__smakebuf_r+0xb6>
8000762a:	a1 b8       	sbr	r8,0x1
8000762c:	ae 68       	st.h	r7[0xc],r8
8000762e:	ee c8 ff b9 	sub	r8,r7,-71
80007632:	8f 48       	st.w	r7[0x10],r8
80007634:	8f 08       	st.w	r7[0x0],r8
80007636:	30 18       	mov	r8,1
80007638:	8f 58       	st.w	r7[0x14],r8
8000763a:	c1 28       	rjmp	8000765e <__smakebuf_r+0xb6>
8000763c:	a7 b8       	sbr	r8,0x7
8000763e:	8f 4c       	st.w	r7[0x10],r12
80007640:	ae 68       	st.h	r7[0xc],r8
80007642:	8f 55       	st.w	r7[0x14],r5
80007644:	fe c8 06 f0 	sub	r8,pc,1776
80007648:	8f 0c       	st.w	r7[0x0],r12
8000764a:	8d a8       	st.w	r6[0x28],r8
8000764c:	58 04       	cp.w	r4,0
8000764e:	c0 80       	breq	8000765e <__smakebuf_r+0xb6>
80007650:	8e 7c       	ld.sh	r12,r7[0xe]
80007652:	e0 a0 07 3f 	rcall	800084d0 <isatty>
80007656:	c0 40       	breq	8000765e <__smakebuf_r+0xb6>
80007658:	8e 68       	ld.sh	r8,r7[0xc]
8000765a:	a1 a8       	sbr	r8,0x0
8000765c:	ae 68       	st.h	r7[0xc],r8
8000765e:	2f 1d       	sub	sp,-60
80007660:	d8 22       	popm	r4-r7,pc
80007662:	d7 03       	nop

80007664 <malloc>:
80007664:	d4 01       	pushm	lr
80007666:	e0 68 01 18 	mov	r8,280
8000766a:	18 9b       	mov	r11,r12
8000766c:	70 0c       	ld.w	r12,r8[0x0]
8000766e:	c0 3c       	rcall	80007674 <_malloc_r>
80007670:	d8 02       	popm	pc
80007672:	d7 03       	nop

80007674 <_malloc_r>:
80007674:	d4 31       	pushm	r0-r7,lr
80007676:	f6 c8 ff f5 	sub	r8,r11,-11
8000767a:	18 95       	mov	r5,r12
8000767c:	10 97       	mov	r7,r8
8000767e:	e0 17 ff f8 	andl	r7,0xfff8
80007682:	59 68       	cp.w	r8,22
80007684:	f9 b7 08 10 	movls	r7,16
80007688:	16 37       	cp.w	r7,r11
8000768a:	5f 38       	srlo	r8
8000768c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007690:	c0 50       	breq	8000769a <_malloc_r+0x26>
80007692:	30 c8       	mov	r8,12
80007694:	99 38       	st.w	r12[0xc],r8
80007696:	e0 8f 01 f7 	bral	80007a84 <_malloc_r+0x410>
8000769a:	e0 a0 02 2f 	rcall	80007af8 <__malloc_lock>
8000769e:	e0 47 01 f7 	cp.w	r7,503
800076a2:	e0 8b 00 1d 	brhi	800076dc <_malloc_r+0x68>
800076a6:	ee 03 16 03 	lsr	r3,r7,0x3
800076aa:	e0 68 01 1c 	mov	r8,284
800076ae:	f0 03 00 38 	add	r8,r8,r3<<0x3
800076b2:	70 36       	ld.w	r6,r8[0xc]
800076b4:	10 36       	cp.w	r6,r8
800076b6:	c0 61       	brne	800076c2 <_malloc_r+0x4e>
800076b8:	ec c8 ff f8 	sub	r8,r6,-8
800076bc:	70 36       	ld.w	r6,r8[0xc]
800076be:	10 36       	cp.w	r6,r8
800076c0:	c0 c0       	breq	800076d8 <_malloc_r+0x64>
800076c2:	6c 18       	ld.w	r8,r6[0x4]
800076c4:	e0 18 ff fc 	andl	r8,0xfffc
800076c8:	6c 3a       	ld.w	r10,r6[0xc]
800076ca:	ec 08 00 09 	add	r9,r6,r8
800076ce:	0a 9c       	mov	r12,r5
800076d0:	6c 28       	ld.w	r8,r6[0x8]
800076d2:	95 28       	st.w	r10[0x8],r8
800076d4:	91 3a       	st.w	r8[0xc],r10
800076d6:	c4 78       	rjmp	80007764 <_malloc_r+0xf0>
800076d8:	2f e3       	sub	r3,-2
800076da:	c4 d8       	rjmp	80007774 <_malloc_r+0x100>
800076dc:	ee 03 16 09 	lsr	r3,r7,0x9
800076e0:	c0 41       	brne	800076e8 <_malloc_r+0x74>
800076e2:	ee 03 16 03 	lsr	r3,r7,0x3
800076e6:	c2 68       	rjmp	80007732 <_malloc_r+0xbe>
800076e8:	58 43       	cp.w	r3,4
800076ea:	e0 8b 00 06 	brhi	800076f6 <_malloc_r+0x82>
800076ee:	ee 03 16 06 	lsr	r3,r7,0x6
800076f2:	2c 83       	sub	r3,-56
800076f4:	c1 f8       	rjmp	80007732 <_malloc_r+0xbe>
800076f6:	59 43       	cp.w	r3,20
800076f8:	e0 8b 00 04 	brhi	80007700 <_malloc_r+0x8c>
800076fc:	2a 53       	sub	r3,-91
800076fe:	c1 a8       	rjmp	80007732 <_malloc_r+0xbe>
80007700:	e0 43 00 54 	cp.w	r3,84
80007704:	e0 8b 00 06 	brhi	80007710 <_malloc_r+0x9c>
80007708:	ee 03 16 0c 	lsr	r3,r7,0xc
8000770c:	29 23       	sub	r3,-110
8000770e:	c1 28       	rjmp	80007732 <_malloc_r+0xbe>
80007710:	e0 43 01 54 	cp.w	r3,340
80007714:	e0 8b 00 06 	brhi	80007720 <_malloc_r+0xac>
80007718:	ee 03 16 0f 	lsr	r3,r7,0xf
8000771c:	28 93       	sub	r3,-119
8000771e:	c0 a8       	rjmp	80007732 <_malloc_r+0xbe>
80007720:	e0 43 05 54 	cp.w	r3,1364
80007724:	e0 88 00 04 	brls	8000772c <_malloc_r+0xb8>
80007728:	37 e3       	mov	r3,126
8000772a:	c0 48       	rjmp	80007732 <_malloc_r+0xbe>
8000772c:	ee 03 16 12 	lsr	r3,r7,0x12
80007730:	28 43       	sub	r3,-124
80007732:	e0 6a 01 1c 	mov	r10,284
80007736:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000773a:	74 36       	ld.w	r6,r10[0xc]
8000773c:	c1 98       	rjmp	8000776e <_malloc_r+0xfa>
8000773e:	6c 19       	ld.w	r9,r6[0x4]
80007740:	e0 19 ff fc 	andl	r9,0xfffc
80007744:	f2 07 01 0b 	sub	r11,r9,r7
80007748:	58 fb       	cp.w	r11,15
8000774a:	e0 8a 00 04 	brle	80007752 <_malloc_r+0xde>
8000774e:	20 13       	sub	r3,1
80007750:	c1 18       	rjmp	80007772 <_malloc_r+0xfe>
80007752:	6c 38       	ld.w	r8,r6[0xc]
80007754:	58 0b       	cp.w	r11,0
80007756:	c0 b5       	brlt	8000776c <_malloc_r+0xf8>
80007758:	6c 2a       	ld.w	r10,r6[0x8]
8000775a:	ec 09 00 09 	add	r9,r6,r9
8000775e:	0a 9c       	mov	r12,r5
80007760:	91 2a       	st.w	r8[0x8],r10
80007762:	95 38       	st.w	r10[0xc],r8
80007764:	72 18       	ld.w	r8,r9[0x4]
80007766:	a1 a8       	sbr	r8,0x0
80007768:	93 18       	st.w	r9[0x4],r8
8000776a:	cb c8       	rjmp	800078e2 <_malloc_r+0x26e>
8000776c:	10 96       	mov	r6,r8
8000776e:	14 36       	cp.w	r6,r10
80007770:	ce 71       	brne	8000773e <_malloc_r+0xca>
80007772:	2f f3       	sub	r3,-1
80007774:	e0 6a 01 1c 	mov	r10,284
80007778:	f4 cc ff f8 	sub	r12,r10,-8
8000777c:	78 26       	ld.w	r6,r12[0x8]
8000777e:	18 36       	cp.w	r6,r12
80007780:	c6 c0       	breq	80007858 <_malloc_r+0x1e4>
80007782:	6c 19       	ld.w	r9,r6[0x4]
80007784:	e0 19 ff fc 	andl	r9,0xfffc
80007788:	f2 07 01 08 	sub	r8,r9,r7
8000778c:	58 f8       	cp.w	r8,15
8000778e:	e0 89 00 8f 	brgt	800078ac <_malloc_r+0x238>
80007792:	99 3c       	st.w	r12[0xc],r12
80007794:	99 2c       	st.w	r12[0x8],r12
80007796:	58 08       	cp.w	r8,0
80007798:	c0 55       	brlt	800077a2 <_malloc_r+0x12e>
8000779a:	ec 09 00 09 	add	r9,r6,r9
8000779e:	0a 9c       	mov	r12,r5
800077a0:	ce 2b       	rjmp	80007764 <_malloc_r+0xf0>
800077a2:	e0 49 01 ff 	cp.w	r9,511
800077a6:	e0 8b 00 13 	brhi	800077cc <_malloc_r+0x158>
800077aa:	a3 99       	lsr	r9,0x3
800077ac:	f4 09 00 38 	add	r8,r10,r9<<0x3
800077b0:	70 2b       	ld.w	r11,r8[0x8]
800077b2:	8d 38       	st.w	r6[0xc],r8
800077b4:	8d 2b       	st.w	r6[0x8],r11
800077b6:	97 36       	st.w	r11[0xc],r6
800077b8:	91 26       	st.w	r8[0x8],r6
800077ba:	a3 49       	asr	r9,0x2
800077bc:	74 18       	ld.w	r8,r10[0x4]
800077be:	30 1b       	mov	r11,1
800077c0:	f6 09 09 49 	lsl	r9,r11,r9
800077c4:	f1 e9 10 09 	or	r9,r8,r9
800077c8:	95 19       	st.w	r10[0x4],r9
800077ca:	c4 78       	rjmp	80007858 <_malloc_r+0x1e4>
800077cc:	f2 0a 16 09 	lsr	r10,r9,0x9
800077d0:	58 4a       	cp.w	r10,4
800077d2:	e0 8b 00 07 	brhi	800077e0 <_malloc_r+0x16c>
800077d6:	f2 0a 16 06 	lsr	r10,r9,0x6
800077da:	2c 8a       	sub	r10,-56
800077dc:	c2 08       	rjmp	8000781c <_malloc_r+0x1a8>
800077de:	d7 03       	nop
800077e0:	59 4a       	cp.w	r10,20
800077e2:	e0 8b 00 04 	brhi	800077ea <_malloc_r+0x176>
800077e6:	2a 5a       	sub	r10,-91
800077e8:	c1 a8       	rjmp	8000781c <_malloc_r+0x1a8>
800077ea:	e0 4a 00 54 	cp.w	r10,84
800077ee:	e0 8b 00 06 	brhi	800077fa <_malloc_r+0x186>
800077f2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800077f6:	29 2a       	sub	r10,-110
800077f8:	c1 28       	rjmp	8000781c <_malloc_r+0x1a8>
800077fa:	e0 4a 01 54 	cp.w	r10,340
800077fe:	e0 8b 00 06 	brhi	8000780a <_malloc_r+0x196>
80007802:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007806:	28 9a       	sub	r10,-119
80007808:	c0 a8       	rjmp	8000781c <_malloc_r+0x1a8>
8000780a:	e0 4a 05 54 	cp.w	r10,1364
8000780e:	e0 88 00 04 	brls	80007816 <_malloc_r+0x1a2>
80007812:	37 ea       	mov	r10,126
80007814:	c0 48       	rjmp	8000781c <_malloc_r+0x1a8>
80007816:	f2 0a 16 12 	lsr	r10,r9,0x12
8000781a:	28 4a       	sub	r10,-124
8000781c:	e0 6b 01 1c 	mov	r11,284
80007820:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007824:	68 28       	ld.w	r8,r4[0x8]
80007826:	08 38       	cp.w	r8,r4
80007828:	c0 e1       	brne	80007844 <_malloc_r+0x1d0>
8000782a:	76 19       	ld.w	r9,r11[0x4]
8000782c:	a3 4a       	asr	r10,0x2
8000782e:	30 1e       	mov	lr,1
80007830:	fc 0a 09 4a 	lsl	r10,lr,r10
80007834:	f3 ea 10 0a 	or	r10,r9,r10
80007838:	10 99       	mov	r9,r8
8000783a:	97 1a       	st.w	r11[0x4],r10
8000783c:	c0 a8       	rjmp	80007850 <_malloc_r+0x1dc>
8000783e:	70 28       	ld.w	r8,r8[0x8]
80007840:	08 38       	cp.w	r8,r4
80007842:	c0 60       	breq	8000784e <_malloc_r+0x1da>
80007844:	70 1a       	ld.w	r10,r8[0x4]
80007846:	e0 1a ff fc 	andl	r10,0xfffc
8000784a:	14 39       	cp.w	r9,r10
8000784c:	cf 93       	brcs	8000783e <_malloc_r+0x1ca>
8000784e:	70 39       	ld.w	r9,r8[0xc]
80007850:	8d 39       	st.w	r6[0xc],r9
80007852:	8d 28       	st.w	r6[0x8],r8
80007854:	91 36       	st.w	r8[0xc],r6
80007856:	93 26       	st.w	r9[0x8],r6
80007858:	e6 08 14 02 	asr	r8,r3,0x2
8000785c:	30 1b       	mov	r11,1
8000785e:	e0 64 01 1c 	mov	r4,284
80007862:	f6 08 09 4b 	lsl	r11,r11,r8
80007866:	68 18       	ld.w	r8,r4[0x4]
80007868:	10 3b       	cp.w	r11,r8
8000786a:	e0 8b 00 69 	brhi	8000793c <_malloc_r+0x2c8>
8000786e:	f7 e8 00 09 	and	r9,r11,r8
80007872:	c0 b1       	brne	80007888 <_malloc_r+0x214>
80007874:	e0 13 ff fc 	andl	r3,0xfffc
80007878:	a1 7b       	lsl	r11,0x1
8000787a:	2f c3       	sub	r3,-4
8000787c:	c0 38       	rjmp	80007882 <_malloc_r+0x20e>
8000787e:	2f c3       	sub	r3,-4
80007880:	a1 7b       	lsl	r11,0x1
80007882:	f7 e8 00 09 	and	r9,r11,r8
80007886:	cf c0       	breq	8000787e <_malloc_r+0x20a>
80007888:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000788c:	06 92       	mov	r2,r3
8000788e:	1c 91       	mov	r1,lr
80007890:	62 36       	ld.w	r6,r1[0xc]
80007892:	c2 d8       	rjmp	800078ec <_malloc_r+0x278>
80007894:	6c 1a       	ld.w	r10,r6[0x4]
80007896:	e0 1a ff fc 	andl	r10,0xfffc
8000789a:	f4 07 01 08 	sub	r8,r10,r7
8000789e:	58 f8       	cp.w	r8,15
800078a0:	e0 8a 00 15 	brle	800078ca <_malloc_r+0x256>
800078a4:	6c 3a       	ld.w	r10,r6[0xc]
800078a6:	6c 29       	ld.w	r9,r6[0x8]
800078a8:	95 29       	st.w	r10[0x8],r9
800078aa:	93 3a       	st.w	r9[0xc],r10
800078ac:	0e 99       	mov	r9,r7
800078ae:	ec 07 00 07 	add	r7,r6,r7
800078b2:	a1 a9       	sbr	r9,0x0
800078b4:	99 37       	st.w	r12[0xc],r7
800078b6:	99 27       	st.w	r12[0x8],r7
800078b8:	8d 19       	st.w	r6[0x4],r9
800078ba:	ee 08 09 08 	st.w	r7[r8],r8
800078be:	8f 2c       	st.w	r7[0x8],r12
800078c0:	8f 3c       	st.w	r7[0xc],r12
800078c2:	a1 a8       	sbr	r8,0x0
800078c4:	0a 9c       	mov	r12,r5
800078c6:	8f 18       	st.w	r7[0x4],r8
800078c8:	c0 d8       	rjmp	800078e2 <_malloc_r+0x26e>
800078ca:	6c 39       	ld.w	r9,r6[0xc]
800078cc:	58 08       	cp.w	r8,0
800078ce:	c0 e5       	brlt	800078ea <_malloc_r+0x276>
800078d0:	ec 0a 00 0a 	add	r10,r6,r10
800078d4:	74 18       	ld.w	r8,r10[0x4]
800078d6:	a1 a8       	sbr	r8,0x0
800078d8:	0a 9c       	mov	r12,r5
800078da:	95 18       	st.w	r10[0x4],r8
800078dc:	6c 28       	ld.w	r8,r6[0x8]
800078de:	93 28       	st.w	r9[0x8],r8
800078e0:	91 39       	st.w	r8[0xc],r9
800078e2:	c0 cd       	rcall	80007afa <__malloc_unlock>
800078e4:	ec cc ff f8 	sub	r12,r6,-8
800078e8:	d8 32       	popm	r0-r7,pc
800078ea:	12 96       	mov	r6,r9
800078ec:	02 36       	cp.w	r6,r1
800078ee:	cd 31       	brne	80007894 <_malloc_r+0x220>
800078f0:	2f f2       	sub	r2,-1
800078f2:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800078f6:	c0 30       	breq	800078fc <_malloc_r+0x288>
800078f8:	2f 81       	sub	r1,-8
800078fa:	cc bb       	rjmp	80007890 <_malloc_r+0x21c>
800078fc:	1c 98       	mov	r8,lr
800078fe:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007902:	c0 81       	brne	80007912 <_malloc_r+0x29e>
80007904:	68 19       	ld.w	r9,r4[0x4]
80007906:	f6 08 11 ff 	rsub	r8,r11,-1
8000790a:	f3 e8 00 08 	and	r8,r9,r8
8000790e:	89 18       	st.w	r4[0x4],r8
80007910:	c0 78       	rjmp	8000791e <_malloc_r+0x2aa>
80007912:	f0 c9 00 08 	sub	r9,r8,8
80007916:	20 13       	sub	r3,1
80007918:	70 08       	ld.w	r8,r8[0x0]
8000791a:	12 38       	cp.w	r8,r9
8000791c:	cf 10       	breq	800078fe <_malloc_r+0x28a>
8000791e:	a1 7b       	lsl	r11,0x1
80007920:	68 18       	ld.w	r8,r4[0x4]
80007922:	10 3b       	cp.w	r11,r8
80007924:	e0 8b 00 0c 	brhi	8000793c <_malloc_r+0x2c8>
80007928:	58 0b       	cp.w	r11,0
8000792a:	c0 90       	breq	8000793c <_malloc_r+0x2c8>
8000792c:	04 93       	mov	r3,r2
8000792e:	c0 38       	rjmp	80007934 <_malloc_r+0x2c0>
80007930:	2f c3       	sub	r3,-4
80007932:	a1 7b       	lsl	r11,0x1
80007934:	f7 e8 00 09 	and	r9,r11,r8
80007938:	ca 81       	brne	80007888 <_malloc_r+0x214>
8000793a:	cf bb       	rjmp	80007930 <_malloc_r+0x2bc>
8000793c:	68 23       	ld.w	r3,r4[0x8]
8000793e:	66 12       	ld.w	r2,r3[0x4]
80007940:	e0 12 ff fc 	andl	r2,0xfffc
80007944:	0e 32       	cp.w	r2,r7
80007946:	5f 39       	srlo	r9
80007948:	e4 07 01 08 	sub	r8,r2,r7
8000794c:	58 f8       	cp.w	r8,15
8000794e:	5f aa       	srle	r10
80007950:	f5 e9 10 09 	or	r9,r10,r9
80007954:	e0 80 00 9a 	breq	80007a88 <_malloc_r+0x414>
80007958:	e0 68 07 10 	mov	r8,1808
8000795c:	70 01       	ld.w	r1,r8[0x0]
8000795e:	e0 68 05 28 	mov	r8,1320
80007962:	2f 01       	sub	r1,-16
80007964:	70 08       	ld.w	r8,r8[0x0]
80007966:	0e 01       	add	r1,r7
80007968:	5b f8       	cp.w	r8,-1
8000796a:	c0 40       	breq	80007972 <_malloc_r+0x2fe>
8000796c:	28 11       	sub	r1,-127
8000796e:	e0 11 ff 80 	andl	r1,0xff80
80007972:	02 9b       	mov	r11,r1
80007974:	0a 9c       	mov	r12,r5
80007976:	e0 a0 05 31 	rcall	800083d8 <_sbrk_r>
8000797a:	18 96       	mov	r6,r12
8000797c:	5b fc       	cp.w	r12,-1
8000797e:	c7 50       	breq	80007a68 <_malloc_r+0x3f4>
80007980:	e6 02 00 08 	add	r8,r3,r2
80007984:	10 3c       	cp.w	r12,r8
80007986:	c0 32       	brcc	8000798c <_malloc_r+0x318>
80007988:	08 33       	cp.w	r3,r4
8000798a:	c6 f1       	brne	80007a68 <_malloc_r+0x3f4>
8000798c:	e0 6a 07 14 	mov	r10,1812
80007990:	74 09       	ld.w	r9,r10[0x0]
80007992:	e2 09 00 09 	add	r9,r1,r9
80007996:	95 09       	st.w	r10[0x0],r9
80007998:	10 36       	cp.w	r6,r8
8000799a:	c0 a1       	brne	800079ae <_malloc_r+0x33a>
8000799c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800079a0:	c0 71       	brne	800079ae <_malloc_r+0x33a>
800079a2:	e2 02 00 02 	add	r2,r1,r2
800079a6:	68 28       	ld.w	r8,r4[0x8]
800079a8:	a1 a2       	sbr	r2,0x0
800079aa:	91 12       	st.w	r8[0x4],r2
800079ac:	c4 f8       	rjmp	80007a4a <_malloc_r+0x3d6>
800079ae:	e0 6a 05 28 	mov	r10,1320
800079b2:	74 0b       	ld.w	r11,r10[0x0]
800079b4:	5b fb       	cp.w	r11,-1
800079b6:	c0 31       	brne	800079bc <_malloc_r+0x348>
800079b8:	95 06       	st.w	r10[0x0],r6
800079ba:	c0 78       	rjmp	800079c8 <_malloc_r+0x354>
800079bc:	ec 09 00 09 	add	r9,r6,r9
800079c0:	e0 6a 07 14 	mov	r10,1812
800079c4:	10 19       	sub	r9,r8
800079c6:	95 09       	st.w	r10[0x0],r9
800079c8:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800079cc:	f0 09 11 08 	rsub	r9,r8,8
800079d0:	58 08       	cp.w	r8,0
800079d2:	f2 08 17 10 	movne	r8,r9
800079d6:	ed d8 e1 06 	addne	r6,r6,r8
800079da:	28 08       	sub	r8,-128
800079dc:	ec 01 00 01 	add	r1,r6,r1
800079e0:	0a 9c       	mov	r12,r5
800079e2:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800079e6:	f0 01 01 01 	sub	r1,r8,r1
800079ea:	02 9b       	mov	r11,r1
800079ec:	e0 a0 04 f6 	rcall	800083d8 <_sbrk_r>
800079f0:	e0 68 07 14 	mov	r8,1812
800079f4:	5b fc       	cp.w	r12,-1
800079f6:	ec 0c 17 00 	moveq	r12,r6
800079fa:	f9 b1 00 00 	moveq	r1,0
800079fe:	70 09       	ld.w	r9,r8[0x0]
80007a00:	0c 1c       	sub	r12,r6
80007a02:	89 26       	st.w	r4[0x8],r6
80007a04:	02 0c       	add	r12,r1
80007a06:	12 01       	add	r1,r9
80007a08:	a1 ac       	sbr	r12,0x0
80007a0a:	91 01       	st.w	r8[0x0],r1
80007a0c:	8d 1c       	st.w	r6[0x4],r12
80007a0e:	08 33       	cp.w	r3,r4
80007a10:	c1 d0       	breq	80007a4a <_malloc_r+0x3d6>
80007a12:	58 f2       	cp.w	r2,15
80007a14:	e0 8b 00 05 	brhi	80007a1e <_malloc_r+0x3aa>
80007a18:	30 18       	mov	r8,1
80007a1a:	8d 18       	st.w	r6[0x4],r8
80007a1c:	c2 68       	rjmp	80007a68 <_malloc_r+0x3f4>
80007a1e:	30 59       	mov	r9,5
80007a20:	20 c2       	sub	r2,12
80007a22:	e0 12 ff f8 	andl	r2,0xfff8
80007a26:	e6 02 00 08 	add	r8,r3,r2
80007a2a:	91 29       	st.w	r8[0x8],r9
80007a2c:	91 19       	st.w	r8[0x4],r9
80007a2e:	66 18       	ld.w	r8,r3[0x4]
80007a30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a34:	e5 e8 10 08 	or	r8,r2,r8
80007a38:	87 18       	st.w	r3[0x4],r8
80007a3a:	58 f2       	cp.w	r2,15
80007a3c:	e0 88 00 07 	brls	80007a4a <_malloc_r+0x3d6>
80007a40:	e6 cb ff f8 	sub	r11,r3,-8
80007a44:	0a 9c       	mov	r12,r5
80007a46:	fe b0 fb 71 	rcall	80007128 <_free_r>
80007a4a:	e0 69 07 0c 	mov	r9,1804
80007a4e:	72 0a       	ld.w	r10,r9[0x0]
80007a50:	e0 68 07 14 	mov	r8,1812
80007a54:	70 08       	ld.w	r8,r8[0x0]
80007a56:	14 38       	cp.w	r8,r10
80007a58:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007a5c:	e0 69 07 08 	mov	r9,1800
80007a60:	72 0a       	ld.w	r10,r9[0x0]
80007a62:	14 38       	cp.w	r8,r10
80007a64:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007a68:	68 28       	ld.w	r8,r4[0x8]
80007a6a:	70 18       	ld.w	r8,r8[0x4]
80007a6c:	e0 18 ff fc 	andl	r8,0xfffc
80007a70:	0e 38       	cp.w	r8,r7
80007a72:	5f 39       	srlo	r9
80007a74:	0e 18       	sub	r8,r7
80007a76:	58 f8       	cp.w	r8,15
80007a78:	5f aa       	srle	r10
80007a7a:	f5 e9 10 09 	or	r9,r10,r9
80007a7e:	c0 50       	breq	80007a88 <_malloc_r+0x414>
80007a80:	0a 9c       	mov	r12,r5
80007a82:	c3 cc       	rcall	80007afa <__malloc_unlock>
80007a84:	d8 3a       	popm	r0-r7,pc,r12=0
80007a86:	d7 03       	nop
80007a88:	68 26       	ld.w	r6,r4[0x8]
80007a8a:	a1 a8       	sbr	r8,0x0
80007a8c:	0e 99       	mov	r9,r7
80007a8e:	a1 a9       	sbr	r9,0x0
80007a90:	8d 19       	st.w	r6[0x4],r9
80007a92:	ec 07 00 07 	add	r7,r6,r7
80007a96:	0a 9c       	mov	r12,r5
80007a98:	89 27       	st.w	r4[0x8],r7
80007a9a:	8f 18       	st.w	r7[0x4],r8
80007a9c:	c2 fc       	rcall	80007afa <__malloc_unlock>
80007a9e:	ec cc ff f8 	sub	r12,r6,-8
80007aa2:	d8 32       	popm	r0-r7,pc

80007aa4 <memchr>:
80007aa4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007aa8:	c0 68       	rjmp	80007ab4 <memchr+0x10>
80007aaa:	20 1a       	sub	r10,1
80007aac:	19 88       	ld.ub	r8,r12[0x0]
80007aae:	16 38       	cp.w	r8,r11
80007ab0:	5e 0c       	reteq	r12
80007ab2:	2f fc       	sub	r12,-1
80007ab4:	58 0a       	cp.w	r10,0
80007ab6:	cf a1       	brne	80007aaa <memchr+0x6>
80007ab8:	5e fa       	retal	r10

80007aba <memmove>:
80007aba:	d4 01       	pushm	lr
80007abc:	18 3b       	cp.w	r11,r12
80007abe:	c1 92       	brcc	80007af0 <memmove+0x36>
80007ac0:	f6 0a 00 09 	add	r9,r11,r10
80007ac4:	12 3c       	cp.w	r12,r9
80007ac6:	c1 52       	brcc	80007af0 <memmove+0x36>
80007ac8:	f8 0a 00 0b 	add	r11,r12,r10
80007acc:	30 08       	mov	r8,0
80007ace:	c0 68       	rjmp	80007ada <memmove+0x20>
80007ad0:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007ad4:	20 1a       	sub	r10,1
80007ad6:	f6 08 0b 0e 	st.b	r11[r8],lr
80007ada:	20 18       	sub	r8,1
80007adc:	58 0a       	cp.w	r10,0
80007ade:	cf 91       	brne	80007ad0 <memmove+0x16>
80007ae0:	d8 02       	popm	pc
80007ae2:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007ae6:	20 1a       	sub	r10,1
80007ae8:	f8 08 0b 09 	st.b	r12[r8],r9
80007aec:	2f f8       	sub	r8,-1
80007aee:	c0 28       	rjmp	80007af2 <memmove+0x38>
80007af0:	30 08       	mov	r8,0
80007af2:	58 0a       	cp.w	r10,0
80007af4:	cf 71       	brne	80007ae2 <memmove+0x28>
80007af6:	d8 02       	popm	pc

80007af8 <__malloc_lock>:
80007af8:	5e fc       	retal	r12

80007afa <__malloc_unlock>:
80007afa:	5e fc       	retal	r12

80007afc <__hi0bits>:
80007afc:	18 98       	mov	r8,r12
80007afe:	e0 1c 00 00 	andl	r12,0x0
80007b02:	f0 09 15 10 	lsl	r9,r8,0x10
80007b06:	58 0c       	cp.w	r12,0
80007b08:	f2 08 17 00 	moveq	r8,r9
80007b0c:	f9 bc 00 10 	moveq	r12,16
80007b10:	f9 bc 01 00 	movne	r12,0
80007b14:	10 9a       	mov	r10,r8
80007b16:	f0 09 15 08 	lsl	r9,r8,0x8
80007b1a:	e6 1a ff 00 	andh	r10,0xff00,COH
80007b1e:	f7 bc 00 f8 	subeq	r12,-8
80007b22:	f2 08 17 00 	moveq	r8,r9
80007b26:	10 9a       	mov	r10,r8
80007b28:	f0 09 15 04 	lsl	r9,r8,0x4
80007b2c:	e6 1a f0 00 	andh	r10,0xf000,COH
80007b30:	f7 bc 00 fc 	subeq	r12,-4
80007b34:	f2 08 17 00 	moveq	r8,r9
80007b38:	10 9a       	mov	r10,r8
80007b3a:	f0 09 15 02 	lsl	r9,r8,0x2
80007b3e:	e6 1a c0 00 	andh	r10,0xc000,COH
80007b42:	f7 bc 00 fe 	subeq	r12,-2
80007b46:	f2 08 17 00 	moveq	r8,r9
80007b4a:	58 08       	cp.w	r8,0
80007b4c:	5e 5c       	retlt	r12
80007b4e:	ed b8 00 1e 	bld	r8,0x1e
80007b52:	f9 bc 01 20 	movne	r12,32
80007b56:	f7 bc 00 ff 	subeq	r12,-1
80007b5a:	5e fc       	retal	r12

80007b5c <__lo0bits>:
80007b5c:	18 99       	mov	r9,r12
80007b5e:	78 08       	ld.w	r8,r12[0x0]
80007b60:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007b64:	c1 50       	breq	80007b8e <__lo0bits+0x32>
80007b66:	ed b8 00 00 	bld	r8,0x0
80007b6a:	c0 21       	brne	80007b6e <__lo0bits+0x12>
80007b6c:	5e fd       	retal	0
80007b6e:	10 9b       	mov	r11,r8
80007b70:	f0 0a 16 01 	lsr	r10,r8,0x1
80007b74:	e2 1b 00 02 	andl	r11,0x2,COH
80007b78:	a3 88       	lsr	r8,0x2
80007b7a:	58 0b       	cp.w	r11,0
80007b7c:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007b80:	f9 bc 01 01 	movne	r12,1
80007b84:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007b88:	f9 bc 00 02 	moveq	r12,2
80007b8c:	5e fc       	retal	r12
80007b8e:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007b92:	f0 0b 16 10 	lsr	r11,r8,0x10
80007b96:	58 0a       	cp.w	r10,0
80007b98:	f6 08 17 00 	moveq	r8,r11
80007b9c:	f9 bc 00 10 	moveq	r12,16
80007ba0:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007ba4:	f0 0a 16 08 	lsr	r10,r8,0x8
80007ba8:	58 0b       	cp.w	r11,0
80007baa:	f7 bc 00 f8 	subeq	r12,-8
80007bae:	f4 08 17 00 	moveq	r8,r10
80007bb2:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007bb6:	f0 0a 16 04 	lsr	r10,r8,0x4
80007bba:	58 0b       	cp.w	r11,0
80007bbc:	f7 bc 00 fc 	subeq	r12,-4
80007bc0:	f4 08 17 00 	moveq	r8,r10
80007bc4:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007bc8:	f0 0a 16 02 	lsr	r10,r8,0x2
80007bcc:	58 0b       	cp.w	r11,0
80007bce:	f7 bc 00 fe 	subeq	r12,-2
80007bd2:	f4 08 17 00 	moveq	r8,r10
80007bd6:	ed b8 00 00 	bld	r8,0x0
80007bda:	c0 60       	breq	80007be6 <__lo0bits+0x8a>
80007bdc:	a1 98       	lsr	r8,0x1
80007bde:	c0 31       	brne	80007be4 <__lo0bits+0x88>
80007be0:	32 0c       	mov	r12,32
80007be2:	5e fc       	retal	r12
80007be4:	2f fc       	sub	r12,-1
80007be6:	93 08       	st.w	r9[0x0],r8
80007be8:	5e fc       	retal	r12

80007bea <__mcmp>:
80007bea:	d4 01       	pushm	lr
80007bec:	18 98       	mov	r8,r12
80007bee:	76 49       	ld.w	r9,r11[0x10]
80007bf0:	78 4c       	ld.w	r12,r12[0x10]
80007bf2:	12 1c       	sub	r12,r9
80007bf4:	c1 31       	brne	80007c1a <__mcmp+0x30>
80007bf6:	2f b9       	sub	r9,-5
80007bf8:	a3 69       	lsl	r9,0x2
80007bfa:	12 0b       	add	r11,r9
80007bfc:	f0 09 00 09 	add	r9,r8,r9
80007c00:	2e c8       	sub	r8,-20
80007c02:	13 4e       	ld.w	lr,--r9
80007c04:	17 4a       	ld.w	r10,--r11
80007c06:	14 3e       	cp.w	lr,r10
80007c08:	c0 60       	breq	80007c14 <__mcmp+0x2a>
80007c0a:	f9 bc 03 ff 	movlo	r12,-1
80007c0e:	f9 bc 02 01 	movhs	r12,1
80007c12:	d8 02       	popm	pc
80007c14:	10 39       	cp.w	r9,r8
80007c16:	fe 9b ff f6 	brhi	80007c02 <__mcmp+0x18>
80007c1a:	d8 02       	popm	pc

80007c1c <_Bfree>:
80007c1c:	d4 21       	pushm	r4-r7,lr
80007c1e:	18 97       	mov	r7,r12
80007c20:	16 95       	mov	r5,r11
80007c22:	78 96       	ld.w	r6,r12[0x24]
80007c24:	58 06       	cp.w	r6,0
80007c26:	c0 91       	brne	80007c38 <_Bfree+0x1c>
80007c28:	31 0c       	mov	r12,16
80007c2a:	fe b0 fd 1d 	rcall	80007664 <malloc>
80007c2e:	99 36       	st.w	r12[0xc],r6
80007c30:	8f 9c       	st.w	r7[0x24],r12
80007c32:	99 16       	st.w	r12[0x4],r6
80007c34:	99 26       	st.w	r12[0x8],r6
80007c36:	99 06       	st.w	r12[0x0],r6
80007c38:	58 05       	cp.w	r5,0
80007c3a:	c0 90       	breq	80007c4c <_Bfree+0x30>
80007c3c:	6a 19       	ld.w	r9,r5[0x4]
80007c3e:	6e 98       	ld.w	r8,r7[0x24]
80007c40:	70 38       	ld.w	r8,r8[0xc]
80007c42:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007c46:	8b 0a       	st.w	r5[0x0],r10
80007c48:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007c4c:	d8 22       	popm	r4-r7,pc
80007c4e:	d7 03       	nop

80007c50 <_Balloc>:
80007c50:	d4 21       	pushm	r4-r7,lr
80007c52:	18 97       	mov	r7,r12
80007c54:	16 96       	mov	r6,r11
80007c56:	78 95       	ld.w	r5,r12[0x24]
80007c58:	58 05       	cp.w	r5,0
80007c5a:	c0 91       	brne	80007c6c <_Balloc+0x1c>
80007c5c:	31 0c       	mov	r12,16
80007c5e:	fe b0 fd 03 	rcall	80007664 <malloc>
80007c62:	99 35       	st.w	r12[0xc],r5
80007c64:	8f 9c       	st.w	r7[0x24],r12
80007c66:	99 15       	st.w	r12[0x4],r5
80007c68:	99 25       	st.w	r12[0x8],r5
80007c6a:	99 05       	st.w	r12[0x0],r5
80007c6c:	6e 95       	ld.w	r5,r7[0x24]
80007c6e:	6a 38       	ld.w	r8,r5[0xc]
80007c70:	58 08       	cp.w	r8,0
80007c72:	c0 b1       	brne	80007c88 <_Balloc+0x38>
80007c74:	31 0a       	mov	r10,16
80007c76:	30 4b       	mov	r11,4
80007c78:	0e 9c       	mov	r12,r7
80007c7a:	e0 a0 04 93 	rcall	800085a0 <_calloc_r>
80007c7e:	8b 3c       	st.w	r5[0xc],r12
80007c80:	6e 98       	ld.w	r8,r7[0x24]
80007c82:	70 3c       	ld.w	r12,r8[0xc]
80007c84:	58 0c       	cp.w	r12,0
80007c86:	c1 b0       	breq	80007cbc <_Balloc+0x6c>
80007c88:	6e 98       	ld.w	r8,r7[0x24]
80007c8a:	70 38       	ld.w	r8,r8[0xc]
80007c8c:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007c90:	70 0c       	ld.w	r12,r8[0x0]
80007c92:	58 0c       	cp.w	r12,0
80007c94:	c0 40       	breq	80007c9c <_Balloc+0x4c>
80007c96:	78 09       	ld.w	r9,r12[0x0]
80007c98:	91 09       	st.w	r8[0x0],r9
80007c9a:	c0 e8       	rjmp	80007cb6 <_Balloc+0x66>
80007c9c:	0e 9c       	mov	r12,r7
80007c9e:	30 17       	mov	r7,1
80007ca0:	0e 9b       	mov	r11,r7
80007ca2:	ee 06 09 47 	lsl	r7,r7,r6
80007ca6:	ee ca ff fb 	sub	r10,r7,-5
80007caa:	a3 6a       	lsl	r10,0x2
80007cac:	e0 a0 04 7a 	rcall	800085a0 <_calloc_r>
80007cb0:	c0 60       	breq	80007cbc <_Balloc+0x6c>
80007cb2:	99 16       	st.w	r12[0x4],r6
80007cb4:	99 27       	st.w	r12[0x8],r7
80007cb6:	30 08       	mov	r8,0
80007cb8:	99 38       	st.w	r12[0xc],r8
80007cba:	99 48       	st.w	r12[0x10],r8
80007cbc:	d8 22       	popm	r4-r7,pc
80007cbe:	d7 03       	nop

80007cc0 <__d2b>:
80007cc0:	d4 31       	pushm	r0-r7,lr
80007cc2:	20 2d       	sub	sp,8
80007cc4:	16 93       	mov	r3,r11
80007cc6:	12 96       	mov	r6,r9
80007cc8:	10 95       	mov	r5,r8
80007cca:	14 92       	mov	r2,r10
80007ccc:	30 1b       	mov	r11,1
80007cce:	cc 1f       	rcall	80007c50 <_Balloc>
80007cd0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007cd4:	50 09       	stdsp	sp[0x0],r9
80007cd6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007cda:	b5 a9       	sbr	r9,0x14
80007cdc:	f0 01 16 14 	lsr	r1,r8,0x14
80007ce0:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007ce4:	18 94       	mov	r4,r12
80007ce6:	58 02       	cp.w	r2,0
80007ce8:	c1 d0       	breq	80007d22 <__d2b+0x62>
80007cea:	fa cc ff f8 	sub	r12,sp,-8
80007cee:	18 d2       	st.w	--r12,r2
80007cf0:	c3 6f       	rcall	80007b5c <__lo0bits>
80007cf2:	40 18       	lddsp	r8,sp[0x4]
80007cf4:	c0 d0       	breq	80007d0e <__d2b+0x4e>
80007cf6:	40 09       	lddsp	r9,sp[0x0]
80007cf8:	f8 0a 11 20 	rsub	r10,r12,32
80007cfc:	f2 0a 09 4a 	lsl	r10,r9,r10
80007d00:	f5 e8 10 08 	or	r8,r10,r8
80007d04:	89 58       	st.w	r4[0x14],r8
80007d06:	f2 0c 0a 49 	lsr	r9,r9,r12
80007d0a:	50 09       	stdsp	sp[0x0],r9
80007d0c:	c0 28       	rjmp	80007d10 <__d2b+0x50>
80007d0e:	89 58       	st.w	r4[0x14],r8
80007d10:	40 08       	lddsp	r8,sp[0x0]
80007d12:	58 08       	cp.w	r8,0
80007d14:	f9 b3 01 02 	movne	r3,2
80007d18:	f9 b3 00 01 	moveq	r3,1
80007d1c:	89 68       	st.w	r4[0x18],r8
80007d1e:	89 43       	st.w	r4[0x10],r3
80007d20:	c0 88       	rjmp	80007d30 <__d2b+0x70>
80007d22:	1a 9c       	mov	r12,sp
80007d24:	c1 cf       	rcall	80007b5c <__lo0bits>
80007d26:	30 13       	mov	r3,1
80007d28:	40 08       	lddsp	r8,sp[0x0]
80007d2a:	2e 0c       	sub	r12,-32
80007d2c:	89 43       	st.w	r4[0x10],r3
80007d2e:	89 58       	st.w	r4[0x14],r8
80007d30:	58 01       	cp.w	r1,0
80007d32:	c0 90       	breq	80007d44 <__d2b+0x84>
80007d34:	e2 c1 04 33 	sub	r1,r1,1075
80007d38:	18 01       	add	r1,r12
80007d3a:	8d 01       	st.w	r6[0x0],r1
80007d3c:	f8 0c 11 35 	rsub	r12,r12,53
80007d40:	8b 0c       	st.w	r5[0x0],r12
80007d42:	c0 c8       	rjmp	80007d5a <__d2b+0x9a>
80007d44:	e6 c8 ff fc 	sub	r8,r3,-4
80007d48:	f8 cc 04 32 	sub	r12,r12,1074
80007d4c:	a5 73       	lsl	r3,0x5
80007d4e:	8d 0c       	st.w	r6[0x0],r12
80007d50:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007d54:	cd 4e       	rcall	80007afc <__hi0bits>
80007d56:	18 13       	sub	r3,r12
80007d58:	8b 03       	st.w	r5[0x0],r3
80007d5a:	08 9c       	mov	r12,r4
80007d5c:	2f ed       	sub	sp,-8
80007d5e:	d8 32       	popm	r0-r7,pc

80007d60 <__mdiff>:
80007d60:	d4 31       	pushm	r0-r7,lr
80007d62:	74 48       	ld.w	r8,r10[0x10]
80007d64:	76 45       	ld.w	r5,r11[0x10]
80007d66:	16 97       	mov	r7,r11
80007d68:	14 96       	mov	r6,r10
80007d6a:	10 15       	sub	r5,r8
80007d6c:	c1 31       	brne	80007d92 <__mdiff+0x32>
80007d6e:	2f b8       	sub	r8,-5
80007d70:	ee ce ff ec 	sub	lr,r7,-20
80007d74:	a3 68       	lsl	r8,0x2
80007d76:	f4 08 00 0b 	add	r11,r10,r8
80007d7a:	ee 08 00 08 	add	r8,r7,r8
80007d7e:	11 4a       	ld.w	r10,--r8
80007d80:	17 49       	ld.w	r9,--r11
80007d82:	12 3a       	cp.w	r10,r9
80007d84:	c0 30       	breq	80007d8a <__mdiff+0x2a>
80007d86:	c0 e2       	brcc	80007da2 <__mdiff+0x42>
80007d88:	c0 78       	rjmp	80007d96 <__mdiff+0x36>
80007d8a:	1c 38       	cp.w	r8,lr
80007d8c:	fe 9b ff f9 	brhi	80007d7e <__mdiff+0x1e>
80007d90:	c4 98       	rjmp	80007e22 <__mdiff+0xc2>
80007d92:	58 05       	cp.w	r5,0
80007d94:	c0 64       	brge	80007da0 <__mdiff+0x40>
80007d96:	0e 98       	mov	r8,r7
80007d98:	30 15       	mov	r5,1
80007d9a:	0c 97       	mov	r7,r6
80007d9c:	10 96       	mov	r6,r8
80007d9e:	c0 28       	rjmp	80007da2 <__mdiff+0x42>
80007da0:	30 05       	mov	r5,0
80007da2:	6e 1b       	ld.w	r11,r7[0x4]
80007da4:	c5 6f       	rcall	80007c50 <_Balloc>
80007da6:	6e 49       	ld.w	r9,r7[0x10]
80007da8:	6c 44       	ld.w	r4,r6[0x10]
80007daa:	99 35       	st.w	r12[0xc],r5
80007dac:	2f b4       	sub	r4,-5
80007dae:	f2 c5 ff fb 	sub	r5,r9,-5
80007db2:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007db6:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007dba:	2e c6       	sub	r6,-20
80007dbc:	2e c7       	sub	r7,-20
80007dbe:	f8 c8 ff ec 	sub	r8,r12,-20
80007dc2:	30 0a       	mov	r10,0
80007dc4:	0f 0e       	ld.w	lr,r7++
80007dc6:	0d 0b       	ld.w	r11,r6++
80007dc8:	fc 02 16 10 	lsr	r2,lr,0x10
80007dcc:	f6 03 16 10 	lsr	r3,r11,0x10
80007dd0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007dd4:	e4 03 01 03 	sub	r3,r2,r3
80007dd8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007ddc:	fc 0b 01 0b 	sub	r11,lr,r11
80007de0:	f6 0a 00 0a 	add	r10,r11,r10
80007de4:	b0 1a       	st.h	r8[0x2],r10
80007de6:	b1 4a       	asr	r10,0x10
80007de8:	e6 0a 00 0a 	add	r10,r3,r10
80007dec:	b0 0a       	st.h	r8[0x0],r10
80007dee:	2f c8       	sub	r8,-4
80007df0:	b1 4a       	asr	r10,0x10
80007df2:	08 36       	cp.w	r6,r4
80007df4:	ce 83       	brcs	80007dc4 <__mdiff+0x64>
80007df6:	c0 d8       	rjmp	80007e10 <__mdiff+0xb0>
80007df8:	0f 0b       	ld.w	r11,r7++
80007dfa:	f6 0e 16 10 	lsr	lr,r11,0x10
80007dfe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007e02:	16 0a       	add	r10,r11
80007e04:	b0 1a       	st.h	r8[0x2],r10
80007e06:	b1 4a       	asr	r10,0x10
80007e08:	1c 0a       	add	r10,lr
80007e0a:	b0 0a       	st.h	r8[0x0],r10
80007e0c:	2f c8       	sub	r8,-4
80007e0e:	b1 4a       	asr	r10,0x10
80007e10:	0a 37       	cp.w	r7,r5
80007e12:	cf 33       	brcs	80007df8 <__mdiff+0x98>
80007e14:	c0 28       	rjmp	80007e18 <__mdiff+0xb8>
80007e16:	20 19       	sub	r9,1
80007e18:	11 4a       	ld.w	r10,--r8
80007e1a:	58 0a       	cp.w	r10,0
80007e1c:	cf d0       	breq	80007e16 <__mdiff+0xb6>
80007e1e:	99 49       	st.w	r12[0x10],r9
80007e20:	d8 32       	popm	r0-r7,pc
80007e22:	30 0b       	mov	r11,0
80007e24:	c1 6f       	rcall	80007c50 <_Balloc>
80007e26:	30 18       	mov	r8,1
80007e28:	99 48       	st.w	r12[0x10],r8
80007e2a:	30 08       	mov	r8,0
80007e2c:	99 58       	st.w	r12[0x14],r8
80007e2e:	d8 32       	popm	r0-r7,pc

80007e30 <__lshift>:
80007e30:	d4 31       	pushm	r0-r7,lr
80007e32:	16 97       	mov	r7,r11
80007e34:	76 46       	ld.w	r6,r11[0x10]
80007e36:	f4 02 14 05 	asr	r2,r10,0x5
80007e3a:	2f f6       	sub	r6,-1
80007e3c:	14 93       	mov	r3,r10
80007e3e:	18 94       	mov	r4,r12
80007e40:	04 06       	add	r6,r2
80007e42:	76 1b       	ld.w	r11,r11[0x4]
80007e44:	6e 28       	ld.w	r8,r7[0x8]
80007e46:	c0 38       	rjmp	80007e4c <__lshift+0x1c>
80007e48:	2f fb       	sub	r11,-1
80007e4a:	a1 78       	lsl	r8,0x1
80007e4c:	10 36       	cp.w	r6,r8
80007e4e:	fe 99 ff fd 	brgt	80007e48 <__lshift+0x18>
80007e52:	08 9c       	mov	r12,r4
80007e54:	cf ee       	rcall	80007c50 <_Balloc>
80007e56:	30 09       	mov	r9,0
80007e58:	18 95       	mov	r5,r12
80007e5a:	f8 c8 ff ec 	sub	r8,r12,-20
80007e5e:	12 9a       	mov	r10,r9
80007e60:	c0 38       	rjmp	80007e66 <__lshift+0x36>
80007e62:	10 aa       	st.w	r8++,r10
80007e64:	2f f9       	sub	r9,-1
80007e66:	04 39       	cp.w	r9,r2
80007e68:	cf d5       	brlt	80007e62 <__lshift+0x32>
80007e6a:	6e 4b       	ld.w	r11,r7[0x10]
80007e6c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007e70:	2f bb       	sub	r11,-5
80007e72:	ee c9 ff ec 	sub	r9,r7,-20
80007e76:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007e7a:	58 03       	cp.w	r3,0
80007e7c:	c1 30       	breq	80007ea2 <__lshift+0x72>
80007e7e:	e6 0c 11 20 	rsub	r12,r3,32
80007e82:	30 0a       	mov	r10,0
80007e84:	72 02       	ld.w	r2,r9[0x0]
80007e86:	e4 03 09 42 	lsl	r2,r2,r3
80007e8a:	04 4a       	or	r10,r2
80007e8c:	10 aa       	st.w	r8++,r10
80007e8e:	13 0a       	ld.w	r10,r9++
80007e90:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007e94:	16 39       	cp.w	r9,r11
80007e96:	cf 73       	brcs	80007e84 <__lshift+0x54>
80007e98:	91 0a       	st.w	r8[0x0],r10
80007e9a:	58 0a       	cp.w	r10,0
80007e9c:	c0 70       	breq	80007eaa <__lshift+0x7a>
80007e9e:	2f f6       	sub	r6,-1
80007ea0:	c0 58       	rjmp	80007eaa <__lshift+0x7a>
80007ea2:	13 0a       	ld.w	r10,r9++
80007ea4:	10 aa       	st.w	r8++,r10
80007ea6:	16 39       	cp.w	r9,r11
80007ea8:	cf d3       	brcs	80007ea2 <__lshift+0x72>
80007eaa:	08 9c       	mov	r12,r4
80007eac:	20 16       	sub	r6,1
80007eae:	0e 9b       	mov	r11,r7
80007eb0:	8b 46       	st.w	r5[0x10],r6
80007eb2:	cb 5e       	rcall	80007c1c <_Bfree>
80007eb4:	0a 9c       	mov	r12,r5
80007eb6:	d8 32       	popm	r0-r7,pc

80007eb8 <__multiply>:
80007eb8:	d4 31       	pushm	r0-r7,lr
80007eba:	20 2d       	sub	sp,8
80007ebc:	76 49       	ld.w	r9,r11[0x10]
80007ebe:	74 48       	ld.w	r8,r10[0x10]
80007ec0:	16 96       	mov	r6,r11
80007ec2:	14 95       	mov	r5,r10
80007ec4:	10 39       	cp.w	r9,r8
80007ec6:	ec 08 17 50 	movlt	r8,r6
80007eca:	ea 06 17 50 	movlt	r6,r5
80007ece:	f0 05 17 50 	movlt	r5,r8
80007ed2:	6c 28       	ld.w	r8,r6[0x8]
80007ed4:	76 43       	ld.w	r3,r11[0x10]
80007ed6:	74 42       	ld.w	r2,r10[0x10]
80007ed8:	76 1b       	ld.w	r11,r11[0x4]
80007eda:	e4 03 00 07 	add	r7,r2,r3
80007ede:	10 37       	cp.w	r7,r8
80007ee0:	f7 bb 09 ff 	subgt	r11,-1
80007ee4:	cb 6e       	rcall	80007c50 <_Balloc>
80007ee6:	ee c4 ff fb 	sub	r4,r7,-5
80007eea:	f8 c9 ff ec 	sub	r9,r12,-20
80007eee:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007ef2:	30 0a       	mov	r10,0
80007ef4:	12 98       	mov	r8,r9
80007ef6:	c0 28       	rjmp	80007efa <__multiply+0x42>
80007ef8:	10 aa       	st.w	r8++,r10
80007efa:	08 38       	cp.w	r8,r4
80007efc:	cf e3       	brcs	80007ef8 <__multiply+0x40>
80007efe:	2f b3       	sub	r3,-5
80007f00:	2f b2       	sub	r2,-5
80007f02:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007f06:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007f0a:	ec cb ff ec 	sub	r11,r6,-20
80007f0e:	50 12       	stdsp	sp[0x4],r2
80007f10:	ea ca ff ec 	sub	r10,r5,-20
80007f14:	c4 48       	rjmp	80007f9c <__multiply+0xe4>
80007f16:	94 95       	ld.uh	r5,r10[0x2]
80007f18:	58 05       	cp.w	r5,0
80007f1a:	c2 00       	breq	80007f5a <__multiply+0xa2>
80007f1c:	12 98       	mov	r8,r9
80007f1e:	16 96       	mov	r6,r11
80007f20:	30 0e       	mov	lr,0
80007f22:	50 09       	stdsp	sp[0x0],r9
80007f24:	0d 02       	ld.w	r2,r6++
80007f26:	e4 00 16 10 	lsr	r0,r2,0x10
80007f2a:	70 01       	ld.w	r1,r8[0x0]
80007f2c:	70 09       	ld.w	r9,r8[0x0]
80007f2e:	b1 81       	lsr	r1,0x10
80007f30:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007f34:	e0 05 03 41 	mac	r1,r0,r5
80007f38:	ab 32       	mul	r2,r5
80007f3a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007f3e:	00 02       	add	r2,r0
80007f40:	e4 0e 00 0e 	add	lr,r2,lr
80007f44:	b0 1e       	st.h	r8[0x2],lr
80007f46:	b1 8e       	lsr	lr,0x10
80007f48:	1c 01       	add	r1,lr
80007f4a:	b0 01       	st.h	r8[0x0],r1
80007f4c:	e2 0e 16 10 	lsr	lr,r1,0x10
80007f50:	2f c8       	sub	r8,-4
80007f52:	06 36       	cp.w	r6,r3
80007f54:	ce 83       	brcs	80007f24 <__multiply+0x6c>
80007f56:	40 09       	lddsp	r9,sp[0x0]
80007f58:	91 0e       	st.w	r8[0x0],lr
80007f5a:	94 86       	ld.uh	r6,r10[0x0]
80007f5c:	58 06       	cp.w	r6,0
80007f5e:	c1 d0       	breq	80007f98 <__multiply+0xe0>
80007f60:	72 02       	ld.w	r2,r9[0x0]
80007f62:	12 98       	mov	r8,r9
80007f64:	16 9e       	mov	lr,r11
80007f66:	30 05       	mov	r5,0
80007f68:	b0 12       	st.h	r8[0x2],r2
80007f6a:	1d 01       	ld.w	r1,lr++
80007f6c:	90 82       	ld.uh	r2,r8[0x0]
80007f6e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007f72:	ad 30       	mul	r0,r6
80007f74:	e0 02 00 02 	add	r2,r0,r2
80007f78:	e4 05 00 05 	add	r5,r2,r5
80007f7c:	b0 05       	st.h	r8[0x0],r5
80007f7e:	b1 85       	lsr	r5,0x10
80007f80:	b1 81       	lsr	r1,0x10
80007f82:	2f c8       	sub	r8,-4
80007f84:	ad 31       	mul	r1,r6
80007f86:	90 92       	ld.uh	r2,r8[0x2]
80007f88:	e2 02 00 02 	add	r2,r1,r2
80007f8c:	0a 02       	add	r2,r5
80007f8e:	e4 05 16 10 	lsr	r5,r2,0x10
80007f92:	06 3e       	cp.w	lr,r3
80007f94:	ce a3       	brcs	80007f68 <__multiply+0xb0>
80007f96:	91 02       	st.w	r8[0x0],r2
80007f98:	2f ca       	sub	r10,-4
80007f9a:	2f c9       	sub	r9,-4
80007f9c:	40 18       	lddsp	r8,sp[0x4]
80007f9e:	10 3a       	cp.w	r10,r8
80007fa0:	cb b3       	brcs	80007f16 <__multiply+0x5e>
80007fa2:	c0 28       	rjmp	80007fa6 <__multiply+0xee>
80007fa4:	20 17       	sub	r7,1
80007fa6:	58 07       	cp.w	r7,0
80007fa8:	e0 8a 00 05 	brle	80007fb2 <__multiply+0xfa>
80007fac:	09 48       	ld.w	r8,--r4
80007fae:	58 08       	cp.w	r8,0
80007fb0:	cf a0       	breq	80007fa4 <__multiply+0xec>
80007fb2:	99 47       	st.w	r12[0x10],r7
80007fb4:	2f ed       	sub	sp,-8
80007fb6:	d8 32       	popm	r0-r7,pc

80007fb8 <__i2b>:
80007fb8:	d4 21       	pushm	r4-r7,lr
80007fba:	16 97       	mov	r7,r11
80007fbc:	30 1b       	mov	r11,1
80007fbe:	c4 9e       	rcall	80007c50 <_Balloc>
80007fc0:	30 19       	mov	r9,1
80007fc2:	99 57       	st.w	r12[0x14],r7
80007fc4:	99 49       	st.w	r12[0x10],r9
80007fc6:	d8 22       	popm	r4-r7,pc

80007fc8 <__multadd>:
80007fc8:	d4 31       	pushm	r0-r7,lr
80007fca:	30 08       	mov	r8,0
80007fcc:	12 95       	mov	r5,r9
80007fce:	16 97       	mov	r7,r11
80007fd0:	18 96       	mov	r6,r12
80007fd2:	76 44       	ld.w	r4,r11[0x10]
80007fd4:	f6 c9 ff ec 	sub	r9,r11,-20
80007fd8:	72 0b       	ld.w	r11,r9[0x0]
80007fda:	f6 0c 16 10 	lsr	r12,r11,0x10
80007fde:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007fe2:	f4 0c 02 4c 	mul	r12,r10,r12
80007fe6:	f4 0b 03 45 	mac	r5,r10,r11
80007fea:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007fee:	b1 85       	lsr	r5,0x10
80007ff0:	18 05       	add	r5,r12
80007ff2:	ea 0c 15 10 	lsl	r12,r5,0x10
80007ff6:	f8 0b 00 0b 	add	r11,r12,r11
80007ffa:	12 ab       	st.w	r9++,r11
80007ffc:	2f f8       	sub	r8,-1
80007ffe:	b1 85       	lsr	r5,0x10
80008000:	08 38       	cp.w	r8,r4
80008002:	ce b5       	brlt	80007fd8 <__multadd+0x10>
80008004:	58 05       	cp.w	r5,0
80008006:	c1 c0       	breq	8000803e <__multadd+0x76>
80008008:	6e 28       	ld.w	r8,r7[0x8]
8000800a:	10 34       	cp.w	r4,r8
8000800c:	c1 35       	brlt	80008032 <__multadd+0x6a>
8000800e:	6e 1b       	ld.w	r11,r7[0x4]
80008010:	0c 9c       	mov	r12,r6
80008012:	2f fb       	sub	r11,-1
80008014:	c1 ee       	rcall	80007c50 <_Balloc>
80008016:	6e 4a       	ld.w	r10,r7[0x10]
80008018:	ee cb ff f4 	sub	r11,r7,-12
8000801c:	18 93       	mov	r3,r12
8000801e:	2f ea       	sub	r10,-2
80008020:	2f 4c       	sub	r12,-12
80008022:	a3 6a       	lsl	r10,0x2
80008024:	fe b0 de 3d 	rcall	80003c9e <memcpy>
80008028:	0e 9b       	mov	r11,r7
8000802a:	0c 9c       	mov	r12,r6
8000802c:	fe b0 fd f8 	rcall	80007c1c <_Bfree>
80008030:	06 97       	mov	r7,r3
80008032:	e8 c8 ff ff 	sub	r8,r4,-1
80008036:	2f b4       	sub	r4,-5
80008038:	8f 48       	st.w	r7[0x10],r8
8000803a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000803e:	0e 9c       	mov	r12,r7
80008040:	d8 32       	popm	r0-r7,pc
80008042:	d7 03       	nop

80008044 <__pow5mult>:
80008044:	d4 31       	pushm	r0-r7,lr
80008046:	14 96       	mov	r6,r10
80008048:	18 97       	mov	r7,r12
8000804a:	16 94       	mov	r4,r11
8000804c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008050:	c0 90       	breq	80008062 <__pow5mult+0x1e>
80008052:	20 18       	sub	r8,1
80008054:	fe c9 e3 b0 	sub	r9,pc,-7248
80008058:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000805c:	30 09       	mov	r9,0
8000805e:	cb 5f       	rcall	80007fc8 <__multadd>
80008060:	18 94       	mov	r4,r12
80008062:	a3 46       	asr	r6,0x2
80008064:	c3 40       	breq	800080cc <__pow5mult+0x88>
80008066:	6e 95       	ld.w	r5,r7[0x24]
80008068:	58 05       	cp.w	r5,0
8000806a:	c0 91       	brne	8000807c <__pow5mult+0x38>
8000806c:	31 0c       	mov	r12,16
8000806e:	fe b0 fa fb 	rcall	80007664 <malloc>
80008072:	99 35       	st.w	r12[0xc],r5
80008074:	8f 9c       	st.w	r7[0x24],r12
80008076:	99 15       	st.w	r12[0x4],r5
80008078:	99 25       	st.w	r12[0x8],r5
8000807a:	99 05       	st.w	r12[0x0],r5
8000807c:	6e 93       	ld.w	r3,r7[0x24]
8000807e:	66 25       	ld.w	r5,r3[0x8]
80008080:	58 05       	cp.w	r5,0
80008082:	c0 c1       	brne	8000809a <__pow5mult+0x56>
80008084:	e0 6b 02 71 	mov	r11,625
80008088:	0e 9c       	mov	r12,r7
8000808a:	c9 7f       	rcall	80007fb8 <__i2b>
8000808c:	87 2c       	st.w	r3[0x8],r12
8000808e:	30 08       	mov	r8,0
80008090:	18 95       	mov	r5,r12
80008092:	99 08       	st.w	r12[0x0],r8
80008094:	c0 38       	rjmp	8000809a <__pow5mult+0x56>
80008096:	06 9c       	mov	r12,r3
80008098:	18 95       	mov	r5,r12
8000809a:	ed b6 00 00 	bld	r6,0x0
8000809e:	c0 b1       	brne	800080b4 <__pow5mult+0x70>
800080a0:	08 9b       	mov	r11,r4
800080a2:	0a 9a       	mov	r10,r5
800080a4:	0e 9c       	mov	r12,r7
800080a6:	c0 9f       	rcall	80007eb8 <__multiply>
800080a8:	08 9b       	mov	r11,r4
800080aa:	18 93       	mov	r3,r12
800080ac:	0e 9c       	mov	r12,r7
800080ae:	06 94       	mov	r4,r3
800080b0:	fe b0 fd b6 	rcall	80007c1c <_Bfree>
800080b4:	a1 56       	asr	r6,0x1
800080b6:	c0 b0       	breq	800080cc <__pow5mult+0x88>
800080b8:	6a 03       	ld.w	r3,r5[0x0]
800080ba:	58 03       	cp.w	r3,0
800080bc:	ce d1       	brne	80008096 <__pow5mult+0x52>
800080be:	0a 9a       	mov	r10,r5
800080c0:	0a 9b       	mov	r11,r5
800080c2:	0e 9c       	mov	r12,r7
800080c4:	cf ae       	rcall	80007eb8 <__multiply>
800080c6:	8b 0c       	st.w	r5[0x0],r12
800080c8:	99 03       	st.w	r12[0x0],r3
800080ca:	ce 7b       	rjmp	80008098 <__pow5mult+0x54>
800080cc:	08 9c       	mov	r12,r4
800080ce:	d8 32       	popm	r0-r7,pc

800080d0 <_realloc_r>:
800080d0:	d4 31       	pushm	r0-r7,lr
800080d2:	20 1d       	sub	sp,4
800080d4:	16 94       	mov	r4,r11
800080d6:	18 92       	mov	r2,r12
800080d8:	14 9b       	mov	r11,r10
800080da:	58 04       	cp.w	r4,0
800080dc:	c0 51       	brne	800080e6 <_realloc_r+0x16>
800080de:	fe b0 fa cb 	rcall	80007674 <_malloc_r>
800080e2:	18 95       	mov	r5,r12
800080e4:	c5 39       	rjmp	8000838a <_realloc_r+0x2ba>
800080e6:	50 0a       	stdsp	sp[0x0],r10
800080e8:	fe b0 fd 08 	rcall	80007af8 <__malloc_lock>
800080ec:	40 0b       	lddsp	r11,sp[0x0]
800080ee:	f6 c8 ff f5 	sub	r8,r11,-11
800080f2:	e8 c1 00 08 	sub	r1,r4,8
800080f6:	10 96       	mov	r6,r8
800080f8:	62 1c       	ld.w	r12,r1[0x4]
800080fa:	e0 16 ff f8 	andl	r6,0xfff8
800080fe:	59 68       	cp.w	r8,22
80008100:	f9 b6 08 10 	movls	r6,16
80008104:	16 36       	cp.w	r6,r11
80008106:	5f 38       	srlo	r8
80008108:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000810c:	c0 50       	breq	80008116 <_realloc_r+0x46>
8000810e:	30 c8       	mov	r8,12
80008110:	30 05       	mov	r5,0
80008112:	85 38       	st.w	r2[0xc],r8
80008114:	c3 b9       	rjmp	8000838a <_realloc_r+0x2ba>
80008116:	18 90       	mov	r0,r12
80008118:	e0 10 ff fc 	andl	r0,0xfffc
8000811c:	0c 30       	cp.w	r0,r6
8000811e:	e0 84 01 0b 	brge	80008334 <_realloc_r+0x264>
80008122:	e0 68 01 1c 	mov	r8,284
80008126:	e2 00 00 09 	add	r9,r1,r0
8000812a:	70 25       	ld.w	r5,r8[0x8]
8000812c:	0a 39       	cp.w	r9,r5
8000812e:	c0 90       	breq	80008140 <_realloc_r+0x70>
80008130:	72 1a       	ld.w	r10,r9[0x4]
80008132:	a1 ca       	cbr	r10,0x0
80008134:	f2 0a 00 0a 	add	r10,r9,r10
80008138:	74 1a       	ld.w	r10,r10[0x4]
8000813a:	ed ba 00 00 	bld	r10,0x0
8000813e:	c2 20       	breq	80008182 <_realloc_r+0xb2>
80008140:	72 1a       	ld.w	r10,r9[0x4]
80008142:	e0 1a ff fc 	andl	r10,0xfffc
80008146:	f4 00 00 03 	add	r3,r10,r0
8000814a:	0a 39       	cp.w	r9,r5
8000814c:	c1 31       	brne	80008172 <_realloc_r+0xa2>
8000814e:	ec c7 ff f0 	sub	r7,r6,-16
80008152:	0e 33       	cp.w	r3,r7
80008154:	c1 95       	brlt	80008186 <_realloc_r+0xb6>
80008156:	e2 06 00 09 	add	r9,r1,r6
8000815a:	0c 13       	sub	r3,r6
8000815c:	a1 a3       	sbr	r3,0x0
8000815e:	93 13       	st.w	r9[0x4],r3
80008160:	91 29       	st.w	r8[0x8],r9
80008162:	04 9c       	mov	r12,r2
80008164:	62 18       	ld.w	r8,r1[0x4]
80008166:	08 95       	mov	r5,r4
80008168:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000816c:	10 46       	or	r6,r8
8000816e:	83 16       	st.w	r1[0x4],r6
80008170:	c0 b9       	rjmp	80008386 <_realloc_r+0x2b6>
80008172:	0c 33       	cp.w	r3,r6
80008174:	c0 95       	brlt	80008186 <_realloc_r+0xb6>
80008176:	72 28       	ld.w	r8,r9[0x8]
80008178:	02 97       	mov	r7,r1
8000817a:	72 39       	ld.w	r9,r9[0xc]
8000817c:	93 28       	st.w	r9[0x8],r8
8000817e:	91 39       	st.w	r8[0xc],r9
80008180:	cd c8       	rjmp	80008338 <_realloc_r+0x268>
80008182:	30 0a       	mov	r10,0
80008184:	14 99       	mov	r9,r10
80008186:	ed bc 00 00 	bld	r12,0x0
8000818a:	e0 80 00 95 	breq	800082b4 <_realloc_r+0x1e4>
8000818e:	62 07       	ld.w	r7,r1[0x0]
80008190:	e2 07 01 07 	sub	r7,r1,r7
80008194:	6e 1c       	ld.w	r12,r7[0x4]
80008196:	e0 1c ff fc 	andl	r12,0xfffc
8000819a:	58 09       	cp.w	r9,0
8000819c:	c5 60       	breq	80008248 <_realloc_r+0x178>
8000819e:	f8 00 00 03 	add	r3,r12,r0
800081a2:	0a 39       	cp.w	r9,r5
800081a4:	c4 81       	brne	80008234 <_realloc_r+0x164>
800081a6:	14 03       	add	r3,r10
800081a8:	ec c9 ff f0 	sub	r9,r6,-16
800081ac:	12 33       	cp.w	r3,r9
800081ae:	c4 d5       	brlt	80008248 <_realloc_r+0x178>
800081b0:	6e 3a       	ld.w	r10,r7[0xc]
800081b2:	6e 29       	ld.w	r9,r7[0x8]
800081b4:	95 29       	st.w	r10[0x8],r9
800081b6:	93 3a       	st.w	r9[0xc],r10
800081b8:	ee c5 ff f8 	sub	r5,r7,-8
800081bc:	e0 ca 00 04 	sub	r10,r0,4
800081c0:	e0 4a 00 24 	cp.w	r10,36
800081c4:	e0 8b 00 25 	brhi	8000820e <_realloc_r+0x13e>
800081c8:	0a 99       	mov	r9,r5
800081ca:	59 3a       	cp.w	r10,19
800081cc:	e0 88 00 1a 	brls	80008200 <_realloc_r+0x130>
800081d0:	09 09       	ld.w	r9,r4++
800081d2:	8b 09       	st.w	r5[0x0],r9
800081d4:	09 09       	ld.w	r9,r4++
800081d6:	8f 39       	st.w	r7[0xc],r9
800081d8:	ee c9 ff f0 	sub	r9,r7,-16
800081dc:	59 ba       	cp.w	r10,27
800081de:	e0 88 00 11 	brls	80008200 <_realloc_r+0x130>
800081e2:	09 0b       	ld.w	r11,r4++
800081e4:	93 0b       	st.w	r9[0x0],r11
800081e6:	09 09       	ld.w	r9,r4++
800081e8:	8f 59       	st.w	r7[0x14],r9
800081ea:	ee c9 ff e8 	sub	r9,r7,-24
800081ee:	e0 4a 00 24 	cp.w	r10,36
800081f2:	c0 71       	brne	80008200 <_realloc_r+0x130>
800081f4:	09 0a       	ld.w	r10,r4++
800081f6:	93 0a       	st.w	r9[0x0],r10
800081f8:	ee c9 ff e0 	sub	r9,r7,-32
800081fc:	09 0a       	ld.w	r10,r4++
800081fe:	8f 7a       	st.w	r7[0x1c],r10
80008200:	09 0a       	ld.w	r10,r4++
80008202:	12 aa       	st.w	r9++,r10
80008204:	68 0a       	ld.w	r10,r4[0x0]
80008206:	93 0a       	st.w	r9[0x0],r10
80008208:	68 1a       	ld.w	r10,r4[0x4]
8000820a:	93 1a       	st.w	r9[0x4],r10
8000820c:	c0 78       	rjmp	8000821a <_realloc_r+0x14a>
8000820e:	50 08       	stdsp	sp[0x0],r8
80008210:	08 9b       	mov	r11,r4
80008212:	0a 9c       	mov	r12,r5
80008214:	fe b0 fc 53 	rcall	80007aba <memmove>
80008218:	40 08       	lddsp	r8,sp[0x0]
8000821a:	ee 06 00 09 	add	r9,r7,r6
8000821e:	0c 13       	sub	r3,r6
80008220:	a1 a3       	sbr	r3,0x0
80008222:	93 13       	st.w	r9[0x4],r3
80008224:	91 29       	st.w	r8[0x8],r9
80008226:	04 9c       	mov	r12,r2
80008228:	6e 18       	ld.w	r8,r7[0x4]
8000822a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000822e:	10 46       	or	r6,r8
80008230:	8f 16       	st.w	r7[0x4],r6
80008232:	ca a8       	rjmp	80008386 <_realloc_r+0x2b6>
80008234:	14 03       	add	r3,r10
80008236:	0c 33       	cp.w	r3,r6
80008238:	c0 85       	brlt	80008248 <_realloc_r+0x178>
8000823a:	72 28       	ld.w	r8,r9[0x8]
8000823c:	72 39       	ld.w	r9,r9[0xc]
8000823e:	93 28       	st.w	r9[0x8],r8
80008240:	91 39       	st.w	r8[0xc],r9
80008242:	6e 28       	ld.w	r8,r7[0x8]
80008244:	6e 39       	ld.w	r9,r7[0xc]
80008246:	c0 78       	rjmp	80008254 <_realloc_r+0x184>
80008248:	f8 00 00 03 	add	r3,r12,r0
8000824c:	0c 33       	cp.w	r3,r6
8000824e:	c3 35       	brlt	800082b4 <_realloc_r+0x1e4>
80008250:	6e 39       	ld.w	r9,r7[0xc]
80008252:	6e 28       	ld.w	r8,r7[0x8]
80008254:	93 28       	st.w	r9[0x8],r8
80008256:	91 39       	st.w	r8[0xc],r9
80008258:	e0 ca 00 04 	sub	r10,r0,4
8000825c:	ee cc ff f8 	sub	r12,r7,-8
80008260:	e0 4a 00 24 	cp.w	r10,36
80008264:	e0 8b 00 24 	brhi	800082ac <_realloc_r+0x1dc>
80008268:	59 3a       	cp.w	r10,19
8000826a:	e0 88 00 1a 	brls	8000829e <_realloc_r+0x1ce>
8000826e:	09 08       	ld.w	r8,r4++
80008270:	99 08       	st.w	r12[0x0],r8
80008272:	09 08       	ld.w	r8,r4++
80008274:	8f 38       	st.w	r7[0xc],r8
80008276:	ee cc ff f0 	sub	r12,r7,-16
8000827a:	59 ba       	cp.w	r10,27
8000827c:	e0 88 00 11 	brls	8000829e <_realloc_r+0x1ce>
80008280:	09 08       	ld.w	r8,r4++
80008282:	99 08       	st.w	r12[0x0],r8
80008284:	09 08       	ld.w	r8,r4++
80008286:	8f 58       	st.w	r7[0x14],r8
80008288:	ee cc ff e8 	sub	r12,r7,-24
8000828c:	e0 4a 00 24 	cp.w	r10,36
80008290:	c0 71       	brne	8000829e <_realloc_r+0x1ce>
80008292:	09 08       	ld.w	r8,r4++
80008294:	99 08       	st.w	r12[0x0],r8
80008296:	ee cc ff e0 	sub	r12,r7,-32
8000829a:	09 08       	ld.w	r8,r4++
8000829c:	8f 78       	st.w	r7[0x1c],r8
8000829e:	09 08       	ld.w	r8,r4++
800082a0:	18 a8       	st.w	r12++,r8
800082a2:	68 08       	ld.w	r8,r4[0x0]
800082a4:	99 08       	st.w	r12[0x0],r8
800082a6:	68 18       	ld.w	r8,r4[0x4]
800082a8:	99 18       	st.w	r12[0x4],r8
800082aa:	c4 78       	rjmp	80008338 <_realloc_r+0x268>
800082ac:	08 9b       	mov	r11,r4
800082ae:	fe b0 fc 06 	rcall	80007aba <memmove>
800082b2:	c4 38       	rjmp	80008338 <_realloc_r+0x268>
800082b4:	04 9c       	mov	r12,r2
800082b6:	fe b0 f9 df 	rcall	80007674 <_malloc_r>
800082ba:	18 95       	mov	r5,r12
800082bc:	c3 a0       	breq	80008330 <_realloc_r+0x260>
800082be:	62 18       	ld.w	r8,r1[0x4]
800082c0:	f8 c9 00 08 	sub	r9,r12,8
800082c4:	a1 c8       	cbr	r8,0x0
800082c6:	e2 08 00 08 	add	r8,r1,r8
800082ca:	10 39       	cp.w	r9,r8
800082cc:	c0 71       	brne	800082da <_realloc_r+0x20a>
800082ce:	72 13       	ld.w	r3,r9[0x4]
800082d0:	02 97       	mov	r7,r1
800082d2:	e0 13 ff fc 	andl	r3,0xfffc
800082d6:	00 03       	add	r3,r0
800082d8:	c3 08       	rjmp	80008338 <_realloc_r+0x268>
800082da:	e0 ca 00 04 	sub	r10,r0,4
800082de:	e0 4a 00 24 	cp.w	r10,36
800082e2:	e0 8b 00 20 	brhi	80008322 <_realloc_r+0x252>
800082e6:	08 99       	mov	r9,r4
800082e8:	18 98       	mov	r8,r12
800082ea:	59 3a       	cp.w	r10,19
800082ec:	e0 88 00 14 	brls	80008314 <_realloc_r+0x244>
800082f0:	13 0b       	ld.w	r11,r9++
800082f2:	10 ab       	st.w	r8++,r11
800082f4:	13 0b       	ld.w	r11,r9++
800082f6:	10 ab       	st.w	r8++,r11
800082f8:	59 ba       	cp.w	r10,27
800082fa:	e0 88 00 0d 	brls	80008314 <_realloc_r+0x244>
800082fe:	13 0b       	ld.w	r11,r9++
80008300:	10 ab       	st.w	r8++,r11
80008302:	13 0b       	ld.w	r11,r9++
80008304:	10 ab       	st.w	r8++,r11
80008306:	e0 4a 00 24 	cp.w	r10,36
8000830a:	c0 51       	brne	80008314 <_realloc_r+0x244>
8000830c:	13 0a       	ld.w	r10,r9++
8000830e:	10 aa       	st.w	r8++,r10
80008310:	13 0a       	ld.w	r10,r9++
80008312:	10 aa       	st.w	r8++,r10
80008314:	13 0a       	ld.w	r10,r9++
80008316:	10 aa       	st.w	r8++,r10
80008318:	72 0a       	ld.w	r10,r9[0x0]
8000831a:	91 0a       	st.w	r8[0x0],r10
8000831c:	72 19       	ld.w	r9,r9[0x4]
8000831e:	91 19       	st.w	r8[0x4],r9
80008320:	c0 48       	rjmp	80008328 <_realloc_r+0x258>
80008322:	08 9b       	mov	r11,r4
80008324:	fe b0 fb cb 	rcall	80007aba <memmove>
80008328:	08 9b       	mov	r11,r4
8000832a:	04 9c       	mov	r12,r2
8000832c:	fe b0 f6 fe 	rcall	80007128 <_free_r>
80008330:	04 9c       	mov	r12,r2
80008332:	c2 a8       	rjmp	80008386 <_realloc_r+0x2b6>
80008334:	00 93       	mov	r3,r0
80008336:	02 97       	mov	r7,r1
80008338:	e6 06 01 09 	sub	r9,r3,r6
8000833c:	6e 18       	ld.w	r8,r7[0x4]
8000833e:	58 f9       	cp.w	r9,15
80008340:	e0 88 00 16 	brls	8000836c <_realloc_r+0x29c>
80008344:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008348:	ed e8 10 08 	or	r8,r6,r8
8000834c:	8f 18       	st.w	r7[0x4],r8
8000834e:	12 98       	mov	r8,r9
80008350:	a1 a8       	sbr	r8,0x0
80008352:	ee 06 00 0b 	add	r11,r7,r6
80008356:	f6 09 00 09 	add	r9,r11,r9
8000835a:	97 18       	st.w	r11[0x4],r8
8000835c:	72 18       	ld.w	r8,r9[0x4]
8000835e:	a1 a8       	sbr	r8,0x0
80008360:	2f 8b       	sub	r11,-8
80008362:	93 18       	st.w	r9[0x4],r8
80008364:	04 9c       	mov	r12,r2
80008366:	fe b0 f6 e1 	rcall	80007128 <_free_r>
8000836a:	c0 b8       	rjmp	80008380 <_realloc_r+0x2b0>
8000836c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008370:	e7 e8 10 08 	or	r8,r3,r8
80008374:	8f 18       	st.w	r7[0x4],r8
80008376:	ee 03 00 03 	add	r3,r7,r3
8000837a:	66 18       	ld.w	r8,r3[0x4]
8000837c:	a1 a8       	sbr	r8,0x0
8000837e:	87 18       	st.w	r3[0x4],r8
80008380:	04 9c       	mov	r12,r2
80008382:	ee c5 ff f8 	sub	r5,r7,-8
80008386:	fe b0 fb ba 	rcall	80007afa <__malloc_unlock>
8000838a:	0a 9c       	mov	r12,r5
8000838c:	2f fd       	sub	sp,-4
8000838e:	d8 32       	popm	r0-r7,pc

80008390 <__isinfd>:
80008390:	14 98       	mov	r8,r10
80008392:	fc 19 7f f0 	movh	r9,0x7ff0
80008396:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000839a:	f0 0b 11 00 	rsub	r11,r8,0
8000839e:	f7 e8 10 08 	or	r8,r11,r8
800083a2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800083a6:	f2 08 01 08 	sub	r8,r9,r8
800083aa:	f0 0c 11 00 	rsub	r12,r8,0
800083ae:	f9 e8 10 08 	or	r8,r12,r8
800083b2:	f0 0c 14 1f 	asr	r12,r8,0x1f
800083b6:	2f fc       	sub	r12,-1
800083b8:	5e fc       	retal	r12

800083ba <__isnand>:
800083ba:	14 98       	mov	r8,r10
800083bc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800083c0:	f0 0c 11 00 	rsub	r12,r8,0
800083c4:	10 4c       	or	r12,r8
800083c6:	fc 18 7f f0 	movh	r8,0x7ff0
800083ca:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800083ce:	f0 0c 01 0c 	sub	r12,r8,r12
800083d2:	bf 9c       	lsr	r12,0x1f
800083d4:	5e fc       	retal	r12
800083d6:	d7 03       	nop

800083d8 <_sbrk_r>:
800083d8:	d4 21       	pushm	r4-r7,lr
800083da:	30 08       	mov	r8,0
800083dc:	18 97       	mov	r7,r12
800083de:	e0 66 08 08 	mov	r6,2056
800083e2:	16 9c       	mov	r12,r11
800083e4:	8d 08       	st.w	r6[0x0],r8
800083e6:	ca fc       	rcall	80008544 <_sbrk>
800083e8:	5b fc       	cp.w	r12,-1
800083ea:	c0 51       	brne	800083f4 <_sbrk_r+0x1c>
800083ec:	6c 08       	ld.w	r8,r6[0x0]
800083ee:	58 08       	cp.w	r8,0
800083f0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800083f4:	d8 22       	popm	r4-r7,pc
800083f6:	d7 03       	nop

800083f8 <__sclose>:
800083f8:	d4 01       	pushm	lr
800083fa:	96 7b       	ld.sh	r11,r11[0xe]
800083fc:	cf ec       	rcall	800085f8 <_close_r>
800083fe:	d8 02       	popm	pc

80008400 <__sseek>:
80008400:	d4 21       	pushm	r4-r7,lr
80008402:	16 97       	mov	r7,r11
80008404:	96 7b       	ld.sh	r11,r11[0xe]
80008406:	c8 5d       	rcall	80008710 <_lseek_r>
80008408:	8e 68       	ld.sh	r8,r7[0xc]
8000840a:	10 99       	mov	r9,r8
8000840c:	ad c8       	cbr	r8,0xc
8000840e:	ad a9       	sbr	r9,0xc
80008410:	5b fc       	cp.w	r12,-1
80008412:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008416:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000841a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000841e:	d8 22       	popm	r4-r7,pc

80008420 <__swrite>:
80008420:	d4 21       	pushm	r4-r7,lr
80008422:	96 68       	ld.sh	r8,r11[0xc]
80008424:	16 97       	mov	r7,r11
80008426:	14 95       	mov	r5,r10
80008428:	12 94       	mov	r4,r9
8000842a:	e2 18 01 00 	andl	r8,0x100,COH
8000842e:	18 96       	mov	r6,r12
80008430:	c0 50       	breq	8000843a <__swrite+0x1a>
80008432:	30 29       	mov	r9,2
80008434:	30 0a       	mov	r10,0
80008436:	96 7b       	ld.sh	r11,r11[0xe]
80008438:	c6 cd       	rcall	80008710 <_lseek_r>
8000843a:	8e 68       	ld.sh	r8,r7[0xc]
8000843c:	ad c8       	cbr	r8,0xc
8000843e:	08 99       	mov	r9,r4
80008440:	0a 9a       	mov	r10,r5
80008442:	8e 7b       	ld.sh	r11,r7[0xe]
80008444:	0c 9c       	mov	r12,r6
80008446:	ae 68       	st.h	r7[0xc],r8
80008448:	c9 ac       	rcall	8000857c <_write_r>
8000844a:	d8 22       	popm	r4-r7,pc

8000844c <__sread>:
8000844c:	d4 21       	pushm	r4-r7,lr
8000844e:	16 97       	mov	r7,r11
80008450:	96 7b       	ld.sh	r11,r11[0xe]
80008452:	c7 1d       	rcall	80008734 <_read_r>
80008454:	c0 65       	brlt	80008460 <__sread+0x14>
80008456:	6f 58       	ld.w	r8,r7[0x54]
80008458:	18 08       	add	r8,r12
8000845a:	ef 48 00 54 	st.w	r7[84],r8
8000845e:	d8 22       	popm	r4-r7,pc
80008460:	8e 68       	ld.sh	r8,r7[0xc]
80008462:	ad c8       	cbr	r8,0xc
80008464:	ae 68       	st.h	r7[0xc],r8
80008466:	d8 22       	popm	r4-r7,pc

80008468 <strlen>:
80008468:	30 09       	mov	r9,0
8000846a:	18 98       	mov	r8,r12
8000846c:	c0 28       	rjmp	80008470 <strlen+0x8>
8000846e:	2f f8       	sub	r8,-1
80008470:	11 8a       	ld.ub	r10,r8[0x0]
80008472:	f2 0a 18 00 	cp.b	r10,r9
80008476:	cf c1       	brne	8000846e <strlen+0x6>
80008478:	f0 0c 01 0c 	sub	r12,r8,r12
8000847c:	5e fc       	retal	r12
8000847e:	d7 03       	nop

80008480 <_close>:
80008480:	30 28       	mov	r8,2
80008482:	d6 73       	breakpoint
80008484:	3f fc       	mov	r12,-1
80008486:	35 8b       	mov	r11,88
80008488:	58 0c       	cp.w	r12,0
8000848a:	5e 4c       	retge	r12
8000848c:	e0 6a 08 08 	mov	r10,2056
80008490:	95 0b       	st.w	r10[0x0],r11
80008492:	5e fc       	retal	r12

80008494 <_lseek>:
80008494:	30 58       	mov	r8,5
80008496:	d6 73       	breakpoint
80008498:	3f fc       	mov	r12,-1
8000849a:	35 8b       	mov	r11,88
8000849c:	58 0c       	cp.w	r12,0
8000849e:	5e 4c       	retge	r12
800084a0:	e0 6a 08 08 	mov	r10,2056
800084a4:	95 0b       	st.w	r10[0x0],r11
800084a6:	5e fc       	retal	r12

800084a8 <_read>:
800084a8:	30 38       	mov	r8,3
800084aa:	d6 73       	breakpoint
800084ac:	3f fc       	mov	r12,-1
800084ae:	35 8b       	mov	r11,88
800084b0:	58 0c       	cp.w	r12,0
800084b2:	5e 4c       	retge	r12
800084b4:	e0 6a 08 08 	mov	r10,2056
800084b8:	95 0b       	st.w	r10[0x0],r11
800084ba:	5e fc       	retal	r12

800084bc <_write>:
800084bc:	30 48       	mov	r8,4
800084be:	d6 73       	breakpoint
800084c0:	3f fc       	mov	r12,-1
800084c2:	35 8b       	mov	r11,88
800084c4:	58 0c       	cp.w	r12,0
800084c6:	5e 4c       	retge	r12
800084c8:	e0 6a 08 08 	mov	r10,2056
800084cc:	95 0b       	st.w	r10[0x0],r11
800084ce:	5e fc       	retal	r12

800084d0 <isatty>:
800084d0:	30 b8       	mov	r8,11
800084d2:	d6 73       	breakpoint
800084d4:	3f fc       	mov	r12,-1
800084d6:	35 8b       	mov	r11,88
800084d8:	58 0c       	cp.w	r12,0
800084da:	5e 4c       	retge	r12
800084dc:	e0 6a 08 08 	mov	r10,2056
800084e0:	95 0b       	st.w	r10[0x0],r11
800084e2:	5e fc       	retal	r12

800084e4 <_fstat_host>:
800084e4:	30 98       	mov	r8,9
800084e6:	d6 73       	breakpoint
800084e8:	3f fc       	mov	r12,-1
800084ea:	35 8b       	mov	r11,88
800084ec:	58 0c       	cp.w	r12,0
800084ee:	5e 4c       	retge	r12
800084f0:	e0 6a 08 08 	mov	r10,2056
800084f4:	95 0b       	st.w	r10[0x0],r11
800084f6:	5e fc       	retal	r12

800084f8 <_fstat>:
800084f8:	d4 21       	pushm	r4-r7,lr
800084fa:	21 0d       	sub	sp,64
800084fc:	16 97       	mov	r7,r11
800084fe:	1a 9b       	mov	r11,sp
80008500:	cf 2f       	rcall	800084e4 <_fstat_host>
80008502:	c0 34       	brge	80008508 <_fstat+0x10>
80008504:	3f fc       	mov	r12,-1
80008506:	c1 c8       	rjmp	8000853e <_fstat+0x46>
80008508:	40 08       	lddsp	r8,sp[0x0]
8000850a:	ae 08       	st.h	r7[0x0],r8
8000850c:	40 18       	lddsp	r8,sp[0x4]
8000850e:	ae 18       	st.h	r7[0x2],r8
80008510:	40 28       	lddsp	r8,sp[0x8]
80008512:	8f 18       	st.w	r7[0x4],r8
80008514:	40 38       	lddsp	r8,sp[0xc]
80008516:	ae 48       	st.h	r7[0x8],r8
80008518:	40 48       	lddsp	r8,sp[0x10]
8000851a:	ae 58       	st.h	r7[0xa],r8
8000851c:	40 58       	lddsp	r8,sp[0x14]
8000851e:	ae 68       	st.h	r7[0xc],r8
80008520:	40 68       	lddsp	r8,sp[0x18]
80008522:	ae 78       	st.h	r7[0xe],r8
80008524:	40 88       	lddsp	r8,sp[0x20]
80008526:	8f 48       	st.w	r7[0x10],r8
80008528:	40 a8       	lddsp	r8,sp[0x28]
8000852a:	8f b8       	st.w	r7[0x2c],r8
8000852c:	40 c8       	lddsp	r8,sp[0x30]
8000852e:	8f c8       	st.w	r7[0x30],r8
80008530:	40 d8       	lddsp	r8,sp[0x34]
80008532:	8f 58       	st.w	r7[0x14],r8
80008534:	40 e8       	lddsp	r8,sp[0x38]
80008536:	30 0c       	mov	r12,0
80008538:	8f 78       	st.w	r7[0x1c],r8
8000853a:	40 f8       	lddsp	r8,sp[0x3c]
8000853c:	8f 98       	st.w	r7[0x24],r8
8000853e:	2f 0d       	sub	sp,-64
80008540:	d8 22       	popm	r4-r7,pc
80008542:	d7 03       	nop

80008544 <_sbrk>:
80008544:	d4 01       	pushm	lr
80008546:	e0 68 07 3c 	mov	r8,1852
8000854a:	70 09       	ld.w	r9,r8[0x0]
8000854c:	58 09       	cp.w	r9,0
8000854e:	c0 41       	brne	80008556 <_sbrk+0x12>
80008550:	e0 69 08 10 	mov	r9,2064
80008554:	91 09       	st.w	r8[0x0],r9
80008556:	e0 69 07 3c 	mov	r9,1852
8000855a:	e0 6a 30 00 	mov	r10,12288
8000855e:	72 08       	ld.w	r8,r9[0x0]
80008560:	f0 0c 00 0c 	add	r12,r8,r12
80008564:	14 3c       	cp.w	r12,r10
80008566:	e0 8b 00 04 	brhi	8000856e <_sbrk+0x2a>
8000856a:	93 0c       	st.w	r9[0x0],r12
8000856c:	c0 58       	rjmp	80008576 <_sbrk+0x32>
8000856e:	c5 5c       	rcall	80008618 <__errno>
80008570:	30 c8       	mov	r8,12
80008572:	99 08       	st.w	r12[0x0],r8
80008574:	3f f8       	mov	r8,-1
80008576:	10 9c       	mov	r12,r8
80008578:	d8 02       	popm	pc
8000857a:	d7 03       	nop

8000857c <_write_r>:
8000857c:	d4 21       	pushm	r4-r7,lr
8000857e:	16 98       	mov	r8,r11
80008580:	18 97       	mov	r7,r12
80008582:	10 9c       	mov	r12,r8
80008584:	30 08       	mov	r8,0
80008586:	14 9b       	mov	r11,r10
80008588:	e0 66 08 08 	mov	r6,2056
8000858c:	12 9a       	mov	r10,r9
8000858e:	8d 08       	st.w	r6[0x0],r8
80008590:	c9 6f       	rcall	800084bc <_write>
80008592:	5b fc       	cp.w	r12,-1
80008594:	c0 51       	brne	8000859e <_write_r+0x22>
80008596:	6c 08       	ld.w	r8,r6[0x0]
80008598:	58 08       	cp.w	r8,0
8000859a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000859e:	d8 22       	popm	r4-r7,pc

800085a0 <_calloc_r>:
800085a0:	d4 21       	pushm	r4-r7,lr
800085a2:	f4 0b 02 4b 	mul	r11,r10,r11
800085a6:	fe b0 f8 67 	rcall	80007674 <_malloc_r>
800085aa:	18 97       	mov	r7,r12
800085ac:	c2 30       	breq	800085f2 <_calloc_r+0x52>
800085ae:	f8 fa ff fc 	ld.w	r10,r12[-4]
800085b2:	e0 1a ff fc 	andl	r10,0xfffc
800085b6:	20 4a       	sub	r10,4
800085b8:	e0 4a 00 24 	cp.w	r10,36
800085bc:	e0 8b 00 18 	brhi	800085ec <_calloc_r+0x4c>
800085c0:	18 98       	mov	r8,r12
800085c2:	59 3a       	cp.w	r10,19
800085c4:	e0 88 00 0f 	brls	800085e2 <_calloc_r+0x42>
800085c8:	30 09       	mov	r9,0
800085ca:	10 a9       	st.w	r8++,r9
800085cc:	10 a9       	st.w	r8++,r9
800085ce:	59 ba       	cp.w	r10,27
800085d0:	e0 88 00 09 	brls	800085e2 <_calloc_r+0x42>
800085d4:	10 a9       	st.w	r8++,r9
800085d6:	10 a9       	st.w	r8++,r9
800085d8:	e0 4a 00 24 	cp.w	r10,36
800085dc:	c0 31       	brne	800085e2 <_calloc_r+0x42>
800085de:	10 a9       	st.w	r8++,r9
800085e0:	10 a9       	st.w	r8++,r9
800085e2:	30 09       	mov	r9,0
800085e4:	10 a9       	st.w	r8++,r9
800085e6:	91 19       	st.w	r8[0x4],r9
800085e8:	91 09       	st.w	r8[0x0],r9
800085ea:	c0 48       	rjmp	800085f2 <_calloc_r+0x52>
800085ec:	30 0b       	mov	r11,0
800085ee:	fe b0 db fc 	rcall	80003de6 <memset>
800085f2:	0e 9c       	mov	r12,r7
800085f4:	d8 22       	popm	r4-r7,pc
800085f6:	d7 03       	nop

800085f8 <_close_r>:
800085f8:	d4 21       	pushm	r4-r7,lr
800085fa:	30 08       	mov	r8,0
800085fc:	18 97       	mov	r7,r12
800085fe:	e0 66 08 08 	mov	r6,2056
80008602:	16 9c       	mov	r12,r11
80008604:	8d 08       	st.w	r6[0x0],r8
80008606:	c3 df       	rcall	80008480 <_close>
80008608:	5b fc       	cp.w	r12,-1
8000860a:	c0 51       	brne	80008614 <_close_r+0x1c>
8000860c:	6c 08       	ld.w	r8,r6[0x0]
8000860e:	58 08       	cp.w	r8,0
80008610:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008614:	d8 22       	popm	r4-r7,pc
80008616:	d7 03       	nop

80008618 <__errno>:
80008618:	e0 68 01 18 	mov	r8,280
8000861c:	70 0c       	ld.w	r12,r8[0x0]
8000861e:	2f 4c       	sub	r12,-12
80008620:	5e fc       	retal	r12
80008622:	d7 03       	nop

80008624 <_fclose_r>:
80008624:	d4 21       	pushm	r4-r7,lr
80008626:	18 96       	mov	r6,r12
80008628:	16 97       	mov	r7,r11
8000862a:	58 0b       	cp.w	r11,0
8000862c:	c0 31       	brne	80008632 <_fclose_r+0xe>
8000862e:	16 95       	mov	r5,r11
80008630:	c5 38       	rjmp	800086d6 <_fclose_r+0xb2>
80008632:	fe b0 f4 8f 	rcall	80006f50 <__sfp_lock_acquire>
80008636:	58 06       	cp.w	r6,0
80008638:	c0 70       	breq	80008646 <_fclose_r+0x22>
8000863a:	6c 68       	ld.w	r8,r6[0x18]
8000863c:	58 08       	cp.w	r8,0
8000863e:	c0 41       	brne	80008646 <_fclose_r+0x22>
80008640:	0c 9c       	mov	r12,r6
80008642:	fe b0 f4 d9 	rcall	80006ff4 <__sinit>
80008646:	fe c8 ea 4a 	sub	r8,pc,-5558
8000864a:	10 37       	cp.w	r7,r8
8000864c:	c0 31       	brne	80008652 <_fclose_r+0x2e>
8000864e:	6c 07       	ld.w	r7,r6[0x0]
80008650:	c0 c8       	rjmp	80008668 <_fclose_r+0x44>
80008652:	fe c8 ea 36 	sub	r8,pc,-5578
80008656:	10 37       	cp.w	r7,r8
80008658:	c0 31       	brne	8000865e <_fclose_r+0x3a>
8000865a:	6c 17       	ld.w	r7,r6[0x4]
8000865c:	c0 68       	rjmp	80008668 <_fclose_r+0x44>
8000865e:	fe c8 ea 22 	sub	r8,pc,-5598
80008662:	10 37       	cp.w	r7,r8
80008664:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008668:	8e 69       	ld.sh	r9,r7[0xc]
8000866a:	30 08       	mov	r8,0
8000866c:	f0 09 19 00 	cp.h	r9,r8
80008670:	c0 51       	brne	8000867a <_fclose_r+0x56>
80008672:	fe b0 f4 70 	rcall	80006f52 <__sfp_lock_release>
80008676:	30 05       	mov	r5,0
80008678:	c2 f8       	rjmp	800086d6 <_fclose_r+0xb2>
8000867a:	0e 9b       	mov	r11,r7
8000867c:	0c 9c       	mov	r12,r6
8000867e:	fe b0 f3 e3 	rcall	80006e44 <_fflush_r>
80008682:	6e c8       	ld.w	r8,r7[0x30]
80008684:	18 95       	mov	r5,r12
80008686:	58 08       	cp.w	r8,0
80008688:	c0 60       	breq	80008694 <_fclose_r+0x70>
8000868a:	6e 8b       	ld.w	r11,r7[0x20]
8000868c:	0c 9c       	mov	r12,r6
8000868e:	5d 18       	icall	r8
80008690:	f9 b5 05 ff 	movlt	r5,-1
80008694:	8e 68       	ld.sh	r8,r7[0xc]
80008696:	ed b8 00 07 	bld	r8,0x7
8000869a:	c0 51       	brne	800086a4 <_fclose_r+0x80>
8000869c:	6e 4b       	ld.w	r11,r7[0x10]
8000869e:	0c 9c       	mov	r12,r6
800086a0:	fe b0 f5 44 	rcall	80007128 <_free_r>
800086a4:	6e db       	ld.w	r11,r7[0x34]
800086a6:	58 0b       	cp.w	r11,0
800086a8:	c0 a0       	breq	800086bc <_fclose_r+0x98>
800086aa:	ee c8 ff bc 	sub	r8,r7,-68
800086ae:	10 3b       	cp.w	r11,r8
800086b0:	c0 40       	breq	800086b8 <_fclose_r+0x94>
800086b2:	0c 9c       	mov	r12,r6
800086b4:	fe b0 f5 3a 	rcall	80007128 <_free_r>
800086b8:	30 08       	mov	r8,0
800086ba:	8f d8       	st.w	r7[0x34],r8
800086bc:	6f 2b       	ld.w	r11,r7[0x48]
800086be:	58 0b       	cp.w	r11,0
800086c0:	c0 70       	breq	800086ce <_fclose_r+0xaa>
800086c2:	0c 9c       	mov	r12,r6
800086c4:	fe b0 f5 32 	rcall	80007128 <_free_r>
800086c8:	30 08       	mov	r8,0
800086ca:	ef 48 00 48 	st.w	r7[72],r8
800086ce:	30 08       	mov	r8,0
800086d0:	ae 68       	st.h	r7[0xc],r8
800086d2:	fe b0 f4 40 	rcall	80006f52 <__sfp_lock_release>
800086d6:	0a 9c       	mov	r12,r5
800086d8:	d8 22       	popm	r4-r7,pc
800086da:	d7 03       	nop

800086dc <fclose>:
800086dc:	d4 01       	pushm	lr
800086de:	e0 68 01 18 	mov	r8,280
800086e2:	18 9b       	mov	r11,r12
800086e4:	70 0c       	ld.w	r12,r8[0x0]
800086e6:	c9 ff       	rcall	80008624 <_fclose_r>
800086e8:	d8 02       	popm	pc
800086ea:	d7 03       	nop

800086ec <_fstat_r>:
800086ec:	d4 21       	pushm	r4-r7,lr
800086ee:	16 98       	mov	r8,r11
800086f0:	18 97       	mov	r7,r12
800086f2:	10 9c       	mov	r12,r8
800086f4:	30 08       	mov	r8,0
800086f6:	e0 66 08 08 	mov	r6,2056
800086fa:	14 9b       	mov	r11,r10
800086fc:	8d 08       	st.w	r6[0x0],r8
800086fe:	cf de       	rcall	800084f8 <_fstat>
80008700:	5b fc       	cp.w	r12,-1
80008702:	c0 51       	brne	8000870c <_fstat_r+0x20>
80008704:	6c 08       	ld.w	r8,r6[0x0]
80008706:	58 08       	cp.w	r8,0
80008708:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000870c:	d8 22       	popm	r4-r7,pc
8000870e:	d7 03       	nop

80008710 <_lseek_r>:
80008710:	d4 21       	pushm	r4-r7,lr
80008712:	16 98       	mov	r8,r11
80008714:	18 97       	mov	r7,r12
80008716:	10 9c       	mov	r12,r8
80008718:	30 08       	mov	r8,0
8000871a:	14 9b       	mov	r11,r10
8000871c:	e0 66 08 08 	mov	r6,2056
80008720:	12 9a       	mov	r10,r9
80008722:	8d 08       	st.w	r6[0x0],r8
80008724:	cb 8e       	rcall	80008494 <_lseek>
80008726:	5b fc       	cp.w	r12,-1
80008728:	c0 51       	brne	80008732 <_lseek_r+0x22>
8000872a:	6c 08       	ld.w	r8,r6[0x0]
8000872c:	58 08       	cp.w	r8,0
8000872e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008732:	d8 22       	popm	r4-r7,pc

80008734 <_read_r>:
80008734:	d4 21       	pushm	r4-r7,lr
80008736:	16 98       	mov	r8,r11
80008738:	18 97       	mov	r7,r12
8000873a:	10 9c       	mov	r12,r8
8000873c:	30 08       	mov	r8,0
8000873e:	14 9b       	mov	r11,r10
80008740:	e0 66 08 08 	mov	r6,2056
80008744:	12 9a       	mov	r10,r9
80008746:	8d 08       	st.w	r6[0x0],r8
80008748:	cb 0e       	rcall	800084a8 <_read>
8000874a:	5b fc       	cp.w	r12,-1
8000874c:	c0 51       	brne	80008756 <_read_r+0x22>
8000874e:	6c 08       	ld.w	r8,r6[0x0]
80008750:	58 08       	cp.w	r8,0
80008752:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008756:	d8 22       	popm	r4-r7,pc

80008758 <__avr32_f64_sub_from_add>:
80008758:	ee 19 80 00 	eorh	r9,0x8000

8000875c <__avr32_f64_sub>:
8000875c:	f7 e9 20 0c 	eor	r12,r11,r9
80008760:	e0 86 00 ca 	brmi	800088f4 <__avr32_f64_add_from_sub>
80008764:	eb cd 40 e0 	pushm	r5-r7,lr
80008768:	16 9c       	mov	r12,r11
8000876a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000876e:	bf db       	cbr	r11,0x1f
80008770:	bf d9       	cbr	r9,0x1f
80008772:	10 3a       	cp.w	r10,r8
80008774:	f2 0b 13 00 	cpc	r11,r9
80008778:	c0 92       	brcc	8000878a <__avr32_f64_sub+0x2e>
8000877a:	16 97       	mov	r7,r11
8000877c:	12 9b       	mov	r11,r9
8000877e:	0e 99       	mov	r9,r7
80008780:	14 97       	mov	r7,r10
80008782:	10 9a       	mov	r10,r8
80008784:	0e 98       	mov	r8,r7
80008786:	ee 1c 80 00 	eorh	r12,0x8000
8000878a:	f6 07 16 14 	lsr	r7,r11,0x14
8000878e:	ab 7b       	lsl	r11,0xb
80008790:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008794:	ab 7a       	lsl	r10,0xb
80008796:	bf bb       	sbr	r11,0x1f
80008798:	f2 06 16 14 	lsr	r6,r9,0x14
8000879c:	c4 40       	breq	80008824 <__avr32_f64_sub_opL_subnormal>
8000879e:	ab 79       	lsl	r9,0xb
800087a0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800087a4:	ab 78       	lsl	r8,0xb
800087a6:	bf b9       	sbr	r9,0x1f

800087a8 <__avr32_f64_sub_opL_subnormal_done>:
800087a8:	e0 47 07 ff 	cp.w	r7,2047
800087ac:	c4 f0       	breq	8000884a <__avr32_f64_sub_opH_nan_or_inf>
800087ae:	0e 26       	rsub	r6,r7
800087b0:	c1 20       	breq	800087d4 <__avr32_f64_sub_shift_done>
800087b2:	ec 05 11 20 	rsub	r5,r6,32
800087b6:	e0 46 00 20 	cp.w	r6,32
800087ba:	c7 c2       	brcc	800088b2 <__avr32_f64_sub_longshift>
800087bc:	f0 05 09 4e 	lsl	lr,r8,r5
800087c0:	f2 05 09 45 	lsl	r5,r9,r5
800087c4:	f0 06 0a 48 	lsr	r8,r8,r6
800087c8:	f2 06 0a 49 	lsr	r9,r9,r6
800087cc:	0a 48       	or	r8,r5
800087ce:	58 0e       	cp.w	lr,0
800087d0:	5f 1e       	srne	lr
800087d2:	1c 48       	or	r8,lr

800087d4 <__avr32_f64_sub_shift_done>:
800087d4:	10 1a       	sub	r10,r8
800087d6:	f6 09 01 4b 	sbc	r11,r11,r9
800087da:	f6 06 12 00 	clz	r6,r11
800087de:	c0 e0       	breq	800087fa <__avr32_f64_sub_longnormalize_done>
800087e0:	c7 83       	brcs	800088d0 <__avr32_f64_sub_longnormalize>
800087e2:	ec 0e 11 20 	rsub	lr,r6,32
800087e6:	f6 06 09 4b 	lsl	r11,r11,r6
800087ea:	f4 0e 0a 4e 	lsr	lr,r10,lr
800087ee:	1c 4b       	or	r11,lr
800087f0:	f4 06 09 4a 	lsl	r10,r10,r6
800087f4:	0c 17       	sub	r7,r6
800087f6:	e0 8a 00 39 	brle	80008868 <__avr32_f64_sub_subnormal_result>

800087fa <__avr32_f64_sub_longnormalize_done>:
800087fa:	f4 09 15 15 	lsl	r9,r10,0x15
800087fe:	ab 9a       	lsr	r10,0xb
80008800:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008804:	ab 9b       	lsr	r11,0xb
80008806:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000880a:	18 4b       	or	r11,r12

8000880c <__avr32_f64_sub_round>:
8000880c:	fc 17 80 00 	movh	r7,0x8000
80008810:	ed ba 00 00 	bld	r10,0x0
80008814:	f7 b7 01 ff 	subne	r7,-1
80008818:	0e 39       	cp.w	r9,r7
8000881a:	5f 29       	srhs	r9
8000881c:	12 0a       	add	r10,r9
8000881e:	5c 0b       	acr	r11
80008820:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008824 <__avr32_f64_sub_opL_subnormal>:
80008824:	ab 79       	lsl	r9,0xb
80008826:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000882a:	ab 78       	lsl	r8,0xb
8000882c:	f3 e8 10 0e 	or	lr,r9,r8
80008830:	f9 b6 01 01 	movne	r6,1
80008834:	ee 0e 11 00 	rsub	lr,r7,0
80008838:	f9 b7 00 01 	moveq	r7,1
8000883c:	ef bb 00 1f 	bst	r11,0x1f
80008840:	f7 ea 10 0e 	or	lr,r11,r10
80008844:	f9 b7 00 00 	moveq	r7,0
80008848:	cb 0b       	rjmp	800087a8 <__avr32_f64_sub_opL_subnormal_done>

8000884a <__avr32_f64_sub_opH_nan_or_inf>:
8000884a:	bf db       	cbr	r11,0x1f
8000884c:	f7 ea 10 0e 	or	lr,r11,r10
80008850:	c0 81       	brne	80008860 <__avr32_f64_sub_return_nan>
80008852:	e0 46 07 ff 	cp.w	r6,2047
80008856:	c0 50       	breq	80008860 <__avr32_f64_sub_return_nan>
80008858:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000885c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008860 <__avr32_f64_sub_return_nan>:
80008860:	3f fa       	mov	r10,-1
80008862:	3f fb       	mov	r11,-1
80008864:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008868 <__avr32_f64_sub_subnormal_result>:
80008868:	5c 37       	neg	r7
8000886a:	2f f7       	sub	r7,-1
8000886c:	f1 b7 04 c0 	satu	r7,0x6
80008870:	e0 47 00 20 	cp.w	r7,32
80008874:	c1 14       	brge	80008896 <__avr32_f64_sub_subnormal_result+0x2e>
80008876:	ee 08 11 20 	rsub	r8,r7,32
8000887a:	f4 08 09 49 	lsl	r9,r10,r8
8000887e:	5f 16       	srne	r6
80008880:	f4 07 0a 4a 	lsr	r10,r10,r7
80008884:	0c 4a       	or	r10,r6
80008886:	f6 08 09 49 	lsl	r9,r11,r8
8000888a:	f5 e9 10 0a 	or	r10,r10,r9
8000888e:	f4 07 0a 4b 	lsr	r11,r10,r7
80008892:	30 07       	mov	r7,0
80008894:	cb 3b       	rjmp	800087fa <__avr32_f64_sub_longnormalize_done>
80008896:	ee 08 11 40 	rsub	r8,r7,64
8000889a:	f6 08 09 49 	lsl	r9,r11,r8
8000889e:	14 49       	or	r9,r10
800088a0:	5f 16       	srne	r6
800088a2:	f6 07 0a 4a 	lsr	r10,r11,r7
800088a6:	0c 4a       	or	r10,r6
800088a8:	30 0b       	mov	r11,0
800088aa:	30 07       	mov	r7,0
800088ac:	ca 7b       	rjmp	800087fa <__avr32_f64_sub_longnormalize_done>
800088ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800088b2 <__avr32_f64_sub_longshift>:
800088b2:	f1 b6 04 c0 	satu	r6,0x6
800088b6:	f0 0e 17 00 	moveq	lr,r8
800088ba:	c0 40       	breq	800088c2 <__avr32_f64_sub_longshift+0x10>
800088bc:	f2 05 09 4e 	lsl	lr,r9,r5
800088c0:	10 4e       	or	lr,r8
800088c2:	f2 06 0a 48 	lsr	r8,r9,r6
800088c6:	30 09       	mov	r9,0
800088c8:	58 0e       	cp.w	lr,0
800088ca:	5f 1e       	srne	lr
800088cc:	1c 48       	or	r8,lr
800088ce:	c8 3b       	rjmp	800087d4 <__avr32_f64_sub_shift_done>

800088d0 <__avr32_f64_sub_longnormalize>:
800088d0:	f4 06 12 00 	clz	r6,r10
800088d4:	f9 b7 03 00 	movlo	r7,0
800088d8:	f9 b6 03 00 	movlo	r6,0
800088dc:	f9 bc 03 00 	movlo	r12,0
800088e0:	f7 b6 02 e0 	subhs	r6,-32
800088e4:	f4 06 09 4b 	lsl	r11,r10,r6
800088e8:	30 0a       	mov	r10,0
800088ea:	0c 17       	sub	r7,r6
800088ec:	fe 9a ff be 	brle	80008868 <__avr32_f64_sub_subnormal_result>
800088f0:	c8 5b       	rjmp	800087fa <__avr32_f64_sub_longnormalize_done>
800088f2:	d7 03       	nop

800088f4 <__avr32_f64_add_from_sub>:
800088f4:	ee 19 80 00 	eorh	r9,0x8000

800088f8 <__avr32_f64_add>:
800088f8:	f7 e9 20 0c 	eor	r12,r11,r9
800088fc:	fe 96 ff 2e 	brmi	80008758 <__avr32_f64_sub_from_add>
80008900:	eb cd 40 e0 	pushm	r5-r7,lr
80008904:	16 9c       	mov	r12,r11
80008906:	e6 1c 80 00 	andh	r12,0x8000,COH
8000890a:	bf db       	cbr	r11,0x1f
8000890c:	bf d9       	cbr	r9,0x1f
8000890e:	12 3b       	cp.w	r11,r9
80008910:	c0 72       	brcc	8000891e <__avr32_f64_add+0x26>
80008912:	16 97       	mov	r7,r11
80008914:	12 9b       	mov	r11,r9
80008916:	0e 99       	mov	r9,r7
80008918:	14 97       	mov	r7,r10
8000891a:	10 9a       	mov	r10,r8
8000891c:	0e 98       	mov	r8,r7
8000891e:	30 0e       	mov	lr,0
80008920:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008924:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008928:	b5 ab       	sbr	r11,0x14
8000892a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000892e:	c6 20       	breq	800089f2 <__avr32_f64_add_op2_subnormal>
80008930:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008934:	b5 a9       	sbr	r9,0x14
80008936:	e0 47 07 ff 	cp.w	r7,2047
8000893a:	c2 80       	breq	8000898a <__avr32_f64_add_opH_nan_or_inf>
8000893c:	0e 26       	rsub	r6,r7
8000893e:	c1 20       	breq	80008962 <__avr32_f64_add_shift_done>
80008940:	e0 46 00 36 	cp.w	r6,54
80008944:	c1 52       	brcc	8000896e <__avr32_f64_add_res_of_done>
80008946:	ec 05 11 20 	rsub	r5,r6,32
8000894a:	e0 46 00 20 	cp.w	r6,32
8000894e:	c3 52       	brcc	800089b8 <__avr32_f64_add_longshift>
80008950:	f0 05 09 4e 	lsl	lr,r8,r5
80008954:	f2 05 09 45 	lsl	r5,r9,r5
80008958:	f0 06 0a 48 	lsr	r8,r8,r6
8000895c:	f2 06 0a 49 	lsr	r9,r9,r6
80008960:	0a 48       	or	r8,r5

80008962 <__avr32_f64_add_shift_done>:
80008962:	10 0a       	add	r10,r8
80008964:	f6 09 00 4b 	adc	r11,r11,r9
80008968:	ed bb 00 15 	bld	r11,0x15
8000896c:	c3 40       	breq	800089d4 <__avr32_f64_add_res_of>

8000896e <__avr32_f64_add_res_of_done>:
8000896e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008972:	18 4b       	or	r11,r12

80008974 <__avr32_f64_add_round>:
80008974:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008978:	18 4e       	or	lr,r12
8000897a:	ee 1e 80 00 	eorh	lr,0x8000
8000897e:	f1 be 04 20 	satu	lr,0x1
80008982:	1c 0a       	add	r10,lr
80008984:	5c 0b       	acr	r11
80008986:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000898a <__avr32_f64_add_opH_nan_or_inf>:
8000898a:	b5 cb       	cbr	r11,0x14
8000898c:	f7 ea 10 0e 	or	lr,r11,r10
80008990:	c1 01       	brne	800089b0 <__avr32_f64_add_return_nan>
80008992:	e0 46 07 ff 	cp.w	r6,2047
80008996:	c0 30       	breq	8000899c <__avr32_f64_add_opL_nan_or_inf>
80008998:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000899c <__avr32_f64_add_opL_nan_or_inf>:
8000899c:	b5 c9       	cbr	r9,0x14
8000899e:	f3 e8 10 0e 	or	lr,r9,r8
800089a2:	c0 71       	brne	800089b0 <__avr32_f64_add_return_nan>
800089a4:	30 0a       	mov	r10,0
800089a6:	fc 1b 7f f0 	movh	r11,0x7ff0
800089aa:	18 4b       	or	r11,r12
800089ac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089b0 <__avr32_f64_add_return_nan>:
800089b0:	3f fa       	mov	r10,-1
800089b2:	3f fb       	mov	r11,-1
800089b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089b8 <__avr32_f64_add_longshift>:
800089b8:	f1 b6 04 c0 	satu	r6,0x6
800089bc:	f0 0e 17 00 	moveq	lr,r8
800089c0:	c0 60       	breq	800089cc <__avr32_f64_add_longshift+0x14>
800089c2:	f2 05 09 4e 	lsl	lr,r9,r5
800089c6:	58 08       	cp.w	r8,0
800089c8:	5f 18       	srne	r8
800089ca:	10 4e       	or	lr,r8
800089cc:	f2 06 0a 48 	lsr	r8,r9,r6
800089d0:	30 09       	mov	r9,0
800089d2:	cc 8b       	rjmp	80008962 <__avr32_f64_add_shift_done>

800089d4 <__avr32_f64_add_res_of>:
800089d4:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800089d8:	a1 9b       	lsr	r11,0x1
800089da:	5d 0a       	ror	r10
800089dc:	5d 0e       	ror	lr
800089de:	2f f7       	sub	r7,-1
800089e0:	e0 47 07 ff 	cp.w	r7,2047
800089e4:	f9 ba 00 00 	moveq	r10,0
800089e8:	f9 bb 00 00 	moveq	r11,0
800089ec:	f9 be 00 00 	moveq	lr,0
800089f0:	cb fb       	rjmp	8000896e <__avr32_f64_add_res_of_done>

800089f2 <__avr32_f64_add_op2_subnormal>:
800089f2:	30 16       	mov	r6,1
800089f4:	58 07       	cp.w	r7,0
800089f6:	ca 01       	brne	80008936 <__avr32_f64_add+0x3e>
800089f8:	b5 cb       	cbr	r11,0x14
800089fa:	10 0a       	add	r10,r8
800089fc:	f6 09 00 4b 	adc	r11,r11,r9
80008a00:	18 4b       	or	r11,r12
80008a02:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008a06:	d7 03       	nop

80008a08 <__avr32_f64_to_u32>:
80008a08:	58 0b       	cp.w	r11,0
80008a0a:	5e 6d       	retmi	0

80008a0c <__avr32_f64_to_s32>:
80008a0c:	f6 0c 15 01 	lsl	r12,r11,0x1
80008a10:	b5 9c       	lsr	r12,0x15
80008a12:	e0 2c 03 ff 	sub	r12,1023
80008a16:	5e 3d       	retlo	0
80008a18:	f8 0c 11 1f 	rsub	r12,r12,31
80008a1c:	16 99       	mov	r9,r11
80008a1e:	ab 7b       	lsl	r11,0xb
80008a20:	bf bb       	sbr	r11,0x1f
80008a22:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008a26:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008a2a:	a1 79       	lsl	r9,0x1
80008a2c:	5e 2b       	reths	r11
80008a2e:	5c 3b       	neg	r11
80008a30:	5e fb       	retal	r11

80008a32 <__avr32_f64_cmp_eq>:
80008a32:	10 3a       	cp.w	r10,r8
80008a34:	f2 0b 13 00 	cpc	r11,r9
80008a38:	c0 80       	breq	80008a48 <__avr32_f64_cmp_eq+0x16>
80008a3a:	a1 7b       	lsl	r11,0x1
80008a3c:	a1 79       	lsl	r9,0x1
80008a3e:	14 4b       	or	r11,r10
80008a40:	12 4b       	or	r11,r9
80008a42:	10 4b       	or	r11,r8
80008a44:	5e 0f       	reteq	1
80008a46:	5e fd       	retal	0
80008a48:	a1 7b       	lsl	r11,0x1
80008a4a:	fc 1c ff e0 	movh	r12,0xffe0
80008a4e:	58 0a       	cp.w	r10,0
80008a50:	f8 0b 13 00 	cpc	r11,r12
80008a54:	5e 8f       	retls	1
80008a56:	5e fd       	retal	0

80008a58 <__avr32_f64_cmp_ge>:
80008a58:	1a de       	st.w	--sp,lr
80008a5a:	1a d7       	st.w	--sp,r7
80008a5c:	a1 7b       	lsl	r11,0x1
80008a5e:	5f 3c       	srlo	r12
80008a60:	a1 79       	lsl	r9,0x1
80008a62:	5f 37       	srlo	r7
80008a64:	5c fc       	rol	r12
80008a66:	fc 1e ff e0 	movh	lr,0xffe0
80008a6a:	58 0a       	cp.w	r10,0
80008a6c:	fc 0b 13 00 	cpc	r11,lr
80008a70:	e0 8b 00 1d 	brhi	80008aaa <__avr32_f64_cmp_ge+0x52>
80008a74:	58 08       	cp.w	r8,0
80008a76:	fc 09 13 00 	cpc	r9,lr
80008a7a:	e0 8b 00 18 	brhi	80008aaa <__avr32_f64_cmp_ge+0x52>
80008a7e:	58 0b       	cp.w	r11,0
80008a80:	f5 ba 00 00 	subfeq	r10,0
80008a84:	c1 50       	breq	80008aae <__avr32_f64_cmp_ge+0x56>
80008a86:	1b 07       	ld.w	r7,sp++
80008a88:	1b 0e       	ld.w	lr,sp++
80008a8a:	58 3c       	cp.w	r12,3
80008a8c:	c0 a0       	breq	80008aa0 <__avr32_f64_cmp_ge+0x48>
80008a8e:	58 1c       	cp.w	r12,1
80008a90:	c0 33       	brcs	80008a96 <__avr32_f64_cmp_ge+0x3e>
80008a92:	5e 0f       	reteq	1
80008a94:	5e 1d       	retne	0
80008a96:	10 3a       	cp.w	r10,r8
80008a98:	f2 0b 13 00 	cpc	r11,r9
80008a9c:	5e 2f       	reths	1
80008a9e:	5e 3d       	retlo	0
80008aa0:	14 38       	cp.w	r8,r10
80008aa2:	f6 09 13 00 	cpc	r9,r11
80008aa6:	5e 2f       	reths	1
80008aa8:	5e 3d       	retlo	0
80008aaa:	1b 07       	ld.w	r7,sp++
80008aac:	d8 0a       	popm	pc,r12=0
80008aae:	58 17       	cp.w	r7,1
80008ab0:	5f 0c       	sreq	r12
80008ab2:	58 09       	cp.w	r9,0
80008ab4:	f5 b8 00 00 	subfeq	r8,0
80008ab8:	1b 07       	ld.w	r7,sp++
80008aba:	1b 0e       	ld.w	lr,sp++
80008abc:	5e 0f       	reteq	1
80008abe:	5e fc       	retal	r12

80008ac0 <__avr32_f64_cmp_lt>:
80008ac0:	1a de       	st.w	--sp,lr
80008ac2:	1a d7       	st.w	--sp,r7
80008ac4:	a1 7b       	lsl	r11,0x1
80008ac6:	5f 3c       	srlo	r12
80008ac8:	a1 79       	lsl	r9,0x1
80008aca:	5f 37       	srlo	r7
80008acc:	5c fc       	rol	r12
80008ace:	fc 1e ff e0 	movh	lr,0xffe0
80008ad2:	58 0a       	cp.w	r10,0
80008ad4:	fc 0b 13 00 	cpc	r11,lr
80008ad8:	e0 8b 00 1d 	brhi	80008b12 <__avr32_f64_cmp_lt+0x52>
80008adc:	58 08       	cp.w	r8,0
80008ade:	fc 09 13 00 	cpc	r9,lr
80008ae2:	e0 8b 00 18 	brhi	80008b12 <__avr32_f64_cmp_lt+0x52>
80008ae6:	58 0b       	cp.w	r11,0
80008ae8:	f5 ba 00 00 	subfeq	r10,0
80008aec:	c1 50       	breq	80008b16 <__avr32_f64_cmp_lt+0x56>
80008aee:	1b 07       	ld.w	r7,sp++
80008af0:	1b 0e       	ld.w	lr,sp++
80008af2:	58 3c       	cp.w	r12,3
80008af4:	c0 a0       	breq	80008b08 <__avr32_f64_cmp_lt+0x48>
80008af6:	58 1c       	cp.w	r12,1
80008af8:	c0 33       	brcs	80008afe <__avr32_f64_cmp_lt+0x3e>
80008afa:	5e 0d       	reteq	0
80008afc:	5e 1f       	retne	1
80008afe:	10 3a       	cp.w	r10,r8
80008b00:	f2 0b 13 00 	cpc	r11,r9
80008b04:	5e 2d       	reths	0
80008b06:	5e 3f       	retlo	1
80008b08:	14 38       	cp.w	r8,r10
80008b0a:	f6 09 13 00 	cpc	r9,r11
80008b0e:	5e 2d       	reths	0
80008b10:	5e 3f       	retlo	1
80008b12:	1b 07       	ld.w	r7,sp++
80008b14:	d8 0a       	popm	pc,r12=0
80008b16:	58 17       	cp.w	r7,1
80008b18:	5f 1c       	srne	r12
80008b1a:	58 09       	cp.w	r9,0
80008b1c:	f5 b8 00 00 	subfeq	r8,0
80008b20:	1b 07       	ld.w	r7,sp++
80008b22:	1b 0e       	ld.w	lr,sp++
80008b24:	5e 0d       	reteq	0
80008b26:	5e fc       	retal	r12

80008b28 <__avr32_f64_div>:
80008b28:	eb cd 40 ff 	pushm	r0-r7,lr
80008b2c:	f7 e9 20 0e 	eor	lr,r11,r9
80008b30:	f6 07 16 14 	lsr	r7,r11,0x14
80008b34:	a9 7b       	lsl	r11,0x9
80008b36:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008b3a:	a9 7a       	lsl	r10,0x9
80008b3c:	bd bb       	sbr	r11,0x1d
80008b3e:	e4 1b 3f ff 	andh	r11,0x3fff
80008b42:	ab d7       	cbr	r7,0xb
80008b44:	e0 80 00 cc 	breq	80008cdc <__avr32_f64_div_round_subnormal+0x54>
80008b48:	e0 47 07 ff 	cp.w	r7,2047
80008b4c:	e0 84 00 b5 	brge	80008cb6 <__avr32_f64_div_round_subnormal+0x2e>
80008b50:	f2 06 16 14 	lsr	r6,r9,0x14
80008b54:	a9 79       	lsl	r9,0x9
80008b56:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008b5a:	a9 78       	lsl	r8,0x9
80008b5c:	bd b9       	sbr	r9,0x1d
80008b5e:	e4 19 3f ff 	andh	r9,0x3fff
80008b62:	ab d6       	cbr	r6,0xb
80008b64:	e0 80 00 e2 	breq	80008d28 <__avr32_f64_div_round_subnormal+0xa0>
80008b68:	e0 46 07 ff 	cp.w	r6,2047
80008b6c:	e0 84 00 b2 	brge	80008cd0 <__avr32_f64_div_round_subnormal+0x48>
80008b70:	0c 17       	sub	r7,r6
80008b72:	fe 37 fc 01 	sub	r7,-1023
80008b76:	fc 1c 80 00 	movh	r12,0x8000
80008b7a:	f8 03 16 01 	lsr	r3,r12,0x1
80008b7e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008b82:	5c d4       	com	r4
80008b84:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008b88:	e6 09 06 44 	mulu.d	r4,r3,r9
80008b8c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008b90:	e6 05 06 44 	mulu.d	r4,r3,r5
80008b94:	ea 03 15 02 	lsl	r3,r5,0x2
80008b98:	e6 09 06 44 	mulu.d	r4,r3,r9
80008b9c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008ba0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008ba4:	ea 03 15 02 	lsl	r3,r5,0x2
80008ba8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bac:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008bb0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008bb4:	ea 03 15 02 	lsl	r3,r5,0x2
80008bb8:	e6 08 06 40 	mulu.d	r0,r3,r8
80008bbc:	e4 09 07 40 	macu.d	r0,r2,r9
80008bc0:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bc4:	02 04       	add	r4,r1
80008bc6:	5c 05       	acr	r5
80008bc8:	a3 65       	lsl	r5,0x2
80008bca:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008bce:	a3 64       	lsl	r4,0x2
80008bd0:	5c 34       	neg	r4
80008bd2:	f8 05 01 45 	sbc	r5,r12,r5
80008bd6:	e6 04 06 40 	mulu.d	r0,r3,r4
80008bda:	e4 05 07 40 	macu.d	r0,r2,r5
80008bde:	e6 05 06 44 	mulu.d	r4,r3,r5
80008be2:	02 04       	add	r4,r1
80008be4:	5c 05       	acr	r5
80008be6:	ea 03 15 02 	lsl	r3,r5,0x2
80008bea:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008bee:	e8 02 15 02 	lsl	r2,r4,0x2
80008bf2:	e6 08 06 40 	mulu.d	r0,r3,r8
80008bf6:	e4 09 07 40 	macu.d	r0,r2,r9
80008bfa:	e6 09 06 44 	mulu.d	r4,r3,r9
80008bfe:	02 04       	add	r4,r1
80008c00:	5c 05       	acr	r5
80008c02:	a3 65       	lsl	r5,0x2
80008c04:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008c08:	a3 64       	lsl	r4,0x2
80008c0a:	5c 34       	neg	r4
80008c0c:	f8 05 01 45 	sbc	r5,r12,r5
80008c10:	e6 04 06 40 	mulu.d	r0,r3,r4
80008c14:	e4 05 07 40 	macu.d	r0,r2,r5
80008c18:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c1c:	02 04       	add	r4,r1
80008c1e:	5c 05       	acr	r5
80008c20:	ea 03 15 02 	lsl	r3,r5,0x2
80008c24:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008c28:	e8 02 15 02 	lsl	r2,r4,0x2
80008c2c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008c30:	e4 0b 07 40 	macu.d	r0,r2,r11
80008c34:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008c38:	02 02       	add	r2,r1
80008c3a:	5c 03       	acr	r3
80008c3c:	ed b3 00 1c 	bld	r3,0x1c
80008c40:	c0 90       	breq	80008c52 <__avr32_f64_div+0x12a>
80008c42:	a1 72       	lsl	r2,0x1
80008c44:	5c f3       	rol	r3
80008c46:	20 17       	sub	r7,1
80008c48:	a3 9a       	lsr	r10,0x3
80008c4a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008c4e:	a3 9b       	lsr	r11,0x3
80008c50:	c0 58       	rjmp	80008c5a <__avr32_f64_div+0x132>
80008c52:	a5 8a       	lsr	r10,0x4
80008c54:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008c58:	a5 8b       	lsr	r11,0x4
80008c5a:	58 07       	cp.w	r7,0
80008c5c:	e0 8a 00 8b 	brle	80008d72 <__avr32_f64_div_res_subnormal>
80008c60:	e0 12 ff 00 	andl	r2,0xff00
80008c64:	e8 12 00 80 	orl	r2,0x80
80008c68:	e6 08 06 40 	mulu.d	r0,r3,r8
80008c6c:	e4 09 07 40 	macu.d	r0,r2,r9
80008c70:	e4 08 06 44 	mulu.d	r4,r2,r8
80008c74:	e6 09 06 48 	mulu.d	r8,r3,r9
80008c78:	00 05       	add	r5,r0
80008c7a:	f0 01 00 48 	adc	r8,r8,r1
80008c7e:	5c 09       	acr	r9
80008c80:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008c84:	58 04       	cp.w	r4,0
80008c86:	5c 25       	cpc	r5

80008c88 <__avr32_f64_div_round_subnormal>:
80008c88:	f4 08 13 00 	cpc	r8,r10
80008c8c:	f6 09 13 00 	cpc	r9,r11
80008c90:	5f 36       	srlo	r6
80008c92:	f8 06 17 00 	moveq	r6,r12
80008c96:	e4 0a 16 08 	lsr	r10,r2,0x8
80008c9a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008c9e:	e6 0b 16 08 	lsr	r11,r3,0x8
80008ca2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008ca6:	ed be 00 1f 	bld	lr,0x1f
80008caa:	ef bb 00 1f 	bst	r11,0x1f
80008cae:	0c 0a       	add	r10,r6
80008cb0:	5c 0b       	acr	r11
80008cb2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008cb6:	e4 1b 00 0f 	andh	r11,0xf
80008cba:	14 4b       	or	r11,r10
80008cbc:	e0 81 00 a7 	brne	80008e0a <__avr32_f64_div_res_subnormal+0x98>
80008cc0:	f2 06 16 14 	lsr	r6,r9,0x14
80008cc4:	ab d6       	cbr	r6,0xb
80008cc6:	e0 46 07 ff 	cp.w	r6,2047
80008cca:	e0 81 00 a4 	brne	80008e12 <__avr32_f64_div_res_subnormal+0xa0>
80008cce:	c9 e8       	rjmp	80008e0a <__avr32_f64_div_res_subnormal+0x98>
80008cd0:	e4 19 00 0f 	andh	r9,0xf
80008cd4:	10 49       	or	r9,r8
80008cd6:	e0 81 00 9a 	brne	80008e0a <__avr32_f64_div_res_subnormal+0x98>
80008cda:	c9 28       	rjmp	80008dfe <__avr32_f64_div_res_subnormal+0x8c>
80008cdc:	a3 7b       	lsl	r11,0x3
80008cde:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008ce2:	a3 7a       	lsl	r10,0x3
80008ce4:	f5 eb 10 04 	or	r4,r10,r11
80008ce8:	e0 80 00 a0 	breq	80008e28 <__avr32_f64_div_op1_zero>
80008cec:	f6 04 12 00 	clz	r4,r11
80008cf0:	c1 70       	breq	80008d1e <__avr32_f64_div_round_subnormal+0x96>
80008cf2:	c0 c3       	brcs	80008d0a <__avr32_f64_div_round_subnormal+0x82>
80008cf4:	e8 05 11 20 	rsub	r5,r4,32
80008cf8:	f6 04 09 4b 	lsl	r11,r11,r4
80008cfc:	f4 05 0a 45 	lsr	r5,r10,r5
80008d00:	0a 4b       	or	r11,r5
80008d02:	f4 04 09 4a 	lsl	r10,r10,r4
80008d06:	08 17       	sub	r7,r4
80008d08:	c0 b8       	rjmp	80008d1e <__avr32_f64_div_round_subnormal+0x96>
80008d0a:	f4 04 12 00 	clz	r4,r10
80008d0e:	f9 b4 03 00 	movlo	r4,0
80008d12:	f7 b4 02 e0 	subhs	r4,-32
80008d16:	f4 04 09 4b 	lsl	r11,r10,r4
80008d1a:	30 0a       	mov	r10,0
80008d1c:	08 17       	sub	r7,r4
80008d1e:	a3 8a       	lsr	r10,0x2
80008d20:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008d24:	a3 8b       	lsr	r11,0x2
80008d26:	c1 1b       	rjmp	80008b48 <__avr32_f64_div+0x20>
80008d28:	a3 79       	lsl	r9,0x3
80008d2a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008d2e:	a3 78       	lsl	r8,0x3
80008d30:	f3 e8 10 04 	or	r4,r9,r8
80008d34:	c6 f0       	breq	80008e12 <__avr32_f64_div_res_subnormal+0xa0>
80008d36:	f2 04 12 00 	clz	r4,r9
80008d3a:	c1 70       	breq	80008d68 <__avr32_f64_div_round_subnormal+0xe0>
80008d3c:	c0 c3       	brcs	80008d54 <__avr32_f64_div_round_subnormal+0xcc>
80008d3e:	e8 05 11 20 	rsub	r5,r4,32
80008d42:	f2 04 09 49 	lsl	r9,r9,r4
80008d46:	f0 05 0a 45 	lsr	r5,r8,r5
80008d4a:	0a 49       	or	r9,r5
80008d4c:	f0 04 09 48 	lsl	r8,r8,r4
80008d50:	08 16       	sub	r6,r4
80008d52:	c0 b8       	rjmp	80008d68 <__avr32_f64_div_round_subnormal+0xe0>
80008d54:	f0 04 12 00 	clz	r4,r8
80008d58:	f9 b4 03 00 	movlo	r4,0
80008d5c:	f7 b4 02 e0 	subhs	r4,-32
80008d60:	f0 04 09 49 	lsl	r9,r8,r4
80008d64:	30 08       	mov	r8,0
80008d66:	08 16       	sub	r6,r4
80008d68:	a3 88       	lsr	r8,0x2
80008d6a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008d6e:	a3 89       	lsr	r9,0x2
80008d70:	cf ca       	rjmp	80008b68 <__avr32_f64_div+0x40>

80008d72 <__avr32_f64_div_res_subnormal>:
80008d72:	5c 37       	neg	r7
80008d74:	2f f7       	sub	r7,-1
80008d76:	f1 b7 04 c0 	satu	r7,0x6
80008d7a:	e0 47 00 20 	cp.w	r7,32
80008d7e:	c1 54       	brge	80008da8 <__avr32_f64_div_res_subnormal+0x36>
80008d80:	ee 06 11 20 	rsub	r6,r7,32
80008d84:	e4 07 0a 42 	lsr	r2,r2,r7
80008d88:	e6 06 09 4c 	lsl	r12,r3,r6
80008d8c:	18 42       	or	r2,r12
80008d8e:	e6 07 0a 43 	lsr	r3,r3,r7
80008d92:	f4 06 09 41 	lsl	r1,r10,r6
80008d96:	f4 07 0a 4a 	lsr	r10,r10,r7
80008d9a:	f6 06 09 4c 	lsl	r12,r11,r6
80008d9e:	18 4a       	or	r10,r12
80008da0:	f6 07 0a 4b 	lsr	r11,r11,r7
80008da4:	30 00       	mov	r0,0
80008da6:	c1 58       	rjmp	80008dd0 <__avr32_f64_div_res_subnormal+0x5e>
80008da8:	ee 06 11 20 	rsub	r6,r7,32
80008dac:	f9 b0 00 00 	moveq	r0,0
80008db0:	f9 bc 00 00 	moveq	r12,0
80008db4:	c0 50       	breq	80008dbe <__avr32_f64_div_res_subnormal+0x4c>
80008db6:	f4 06 09 40 	lsl	r0,r10,r6
80008dba:	f6 06 09 4c 	lsl	r12,r11,r6
80008dbe:	e6 07 0a 42 	lsr	r2,r3,r7
80008dc2:	30 03       	mov	r3,0
80008dc4:	f4 07 0a 41 	lsr	r1,r10,r7
80008dc8:	18 41       	or	r1,r12
80008dca:	f6 07 0a 4a 	lsr	r10,r11,r7
80008dce:	30 0b       	mov	r11,0
80008dd0:	e0 12 ff 00 	andl	r2,0xff00
80008dd4:	e8 12 00 80 	orl	r2,0x80
80008dd8:	e6 08 06 46 	mulu.d	r6,r3,r8
80008ddc:	e4 09 07 46 	macu.d	r6,r2,r9
80008de0:	e4 08 06 44 	mulu.d	r4,r2,r8
80008de4:	e6 09 06 48 	mulu.d	r8,r3,r9
80008de8:	0c 05       	add	r5,r6
80008dea:	f0 07 00 48 	adc	r8,r8,r7
80008dee:	5c 09       	acr	r9
80008df0:	30 07       	mov	r7,0
80008df2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008df6:	00 34       	cp.w	r4,r0
80008df8:	e2 05 13 00 	cpc	r5,r1
80008dfc:	c4 6b       	rjmp	80008c88 <__avr32_f64_div_round_subnormal>
80008dfe:	1c 9b       	mov	r11,lr
80008e00:	e6 1b 80 00 	andh	r11,0x8000,COH
80008e04:	30 0a       	mov	r10,0
80008e06:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008e0a:	3f fb       	mov	r11,-1
80008e0c:	30 0a       	mov	r10,0
80008e0e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008e12:	f5 eb 10 04 	or	r4,r10,r11
80008e16:	c0 90       	breq	80008e28 <__avr32_f64_div_op1_zero>
80008e18:	1c 9b       	mov	r11,lr
80008e1a:	e6 1b 80 00 	andh	r11,0x8000,COH
80008e1e:	ea 1b 7f f0 	orh	r11,0x7ff0
80008e22:	30 0a       	mov	r10,0
80008e24:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008e28 <__avr32_f64_div_op1_zero>:
80008e28:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008e2c:	ce f0       	breq	80008e0a <__avr32_f64_div_res_subnormal+0x98>
80008e2e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008e32:	e0 44 07 ff 	cp.w	r4,2047
80008e36:	ce 41       	brne	80008dfe <__avr32_f64_div_res_subnormal+0x8c>
80008e38:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008e3c:	ce 10       	breq	80008dfe <__avr32_f64_div_res_subnormal+0x8c>
80008e3e:	ce 6b       	rjmp	80008e0a <__avr32_f64_div_res_subnormal+0x98>

80008e40 <__avr32_udiv64>:
80008e40:	d4 31       	pushm	r0-r7,lr
80008e42:	1a 97       	mov	r7,sp
80008e44:	20 3d       	sub	sp,12
80008e46:	10 9c       	mov	r12,r8
80008e48:	12 9e       	mov	lr,r9
80008e4a:	14 93       	mov	r3,r10
80008e4c:	58 09       	cp.w	r9,0
80008e4e:	e0 81 00 bd 	brne	80008fc8 <__avr32_udiv64+0x188>
80008e52:	16 38       	cp.w	r8,r11
80008e54:	e0 88 00 40 	brls	80008ed4 <__avr32_udiv64+0x94>
80008e58:	f0 08 12 00 	clz	r8,r8
80008e5c:	c0 d0       	breq	80008e76 <__avr32_udiv64+0x36>
80008e5e:	f6 08 09 4b 	lsl	r11,r11,r8
80008e62:	f0 09 11 20 	rsub	r9,r8,32
80008e66:	f8 08 09 4c 	lsl	r12,r12,r8
80008e6a:	f4 09 0a 49 	lsr	r9,r10,r9
80008e6e:	f4 08 09 43 	lsl	r3,r10,r8
80008e72:	f3 eb 10 0b 	or	r11,r9,r11
80008e76:	f8 0e 16 10 	lsr	lr,r12,0x10
80008e7a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008e7e:	f6 0e 0d 00 	divu	r0,r11,lr
80008e82:	e6 0b 16 10 	lsr	r11,r3,0x10
80008e86:	00 99       	mov	r9,r0
80008e88:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008e8c:	e0 0a 02 48 	mul	r8,r0,r10
80008e90:	10 3b       	cp.w	r11,r8
80008e92:	c0 a2       	brcc	80008ea6 <__avr32_udiv64+0x66>
80008e94:	20 19       	sub	r9,1
80008e96:	18 0b       	add	r11,r12
80008e98:	18 3b       	cp.w	r11,r12
80008e9a:	c0 63       	brcs	80008ea6 <__avr32_udiv64+0x66>
80008e9c:	10 3b       	cp.w	r11,r8
80008e9e:	f7 b9 03 01 	sublo	r9,1
80008ea2:	f7 dc e3 0b 	addcs	r11,r11,r12
80008ea6:	f6 08 01 01 	sub	r1,r11,r8
80008eaa:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008eae:	e2 0e 0d 00 	divu	r0,r1,lr
80008eb2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008eb6:	00 98       	mov	r8,r0
80008eb8:	e0 0a 02 4a 	mul	r10,r0,r10
80008ebc:	14 33       	cp.w	r3,r10
80008ebe:	c0 82       	brcc	80008ece <__avr32_udiv64+0x8e>
80008ec0:	20 18       	sub	r8,1
80008ec2:	18 03       	add	r3,r12
80008ec4:	18 33       	cp.w	r3,r12
80008ec6:	c0 43       	brcs	80008ece <__avr32_udiv64+0x8e>
80008ec8:	14 33       	cp.w	r3,r10
80008eca:	f7 b8 03 01 	sublo	r8,1
80008ece:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008ed2:	cd f8       	rjmp	80009090 <__avr32_udiv64+0x250>
80008ed4:	58 08       	cp.w	r8,0
80008ed6:	c0 51       	brne	80008ee0 <__avr32_udiv64+0xa0>
80008ed8:	30 19       	mov	r9,1
80008eda:	f2 08 0d 08 	divu	r8,r9,r8
80008ede:	10 9c       	mov	r12,r8
80008ee0:	f8 06 12 00 	clz	r6,r12
80008ee4:	c0 41       	brne	80008eec <__avr32_udiv64+0xac>
80008ee6:	18 1b       	sub	r11,r12
80008ee8:	30 19       	mov	r9,1
80008eea:	c4 08       	rjmp	80008f6a <__avr32_udiv64+0x12a>
80008eec:	ec 01 11 20 	rsub	r1,r6,32
80008ef0:	f4 01 0a 49 	lsr	r9,r10,r1
80008ef4:	f8 06 09 4c 	lsl	r12,r12,r6
80008ef8:	f6 06 09 48 	lsl	r8,r11,r6
80008efc:	f6 01 0a 41 	lsr	r1,r11,r1
80008f00:	f3 e8 10 08 	or	r8,r9,r8
80008f04:	f8 03 16 10 	lsr	r3,r12,0x10
80008f08:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008f0c:	e2 03 0d 00 	divu	r0,r1,r3
80008f10:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f14:	00 9e       	mov	lr,r0
80008f16:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008f1a:	e0 05 02 49 	mul	r9,r0,r5
80008f1e:	12 3b       	cp.w	r11,r9
80008f20:	c0 a2       	brcc	80008f34 <__avr32_udiv64+0xf4>
80008f22:	20 1e       	sub	lr,1
80008f24:	18 0b       	add	r11,r12
80008f26:	18 3b       	cp.w	r11,r12
80008f28:	c0 63       	brcs	80008f34 <__avr32_udiv64+0xf4>
80008f2a:	12 3b       	cp.w	r11,r9
80008f2c:	f7 be 03 01 	sublo	lr,1
80008f30:	f7 dc e3 0b 	addcs	r11,r11,r12
80008f34:	12 1b       	sub	r11,r9
80008f36:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008f3a:	f6 03 0d 02 	divu	r2,r11,r3
80008f3e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008f42:	04 99       	mov	r9,r2
80008f44:	e4 05 02 4b 	mul	r11,r2,r5
80008f48:	16 38       	cp.w	r8,r11
80008f4a:	c0 a2       	brcc	80008f5e <__avr32_udiv64+0x11e>
80008f4c:	20 19       	sub	r9,1
80008f4e:	18 08       	add	r8,r12
80008f50:	18 38       	cp.w	r8,r12
80008f52:	c0 63       	brcs	80008f5e <__avr32_udiv64+0x11e>
80008f54:	16 38       	cp.w	r8,r11
80008f56:	f7 b9 03 01 	sublo	r9,1
80008f5a:	f1 dc e3 08 	addcs	r8,r8,r12
80008f5e:	f4 06 09 43 	lsl	r3,r10,r6
80008f62:	f0 0b 01 0b 	sub	r11,r8,r11
80008f66:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008f6a:	f8 06 16 10 	lsr	r6,r12,0x10
80008f6e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008f72:	f6 06 0d 00 	divu	r0,r11,r6
80008f76:	e6 0b 16 10 	lsr	r11,r3,0x10
80008f7a:	00 9a       	mov	r10,r0
80008f7c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008f80:	e0 0e 02 48 	mul	r8,r0,lr
80008f84:	10 3b       	cp.w	r11,r8
80008f86:	c0 a2       	brcc	80008f9a <__avr32_udiv64+0x15a>
80008f88:	20 1a       	sub	r10,1
80008f8a:	18 0b       	add	r11,r12
80008f8c:	18 3b       	cp.w	r11,r12
80008f8e:	c0 63       	brcs	80008f9a <__avr32_udiv64+0x15a>
80008f90:	10 3b       	cp.w	r11,r8
80008f92:	f7 ba 03 01 	sublo	r10,1
80008f96:	f7 dc e3 0b 	addcs	r11,r11,r12
80008f9a:	f6 08 01 01 	sub	r1,r11,r8
80008f9e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008fa2:	e2 06 0d 00 	divu	r0,r1,r6
80008fa6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008faa:	00 98       	mov	r8,r0
80008fac:	e0 0e 02 4b 	mul	r11,r0,lr
80008fb0:	16 33       	cp.w	r3,r11
80008fb2:	c0 82       	brcc	80008fc2 <__avr32_udiv64+0x182>
80008fb4:	20 18       	sub	r8,1
80008fb6:	18 03       	add	r3,r12
80008fb8:	18 33       	cp.w	r3,r12
80008fba:	c0 43       	brcs	80008fc2 <__avr32_udiv64+0x182>
80008fbc:	16 33       	cp.w	r3,r11
80008fbe:	f7 b8 03 01 	sublo	r8,1
80008fc2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008fc6:	c6 98       	rjmp	80009098 <__avr32_udiv64+0x258>
80008fc8:	16 39       	cp.w	r9,r11
80008fca:	e0 8b 00 65 	brhi	80009094 <__avr32_udiv64+0x254>
80008fce:	f2 09 12 00 	clz	r9,r9
80008fd2:	c0 b1       	brne	80008fe8 <__avr32_udiv64+0x1a8>
80008fd4:	10 3a       	cp.w	r10,r8
80008fd6:	5f 2a       	srhs	r10
80008fd8:	1c 3b       	cp.w	r11,lr
80008fda:	5f b8       	srhi	r8
80008fdc:	10 4a       	or	r10,r8
80008fde:	f2 0a 18 00 	cp.b	r10,r9
80008fe2:	c5 90       	breq	80009094 <__avr32_udiv64+0x254>
80008fe4:	30 18       	mov	r8,1
80008fe6:	c5 98       	rjmp	80009098 <__avr32_udiv64+0x258>
80008fe8:	f0 09 09 46 	lsl	r6,r8,r9
80008fec:	f2 03 11 20 	rsub	r3,r9,32
80008ff0:	fc 09 09 4e 	lsl	lr,lr,r9
80008ff4:	f0 03 0a 48 	lsr	r8,r8,r3
80008ff8:	f6 09 09 4c 	lsl	r12,r11,r9
80008ffc:	f4 03 0a 42 	lsr	r2,r10,r3
80009000:	ef 46 ff f4 	st.w	r7[-12],r6
80009004:	f6 03 0a 43 	lsr	r3,r11,r3
80009008:	18 42       	or	r2,r12
8000900a:	f1 ee 10 0c 	or	r12,r8,lr
8000900e:	f8 01 16 10 	lsr	r1,r12,0x10
80009012:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009016:	e6 01 0d 04 	divu	r4,r3,r1
8000901a:	e4 03 16 10 	lsr	r3,r2,0x10
8000901e:	08 9e       	mov	lr,r4
80009020:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009024:	e8 06 02 48 	mul	r8,r4,r6
80009028:	10 33       	cp.w	r3,r8
8000902a:	c0 a2       	brcc	8000903e <__avr32_udiv64+0x1fe>
8000902c:	20 1e       	sub	lr,1
8000902e:	18 03       	add	r3,r12
80009030:	18 33       	cp.w	r3,r12
80009032:	c0 63       	brcs	8000903e <__avr32_udiv64+0x1fe>
80009034:	10 33       	cp.w	r3,r8
80009036:	f7 be 03 01 	sublo	lr,1
8000903a:	e7 dc e3 03 	addcs	r3,r3,r12
8000903e:	10 13       	sub	r3,r8
80009040:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80009044:	e6 01 0d 00 	divu	r0,r3,r1
80009048:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000904c:	00 98       	mov	r8,r0
8000904e:	e0 06 02 46 	mul	r6,r0,r6
80009052:	0c 3b       	cp.w	r11,r6
80009054:	c0 a2       	brcc	80009068 <__avr32_udiv64+0x228>
80009056:	20 18       	sub	r8,1
80009058:	18 0b       	add	r11,r12
8000905a:	18 3b       	cp.w	r11,r12
8000905c:	c0 63       	brcs	80009068 <__avr32_udiv64+0x228>
8000905e:	0c 3b       	cp.w	r11,r6
80009060:	f7 dc e3 0b 	addcs	r11,r11,r12
80009064:	f7 b8 03 01 	sublo	r8,1
80009068:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000906c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80009070:	0c 1b       	sub	r11,r6
80009072:	f0 04 06 42 	mulu.d	r2,r8,r4
80009076:	06 95       	mov	r5,r3
80009078:	16 35       	cp.w	r5,r11
8000907a:	e0 8b 00 0a 	brhi	8000908e <__avr32_udiv64+0x24e>
8000907e:	5f 0b       	sreq	r11
80009080:	f4 09 09 49 	lsl	r9,r10,r9
80009084:	12 32       	cp.w	r2,r9
80009086:	5f b9       	srhi	r9
80009088:	f7 e9 00 09 	and	r9,r11,r9
8000908c:	c0 60       	breq	80009098 <__avr32_udiv64+0x258>
8000908e:	20 18       	sub	r8,1
80009090:	30 09       	mov	r9,0
80009092:	c0 38       	rjmp	80009098 <__avr32_udiv64+0x258>
80009094:	30 09       	mov	r9,0
80009096:	12 98       	mov	r8,r9
80009098:	10 9a       	mov	r10,r8
8000909a:	12 93       	mov	r3,r9
8000909c:	10 92       	mov	r2,r8
8000909e:	12 9b       	mov	r11,r9
800090a0:	2f dd       	sub	sp,-12
800090a2:	d8 32       	popm	r0-r7,pc

800090a4 <__avr32_umod64>:
800090a4:	d4 31       	pushm	r0-r7,lr
800090a6:	1a 97       	mov	r7,sp
800090a8:	20 3d       	sub	sp,12
800090aa:	10 9c       	mov	r12,r8
800090ac:	12 95       	mov	r5,r9
800090ae:	14 9e       	mov	lr,r10
800090b0:	16 91       	mov	r1,r11
800090b2:	16 96       	mov	r6,r11
800090b4:	58 09       	cp.w	r9,0
800090b6:	e0 81 00 81 	brne	800091b8 <__avr32_umod64+0x114>
800090ba:	16 38       	cp.w	r8,r11
800090bc:	e0 88 00 12 	brls	800090e0 <__avr32_umod64+0x3c>
800090c0:	f0 08 12 00 	clz	r8,r8
800090c4:	c4 e0       	breq	80009160 <__avr32_umod64+0xbc>
800090c6:	f6 08 09 46 	lsl	r6,r11,r8
800090ca:	f8 08 09 4c 	lsl	r12,r12,r8
800090ce:	f0 0b 11 20 	rsub	r11,r8,32
800090d2:	f4 08 09 4e 	lsl	lr,r10,r8
800090d6:	f4 0b 0a 4b 	lsr	r11,r10,r11
800090da:	f7 e6 10 06 	or	r6,r11,r6
800090de:	c4 18       	rjmp	80009160 <__avr32_umod64+0xbc>
800090e0:	58 08       	cp.w	r8,0
800090e2:	c0 51       	brne	800090ec <__avr32_umod64+0x48>
800090e4:	30 19       	mov	r9,1
800090e6:	f2 08 0d 08 	divu	r8,r9,r8
800090ea:	10 9c       	mov	r12,r8
800090ec:	f8 08 12 00 	clz	r8,r12
800090f0:	c0 31       	brne	800090f6 <__avr32_umod64+0x52>
800090f2:	18 16       	sub	r6,r12
800090f4:	c3 68       	rjmp	80009160 <__avr32_umod64+0xbc>
800090f6:	f0 03 11 20 	rsub	r3,r8,32
800090fa:	f4 03 0a 4b 	lsr	r11,r10,r3
800090fe:	f8 08 09 4c 	lsl	r12,r12,r8
80009102:	ec 08 09 49 	lsl	r9,r6,r8
80009106:	ec 03 0a 43 	lsr	r3,r6,r3
8000910a:	f7 e9 10 09 	or	r9,r11,r9
8000910e:	f8 05 16 10 	lsr	r5,r12,0x10
80009112:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009116:	e6 05 0d 02 	divu	r2,r3,r5
8000911a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000911e:	ec 02 02 4b 	mul	r11,r6,r2
80009122:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009126:	16 3e       	cp.w	lr,r11
80009128:	c0 72       	brcc	80009136 <__avr32_umod64+0x92>
8000912a:	18 0e       	add	lr,r12
8000912c:	18 3e       	cp.w	lr,r12
8000912e:	c0 43       	brcs	80009136 <__avr32_umod64+0x92>
80009130:	16 3e       	cp.w	lr,r11
80009132:	fd dc e3 0e 	addcs	lr,lr,r12
80009136:	fc 0b 01 03 	sub	r3,lr,r11
8000913a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000913e:	e6 05 0d 02 	divu	r2,r3,r5
80009142:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009146:	a5 36       	mul	r6,r2
80009148:	0c 39       	cp.w	r9,r6
8000914a:	c0 72       	brcc	80009158 <__avr32_umod64+0xb4>
8000914c:	18 09       	add	r9,r12
8000914e:	18 39       	cp.w	r9,r12
80009150:	c0 43       	brcs	80009158 <__avr32_umod64+0xb4>
80009152:	0c 39       	cp.w	r9,r6
80009154:	f3 dc e3 09 	addcs	r9,r9,r12
80009158:	f2 06 01 06 	sub	r6,r9,r6
8000915c:	f4 08 09 4e 	lsl	lr,r10,r8
80009160:	f8 0a 16 10 	lsr	r10,r12,0x10
80009164:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009168:	ec 0a 0d 02 	divu	r2,r6,r10
8000916c:	fc 09 16 10 	lsr	r9,lr,0x10
80009170:	ea 02 02 4b 	mul	r11,r5,r2
80009174:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009178:	16 39       	cp.w	r9,r11
8000917a:	c0 72       	brcc	80009188 <__avr32_umod64+0xe4>
8000917c:	18 09       	add	r9,r12
8000917e:	18 39       	cp.w	r9,r12
80009180:	c0 43       	brcs	80009188 <__avr32_umod64+0xe4>
80009182:	16 39       	cp.w	r9,r11
80009184:	f3 dc e3 09 	addcs	r9,r9,r12
80009188:	f2 0b 01 0b 	sub	r11,r9,r11
8000918c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009190:	f6 0a 0d 0a 	divu	r10,r11,r10
80009194:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009198:	ea 0a 02 4a 	mul	r10,r5,r10
8000919c:	14 3e       	cp.w	lr,r10
8000919e:	c0 72       	brcc	800091ac <__avr32_umod64+0x108>
800091a0:	18 0e       	add	lr,r12
800091a2:	18 3e       	cp.w	lr,r12
800091a4:	c0 43       	brcs	800091ac <__avr32_umod64+0x108>
800091a6:	14 3e       	cp.w	lr,r10
800091a8:	fd dc e3 0e 	addcs	lr,lr,r12
800091ac:	fc 0a 01 0a 	sub	r10,lr,r10
800091b0:	30 0b       	mov	r11,0
800091b2:	f4 08 0a 4a 	lsr	r10,r10,r8
800091b6:	c7 b8       	rjmp	800092ac <__avr32_umod64+0x208>
800091b8:	16 39       	cp.w	r9,r11
800091ba:	e0 8b 00 79 	brhi	800092ac <__avr32_umod64+0x208>
800091be:	f2 09 12 00 	clz	r9,r9
800091c2:	c1 21       	brne	800091e6 <__avr32_umod64+0x142>
800091c4:	10 3a       	cp.w	r10,r8
800091c6:	5f 2b       	srhs	r11
800091c8:	0a 31       	cp.w	r1,r5
800091ca:	5f ba       	srhi	r10
800091cc:	f7 ea 10 0a 	or	r10,r11,r10
800091d0:	f2 0a 18 00 	cp.b	r10,r9
800091d4:	c0 60       	breq	800091e0 <__avr32_umod64+0x13c>
800091d6:	fc 08 01 0c 	sub	r12,lr,r8
800091da:	e2 05 01 46 	sbc	r6,r1,r5
800091de:	18 9e       	mov	lr,r12
800091e0:	0c 9b       	mov	r11,r6
800091e2:	1c 9a       	mov	r10,lr
800091e4:	c6 48       	rjmp	800092ac <__avr32_umod64+0x208>
800091e6:	ea 09 09 4c 	lsl	r12,r5,r9
800091ea:	f2 06 11 20 	rsub	r6,r9,32
800091ee:	f6 09 09 4b 	lsl	r11,r11,r9
800091f2:	f0 09 09 42 	lsl	r2,r8,r9
800091f6:	ef 46 ff f4 	st.w	r7[-12],r6
800091fa:	f0 06 0a 48 	lsr	r8,r8,r6
800091fe:	18 48       	or	r8,r12
80009200:	e2 06 0a 4c 	lsr	r12,r1,r6
80009204:	f4 09 09 43 	lsl	r3,r10,r9
80009208:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000920c:	f4 06 0a 4a 	lsr	r10,r10,r6
80009210:	16 4a       	or	r10,r11
80009212:	f0 0b 16 10 	lsr	r11,r8,0x10
80009216:	f8 0b 0d 04 	divu	r4,r12,r11
8000921a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000921e:	08 91       	mov	r1,r4
80009220:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009224:	e8 0e 02 46 	mul	r6,r4,lr
80009228:	0c 3c       	cp.w	r12,r6
8000922a:	c0 a2       	brcc	8000923e <__avr32_umod64+0x19a>
8000922c:	20 11       	sub	r1,1
8000922e:	10 0c       	add	r12,r8
80009230:	10 3c       	cp.w	r12,r8
80009232:	c0 63       	brcs	8000923e <__avr32_umod64+0x19a>
80009234:	0c 3c       	cp.w	r12,r6
80009236:	f7 b1 03 01 	sublo	r1,1
8000923a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000923e:	0c 1c       	sub	r12,r6
80009240:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009244:	f8 0b 0d 04 	divu	r4,r12,r11
80009248:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000924c:	08 96       	mov	r6,r4
8000924e:	e8 0e 02 4e 	mul	lr,r4,lr
80009252:	1c 3b       	cp.w	r11,lr
80009254:	c0 a2       	brcc	80009268 <__avr32_umod64+0x1c4>
80009256:	20 16       	sub	r6,1
80009258:	10 0b       	add	r11,r8
8000925a:	10 3b       	cp.w	r11,r8
8000925c:	c0 63       	brcs	80009268 <__avr32_umod64+0x1c4>
8000925e:	1c 3b       	cp.w	r11,lr
80009260:	f7 b6 03 01 	sublo	r6,1
80009264:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009268:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000926c:	1c 1b       	sub	r11,lr
8000926e:	e2 02 06 40 	mulu.d	r0,r1,r2
80009272:	00 9e       	mov	lr,r0
80009274:	02 9c       	mov	r12,r1
80009276:	16 3c       	cp.w	r12,r11
80009278:	e0 8b 00 08 	brhi	80009288 <__avr32_umod64+0x1e4>
8000927c:	5f 06       	sreq	r6
8000927e:	06 30       	cp.w	r0,r3
80009280:	5f ba       	srhi	r10
80009282:	ed ea 00 0a 	and	r10,r6,r10
80009286:	c0 60       	breq	80009292 <__avr32_umod64+0x1ee>
80009288:	fc 02 01 04 	sub	r4,lr,r2
8000928c:	f8 08 01 4c 	sbc	r12,r12,r8
80009290:	08 9e       	mov	lr,r4
80009292:	e6 0e 01 0a 	sub	r10,r3,lr
80009296:	f6 0c 01 4c 	sbc	r12,r11,r12
8000929a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000929e:	f8 09 0a 4b 	lsr	r11,r12,r9
800092a2:	f4 09 0a 4a 	lsr	r10,r10,r9
800092a6:	f8 01 09 4c 	lsl	r12,r12,r1
800092aa:	18 4a       	or	r10,r12
800092ac:	2f dd       	sub	sp,-12
800092ae:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009400:	c0 08       	rjmp	80009400 <_evba>
	...

80009404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009404:	c0 08       	rjmp	80009404 <_handle_TLB_Multiple_Hit>
	...

80009408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009408:	c0 08       	rjmp	80009408 <_handle_Bus_Error_Data_Fetch>
	...

8000940c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000940c:	c0 08       	rjmp	8000940c <_handle_Bus_Error_Instruction_Fetch>
	...

80009410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009410:	c0 08       	rjmp	80009410 <_handle_NMI>
	...

80009414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009414:	c0 08       	rjmp	80009414 <_handle_Instruction_Address>
	...

80009418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009418:	c0 08       	rjmp	80009418 <_handle_ITLB_Protection>
	...

8000941c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000941c:	c0 08       	rjmp	8000941c <_handle_Breakpoint>
	...

80009420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009420:	c0 08       	rjmp	80009420 <_handle_Illegal_Opcode>
	...

80009424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009424:	c0 08       	rjmp	80009424 <_handle_Unimplemented_Instruction>
	...

80009428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009428:	c0 08       	rjmp	80009428 <_handle_Privilege_Violation>
	...

8000942c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000942c:	c0 08       	rjmp	8000942c <_handle_Floating_Point>
	...

80009430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009430:	c0 08       	rjmp	80009430 <_handle_Coprocessor_Absent>
	...

80009434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009434:	c0 08       	rjmp	80009434 <_handle_Data_Address_Read>
	...

80009438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009438:	c0 08       	rjmp	80009438 <_handle_Data_Address_Write>
	...

8000943c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000943c:	c0 08       	rjmp	8000943c <_handle_DTLB_Protection_Read>
	...

80009440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009440:	c0 08       	rjmp	80009440 <_handle_DTLB_Protection_Write>
	...

80009444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009444:	c0 08       	rjmp	80009444 <_handle_DTLB_Modified>
	...

80009450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009450:	c0 08       	rjmp	80009450 <_handle_ITLB_Miss>
	...

80009460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009460:	c0 08       	rjmp	80009460 <_handle_DTLB_Miss_Read>
	...

80009470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009470:	c0 08       	rjmp	80009470 <_handle_DTLB_Miss_Write>
	...

80009500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009500:	c0 08       	rjmp	80009500 <_handle_Supervisor_Call>
80009502:	d7 03       	nop

80009504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009504:	30 0c       	mov	r12,0
80009506:	fe b0 c9 9d 	rcall	80002840 <_get_interrupt_handler>
8000950a:	58 0c       	cp.w	r12,0
8000950c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009510:	d6 03       	rete

80009512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009512:	30 1c       	mov	r12,1
80009514:	fe b0 c9 96 	rcall	80002840 <_get_interrupt_handler>
80009518:	58 0c       	cp.w	r12,0
8000951a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000951e:	d6 03       	rete

80009520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009520:	30 2c       	mov	r12,2
80009522:	fe b0 c9 8f 	rcall	80002840 <_get_interrupt_handler>
80009526:	58 0c       	cp.w	r12,0
80009528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000952c:	d6 03       	rete

8000952e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000952e:	30 3c       	mov	r12,3
80009530:	fe b0 c9 88 	rcall	80002840 <_get_interrupt_handler>
80009534:	58 0c       	cp.w	r12,0
80009536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000953a:	d6 03       	rete
8000953c:	d7 03       	nop
8000953e:	d7 03       	nop
80009540:	d7 03       	nop
80009542:	d7 03       	nop
80009544:	d7 03       	nop
80009546:	d7 03       	nop
80009548:	d7 03       	nop
8000954a:	d7 03       	nop
8000954c:	d7 03       	nop
8000954e:	d7 03       	nop
80009550:	d7 03       	nop
80009552:	d7 03       	nop
80009554:	d7 03       	nop
80009556:	d7 03       	nop
80009558:	d7 03       	nop
8000955a:	d7 03       	nop
8000955c:	d7 03       	nop
8000955e:	d7 03       	nop
80009560:	d7 03       	nop
80009562:	d7 03       	nop
80009564:	d7 03       	nop
80009566:	d7 03       	nop
80009568:	d7 03       	nop
8000956a:	d7 03       	nop
8000956c:	d7 03       	nop
8000956e:	d7 03       	nop
80009570:	d7 03       	nop
80009572:	d7 03       	nop
80009574:	d7 03       	nop
80009576:	d7 03       	nop
80009578:	d7 03       	nop
8000957a:	d7 03       	nop
8000957c:	d7 03       	nop
8000957e:	d7 03       	nop
80009580:	d7 03       	nop
80009582:	d7 03       	nop
80009584:	d7 03       	nop
80009586:	d7 03       	nop
80009588:	d7 03       	nop
8000958a:	d7 03       	nop
8000958c:	d7 03       	nop
8000958e:	d7 03       	nop
80009590:	d7 03       	nop
80009592:	d7 03       	nop
80009594:	d7 03       	nop
80009596:	d7 03       	nop
80009598:	d7 03       	nop
8000959a:	d7 03       	nop
8000959c:	d7 03       	nop
8000959e:	d7 03       	nop
800095a0:	d7 03       	nop
800095a2:	d7 03       	nop
800095a4:	d7 03       	nop
800095a6:	d7 03       	nop
800095a8:	d7 03       	nop
800095aa:	d7 03       	nop
800095ac:	d7 03       	nop
800095ae:	d7 03       	nop
800095b0:	d7 03       	nop
800095b2:	d7 03       	nop
800095b4:	d7 03       	nop
800095b6:	d7 03       	nop
800095b8:	d7 03       	nop
800095ba:	d7 03       	nop
800095bc:	d7 03       	nop
800095be:	d7 03       	nop
800095c0:	d7 03       	nop
800095c2:	d7 03       	nop
800095c4:	d7 03       	nop
800095c6:	d7 03       	nop
800095c8:	d7 03       	nop
800095ca:	d7 03       	nop
800095cc:	d7 03       	nop
800095ce:	d7 03       	nop
800095d0:	d7 03       	nop
800095d2:	d7 03       	nop
800095d4:	d7 03       	nop
800095d6:	d7 03       	nop
800095d8:	d7 03       	nop
800095da:	d7 03       	nop
800095dc:	d7 03       	nop
800095de:	d7 03       	nop
800095e0:	d7 03       	nop
800095e2:	d7 03       	nop
800095e4:	d7 03       	nop
800095e6:	d7 03       	nop
800095e8:	d7 03       	nop
800095ea:	d7 03       	nop
800095ec:	d7 03       	nop
800095ee:	d7 03       	nop
800095f0:	d7 03       	nop
800095f2:	d7 03       	nop
800095f4:	d7 03       	nop
800095f6:	d7 03       	nop
800095f8:	d7 03       	nop
800095fa:	d7 03       	nop
800095fc:	d7 03       	nop
800095fe:	d7 03       	nop
