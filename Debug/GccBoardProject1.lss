
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007240  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009400  80009400  00009800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000b60  80009600  80009600  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000524  00000008  8000a160  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000052c  8000a684  0000ad2c  2**0
                  ALLOC
  8 .bss          000002f0  00000530  00000530  00000000  2**2
                  ALLOC
  9 .heap         000027e0  00000820  00000820  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000da8  00000000  00000000  0000ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001ae9  00000000  00000000  0000bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002866f  00000000  00000000  0000d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000584a  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ec9f  00000000  00000000  0003b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000020a4  00000000  00000000  0004a14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000055a0  00000000  00000000  0004c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a73b  00000000  00000000  00051790  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0079716a  00000000  00000000  0005becb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001018  00000000  00000000  007f3035  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 dc 	sub	pc,pc,-3364

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	05 30       	ld.ub	r0,r2++
800020c0:	00 00       	add	r0,r0
800020c2:	05 44       	ld.w	r4,--r2
800020c4:	00 00       	add	r0,r0
800020c6:	05 3c       	ld.ub	r12,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 48       	ld.w	r8,--r2
800020cc:	00 00       	add	r0,r0
800020ce:	05 34       	ld.ub	r4,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 38       	ld.ub	r8,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 50       	ld.sh	r0,--r2
800020d8:	00 00       	add	r0,r0
800020da:	05 40       	ld.w	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 4c       	ld.w	r12,--r2

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	05 30       	ld.ub	r0,r2++

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	05 30       	ld.ub	r0,r2++
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	05 40       	ld.w	r0,--r2
80002200:	00 00       	add	r0,r0
80002202:	05 50       	ld.sh	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 48       	ld.w	r8,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 3c       	ld.ub	r12,r2++
8000220c:	00 00       	add	r0,r0
8000220e:	05 44       	ld.w	r4,--r2
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	18 96       	mov	r6,r12
80002236:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002238:	30 28       	mov	r8,2
8000223a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000223c:	4b 78       	lddpc	r8,80002318 <twim_read_packet+0xe8>
8000223e:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002240:	f0 1f 00 37 	mcall	8000231c <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002244:	6e 29       	ld.w	r9,r7[0x8]
80002246:	4b 78       	lddpc	r8,80002320 <twim_read_packet+0xf0>
80002248:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224a:	6e 39       	ld.w	r9,r7[0xc]
8000224c:	4b 68       	lddpc	r8,80002324 <twim_read_packet+0xf4>
8000224e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002250:	30 08       	mov	r8,0
80002252:	4b 6a       	lddpc	r10,80002328 <twim_read_packet+0xf8>
80002254:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002256:	30 0b       	mov	r11,0
80002258:	4b 5a       	lddpc	r10,8000232c <twim_read_packet+0xfc>
8000225a:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
8000225c:	0f fa       	ld.ub	r10,r7[0x7]
8000225e:	f0 0a 18 00 	cp.b	r10,r8
80002262:	c2 50       	breq	800022ac <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002264:	4a d8       	lddpc	r8,80002318 <twim_read_packet+0xe8>
80002266:	70 08       	ld.w	r8,r8[0x0]
80002268:	30 19       	mov	r9,1
8000226a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226c:	e0 69 00 80 	mov	r9,128
80002270:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002272:	30 29       	mov	r9,2
80002274:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002276:	ee ca ff fc 	sub	r10,r7,-4
8000227a:	4a e9       	lddpc	r9,80002330 <twim_read_packet+0x100>
8000227c:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000227e:	0f f9       	ld.ub	r9,r7[0x7]
80002280:	4a da       	lddpc	r10,80002334 <twim_read_packet+0x104>
80002282:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002284:	e0 6b 07 03 	mov	r11,1795
80002288:	4a ca       	lddpc	r10,80002338 <twim_read_packet+0x108>
8000228a:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000228c:	6e 0a       	ld.w	r10,r7[0x0]
8000228e:	a1 7a       	lsl	r10,0x1
80002290:	e8 1a a0 00 	orl	r10,0xa000
80002294:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002298:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229a:	6e 0a       	ld.w	r10,r7[0x0]
8000229c:	6e 39       	ld.w	r9,r7[0xc]
8000229e:	b1 69       	lsl	r9,0x10
800022a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a4:	e8 19 e0 01 	orl	r9,0xe001
800022a8:	91 49       	st.w	r8[0x10],r9
800022aa:	c1 18       	rjmp	800022cc <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022ac:	30 0a       	mov	r10,0
800022ae:	4a 28       	lddpc	r8,80002334 <twim_read_packet+0x104>
800022b0:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b2:	e0 6a 07 01 	mov	r10,1793
800022b6:	4a 18       	lddpc	r8,80002338 <twim_read_packet+0x108>
800022b8:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022ba:	49 88       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022bc:	70 08       	ld.w	r8,r8[0x0]
800022be:	6e 0a       	ld.w	r10,r7[0x0]
800022c0:	b1 69       	lsl	r9,0x10
800022c2:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022c6:	e8 19 e0 01 	orl	r9,0xe001
800022ca:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022cc:	49 38       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	49 a9       	lddpc	r9,80002338 <twim_read_packet+0x108>
800022d2:	72 09       	ld.w	r9,r9[0x0]
800022d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022d6:	30 18       	mov	r8,1
800022d8:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022da:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022dc:	49 48       	lddpc	r8,8000232c <twim_read_packet+0xfc>
800022de:	70 08       	ld.w	r8,r8[0x0]
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 80       	breq	800022f2 <twim_read_packet+0xc2>
800022e4:	c0 b8       	rjmp	800022fa <twim_read_packet+0xca>
		cpu_relax();
800022e6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ea:	6e 08       	ld.w	r8,r7[0x0]
800022ec:	58 08       	cp.w	r8,0
800022ee:	c0 30       	breq	800022f4 <twim_read_packet+0xc4>
800022f0:	c0 58       	rjmp	800022fa <twim_read_packet+0xca>
800022f2:	48 f7       	lddpc	r7,8000232c <twim_read_packet+0xfc>
800022f4:	f0 1f 00 12 	mcall	8000233c <twim_read_packet+0x10c>
800022f8:	cf 70       	breq	800022e6 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fa:	30 28       	mov	r8,2
800022fc:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022fe:	48 c8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002300:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002302:	5b c8       	cp.w	r8,-4
80002304:	c0 70       	breq	80002312 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002306:	48 a8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002308:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230a:	5b e8       	cp.w	r8,-2
8000230c:	c0 30       	breq	80002312 <twim_read_packet+0xe2>
8000230e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002312:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002316:	00 00       	add	r0,r0
80002318:	00 00       	add	r0,r0
8000231a:	05 30       	ld.ub	r0,r2++
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 54       	sub	r4,21
80002320:	00 00       	add	r0,r0
80002322:	05 34       	ld.ub	r4,r2++
80002324:	00 00       	add	r0,r0
80002326:	05 38       	ld.ub	r8,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 48       	ld.w	r8,--r2
8000232c:	00 00       	add	r0,r0
8000232e:	05 3c       	ld.ub	r12,r2++
80002330:	00 00       	add	r0,r0
80002332:	05 40       	ld.w	r0,--r2
80002334:	00 00       	add	r0,r0
80002336:	05 50       	ld.sh	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 44       	ld.w	r4,--r2
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 44       	sub	r4,20

80002340 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002340:	eb cd 40 e0 	pushm	r5-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002348:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000234c:	30 0a       	mov	r10,0
8000234e:	4a 69       	lddpc	r9,800023e4 <twim_master_init+0xa4>
80002350:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002352:	e6 18 00 01 	andh	r8,0x1,COH
80002356:	c0 b1       	brne	8000236c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002358:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235a:	3f f8       	mov	r8,-1
8000235c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000235e:	30 18       	mov	r8,1
80002360:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002362:	e0 68 00 80 	mov	r8,128
80002366:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002368:	d5 03       	csrf	0x10
8000236a:	c0 88       	rjmp	8000237a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000236c:	3f f8       	mov	r8,-1
8000236e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002370:	30 18       	mov	r8,1
80002372:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002374:	e0 68 00 80 	mov	r8,128
80002378:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237a:	3f f8       	mov	r8,-1
8000237c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000237e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002382:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002384:	30 1a       	mov	r10,1
80002386:	e0 6b 02 80 	mov	r11,640
8000238a:	49 8c       	lddpc	r12,800023e8 <twim_master_init+0xa8>
8000238c:	f0 1f 00 18 	mcall	800023ec <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002390:	e6 16 00 01 	andh	r6,0x1,COH
80002394:	c0 21       	brne	80002398 <twim_master_init+0x58>
      cpu_irq_enable();
80002396:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002398:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000239c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000239e:	f0 09 18 00 	cp.b	r9,r8
800023a2:	f9 b8 01 10 	movne	r8,16
800023a6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023aa:	f9 b8 01 ff 	movne	r8,-1
800023ae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b2:	6a 0a       	ld.w	r10,r5[0x0]
800023b4:	6a 1b       	ld.w	r11,r5[0x4]
800023b6:	0e 9c       	mov	r12,r7
800023b8:	f0 1f 00 0e 	mcall	800023f0 <twim_master_init+0xb0>
800023bc:	5b 8c       	cp.w	r12,-8
800023be:	c1 00       	breq	800023de <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c0:	6a 2b       	ld.w	r11,r5[0x8]
800023c2:	0e 9c       	mov	r12,r7
800023c4:	f0 1f 00 0c 	mcall	800023f4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023c8:	48 78       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023cc:	5b c8       	cp.w	r8,-4
800023ce:	c0 70       	breq	800023dc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d0:	48 58       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d4:	5b e8       	cp.w	r8,-2
800023d6:	c0 30       	breq	800023dc <twim_master_init+0x9c>
800023d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023dc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	00 00       	add	r0,r0
800023e6:	05 3c       	ld.ub	r12,r2++
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	20 04       	sub	r4,0
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	26 b0       	sub	r0,107
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 e0       	sub	r0,14
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 14       	sub	r4,33

800023f8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023f8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800023fc:	58 0a       	cp.w	r10,0
800023fe:	c6 30       	breq	800024c4 <eic_init+0xcc>
80002400:	30 08       	mov	r8,0
80002402:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002404:	30 19       	mov	r9,1
80002406:	30 1e       	mov	lr,1
80002408:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000240c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002410:	11 96       	ld.ub	r6,r8[0x1]
80002412:	f2 06 18 00 	cp.b	r6,r9
80002416:	c0 71       	brne	80002424 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002418:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241a:	11 86       	ld.ub	r6,r8[0x0]
8000241c:	fc 06 09 46 	lsl	r6,lr,r6
80002420:	0a 46       	or	r6,r5
80002422:	c0 78       	rjmp	80002430 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002424:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002426:	11 86       	ld.ub	r6,r8[0x0]
80002428:	fc 06 09 46 	lsl	r6,lr,r6
8000242c:	5c d6       	com	r6
8000242e:	0a 66       	and	r6,r5
80002430:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002432:	11 a6       	ld.ub	r6,r8[0x2]
80002434:	f2 06 18 00 	cp.b	r6,r9
80002438:	c0 71       	brne	80002446 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000243c:	11 86       	ld.ub	r6,r8[0x0]
8000243e:	fc 06 09 46 	lsl	r6,lr,r6
80002442:	0a 46       	or	r6,r5
80002444:	c0 78       	rjmp	80002452 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002446:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002448:	11 86       	ld.ub	r6,r8[0x0]
8000244a:	fc 06 09 46 	lsl	r6,lr,r6
8000244e:	5c d6       	com	r6
80002450:	0a 66       	and	r6,r5
80002452:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002454:	11 b6       	ld.ub	r6,r8[0x3]
80002456:	f2 06 18 00 	cp.b	r6,r9
8000245a:	c0 71       	brne	80002468 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000245c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000245e:	11 86       	ld.ub	r6,r8[0x0]
80002460:	fc 06 09 46 	lsl	r6,lr,r6
80002464:	0a 46       	or	r6,r5
80002466:	c0 78       	rjmp	80002474 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002468:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246a:	11 86       	ld.ub	r6,r8[0x0]
8000246c:	fc 06 09 46 	lsl	r6,lr,r6
80002470:	5c d6       	com	r6
80002472:	0a 66       	and	r6,r5
80002474:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002476:	11 c6       	ld.ub	r6,r8[0x4]
80002478:	f2 06 18 00 	cp.b	r6,r9
8000247c:	c0 71       	brne	8000248a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000247e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002480:	11 86       	ld.ub	r6,r8[0x0]
80002482:	fc 06 09 46 	lsl	r6,lr,r6
80002486:	0a 46       	or	r6,r5
80002488:	c0 78       	rjmp	80002496 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000248c:	11 86       	ld.ub	r6,r8[0x0]
8000248e:	fc 06 09 46 	lsl	r6,lr,r6
80002492:	5c d6       	com	r6
80002494:	0a 66       	and	r6,r5
80002496:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002498:	11 d6       	ld.ub	r6,r8[0x5]
8000249a:	f2 06 18 00 	cp.b	r6,r9
8000249e:	c0 71       	brne	800024ac <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a2:	11 88       	ld.ub	r8,r8[0x0]
800024a4:	fc 08 09 48 	lsl	r8,lr,r8
800024a8:	0c 48       	or	r8,r6
800024aa:	c0 78       	rjmp	800024b8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024ac:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024ae:	11 88       	ld.ub	r8,r8[0x0]
800024b0:	fc 08 09 48 	lsl	r8,lr,r8
800024b4:	5c d8       	com	r8
800024b6:	0c 68       	and	r8,r6
800024b8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024ba:	2f f7       	sub	r7,-1
800024bc:	0e 98       	mov	r8,r7
800024be:	0e 3a       	cp.w	r10,r7
800024c0:	fe 9b ff a4 	brhi	80002408 <eic_init+0x10>
800024c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024c8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024c8:	30 18       	mov	r8,1
800024ca:	f0 0b 09 48 	lsl	r8,r8,r11
800024ce:	99 c8       	st.w	r12[0x30],r8
}
800024d0:	5e fc       	retal	r12

800024d2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d2:	30 18       	mov	r8,1
800024d4:	f0 0b 09 48 	lsl	r8,r8,r11
800024d8:	99 08       	st.w	r12[0x0],r8
}
800024da:	5e fc       	retal	r12

800024dc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800024e8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ea:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024ec:	e6 18 00 01 	andh	r8,0x1,COH
800024f0:	c0 21       	brne	800024f4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f4:	5e fc       	retal	r12
800024f6:	d7 03       	nop

800024f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 78       	lsl	r8,0x9
800024fe:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002502:	58 7b       	cp.w	r11,7
80002504:	e0 8b 00 05 	brhi	8000250e <gpio_enable_module_pin+0x16>
80002508:	4a 09       	lddpc	r9,80002588 <gpio_enable_module_pin+0x90>
8000250a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000250e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002510:	30 19       	mov	r9,1
80002512:	f2 0c 09 49 	lsl	r9,r9,r12
80002516:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002518:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000251c:	c3 18       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251e:	30 19       	mov	r9,1
80002520:	f2 0c 09 49 	lsl	r9,r9,r12
80002524:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002526:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002528:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252a:	c2 a8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000252c:	30 19       	mov	r9,1
8000252e:	f2 0c 09 49 	lsl	r9,r9,r12
80002532:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002534:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002536:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002538:	c2 38       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002542:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002544:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002546:	c1 c8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002548:	30 19       	mov	r9,1
8000254a:	f2 0c 09 49 	lsl	r9,r9,r12
8000254e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002550:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002552:	91 d9       	st.w	r8[0x34],r9
		break;
80002554:	c1 58       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002556:	30 19       	mov	r9,1
80002558:	f2 0c 09 49 	lsl	r9,r9,r12
8000255c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000255e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002560:	91 d9       	st.w	r8[0x34],r9
		break;
80002562:	c0 e8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002564:	30 19       	mov	r9,1
80002566:	f2 0c 09 49 	lsl	r9,r9,r12
8000256a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000256c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000256e:	91 d9       	st.w	r8[0x34],r9
		break;
80002570:	c0 78       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002572:	30 19       	mov	r9,1
80002574:	f2 0c 09 49 	lsl	r9,r9,r12
80002578:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000257c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000257e:	30 19       	mov	r9,1
80002580:	f2 0c 09 4c 	lsl	r12,r9,r12
80002584:	91 2c       	st.w	r8[0x8],r12
80002586:	5e fd       	retal	0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	96 00       	ld.sh	r0,r11[0x0]

8000258c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000258c:	d4 21       	pushm	r4-r7,lr
8000258e:	18 97       	mov	r7,r12
80002590:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002592:	58 0b       	cp.w	r11,0
80002594:	c0 31       	brne	8000259a <gpio_enable_module+0xe>
80002596:	30 05       	mov	r5,0
80002598:	c0 d8       	rjmp	800025b2 <gpio_enable_module+0x26>
8000259a:	30 06       	mov	r6,0
8000259c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000259e:	6e 1b       	ld.w	r11,r7[0x4]
800025a0:	6e 0c       	ld.w	r12,r7[0x0]
800025a2:	f0 1f 00 06 	mcall	800025b8 <gpio_enable_module+0x2c>
800025a6:	18 45       	or	r5,r12
		gpiomap++;
800025a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025aa:	2f f6       	sub	r6,-1
800025ac:	0c 34       	cp.w	r4,r6
800025ae:	fe 9b ff f8 	brhi	8000259e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b2:	0a 9c       	mov	r12,r5
800025b4:	d8 22       	popm	r4-r7,pc
800025b6:	00 00       	add	r0,r0
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	24 f8       	sub	r8,79

800025bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025bc:	f8 08 16 05 	lsr	r8,r12,0x5
800025c0:	a9 78       	lsl	r8,0x9
800025c2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025c6:	16 99       	mov	r9,r11
800025c8:	e2 19 00 04 	andl	r9,0x4,COH
800025cc:	c0 70       	breq	800025da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025ce:	30 19       	mov	r9,1
800025d0:	f2 0c 09 49 	lsl	r9,r9,r12
800025d4:	f1 49 00 74 	st.w	r8[116],r9
800025d8:	c0 68       	rjmp	800025e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025da:	30 19       	mov	r9,1
800025dc:	f2 0c 09 49 	lsl	r9,r9,r12
800025e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e4:	16 99       	mov	r9,r11
800025e6:	e2 19 00 80 	andl	r9,0x80,COH
800025ea:	c2 40       	breq	80002632 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025ec:	16 99       	mov	r9,r11
800025ee:	e2 19 01 80 	andl	r9,0x180,COH
800025f2:	c0 90       	breq	80002604 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 49 	lsl	r9,r9,r12
800025fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 49 00 b8 	st.w	r8[184],r9
80002602:	c1 88       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002604:	16 99       	mov	r9,r11
80002606:	e2 19 02 80 	andl	r9,0x280,COH
8000260a:	c0 90       	breq	8000261c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000260c:	30 19       	mov	r9,1
8000260e:	f2 0c 09 49 	lsl	r9,r9,r12
80002612:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002616:	f1 49 00 b8 	st.w	r8[184],r9
8000261a:	c0 c8       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000261c:	16 99       	mov	r9,r11
8000261e:	e2 19 03 80 	andl	r9,0x380,COH
80002622:	c0 80       	breq	80002632 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002624:	30 19       	mov	r9,1
80002626:	f2 0c 09 49 	lsl	r9,r9,r12
8000262a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000262e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002632:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002636:	c1 50       	breq	80002660 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002638:	e2 1b 00 02 	andl	r11,0x2,COH
8000263c:	c0 70       	breq	8000264a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000263e:	30 19       	mov	r9,1
80002640:	f2 0c 09 49 	lsl	r9,r9,r12
80002644:	f1 49 00 54 	st.w	r8[84],r9
80002648:	c0 68       	rjmp	80002654 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264a:	30 19       	mov	r9,1
8000264c:	f2 0c 09 49 	lsl	r9,r9,r12
80002650:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 49 	lsl	r9,r9,r12
8000265a:	f1 49 00 44 	st.w	r8[68],r9
8000265e:	c0 68       	rjmp	8000266a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002660:	30 19       	mov	r9,1
80002662:	f2 0c 09 49 	lsl	r9,r9,r12
80002666:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266a:	30 19       	mov	r9,1
8000266c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002670:	91 1c       	st.w	r8[0x4],r12
}
80002672:	5e fc       	retal	r12

80002674 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002674:	f8 08 16 05 	lsr	r8,r12,0x5
80002678:	a9 78       	lsl	r8,0x9
8000267a:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000267e:	30 19       	mov	r9,1
80002680:	f2 0c 09 4c 	lsl	r12,r9,r12
80002684:	f1 4c 00 5c 	st.w	r8[92],r12
}
80002688:	5e fc       	retal	r12

8000268a <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268a:	f8 08 16 05 	lsr	r8,r12,0x5
8000268e:	a9 78       	lsl	r8,0x9
80002690:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
80002694:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
80002698:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000269c:	30 1a       	mov	r10,1
8000269e:	f4 0c 09 4c 	lsl	r12,r10,r12
800026a2:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026a6:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026aa:	5e fc       	retal	r12

800026ac <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026ac:	c0 08       	rjmp	800026ac <_unhandled_interrupt>
800026ae:	d7 03       	nop

800026b0 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026b0:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026b4:	49 99       	lddpc	r9,80002718 <INTC_register_interrupt+0x68>
800026b6:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026ba:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026be:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026c0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026c4:	58 0a       	cp.w	r10,0
800026c6:	c0 91       	brne	800026d8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026c8:	49 59       	lddpc	r9,8000271c <INTC_register_interrupt+0x6c>
800026ca:	49 6a       	lddpc	r10,80002720 <INTC_register_interrupt+0x70>
800026cc:	12 1a       	sub	r10,r9
800026ce:	fe 79 10 00 	mov	r9,-61440
800026d2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026d6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800026d8:	58 1a       	cp.w	r10,1
800026da:	c0 a1       	brne	800026ee <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800026dc:	49 09       	lddpc	r9,8000271c <INTC_register_interrupt+0x6c>
800026de:	49 2a       	lddpc	r10,80002724 <INTC_register_interrupt+0x74>
800026e0:	12 1a       	sub	r10,r9
800026e2:	bf aa       	sbr	r10,0x1e
800026e4:	fe 79 10 00 	mov	r9,-61440
800026e8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800026ec:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800026ee:	58 2a       	cp.w	r10,2
800026f0:	c0 a1       	brne	80002704 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800026f2:	48 b9       	lddpc	r9,8000271c <INTC_register_interrupt+0x6c>
800026f4:	48 da       	lddpc	r10,80002728 <INTC_register_interrupt+0x78>
800026f6:	12 1a       	sub	r10,r9
800026f8:	bf ba       	sbr	r10,0x1f
800026fa:	fe 79 10 00 	mov	r9,-61440
800026fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002702:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002704:	48 69       	lddpc	r9,8000271c <INTC_register_interrupt+0x6c>
80002706:	48 aa       	lddpc	r10,8000272c <INTC_register_interrupt+0x7c>
80002708:	12 1a       	sub	r10,r9
8000270a:	ea 1a c0 00 	orh	r10,0xc000
8000270e:	fe 79 10 00 	mov	r9,-61440
80002712:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002716:	5e fc       	retal	r12
80002718:	80 00       	ld.sh	r0,r0[0x0]
8000271a:	96 20       	ld.sh	r0,r11[0x4]
8000271c:	80 00       	ld.sh	r0,r0[0x0]
8000271e:	94 00       	ld.sh	r0,r10[0x0]
80002720:	80 00       	ld.sh	r0,r0[0x0]
80002722:	95 04       	st.w	r10[0x0],r4
80002724:	80 00       	ld.sh	r0,r0[0x0]
80002726:	95 12       	st.w	r10[0x4],r2
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	95 20       	st.w	r10[0x8],r0
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	95 2e       	st.w	r10[0x8],lr

80002730 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002730:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002732:	49 18       	lddpc	r8,80002774 <INTC_init_interrupts+0x44>
80002734:	e3 b8 00 01 	mtsr	0x4,r8
80002738:	49 0e       	lddpc	lr,80002778 <INTC_init_interrupts+0x48>
8000273a:	30 07       	mov	r7,0
8000273c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000273e:	49 0c       	lddpc	r12,8000277c <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002740:	49 05       	lddpc	r5,80002780 <INTC_init_interrupts+0x50>
80002742:	10 15       	sub	r5,r8
80002744:	fe 76 10 00 	mov	r6,-61440
80002748:	c1 08       	rjmp	80002768 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000274a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000274c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000274e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002750:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002754:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002756:	10 3a       	cp.w	r10,r8
80002758:	fe 9b ff fc 	brhi	80002750 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000275c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002760:	2f f7       	sub	r7,-1
80002762:	2f 8e       	sub	lr,-8
80002764:	59 f7       	cp.w	r7,31
80002766:	c0 50       	breq	80002770 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002768:	7c 08       	ld.w	r8,lr[0x0]
8000276a:	58 08       	cp.w	r8,0
8000276c:	ce f1       	brne	8000274a <INTC_init_interrupts+0x1a>
8000276e:	cf 7b       	rjmp	8000275c <INTC_init_interrupts+0x2c>
80002770:	d8 22       	popm	r4-r7,pc
80002772:	00 00       	add	r0,r0
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	94 00       	ld.sh	r0,r10[0x0]
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	96 20       	ld.sh	r0,r11[0x4]
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	26 ac       	sub	r12,106
80002780:	80 00       	ld.sh	r0,r0[0x0]
80002782:	95 04       	st.w	r10[0x0],r4

80002784 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002784:	fe 78 10 00 	mov	r8,-61440
80002788:	e0 69 00 83 	mov	r9,131
8000278c:	f2 0c 01 0c 	sub	r12,r9,r12
80002790:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002794:	f2 ca ff c0 	sub	r10,r9,-64
80002798:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000279c:	58 08       	cp.w	r8,0
8000279e:	c0 21       	brne	800027a2 <_get_interrupt_handler+0x1e>
800027a0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027a2:	f0 08 12 00 	clz	r8,r8
800027a6:	48 5a       	lddpc	r10,800027b8 <_get_interrupt_handler+0x34>
800027a8:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027ac:	f0 08 11 1f 	rsub	r8,r8,31
800027b0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027b2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027b6:	5e fc       	retal	r12
800027b8:	80 00       	ld.sh	r0,r0[0x0]
800027ba:	96 20       	ld.sh	r0,r11[0x4]

800027bc <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027bc:	f8 c8 00 01 	sub	r8,r12,1
800027c0:	f0 0b 00 0b 	add	r11,r8,r11
800027c4:	f6 0c 0d 0a 	divu	r10,r11,r12
800027c8:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027ca:	f4 c8 00 01 	sub	r8,r10,1
800027ce:	e0 48 00 fe 	cp.w	r8,254
800027d2:	e0 88 00 03 	brls	800027d8 <getBaudDiv+0x1c>
800027d6:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800027d8:	5c 8c       	casts.h	r12
}
800027da:	5e fc       	retal	r12

800027dc <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800027dc:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800027de:	30 18       	mov	r8,1
800027e0:	f0 0b 18 00 	cp.b	r11,r8
800027e4:	5f be       	srhi	lr
800027e6:	f0 0a 18 00 	cp.b	r10,r8
800027ea:	5f b8       	srhi	r8
800027ec:	fd e8 10 08 	or	r8,lr,r8
800027f0:	c0 30       	breq	800027f6 <spi_selectionMode+0x1a>
800027f2:	30 2c       	mov	r12,2
800027f4:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800027f6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800027f8:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800027fc:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002800:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002804:	99 18       	st.w	r12[0x4],r8
80002806:	d8 0a       	popm	pc,r12=0

80002808 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002808:	78 18       	ld.w	r8,r12[0x4]
8000280a:	ea 18 00 0f 	orh	r8,0xf
8000280e:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002810:	78 18       	ld.w	r8,r12[0x4]
80002812:	e2 18 00 04 	andl	r8,0x4,COH
80002816:	c0 f0       	breq	80002834 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002818:	30 e8       	mov	r8,14
8000281a:	f0 0b 18 00 	cp.b	r11,r8
8000281e:	e0 8b 00 19 	brhi	80002850 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002822:	78 18       	ld.w	r8,r12[0x4]
80002824:	b1 6b       	lsl	r11,0x10
80002826:	ea 1b ff f0 	orh	r11,0xfff0
8000282a:	e8 1b ff ff 	orl	r11,0xffff
8000282e:	10 6b       	and	r11,r8
80002830:	99 1b       	st.w	r12[0x4],r11
80002832:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002834:	30 38       	mov	r8,3
80002836:	f0 0b 18 00 	cp.b	r11,r8
8000283a:	e0 8b 00 0b 	brhi	80002850 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000283e:	78 18       	ld.w	r8,r12[0x4]
80002840:	2f 0b       	sub	r11,-16
80002842:	30 19       	mov	r9,1
80002844:	f2 0b 09 4b 	lsl	r11,r9,r11
80002848:	5c db       	com	r11
8000284a:	10 6b       	and	r11,r8
8000284c:	99 1b       	st.w	r12[0x4],r11
8000284e:	5e fd       	retal	0
80002850:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002852:	5e fc       	retal	r12

80002854 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002854:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002858:	c0 58       	rjmp	80002862 <spi_unselectChip+0xe>
		if (!timeout--) {
8000285a:	58 08       	cp.w	r8,0
8000285c:	c0 21       	brne	80002860 <spi_unselectChip+0xc>
8000285e:	5e ff       	retal	1
80002860:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002862:	78 49       	ld.w	r9,r12[0x10]
80002864:	e2 19 02 00 	andl	r9,0x200,COH
80002868:	cf 90       	breq	8000285a <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000286a:	78 18       	ld.w	r8,r12[0x4]
8000286c:	ea 18 00 0f 	orh	r8,0xf
80002870:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002872:	fc 18 01 00 	movh	r8,0x100
80002876:	99 08       	st.w	r12[0x0],r8
80002878:	5e fd       	retal	0
8000287a:	d7 03       	nop

8000287c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000287c:	eb cd 40 f8 	pushm	r3-r7,lr
80002880:	18 95       	mov	r5,r12
80002882:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002884:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002888:	30 38       	mov	r8,3
8000288a:	f0 06 18 00 	cp.b	r6,r8
8000288e:	e0 8b 00 4d 	brhi	80002928 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002892:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002896:	30 18       	mov	r8,1
80002898:	f0 04 18 00 	cp.b	r4,r8
8000289c:	e0 8b 00 46 	brhi	80002928 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028a0:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028a4:	30 78       	mov	r8,7
800028a6:	f0 03 18 00 	cp.b	r3,r8
800028aa:	e0 88 00 3f 	brls	80002928 <spi_setupChipReg+0xac>
800028ae:	31 08       	mov	r8,16
800028b0:	f0 03 18 00 	cp.b	r3,r8
800028b4:	e0 8b 00 3a 	brhi	80002928 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028b8:	14 9b       	mov	r11,r10
800028ba:	6e 1c       	ld.w	r12,r7[0x4]
800028bc:	f0 1f 00 1d 	mcall	80002930 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028c0:	c3 45       	brlt	80002928 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028c2:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028c4:	ec 09 16 01 	lsr	r9,r6,0x1
800028c8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028cc:	ec 16 00 01 	eorl	r6,0x1
800028d0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800028d4:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800028d8:	20 83       	sub	r3,8
800028da:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800028de:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800028e2:	ef 39 00 09 	ld.ub	r9,r7[9]
800028e6:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800028ea:	ef 39 00 0a 	ld.ub	r9,r7[10]
800028ee:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800028f2:	0f 89       	ld.ub	r9,r7[0x0]
800028f4:	30 1a       	mov	r10,1
800028f6:	f4 09 18 00 	cp.b	r9,r10
800028fa:	c0 e0       	breq	80002916 <spi_setupChipReg+0x9a>
800028fc:	c0 a3       	brcs	80002910 <spi_setupChipReg+0x94>
800028fe:	30 2a       	mov	r10,2
80002900:	f4 09 18 00 	cp.b	r9,r10
80002904:	c0 c0       	breq	8000291c <spi_setupChipReg+0xa0>
80002906:	30 3a       	mov	r10,3
80002908:	f4 09 18 00 	cp.b	r9,r10
8000290c:	c0 e1       	brne	80002928 <spi_setupChipReg+0xac>
8000290e:	c0 a8       	rjmp	80002922 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002910:	8b c8       	st.w	r5[0x30],r8
80002912:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002916:	8b d8       	st.w	r5[0x34],r8
80002918:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000291c:	8b e8       	st.w	r5[0x38],r8
8000291e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002922:	8b f8       	st.w	r5[0x3c],r8
80002924:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002928:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000292a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000292e:	00 00       	add	r0,r0
80002930:	80 00       	ld.sh	r0,r0[0x0]
80002932:	27 bc       	sub	r12,123

80002934 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002934:	30 18       	mov	r8,1
80002936:	99 08       	st.w	r12[0x0],r8
}
80002938:	5e fc       	retal	r12

8000293a <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000293a:	76 09       	ld.w	r9,r11[0x0]
8000293c:	58 29       	cp.w	r9,2
8000293e:	e0 88 00 03 	brls	80002944 <tc_init_waveform+0xa>
80002942:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002944:	76 18       	ld.w	r8,r11[0x4]
80002946:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000294a:	af ba       	sbr	r10,0xf
8000294c:	10 9b       	mov	r11,r8
8000294e:	e6 1b c0 00 	andh	r11,0xc000,COH
80002952:	16 4a       	or	r10,r11
80002954:	10 9b       	mov	r11,r8
80002956:	e6 1b 30 00 	andh	r11,0x3000,COH
8000295a:	16 4a       	or	r10,r11
8000295c:	10 9b       	mov	r11,r8
8000295e:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002962:	16 4a       	or	r10,r11
80002964:	10 9b       	mov	r11,r8
80002966:	e6 1b 03 00 	andh	r11,0x300,COH
8000296a:	16 4a       	or	r10,r11
8000296c:	10 9b       	mov	r11,r8
8000296e:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002972:	16 4a       	or	r10,r11
80002974:	10 9b       	mov	r11,r8
80002976:	e6 1b 00 30 	andh	r11,0x30,COH
8000297a:	16 4a       	or	r10,r11
8000297c:	10 9b       	mov	r11,r8
8000297e:	e6 1b 00 0c 	andh	r11,0xc,COH
80002982:	16 4a       	or	r10,r11
80002984:	10 9b       	mov	r11,r8
80002986:	e6 1b 00 03 	andh	r11,0x3,COH
8000298a:	16 4a       	or	r10,r11
8000298c:	10 9b       	mov	r11,r8
8000298e:	e2 1b 60 00 	andl	r11,0x6000,COH
80002992:	16 4a       	or	r10,r11
80002994:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002998:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
8000299c:	10 9b       	mov	r11,r8
8000299e:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029a2:	16 4a       	or	r10,r11
800029a4:	10 9b       	mov	r11,r8
800029a6:	e2 1b 03 00 	andl	r11,0x300,COH
800029aa:	16 4a       	or	r10,r11
800029ac:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029b0:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029b4:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029b8:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029bc:	10 9b       	mov	r11,r8
800029be:	e2 1b 00 30 	andl	r11,0x30,COH
800029c2:	16 4a       	or	r10,r11
800029c4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029c8:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029cc:	a5 69       	lsl	r9,0x4
800029ce:	2f f9       	sub	r9,-1
800029d0:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800029d4:	5e fd       	retal	0

800029d6 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029d6:	58 2b       	cp.w	r11,2
800029d8:	e0 88 00 03 	brls	800029de <tc_start+0x8>
800029dc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800029de:	a7 6b       	lsl	r11,0x6
800029e0:	16 0c       	add	r12,r11
800029e2:	30 58       	mov	r8,5
800029e4:	99 08       	st.w	r12[0x0],r8
800029e6:	5e fd       	retal	0

800029e8 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029e8:	58 2b       	cp.w	r11,2
800029ea:	e0 88 00 03 	brls	800029f0 <tc_stop+0x8>
800029ee:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
800029f0:	a7 6b       	lsl	r11,0x6
800029f2:	16 0c       	add	r12,r11
800029f4:	30 28       	mov	r8,2
800029f6:	99 08       	st.w	r12[0x0],r8
800029f8:	5e fd       	retal	0

800029fa <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800029fa:	58 2b       	cp.w	r11,2
800029fc:	e0 88 00 03 	brls	80002a02 <tc_read_sr+0x8>
80002a00:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a02:	a7 6b       	lsl	r11,0x6
80002a04:	2e 0b       	sub	r11,-32
80002a06:	16 0c       	add	r12,r11
80002a08:	78 0c       	ld.w	r12,r12[0x0]
}
80002a0a:	5e fc       	retal	r12

80002a0c <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a0c:	58 2b       	cp.w	r11,2
80002a0e:	e0 88 00 03 	brls	80002a14 <tc_write_rc+0x8>
80002a12:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a14:	f6 08 15 04 	lsl	r8,r11,0x4
80002a18:	2f f8       	sub	r8,-1
80002a1a:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a1e:	e2 18 80 00 	andl	r8,0x8000,COH
80002a22:	c0 c0       	breq	80002a3a <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a24:	a7 6b       	lsl	r11,0x6
80002a26:	16 0c       	add	r12,r11
80002a28:	2e 4c       	sub	r12,-28
80002a2a:	78 08       	ld.w	r8,r12[0x0]
80002a2c:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a30:	e0 18 00 00 	andl	r8,0x0
80002a34:	f3 e8 10 08 	or	r8,r9,r8
80002a38:	99 08       	st.w	r12[0x0],r8

  return value;
80002a3a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a3e:	5e fc       	retal	r12

80002a40 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a40:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a44:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a48:	58 2b       	cp.w	r11,2
80002a4a:	e0 88 00 04 	brls	80002a52 <tc_configure_interrupts+0x12>
80002a4e:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a52:	ee 19 00 01 	eorh	r9,0x1
80002a56:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a5a:	74 08       	ld.w	r8,r10[0x0]
80002a5c:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a60:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a64:	a7 6e       	lsl	lr,0x6
80002a66:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a6a:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a6e:	0e 4e       	or	lr,r7
80002a70:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002a74:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002a78:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002a7c:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002a80:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002a84:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002a88:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002a8c:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002a90:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002a94:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002a98:	f6 0e 15 06 	lsl	lr,r11,0x6
80002a9c:	f8 0e 00 0e 	add	lr,r12,lr
80002aa0:	2d ce       	sub	lr,-36
80002aa2:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002aa4:	58 09       	cp.w	r9,0
80002aa6:	c0 20       	breq	80002aaa <tc_configure_interrupts+0x6a>
80002aa8:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002aaa:	74 08       	ld.w	r8,r10[0x0]
80002aac:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002ab0:	e0 65 00 80 	mov	r5,128
80002ab4:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002ab8:	74 08       	ld.w	r8,r10[0x0]
80002aba:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002abe:	f9 b4 00 40 	moveq	r4,64
80002ac2:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002ac6:	74 08       	ld.w	r8,r10[0x0]
80002ac8:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002acc:	f9 b3 00 20 	moveq	r3,32
80002ad0:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002ad4:	74 08       	ld.w	r8,r10[0x0]
80002ad6:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002ada:	f9 b2 00 10 	moveq	r2,16
80002ade:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002ae2:	74 08       	ld.w	r8,r10[0x0]
80002ae4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002ae8:	f9 b6 00 08 	moveq	r6,8
80002aec:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002af0:	74 08       	ld.w	r8,r10[0x0]
80002af2:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002af6:	f9 b7 00 04 	moveq	r7,4
80002afa:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002afe:	74 08       	ld.w	r8,r10[0x0]
80002b00:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b04:	f9 be 00 02 	moveq	lr,2
80002b08:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b0c:	74 08       	ld.w	r8,r10[0x0]
80002b0e:	ec 18 00 01 	eorl	r8,0x1
80002b12:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b16:	eb e8 10 08 	or	r8,r5,r8
80002b1a:	08 48       	or	r8,r4
80002b1c:	06 48       	or	r8,r3
80002b1e:	04 48       	or	r8,r2
80002b20:	0c 48       	or	r8,r6
80002b22:	0e 48       	or	r8,r7
80002b24:	1c 48       	or	r8,lr
80002b26:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b2a:	f8 0a 00 0a 	add	r10,r12,r10
80002b2e:	2d 8a       	sub	r10,-40
80002b30:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b32:	a7 6b       	lsl	r11,0x6
80002b34:	2e 0b       	sub	r11,-32
80002b36:	16 0c       	add	r12,r11
80002b38:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b3a:	58 09       	cp.w	r9,0
80002b3c:	c0 31       	brne	80002b42 <tc_configure_interrupts+0x102>
80002b3e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b42:	d5 03       	csrf	0x10
80002b44:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b48 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b48:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b4a:	f6 08 15 04 	lsl	r8,r11,0x4
80002b4e:	14 38       	cp.w	r8,r10
80002b50:	f9 b8 08 10 	movls	r8,16
80002b54:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b58:	f0 0b 02 4b 	mul	r11,r8,r11
80002b5c:	f6 09 16 01 	lsr	r9,r11,0x1
80002b60:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b64:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b68:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b6c:	f2 cb 00 01 	sub	r11,r9,1
80002b70:	e0 4b ff fe 	cp.w	r11,65534
80002b74:	e0 88 00 03 	brls	80002b7a <usart_set_async_baudrate+0x32>
80002b78:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002b7a:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002b7c:	e8 6e 00 00 	mov	lr,524288
80002b80:	59 08       	cp.w	r8,16
80002b82:	fc 08 17 10 	movne	r8,lr
80002b86:	f9 b8 00 00 	moveq	r8,0
80002b8a:	e4 1b ff f7 	andh	r11,0xfff7
80002b8e:	e0 1b fe cf 	andl	r11,0xfecf
80002b92:	16 48       	or	r8,r11
80002b94:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002b96:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002b9a:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002b9e:	99 89       	st.w	r12[0x20],r9
80002ba0:	d8 0a       	popm	pc,r12=0

80002ba2 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002ba2:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ba4:	e2 18 00 02 	andl	r8,0x2,COH
80002ba8:	c0 31       	brne	80002bae <usart_write_char+0xc>
80002baa:	30 2c       	mov	r12,2
80002bac:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bae:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bb2:	99 7b       	st.w	r12[0x1c],r11
80002bb4:	5e fd       	retal	0
80002bb6:	d7 03       	nop

80002bb8 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002bb8:	eb cd 40 e0 	pushm	r5-r7,lr
80002bbc:	18 96       	mov	r6,r12
80002bbe:	16 95       	mov	r5,r11
80002bc0:	e0 67 27 0f 	mov	r7,9999
80002bc4:	c0 68       	rjmp	80002bd0 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bc6:	58 07       	cp.w	r7,0
80002bc8:	c0 31       	brne	80002bce <usart_putchar+0x16>
80002bca:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bce:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bd0:	0a 9b       	mov	r11,r5
80002bd2:	0c 9c       	mov	r12,r6
80002bd4:	f0 1f 00 03 	mcall	80002be0 <usart_putchar+0x28>
80002bd8:	cf 71       	brne	80002bc6 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002bda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002bde:	00 00       	add	r0,r0
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	2b a2       	sub	r2,-70

80002be4 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, uint8_t *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002be4:	78 58       	ld.w	r8,r12[0x14]
80002be6:	e2 18 00 e0 	andl	r8,0xe0,COH
80002bea:	c0 30       	breq	80002bf0 <usart_read_char+0xc>
80002bec:	30 4c       	mov	r12,4
80002bee:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002bf0:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002bf2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bf6:	f9 bc 00 03 	moveq	r12,3
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002bfa:	f9 f8 10 06 	ld.wne	r8,r12[0x18]
80002bfe:	f7 f8 1e 00 	st.bne	r11[0x0],r8
80002c02:	f9 bc 01 00 	movne	r12,0
    return USART_SUCCESS;
  }
  else
    return USART_RX_EMPTY;
}
80002c06:	5e fc       	retal	r12

80002c08 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c08:	eb cd 40 c0 	pushm	r6-r7,lr
80002c0c:	18 96       	mov	r6,r12
80002c0e:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c10:	17 8b       	ld.ub	r11,r11[0x0]
80002c12:	58 0b       	cp.w	r11,0
80002c14:	c0 80       	breq	80002c24 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c16:	2f f7       	sub	r7,-1
80002c18:	0c 9c       	mov	r12,r6
80002c1a:	f0 1f 00 04 	mcall	80002c28 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c1e:	0f 8b       	ld.ub	r11,r7[0x0]
80002c20:	58 0b       	cp.w	r11,0
80002c22:	cf a1       	brne	80002c16 <usart_write_line+0xe>
80002c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	2b b8       	sub	r8,-69

80002c2c <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c2c:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c30:	e6 18 00 01 	andh	r8,0x1,COH
80002c34:	c0 71       	brne	80002c42 <usart_reset+0x16>
80002c36:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c38:	3f f8       	mov	r8,-1
80002c3a:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c3c:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c3e:	d5 03       	csrf	0x10
80002c40:	c0 48       	rjmp	80002c48 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c42:	3f f8       	mov	r8,-1
80002c44:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c46:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c48:	30 08       	mov	r8,0
80002c4a:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c4c:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c4e:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c50:	e8 68 61 0c 	mov	r8,549132
80002c54:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c56:	5e fc       	retal	r12

80002c58 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c58:	eb cd 40 e0 	pushm	r5-r7,lr
80002c5c:	18 96       	mov	r6,r12
80002c5e:	16 97       	mov	r7,r11
80002c60:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c62:	f0 1f 00 2f 	mcall	80002d1c <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c66:	58 07       	cp.w	r7,0
80002c68:	c5 80       	breq	80002d18 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c6a:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c6c:	30 49       	mov	r9,4
80002c6e:	f2 08 18 00 	cp.b	r8,r9
80002c72:	e0 88 00 53 	brls	80002d18 <usart_init_rs232+0xc0>
80002c76:	30 99       	mov	r9,9
80002c78:	f2 08 18 00 	cp.b	r8,r9
80002c7c:	e0 8b 00 4e 	brhi	80002d18 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c80:	0f d9       	ld.ub	r9,r7[0x5]
80002c82:	30 78       	mov	r8,7
80002c84:	f0 09 18 00 	cp.b	r9,r8
80002c88:	e0 8b 00 48 	brhi	80002d18 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002c8c:	8e 39       	ld.sh	r9,r7[0x6]
80002c8e:	e0 68 01 01 	mov	r8,257
80002c92:	f0 09 19 00 	cp.h	r9,r8
80002c96:	e0 8b 00 41 	brhi	80002d18 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002c9a:	ef 39 00 08 	ld.ub	r9,r7[8]
80002c9e:	30 38       	mov	r8,3
80002ca0:	f0 09 18 00 	cp.b	r9,r8
80002ca4:	e0 8b 00 3a 	brhi	80002d18 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002ca8:	0a 9a       	mov	r10,r5
80002caa:	6e 0b       	ld.w	r11,r7[0x0]
80002cac:	0c 9c       	mov	r12,r6
80002cae:	f0 1f 00 1d 	mcall	80002d20 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cb2:	58 1c       	cp.w	r12,1
80002cb4:	c3 20       	breq	80002d18 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002cb6:	0f c8       	ld.ub	r8,r7[0x4]
80002cb8:	30 99       	mov	r9,9
80002cba:	f2 08 18 00 	cp.b	r8,r9
80002cbe:	c0 51       	brne	80002cc8 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cc0:	6c 18       	ld.w	r8,r6[0x4]
80002cc2:	b1 b8       	sbr	r8,0x11
80002cc4:	8d 18       	st.w	r6[0x4],r8
80002cc6:	c0 68       	rjmp	80002cd2 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002cc8:	6c 19       	ld.w	r9,r6[0x4]
80002cca:	20 58       	sub	r8,5
80002ccc:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cd0:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cd2:	6c 19       	ld.w	r9,r6[0x4]
80002cd4:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002cd8:	0f d8       	ld.ub	r8,r7[0x5]
80002cda:	a9 78       	lsl	r8,0x9
80002cdc:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002ce0:	12 48       	or	r8,r9
80002ce2:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002ce4:	8e 38       	ld.sh	r8,r7[0x6]
80002ce6:	30 29       	mov	r9,2
80002ce8:	f2 08 19 00 	cp.h	r8,r9
80002cec:	e0 88 00 09 	brls	80002cfe <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002cf0:	6c 18       	ld.w	r8,r6[0x4]
80002cf2:	ad b8       	sbr	r8,0xd
80002cf4:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002cf6:	8e b8       	ld.uh	r8,r7[0x6]
80002cf8:	20 28       	sub	r8,2
80002cfa:	8d a8       	st.w	r6[0x28],r8
80002cfc:	c0 68       	rjmp	80002d08 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002cfe:	6c 19       	ld.w	r9,r6[0x4]
80002d00:	5c 78       	castu.h	r8
80002d02:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d06:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d08:	6c 18       	ld.w	r8,r6[0x4]
80002d0a:	e0 18 ff f0 	andl	r8,0xfff0
80002d0e:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d10:	35 08       	mov	r8,80
80002d12:	8d 08       	st.w	r6[0x0],r8
80002d14:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d18:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	2c 2c       	sub	r12,-62
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2b 48       	sub	r8,-76

80002d24 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d24:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d28:	fe c0 99 28 	sub	r0,pc,-26328

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d2c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d30:	d5 53       	csrf	0x15
  cp      r0, r1
80002d32:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d34:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d38:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d3a:	c0 72       	brcc	80002d48 <idata_load_loop_end>
  cp      r0, r1
80002d3c:	fe c2 8b dc 	sub	r2,pc,-29732

80002d40 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d40:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d42:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d44:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d46:	cf d3       	brcs	80002d40 <idata_load_loop>

80002d48 <idata_load_loop_end>:
  mov     r2, 0
80002d48:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d4c:	e0 61 08 20 	mov	r1,2080
  cp      r0, r1
  brlo    udata_clear_loop
80002d50:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d52:	c0 62       	brcc	80002d5e <udata_clear_loop_end>
80002d54:	30 02       	mov	r2,0
80002d56:	30 03       	mov	r3,0

80002d58 <udata_clear_loop>:
80002d58:	a1 22       	st.d	r0++,r2
80002d5a:	02 30       	cp.w	r0,r1
80002d5c:	cf e3       	brcs	80002d58 <udata_clear_loop>

80002d5e <udata_clear_loop_end>:
80002d5e:	fe cf f6 fe 	sub	pc,pc,-2306
80002d62:	d7 03       	nop

80002d64 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002d64:	eb cd 40 c0 	pushm	r6-r7,lr
80002d68:	20 2d       	sub	sp,8
80002d6a:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002d6c:	30 08       	mov	r8,0
80002d6e:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d70:	e1 b6 00 00 	mfsr	r6,0x0
80002d74:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002d76:	1b 88       	ld.ub	r8,sp[0x0]
80002d78:	ea 18 ff ff 	orh	r8,0xffff
80002d7c:	e8 18 ff 80 	orl	r8,0xff80
80002d80:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002d82:	49 17       	lddpc	r7,80002dc4 <pal_trx_reg_read+0x60>
80002d84:	0f 8b       	ld.ub	r11,r7[0x0]
80002d86:	fe 7c 40 00 	mov	r12,-49152
80002d8a:	f0 1f 00 10 	mcall	80002dc8 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002d8e:	30 1a       	mov	r10,1
80002d90:	1a 9b       	mov	r11,sp
80002d92:	fe 7c 40 00 	mov	r12,-49152
80002d96:	f0 1f 00 0e 	mcall	80002dcc <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002d9a:	30 1a       	mov	r10,1
80002d9c:	fa cb ff f9 	sub	r11,sp,-7
80002da0:	fe 7c 40 00 	mov	r12,-49152
80002da4:	f0 1f 00 0b 	mcall	80002dd0 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002da8:	0f 8b       	ld.ub	r11,r7[0x0]
80002daa:	fe 7c 40 00 	mov	r12,-49152
80002dae:	f0 1f 00 0a 	mcall	80002dd4 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002db2:	e6 16 00 01 	andh	r6,0x1,COH
80002db6:	c0 21       	brne	80002dba <pal_trx_reg_read+0x56>
80002db8:	d5 03       	csrf	0x10

	return register_value;
}
80002dba:	1b fc       	ld.ub	r12,sp[0x7]
80002dbc:	2f ed       	sub	sp,-8
80002dbe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dc2:	00 00       	add	r0,r0
80002dc4:	00 00       	add	r0,r0
80002dc6:	00 08       	add	r8,r0
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	28 08       	sub	r8,-128
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	2e 72       	sub	r2,-25
80002dd0:	80 00       	ld.sh	r0,r0[0x0]
80002dd2:	2e 22       	sub	r2,-30
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	28 54       	sub	r4,-123

80002dd8 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002dd8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002ddc:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002dde:	e6 18 00 01 	andh	r8,0x1,COH
80002de2:	c0 21       	brne	80002de6 <sysclk_init+0xe>
      cpu_irq_enable();
80002de4:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002de6:	5e fc       	retal	r12

80002de8 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002de8:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002dea:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002dee:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002df0:	a3 6c       	lsl	r12,0x2
80002df2:	fe 7a 14 20 	mov	r10,-60384
80002df6:	f8 0a 00 08 	add	r8,r12,r10
80002dfa:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002dfc:	30 1e       	mov	lr,1
80002dfe:	fc 0b 09 4b 	lsl	r11,lr,r11
80002e02:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e04:	32 0a       	mov	r10,32
80002e06:	ea 1a aa 00 	orh	r10,0xaa00
80002e0a:	14 0c       	add	r12,r10
80002e0c:	fe 7a 14 00 	mov	r10,-60416
80002e10:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002e14:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e16:	12 98       	mov	r8,r9
80002e18:	e6 18 00 01 	andh	r8,0x1,COH
80002e1c:	c0 21       	brne	80002e20 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002e1e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002e20:	d8 02       	popm	pc

80002e22 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002e22:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e26:	58 0a       	cp.w	r10,0
80002e28:	c0 61       	brne	80002e34 <spi_read_packet+0x12>
80002e2a:	c2 28       	rjmp	80002e6e <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e2c:	58 08       	cp.w	r8,0
80002e2e:	c1 d0       	breq	80002e68 <spi_read_packet+0x46>
80002e30:	20 18       	sub	r8,1
80002e32:	c0 68       	rjmp	80002e3e <spi_read_packet+0x1c>
80002e34:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e38:	e0 67 00 ff 	mov	r7,255
80002e3c:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002e3e:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002e40:	e2 19 00 02 	andl	r9,0x2,COH
80002e44:	cf 40       	breq	80002e2c <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e46:	99 37       	st.w	r12[0xc],r7
80002e48:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002e4a:	c0 48       	rjmp	80002e52 <spi_read_packet+0x30>
			if (!timeout--) {
80002e4c:	58 08       	cp.w	r8,0
80002e4e:	c0 d0       	breq	80002e68 <spi_read_packet+0x46>
80002e50:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002e52:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002e54:	e2 19 02 01 	andl	r9,0x201,COH
80002e58:	e0 49 02 01 	cp.w	r9,513
80002e5c:	cf 81       	brne	80002e4c <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002e5e:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002e60:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002e62:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002e64:	ce c1       	brne	80002e3c <spi_read_packet+0x1a>
80002e66:	c0 48       	rjmp	80002e6e <spi_read_packet+0x4c>
80002e68:	3f dc       	mov	r12,-3
80002e6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e6e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002e72 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002e72:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002e74:	58 0a       	cp.w	r10,0
80002e76:	c0 81       	brne	80002e86 <spi_write_packet+0x14>
80002e78:	c1 28       	rjmp	80002e9c <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002e7a:	58 08       	cp.w	r8,0
80002e7c:	c0 31       	brne	80002e82 <spi_write_packet+0x10>
80002e7e:	3f dc       	mov	r12,-3
80002e80:	d8 02       	popm	pc
80002e82:	20 18       	sub	r8,1
80002e84:	c0 48       	rjmp	80002e8c <spi_write_packet+0x1a>
80002e86:	e0 6e 3a 98 	mov	lr,15000
80002e8a:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002e8c:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002e8e:	e2 19 00 02 	andl	r9,0x2,COH
80002e92:	cf 40       	breq	80002e7a <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002e94:	17 38       	ld.ub	r8,r11++
80002e96:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002e98:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002e9a:	cf 81       	brne	80002e8a <spi_write_packet+0x18>
80002e9c:	d8 0a       	popm	pc,r12=0
80002e9e:	d7 03       	nop
	...

80002eac <checkPack>:
	
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
}

uint8_t checkPack(config_package packet) //tampack es la cantidad de bytes del paquete hasta antes de EOT, para cdo lo hagamos variable
{
80002eac:	eb cd 00 10 	pushm	r4
80002eb0:	fa c4 ff fc 	sub	r4,sp,-4
80002eb4:	09 f9       	ld.ub	r9,r4[0x7]
80002eb6:	e9 3c 00 08 	ld.ub	r12,r4[8]
	uint8_t i = 0; //cosa que no tome los SOH
	uint8_t lrc = 0;

	while(i < packet.tamPayload) {
80002eba:	58 09       	cp.w	r9,0
80002ebc:	c0 e0       	breq	80002ed8 <checkPack+0x2c>
80002ebe:	e8 c8 ff fe 	sub	r8,r4,-2
	Enable_global_interrupt();
	
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
}

uint8_t checkPack(config_package packet) //tampack es la cantidad de bytes del paquete hasta antes de EOT, para cdo lo hagamos variable
80002ec2:	2f d4       	sub	r4,-3
80002ec4:	20 19       	sub	r9,1
80002ec6:	5c 59       	castu.b	r9
80002ec8:	e8 09 00 0b 	add	r11,r4,r9
80002ecc:	30 09       	mov	r9,0
{
	uint8_t i = 0; //cosa que no tome los SOH
	uint8_t lrc = 0;

	while(i < packet.tamPayload) {
		lrc = lrc ^ packet.payload[i]; //este es el XOR
80002ece:	11 3a       	ld.ub	r10,r8++
80002ed0:	f5 e9 20 09 	eor	r9,r10,r9
uint8_t checkPack(config_package packet) //tampack es la cantidad de bytes del paquete hasta antes de EOT, para cdo lo hagamos variable
{
	uint8_t i = 0; //cosa que no tome los SOH
	uint8_t lrc = 0;

	while(i < packet.tamPayload) {
80002ed4:	16 38       	cp.w	r8,r11
80002ed6:	cf c1       	brne	80002ece <checkPack+0x22>
80002ed8:	f2 0c 18 00 	cp.b	r12,r9
	if (lrc == packet.lrc){
		return 1; //el LRC del paquete y el calculado son iguales
	}
	
	return 0; //el LRC del paquete y el calculado no coinciden
}
80002edc:	5f 0c       	sreq	r12
80002ede:	e3 cd 00 10 	ldm	sp++,r4
80002ee2:	5e fc       	retal	r12

80002ee4 <unpack>:

void unpack()
{
80002ee4:	eb cd 40 f8 	pushm	r3-r7,lr
	//// faltan variables locales
	
	p = ++pSOH;	
80002ee8:	4a 2b       	lddpc	r11,80002f70 <unpack+0x8c>
80002eea:	17 85       	ld.ub	r5,r11[0x0]
80002eec:	ea c6 ff ff 	sub	r6,r5,-1
80002ef0:	5c 56       	castu.b	r6
80002ef2:	4a 18       	lddpc	r8,80002f74 <unpack+0x90>
80002ef4:	b0 86       	st.b	r8[0x0],r6
	tConfiguracion.addr = cola_PC[pSOH];
80002ef6:	4a 18       	lddpc	r8,80002f78 <unpack+0x94>
80002ef8:	4a 19       	lddpc	r9,80002f7c <unpack+0x98>
80002efa:	f2 06 07 0a 	ld.ub	r10,r9[r6]
80002efe:	b0 8a       	st.b	r8[0x0],r10
	tConfiguracion.cmd = cola_PC[++pSOH];
80002f00:	ec ca ff ff 	sub	r10,r6,-1
80002f04:	5c 5a       	castu.b	r10
80002f06:	b6 8a       	st.b	r11[0x0],r10
80002f08:	f2 0a 07 0a 	ld.ub	r10,r9[r10]
80002f0c:	b0 9a       	st.b	r8[0x1],r10
	tConfiguracion.lrc = cola_PC[--pEOT];
80002f0e:	49 da       	lddpc	r10,80002f80 <unpack+0x9c>
80002f10:	15 84       	ld.ub	r4,r10[0x0]
80002f12:	08 97       	mov	r7,r4
80002f14:	20 17       	sub	r7,1
80002f16:	5c 57       	castu.b	r7
80002f18:	b4 87       	st.b	r10[0x0],r7
80002f1a:	f2 07 07 09 	ld.ub	r9,r9[r7]
80002f1e:	f1 69 00 08 	st.b	r8[8],r9
			
	while(p < pEOT) {
80002f22:	ee 06 18 00 	cp.b	r6,r7
80002f26:	c1 f2       	brcc	80002f64 <unpack+0x80>
80002f28:	49 78       	lddpc	r8,80002f84 <unpack+0xa0>
80002f2a:	11 83       	ld.ub	r3,r8[0x0]
80002f2c:	06 99       	mov	r9,r3
80002f2e:	0c 98       	mov	r8,r6
		tConfiguracion.payload[i++] = cola_PC[p++];
80002f30:	49 2b       	lddpc	r11,80002f78 <unpack+0x94>
80002f32:	49 3a       	lddpc	r10,80002f7c <unpack+0x98>
80002f34:	f6 09 00 0c 	add	r12,r11,r9
80002f38:	f4 08 07 0e 	ld.ub	lr,r10[r8]
80002f3c:	b8 ae       	st.b	r12[0x2],lr
80002f3e:	2f f8       	sub	r8,-1
80002f40:	5c 58       	castu.b	r8
80002f42:	2f f9       	sub	r9,-1
80002f44:	5c 59       	castu.b	r9
	p = ++pSOH;	
	tConfiguracion.addr = cola_PC[pSOH];
	tConfiguracion.cmd = cola_PC[++pSOH];
	tConfiguracion.lrc = cola_PC[--pEOT];
			
	while(p < pEOT) {
80002f46:	f0 07 18 00 	cp.b	r7,r8
80002f4a:	fe 9b ff f5 	brhi	80002f34 <unpack+0x50>
80002f4e:	08 03       	add	r3,r4
80002f50:	20 23       	sub	r3,2
80002f52:	48 d8       	lddpc	r8,80002f84 <unpack+0xa0>
80002f54:	0a 13       	sub	r3,r5
80002f56:	b0 83       	st.b	r8[0x0],r3
80002f58:	20 24       	sub	r4,2
80002f5a:	e8 06 00 06 	add	r6,r4,r6
80002f5e:	48 68       	lddpc	r8,80002f74 <unpack+0x90>
80002f60:	0a 16       	sub	r6,r5
80002f62:	b0 86       	st.b	r8[0x0],r6
		tConfiguracion.payload[i++] = cola_PC[p++];
	}
	tConfiguracion.tamPayload = i;
80002f64:	48 88       	lddpc	r8,80002f84 <unpack+0xa0>
80002f66:	11 89       	ld.ub	r9,r8[0x0]
80002f68:	48 48       	lddpc	r8,80002f78 <unpack+0x94>
80002f6a:	b0 f9       	st.b	r8[0x7],r9
}
80002f6c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002f70:	00 00       	add	r0,r0
80002f72:	06 43       	or	r3,r3
80002f74:	00 00       	add	r0,r0
80002f76:	06 81       	andn	r1,r3
80002f78:	00 00       	add	r0,r0
80002f7a:	06 34       	cp.w	r4,r3
80002f7c:	00 00       	add	r0,r0
80002f7e:	07 50       	ld.sh	r0,--r3
80002f80:	00 00       	add	r0,r0
80002f82:	06 42       	or	r2,r3
80002f84:	00 00       	add	r0,r0
80002f86:	06 40       	or	r0,r3

80002f88 <getStateAT86RF212>:
{
	pal_trx_reg_write(RG_TRX_STATE, state);
	DELAY_US(time);
}
uint8_t getStateAT86RF212(void)
{
80002f88:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80002f8a:	30 1c       	mov	r12,1
80002f8c:	f0 1f 00 03 	mcall	80002f98 <getStateAT86RF212+0x10>
}
80002f90:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002f94:	d8 02       	popm	pc
80002f96:	00 00       	add	r0,r0
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	2d 64       	sub	r4,-42

80002f9c <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002f9c:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002f9e:	30 0b       	mov	r11,0
80002fa0:	fe 7c 5c 00 	mov	r12,-41984
80002fa4:	f0 1f 00 17 	mcall	80003000 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002fa8:	49 78       	lddpc	r8,80003004 <tc_irq+0x68>
80002faa:	70 09       	ld.w	r9,r8[0x0]
80002fac:	2f f9       	sub	r9,-1
80002fae:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002fb0:	70 08       	ld.w	r8,r8[0x0]
80002fb2:	59 38       	cp.w	r8,19
80002fb4:	e0 8b 00 0c 	brhi	80002fcc <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002fb8:	32 9c       	mov	r12,41
80002fba:	f0 1f 00 14 	mcall	80003008 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002fbe:	30 4c       	mov	r12,4
80002fc0:	f0 1f 00 12 	mcall	80003008 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002fc4:	30 bc       	mov	r12,11
80002fc6:	f0 1f 00 11 	mcall	80003008 <tc_irq+0x6c>
		return;
80002fca:	c1 98       	rjmp	80002ffc <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002fcc:	48 e8       	lddpc	r8,80003004 <tc_irq+0x68>
80002fce:	70 08       	ld.w	r8,r8[0x0]
80002fd0:	59 58       	cp.w	r8,21
80002fd2:	c0 41       	brne	80002fda <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002fd4:	32 9c       	mov	r12,41
80002fd6:	f0 1f 00 0d 	mcall	80003008 <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002fda:	48 b8       	lddpc	r8,80003004 <tc_irq+0x68>
80002fdc:	70 08       	ld.w	r8,r8[0x0]
80002fde:	59 68       	cp.w	r8,22
80002fe0:	c0 41       	brne	80002fe8 <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002fe2:	30 4c       	mov	r12,4
80002fe4:	f0 1f 00 09 	mcall	80003008 <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002fe8:	48 78       	lddpc	r8,80003004 <tc_irq+0x68>
80002fea:	70 08       	ld.w	r8,r8[0x0]
80002fec:	59 78       	cp.w	r8,23
80002fee:	c0 71       	brne	80002ffc <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002ff0:	30 bc       	mov	r12,11
80002ff2:	f0 1f 00 06 	mcall	80003008 <tc_irq+0x6c>
		tc_tick = 1;
80002ff6:	30 19       	mov	r9,1
80002ff8:	48 38       	lddpc	r8,80003004 <tc_irq+0x68>
80002ffa:	91 09       	st.w	r8[0x0],r9
	}
}
80002ffc:	d4 02       	popm	lr
80002ffe:	d6 03       	rete
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	29 fa       	sub	r10,-97
80003004:	00 00       	add	r0,r0
80003006:	00 1c       	sub	r12,r0
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	26 74       	sub	r4,103

8000300c <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
8000300c:	d4 01       	pushm	lr
8000300e:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80003010:	30 0b       	mov	r11,0
80003012:	4a 08       	lddpc	r8,80003090 <usart_int_handler_RS232+0x84>
80003014:	70 0c       	ld.w	r12,r8[0x0]
80003016:	f0 1f 00 20 	mcall	80003094 <usart_int_handler_RS232+0x88>
	
	uint8_t c=0;
8000301a:	fa cb ff fc 	sub	r11,sp,-4
8000301e:	30 08       	mov	r8,0
80003020:	16 f8       	st.b	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80003022:	fe 7c 38 00 	mov	r12,-51200
80003026:	f0 1f 00 1d 	mcall	80003098 <usart_int_handler_RS232+0x8c>
8000302a:	c3 01       	brne	8000308a <usart_int_handler_RS232+0x7e>
		return;
	
	cola_PC[cola_PC_nw] = c;
8000302c:	49 c8       	lddpc	r8,8000309c <usart_int_handler_RS232+0x90>
8000302e:	11 89       	ld.ub	r9,r8[0x0]
80003030:	1b b8       	ld.ub	r8,sp[0x3]
80003032:	49 ca       	lddpc	r10,800030a0 <usart_int_handler_RS232+0x94>
80003034:	f4 09 0b 08 	st.b	r10[r9],r8
	
	if (c == 0x01){		
80003038:	30 1a       	mov	r10,1
8000303a:	f4 08 18 00 	cp.b	r8,r10
8000303e:	c0 51       	brne	80003048 <usart_int_handler_RS232+0x3c>
		++pSOH;
80003040:	49 9a       	lddpc	r10,800030a4 <usart_int_handler_RS232+0x98>
80003042:	15 8b       	ld.ub	r11,r10[0x0]
80003044:	2f fb       	sub	r11,-1
80003046:	b4 8b       	st.b	r10[0x0],r11
	}
	
	if(pSOH == 0x03) {
80003048:	49 7a       	lddpc	r10,800030a4 <usart_int_handler_RS232+0x98>
8000304a:	15 8b       	ld.ub	r11,r10[0x0]
8000304c:	30 3a       	mov	r10,3
8000304e:	f4 0b 18 00 	cp.b	r11,r10
80003052:	c0 31       	brne	80003058 <usart_int_handler_RS232+0x4c>
			pSOH = cola_PC_nw;
80003054:	49 4a       	lddpc	r10,800030a4 <usart_int_handler_RS232+0x98>
80003056:	b4 89       	st.b	r10[0x0],r9
	}
	
	if (c == 0x04) {
80003058:	30 4a       	mov	r10,4
8000305a:	f4 08 18 00 	cp.b	r8,r10
8000305e:	c0 61       	brne	8000306a <usart_int_handler_RS232+0x5e>
		pEOT = cola_PC_nw;
80003060:	49 28       	lddpc	r8,800030a8 <usart_int_handler_RS232+0x9c>
80003062:	b0 89       	st.b	r8[0x0],r9
		configuracion = true;
80003064:	30 1a       	mov	r10,1
80003066:	49 28       	lddpc	r8,800030ac <usart_int_handler_RS232+0xa0>
80003068:	b0 8a       	st.b	r8[0x0],r10
	}
	
	cola_PC_nw++;
8000306a:	2f f9       	sub	r9,-1
8000306c:	48 c8       	lddpc	r8,8000309c <usart_int_handler_RS232+0x90>
8000306e:	b0 89       	st.b	r8[0x0],r9
	
	if (cola_PC_nw >= tamano_cola)
80003070:	3c 78       	mov	r8,-57
80003072:	f0 09 18 00 	cp.b	r9,r8
80003076:	e0 88 00 05 	brls	80003080 <usart_int_handler_RS232+0x74>
	cola_PC_nw = 0;
8000307a:	30 09       	mov	r9,0
8000307c:	48 88       	lddpc	r8,8000309c <usart_int_handler_RS232+0x90>
8000307e:	b0 89       	st.b	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003080:	30 0b       	mov	r11,0
80003082:	48 48       	lddpc	r8,80003090 <usart_int_handler_RS232+0x84>
80003084:	70 0c       	ld.w	r12,r8[0x0]
80003086:	f0 1f 00 0b 	mcall	800030b0 <usart_int_handler_RS232+0xa4>
	return;

	
}
8000308a:	2f fd       	sub	sp,-4
8000308c:	d4 02       	popm	lr
8000308e:	d6 03       	rete
80003090:	00 00       	add	r0,r0
80003092:	00 18       	sub	r8,r0
80003094:	80 00       	ld.sh	r0,r0[0x0]
80003096:	29 e8       	sub	r8,-98
80003098:	80 00       	ld.sh	r0,r0[0x0]
8000309a:	2b e4       	sub	r4,-66
8000309c:	00 00       	add	r0,r0
8000309e:	06 3f       	cp.w	pc,r3
800030a0:	00 00       	add	r0,r0
800030a2:	07 50       	ld.sh	r0,--r3
800030a4:	00 00       	add	r0,r0
800030a6:	06 43       	or	r3,r3
800030a8:	00 00       	add	r0,r0
800030aa:	06 42       	or	r2,r3
800030ac:	00 00       	add	r0,r0
800030ae:	06 41       	or	r1,r3
800030b0:	80 00       	ld.sh	r0,r0[0x0]
800030b2:	29 d6       	sub	r6,-99

800030b4 <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
800030b4:	eb cd 40 80 	pushm	r7,lr
800030b8:	20 6d       	sub	sp,24
800030ba:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
800030bc:	30 08       	mov	r8,0
800030be:	ba 98       	st.b	sp[0x1],r8
800030c0:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
800030c2:	34 89       	mov	r9,72
800030c4:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
800030c6:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
800030c8:	30 29       	mov	r9,2
800030ca:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
800030cc:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
800030d0:	30 18       	mov	r8,1
800030d2:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
800030d6:	fa cb ff fc 	sub	r11,sp,-4
800030da:	fe 7c 44 00 	mov	r12,-48128
800030de:	f0 1f 00 39 	mcall	800031c0 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
800030e2:	c6 61       	brne	800031ae <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
800030e4:	1b 89       	ld.ub	r9,sp[0x0]
800030e6:	1b 98       	ld.ub	r8,sp[0x1]
800030e8:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800030ec:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
800030ee:	30 09       	mov	r9,0
800030f0:	f2 08 19 00 	cp.h	r8,r9
800030f4:	c0 35       	brlt	800030fa <leer_temp+0x46>
800030f6:	30 1b       	mov	r11,1
800030f8:	c0 58       	rjmp	80003102 <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
800030fa:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800030fe:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
80003102:	4b 19       	lddpc	r9,800031c4 <leer_temp+0x110>
80003104:	13 89       	ld.ub	r9,r9[0x0]
80003106:	30 1a       	mov	r10,1
80003108:	f4 09 18 00 	cp.b	r9,r10
8000310c:	c1 c0       	breq	80003144 <leer_temp+0x90>
8000310e:	58 09       	cp.w	r9,0
80003110:	c0 b0       	breq	80003126 <leer_temp+0x72>
80003112:	30 2a       	mov	r10,2
80003114:	f4 09 18 00 	cp.b	r9,r10
80003118:	c2 50       	breq	80003162 <leer_temp+0xae>
8000311a:	30 3a       	mov	r10,3
8000311c:	f4 09 18 00 	cp.b	r9,r10
80003120:	c3 00       	breq	80003180 <leer_temp+0xcc>
80003122:	30 0c       	mov	r12,0
80003124:	c3 c8       	rjmp	8000319c <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
80003126:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
8000312a:	5c 6b       	casts.b	r11
8000312c:	f0 0b 02 4c 	mul	r12,r8,r11
80003130:	f0 1f 00 26 	mcall	800031c8 <leer_temp+0x114>
80003134:	30 08       	mov	r8,0
80003136:	fc 19 3f e0 	movh	r9,0x3fe0
8000313a:	f0 1f 00 25 	mcall	800031cc <leer_temp+0x118>
8000313e:	f0 1f 00 25 	mcall	800031d0 <leer_temp+0x11c>
			break;
80003142:	c2 d8       	rjmp	8000319c <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
80003144:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
80003148:	5c 6b       	casts.b	r11
8000314a:	f0 0b 02 4c 	mul	r12,r8,r11
8000314e:	f0 1f 00 1f 	mcall	800031c8 <leer_temp+0x114>
80003152:	30 08       	mov	r8,0
80003154:	fc 19 3f d0 	movh	r9,0x3fd0
80003158:	f0 1f 00 1d 	mcall	800031cc <leer_temp+0x118>
8000315c:	f0 1f 00 1d 	mcall	800031d0 <leer_temp+0x11c>
			break;
80003160:	c1 e8       	rjmp	8000319c <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
80003162:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
80003166:	5c 6b       	casts.b	r11
80003168:	f0 0b 02 4c 	mul	r12,r8,r11
8000316c:	f0 1f 00 17 	mcall	800031c8 <leer_temp+0x114>
80003170:	30 08       	mov	r8,0
80003172:	fc 19 3f c0 	movh	r9,0x3fc0
80003176:	f0 1f 00 16 	mcall	800031cc <leer_temp+0x118>
8000317a:	f0 1f 00 16 	mcall	800031d0 <leer_temp+0x11c>
			break;
8000317e:	c0 f8       	rjmp	8000319c <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
80003180:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
80003184:	5c 6b       	casts.b	r11
80003186:	f0 0b 02 4c 	mul	r12,r8,r11
8000318a:	f0 1f 00 10 	mcall	800031c8 <leer_temp+0x114>
8000318e:	30 08       	mov	r8,0
80003190:	fc 19 3f b0 	movh	r9,0x3fb0
80003194:	f0 1f 00 0e 	mcall	800031cc <leer_temp+0x118>
80003198:	f0 1f 00 0e 	mcall	800031d0 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
8000319c:	f0 1f 00 0e 	mcall	800031d4 <leer_temp+0x120>
800031a0:	bb 2b       	st.d	--sp,r10
800031a2:	48 eb       	lddpc	r11,800031d8 <leer_temp+0x124>
800031a4:	0e 9c       	mov	r12,r7
800031a6:	f0 1f 00 0e 	mcall	800031dc <leer_temp+0x128>
800031aa:	2f ed       	sub	sp,-8
800031ac:	c0 68       	rjmp	800031b8 <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
800031ae:	30 2a       	mov	r10,2
800031b0:	48 cb       	lddpc	r11,800031e0 <leer_temp+0x12c>
800031b2:	0e 9c       	mov	r12,r7
800031b4:	f0 1f 00 0c 	mcall	800031e4 <leer_temp+0x130>
}
800031b8:	2f ad       	sub	sp,-24
800031ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800031be:	00 00       	add	r0,r0
800031c0:	80 00       	ld.sh	r0,r0[0x0]
800031c2:	22 30       	sub	r0,35
800031c4:	00 00       	add	r0,r0
800031c6:	00 26       	rsub	r6,r0
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	3a 68       	mov	r8,-90
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	38 8c       	mov	r12,-120
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	3b a8       	mov	r8,-70
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	3b 48       	mov	r8,-76
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	97 cc       	st.w	r11[0x30],r12
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	3f ec       	mov	r12,-2
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	97 d4       	st.w	r11[0x34],r4
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	3e 96       	mov	r6,-23

800031e8 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800031e8:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800031ea:	18 9b       	mov	r11,r12
800031ec:	30 2c       	mov	r12,2
800031ee:	f0 1f 00 02 	mcall	800031f4 <sysclk_enable_pba_module+0xc>
}
800031f2:	d8 02       	popm	pc
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	2d e8       	sub	r8,-34

800031f8 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800031f8:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800031fa:	30 bc       	mov	r12,11
800031fc:	f0 1f 00 05 	mcall	80003210 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
80003200:	e0 7a c1 38 	mov	r10,115000
80003204:	48 4b       	lddpc	r11,80003214 <rs_232_init_usart+0x1c>
80003206:	fe 7c 38 00 	mov	r12,-51200
8000320a:	f0 1f 00 04 	mcall	80003218 <rs_232_init_usart+0x20>
	return estado_usart2;
}
8000320e:	d8 02       	popm	pc
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	31 e8       	mov	r8,30
80003214:	00 00       	add	r0,r0
80003216:	00 0c       	add	r12,r0
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	2c 58       	sub	r8,-59

8000321c <rs_232_init_pins>:
	//

}

void rs_232_init_pins(void)
{
8000321c:	d4 01       	pushm	lr
8000321e:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
80003220:	48 88       	lddpc	r8,80003240 <rs_232_init_pins+0x24>
80003222:	1a 9c       	mov	r12,sp
80003224:	70 09       	ld.w	r9,r8[0x0]
80003226:	50 09       	stdsp	sp[0x0],r9
80003228:	70 19       	ld.w	r9,r8[0x4]
8000322a:	50 19       	stdsp	sp[0x4],r9
8000322c:	70 29       	ld.w	r9,r8[0x8]
8000322e:	50 29       	stdsp	sp[0x8],r9
80003230:	70 38       	ld.w	r8,r8[0xc]
80003232:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
80003234:	30 2b       	mov	r11,2
80003236:	f0 1f 00 04 	mcall	80003244 <rs_232_init_pins+0x28>
}
8000323a:	2f cd       	sub	sp,-16
8000323c:	d8 02       	popm	pc
8000323e:	00 00       	add	r0,r0
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	97 98       	st.w	r11[0x24],r8
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	25 8c       	sub	r12,88

80003248 <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
80003248:	d4 01       	pushm	lr
8000324a:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
8000324c:	48 88       	lddpc	r8,8000326c <init_i2c_pins+0x24>
8000324e:	1a 9c       	mov	r12,sp
80003250:	70 09       	ld.w	r9,r8[0x0]
80003252:	50 09       	stdsp	sp[0x0],r9
80003254:	70 19       	ld.w	r9,r8[0x4]
80003256:	50 19       	stdsp	sp[0x4],r9
80003258:	70 29       	ld.w	r9,r8[0x8]
8000325a:	50 29       	stdsp	sp[0x8],r9
8000325c:	70 38       	ld.w	r8,r8[0xc]
8000325e:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003260:	30 2b       	mov	r11,2
80003262:	f0 1f 00 04 	mcall	80003270 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
80003266:	2f cd       	sub	sp,-16
80003268:	d8 02       	popm	pc
8000326a:	00 00       	add	r0,r0
8000326c:	80 00       	ld.sh	r0,r0[0x0]
8000326e:	97 bc       	st.w	r11[0x2c],r12
80003270:	80 00       	ld.sh	r0,r0[0x0]
80003272:	25 8c       	sub	r12,88

80003274 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
80003274:	d4 01       	pushm	lr
80003276:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
80003278:	48 d8       	lddpc	r8,800032ac <spi_init_pins+0x38>
8000327a:	1a 9c       	mov	r12,sp
8000327c:	70 09       	ld.w	r9,r8[0x0]
8000327e:	50 09       	stdsp	sp[0x0],r9
80003280:	70 19       	ld.w	r9,r8[0x4]
80003282:	50 19       	stdsp	sp[0x4],r9
80003284:	70 29       	ld.w	r9,r8[0x8]
80003286:	50 29       	stdsp	sp[0x8],r9
80003288:	70 39       	ld.w	r9,r8[0xc]
8000328a:	50 39       	stdsp	sp[0xc],r9
8000328c:	fa c9 ff f0 	sub	r9,sp,-16
80003290:	2f 08       	sub	r8,-16
80003292:	70 0a       	ld.w	r10,r8[0x0]
80003294:	93 0a       	st.w	r9[0x0],r10
80003296:	70 1a       	ld.w	r10,r8[0x4]
80003298:	93 1a       	st.w	r9[0x4],r10
8000329a:	70 2a       	ld.w	r10,r8[0x8]
8000329c:	93 2a       	st.w	r9[0x8],r10
8000329e:	70 38       	ld.w	r8,r8[0xc]
800032a0:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
800032a2:	30 4b       	mov	r11,4
800032a4:	f0 1f 00 03 	mcall	800032b0 <spi_init_pins+0x3c>
}
800032a8:	2f 8d       	sub	sp,-32
800032aa:	d8 02       	popm	pc
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	9b b8       	st.w	sp[0x2c],r8
800032b0:	80 00       	ld.sh	r0,r0[0x0]
800032b2:	25 8c       	sub	r12,88

800032b4 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
800032b4:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
800032b6:	30 5b       	mov	r11,5
800032b8:	30 4c       	mov	r12,4
800032ba:	f0 1f 00 06 	mcall	800032d0 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800032be:	30 5b       	mov	r11,5
800032c0:	30 bc       	mov	r12,11
800032c2:	f0 1f 00 04 	mcall	800032d0 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800032c6:	30 5b       	mov	r11,5
800032c8:	32 9c       	mov	r12,41
800032ca:	f0 1f 00 02 	mcall	800032d0 <led_init_pins+0x1c>
}
800032ce:	d8 02       	popm	pc
800032d0:	80 00       	ld.sh	r0,r0[0x0]
800032d2:	25 bc       	sub	r12,91

800032d4 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
800032d4:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800032d6:	f0 1f 00 08 	mcall	800032f4 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800032da:	30 4b       	mov	r11,4
800032dc:	30 dc       	mov	r12,13
800032de:	f0 1f 00 07 	mcall	800032f8 <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800032e2:	30 6b       	mov	r11,6
800032e4:	30 dc       	mov	r12,13
800032e6:	f0 1f 00 06 	mcall	800032fc <init_rf_pins+0x28>
	//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
800032ea:	30 dc       	mov	r12,13
800032ec:	f0 1f 00 05 	mcall	80003300 <init_rf_pins+0x2c>

	// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	//

}
800032f0:	d8 02       	popm	pc
800032f2:	00 00       	add	r0,r0
800032f4:	80 00       	ld.sh	r0,r0[0x0]
800032f6:	32 74       	mov	r4,39
800032f8:	80 00       	ld.sh	r0,r0[0x0]
800032fa:	25 bc       	sub	r12,91
800032fc:	80 00       	ld.sh	r0,r0[0x0]
800032fe:	24 f8       	sub	r8,79
80003300:	80 00       	ld.sh	r0,r0[0x0]
80003302:	26 8a       	sub	r10,104

80003304 <escribir_linea_pc>:

	
}

void escribir_linea_pc (char *str)
{
80003304:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
80003306:	18 9b       	mov	r11,r12
80003308:	fe 7c 38 00 	mov	r12,-51200
8000330c:	f0 1f 00 02 	mcall	80003314 <escribir_linea_pc+0x10>
}
80003310:	d8 02       	popm	pc
80003312:	00 00       	add	r0,r0
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	2c 08       	sub	r8,-64

80003318 <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
80003318:	eb cd 40 80 	pushm	r7,lr
	
	IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS) & 0x0C;
8000331c:	30 fc       	mov	r12,15
8000331e:	f0 1f 00 2a 	mcall	800033c4 <eic_int_handler2+0xac>
80003322:	e2 1c 00 0c 	andl	r12,0xc,COH
80003326:	4a 98       	lddpc	r8,800033c8 <eic_int_handler2+0xb0>
80003328:	b0 8c       	st.b	r8[0x0],r12
	
	variable1=pal_trx_reg_read(RG_IRQ_STATUS);
8000332a:	30 fc       	mov	r12,15
8000332c:	f0 1f 00 26 	mcall	800033c4 <eic_int_handler2+0xac>
80003330:	4a 78       	lddpc	r8,800033cc <eic_int_handler2+0xb4>
80003332:	b0 8c       	st.b	r8[0x0],r12
	variable2=pal_trx_reg_read(RG_IRQ_MASK);
80003334:	30 ec       	mov	r12,14
80003336:	f0 1f 00 24 	mcall	800033c4 <eic_int_handler2+0xac>
8000333a:	4a 68       	lddpc	r8,800033d0 <eic_int_handler2+0xb8>
8000333c:	b0 8c       	st.b	r8[0x0],r12
		
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
8000333e:	30 2b       	mov	r11,2
80003340:	fe 7c 24 00 	mov	r12,-56320
80003344:	f0 1f 00 24 	mcall	800033d4 <eic_int_handler2+0xbc>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		//IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
		//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
		//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		if (contadorRX>25){
80003348:	4a 48       	lddpc	r8,800033d8 <eic_int_handler2+0xc0>
8000334a:	11 89       	ld.ub	r9,r8[0x0]
8000334c:	31 98       	mov	r8,25
8000334e:	f0 09 18 00 	cp.b	r9,r8
80003352:	e0 88 00 0f 	brls	80003370 <eic_int_handler2+0x58>
			escribir_linea_pc("\n\n a \n\n");
80003356:	4a 27       	lddpc	r7,800033dc <eic_int_handler2+0xc4>
80003358:	0e 9c       	mov	r12,r7
8000335a:	f0 1f 00 22 	mcall	800033e0 <eic_int_handler2+0xc8>
			escribir_linea_pc(colaRX);
8000335e:	4a 2c       	lddpc	r12,800033e4 <eic_int_handler2+0xcc>
80003360:	f0 1f 00 20 	mcall	800033e0 <eic_int_handler2+0xc8>
			escribir_linea_pc("\n\n a \n\n");
80003364:	0e 9c       	mov	r12,r7
80003366:	f0 1f 00 1f 	mcall	800033e0 <eic_int_handler2+0xc8>
 			 contadorRX=0;
8000336a:	30 09       	mov	r9,0
8000336c:	49 b8       	lddpc	r8,800033d8 <eic_int_handler2+0xc0>
8000336e:	b0 89       	st.b	r8[0x0],r9
		}
		switch (IRQ_STATUS){
80003370:	49 68       	lddpc	r8,800033c8 <eic_int_handler2+0xb0>
80003372:	11 88       	ld.ub	r8,r8[0x0]
80003374:	30 49       	mov	r9,4
80003376:	f2 08 18 00 	cp.b	r8,r9
8000337a:	c1 40       	breq	800033a2 <eic_int_handler2+0x8a>
8000337c:	30 89       	mov	r9,8
8000337e:	f2 08 18 00 	cp.b	r8,r9
80003382:	c1 e1       	brne	800033be <eic_int_handler2+0xa6>
			case TRX_IRQ_TRX_END:
				escribir_linea_pc("\n\n --> Trama enviada :) :) \r\n");
80003384:	49 9c       	lddpc	r12,800033e8 <eic_int_handler2+0xd0>
80003386:	f0 1f 00 17 	mcall	800033e0 <eic_int_handler2+0xc8>
				spi_read_single(&AVR32_SPI,&colaRX[contadorRX++]);
8000338a:	49 49       	lddpc	r9,800033d8 <eic_int_handler2+0xc0>
8000338c:	13 88       	ld.ub	r8,r9[0x0]
8000338e:	f0 ca ff ff 	sub	r10,r8,-1
80003392:	b2 8a       	st.b	r9[0x0],r10
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80003394:	fe 79 40 00 	mov	r9,-49152
80003398:	72 2a       	ld.w	r10,r9[0x8]
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(spi);
8000339a:	49 39       	lddpc	r9,800033e4 <eic_int_handler2+0xcc>
8000339c:	f2 08 0b 0a 	st.b	r9[r8],r10
800033a0:	c0 f8       	rjmp	800033be <eic_int_handler2+0xa6>
						
			break;
			case TRX_IRQ_RX_START:
			escribir_linea_pc("\n\n --> Trama recibida :) :) \r\n");
800033a2:	49 3c       	lddpc	r12,800033ec <eic_int_handler2+0xd4>
800033a4:	f0 1f 00 0f 	mcall	800033e0 <eic_int_handler2+0xc8>
				spi_read_single(&AVR32_SPI,&colaRX[contadorRX++]);
800033a8:	48 c9       	lddpc	r9,800033d8 <eic_int_handler2+0xc0>
800033aa:	13 88       	ld.ub	r8,r9[0x0]
800033ac:	f0 ca ff ff 	sub	r10,r8,-1
800033b0:	b2 8a       	st.b	r9[0x0],r10
800033b2:	fe 79 40 00 	mov	r9,-49152
800033b6:	72 2a       	ld.w	r10,r9[0x8]
800033b8:	48 b9       	lddpc	r9,800033e4 <eic_int_handler2+0xcc>
800033ba:	f2 08 0b 0a 	st.b	r9[r8],r10
			break;
		}
}
800033be:	e3 cd 40 80 	ldm	sp++,r7,lr
800033c2:	d6 03       	rete
800033c4:	80 00       	ld.sh	r0,r0[0x0]
800033c6:	2d 64       	sub	r4,-42
800033c8:	00 00       	add	r0,r0
800033ca:	08 19       	sub	r9,r4
800033cc:	00 00       	add	r0,r0
800033ce:	07 4d       	ld.w	sp,--r3
800033d0:	00 00       	add	r0,r0
800033d2:	07 4e       	ld.w	lr,--r3
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	24 dc       	sub	r12,77
800033d8:	00 00       	add	r0,r0
800033da:	06 44       	or	r4,r3
800033dc:	80 00       	ld.sh	r0,r0[0x0]
800033de:	97 d8       	st.w	r11[0x34],r8
800033e0:	80 00       	ld.sh	r0,r0[0x0]
800033e2:	33 04       	mov	r4,48
800033e4:	00 00       	add	r0,r0
800033e6:	06 84       	andn	r4,r3
800033e8:	80 00       	ld.sh	r0,r0[0x0]
800033ea:	97 e0       	st.w	r11[0x38],r0
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	98 00       	ld.sh	r0,r12[0x0]

800033f0 <modeConfig>:
		tConfiguracion.payload[i++] = cola_PC[p++];
	}
	tConfiguracion.tamPayload = i;
}
void modeConfig()
{
800033f0:	d4 01       	pushm	lr
	if (!checkPack(tConfiguracion))
800033f2:	20 3d       	sub	sp,12
800033f4:	30 9a       	mov	r10,9
800033f6:	49 0b       	lddpc	r11,80003434 <modeConfig+0x44>
800033f8:	1a 9c       	mov	r12,sp
800033fa:	f0 1f 00 10 	mcall	80003438 <modeConfig+0x48>
800033fe:	f0 1f 00 10 	mcall	8000343c <modeConfig+0x4c>
80003402:	2f dd       	sub	sp,-12
80003404:	58 0c       	cp.w	r12,0
80003406:	c1 60       	breq	80003432 <modeConfig+0x42>
		return;
	configuracion = false;
80003408:	30 09       	mov	r9,0
8000340a:	48 e8       	lddpc	r8,80003440 <modeConfig+0x50>
8000340c:	b0 89       	st.b	r8[0x0],r9
	
	switch (tConfiguracion.cmd){
8000340e:	48 a8       	lddpc	r8,80003434 <modeConfig+0x44>
80003410:	11 98       	ld.ub	r8,r8[0x1]
80003412:	33 19       	mov	r9,49
80003414:	f2 08 18 00 	cp.b	r8,r9
80003418:	c0 60       	breq	80003424 <modeConfig+0x34>
8000341a:	33 29       	mov	r9,50
8000341c:	f2 08 18 00 	cp.b	r8,r9
80003420:	c0 91       	brne	80003432 <modeConfig+0x42>
80003422:	c0 58       	rjmp	8000342c <modeConfig+0x3c>
		case BAUDRATE:
			escribir_linea_pc("\r\nConfiguracion del baud rate\n");
80003424:	48 8c       	lddpc	r12,80003444 <modeConfig+0x54>
80003426:	f0 1f 00 09 	mcall	80003448 <modeConfig+0x58>
		break;
8000342a:	d8 02       	popm	pc
		case TEMPERATURA:
			escribir_linea_pc("\r\nVeo la temperatura\n");
8000342c:	48 8c       	lddpc	r12,8000344c <modeConfig+0x5c>
8000342e:	f0 1f 00 07 	mcall	80003448 <modeConfig+0x58>
80003432:	d8 02       	popm	pc
80003434:	00 00       	add	r0,r0
80003436:	06 34       	cp.w	r4,r3
80003438:	80 00       	ld.sh	r0,r0[0x0]
8000343a:	3e 96       	mov	r6,-23
8000343c:	80 00       	ld.sh	r0,r0[0x0]
8000343e:	2e ac       	sub	r12,-22
80003440:	00 00       	add	r0,r0
80003442:	06 41       	or	r1,r3
80003444:	80 00       	ld.sh	r0,r0[0x0]
80003446:	98 20       	ld.sh	r0,r12[0x4]
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	33 04       	mov	r4,48
8000344c:	80 00       	ld.sh	r0,r0[0x0]
8000344e:	98 40       	ld.sh	r0,r12[0x8]

80003450 <estadoPorPc>:
	RST_LOW();
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
80003450:	d4 01       	pushm	lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003452:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003456:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000345a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000345e:	14 38       	cp.w	r8,r10
80003460:	e0 88 00 08 	brls	80003470 <estadoPorPc+0x20>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003464:	12 38       	cp.w	r8,r9
80003466:	fe 98 ff fa 	brls	8000345a <estadoPorPc+0xa>
8000346a:	12 3a       	cp.w	r10,r9
8000346c:	c5 13       	brcs	8000350e <estadoPorPc+0xbe>
8000346e:	cf 6b       	rjmp	8000345a <estadoPorPc+0xa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003470:	12 38       	cp.w	r8,r9
80003472:	e0 8b 00 4e 	brhi	8000350e <estadoPorPc+0xbe>
80003476:	12 3a       	cp.w	r10,r9
80003478:	c4 b3       	brcs	8000350e <estadoPorPc+0xbe>
8000347a:	cf 0b       	rjmp	8000345a <estadoPorPc+0xa>
	delay_ms(1);
	switch (getStateAT86RF212()){
		case P_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado ON\n");
8000347c:	4a 9c       	lddpc	r12,80003520 <estadoPorPc+0xd0>
8000347e:	f0 1f 00 2a 	mcall	80003524 <estadoPorPc+0xd4>
		break;
80003482:	c3 18       	rjmp	800034e4 <estadoPorPc+0x94>
		case BUSY_RX:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX\n");
80003484:	4a 9c       	lddpc	r12,80003528 <estadoPorPc+0xd8>
80003486:	f0 1f 00 28 	mcall	80003524 <estadoPorPc+0xd4>
		break;
8000348a:	c2 d8       	rjmp	800034e4 <estadoPorPc+0x94>
		case RX_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX\n");
8000348c:	4a 8c       	lddpc	r12,8000352c <estadoPorPc+0xdc>
8000348e:	f0 1f 00 26 	mcall	80003524 <estadoPorPc+0xd4>
		break;
80003492:	c2 98       	rjmp	800034e4 <estadoPorPc+0x94>
		case TRX_OFF:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_OFF \n");
80003494:	4a 7c       	lddpc	r12,80003530 <estadoPorPc+0xe0>
80003496:	f0 1f 00 24 	mcall	80003524 <estadoPorPc+0xd4>
		break;
8000349a:	c2 58       	rjmp	800034e4 <estadoPorPc+0x94>
		case PLL_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado PLL_ON\n");
8000349c:	4a 6c       	lddpc	r12,80003534 <estadoPorPc+0xe4>
8000349e:	f0 1f 00 22 	mcall	80003524 <estadoPorPc+0xd4>
		break;
800034a2:	c2 18       	rjmp	800034e4 <estadoPorPc+0x94>
		case TRX_SLEEP:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_SLEEP \n");
800034a4:	4a 5c       	lddpc	r12,80003538 <estadoPorPc+0xe8>
800034a6:	f0 1f 00 20 	mcall	80003524 <estadoPorPc+0xd4>
		break;
800034aa:	c1 d8       	rjmp	800034e4 <estadoPorPc+0x94>
		case BUSY_RX_AACK:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX_AACK\n");
800034ac:	4a 4c       	lddpc	r12,8000353c <estadoPorPc+0xec>
800034ae:	f0 1f 00 1e 	mcall	80003524 <estadoPorPc+0xd4>
		break;
800034b2:	c1 98       	rjmp	800034e4 <estadoPorPc+0x94>
		case BUSY_TX_ARET:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_TX_ARET \n");
800034b4:	4a 3c       	lddpc	r12,80003540 <estadoPorPc+0xf0>
800034b6:	f0 1f 00 1c 	mcall	80003524 <estadoPorPc+0xd4>
		break;
800034ba:	c1 58       	rjmp	800034e4 <estadoPorPc+0x94>
		case RX_AACK_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON\n");
800034bc:	4a 2c       	lddpc	r12,80003544 <estadoPorPc+0xf4>
800034be:	f0 1f 00 1a 	mcall	80003524 <estadoPorPc+0xd4>
		break;
800034c2:	c1 18       	rjmp	800034e4 <estadoPorPc+0x94>
		case CMD_TX_ARET_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado TX_ARET_ON\n");
800034c4:	4a 1c       	lddpc	r12,80003548 <estadoPorPc+0xf8>
800034c6:	f0 1f 00 18 	mcall	80003524 <estadoPorPc+0xd4>
		case RX_ON_NOCLK :
		escribir_linea_pc("\r\n AT86RF212 en estado RX_ON_NOCLK \n");
800034ca:	4a 1c       	lddpc	r12,8000354c <estadoPorPc+0xfc>
800034cc:	f0 1f 00 16 	mcall	80003524 <estadoPorPc+0xd4>
		case RX_AACK_ON_NOCLK:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON_NOCLK \n");
800034d0:	4a 0c       	lddpc	r12,80003550 <estadoPorPc+0x100>
800034d2:	f0 1f 00 15 	mcall	80003524 <estadoPorPc+0xd4>
		case STATE_TRANSITION_IN_PROGRESS:
		escribir_linea_pc("\r\n :'(  STATE_TRANSITION_IN_PROGRESS ");
800034d6:	4a 0c       	lddpc	r12,80003554 <estadoPorPc+0x104>
800034d8:	f0 1f 00 13 	mcall	80003524 <estadoPorPc+0xd4>
		break;
800034dc:	c0 48       	rjmp	800034e4 <estadoPorPc+0x94>
		
		default:
		escribir_linea_pc("\r\n estado no contemplado");
800034de:	49 fc       	lddpc	r12,80003558 <estadoPorPc+0x108>
800034e0:	f0 1f 00 11 	mcall	80003524 <estadoPorPc+0xd4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800034e4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034e8:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800034ec:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800034f0:	14 38       	cp.w	r8,r10
800034f2:	e0 88 00 08 	brls	80003502 <estadoPorPc+0xb2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800034f6:	12 38       	cp.w	r8,r9
800034f8:	fe 98 ff fa 	brls	800034ec <estadoPorPc+0x9c>
800034fc:	12 3a       	cp.w	r10,r9
800034fe:	c1 03       	brcs	8000351e <estadoPorPc+0xce>
80003500:	cf 6b       	rjmp	800034ec <estadoPorPc+0x9c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003502:	12 38       	cp.w	r8,r9
80003504:	e0 8b 00 0d 	brhi	8000351e <estadoPorPc+0xce>
80003508:	12 3a       	cp.w	r10,r9
8000350a:	c0 a3       	brcs	8000351e <estadoPorPc+0xce>
8000350c:	cf 0b       	rjmp	800034ec <estadoPorPc+0x9c>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
	delay_ms(1);
	switch (getStateAT86RF212()){
8000350e:	f0 1f 00 14 	mcall	8000355c <estadoPorPc+0x10c>
80003512:	59 fc       	cp.w	r12,31
80003514:	fe 9b ff e5 	brhi	800034de <estadoPorPc+0x8e>
80003518:	49 28       	lddpc	r8,80003560 <estadoPorPc+0x110>
8000351a:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
8000351e:	d8 02       	popm	pc
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	98 a0       	ld.uh	r0,r12[0x4]
80003524:	80 00       	ld.sh	r0,r0[0x0]
80003526:	33 04       	mov	r4,48
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	98 bc       	ld.uh	r12,r12[0x6]
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	98 dc       	ld.uh	r12,r12[0xa]
80003530:	80 00       	ld.sh	r0,r0[0x0]
80003532:	98 f8       	ld.uh	r8,r12[0xe]
80003534:	80 00       	ld.sh	r0,r0[0x0]
80003536:	99 1c       	st.w	r12[0x4],r12
80003538:	80 00       	ld.sh	r0,r0[0x0]
8000353a:	99 3c       	st.w	r12[0xc],r12
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	99 60       	st.w	r12[0x18],r0
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	99 88       	st.w	r12[0x20],r8
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	99 b0       	st.w	r12[0x2c],r0
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	99 d4       	st.w	r12[0x34],r4
8000354c:	80 00       	ld.sh	r0,r0[0x0]
8000354e:	99 f8       	st.w	r12[0x3c],r8
80003550:	80 00       	ld.sh	r0,r0[0x0]
80003552:	9a 20       	ld.sh	r0,sp[0x4]
80003554:	80 00       	ld.sh	r0,r0[0x0]
80003556:	9a 4c       	ld.sh	r12,sp[0x8]
80003558:	80 00       	ld.sh	r0,r0[0x0]
8000355a:	9a 74       	ld.sh	r4,sp[0xe]
8000355c:	80 00       	ld.sh	r0,r0[0x0]
8000355e:	2f 88       	sub	r8,-8
80003560:	80 00       	ld.sh	r0,r0[0x0]
80003562:	97 18       	st.w	r11[0x4],r8

80003564 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003564:	d4 01       	pushm	lr
80003566:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003568:	30 eb       	mov	r11,14
8000356a:	30 2c       	mov	r12,2
8000356c:	f0 1f 00 0e 	mcall	800035a4 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
80003570:	e0 78 c1 38 	mov	r8,115000
80003574:	50 08       	stdsp	sp[0x0],r8
80003576:	e0 68 27 10 	mov	r8,10000
8000357a:	50 18       	stdsp	sp[0x4],r8
8000357c:	34 88       	mov	r8,72
8000357e:	50 28       	stdsp	sp[0x8],r8
80003580:	30 08       	mov	r8,0
80003582:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
80003586:	1a 9b       	mov	r11,sp
80003588:	fe 7c 44 00 	mov	r12,-48128
8000358c:	f0 1f 00 07 	mcall	800035a8 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003590:	c0 51       	brne	8000359a <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
80003592:	48 7c       	lddpc	r12,800035ac <init_i2c_module+0x48>
80003594:	f0 1f 00 07 	mcall	800035b0 <init_i2c_module+0x4c>
80003598:	c0 48       	rjmp	800035a0 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
8000359a:	48 7c       	lddpc	r12,800035b4 <init_i2c_module+0x50>
8000359c:	f0 1f 00 05 	mcall	800035b0 <init_i2c_module+0x4c>
	}
} 
800035a0:	2f cd       	sub	sp,-16
800035a2:	d8 02       	popm	pc
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	2d e8       	sub	r8,-34
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	23 40       	sub	r0,52
800035ac:	80 00       	ld.sh	r0,r0[0x0]
800035ae:	9b 34       	st.w	sp[0xc],r4
800035b0:	80 00       	ld.sh	r0,r0[0x0]
800035b2:	33 04       	mov	r4,48
800035b4:	80 00       	ld.sh	r0,r0[0x0]
800035b6:	9b 48       	st.w	sp[0x10],r8

800035b8 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
800035b8:	eb cd 40 e0 	pushm	r5-r7,lr
800035bc:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800035be:	4a 48       	lddpc	r8,8000364c <spi_init_module+0x94>
800035c0:	1a 95       	mov	r5,sp
800035c2:	70 09       	ld.w	r9,r8[0x0]
800035c4:	50 09       	stdsp	sp[0x0],r9
800035c6:	70 19       	ld.w	r9,r8[0x4]
800035c8:	50 19       	stdsp	sp[0x4],r9
800035ca:	70 29       	ld.w	r9,r8[0x8]
800035cc:	50 29       	stdsp	sp[0x8],r9
800035ce:	70 38       	ld.w	r8,r8[0xc]
800035d0:	50 38       	stdsp	sp[0xc],r8
800035d2:	30 db       	mov	r11,13
800035d4:	30 2c       	mov	r12,2
800035d6:	f0 1f 00 1f 	mcall	80003650 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800035da:	fe 77 40 00 	mov	r7,-49152
800035de:	e0 68 00 80 	mov	r8,128
800035e2:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800035e4:	6e 18       	ld.w	r8,r7[0x4]
800035e6:	30 19       	mov	r9,1
800035e8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800035ec:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
800035ee:	6e 18       	ld.w	r8,r7[0x4]
800035f0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800035f4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
800035f6:	6e 18       	ld.w	r8,r7[0x4]
800035f8:	30 06       	mov	r6,0
800035fa:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
800035fe:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
80003600:	6e 18       	ld.w	r8,r7[0x4]
80003602:	30 f9       	mov	r9,15
80003604:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003608:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
8000360a:	6e 18       	ld.w	r8,r7[0x4]
8000360c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003610:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
80003612:	6e 18       	ld.w	r8,r7[0x4]
80003614:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003618:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
8000361a:	6e 18       	ld.w	r8,r7[0x4]
8000361c:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003620:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
80003622:	30 38       	mov	r8,3
80003624:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
80003626:	e0 7a c1 38 	mov	r10,115000
8000362a:	1a 9b       	mov	r11,sp
8000362c:	0e 9c       	mov	r12,r7
8000362e:	f0 1f 00 0a 	mcall	80003654 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
80003632:	0c 99       	mov	r9,r6
80003634:	0c 9a       	mov	r10,r6
80003636:	0c 9b       	mov	r11,r6
80003638:	0e 9c       	mov	r12,r7
8000363a:	f0 1f 00 08 	mcall	80003658 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
8000363e:	0e 9c       	mov	r12,r7
80003640:	f0 1f 00 07 	mcall	8000365c <spi_init_module+0xa4>
}
80003644:	2f cd       	sub	sp,-16
80003646:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000364a:	00 00       	add	r0,r0
8000364c:	80 00       	ld.sh	r0,r0[0x0]
8000364e:	97 a8       	st.w	r11[0x28],r8
80003650:	80 00       	ld.sh	r0,r0[0x0]
80003652:	2d e8       	sub	r8,-34
80003654:	80 00       	ld.sh	r0,r0[0x0]
80003656:	28 7c       	sub	r12,-121
80003658:	80 00       	ld.sh	r0,r0[0x0]
8000365a:	27 dc       	sub	r12,125
8000365c:	80 00       	ld.sh	r0,r0[0x0]
8000365e:	29 34       	sub	r4,-109

80003660 <main>:
//	} //ver que onda cuando sale de aca, si falla el LRC no hace nada, quiza deberia hacer algo?
	return;
}

int main (void)
{
80003660:	d4 31       	pushm	r0-r7,lr
80003662:	20 3d       	sub	sp,12
	char temps[10] = "\0";
80003664:	4d f8       	lddpc	r8,800037e0 <main+0x180>
80003666:	90 08       	ld.sh	r8,r8[0x0]
80003668:	ba 08       	st.h	sp[0x0],r8
8000366a:	30 8a       	mov	r10,8
8000366c:	30 0b       	mov	r11,0
8000366e:	fa cc ff fe 	sub	r12,sp,-2
80003672:	f0 1f 00 5d 	mcall	800037e4 <main+0x184>
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
80003676:	f0 1f 00 5d 	mcall	800037e8 <main+0x188>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
8000367a:	f0 1f 00 5d 	mcall	800037ec <main+0x18c>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
8000367e:	f0 1f 00 5d 	mcall	800037f0 <main+0x190>
	
	//Configuracion pins para RF
	init_rf_pins();
80003682:	f0 1f 00 5d 	mcall	800037f4 <main+0x194>
	
	//Inicializacion del SPI
	spi_init_module();
80003686:	f0 1f 00 5d 	mcall	800037f8 <main+0x198>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
8000368a:	f0 1f 00 5d 	mcall	800037fc <main+0x19c>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
8000368e:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003690:	f0 1f 00 5c 	mcall	80003800 <main+0x1a0>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003694:	30 0a       	mov	r10,0
80003696:	e0 6b 02 20 	mov	r11,544
8000369a:	4d bc       	lddpc	r12,80003804 <main+0x1a4>
8000369c:	f0 1f 00 5b 	mcall	80003808 <main+0x1a8>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
800036a0:	30 2a       	mov	r10,2
800036a2:	e0 6b 01 61 	mov	r11,353
800036a6:	4d ac       	lddpc	r12,8000380c <main+0x1ac>
800036a8:	f0 1f 00 58 	mcall	80003808 <main+0x1a8>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
800036ac:	30 3a       	mov	r10,3
800036ae:	e0 6b 03 40 	mov	r11,832
800036b2:	4d 8c       	lddpc	r12,80003810 <main+0x1b0>
800036b4:	f0 1f 00 55 	mcall	80003808 <main+0x1a8>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
800036b8:	30 1a       	mov	r10,1
800036ba:	4d 7b       	lddpc	r11,80003814 <main+0x1b4>
800036bc:	fe 7c 24 00 	mov	r12,-56320
800036c0:	f0 1f 00 56 	mcall	80003818 <main+0x1b8>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
800036c4:	30 2b       	mov	r11,2
800036c6:	fe 7c 24 00 	mov	r12,-56320
800036ca:	f0 1f 00 55 	mcall	8000381c <main+0x1bc>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
800036ce:	30 2b       	mov	r11,2
800036d0:	fe 7c 24 00 	mov	r12,-56320
800036d4:	f0 1f 00 53 	mcall	80003820 <main+0x1c0>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
800036d8:	30 19       	mov	r9,1
800036da:	fe 78 38 00 	mov	r8,-51200
800036de:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
800036e0:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
800036e2:	4d 18       	lddpc	r8,80003824 <main+0x1c4>
800036e4:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800036e6:	4d 1b       	lddpc	r11,80003828 <main+0x1c8>
800036e8:	0e 9c       	mov	r12,r7
800036ea:	f0 1f 00 51 	mcall	8000382c <main+0x1cc>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
800036ee:	e0 6a 00 b3 	mov	r10,179
800036f2:	30 0b       	mov	r11,0
800036f4:	0e 9c       	mov	r12,r7
800036f6:	f0 1f 00 4f 	mcall	80003830 <main+0x1d0>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
800036fa:	4c fa       	lddpc	r10,80003834 <main+0x1d4>
800036fc:	30 0b       	mov	r11,0
800036fe:	0e 9c       	mov	r12,r7
80003700:	f0 1f 00 4e 	mcall	80003838 <main+0x1d8>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003704:	30 0b       	mov	r11,0
80003706:	0e 9c       	mov	r12,r7
80003708:	f0 1f 00 4d 	mcall	8000383c <main+0x1dc>
// 	while (at86rfx_init() != AT86RFX_SUCCESS) {
//  	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
//  	 	}
//  		escribir_linea_pc("Modulo RF:\tPASS\r\n");
 
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
8000370c:	31 cc       	mov	r12,28
8000370e:	f0 1f 00 4d 	mcall	80003840 <main+0x1e0>
80003712:	4c d8       	lddpc	r8,80003844 <main+0x1e4>
80003714:	b0 8c       	st.b	r8[0x0],r12
	
	if (register_value == PART_NUM_AT86RF212) 
80003716:	30 78       	mov	r8,7
80003718:	f0 0c 18 00 	cp.b	r12,r8
8000371c:	c0 51       	brne	80003726 <main+0xc6>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
8000371e:	4c bc       	lddpc	r12,80003848 <main+0x1e8>
80003720:	f0 1f 00 4b 	mcall	8000384c <main+0x1ec>
80003724:	c0 48       	rjmp	8000372c <main+0xcc>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
80003726:	4c bc       	lddpc	r12,80003850 <main+0x1f0>
80003728:	f0 1f 00 49 	mcall	8000384c <main+0x1ec>
	escribir_linea_pc(register_value);
8000372c:	4c 68       	lddpc	r8,80003844 <main+0x1e4>
8000372e:	11 8c       	ld.ub	r12,r8[0x0]
80003730:	f0 1f 00 47 	mcall	8000384c <main+0x1ec>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
80003734:	f0 1f 00 48 	mcall	80003854 <main+0x1f4>
	init_i2c_module();
80003738:	f0 1f 00 48 	mcall	80003858 <main+0x1f8>
	

	//init_AT86RF212();
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r\n");
8000373c:	4c 8c       	lddpc	r12,8000385c <main+0x1fc>
8000373e:	f0 1f 00 44 	mcall	8000384c <main+0x1ec>
	
	//setStateAT86RF212(CMD_RX_ON, TIME_PLL_ON_RX_ON);// seteo el tran en RX
	//pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003742:	4c 87       	lddpc	r7,80003860 <main+0x200>
80003744:	4c 84       	lddpc	r4,80003864 <main+0x204>
		{
			if (cola_PC[cola_PC_nr] == 't')
80003746:	4c 90       	lddpc	r0,80003868 <main+0x208>
80003748:	37 41       	mov	r1,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			
			if (cola_PC_nr >= tamano_cola)
8000374a:	3c 73       	mov	r3,-57
				cola_PC_nr = 0;
				
			if (configuracion)
8000374c:	4c 82       	lddpc	r2,8000386c <main+0x20c>
8000374e:	30 05       	mov	r5,0
	
	//setStateAT86RF212(CMD_RX_ON, TIME_PLL_ON_RX_ON);// seteo el tran en RX
	//pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003750:	0f 88       	ld.ub	r8,r7[0x0]
80003752:	09 89       	ld.ub	r9,r4[0x0]
80003754:	f0 09 18 00 	cp.b	r9,r8
80003758:	c2 a0       	breq	800037ac <main+0x14c>
		{
			if (cola_PC[cola_PC_nr] == 't')
8000375a:	e0 08 07 08 	ld.ub	r8,r0[r8]
8000375e:	e2 08 18 00 	cp.b	r8,r1
80003762:	c0 d1       	brne	8000377c <main+0x11c>
			{
				leer_temp(temps);
80003764:	1a 9c       	mov	r12,sp
80003766:	f0 1f 00 43 	mcall	80003870 <main+0x210>
				escribir_linea_pc("Temp: ");
8000376a:	4c 3c       	lddpc	r12,80003874 <main+0x214>
8000376c:	f0 1f 00 38 	mcall	8000384c <main+0x1ec>
				escribir_linea_pc(temps);
80003770:	1a 9c       	mov	r12,sp
80003772:	f0 1f 00 37 	mcall	8000384c <main+0x1ec>
				escribir_linea_pc("*C\r\n");
80003776:	4c 1c       	lddpc	r12,80003878 <main+0x218>
80003778:	f0 1f 00 35 	mcall	8000384c <main+0x1ec>
			}
			cola_PC_nr++;
8000377c:	0f 88       	ld.ub	r8,r7[0x0]
8000377e:	2f f8       	sub	r8,-1
			
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
80003780:	f0 03 18 00 	cp.b	r3,r8
80003784:	ea 08 17 30 	movlo	r8,r5
80003788:	ae 88       	st.b	r7[0x0],r8
				
			if (configuracion)
8000378a:	05 88       	ld.ub	r8,r2[0x0]
8000378c:	ea 08 18 00 	cp.b	r8,r5
80003790:	c0 e0       	breq	800037ac <main+0x14c>
			{
				Disable_global_interrupt();
80003792:	d3 03       	ssrf	0x10
				
				unpack();
80003794:	f0 1f 00 3a 	mcall	8000387c <main+0x21c>
				if (tConfiguracion.addr == ADDRESS) {
80003798:	4b a9       	lddpc	r9,80003880 <main+0x220>
8000379a:	13 88       	ld.ub	r8,r9[0x0]
8000379c:	33 19       	mov	r9,49
8000379e:	f2 08 18 00 	cp.b	r8,r9
800037a2:	c0 31       	brne	800037a8 <main+0x148>
					modeConfig();
800037a4:	f0 1f 00 38 	mcall	80003884 <main+0x224>
				}
				
				configuracion = false;
800037a8:	a4 85       	st.b	r2[0x0],r5
				Enable_global_interrupt();
800037aa:	d5 03       	csrf	0x10
		}
		//at86rfx_tx_frame(tx_buffer);
		//txTramaManual(tx_buffer);
		//txTramachibi(tx_buffer);
		//txTramachibi(tx_buffer);
		estadoPorPc();
800037ac:	f0 1f 00 37 	mcall	80003888 <main+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800037b0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800037b4:	e0 69 e0 9c 	mov	r9,57500
800037b8:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800037bc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800037c0:	14 38       	cp.w	r8,r10
800037c2:	e0 88 00 08 	brls	800037d2 <main+0x172>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800037c6:	12 38       	cp.w	r8,r9
800037c8:	fe 98 ff fa 	brls	800037bc <main+0x15c>
800037cc:	12 3a       	cp.w	r10,r9
800037ce:	cc 13       	brcs	80003750 <main+0xf0>
800037d0:	cf 6b       	rjmp	800037bc <main+0x15c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800037d2:	12 38       	cp.w	r8,r9
800037d4:	fe 9b ff be 	brhi	80003750 <main+0xf0>
800037d8:	12 3a       	cp.w	r10,r9
800037da:	cb b3       	brcs	80003750 <main+0xf0>
800037dc:	cf 0b       	rjmp	800037bc <main+0x15c>
800037de:	00 00       	add	r0,r0
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	2e a0       	sub	r0,-22
800037e4:	80 00       	ld.sh	r0,r0[0x0]
800037e6:	3f de       	mov	lr,-3
800037e8:	80 00       	ld.sh	r0,r0[0x0]
800037ea:	2d d8       	sub	r8,-35
800037ec:	80 00       	ld.sh	r0,r0[0x0]
800037ee:	32 b4       	mov	r4,43
800037f0:	80 00       	ld.sh	r0,r0[0x0]
800037f2:	32 1c       	mov	r12,33
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	32 d4       	mov	r4,45
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	35 b8       	mov	r8,91
800037fc:	80 00       	ld.sh	r0,r0[0x0]
800037fe:	31 f8       	mov	r8,31
80003800:	80 00       	ld.sh	r0,r0[0x0]
80003802:	27 30       	sub	r0,115
80003804:	80 00       	ld.sh	r0,r0[0x0]
80003806:	30 0c       	mov	r12,0
80003808:	80 00       	ld.sh	r0,r0[0x0]
8000380a:	26 b0       	sub	r0,107
8000380c:	80 00       	ld.sh	r0,r0[0x0]
8000380e:	33 18       	mov	r8,49
80003810:	80 00       	ld.sh	r0,r0[0x0]
80003812:	2f 9c       	sub	r12,-7
80003814:	00 00       	add	r0,r0
80003816:	00 20       	rsub	r0,r0
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	23 f8       	sub	r8,63
8000381c:	80 00       	ld.sh	r0,r0[0x0]
8000381e:	24 c8       	sub	r8,76
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	24 d2       	sub	r2,77
80003824:	00 00       	add	r0,r0
80003826:	00 18       	sub	r8,r0
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	9b b0       	st.w	sp[0x2c],r0
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	29 3a       	sub	r10,-109
80003830:	80 00       	ld.sh	r0,r0[0x0]
80003832:	2a 0c       	sub	r12,-96
80003834:	80 00       	ld.sh	r0,r0[0x0]
80003836:	97 b8       	st.w	r11[0x2c],r8
80003838:	80 00       	ld.sh	r0,r0[0x0]
8000383a:	2a 40       	sub	r0,-92
8000383c:	80 00       	ld.sh	r0,r0[0x0]
8000383e:	29 d6       	sub	r6,-99
80003840:	80 00       	ld.sh	r0,r0[0x0]
80003842:	2d 64       	sub	r4,-42
80003844:	00 00       	add	r0,r0
80003846:	06 3d       	cp.w	sp,r3
80003848:	80 00       	ld.sh	r0,r0[0x0]
8000384a:	9b 60       	st.w	sp[0x18],r0
8000384c:	80 00       	ld.sh	r0,r0[0x0]
8000384e:	33 04       	mov	r4,48
80003850:	80 00       	ld.sh	r0,r0[0x0]
80003852:	9b 74       	st.w	sp[0x1c],r4
80003854:	80 00       	ld.sh	r0,r0[0x0]
80003856:	32 48       	mov	r8,36
80003858:	80 00       	ld.sh	r0,r0[0x0]
8000385a:	35 64       	mov	r4,86
8000385c:	80 00       	ld.sh	r0,r0[0x0]
8000385e:	9b 88       	st.w	sp[0x20],r8
80003860:	00 00       	add	r0,r0
80003862:	06 3e       	cp.w	lr,r3
80003864:	00 00       	add	r0,r0
80003866:	06 3f       	cp.w	pc,r3
80003868:	00 00       	add	r0,r0
8000386a:	07 50       	ld.sh	r0,--r3
8000386c:	00 00       	add	r0,r0
8000386e:	06 41       	or	r1,r3
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	30 b4       	mov	r4,11
80003874:	80 00       	ld.sh	r0,r0[0x0]
80003876:	9b a0       	st.w	sp[0x28],r0
80003878:	80 00       	ld.sh	r0,r0[0x0]
8000387a:	9b a8       	st.w	sp[0x28],r8
8000387c:	80 00       	ld.sh	r0,r0[0x0]
8000387e:	2e e4       	sub	r4,-18
80003880:	00 00       	add	r0,r0
80003882:	06 34       	cp.w	r4,r3
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	33 f0       	mov	r0,63
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	34 50       	mov	r0,69

8000388c <__avr32_f64_mul>:
8000388c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003890:	e0 80 00 dc 	breq	80003a48 <__avr32_f64_mul_op1_zero>
80003894:	d4 21       	pushm	r4-r7,lr
80003896:	f7 e9 20 0e 	eor	lr,r11,r9
8000389a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000389e:	30 15       	mov	r5,1
800038a0:	c4 30       	breq	80003926 <__avr32_f64_mul_op1_subnormal>
800038a2:	ab 6b       	lsl	r11,0xa
800038a4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800038a8:	ab 6a       	lsl	r10,0xa
800038aa:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800038ae:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800038b2:	c5 c0       	breq	8000396a <__avr32_f64_mul_op2_subnormal>
800038b4:	a1 78       	lsl	r8,0x1
800038b6:	5c f9       	rol	r9
800038b8:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800038bc:	e0 47 07 ff 	cp.w	r7,2047
800038c0:	c7 70       	breq	800039ae <__avr32_f64_mul_op_nan_or_inf>
800038c2:	e0 46 07 ff 	cp.w	r6,2047
800038c6:	c7 40       	breq	800039ae <__avr32_f64_mul_op_nan_or_inf>
800038c8:	ee 06 00 0c 	add	r12,r7,r6
800038cc:	e0 2c 03 fe 	sub	r12,1022
800038d0:	f6 08 06 44 	mulu.d	r4,r11,r8
800038d4:	f4 09 07 44 	macu.d	r4,r10,r9
800038d8:	f4 08 06 46 	mulu.d	r6,r10,r8
800038dc:	f6 09 06 4a 	mulu.d	r10,r11,r9
800038e0:	08 07       	add	r7,r4
800038e2:	f4 05 00 4a 	adc	r10,r10,r5
800038e6:	5c 0b       	acr	r11
800038e8:	ed bb 00 14 	bld	r11,0x14
800038ec:	c0 50       	breq	800038f6 <__avr32_f64_mul+0x6a>
800038ee:	a1 77       	lsl	r7,0x1
800038f0:	5c fa       	rol	r10
800038f2:	5c fb       	rol	r11
800038f4:	20 1c       	sub	r12,1
800038f6:	58 0c       	cp.w	r12,0
800038f8:	e0 8a 00 6f 	brle	800039d6 <__avr32_f64_mul_res_subnormal>
800038fc:	e0 4c 07 ff 	cp.w	r12,2047
80003900:	e0 84 00 9c 	brge	80003a38 <__avr32_f64_mul_res_inf>
80003904:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003908:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000390c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003910:	ee 17 80 00 	eorh	r7,0x8000
80003914:	f1 b7 04 20 	satu	r7,0x1
80003918:	0e 0a       	add	r10,r7
8000391a:	5c 0b       	acr	r11
8000391c:	ed be 00 1f 	bld	lr,0x1f
80003920:	ef bb 00 1f 	bst	r11,0x1f
80003924:	d8 22       	popm	r4-r7,pc

80003926 <__avr32_f64_mul_op1_subnormal>:
80003926:	e4 1b 00 0f 	andh	r11,0xf
8000392a:	f4 0c 12 00 	clz	r12,r10
8000392e:	f6 06 12 00 	clz	r6,r11
80003932:	f7 bc 03 e1 	sublo	r12,-31
80003936:	f8 06 17 30 	movlo	r6,r12
8000393a:	f7 b6 02 01 	subhs	r6,1
8000393e:	e0 46 00 20 	cp.w	r6,32
80003942:	c0 d4       	brge	8000395c <__avr32_f64_mul_op1_subnormal+0x36>
80003944:	ec 0c 11 20 	rsub	r12,r6,32
80003948:	f6 06 09 4b 	lsl	r11,r11,r6
8000394c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003950:	18 4b       	or	r11,r12
80003952:	f4 06 09 4a 	lsl	r10,r10,r6
80003956:	20 b6       	sub	r6,11
80003958:	0c 17       	sub	r7,r6
8000395a:	ca ab       	rjmp	800038ae <__avr32_f64_mul+0x22>
8000395c:	f4 06 09 4b 	lsl	r11,r10,r6
80003960:	c6 40       	breq	80003a28 <__avr32_f64_mul_res_zero>
80003962:	30 0a       	mov	r10,0
80003964:	20 b6       	sub	r6,11
80003966:	0c 17       	sub	r7,r6
80003968:	ca 3b       	rjmp	800038ae <__avr32_f64_mul+0x22>

8000396a <__avr32_f64_mul_op2_subnormal>:
8000396a:	e4 19 00 0f 	andh	r9,0xf
8000396e:	f0 0c 12 00 	clz	r12,r8
80003972:	f2 05 12 00 	clz	r5,r9
80003976:	f7 bc 03 ea 	sublo	r12,-22
8000397a:	f8 05 17 30 	movlo	r5,r12
8000397e:	f7 b5 02 0a 	subhs	r5,10
80003982:	e0 45 00 20 	cp.w	r5,32
80003986:	c0 d4       	brge	800039a0 <__avr32_f64_mul_op2_subnormal+0x36>
80003988:	ea 0c 11 20 	rsub	r12,r5,32
8000398c:	f2 05 09 49 	lsl	r9,r9,r5
80003990:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003994:	18 49       	or	r9,r12
80003996:	f0 05 09 48 	lsl	r8,r8,r5
8000399a:	20 25       	sub	r5,2
8000399c:	0a 16       	sub	r6,r5
8000399e:	c8 fb       	rjmp	800038bc <__avr32_f64_mul+0x30>
800039a0:	f0 05 09 49 	lsl	r9,r8,r5
800039a4:	c4 20       	breq	80003a28 <__avr32_f64_mul_res_zero>
800039a6:	30 08       	mov	r8,0
800039a8:	20 25       	sub	r5,2
800039aa:	0a 16       	sub	r6,r5
800039ac:	c8 8b       	rjmp	800038bc <__avr32_f64_mul+0x30>

800039ae <__avr32_f64_mul_op_nan_or_inf>:
800039ae:	e4 19 00 0f 	andh	r9,0xf
800039b2:	e4 1b 00 0f 	andh	r11,0xf
800039b6:	14 4b       	or	r11,r10
800039b8:	10 49       	or	r9,r8
800039ba:	e0 47 07 ff 	cp.w	r7,2047
800039be:	c0 91       	brne	800039d0 <__avr32_f64_mul_op1_not_naninf>
800039c0:	58 0b       	cp.w	r11,0
800039c2:	c3 81       	brne	80003a32 <__avr32_f64_mul_res_nan>
800039c4:	e0 46 07 ff 	cp.w	r6,2047
800039c8:	c3 81       	brne	80003a38 <__avr32_f64_mul_res_inf>
800039ca:	58 09       	cp.w	r9,0
800039cc:	c3 60       	breq	80003a38 <__avr32_f64_mul_res_inf>
800039ce:	c3 28       	rjmp	80003a32 <__avr32_f64_mul_res_nan>

800039d0 <__avr32_f64_mul_op1_not_naninf>:
800039d0:	58 09       	cp.w	r9,0
800039d2:	c3 30       	breq	80003a38 <__avr32_f64_mul_res_inf>
800039d4:	c2 f8       	rjmp	80003a32 <__avr32_f64_mul_res_nan>

800039d6 <__avr32_f64_mul_res_subnormal>:
800039d6:	5c 3c       	neg	r12
800039d8:	2f fc       	sub	r12,-1
800039da:	f1 bc 04 c0 	satu	r12,0x6
800039de:	e0 4c 00 20 	cp.w	r12,32
800039e2:	c1 14       	brge	80003a04 <__avr32_f64_mul_res_subnormal+0x2e>
800039e4:	f8 08 11 20 	rsub	r8,r12,32
800039e8:	0e 46       	or	r6,r7
800039ea:	ee 0c 0a 47 	lsr	r7,r7,r12
800039ee:	f4 08 09 49 	lsl	r9,r10,r8
800039f2:	12 47       	or	r7,r9
800039f4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800039f8:	f6 08 09 49 	lsl	r9,r11,r8
800039fc:	12 4a       	or	r10,r9
800039fe:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003a02:	c8 3b       	rjmp	80003908 <__avr32_f64_mul+0x7c>
80003a04:	f8 08 11 20 	rsub	r8,r12,32
80003a08:	f9 b9 00 00 	moveq	r9,0
80003a0c:	c0 30       	breq	80003a12 <__avr32_f64_mul_res_subnormal+0x3c>
80003a0e:	f6 08 09 49 	lsl	r9,r11,r8
80003a12:	0e 46       	or	r6,r7
80003a14:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003a18:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003a1c:	f3 ea 10 07 	or	r7,r9,r10
80003a20:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003a24:	30 0b       	mov	r11,0
80003a26:	c7 1b       	rjmp	80003908 <__avr32_f64_mul+0x7c>

80003a28 <__avr32_f64_mul_res_zero>:
80003a28:	1c 9b       	mov	r11,lr
80003a2a:	e6 1b 80 00 	andh	r11,0x8000,COH
80003a2e:	30 0a       	mov	r10,0
80003a30:	d8 22       	popm	r4-r7,pc

80003a32 <__avr32_f64_mul_res_nan>:
80003a32:	3f fb       	mov	r11,-1
80003a34:	3f fa       	mov	r10,-1
80003a36:	d8 22       	popm	r4-r7,pc

80003a38 <__avr32_f64_mul_res_inf>:
80003a38:	f0 6b 00 00 	mov	r11,-1048576
80003a3c:	ed be 00 1f 	bld	lr,0x1f
80003a40:	ef bb 00 1f 	bst	r11,0x1f
80003a44:	30 0a       	mov	r10,0
80003a46:	d8 22       	popm	r4-r7,pc

80003a48 <__avr32_f64_mul_op1_zero>:
80003a48:	f7 e9 20 0b 	eor	r11,r11,r9
80003a4c:	e6 1b 80 00 	andh	r11,0x8000,COH
80003a50:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003a54:	e0 4c 07 ff 	cp.w	r12,2047
80003a58:	5e 1c       	retne	r12
80003a5a:	3f fa       	mov	r10,-1
80003a5c:	3f fb       	mov	r11,-1
80003a5e:	5e fc       	retal	r12

80003a60 <__avr32_u32_to_f64>:
80003a60:	f8 cb 00 00 	sub	r11,r12,0
80003a64:	30 0c       	mov	r12,0
80003a66:	c0 38       	rjmp	80003a6c <__avr32_s32_to_f64+0x4>

80003a68 <__avr32_s32_to_f64>:
80003a68:	18 9b       	mov	r11,r12
80003a6a:	5c 4b       	abs	r11
80003a6c:	30 0a       	mov	r10,0
80003a6e:	5e 0b       	reteq	r11
80003a70:	d4 01       	pushm	lr
80003a72:	e0 69 04 1e 	mov	r9,1054
80003a76:	f6 08 12 00 	clz	r8,r11
80003a7a:	c1 70       	breq	80003aa8 <__avr32_s32_to_f64+0x40>
80003a7c:	c0 c3       	brcs	80003a94 <__avr32_s32_to_f64+0x2c>
80003a7e:	f0 0e 11 20 	rsub	lr,r8,32
80003a82:	f6 08 09 4b 	lsl	r11,r11,r8
80003a86:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003a8a:	1c 4b       	or	r11,lr
80003a8c:	f4 08 09 4a 	lsl	r10,r10,r8
80003a90:	10 19       	sub	r9,r8
80003a92:	c0 b8       	rjmp	80003aa8 <__avr32_s32_to_f64+0x40>
80003a94:	f4 08 12 00 	clz	r8,r10
80003a98:	f9 b8 03 00 	movlo	r8,0
80003a9c:	f7 b8 02 e0 	subhs	r8,-32
80003aa0:	f4 08 09 4b 	lsl	r11,r10,r8
80003aa4:	30 0a       	mov	r10,0
80003aa6:	10 19       	sub	r9,r8
80003aa8:	58 09       	cp.w	r9,0
80003aaa:	e0 89 00 30 	brgt	80003b0a <__avr32_s32_to_f64+0xa2>
80003aae:	5c 39       	neg	r9
80003ab0:	2f f9       	sub	r9,-1
80003ab2:	e0 49 00 36 	cp.w	r9,54
80003ab6:	c0 43       	brcs	80003abe <__avr32_s32_to_f64+0x56>
80003ab8:	30 0b       	mov	r11,0
80003aba:	30 0a       	mov	r10,0
80003abc:	c2 68       	rjmp	80003b08 <__avr32_s32_to_f64+0xa0>
80003abe:	2f 69       	sub	r9,-10
80003ac0:	f2 08 11 20 	rsub	r8,r9,32
80003ac4:	e0 49 00 20 	cp.w	r9,32
80003ac8:	c0 b2       	brcc	80003ade <__avr32_s32_to_f64+0x76>
80003aca:	f4 08 09 4e 	lsl	lr,r10,r8
80003ace:	f6 08 09 48 	lsl	r8,r11,r8
80003ad2:	f4 09 0a 4a 	lsr	r10,r10,r9
80003ad6:	f6 09 0a 4b 	lsr	r11,r11,r9
80003ada:	10 4b       	or	r11,r8
80003adc:	c0 88       	rjmp	80003aec <__avr32_s32_to_f64+0x84>
80003ade:	f6 08 09 4e 	lsl	lr,r11,r8
80003ae2:	14 4e       	or	lr,r10
80003ae4:	16 9a       	mov	r10,r11
80003ae6:	30 0b       	mov	r11,0
80003ae8:	f4 09 0a 4a 	lsr	r10,r10,r9
80003aec:	ed ba 00 00 	bld	r10,0x0
80003af0:	c0 92       	brcc	80003b02 <__avr32_s32_to_f64+0x9a>
80003af2:	1c 7e       	tst	lr,lr
80003af4:	c0 41       	brne	80003afc <__avr32_s32_to_f64+0x94>
80003af6:	ed ba 00 01 	bld	r10,0x1
80003afa:	c0 42       	brcc	80003b02 <__avr32_s32_to_f64+0x9a>
80003afc:	2f fa       	sub	r10,-1
80003afe:	f7 bb 02 ff 	subhs	r11,-1
80003b02:	5c fc       	rol	r12
80003b04:	5d 0b       	ror	r11
80003b06:	5d 0a       	ror	r10
80003b08:	d8 02       	popm	pc
80003b0a:	e0 68 03 ff 	mov	r8,1023
80003b0e:	ed ba 00 0b 	bld	r10,0xb
80003b12:	f7 b8 00 ff 	subeq	r8,-1
80003b16:	10 0a       	add	r10,r8
80003b18:	5c 0b       	acr	r11
80003b1a:	f7 b9 03 fe 	sublo	r9,-2
80003b1e:	e0 49 07 ff 	cp.w	r9,2047
80003b22:	c0 55       	brlt	80003b2c <__avr32_s32_to_f64+0xc4>
80003b24:	30 0a       	mov	r10,0
80003b26:	fc 1b ff e0 	movh	r11,0xffe0
80003b2a:	c0 c8       	rjmp	80003b42 <__floatsidf_return_op1>
80003b2c:	ed bb 00 1f 	bld	r11,0x1f
80003b30:	f7 b9 01 01 	subne	r9,1
80003b34:	ab 9a       	lsr	r10,0xb
80003b36:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003b3a:	a1 7b       	lsl	r11,0x1
80003b3c:	ab 9b       	lsr	r11,0xb
80003b3e:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003b42 <__floatsidf_return_op1>:
80003b42:	a1 7c       	lsl	r12,0x1
80003b44:	5d 0b       	ror	r11
80003b46:	d8 02       	popm	pc

80003b48 <__avr32_f32_to_f64>:
80003b48:	f8 0b 15 01 	lsl	r11,r12,0x1
80003b4c:	f9 ba 00 00 	moveq	r10,0
80003b50:	5e 0b       	reteq	r11
80003b52:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003b56:	e0 49 00 ff 	cp.w	r9,255
80003b5a:	c1 e0       	breq	80003b96 <__extendsfdf_return_op1+0x6>
80003b5c:	a7 7b       	lsl	r11,0x7
80003b5e:	30 0a       	mov	r10,0
80003b60:	58 09       	cp.w	r9,0
80003b62:	f7 b9 00 ff 	subeq	r9,-1
80003b66:	5f 18       	srne	r8
80003b68:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003b6c:	fe 39 fc 80 	sub	r9,-896
80003b70:	f6 08 12 00 	clz	r8,r11
80003b74:	10 19       	sub	r9,r8
80003b76:	f6 08 09 4b 	lsl	r11,r11,r8
80003b7a:	ed bb 00 1f 	bld	r11,0x1f
80003b7e:	f7 b9 01 01 	subne	r9,1
80003b82:	ab 9a       	lsr	r10,0xb
80003b84:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003b88:	a1 7b       	lsl	r11,0x1
80003b8a:	ab 9b       	lsr	r11,0xb
80003b8c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003b90 <__extendsfdf_return_op1>:
80003b90:	a1 7c       	lsl	r12,0x1
80003b92:	5d 0b       	ror	r11
80003b94:	5e fb       	retal	r11
80003b96:	fc 1a ff e0 	movh	r10,0xffe0
80003b9a:	a9 6b       	lsl	r11,0x8
80003b9c:	f9 bb 01 ff 	movne	r11,-1
80003ba0:	f4 0b 17 00 	moveq	r11,r10
80003ba4:	30 0a       	mov	r10,0
80003ba6:	cf 5b       	rjmp	80003b90 <__extendsfdf_return_op1>

80003ba8 <__avr32_f64_to_f32>:
80003ba8:	f6 09 15 01 	lsl	r9,r11,0x1
80003bac:	b5 99       	lsr	r9,0x15
80003bae:	5e 0d       	reteq	0
80003bb0:	f6 08 15 0a 	lsl	r8,r11,0xa
80003bb4:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003bb8:	ab 6a       	lsl	r10,0xa
80003bba:	5c 3a       	neg	r10
80003bbc:	5c fc       	rol	r12
80003bbe:	e0 49 07 ff 	cp.w	r9,2047
80003bc2:	c1 a0       	breq	80003bf6 <__truncdfsf_return_op1+0x6>
80003bc4:	e0 29 03 80 	sub	r9,896
80003bc8:	bf bc       	sbr	r12,0x1f
80003bca:	58 09       	cp.w	r9,0
80003bcc:	e0 8a 00 1a 	brle	80003c00 <__truncdfsf_return_op1+0x10>
80003bd0:	37 fa       	mov	r10,127
80003bd2:	ed bc 00 08 	bld	r12,0x8
80003bd6:	f7 ba 00 ff 	subeq	r10,-1
80003bda:	14 0c       	add	r12,r10
80003bdc:	f7 b9 03 fe 	sublo	r9,-2
80003be0:	ed bc 00 1f 	bld	r12,0x1f
80003be4:	f7 b9 01 01 	subne	r9,1
80003be8:	f8 0c 16 07 	lsr	r12,r12,0x7
80003bec:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003bf0 <__truncdfsf_return_op1>:
80003bf0:	a1 7b       	lsl	r11,0x1
80003bf2:	5d 0c       	ror	r12
80003bf4:	5e fc       	retal	r12
80003bf6:	bf dc       	cbr	r12,0x1f
80003bf8:	5e 1e       	retne	-1
80003bfa:	fc 1c 7f 80 	movh	r12,0x7f80
80003bfe:	5e fc       	retal	r12
80003c00:	f2 09 11 01 	rsub	r9,r9,1
80003c04:	59 99       	cp.w	r9,25
80003c06:	f9 bc 02 00 	movhs	r12,0
80003c0a:	c1 32       	brcc	80003c30 <__truncdfsf_return_op1+0x40>
80003c0c:	f2 0a 11 20 	rsub	r10,r9,32
80003c10:	f8 0a 09 4a 	lsl	r10,r12,r10
80003c14:	5f 1a       	srne	r10
80003c16:	f8 09 0a 4c 	lsr	r12,r12,r9
80003c1a:	14 4c       	or	r12,r10
80003c1c:	37 fa       	mov	r10,127
80003c1e:	ed bc 00 08 	bld	r12,0x8
80003c22:	f7 ba 00 ff 	subeq	r10,-1
80003c26:	14 0c       	add	r12,r10
80003c28:	f8 0c 16 07 	lsr	r12,r12,0x7
80003c2c:	a1 7b       	lsl	r11,0x1
80003c2e:	5d 0c       	ror	r12
80003c30:	5e fc       	retal	r12

80003c32 <__avr32_udiv64>:
80003c32:	d4 31       	pushm	r0-r7,lr
80003c34:	1a 97       	mov	r7,sp
80003c36:	20 3d       	sub	sp,12
80003c38:	10 9c       	mov	r12,r8
80003c3a:	12 9e       	mov	lr,r9
80003c3c:	14 93       	mov	r3,r10
80003c3e:	58 09       	cp.w	r9,0
80003c40:	e0 81 00 bd 	brne	80003dba <__avr32_udiv64+0x188>
80003c44:	16 38       	cp.w	r8,r11
80003c46:	e0 88 00 40 	brls	80003cc6 <__avr32_udiv64+0x94>
80003c4a:	f0 08 12 00 	clz	r8,r8
80003c4e:	c0 d0       	breq	80003c68 <__avr32_udiv64+0x36>
80003c50:	f6 08 09 4b 	lsl	r11,r11,r8
80003c54:	f0 09 11 20 	rsub	r9,r8,32
80003c58:	f8 08 09 4c 	lsl	r12,r12,r8
80003c5c:	f4 09 0a 49 	lsr	r9,r10,r9
80003c60:	f4 08 09 43 	lsl	r3,r10,r8
80003c64:	f3 eb 10 0b 	or	r11,r9,r11
80003c68:	f8 0e 16 10 	lsr	lr,r12,0x10
80003c6c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003c70:	f6 0e 0d 00 	divu	r0,r11,lr
80003c74:	e6 0b 16 10 	lsr	r11,r3,0x10
80003c78:	00 99       	mov	r9,r0
80003c7a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003c7e:	e0 0a 02 48 	mul	r8,r0,r10
80003c82:	10 3b       	cp.w	r11,r8
80003c84:	c0 a2       	brcc	80003c98 <__avr32_udiv64+0x66>
80003c86:	20 19       	sub	r9,1
80003c88:	18 0b       	add	r11,r12
80003c8a:	18 3b       	cp.w	r11,r12
80003c8c:	c0 63       	brcs	80003c98 <__avr32_udiv64+0x66>
80003c8e:	10 3b       	cp.w	r11,r8
80003c90:	f7 b9 03 01 	sublo	r9,1
80003c94:	f7 dc e3 0b 	addcs	r11,r11,r12
80003c98:	f6 08 01 01 	sub	r1,r11,r8
80003c9c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003ca0:	e2 0e 0d 00 	divu	r0,r1,lr
80003ca4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003ca8:	00 98       	mov	r8,r0
80003caa:	e0 0a 02 4a 	mul	r10,r0,r10
80003cae:	14 33       	cp.w	r3,r10
80003cb0:	c0 82       	brcc	80003cc0 <__avr32_udiv64+0x8e>
80003cb2:	20 18       	sub	r8,1
80003cb4:	18 03       	add	r3,r12
80003cb6:	18 33       	cp.w	r3,r12
80003cb8:	c0 43       	brcs	80003cc0 <__avr32_udiv64+0x8e>
80003cba:	14 33       	cp.w	r3,r10
80003cbc:	f7 b8 03 01 	sublo	r8,1
80003cc0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003cc4:	cd f8       	rjmp	80003e82 <__avr32_udiv64+0x250>
80003cc6:	58 08       	cp.w	r8,0
80003cc8:	c0 51       	brne	80003cd2 <__avr32_udiv64+0xa0>
80003cca:	30 19       	mov	r9,1
80003ccc:	f2 08 0d 08 	divu	r8,r9,r8
80003cd0:	10 9c       	mov	r12,r8
80003cd2:	f8 06 12 00 	clz	r6,r12
80003cd6:	c0 41       	brne	80003cde <__avr32_udiv64+0xac>
80003cd8:	18 1b       	sub	r11,r12
80003cda:	30 19       	mov	r9,1
80003cdc:	c4 08       	rjmp	80003d5c <__avr32_udiv64+0x12a>
80003cde:	ec 01 11 20 	rsub	r1,r6,32
80003ce2:	f4 01 0a 49 	lsr	r9,r10,r1
80003ce6:	f8 06 09 4c 	lsl	r12,r12,r6
80003cea:	f6 06 09 48 	lsl	r8,r11,r6
80003cee:	f6 01 0a 41 	lsr	r1,r11,r1
80003cf2:	f3 e8 10 08 	or	r8,r9,r8
80003cf6:	f8 03 16 10 	lsr	r3,r12,0x10
80003cfa:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003cfe:	e2 03 0d 00 	divu	r0,r1,r3
80003d02:	f0 0b 16 10 	lsr	r11,r8,0x10
80003d06:	00 9e       	mov	lr,r0
80003d08:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d0c:	e0 05 02 49 	mul	r9,r0,r5
80003d10:	12 3b       	cp.w	r11,r9
80003d12:	c0 a2       	brcc	80003d26 <__avr32_udiv64+0xf4>
80003d14:	20 1e       	sub	lr,1
80003d16:	18 0b       	add	r11,r12
80003d18:	18 3b       	cp.w	r11,r12
80003d1a:	c0 63       	brcs	80003d26 <__avr32_udiv64+0xf4>
80003d1c:	12 3b       	cp.w	r11,r9
80003d1e:	f7 be 03 01 	sublo	lr,1
80003d22:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d26:	12 1b       	sub	r11,r9
80003d28:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003d2c:	f6 03 0d 02 	divu	r2,r11,r3
80003d30:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003d34:	04 99       	mov	r9,r2
80003d36:	e4 05 02 4b 	mul	r11,r2,r5
80003d3a:	16 38       	cp.w	r8,r11
80003d3c:	c0 a2       	brcc	80003d50 <__avr32_udiv64+0x11e>
80003d3e:	20 19       	sub	r9,1
80003d40:	18 08       	add	r8,r12
80003d42:	18 38       	cp.w	r8,r12
80003d44:	c0 63       	brcs	80003d50 <__avr32_udiv64+0x11e>
80003d46:	16 38       	cp.w	r8,r11
80003d48:	f7 b9 03 01 	sublo	r9,1
80003d4c:	f1 dc e3 08 	addcs	r8,r8,r12
80003d50:	f4 06 09 43 	lsl	r3,r10,r6
80003d54:	f0 0b 01 0b 	sub	r11,r8,r11
80003d58:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003d5c:	f8 06 16 10 	lsr	r6,r12,0x10
80003d60:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003d64:	f6 06 0d 00 	divu	r0,r11,r6
80003d68:	e6 0b 16 10 	lsr	r11,r3,0x10
80003d6c:	00 9a       	mov	r10,r0
80003d6e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d72:	e0 0e 02 48 	mul	r8,r0,lr
80003d76:	10 3b       	cp.w	r11,r8
80003d78:	c0 a2       	brcc	80003d8c <__avr32_udiv64+0x15a>
80003d7a:	20 1a       	sub	r10,1
80003d7c:	18 0b       	add	r11,r12
80003d7e:	18 3b       	cp.w	r11,r12
80003d80:	c0 63       	brcs	80003d8c <__avr32_udiv64+0x15a>
80003d82:	10 3b       	cp.w	r11,r8
80003d84:	f7 ba 03 01 	sublo	r10,1
80003d88:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d8c:	f6 08 01 01 	sub	r1,r11,r8
80003d90:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003d94:	e2 06 0d 00 	divu	r0,r1,r6
80003d98:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003d9c:	00 98       	mov	r8,r0
80003d9e:	e0 0e 02 4b 	mul	r11,r0,lr
80003da2:	16 33       	cp.w	r3,r11
80003da4:	c0 82       	brcc	80003db4 <__avr32_udiv64+0x182>
80003da6:	20 18       	sub	r8,1
80003da8:	18 03       	add	r3,r12
80003daa:	18 33       	cp.w	r3,r12
80003dac:	c0 43       	brcs	80003db4 <__avr32_udiv64+0x182>
80003dae:	16 33       	cp.w	r3,r11
80003db0:	f7 b8 03 01 	sublo	r8,1
80003db4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003db8:	c6 98       	rjmp	80003e8a <__avr32_udiv64+0x258>
80003dba:	16 39       	cp.w	r9,r11
80003dbc:	e0 8b 00 65 	brhi	80003e86 <__avr32_udiv64+0x254>
80003dc0:	f2 09 12 00 	clz	r9,r9
80003dc4:	c0 b1       	brne	80003dda <__avr32_udiv64+0x1a8>
80003dc6:	10 3a       	cp.w	r10,r8
80003dc8:	5f 2a       	srhs	r10
80003dca:	1c 3b       	cp.w	r11,lr
80003dcc:	5f b8       	srhi	r8
80003dce:	10 4a       	or	r10,r8
80003dd0:	f2 0a 18 00 	cp.b	r10,r9
80003dd4:	c5 90       	breq	80003e86 <__avr32_udiv64+0x254>
80003dd6:	30 18       	mov	r8,1
80003dd8:	c5 98       	rjmp	80003e8a <__avr32_udiv64+0x258>
80003dda:	f0 09 09 46 	lsl	r6,r8,r9
80003dde:	f2 03 11 20 	rsub	r3,r9,32
80003de2:	fc 09 09 4e 	lsl	lr,lr,r9
80003de6:	f0 03 0a 48 	lsr	r8,r8,r3
80003dea:	f6 09 09 4c 	lsl	r12,r11,r9
80003dee:	f4 03 0a 42 	lsr	r2,r10,r3
80003df2:	ef 46 ff f4 	st.w	r7[-12],r6
80003df6:	f6 03 0a 43 	lsr	r3,r11,r3
80003dfa:	18 42       	or	r2,r12
80003dfc:	f1 ee 10 0c 	or	r12,r8,lr
80003e00:	f8 01 16 10 	lsr	r1,r12,0x10
80003e04:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003e08:	e6 01 0d 04 	divu	r4,r3,r1
80003e0c:	e4 03 16 10 	lsr	r3,r2,0x10
80003e10:	08 9e       	mov	lr,r4
80003e12:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003e16:	e8 06 02 48 	mul	r8,r4,r6
80003e1a:	10 33       	cp.w	r3,r8
80003e1c:	c0 a2       	brcc	80003e30 <__avr32_udiv64+0x1fe>
80003e1e:	20 1e       	sub	lr,1
80003e20:	18 03       	add	r3,r12
80003e22:	18 33       	cp.w	r3,r12
80003e24:	c0 63       	brcs	80003e30 <__avr32_udiv64+0x1fe>
80003e26:	10 33       	cp.w	r3,r8
80003e28:	f7 be 03 01 	sublo	lr,1
80003e2c:	e7 dc e3 03 	addcs	r3,r3,r12
80003e30:	10 13       	sub	r3,r8
80003e32:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003e36:	e6 01 0d 00 	divu	r0,r3,r1
80003e3a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003e3e:	00 98       	mov	r8,r0
80003e40:	e0 06 02 46 	mul	r6,r0,r6
80003e44:	0c 3b       	cp.w	r11,r6
80003e46:	c0 a2       	brcc	80003e5a <__avr32_udiv64+0x228>
80003e48:	20 18       	sub	r8,1
80003e4a:	18 0b       	add	r11,r12
80003e4c:	18 3b       	cp.w	r11,r12
80003e4e:	c0 63       	brcs	80003e5a <__avr32_udiv64+0x228>
80003e50:	0c 3b       	cp.w	r11,r6
80003e52:	f7 dc e3 0b 	addcs	r11,r11,r12
80003e56:	f7 b8 03 01 	sublo	r8,1
80003e5a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003e5e:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003e62:	0c 1b       	sub	r11,r6
80003e64:	f0 04 06 42 	mulu.d	r2,r8,r4
80003e68:	06 95       	mov	r5,r3
80003e6a:	16 35       	cp.w	r5,r11
80003e6c:	e0 8b 00 0a 	brhi	80003e80 <__avr32_udiv64+0x24e>
80003e70:	5f 0b       	sreq	r11
80003e72:	f4 09 09 49 	lsl	r9,r10,r9
80003e76:	12 32       	cp.w	r2,r9
80003e78:	5f b9       	srhi	r9
80003e7a:	f7 e9 00 09 	and	r9,r11,r9
80003e7e:	c0 60       	breq	80003e8a <__avr32_udiv64+0x258>
80003e80:	20 18       	sub	r8,1
80003e82:	30 09       	mov	r9,0
80003e84:	c0 38       	rjmp	80003e8a <__avr32_udiv64+0x258>
80003e86:	30 09       	mov	r9,0
80003e88:	12 98       	mov	r8,r9
80003e8a:	10 9a       	mov	r10,r8
80003e8c:	12 93       	mov	r3,r9
80003e8e:	10 92       	mov	r2,r8
80003e90:	12 9b       	mov	r11,r9
80003e92:	2f dd       	sub	sp,-12
80003e94:	d8 32       	popm	r0-r7,pc

80003e96 <memcpy>:
80003e96:	58 8a       	cp.w	r10,8
80003e98:	c2 f5       	brlt	80003ef6 <memcpy+0x60>
80003e9a:	f9 eb 10 09 	or	r9,r12,r11
80003e9e:	e2 19 00 03 	andl	r9,0x3,COH
80003ea2:	e0 81 00 97 	brne	80003fd0 <memcpy+0x13a>
80003ea6:	e0 4a 00 20 	cp.w	r10,32
80003eaa:	c3 b4       	brge	80003f20 <memcpy+0x8a>
80003eac:	f4 08 14 02 	asr	r8,r10,0x2
80003eb0:	f0 09 11 08 	rsub	r9,r8,8
80003eb4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003eb8:	76 69       	ld.w	r9,r11[0x18]
80003eba:	99 69       	st.w	r12[0x18],r9
80003ebc:	76 59       	ld.w	r9,r11[0x14]
80003ebe:	99 59       	st.w	r12[0x14],r9
80003ec0:	76 49       	ld.w	r9,r11[0x10]
80003ec2:	99 49       	st.w	r12[0x10],r9
80003ec4:	76 39       	ld.w	r9,r11[0xc]
80003ec6:	99 39       	st.w	r12[0xc],r9
80003ec8:	76 29       	ld.w	r9,r11[0x8]
80003eca:	99 29       	st.w	r12[0x8],r9
80003ecc:	76 19       	ld.w	r9,r11[0x4]
80003ece:	99 19       	st.w	r12[0x4],r9
80003ed0:	76 09       	ld.w	r9,r11[0x0]
80003ed2:	99 09       	st.w	r12[0x0],r9
80003ed4:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003ed8:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003edc:	e0 1a 00 03 	andl	r10,0x3
80003ee0:	f4 0a 11 04 	rsub	r10,r10,4
80003ee4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003ee8:	17 a9       	ld.ub	r9,r11[0x2]
80003eea:	b0 a9       	st.b	r8[0x2],r9
80003eec:	17 99       	ld.ub	r9,r11[0x1]
80003eee:	b0 99       	st.b	r8[0x1],r9
80003ef0:	17 89       	ld.ub	r9,r11[0x0]
80003ef2:	b0 89       	st.b	r8[0x0],r9
80003ef4:	5e fc       	retal	r12
80003ef6:	f4 0a 11 09 	rsub	r10,r10,9
80003efa:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003efe:	17 f9       	ld.ub	r9,r11[0x7]
80003f00:	b8 f9       	st.b	r12[0x7],r9
80003f02:	17 e9       	ld.ub	r9,r11[0x6]
80003f04:	b8 e9       	st.b	r12[0x6],r9
80003f06:	17 d9       	ld.ub	r9,r11[0x5]
80003f08:	b8 d9       	st.b	r12[0x5],r9
80003f0a:	17 c9       	ld.ub	r9,r11[0x4]
80003f0c:	b8 c9       	st.b	r12[0x4],r9
80003f0e:	17 b9       	ld.ub	r9,r11[0x3]
80003f10:	b8 b9       	st.b	r12[0x3],r9
80003f12:	17 a9       	ld.ub	r9,r11[0x2]
80003f14:	b8 a9       	st.b	r12[0x2],r9
80003f16:	17 99       	ld.ub	r9,r11[0x1]
80003f18:	b8 99       	st.b	r12[0x1],r9
80003f1a:	17 89       	ld.ub	r9,r11[0x0]
80003f1c:	b8 89       	st.b	r12[0x0],r9
80003f1e:	5e fc       	retal	r12
80003f20:	eb cd 40 c0 	pushm	r6-r7,lr
80003f24:	18 99       	mov	r9,r12
80003f26:	22 0a       	sub	r10,32
80003f28:	b7 07       	ld.d	r6,r11++
80003f2a:	b3 26       	st.d	r9++,r6
80003f2c:	b7 07       	ld.d	r6,r11++
80003f2e:	b3 26       	st.d	r9++,r6
80003f30:	b7 07       	ld.d	r6,r11++
80003f32:	b3 26       	st.d	r9++,r6
80003f34:	b7 07       	ld.d	r6,r11++
80003f36:	b3 26       	st.d	r9++,r6
80003f38:	22 0a       	sub	r10,32
80003f3a:	cf 74       	brge	80003f28 <memcpy+0x92>
80003f3c:	2f 0a       	sub	r10,-16
80003f3e:	c0 65       	brlt	80003f4a <memcpy+0xb4>
80003f40:	b7 07       	ld.d	r6,r11++
80003f42:	b3 26       	st.d	r9++,r6
80003f44:	b7 07       	ld.d	r6,r11++
80003f46:	b3 26       	st.d	r9++,r6
80003f48:	21 0a       	sub	r10,16
80003f4a:	5c 3a       	neg	r10
80003f4c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003f50:	d7 03       	nop
80003f52:	d7 03       	nop
80003f54:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003f58:	f3 66 00 0e 	st.b	r9[14],r6
80003f5c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003f60:	f3 66 00 0d 	st.b	r9[13],r6
80003f64:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003f68:	f3 66 00 0c 	st.b	r9[12],r6
80003f6c:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003f70:	f3 66 00 0b 	st.b	r9[11],r6
80003f74:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003f78:	f3 66 00 0a 	st.b	r9[10],r6
80003f7c:	f7 36 00 09 	ld.ub	r6,r11[9]
80003f80:	f3 66 00 09 	st.b	r9[9],r6
80003f84:	f7 36 00 08 	ld.ub	r6,r11[8]
80003f88:	f3 66 00 08 	st.b	r9[8],r6
80003f8c:	f7 36 00 07 	ld.ub	r6,r11[7]
80003f90:	f3 66 00 07 	st.b	r9[7],r6
80003f94:	f7 36 00 06 	ld.ub	r6,r11[6]
80003f98:	f3 66 00 06 	st.b	r9[6],r6
80003f9c:	f7 36 00 05 	ld.ub	r6,r11[5]
80003fa0:	f3 66 00 05 	st.b	r9[5],r6
80003fa4:	f7 36 00 04 	ld.ub	r6,r11[4]
80003fa8:	f3 66 00 04 	st.b	r9[4],r6
80003fac:	f7 36 00 03 	ld.ub	r6,r11[3]
80003fb0:	f3 66 00 03 	st.b	r9[3],r6
80003fb4:	f7 36 00 02 	ld.ub	r6,r11[2]
80003fb8:	f3 66 00 02 	st.b	r9[2],r6
80003fbc:	f7 36 00 01 	ld.ub	r6,r11[1]
80003fc0:	f3 66 00 01 	st.b	r9[1],r6
80003fc4:	f7 36 00 00 	ld.ub	r6,r11[0]
80003fc8:	f3 66 00 00 	st.b	r9[0],r6
80003fcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003fd0:	20 1a       	sub	r10,1
80003fd2:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003fd6:	f8 0a 0b 09 	st.b	r12[r10],r9
80003fda:	cf b1       	brne	80003fd0 <memcpy+0x13a>
80003fdc:	5e fc       	retal	r12

80003fde <memset>:
80003fde:	18 98       	mov	r8,r12
80003fe0:	c0 38       	rjmp	80003fe6 <memset+0x8>
80003fe2:	10 cb       	st.b	r8++,r11
80003fe4:	20 1a       	sub	r10,1
80003fe6:	58 0a       	cp.w	r10,0
80003fe8:	cf d1       	brne	80003fe2 <memset+0x4>
80003fea:	5e fc       	retal	r12

80003fec <sprintf>:
80003fec:	d4 01       	pushm	lr
80003fee:	21 7d       	sub	sp,92
80003ff0:	e0 68 ff ff 	mov	r8,65535
80003ff4:	ea 18 7f ff 	orh	r8,0x7fff
80003ff8:	50 58       	stdsp	sp[0x14],r8
80003ffa:	50 28       	stdsp	sp[0x8],r8
80003ffc:	e0 68 02 08 	mov	r8,520
80004000:	ba 68       	st.h	sp[0xc],r8
80004002:	3f f8       	mov	r8,-1
80004004:	ba 78       	st.h	sp[0xe],r8
80004006:	e0 68 01 18 	mov	r8,280
8000400a:	50 4c       	stdsp	sp[0x10],r12
8000400c:	16 9a       	mov	r10,r11
8000400e:	50 0c       	stdsp	sp[0x0],r12
80004010:	fa c9 ff a0 	sub	r9,sp,-96
80004014:	70 0c       	ld.w	r12,r8[0x0]
80004016:	1a 9b       	mov	r11,sp
80004018:	c9 cd       	rcall	80004350 <_vfprintf_r>
8000401a:	30 09       	mov	r9,0
8000401c:	40 08       	lddsp	r8,sp[0x0]
8000401e:	b0 89       	st.b	r8[0x0],r9
80004020:	2e 9d       	sub	sp,-92
80004022:	d8 02       	popm	pc

80004024 <get_arg>:
80004024:	d4 31       	pushm	r0-r7,lr
80004026:	20 8d       	sub	sp,32
80004028:	fa c4 ff bc 	sub	r4,sp,-68
8000402c:	50 4b       	stdsp	sp[0x10],r11
8000402e:	68 2e       	ld.w	lr,r4[0x8]
80004030:	50 58       	stdsp	sp[0x14],r8
80004032:	12 96       	mov	r6,r9
80004034:	7c 0b       	ld.w	r11,lr[0x0]
80004036:	70 05       	ld.w	r5,r8[0x0]
80004038:	50 6e       	stdsp	sp[0x18],lr
8000403a:	58 0b       	cp.w	r11,0
8000403c:	f4 0b 17 00 	moveq	r11,r10
80004040:	68 03       	ld.w	r3,r4[0x0]
80004042:	68 11       	ld.w	r1,r4[0x4]
80004044:	40 49       	lddsp	r9,sp[0x10]
80004046:	30 08       	mov	r8,0
80004048:	c2 69       	rjmp	80004294 <get_arg+0x270>
8000404a:	2f fb       	sub	r11,-1
8000404c:	32 5c       	mov	r12,37
8000404e:	17 8a       	ld.ub	r10,r11[0x0]
80004050:	f8 0a 18 00 	cp.b	r10,r12
80004054:	5f 1e       	srne	lr
80004056:	f0 0a 18 00 	cp.b	r10,r8
8000405a:	5f 1c       	srne	r12
8000405c:	fd ec 00 0c 	and	r12,lr,r12
80004060:	f0 0c 18 00 	cp.b	r12,r8
80004064:	cf 31       	brne	8000404a <get_arg+0x26>
80004066:	58 0a       	cp.w	r10,0
80004068:	e0 80 01 23 	breq	800042ae <get_arg+0x28a>
8000406c:	30 0c       	mov	r12,0
8000406e:	3f fa       	mov	r10,-1
80004070:	18 90       	mov	r0,r12
80004072:	50 3a       	stdsp	sp[0xc],r10
80004074:	18 94       	mov	r4,r12
80004076:	18 92       	mov	r2,r12
80004078:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000407c:	16 97       	mov	r7,r11
8000407e:	50 7c       	stdsp	sp[0x1c],r12
80004080:	fe cc a1 d4 	sub	r12,pc,-24108
80004084:	0f 3a       	ld.ub	r10,r7++
80004086:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000408a:	40 7c       	lddsp	r12,sp[0x1c]
8000408c:	1c 0c       	add	r12,lr
8000408e:	fe ce a2 aa 	sub	lr,pc,-23894
80004092:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80004096:	20 1e       	sub	lr,1
80004098:	50 0e       	stdsp	sp[0x0],lr
8000409a:	fe ce a3 22 	sub	lr,pc,-23774
8000409e:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800040a2:	50 7c       	stdsp	sp[0x1c],r12
800040a4:	40 0c       	lddsp	r12,sp[0x0]
800040a6:	58 7c       	cp.w	r12,7
800040a8:	e0 8b 00 ef 	brhi	80004286 <get_arg+0x262>
800040ac:	fe ce a4 d4 	sub	lr,pc,-23340
800040b0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800040b4:	36 8b       	mov	r11,104
800040b6:	f6 0a 18 00 	cp.b	r10,r11
800040ba:	e0 80 00 e6 	breq	80004286 <get_arg+0x262>
800040be:	37 1b       	mov	r11,113
800040c0:	f6 0a 18 00 	cp.b	r10,r11
800040c4:	c0 70       	breq	800040d2 <get_arg+0xae>
800040c6:	34 cb       	mov	r11,76
800040c8:	f6 0a 18 00 	cp.b	r10,r11
800040cc:	c0 51       	brne	800040d6 <get_arg+0xb2>
800040ce:	a3 b4       	sbr	r4,0x3
800040d0:	cd b8       	rjmp	80004286 <get_arg+0x262>
800040d2:	a5 b4       	sbr	r4,0x5
800040d4:	cd 98       	rjmp	80004286 <get_arg+0x262>
800040d6:	08 9a       	mov	r10,r4
800040d8:	0e 9b       	mov	r11,r7
800040da:	a5 aa       	sbr	r10,0x4
800040dc:	17 3c       	ld.ub	r12,r11++
800040de:	a5 b4       	sbr	r4,0x5
800040e0:	36 ce       	mov	lr,108
800040e2:	fc 0c 18 00 	cp.b	r12,lr
800040e6:	e0 80 00 d1 	breq	80004288 <get_arg+0x264>
800040ea:	14 94       	mov	r4,r10
800040ec:	cc d8       	rjmp	80004286 <get_arg+0x262>
800040ee:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800040f2:	36 7c       	mov	r12,103
800040f4:	f8 0a 18 00 	cp.b	r10,r12
800040f8:	e0 8b 00 27 	brhi	80004146 <get_arg+0x122>
800040fc:	36 5b       	mov	r11,101
800040fe:	f6 0a 18 00 	cp.b	r10,r11
80004102:	c4 82       	brcc	80004192 <get_arg+0x16e>
80004104:	34 fb       	mov	r11,79
80004106:	f6 0a 18 00 	cp.b	r10,r11
8000410a:	c4 80       	breq	8000419a <get_arg+0x176>
8000410c:	e0 8b 00 0c 	brhi	80004124 <get_arg+0x100>
80004110:	34 5b       	mov	r11,69
80004112:	f6 0a 18 00 	cp.b	r10,r11
80004116:	c3 e0       	breq	80004192 <get_arg+0x16e>
80004118:	34 7b       	mov	r11,71
8000411a:	f6 0a 18 00 	cp.b	r10,r11
8000411e:	c3 a0       	breq	80004192 <get_arg+0x16e>
80004120:	34 4b       	mov	r11,68
80004122:	c0 88       	rjmp	80004132 <get_arg+0x10e>
80004124:	35 8b       	mov	r11,88
80004126:	f6 0a 18 00 	cp.b	r10,r11
8000412a:	c2 c0       	breq	80004182 <get_arg+0x15e>
8000412c:	e0 8b 00 07 	brhi	8000413a <get_arg+0x116>
80004130:	35 5b       	mov	r11,85
80004132:	f6 0a 18 00 	cp.b	r10,r11
80004136:	c3 51       	brne	800041a0 <get_arg+0x17c>
80004138:	c3 18       	rjmp	8000419a <get_arg+0x176>
8000413a:	36 3b       	mov	r11,99
8000413c:	f6 0a 18 00 	cp.b	r10,r11
80004140:	c2 f0       	breq	8000419e <get_arg+0x17a>
80004142:	36 4b       	mov	r11,100
80004144:	c0 e8       	rjmp	80004160 <get_arg+0x13c>
80004146:	37 0b       	mov	r11,112
80004148:	f6 0a 18 00 	cp.b	r10,r11
8000414c:	c2 50       	breq	80004196 <get_arg+0x172>
8000414e:	e0 8b 00 0d 	brhi	80004168 <get_arg+0x144>
80004152:	36 eb       	mov	r11,110
80004154:	f6 0a 18 00 	cp.b	r10,r11
80004158:	c1 f0       	breq	80004196 <get_arg+0x172>
8000415a:	e0 8b 00 14 	brhi	80004182 <get_arg+0x15e>
8000415e:	36 9b       	mov	r11,105
80004160:	f6 0a 18 00 	cp.b	r10,r11
80004164:	c1 e1       	brne	800041a0 <get_arg+0x17c>
80004166:	c0 e8       	rjmp	80004182 <get_arg+0x15e>
80004168:	37 5b       	mov	r11,117
8000416a:	f6 0a 18 00 	cp.b	r10,r11
8000416e:	c0 a0       	breq	80004182 <get_arg+0x15e>
80004170:	37 8b       	mov	r11,120
80004172:	f6 0a 18 00 	cp.b	r10,r11
80004176:	c0 60       	breq	80004182 <get_arg+0x15e>
80004178:	37 3b       	mov	r11,115
8000417a:	f6 0a 18 00 	cp.b	r10,r11
8000417e:	c1 11       	brne	800041a0 <get_arg+0x17c>
80004180:	c0 b8       	rjmp	80004196 <get_arg+0x172>
80004182:	ed b4 00 04 	bld	r4,0x4
80004186:	c0 a0       	breq	8000419a <get_arg+0x176>
80004188:	ed b4 00 05 	bld	r4,0x5
8000418c:	c0 91       	brne	8000419e <get_arg+0x17a>
8000418e:	30 20       	mov	r0,2
80004190:	c0 88       	rjmp	800041a0 <get_arg+0x17c>
80004192:	30 40       	mov	r0,4
80004194:	c0 68       	rjmp	800041a0 <get_arg+0x17c>
80004196:	30 30       	mov	r0,3
80004198:	c0 48       	rjmp	800041a0 <get_arg+0x17c>
8000419a:	30 10       	mov	r0,1
8000419c:	c0 28       	rjmp	800041a0 <get_arg+0x17c>
8000419e:	30 00       	mov	r0,0
800041a0:	40 3b       	lddsp	r11,sp[0xc]
800041a2:	5b fb       	cp.w	r11,-1
800041a4:	c0 40       	breq	800041ac <get_arg+0x188>
800041a6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800041aa:	c6 e8       	rjmp	80004286 <get_arg+0x262>
800041ac:	58 60       	cp.w	r0,6
800041ae:	e0 8b 00 6c 	brhi	80004286 <get_arg+0x262>
800041b2:	6c 0a       	ld.w	r10,r6[0x0]
800041b4:	ea cc ff ff 	sub	r12,r5,-1
800041b8:	fe ce a5 c0 	sub	lr,pc,-23104
800041bc:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800041c0:	f4 cb ff f8 	sub	r11,r10,-8
800041c4:	8d 0b       	st.w	r6[0x0],r11
800041c6:	f4 ea 00 00 	ld.d	r10,r10[0]
800041ca:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800041ce:	c0 f8       	rjmp	800041ec <get_arg+0x1c8>
800041d0:	f4 cb ff fc 	sub	r11,r10,-4
800041d4:	8d 0b       	st.w	r6[0x0],r11
800041d6:	74 0a       	ld.w	r10,r10[0x0]
800041d8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800041dc:	c0 88       	rjmp	800041ec <get_arg+0x1c8>
800041de:	f4 cb ff f8 	sub	r11,r10,-8
800041e2:	8d 0b       	st.w	r6[0x0],r11
800041e4:	f4 ea 00 00 	ld.d	r10,r10[0]
800041e8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800041ec:	0e 9b       	mov	r11,r7
800041ee:	18 95       	mov	r5,r12
800041f0:	c4 c8       	rjmp	80004288 <get_arg+0x264>
800041f2:	62 0a       	ld.w	r10,r1[0x0]
800041f4:	5b fa       	cp.w	r10,-1
800041f6:	c0 a1       	brne	8000420a <get_arg+0x1e6>
800041f8:	50 19       	stdsp	sp[0x4],r9
800041fa:	50 28       	stdsp	sp[0x8],r8
800041fc:	e0 6a 00 80 	mov	r10,128
80004200:	30 0b       	mov	r11,0
80004202:	02 9c       	mov	r12,r1
80004204:	ce de       	rcall	80003fde <memset>
80004206:	40 28       	lddsp	r8,sp[0x8]
80004208:	40 19       	lddsp	r9,sp[0x4]
8000420a:	e4 cc 00 01 	sub	r12,r2,1
8000420e:	0e 9b       	mov	r11,r7
80004210:	50 3c       	stdsp	sp[0xc],r12
80004212:	f2 0c 0c 49 	max	r9,r9,r12
80004216:	c3 98       	rjmp	80004288 <get_arg+0x264>
80004218:	62 0a       	ld.w	r10,r1[0x0]
8000421a:	5b fa       	cp.w	r10,-1
8000421c:	c0 a1       	brne	80004230 <get_arg+0x20c>
8000421e:	50 19       	stdsp	sp[0x4],r9
80004220:	50 28       	stdsp	sp[0x8],r8
80004222:	e0 6a 00 80 	mov	r10,128
80004226:	30 0b       	mov	r11,0
80004228:	02 9c       	mov	r12,r1
8000422a:	cd ae       	rcall	80003fde <memset>
8000422c:	40 28       	lddsp	r8,sp[0x8]
8000422e:	40 19       	lddsp	r9,sp[0x4]
80004230:	20 12       	sub	r2,1
80004232:	30 0a       	mov	r10,0
80004234:	0e 9b       	mov	r11,r7
80004236:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000423a:	f2 02 0c 49 	max	r9,r9,r2
8000423e:	c2 58       	rjmp	80004288 <get_arg+0x264>
80004240:	16 97       	mov	r7,r11
80004242:	6c 0a       	ld.w	r10,r6[0x0]
80004244:	f4 cb ff fc 	sub	r11,r10,-4
80004248:	8d 0b       	st.w	r6[0x0],r11
8000424a:	74 0a       	ld.w	r10,r10[0x0]
8000424c:	0e 9b       	mov	r11,r7
8000424e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004252:	2f f5       	sub	r5,-1
80004254:	c1 a8       	rjmp	80004288 <get_arg+0x264>
80004256:	f4 c2 00 30 	sub	r2,r10,48
8000425a:	c0 68       	rjmp	80004266 <get_arg+0x242>
8000425c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004260:	2f f7       	sub	r7,-1
80004262:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004266:	0f 8a       	ld.ub	r10,r7[0x0]
80004268:	58 0a       	cp.w	r10,0
8000426a:	c0 e0       	breq	80004286 <get_arg+0x262>
8000426c:	23 0a       	sub	r10,48
8000426e:	58 9a       	cp.w	r10,9
80004270:	fe 98 ff f6 	brls	8000425c <get_arg+0x238>
80004274:	c0 98       	rjmp	80004286 <get_arg+0x262>
80004276:	2f f7       	sub	r7,-1
80004278:	0f 8a       	ld.ub	r10,r7[0x0]
8000427a:	58 0a       	cp.w	r10,0
8000427c:	c0 50       	breq	80004286 <get_arg+0x262>
8000427e:	23 0a       	sub	r10,48
80004280:	58 9a       	cp.w	r10,9
80004282:	fe 98 ff fa 	brls	80004276 <get_arg+0x252>
80004286:	0e 9b       	mov	r11,r7
80004288:	40 7c       	lddsp	r12,sp[0x1c]
8000428a:	30 ba       	mov	r10,11
8000428c:	f4 0c 18 00 	cp.b	r12,r10
80004290:	fe 91 fe f4 	brne	80004078 <get_arg+0x54>
80004294:	40 42       	lddsp	r2,sp[0x10]
80004296:	17 8c       	ld.ub	r12,r11[0x0]
80004298:	0a 32       	cp.w	r2,r5
8000429a:	5f 4a       	srge	r10
8000429c:	f0 0c 18 00 	cp.b	r12,r8
800042a0:	5f 1c       	srne	r12
800042a2:	f9 ea 00 0a 	and	r10,r12,r10
800042a6:	f0 0a 18 00 	cp.b	r10,r8
800042aa:	fe 91 fe d1 	brne	8000404c <get_arg+0x28>
800042ae:	30 08       	mov	r8,0
800042b0:	40 4e       	lddsp	lr,sp[0x10]
800042b2:	17 8a       	ld.ub	r10,r11[0x0]
800042b4:	e2 05 00 21 	add	r1,r1,r5<<0x2
800042b8:	f0 0a 18 00 	cp.b	r10,r8
800042bc:	fc 09 17 10 	movne	r9,lr
800042c0:	e6 05 00 38 	add	r8,r3,r5<<0x3
800042c4:	06 9e       	mov	lr,r3
800042c6:	c2 a8       	rjmp	8000431a <get_arg+0x2f6>
800042c8:	62 0a       	ld.w	r10,r1[0x0]
800042ca:	58 3a       	cp.w	r10,3
800042cc:	c1 e0       	breq	80004308 <get_arg+0x2e4>
800042ce:	e0 89 00 07 	brgt	800042dc <get_arg+0x2b8>
800042d2:	58 1a       	cp.w	r10,1
800042d4:	c1 a0       	breq	80004308 <get_arg+0x2e4>
800042d6:	58 2a       	cp.w	r10,2
800042d8:	c1 81       	brne	80004308 <get_arg+0x2e4>
800042da:	c0 58       	rjmp	800042e4 <get_arg+0x2c0>
800042dc:	58 5a       	cp.w	r10,5
800042de:	c0 c0       	breq	800042f6 <get_arg+0x2d2>
800042e0:	c0 b5       	brlt	800042f6 <get_arg+0x2d2>
800042e2:	c1 38       	rjmp	80004308 <get_arg+0x2e4>
800042e4:	6c 0a       	ld.w	r10,r6[0x0]
800042e6:	f4 cc ff f8 	sub	r12,r10,-8
800042ea:	8d 0c       	st.w	r6[0x0],r12
800042ec:	f4 e2 00 00 	ld.d	r2,r10[0]
800042f0:	f0 e3 00 00 	st.d	r8[0],r2
800042f4:	c1 08       	rjmp	80004314 <get_arg+0x2f0>
800042f6:	6c 0a       	ld.w	r10,r6[0x0]
800042f8:	f4 cc ff f8 	sub	r12,r10,-8
800042fc:	8d 0c       	st.w	r6[0x0],r12
800042fe:	f4 e2 00 00 	ld.d	r2,r10[0]
80004302:	f0 e3 00 00 	st.d	r8[0],r2
80004306:	c0 78       	rjmp	80004314 <get_arg+0x2f0>
80004308:	6c 0a       	ld.w	r10,r6[0x0]
8000430a:	f4 cc ff fc 	sub	r12,r10,-4
8000430e:	8d 0c       	st.w	r6[0x0],r12
80004310:	74 0a       	ld.w	r10,r10[0x0]
80004312:	91 0a       	st.w	r8[0x0],r10
80004314:	2f f5       	sub	r5,-1
80004316:	2f 88       	sub	r8,-8
80004318:	2f c1       	sub	r1,-4
8000431a:	12 35       	cp.w	r5,r9
8000431c:	fe 9a ff d6 	brle	800042c8 <get_arg+0x2a4>
80004320:	1c 93       	mov	r3,lr
80004322:	40 52       	lddsp	r2,sp[0x14]
80004324:	40 6e       	lddsp	lr,sp[0x18]
80004326:	85 05       	st.w	r2[0x0],r5
80004328:	9d 0b       	st.w	lr[0x0],r11
8000432a:	40 4b       	lddsp	r11,sp[0x10]
8000432c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004330:	2f 8d       	sub	sp,-32
80004332:	d8 32       	popm	r0-r7,pc

80004334 <__sprint_r>:
80004334:	d4 21       	pushm	r4-r7,lr
80004336:	14 97       	mov	r7,r10
80004338:	74 28       	ld.w	r8,r10[0x8]
8000433a:	58 08       	cp.w	r8,0
8000433c:	c0 41       	brne	80004344 <__sprint_r+0x10>
8000433e:	95 18       	st.w	r10[0x4],r8
80004340:	10 9c       	mov	r12,r8
80004342:	d8 22       	popm	r4-r7,pc
80004344:	e0 a0 18 b4 	rcall	800074ac <__sfvwrite_r>
80004348:	30 08       	mov	r8,0
8000434a:	8f 18       	st.w	r7[0x4],r8
8000434c:	8f 28       	st.w	r7[0x8],r8
8000434e:	d8 22       	popm	r4-r7,pc

80004350 <_vfprintf_r>:
80004350:	d4 31       	pushm	r0-r7,lr
80004352:	fa cd 06 bc 	sub	sp,sp,1724
80004356:	51 09       	stdsp	sp[0x40],r9
80004358:	16 91       	mov	r1,r11
8000435a:	14 97       	mov	r7,r10
8000435c:	18 95       	mov	r5,r12
8000435e:	e0 a0 1a 1d 	rcall	80007798 <_localeconv_r>
80004362:	78 0c       	ld.w	r12,r12[0x0]
80004364:	50 cc       	stdsp	sp[0x30],r12
80004366:	58 05       	cp.w	r5,0
80004368:	c0 70       	breq	80004376 <_vfprintf_r+0x26>
8000436a:	6a 68       	ld.w	r8,r5[0x18]
8000436c:	58 08       	cp.w	r8,0
8000436e:	c0 41       	brne	80004376 <_vfprintf_r+0x26>
80004370:	0a 9c       	mov	r12,r5
80004372:	e0 a0 17 3d 	rcall	800071ec <__sinit>
80004376:	fe c8 a3 ba 	sub	r8,pc,-23622
8000437a:	10 31       	cp.w	r1,r8
8000437c:	c0 31       	brne	80004382 <_vfprintf_r+0x32>
8000437e:	6a 01       	ld.w	r1,r5[0x0]
80004380:	c0 c8       	rjmp	80004398 <_vfprintf_r+0x48>
80004382:	fe c8 a3 a6 	sub	r8,pc,-23642
80004386:	10 31       	cp.w	r1,r8
80004388:	c0 31       	brne	8000438e <_vfprintf_r+0x3e>
8000438a:	6a 11       	ld.w	r1,r5[0x4]
8000438c:	c0 68       	rjmp	80004398 <_vfprintf_r+0x48>
8000438e:	fe c8 a3 92 	sub	r8,pc,-23662
80004392:	10 31       	cp.w	r1,r8
80004394:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004398:	82 68       	ld.sh	r8,r1[0xc]
8000439a:	ed b8 00 03 	bld	r8,0x3
8000439e:	c0 41       	brne	800043a6 <_vfprintf_r+0x56>
800043a0:	62 48       	ld.w	r8,r1[0x10]
800043a2:	58 08       	cp.w	r8,0
800043a4:	c0 71       	brne	800043b2 <_vfprintf_r+0x62>
800043a6:	02 9b       	mov	r11,r1
800043a8:	0a 9c       	mov	r12,r5
800043aa:	e0 a0 0f 5d 	rcall	80006264 <__swsetup_r>
800043ae:	e0 81 0f 54 	brne	80006256 <_vfprintf_r+0x1f06>
800043b2:	82 68       	ld.sh	r8,r1[0xc]
800043b4:	10 99       	mov	r9,r8
800043b6:	e2 19 00 1a 	andl	r9,0x1a,COH
800043ba:	58 a9       	cp.w	r9,10
800043bc:	c3 c1       	brne	80004434 <_vfprintf_r+0xe4>
800043be:	82 79       	ld.sh	r9,r1[0xe]
800043c0:	30 0a       	mov	r10,0
800043c2:	f4 09 19 00 	cp.h	r9,r10
800043c6:	c3 75       	brlt	80004434 <_vfprintf_r+0xe4>
800043c8:	a1 d8       	cbr	r8,0x1
800043ca:	fb 58 05 d0 	st.h	sp[1488],r8
800043ce:	62 88       	ld.w	r8,r1[0x20]
800043d0:	fb 48 05 e4 	st.w	sp[1508],r8
800043d4:	62 a8       	ld.w	r8,r1[0x28]
800043d6:	fb 48 05 ec 	st.w	sp[1516],r8
800043da:	fa c8 ff bc 	sub	r8,sp,-68
800043de:	fb 48 05 d4 	st.w	sp[1492],r8
800043e2:	fb 48 05 c4 	st.w	sp[1476],r8
800043e6:	e0 68 04 00 	mov	r8,1024
800043ea:	fb 48 05 d8 	st.w	sp[1496],r8
800043ee:	fb 48 05 cc 	st.w	sp[1484],r8
800043f2:	30 08       	mov	r8,0
800043f4:	fb 59 05 d2 	st.h	sp[1490],r9
800043f8:	0e 9a       	mov	r10,r7
800043fa:	41 09       	lddsp	r9,sp[0x40]
800043fc:	fa c7 fa 3c 	sub	r7,sp,-1476
80004400:	fb 48 05 dc 	st.w	sp[1500],r8
80004404:	0a 9c       	mov	r12,r5
80004406:	0e 9b       	mov	r11,r7
80004408:	ca 4f       	rcall	80004350 <_vfprintf_r>
8000440a:	50 bc       	stdsp	sp[0x2c],r12
8000440c:	c0 95       	brlt	8000441e <_vfprintf_r+0xce>
8000440e:	0e 9b       	mov	r11,r7
80004410:	0a 9c       	mov	r12,r5
80004412:	e0 a0 16 15 	rcall	8000703c <_fflush_r>
80004416:	40 be       	lddsp	lr,sp[0x2c]
80004418:	f9 be 01 ff 	movne	lr,-1
8000441c:	50 be       	stdsp	sp[0x2c],lr
8000441e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004422:	ed b8 00 06 	bld	r8,0x6
80004426:	e0 81 0f 1a 	brne	8000625a <_vfprintf_r+0x1f0a>
8000442a:	82 68       	ld.sh	r8,r1[0xc]
8000442c:	a7 a8       	sbr	r8,0x6
8000442e:	a2 68       	st.h	r1[0xc],r8
80004430:	e0 8f 0f 15 	bral	8000625a <_vfprintf_r+0x1f0a>
80004434:	30 08       	mov	r8,0
80004436:	fb 48 06 b4 	st.w	sp[1716],r8
8000443a:	fb 48 06 90 	st.w	sp[1680],r8
8000443e:	fb 48 06 8c 	st.w	sp[1676],r8
80004442:	fb 48 06 b0 	st.w	sp[1712],r8
80004446:	30 08       	mov	r8,0
80004448:	30 09       	mov	r9,0
8000444a:	50 a7       	stdsp	sp[0x28],r7
8000444c:	50 78       	stdsp	sp[0x1c],r8
8000444e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004452:	3f f8       	mov	r8,-1
80004454:	50 59       	stdsp	sp[0x14],r9
80004456:	fb 43 06 88 	st.w	sp[1672],r3
8000445a:	fb 48 05 44 	st.w	sp[1348],r8
8000445e:	12 9c       	mov	r12,r9
80004460:	50 69       	stdsp	sp[0x18],r9
80004462:	50 d9       	stdsp	sp[0x34],r9
80004464:	50 e9       	stdsp	sp[0x38],r9
80004466:	50 b9       	stdsp	sp[0x2c],r9
80004468:	12 97       	mov	r7,r9
8000446a:	0a 94       	mov	r4,r5
8000446c:	40 a2       	lddsp	r2,sp[0x28]
8000446e:	32 5a       	mov	r10,37
80004470:	30 08       	mov	r8,0
80004472:	c0 28       	rjmp	80004476 <_vfprintf_r+0x126>
80004474:	2f f2       	sub	r2,-1
80004476:	05 89       	ld.ub	r9,r2[0x0]
80004478:	f0 09 18 00 	cp.b	r9,r8
8000447c:	5f 1b       	srne	r11
8000447e:	f4 09 18 00 	cp.b	r9,r10
80004482:	5f 19       	srne	r9
80004484:	f3 eb 00 0b 	and	r11,r9,r11
80004488:	f0 0b 18 00 	cp.b	r11,r8
8000448c:	cf 41       	brne	80004474 <_vfprintf_r+0x124>
8000448e:	40 ab       	lddsp	r11,sp[0x28]
80004490:	e4 0b 01 06 	sub	r6,r2,r11
80004494:	c1 e0       	breq	800044d0 <_vfprintf_r+0x180>
80004496:	fa f8 06 90 	ld.w	r8,sp[1680]
8000449a:	0c 08       	add	r8,r6
8000449c:	87 0b       	st.w	r3[0x0],r11
8000449e:	fb 48 06 90 	st.w	sp[1680],r8
800044a2:	87 16       	st.w	r3[0x4],r6
800044a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800044a8:	2f f8       	sub	r8,-1
800044aa:	fb 48 06 8c 	st.w	sp[1676],r8
800044ae:	58 78       	cp.w	r8,7
800044b0:	e0 89 00 04 	brgt	800044b8 <_vfprintf_r+0x168>
800044b4:	2f 83       	sub	r3,-8
800044b6:	c0 a8       	rjmp	800044ca <_vfprintf_r+0x17a>
800044b8:	fa ca f9 78 	sub	r10,sp,-1672
800044bc:	02 9b       	mov	r11,r1
800044be:	08 9c       	mov	r12,r4
800044c0:	c3 af       	rcall	80004334 <__sprint_r>
800044c2:	e0 81 0e c6 	brne	8000624e <_vfprintf_r+0x1efe>
800044c6:	fa c3 f9 e0 	sub	r3,sp,-1568
800044ca:	40 ba       	lddsp	r10,sp[0x2c]
800044cc:	0c 0a       	add	r10,r6
800044ce:	50 ba       	stdsp	sp[0x2c],r10
800044d0:	05 89       	ld.ub	r9,r2[0x0]
800044d2:	30 08       	mov	r8,0
800044d4:	f0 09 18 00 	cp.b	r9,r8
800044d8:	e0 80 0e aa 	breq	8000622c <_vfprintf_r+0x1edc>
800044dc:	30 09       	mov	r9,0
800044de:	fb 68 06 bb 	st.b	sp[1723],r8
800044e2:	0e 96       	mov	r6,r7
800044e4:	e4 c8 ff ff 	sub	r8,r2,-1
800044e8:	3f fe       	mov	lr,-1
800044ea:	50 93       	stdsp	sp[0x24],r3
800044ec:	50 41       	stdsp	sp[0x10],r1
800044ee:	0e 93       	mov	r3,r7
800044f0:	04 91       	mov	r1,r2
800044f2:	50 89       	stdsp	sp[0x20],r9
800044f4:	50 a8       	stdsp	sp[0x28],r8
800044f6:	50 2e       	stdsp	sp[0x8],lr
800044f8:	50 39       	stdsp	sp[0xc],r9
800044fa:	12 95       	mov	r5,r9
800044fc:	12 90       	mov	r0,r9
800044fe:	10 97       	mov	r7,r8
80004500:	08 92       	mov	r2,r4
80004502:	c0 78       	rjmp	80004510 <_vfprintf_r+0x1c0>
80004504:	3f fc       	mov	r12,-1
80004506:	08 97       	mov	r7,r4
80004508:	50 2c       	stdsp	sp[0x8],r12
8000450a:	c0 38       	rjmp	80004510 <_vfprintf_r+0x1c0>
8000450c:	30 0b       	mov	r11,0
8000450e:	50 3b       	stdsp	sp[0xc],r11
80004510:	0f 38       	ld.ub	r8,r7++
80004512:	c0 28       	rjmp	80004516 <_vfprintf_r+0x1c6>
80004514:	12 90       	mov	r0,r9
80004516:	f0 c9 00 20 	sub	r9,r8,32
8000451a:	e0 49 00 58 	cp.w	r9,88
8000451e:	e0 8b 0a 30 	brhi	8000597e <_vfprintf_r+0x162e>
80004522:	fe ca a9 0e 	sub	r10,pc,-22258
80004526:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000452a:	50 a7       	stdsp	sp[0x28],r7
8000452c:	50 80       	stdsp	sp[0x20],r0
8000452e:	0c 97       	mov	r7,r6
80004530:	04 94       	mov	r4,r2
80004532:	06 96       	mov	r6,r3
80004534:	02 92       	mov	r2,r1
80004536:	fe c9 a6 e6 	sub	r9,pc,-22810
8000453a:	40 93       	lddsp	r3,sp[0x24]
8000453c:	10 90       	mov	r0,r8
8000453e:	40 41       	lddsp	r1,sp[0x10]
80004540:	50 d9       	stdsp	sp[0x34],r9
80004542:	e0 8f 08 8e 	bral	8000565e <_vfprintf_r+0x130e>
80004546:	30 08       	mov	r8,0
80004548:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000454c:	f0 09 18 00 	cp.b	r9,r8
80004550:	ce 01       	brne	80004510 <_vfprintf_r+0x1c0>
80004552:	32 08       	mov	r8,32
80004554:	c6 e8       	rjmp	80004630 <_vfprintf_r+0x2e0>
80004556:	a1 a5       	sbr	r5,0x0
80004558:	cd cb       	rjmp	80004510 <_vfprintf_r+0x1c0>
8000455a:	0f 89       	ld.ub	r9,r7[0x0]
8000455c:	f2 c8 00 30 	sub	r8,r9,48
80004560:	58 98       	cp.w	r8,9
80004562:	e0 8b 00 1d 	brhi	8000459c <_vfprintf_r+0x24c>
80004566:	ee c8 ff ff 	sub	r8,r7,-1
8000456a:	30 0b       	mov	r11,0
8000456c:	23 09       	sub	r9,48
8000456e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004572:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004576:	11 39       	ld.ub	r9,r8++
80004578:	f2 ca 00 30 	sub	r10,r9,48
8000457c:	58 9a       	cp.w	r10,9
8000457e:	fe 98 ff f7 	brls	8000456c <_vfprintf_r+0x21c>
80004582:	e0 49 00 24 	cp.w	r9,36
80004586:	cc 31       	brne	8000450c <_vfprintf_r+0x1bc>
80004588:	e0 4b 00 20 	cp.w	r11,32
8000458c:	e0 89 0e 60 	brgt	8000624c <_vfprintf_r+0x1efc>
80004590:	20 1b       	sub	r11,1
80004592:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004596:	12 3b       	cp.w	r11,r9
80004598:	c0 95       	brlt	800045aa <_vfprintf_r+0x25a>
8000459a:	c1 08       	rjmp	800045ba <_vfprintf_r+0x26a>
8000459c:	fa f9 06 b4 	ld.w	r9,sp[1716]
800045a0:	ec ca ff ff 	sub	r10,r6,-1
800045a4:	12 36       	cp.w	r6,r9
800045a6:	c1 f5       	brlt	800045e4 <_vfprintf_r+0x294>
800045a8:	c2 68       	rjmp	800045f4 <_vfprintf_r+0x2a4>
800045aa:	fa ce f9 44 	sub	lr,sp,-1724
800045ae:	10 97       	mov	r7,r8
800045b0:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800045b4:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800045b8:	c3 58       	rjmp	80004622 <_vfprintf_r+0x2d2>
800045ba:	10 97       	mov	r7,r8
800045bc:	fa c8 f9 50 	sub	r8,sp,-1712
800045c0:	1a d8       	st.w	--sp,r8
800045c2:	fa c8 fa b8 	sub	r8,sp,-1352
800045c6:	1a d8       	st.w	--sp,r8
800045c8:	fa c8 fb b4 	sub	r8,sp,-1100
800045cc:	02 9a       	mov	r10,r1
800045ce:	1a d8       	st.w	--sp,r8
800045d0:	04 9c       	mov	r12,r2
800045d2:	fa c8 f9 40 	sub	r8,sp,-1728
800045d6:	fa c9 ff b4 	sub	r9,sp,-76
800045da:	fe b0 fd 25 	rcall	80004024 <get_arg>
800045de:	2f dd       	sub	sp,-12
800045e0:	78 00       	ld.w	r0,r12[0x0]
800045e2:	c2 08       	rjmp	80004622 <_vfprintf_r+0x2d2>
800045e4:	fa cc f9 44 	sub	r12,sp,-1724
800045e8:	14 96       	mov	r6,r10
800045ea:	f8 03 00 38 	add	r8,r12,r3<<0x3
800045ee:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800045f2:	c1 88       	rjmp	80004622 <_vfprintf_r+0x2d2>
800045f4:	41 08       	lddsp	r8,sp[0x40]
800045f6:	59 f9       	cp.w	r9,31
800045f8:	e0 89 00 11 	brgt	8000461a <_vfprintf_r+0x2ca>
800045fc:	f0 cb ff fc 	sub	r11,r8,-4
80004600:	51 0b       	stdsp	sp[0x40],r11
80004602:	70 00       	ld.w	r0,r8[0x0]
80004604:	fa cb f9 44 	sub	r11,sp,-1724
80004608:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000460c:	f1 40 fd 88 	st.w	r8[-632],r0
80004610:	2f f9       	sub	r9,-1
80004612:	14 96       	mov	r6,r10
80004614:	fb 49 06 b4 	st.w	sp[1716],r9
80004618:	c0 58       	rjmp	80004622 <_vfprintf_r+0x2d2>
8000461a:	70 00       	ld.w	r0,r8[0x0]
8000461c:	14 96       	mov	r6,r10
8000461e:	2f c8       	sub	r8,-4
80004620:	51 08       	stdsp	sp[0x40],r8
80004622:	58 00       	cp.w	r0,0
80004624:	fe 94 ff 76 	brge	80004510 <_vfprintf_r+0x1c0>
80004628:	5c 30       	neg	r0
8000462a:	a3 a5       	sbr	r5,0x2
8000462c:	c7 2b       	rjmp	80004510 <_vfprintf_r+0x1c0>
8000462e:	32 b8       	mov	r8,43
80004630:	fb 68 06 bb 	st.b	sp[1723],r8
80004634:	c6 eb       	rjmp	80004510 <_vfprintf_r+0x1c0>
80004636:	0f 38       	ld.ub	r8,r7++
80004638:	e0 48 00 2a 	cp.w	r8,42
8000463c:	c0 30       	breq	80004642 <_vfprintf_r+0x2f2>
8000463e:	30 09       	mov	r9,0
80004640:	c7 98       	rjmp	80004732 <_vfprintf_r+0x3e2>
80004642:	0f 88       	ld.ub	r8,r7[0x0]
80004644:	f0 c9 00 30 	sub	r9,r8,48
80004648:	58 99       	cp.w	r9,9
8000464a:	e0 8b 00 1f 	brhi	80004688 <_vfprintf_r+0x338>
8000464e:	ee c4 ff ff 	sub	r4,r7,-1
80004652:	30 0b       	mov	r11,0
80004654:	23 08       	sub	r8,48
80004656:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000465a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000465e:	09 38       	ld.ub	r8,r4++
80004660:	f0 c9 00 30 	sub	r9,r8,48
80004664:	58 99       	cp.w	r9,9
80004666:	fe 98 ff f7 	brls	80004654 <_vfprintf_r+0x304>
8000466a:	e0 48 00 24 	cp.w	r8,36
8000466e:	fe 91 ff 4f 	brne	8000450c <_vfprintf_r+0x1bc>
80004672:	e0 4b 00 20 	cp.w	r11,32
80004676:	e0 89 0d eb 	brgt	8000624c <_vfprintf_r+0x1efc>
8000467a:	20 1b       	sub	r11,1
8000467c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004680:	10 3b       	cp.w	r11,r8
80004682:	c0 a5       	brlt	80004696 <_vfprintf_r+0x346>
80004684:	c1 18       	rjmp	800046a6 <_vfprintf_r+0x356>
80004686:	d7 03       	nop
80004688:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000468c:	ec c9 ff ff 	sub	r9,r6,-1
80004690:	14 36       	cp.w	r6,r10
80004692:	c1 f5       	brlt	800046d0 <_vfprintf_r+0x380>
80004694:	c2 88       	rjmp	800046e4 <_vfprintf_r+0x394>
80004696:	fa ca f9 44 	sub	r10,sp,-1724
8000469a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000469e:	f6 fb fd 88 	ld.w	r11,r11[-632]
800046a2:	50 2b       	stdsp	sp[0x8],r11
800046a4:	c3 c8       	rjmp	8000471c <_vfprintf_r+0x3cc>
800046a6:	fa c8 f9 50 	sub	r8,sp,-1712
800046aa:	1a d8       	st.w	--sp,r8
800046ac:	fa c8 fa b8 	sub	r8,sp,-1352
800046b0:	1a d8       	st.w	--sp,r8
800046b2:	fa c8 fb b4 	sub	r8,sp,-1100
800046b6:	02 9a       	mov	r10,r1
800046b8:	1a d8       	st.w	--sp,r8
800046ba:	04 9c       	mov	r12,r2
800046bc:	fa c8 f9 40 	sub	r8,sp,-1728
800046c0:	fa c9 ff b4 	sub	r9,sp,-76
800046c4:	fe b0 fc b0 	rcall	80004024 <get_arg>
800046c8:	2f dd       	sub	sp,-12
800046ca:	78 0c       	ld.w	r12,r12[0x0]
800046cc:	50 2c       	stdsp	sp[0x8],r12
800046ce:	c2 78       	rjmp	8000471c <_vfprintf_r+0x3cc>
800046d0:	12 96       	mov	r6,r9
800046d2:	0e 94       	mov	r4,r7
800046d4:	fa c9 f9 44 	sub	r9,sp,-1724
800046d8:	f2 03 00 38 	add	r8,r9,r3<<0x3
800046dc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800046e0:	50 28       	stdsp	sp[0x8],r8
800046e2:	c1 d8       	rjmp	8000471c <_vfprintf_r+0x3cc>
800046e4:	41 08       	lddsp	r8,sp[0x40]
800046e6:	59 fa       	cp.w	r10,31
800046e8:	e0 89 00 14 	brgt	80004710 <_vfprintf_r+0x3c0>
800046ec:	f0 cb ff fc 	sub	r11,r8,-4
800046f0:	70 08       	ld.w	r8,r8[0x0]
800046f2:	51 0b       	stdsp	sp[0x40],r11
800046f4:	50 28       	stdsp	sp[0x8],r8
800046f6:	fa c6 f9 44 	sub	r6,sp,-1724
800046fa:	40 2e       	lddsp	lr,sp[0x8]
800046fc:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004700:	f1 4e fd 88 	st.w	r8[-632],lr
80004704:	2f fa       	sub	r10,-1
80004706:	0e 94       	mov	r4,r7
80004708:	fb 4a 06 b4 	st.w	sp[1716],r10
8000470c:	12 96       	mov	r6,r9
8000470e:	c0 78       	rjmp	8000471c <_vfprintf_r+0x3cc>
80004710:	70 0c       	ld.w	r12,r8[0x0]
80004712:	0e 94       	mov	r4,r7
80004714:	2f c8       	sub	r8,-4
80004716:	50 2c       	stdsp	sp[0x8],r12
80004718:	12 96       	mov	r6,r9
8000471a:	51 08       	stdsp	sp[0x40],r8
8000471c:	40 2b       	lddsp	r11,sp[0x8]
8000471e:	58 0b       	cp.w	r11,0
80004720:	fe 95 fe f2 	brlt	80004504 <_vfprintf_r+0x1b4>
80004724:	08 97       	mov	r7,r4
80004726:	cf 5a       	rjmp	80004510 <_vfprintf_r+0x1c0>
80004728:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000472c:	0f 38       	ld.ub	r8,r7++
8000472e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004732:	f0 ca 00 30 	sub	r10,r8,48
80004736:	58 9a       	cp.w	r10,9
80004738:	fe 98 ff f8 	brls	80004728 <_vfprintf_r+0x3d8>
8000473c:	3f fa       	mov	r10,-1
8000473e:	f2 0a 0c 49 	max	r9,r9,r10
80004742:	50 29       	stdsp	sp[0x8],r9
80004744:	ce 9a       	rjmp	80004516 <_vfprintf_r+0x1c6>
80004746:	a7 b5       	sbr	r5,0x7
80004748:	ce 4a       	rjmp	80004510 <_vfprintf_r+0x1c0>
8000474a:	30 09       	mov	r9,0
8000474c:	23 08       	sub	r8,48
8000474e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004752:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004756:	0f 38       	ld.ub	r8,r7++
80004758:	f0 ca 00 30 	sub	r10,r8,48
8000475c:	58 9a       	cp.w	r10,9
8000475e:	fe 98 ff f7 	brls	8000474c <_vfprintf_r+0x3fc>
80004762:	e0 48 00 24 	cp.w	r8,36
80004766:	fe 91 fe d7 	brne	80004514 <_vfprintf_r+0x1c4>
8000476a:	e0 49 00 20 	cp.w	r9,32
8000476e:	e0 89 0d 6f 	brgt	8000624c <_vfprintf_r+0x1efc>
80004772:	f2 c3 00 01 	sub	r3,r9,1
80004776:	30 19       	mov	r9,1
80004778:	50 39       	stdsp	sp[0xc],r9
8000477a:	cc ba       	rjmp	80004510 <_vfprintf_r+0x1c0>
8000477c:	a3 b5       	sbr	r5,0x3
8000477e:	cc 9a       	rjmp	80004510 <_vfprintf_r+0x1c0>
80004780:	a7 a5       	sbr	r5,0x6
80004782:	cc 7a       	rjmp	80004510 <_vfprintf_r+0x1c0>
80004784:	0a 98       	mov	r8,r5
80004786:	a5 b5       	sbr	r5,0x5
80004788:	a5 a8       	sbr	r8,0x4
8000478a:	0f 89       	ld.ub	r9,r7[0x0]
8000478c:	36 ce       	mov	lr,108
8000478e:	fc 09 18 00 	cp.b	r9,lr
80004792:	f7 b7 00 ff 	subeq	r7,-1
80004796:	f0 05 17 10 	movne	r5,r8
8000479a:	cb ba       	rjmp	80004510 <_vfprintf_r+0x1c0>
8000479c:	a5 b5       	sbr	r5,0x5
8000479e:	cb 9a       	rjmp	80004510 <_vfprintf_r+0x1c0>
800047a0:	50 a7       	stdsp	sp[0x28],r7
800047a2:	50 80       	stdsp	sp[0x20],r0
800047a4:	0c 97       	mov	r7,r6
800047a6:	10 90       	mov	r0,r8
800047a8:	06 96       	mov	r6,r3
800047aa:	04 94       	mov	r4,r2
800047ac:	40 93       	lddsp	r3,sp[0x24]
800047ae:	02 92       	mov	r2,r1
800047b0:	0e 99       	mov	r9,r7
800047b2:	40 41       	lddsp	r1,sp[0x10]
800047b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047b8:	40 3c       	lddsp	r12,sp[0xc]
800047ba:	58 0c       	cp.w	r12,0
800047bc:	c1 d0       	breq	800047f6 <_vfprintf_r+0x4a6>
800047be:	10 36       	cp.w	r6,r8
800047c0:	c0 64       	brge	800047cc <_vfprintf_r+0x47c>
800047c2:	fa cb f9 44 	sub	r11,sp,-1724
800047c6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047ca:	c1 d8       	rjmp	80004804 <_vfprintf_r+0x4b4>
800047cc:	fa c8 f9 50 	sub	r8,sp,-1712
800047d0:	1a d8       	st.w	--sp,r8
800047d2:	fa c8 fa b8 	sub	r8,sp,-1352
800047d6:	1a d8       	st.w	--sp,r8
800047d8:	fa c8 fb b4 	sub	r8,sp,-1100
800047dc:	1a d8       	st.w	--sp,r8
800047de:	fa c8 f9 40 	sub	r8,sp,-1728
800047e2:	fa c9 ff b4 	sub	r9,sp,-76
800047e6:	04 9a       	mov	r10,r2
800047e8:	0c 9b       	mov	r11,r6
800047ea:	08 9c       	mov	r12,r4
800047ec:	fe b0 fc 1c 	rcall	80004024 <get_arg>
800047f0:	2f dd       	sub	sp,-12
800047f2:	19 b8       	ld.ub	r8,r12[0x3]
800047f4:	c2 28       	rjmp	80004838 <_vfprintf_r+0x4e8>
800047f6:	2f f7       	sub	r7,-1
800047f8:	10 39       	cp.w	r9,r8
800047fa:	c0 84       	brge	8000480a <_vfprintf_r+0x4ba>
800047fc:	fa ca f9 44 	sub	r10,sp,-1724
80004800:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004804:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004808:	c1 88       	rjmp	80004838 <_vfprintf_r+0x4e8>
8000480a:	41 09       	lddsp	r9,sp[0x40]
8000480c:	59 f8       	cp.w	r8,31
8000480e:	e0 89 00 12 	brgt	80004832 <_vfprintf_r+0x4e2>
80004812:	f2 ca ff fc 	sub	r10,r9,-4
80004816:	51 0a       	stdsp	sp[0x40],r10
80004818:	72 09       	ld.w	r9,r9[0x0]
8000481a:	fa c6 f9 44 	sub	r6,sp,-1724
8000481e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004822:	2f f8       	sub	r8,-1
80004824:	f5 49 fd 88 	st.w	r10[-632],r9
80004828:	fb 48 06 b4 	st.w	sp[1716],r8
8000482c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004830:	c0 48       	rjmp	80004838 <_vfprintf_r+0x4e8>
80004832:	13 b8       	ld.ub	r8,r9[0x3]
80004834:	2f c9       	sub	r9,-4
80004836:	51 09       	stdsp	sp[0x40],r9
80004838:	fb 68 06 60 	st.b	sp[1632],r8
8000483c:	30 0e       	mov	lr,0
8000483e:	30 08       	mov	r8,0
80004840:	30 12       	mov	r2,1
80004842:	fb 68 06 bb 	st.b	sp[1723],r8
80004846:	50 2e       	stdsp	sp[0x8],lr
80004848:	e0 8f 08 ad 	bral	800059a2 <_vfprintf_r+0x1652>
8000484c:	50 a7       	stdsp	sp[0x28],r7
8000484e:	50 80       	stdsp	sp[0x20],r0
80004850:	0c 97       	mov	r7,r6
80004852:	04 94       	mov	r4,r2
80004854:	06 96       	mov	r6,r3
80004856:	02 92       	mov	r2,r1
80004858:	40 93       	lddsp	r3,sp[0x24]
8000485a:	10 90       	mov	r0,r8
8000485c:	40 41       	lddsp	r1,sp[0x10]
8000485e:	a5 a5       	sbr	r5,0x4
80004860:	c0 a8       	rjmp	80004874 <_vfprintf_r+0x524>
80004862:	50 a7       	stdsp	sp[0x28],r7
80004864:	50 80       	stdsp	sp[0x20],r0
80004866:	0c 97       	mov	r7,r6
80004868:	04 94       	mov	r4,r2
8000486a:	06 96       	mov	r6,r3
8000486c:	02 92       	mov	r2,r1
8000486e:	40 93       	lddsp	r3,sp[0x24]
80004870:	10 90       	mov	r0,r8
80004872:	40 41       	lddsp	r1,sp[0x10]
80004874:	ed b5 00 05 	bld	r5,0x5
80004878:	c5 11       	brne	8000491a <_vfprintf_r+0x5ca>
8000487a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000487e:	40 3c       	lddsp	r12,sp[0xc]
80004880:	58 0c       	cp.w	r12,0
80004882:	c1 e0       	breq	800048be <_vfprintf_r+0x56e>
80004884:	10 36       	cp.w	r6,r8
80004886:	c0 64       	brge	80004892 <_vfprintf_r+0x542>
80004888:	fa cb f9 44 	sub	r11,sp,-1724
8000488c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004890:	c2 08       	rjmp	800048d0 <_vfprintf_r+0x580>
80004892:	fa c8 f9 50 	sub	r8,sp,-1712
80004896:	1a d8       	st.w	--sp,r8
80004898:	fa c8 fa b8 	sub	r8,sp,-1352
8000489c:	0c 9b       	mov	r11,r6
8000489e:	1a d8       	st.w	--sp,r8
800048a0:	fa c8 fb b4 	sub	r8,sp,-1100
800048a4:	1a d8       	st.w	--sp,r8
800048a6:	fa c9 ff b4 	sub	r9,sp,-76
800048aa:	fa c8 f9 40 	sub	r8,sp,-1728
800048ae:	04 9a       	mov	r10,r2
800048b0:	08 9c       	mov	r12,r4
800048b2:	fe b0 fb b9 	rcall	80004024 <get_arg>
800048b6:	2f dd       	sub	sp,-12
800048b8:	78 1b       	ld.w	r11,r12[0x4]
800048ba:	78 09       	ld.w	r9,r12[0x0]
800048bc:	c2 b8       	rjmp	80004912 <_vfprintf_r+0x5c2>
800048be:	ee ca ff ff 	sub	r10,r7,-1
800048c2:	10 37       	cp.w	r7,r8
800048c4:	c0 b4       	brge	800048da <_vfprintf_r+0x58a>
800048c6:	fa c9 f9 44 	sub	r9,sp,-1724
800048ca:	14 97       	mov	r7,r10
800048cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800048d0:	ec fb fd 8c 	ld.w	r11,r6[-628]
800048d4:	ec f9 fd 88 	ld.w	r9,r6[-632]
800048d8:	c1 d8       	rjmp	80004912 <_vfprintf_r+0x5c2>
800048da:	41 09       	lddsp	r9,sp[0x40]
800048dc:	59 f8       	cp.w	r8,31
800048de:	e0 89 00 14 	brgt	80004906 <_vfprintf_r+0x5b6>
800048e2:	f2 cb ff f8 	sub	r11,r9,-8
800048e6:	51 0b       	stdsp	sp[0x40],r11
800048e8:	fa c6 f9 44 	sub	r6,sp,-1724
800048ec:	72 1b       	ld.w	r11,r9[0x4]
800048ee:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800048f2:	72 09       	ld.w	r9,r9[0x0]
800048f4:	f9 4b fd 8c 	st.w	r12[-628],r11
800048f8:	f9 49 fd 88 	st.w	r12[-632],r9
800048fc:	2f f8       	sub	r8,-1
800048fe:	14 97       	mov	r7,r10
80004900:	fb 48 06 b4 	st.w	sp[1716],r8
80004904:	c0 78       	rjmp	80004912 <_vfprintf_r+0x5c2>
80004906:	f2 c8 ff f8 	sub	r8,r9,-8
8000490a:	72 1b       	ld.w	r11,r9[0x4]
8000490c:	14 97       	mov	r7,r10
8000490e:	51 08       	stdsp	sp[0x40],r8
80004910:	72 09       	ld.w	r9,r9[0x0]
80004912:	16 98       	mov	r8,r11
80004914:	fa e9 00 00 	st.d	sp[0],r8
80004918:	ca e8       	rjmp	80004a74 <_vfprintf_r+0x724>
8000491a:	ed b5 00 04 	bld	r5,0x4
8000491e:	c1 71       	brne	8000494c <_vfprintf_r+0x5fc>
80004920:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004924:	40 3e       	lddsp	lr,sp[0xc]
80004926:	58 0e       	cp.w	lr,0
80004928:	c0 80       	breq	80004938 <_vfprintf_r+0x5e8>
8000492a:	10 36       	cp.w	r6,r8
8000492c:	c6 94       	brge	800049fe <_vfprintf_r+0x6ae>
8000492e:	fa cc f9 44 	sub	r12,sp,-1724
80004932:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004936:	c8 28       	rjmp	80004a3a <_vfprintf_r+0x6ea>
80004938:	ee ca ff ff 	sub	r10,r7,-1
8000493c:	10 37       	cp.w	r7,r8
8000493e:	e0 84 00 81 	brge	80004a40 <_vfprintf_r+0x6f0>
80004942:	fa cb f9 44 	sub	r11,sp,-1724
80004946:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000494a:	c7 78       	rjmp	80004a38 <_vfprintf_r+0x6e8>
8000494c:	ed b5 00 06 	bld	r5,0x6
80004950:	c4 b1       	brne	800049e6 <_vfprintf_r+0x696>
80004952:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004956:	40 3c       	lddsp	r12,sp[0xc]
80004958:	58 0c       	cp.w	r12,0
8000495a:	c1 d0       	breq	80004994 <_vfprintf_r+0x644>
8000495c:	10 36       	cp.w	r6,r8
8000495e:	c0 64       	brge	8000496a <_vfprintf_r+0x61a>
80004960:	fa cb f9 44 	sub	r11,sp,-1724
80004964:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004968:	c1 f8       	rjmp	800049a6 <_vfprintf_r+0x656>
8000496a:	fa c8 f9 50 	sub	r8,sp,-1712
8000496e:	1a d8       	st.w	--sp,r8
80004970:	fa c8 fa b8 	sub	r8,sp,-1352
80004974:	1a d8       	st.w	--sp,r8
80004976:	fa c8 fb b4 	sub	r8,sp,-1100
8000497a:	1a d8       	st.w	--sp,r8
8000497c:	fa c8 f9 40 	sub	r8,sp,-1728
80004980:	fa c9 ff b4 	sub	r9,sp,-76
80004984:	04 9a       	mov	r10,r2
80004986:	0c 9b       	mov	r11,r6
80004988:	08 9c       	mov	r12,r4
8000498a:	fe b0 fb 4d 	rcall	80004024 <get_arg>
8000498e:	2f dd       	sub	sp,-12
80004990:	98 18       	ld.sh	r8,r12[0x2]
80004992:	c2 68       	rjmp	800049de <_vfprintf_r+0x68e>
80004994:	ee ca ff ff 	sub	r10,r7,-1
80004998:	10 37       	cp.w	r7,r8
8000499a:	c0 94       	brge	800049ac <_vfprintf_r+0x65c>
8000499c:	fa c9 f9 44 	sub	r9,sp,-1724
800049a0:	14 97       	mov	r7,r10
800049a2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800049a6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800049aa:	c1 a8       	rjmp	800049de <_vfprintf_r+0x68e>
800049ac:	41 09       	lddsp	r9,sp[0x40]
800049ae:	59 f8       	cp.w	r8,31
800049b0:	e0 89 00 13 	brgt	800049d6 <_vfprintf_r+0x686>
800049b4:	f2 cb ff fc 	sub	r11,r9,-4
800049b8:	51 0b       	stdsp	sp[0x40],r11
800049ba:	72 09       	ld.w	r9,r9[0x0]
800049bc:	fa c6 f9 44 	sub	r6,sp,-1724
800049c0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800049c4:	2f f8       	sub	r8,-1
800049c6:	f7 49 fd 88 	st.w	r11[-632],r9
800049ca:	fb 48 06 b4 	st.w	sp[1716],r8
800049ce:	14 97       	mov	r7,r10
800049d0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800049d4:	c0 58       	rjmp	800049de <_vfprintf_r+0x68e>
800049d6:	92 18       	ld.sh	r8,r9[0x2]
800049d8:	14 97       	mov	r7,r10
800049da:	2f c9       	sub	r9,-4
800049dc:	51 09       	stdsp	sp[0x40],r9
800049de:	50 18       	stdsp	sp[0x4],r8
800049e0:	bf 58       	asr	r8,0x1f
800049e2:	50 08       	stdsp	sp[0x0],r8
800049e4:	c4 88       	rjmp	80004a74 <_vfprintf_r+0x724>
800049e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049ea:	40 3c       	lddsp	r12,sp[0xc]
800049ec:	58 0c       	cp.w	r12,0
800049ee:	c1 d0       	breq	80004a28 <_vfprintf_r+0x6d8>
800049f0:	10 36       	cp.w	r6,r8
800049f2:	c0 64       	brge	800049fe <_vfprintf_r+0x6ae>
800049f4:	fa cb f9 44 	sub	r11,sp,-1724
800049f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049fc:	c1 f8       	rjmp	80004a3a <_vfprintf_r+0x6ea>
800049fe:	fa c8 f9 50 	sub	r8,sp,-1712
80004a02:	1a d8       	st.w	--sp,r8
80004a04:	fa c8 fa b8 	sub	r8,sp,-1352
80004a08:	0c 9b       	mov	r11,r6
80004a0a:	1a d8       	st.w	--sp,r8
80004a0c:	fa c8 fb b4 	sub	r8,sp,-1100
80004a10:	04 9a       	mov	r10,r2
80004a12:	1a d8       	st.w	--sp,r8
80004a14:	08 9c       	mov	r12,r4
80004a16:	fa c8 f9 40 	sub	r8,sp,-1728
80004a1a:	fa c9 ff b4 	sub	r9,sp,-76
80004a1e:	fe b0 fb 03 	rcall	80004024 <get_arg>
80004a22:	2f dd       	sub	sp,-12
80004a24:	78 0b       	ld.w	r11,r12[0x0]
80004a26:	c2 48       	rjmp	80004a6e <_vfprintf_r+0x71e>
80004a28:	ee ca ff ff 	sub	r10,r7,-1
80004a2c:	10 37       	cp.w	r7,r8
80004a2e:	c0 94       	brge	80004a40 <_vfprintf_r+0x6f0>
80004a30:	fa c9 f9 44 	sub	r9,sp,-1724
80004a34:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a38:	14 97       	mov	r7,r10
80004a3a:	ec fb fd 88 	ld.w	r11,r6[-632]
80004a3e:	c1 88       	rjmp	80004a6e <_vfprintf_r+0x71e>
80004a40:	41 09       	lddsp	r9,sp[0x40]
80004a42:	59 f8       	cp.w	r8,31
80004a44:	e0 89 00 11 	brgt	80004a66 <_vfprintf_r+0x716>
80004a48:	f2 cb ff fc 	sub	r11,r9,-4
80004a4c:	51 0b       	stdsp	sp[0x40],r11
80004a4e:	fa c6 f9 44 	sub	r6,sp,-1724
80004a52:	72 0b       	ld.w	r11,r9[0x0]
80004a54:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a58:	f3 4b fd 88 	st.w	r9[-632],r11
80004a5c:	2f f8       	sub	r8,-1
80004a5e:	14 97       	mov	r7,r10
80004a60:	fb 48 06 b4 	st.w	sp[1716],r8
80004a64:	c0 58       	rjmp	80004a6e <_vfprintf_r+0x71e>
80004a66:	72 0b       	ld.w	r11,r9[0x0]
80004a68:	14 97       	mov	r7,r10
80004a6a:	2f c9       	sub	r9,-4
80004a6c:	51 09       	stdsp	sp[0x40],r9
80004a6e:	50 1b       	stdsp	sp[0x4],r11
80004a70:	bf 5b       	asr	r11,0x1f
80004a72:	50 0b       	stdsp	sp[0x0],r11
80004a74:	fa ea 00 00 	ld.d	r10,sp[0]
80004a78:	58 0a       	cp.w	r10,0
80004a7a:	5c 2b       	cpc	r11
80004a7c:	c0 e4       	brge	80004a98 <_vfprintf_r+0x748>
80004a7e:	30 08       	mov	r8,0
80004a80:	fa ea 00 00 	ld.d	r10,sp[0]
80004a84:	30 09       	mov	r9,0
80004a86:	f0 0a 01 0a 	sub	r10,r8,r10
80004a8a:	f2 0b 01 4b 	sbc	r11,r9,r11
80004a8e:	32 d8       	mov	r8,45
80004a90:	fa eb 00 00 	st.d	sp[0],r10
80004a94:	fb 68 06 bb 	st.b	sp[1723],r8
80004a98:	30 18       	mov	r8,1
80004a9a:	e0 8f 06 fa 	bral	8000588e <_vfprintf_r+0x153e>
80004a9e:	50 a7       	stdsp	sp[0x28],r7
80004aa0:	50 80       	stdsp	sp[0x20],r0
80004aa2:	0c 97       	mov	r7,r6
80004aa4:	04 94       	mov	r4,r2
80004aa6:	06 96       	mov	r6,r3
80004aa8:	02 92       	mov	r2,r1
80004aaa:	40 93       	lddsp	r3,sp[0x24]
80004aac:	10 90       	mov	r0,r8
80004aae:	40 41       	lddsp	r1,sp[0x10]
80004ab0:	0e 99       	mov	r9,r7
80004ab2:	ed b5 00 03 	bld	r5,0x3
80004ab6:	c4 11       	brne	80004b38 <_vfprintf_r+0x7e8>
80004ab8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004abc:	40 3a       	lddsp	r10,sp[0xc]
80004abe:	58 0a       	cp.w	r10,0
80004ac0:	c1 90       	breq	80004af2 <_vfprintf_r+0x7a2>
80004ac2:	10 36       	cp.w	r6,r8
80004ac4:	c6 45       	brlt	80004b8c <_vfprintf_r+0x83c>
80004ac6:	fa c8 f9 50 	sub	r8,sp,-1712
80004aca:	1a d8       	st.w	--sp,r8
80004acc:	fa c8 fa b8 	sub	r8,sp,-1352
80004ad0:	1a d8       	st.w	--sp,r8
80004ad2:	fa c8 fb b4 	sub	r8,sp,-1100
80004ad6:	0c 9b       	mov	r11,r6
80004ad8:	1a d8       	st.w	--sp,r8
80004ada:	04 9a       	mov	r10,r2
80004adc:	fa c8 f9 40 	sub	r8,sp,-1728
80004ae0:	fa c9 ff b4 	sub	r9,sp,-76
80004ae4:	08 9c       	mov	r12,r4
80004ae6:	fe b0 fa 9f 	rcall	80004024 <get_arg>
80004aea:	2f dd       	sub	sp,-12
80004aec:	78 16       	ld.w	r6,r12[0x4]
80004aee:	50 76       	stdsp	sp[0x1c],r6
80004af0:	c4 88       	rjmp	80004b80 <_vfprintf_r+0x830>
80004af2:	2f f7       	sub	r7,-1
80004af4:	10 39       	cp.w	r9,r8
80004af6:	c0 c4       	brge	80004b0e <_vfprintf_r+0x7be>
80004af8:	fa ce f9 44 	sub	lr,sp,-1724
80004afc:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004b00:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004b04:	50 7c       	stdsp	sp[0x1c],r12
80004b06:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004b0a:	50 56       	stdsp	sp[0x14],r6
80004b0c:	c6 68       	rjmp	80004bd8 <_vfprintf_r+0x888>
80004b0e:	41 09       	lddsp	r9,sp[0x40]
80004b10:	59 f8       	cp.w	r8,31
80004b12:	e0 89 00 10 	brgt	80004b32 <_vfprintf_r+0x7e2>
80004b16:	f2 ca ff f8 	sub	r10,r9,-8
80004b1a:	72 1b       	ld.w	r11,r9[0x4]
80004b1c:	51 0a       	stdsp	sp[0x40],r10
80004b1e:	72 09       	ld.w	r9,r9[0x0]
80004b20:	fa ca f9 44 	sub	r10,sp,-1724
80004b24:	50 7b       	stdsp	sp[0x1c],r11
80004b26:	50 59       	stdsp	sp[0x14],r9
80004b28:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004b2c:	40 5b       	lddsp	r11,sp[0x14]
80004b2e:	40 7a       	lddsp	r10,sp[0x1c]
80004b30:	c4 78       	rjmp	80004bbe <_vfprintf_r+0x86e>
80004b32:	72 18       	ld.w	r8,r9[0x4]
80004b34:	50 78       	stdsp	sp[0x1c],r8
80004b36:	c4 c8       	rjmp	80004bce <_vfprintf_r+0x87e>
80004b38:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b3c:	40 3e       	lddsp	lr,sp[0xc]
80004b3e:	58 0e       	cp.w	lr,0
80004b40:	c2 30       	breq	80004b86 <_vfprintf_r+0x836>
80004b42:	10 36       	cp.w	r6,r8
80004b44:	c0 94       	brge	80004b56 <_vfprintf_r+0x806>
80004b46:	fa cc f9 44 	sub	r12,sp,-1724
80004b4a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b4e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004b52:	50 7b       	stdsp	sp[0x1c],r11
80004b54:	cd 9b       	rjmp	80004b06 <_vfprintf_r+0x7b6>
80004b56:	fa c8 f9 50 	sub	r8,sp,-1712
80004b5a:	1a d8       	st.w	--sp,r8
80004b5c:	fa c8 fa b8 	sub	r8,sp,-1352
80004b60:	04 9a       	mov	r10,r2
80004b62:	1a d8       	st.w	--sp,r8
80004b64:	fa c8 fb b4 	sub	r8,sp,-1100
80004b68:	0c 9b       	mov	r11,r6
80004b6a:	1a d8       	st.w	--sp,r8
80004b6c:	08 9c       	mov	r12,r4
80004b6e:	fa c8 f9 40 	sub	r8,sp,-1728
80004b72:	fa c9 ff b4 	sub	r9,sp,-76
80004b76:	fe b0 fa 57 	rcall	80004024 <get_arg>
80004b7a:	2f dd       	sub	sp,-12
80004b7c:	78 1a       	ld.w	r10,r12[0x4]
80004b7e:	50 7a       	stdsp	sp[0x1c],r10
80004b80:	78 0c       	ld.w	r12,r12[0x0]
80004b82:	50 5c       	stdsp	sp[0x14],r12
80004b84:	c2 a8       	rjmp	80004bd8 <_vfprintf_r+0x888>
80004b86:	2f f7       	sub	r7,-1
80004b88:	10 39       	cp.w	r9,r8
80004b8a:	c0 94       	brge	80004b9c <_vfprintf_r+0x84c>
80004b8c:	fa c9 f9 44 	sub	r9,sp,-1724
80004b90:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b94:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004b98:	50 78       	stdsp	sp[0x1c],r8
80004b9a:	cb 6b       	rjmp	80004b06 <_vfprintf_r+0x7b6>
80004b9c:	41 09       	lddsp	r9,sp[0x40]
80004b9e:	59 f8       	cp.w	r8,31
80004ba0:	e0 89 00 15 	brgt	80004bca <_vfprintf_r+0x87a>
80004ba4:	f2 ca ff f8 	sub	r10,r9,-8
80004ba8:	72 16       	ld.w	r6,r9[0x4]
80004baa:	72 09       	ld.w	r9,r9[0x0]
80004bac:	51 0a       	stdsp	sp[0x40],r10
80004bae:	50 59       	stdsp	sp[0x14],r9
80004bb0:	fa ce f9 44 	sub	lr,sp,-1724
80004bb4:	50 76       	stdsp	sp[0x1c],r6
80004bb6:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004bba:	40 5b       	lddsp	r11,sp[0x14]
80004bbc:	0c 9a       	mov	r10,r6
80004bbe:	f2 eb fd 88 	st.d	r9[-632],r10
80004bc2:	2f f8       	sub	r8,-1
80004bc4:	fb 48 06 b4 	st.w	sp[1716],r8
80004bc8:	c0 88       	rjmp	80004bd8 <_vfprintf_r+0x888>
80004bca:	72 1c       	ld.w	r12,r9[0x4]
80004bcc:	50 7c       	stdsp	sp[0x1c],r12
80004bce:	f2 c8 ff f8 	sub	r8,r9,-8
80004bd2:	51 08       	stdsp	sp[0x40],r8
80004bd4:	72 09       	ld.w	r9,r9[0x0]
80004bd6:	50 59       	stdsp	sp[0x14],r9
80004bd8:	40 5b       	lddsp	r11,sp[0x14]
80004bda:	40 7a       	lddsp	r10,sp[0x1c]
80004bdc:	e0 a0 1c d6 	rcall	80008588 <__isinfd>
80004be0:	18 96       	mov	r6,r12
80004be2:	c1 70       	breq	80004c10 <_vfprintf_r+0x8c0>
80004be4:	30 08       	mov	r8,0
80004be6:	30 09       	mov	r9,0
80004be8:	40 5b       	lddsp	r11,sp[0x14]
80004bea:	40 7a       	lddsp	r10,sp[0x1c]
80004bec:	e0 a0 20 66 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80004bf0:	c0 40       	breq	80004bf8 <_vfprintf_r+0x8a8>
80004bf2:	32 d8       	mov	r8,45
80004bf4:	fb 68 06 bb 	st.b	sp[1723],r8
80004bf8:	fe c8 ad 94 	sub	r8,pc,-21100
80004bfc:	fe c6 ad 94 	sub	r6,pc,-21100
80004c00:	a7 d5       	cbr	r5,0x7
80004c02:	e0 40 00 47 	cp.w	r0,71
80004c06:	f0 06 17 a0 	movle	r6,r8
80004c0a:	30 32       	mov	r2,3
80004c0c:	e0 8f 06 ce 	bral	800059a8 <_vfprintf_r+0x1658>
80004c10:	40 5b       	lddsp	r11,sp[0x14]
80004c12:	40 7a       	lddsp	r10,sp[0x1c]
80004c14:	e0 a0 1c cf 	rcall	800085b2 <__isnand>
80004c18:	c0 e0       	breq	80004c34 <_vfprintf_r+0x8e4>
80004c1a:	50 26       	stdsp	sp[0x8],r6
80004c1c:	fe c8 ad b0 	sub	r8,pc,-21072
80004c20:	fe c6 ad b0 	sub	r6,pc,-21072
80004c24:	a7 d5       	cbr	r5,0x7
80004c26:	e0 40 00 47 	cp.w	r0,71
80004c2a:	f0 06 17 a0 	movle	r6,r8
80004c2e:	30 32       	mov	r2,3
80004c30:	e0 8f 06 c2 	bral	800059b4 <_vfprintf_r+0x1664>
80004c34:	40 2a       	lddsp	r10,sp[0x8]
80004c36:	5b fa       	cp.w	r10,-1
80004c38:	c0 41       	brne	80004c40 <_vfprintf_r+0x8f0>
80004c3a:	30 69       	mov	r9,6
80004c3c:	50 29       	stdsp	sp[0x8],r9
80004c3e:	c1 18       	rjmp	80004c60 <_vfprintf_r+0x910>
80004c40:	e0 40 00 47 	cp.w	r0,71
80004c44:	5f 09       	sreq	r9
80004c46:	e0 40 00 67 	cp.w	r0,103
80004c4a:	5f 08       	sreq	r8
80004c4c:	f3 e8 10 08 	or	r8,r9,r8
80004c50:	f8 08 18 00 	cp.b	r8,r12
80004c54:	c0 60       	breq	80004c60 <_vfprintf_r+0x910>
80004c56:	40 28       	lddsp	r8,sp[0x8]
80004c58:	58 08       	cp.w	r8,0
80004c5a:	f9 b8 00 01 	moveq	r8,1
80004c5e:	50 28       	stdsp	sp[0x8],r8
80004c60:	40 78       	lddsp	r8,sp[0x1c]
80004c62:	40 59       	lddsp	r9,sp[0x14]
80004c64:	fa e9 06 94 	st.d	sp[1684],r8
80004c68:	a9 a5       	sbr	r5,0x8
80004c6a:	fa f8 06 94 	ld.w	r8,sp[1684]
80004c6e:	58 08       	cp.w	r8,0
80004c70:	c0 65       	brlt	80004c7c <_vfprintf_r+0x92c>
80004c72:	40 5e       	lddsp	lr,sp[0x14]
80004c74:	30 0c       	mov	r12,0
80004c76:	50 6e       	stdsp	sp[0x18],lr
80004c78:	50 9c       	stdsp	sp[0x24],r12
80004c7a:	c0 78       	rjmp	80004c88 <_vfprintf_r+0x938>
80004c7c:	40 5b       	lddsp	r11,sp[0x14]
80004c7e:	32 da       	mov	r10,45
80004c80:	ee 1b 80 00 	eorh	r11,0x8000
80004c84:	50 9a       	stdsp	sp[0x24],r10
80004c86:	50 6b       	stdsp	sp[0x18],r11
80004c88:	e0 40 00 46 	cp.w	r0,70
80004c8c:	5f 09       	sreq	r9
80004c8e:	e0 40 00 66 	cp.w	r0,102
80004c92:	5f 08       	sreq	r8
80004c94:	f3 e8 10 08 	or	r8,r9,r8
80004c98:	50 48       	stdsp	sp[0x10],r8
80004c9a:	c0 40       	breq	80004ca2 <_vfprintf_r+0x952>
80004c9c:	40 22       	lddsp	r2,sp[0x8]
80004c9e:	30 39       	mov	r9,3
80004ca0:	c1 08       	rjmp	80004cc0 <_vfprintf_r+0x970>
80004ca2:	e0 40 00 45 	cp.w	r0,69
80004ca6:	5f 09       	sreq	r9
80004ca8:	e0 40 00 65 	cp.w	r0,101
80004cac:	5f 08       	sreq	r8
80004cae:	40 22       	lddsp	r2,sp[0x8]
80004cb0:	10 49       	or	r9,r8
80004cb2:	2f f2       	sub	r2,-1
80004cb4:	40 46       	lddsp	r6,sp[0x10]
80004cb6:	ec 09 18 00 	cp.b	r9,r6
80004cba:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004cbe:	30 29       	mov	r9,2
80004cc0:	fa c8 f9 5c 	sub	r8,sp,-1700
80004cc4:	1a d8       	st.w	--sp,r8
80004cc6:	fa c8 f9 54 	sub	r8,sp,-1708
80004cca:	1a d8       	st.w	--sp,r8
80004ccc:	fa c8 f9 4c 	sub	r8,sp,-1716
80004cd0:	08 9c       	mov	r12,r4
80004cd2:	1a d8       	st.w	--sp,r8
80004cd4:	04 98       	mov	r8,r2
80004cd6:	40 9b       	lddsp	r11,sp[0x24]
80004cd8:	40 aa       	lddsp	r10,sp[0x28]
80004cda:	e0 a0 0b c3 	rcall	80006460 <_dtoa_r>
80004cde:	e0 40 00 47 	cp.w	r0,71
80004ce2:	5f 19       	srne	r9
80004ce4:	e0 40 00 67 	cp.w	r0,103
80004ce8:	5f 18       	srne	r8
80004cea:	18 96       	mov	r6,r12
80004cec:	2f dd       	sub	sp,-12
80004cee:	f3 e8 00 08 	and	r8,r9,r8
80004cf2:	c0 41       	brne	80004cfa <_vfprintf_r+0x9aa>
80004cf4:	ed b5 00 00 	bld	r5,0x0
80004cf8:	c3 01       	brne	80004d58 <_vfprintf_r+0xa08>
80004cfa:	ec 02 00 0e 	add	lr,r6,r2
80004cfe:	50 3e       	stdsp	sp[0xc],lr
80004d00:	40 4c       	lddsp	r12,sp[0x10]
80004d02:	58 0c       	cp.w	r12,0
80004d04:	c1 50       	breq	80004d2e <_vfprintf_r+0x9de>
80004d06:	0d 89       	ld.ub	r9,r6[0x0]
80004d08:	33 08       	mov	r8,48
80004d0a:	f0 09 18 00 	cp.b	r9,r8
80004d0e:	c0 b1       	brne	80004d24 <_vfprintf_r+0x9d4>
80004d10:	30 08       	mov	r8,0
80004d12:	30 09       	mov	r9,0
80004d14:	40 6b       	lddsp	r11,sp[0x18]
80004d16:	40 7a       	lddsp	r10,sp[0x1c]
80004d18:	e0 a0 1f 89 	rcall	80008c2a <__avr32_f64_cmp_eq>
80004d1c:	fb b2 00 01 	rsubeq	r2,1
80004d20:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004d24:	40 3b       	lddsp	r11,sp[0xc]
80004d26:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004d2a:	10 0b       	add	r11,r8
80004d2c:	50 3b       	stdsp	sp[0xc],r11
80004d2e:	40 6b       	lddsp	r11,sp[0x18]
80004d30:	30 08       	mov	r8,0
80004d32:	30 09       	mov	r9,0
80004d34:	40 7a       	lddsp	r10,sp[0x1c]
80004d36:	e0 a0 1f 7a 	rcall	80008c2a <__avr32_f64_cmp_eq>
80004d3a:	c0 90       	breq	80004d4c <_vfprintf_r+0x9fc>
80004d3c:	40 3a       	lddsp	r10,sp[0xc]
80004d3e:	fb 4a 06 a4 	st.w	sp[1700],r10
80004d42:	c0 58       	rjmp	80004d4c <_vfprintf_r+0x9fc>
80004d44:	10 c9       	st.b	r8++,r9
80004d46:	fb 48 06 a4 	st.w	sp[1700],r8
80004d4a:	c0 28       	rjmp	80004d4e <_vfprintf_r+0x9fe>
80004d4c:	33 09       	mov	r9,48
80004d4e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004d52:	40 3e       	lddsp	lr,sp[0xc]
80004d54:	1c 38       	cp.w	r8,lr
80004d56:	cf 73       	brcs	80004d44 <_vfprintf_r+0x9f4>
80004d58:	e0 40 00 47 	cp.w	r0,71
80004d5c:	5f 09       	sreq	r9
80004d5e:	e0 40 00 67 	cp.w	r0,103
80004d62:	5f 08       	sreq	r8
80004d64:	f3 e8 10 08 	or	r8,r9,r8
80004d68:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004d6c:	0c 19       	sub	r9,r6
80004d6e:	50 69       	stdsp	sp[0x18],r9
80004d70:	58 08       	cp.w	r8,0
80004d72:	c0 b0       	breq	80004d88 <_vfprintf_r+0xa38>
80004d74:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004d78:	5b d8       	cp.w	r8,-3
80004d7a:	c0 55       	brlt	80004d84 <_vfprintf_r+0xa34>
80004d7c:	40 2c       	lddsp	r12,sp[0x8]
80004d7e:	18 38       	cp.w	r8,r12
80004d80:	e0 8a 00 6a 	brle	80004e54 <_vfprintf_r+0xb04>
80004d84:	20 20       	sub	r0,2
80004d86:	c0 58       	rjmp	80004d90 <_vfprintf_r+0xa40>
80004d88:	e0 40 00 65 	cp.w	r0,101
80004d8c:	e0 89 00 46 	brgt	80004e18 <_vfprintf_r+0xac8>
80004d90:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004d94:	fb 60 06 9c 	st.b	sp[1692],r0
80004d98:	20 1b       	sub	r11,1
80004d9a:	fb 4b 06 ac 	st.w	sp[1708],r11
80004d9e:	c0 47       	brpl	80004da6 <_vfprintf_r+0xa56>
80004da0:	5c 3b       	neg	r11
80004da2:	32 d8       	mov	r8,45
80004da4:	c0 28       	rjmp	80004da8 <_vfprintf_r+0xa58>
80004da6:	32 b8       	mov	r8,43
80004da8:	fb 68 06 9d 	st.b	sp[1693],r8
80004dac:	58 9b       	cp.w	r11,9
80004dae:	e0 8a 00 1d 	brle	80004de8 <_vfprintf_r+0xa98>
80004db2:	fa c9 fa 35 	sub	r9,sp,-1483
80004db6:	30 aa       	mov	r10,10
80004db8:	12 98       	mov	r8,r9
80004dba:	0e 9c       	mov	r12,r7
80004dbc:	0c 92       	mov	r2,r6
80004dbe:	f6 0a 0c 06 	divs	r6,r11,r10
80004dc2:	0e 9b       	mov	r11,r7
80004dc4:	2d 0b       	sub	r11,-48
80004dc6:	10 fb       	st.b	--r8,r11
80004dc8:	0c 9b       	mov	r11,r6
80004dca:	58 96       	cp.w	r6,9
80004dcc:	fe 99 ff f9 	brgt	80004dbe <_vfprintf_r+0xa6e>
80004dd0:	2d 0b       	sub	r11,-48
80004dd2:	18 97       	mov	r7,r12
80004dd4:	04 96       	mov	r6,r2
80004dd6:	10 fb       	st.b	--r8,r11
80004dd8:	fa ca f9 62 	sub	r10,sp,-1694
80004ddc:	c0 38       	rjmp	80004de2 <_vfprintf_r+0xa92>
80004dde:	11 3b       	ld.ub	r11,r8++
80004de0:	14 cb       	st.b	r10++,r11
80004de2:	12 38       	cp.w	r8,r9
80004de4:	cf d3       	brcs	80004dde <_vfprintf_r+0xa8e>
80004de6:	c0 98       	rjmp	80004df8 <_vfprintf_r+0xaa8>
80004de8:	2d 0b       	sub	r11,-48
80004dea:	33 08       	mov	r8,48
80004dec:	fb 6b 06 9f 	st.b	sp[1695],r11
80004df0:	fb 68 06 9e 	st.b	sp[1694],r8
80004df4:	fa ca f9 60 	sub	r10,sp,-1696
80004df8:	fa c8 f9 64 	sub	r8,sp,-1692
80004dfc:	f4 08 01 08 	sub	r8,r10,r8
80004e00:	50 e8       	stdsp	sp[0x38],r8
80004e02:	10 92       	mov	r2,r8
80004e04:	40 6b       	lddsp	r11,sp[0x18]
80004e06:	16 02       	add	r2,r11
80004e08:	58 1b       	cp.w	r11,1
80004e0a:	e0 89 00 05 	brgt	80004e14 <_vfprintf_r+0xac4>
80004e0e:	ed b5 00 00 	bld	r5,0x0
80004e12:	c3 51       	brne	80004e7c <_vfprintf_r+0xb2c>
80004e14:	2f f2       	sub	r2,-1
80004e16:	c3 38       	rjmp	80004e7c <_vfprintf_r+0xb2c>
80004e18:	e0 40 00 66 	cp.w	r0,102
80004e1c:	c1 c1       	brne	80004e54 <_vfprintf_r+0xb04>
80004e1e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004e22:	58 02       	cp.w	r2,0
80004e24:	e0 8a 00 0c 	brle	80004e3c <_vfprintf_r+0xaec>
80004e28:	40 2a       	lddsp	r10,sp[0x8]
80004e2a:	58 0a       	cp.w	r10,0
80004e2c:	c0 41       	brne	80004e34 <_vfprintf_r+0xae4>
80004e2e:	ed b5 00 00 	bld	r5,0x0
80004e32:	c2 51       	brne	80004e7c <_vfprintf_r+0xb2c>
80004e34:	2f f2       	sub	r2,-1
80004e36:	40 29       	lddsp	r9,sp[0x8]
80004e38:	12 02       	add	r2,r9
80004e3a:	c0 b8       	rjmp	80004e50 <_vfprintf_r+0xb00>
80004e3c:	40 28       	lddsp	r8,sp[0x8]
80004e3e:	58 08       	cp.w	r8,0
80004e40:	c0 61       	brne	80004e4c <_vfprintf_r+0xafc>
80004e42:	ed b5 00 00 	bld	r5,0x0
80004e46:	c0 30       	breq	80004e4c <_vfprintf_r+0xafc>
80004e48:	30 12       	mov	r2,1
80004e4a:	c1 98       	rjmp	80004e7c <_vfprintf_r+0xb2c>
80004e4c:	40 22       	lddsp	r2,sp[0x8]
80004e4e:	2f e2       	sub	r2,-2
80004e50:	36 60       	mov	r0,102
80004e52:	c1 58       	rjmp	80004e7c <_vfprintf_r+0xb2c>
80004e54:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004e58:	40 6e       	lddsp	lr,sp[0x18]
80004e5a:	1c 32       	cp.w	r2,lr
80004e5c:	c0 65       	brlt	80004e68 <_vfprintf_r+0xb18>
80004e5e:	ed b5 00 00 	bld	r5,0x0
80004e62:	f7 b2 00 ff 	subeq	r2,-1
80004e66:	c0 a8       	rjmp	80004e7a <_vfprintf_r+0xb2a>
80004e68:	e4 08 11 02 	rsub	r8,r2,2
80004e6c:	40 6c       	lddsp	r12,sp[0x18]
80004e6e:	58 02       	cp.w	r2,0
80004e70:	f0 02 17 a0 	movle	r2,r8
80004e74:	f9 b2 09 01 	movgt	r2,1
80004e78:	18 02       	add	r2,r12
80004e7a:	36 70       	mov	r0,103
80004e7c:	40 9b       	lddsp	r11,sp[0x24]
80004e7e:	58 0b       	cp.w	r11,0
80004e80:	e0 80 05 94 	breq	800059a8 <_vfprintf_r+0x1658>
80004e84:	32 d8       	mov	r8,45
80004e86:	fb 68 06 bb 	st.b	sp[1723],r8
80004e8a:	e0 8f 05 93 	bral	800059b0 <_vfprintf_r+0x1660>
80004e8e:	50 a7       	stdsp	sp[0x28],r7
80004e90:	04 94       	mov	r4,r2
80004e92:	0c 97       	mov	r7,r6
80004e94:	02 92       	mov	r2,r1
80004e96:	06 96       	mov	r6,r3
80004e98:	40 41       	lddsp	r1,sp[0x10]
80004e9a:	40 93       	lddsp	r3,sp[0x24]
80004e9c:	0e 99       	mov	r9,r7
80004e9e:	ed b5 00 05 	bld	r5,0x5
80004ea2:	c4 81       	brne	80004f32 <_vfprintf_r+0xbe2>
80004ea4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ea8:	40 3e       	lddsp	lr,sp[0xc]
80004eaa:	58 0e       	cp.w	lr,0
80004eac:	c1 d0       	breq	80004ee6 <_vfprintf_r+0xb96>
80004eae:	10 36       	cp.w	r6,r8
80004eb0:	c0 64       	brge	80004ebc <_vfprintf_r+0xb6c>
80004eb2:	fa cc f9 44 	sub	r12,sp,-1724
80004eb6:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004eba:	c1 d8       	rjmp	80004ef4 <_vfprintf_r+0xba4>
80004ebc:	fa c8 f9 50 	sub	r8,sp,-1712
80004ec0:	1a d8       	st.w	--sp,r8
80004ec2:	fa c8 fa b8 	sub	r8,sp,-1352
80004ec6:	04 9a       	mov	r10,r2
80004ec8:	1a d8       	st.w	--sp,r8
80004eca:	fa c8 fb b4 	sub	r8,sp,-1100
80004ece:	0c 9b       	mov	r11,r6
80004ed0:	1a d8       	st.w	--sp,r8
80004ed2:	08 9c       	mov	r12,r4
80004ed4:	fa c8 f9 40 	sub	r8,sp,-1728
80004ed8:	fa c9 ff b4 	sub	r9,sp,-76
80004edc:	fe b0 f8 a4 	rcall	80004024 <get_arg>
80004ee0:	2f dd       	sub	sp,-12
80004ee2:	78 0a       	ld.w	r10,r12[0x0]
80004ee4:	c2 08       	rjmp	80004f24 <_vfprintf_r+0xbd4>
80004ee6:	2f f7       	sub	r7,-1
80004ee8:	10 39       	cp.w	r9,r8
80004eea:	c0 84       	brge	80004efa <_vfprintf_r+0xbaa>
80004eec:	fa cb f9 44 	sub	r11,sp,-1724
80004ef0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ef4:	ec fa fd 88 	ld.w	r10,r6[-632]
80004ef8:	c1 68       	rjmp	80004f24 <_vfprintf_r+0xbd4>
80004efa:	41 09       	lddsp	r9,sp[0x40]
80004efc:	59 f8       	cp.w	r8,31
80004efe:	e0 89 00 10 	brgt	80004f1e <_vfprintf_r+0xbce>
80004f02:	f2 ca ff fc 	sub	r10,r9,-4
80004f06:	51 0a       	stdsp	sp[0x40],r10
80004f08:	fa c6 f9 44 	sub	r6,sp,-1724
80004f0c:	72 0a       	ld.w	r10,r9[0x0]
80004f0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f12:	f3 4a fd 88 	st.w	r9[-632],r10
80004f16:	2f f8       	sub	r8,-1
80004f18:	fb 48 06 b4 	st.w	sp[1716],r8
80004f1c:	c0 48       	rjmp	80004f24 <_vfprintf_r+0xbd4>
80004f1e:	72 0a       	ld.w	r10,r9[0x0]
80004f20:	2f c9       	sub	r9,-4
80004f22:	51 09       	stdsp	sp[0x40],r9
80004f24:	40 be       	lddsp	lr,sp[0x2c]
80004f26:	1c 98       	mov	r8,lr
80004f28:	95 1e       	st.w	r10[0x4],lr
80004f2a:	bf 58       	asr	r8,0x1f
80004f2c:	95 08       	st.w	r10[0x0],r8
80004f2e:	fe 9f fa 9f 	bral	8000446c <_vfprintf_r+0x11c>
80004f32:	ed b5 00 04 	bld	r5,0x4
80004f36:	c4 80       	breq	80004fc6 <_vfprintf_r+0xc76>
80004f38:	e2 15 00 40 	andl	r5,0x40,COH
80004f3c:	c4 50       	breq	80004fc6 <_vfprintf_r+0xc76>
80004f3e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f42:	40 3c       	lddsp	r12,sp[0xc]
80004f44:	58 0c       	cp.w	r12,0
80004f46:	c1 d0       	breq	80004f80 <_vfprintf_r+0xc30>
80004f48:	10 36       	cp.w	r6,r8
80004f4a:	c0 64       	brge	80004f56 <_vfprintf_r+0xc06>
80004f4c:	fa cb f9 44 	sub	r11,sp,-1724
80004f50:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f54:	c1 d8       	rjmp	80004f8e <_vfprintf_r+0xc3e>
80004f56:	fa c8 f9 50 	sub	r8,sp,-1712
80004f5a:	1a d8       	st.w	--sp,r8
80004f5c:	fa c8 fa b8 	sub	r8,sp,-1352
80004f60:	04 9a       	mov	r10,r2
80004f62:	1a d8       	st.w	--sp,r8
80004f64:	fa c8 fb b4 	sub	r8,sp,-1100
80004f68:	0c 9b       	mov	r11,r6
80004f6a:	1a d8       	st.w	--sp,r8
80004f6c:	08 9c       	mov	r12,r4
80004f6e:	fa c8 f9 40 	sub	r8,sp,-1728
80004f72:	fa c9 ff b4 	sub	r9,sp,-76
80004f76:	fe b0 f8 57 	rcall	80004024 <get_arg>
80004f7a:	2f dd       	sub	sp,-12
80004f7c:	78 0a       	ld.w	r10,r12[0x0]
80004f7e:	c2 08       	rjmp	80004fbe <_vfprintf_r+0xc6e>
80004f80:	2f f7       	sub	r7,-1
80004f82:	10 39       	cp.w	r9,r8
80004f84:	c0 84       	brge	80004f94 <_vfprintf_r+0xc44>
80004f86:	fa ca f9 44 	sub	r10,sp,-1724
80004f8a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004f8e:	ec fa fd 88 	ld.w	r10,r6[-632]
80004f92:	c1 68       	rjmp	80004fbe <_vfprintf_r+0xc6e>
80004f94:	41 09       	lddsp	r9,sp[0x40]
80004f96:	59 f8       	cp.w	r8,31
80004f98:	e0 89 00 10 	brgt	80004fb8 <_vfprintf_r+0xc68>
80004f9c:	f2 ca ff fc 	sub	r10,r9,-4
80004fa0:	51 0a       	stdsp	sp[0x40],r10
80004fa2:	fa c6 f9 44 	sub	r6,sp,-1724
80004fa6:	72 0a       	ld.w	r10,r9[0x0]
80004fa8:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004fac:	f3 4a fd 88 	st.w	r9[-632],r10
80004fb0:	2f f8       	sub	r8,-1
80004fb2:	fb 48 06 b4 	st.w	sp[1716],r8
80004fb6:	c0 48       	rjmp	80004fbe <_vfprintf_r+0xc6e>
80004fb8:	72 0a       	ld.w	r10,r9[0x0]
80004fba:	2f c9       	sub	r9,-4
80004fbc:	51 09       	stdsp	sp[0x40],r9
80004fbe:	40 be       	lddsp	lr,sp[0x2c]
80004fc0:	b4 0e       	st.h	r10[0x0],lr
80004fc2:	fe 9f fa 55 	bral	8000446c <_vfprintf_r+0x11c>
80004fc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fca:	40 3c       	lddsp	r12,sp[0xc]
80004fcc:	58 0c       	cp.w	r12,0
80004fce:	c1 d0       	breq	80005008 <_vfprintf_r+0xcb8>
80004fd0:	10 36       	cp.w	r6,r8
80004fd2:	c0 64       	brge	80004fde <_vfprintf_r+0xc8e>
80004fd4:	fa cb f9 44 	sub	r11,sp,-1724
80004fd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004fdc:	c1 d8       	rjmp	80005016 <_vfprintf_r+0xcc6>
80004fde:	fa c8 f9 50 	sub	r8,sp,-1712
80004fe2:	1a d8       	st.w	--sp,r8
80004fe4:	fa c8 fa b8 	sub	r8,sp,-1352
80004fe8:	04 9a       	mov	r10,r2
80004fea:	1a d8       	st.w	--sp,r8
80004fec:	fa c8 fb b4 	sub	r8,sp,-1100
80004ff0:	0c 9b       	mov	r11,r6
80004ff2:	1a d8       	st.w	--sp,r8
80004ff4:	08 9c       	mov	r12,r4
80004ff6:	fa c8 f9 40 	sub	r8,sp,-1728
80004ffa:	fa c9 ff b4 	sub	r9,sp,-76
80004ffe:	fe b0 f8 13 	rcall	80004024 <get_arg>
80005002:	2f dd       	sub	sp,-12
80005004:	78 0a       	ld.w	r10,r12[0x0]
80005006:	c2 08       	rjmp	80005046 <_vfprintf_r+0xcf6>
80005008:	2f f7       	sub	r7,-1
8000500a:	10 39       	cp.w	r9,r8
8000500c:	c0 84       	brge	8000501c <_vfprintf_r+0xccc>
8000500e:	fa ca f9 44 	sub	r10,sp,-1724
80005012:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005016:	ec fa fd 88 	ld.w	r10,r6[-632]
8000501a:	c1 68       	rjmp	80005046 <_vfprintf_r+0xcf6>
8000501c:	41 09       	lddsp	r9,sp[0x40]
8000501e:	59 f8       	cp.w	r8,31
80005020:	e0 89 00 10 	brgt	80005040 <_vfprintf_r+0xcf0>
80005024:	f2 ca ff fc 	sub	r10,r9,-4
80005028:	51 0a       	stdsp	sp[0x40],r10
8000502a:	fa c6 f9 44 	sub	r6,sp,-1724
8000502e:	72 0a       	ld.w	r10,r9[0x0]
80005030:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005034:	f3 4a fd 88 	st.w	r9[-632],r10
80005038:	2f f8       	sub	r8,-1
8000503a:	fb 48 06 b4 	st.w	sp[1716],r8
8000503e:	c0 48       	rjmp	80005046 <_vfprintf_r+0xcf6>
80005040:	72 0a       	ld.w	r10,r9[0x0]
80005042:	2f c9       	sub	r9,-4
80005044:	51 09       	stdsp	sp[0x40],r9
80005046:	40 be       	lddsp	lr,sp[0x2c]
80005048:	95 0e       	st.w	r10[0x0],lr
8000504a:	fe 9f fa 11 	bral	8000446c <_vfprintf_r+0x11c>
8000504e:	50 a7       	stdsp	sp[0x28],r7
80005050:	50 80       	stdsp	sp[0x20],r0
80005052:	0c 97       	mov	r7,r6
80005054:	04 94       	mov	r4,r2
80005056:	06 96       	mov	r6,r3
80005058:	02 92       	mov	r2,r1
8000505a:	40 93       	lddsp	r3,sp[0x24]
8000505c:	10 90       	mov	r0,r8
8000505e:	40 41       	lddsp	r1,sp[0x10]
80005060:	a5 a5       	sbr	r5,0x4
80005062:	c0 a8       	rjmp	80005076 <_vfprintf_r+0xd26>
80005064:	50 a7       	stdsp	sp[0x28],r7
80005066:	50 80       	stdsp	sp[0x20],r0
80005068:	0c 97       	mov	r7,r6
8000506a:	04 94       	mov	r4,r2
8000506c:	06 96       	mov	r6,r3
8000506e:	02 92       	mov	r2,r1
80005070:	40 93       	lddsp	r3,sp[0x24]
80005072:	10 90       	mov	r0,r8
80005074:	40 41       	lddsp	r1,sp[0x10]
80005076:	ed b5 00 05 	bld	r5,0x5
8000507a:	c5 d1       	brne	80005134 <_vfprintf_r+0xde4>
8000507c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005080:	40 3c       	lddsp	r12,sp[0xc]
80005082:	58 0c       	cp.w	r12,0
80005084:	c2 60       	breq	800050d0 <_vfprintf_r+0xd80>
80005086:	10 36       	cp.w	r6,r8
80005088:	c0 a4       	brge	8000509c <_vfprintf_r+0xd4c>
8000508a:	fa cb f9 44 	sub	r11,sp,-1724
8000508e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005092:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005096:	fa e9 00 00 	st.d	sp[0],r8
8000509a:	c1 88       	rjmp	800050ca <_vfprintf_r+0xd7a>
8000509c:	fa c8 f9 50 	sub	r8,sp,-1712
800050a0:	1a d8       	st.w	--sp,r8
800050a2:	fa c8 fa b8 	sub	r8,sp,-1352
800050a6:	04 9a       	mov	r10,r2
800050a8:	1a d8       	st.w	--sp,r8
800050aa:	0c 9b       	mov	r11,r6
800050ac:	fa c8 fb b4 	sub	r8,sp,-1100
800050b0:	08 9c       	mov	r12,r4
800050b2:	1a d8       	st.w	--sp,r8
800050b4:	fa c8 f9 40 	sub	r8,sp,-1728
800050b8:	fa c9 ff b4 	sub	r9,sp,-76
800050bc:	fe b0 f7 b4 	rcall	80004024 <get_arg>
800050c0:	2f dd       	sub	sp,-12
800050c2:	f8 ea 00 00 	ld.d	r10,r12[0]
800050c6:	fa eb 00 00 	st.d	sp[0],r10
800050ca:	30 08       	mov	r8,0
800050cc:	e0 8f 03 de 	bral	80005888 <_vfprintf_r+0x1538>
800050d0:	ee ca ff ff 	sub	r10,r7,-1
800050d4:	10 37       	cp.w	r7,r8
800050d6:	c0 b4       	brge	800050ec <_vfprintf_r+0xd9c>
800050d8:	fa c9 f9 44 	sub	r9,sp,-1724
800050dc:	14 97       	mov	r7,r10
800050de:	f2 06 00 36 	add	r6,r9,r6<<0x3
800050e2:	ec ea fd 88 	ld.d	r10,r6[-632]
800050e6:	fa eb 00 00 	st.d	sp[0],r10
800050ea:	c1 88       	rjmp	8000511a <_vfprintf_r+0xdca>
800050ec:	41 09       	lddsp	r9,sp[0x40]
800050ee:	59 f8       	cp.w	r8,31
800050f0:	e0 89 00 18 	brgt	80005120 <_vfprintf_r+0xdd0>
800050f4:	f2 e6 00 00 	ld.d	r6,r9[0]
800050f8:	f2 cb ff f8 	sub	r11,r9,-8
800050fc:	fa e7 00 00 	st.d	sp[0],r6
80005100:	51 0b       	stdsp	sp[0x40],r11
80005102:	fa c6 f9 44 	sub	r6,sp,-1724
80005106:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000510a:	fa e6 00 00 	ld.d	r6,sp[0]
8000510e:	f2 e7 fd 88 	st.d	r9[-632],r6
80005112:	2f f8       	sub	r8,-1
80005114:	14 97       	mov	r7,r10
80005116:	fb 48 06 b4 	st.w	sp[1716],r8
8000511a:	40 38       	lddsp	r8,sp[0xc]
8000511c:	e0 8f 03 b6 	bral	80005888 <_vfprintf_r+0x1538>
80005120:	f2 e6 00 00 	ld.d	r6,r9[0]
80005124:	40 38       	lddsp	r8,sp[0xc]
80005126:	fa e7 00 00 	st.d	sp[0],r6
8000512a:	2f 89       	sub	r9,-8
8000512c:	14 97       	mov	r7,r10
8000512e:	51 09       	stdsp	sp[0x40],r9
80005130:	e0 8f 03 ac 	bral	80005888 <_vfprintf_r+0x1538>
80005134:	ed b5 00 04 	bld	r5,0x4
80005138:	c1 61       	brne	80005164 <_vfprintf_r+0xe14>
8000513a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000513e:	40 3e       	lddsp	lr,sp[0xc]
80005140:	58 0e       	cp.w	lr,0
80005142:	c0 80       	breq	80005152 <_vfprintf_r+0xe02>
80005144:	10 36       	cp.w	r6,r8
80005146:	c6 74       	brge	80005214 <_vfprintf_r+0xec4>
80005148:	fa cc f9 44 	sub	r12,sp,-1724
8000514c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005150:	c8 08       	rjmp	80005250 <_vfprintf_r+0xf00>
80005152:	ee ca ff ff 	sub	r10,r7,-1
80005156:	10 37       	cp.w	r7,r8
80005158:	c7 f4       	brge	80005256 <_vfprintf_r+0xf06>
8000515a:	fa cb f9 44 	sub	r11,sp,-1724
8000515e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005162:	c7 68       	rjmp	8000524e <_vfprintf_r+0xefe>
80005164:	ed b5 00 06 	bld	r5,0x6
80005168:	c4 a1       	brne	800051fc <_vfprintf_r+0xeac>
8000516a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000516e:	40 3c       	lddsp	r12,sp[0xc]
80005170:	58 0c       	cp.w	r12,0
80005172:	c1 d0       	breq	800051ac <_vfprintf_r+0xe5c>
80005174:	10 36       	cp.w	r6,r8
80005176:	c0 64       	brge	80005182 <_vfprintf_r+0xe32>
80005178:	fa cb f9 44 	sub	r11,sp,-1724
8000517c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005180:	c1 f8       	rjmp	800051be <_vfprintf_r+0xe6e>
80005182:	fa c8 f9 50 	sub	r8,sp,-1712
80005186:	1a d8       	st.w	--sp,r8
80005188:	fa c8 fa b8 	sub	r8,sp,-1352
8000518c:	1a d8       	st.w	--sp,r8
8000518e:	fa c8 fb b4 	sub	r8,sp,-1100
80005192:	1a d8       	st.w	--sp,r8
80005194:	fa c8 f9 40 	sub	r8,sp,-1728
80005198:	fa c9 ff b4 	sub	r9,sp,-76
8000519c:	04 9a       	mov	r10,r2
8000519e:	0c 9b       	mov	r11,r6
800051a0:	08 9c       	mov	r12,r4
800051a2:	fe b0 f7 41 	rcall	80004024 <get_arg>
800051a6:	2f dd       	sub	sp,-12
800051a8:	98 18       	ld.sh	r8,r12[0x2]
800051aa:	c2 68       	rjmp	800051f6 <_vfprintf_r+0xea6>
800051ac:	ee ca ff ff 	sub	r10,r7,-1
800051b0:	10 37       	cp.w	r7,r8
800051b2:	c0 94       	brge	800051c4 <_vfprintf_r+0xe74>
800051b4:	fa c9 f9 44 	sub	r9,sp,-1724
800051b8:	14 97       	mov	r7,r10
800051ba:	f2 06 00 36 	add	r6,r9,r6<<0x3
800051be:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800051c2:	c1 a8       	rjmp	800051f6 <_vfprintf_r+0xea6>
800051c4:	41 09       	lddsp	r9,sp[0x40]
800051c6:	59 f8       	cp.w	r8,31
800051c8:	e0 89 00 13 	brgt	800051ee <_vfprintf_r+0xe9e>
800051cc:	f2 cb ff fc 	sub	r11,r9,-4
800051d0:	51 0b       	stdsp	sp[0x40],r11
800051d2:	72 09       	ld.w	r9,r9[0x0]
800051d4:	fa c6 f9 44 	sub	r6,sp,-1724
800051d8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800051dc:	2f f8       	sub	r8,-1
800051de:	f7 49 fd 88 	st.w	r11[-632],r9
800051e2:	fb 48 06 b4 	st.w	sp[1716],r8
800051e6:	14 97       	mov	r7,r10
800051e8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800051ec:	c0 58       	rjmp	800051f6 <_vfprintf_r+0xea6>
800051ee:	92 18       	ld.sh	r8,r9[0x2]
800051f0:	14 97       	mov	r7,r10
800051f2:	2f c9       	sub	r9,-4
800051f4:	51 09       	stdsp	sp[0x40],r9
800051f6:	5c 78       	castu.h	r8
800051f8:	50 18       	stdsp	sp[0x4],r8
800051fa:	c4 68       	rjmp	80005286 <_vfprintf_r+0xf36>
800051fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005200:	40 3c       	lddsp	r12,sp[0xc]
80005202:	58 0c       	cp.w	r12,0
80005204:	c1 d0       	breq	8000523e <_vfprintf_r+0xeee>
80005206:	10 36       	cp.w	r6,r8
80005208:	c0 64       	brge	80005214 <_vfprintf_r+0xec4>
8000520a:	fa cb f9 44 	sub	r11,sp,-1724
8000520e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005212:	c1 f8       	rjmp	80005250 <_vfprintf_r+0xf00>
80005214:	fa c8 f9 50 	sub	r8,sp,-1712
80005218:	1a d8       	st.w	--sp,r8
8000521a:	fa c8 fa b8 	sub	r8,sp,-1352
8000521e:	0c 9b       	mov	r11,r6
80005220:	1a d8       	st.w	--sp,r8
80005222:	fa c8 fb b4 	sub	r8,sp,-1100
80005226:	04 9a       	mov	r10,r2
80005228:	1a d8       	st.w	--sp,r8
8000522a:	08 9c       	mov	r12,r4
8000522c:	fa c8 f9 40 	sub	r8,sp,-1728
80005230:	fa c9 ff b4 	sub	r9,sp,-76
80005234:	fe b0 f6 f8 	rcall	80004024 <get_arg>
80005238:	2f dd       	sub	sp,-12
8000523a:	78 0b       	ld.w	r11,r12[0x0]
8000523c:	c2 48       	rjmp	80005284 <_vfprintf_r+0xf34>
8000523e:	ee ca ff ff 	sub	r10,r7,-1
80005242:	10 37       	cp.w	r7,r8
80005244:	c0 94       	brge	80005256 <_vfprintf_r+0xf06>
80005246:	fa c9 f9 44 	sub	r9,sp,-1724
8000524a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000524e:	14 97       	mov	r7,r10
80005250:	ec fb fd 88 	ld.w	r11,r6[-632]
80005254:	c1 88       	rjmp	80005284 <_vfprintf_r+0xf34>
80005256:	41 09       	lddsp	r9,sp[0x40]
80005258:	59 f8       	cp.w	r8,31
8000525a:	e0 89 00 11 	brgt	8000527c <_vfprintf_r+0xf2c>
8000525e:	f2 cb ff fc 	sub	r11,r9,-4
80005262:	51 0b       	stdsp	sp[0x40],r11
80005264:	fa c6 f9 44 	sub	r6,sp,-1724
80005268:	72 0b       	ld.w	r11,r9[0x0]
8000526a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000526e:	f3 4b fd 88 	st.w	r9[-632],r11
80005272:	2f f8       	sub	r8,-1
80005274:	14 97       	mov	r7,r10
80005276:	fb 48 06 b4 	st.w	sp[1716],r8
8000527a:	c0 58       	rjmp	80005284 <_vfprintf_r+0xf34>
8000527c:	72 0b       	ld.w	r11,r9[0x0]
8000527e:	14 97       	mov	r7,r10
80005280:	2f c9       	sub	r9,-4
80005282:	51 09       	stdsp	sp[0x40],r9
80005284:	50 1b       	stdsp	sp[0x4],r11
80005286:	30 0e       	mov	lr,0
80005288:	50 0e       	stdsp	sp[0x0],lr
8000528a:	1c 98       	mov	r8,lr
8000528c:	e0 8f 02 fe 	bral	80005888 <_vfprintf_r+0x1538>
80005290:	50 a7       	stdsp	sp[0x28],r7
80005292:	50 80       	stdsp	sp[0x20],r0
80005294:	0c 97       	mov	r7,r6
80005296:	04 94       	mov	r4,r2
80005298:	06 96       	mov	r6,r3
8000529a:	02 92       	mov	r2,r1
8000529c:	40 93       	lddsp	r3,sp[0x24]
8000529e:	40 41       	lddsp	r1,sp[0x10]
800052a0:	0e 99       	mov	r9,r7
800052a2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052a6:	40 3c       	lddsp	r12,sp[0xc]
800052a8:	58 0c       	cp.w	r12,0
800052aa:	c1 d0       	breq	800052e4 <_vfprintf_r+0xf94>
800052ac:	10 36       	cp.w	r6,r8
800052ae:	c0 64       	brge	800052ba <_vfprintf_r+0xf6a>
800052b0:	fa cb f9 44 	sub	r11,sp,-1724
800052b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800052b8:	c1 d8       	rjmp	800052f2 <_vfprintf_r+0xfa2>
800052ba:	fa c8 f9 50 	sub	r8,sp,-1712
800052be:	1a d8       	st.w	--sp,r8
800052c0:	fa c8 fa b8 	sub	r8,sp,-1352
800052c4:	1a d8       	st.w	--sp,r8
800052c6:	fa c8 fb b4 	sub	r8,sp,-1100
800052ca:	1a d8       	st.w	--sp,r8
800052cc:	fa c9 ff b4 	sub	r9,sp,-76
800052d0:	fa c8 f9 40 	sub	r8,sp,-1728
800052d4:	04 9a       	mov	r10,r2
800052d6:	0c 9b       	mov	r11,r6
800052d8:	08 9c       	mov	r12,r4
800052da:	fe b0 f6 a5 	rcall	80004024 <get_arg>
800052de:	2f dd       	sub	sp,-12
800052e0:	78 09       	ld.w	r9,r12[0x0]
800052e2:	c2 18       	rjmp	80005324 <_vfprintf_r+0xfd4>
800052e4:	2f f7       	sub	r7,-1
800052e6:	10 39       	cp.w	r9,r8
800052e8:	c0 84       	brge	800052f8 <_vfprintf_r+0xfa8>
800052ea:	fa ca f9 44 	sub	r10,sp,-1724
800052ee:	f4 06 00 36 	add	r6,r10,r6<<0x3
800052f2:	ec f9 fd 88 	ld.w	r9,r6[-632]
800052f6:	c1 78       	rjmp	80005324 <_vfprintf_r+0xfd4>
800052f8:	41 09       	lddsp	r9,sp[0x40]
800052fa:	59 f8       	cp.w	r8,31
800052fc:	e0 89 00 10 	brgt	8000531c <_vfprintf_r+0xfcc>
80005300:	f2 ca ff fc 	sub	r10,r9,-4
80005304:	51 0a       	stdsp	sp[0x40],r10
80005306:	fa c6 f9 44 	sub	r6,sp,-1724
8000530a:	72 09       	ld.w	r9,r9[0x0]
8000530c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005310:	f5 49 fd 88 	st.w	r10[-632],r9
80005314:	2f f8       	sub	r8,-1
80005316:	fb 48 06 b4 	st.w	sp[1716],r8
8000531a:	c0 58       	rjmp	80005324 <_vfprintf_r+0xfd4>
8000531c:	f2 c8 ff fc 	sub	r8,r9,-4
80005320:	51 08       	stdsp	sp[0x40],r8
80005322:	72 09       	ld.w	r9,r9[0x0]
80005324:	33 08       	mov	r8,48
80005326:	fb 68 06 b8 	st.b	sp[1720],r8
8000532a:	37 88       	mov	r8,120
8000532c:	30 0e       	mov	lr,0
8000532e:	fb 68 06 b9 	st.b	sp[1721],r8
80005332:	fe cc b4 be 	sub	r12,pc,-19266
80005336:	50 19       	stdsp	sp[0x4],r9
80005338:	a1 b5       	sbr	r5,0x1
8000533a:	50 0e       	stdsp	sp[0x0],lr
8000533c:	50 dc       	stdsp	sp[0x34],r12
8000533e:	30 28       	mov	r8,2
80005340:	37 80       	mov	r0,120
80005342:	e0 8f 02 a3 	bral	80005888 <_vfprintf_r+0x1538>
80005346:	50 a7       	stdsp	sp[0x28],r7
80005348:	50 80       	stdsp	sp[0x20],r0
8000534a:	10 90       	mov	r0,r8
8000534c:	30 08       	mov	r8,0
8000534e:	fb 68 06 bb 	st.b	sp[1723],r8
80005352:	0c 97       	mov	r7,r6
80005354:	04 94       	mov	r4,r2
80005356:	06 96       	mov	r6,r3
80005358:	02 92       	mov	r2,r1
8000535a:	40 93       	lddsp	r3,sp[0x24]
8000535c:	40 41       	lddsp	r1,sp[0x10]
8000535e:	0e 99       	mov	r9,r7
80005360:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005364:	40 3b       	lddsp	r11,sp[0xc]
80005366:	58 0b       	cp.w	r11,0
80005368:	c1 d0       	breq	800053a2 <_vfprintf_r+0x1052>
8000536a:	10 36       	cp.w	r6,r8
8000536c:	c0 64       	brge	80005378 <_vfprintf_r+0x1028>
8000536e:	fa ca f9 44 	sub	r10,sp,-1724
80005372:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005376:	c1 d8       	rjmp	800053b0 <_vfprintf_r+0x1060>
80005378:	fa c8 f9 50 	sub	r8,sp,-1712
8000537c:	1a d8       	st.w	--sp,r8
8000537e:	fa c8 fa b8 	sub	r8,sp,-1352
80005382:	1a d8       	st.w	--sp,r8
80005384:	fa c8 fb b4 	sub	r8,sp,-1100
80005388:	0c 9b       	mov	r11,r6
8000538a:	1a d8       	st.w	--sp,r8
8000538c:	04 9a       	mov	r10,r2
8000538e:	fa c8 f9 40 	sub	r8,sp,-1728
80005392:	fa c9 ff b4 	sub	r9,sp,-76
80005396:	08 9c       	mov	r12,r4
80005398:	fe b0 f6 46 	rcall	80004024 <get_arg>
8000539c:	2f dd       	sub	sp,-12
8000539e:	78 06       	ld.w	r6,r12[0x0]
800053a0:	c2 08       	rjmp	800053e0 <_vfprintf_r+0x1090>
800053a2:	2f f7       	sub	r7,-1
800053a4:	10 39       	cp.w	r9,r8
800053a6:	c0 84       	brge	800053b6 <_vfprintf_r+0x1066>
800053a8:	fa c9 f9 44 	sub	r9,sp,-1724
800053ac:	f2 06 00 36 	add	r6,r9,r6<<0x3
800053b0:	ec f6 fd 88 	ld.w	r6,r6[-632]
800053b4:	c1 68       	rjmp	800053e0 <_vfprintf_r+0x1090>
800053b6:	41 09       	lddsp	r9,sp[0x40]
800053b8:	59 f8       	cp.w	r8,31
800053ba:	e0 89 00 10 	brgt	800053da <_vfprintf_r+0x108a>
800053be:	f2 ca ff fc 	sub	r10,r9,-4
800053c2:	51 0a       	stdsp	sp[0x40],r10
800053c4:	72 06       	ld.w	r6,r9[0x0]
800053c6:	fa ce f9 44 	sub	lr,sp,-1724
800053ca:	fc 08 00 39 	add	r9,lr,r8<<0x3
800053ce:	f3 46 fd 88 	st.w	r9[-632],r6
800053d2:	2f f8       	sub	r8,-1
800053d4:	fb 48 06 b4 	st.w	sp[1716],r8
800053d8:	c0 48       	rjmp	800053e0 <_vfprintf_r+0x1090>
800053da:	72 06       	ld.w	r6,r9[0x0]
800053dc:	2f c9       	sub	r9,-4
800053de:	51 09       	stdsp	sp[0x40],r9
800053e0:	40 2c       	lddsp	r12,sp[0x8]
800053e2:	58 0c       	cp.w	r12,0
800053e4:	c1 05       	brlt	80005404 <_vfprintf_r+0x10b4>
800053e6:	18 9a       	mov	r10,r12
800053e8:	30 0b       	mov	r11,0
800053ea:	0c 9c       	mov	r12,r6
800053ec:	e0 a0 14 58 	rcall	80007c9c <memchr>
800053f0:	e0 80 02 df 	breq	800059ae <_vfprintf_r+0x165e>
800053f4:	f8 06 01 02 	sub	r2,r12,r6
800053f8:	40 2b       	lddsp	r11,sp[0x8]
800053fa:	16 32       	cp.w	r2,r11
800053fc:	e0 89 02 d9 	brgt	800059ae <_vfprintf_r+0x165e>
80005400:	e0 8f 02 d4 	bral	800059a8 <_vfprintf_r+0x1658>
80005404:	30 0a       	mov	r10,0
80005406:	0c 9c       	mov	r12,r6
80005408:	50 2a       	stdsp	sp[0x8],r10
8000540a:	e0 a0 19 2b 	rcall	80008660 <strlen>
8000540e:	18 92       	mov	r2,r12
80005410:	e0 8f 02 d2 	bral	800059b4 <_vfprintf_r+0x1664>
80005414:	50 a7       	stdsp	sp[0x28],r7
80005416:	50 80       	stdsp	sp[0x20],r0
80005418:	0c 97       	mov	r7,r6
8000541a:	04 94       	mov	r4,r2
8000541c:	06 96       	mov	r6,r3
8000541e:	02 92       	mov	r2,r1
80005420:	40 93       	lddsp	r3,sp[0x24]
80005422:	10 90       	mov	r0,r8
80005424:	40 41       	lddsp	r1,sp[0x10]
80005426:	a5 a5       	sbr	r5,0x4
80005428:	c0 a8       	rjmp	8000543c <_vfprintf_r+0x10ec>
8000542a:	50 a7       	stdsp	sp[0x28],r7
8000542c:	50 80       	stdsp	sp[0x20],r0
8000542e:	0c 97       	mov	r7,r6
80005430:	04 94       	mov	r4,r2
80005432:	06 96       	mov	r6,r3
80005434:	02 92       	mov	r2,r1
80005436:	40 93       	lddsp	r3,sp[0x24]
80005438:	10 90       	mov	r0,r8
8000543a:	40 41       	lddsp	r1,sp[0x10]
8000543c:	ed b5 00 05 	bld	r5,0x5
80005440:	c5 61       	brne	800054ec <_vfprintf_r+0x119c>
80005442:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005446:	40 39       	lddsp	r9,sp[0xc]
80005448:	58 09       	cp.w	r9,0
8000544a:	c2 10       	breq	8000548c <_vfprintf_r+0x113c>
8000544c:	10 36       	cp.w	r6,r8
8000544e:	c0 74       	brge	8000545c <_vfprintf_r+0x110c>
80005450:	fa c8 f9 44 	sub	r8,sp,-1724
80005454:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005458:	c2 38       	rjmp	8000549e <_vfprintf_r+0x114e>
8000545a:	d7 03       	nop
8000545c:	fa c8 f9 50 	sub	r8,sp,-1712
80005460:	1a d8       	st.w	--sp,r8
80005462:	fa c8 fa b8 	sub	r8,sp,-1352
80005466:	1a d8       	st.w	--sp,r8
80005468:	fa c8 fb b4 	sub	r8,sp,-1100
8000546c:	1a d8       	st.w	--sp,r8
8000546e:	fa c8 f9 40 	sub	r8,sp,-1728
80005472:	fa c9 ff b4 	sub	r9,sp,-76
80005476:	04 9a       	mov	r10,r2
80005478:	0c 9b       	mov	r11,r6
8000547a:	08 9c       	mov	r12,r4
8000547c:	fe b0 f5 d4 	rcall	80004024 <get_arg>
80005480:	2f dd       	sub	sp,-12
80005482:	f8 e8 00 00 	ld.d	r8,r12[0]
80005486:	fa e9 00 00 	st.d	sp[0],r8
8000548a:	c2 e8       	rjmp	800054e6 <_vfprintf_r+0x1196>
8000548c:	ee ca ff ff 	sub	r10,r7,-1
80005490:	10 37       	cp.w	r7,r8
80005492:	c0 b4       	brge	800054a8 <_vfprintf_r+0x1158>
80005494:	fa c8 f9 44 	sub	r8,sp,-1724
80005498:	14 97       	mov	r7,r10
8000549a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000549e:	ec ea fd 88 	ld.d	r10,r6[-632]
800054a2:	fa eb 00 00 	st.d	sp[0],r10
800054a6:	c2 08       	rjmp	800054e6 <_vfprintf_r+0x1196>
800054a8:	41 09       	lddsp	r9,sp[0x40]
800054aa:	59 f8       	cp.w	r8,31
800054ac:	e0 89 00 16 	brgt	800054d8 <_vfprintf_r+0x1188>
800054b0:	f2 e6 00 00 	ld.d	r6,r9[0]
800054b4:	f2 cb ff f8 	sub	r11,r9,-8
800054b8:	fa e7 00 00 	st.d	sp[0],r6
800054bc:	51 0b       	stdsp	sp[0x40],r11
800054be:	fa c6 f9 44 	sub	r6,sp,-1724
800054c2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054c6:	fa e6 00 00 	ld.d	r6,sp[0]
800054ca:	f2 e7 fd 88 	st.d	r9[-632],r6
800054ce:	2f f8       	sub	r8,-1
800054d0:	14 97       	mov	r7,r10
800054d2:	fb 48 06 b4 	st.w	sp[1716],r8
800054d6:	c0 88       	rjmp	800054e6 <_vfprintf_r+0x1196>
800054d8:	f2 e6 00 00 	ld.d	r6,r9[0]
800054dc:	2f 89       	sub	r9,-8
800054de:	fa e7 00 00 	st.d	sp[0],r6
800054e2:	51 09       	stdsp	sp[0x40],r9
800054e4:	14 97       	mov	r7,r10
800054e6:	30 18       	mov	r8,1
800054e8:	e0 8f 01 d0 	bral	80005888 <_vfprintf_r+0x1538>
800054ec:	ed b5 00 04 	bld	r5,0x4
800054f0:	c1 61       	brne	8000551c <_vfprintf_r+0x11cc>
800054f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054f6:	40 3e       	lddsp	lr,sp[0xc]
800054f8:	58 0e       	cp.w	lr,0
800054fa:	c0 80       	breq	8000550a <_vfprintf_r+0x11ba>
800054fc:	10 36       	cp.w	r6,r8
800054fe:	c6 74       	brge	800055cc <_vfprintf_r+0x127c>
80005500:	fa cc f9 44 	sub	r12,sp,-1724
80005504:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005508:	c8 08       	rjmp	80005608 <_vfprintf_r+0x12b8>
8000550a:	ee ca ff ff 	sub	r10,r7,-1
8000550e:	10 37       	cp.w	r7,r8
80005510:	c7 f4       	brge	8000560e <_vfprintf_r+0x12be>
80005512:	fa cb f9 44 	sub	r11,sp,-1724
80005516:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000551a:	c7 68       	rjmp	80005606 <_vfprintf_r+0x12b6>
8000551c:	ed b5 00 06 	bld	r5,0x6
80005520:	c4 a1       	brne	800055b4 <_vfprintf_r+0x1264>
80005522:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005526:	40 3c       	lddsp	r12,sp[0xc]
80005528:	58 0c       	cp.w	r12,0
8000552a:	c1 d0       	breq	80005564 <_vfprintf_r+0x1214>
8000552c:	10 36       	cp.w	r6,r8
8000552e:	c0 64       	brge	8000553a <_vfprintf_r+0x11ea>
80005530:	fa cb f9 44 	sub	r11,sp,-1724
80005534:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005538:	c1 f8       	rjmp	80005576 <_vfprintf_r+0x1226>
8000553a:	fa c8 f9 50 	sub	r8,sp,-1712
8000553e:	1a d8       	st.w	--sp,r8
80005540:	fa c8 fa b8 	sub	r8,sp,-1352
80005544:	1a d8       	st.w	--sp,r8
80005546:	fa c8 fb b4 	sub	r8,sp,-1100
8000554a:	1a d8       	st.w	--sp,r8
8000554c:	fa c8 f9 40 	sub	r8,sp,-1728
80005550:	fa c9 ff b4 	sub	r9,sp,-76
80005554:	04 9a       	mov	r10,r2
80005556:	0c 9b       	mov	r11,r6
80005558:	08 9c       	mov	r12,r4
8000555a:	fe b0 f5 65 	rcall	80004024 <get_arg>
8000555e:	2f dd       	sub	sp,-12
80005560:	98 18       	ld.sh	r8,r12[0x2]
80005562:	c2 68       	rjmp	800055ae <_vfprintf_r+0x125e>
80005564:	ee ca ff ff 	sub	r10,r7,-1
80005568:	10 37       	cp.w	r7,r8
8000556a:	c0 94       	brge	8000557c <_vfprintf_r+0x122c>
8000556c:	fa c9 f9 44 	sub	r9,sp,-1724
80005570:	14 97       	mov	r7,r10
80005572:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005576:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000557a:	c1 a8       	rjmp	800055ae <_vfprintf_r+0x125e>
8000557c:	41 09       	lddsp	r9,sp[0x40]
8000557e:	59 f8       	cp.w	r8,31
80005580:	e0 89 00 13 	brgt	800055a6 <_vfprintf_r+0x1256>
80005584:	f2 cb ff fc 	sub	r11,r9,-4
80005588:	51 0b       	stdsp	sp[0x40],r11
8000558a:	72 09       	ld.w	r9,r9[0x0]
8000558c:	fa c6 f9 44 	sub	r6,sp,-1724
80005590:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005594:	2f f8       	sub	r8,-1
80005596:	f7 49 fd 88 	st.w	r11[-632],r9
8000559a:	fb 48 06 b4 	st.w	sp[1716],r8
8000559e:	14 97       	mov	r7,r10
800055a0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800055a4:	c0 58       	rjmp	800055ae <_vfprintf_r+0x125e>
800055a6:	92 18       	ld.sh	r8,r9[0x2]
800055a8:	14 97       	mov	r7,r10
800055aa:	2f c9       	sub	r9,-4
800055ac:	51 09       	stdsp	sp[0x40],r9
800055ae:	5c 78       	castu.h	r8
800055b0:	50 18       	stdsp	sp[0x4],r8
800055b2:	c4 68       	rjmp	8000563e <_vfprintf_r+0x12ee>
800055b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055b8:	40 3c       	lddsp	r12,sp[0xc]
800055ba:	58 0c       	cp.w	r12,0
800055bc:	c1 d0       	breq	800055f6 <_vfprintf_r+0x12a6>
800055be:	10 36       	cp.w	r6,r8
800055c0:	c0 64       	brge	800055cc <_vfprintf_r+0x127c>
800055c2:	fa cb f9 44 	sub	r11,sp,-1724
800055c6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800055ca:	c1 f8       	rjmp	80005608 <_vfprintf_r+0x12b8>
800055cc:	fa c8 f9 50 	sub	r8,sp,-1712
800055d0:	1a d8       	st.w	--sp,r8
800055d2:	fa c8 fa b8 	sub	r8,sp,-1352
800055d6:	0c 9b       	mov	r11,r6
800055d8:	1a d8       	st.w	--sp,r8
800055da:	fa c8 fb b4 	sub	r8,sp,-1100
800055de:	04 9a       	mov	r10,r2
800055e0:	1a d8       	st.w	--sp,r8
800055e2:	08 9c       	mov	r12,r4
800055e4:	fa c8 f9 40 	sub	r8,sp,-1728
800055e8:	fa c9 ff b4 	sub	r9,sp,-76
800055ec:	fe b0 f5 1c 	rcall	80004024 <get_arg>
800055f0:	2f dd       	sub	sp,-12
800055f2:	78 0b       	ld.w	r11,r12[0x0]
800055f4:	c2 48       	rjmp	8000563c <_vfprintf_r+0x12ec>
800055f6:	ee ca ff ff 	sub	r10,r7,-1
800055fa:	10 37       	cp.w	r7,r8
800055fc:	c0 94       	brge	8000560e <_vfprintf_r+0x12be>
800055fe:	fa c9 f9 44 	sub	r9,sp,-1724
80005602:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005606:	14 97       	mov	r7,r10
80005608:	ec fb fd 88 	ld.w	r11,r6[-632]
8000560c:	c1 88       	rjmp	8000563c <_vfprintf_r+0x12ec>
8000560e:	41 09       	lddsp	r9,sp[0x40]
80005610:	59 f8       	cp.w	r8,31
80005612:	e0 89 00 11 	brgt	80005634 <_vfprintf_r+0x12e4>
80005616:	f2 cb ff fc 	sub	r11,r9,-4
8000561a:	51 0b       	stdsp	sp[0x40],r11
8000561c:	fa c6 f9 44 	sub	r6,sp,-1724
80005620:	72 0b       	ld.w	r11,r9[0x0]
80005622:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005626:	f3 4b fd 88 	st.w	r9[-632],r11
8000562a:	2f f8       	sub	r8,-1
8000562c:	14 97       	mov	r7,r10
8000562e:	fb 48 06 b4 	st.w	sp[1716],r8
80005632:	c0 58       	rjmp	8000563c <_vfprintf_r+0x12ec>
80005634:	72 0b       	ld.w	r11,r9[0x0]
80005636:	14 97       	mov	r7,r10
80005638:	2f c9       	sub	r9,-4
8000563a:	51 09       	stdsp	sp[0x40],r9
8000563c:	50 1b       	stdsp	sp[0x4],r11
8000563e:	30 0e       	mov	lr,0
80005640:	30 18       	mov	r8,1
80005642:	50 0e       	stdsp	sp[0x0],lr
80005644:	c2 29       	rjmp	80005888 <_vfprintf_r+0x1538>
80005646:	50 a7       	stdsp	sp[0x28],r7
80005648:	50 80       	stdsp	sp[0x20],r0
8000564a:	0c 97       	mov	r7,r6
8000564c:	04 94       	mov	r4,r2
8000564e:	06 96       	mov	r6,r3
80005650:	02 92       	mov	r2,r1
80005652:	fe cc b7 de 	sub	r12,pc,-18466
80005656:	40 93       	lddsp	r3,sp[0x24]
80005658:	10 90       	mov	r0,r8
8000565a:	40 41       	lddsp	r1,sp[0x10]
8000565c:	50 dc       	stdsp	sp[0x34],r12
8000565e:	ed b5 00 05 	bld	r5,0x5
80005662:	c5 51       	brne	8000570c <_vfprintf_r+0x13bc>
80005664:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005668:	40 3b       	lddsp	r11,sp[0xc]
8000566a:	58 0b       	cp.w	r11,0
8000566c:	c2 20       	breq	800056b0 <_vfprintf_r+0x1360>
8000566e:	10 36       	cp.w	r6,r8
80005670:	c0 a4       	brge	80005684 <_vfprintf_r+0x1334>
80005672:	fa ca f9 44 	sub	r10,sp,-1724
80005676:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000567a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000567e:	fa e9 00 00 	st.d	sp[0],r8
80005682:	cf 28       	rjmp	80005866 <_vfprintf_r+0x1516>
80005684:	fa c8 f9 50 	sub	r8,sp,-1712
80005688:	1a d8       	st.w	--sp,r8
8000568a:	fa c8 fa b8 	sub	r8,sp,-1352
8000568e:	04 9a       	mov	r10,r2
80005690:	1a d8       	st.w	--sp,r8
80005692:	0c 9b       	mov	r11,r6
80005694:	fa c8 fb b4 	sub	r8,sp,-1100
80005698:	08 9c       	mov	r12,r4
8000569a:	1a d8       	st.w	--sp,r8
8000569c:	fa c8 f9 40 	sub	r8,sp,-1728
800056a0:	fa c9 ff b4 	sub	r9,sp,-76
800056a4:	fe b0 f4 c0 	rcall	80004024 <get_arg>
800056a8:	2f dd       	sub	sp,-12
800056aa:	f8 ea 00 00 	ld.d	r10,r12[0]
800056ae:	c0 c8       	rjmp	800056c6 <_vfprintf_r+0x1376>
800056b0:	ee ca ff ff 	sub	r10,r7,-1
800056b4:	10 37       	cp.w	r7,r8
800056b6:	c0 b4       	brge	800056cc <_vfprintf_r+0x137c>
800056b8:	fa c9 f9 44 	sub	r9,sp,-1724
800056bc:	14 97       	mov	r7,r10
800056be:	f2 06 00 36 	add	r6,r9,r6<<0x3
800056c2:	ec ea fd 88 	ld.d	r10,r6[-632]
800056c6:	fa eb 00 00 	st.d	sp[0],r10
800056ca:	cc e8       	rjmp	80005866 <_vfprintf_r+0x1516>
800056cc:	41 09       	lddsp	r9,sp[0x40]
800056ce:	59 f8       	cp.w	r8,31
800056d0:	e0 89 00 16 	brgt	800056fc <_vfprintf_r+0x13ac>
800056d4:	f2 e6 00 00 	ld.d	r6,r9[0]
800056d8:	f2 cb ff f8 	sub	r11,r9,-8
800056dc:	fa e7 00 00 	st.d	sp[0],r6
800056e0:	51 0b       	stdsp	sp[0x40],r11
800056e2:	fa c6 f9 44 	sub	r6,sp,-1724
800056e6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800056ea:	fa e6 00 00 	ld.d	r6,sp[0]
800056ee:	f2 e7 fd 88 	st.d	r9[-632],r6
800056f2:	2f f8       	sub	r8,-1
800056f4:	14 97       	mov	r7,r10
800056f6:	fb 48 06 b4 	st.w	sp[1716],r8
800056fa:	cb 68       	rjmp	80005866 <_vfprintf_r+0x1516>
800056fc:	f2 e6 00 00 	ld.d	r6,r9[0]
80005700:	2f 89       	sub	r9,-8
80005702:	fa e7 00 00 	st.d	sp[0],r6
80005706:	51 09       	stdsp	sp[0x40],r9
80005708:	14 97       	mov	r7,r10
8000570a:	ca e8       	rjmp	80005866 <_vfprintf_r+0x1516>
8000570c:	ed b5 00 04 	bld	r5,0x4
80005710:	c1 71       	brne	8000573e <_vfprintf_r+0x13ee>
80005712:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005716:	40 3e       	lddsp	lr,sp[0xc]
80005718:	58 0e       	cp.w	lr,0
8000571a:	c0 80       	breq	8000572a <_vfprintf_r+0x13da>
8000571c:	10 36       	cp.w	r6,r8
8000571e:	c6 94       	brge	800057f0 <_vfprintf_r+0x14a0>
80005720:	fa cc f9 44 	sub	r12,sp,-1724
80005724:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005728:	c8 28       	rjmp	8000582c <_vfprintf_r+0x14dc>
8000572a:	ee ca ff ff 	sub	r10,r7,-1
8000572e:	10 37       	cp.w	r7,r8
80005730:	e0 84 00 81 	brge	80005832 <_vfprintf_r+0x14e2>
80005734:	fa cb f9 44 	sub	r11,sp,-1724
80005738:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000573c:	c7 78       	rjmp	8000582a <_vfprintf_r+0x14da>
8000573e:	ed b5 00 06 	bld	r5,0x6
80005742:	c4 b1       	brne	800057d8 <_vfprintf_r+0x1488>
80005744:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005748:	40 3c       	lddsp	r12,sp[0xc]
8000574a:	58 0c       	cp.w	r12,0
8000574c:	c1 d0       	breq	80005786 <_vfprintf_r+0x1436>
8000574e:	10 36       	cp.w	r6,r8
80005750:	c0 64       	brge	8000575c <_vfprintf_r+0x140c>
80005752:	fa cb f9 44 	sub	r11,sp,-1724
80005756:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000575a:	c1 f8       	rjmp	80005798 <_vfprintf_r+0x1448>
8000575c:	fa c8 f9 50 	sub	r8,sp,-1712
80005760:	1a d8       	st.w	--sp,r8
80005762:	fa c8 fa b8 	sub	r8,sp,-1352
80005766:	1a d8       	st.w	--sp,r8
80005768:	fa c8 fb b4 	sub	r8,sp,-1100
8000576c:	1a d8       	st.w	--sp,r8
8000576e:	fa c8 f9 40 	sub	r8,sp,-1728
80005772:	fa c9 ff b4 	sub	r9,sp,-76
80005776:	04 9a       	mov	r10,r2
80005778:	0c 9b       	mov	r11,r6
8000577a:	08 9c       	mov	r12,r4
8000577c:	fe b0 f4 54 	rcall	80004024 <get_arg>
80005780:	2f dd       	sub	sp,-12
80005782:	98 18       	ld.sh	r8,r12[0x2]
80005784:	c2 78       	rjmp	800057d2 <_vfprintf_r+0x1482>
80005786:	ee ca ff ff 	sub	r10,r7,-1
8000578a:	10 37       	cp.w	r7,r8
8000578c:	c0 a4       	brge	800057a0 <_vfprintf_r+0x1450>
8000578e:	fa c9 f9 44 	sub	r9,sp,-1724
80005792:	14 97       	mov	r7,r10
80005794:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005798:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000579c:	c1 b8       	rjmp	800057d2 <_vfprintf_r+0x1482>
8000579e:	d7 03       	nop
800057a0:	41 09       	lddsp	r9,sp[0x40]
800057a2:	59 f8       	cp.w	r8,31
800057a4:	e0 89 00 13 	brgt	800057ca <_vfprintf_r+0x147a>
800057a8:	f2 cb ff fc 	sub	r11,r9,-4
800057ac:	51 0b       	stdsp	sp[0x40],r11
800057ae:	72 09       	ld.w	r9,r9[0x0]
800057b0:	fa c6 f9 44 	sub	r6,sp,-1724
800057b4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800057b8:	2f f8       	sub	r8,-1
800057ba:	f7 49 fd 88 	st.w	r11[-632],r9
800057be:	fb 48 06 b4 	st.w	sp[1716],r8
800057c2:	14 97       	mov	r7,r10
800057c4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800057c8:	c0 58       	rjmp	800057d2 <_vfprintf_r+0x1482>
800057ca:	92 18       	ld.sh	r8,r9[0x2]
800057cc:	14 97       	mov	r7,r10
800057ce:	2f c9       	sub	r9,-4
800057d0:	51 09       	stdsp	sp[0x40],r9
800057d2:	5c 78       	castu.h	r8
800057d4:	50 18       	stdsp	sp[0x4],r8
800057d6:	c4 68       	rjmp	80005862 <_vfprintf_r+0x1512>
800057d8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800057dc:	40 3c       	lddsp	r12,sp[0xc]
800057de:	58 0c       	cp.w	r12,0
800057e0:	c1 d0       	breq	8000581a <_vfprintf_r+0x14ca>
800057e2:	10 36       	cp.w	r6,r8
800057e4:	c0 64       	brge	800057f0 <_vfprintf_r+0x14a0>
800057e6:	fa cb f9 44 	sub	r11,sp,-1724
800057ea:	f6 06 00 36 	add	r6,r11,r6<<0x3
800057ee:	c1 f8       	rjmp	8000582c <_vfprintf_r+0x14dc>
800057f0:	fa c8 f9 50 	sub	r8,sp,-1712
800057f4:	1a d8       	st.w	--sp,r8
800057f6:	fa c8 fa b8 	sub	r8,sp,-1352
800057fa:	0c 9b       	mov	r11,r6
800057fc:	1a d8       	st.w	--sp,r8
800057fe:	fa c8 fb b4 	sub	r8,sp,-1100
80005802:	04 9a       	mov	r10,r2
80005804:	1a d8       	st.w	--sp,r8
80005806:	08 9c       	mov	r12,r4
80005808:	fa c8 f9 40 	sub	r8,sp,-1728
8000580c:	fa c9 ff b4 	sub	r9,sp,-76
80005810:	fe b0 f4 0a 	rcall	80004024 <get_arg>
80005814:	2f dd       	sub	sp,-12
80005816:	78 0b       	ld.w	r11,r12[0x0]
80005818:	c2 48       	rjmp	80005860 <_vfprintf_r+0x1510>
8000581a:	ee ca ff ff 	sub	r10,r7,-1
8000581e:	10 37       	cp.w	r7,r8
80005820:	c0 94       	brge	80005832 <_vfprintf_r+0x14e2>
80005822:	fa c9 f9 44 	sub	r9,sp,-1724
80005826:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000582a:	14 97       	mov	r7,r10
8000582c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005830:	c1 88       	rjmp	80005860 <_vfprintf_r+0x1510>
80005832:	41 09       	lddsp	r9,sp[0x40]
80005834:	59 f8       	cp.w	r8,31
80005836:	e0 89 00 11 	brgt	80005858 <_vfprintf_r+0x1508>
8000583a:	f2 cb ff fc 	sub	r11,r9,-4
8000583e:	51 0b       	stdsp	sp[0x40],r11
80005840:	fa c6 f9 44 	sub	r6,sp,-1724
80005844:	72 0b       	ld.w	r11,r9[0x0]
80005846:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000584a:	f3 4b fd 88 	st.w	r9[-632],r11
8000584e:	2f f8       	sub	r8,-1
80005850:	14 97       	mov	r7,r10
80005852:	fb 48 06 b4 	st.w	sp[1716],r8
80005856:	c0 58       	rjmp	80005860 <_vfprintf_r+0x1510>
80005858:	72 0b       	ld.w	r11,r9[0x0]
8000585a:	14 97       	mov	r7,r10
8000585c:	2f c9       	sub	r9,-4
8000585e:	51 09       	stdsp	sp[0x40],r9
80005860:	50 1b       	stdsp	sp[0x4],r11
80005862:	30 0e       	mov	lr,0
80005864:	50 0e       	stdsp	sp[0x0],lr
80005866:	40 08       	lddsp	r8,sp[0x0]
80005868:	40 1c       	lddsp	r12,sp[0x4]
8000586a:	18 48       	or	r8,r12
8000586c:	5f 19       	srne	r9
8000586e:	0a 98       	mov	r8,r5
80005870:	eb e9 00 09 	and	r9,r5,r9
80005874:	a1 b8       	sbr	r8,0x1
80005876:	58 09       	cp.w	r9,0
80005878:	c0 70       	breq	80005886 <_vfprintf_r+0x1536>
8000587a:	10 95       	mov	r5,r8
8000587c:	fb 60 06 b9 	st.b	sp[1721],r0
80005880:	33 08       	mov	r8,48
80005882:	fb 68 06 b8 	st.b	sp[1720],r8
80005886:	30 28       	mov	r8,2
80005888:	30 09       	mov	r9,0
8000588a:	fb 69 06 bb 	st.b	sp[1723],r9
8000588e:	0a 99       	mov	r9,r5
80005890:	a7 d9       	cbr	r9,0x7
80005892:	40 2b       	lddsp	r11,sp[0x8]
80005894:	40 16       	lddsp	r6,sp[0x4]
80005896:	58 0b       	cp.w	r11,0
80005898:	5f 1a       	srne	r10
8000589a:	f2 05 17 40 	movge	r5,r9
8000589e:	fa c2 f9 78 	sub	r2,sp,-1672
800058a2:	40 09       	lddsp	r9,sp[0x0]
800058a4:	0c 49       	or	r9,r6
800058a6:	5f 19       	srne	r9
800058a8:	f5 e9 10 09 	or	r9,r10,r9
800058ac:	c5 c0       	breq	80005964 <_vfprintf_r+0x1614>
800058ae:	30 19       	mov	r9,1
800058b0:	f2 08 18 00 	cp.b	r8,r9
800058b4:	c0 60       	breq	800058c0 <_vfprintf_r+0x1570>
800058b6:	30 29       	mov	r9,2
800058b8:	f2 08 18 00 	cp.b	r8,r9
800058bc:	c0 41       	brne	800058c4 <_vfprintf_r+0x1574>
800058be:	c3 c8       	rjmp	80005936 <_vfprintf_r+0x15e6>
800058c0:	04 96       	mov	r6,r2
800058c2:	c3 08       	rjmp	80005922 <_vfprintf_r+0x15d2>
800058c4:	04 96       	mov	r6,r2
800058c6:	fa e8 00 00 	ld.d	r8,sp[0]
800058ca:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800058ce:	2d 0a       	sub	r10,-48
800058d0:	0c fa       	st.b	--r6,r10
800058d2:	f0 0b 16 03 	lsr	r11,r8,0x3
800058d6:	f2 0c 16 03 	lsr	r12,r9,0x3
800058da:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800058de:	18 99       	mov	r9,r12
800058e0:	16 98       	mov	r8,r11
800058e2:	58 08       	cp.w	r8,0
800058e4:	5c 29       	cpc	r9
800058e6:	cf 21       	brne	800058ca <_vfprintf_r+0x157a>
800058e8:	fa e9 00 00 	st.d	sp[0],r8
800058ec:	ed b5 00 00 	bld	r5,0x0
800058f0:	c4 51       	brne	8000597a <_vfprintf_r+0x162a>
800058f2:	33 09       	mov	r9,48
800058f4:	f2 0a 18 00 	cp.b	r10,r9
800058f8:	c4 10       	breq	8000597a <_vfprintf_r+0x162a>
800058fa:	0c f9       	st.b	--r6,r9
800058fc:	c3 f8       	rjmp	8000597a <_vfprintf_r+0x162a>
800058fe:	fa ea 00 00 	ld.d	r10,sp[0]
80005902:	30 a8       	mov	r8,10
80005904:	30 09       	mov	r9,0
80005906:	e0 a0 1b 99 	rcall	80009038 <__avr32_umod64>
8000590a:	30 a8       	mov	r8,10
8000590c:	2d 0a       	sub	r10,-48
8000590e:	30 09       	mov	r9,0
80005910:	ac 8a       	st.b	r6[0x0],r10
80005912:	fa ea 00 00 	ld.d	r10,sp[0]
80005916:	fe b0 f1 8e 	rcall	80003c32 <__avr32_udiv64>
8000591a:	16 99       	mov	r9,r11
8000591c:	14 98       	mov	r8,r10
8000591e:	fa e9 00 00 	st.d	sp[0],r8
80005922:	20 16       	sub	r6,1
80005924:	fa ea 00 00 	ld.d	r10,sp[0]
80005928:	58 9a       	cp.w	r10,9
8000592a:	5c 2b       	cpc	r11
8000592c:	fe 9b ff e9 	brhi	800058fe <_vfprintf_r+0x15ae>
80005930:	1b f8       	ld.ub	r8,sp[0x7]
80005932:	2d 08       	sub	r8,-48
80005934:	c2 08       	rjmp	80005974 <_vfprintf_r+0x1624>
80005936:	04 96       	mov	r6,r2
80005938:	fa e8 00 00 	ld.d	r8,sp[0]
8000593c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005940:	40 de       	lddsp	lr,sp[0x34]
80005942:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005946:	0c fa       	st.b	--r6,r10
80005948:	f2 0b 16 04 	lsr	r11,r9,0x4
8000594c:	f0 0a 16 04 	lsr	r10,r8,0x4
80005950:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005954:	16 99       	mov	r9,r11
80005956:	14 98       	mov	r8,r10
80005958:	58 08       	cp.w	r8,0
8000595a:	5c 29       	cpc	r9
8000595c:	cf 01       	brne	8000593c <_vfprintf_r+0x15ec>
8000595e:	fa e9 00 00 	st.d	sp[0],r8
80005962:	c0 c8       	rjmp	8000597a <_vfprintf_r+0x162a>
80005964:	58 08       	cp.w	r8,0
80005966:	c0 91       	brne	80005978 <_vfprintf_r+0x1628>
80005968:	ed b5 00 00 	bld	r5,0x0
8000596c:	c0 61       	brne	80005978 <_vfprintf_r+0x1628>
8000596e:	fa c6 f9 79 	sub	r6,sp,-1671
80005972:	33 08       	mov	r8,48
80005974:	ac 88       	st.b	r6[0x0],r8
80005976:	c0 28       	rjmp	8000597a <_vfprintf_r+0x162a>
80005978:	04 96       	mov	r6,r2
8000597a:	0c 12       	sub	r2,r6
8000597c:	c1 c8       	rjmp	800059b4 <_vfprintf_r+0x1664>
8000597e:	50 a7       	stdsp	sp[0x28],r7
80005980:	50 80       	stdsp	sp[0x20],r0
80005982:	40 93       	lddsp	r3,sp[0x24]
80005984:	0c 97       	mov	r7,r6
80005986:	10 90       	mov	r0,r8
80005988:	04 94       	mov	r4,r2
8000598a:	40 41       	lddsp	r1,sp[0x10]
8000598c:	58 08       	cp.w	r8,0
8000598e:	e0 80 04 4f 	breq	8000622c <_vfprintf_r+0x1edc>
80005992:	fb 68 06 60 	st.b	sp[1632],r8
80005996:	30 0c       	mov	r12,0
80005998:	30 08       	mov	r8,0
8000599a:	30 12       	mov	r2,1
8000599c:	fb 68 06 bb 	st.b	sp[1723],r8
800059a0:	50 2c       	stdsp	sp[0x8],r12
800059a2:	fa c6 f9 a0 	sub	r6,sp,-1632
800059a6:	c0 78       	rjmp	800059b4 <_vfprintf_r+0x1664>
800059a8:	30 0b       	mov	r11,0
800059aa:	50 2b       	stdsp	sp[0x8],r11
800059ac:	c0 48       	rjmp	800059b4 <_vfprintf_r+0x1664>
800059ae:	40 22       	lddsp	r2,sp[0x8]
800059b0:	30 0a       	mov	r10,0
800059b2:	50 2a       	stdsp	sp[0x8],r10
800059b4:	40 29       	lddsp	r9,sp[0x8]
800059b6:	e4 09 0c 49 	max	r9,r2,r9
800059ba:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800059be:	50 39       	stdsp	sp[0xc],r9
800059c0:	0a 9e       	mov	lr,r5
800059c2:	30 09       	mov	r9,0
800059c4:	e2 1e 00 02 	andl	lr,0x2,COH
800059c8:	f2 08 18 00 	cp.b	r8,r9
800059cc:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800059d0:	f7 b8 01 ff 	subne	r8,-1
800059d4:	fb f8 1a 03 	st.wne	sp[0xc],r8
800059d8:	0a 9b       	mov	r11,r5
800059da:	58 0e       	cp.w	lr,0
800059dc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800059e0:	f7 bc 01 fe 	subne	r12,-2
800059e4:	fb fc 1a 03 	st.wne	sp[0xc],r12
800059e8:	e2 1b 00 84 	andl	r11,0x84,COH
800059ec:	50 fe       	stdsp	sp[0x3c],lr
800059ee:	50 9b       	stdsp	sp[0x24],r11
800059f0:	c4 71       	brne	80005a7e <_vfprintf_r+0x172e>
800059f2:	40 8a       	lddsp	r10,sp[0x20]
800059f4:	40 39       	lddsp	r9,sp[0xc]
800059f6:	12 1a       	sub	r10,r9
800059f8:	50 4a       	stdsp	sp[0x10],r10
800059fa:	58 0a       	cp.w	r10,0
800059fc:	e0 89 00 20 	brgt	80005a3c <_vfprintf_r+0x16ec>
80005a00:	c3 f8       	rjmp	80005a7e <_vfprintf_r+0x172e>
80005a02:	2f 09       	sub	r9,-16
80005a04:	2f f8       	sub	r8,-1
80005a06:	fe ce bb 7a 	sub	lr,pc,-17542
80005a0a:	31 0c       	mov	r12,16
80005a0c:	fb 49 06 90 	st.w	sp[1680],r9
80005a10:	87 0e       	st.w	r3[0x0],lr
80005a12:	87 1c       	st.w	r3[0x4],r12
80005a14:	fb 48 06 8c 	st.w	sp[1676],r8
80005a18:	58 78       	cp.w	r8,7
80005a1a:	e0 89 00 04 	brgt	80005a22 <_vfprintf_r+0x16d2>
80005a1e:	2f 83       	sub	r3,-8
80005a20:	c0 b8       	rjmp	80005a36 <_vfprintf_r+0x16e6>
80005a22:	fa ca f9 78 	sub	r10,sp,-1672
80005a26:	02 9b       	mov	r11,r1
80005a28:	08 9c       	mov	r12,r4
80005a2a:	fe b0 f4 85 	rcall	80004334 <__sprint_r>
80005a2e:	e0 81 04 10 	brne	8000624e <_vfprintf_r+0x1efe>
80005a32:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a36:	40 4b       	lddsp	r11,sp[0x10]
80005a38:	21 0b       	sub	r11,16
80005a3a:	50 4b       	stdsp	sp[0x10],r11
80005a3c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a40:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a44:	fe ca bb b8 	sub	r10,pc,-17480
80005a48:	40 4e       	lddsp	lr,sp[0x10]
80005a4a:	59 0e       	cp.w	lr,16
80005a4c:	fe 99 ff db 	brgt	80005a02 <_vfprintf_r+0x16b2>
80005a50:	1c 09       	add	r9,lr
80005a52:	2f f8       	sub	r8,-1
80005a54:	87 0a       	st.w	r3[0x0],r10
80005a56:	fb 49 06 90 	st.w	sp[1680],r9
80005a5a:	87 1e       	st.w	r3[0x4],lr
80005a5c:	fb 48 06 8c 	st.w	sp[1676],r8
80005a60:	58 78       	cp.w	r8,7
80005a62:	e0 89 00 04 	brgt	80005a6a <_vfprintf_r+0x171a>
80005a66:	2f 83       	sub	r3,-8
80005a68:	c0 b8       	rjmp	80005a7e <_vfprintf_r+0x172e>
80005a6a:	fa ca f9 78 	sub	r10,sp,-1672
80005a6e:	02 9b       	mov	r11,r1
80005a70:	08 9c       	mov	r12,r4
80005a72:	fe b0 f4 61 	rcall	80004334 <__sprint_r>
80005a76:	e0 81 03 ec 	brne	8000624e <_vfprintf_r+0x1efe>
80005a7a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a7e:	30 09       	mov	r9,0
80005a80:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005a84:	f2 08 18 00 	cp.b	r8,r9
80005a88:	c1 f0       	breq	80005ac6 <_vfprintf_r+0x1776>
80005a8a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a8e:	fa c9 f9 45 	sub	r9,sp,-1723
80005a92:	2f f8       	sub	r8,-1
80005a94:	87 09       	st.w	r3[0x0],r9
80005a96:	fb 48 06 90 	st.w	sp[1680],r8
80005a9a:	30 19       	mov	r9,1
80005a9c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005aa0:	87 19       	st.w	r3[0x4],r9
80005aa2:	2f f8       	sub	r8,-1
80005aa4:	fb 48 06 8c 	st.w	sp[1676],r8
80005aa8:	58 78       	cp.w	r8,7
80005aaa:	e0 89 00 04 	brgt	80005ab2 <_vfprintf_r+0x1762>
80005aae:	2f 83       	sub	r3,-8
80005ab0:	c0 b8       	rjmp	80005ac6 <_vfprintf_r+0x1776>
80005ab2:	fa ca f9 78 	sub	r10,sp,-1672
80005ab6:	02 9b       	mov	r11,r1
80005ab8:	08 9c       	mov	r12,r4
80005aba:	fe b0 f4 3d 	rcall	80004334 <__sprint_r>
80005abe:	e0 81 03 c8 	brne	8000624e <_vfprintf_r+0x1efe>
80005ac2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ac6:	40 fc       	lddsp	r12,sp[0x3c]
80005ac8:	58 0c       	cp.w	r12,0
80005aca:	c1 f0       	breq	80005b08 <_vfprintf_r+0x17b8>
80005acc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ad0:	fa c9 f9 48 	sub	r9,sp,-1720
80005ad4:	2f e8       	sub	r8,-2
80005ad6:	87 09       	st.w	r3[0x0],r9
80005ad8:	fb 48 06 90 	st.w	sp[1680],r8
80005adc:	30 29       	mov	r9,2
80005ade:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ae2:	87 19       	st.w	r3[0x4],r9
80005ae4:	2f f8       	sub	r8,-1
80005ae6:	fb 48 06 8c 	st.w	sp[1676],r8
80005aea:	58 78       	cp.w	r8,7
80005aec:	e0 89 00 04 	brgt	80005af4 <_vfprintf_r+0x17a4>
80005af0:	2f 83       	sub	r3,-8
80005af2:	c0 b8       	rjmp	80005b08 <_vfprintf_r+0x17b8>
80005af4:	fa ca f9 78 	sub	r10,sp,-1672
80005af8:	02 9b       	mov	r11,r1
80005afa:	08 9c       	mov	r12,r4
80005afc:	fe b0 f4 1c 	rcall	80004334 <__sprint_r>
80005b00:	e0 81 03 a7 	brne	8000624e <_vfprintf_r+0x1efe>
80005b04:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b08:	40 9b       	lddsp	r11,sp[0x24]
80005b0a:	e0 4b 00 80 	cp.w	r11,128
80005b0e:	c4 71       	brne	80005b9c <_vfprintf_r+0x184c>
80005b10:	40 8a       	lddsp	r10,sp[0x20]
80005b12:	40 39       	lddsp	r9,sp[0xc]
80005b14:	12 1a       	sub	r10,r9
80005b16:	50 4a       	stdsp	sp[0x10],r10
80005b18:	58 0a       	cp.w	r10,0
80005b1a:	e0 89 00 20 	brgt	80005b5a <_vfprintf_r+0x180a>
80005b1e:	c3 f8       	rjmp	80005b9c <_vfprintf_r+0x184c>
80005b20:	2f 09       	sub	r9,-16
80005b22:	2f f8       	sub	r8,-1
80005b24:	fe ce bc 88 	sub	lr,pc,-17272
80005b28:	31 0c       	mov	r12,16
80005b2a:	fb 49 06 90 	st.w	sp[1680],r9
80005b2e:	87 0e       	st.w	r3[0x0],lr
80005b30:	87 1c       	st.w	r3[0x4],r12
80005b32:	fb 48 06 8c 	st.w	sp[1676],r8
80005b36:	58 78       	cp.w	r8,7
80005b38:	e0 89 00 04 	brgt	80005b40 <_vfprintf_r+0x17f0>
80005b3c:	2f 83       	sub	r3,-8
80005b3e:	c0 b8       	rjmp	80005b54 <_vfprintf_r+0x1804>
80005b40:	fa ca f9 78 	sub	r10,sp,-1672
80005b44:	02 9b       	mov	r11,r1
80005b46:	08 9c       	mov	r12,r4
80005b48:	fe b0 f3 f6 	rcall	80004334 <__sprint_r>
80005b4c:	e0 81 03 81 	brne	8000624e <_vfprintf_r+0x1efe>
80005b50:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b54:	40 4b       	lddsp	r11,sp[0x10]
80005b56:	21 0b       	sub	r11,16
80005b58:	50 4b       	stdsp	sp[0x10],r11
80005b5a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b5e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b62:	fe ca bc c6 	sub	r10,pc,-17210
80005b66:	40 4e       	lddsp	lr,sp[0x10]
80005b68:	59 0e       	cp.w	lr,16
80005b6a:	fe 99 ff db 	brgt	80005b20 <_vfprintf_r+0x17d0>
80005b6e:	1c 09       	add	r9,lr
80005b70:	2f f8       	sub	r8,-1
80005b72:	87 0a       	st.w	r3[0x0],r10
80005b74:	fb 49 06 90 	st.w	sp[1680],r9
80005b78:	87 1e       	st.w	r3[0x4],lr
80005b7a:	fb 48 06 8c 	st.w	sp[1676],r8
80005b7e:	58 78       	cp.w	r8,7
80005b80:	e0 89 00 04 	brgt	80005b88 <_vfprintf_r+0x1838>
80005b84:	2f 83       	sub	r3,-8
80005b86:	c0 b8       	rjmp	80005b9c <_vfprintf_r+0x184c>
80005b88:	fa ca f9 78 	sub	r10,sp,-1672
80005b8c:	02 9b       	mov	r11,r1
80005b8e:	08 9c       	mov	r12,r4
80005b90:	fe b0 f3 d2 	rcall	80004334 <__sprint_r>
80005b94:	e0 81 03 5d 	brne	8000624e <_vfprintf_r+0x1efe>
80005b98:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b9c:	40 2c       	lddsp	r12,sp[0x8]
80005b9e:	04 1c       	sub	r12,r2
80005ba0:	50 2c       	stdsp	sp[0x8],r12
80005ba2:	58 0c       	cp.w	r12,0
80005ba4:	e0 89 00 20 	brgt	80005be4 <_vfprintf_r+0x1894>
80005ba8:	c3 f8       	rjmp	80005c26 <_vfprintf_r+0x18d6>
80005baa:	2f 09       	sub	r9,-16
80005bac:	2f f8       	sub	r8,-1
80005bae:	fe cb bd 12 	sub	r11,pc,-17134
80005bb2:	31 0a       	mov	r10,16
80005bb4:	fb 49 06 90 	st.w	sp[1680],r9
80005bb8:	87 0b       	st.w	r3[0x0],r11
80005bba:	87 1a       	st.w	r3[0x4],r10
80005bbc:	fb 48 06 8c 	st.w	sp[1676],r8
80005bc0:	58 78       	cp.w	r8,7
80005bc2:	e0 89 00 04 	brgt	80005bca <_vfprintf_r+0x187a>
80005bc6:	2f 83       	sub	r3,-8
80005bc8:	c0 b8       	rjmp	80005bde <_vfprintf_r+0x188e>
80005bca:	fa ca f9 78 	sub	r10,sp,-1672
80005bce:	02 9b       	mov	r11,r1
80005bd0:	08 9c       	mov	r12,r4
80005bd2:	fe b0 f3 b1 	rcall	80004334 <__sprint_r>
80005bd6:	e0 81 03 3c 	brne	8000624e <_vfprintf_r+0x1efe>
80005bda:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bde:	40 29       	lddsp	r9,sp[0x8]
80005be0:	21 09       	sub	r9,16
80005be2:	50 29       	stdsp	sp[0x8],r9
80005be4:	fa f9 06 90 	ld.w	r9,sp[1680]
80005be8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bec:	fe ca bd 50 	sub	r10,pc,-17072
80005bf0:	40 2e       	lddsp	lr,sp[0x8]
80005bf2:	59 0e       	cp.w	lr,16
80005bf4:	fe 99 ff db 	brgt	80005baa <_vfprintf_r+0x185a>
80005bf8:	1c 09       	add	r9,lr
80005bfa:	2f f8       	sub	r8,-1
80005bfc:	87 0a       	st.w	r3[0x0],r10
80005bfe:	fb 49 06 90 	st.w	sp[1680],r9
80005c02:	87 1e       	st.w	r3[0x4],lr
80005c04:	fb 48 06 8c 	st.w	sp[1676],r8
80005c08:	58 78       	cp.w	r8,7
80005c0a:	e0 89 00 04 	brgt	80005c12 <_vfprintf_r+0x18c2>
80005c0e:	2f 83       	sub	r3,-8
80005c10:	c0 b8       	rjmp	80005c26 <_vfprintf_r+0x18d6>
80005c12:	fa ca f9 78 	sub	r10,sp,-1672
80005c16:	02 9b       	mov	r11,r1
80005c18:	08 9c       	mov	r12,r4
80005c1a:	fe b0 f3 8d 	rcall	80004334 <__sprint_r>
80005c1e:	e0 81 03 18 	brne	8000624e <_vfprintf_r+0x1efe>
80005c22:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c26:	ed b5 00 08 	bld	r5,0x8
80005c2a:	c0 b0       	breq	80005c40 <_vfprintf_r+0x18f0>
80005c2c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c30:	87 12       	st.w	r3[0x4],r2
80005c32:	87 06       	st.w	r3[0x0],r6
80005c34:	f0 02 00 02 	add	r2,r8,r2
80005c38:	fb 42 06 90 	st.w	sp[1680],r2
80005c3c:	e0 8f 01 d4 	bral	80005fe4 <_vfprintf_r+0x1c94>
80005c40:	e0 40 00 65 	cp.w	r0,101
80005c44:	e0 8a 01 d6 	brle	80005ff0 <_vfprintf_r+0x1ca0>
80005c48:	30 08       	mov	r8,0
80005c4a:	30 09       	mov	r9,0
80005c4c:	40 5b       	lddsp	r11,sp[0x14]
80005c4e:	40 7a       	lddsp	r10,sp[0x1c]
80005c50:	e0 a0 17 ed 	rcall	80008c2a <__avr32_f64_cmp_eq>
80005c54:	c7 90       	breq	80005d46 <_vfprintf_r+0x19f6>
80005c56:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c5a:	fe c9 bd d2 	sub	r9,pc,-16942
80005c5e:	2f f8       	sub	r8,-1
80005c60:	87 09       	st.w	r3[0x0],r9
80005c62:	fb 48 06 90 	st.w	sp[1680],r8
80005c66:	30 19       	mov	r9,1
80005c68:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c6c:	87 19       	st.w	r3[0x4],r9
80005c6e:	2f f8       	sub	r8,-1
80005c70:	fb 48 06 8c 	st.w	sp[1676],r8
80005c74:	58 78       	cp.w	r8,7
80005c76:	e0 89 00 05 	brgt	80005c80 <_vfprintf_r+0x1930>
80005c7a:	2f 83       	sub	r3,-8
80005c7c:	c0 c8       	rjmp	80005c94 <_vfprintf_r+0x1944>
80005c7e:	d7 03       	nop
80005c80:	fa ca f9 78 	sub	r10,sp,-1672
80005c84:	02 9b       	mov	r11,r1
80005c86:	08 9c       	mov	r12,r4
80005c88:	fe b0 f3 56 	rcall	80004334 <__sprint_r>
80005c8c:	e0 81 02 e1 	brne	8000624e <_vfprintf_r+0x1efe>
80005c90:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c94:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005c98:	40 6c       	lddsp	r12,sp[0x18]
80005c9a:	18 38       	cp.w	r8,r12
80005c9c:	c0 55       	brlt	80005ca6 <_vfprintf_r+0x1956>
80005c9e:	ed b5 00 00 	bld	r5,0x0
80005ca2:	e0 81 02 6b 	brne	80006178 <_vfprintf_r+0x1e28>
80005ca6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005caa:	2f f8       	sub	r8,-1
80005cac:	40 cb       	lddsp	r11,sp[0x30]
80005cae:	fb 48 06 90 	st.w	sp[1680],r8
80005cb2:	30 19       	mov	r9,1
80005cb4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cb8:	87 0b       	st.w	r3[0x0],r11
80005cba:	2f f8       	sub	r8,-1
80005cbc:	87 19       	st.w	r3[0x4],r9
80005cbe:	fb 48 06 8c 	st.w	sp[1676],r8
80005cc2:	58 78       	cp.w	r8,7
80005cc4:	e0 89 00 04 	brgt	80005ccc <_vfprintf_r+0x197c>
80005cc8:	2f 83       	sub	r3,-8
80005cca:	c0 b8       	rjmp	80005ce0 <_vfprintf_r+0x1990>
80005ccc:	fa ca f9 78 	sub	r10,sp,-1672
80005cd0:	02 9b       	mov	r11,r1
80005cd2:	08 9c       	mov	r12,r4
80005cd4:	fe b0 f3 30 	rcall	80004334 <__sprint_r>
80005cd8:	e0 81 02 bb 	brne	8000624e <_vfprintf_r+0x1efe>
80005cdc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ce0:	40 66       	lddsp	r6,sp[0x18]
80005ce2:	20 16       	sub	r6,1
80005ce4:	58 06       	cp.w	r6,0
80005ce6:	e0 89 00 1d 	brgt	80005d20 <_vfprintf_r+0x19d0>
80005cea:	e0 8f 02 47 	bral	80006178 <_vfprintf_r+0x1e28>
80005cee:	2f 09       	sub	r9,-16
80005cf0:	2f f8       	sub	r8,-1
80005cf2:	fb 49 06 90 	st.w	sp[1680],r9
80005cf6:	87 02       	st.w	r3[0x0],r2
80005cf8:	87 10       	st.w	r3[0x4],r0
80005cfa:	fb 48 06 8c 	st.w	sp[1676],r8
80005cfe:	58 78       	cp.w	r8,7
80005d00:	e0 89 00 04 	brgt	80005d08 <_vfprintf_r+0x19b8>
80005d04:	2f 83       	sub	r3,-8
80005d06:	c0 b8       	rjmp	80005d1c <_vfprintf_r+0x19cc>
80005d08:	fa ca f9 78 	sub	r10,sp,-1672
80005d0c:	02 9b       	mov	r11,r1
80005d0e:	08 9c       	mov	r12,r4
80005d10:	fe b0 f3 12 	rcall	80004334 <__sprint_r>
80005d14:	e0 81 02 9d 	brne	8000624e <_vfprintf_r+0x1efe>
80005d18:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d1c:	21 06       	sub	r6,16
80005d1e:	c0 48       	rjmp	80005d26 <_vfprintf_r+0x19d6>
80005d20:	fe c2 be 84 	sub	r2,pc,-16764
80005d24:	31 00       	mov	r0,16
80005d26:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d2a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d2e:	fe ca be 92 	sub	r10,pc,-16750
80005d32:	59 06       	cp.w	r6,16
80005d34:	fe 99 ff dd 	brgt	80005cee <_vfprintf_r+0x199e>
80005d38:	0c 09       	add	r9,r6
80005d3a:	87 0a       	st.w	r3[0x0],r10
80005d3c:	fb 49 06 90 	st.w	sp[1680],r9
80005d40:	2f f8       	sub	r8,-1
80005d42:	87 16       	st.w	r3[0x4],r6
80005d44:	c5 39       	rjmp	80005fea <_vfprintf_r+0x1c9a>
80005d46:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005d4a:	58 0a       	cp.w	r10,0
80005d4c:	e0 89 00 92 	brgt	80005e70 <_vfprintf_r+0x1b20>
80005d50:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d54:	fe c9 be cc 	sub	r9,pc,-16692
80005d58:	2f f8       	sub	r8,-1
80005d5a:	87 09       	st.w	r3[0x0],r9
80005d5c:	fb 48 06 90 	st.w	sp[1680],r8
80005d60:	30 19       	mov	r9,1
80005d62:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d66:	87 19       	st.w	r3[0x4],r9
80005d68:	2f f8       	sub	r8,-1
80005d6a:	fb 48 06 8c 	st.w	sp[1676],r8
80005d6e:	58 78       	cp.w	r8,7
80005d70:	e0 89 00 04 	brgt	80005d78 <_vfprintf_r+0x1a28>
80005d74:	2f 83       	sub	r3,-8
80005d76:	c0 b8       	rjmp	80005d8c <_vfprintf_r+0x1a3c>
80005d78:	fa ca f9 78 	sub	r10,sp,-1672
80005d7c:	02 9b       	mov	r11,r1
80005d7e:	08 9c       	mov	r12,r4
80005d80:	fe b0 f2 da 	rcall	80004334 <__sprint_r>
80005d84:	e0 81 02 65 	brne	8000624e <_vfprintf_r+0x1efe>
80005d88:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d8c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005d90:	58 08       	cp.w	r8,0
80005d92:	c0 81       	brne	80005da2 <_vfprintf_r+0x1a52>
80005d94:	40 6a       	lddsp	r10,sp[0x18]
80005d96:	58 0a       	cp.w	r10,0
80005d98:	c0 51       	brne	80005da2 <_vfprintf_r+0x1a52>
80005d9a:	ed b5 00 00 	bld	r5,0x0
80005d9e:	e0 81 01 ed 	brne	80006178 <_vfprintf_r+0x1e28>
80005da2:	40 c9       	lddsp	r9,sp[0x30]
80005da4:	fa f8 06 90 	ld.w	r8,sp[1680]
80005da8:	2f f8       	sub	r8,-1
80005daa:	87 09       	st.w	r3[0x0],r9
80005dac:	fb 48 06 90 	st.w	sp[1680],r8
80005db0:	30 19       	mov	r9,1
80005db2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005db6:	87 19       	st.w	r3[0x4],r9
80005db8:	2f f8       	sub	r8,-1
80005dba:	fb 48 06 8c 	st.w	sp[1676],r8
80005dbe:	58 78       	cp.w	r8,7
80005dc0:	e0 89 00 04 	brgt	80005dc8 <_vfprintf_r+0x1a78>
80005dc4:	2f 83       	sub	r3,-8
80005dc6:	c0 b8       	rjmp	80005ddc <_vfprintf_r+0x1a8c>
80005dc8:	fa ca f9 78 	sub	r10,sp,-1672
80005dcc:	02 9b       	mov	r11,r1
80005dce:	08 9c       	mov	r12,r4
80005dd0:	fe b0 f2 b2 	rcall	80004334 <__sprint_r>
80005dd4:	e0 81 02 3d 	brne	8000624e <_vfprintf_r+0x1efe>
80005dd8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ddc:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005de0:	5c 32       	neg	r2
80005de2:	58 02       	cp.w	r2,0
80005de4:	e0 89 00 1d 	brgt	80005e1e <_vfprintf_r+0x1ace>
80005de8:	c3 d8       	rjmp	80005e62 <_vfprintf_r+0x1b12>
80005dea:	2f 09       	sub	r9,-16
80005dec:	2f f8       	sub	r8,-1
80005dee:	31 0e       	mov	lr,16
80005df0:	fb 49 06 90 	st.w	sp[1680],r9
80005df4:	87 00       	st.w	r3[0x0],r0
80005df6:	87 1e       	st.w	r3[0x4],lr
80005df8:	fb 48 06 8c 	st.w	sp[1676],r8
80005dfc:	58 78       	cp.w	r8,7
80005dfe:	e0 89 00 04 	brgt	80005e06 <_vfprintf_r+0x1ab6>
80005e02:	2f 83       	sub	r3,-8
80005e04:	c0 b8       	rjmp	80005e1a <_vfprintf_r+0x1aca>
80005e06:	fa ca f9 78 	sub	r10,sp,-1672
80005e0a:	02 9b       	mov	r11,r1
80005e0c:	08 9c       	mov	r12,r4
80005e0e:	fe b0 f2 93 	rcall	80004334 <__sprint_r>
80005e12:	e0 81 02 1e 	brne	8000624e <_vfprintf_r+0x1efe>
80005e16:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e1a:	21 02       	sub	r2,16
80005e1c:	c0 38       	rjmp	80005e22 <_vfprintf_r+0x1ad2>
80005e1e:	fe c0 bf 82 	sub	r0,pc,-16510
80005e22:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e26:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e2a:	fe ca bf 8e 	sub	r10,pc,-16498
80005e2e:	59 02       	cp.w	r2,16
80005e30:	fe 99 ff dd 	brgt	80005dea <_vfprintf_r+0x1a9a>
80005e34:	04 09       	add	r9,r2
80005e36:	2f f8       	sub	r8,-1
80005e38:	87 0a       	st.w	r3[0x0],r10
80005e3a:	fb 49 06 90 	st.w	sp[1680],r9
80005e3e:	87 12       	st.w	r3[0x4],r2
80005e40:	fb 48 06 8c 	st.w	sp[1676],r8
80005e44:	58 78       	cp.w	r8,7
80005e46:	e0 89 00 04 	brgt	80005e4e <_vfprintf_r+0x1afe>
80005e4a:	2f 83       	sub	r3,-8
80005e4c:	c0 b8       	rjmp	80005e62 <_vfprintf_r+0x1b12>
80005e4e:	fa ca f9 78 	sub	r10,sp,-1672
80005e52:	02 9b       	mov	r11,r1
80005e54:	08 9c       	mov	r12,r4
80005e56:	fe b0 f2 6f 	rcall	80004334 <__sprint_r>
80005e5a:	e0 81 01 fa 	brne	8000624e <_vfprintf_r+0x1efe>
80005e5e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e62:	40 6c       	lddsp	r12,sp[0x18]
80005e64:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e68:	87 06       	st.w	r3[0x0],r6
80005e6a:	87 1c       	st.w	r3[0x4],r12
80005e6c:	18 08       	add	r8,r12
80005e6e:	cb 98       	rjmp	80005fe0 <_vfprintf_r+0x1c90>
80005e70:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e74:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e78:	40 6b       	lddsp	r11,sp[0x18]
80005e7a:	16 3a       	cp.w	r10,r11
80005e7c:	c6 f5       	brlt	80005f5a <_vfprintf_r+0x1c0a>
80005e7e:	16 09       	add	r9,r11
80005e80:	2f f8       	sub	r8,-1
80005e82:	87 06       	st.w	r3[0x0],r6
80005e84:	fb 49 06 90 	st.w	sp[1680],r9
80005e88:	87 1b       	st.w	r3[0x4],r11
80005e8a:	fb 48 06 8c 	st.w	sp[1676],r8
80005e8e:	58 78       	cp.w	r8,7
80005e90:	e0 89 00 04 	brgt	80005e98 <_vfprintf_r+0x1b48>
80005e94:	2f 83       	sub	r3,-8
80005e96:	c0 b8       	rjmp	80005eac <_vfprintf_r+0x1b5c>
80005e98:	fa ca f9 78 	sub	r10,sp,-1672
80005e9c:	02 9b       	mov	r11,r1
80005e9e:	08 9c       	mov	r12,r4
80005ea0:	fe b0 f2 4a 	rcall	80004334 <__sprint_r>
80005ea4:	e0 81 01 d5 	brne	8000624e <_vfprintf_r+0x1efe>
80005ea8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005eac:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005eb0:	40 6a       	lddsp	r10,sp[0x18]
80005eb2:	14 16       	sub	r6,r10
80005eb4:	58 06       	cp.w	r6,0
80005eb6:	e0 89 00 1c 	brgt	80005eee <_vfprintf_r+0x1b9e>
80005eba:	c3 d8       	rjmp	80005f34 <_vfprintf_r+0x1be4>
80005ebc:	2f 09       	sub	r9,-16
80005ebe:	2f f8       	sub	r8,-1
80005ec0:	fb 49 06 90 	st.w	sp[1680],r9
80005ec4:	87 02       	st.w	r3[0x0],r2
80005ec6:	87 10       	st.w	r3[0x4],r0
80005ec8:	fb 48 06 8c 	st.w	sp[1676],r8
80005ecc:	58 78       	cp.w	r8,7
80005ece:	e0 89 00 04 	brgt	80005ed6 <_vfprintf_r+0x1b86>
80005ed2:	2f 83       	sub	r3,-8
80005ed4:	c0 b8       	rjmp	80005eea <_vfprintf_r+0x1b9a>
80005ed6:	fa ca f9 78 	sub	r10,sp,-1672
80005eda:	02 9b       	mov	r11,r1
80005edc:	08 9c       	mov	r12,r4
80005ede:	fe b0 f2 2b 	rcall	80004334 <__sprint_r>
80005ee2:	e0 81 01 b6 	brne	8000624e <_vfprintf_r+0x1efe>
80005ee6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005eea:	21 06       	sub	r6,16
80005eec:	c0 48       	rjmp	80005ef4 <_vfprintf_r+0x1ba4>
80005eee:	fe c2 c0 52 	sub	r2,pc,-16302
80005ef2:	31 00       	mov	r0,16
80005ef4:	fa f9 06 90 	ld.w	r9,sp[1680]
80005ef8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005efc:	fe ca c0 60 	sub	r10,pc,-16288
80005f00:	59 06       	cp.w	r6,16
80005f02:	fe 99 ff dd 	brgt	80005ebc <_vfprintf_r+0x1b6c>
80005f06:	0c 09       	add	r9,r6
80005f08:	2f f8       	sub	r8,-1
80005f0a:	87 0a       	st.w	r3[0x0],r10
80005f0c:	fb 49 06 90 	st.w	sp[1680],r9
80005f10:	87 16       	st.w	r3[0x4],r6
80005f12:	fb 48 06 8c 	st.w	sp[1676],r8
80005f16:	58 78       	cp.w	r8,7
80005f18:	e0 89 00 04 	brgt	80005f20 <_vfprintf_r+0x1bd0>
80005f1c:	2f 83       	sub	r3,-8
80005f1e:	c0 b8       	rjmp	80005f34 <_vfprintf_r+0x1be4>
80005f20:	fa ca f9 78 	sub	r10,sp,-1672
80005f24:	02 9b       	mov	r11,r1
80005f26:	08 9c       	mov	r12,r4
80005f28:	fe b0 f2 06 	rcall	80004334 <__sprint_r>
80005f2c:	e0 81 01 91 	brne	8000624e <_vfprintf_r+0x1efe>
80005f30:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f34:	ed b5 00 00 	bld	r5,0x0
80005f38:	e0 81 01 20 	brne	80006178 <_vfprintf_r+0x1e28>
80005f3c:	40 c9       	lddsp	r9,sp[0x30]
80005f3e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f42:	2f f8       	sub	r8,-1
80005f44:	87 09       	st.w	r3[0x0],r9
80005f46:	fb 48 06 90 	st.w	sp[1680],r8
80005f4a:	30 19       	mov	r9,1
80005f4c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f50:	87 19       	st.w	r3[0x4],r9
80005f52:	2f f8       	sub	r8,-1
80005f54:	fb 48 06 8c 	st.w	sp[1676],r8
80005f58:	c0 29       	rjmp	8000615c <_vfprintf_r+0x1e0c>
80005f5a:	14 09       	add	r9,r10
80005f5c:	2f f8       	sub	r8,-1
80005f5e:	fb 49 06 90 	st.w	sp[1680],r9
80005f62:	87 06       	st.w	r3[0x0],r6
80005f64:	87 1a       	st.w	r3[0x4],r10
80005f66:	fb 48 06 8c 	st.w	sp[1676],r8
80005f6a:	58 78       	cp.w	r8,7
80005f6c:	e0 89 00 04 	brgt	80005f74 <_vfprintf_r+0x1c24>
80005f70:	2f 83       	sub	r3,-8
80005f72:	c0 b8       	rjmp	80005f88 <_vfprintf_r+0x1c38>
80005f74:	fa ca f9 78 	sub	r10,sp,-1672
80005f78:	02 9b       	mov	r11,r1
80005f7a:	08 9c       	mov	r12,r4
80005f7c:	fe b0 f1 dc 	rcall	80004334 <__sprint_r>
80005f80:	e0 81 01 67 	brne	8000624e <_vfprintf_r+0x1efe>
80005f84:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f88:	40 c8       	lddsp	r8,sp[0x30]
80005f8a:	87 08       	st.w	r3[0x0],r8
80005f8c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f90:	2f f8       	sub	r8,-1
80005f92:	30 19       	mov	r9,1
80005f94:	fb 48 06 90 	st.w	sp[1680],r8
80005f98:	87 19       	st.w	r3[0x4],r9
80005f9a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f9e:	2f f8       	sub	r8,-1
80005fa0:	fb 48 06 8c 	st.w	sp[1676],r8
80005fa4:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005fa8:	58 78       	cp.w	r8,7
80005faa:	e0 89 00 04 	brgt	80005fb2 <_vfprintf_r+0x1c62>
80005fae:	2f 83       	sub	r3,-8
80005fb0:	c0 b8       	rjmp	80005fc6 <_vfprintf_r+0x1c76>
80005fb2:	fa ca f9 78 	sub	r10,sp,-1672
80005fb6:	02 9b       	mov	r11,r1
80005fb8:	08 9c       	mov	r12,r4
80005fba:	fe b0 f1 bd 	rcall	80004334 <__sprint_r>
80005fbe:	e0 81 01 48 	brne	8000624e <_vfprintf_r+0x1efe>
80005fc2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fc6:	04 06       	add	r6,r2
80005fc8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005fcc:	87 06       	st.w	r3[0x0],r6
80005fce:	fa f9 06 90 	ld.w	r9,sp[1680]
80005fd2:	40 66       	lddsp	r6,sp[0x18]
80005fd4:	40 6e       	lddsp	lr,sp[0x18]
80005fd6:	10 16       	sub	r6,r8
80005fd8:	f2 08 01 08 	sub	r8,r9,r8
80005fdc:	87 16       	st.w	r3[0x4],r6
80005fde:	1c 08       	add	r8,lr
80005fe0:	fb 48 06 90 	st.w	sp[1680],r8
80005fe4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fe8:	2f f8       	sub	r8,-1
80005fea:	fb 48 06 8c 	st.w	sp[1676],r8
80005fee:	cb 78       	rjmp	8000615c <_vfprintf_r+0x1e0c>
80005ff0:	40 6c       	lddsp	r12,sp[0x18]
80005ff2:	58 1c       	cp.w	r12,1
80005ff4:	e0 89 00 06 	brgt	80006000 <_vfprintf_r+0x1cb0>
80005ff8:	ed b5 00 00 	bld	r5,0x0
80005ffc:	e0 81 00 85 	brne	80006106 <_vfprintf_r+0x1db6>
80006000:	fa f8 06 90 	ld.w	r8,sp[1680]
80006004:	2f f8       	sub	r8,-1
80006006:	30 19       	mov	r9,1
80006008:	fb 48 06 90 	st.w	sp[1680],r8
8000600c:	87 06       	st.w	r3[0x0],r6
8000600e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006012:	87 19       	st.w	r3[0x4],r9
80006014:	2f f8       	sub	r8,-1
80006016:	fb 48 06 8c 	st.w	sp[1676],r8
8000601a:	58 78       	cp.w	r8,7
8000601c:	e0 89 00 04 	brgt	80006024 <_vfprintf_r+0x1cd4>
80006020:	2f 83       	sub	r3,-8
80006022:	c0 b8       	rjmp	80006038 <_vfprintf_r+0x1ce8>
80006024:	fa ca f9 78 	sub	r10,sp,-1672
80006028:	02 9b       	mov	r11,r1
8000602a:	08 9c       	mov	r12,r4
8000602c:	fe b0 f1 84 	rcall	80004334 <__sprint_r>
80006030:	e0 81 01 0f 	brne	8000624e <_vfprintf_r+0x1efe>
80006034:	fa c3 f9 e0 	sub	r3,sp,-1568
80006038:	fa f8 06 90 	ld.w	r8,sp[1680]
8000603c:	2f f8       	sub	r8,-1
8000603e:	40 cb       	lddsp	r11,sp[0x30]
80006040:	fb 48 06 90 	st.w	sp[1680],r8
80006044:	30 19       	mov	r9,1
80006046:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000604a:	87 0b       	st.w	r3[0x0],r11
8000604c:	2f f8       	sub	r8,-1
8000604e:	87 19       	st.w	r3[0x4],r9
80006050:	fb 48 06 8c 	st.w	sp[1676],r8
80006054:	58 78       	cp.w	r8,7
80006056:	e0 89 00 05 	brgt	80006060 <_vfprintf_r+0x1d10>
8000605a:	2f 83       	sub	r3,-8
8000605c:	c0 c8       	rjmp	80006074 <_vfprintf_r+0x1d24>
8000605e:	d7 03       	nop
80006060:	fa ca f9 78 	sub	r10,sp,-1672
80006064:	02 9b       	mov	r11,r1
80006066:	08 9c       	mov	r12,r4
80006068:	fe b0 f1 66 	rcall	80004334 <__sprint_r>
8000606c:	e0 81 00 f1 	brne	8000624e <_vfprintf_r+0x1efe>
80006070:	fa c3 f9 e0 	sub	r3,sp,-1568
80006074:	30 08       	mov	r8,0
80006076:	30 09       	mov	r9,0
80006078:	40 5b       	lddsp	r11,sp[0x14]
8000607a:	40 7a       	lddsp	r10,sp[0x1c]
8000607c:	e0 a0 15 d7 	rcall	80008c2a <__avr32_f64_cmp_eq>
80006080:	40 68       	lddsp	r8,sp[0x18]
80006082:	20 18       	sub	r8,1
80006084:	58 0c       	cp.w	r12,0
80006086:	c0 d1       	brne	800060a0 <_vfprintf_r+0x1d50>
80006088:	2f f6       	sub	r6,-1
8000608a:	87 18       	st.w	r3[0x4],r8
8000608c:	87 06       	st.w	r3[0x0],r6
8000608e:	fa f6 06 90 	ld.w	r6,sp[1680]
80006092:	10 06       	add	r6,r8
80006094:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006098:	fb 46 06 90 	st.w	sp[1680],r6
8000609c:	2f f8       	sub	r8,-1
8000609e:	c3 18       	rjmp	80006100 <_vfprintf_r+0x1db0>
800060a0:	10 96       	mov	r6,r8
800060a2:	58 08       	cp.w	r8,0
800060a4:	e0 89 00 1c 	brgt	800060dc <_vfprintf_r+0x1d8c>
800060a8:	c4 b8       	rjmp	8000613e <_vfprintf_r+0x1dee>
800060aa:	2f 09       	sub	r9,-16
800060ac:	2f f8       	sub	r8,-1
800060ae:	fb 49 06 90 	st.w	sp[1680],r9
800060b2:	87 02       	st.w	r3[0x0],r2
800060b4:	87 10       	st.w	r3[0x4],r0
800060b6:	fb 48 06 8c 	st.w	sp[1676],r8
800060ba:	58 78       	cp.w	r8,7
800060bc:	e0 89 00 04 	brgt	800060c4 <_vfprintf_r+0x1d74>
800060c0:	2f 83       	sub	r3,-8
800060c2:	c0 b8       	rjmp	800060d8 <_vfprintf_r+0x1d88>
800060c4:	fa ca f9 78 	sub	r10,sp,-1672
800060c8:	02 9b       	mov	r11,r1
800060ca:	08 9c       	mov	r12,r4
800060cc:	fe b0 f1 34 	rcall	80004334 <__sprint_r>
800060d0:	e0 81 00 bf 	brne	8000624e <_vfprintf_r+0x1efe>
800060d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800060d8:	21 06       	sub	r6,16
800060da:	c0 48       	rjmp	800060e2 <_vfprintf_r+0x1d92>
800060dc:	fe c2 c2 40 	sub	r2,pc,-15808
800060e0:	31 00       	mov	r0,16
800060e2:	fa f9 06 90 	ld.w	r9,sp[1680]
800060e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060ea:	fe ca c2 4e 	sub	r10,pc,-15794
800060ee:	59 06       	cp.w	r6,16
800060f0:	fe 99 ff dd 	brgt	800060aa <_vfprintf_r+0x1d5a>
800060f4:	0c 09       	add	r9,r6
800060f6:	87 0a       	st.w	r3[0x0],r10
800060f8:	fb 49 06 90 	st.w	sp[1680],r9
800060fc:	2f f8       	sub	r8,-1
800060fe:	87 16       	st.w	r3[0x4],r6
80006100:	fb 48 06 8c 	st.w	sp[1676],r8
80006104:	c0 e8       	rjmp	80006120 <_vfprintf_r+0x1dd0>
80006106:	fa f8 06 90 	ld.w	r8,sp[1680]
8000610a:	2f f8       	sub	r8,-1
8000610c:	30 19       	mov	r9,1
8000610e:	fb 48 06 90 	st.w	sp[1680],r8
80006112:	87 06       	st.w	r3[0x0],r6
80006114:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006118:	87 19       	st.w	r3[0x4],r9
8000611a:	2f f8       	sub	r8,-1
8000611c:	fb 48 06 8c 	st.w	sp[1676],r8
80006120:	58 78       	cp.w	r8,7
80006122:	e0 89 00 04 	brgt	8000612a <_vfprintf_r+0x1dda>
80006126:	2f 83       	sub	r3,-8
80006128:	c0 b8       	rjmp	8000613e <_vfprintf_r+0x1dee>
8000612a:	fa ca f9 78 	sub	r10,sp,-1672
8000612e:	02 9b       	mov	r11,r1
80006130:	08 9c       	mov	r12,r4
80006132:	fe b0 f1 01 	rcall	80004334 <__sprint_r>
80006136:	e0 81 00 8c 	brne	8000624e <_vfprintf_r+0x1efe>
8000613a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000613e:	40 ea       	lddsp	r10,sp[0x38]
80006140:	fa f8 06 90 	ld.w	r8,sp[1680]
80006144:	14 08       	add	r8,r10
80006146:	fa c9 f9 64 	sub	r9,sp,-1692
8000614a:	fb 48 06 90 	st.w	sp[1680],r8
8000614e:	87 1a       	st.w	r3[0x4],r10
80006150:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006154:	87 09       	st.w	r3[0x0],r9
80006156:	2f f8       	sub	r8,-1
80006158:	fb 48 06 8c 	st.w	sp[1676],r8
8000615c:	58 78       	cp.w	r8,7
8000615e:	e0 89 00 04 	brgt	80006166 <_vfprintf_r+0x1e16>
80006162:	2f 83       	sub	r3,-8
80006164:	c0 a8       	rjmp	80006178 <_vfprintf_r+0x1e28>
80006166:	fa ca f9 78 	sub	r10,sp,-1672
8000616a:	02 9b       	mov	r11,r1
8000616c:	08 9c       	mov	r12,r4
8000616e:	fe b0 f0 e3 	rcall	80004334 <__sprint_r>
80006172:	c6 e1       	brne	8000624e <_vfprintf_r+0x1efe>
80006174:	fa c3 f9 e0 	sub	r3,sp,-1568
80006178:	e2 15 00 04 	andl	r5,0x4,COH
8000617c:	c3 f0       	breq	800061fa <_vfprintf_r+0x1eaa>
8000617e:	40 86       	lddsp	r6,sp[0x20]
80006180:	40 39       	lddsp	r9,sp[0xc]
80006182:	12 16       	sub	r6,r9
80006184:	58 06       	cp.w	r6,0
80006186:	e0 89 00 1a 	brgt	800061ba <_vfprintf_r+0x1e6a>
8000618a:	c3 88       	rjmp	800061fa <_vfprintf_r+0x1eaa>
8000618c:	2f 09       	sub	r9,-16
8000618e:	2f f8       	sub	r8,-1
80006190:	fb 49 06 90 	st.w	sp[1680],r9
80006194:	87 05       	st.w	r3[0x0],r5
80006196:	87 12       	st.w	r3[0x4],r2
80006198:	fb 48 06 8c 	st.w	sp[1676],r8
8000619c:	58 78       	cp.w	r8,7
8000619e:	e0 89 00 04 	brgt	800061a6 <_vfprintf_r+0x1e56>
800061a2:	2f 83       	sub	r3,-8
800061a4:	c0 98       	rjmp	800061b6 <_vfprintf_r+0x1e66>
800061a6:	00 9a       	mov	r10,r0
800061a8:	02 9b       	mov	r11,r1
800061aa:	08 9c       	mov	r12,r4
800061ac:	fe b0 f0 c4 	rcall	80004334 <__sprint_r>
800061b0:	c4 f1       	brne	8000624e <_vfprintf_r+0x1efe>
800061b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800061b6:	21 06       	sub	r6,16
800061b8:	c0 68       	rjmp	800061c4 <_vfprintf_r+0x1e74>
800061ba:	fe c5 c3 2e 	sub	r5,pc,-15570
800061be:	31 02       	mov	r2,16
800061c0:	fa c0 f9 78 	sub	r0,sp,-1672
800061c4:	fa f9 06 90 	ld.w	r9,sp[1680]
800061c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061cc:	fe ca c3 40 	sub	r10,pc,-15552
800061d0:	59 06       	cp.w	r6,16
800061d2:	fe 99 ff dd 	brgt	8000618c <_vfprintf_r+0x1e3c>
800061d6:	0c 09       	add	r9,r6
800061d8:	2f f8       	sub	r8,-1
800061da:	87 0a       	st.w	r3[0x0],r10
800061dc:	87 16       	st.w	r3[0x4],r6
800061de:	fb 49 06 90 	st.w	sp[1680],r9
800061e2:	fb 48 06 8c 	st.w	sp[1676],r8
800061e6:	58 78       	cp.w	r8,7
800061e8:	e0 8a 00 09 	brle	800061fa <_vfprintf_r+0x1eaa>
800061ec:	fa ca f9 78 	sub	r10,sp,-1672
800061f0:	02 9b       	mov	r11,r1
800061f2:	08 9c       	mov	r12,r4
800061f4:	fe b0 f0 a0 	rcall	80004334 <__sprint_r>
800061f8:	c2 b1       	brne	8000624e <_vfprintf_r+0x1efe>
800061fa:	40 bc       	lddsp	r12,sp[0x2c]
800061fc:	40 36       	lddsp	r6,sp[0xc]
800061fe:	40 8e       	lddsp	lr,sp[0x20]
80006200:	ec 0e 0c 48 	max	r8,r6,lr
80006204:	10 0c       	add	r12,r8
80006206:	50 bc       	stdsp	sp[0x2c],r12
80006208:	fa f8 06 90 	ld.w	r8,sp[1680]
8000620c:	58 08       	cp.w	r8,0
8000620e:	c0 80       	breq	8000621e <_vfprintf_r+0x1ece>
80006210:	fa ca f9 78 	sub	r10,sp,-1672
80006214:	02 9b       	mov	r11,r1
80006216:	08 9c       	mov	r12,r4
80006218:	fe b0 f0 8e 	rcall	80004334 <__sprint_r>
8000621c:	c1 91       	brne	8000624e <_vfprintf_r+0x1efe>
8000621e:	30 0b       	mov	r11,0
80006220:	fa c3 f9 e0 	sub	r3,sp,-1568
80006224:	fb 4b 06 8c 	st.w	sp[1676],r11
80006228:	fe 9f f1 22 	bral	8000446c <_vfprintf_r+0x11c>
8000622c:	08 95       	mov	r5,r4
8000622e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006232:	58 08       	cp.w	r8,0
80006234:	c0 80       	breq	80006244 <_vfprintf_r+0x1ef4>
80006236:	08 9c       	mov	r12,r4
80006238:	fa ca f9 78 	sub	r10,sp,-1672
8000623c:	02 9b       	mov	r11,r1
8000623e:	fe b0 f0 7b 	rcall	80004334 <__sprint_r>
80006242:	c0 61       	brne	8000624e <_vfprintf_r+0x1efe>
80006244:	30 08       	mov	r8,0
80006246:	fb 48 06 8c 	st.w	sp[1676],r8
8000624a:	c0 28       	rjmp	8000624e <_vfprintf_r+0x1efe>
8000624c:	40 41       	lddsp	r1,sp[0x10]
8000624e:	82 68       	ld.sh	r8,r1[0xc]
80006250:	ed b8 00 06 	bld	r8,0x6
80006254:	c0 31       	brne	8000625a <_vfprintf_r+0x1f0a>
80006256:	3f fa       	mov	r10,-1
80006258:	50 ba       	stdsp	sp[0x2c],r10
8000625a:	40 bc       	lddsp	r12,sp[0x2c]
8000625c:	fe 3d f9 44 	sub	sp,-1724
80006260:	d8 32       	popm	r0-r7,pc
80006262:	d7 03       	nop

80006264 <__swsetup_r>:
80006264:	d4 21       	pushm	r4-r7,lr
80006266:	e0 68 01 18 	mov	r8,280
8000626a:	18 96       	mov	r6,r12
8000626c:	16 97       	mov	r7,r11
8000626e:	70 0c       	ld.w	r12,r8[0x0]
80006270:	58 0c       	cp.w	r12,0
80006272:	c0 60       	breq	8000627e <__swsetup_r+0x1a>
80006274:	78 68       	ld.w	r8,r12[0x18]
80006276:	58 08       	cp.w	r8,0
80006278:	c0 31       	brne	8000627e <__swsetup_r+0x1a>
8000627a:	e0 a0 07 b9 	rcall	800071ec <__sinit>
8000627e:	fe c8 c2 c2 	sub	r8,pc,-15678
80006282:	10 37       	cp.w	r7,r8
80006284:	c0 61       	brne	80006290 <__swsetup_r+0x2c>
80006286:	e0 68 01 18 	mov	r8,280
8000628a:	70 08       	ld.w	r8,r8[0x0]
8000628c:	70 07       	ld.w	r7,r8[0x0]
8000628e:	c1 28       	rjmp	800062b2 <__swsetup_r+0x4e>
80006290:	fe c8 c2 b4 	sub	r8,pc,-15692
80006294:	10 37       	cp.w	r7,r8
80006296:	c0 61       	brne	800062a2 <__swsetup_r+0x3e>
80006298:	e0 68 01 18 	mov	r8,280
8000629c:	70 08       	ld.w	r8,r8[0x0]
8000629e:	70 17       	ld.w	r7,r8[0x4]
800062a0:	c0 98       	rjmp	800062b2 <__swsetup_r+0x4e>
800062a2:	fe c8 c2 a6 	sub	r8,pc,-15706
800062a6:	10 37       	cp.w	r7,r8
800062a8:	c0 51       	brne	800062b2 <__swsetup_r+0x4e>
800062aa:	e0 68 01 18 	mov	r8,280
800062ae:	70 08       	ld.w	r8,r8[0x0]
800062b0:	70 27       	ld.w	r7,r8[0x8]
800062b2:	8e 68       	ld.sh	r8,r7[0xc]
800062b4:	ed b8 00 03 	bld	r8,0x3
800062b8:	c1 e0       	breq	800062f4 <__swsetup_r+0x90>
800062ba:	ed b8 00 04 	bld	r8,0x4
800062be:	c3 e1       	brne	8000633a <__swsetup_r+0xd6>
800062c0:	ed b8 00 02 	bld	r8,0x2
800062c4:	c1 51       	brne	800062ee <__swsetup_r+0x8a>
800062c6:	6e db       	ld.w	r11,r7[0x34]
800062c8:	58 0b       	cp.w	r11,0
800062ca:	c0 a0       	breq	800062de <__swsetup_r+0x7a>
800062cc:	ee c8 ff bc 	sub	r8,r7,-68
800062d0:	10 3b       	cp.w	r11,r8
800062d2:	c0 40       	breq	800062da <__swsetup_r+0x76>
800062d4:	0c 9c       	mov	r12,r6
800062d6:	e0 a0 08 25 	rcall	80007320 <_free_r>
800062da:	30 08       	mov	r8,0
800062dc:	8f d8       	st.w	r7[0x34],r8
800062de:	8e 68       	ld.sh	r8,r7[0xc]
800062e0:	e0 18 ff db 	andl	r8,0xffdb
800062e4:	ae 68       	st.h	r7[0xc],r8
800062e6:	30 08       	mov	r8,0
800062e8:	8f 18       	st.w	r7[0x4],r8
800062ea:	6e 48       	ld.w	r8,r7[0x10]
800062ec:	8f 08       	st.w	r7[0x0],r8
800062ee:	8e 68       	ld.sh	r8,r7[0xc]
800062f0:	a3 b8       	sbr	r8,0x3
800062f2:	ae 68       	st.h	r7[0xc],r8
800062f4:	6e 48       	ld.w	r8,r7[0x10]
800062f6:	58 08       	cp.w	r8,0
800062f8:	c0 b1       	brne	8000630e <__swsetup_r+0xaa>
800062fa:	8e 68       	ld.sh	r8,r7[0xc]
800062fc:	e2 18 02 80 	andl	r8,0x280,COH
80006300:	e0 48 02 00 	cp.w	r8,512
80006304:	c0 50       	breq	8000630e <__swsetup_r+0xaa>
80006306:	0c 9c       	mov	r12,r6
80006308:	0e 9b       	mov	r11,r7
8000630a:	e0 a0 0a 4b 	rcall	800077a0 <__smakebuf_r>
8000630e:	8e 69       	ld.sh	r9,r7[0xc]
80006310:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006314:	c0 70       	breq	80006322 <__swsetup_r+0xbe>
80006316:	30 08       	mov	r8,0
80006318:	8f 28       	st.w	r7[0x8],r8
8000631a:	6e 58       	ld.w	r8,r7[0x14]
8000631c:	5c 38       	neg	r8
8000631e:	8f 68       	st.w	r7[0x18],r8
80006320:	c0 68       	rjmp	8000632c <__swsetup_r+0xc8>
80006322:	ed b9 00 01 	bld	r9,0x1
80006326:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000632a:	8f 28       	st.w	r7[0x8],r8
8000632c:	6e 48       	ld.w	r8,r7[0x10]
8000632e:	58 08       	cp.w	r8,0
80006330:	c0 61       	brne	8000633c <__swsetup_r+0xd8>
80006332:	8e 68       	ld.sh	r8,r7[0xc]
80006334:	ed b8 00 07 	bld	r8,0x7
80006338:	c0 21       	brne	8000633c <__swsetup_r+0xd8>
8000633a:	dc 2a       	popm	r4-r7,pc,r12=-1
8000633c:	d8 2a       	popm	r4-r7,pc,r12=0
8000633e:	d7 03       	nop

80006340 <quorem>:
80006340:	d4 31       	pushm	r0-r7,lr
80006342:	20 2d       	sub	sp,8
80006344:	18 97       	mov	r7,r12
80006346:	78 48       	ld.w	r8,r12[0x10]
80006348:	76 46       	ld.w	r6,r11[0x10]
8000634a:	0c 38       	cp.w	r8,r6
8000634c:	c0 34       	brge	80006352 <quorem+0x12>
8000634e:	30 0c       	mov	r12,0
80006350:	c8 58       	rjmp	8000645a <quorem+0x11a>
80006352:	ec c2 ff fc 	sub	r2,r6,-4
80006356:	f6 c3 ff ec 	sub	r3,r11,-20
8000635a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000635e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006362:	2f f9       	sub	r9,-1
80006364:	20 16       	sub	r6,1
80006366:	f8 09 0d 08 	divu	r8,r12,r9
8000636a:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000636e:	ee c4 ff ec 	sub	r4,r7,-20
80006372:	10 95       	mov	r5,r8
80006374:	58 08       	cp.w	r8,0
80006376:	c4 10       	breq	800063f8 <quorem+0xb8>
80006378:	30 09       	mov	r9,0
8000637a:	06 9a       	mov	r10,r3
8000637c:	08 98       	mov	r8,r4
8000637e:	12 91       	mov	r1,r9
80006380:	50 0b       	stdsp	sp[0x0],r11
80006382:	70 0e       	ld.w	lr,r8[0x0]
80006384:	b1 8e       	lsr	lr,0x10
80006386:	50 1e       	stdsp	sp[0x4],lr
80006388:	15 0e       	ld.w	lr,r10++
8000638a:	fc 00 16 10 	lsr	r0,lr,0x10
8000638e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80006392:	ea 0e 03 41 	mac	r1,r5,lr
80006396:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000639a:	b1 81       	lsr	r1,0x10
8000639c:	40 1b       	lddsp	r11,sp[0x4]
8000639e:	ea 00 02 40 	mul	r0,r5,r0
800063a2:	e2 00 00 00 	add	r0,r1,r0
800063a6:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800063aa:	02 1b       	sub	r11,r1
800063ac:	50 1b       	stdsp	sp[0x4],r11
800063ae:	70 0b       	ld.w	r11,r8[0x0]
800063b0:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800063b4:	02 09       	add	r9,r1
800063b6:	f2 0e 01 0e 	sub	lr,r9,lr
800063ba:	b0 1e       	st.h	r8[0x2],lr
800063bc:	fc 09 14 10 	asr	r9,lr,0x10
800063c0:	40 1e       	lddsp	lr,sp[0x4]
800063c2:	fc 09 00 09 	add	r9,lr,r9
800063c6:	b0 09       	st.h	r8[0x0],r9
800063c8:	e0 01 16 10 	lsr	r1,r0,0x10
800063cc:	2f c8       	sub	r8,-4
800063ce:	b1 49       	asr	r9,0x10
800063d0:	04 3a       	cp.w	r10,r2
800063d2:	fe 98 ff d8 	brls	80006382 <quorem+0x42>
800063d6:	40 0b       	lddsp	r11,sp[0x0]
800063d8:	58 0c       	cp.w	r12,0
800063da:	c0 f1       	brne	800063f8 <quorem+0xb8>
800063dc:	ec c8 ff fb 	sub	r8,r6,-5
800063e0:	ee 08 00 28 	add	r8,r7,r8<<0x2
800063e4:	c0 28       	rjmp	800063e8 <quorem+0xa8>
800063e6:	20 16       	sub	r6,1
800063e8:	20 48       	sub	r8,4
800063ea:	08 38       	cp.w	r8,r4
800063ec:	e0 88 00 05 	brls	800063f6 <quorem+0xb6>
800063f0:	70 09       	ld.w	r9,r8[0x0]
800063f2:	58 09       	cp.w	r9,0
800063f4:	cf 90       	breq	800063e6 <quorem+0xa6>
800063f6:	8f 46       	st.w	r7[0x10],r6
800063f8:	0e 9c       	mov	r12,r7
800063fa:	e0 a0 0c f4 	rcall	80007de2 <__mcmp>
800063fe:	c2 d5       	brlt	80006458 <quorem+0x118>
80006400:	2f f5       	sub	r5,-1
80006402:	08 98       	mov	r8,r4
80006404:	30 09       	mov	r9,0
80006406:	07 0b       	ld.w	r11,r3++
80006408:	f6 0a 16 10 	lsr	r10,r11,0x10
8000640c:	70 0c       	ld.w	r12,r8[0x0]
8000640e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80006412:	f8 0e 16 10 	lsr	lr,r12,0x10
80006416:	14 1e       	sub	lr,r10
80006418:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000641c:	16 1a       	sub	r10,r11
8000641e:	12 0a       	add	r10,r9
80006420:	b0 1a       	st.h	r8[0x2],r10
80006422:	b1 4a       	asr	r10,0x10
80006424:	fc 0a 00 09 	add	r9,lr,r10
80006428:	b0 09       	st.h	r8[0x0],r9
8000642a:	2f c8       	sub	r8,-4
8000642c:	b1 49       	asr	r9,0x10
8000642e:	04 33       	cp.w	r3,r2
80006430:	fe 98 ff eb 	brls	80006406 <quorem+0xc6>
80006434:	ec c8 ff fb 	sub	r8,r6,-5
80006438:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000643c:	58 09       	cp.w	r9,0
8000643e:	c0 d1       	brne	80006458 <quorem+0x118>
80006440:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006444:	c0 28       	rjmp	80006448 <quorem+0x108>
80006446:	20 16       	sub	r6,1
80006448:	20 48       	sub	r8,4
8000644a:	08 38       	cp.w	r8,r4
8000644c:	e0 88 00 05 	brls	80006456 <quorem+0x116>
80006450:	70 09       	ld.w	r9,r8[0x0]
80006452:	58 09       	cp.w	r9,0
80006454:	cf 90       	breq	80006446 <quorem+0x106>
80006456:	8f 46       	st.w	r7[0x10],r6
80006458:	0a 9c       	mov	r12,r5
8000645a:	2f ed       	sub	sp,-8
8000645c:	d8 32       	popm	r0-r7,pc
8000645e:	d7 03       	nop

80006460 <_dtoa_r>:
80006460:	d4 31       	pushm	r0-r7,lr
80006462:	21 ad       	sub	sp,104
80006464:	fa c4 ff 74 	sub	r4,sp,-140
80006468:	18 97       	mov	r7,r12
8000646a:	16 95       	mov	r5,r11
8000646c:	68 2c       	ld.w	r12,r4[0x8]
8000646e:	50 c9       	stdsp	sp[0x30],r9
80006470:	68 16       	ld.w	r6,r4[0x4]
80006472:	68 09       	ld.w	r9,r4[0x0]
80006474:	50 e8       	stdsp	sp[0x38],r8
80006476:	14 94       	mov	r4,r10
80006478:	51 2c       	stdsp	sp[0x48],r12
8000647a:	fa e5 00 08 	st.d	sp[8],r4
8000647e:	51 59       	stdsp	sp[0x54],r9
80006480:	6e 95       	ld.w	r5,r7[0x24]
80006482:	58 05       	cp.w	r5,0
80006484:	c0 91       	brne	80006496 <_dtoa_r+0x36>
80006486:	31 0c       	mov	r12,16
80006488:	e0 a0 09 ea 	rcall	8000785c <malloc>
8000648c:	99 35       	st.w	r12[0xc],r5
8000648e:	8f 9c       	st.w	r7[0x24],r12
80006490:	99 15       	st.w	r12[0x4],r5
80006492:	99 25       	st.w	r12[0x8],r5
80006494:	99 05       	st.w	r12[0x0],r5
80006496:	6e 99       	ld.w	r9,r7[0x24]
80006498:	72 08       	ld.w	r8,r9[0x0]
8000649a:	58 08       	cp.w	r8,0
8000649c:	c0 f0       	breq	800064ba <_dtoa_r+0x5a>
8000649e:	72 1a       	ld.w	r10,r9[0x4]
800064a0:	91 1a       	st.w	r8[0x4],r10
800064a2:	30 1a       	mov	r10,1
800064a4:	72 19       	ld.w	r9,r9[0x4]
800064a6:	f4 09 09 49 	lsl	r9,r10,r9
800064aa:	10 9b       	mov	r11,r8
800064ac:	91 29       	st.w	r8[0x8],r9
800064ae:	0e 9c       	mov	r12,r7
800064b0:	e0 a0 0c b2 	rcall	80007e14 <_Bfree>
800064b4:	6e 98       	ld.w	r8,r7[0x24]
800064b6:	30 09       	mov	r9,0
800064b8:	91 09       	st.w	r8[0x0],r9
800064ba:	40 28       	lddsp	r8,sp[0x8]
800064bc:	10 94       	mov	r4,r8
800064be:	58 08       	cp.w	r8,0
800064c0:	c0 64       	brge	800064cc <_dtoa_r+0x6c>
800064c2:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800064c6:	50 28       	stdsp	sp[0x8],r8
800064c8:	30 18       	mov	r8,1
800064ca:	c0 28       	rjmp	800064ce <_dtoa_r+0x6e>
800064cc:	30 08       	mov	r8,0
800064ce:	8d 08       	st.w	r6[0x0],r8
800064d0:	fc 1c 7f f0 	movh	r12,0x7ff0
800064d4:	40 26       	lddsp	r6,sp[0x8]
800064d6:	0c 98       	mov	r8,r6
800064d8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800064dc:	18 38       	cp.w	r8,r12
800064de:	c2 01       	brne	8000651e <_dtoa_r+0xbe>
800064e0:	e0 68 27 0f 	mov	r8,9999
800064e4:	41 5b       	lddsp	r11,sp[0x54]
800064e6:	97 08       	st.w	r11[0x0],r8
800064e8:	40 3a       	lddsp	r10,sp[0xc]
800064ea:	58 0a       	cp.w	r10,0
800064ec:	c0 71       	brne	800064fa <_dtoa_r+0x9a>
800064ee:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800064f2:	c0 41       	brne	800064fa <_dtoa_r+0x9a>
800064f4:	fe cc c5 48 	sub	r12,pc,-15032
800064f8:	c0 38       	rjmp	800064fe <_dtoa_r+0x9e>
800064fa:	fe cc c5 42 	sub	r12,pc,-15038
800064fe:	41 29       	lddsp	r9,sp[0x48]
80006500:	58 09       	cp.w	r9,0
80006502:	e0 80 05 9a 	breq	80007036 <_dtoa_r+0xbd6>
80006506:	f8 c8 ff fd 	sub	r8,r12,-3
8000650a:	f8 c9 ff f8 	sub	r9,r12,-8
8000650e:	11 8b       	ld.ub	r11,r8[0x0]
80006510:	30 0a       	mov	r10,0
80006512:	41 25       	lddsp	r5,sp[0x48]
80006514:	f4 0b 18 00 	cp.b	r11,r10
80006518:	f2 08 17 10 	movne	r8,r9
8000651c:	c1 68       	rjmp	80006548 <_dtoa_r+0xe8>
8000651e:	fa ea 00 08 	ld.d	r10,sp[8]
80006522:	30 08       	mov	r8,0
80006524:	fa eb 00 3c 	st.d	sp[60],r10
80006528:	30 09       	mov	r9,0
8000652a:	e0 a0 13 80 	rcall	80008c2a <__avr32_f64_cmp_eq>
8000652e:	c1 00       	breq	8000654e <_dtoa_r+0xee>
80006530:	30 18       	mov	r8,1
80006532:	41 5a       	lddsp	r10,sp[0x54]
80006534:	95 08       	st.w	r10[0x0],r8
80006536:	fe cc c6 ae 	sub	r12,pc,-14674
8000653a:	41 29       	lddsp	r9,sp[0x48]
8000653c:	f8 08 00 08 	add	r8,r12,r8
80006540:	58 09       	cp.w	r9,0
80006542:	e0 80 05 7a 	breq	80007036 <_dtoa_r+0xbd6>
80006546:	12 95       	mov	r5,r9
80006548:	8b 08       	st.w	r5[0x0],r8
8000654a:	e0 8f 05 76 	bral	80007036 <_dtoa_r+0xbd6>
8000654e:	fa c8 ff 9c 	sub	r8,sp,-100
80006552:	fa c9 ff a0 	sub	r9,sp,-96
80006556:	fa ea 00 3c 	ld.d	r10,sp[60]
8000655a:	0e 9c       	mov	r12,r7
8000655c:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006560:	e0 a0 0c ac 	rcall	80007eb8 <__d2b>
80006564:	18 93       	mov	r3,r12
80006566:	58 05       	cp.w	r5,0
80006568:	c0 d0       	breq	80006582 <_dtoa_r+0x122>
8000656a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000656e:	30 04       	mov	r4,0
80006570:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006574:	ea c5 03 ff 	sub	r5,r5,1023
80006578:	10 9b       	mov	r11,r8
8000657a:	51 74       	stdsp	sp[0x5c],r4
8000657c:	ea 1b 3f f0 	orh	r11,0x3ff0
80006580:	c2 58       	rjmp	800065ca <_dtoa_r+0x16a>
80006582:	41 88       	lddsp	r8,sp[0x60]
80006584:	41 9c       	lddsp	r12,sp[0x64]
80006586:	10 0c       	add	r12,r8
80006588:	f8 c5 fb ce 	sub	r5,r12,-1074
8000658c:	e0 45 00 20 	cp.w	r5,32
80006590:	e0 8a 00 0e 	brle	800065ac <_dtoa_r+0x14c>
80006594:	f8 cc fb ee 	sub	r12,r12,-1042
80006598:	40 3b       	lddsp	r11,sp[0xc]
8000659a:	ea 08 11 40 	rsub	r8,r5,64
8000659e:	f6 0c 0a 4c 	lsr	r12,r11,r12
800065a2:	ec 08 09 46 	lsl	r6,r6,r8
800065a6:	0c 4c       	or	r12,r6
800065a8:	c0 78       	rjmp	800065b6 <_dtoa_r+0x156>
800065aa:	d7 03       	nop
800065ac:	ea 0c 11 20 	rsub	r12,r5,32
800065b0:	40 3a       	lddsp	r10,sp[0xc]
800065b2:	f4 0c 09 4c 	lsl	r12,r10,r12
800065b6:	fe b0 ea 55 	rcall	80003a60 <__avr32_u32_to_f64>
800065ba:	fc 18 fe 10 	movh	r8,0xfe10
800065be:	30 19       	mov	r9,1
800065c0:	ea c5 04 33 	sub	r5,r5,1075
800065c4:	f0 0b 00 0b 	add	r11,r8,r11
800065c8:	51 79       	stdsp	sp[0x5c],r9
800065ca:	30 08       	mov	r8,0
800065cc:	fc 19 3f f8 	movh	r9,0x3ff8
800065d0:	e0 a0 11 c2 	rcall	80008954 <__avr32_f64_sub>
800065d4:	e0 68 43 61 	mov	r8,17249
800065d8:	ea 18 63 6f 	orh	r8,0x636f
800065dc:	e0 69 87 a7 	mov	r9,34727
800065e0:	ea 19 3f d2 	orh	r9,0x3fd2
800065e4:	fe b0 e9 54 	rcall	8000388c <__avr32_f64_mul>
800065e8:	e0 68 c8 b3 	mov	r8,51379
800065ec:	ea 18 8b 60 	orh	r8,0x8b60
800065f0:	e0 69 8a 28 	mov	r9,35368
800065f4:	ea 19 3f c6 	orh	r9,0x3fc6
800065f8:	e0 a0 12 7c 	rcall	80008af0 <__avr32_f64_add>
800065fc:	0a 9c       	mov	r12,r5
800065fe:	14 90       	mov	r0,r10
80006600:	16 91       	mov	r1,r11
80006602:	fe b0 ea 33 	rcall	80003a68 <__avr32_s32_to_f64>
80006606:	e0 68 79 fb 	mov	r8,31227
8000660a:	ea 18 50 9f 	orh	r8,0x509f
8000660e:	e0 69 44 13 	mov	r9,17427
80006612:	ea 19 3f d3 	orh	r9,0x3fd3
80006616:	fe b0 e9 3b 	rcall	8000388c <__avr32_f64_mul>
8000661a:	14 98       	mov	r8,r10
8000661c:	16 99       	mov	r9,r11
8000661e:	00 9a       	mov	r10,r0
80006620:	02 9b       	mov	r11,r1
80006622:	e0 a0 12 67 	rcall	80008af0 <__avr32_f64_add>
80006626:	14 90       	mov	r0,r10
80006628:	16 91       	mov	r1,r11
8000662a:	e0 a0 12 ed 	rcall	80008c04 <__avr32_f64_to_s32>
8000662e:	30 08       	mov	r8,0
80006630:	18 96       	mov	r6,r12
80006632:	30 09       	mov	r9,0
80006634:	00 9a       	mov	r10,r0
80006636:	02 9b       	mov	r11,r1
80006638:	e0 a0 13 40 	rcall	80008cb8 <__avr32_f64_cmp_lt>
8000663c:	c0 c0       	breq	80006654 <_dtoa_r+0x1f4>
8000663e:	0c 9c       	mov	r12,r6
80006640:	fe b0 ea 14 	rcall	80003a68 <__avr32_s32_to_f64>
80006644:	14 98       	mov	r8,r10
80006646:	16 99       	mov	r9,r11
80006648:	00 9a       	mov	r10,r0
8000664a:	02 9b       	mov	r11,r1
8000664c:	e0 a0 12 ef 	rcall	80008c2a <__avr32_f64_cmp_eq>
80006650:	f7 b6 00 01 	subeq	r6,1
80006654:	59 66       	cp.w	r6,22
80006656:	e0 88 00 05 	brls	80006660 <_dtoa_r+0x200>
8000665a:	30 18       	mov	r8,1
8000665c:	51 48       	stdsp	sp[0x50],r8
8000665e:	c1 38       	rjmp	80006684 <_dtoa_r+0x224>
80006660:	fe c8 c5 f0 	sub	r8,pc,-14864
80006664:	fa ea 00 3c 	ld.d	r10,sp[60]
80006668:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000666c:	e0 a0 13 26 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80006670:	f9 b4 00 00 	moveq	r4,0
80006674:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006678:	f7 b6 01 01 	subne	r6,1
8000667c:	f9 bc 01 00 	movne	r12,0
80006680:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006684:	41 90       	lddsp	r0,sp[0x64]
80006686:	20 10       	sub	r0,1
80006688:	0a 10       	sub	r0,r5
8000668a:	c0 46       	brmi	80006692 <_dtoa_r+0x232>
8000668c:	50 40       	stdsp	sp[0x10],r0
8000668e:	30 00       	mov	r0,0
80006690:	c0 48       	rjmp	80006698 <_dtoa_r+0x238>
80006692:	30 0b       	mov	r11,0
80006694:	5c 30       	neg	r0
80006696:	50 4b       	stdsp	sp[0x10],r11
80006698:	ec 02 11 00 	rsub	r2,r6,0
8000669c:	58 06       	cp.w	r6,0
8000669e:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800066a2:	f5 d6 e4 0a 	addge	r10,r10,r6
800066a6:	fb fa 4a 04 	st.wge	sp[0x10],r10
800066aa:	fb f6 4a 11 	st.wge	sp[0x44],r6
800066ae:	f9 b2 04 00 	movge	r2,0
800066b2:	e1 d6 e5 10 	sublt	r0,r0,r6
800066b6:	f9 b9 05 00 	movlt	r9,0
800066ba:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800066be:	40 c8       	lddsp	r8,sp[0x30]
800066c0:	58 98       	cp.w	r8,9
800066c2:	e0 8b 00 20 	brhi	80006702 <_dtoa_r+0x2a2>
800066c6:	58 58       	cp.w	r8,5
800066c8:	f9 b4 0a 01 	movle	r4,1
800066cc:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800066d0:	f7 b5 09 04 	subgt	r5,4
800066d4:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800066d8:	f9 b4 09 00 	movgt	r4,0
800066dc:	40 cc       	lddsp	r12,sp[0x30]
800066de:	58 3c       	cp.w	r12,3
800066e0:	c2 d0       	breq	8000673a <_dtoa_r+0x2da>
800066e2:	e0 89 00 05 	brgt	800066ec <_dtoa_r+0x28c>
800066e6:	58 2c       	cp.w	r12,2
800066e8:	c1 01       	brne	80006708 <_dtoa_r+0x2a8>
800066ea:	c1 88       	rjmp	8000671a <_dtoa_r+0x2ba>
800066ec:	40 cb       	lddsp	r11,sp[0x30]
800066ee:	58 4b       	cp.w	r11,4
800066f0:	c0 60       	breq	800066fc <_dtoa_r+0x29c>
800066f2:	58 5b       	cp.w	r11,5
800066f4:	c0 a1       	brne	80006708 <_dtoa_r+0x2a8>
800066f6:	30 1a       	mov	r10,1
800066f8:	50 da       	stdsp	sp[0x34],r10
800066fa:	c2 28       	rjmp	8000673e <_dtoa_r+0x2de>
800066fc:	30 19       	mov	r9,1
800066fe:	50 d9       	stdsp	sp[0x34],r9
80006700:	c0 f8       	rjmp	8000671e <_dtoa_r+0x2be>
80006702:	30 08       	mov	r8,0
80006704:	30 14       	mov	r4,1
80006706:	50 c8       	stdsp	sp[0x30],r8
80006708:	3f f5       	mov	r5,-1
8000670a:	30 1c       	mov	r12,1
8000670c:	30 0b       	mov	r11,0
8000670e:	50 95       	stdsp	sp[0x24],r5
80006710:	50 dc       	stdsp	sp[0x34],r12
80006712:	0a 91       	mov	r1,r5
80006714:	31 28       	mov	r8,18
80006716:	50 eb       	stdsp	sp[0x38],r11
80006718:	c2 08       	rjmp	80006758 <_dtoa_r+0x2f8>
8000671a:	30 0a       	mov	r10,0
8000671c:	50 da       	stdsp	sp[0x34],r10
8000671e:	40 e9       	lddsp	r9,sp[0x38]
80006720:	58 09       	cp.w	r9,0
80006722:	e0 89 00 07 	brgt	80006730 <_dtoa_r+0x2d0>
80006726:	30 18       	mov	r8,1
80006728:	50 98       	stdsp	sp[0x24],r8
8000672a:	10 91       	mov	r1,r8
8000672c:	50 e8       	stdsp	sp[0x38],r8
8000672e:	c1 58       	rjmp	80006758 <_dtoa_r+0x2f8>
80006730:	40 e5       	lddsp	r5,sp[0x38]
80006732:	50 95       	stdsp	sp[0x24],r5
80006734:	0a 91       	mov	r1,r5
80006736:	0a 98       	mov	r8,r5
80006738:	c1 08       	rjmp	80006758 <_dtoa_r+0x2f8>
8000673a:	30 0c       	mov	r12,0
8000673c:	50 dc       	stdsp	sp[0x34],r12
8000673e:	40 eb       	lddsp	r11,sp[0x38]
80006740:	ec 0b 00 0b 	add	r11,r6,r11
80006744:	50 9b       	stdsp	sp[0x24],r11
80006746:	16 98       	mov	r8,r11
80006748:	2f f8       	sub	r8,-1
8000674a:	58 08       	cp.w	r8,0
8000674c:	e0 89 00 05 	brgt	80006756 <_dtoa_r+0x2f6>
80006750:	10 91       	mov	r1,r8
80006752:	30 18       	mov	r8,1
80006754:	c0 28       	rjmp	80006758 <_dtoa_r+0x2f8>
80006756:	10 91       	mov	r1,r8
80006758:	30 09       	mov	r9,0
8000675a:	6e 9a       	ld.w	r10,r7[0x24]
8000675c:	95 19       	st.w	r10[0x4],r9
8000675e:	30 49       	mov	r9,4
80006760:	c0 68       	rjmp	8000676c <_dtoa_r+0x30c>
80006762:	d7 03       	nop
80006764:	6a 1a       	ld.w	r10,r5[0x4]
80006766:	a1 79       	lsl	r9,0x1
80006768:	2f fa       	sub	r10,-1
8000676a:	8b 1a       	st.w	r5[0x4],r10
8000676c:	6e 95       	ld.w	r5,r7[0x24]
8000676e:	f2 ca ff ec 	sub	r10,r9,-20
80006772:	10 3a       	cp.w	r10,r8
80006774:	fe 98 ff f8 	brls	80006764 <_dtoa_r+0x304>
80006778:	6a 1b       	ld.w	r11,r5[0x4]
8000677a:	0e 9c       	mov	r12,r7
8000677c:	e0 a0 0b 66 	rcall	80007e48 <_Balloc>
80006780:	58 e1       	cp.w	r1,14
80006782:	5f 88       	srls	r8
80006784:	8b 0c       	st.w	r5[0x0],r12
80006786:	f1 e4 00 04 	and	r4,r8,r4
8000678a:	6e 98       	ld.w	r8,r7[0x24]
8000678c:	70 08       	ld.w	r8,r8[0x0]
8000678e:	50 88       	stdsp	sp[0x20],r8
80006790:	e0 80 01 82 	breq	80006a94 <_dtoa_r+0x634>
80006794:	58 06       	cp.w	r6,0
80006796:	e0 8a 00 43 	brle	8000681c <_dtoa_r+0x3bc>
8000679a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000679e:	fe c8 c7 2e 	sub	r8,pc,-14546
800067a2:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800067a6:	fa e5 00 18 	st.d	sp[24],r4
800067aa:	ec 04 14 04 	asr	r4,r6,0x4
800067ae:	ed b4 00 04 	bld	r4,0x4
800067b2:	c0 30       	breq	800067b8 <_dtoa_r+0x358>
800067b4:	30 25       	mov	r5,2
800067b6:	c1 08       	rjmp	800067d6 <_dtoa_r+0x376>
800067b8:	fe c8 c6 80 	sub	r8,pc,-14720
800067bc:	f0 e8 00 20 	ld.d	r8,r8[32]
800067c0:	fa ea 00 3c 	ld.d	r10,sp[60]
800067c4:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800067c8:	e0 a0 12 ac 	rcall	80008d20 <__avr32_f64_div>
800067cc:	30 35       	mov	r5,3
800067ce:	14 98       	mov	r8,r10
800067d0:	16 99       	mov	r9,r11
800067d2:	fa e9 00 08 	st.d	sp[8],r8
800067d6:	fe cc c6 9e 	sub	r12,pc,-14690
800067da:	50 a3       	stdsp	sp[0x28],r3
800067dc:	0c 93       	mov	r3,r6
800067de:	18 96       	mov	r6,r12
800067e0:	c0 f8       	rjmp	800067fe <_dtoa_r+0x39e>
800067e2:	fa ea 00 18 	ld.d	r10,sp[24]
800067e6:	ed b4 00 00 	bld	r4,0x0
800067ea:	c0 81       	brne	800067fa <_dtoa_r+0x39a>
800067ec:	ec e8 00 00 	ld.d	r8,r6[0]
800067f0:	2f f5       	sub	r5,-1
800067f2:	fe b0 e8 4d 	rcall	8000388c <__avr32_f64_mul>
800067f6:	fa eb 00 18 	st.d	sp[24],r10
800067fa:	a1 54       	asr	r4,0x1
800067fc:	2f 86       	sub	r6,-8
800067fe:	58 04       	cp.w	r4,0
80006800:	cf 11       	brne	800067e2 <_dtoa_r+0x382>
80006802:	fa e8 00 18 	ld.d	r8,sp[24]
80006806:	fa ea 00 08 	ld.d	r10,sp[8]
8000680a:	06 96       	mov	r6,r3
8000680c:	e0 a0 12 8a 	rcall	80008d20 <__avr32_f64_div>
80006810:	40 a3       	lddsp	r3,sp[0x28]
80006812:	14 98       	mov	r8,r10
80006814:	16 99       	mov	r9,r11
80006816:	fa e9 00 08 	st.d	sp[8],r8
8000681a:	c2 f8       	rjmp	80006878 <_dtoa_r+0x418>
8000681c:	ec 08 11 00 	rsub	r8,r6,0
80006820:	c0 31       	brne	80006826 <_dtoa_r+0x3c6>
80006822:	30 25       	mov	r5,2
80006824:	c2 a8       	rjmp	80006878 <_dtoa_r+0x418>
80006826:	fe cc c6 ee 	sub	r12,pc,-14610
8000682a:	f0 04 14 04 	asr	r4,r8,0x4
8000682e:	50 1c       	stdsp	sp[0x4],r12
80006830:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006834:	fe c9 c7 c4 	sub	r9,pc,-14396
80006838:	fa ea 00 3c 	ld.d	r10,sp[60]
8000683c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006840:	fe b0 e8 26 	rcall	8000388c <__avr32_f64_mul>
80006844:	40 1c       	lddsp	r12,sp[0x4]
80006846:	50 63       	stdsp	sp[0x18],r3
80006848:	30 25       	mov	r5,2
8000684a:	0c 93       	mov	r3,r6
8000684c:	fa eb 00 08 	st.d	sp[8],r10
80006850:	18 96       	mov	r6,r12
80006852:	c0 f8       	rjmp	80006870 <_dtoa_r+0x410>
80006854:	fa ea 00 08 	ld.d	r10,sp[8]
80006858:	ed b4 00 00 	bld	r4,0x0
8000685c:	c0 81       	brne	8000686c <_dtoa_r+0x40c>
8000685e:	ec e8 00 00 	ld.d	r8,r6[0]
80006862:	2f f5       	sub	r5,-1
80006864:	fe b0 e8 14 	rcall	8000388c <__avr32_f64_mul>
80006868:	fa eb 00 08 	st.d	sp[8],r10
8000686c:	a1 54       	asr	r4,0x1
8000686e:	2f 86       	sub	r6,-8
80006870:	58 04       	cp.w	r4,0
80006872:	cf 11       	brne	80006854 <_dtoa_r+0x3f4>
80006874:	06 96       	mov	r6,r3
80006876:	40 63       	lddsp	r3,sp[0x18]
80006878:	41 4a       	lddsp	r10,sp[0x50]
8000687a:	58 0a       	cp.w	r10,0
8000687c:	c2 a0       	breq	800068d0 <_dtoa_r+0x470>
8000687e:	fa e8 00 08 	ld.d	r8,sp[8]
80006882:	58 01       	cp.w	r1,0
80006884:	5f 94       	srgt	r4
80006886:	fa e9 00 18 	st.d	sp[24],r8
8000688a:	30 08       	mov	r8,0
8000688c:	fc 19 3f f0 	movh	r9,0x3ff0
80006890:	fa ea 00 18 	ld.d	r10,sp[24]
80006894:	e0 a0 12 12 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80006898:	f9 bc 00 00 	moveq	r12,0
8000689c:	f9 bc 01 01 	movne	r12,1
800068a0:	e9 ec 00 0c 	and	r12,r4,r12
800068a4:	c1 60       	breq	800068d0 <_dtoa_r+0x470>
800068a6:	40 98       	lddsp	r8,sp[0x24]
800068a8:	58 08       	cp.w	r8,0
800068aa:	e0 8a 00 f1 	brle	80006a8c <_dtoa_r+0x62c>
800068ae:	30 08       	mov	r8,0
800068b0:	fc 19 40 24 	movh	r9,0x4024
800068b4:	ec c4 00 01 	sub	r4,r6,1
800068b8:	fa ea 00 18 	ld.d	r10,sp[24]
800068bc:	2f f5       	sub	r5,-1
800068be:	50 64       	stdsp	sp[0x18],r4
800068c0:	fe b0 e7 e6 	rcall	8000388c <__avr32_f64_mul>
800068c4:	40 94       	lddsp	r4,sp[0x24]
800068c6:	14 98       	mov	r8,r10
800068c8:	16 99       	mov	r9,r11
800068ca:	fa e9 00 08 	st.d	sp[8],r8
800068ce:	c0 38       	rjmp	800068d4 <_dtoa_r+0x474>
800068d0:	50 66       	stdsp	sp[0x18],r6
800068d2:	02 94       	mov	r4,r1
800068d4:	0a 9c       	mov	r12,r5
800068d6:	fe b0 e8 c9 	rcall	80003a68 <__avr32_s32_to_f64>
800068da:	fa e8 00 08 	ld.d	r8,sp[8]
800068de:	fe b0 e7 d7 	rcall	8000388c <__avr32_f64_mul>
800068e2:	30 08       	mov	r8,0
800068e4:	fc 19 40 1c 	movh	r9,0x401c
800068e8:	e0 a0 11 04 	rcall	80008af0 <__avr32_f64_add>
800068ec:	14 98       	mov	r8,r10
800068ee:	16 99       	mov	r9,r11
800068f0:	fa e9 00 28 	st.d	sp[40],r8
800068f4:	fc 18 fc c0 	movh	r8,0xfcc0
800068f8:	40 a5       	lddsp	r5,sp[0x28]
800068fa:	10 05       	add	r5,r8
800068fc:	50 a5       	stdsp	sp[0x28],r5
800068fe:	58 04       	cp.w	r4,0
80006900:	c2 11       	brne	80006942 <_dtoa_r+0x4e2>
80006902:	fa ea 00 08 	ld.d	r10,sp[8]
80006906:	30 08       	mov	r8,0
80006908:	fc 19 40 14 	movh	r9,0x4014
8000690c:	e0 a0 10 24 	rcall	80008954 <__avr32_f64_sub>
80006910:	40 bc       	lddsp	r12,sp[0x2c]
80006912:	fa eb 00 08 	st.d	sp[8],r10
80006916:	14 98       	mov	r8,r10
80006918:	16 99       	mov	r9,r11
8000691a:	18 9a       	mov	r10,r12
8000691c:	0a 9b       	mov	r11,r5
8000691e:	e0 a0 11 cd 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80006922:	e0 81 02 54 	brne	80006dca <_dtoa_r+0x96a>
80006926:	0a 98       	mov	r8,r5
80006928:	40 b9       	lddsp	r9,sp[0x2c]
8000692a:	ee 18 80 00 	eorh	r8,0x8000
8000692e:	fa ea 00 08 	ld.d	r10,sp[8]
80006932:	10 95       	mov	r5,r8
80006934:	12 98       	mov	r8,r9
80006936:	0a 99       	mov	r9,r5
80006938:	e0 a0 11 c0 	rcall	80008cb8 <__avr32_f64_cmp_lt>
8000693c:	e0 81 02 3e 	brne	80006db8 <_dtoa_r+0x958>
80006940:	ca 68       	rjmp	80006a8c <_dtoa_r+0x62c>
80006942:	fe c9 c8 d2 	sub	r9,pc,-14126
80006946:	e8 c8 00 01 	sub	r8,r4,1
8000694a:	40 d5       	lddsp	r5,sp[0x34]
8000694c:	58 05       	cp.w	r5,0
8000694e:	c4 f0       	breq	800069ec <_dtoa_r+0x58c>
80006950:	30 0c       	mov	r12,0
80006952:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006956:	51 3c       	stdsp	sp[0x4c],r12
80006958:	30 0a       	mov	r10,0
8000695a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000695e:	e0 a0 11 e1 	rcall	80008d20 <__avr32_f64_div>
80006962:	fa e8 00 28 	ld.d	r8,sp[40]
80006966:	40 85       	lddsp	r5,sp[0x20]
80006968:	e0 a0 0f f6 	rcall	80008954 <__avr32_f64_sub>
8000696c:	fa eb 00 28 	st.d	sp[40],r10
80006970:	fa ea 00 08 	ld.d	r10,sp[8]
80006974:	e0 a0 11 48 	rcall	80008c04 <__avr32_f64_to_s32>
80006978:	51 6c       	stdsp	sp[0x58],r12
8000697a:	fe b0 e8 77 	rcall	80003a68 <__avr32_s32_to_f64>
8000697e:	14 98       	mov	r8,r10
80006980:	16 99       	mov	r9,r11
80006982:	fa ea 00 08 	ld.d	r10,sp[8]
80006986:	e0 a0 0f e7 	rcall	80008954 <__avr32_f64_sub>
8000698a:	fa eb 00 08 	st.d	sp[8],r10
8000698e:	41 68       	lddsp	r8,sp[0x58]
80006990:	2d 08       	sub	r8,-48
80006992:	0a c8       	st.b	r5++,r8
80006994:	41 39       	lddsp	r9,sp[0x4c]
80006996:	2f f9       	sub	r9,-1
80006998:	51 39       	stdsp	sp[0x4c],r9
8000699a:	fa e8 00 28 	ld.d	r8,sp[40]
8000699e:	e0 a0 11 8d 	rcall	80008cb8 <__avr32_f64_cmp_lt>
800069a2:	e0 81 03 39 	brne	80007014 <_dtoa_r+0xbb4>
800069a6:	fa e8 00 08 	ld.d	r8,sp[8]
800069aa:	30 0a       	mov	r10,0
800069ac:	fc 1b 3f f0 	movh	r11,0x3ff0
800069b0:	e0 a0 0f d2 	rcall	80008954 <__avr32_f64_sub>
800069b4:	fa e8 00 28 	ld.d	r8,sp[40]
800069b8:	e0 a0 11 80 	rcall	80008cb8 <__avr32_f64_cmp_lt>
800069bc:	fa ea 00 28 	ld.d	r10,sp[40]
800069c0:	30 08       	mov	r8,0
800069c2:	fc 19 40 24 	movh	r9,0x4024
800069c6:	e0 81 00 da 	brne	80006b7a <_dtoa_r+0x71a>
800069ca:	41 3c       	lddsp	r12,sp[0x4c]
800069cc:	08 3c       	cp.w	r12,r4
800069ce:	c5 f4       	brge	80006a8c <_dtoa_r+0x62c>
800069d0:	fe b0 e7 5e 	rcall	8000388c <__avr32_f64_mul>
800069d4:	30 08       	mov	r8,0
800069d6:	fa eb 00 28 	st.d	sp[40],r10
800069da:	fc 19 40 24 	movh	r9,0x4024
800069de:	fa ea 00 08 	ld.d	r10,sp[8]
800069e2:	fe b0 e7 55 	rcall	8000388c <__avr32_f64_mul>
800069e6:	fa eb 00 08 	st.d	sp[8],r10
800069ea:	cc 3b       	rjmp	80006970 <_dtoa_r+0x510>
800069ec:	40 85       	lddsp	r5,sp[0x20]
800069ee:	08 05       	add	r5,r4
800069f0:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800069f4:	51 35       	stdsp	sp[0x4c],r5
800069f6:	fa e8 00 28 	ld.d	r8,sp[40]
800069fa:	40 85       	lddsp	r5,sp[0x20]
800069fc:	fe b0 e7 48 	rcall	8000388c <__avr32_f64_mul>
80006a00:	fa eb 00 28 	st.d	sp[40],r10
80006a04:	fa ea 00 08 	ld.d	r10,sp[8]
80006a08:	e0 a0 10 fe 	rcall	80008c04 <__avr32_f64_to_s32>
80006a0c:	51 6c       	stdsp	sp[0x58],r12
80006a0e:	fe b0 e8 2d 	rcall	80003a68 <__avr32_s32_to_f64>
80006a12:	14 98       	mov	r8,r10
80006a14:	16 99       	mov	r9,r11
80006a16:	fa ea 00 08 	ld.d	r10,sp[8]
80006a1a:	e0 a0 0f 9d 	rcall	80008954 <__avr32_f64_sub>
80006a1e:	fa eb 00 08 	st.d	sp[8],r10
80006a22:	41 68       	lddsp	r8,sp[0x58]
80006a24:	2d 08       	sub	r8,-48
80006a26:	0a c8       	st.b	r5++,r8
80006a28:	41 3c       	lddsp	r12,sp[0x4c]
80006a2a:	18 35       	cp.w	r5,r12
80006a2c:	c2 81       	brne	80006a7c <_dtoa_r+0x61c>
80006a2e:	30 08       	mov	r8,0
80006a30:	fc 19 3f e0 	movh	r9,0x3fe0
80006a34:	fa ea 00 28 	ld.d	r10,sp[40]
80006a38:	e0 a0 10 5c 	rcall	80008af0 <__avr32_f64_add>
80006a3c:	40 85       	lddsp	r5,sp[0x20]
80006a3e:	fa e8 00 08 	ld.d	r8,sp[8]
80006a42:	08 05       	add	r5,r4
80006a44:	e0 a0 11 3a 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80006a48:	e0 81 00 99 	brne	80006b7a <_dtoa_r+0x71a>
80006a4c:	fa e8 00 28 	ld.d	r8,sp[40]
80006a50:	30 0a       	mov	r10,0
80006a52:	fc 1b 3f e0 	movh	r11,0x3fe0
80006a56:	e0 a0 0f 7f 	rcall	80008954 <__avr32_f64_sub>
80006a5a:	14 98       	mov	r8,r10
80006a5c:	16 99       	mov	r9,r11
80006a5e:	fa ea 00 08 	ld.d	r10,sp[8]
80006a62:	e0 a0 11 2b 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80006a66:	c1 30       	breq	80006a8c <_dtoa_r+0x62c>
80006a68:	33 09       	mov	r9,48
80006a6a:	0a 98       	mov	r8,r5
80006a6c:	11 7a       	ld.ub	r10,--r8
80006a6e:	f2 0a 18 00 	cp.b	r10,r9
80006a72:	e0 81 02 d1 	brne	80007014 <_dtoa_r+0xbb4>
80006a76:	10 95       	mov	r5,r8
80006a78:	cf 9b       	rjmp	80006a6a <_dtoa_r+0x60a>
80006a7a:	d7 03       	nop
80006a7c:	30 08       	mov	r8,0
80006a7e:	fc 19 40 24 	movh	r9,0x4024
80006a82:	fe b0 e7 05 	rcall	8000388c <__avr32_f64_mul>
80006a86:	fa eb 00 08 	st.d	sp[8],r10
80006a8a:	cb db       	rjmp	80006a04 <_dtoa_r+0x5a4>
80006a8c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a90:	fa eb 00 08 	st.d	sp[8],r10
80006a94:	58 e6       	cp.w	r6,14
80006a96:	5f ab       	srle	r11
80006a98:	41 8a       	lddsp	r10,sp[0x60]
80006a9a:	30 08       	mov	r8,0
80006a9c:	f4 09 11 ff 	rsub	r9,r10,-1
80006aa0:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006aa4:	f0 09 18 00 	cp.b	r9,r8
80006aa8:	e0 80 00 82 	breq	80006bac <_dtoa_r+0x74c>
80006aac:	40 ea       	lddsp	r10,sp[0x38]
80006aae:	58 01       	cp.w	r1,0
80006ab0:	5f a9       	srle	r9
80006ab2:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006ab6:	fe ca ca 46 	sub	r10,pc,-13754
80006aba:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006abe:	fa e5 00 10 	st.d	sp[16],r4
80006ac2:	f0 09 18 00 	cp.b	r9,r8
80006ac6:	c1 40       	breq	80006aee <_dtoa_r+0x68e>
80006ac8:	58 01       	cp.w	r1,0
80006aca:	e0 81 01 77 	brne	80006db8 <_dtoa_r+0x958>
80006ace:	30 08       	mov	r8,0
80006ad0:	fc 19 40 14 	movh	r9,0x4014
80006ad4:	08 9a       	mov	r10,r4
80006ad6:	0a 9b       	mov	r11,r5
80006ad8:	fe b0 e6 da 	rcall	8000388c <__avr32_f64_mul>
80006adc:	fa e8 00 08 	ld.d	r8,sp[8]
80006ae0:	e0 a0 10 b8 	rcall	80008c50 <__avr32_f64_cmp_ge>
80006ae4:	e0 81 01 6a 	brne	80006db8 <_dtoa_r+0x958>
80006ae8:	02 92       	mov	r2,r1
80006aea:	e0 8f 01 72 	bral	80006dce <_dtoa_r+0x96e>
80006aee:	40 85       	lddsp	r5,sp[0x20]
80006af0:	30 14       	mov	r4,1
80006af2:	fa e8 00 10 	ld.d	r8,sp[16]
80006af6:	fa ea 00 08 	ld.d	r10,sp[8]
80006afa:	e0 a0 11 13 	rcall	80008d20 <__avr32_f64_div>
80006afe:	e0 a0 10 83 	rcall	80008c04 <__avr32_f64_to_s32>
80006b02:	18 92       	mov	r2,r12
80006b04:	fe b0 e7 b2 	rcall	80003a68 <__avr32_s32_to_f64>
80006b08:	fa e8 00 10 	ld.d	r8,sp[16]
80006b0c:	fe b0 e6 c0 	rcall	8000388c <__avr32_f64_mul>
80006b10:	14 98       	mov	r8,r10
80006b12:	16 99       	mov	r9,r11
80006b14:	fa ea 00 08 	ld.d	r10,sp[8]
80006b18:	e0 a0 0f 1e 	rcall	80008954 <__avr32_f64_sub>
80006b1c:	fa eb 00 08 	st.d	sp[8],r10
80006b20:	e4 c8 ff d0 	sub	r8,r2,-48
80006b24:	0a c8       	st.b	r5++,r8
80006b26:	fc 19 40 24 	movh	r9,0x4024
80006b2a:	30 08       	mov	r8,0
80006b2c:	02 34       	cp.w	r4,r1
80006b2e:	c3 31       	brne	80006b94 <_dtoa_r+0x734>
80006b30:	fa e8 00 08 	ld.d	r8,sp[8]
80006b34:	e0 a0 0f de 	rcall	80008af0 <__avr32_f64_add>
80006b38:	16 91       	mov	r1,r11
80006b3a:	14 90       	mov	r0,r10
80006b3c:	14 98       	mov	r8,r10
80006b3e:	02 99       	mov	r9,r1
80006b40:	fa ea 00 10 	ld.d	r10,sp[16]
80006b44:	e0 a0 10 ba 	rcall	80008cb8 <__avr32_f64_cmp_lt>
80006b48:	c1 a1       	brne	80006b7c <_dtoa_r+0x71c>
80006b4a:	fa e8 00 10 	ld.d	r8,sp[16]
80006b4e:	00 9a       	mov	r10,r0
80006b50:	02 9b       	mov	r11,r1
80006b52:	e0 a0 10 6c 	rcall	80008c2a <__avr32_f64_cmp_eq>
80006b56:	e0 80 02 5e 	breq	80007012 <_dtoa_r+0xbb2>
80006b5a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006b5e:	c0 f1       	brne	80006b7c <_dtoa_r+0x71c>
80006b60:	e0 8f 02 59 	bral	80007012 <_dtoa_r+0xbb2>
80006b64:	40 8a       	lddsp	r10,sp[0x20]
80006b66:	14 38       	cp.w	r8,r10
80006b68:	c0 30       	breq	80006b6e <_dtoa_r+0x70e>
80006b6a:	10 95       	mov	r5,r8
80006b6c:	c0 98       	rjmp	80006b7e <_dtoa_r+0x71e>
80006b6e:	33 08       	mov	r8,48
80006b70:	40 89       	lddsp	r9,sp[0x20]
80006b72:	2f f6       	sub	r6,-1
80006b74:	b2 88       	st.b	r9[0x0],r8
80006b76:	40 88       	lddsp	r8,sp[0x20]
80006b78:	c0 88       	rjmp	80006b88 <_dtoa_r+0x728>
80006b7a:	40 66       	lddsp	r6,sp[0x18]
80006b7c:	33 99       	mov	r9,57
80006b7e:	0a 98       	mov	r8,r5
80006b80:	11 7a       	ld.ub	r10,--r8
80006b82:	f2 0a 18 00 	cp.b	r10,r9
80006b86:	ce f0       	breq	80006b64 <_dtoa_r+0x704>
80006b88:	50 66       	stdsp	sp[0x18],r6
80006b8a:	11 89       	ld.ub	r9,r8[0x0]
80006b8c:	2f f9       	sub	r9,-1
80006b8e:	b0 89       	st.b	r8[0x0],r9
80006b90:	e0 8f 02 42 	bral	80007014 <_dtoa_r+0xbb4>
80006b94:	fe b0 e6 7c 	rcall	8000388c <__avr32_f64_mul>
80006b98:	2f f4       	sub	r4,-1
80006b9a:	fa eb 00 08 	st.d	sp[8],r10
80006b9e:	30 08       	mov	r8,0
80006ba0:	30 09       	mov	r9,0
80006ba2:	e0 a0 10 44 	rcall	80008c2a <__avr32_f64_cmp_eq>
80006ba6:	ca 60       	breq	80006af2 <_dtoa_r+0x692>
80006ba8:	e0 8f 02 35 	bral	80007012 <_dtoa_r+0xbb2>
80006bac:	40 d8       	lddsp	r8,sp[0x34]
80006bae:	58 08       	cp.w	r8,0
80006bb0:	c0 51       	brne	80006bba <_dtoa_r+0x75a>
80006bb2:	04 98       	mov	r8,r2
80006bb4:	00 95       	mov	r5,r0
80006bb6:	40 d4       	lddsp	r4,sp[0x34]
80006bb8:	c3 78       	rjmp	80006c26 <_dtoa_r+0x7c6>
80006bba:	40 c5       	lddsp	r5,sp[0x30]
80006bbc:	58 15       	cp.w	r5,1
80006bbe:	e0 89 00 0f 	brgt	80006bdc <_dtoa_r+0x77c>
80006bc2:	41 74       	lddsp	r4,sp[0x5c]
80006bc4:	58 04       	cp.w	r4,0
80006bc6:	c0 40       	breq	80006bce <_dtoa_r+0x76e>
80006bc8:	f4 c9 fb cd 	sub	r9,r10,-1075
80006bcc:	c0 48       	rjmp	80006bd4 <_dtoa_r+0x774>
80006bce:	41 99       	lddsp	r9,sp[0x64]
80006bd0:	f2 09 11 36 	rsub	r9,r9,54
80006bd4:	04 98       	mov	r8,r2
80006bd6:	00 95       	mov	r5,r0
80006bd8:	c1 c8       	rjmp	80006c10 <_dtoa_r+0x7b0>
80006bda:	d7 03       	nop
80006bdc:	e2 c8 00 01 	sub	r8,r1,1
80006be0:	58 01       	cp.w	r1,0
80006be2:	e0 05 17 40 	movge	r5,r0
80006be6:	e2 09 17 40 	movge	r9,r1
80006bea:	e1 d1 e5 15 	sublt	r5,r0,r1
80006bee:	f9 b9 05 00 	movlt	r9,0
80006bf2:	10 32       	cp.w	r2,r8
80006bf4:	e5 d8 e4 18 	subge	r8,r2,r8
80006bf8:	f1 d2 e5 18 	sublt	r8,r8,r2
80006bfc:	e5 d8 e5 02 	addlt	r2,r2,r8
80006c00:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006c04:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006c08:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006c0c:	f9 b8 05 00 	movlt	r8,0
80006c10:	40 4b       	lddsp	r11,sp[0x10]
80006c12:	12 0b       	add	r11,r9
80006c14:	50 08       	stdsp	sp[0x0],r8
80006c16:	50 4b       	stdsp	sp[0x10],r11
80006c18:	12 00       	add	r0,r9
80006c1a:	30 1b       	mov	r11,1
80006c1c:	0e 9c       	mov	r12,r7
80006c1e:	e0 a0 0a c9 	rcall	800081b0 <__i2b>
80006c22:	40 08       	lddsp	r8,sp[0x0]
80006c24:	18 94       	mov	r4,r12
80006c26:	40 4a       	lddsp	r10,sp[0x10]
80006c28:	58 05       	cp.w	r5,0
80006c2a:	5f 99       	srgt	r9
80006c2c:	58 0a       	cp.w	r10,0
80006c2e:	5f 9a       	srgt	r10
80006c30:	f5 e9 00 09 	and	r9,r10,r9
80006c34:	c0 80       	breq	80006c44 <_dtoa_r+0x7e4>
80006c36:	40 4c       	lddsp	r12,sp[0x10]
80006c38:	f8 05 0d 49 	min	r9,r12,r5
80006c3c:	12 1c       	sub	r12,r9
80006c3e:	12 10       	sub	r0,r9
80006c40:	50 4c       	stdsp	sp[0x10],r12
80006c42:	12 15       	sub	r5,r9
80006c44:	58 02       	cp.w	r2,0
80006c46:	e0 8a 00 27 	brle	80006c94 <_dtoa_r+0x834>
80006c4a:	40 db       	lddsp	r11,sp[0x34]
80006c4c:	58 0b       	cp.w	r11,0
80006c4e:	c1 d0       	breq	80006c88 <_dtoa_r+0x828>
80006c50:	58 08       	cp.w	r8,0
80006c52:	e0 8a 00 17 	brle	80006c80 <_dtoa_r+0x820>
80006c56:	10 9a       	mov	r10,r8
80006c58:	50 08       	stdsp	sp[0x0],r8
80006c5a:	08 9b       	mov	r11,r4
80006c5c:	0e 9c       	mov	r12,r7
80006c5e:	e0 a0 0a ef 	rcall	8000823c <__pow5mult>
80006c62:	06 9a       	mov	r10,r3
80006c64:	18 9b       	mov	r11,r12
80006c66:	18 94       	mov	r4,r12
80006c68:	0e 9c       	mov	r12,r7
80006c6a:	e0 a0 0a 23 	rcall	800080b0 <__multiply>
80006c6e:	18 99       	mov	r9,r12
80006c70:	06 9b       	mov	r11,r3
80006c72:	50 19       	stdsp	sp[0x4],r9
80006c74:	0e 9c       	mov	r12,r7
80006c76:	e0 a0 08 cf 	rcall	80007e14 <_Bfree>
80006c7a:	40 19       	lddsp	r9,sp[0x4]
80006c7c:	40 08       	lddsp	r8,sp[0x0]
80006c7e:	12 93       	mov	r3,r9
80006c80:	e4 08 01 0a 	sub	r10,r2,r8
80006c84:	c0 80       	breq	80006c94 <_dtoa_r+0x834>
80006c86:	c0 28       	rjmp	80006c8a <_dtoa_r+0x82a>
80006c88:	04 9a       	mov	r10,r2
80006c8a:	06 9b       	mov	r11,r3
80006c8c:	0e 9c       	mov	r12,r7
80006c8e:	e0 a0 0a d7 	rcall	8000823c <__pow5mult>
80006c92:	18 93       	mov	r3,r12
80006c94:	30 1b       	mov	r11,1
80006c96:	0e 9c       	mov	r12,r7
80006c98:	e0 a0 0a 8c 	rcall	800081b0 <__i2b>
80006c9c:	41 1a       	lddsp	r10,sp[0x44]
80006c9e:	18 92       	mov	r2,r12
80006ca0:	58 0a       	cp.w	r10,0
80006ca2:	e0 8a 00 07 	brle	80006cb0 <_dtoa_r+0x850>
80006ca6:	18 9b       	mov	r11,r12
80006ca8:	0e 9c       	mov	r12,r7
80006caa:	e0 a0 0a c9 	rcall	8000823c <__pow5mult>
80006cae:	18 92       	mov	r2,r12
80006cb0:	40 c9       	lddsp	r9,sp[0x30]
80006cb2:	58 19       	cp.w	r9,1
80006cb4:	e0 89 00 14 	brgt	80006cdc <_dtoa_r+0x87c>
80006cb8:	40 38       	lddsp	r8,sp[0xc]
80006cba:	58 08       	cp.w	r8,0
80006cbc:	c1 01       	brne	80006cdc <_dtoa_r+0x87c>
80006cbe:	40 29       	lddsp	r9,sp[0x8]
80006cc0:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006cc4:	c0 c1       	brne	80006cdc <_dtoa_r+0x87c>
80006cc6:	12 98       	mov	r8,r9
80006cc8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006ccc:	c0 80       	breq	80006cdc <_dtoa_r+0x87c>
80006cce:	40 4c       	lddsp	r12,sp[0x10]
80006cd0:	30 1b       	mov	r11,1
80006cd2:	2f fc       	sub	r12,-1
80006cd4:	2f f0       	sub	r0,-1
80006cd6:	50 4c       	stdsp	sp[0x10],r12
80006cd8:	50 6b       	stdsp	sp[0x18],r11
80006cda:	c0 38       	rjmp	80006ce0 <_dtoa_r+0x880>
80006cdc:	30 0a       	mov	r10,0
80006cde:	50 6a       	stdsp	sp[0x18],r10
80006ce0:	41 19       	lddsp	r9,sp[0x44]
80006ce2:	58 09       	cp.w	r9,0
80006ce4:	c0 31       	brne	80006cea <_dtoa_r+0x88a>
80006ce6:	30 1c       	mov	r12,1
80006ce8:	c0 98       	rjmp	80006cfa <_dtoa_r+0x89a>
80006cea:	64 48       	ld.w	r8,r2[0x10]
80006cec:	2f c8       	sub	r8,-4
80006cee:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006cf2:	e0 a0 08 01 	rcall	80007cf4 <__hi0bits>
80006cf6:	f8 0c 11 20 	rsub	r12,r12,32
80006cfa:	40 4b       	lddsp	r11,sp[0x10]
80006cfc:	f8 0b 00 08 	add	r8,r12,r11
80006d00:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006d04:	c0 c0       	breq	80006d1c <_dtoa_r+0x8bc>
80006d06:	f0 08 11 20 	rsub	r8,r8,32
80006d0a:	58 48       	cp.w	r8,4
80006d0c:	e0 8a 00 06 	brle	80006d18 <_dtoa_r+0x8b8>
80006d10:	20 48       	sub	r8,4
80006d12:	10 0b       	add	r11,r8
80006d14:	50 4b       	stdsp	sp[0x10],r11
80006d16:	c0 78       	rjmp	80006d24 <_dtoa_r+0x8c4>
80006d18:	58 48       	cp.w	r8,4
80006d1a:	c0 70       	breq	80006d28 <_dtoa_r+0x8c8>
80006d1c:	40 4a       	lddsp	r10,sp[0x10]
80006d1e:	2e 48       	sub	r8,-28
80006d20:	10 0a       	add	r10,r8
80006d22:	50 4a       	stdsp	sp[0x10],r10
80006d24:	10 00       	add	r0,r8
80006d26:	10 05       	add	r5,r8
80006d28:	58 00       	cp.w	r0,0
80006d2a:	e0 8a 00 08 	brle	80006d3a <_dtoa_r+0x8da>
80006d2e:	06 9b       	mov	r11,r3
80006d30:	00 9a       	mov	r10,r0
80006d32:	0e 9c       	mov	r12,r7
80006d34:	e0 a0 09 7a 	rcall	80008028 <__lshift>
80006d38:	18 93       	mov	r3,r12
80006d3a:	40 49       	lddsp	r9,sp[0x10]
80006d3c:	58 09       	cp.w	r9,0
80006d3e:	e0 8a 00 08 	brle	80006d4e <_dtoa_r+0x8ee>
80006d42:	04 9b       	mov	r11,r2
80006d44:	12 9a       	mov	r10,r9
80006d46:	0e 9c       	mov	r12,r7
80006d48:	e0 a0 09 70 	rcall	80008028 <__lshift>
80006d4c:	18 92       	mov	r2,r12
80006d4e:	41 48       	lddsp	r8,sp[0x50]
80006d50:	58 08       	cp.w	r8,0
80006d52:	c1 b0       	breq	80006d88 <_dtoa_r+0x928>
80006d54:	04 9b       	mov	r11,r2
80006d56:	06 9c       	mov	r12,r3
80006d58:	e0 a0 08 45 	rcall	80007de2 <__mcmp>
80006d5c:	c1 64       	brge	80006d88 <_dtoa_r+0x928>
80006d5e:	06 9b       	mov	r11,r3
80006d60:	30 09       	mov	r9,0
80006d62:	30 aa       	mov	r10,10
80006d64:	0e 9c       	mov	r12,r7
80006d66:	e0 a0 0a 2d 	rcall	800081c0 <__multadd>
80006d6a:	20 16       	sub	r6,1
80006d6c:	18 93       	mov	r3,r12
80006d6e:	40 dc       	lddsp	r12,sp[0x34]
80006d70:	58 0c       	cp.w	r12,0
80006d72:	c0 31       	brne	80006d78 <_dtoa_r+0x918>
80006d74:	40 91       	lddsp	r1,sp[0x24]
80006d76:	c0 98       	rjmp	80006d88 <_dtoa_r+0x928>
80006d78:	08 9b       	mov	r11,r4
80006d7a:	40 91       	lddsp	r1,sp[0x24]
80006d7c:	30 09       	mov	r9,0
80006d7e:	30 aa       	mov	r10,10
80006d80:	0e 9c       	mov	r12,r7
80006d82:	e0 a0 0a 1f 	rcall	800081c0 <__multadd>
80006d86:	18 94       	mov	r4,r12
80006d88:	58 01       	cp.w	r1,0
80006d8a:	5f a9       	srle	r9
80006d8c:	40 cb       	lddsp	r11,sp[0x30]
80006d8e:	58 2b       	cp.w	r11,2
80006d90:	5f 98       	srgt	r8
80006d92:	f3 e8 00 08 	and	r8,r9,r8
80006d96:	c2 50       	breq	80006de0 <_dtoa_r+0x980>
80006d98:	58 01       	cp.w	r1,0
80006d9a:	c1 11       	brne	80006dbc <_dtoa_r+0x95c>
80006d9c:	04 9b       	mov	r11,r2
80006d9e:	02 99       	mov	r9,r1
80006da0:	30 5a       	mov	r10,5
80006da2:	0e 9c       	mov	r12,r7
80006da4:	e0 a0 0a 0e 	rcall	800081c0 <__multadd>
80006da8:	18 92       	mov	r2,r12
80006daa:	18 9b       	mov	r11,r12
80006dac:	06 9c       	mov	r12,r3
80006dae:	e0 a0 08 1a 	rcall	80007de2 <__mcmp>
80006db2:	e0 89 00 0f 	brgt	80006dd0 <_dtoa_r+0x970>
80006db6:	c0 38       	rjmp	80006dbc <_dtoa_r+0x95c>
80006db8:	30 02       	mov	r2,0
80006dba:	04 94       	mov	r4,r2
80006dbc:	40 ea       	lddsp	r10,sp[0x38]
80006dbe:	30 09       	mov	r9,0
80006dc0:	5c da       	com	r10
80006dc2:	40 85       	lddsp	r5,sp[0x20]
80006dc4:	50 6a       	stdsp	sp[0x18],r10
80006dc6:	50 49       	stdsp	sp[0x10],r9
80006dc8:	c0 f9       	rjmp	80006fe6 <_dtoa_r+0xb86>
80006dca:	08 92       	mov	r2,r4
80006dcc:	40 66       	lddsp	r6,sp[0x18]
80006dce:	04 94       	mov	r4,r2
80006dd0:	2f f6       	sub	r6,-1
80006dd2:	50 66       	stdsp	sp[0x18],r6
80006dd4:	33 18       	mov	r8,49
80006dd6:	40 85       	lddsp	r5,sp[0x20]
80006dd8:	0a c8       	st.b	r5++,r8
80006dda:	30 08       	mov	r8,0
80006ddc:	50 48       	stdsp	sp[0x10],r8
80006dde:	c0 49       	rjmp	80006fe6 <_dtoa_r+0xb86>
80006de0:	40 dc       	lddsp	r12,sp[0x34]
80006de2:	58 0c       	cp.w	r12,0
80006de4:	e0 80 00 b5 	breq	80006f4e <_dtoa_r+0xaee>
80006de8:	58 05       	cp.w	r5,0
80006dea:	e0 8a 00 08 	brle	80006dfa <_dtoa_r+0x99a>
80006dee:	08 9b       	mov	r11,r4
80006df0:	0a 9a       	mov	r10,r5
80006df2:	0e 9c       	mov	r12,r7
80006df4:	e0 a0 09 1a 	rcall	80008028 <__lshift>
80006df8:	18 94       	mov	r4,r12
80006dfa:	40 6b       	lddsp	r11,sp[0x18]
80006dfc:	58 0b       	cp.w	r11,0
80006dfe:	c0 31       	brne	80006e04 <_dtoa_r+0x9a4>
80006e00:	08 9c       	mov	r12,r4
80006e02:	c1 38       	rjmp	80006e28 <_dtoa_r+0x9c8>
80006e04:	68 1b       	ld.w	r11,r4[0x4]
80006e06:	0e 9c       	mov	r12,r7
80006e08:	e0 a0 08 20 	rcall	80007e48 <_Balloc>
80006e0c:	68 4a       	ld.w	r10,r4[0x10]
80006e0e:	18 95       	mov	r5,r12
80006e10:	e8 cb ff f4 	sub	r11,r4,-12
80006e14:	2f ea       	sub	r10,-2
80006e16:	2f 4c       	sub	r12,-12
80006e18:	a3 6a       	lsl	r10,0x2
80006e1a:	fe b0 e8 3e 	rcall	80003e96 <memcpy>
80006e1e:	0a 9b       	mov	r11,r5
80006e20:	30 1a       	mov	r10,1
80006e22:	0e 9c       	mov	r12,r7
80006e24:	e0 a0 09 02 	rcall	80008028 <__lshift>
80006e28:	50 44       	stdsp	sp[0x10],r4
80006e2a:	40 3a       	lddsp	r10,sp[0xc]
80006e2c:	30 19       	mov	r9,1
80006e2e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006e32:	18 94       	mov	r4,r12
80006e34:	50 da       	stdsp	sp[0x34],r10
80006e36:	40 85       	lddsp	r5,sp[0x20]
80006e38:	50 99       	stdsp	sp[0x24],r9
80006e3a:	50 26       	stdsp	sp[0x8],r6
80006e3c:	50 e1       	stdsp	sp[0x38],r1
80006e3e:	04 9b       	mov	r11,r2
80006e40:	06 9c       	mov	r12,r3
80006e42:	fe b0 fa 7f 	rcall	80006340 <quorem>
80006e46:	40 4b       	lddsp	r11,sp[0x10]
80006e48:	f8 c0 ff d0 	sub	r0,r12,-48
80006e4c:	06 9c       	mov	r12,r3
80006e4e:	e0 a0 07 ca 	rcall	80007de2 <__mcmp>
80006e52:	08 9a       	mov	r10,r4
80006e54:	50 6c       	stdsp	sp[0x18],r12
80006e56:	04 9b       	mov	r11,r2
80006e58:	0e 9c       	mov	r12,r7
80006e5a:	e0 a0 08 7f 	rcall	80007f58 <__mdiff>
80006e5e:	18 91       	mov	r1,r12
80006e60:	78 38       	ld.w	r8,r12[0xc]
80006e62:	58 08       	cp.w	r8,0
80006e64:	c0 30       	breq	80006e6a <_dtoa_r+0xa0a>
80006e66:	30 16       	mov	r6,1
80006e68:	c0 68       	rjmp	80006e74 <_dtoa_r+0xa14>
80006e6a:	18 9b       	mov	r11,r12
80006e6c:	06 9c       	mov	r12,r3
80006e6e:	e0 a0 07 ba 	rcall	80007de2 <__mcmp>
80006e72:	18 96       	mov	r6,r12
80006e74:	0e 9c       	mov	r12,r7
80006e76:	02 9b       	mov	r11,r1
80006e78:	e0 a0 07 ce 	rcall	80007e14 <_Bfree>
80006e7c:	40 cc       	lddsp	r12,sp[0x30]
80006e7e:	ed ec 10 08 	or	r8,r6,r12
80006e82:	c0 d1       	brne	80006e9c <_dtoa_r+0xa3c>
80006e84:	40 db       	lddsp	r11,sp[0x34]
80006e86:	58 0b       	cp.w	r11,0
80006e88:	c0 a1       	brne	80006e9c <_dtoa_r+0xa3c>
80006e8a:	40 26       	lddsp	r6,sp[0x8]
80006e8c:	e0 40 00 39 	cp.w	r0,57
80006e90:	c3 00       	breq	80006ef0 <_dtoa_r+0xa90>
80006e92:	40 6a       	lddsp	r10,sp[0x18]
80006e94:	58 0a       	cp.w	r10,0
80006e96:	e0 89 00 24 	brgt	80006ede <_dtoa_r+0xa7e>
80006e9a:	c2 f8       	rjmp	80006ef8 <_dtoa_r+0xa98>
80006e9c:	40 69       	lddsp	r9,sp[0x18]
80006e9e:	58 09       	cp.w	r9,0
80006ea0:	c0 85       	brlt	80006eb0 <_dtoa_r+0xa50>
80006ea2:	12 98       	mov	r8,r9
80006ea4:	40 cc       	lddsp	r12,sp[0x30]
80006ea6:	18 48       	or	r8,r12
80006ea8:	c1 d1       	brne	80006ee2 <_dtoa_r+0xa82>
80006eaa:	40 db       	lddsp	r11,sp[0x34]
80006eac:	58 0b       	cp.w	r11,0
80006eae:	c1 a1       	brne	80006ee2 <_dtoa_r+0xa82>
80006eb0:	0c 99       	mov	r9,r6
80006eb2:	40 26       	lddsp	r6,sp[0x8]
80006eb4:	58 09       	cp.w	r9,0
80006eb6:	e0 8a 00 21 	brle	80006ef8 <_dtoa_r+0xa98>
80006eba:	06 9b       	mov	r11,r3
80006ebc:	30 1a       	mov	r10,1
80006ebe:	0e 9c       	mov	r12,r7
80006ec0:	e0 a0 08 b4 	rcall	80008028 <__lshift>
80006ec4:	04 9b       	mov	r11,r2
80006ec6:	18 93       	mov	r3,r12
80006ec8:	e0 a0 07 8d 	rcall	80007de2 <__mcmp>
80006ecc:	e0 89 00 06 	brgt	80006ed8 <_dtoa_r+0xa78>
80006ed0:	c1 41       	brne	80006ef8 <_dtoa_r+0xa98>
80006ed2:	ed b0 00 00 	bld	r0,0x0
80006ed6:	c1 11       	brne	80006ef8 <_dtoa_r+0xa98>
80006ed8:	e0 40 00 39 	cp.w	r0,57
80006edc:	c0 a0       	breq	80006ef0 <_dtoa_r+0xa90>
80006ede:	2f f0       	sub	r0,-1
80006ee0:	c0 c8       	rjmp	80006ef8 <_dtoa_r+0xa98>
80006ee2:	58 06       	cp.w	r6,0
80006ee4:	e0 8a 00 0c 	brle	80006efc <_dtoa_r+0xa9c>
80006ee8:	40 26       	lddsp	r6,sp[0x8]
80006eea:	e0 40 00 39 	cp.w	r0,57
80006eee:	c0 41       	brne	80006ef6 <_dtoa_r+0xa96>
80006ef0:	33 98       	mov	r8,57
80006ef2:	0a c8       	st.b	r5++,r8
80006ef4:	c6 78       	rjmp	80006fc2 <_dtoa_r+0xb62>
80006ef6:	2f f0       	sub	r0,-1
80006ef8:	0a c0       	st.b	r5++,r0
80006efa:	c7 58       	rjmp	80006fe4 <_dtoa_r+0xb84>
80006efc:	0a c0       	st.b	r5++,r0
80006efe:	40 9a       	lddsp	r10,sp[0x24]
80006f00:	40 e9       	lddsp	r9,sp[0x38]
80006f02:	12 3a       	cp.w	r10,r9
80006f04:	c4 30       	breq	80006f8a <_dtoa_r+0xb2a>
80006f06:	06 9b       	mov	r11,r3
80006f08:	30 09       	mov	r9,0
80006f0a:	30 aa       	mov	r10,10
80006f0c:	0e 9c       	mov	r12,r7
80006f0e:	e0 a0 09 59 	rcall	800081c0 <__multadd>
80006f12:	40 48       	lddsp	r8,sp[0x10]
80006f14:	18 93       	mov	r3,r12
80006f16:	08 38       	cp.w	r8,r4
80006f18:	c0 91       	brne	80006f2a <_dtoa_r+0xaca>
80006f1a:	10 9b       	mov	r11,r8
80006f1c:	30 09       	mov	r9,0
80006f1e:	30 aa       	mov	r10,10
80006f20:	0e 9c       	mov	r12,r7
80006f22:	e0 a0 09 4f 	rcall	800081c0 <__multadd>
80006f26:	50 4c       	stdsp	sp[0x10],r12
80006f28:	c0 e8       	rjmp	80006f44 <_dtoa_r+0xae4>
80006f2a:	40 4b       	lddsp	r11,sp[0x10]
80006f2c:	30 09       	mov	r9,0
80006f2e:	30 aa       	mov	r10,10
80006f30:	0e 9c       	mov	r12,r7
80006f32:	e0 a0 09 47 	rcall	800081c0 <__multadd>
80006f36:	08 9b       	mov	r11,r4
80006f38:	50 4c       	stdsp	sp[0x10],r12
80006f3a:	30 09       	mov	r9,0
80006f3c:	30 aa       	mov	r10,10
80006f3e:	0e 9c       	mov	r12,r7
80006f40:	e0 a0 09 40 	rcall	800081c0 <__multadd>
80006f44:	18 94       	mov	r4,r12
80006f46:	40 9c       	lddsp	r12,sp[0x24]
80006f48:	2f fc       	sub	r12,-1
80006f4a:	50 9c       	stdsp	sp[0x24],r12
80006f4c:	c7 9b       	rjmp	80006e3e <_dtoa_r+0x9de>
80006f4e:	30 18       	mov	r8,1
80006f50:	06 90       	mov	r0,r3
80006f52:	40 85       	lddsp	r5,sp[0x20]
80006f54:	08 93       	mov	r3,r4
80006f56:	0c 94       	mov	r4,r6
80006f58:	10 96       	mov	r6,r8
80006f5a:	04 9b       	mov	r11,r2
80006f5c:	00 9c       	mov	r12,r0
80006f5e:	fe b0 f9 f1 	rcall	80006340 <quorem>
80006f62:	2d 0c       	sub	r12,-48
80006f64:	0a cc       	st.b	r5++,r12
80006f66:	02 36       	cp.w	r6,r1
80006f68:	c0 a4       	brge	80006f7c <_dtoa_r+0xb1c>
80006f6a:	00 9b       	mov	r11,r0
80006f6c:	30 09       	mov	r9,0
80006f6e:	30 aa       	mov	r10,10
80006f70:	0e 9c       	mov	r12,r7
80006f72:	2f f6       	sub	r6,-1
80006f74:	e0 a0 09 26 	rcall	800081c0 <__multadd>
80006f78:	18 90       	mov	r0,r12
80006f7a:	cf 0b       	rjmp	80006f5a <_dtoa_r+0xafa>
80006f7c:	08 96       	mov	r6,r4
80006f7e:	30 0b       	mov	r11,0
80006f80:	06 94       	mov	r4,r3
80006f82:	50 4b       	stdsp	sp[0x10],r11
80006f84:	00 93       	mov	r3,r0
80006f86:	18 90       	mov	r0,r12
80006f88:	c0 28       	rjmp	80006f8c <_dtoa_r+0xb2c>
80006f8a:	40 26       	lddsp	r6,sp[0x8]
80006f8c:	06 9b       	mov	r11,r3
80006f8e:	30 1a       	mov	r10,1
80006f90:	0e 9c       	mov	r12,r7
80006f92:	e0 a0 08 4b 	rcall	80008028 <__lshift>
80006f96:	04 9b       	mov	r11,r2
80006f98:	18 93       	mov	r3,r12
80006f9a:	e0 a0 07 24 	rcall	80007de2 <__mcmp>
80006f9e:	e0 89 00 12 	brgt	80006fc2 <_dtoa_r+0xb62>
80006fa2:	c1 b1       	brne	80006fd8 <_dtoa_r+0xb78>
80006fa4:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006fa8:	c0 d1       	brne	80006fc2 <_dtoa_r+0xb62>
80006faa:	c1 78       	rjmp	80006fd8 <_dtoa_r+0xb78>
80006fac:	40 89       	lddsp	r9,sp[0x20]
80006fae:	12 38       	cp.w	r8,r9
80006fb0:	c0 30       	breq	80006fb6 <_dtoa_r+0xb56>
80006fb2:	10 95       	mov	r5,r8
80006fb4:	c0 88       	rjmp	80006fc4 <_dtoa_r+0xb64>
80006fb6:	2f f6       	sub	r6,-1
80006fb8:	50 66       	stdsp	sp[0x18],r6
80006fba:	33 18       	mov	r8,49
80006fbc:	40 8c       	lddsp	r12,sp[0x20]
80006fbe:	b8 88       	st.b	r12[0x0],r8
80006fc0:	c1 38       	rjmp	80006fe6 <_dtoa_r+0xb86>
80006fc2:	33 9a       	mov	r10,57
80006fc4:	0a 98       	mov	r8,r5
80006fc6:	11 79       	ld.ub	r9,--r8
80006fc8:	f4 09 18 00 	cp.b	r9,r10
80006fcc:	cf 00       	breq	80006fac <_dtoa_r+0xb4c>
80006fce:	2f f9       	sub	r9,-1
80006fd0:	b0 89       	st.b	r8[0x0],r9
80006fd2:	c0 98       	rjmp	80006fe4 <_dtoa_r+0xb84>
80006fd4:	10 95       	mov	r5,r8
80006fd6:	c0 28       	rjmp	80006fda <_dtoa_r+0xb7a>
80006fd8:	33 09       	mov	r9,48
80006fda:	0a 98       	mov	r8,r5
80006fdc:	11 7a       	ld.ub	r10,--r8
80006fde:	f2 0a 18 00 	cp.b	r10,r9
80006fe2:	cf 90       	breq	80006fd4 <_dtoa_r+0xb74>
80006fe4:	50 66       	stdsp	sp[0x18],r6
80006fe6:	04 9b       	mov	r11,r2
80006fe8:	0e 9c       	mov	r12,r7
80006fea:	e0 a0 07 15 	rcall	80007e14 <_Bfree>
80006fee:	58 04       	cp.w	r4,0
80006ff0:	c1 20       	breq	80007014 <_dtoa_r+0xbb4>
80006ff2:	40 4b       	lddsp	r11,sp[0x10]
80006ff4:	08 3b       	cp.w	r11,r4
80006ff6:	5f 19       	srne	r9
80006ff8:	58 0b       	cp.w	r11,0
80006ffa:	5f 18       	srne	r8
80006ffc:	f3 e8 00 08 	and	r8,r9,r8
80007000:	c0 40       	breq	80007008 <_dtoa_r+0xba8>
80007002:	0e 9c       	mov	r12,r7
80007004:	e0 a0 07 08 	rcall	80007e14 <_Bfree>
80007008:	08 9b       	mov	r11,r4
8000700a:	0e 9c       	mov	r12,r7
8000700c:	e0 a0 07 04 	rcall	80007e14 <_Bfree>
80007010:	c0 28       	rjmp	80007014 <_dtoa_r+0xbb4>
80007012:	50 66       	stdsp	sp[0x18],r6
80007014:	0e 9c       	mov	r12,r7
80007016:	06 9b       	mov	r11,r3
80007018:	e0 a0 06 fe 	rcall	80007e14 <_Bfree>
8000701c:	30 08       	mov	r8,0
8000701e:	aa 88       	st.b	r5[0x0],r8
80007020:	40 68       	lddsp	r8,sp[0x18]
80007022:	41 5a       	lddsp	r10,sp[0x54]
80007024:	2f f8       	sub	r8,-1
80007026:	41 29       	lddsp	r9,sp[0x48]
80007028:	95 08       	st.w	r10[0x0],r8
8000702a:	40 8c       	lddsp	r12,sp[0x20]
8000702c:	58 09       	cp.w	r9,0
8000702e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80007032:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80007036:	2e 6d       	sub	sp,-104
80007038:	d8 32       	popm	r0-r7,pc
8000703a:	d7 03       	nop

8000703c <_fflush_r>:
8000703c:	d4 21       	pushm	r4-r7,lr
8000703e:	16 97       	mov	r7,r11
80007040:	18 96       	mov	r6,r12
80007042:	76 48       	ld.w	r8,r11[0x10]
80007044:	58 08       	cp.w	r8,0
80007046:	c7 f0       	breq	80007144 <_fflush_r+0x108>
80007048:	58 0c       	cp.w	r12,0
8000704a:	c0 50       	breq	80007054 <_fflush_r+0x18>
8000704c:	78 68       	ld.w	r8,r12[0x18]
8000704e:	58 08       	cp.w	r8,0
80007050:	c0 21       	brne	80007054 <_fflush_r+0x18>
80007052:	cc dc       	rcall	800071ec <__sinit>
80007054:	fe c8 d0 98 	sub	r8,pc,-12136
80007058:	10 37       	cp.w	r7,r8
8000705a:	c0 31       	brne	80007060 <_fflush_r+0x24>
8000705c:	6c 07       	ld.w	r7,r6[0x0]
8000705e:	c0 c8       	rjmp	80007076 <_fflush_r+0x3a>
80007060:	fe c8 d0 84 	sub	r8,pc,-12156
80007064:	10 37       	cp.w	r7,r8
80007066:	c0 31       	brne	8000706c <_fflush_r+0x30>
80007068:	6c 17       	ld.w	r7,r6[0x4]
8000706a:	c0 68       	rjmp	80007076 <_fflush_r+0x3a>
8000706c:	fe c8 d0 70 	sub	r8,pc,-12176
80007070:	10 37       	cp.w	r7,r8
80007072:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007076:	8e 6a       	ld.sh	r10,r7[0xc]
80007078:	14 98       	mov	r8,r10
8000707a:	ed ba 00 03 	bld	r10,0x3
8000707e:	c4 20       	breq	80007102 <_fflush_r+0xc6>
80007080:	ab ba       	sbr	r10,0xb
80007082:	ae 6a       	st.h	r7[0xc],r10
80007084:	6e 18       	ld.w	r8,r7[0x4]
80007086:	58 08       	cp.w	r8,0
80007088:	e0 89 00 06 	brgt	80007094 <_fflush_r+0x58>
8000708c:	6f 08       	ld.w	r8,r7[0x40]
8000708e:	58 08       	cp.w	r8,0
80007090:	e0 8a 00 5a 	brle	80007144 <_fflush_r+0x108>
80007094:	6e b8       	ld.w	r8,r7[0x2c]
80007096:	58 08       	cp.w	r8,0
80007098:	c5 60       	breq	80007144 <_fflush_r+0x108>
8000709a:	e2 1a 10 00 	andl	r10,0x1000,COH
8000709e:	c0 30       	breq	800070a4 <_fflush_r+0x68>
800070a0:	6f 55       	ld.w	r5,r7[0x54]
800070a2:	c0 f8       	rjmp	800070c0 <_fflush_r+0x84>
800070a4:	30 19       	mov	r9,1
800070a6:	6e 8b       	ld.w	r11,r7[0x20]
800070a8:	0c 9c       	mov	r12,r6
800070aa:	5d 18       	icall	r8
800070ac:	18 95       	mov	r5,r12
800070ae:	5b fc       	cp.w	r12,-1
800070b0:	c0 81       	brne	800070c0 <_fflush_r+0x84>
800070b2:	6c 38       	ld.w	r8,r6[0xc]
800070b4:	59 d8       	cp.w	r8,29
800070b6:	c4 70       	breq	80007144 <_fflush_r+0x108>
800070b8:	8e 68       	ld.sh	r8,r7[0xc]
800070ba:	a7 a8       	sbr	r8,0x6
800070bc:	ae 68       	st.h	r7[0xc],r8
800070be:	d8 22       	popm	r4-r7,pc
800070c0:	8e 68       	ld.sh	r8,r7[0xc]
800070c2:	ed b8 00 02 	bld	r8,0x2
800070c6:	c0 91       	brne	800070d8 <_fflush_r+0x9c>
800070c8:	6e 18       	ld.w	r8,r7[0x4]
800070ca:	10 15       	sub	r5,r8
800070cc:	6e d8       	ld.w	r8,r7[0x34]
800070ce:	58 08       	cp.w	r8,0
800070d0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800070d4:	eb d8 e1 15 	subne	r5,r5,r8
800070d8:	6e b8       	ld.w	r8,r7[0x2c]
800070da:	0c 9c       	mov	r12,r6
800070dc:	30 09       	mov	r9,0
800070de:	0a 9a       	mov	r10,r5
800070e0:	6e 8b       	ld.w	r11,r7[0x20]
800070e2:	5d 18       	icall	r8
800070e4:	8e 68       	ld.sh	r8,r7[0xc]
800070e6:	0a 3c       	cp.w	r12,r5
800070e8:	c2 61       	brne	80007134 <_fflush_r+0xf8>
800070ea:	ab d8       	cbr	r8,0xb
800070ec:	30 0c       	mov	r12,0
800070ee:	6e 49       	ld.w	r9,r7[0x10]
800070f0:	ae 68       	st.h	r7[0xc],r8
800070f2:	8f 1c       	st.w	r7[0x4],r12
800070f4:	8f 09       	st.w	r7[0x0],r9
800070f6:	ed b8 00 0c 	bld	r8,0xc
800070fa:	c2 51       	brne	80007144 <_fflush_r+0x108>
800070fc:	ef 45 00 54 	st.w	r7[84],r5
80007100:	d8 22       	popm	r4-r7,pc
80007102:	6e 45       	ld.w	r5,r7[0x10]
80007104:	58 05       	cp.w	r5,0
80007106:	c1 f0       	breq	80007144 <_fflush_r+0x108>
80007108:	6e 04       	ld.w	r4,r7[0x0]
8000710a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000710e:	8f 05       	st.w	r7[0x0],r5
80007110:	f9 b8 01 00 	movne	r8,0
80007114:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007118:	0a 14       	sub	r4,r5
8000711a:	8f 28       	st.w	r7[0x8],r8
8000711c:	c1 18       	rjmp	8000713e <_fflush_r+0x102>
8000711e:	08 99       	mov	r9,r4
80007120:	0a 9a       	mov	r10,r5
80007122:	6e a8       	ld.w	r8,r7[0x28]
80007124:	6e 8b       	ld.w	r11,r7[0x20]
80007126:	0c 9c       	mov	r12,r6
80007128:	5d 18       	icall	r8
8000712a:	18 14       	sub	r4,r12
8000712c:	58 0c       	cp.w	r12,0
8000712e:	e0 89 00 07 	brgt	8000713c <_fflush_r+0x100>
80007132:	8e 68       	ld.sh	r8,r7[0xc]
80007134:	a7 a8       	sbr	r8,0x6
80007136:	3f fc       	mov	r12,-1
80007138:	ae 68       	st.h	r7[0xc],r8
8000713a:	d8 22       	popm	r4-r7,pc
8000713c:	18 05       	add	r5,r12
8000713e:	58 04       	cp.w	r4,0
80007140:	fe 99 ff ef 	brgt	8000711e <_fflush_r+0xe2>
80007144:	d8 2a       	popm	r4-r7,pc,r12=0
80007146:	d7 03       	nop

80007148 <__sfp_lock_acquire>:
80007148:	5e fc       	retal	r12

8000714a <__sfp_lock_release>:
8000714a:	5e fc       	retal	r12

8000714c <_cleanup_r>:
8000714c:	d4 01       	pushm	lr
8000714e:	fe cb e8 7a 	sub	r11,pc,-6022
80007152:	e0 a0 02 fd 	rcall	8000774c <_fwalk>
80007156:	d8 02       	popm	pc

80007158 <__sfmoreglue>:
80007158:	d4 21       	pushm	r4-r7,lr
8000715a:	16 95       	mov	r5,r11
8000715c:	f6 06 10 5c 	mul	r6,r11,92
80007160:	ec cb ff f4 	sub	r11,r6,-12
80007164:	e0 a0 03 84 	rcall	8000786c <_malloc_r>
80007168:	18 97       	mov	r7,r12
8000716a:	c0 90       	breq	8000717c <__sfmoreglue+0x24>
8000716c:	99 15       	st.w	r12[0x4],r5
8000716e:	30 0b       	mov	r11,0
80007170:	2f 4c       	sub	r12,-12
80007172:	0c 9a       	mov	r10,r6
80007174:	8f 2c       	st.w	r7[0x8],r12
80007176:	8f 0b       	st.w	r7[0x0],r11
80007178:	fe b0 e7 33 	rcall	80003fde <memset>
8000717c:	0e 9c       	mov	r12,r7
8000717e:	d8 22       	popm	r4-r7,pc

80007180 <__sfp>:
80007180:	d4 21       	pushm	r4-r7,lr
80007182:	fe c8 d1 62 	sub	r8,pc,-11934
80007186:	18 96       	mov	r6,r12
80007188:	70 07       	ld.w	r7,r8[0x0]
8000718a:	6e 68       	ld.w	r8,r7[0x18]
8000718c:	58 08       	cp.w	r8,0
8000718e:	c0 31       	brne	80007194 <__sfp+0x14>
80007190:	0e 9c       	mov	r12,r7
80007192:	c2 dc       	rcall	800071ec <__sinit>
80007194:	ee c7 ff 28 	sub	r7,r7,-216
80007198:	30 05       	mov	r5,0
8000719a:	6e 2c       	ld.w	r12,r7[0x8]
8000719c:	6e 18       	ld.w	r8,r7[0x4]
8000719e:	c0 68       	rjmp	800071aa <__sfp+0x2a>
800071a0:	98 69       	ld.sh	r9,r12[0xc]
800071a2:	ea 09 19 00 	cp.h	r9,r5
800071a6:	c1 10       	breq	800071c8 <__sfp+0x48>
800071a8:	2a 4c       	sub	r12,-92
800071aa:	20 18       	sub	r8,1
800071ac:	cf a7       	brpl	800071a0 <__sfp+0x20>
800071ae:	6e 08       	ld.w	r8,r7[0x0]
800071b0:	58 08       	cp.w	r8,0
800071b2:	c0 61       	brne	800071be <__sfp+0x3e>
800071b4:	30 4b       	mov	r11,4
800071b6:	0c 9c       	mov	r12,r6
800071b8:	cd 0f       	rcall	80007158 <__sfmoreglue>
800071ba:	8f 0c       	st.w	r7[0x0],r12
800071bc:	c0 30       	breq	800071c2 <__sfp+0x42>
800071be:	6e 07       	ld.w	r7,r7[0x0]
800071c0:	ce db       	rjmp	8000719a <__sfp+0x1a>
800071c2:	30 c8       	mov	r8,12
800071c4:	8d 38       	st.w	r6[0xc],r8
800071c6:	d8 22       	popm	r4-r7,pc
800071c8:	30 08       	mov	r8,0
800071ca:	f9 48 00 4c 	st.w	r12[76],r8
800071ce:	99 08       	st.w	r12[0x0],r8
800071d0:	99 28       	st.w	r12[0x8],r8
800071d2:	99 18       	st.w	r12[0x4],r8
800071d4:	99 48       	st.w	r12[0x10],r8
800071d6:	99 58       	st.w	r12[0x14],r8
800071d8:	99 68       	st.w	r12[0x18],r8
800071da:	99 d8       	st.w	r12[0x34],r8
800071dc:	99 e8       	st.w	r12[0x38],r8
800071de:	f9 48 00 48 	st.w	r12[72],r8
800071e2:	3f f8       	mov	r8,-1
800071e4:	b8 78       	st.h	r12[0xe],r8
800071e6:	30 18       	mov	r8,1
800071e8:	b8 68       	st.h	r12[0xc],r8
800071ea:	d8 22       	popm	r4-r7,pc

800071ec <__sinit>:
800071ec:	d4 21       	pushm	r4-r7,lr
800071ee:	18 96       	mov	r6,r12
800071f0:	78 67       	ld.w	r7,r12[0x18]
800071f2:	58 07       	cp.w	r7,0
800071f4:	c4 91       	brne	80007286 <__sinit+0x9a>
800071f6:	fe c8 00 aa 	sub	r8,pc,170
800071fa:	30 15       	mov	r5,1
800071fc:	99 a8       	st.w	r12[0x28],r8
800071fe:	f9 47 00 d8 	st.w	r12[216],r7
80007202:	f9 47 00 dc 	st.w	r12[220],r7
80007206:	f9 47 00 e0 	st.w	r12[224],r7
8000720a:	99 65       	st.w	r12[0x18],r5
8000720c:	cb af       	rcall	80007180 <__sfp>
8000720e:	8d 0c       	st.w	r6[0x0],r12
80007210:	0c 9c       	mov	r12,r6
80007212:	cb 7f       	rcall	80007180 <__sfp>
80007214:	8d 1c       	st.w	r6[0x4],r12
80007216:	0c 9c       	mov	r12,r6
80007218:	cb 4f       	rcall	80007180 <__sfp>
8000721a:	6c 09       	ld.w	r9,r6[0x0]
8000721c:	30 48       	mov	r8,4
8000721e:	93 07       	st.w	r9[0x0],r7
80007220:	b2 68       	st.h	r9[0xc],r8
80007222:	93 17       	st.w	r9[0x4],r7
80007224:	93 27       	st.w	r9[0x8],r7
80007226:	6c 18       	ld.w	r8,r6[0x4]
80007228:	b2 77       	st.h	r9[0xe],r7
8000722a:	93 47       	st.w	r9[0x10],r7
8000722c:	93 57       	st.w	r9[0x14],r7
8000722e:	93 67       	st.w	r9[0x18],r7
80007230:	93 89       	st.w	r9[0x20],r9
80007232:	91 07       	st.w	r8[0x0],r7
80007234:	91 17       	st.w	r8[0x4],r7
80007236:	91 27       	st.w	r8[0x8],r7
80007238:	fe ce eb f4 	sub	lr,pc,-5132
8000723c:	fe cb ec 24 	sub	r11,pc,-5084
80007240:	93 9e       	st.w	r9[0x24],lr
80007242:	93 ab       	st.w	r9[0x28],r11
80007244:	fe ca ec 4c 	sub	r10,pc,-5044
80007248:	fe c4 ec 58 	sub	r4,pc,-5032
8000724c:	93 ba       	st.w	r9[0x2c],r10
8000724e:	93 c4       	st.w	r9[0x30],r4
80007250:	30 99       	mov	r9,9
80007252:	b0 69       	st.h	r8[0xc],r9
80007254:	b0 75       	st.h	r8[0xe],r5
80007256:	91 c4       	st.w	r8[0x30],r4
80007258:	91 47       	st.w	r8[0x10],r7
8000725a:	91 57       	st.w	r8[0x14],r7
8000725c:	91 67       	st.w	r8[0x18],r7
8000725e:	91 88       	st.w	r8[0x20],r8
80007260:	91 9e       	st.w	r8[0x24],lr
80007262:	91 ab       	st.w	r8[0x28],r11
80007264:	91 ba       	st.w	r8[0x2c],r10
80007266:	8d 2c       	st.w	r6[0x8],r12
80007268:	31 28       	mov	r8,18
8000726a:	99 07       	st.w	r12[0x0],r7
8000726c:	b8 68       	st.h	r12[0xc],r8
8000726e:	99 17       	st.w	r12[0x4],r7
80007270:	99 27       	st.w	r12[0x8],r7
80007272:	30 28       	mov	r8,2
80007274:	b8 78       	st.h	r12[0xe],r8
80007276:	99 c4       	st.w	r12[0x30],r4
80007278:	99 67       	st.w	r12[0x18],r7
8000727a:	99 9e       	st.w	r12[0x24],lr
8000727c:	99 ab       	st.w	r12[0x28],r11
8000727e:	99 ba       	st.w	r12[0x2c],r10
80007280:	99 47       	st.w	r12[0x10],r7
80007282:	99 57       	st.w	r12[0x14],r7
80007284:	99 8c       	st.w	r12[0x20],r12
80007286:	d8 22       	popm	r4-r7,pc

80007288 <_malloc_trim_r>:
80007288:	d4 21       	pushm	r4-r7,lr
8000728a:	16 95       	mov	r5,r11
8000728c:	18 97       	mov	r7,r12
8000728e:	e0 a0 05 31 	rcall	80007cf0 <__malloc_lock>
80007292:	e0 64 01 1c 	mov	r4,284
80007296:	68 28       	ld.w	r8,r4[0x8]
80007298:	70 16       	ld.w	r6,r8[0x4]
8000729a:	e0 16 ff fc 	andl	r6,0xfffc
8000729e:	ec c8 ff 91 	sub	r8,r6,-111
800072a2:	f0 05 01 05 	sub	r5,r8,r5
800072a6:	e0 15 ff 80 	andl	r5,0xff80
800072aa:	ea c5 00 80 	sub	r5,r5,128
800072ae:	e0 45 00 7f 	cp.w	r5,127
800072b2:	e0 8a 00 25 	brle	800072fc <_malloc_trim_r+0x74>
800072b6:	30 0b       	mov	r11,0
800072b8:	0e 9c       	mov	r12,r7
800072ba:	e0 a0 09 8b 	rcall	800085d0 <_sbrk_r>
800072be:	68 28       	ld.w	r8,r4[0x8]
800072c0:	0c 08       	add	r8,r6
800072c2:	10 3c       	cp.w	r12,r8
800072c4:	c1 c1       	brne	800072fc <_malloc_trim_r+0x74>
800072c6:	ea 0b 11 00 	rsub	r11,r5,0
800072ca:	0e 9c       	mov	r12,r7
800072cc:	e0 a0 09 82 	rcall	800085d0 <_sbrk_r>
800072d0:	5b fc       	cp.w	r12,-1
800072d2:	c1 91       	brne	80007304 <_malloc_trim_r+0x7c>
800072d4:	30 0b       	mov	r11,0
800072d6:	0e 9c       	mov	r12,r7
800072d8:	e0 a0 09 7c 	rcall	800085d0 <_sbrk_r>
800072dc:	68 28       	ld.w	r8,r4[0x8]
800072de:	f8 08 01 09 	sub	r9,r12,r8
800072e2:	58 f9       	cp.w	r9,15
800072e4:	e0 8a 00 0c 	brle	800072fc <_malloc_trim_r+0x74>
800072e8:	a1 a9       	sbr	r9,0x0
800072ea:	91 19       	st.w	r8[0x4],r9
800072ec:	e0 68 05 28 	mov	r8,1320
800072f0:	70 09       	ld.w	r9,r8[0x0]
800072f2:	e0 68 06 54 	mov	r8,1620
800072f6:	f8 09 01 09 	sub	r9,r12,r9
800072fa:	91 09       	st.w	r8[0x0],r9
800072fc:	0e 9c       	mov	r12,r7
800072fe:	e0 a0 04 fa 	rcall	80007cf2 <__malloc_unlock>
80007302:	d8 2a       	popm	r4-r7,pc,r12=0
80007304:	68 28       	ld.w	r8,r4[0x8]
80007306:	0a 16       	sub	r6,r5
80007308:	a1 a6       	sbr	r6,0x0
8000730a:	91 16       	st.w	r8[0x4],r6
8000730c:	e0 68 06 54 	mov	r8,1620
80007310:	70 09       	ld.w	r9,r8[0x0]
80007312:	0a 19       	sub	r9,r5
80007314:	0e 9c       	mov	r12,r7
80007316:	91 09       	st.w	r8[0x0],r9
80007318:	e0 a0 04 ed 	rcall	80007cf2 <__malloc_unlock>
8000731c:	da 2a       	popm	r4-r7,pc,r12=1
8000731e:	d7 03       	nop

80007320 <_free_r>:
80007320:	d4 21       	pushm	r4-r7,lr
80007322:	16 96       	mov	r6,r11
80007324:	18 97       	mov	r7,r12
80007326:	58 0b       	cp.w	r11,0
80007328:	e0 80 00 c0 	breq	800074a8 <_free_r+0x188>
8000732c:	e0 a0 04 e2 	rcall	80007cf0 <__malloc_lock>
80007330:	20 86       	sub	r6,8
80007332:	e0 6a 01 1c 	mov	r10,284
80007336:	6c 18       	ld.w	r8,r6[0x4]
80007338:	74 2e       	ld.w	lr,r10[0x8]
8000733a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000733e:	a1 c8       	cbr	r8,0x0
80007340:	ec 08 00 09 	add	r9,r6,r8
80007344:	72 1b       	ld.w	r11,r9[0x4]
80007346:	e0 1b ff fc 	andl	r11,0xfffc
8000734a:	1c 39       	cp.w	r9,lr
8000734c:	c1 e1       	brne	80007388 <_free_r+0x68>
8000734e:	f6 08 00 08 	add	r8,r11,r8
80007352:	58 0c       	cp.w	r12,0
80007354:	c0 81       	brne	80007364 <_free_r+0x44>
80007356:	6c 09       	ld.w	r9,r6[0x0]
80007358:	12 16       	sub	r6,r9
8000735a:	12 08       	add	r8,r9
8000735c:	6c 3b       	ld.w	r11,r6[0xc]
8000735e:	6c 29       	ld.w	r9,r6[0x8]
80007360:	97 29       	st.w	r11[0x8],r9
80007362:	93 3b       	st.w	r9[0xc],r11
80007364:	10 99       	mov	r9,r8
80007366:	95 26       	st.w	r10[0x8],r6
80007368:	a1 a9       	sbr	r9,0x0
8000736a:	8d 19       	st.w	r6[0x4],r9
8000736c:	e0 69 05 24 	mov	r9,1316
80007370:	72 09       	ld.w	r9,r9[0x0]
80007372:	12 38       	cp.w	r8,r9
80007374:	c0 63       	brcs	80007380 <_free_r+0x60>
80007376:	e0 68 06 50 	mov	r8,1616
8000737a:	0e 9c       	mov	r12,r7
8000737c:	70 0b       	ld.w	r11,r8[0x0]
8000737e:	c8 5f       	rcall	80007288 <_malloc_trim_r>
80007380:	0e 9c       	mov	r12,r7
80007382:	e0 a0 04 b8 	rcall	80007cf2 <__malloc_unlock>
80007386:	d8 22       	popm	r4-r7,pc
80007388:	93 1b       	st.w	r9[0x4],r11
8000738a:	58 0c       	cp.w	r12,0
8000738c:	c0 30       	breq	80007392 <_free_r+0x72>
8000738e:	30 0c       	mov	r12,0
80007390:	c1 08       	rjmp	800073b0 <_free_r+0x90>
80007392:	6c 0e       	ld.w	lr,r6[0x0]
80007394:	f4 c5 ff f8 	sub	r5,r10,-8
80007398:	1c 16       	sub	r6,lr
8000739a:	1c 08       	add	r8,lr
8000739c:	6c 2e       	ld.w	lr,r6[0x8]
8000739e:	0a 3e       	cp.w	lr,r5
800073a0:	f9 bc 00 01 	moveq	r12,1
800073a4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800073a8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800073ac:	fd f5 1a 03 	st.wne	lr[0xc],r5
800073b0:	f2 0b 00 0e 	add	lr,r9,r11
800073b4:	7c 1e       	ld.w	lr,lr[0x4]
800073b6:	ed be 00 00 	bld	lr,0x0
800073ba:	c1 40       	breq	800073e2 <_free_r+0xc2>
800073bc:	16 08       	add	r8,r11
800073be:	58 0c       	cp.w	r12,0
800073c0:	c0 d1       	brne	800073da <_free_r+0xba>
800073c2:	e0 6e 01 1c 	mov	lr,284
800073c6:	72 2b       	ld.w	r11,r9[0x8]
800073c8:	2f 8e       	sub	lr,-8
800073ca:	1c 3b       	cp.w	r11,lr
800073cc:	c0 71       	brne	800073da <_free_r+0xba>
800073ce:	97 36       	st.w	r11[0xc],r6
800073d0:	97 26       	st.w	r11[0x8],r6
800073d2:	8d 2b       	st.w	r6[0x8],r11
800073d4:	8d 3b       	st.w	r6[0xc],r11
800073d6:	30 1c       	mov	r12,1
800073d8:	c0 58       	rjmp	800073e2 <_free_r+0xc2>
800073da:	72 2b       	ld.w	r11,r9[0x8]
800073dc:	72 39       	ld.w	r9,r9[0xc]
800073de:	93 2b       	st.w	r9[0x8],r11
800073e0:	97 39       	st.w	r11[0xc],r9
800073e2:	10 99       	mov	r9,r8
800073e4:	ec 08 09 08 	st.w	r6[r8],r8
800073e8:	a1 a9       	sbr	r9,0x0
800073ea:	8d 19       	st.w	r6[0x4],r9
800073ec:	58 0c       	cp.w	r12,0
800073ee:	c5 a1       	brne	800074a2 <_free_r+0x182>
800073f0:	e0 48 01 ff 	cp.w	r8,511
800073f4:	e0 8b 00 13 	brhi	8000741a <_free_r+0xfa>
800073f8:	a3 98       	lsr	r8,0x3
800073fa:	f4 08 00 39 	add	r9,r10,r8<<0x3
800073fe:	72 2b       	ld.w	r11,r9[0x8]
80007400:	8d 39       	st.w	r6[0xc],r9
80007402:	8d 2b       	st.w	r6[0x8],r11
80007404:	97 36       	st.w	r11[0xc],r6
80007406:	93 26       	st.w	r9[0x8],r6
80007408:	a3 48       	asr	r8,0x2
8000740a:	74 19       	ld.w	r9,r10[0x4]
8000740c:	30 1b       	mov	r11,1
8000740e:	f6 08 09 48 	lsl	r8,r11,r8
80007412:	f3 e8 10 08 	or	r8,r9,r8
80007416:	95 18       	st.w	r10[0x4],r8
80007418:	c4 58       	rjmp	800074a2 <_free_r+0x182>
8000741a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000741e:	58 4b       	cp.w	r11,4
80007420:	e0 8b 00 06 	brhi	8000742c <_free_r+0x10c>
80007424:	f0 0b 16 06 	lsr	r11,r8,0x6
80007428:	2c 8b       	sub	r11,-56
8000742a:	c2 08       	rjmp	8000746a <_free_r+0x14a>
8000742c:	59 4b       	cp.w	r11,20
8000742e:	e0 8b 00 04 	brhi	80007436 <_free_r+0x116>
80007432:	2a 5b       	sub	r11,-91
80007434:	c1 b8       	rjmp	8000746a <_free_r+0x14a>
80007436:	e0 4b 00 54 	cp.w	r11,84
8000743a:	e0 8b 00 06 	brhi	80007446 <_free_r+0x126>
8000743e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007442:	29 2b       	sub	r11,-110
80007444:	c1 38       	rjmp	8000746a <_free_r+0x14a>
80007446:	e0 4b 01 54 	cp.w	r11,340
8000744a:	e0 8b 00 06 	brhi	80007456 <_free_r+0x136>
8000744e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007452:	28 9b       	sub	r11,-119
80007454:	c0 b8       	rjmp	8000746a <_free_r+0x14a>
80007456:	e0 4b 05 54 	cp.w	r11,1364
8000745a:	e0 88 00 05 	brls	80007464 <_free_r+0x144>
8000745e:	37 eb       	mov	r11,126
80007460:	c0 58       	rjmp	8000746a <_free_r+0x14a>
80007462:	d7 03       	nop
80007464:	f0 0b 16 12 	lsr	r11,r8,0x12
80007468:	28 4b       	sub	r11,-124
8000746a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000746e:	78 29       	ld.w	r9,r12[0x8]
80007470:	18 39       	cp.w	r9,r12
80007472:	c0 e1       	brne	8000748e <_free_r+0x16e>
80007474:	74 18       	ld.w	r8,r10[0x4]
80007476:	a3 4b       	asr	r11,0x2
80007478:	30 1c       	mov	r12,1
8000747a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000747e:	f1 eb 10 0b 	or	r11,r8,r11
80007482:	12 98       	mov	r8,r9
80007484:	95 1b       	st.w	r10[0x4],r11
80007486:	c0 a8       	rjmp	8000749a <_free_r+0x17a>
80007488:	72 29       	ld.w	r9,r9[0x8]
8000748a:	18 39       	cp.w	r9,r12
8000748c:	c0 60       	breq	80007498 <_free_r+0x178>
8000748e:	72 1a       	ld.w	r10,r9[0x4]
80007490:	e0 1a ff fc 	andl	r10,0xfffc
80007494:	14 38       	cp.w	r8,r10
80007496:	cf 93       	brcs	80007488 <_free_r+0x168>
80007498:	72 38       	ld.w	r8,r9[0xc]
8000749a:	8d 38       	st.w	r6[0xc],r8
8000749c:	8d 29       	st.w	r6[0x8],r9
8000749e:	93 36       	st.w	r9[0xc],r6
800074a0:	91 26       	st.w	r8[0x8],r6
800074a2:	0e 9c       	mov	r12,r7
800074a4:	e0 a0 04 27 	rcall	80007cf2 <__malloc_unlock>
800074a8:	d8 22       	popm	r4-r7,pc
800074aa:	d7 03       	nop

800074ac <__sfvwrite_r>:
800074ac:	d4 31       	pushm	r0-r7,lr
800074ae:	20 3d       	sub	sp,12
800074b0:	14 94       	mov	r4,r10
800074b2:	18 95       	mov	r5,r12
800074b4:	16 97       	mov	r7,r11
800074b6:	74 28       	ld.w	r8,r10[0x8]
800074b8:	58 08       	cp.w	r8,0
800074ba:	e0 80 01 45 	breq	80007744 <__sfvwrite_r+0x298>
800074be:	96 68       	ld.sh	r8,r11[0xc]
800074c0:	ed b8 00 03 	bld	r8,0x3
800074c4:	c0 41       	brne	800074cc <__sfvwrite_r+0x20>
800074c6:	76 48       	ld.w	r8,r11[0x10]
800074c8:	58 08       	cp.w	r8,0
800074ca:	c0 c1       	brne	800074e2 <__sfvwrite_r+0x36>
800074cc:	0e 9b       	mov	r11,r7
800074ce:	0a 9c       	mov	r12,r5
800074d0:	fe b0 f6 ca 	rcall	80006264 <__swsetup_r>
800074d4:	c0 70       	breq	800074e2 <__sfvwrite_r+0x36>
800074d6:	8e 68       	ld.sh	r8,r7[0xc]
800074d8:	a7 a8       	sbr	r8,0x6
800074da:	ae 68       	st.h	r7[0xc],r8
800074dc:	30 98       	mov	r8,9
800074de:	8b 38       	st.w	r5[0xc],r8
800074e0:	c3 09       	rjmp	80007740 <__sfvwrite_r+0x294>
800074e2:	8e 63       	ld.sh	r3,r7[0xc]
800074e4:	68 00       	ld.w	r0,r4[0x0]
800074e6:	06 96       	mov	r6,r3
800074e8:	e2 16 00 02 	andl	r6,0x2,COH
800074ec:	c2 10       	breq	8000752e <__sfvwrite_r+0x82>
800074ee:	30 03       	mov	r3,0
800074f0:	e0 62 04 00 	mov	r2,1024
800074f4:	06 96       	mov	r6,r3
800074f6:	c0 48       	rjmp	800074fe <__sfvwrite_r+0x52>
800074f8:	60 03       	ld.w	r3,r0[0x0]
800074fa:	60 16       	ld.w	r6,r0[0x4]
800074fc:	2f 80       	sub	r0,-8
800074fe:	58 06       	cp.w	r6,0
80007500:	cf c0       	breq	800074f8 <__sfvwrite_r+0x4c>
80007502:	e0 46 04 00 	cp.w	r6,1024
80007506:	ec 09 17 80 	movls	r9,r6
8000750a:	e4 09 17 b0 	movhi	r9,r2
8000750e:	06 9a       	mov	r10,r3
80007510:	6e a8       	ld.w	r8,r7[0x28]
80007512:	6e 8b       	ld.w	r11,r7[0x20]
80007514:	0a 9c       	mov	r12,r5
80007516:	5d 18       	icall	r8
80007518:	18 16       	sub	r6,r12
8000751a:	58 0c       	cp.w	r12,0
8000751c:	e0 8a 01 0f 	brle	8000773a <__sfvwrite_r+0x28e>
80007520:	68 28       	ld.w	r8,r4[0x8]
80007522:	18 18       	sub	r8,r12
80007524:	89 28       	st.w	r4[0x8],r8
80007526:	e0 80 01 0f 	breq	80007744 <__sfvwrite_r+0x298>
8000752a:	18 03       	add	r3,r12
8000752c:	ce 9b       	rjmp	800074fe <__sfvwrite_r+0x52>
8000752e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007532:	c0 70       	breq	80007540 <__sfvwrite_r+0x94>
80007534:	50 06       	stdsp	sp[0x0],r6
80007536:	0c 93       	mov	r3,r6
80007538:	0c 91       	mov	r1,r6
8000753a:	50 15       	stdsp	sp[0x4],r5
8000753c:	08 92       	mov	r2,r4
8000753e:	c9 e8       	rjmp	8000767a <__sfvwrite_r+0x1ce>
80007540:	06 96       	mov	r6,r3
80007542:	08 91       	mov	r1,r4
80007544:	c0 48       	rjmp	8000754c <__sfvwrite_r+0xa0>
80007546:	60 03       	ld.w	r3,r0[0x0]
80007548:	60 16       	ld.w	r6,r0[0x4]
8000754a:	2f 80       	sub	r0,-8
8000754c:	58 06       	cp.w	r6,0
8000754e:	cf c0       	breq	80007546 <__sfvwrite_r+0x9a>
80007550:	8e 68       	ld.sh	r8,r7[0xc]
80007552:	6e 24       	ld.w	r4,r7[0x8]
80007554:	10 99       	mov	r9,r8
80007556:	e2 19 02 00 	andl	r9,0x200,COH
8000755a:	c5 50       	breq	80007604 <__sfvwrite_r+0x158>
8000755c:	08 36       	cp.w	r6,r4
8000755e:	c4 33       	brcs	800075e4 <__sfvwrite_r+0x138>
80007560:	10 99       	mov	r9,r8
80007562:	e2 19 04 80 	andl	r9,0x480,COH
80007566:	c3 f0       	breq	800075e4 <__sfvwrite_r+0x138>
80007568:	6e 4b       	ld.w	r11,r7[0x10]
8000756a:	6e 09       	ld.w	r9,r7[0x0]
8000756c:	16 19       	sub	r9,r11
8000756e:	50 09       	stdsp	sp[0x0],r9
80007570:	6e 59       	ld.w	r9,r7[0x14]
80007572:	10 9c       	mov	r12,r8
80007574:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007578:	30 28       	mov	r8,2
8000757a:	f4 08 0c 08 	divs	r8,r10,r8
8000757e:	fa e9 00 04 	st.d	sp[4],r8
80007582:	10 94       	mov	r4,r8
80007584:	40 09       	lddsp	r9,sp[0x0]
80007586:	e2 1c 04 00 	andl	r12,0x400,COH
8000758a:	2f f9       	sub	r9,-1
8000758c:	0c 09       	add	r9,r6
8000758e:	12 38       	cp.w	r8,r9
80007590:	f2 04 17 30 	movlo	r4,r9
80007594:	58 0c       	cp.w	r12,0
80007596:	c1 00       	breq	800075b6 <__sfvwrite_r+0x10a>
80007598:	08 9b       	mov	r11,r4
8000759a:	0a 9c       	mov	r12,r5
8000759c:	c6 8d       	rcall	8000786c <_malloc_r>
8000759e:	18 92       	mov	r2,r12
800075a0:	c1 40       	breq	800075c8 <__sfvwrite_r+0x11c>
800075a2:	40 0a       	lddsp	r10,sp[0x0]
800075a4:	6e 4b       	ld.w	r11,r7[0x10]
800075a6:	fe b0 e4 78 	rcall	80003e96 <memcpy>
800075aa:	8e 68       	ld.sh	r8,r7[0xc]
800075ac:	e0 18 fb 7f 	andl	r8,0xfb7f
800075b0:	a7 b8       	sbr	r8,0x7
800075b2:	ae 68       	st.h	r7[0xc],r8
800075b4:	c0 d8       	rjmp	800075ce <__sfvwrite_r+0x122>
800075b6:	08 9a       	mov	r10,r4
800075b8:	0a 9c       	mov	r12,r5
800075ba:	e0 a0 06 87 	rcall	800082c8 <_realloc_r>
800075be:	18 92       	mov	r2,r12
800075c0:	c0 71       	brne	800075ce <__sfvwrite_r+0x122>
800075c2:	6e 4b       	ld.w	r11,r7[0x10]
800075c4:	0a 9c       	mov	r12,r5
800075c6:	ca de       	rcall	80007320 <_free_r>
800075c8:	30 c8       	mov	r8,12
800075ca:	8b 38       	st.w	r5[0xc],r8
800075cc:	cb 78       	rjmp	8000773a <__sfvwrite_r+0x28e>
800075ce:	40 0a       	lddsp	r10,sp[0x0]
800075d0:	40 09       	lddsp	r9,sp[0x0]
800075d2:	e8 0a 01 0a 	sub	r10,r4,r10
800075d6:	e4 09 00 08 	add	r8,r2,r9
800075da:	8f 54       	st.w	r7[0x14],r4
800075dc:	8f 2a       	st.w	r7[0x8],r10
800075de:	8f 08       	st.w	r7[0x0],r8
800075e0:	8f 42       	st.w	r7[0x10],r2
800075e2:	0c 94       	mov	r4,r6
800075e4:	08 36       	cp.w	r6,r4
800075e6:	ec 04 17 30 	movlo	r4,r6
800075ea:	06 9b       	mov	r11,r3
800075ec:	08 9a       	mov	r10,r4
800075ee:	6e 0c       	ld.w	r12,r7[0x0]
800075f0:	e0 a0 03 61 	rcall	80007cb2 <memmove>
800075f4:	6e 08       	ld.w	r8,r7[0x0]
800075f6:	08 08       	add	r8,r4
800075f8:	8f 08       	st.w	r7[0x0],r8
800075fa:	6e 28       	ld.w	r8,r7[0x8]
800075fc:	08 18       	sub	r8,r4
800075fe:	0c 94       	mov	r4,r6
80007600:	8f 28       	st.w	r7[0x8],r8
80007602:	c3 08       	rjmp	80007662 <__sfvwrite_r+0x1b6>
80007604:	08 36       	cp.w	r6,r4
80007606:	5f ba       	srhi	r10
80007608:	6e 0c       	ld.w	r12,r7[0x0]
8000760a:	6e 48       	ld.w	r8,r7[0x10]
8000760c:	10 3c       	cp.w	r12,r8
8000760e:	5f b8       	srhi	r8
80007610:	f5 e8 00 08 	and	r8,r10,r8
80007614:	f2 08 18 00 	cp.b	r8,r9
80007618:	c0 e0       	breq	80007634 <__sfvwrite_r+0x188>
8000761a:	06 9b       	mov	r11,r3
8000761c:	08 9a       	mov	r10,r4
8000761e:	e0 a0 03 4a 	rcall	80007cb2 <memmove>
80007622:	6e 08       	ld.w	r8,r7[0x0]
80007624:	08 08       	add	r8,r4
80007626:	0e 9b       	mov	r11,r7
80007628:	8f 08       	st.w	r7[0x0],r8
8000762a:	0a 9c       	mov	r12,r5
8000762c:	fe b0 fd 08 	rcall	8000703c <_fflush_r>
80007630:	c1 90       	breq	80007662 <__sfvwrite_r+0x1b6>
80007632:	c8 48       	rjmp	8000773a <__sfvwrite_r+0x28e>
80007634:	6e 59       	ld.w	r9,r7[0x14]
80007636:	12 36       	cp.w	r6,r9
80007638:	c0 a3       	brcs	8000764c <__sfvwrite_r+0x1a0>
8000763a:	6e a8       	ld.w	r8,r7[0x28]
8000763c:	06 9a       	mov	r10,r3
8000763e:	6e 8b       	ld.w	r11,r7[0x20]
80007640:	0a 9c       	mov	r12,r5
80007642:	5d 18       	icall	r8
80007644:	18 94       	mov	r4,r12
80007646:	e0 89 00 0e 	brgt	80007662 <__sfvwrite_r+0x1b6>
8000764a:	c7 88       	rjmp	8000773a <__sfvwrite_r+0x28e>
8000764c:	0c 9a       	mov	r10,r6
8000764e:	06 9b       	mov	r11,r3
80007650:	e0 a0 03 31 	rcall	80007cb2 <memmove>
80007654:	6e 08       	ld.w	r8,r7[0x0]
80007656:	0c 08       	add	r8,r6
80007658:	0c 94       	mov	r4,r6
8000765a:	8f 08       	st.w	r7[0x0],r8
8000765c:	6e 28       	ld.w	r8,r7[0x8]
8000765e:	0c 18       	sub	r8,r6
80007660:	8f 28       	st.w	r7[0x8],r8
80007662:	62 28       	ld.w	r8,r1[0x8]
80007664:	08 18       	sub	r8,r4
80007666:	83 28       	st.w	r1[0x8],r8
80007668:	c6 e0       	breq	80007744 <__sfvwrite_r+0x298>
8000766a:	08 16       	sub	r6,r4
8000766c:	08 03       	add	r3,r4
8000766e:	c6 fb       	rjmp	8000754c <__sfvwrite_r+0xa0>
80007670:	60 03       	ld.w	r3,r0[0x0]
80007672:	60 11       	ld.w	r1,r0[0x4]
80007674:	30 08       	mov	r8,0
80007676:	2f 80       	sub	r0,-8
80007678:	50 08       	stdsp	sp[0x0],r8
8000767a:	58 01       	cp.w	r1,0
8000767c:	cf a0       	breq	80007670 <__sfvwrite_r+0x1c4>
8000767e:	40 0a       	lddsp	r10,sp[0x0]
80007680:	58 0a       	cp.w	r10,0
80007682:	c1 51       	brne	800076ac <__sfvwrite_r+0x200>
80007684:	e2 c6 ff ff 	sub	r6,r1,-1
80007688:	02 9a       	mov	r10,r1
8000768a:	30 ab       	mov	r11,10
8000768c:	06 9c       	mov	r12,r3
8000768e:	e0 a0 03 07 	rcall	80007c9c <memchr>
80007692:	f8 c8 ff ff 	sub	r8,r12,-1
80007696:	58 0c       	cp.w	r12,0
80007698:	f1 d3 e1 16 	subne	r6,r8,r3
8000769c:	f9 b9 01 01 	movne	r9,1
800076a0:	fb f9 1a 00 	st.wne	sp[0x0],r9
800076a4:	f9 b8 00 01 	moveq	r8,1
800076a8:	fb f8 0a 00 	st.weq	sp[0x0],r8
800076ac:	02 36       	cp.w	r6,r1
800076ae:	ec 04 17 80 	movls	r4,r6
800076b2:	e2 04 17 b0 	movhi	r4,r1
800076b6:	6e 59       	ld.w	r9,r7[0x14]
800076b8:	6e 25       	ld.w	r5,r7[0x8]
800076ba:	f2 05 00 05 	add	r5,r9,r5
800076be:	0a 34       	cp.w	r4,r5
800076c0:	5f 9a       	srgt	r10
800076c2:	6e 0c       	ld.w	r12,r7[0x0]
800076c4:	6e 48       	ld.w	r8,r7[0x10]
800076c6:	10 3c       	cp.w	r12,r8
800076c8:	5f b8       	srhi	r8
800076ca:	f5 e8 00 08 	and	r8,r10,r8
800076ce:	30 0a       	mov	r10,0
800076d0:	f4 08 18 00 	cp.b	r8,r10
800076d4:	c0 e0       	breq	800076f0 <__sfvwrite_r+0x244>
800076d6:	06 9b       	mov	r11,r3
800076d8:	0a 9a       	mov	r10,r5
800076da:	e0 a0 02 ec 	rcall	80007cb2 <memmove>
800076de:	6e 08       	ld.w	r8,r7[0x0]
800076e0:	0a 08       	add	r8,r5
800076e2:	0e 9b       	mov	r11,r7
800076e4:	8f 08       	st.w	r7[0x0],r8
800076e6:	40 1c       	lddsp	r12,sp[0x4]
800076e8:	fe b0 fc aa 	rcall	8000703c <_fflush_r>
800076ec:	c1 80       	breq	8000771c <__sfvwrite_r+0x270>
800076ee:	c2 68       	rjmp	8000773a <__sfvwrite_r+0x28e>
800076f0:	12 34       	cp.w	r4,r9
800076f2:	c0 a5       	brlt	80007706 <__sfvwrite_r+0x25a>
800076f4:	6e a8       	ld.w	r8,r7[0x28]
800076f6:	06 9a       	mov	r10,r3
800076f8:	6e 8b       	ld.w	r11,r7[0x20]
800076fa:	40 1c       	lddsp	r12,sp[0x4]
800076fc:	5d 18       	icall	r8
800076fe:	18 95       	mov	r5,r12
80007700:	e0 89 00 0e 	brgt	8000771c <__sfvwrite_r+0x270>
80007704:	c1 b8       	rjmp	8000773a <__sfvwrite_r+0x28e>
80007706:	08 9a       	mov	r10,r4
80007708:	06 9b       	mov	r11,r3
8000770a:	e0 a0 02 d4 	rcall	80007cb2 <memmove>
8000770e:	6e 08       	ld.w	r8,r7[0x0]
80007710:	08 08       	add	r8,r4
80007712:	08 95       	mov	r5,r4
80007714:	8f 08       	st.w	r7[0x0],r8
80007716:	6e 28       	ld.w	r8,r7[0x8]
80007718:	08 18       	sub	r8,r4
8000771a:	8f 28       	st.w	r7[0x8],r8
8000771c:	0a 16       	sub	r6,r5
8000771e:	c0 71       	brne	8000772c <__sfvwrite_r+0x280>
80007720:	0e 9b       	mov	r11,r7
80007722:	40 1c       	lddsp	r12,sp[0x4]
80007724:	fe b0 fc 8c 	rcall	8000703c <_fflush_r>
80007728:	c0 91       	brne	8000773a <__sfvwrite_r+0x28e>
8000772a:	50 06       	stdsp	sp[0x0],r6
8000772c:	64 28       	ld.w	r8,r2[0x8]
8000772e:	0a 18       	sub	r8,r5
80007730:	85 28       	st.w	r2[0x8],r8
80007732:	c0 90       	breq	80007744 <__sfvwrite_r+0x298>
80007734:	0a 11       	sub	r1,r5
80007736:	0a 03       	add	r3,r5
80007738:	ca 1b       	rjmp	8000767a <__sfvwrite_r+0x1ce>
8000773a:	8e 68       	ld.sh	r8,r7[0xc]
8000773c:	a7 a8       	sbr	r8,0x6
8000773e:	ae 68       	st.h	r7[0xc],r8
80007740:	3f fc       	mov	r12,-1
80007742:	c0 28       	rjmp	80007746 <__sfvwrite_r+0x29a>
80007744:	30 0c       	mov	r12,0
80007746:	2f dd       	sub	sp,-12
80007748:	d8 32       	popm	r0-r7,pc
8000774a:	d7 03       	nop

8000774c <_fwalk>:
8000774c:	d4 31       	pushm	r0-r7,lr
8000774e:	30 05       	mov	r5,0
80007750:	16 91       	mov	r1,r11
80007752:	f8 c7 ff 28 	sub	r7,r12,-216
80007756:	0a 92       	mov	r2,r5
80007758:	fe b0 fc f8 	rcall	80007148 <__sfp_lock_acquire>
8000775c:	3f f3       	mov	r3,-1
8000775e:	c1 68       	rjmp	8000778a <_fwalk+0x3e>
80007760:	6e 26       	ld.w	r6,r7[0x8]
80007762:	6e 14       	ld.w	r4,r7[0x4]
80007764:	2f 46       	sub	r6,-12
80007766:	c0 c8       	rjmp	8000777e <_fwalk+0x32>
80007768:	8c 08       	ld.sh	r8,r6[0x0]
8000776a:	e4 08 19 00 	cp.h	r8,r2
8000776e:	c0 70       	breq	8000777c <_fwalk+0x30>
80007770:	8c 18       	ld.sh	r8,r6[0x2]
80007772:	e6 08 19 00 	cp.h	r8,r3
80007776:	c0 30       	breq	8000777c <_fwalk+0x30>
80007778:	5d 11       	icall	r1
8000777a:	18 45       	or	r5,r12
8000777c:	2a 46       	sub	r6,-92
8000777e:	20 14       	sub	r4,1
80007780:	ec cc 00 0c 	sub	r12,r6,12
80007784:	58 04       	cp.w	r4,0
80007786:	cf 14       	brge	80007768 <_fwalk+0x1c>
80007788:	6e 07       	ld.w	r7,r7[0x0]
8000778a:	58 07       	cp.w	r7,0
8000778c:	ce a1       	brne	80007760 <_fwalk+0x14>
8000778e:	fe b0 fc de 	rcall	8000714a <__sfp_lock_release>
80007792:	0a 9c       	mov	r12,r5
80007794:	d8 32       	popm	r0-r7,pc
80007796:	d7 03       	nop

80007798 <_localeconv_r>:
80007798:	fe cc d7 74 	sub	r12,pc,-10380
8000779c:	5e fc       	retal	r12
8000779e:	d7 03       	nop

800077a0 <__smakebuf_r>:
800077a0:	d4 21       	pushm	r4-r7,lr
800077a2:	20 fd       	sub	sp,60
800077a4:	96 68       	ld.sh	r8,r11[0xc]
800077a6:	16 97       	mov	r7,r11
800077a8:	18 96       	mov	r6,r12
800077aa:	e2 18 00 02 	andl	r8,0x2,COH
800077ae:	c3 c1       	brne	80007826 <__smakebuf_r+0x86>
800077b0:	96 7b       	ld.sh	r11,r11[0xe]
800077b2:	f0 0b 19 00 	cp.h	r11,r8
800077b6:	c0 55       	brlt	800077c0 <__smakebuf_r+0x20>
800077b8:	1a 9a       	mov	r10,sp
800077ba:	e0 a0 08 95 	rcall	800088e4 <_fstat_r>
800077be:	c0 f4       	brge	800077dc <__smakebuf_r+0x3c>
800077c0:	8e 65       	ld.sh	r5,r7[0xc]
800077c2:	0a 98       	mov	r8,r5
800077c4:	ab b8       	sbr	r8,0xb
800077c6:	e2 15 00 80 	andl	r5,0x80,COH
800077ca:	ae 68       	st.h	r7[0xc],r8
800077cc:	30 04       	mov	r4,0
800077ce:	e0 68 04 00 	mov	r8,1024
800077d2:	f9 b5 01 40 	movne	r5,64
800077d6:	f0 05 17 00 	moveq	r5,r8
800077da:	c1 c8       	rjmp	80007812 <__smakebuf_r+0x72>
800077dc:	40 18       	lddsp	r8,sp[0x4]
800077de:	e2 18 f0 00 	andl	r8,0xf000,COH
800077e2:	e0 48 20 00 	cp.w	r8,8192
800077e6:	5f 04       	sreq	r4
800077e8:	e0 48 80 00 	cp.w	r8,32768
800077ec:	c0 e1       	brne	80007808 <__smakebuf_r+0x68>
800077ee:	6e b9       	ld.w	r9,r7[0x2c]
800077f0:	fe c8 f1 f8 	sub	r8,pc,-3592
800077f4:	10 39       	cp.w	r9,r8
800077f6:	c0 91       	brne	80007808 <__smakebuf_r+0x68>
800077f8:	8e 68       	ld.sh	r8,r7[0xc]
800077fa:	e0 65 04 00 	mov	r5,1024
800077fe:	ab a8       	sbr	r8,0xa
80007800:	ef 45 00 50 	st.w	r7[80],r5
80007804:	ae 68       	st.h	r7[0xc],r8
80007806:	c0 68       	rjmp	80007812 <__smakebuf_r+0x72>
80007808:	8e 68       	ld.sh	r8,r7[0xc]
8000780a:	e0 65 04 00 	mov	r5,1024
8000780e:	ab b8       	sbr	r8,0xb
80007810:	ae 68       	st.h	r7[0xc],r8
80007812:	0a 9b       	mov	r11,r5
80007814:	0c 9c       	mov	r12,r6
80007816:	c2 bc       	rcall	8000786c <_malloc_r>
80007818:	8e 68       	ld.sh	r8,r7[0xc]
8000781a:	c0 d1       	brne	80007834 <__smakebuf_r+0x94>
8000781c:	ed b8 00 09 	bld	r8,0x9
80007820:	c1 b0       	breq	80007856 <__smakebuf_r+0xb6>
80007822:	a1 b8       	sbr	r8,0x1
80007824:	ae 68       	st.h	r7[0xc],r8
80007826:	ee c8 ff b9 	sub	r8,r7,-71
8000782a:	8f 48       	st.w	r7[0x10],r8
8000782c:	8f 08       	st.w	r7[0x0],r8
8000782e:	30 18       	mov	r8,1
80007830:	8f 58       	st.w	r7[0x14],r8
80007832:	c1 28       	rjmp	80007856 <__smakebuf_r+0xb6>
80007834:	a7 b8       	sbr	r8,0x7
80007836:	8f 4c       	st.w	r7[0x10],r12
80007838:	ae 68       	st.h	r7[0xc],r8
8000783a:	8f 55       	st.w	r7[0x14],r5
8000783c:	fe c8 06 f0 	sub	r8,pc,1776
80007840:	8f 0c       	st.w	r7[0x0],r12
80007842:	8d a8       	st.w	r6[0x28],r8
80007844:	58 04       	cp.w	r4,0
80007846:	c0 80       	breq	80007856 <__smakebuf_r+0xb6>
80007848:	8e 7c       	ld.sh	r12,r7[0xe]
8000784a:	e0 a0 07 3f 	rcall	800086c8 <isatty>
8000784e:	c0 40       	breq	80007856 <__smakebuf_r+0xb6>
80007850:	8e 68       	ld.sh	r8,r7[0xc]
80007852:	a1 a8       	sbr	r8,0x0
80007854:	ae 68       	st.h	r7[0xc],r8
80007856:	2f 1d       	sub	sp,-60
80007858:	d8 22       	popm	r4-r7,pc
8000785a:	d7 03       	nop

8000785c <malloc>:
8000785c:	d4 01       	pushm	lr
8000785e:	e0 68 01 18 	mov	r8,280
80007862:	18 9b       	mov	r11,r12
80007864:	70 0c       	ld.w	r12,r8[0x0]
80007866:	c0 3c       	rcall	8000786c <_malloc_r>
80007868:	d8 02       	popm	pc
8000786a:	d7 03       	nop

8000786c <_malloc_r>:
8000786c:	d4 31       	pushm	r0-r7,lr
8000786e:	f6 c8 ff f5 	sub	r8,r11,-11
80007872:	18 95       	mov	r5,r12
80007874:	10 97       	mov	r7,r8
80007876:	e0 17 ff f8 	andl	r7,0xfff8
8000787a:	59 68       	cp.w	r8,22
8000787c:	f9 b7 08 10 	movls	r7,16
80007880:	16 37       	cp.w	r7,r11
80007882:	5f 38       	srlo	r8
80007884:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007888:	c0 50       	breq	80007892 <_malloc_r+0x26>
8000788a:	30 c8       	mov	r8,12
8000788c:	99 38       	st.w	r12[0xc],r8
8000788e:	e0 8f 01 f7 	bral	80007c7c <_malloc_r+0x410>
80007892:	e0 a0 02 2f 	rcall	80007cf0 <__malloc_lock>
80007896:	e0 47 01 f7 	cp.w	r7,503
8000789a:	e0 8b 00 1d 	brhi	800078d4 <_malloc_r+0x68>
8000789e:	ee 03 16 03 	lsr	r3,r7,0x3
800078a2:	e0 68 01 1c 	mov	r8,284
800078a6:	f0 03 00 38 	add	r8,r8,r3<<0x3
800078aa:	70 36       	ld.w	r6,r8[0xc]
800078ac:	10 36       	cp.w	r6,r8
800078ae:	c0 61       	brne	800078ba <_malloc_r+0x4e>
800078b0:	ec c8 ff f8 	sub	r8,r6,-8
800078b4:	70 36       	ld.w	r6,r8[0xc]
800078b6:	10 36       	cp.w	r6,r8
800078b8:	c0 c0       	breq	800078d0 <_malloc_r+0x64>
800078ba:	6c 18       	ld.w	r8,r6[0x4]
800078bc:	e0 18 ff fc 	andl	r8,0xfffc
800078c0:	6c 3a       	ld.w	r10,r6[0xc]
800078c2:	ec 08 00 09 	add	r9,r6,r8
800078c6:	0a 9c       	mov	r12,r5
800078c8:	6c 28       	ld.w	r8,r6[0x8]
800078ca:	95 28       	st.w	r10[0x8],r8
800078cc:	91 3a       	st.w	r8[0xc],r10
800078ce:	c4 78       	rjmp	8000795c <_malloc_r+0xf0>
800078d0:	2f e3       	sub	r3,-2
800078d2:	c4 d8       	rjmp	8000796c <_malloc_r+0x100>
800078d4:	ee 03 16 09 	lsr	r3,r7,0x9
800078d8:	c0 41       	brne	800078e0 <_malloc_r+0x74>
800078da:	ee 03 16 03 	lsr	r3,r7,0x3
800078de:	c2 68       	rjmp	8000792a <_malloc_r+0xbe>
800078e0:	58 43       	cp.w	r3,4
800078e2:	e0 8b 00 06 	brhi	800078ee <_malloc_r+0x82>
800078e6:	ee 03 16 06 	lsr	r3,r7,0x6
800078ea:	2c 83       	sub	r3,-56
800078ec:	c1 f8       	rjmp	8000792a <_malloc_r+0xbe>
800078ee:	59 43       	cp.w	r3,20
800078f0:	e0 8b 00 04 	brhi	800078f8 <_malloc_r+0x8c>
800078f4:	2a 53       	sub	r3,-91
800078f6:	c1 a8       	rjmp	8000792a <_malloc_r+0xbe>
800078f8:	e0 43 00 54 	cp.w	r3,84
800078fc:	e0 8b 00 06 	brhi	80007908 <_malloc_r+0x9c>
80007900:	ee 03 16 0c 	lsr	r3,r7,0xc
80007904:	29 23       	sub	r3,-110
80007906:	c1 28       	rjmp	8000792a <_malloc_r+0xbe>
80007908:	e0 43 01 54 	cp.w	r3,340
8000790c:	e0 8b 00 06 	brhi	80007918 <_malloc_r+0xac>
80007910:	ee 03 16 0f 	lsr	r3,r7,0xf
80007914:	28 93       	sub	r3,-119
80007916:	c0 a8       	rjmp	8000792a <_malloc_r+0xbe>
80007918:	e0 43 05 54 	cp.w	r3,1364
8000791c:	e0 88 00 04 	brls	80007924 <_malloc_r+0xb8>
80007920:	37 e3       	mov	r3,126
80007922:	c0 48       	rjmp	8000792a <_malloc_r+0xbe>
80007924:	ee 03 16 12 	lsr	r3,r7,0x12
80007928:	28 43       	sub	r3,-124
8000792a:	e0 6a 01 1c 	mov	r10,284
8000792e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007932:	74 36       	ld.w	r6,r10[0xc]
80007934:	c1 98       	rjmp	80007966 <_malloc_r+0xfa>
80007936:	6c 19       	ld.w	r9,r6[0x4]
80007938:	e0 19 ff fc 	andl	r9,0xfffc
8000793c:	f2 07 01 0b 	sub	r11,r9,r7
80007940:	58 fb       	cp.w	r11,15
80007942:	e0 8a 00 04 	brle	8000794a <_malloc_r+0xde>
80007946:	20 13       	sub	r3,1
80007948:	c1 18       	rjmp	8000796a <_malloc_r+0xfe>
8000794a:	6c 38       	ld.w	r8,r6[0xc]
8000794c:	58 0b       	cp.w	r11,0
8000794e:	c0 b5       	brlt	80007964 <_malloc_r+0xf8>
80007950:	6c 2a       	ld.w	r10,r6[0x8]
80007952:	ec 09 00 09 	add	r9,r6,r9
80007956:	0a 9c       	mov	r12,r5
80007958:	91 2a       	st.w	r8[0x8],r10
8000795a:	95 38       	st.w	r10[0xc],r8
8000795c:	72 18       	ld.w	r8,r9[0x4]
8000795e:	a1 a8       	sbr	r8,0x0
80007960:	93 18       	st.w	r9[0x4],r8
80007962:	cb c8       	rjmp	80007ada <_malloc_r+0x26e>
80007964:	10 96       	mov	r6,r8
80007966:	14 36       	cp.w	r6,r10
80007968:	ce 71       	brne	80007936 <_malloc_r+0xca>
8000796a:	2f f3       	sub	r3,-1
8000796c:	e0 6a 01 1c 	mov	r10,284
80007970:	f4 cc ff f8 	sub	r12,r10,-8
80007974:	78 26       	ld.w	r6,r12[0x8]
80007976:	18 36       	cp.w	r6,r12
80007978:	c6 c0       	breq	80007a50 <_malloc_r+0x1e4>
8000797a:	6c 19       	ld.w	r9,r6[0x4]
8000797c:	e0 19 ff fc 	andl	r9,0xfffc
80007980:	f2 07 01 08 	sub	r8,r9,r7
80007984:	58 f8       	cp.w	r8,15
80007986:	e0 89 00 8f 	brgt	80007aa4 <_malloc_r+0x238>
8000798a:	99 3c       	st.w	r12[0xc],r12
8000798c:	99 2c       	st.w	r12[0x8],r12
8000798e:	58 08       	cp.w	r8,0
80007990:	c0 55       	brlt	8000799a <_malloc_r+0x12e>
80007992:	ec 09 00 09 	add	r9,r6,r9
80007996:	0a 9c       	mov	r12,r5
80007998:	ce 2b       	rjmp	8000795c <_malloc_r+0xf0>
8000799a:	e0 49 01 ff 	cp.w	r9,511
8000799e:	e0 8b 00 13 	brhi	800079c4 <_malloc_r+0x158>
800079a2:	a3 99       	lsr	r9,0x3
800079a4:	f4 09 00 38 	add	r8,r10,r9<<0x3
800079a8:	70 2b       	ld.w	r11,r8[0x8]
800079aa:	8d 38       	st.w	r6[0xc],r8
800079ac:	8d 2b       	st.w	r6[0x8],r11
800079ae:	97 36       	st.w	r11[0xc],r6
800079b0:	91 26       	st.w	r8[0x8],r6
800079b2:	a3 49       	asr	r9,0x2
800079b4:	74 18       	ld.w	r8,r10[0x4]
800079b6:	30 1b       	mov	r11,1
800079b8:	f6 09 09 49 	lsl	r9,r11,r9
800079bc:	f1 e9 10 09 	or	r9,r8,r9
800079c0:	95 19       	st.w	r10[0x4],r9
800079c2:	c4 78       	rjmp	80007a50 <_malloc_r+0x1e4>
800079c4:	f2 0a 16 09 	lsr	r10,r9,0x9
800079c8:	58 4a       	cp.w	r10,4
800079ca:	e0 8b 00 07 	brhi	800079d8 <_malloc_r+0x16c>
800079ce:	f2 0a 16 06 	lsr	r10,r9,0x6
800079d2:	2c 8a       	sub	r10,-56
800079d4:	c2 08       	rjmp	80007a14 <_malloc_r+0x1a8>
800079d6:	d7 03       	nop
800079d8:	59 4a       	cp.w	r10,20
800079da:	e0 8b 00 04 	brhi	800079e2 <_malloc_r+0x176>
800079de:	2a 5a       	sub	r10,-91
800079e0:	c1 a8       	rjmp	80007a14 <_malloc_r+0x1a8>
800079e2:	e0 4a 00 54 	cp.w	r10,84
800079e6:	e0 8b 00 06 	brhi	800079f2 <_malloc_r+0x186>
800079ea:	f2 0a 16 0c 	lsr	r10,r9,0xc
800079ee:	29 2a       	sub	r10,-110
800079f0:	c1 28       	rjmp	80007a14 <_malloc_r+0x1a8>
800079f2:	e0 4a 01 54 	cp.w	r10,340
800079f6:	e0 8b 00 06 	brhi	80007a02 <_malloc_r+0x196>
800079fa:	f2 0a 16 0f 	lsr	r10,r9,0xf
800079fe:	28 9a       	sub	r10,-119
80007a00:	c0 a8       	rjmp	80007a14 <_malloc_r+0x1a8>
80007a02:	e0 4a 05 54 	cp.w	r10,1364
80007a06:	e0 88 00 04 	brls	80007a0e <_malloc_r+0x1a2>
80007a0a:	37 ea       	mov	r10,126
80007a0c:	c0 48       	rjmp	80007a14 <_malloc_r+0x1a8>
80007a0e:	f2 0a 16 12 	lsr	r10,r9,0x12
80007a12:	28 4a       	sub	r10,-124
80007a14:	e0 6b 01 1c 	mov	r11,284
80007a18:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007a1c:	68 28       	ld.w	r8,r4[0x8]
80007a1e:	08 38       	cp.w	r8,r4
80007a20:	c0 e1       	brne	80007a3c <_malloc_r+0x1d0>
80007a22:	76 19       	ld.w	r9,r11[0x4]
80007a24:	a3 4a       	asr	r10,0x2
80007a26:	30 1e       	mov	lr,1
80007a28:	fc 0a 09 4a 	lsl	r10,lr,r10
80007a2c:	f3 ea 10 0a 	or	r10,r9,r10
80007a30:	10 99       	mov	r9,r8
80007a32:	97 1a       	st.w	r11[0x4],r10
80007a34:	c0 a8       	rjmp	80007a48 <_malloc_r+0x1dc>
80007a36:	70 28       	ld.w	r8,r8[0x8]
80007a38:	08 38       	cp.w	r8,r4
80007a3a:	c0 60       	breq	80007a46 <_malloc_r+0x1da>
80007a3c:	70 1a       	ld.w	r10,r8[0x4]
80007a3e:	e0 1a ff fc 	andl	r10,0xfffc
80007a42:	14 39       	cp.w	r9,r10
80007a44:	cf 93       	brcs	80007a36 <_malloc_r+0x1ca>
80007a46:	70 39       	ld.w	r9,r8[0xc]
80007a48:	8d 39       	st.w	r6[0xc],r9
80007a4a:	8d 28       	st.w	r6[0x8],r8
80007a4c:	91 36       	st.w	r8[0xc],r6
80007a4e:	93 26       	st.w	r9[0x8],r6
80007a50:	e6 08 14 02 	asr	r8,r3,0x2
80007a54:	30 1b       	mov	r11,1
80007a56:	e0 64 01 1c 	mov	r4,284
80007a5a:	f6 08 09 4b 	lsl	r11,r11,r8
80007a5e:	68 18       	ld.w	r8,r4[0x4]
80007a60:	10 3b       	cp.w	r11,r8
80007a62:	e0 8b 00 69 	brhi	80007b34 <_malloc_r+0x2c8>
80007a66:	f7 e8 00 09 	and	r9,r11,r8
80007a6a:	c0 b1       	brne	80007a80 <_malloc_r+0x214>
80007a6c:	e0 13 ff fc 	andl	r3,0xfffc
80007a70:	a1 7b       	lsl	r11,0x1
80007a72:	2f c3       	sub	r3,-4
80007a74:	c0 38       	rjmp	80007a7a <_malloc_r+0x20e>
80007a76:	2f c3       	sub	r3,-4
80007a78:	a1 7b       	lsl	r11,0x1
80007a7a:	f7 e8 00 09 	and	r9,r11,r8
80007a7e:	cf c0       	breq	80007a76 <_malloc_r+0x20a>
80007a80:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007a84:	06 92       	mov	r2,r3
80007a86:	1c 91       	mov	r1,lr
80007a88:	62 36       	ld.w	r6,r1[0xc]
80007a8a:	c2 d8       	rjmp	80007ae4 <_malloc_r+0x278>
80007a8c:	6c 1a       	ld.w	r10,r6[0x4]
80007a8e:	e0 1a ff fc 	andl	r10,0xfffc
80007a92:	f4 07 01 08 	sub	r8,r10,r7
80007a96:	58 f8       	cp.w	r8,15
80007a98:	e0 8a 00 15 	brle	80007ac2 <_malloc_r+0x256>
80007a9c:	6c 3a       	ld.w	r10,r6[0xc]
80007a9e:	6c 29       	ld.w	r9,r6[0x8]
80007aa0:	95 29       	st.w	r10[0x8],r9
80007aa2:	93 3a       	st.w	r9[0xc],r10
80007aa4:	0e 99       	mov	r9,r7
80007aa6:	ec 07 00 07 	add	r7,r6,r7
80007aaa:	a1 a9       	sbr	r9,0x0
80007aac:	99 37       	st.w	r12[0xc],r7
80007aae:	99 27       	st.w	r12[0x8],r7
80007ab0:	8d 19       	st.w	r6[0x4],r9
80007ab2:	ee 08 09 08 	st.w	r7[r8],r8
80007ab6:	8f 2c       	st.w	r7[0x8],r12
80007ab8:	8f 3c       	st.w	r7[0xc],r12
80007aba:	a1 a8       	sbr	r8,0x0
80007abc:	0a 9c       	mov	r12,r5
80007abe:	8f 18       	st.w	r7[0x4],r8
80007ac0:	c0 d8       	rjmp	80007ada <_malloc_r+0x26e>
80007ac2:	6c 39       	ld.w	r9,r6[0xc]
80007ac4:	58 08       	cp.w	r8,0
80007ac6:	c0 e5       	brlt	80007ae2 <_malloc_r+0x276>
80007ac8:	ec 0a 00 0a 	add	r10,r6,r10
80007acc:	74 18       	ld.w	r8,r10[0x4]
80007ace:	a1 a8       	sbr	r8,0x0
80007ad0:	0a 9c       	mov	r12,r5
80007ad2:	95 18       	st.w	r10[0x4],r8
80007ad4:	6c 28       	ld.w	r8,r6[0x8]
80007ad6:	93 28       	st.w	r9[0x8],r8
80007ad8:	91 39       	st.w	r8[0xc],r9
80007ada:	c0 cd       	rcall	80007cf2 <__malloc_unlock>
80007adc:	ec cc ff f8 	sub	r12,r6,-8
80007ae0:	d8 32       	popm	r0-r7,pc
80007ae2:	12 96       	mov	r6,r9
80007ae4:	02 36       	cp.w	r6,r1
80007ae6:	cd 31       	brne	80007a8c <_malloc_r+0x220>
80007ae8:	2f f2       	sub	r2,-1
80007aea:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007aee:	c0 30       	breq	80007af4 <_malloc_r+0x288>
80007af0:	2f 81       	sub	r1,-8
80007af2:	cc bb       	rjmp	80007a88 <_malloc_r+0x21c>
80007af4:	1c 98       	mov	r8,lr
80007af6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007afa:	c0 81       	brne	80007b0a <_malloc_r+0x29e>
80007afc:	68 19       	ld.w	r9,r4[0x4]
80007afe:	f6 08 11 ff 	rsub	r8,r11,-1
80007b02:	f3 e8 00 08 	and	r8,r9,r8
80007b06:	89 18       	st.w	r4[0x4],r8
80007b08:	c0 78       	rjmp	80007b16 <_malloc_r+0x2aa>
80007b0a:	f0 c9 00 08 	sub	r9,r8,8
80007b0e:	20 13       	sub	r3,1
80007b10:	70 08       	ld.w	r8,r8[0x0]
80007b12:	12 38       	cp.w	r8,r9
80007b14:	cf 10       	breq	80007af6 <_malloc_r+0x28a>
80007b16:	a1 7b       	lsl	r11,0x1
80007b18:	68 18       	ld.w	r8,r4[0x4]
80007b1a:	10 3b       	cp.w	r11,r8
80007b1c:	e0 8b 00 0c 	brhi	80007b34 <_malloc_r+0x2c8>
80007b20:	58 0b       	cp.w	r11,0
80007b22:	c0 90       	breq	80007b34 <_malloc_r+0x2c8>
80007b24:	04 93       	mov	r3,r2
80007b26:	c0 38       	rjmp	80007b2c <_malloc_r+0x2c0>
80007b28:	2f c3       	sub	r3,-4
80007b2a:	a1 7b       	lsl	r11,0x1
80007b2c:	f7 e8 00 09 	and	r9,r11,r8
80007b30:	ca 81       	brne	80007a80 <_malloc_r+0x214>
80007b32:	cf bb       	rjmp	80007b28 <_malloc_r+0x2bc>
80007b34:	68 23       	ld.w	r3,r4[0x8]
80007b36:	66 12       	ld.w	r2,r3[0x4]
80007b38:	e0 12 ff fc 	andl	r2,0xfffc
80007b3c:	0e 32       	cp.w	r2,r7
80007b3e:	5f 39       	srlo	r9
80007b40:	e4 07 01 08 	sub	r8,r2,r7
80007b44:	58 f8       	cp.w	r8,15
80007b46:	5f aa       	srle	r10
80007b48:	f5 e9 10 09 	or	r9,r10,r9
80007b4c:	e0 80 00 9a 	breq	80007c80 <_malloc_r+0x414>
80007b50:	e0 68 06 50 	mov	r8,1616
80007b54:	70 01       	ld.w	r1,r8[0x0]
80007b56:	e0 68 05 28 	mov	r8,1320
80007b5a:	2f 01       	sub	r1,-16
80007b5c:	70 08       	ld.w	r8,r8[0x0]
80007b5e:	0e 01       	add	r1,r7
80007b60:	5b f8       	cp.w	r8,-1
80007b62:	c0 40       	breq	80007b6a <_malloc_r+0x2fe>
80007b64:	28 11       	sub	r1,-127
80007b66:	e0 11 ff 80 	andl	r1,0xff80
80007b6a:	02 9b       	mov	r11,r1
80007b6c:	0a 9c       	mov	r12,r5
80007b6e:	e0 a0 05 31 	rcall	800085d0 <_sbrk_r>
80007b72:	18 96       	mov	r6,r12
80007b74:	5b fc       	cp.w	r12,-1
80007b76:	c7 50       	breq	80007c60 <_malloc_r+0x3f4>
80007b78:	e6 02 00 08 	add	r8,r3,r2
80007b7c:	10 3c       	cp.w	r12,r8
80007b7e:	c0 32       	brcc	80007b84 <_malloc_r+0x318>
80007b80:	08 33       	cp.w	r3,r4
80007b82:	c6 f1       	brne	80007c60 <_malloc_r+0x3f4>
80007b84:	e0 6a 06 54 	mov	r10,1620
80007b88:	74 09       	ld.w	r9,r10[0x0]
80007b8a:	e2 09 00 09 	add	r9,r1,r9
80007b8e:	95 09       	st.w	r10[0x0],r9
80007b90:	10 36       	cp.w	r6,r8
80007b92:	c0 a1       	brne	80007ba6 <_malloc_r+0x33a>
80007b94:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007b98:	c0 71       	brne	80007ba6 <_malloc_r+0x33a>
80007b9a:	e2 02 00 02 	add	r2,r1,r2
80007b9e:	68 28       	ld.w	r8,r4[0x8]
80007ba0:	a1 a2       	sbr	r2,0x0
80007ba2:	91 12       	st.w	r8[0x4],r2
80007ba4:	c4 f8       	rjmp	80007c42 <_malloc_r+0x3d6>
80007ba6:	e0 6a 05 28 	mov	r10,1320
80007baa:	74 0b       	ld.w	r11,r10[0x0]
80007bac:	5b fb       	cp.w	r11,-1
80007bae:	c0 31       	brne	80007bb4 <_malloc_r+0x348>
80007bb0:	95 06       	st.w	r10[0x0],r6
80007bb2:	c0 78       	rjmp	80007bc0 <_malloc_r+0x354>
80007bb4:	ec 09 00 09 	add	r9,r6,r9
80007bb8:	e0 6a 06 54 	mov	r10,1620
80007bbc:	10 19       	sub	r9,r8
80007bbe:	95 09       	st.w	r10[0x0],r9
80007bc0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007bc4:	f0 09 11 08 	rsub	r9,r8,8
80007bc8:	58 08       	cp.w	r8,0
80007bca:	f2 08 17 10 	movne	r8,r9
80007bce:	ed d8 e1 06 	addne	r6,r6,r8
80007bd2:	28 08       	sub	r8,-128
80007bd4:	ec 01 00 01 	add	r1,r6,r1
80007bd8:	0a 9c       	mov	r12,r5
80007bda:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007bde:	f0 01 01 01 	sub	r1,r8,r1
80007be2:	02 9b       	mov	r11,r1
80007be4:	e0 a0 04 f6 	rcall	800085d0 <_sbrk_r>
80007be8:	e0 68 06 54 	mov	r8,1620
80007bec:	5b fc       	cp.w	r12,-1
80007bee:	ec 0c 17 00 	moveq	r12,r6
80007bf2:	f9 b1 00 00 	moveq	r1,0
80007bf6:	70 09       	ld.w	r9,r8[0x0]
80007bf8:	0c 1c       	sub	r12,r6
80007bfa:	89 26       	st.w	r4[0x8],r6
80007bfc:	02 0c       	add	r12,r1
80007bfe:	12 01       	add	r1,r9
80007c00:	a1 ac       	sbr	r12,0x0
80007c02:	91 01       	st.w	r8[0x0],r1
80007c04:	8d 1c       	st.w	r6[0x4],r12
80007c06:	08 33       	cp.w	r3,r4
80007c08:	c1 d0       	breq	80007c42 <_malloc_r+0x3d6>
80007c0a:	58 f2       	cp.w	r2,15
80007c0c:	e0 8b 00 05 	brhi	80007c16 <_malloc_r+0x3aa>
80007c10:	30 18       	mov	r8,1
80007c12:	8d 18       	st.w	r6[0x4],r8
80007c14:	c2 68       	rjmp	80007c60 <_malloc_r+0x3f4>
80007c16:	30 59       	mov	r9,5
80007c18:	20 c2       	sub	r2,12
80007c1a:	e0 12 ff f8 	andl	r2,0xfff8
80007c1e:	e6 02 00 08 	add	r8,r3,r2
80007c22:	91 29       	st.w	r8[0x8],r9
80007c24:	91 19       	st.w	r8[0x4],r9
80007c26:	66 18       	ld.w	r8,r3[0x4]
80007c28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c2c:	e5 e8 10 08 	or	r8,r2,r8
80007c30:	87 18       	st.w	r3[0x4],r8
80007c32:	58 f2       	cp.w	r2,15
80007c34:	e0 88 00 07 	brls	80007c42 <_malloc_r+0x3d6>
80007c38:	e6 cb ff f8 	sub	r11,r3,-8
80007c3c:	0a 9c       	mov	r12,r5
80007c3e:	fe b0 fb 71 	rcall	80007320 <_free_r>
80007c42:	e0 69 06 4c 	mov	r9,1612
80007c46:	72 0a       	ld.w	r10,r9[0x0]
80007c48:	e0 68 06 54 	mov	r8,1620
80007c4c:	70 08       	ld.w	r8,r8[0x0]
80007c4e:	14 38       	cp.w	r8,r10
80007c50:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007c54:	e0 69 06 48 	mov	r9,1608
80007c58:	72 0a       	ld.w	r10,r9[0x0]
80007c5a:	14 38       	cp.w	r8,r10
80007c5c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007c60:	68 28       	ld.w	r8,r4[0x8]
80007c62:	70 18       	ld.w	r8,r8[0x4]
80007c64:	e0 18 ff fc 	andl	r8,0xfffc
80007c68:	0e 38       	cp.w	r8,r7
80007c6a:	5f 39       	srlo	r9
80007c6c:	0e 18       	sub	r8,r7
80007c6e:	58 f8       	cp.w	r8,15
80007c70:	5f aa       	srle	r10
80007c72:	f5 e9 10 09 	or	r9,r10,r9
80007c76:	c0 50       	breq	80007c80 <_malloc_r+0x414>
80007c78:	0a 9c       	mov	r12,r5
80007c7a:	c3 cc       	rcall	80007cf2 <__malloc_unlock>
80007c7c:	d8 3a       	popm	r0-r7,pc,r12=0
80007c7e:	d7 03       	nop
80007c80:	68 26       	ld.w	r6,r4[0x8]
80007c82:	a1 a8       	sbr	r8,0x0
80007c84:	0e 99       	mov	r9,r7
80007c86:	a1 a9       	sbr	r9,0x0
80007c88:	8d 19       	st.w	r6[0x4],r9
80007c8a:	ec 07 00 07 	add	r7,r6,r7
80007c8e:	0a 9c       	mov	r12,r5
80007c90:	89 27       	st.w	r4[0x8],r7
80007c92:	8f 18       	st.w	r7[0x4],r8
80007c94:	c2 fc       	rcall	80007cf2 <__malloc_unlock>
80007c96:	ec cc ff f8 	sub	r12,r6,-8
80007c9a:	d8 32       	popm	r0-r7,pc

80007c9c <memchr>:
80007c9c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007ca0:	c0 68       	rjmp	80007cac <memchr+0x10>
80007ca2:	20 1a       	sub	r10,1
80007ca4:	19 88       	ld.ub	r8,r12[0x0]
80007ca6:	16 38       	cp.w	r8,r11
80007ca8:	5e 0c       	reteq	r12
80007caa:	2f fc       	sub	r12,-1
80007cac:	58 0a       	cp.w	r10,0
80007cae:	cf a1       	brne	80007ca2 <memchr+0x6>
80007cb0:	5e fa       	retal	r10

80007cb2 <memmove>:
80007cb2:	d4 01       	pushm	lr
80007cb4:	18 3b       	cp.w	r11,r12
80007cb6:	c1 92       	brcc	80007ce8 <memmove+0x36>
80007cb8:	f6 0a 00 09 	add	r9,r11,r10
80007cbc:	12 3c       	cp.w	r12,r9
80007cbe:	c1 52       	brcc	80007ce8 <memmove+0x36>
80007cc0:	f8 0a 00 0b 	add	r11,r12,r10
80007cc4:	30 08       	mov	r8,0
80007cc6:	c0 68       	rjmp	80007cd2 <memmove+0x20>
80007cc8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007ccc:	20 1a       	sub	r10,1
80007cce:	f6 08 0b 0e 	st.b	r11[r8],lr
80007cd2:	20 18       	sub	r8,1
80007cd4:	58 0a       	cp.w	r10,0
80007cd6:	cf 91       	brne	80007cc8 <memmove+0x16>
80007cd8:	d8 02       	popm	pc
80007cda:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007cde:	20 1a       	sub	r10,1
80007ce0:	f8 08 0b 09 	st.b	r12[r8],r9
80007ce4:	2f f8       	sub	r8,-1
80007ce6:	c0 28       	rjmp	80007cea <memmove+0x38>
80007ce8:	30 08       	mov	r8,0
80007cea:	58 0a       	cp.w	r10,0
80007cec:	cf 71       	brne	80007cda <memmove+0x28>
80007cee:	d8 02       	popm	pc

80007cf0 <__malloc_lock>:
80007cf0:	5e fc       	retal	r12

80007cf2 <__malloc_unlock>:
80007cf2:	5e fc       	retal	r12

80007cf4 <__hi0bits>:
80007cf4:	18 98       	mov	r8,r12
80007cf6:	e0 1c 00 00 	andl	r12,0x0
80007cfa:	f0 09 15 10 	lsl	r9,r8,0x10
80007cfe:	58 0c       	cp.w	r12,0
80007d00:	f2 08 17 00 	moveq	r8,r9
80007d04:	f9 bc 00 10 	moveq	r12,16
80007d08:	f9 bc 01 00 	movne	r12,0
80007d0c:	10 9a       	mov	r10,r8
80007d0e:	f0 09 15 08 	lsl	r9,r8,0x8
80007d12:	e6 1a ff 00 	andh	r10,0xff00,COH
80007d16:	f7 bc 00 f8 	subeq	r12,-8
80007d1a:	f2 08 17 00 	moveq	r8,r9
80007d1e:	10 9a       	mov	r10,r8
80007d20:	f0 09 15 04 	lsl	r9,r8,0x4
80007d24:	e6 1a f0 00 	andh	r10,0xf000,COH
80007d28:	f7 bc 00 fc 	subeq	r12,-4
80007d2c:	f2 08 17 00 	moveq	r8,r9
80007d30:	10 9a       	mov	r10,r8
80007d32:	f0 09 15 02 	lsl	r9,r8,0x2
80007d36:	e6 1a c0 00 	andh	r10,0xc000,COH
80007d3a:	f7 bc 00 fe 	subeq	r12,-2
80007d3e:	f2 08 17 00 	moveq	r8,r9
80007d42:	58 08       	cp.w	r8,0
80007d44:	5e 5c       	retlt	r12
80007d46:	ed b8 00 1e 	bld	r8,0x1e
80007d4a:	f9 bc 01 20 	movne	r12,32
80007d4e:	f7 bc 00 ff 	subeq	r12,-1
80007d52:	5e fc       	retal	r12

80007d54 <__lo0bits>:
80007d54:	18 99       	mov	r9,r12
80007d56:	78 08       	ld.w	r8,r12[0x0]
80007d58:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007d5c:	c1 50       	breq	80007d86 <__lo0bits+0x32>
80007d5e:	ed b8 00 00 	bld	r8,0x0
80007d62:	c0 21       	brne	80007d66 <__lo0bits+0x12>
80007d64:	5e fd       	retal	0
80007d66:	10 9b       	mov	r11,r8
80007d68:	f0 0a 16 01 	lsr	r10,r8,0x1
80007d6c:	e2 1b 00 02 	andl	r11,0x2,COH
80007d70:	a3 88       	lsr	r8,0x2
80007d72:	58 0b       	cp.w	r11,0
80007d74:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007d78:	f9 bc 01 01 	movne	r12,1
80007d7c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007d80:	f9 bc 00 02 	moveq	r12,2
80007d84:	5e fc       	retal	r12
80007d86:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007d8a:	f0 0b 16 10 	lsr	r11,r8,0x10
80007d8e:	58 0a       	cp.w	r10,0
80007d90:	f6 08 17 00 	moveq	r8,r11
80007d94:	f9 bc 00 10 	moveq	r12,16
80007d98:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007d9c:	f0 0a 16 08 	lsr	r10,r8,0x8
80007da0:	58 0b       	cp.w	r11,0
80007da2:	f7 bc 00 f8 	subeq	r12,-8
80007da6:	f4 08 17 00 	moveq	r8,r10
80007daa:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007dae:	f0 0a 16 04 	lsr	r10,r8,0x4
80007db2:	58 0b       	cp.w	r11,0
80007db4:	f7 bc 00 fc 	subeq	r12,-4
80007db8:	f4 08 17 00 	moveq	r8,r10
80007dbc:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007dc0:	f0 0a 16 02 	lsr	r10,r8,0x2
80007dc4:	58 0b       	cp.w	r11,0
80007dc6:	f7 bc 00 fe 	subeq	r12,-2
80007dca:	f4 08 17 00 	moveq	r8,r10
80007dce:	ed b8 00 00 	bld	r8,0x0
80007dd2:	c0 60       	breq	80007dde <__lo0bits+0x8a>
80007dd4:	a1 98       	lsr	r8,0x1
80007dd6:	c0 31       	brne	80007ddc <__lo0bits+0x88>
80007dd8:	32 0c       	mov	r12,32
80007dda:	5e fc       	retal	r12
80007ddc:	2f fc       	sub	r12,-1
80007dde:	93 08       	st.w	r9[0x0],r8
80007de0:	5e fc       	retal	r12

80007de2 <__mcmp>:
80007de2:	d4 01       	pushm	lr
80007de4:	18 98       	mov	r8,r12
80007de6:	76 49       	ld.w	r9,r11[0x10]
80007de8:	78 4c       	ld.w	r12,r12[0x10]
80007dea:	12 1c       	sub	r12,r9
80007dec:	c1 31       	brne	80007e12 <__mcmp+0x30>
80007dee:	2f b9       	sub	r9,-5
80007df0:	a3 69       	lsl	r9,0x2
80007df2:	12 0b       	add	r11,r9
80007df4:	f0 09 00 09 	add	r9,r8,r9
80007df8:	2e c8       	sub	r8,-20
80007dfa:	13 4e       	ld.w	lr,--r9
80007dfc:	17 4a       	ld.w	r10,--r11
80007dfe:	14 3e       	cp.w	lr,r10
80007e00:	c0 60       	breq	80007e0c <__mcmp+0x2a>
80007e02:	f9 bc 03 ff 	movlo	r12,-1
80007e06:	f9 bc 02 01 	movhs	r12,1
80007e0a:	d8 02       	popm	pc
80007e0c:	10 39       	cp.w	r9,r8
80007e0e:	fe 9b ff f6 	brhi	80007dfa <__mcmp+0x18>
80007e12:	d8 02       	popm	pc

80007e14 <_Bfree>:
80007e14:	d4 21       	pushm	r4-r7,lr
80007e16:	18 97       	mov	r7,r12
80007e18:	16 95       	mov	r5,r11
80007e1a:	78 96       	ld.w	r6,r12[0x24]
80007e1c:	58 06       	cp.w	r6,0
80007e1e:	c0 91       	brne	80007e30 <_Bfree+0x1c>
80007e20:	31 0c       	mov	r12,16
80007e22:	fe b0 fd 1d 	rcall	8000785c <malloc>
80007e26:	99 36       	st.w	r12[0xc],r6
80007e28:	8f 9c       	st.w	r7[0x24],r12
80007e2a:	99 16       	st.w	r12[0x4],r6
80007e2c:	99 26       	st.w	r12[0x8],r6
80007e2e:	99 06       	st.w	r12[0x0],r6
80007e30:	58 05       	cp.w	r5,0
80007e32:	c0 90       	breq	80007e44 <_Bfree+0x30>
80007e34:	6a 19       	ld.w	r9,r5[0x4]
80007e36:	6e 98       	ld.w	r8,r7[0x24]
80007e38:	70 38       	ld.w	r8,r8[0xc]
80007e3a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007e3e:	8b 0a       	st.w	r5[0x0],r10
80007e40:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007e44:	d8 22       	popm	r4-r7,pc
80007e46:	d7 03       	nop

80007e48 <_Balloc>:
80007e48:	d4 21       	pushm	r4-r7,lr
80007e4a:	18 97       	mov	r7,r12
80007e4c:	16 96       	mov	r6,r11
80007e4e:	78 95       	ld.w	r5,r12[0x24]
80007e50:	58 05       	cp.w	r5,0
80007e52:	c0 91       	brne	80007e64 <_Balloc+0x1c>
80007e54:	31 0c       	mov	r12,16
80007e56:	fe b0 fd 03 	rcall	8000785c <malloc>
80007e5a:	99 35       	st.w	r12[0xc],r5
80007e5c:	8f 9c       	st.w	r7[0x24],r12
80007e5e:	99 15       	st.w	r12[0x4],r5
80007e60:	99 25       	st.w	r12[0x8],r5
80007e62:	99 05       	st.w	r12[0x0],r5
80007e64:	6e 95       	ld.w	r5,r7[0x24]
80007e66:	6a 38       	ld.w	r8,r5[0xc]
80007e68:	58 08       	cp.w	r8,0
80007e6a:	c0 b1       	brne	80007e80 <_Balloc+0x38>
80007e6c:	31 0a       	mov	r10,16
80007e6e:	30 4b       	mov	r11,4
80007e70:	0e 9c       	mov	r12,r7
80007e72:	e0 a0 04 93 	rcall	80008798 <_calloc_r>
80007e76:	8b 3c       	st.w	r5[0xc],r12
80007e78:	6e 98       	ld.w	r8,r7[0x24]
80007e7a:	70 3c       	ld.w	r12,r8[0xc]
80007e7c:	58 0c       	cp.w	r12,0
80007e7e:	c1 b0       	breq	80007eb4 <_Balloc+0x6c>
80007e80:	6e 98       	ld.w	r8,r7[0x24]
80007e82:	70 38       	ld.w	r8,r8[0xc]
80007e84:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007e88:	70 0c       	ld.w	r12,r8[0x0]
80007e8a:	58 0c       	cp.w	r12,0
80007e8c:	c0 40       	breq	80007e94 <_Balloc+0x4c>
80007e8e:	78 09       	ld.w	r9,r12[0x0]
80007e90:	91 09       	st.w	r8[0x0],r9
80007e92:	c0 e8       	rjmp	80007eae <_Balloc+0x66>
80007e94:	0e 9c       	mov	r12,r7
80007e96:	30 17       	mov	r7,1
80007e98:	0e 9b       	mov	r11,r7
80007e9a:	ee 06 09 47 	lsl	r7,r7,r6
80007e9e:	ee ca ff fb 	sub	r10,r7,-5
80007ea2:	a3 6a       	lsl	r10,0x2
80007ea4:	e0 a0 04 7a 	rcall	80008798 <_calloc_r>
80007ea8:	c0 60       	breq	80007eb4 <_Balloc+0x6c>
80007eaa:	99 16       	st.w	r12[0x4],r6
80007eac:	99 27       	st.w	r12[0x8],r7
80007eae:	30 08       	mov	r8,0
80007eb0:	99 38       	st.w	r12[0xc],r8
80007eb2:	99 48       	st.w	r12[0x10],r8
80007eb4:	d8 22       	popm	r4-r7,pc
80007eb6:	d7 03       	nop

80007eb8 <__d2b>:
80007eb8:	d4 31       	pushm	r0-r7,lr
80007eba:	20 2d       	sub	sp,8
80007ebc:	16 93       	mov	r3,r11
80007ebe:	12 96       	mov	r6,r9
80007ec0:	10 95       	mov	r5,r8
80007ec2:	14 92       	mov	r2,r10
80007ec4:	30 1b       	mov	r11,1
80007ec6:	cc 1f       	rcall	80007e48 <_Balloc>
80007ec8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007ecc:	50 09       	stdsp	sp[0x0],r9
80007ece:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007ed2:	b5 a9       	sbr	r9,0x14
80007ed4:	f0 01 16 14 	lsr	r1,r8,0x14
80007ed8:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007edc:	18 94       	mov	r4,r12
80007ede:	58 02       	cp.w	r2,0
80007ee0:	c1 d0       	breq	80007f1a <__d2b+0x62>
80007ee2:	fa cc ff f8 	sub	r12,sp,-8
80007ee6:	18 d2       	st.w	--r12,r2
80007ee8:	c3 6f       	rcall	80007d54 <__lo0bits>
80007eea:	40 18       	lddsp	r8,sp[0x4]
80007eec:	c0 d0       	breq	80007f06 <__d2b+0x4e>
80007eee:	40 09       	lddsp	r9,sp[0x0]
80007ef0:	f8 0a 11 20 	rsub	r10,r12,32
80007ef4:	f2 0a 09 4a 	lsl	r10,r9,r10
80007ef8:	f5 e8 10 08 	or	r8,r10,r8
80007efc:	89 58       	st.w	r4[0x14],r8
80007efe:	f2 0c 0a 49 	lsr	r9,r9,r12
80007f02:	50 09       	stdsp	sp[0x0],r9
80007f04:	c0 28       	rjmp	80007f08 <__d2b+0x50>
80007f06:	89 58       	st.w	r4[0x14],r8
80007f08:	40 08       	lddsp	r8,sp[0x0]
80007f0a:	58 08       	cp.w	r8,0
80007f0c:	f9 b3 01 02 	movne	r3,2
80007f10:	f9 b3 00 01 	moveq	r3,1
80007f14:	89 68       	st.w	r4[0x18],r8
80007f16:	89 43       	st.w	r4[0x10],r3
80007f18:	c0 88       	rjmp	80007f28 <__d2b+0x70>
80007f1a:	1a 9c       	mov	r12,sp
80007f1c:	c1 cf       	rcall	80007d54 <__lo0bits>
80007f1e:	30 13       	mov	r3,1
80007f20:	40 08       	lddsp	r8,sp[0x0]
80007f22:	2e 0c       	sub	r12,-32
80007f24:	89 43       	st.w	r4[0x10],r3
80007f26:	89 58       	st.w	r4[0x14],r8
80007f28:	58 01       	cp.w	r1,0
80007f2a:	c0 90       	breq	80007f3c <__d2b+0x84>
80007f2c:	e2 c1 04 33 	sub	r1,r1,1075
80007f30:	18 01       	add	r1,r12
80007f32:	8d 01       	st.w	r6[0x0],r1
80007f34:	f8 0c 11 35 	rsub	r12,r12,53
80007f38:	8b 0c       	st.w	r5[0x0],r12
80007f3a:	c0 c8       	rjmp	80007f52 <__d2b+0x9a>
80007f3c:	e6 c8 ff fc 	sub	r8,r3,-4
80007f40:	f8 cc 04 32 	sub	r12,r12,1074
80007f44:	a5 73       	lsl	r3,0x5
80007f46:	8d 0c       	st.w	r6[0x0],r12
80007f48:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007f4c:	cd 4e       	rcall	80007cf4 <__hi0bits>
80007f4e:	18 13       	sub	r3,r12
80007f50:	8b 03       	st.w	r5[0x0],r3
80007f52:	08 9c       	mov	r12,r4
80007f54:	2f ed       	sub	sp,-8
80007f56:	d8 32       	popm	r0-r7,pc

80007f58 <__mdiff>:
80007f58:	d4 31       	pushm	r0-r7,lr
80007f5a:	74 48       	ld.w	r8,r10[0x10]
80007f5c:	76 45       	ld.w	r5,r11[0x10]
80007f5e:	16 97       	mov	r7,r11
80007f60:	14 96       	mov	r6,r10
80007f62:	10 15       	sub	r5,r8
80007f64:	c1 31       	brne	80007f8a <__mdiff+0x32>
80007f66:	2f b8       	sub	r8,-5
80007f68:	ee ce ff ec 	sub	lr,r7,-20
80007f6c:	a3 68       	lsl	r8,0x2
80007f6e:	f4 08 00 0b 	add	r11,r10,r8
80007f72:	ee 08 00 08 	add	r8,r7,r8
80007f76:	11 4a       	ld.w	r10,--r8
80007f78:	17 49       	ld.w	r9,--r11
80007f7a:	12 3a       	cp.w	r10,r9
80007f7c:	c0 30       	breq	80007f82 <__mdiff+0x2a>
80007f7e:	c0 e2       	brcc	80007f9a <__mdiff+0x42>
80007f80:	c0 78       	rjmp	80007f8e <__mdiff+0x36>
80007f82:	1c 38       	cp.w	r8,lr
80007f84:	fe 9b ff f9 	brhi	80007f76 <__mdiff+0x1e>
80007f88:	c4 98       	rjmp	8000801a <__mdiff+0xc2>
80007f8a:	58 05       	cp.w	r5,0
80007f8c:	c0 64       	brge	80007f98 <__mdiff+0x40>
80007f8e:	0e 98       	mov	r8,r7
80007f90:	30 15       	mov	r5,1
80007f92:	0c 97       	mov	r7,r6
80007f94:	10 96       	mov	r6,r8
80007f96:	c0 28       	rjmp	80007f9a <__mdiff+0x42>
80007f98:	30 05       	mov	r5,0
80007f9a:	6e 1b       	ld.w	r11,r7[0x4]
80007f9c:	c5 6f       	rcall	80007e48 <_Balloc>
80007f9e:	6e 49       	ld.w	r9,r7[0x10]
80007fa0:	6c 44       	ld.w	r4,r6[0x10]
80007fa2:	99 35       	st.w	r12[0xc],r5
80007fa4:	2f b4       	sub	r4,-5
80007fa6:	f2 c5 ff fb 	sub	r5,r9,-5
80007faa:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007fae:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007fb2:	2e c6       	sub	r6,-20
80007fb4:	2e c7       	sub	r7,-20
80007fb6:	f8 c8 ff ec 	sub	r8,r12,-20
80007fba:	30 0a       	mov	r10,0
80007fbc:	0f 0e       	ld.w	lr,r7++
80007fbe:	0d 0b       	ld.w	r11,r6++
80007fc0:	fc 02 16 10 	lsr	r2,lr,0x10
80007fc4:	f6 03 16 10 	lsr	r3,r11,0x10
80007fc8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007fcc:	e4 03 01 03 	sub	r3,r2,r3
80007fd0:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007fd4:	fc 0b 01 0b 	sub	r11,lr,r11
80007fd8:	f6 0a 00 0a 	add	r10,r11,r10
80007fdc:	b0 1a       	st.h	r8[0x2],r10
80007fde:	b1 4a       	asr	r10,0x10
80007fe0:	e6 0a 00 0a 	add	r10,r3,r10
80007fe4:	b0 0a       	st.h	r8[0x0],r10
80007fe6:	2f c8       	sub	r8,-4
80007fe8:	b1 4a       	asr	r10,0x10
80007fea:	08 36       	cp.w	r6,r4
80007fec:	ce 83       	brcs	80007fbc <__mdiff+0x64>
80007fee:	c0 d8       	rjmp	80008008 <__mdiff+0xb0>
80007ff0:	0f 0b       	ld.w	r11,r7++
80007ff2:	f6 0e 16 10 	lsr	lr,r11,0x10
80007ff6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007ffa:	16 0a       	add	r10,r11
80007ffc:	b0 1a       	st.h	r8[0x2],r10
80007ffe:	b1 4a       	asr	r10,0x10
80008000:	1c 0a       	add	r10,lr
80008002:	b0 0a       	st.h	r8[0x0],r10
80008004:	2f c8       	sub	r8,-4
80008006:	b1 4a       	asr	r10,0x10
80008008:	0a 37       	cp.w	r7,r5
8000800a:	cf 33       	brcs	80007ff0 <__mdiff+0x98>
8000800c:	c0 28       	rjmp	80008010 <__mdiff+0xb8>
8000800e:	20 19       	sub	r9,1
80008010:	11 4a       	ld.w	r10,--r8
80008012:	58 0a       	cp.w	r10,0
80008014:	cf d0       	breq	8000800e <__mdiff+0xb6>
80008016:	99 49       	st.w	r12[0x10],r9
80008018:	d8 32       	popm	r0-r7,pc
8000801a:	30 0b       	mov	r11,0
8000801c:	c1 6f       	rcall	80007e48 <_Balloc>
8000801e:	30 18       	mov	r8,1
80008020:	99 48       	st.w	r12[0x10],r8
80008022:	30 08       	mov	r8,0
80008024:	99 58       	st.w	r12[0x14],r8
80008026:	d8 32       	popm	r0-r7,pc

80008028 <__lshift>:
80008028:	d4 31       	pushm	r0-r7,lr
8000802a:	16 97       	mov	r7,r11
8000802c:	76 46       	ld.w	r6,r11[0x10]
8000802e:	f4 02 14 05 	asr	r2,r10,0x5
80008032:	2f f6       	sub	r6,-1
80008034:	14 93       	mov	r3,r10
80008036:	18 94       	mov	r4,r12
80008038:	04 06       	add	r6,r2
8000803a:	76 1b       	ld.w	r11,r11[0x4]
8000803c:	6e 28       	ld.w	r8,r7[0x8]
8000803e:	c0 38       	rjmp	80008044 <__lshift+0x1c>
80008040:	2f fb       	sub	r11,-1
80008042:	a1 78       	lsl	r8,0x1
80008044:	10 36       	cp.w	r6,r8
80008046:	fe 99 ff fd 	brgt	80008040 <__lshift+0x18>
8000804a:	08 9c       	mov	r12,r4
8000804c:	cf ee       	rcall	80007e48 <_Balloc>
8000804e:	30 09       	mov	r9,0
80008050:	18 95       	mov	r5,r12
80008052:	f8 c8 ff ec 	sub	r8,r12,-20
80008056:	12 9a       	mov	r10,r9
80008058:	c0 38       	rjmp	8000805e <__lshift+0x36>
8000805a:	10 aa       	st.w	r8++,r10
8000805c:	2f f9       	sub	r9,-1
8000805e:	04 39       	cp.w	r9,r2
80008060:	cf d5       	brlt	8000805a <__lshift+0x32>
80008062:	6e 4b       	ld.w	r11,r7[0x10]
80008064:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008068:	2f bb       	sub	r11,-5
8000806a:	ee c9 ff ec 	sub	r9,r7,-20
8000806e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80008072:	58 03       	cp.w	r3,0
80008074:	c1 30       	breq	8000809a <__lshift+0x72>
80008076:	e6 0c 11 20 	rsub	r12,r3,32
8000807a:	30 0a       	mov	r10,0
8000807c:	72 02       	ld.w	r2,r9[0x0]
8000807e:	e4 03 09 42 	lsl	r2,r2,r3
80008082:	04 4a       	or	r10,r2
80008084:	10 aa       	st.w	r8++,r10
80008086:	13 0a       	ld.w	r10,r9++
80008088:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000808c:	16 39       	cp.w	r9,r11
8000808e:	cf 73       	brcs	8000807c <__lshift+0x54>
80008090:	91 0a       	st.w	r8[0x0],r10
80008092:	58 0a       	cp.w	r10,0
80008094:	c0 70       	breq	800080a2 <__lshift+0x7a>
80008096:	2f f6       	sub	r6,-1
80008098:	c0 58       	rjmp	800080a2 <__lshift+0x7a>
8000809a:	13 0a       	ld.w	r10,r9++
8000809c:	10 aa       	st.w	r8++,r10
8000809e:	16 39       	cp.w	r9,r11
800080a0:	cf d3       	brcs	8000809a <__lshift+0x72>
800080a2:	08 9c       	mov	r12,r4
800080a4:	20 16       	sub	r6,1
800080a6:	0e 9b       	mov	r11,r7
800080a8:	8b 46       	st.w	r5[0x10],r6
800080aa:	cb 5e       	rcall	80007e14 <_Bfree>
800080ac:	0a 9c       	mov	r12,r5
800080ae:	d8 32       	popm	r0-r7,pc

800080b0 <__multiply>:
800080b0:	d4 31       	pushm	r0-r7,lr
800080b2:	20 2d       	sub	sp,8
800080b4:	76 49       	ld.w	r9,r11[0x10]
800080b6:	74 48       	ld.w	r8,r10[0x10]
800080b8:	16 96       	mov	r6,r11
800080ba:	14 95       	mov	r5,r10
800080bc:	10 39       	cp.w	r9,r8
800080be:	ec 08 17 50 	movlt	r8,r6
800080c2:	ea 06 17 50 	movlt	r6,r5
800080c6:	f0 05 17 50 	movlt	r5,r8
800080ca:	6c 28       	ld.w	r8,r6[0x8]
800080cc:	76 43       	ld.w	r3,r11[0x10]
800080ce:	74 42       	ld.w	r2,r10[0x10]
800080d0:	76 1b       	ld.w	r11,r11[0x4]
800080d2:	e4 03 00 07 	add	r7,r2,r3
800080d6:	10 37       	cp.w	r7,r8
800080d8:	f7 bb 09 ff 	subgt	r11,-1
800080dc:	cb 6e       	rcall	80007e48 <_Balloc>
800080de:	ee c4 ff fb 	sub	r4,r7,-5
800080e2:	f8 c9 ff ec 	sub	r9,r12,-20
800080e6:	f8 04 00 24 	add	r4,r12,r4<<0x2
800080ea:	30 0a       	mov	r10,0
800080ec:	12 98       	mov	r8,r9
800080ee:	c0 28       	rjmp	800080f2 <__multiply+0x42>
800080f0:	10 aa       	st.w	r8++,r10
800080f2:	08 38       	cp.w	r8,r4
800080f4:	cf e3       	brcs	800080f0 <__multiply+0x40>
800080f6:	2f b3       	sub	r3,-5
800080f8:	2f b2       	sub	r2,-5
800080fa:	ec 03 00 23 	add	r3,r6,r3<<0x2
800080fe:	ea 02 00 22 	add	r2,r5,r2<<0x2
80008102:	ec cb ff ec 	sub	r11,r6,-20
80008106:	50 12       	stdsp	sp[0x4],r2
80008108:	ea ca ff ec 	sub	r10,r5,-20
8000810c:	c4 48       	rjmp	80008194 <__multiply+0xe4>
8000810e:	94 95       	ld.uh	r5,r10[0x2]
80008110:	58 05       	cp.w	r5,0
80008112:	c2 00       	breq	80008152 <__multiply+0xa2>
80008114:	12 98       	mov	r8,r9
80008116:	16 96       	mov	r6,r11
80008118:	30 0e       	mov	lr,0
8000811a:	50 09       	stdsp	sp[0x0],r9
8000811c:	0d 02       	ld.w	r2,r6++
8000811e:	e4 00 16 10 	lsr	r0,r2,0x10
80008122:	70 01       	ld.w	r1,r8[0x0]
80008124:	70 09       	ld.w	r9,r8[0x0]
80008126:	b1 81       	lsr	r1,0x10
80008128:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000812c:	e0 05 03 41 	mac	r1,r0,r5
80008130:	ab 32       	mul	r2,r5
80008132:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008136:	00 02       	add	r2,r0
80008138:	e4 0e 00 0e 	add	lr,r2,lr
8000813c:	b0 1e       	st.h	r8[0x2],lr
8000813e:	b1 8e       	lsr	lr,0x10
80008140:	1c 01       	add	r1,lr
80008142:	b0 01       	st.h	r8[0x0],r1
80008144:	e2 0e 16 10 	lsr	lr,r1,0x10
80008148:	2f c8       	sub	r8,-4
8000814a:	06 36       	cp.w	r6,r3
8000814c:	ce 83       	brcs	8000811c <__multiply+0x6c>
8000814e:	40 09       	lddsp	r9,sp[0x0]
80008150:	91 0e       	st.w	r8[0x0],lr
80008152:	94 86       	ld.uh	r6,r10[0x0]
80008154:	58 06       	cp.w	r6,0
80008156:	c1 d0       	breq	80008190 <__multiply+0xe0>
80008158:	72 02       	ld.w	r2,r9[0x0]
8000815a:	12 98       	mov	r8,r9
8000815c:	16 9e       	mov	lr,r11
8000815e:	30 05       	mov	r5,0
80008160:	b0 12       	st.h	r8[0x2],r2
80008162:	1d 01       	ld.w	r1,lr++
80008164:	90 82       	ld.uh	r2,r8[0x0]
80008166:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000816a:	ad 30       	mul	r0,r6
8000816c:	e0 02 00 02 	add	r2,r0,r2
80008170:	e4 05 00 05 	add	r5,r2,r5
80008174:	b0 05       	st.h	r8[0x0],r5
80008176:	b1 85       	lsr	r5,0x10
80008178:	b1 81       	lsr	r1,0x10
8000817a:	2f c8       	sub	r8,-4
8000817c:	ad 31       	mul	r1,r6
8000817e:	90 92       	ld.uh	r2,r8[0x2]
80008180:	e2 02 00 02 	add	r2,r1,r2
80008184:	0a 02       	add	r2,r5
80008186:	e4 05 16 10 	lsr	r5,r2,0x10
8000818a:	06 3e       	cp.w	lr,r3
8000818c:	ce a3       	brcs	80008160 <__multiply+0xb0>
8000818e:	91 02       	st.w	r8[0x0],r2
80008190:	2f ca       	sub	r10,-4
80008192:	2f c9       	sub	r9,-4
80008194:	40 18       	lddsp	r8,sp[0x4]
80008196:	10 3a       	cp.w	r10,r8
80008198:	cb b3       	brcs	8000810e <__multiply+0x5e>
8000819a:	c0 28       	rjmp	8000819e <__multiply+0xee>
8000819c:	20 17       	sub	r7,1
8000819e:	58 07       	cp.w	r7,0
800081a0:	e0 8a 00 05 	brle	800081aa <__multiply+0xfa>
800081a4:	09 48       	ld.w	r8,--r4
800081a6:	58 08       	cp.w	r8,0
800081a8:	cf a0       	breq	8000819c <__multiply+0xec>
800081aa:	99 47       	st.w	r12[0x10],r7
800081ac:	2f ed       	sub	sp,-8
800081ae:	d8 32       	popm	r0-r7,pc

800081b0 <__i2b>:
800081b0:	d4 21       	pushm	r4-r7,lr
800081b2:	16 97       	mov	r7,r11
800081b4:	30 1b       	mov	r11,1
800081b6:	c4 9e       	rcall	80007e48 <_Balloc>
800081b8:	30 19       	mov	r9,1
800081ba:	99 57       	st.w	r12[0x14],r7
800081bc:	99 49       	st.w	r12[0x10],r9
800081be:	d8 22       	popm	r4-r7,pc

800081c0 <__multadd>:
800081c0:	d4 31       	pushm	r0-r7,lr
800081c2:	30 08       	mov	r8,0
800081c4:	12 95       	mov	r5,r9
800081c6:	16 97       	mov	r7,r11
800081c8:	18 96       	mov	r6,r12
800081ca:	76 44       	ld.w	r4,r11[0x10]
800081cc:	f6 c9 ff ec 	sub	r9,r11,-20
800081d0:	72 0b       	ld.w	r11,r9[0x0]
800081d2:	f6 0c 16 10 	lsr	r12,r11,0x10
800081d6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800081da:	f4 0c 02 4c 	mul	r12,r10,r12
800081de:	f4 0b 03 45 	mac	r5,r10,r11
800081e2:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800081e6:	b1 85       	lsr	r5,0x10
800081e8:	18 05       	add	r5,r12
800081ea:	ea 0c 15 10 	lsl	r12,r5,0x10
800081ee:	f8 0b 00 0b 	add	r11,r12,r11
800081f2:	12 ab       	st.w	r9++,r11
800081f4:	2f f8       	sub	r8,-1
800081f6:	b1 85       	lsr	r5,0x10
800081f8:	08 38       	cp.w	r8,r4
800081fa:	ce b5       	brlt	800081d0 <__multadd+0x10>
800081fc:	58 05       	cp.w	r5,0
800081fe:	c1 c0       	breq	80008236 <__multadd+0x76>
80008200:	6e 28       	ld.w	r8,r7[0x8]
80008202:	10 34       	cp.w	r4,r8
80008204:	c1 35       	brlt	8000822a <__multadd+0x6a>
80008206:	6e 1b       	ld.w	r11,r7[0x4]
80008208:	0c 9c       	mov	r12,r6
8000820a:	2f fb       	sub	r11,-1
8000820c:	c1 ee       	rcall	80007e48 <_Balloc>
8000820e:	6e 4a       	ld.w	r10,r7[0x10]
80008210:	ee cb ff f4 	sub	r11,r7,-12
80008214:	18 93       	mov	r3,r12
80008216:	2f ea       	sub	r10,-2
80008218:	2f 4c       	sub	r12,-12
8000821a:	a3 6a       	lsl	r10,0x2
8000821c:	fe b0 de 3d 	rcall	80003e96 <memcpy>
80008220:	0e 9b       	mov	r11,r7
80008222:	0c 9c       	mov	r12,r6
80008224:	fe b0 fd f8 	rcall	80007e14 <_Bfree>
80008228:	06 97       	mov	r7,r3
8000822a:	e8 c8 ff ff 	sub	r8,r4,-1
8000822e:	2f b4       	sub	r4,-5
80008230:	8f 48       	st.w	r7[0x10],r8
80008232:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008236:	0e 9c       	mov	r12,r7
80008238:	d8 32       	popm	r0-r7,pc
8000823a:	d7 03       	nop

8000823c <__pow5mult>:
8000823c:	d4 31       	pushm	r0-r7,lr
8000823e:	14 96       	mov	r6,r10
80008240:	18 97       	mov	r7,r12
80008242:	16 94       	mov	r4,r11
80008244:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008248:	c0 90       	breq	8000825a <__pow5mult+0x1e>
8000824a:	20 18       	sub	r8,1
8000824c:	fe c9 e1 e8 	sub	r9,pc,-7704
80008250:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008254:	30 09       	mov	r9,0
80008256:	cb 5f       	rcall	800081c0 <__multadd>
80008258:	18 94       	mov	r4,r12
8000825a:	a3 46       	asr	r6,0x2
8000825c:	c3 40       	breq	800082c4 <__pow5mult+0x88>
8000825e:	6e 95       	ld.w	r5,r7[0x24]
80008260:	58 05       	cp.w	r5,0
80008262:	c0 91       	brne	80008274 <__pow5mult+0x38>
80008264:	31 0c       	mov	r12,16
80008266:	fe b0 fa fb 	rcall	8000785c <malloc>
8000826a:	99 35       	st.w	r12[0xc],r5
8000826c:	8f 9c       	st.w	r7[0x24],r12
8000826e:	99 15       	st.w	r12[0x4],r5
80008270:	99 25       	st.w	r12[0x8],r5
80008272:	99 05       	st.w	r12[0x0],r5
80008274:	6e 93       	ld.w	r3,r7[0x24]
80008276:	66 25       	ld.w	r5,r3[0x8]
80008278:	58 05       	cp.w	r5,0
8000827a:	c0 c1       	brne	80008292 <__pow5mult+0x56>
8000827c:	e0 6b 02 71 	mov	r11,625
80008280:	0e 9c       	mov	r12,r7
80008282:	c9 7f       	rcall	800081b0 <__i2b>
80008284:	87 2c       	st.w	r3[0x8],r12
80008286:	30 08       	mov	r8,0
80008288:	18 95       	mov	r5,r12
8000828a:	99 08       	st.w	r12[0x0],r8
8000828c:	c0 38       	rjmp	80008292 <__pow5mult+0x56>
8000828e:	06 9c       	mov	r12,r3
80008290:	18 95       	mov	r5,r12
80008292:	ed b6 00 00 	bld	r6,0x0
80008296:	c0 b1       	brne	800082ac <__pow5mult+0x70>
80008298:	08 9b       	mov	r11,r4
8000829a:	0a 9a       	mov	r10,r5
8000829c:	0e 9c       	mov	r12,r7
8000829e:	c0 9f       	rcall	800080b0 <__multiply>
800082a0:	08 9b       	mov	r11,r4
800082a2:	18 93       	mov	r3,r12
800082a4:	0e 9c       	mov	r12,r7
800082a6:	06 94       	mov	r4,r3
800082a8:	fe b0 fd b6 	rcall	80007e14 <_Bfree>
800082ac:	a1 56       	asr	r6,0x1
800082ae:	c0 b0       	breq	800082c4 <__pow5mult+0x88>
800082b0:	6a 03       	ld.w	r3,r5[0x0]
800082b2:	58 03       	cp.w	r3,0
800082b4:	ce d1       	brne	8000828e <__pow5mult+0x52>
800082b6:	0a 9a       	mov	r10,r5
800082b8:	0a 9b       	mov	r11,r5
800082ba:	0e 9c       	mov	r12,r7
800082bc:	cf ae       	rcall	800080b0 <__multiply>
800082be:	8b 0c       	st.w	r5[0x0],r12
800082c0:	99 03       	st.w	r12[0x0],r3
800082c2:	ce 7b       	rjmp	80008290 <__pow5mult+0x54>
800082c4:	08 9c       	mov	r12,r4
800082c6:	d8 32       	popm	r0-r7,pc

800082c8 <_realloc_r>:
800082c8:	d4 31       	pushm	r0-r7,lr
800082ca:	20 1d       	sub	sp,4
800082cc:	16 94       	mov	r4,r11
800082ce:	18 92       	mov	r2,r12
800082d0:	14 9b       	mov	r11,r10
800082d2:	58 04       	cp.w	r4,0
800082d4:	c0 51       	brne	800082de <_realloc_r+0x16>
800082d6:	fe b0 fa cb 	rcall	8000786c <_malloc_r>
800082da:	18 95       	mov	r5,r12
800082dc:	c5 39       	rjmp	80008582 <_realloc_r+0x2ba>
800082de:	50 0a       	stdsp	sp[0x0],r10
800082e0:	fe b0 fd 08 	rcall	80007cf0 <__malloc_lock>
800082e4:	40 0b       	lddsp	r11,sp[0x0]
800082e6:	f6 c8 ff f5 	sub	r8,r11,-11
800082ea:	e8 c1 00 08 	sub	r1,r4,8
800082ee:	10 96       	mov	r6,r8
800082f0:	62 1c       	ld.w	r12,r1[0x4]
800082f2:	e0 16 ff f8 	andl	r6,0xfff8
800082f6:	59 68       	cp.w	r8,22
800082f8:	f9 b6 08 10 	movls	r6,16
800082fc:	16 36       	cp.w	r6,r11
800082fe:	5f 38       	srlo	r8
80008300:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008304:	c0 50       	breq	8000830e <_realloc_r+0x46>
80008306:	30 c8       	mov	r8,12
80008308:	30 05       	mov	r5,0
8000830a:	85 38       	st.w	r2[0xc],r8
8000830c:	c3 b9       	rjmp	80008582 <_realloc_r+0x2ba>
8000830e:	18 90       	mov	r0,r12
80008310:	e0 10 ff fc 	andl	r0,0xfffc
80008314:	0c 30       	cp.w	r0,r6
80008316:	e0 84 01 0b 	brge	8000852c <_realloc_r+0x264>
8000831a:	e0 68 01 1c 	mov	r8,284
8000831e:	e2 00 00 09 	add	r9,r1,r0
80008322:	70 25       	ld.w	r5,r8[0x8]
80008324:	0a 39       	cp.w	r9,r5
80008326:	c0 90       	breq	80008338 <_realloc_r+0x70>
80008328:	72 1a       	ld.w	r10,r9[0x4]
8000832a:	a1 ca       	cbr	r10,0x0
8000832c:	f2 0a 00 0a 	add	r10,r9,r10
80008330:	74 1a       	ld.w	r10,r10[0x4]
80008332:	ed ba 00 00 	bld	r10,0x0
80008336:	c2 20       	breq	8000837a <_realloc_r+0xb2>
80008338:	72 1a       	ld.w	r10,r9[0x4]
8000833a:	e0 1a ff fc 	andl	r10,0xfffc
8000833e:	f4 00 00 03 	add	r3,r10,r0
80008342:	0a 39       	cp.w	r9,r5
80008344:	c1 31       	brne	8000836a <_realloc_r+0xa2>
80008346:	ec c7 ff f0 	sub	r7,r6,-16
8000834a:	0e 33       	cp.w	r3,r7
8000834c:	c1 95       	brlt	8000837e <_realloc_r+0xb6>
8000834e:	e2 06 00 09 	add	r9,r1,r6
80008352:	0c 13       	sub	r3,r6
80008354:	a1 a3       	sbr	r3,0x0
80008356:	93 13       	st.w	r9[0x4],r3
80008358:	91 29       	st.w	r8[0x8],r9
8000835a:	04 9c       	mov	r12,r2
8000835c:	62 18       	ld.w	r8,r1[0x4]
8000835e:	08 95       	mov	r5,r4
80008360:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008364:	10 46       	or	r6,r8
80008366:	83 16       	st.w	r1[0x4],r6
80008368:	c0 b9       	rjmp	8000857e <_realloc_r+0x2b6>
8000836a:	0c 33       	cp.w	r3,r6
8000836c:	c0 95       	brlt	8000837e <_realloc_r+0xb6>
8000836e:	72 28       	ld.w	r8,r9[0x8]
80008370:	02 97       	mov	r7,r1
80008372:	72 39       	ld.w	r9,r9[0xc]
80008374:	93 28       	st.w	r9[0x8],r8
80008376:	91 39       	st.w	r8[0xc],r9
80008378:	cd c8       	rjmp	80008530 <_realloc_r+0x268>
8000837a:	30 0a       	mov	r10,0
8000837c:	14 99       	mov	r9,r10
8000837e:	ed bc 00 00 	bld	r12,0x0
80008382:	e0 80 00 95 	breq	800084ac <_realloc_r+0x1e4>
80008386:	62 07       	ld.w	r7,r1[0x0]
80008388:	e2 07 01 07 	sub	r7,r1,r7
8000838c:	6e 1c       	ld.w	r12,r7[0x4]
8000838e:	e0 1c ff fc 	andl	r12,0xfffc
80008392:	58 09       	cp.w	r9,0
80008394:	c5 60       	breq	80008440 <_realloc_r+0x178>
80008396:	f8 00 00 03 	add	r3,r12,r0
8000839a:	0a 39       	cp.w	r9,r5
8000839c:	c4 81       	brne	8000842c <_realloc_r+0x164>
8000839e:	14 03       	add	r3,r10
800083a0:	ec c9 ff f0 	sub	r9,r6,-16
800083a4:	12 33       	cp.w	r3,r9
800083a6:	c4 d5       	brlt	80008440 <_realloc_r+0x178>
800083a8:	6e 3a       	ld.w	r10,r7[0xc]
800083aa:	6e 29       	ld.w	r9,r7[0x8]
800083ac:	95 29       	st.w	r10[0x8],r9
800083ae:	93 3a       	st.w	r9[0xc],r10
800083b0:	ee c5 ff f8 	sub	r5,r7,-8
800083b4:	e0 ca 00 04 	sub	r10,r0,4
800083b8:	e0 4a 00 24 	cp.w	r10,36
800083bc:	e0 8b 00 25 	brhi	80008406 <_realloc_r+0x13e>
800083c0:	0a 99       	mov	r9,r5
800083c2:	59 3a       	cp.w	r10,19
800083c4:	e0 88 00 1a 	brls	800083f8 <_realloc_r+0x130>
800083c8:	09 09       	ld.w	r9,r4++
800083ca:	8b 09       	st.w	r5[0x0],r9
800083cc:	09 09       	ld.w	r9,r4++
800083ce:	8f 39       	st.w	r7[0xc],r9
800083d0:	ee c9 ff f0 	sub	r9,r7,-16
800083d4:	59 ba       	cp.w	r10,27
800083d6:	e0 88 00 11 	brls	800083f8 <_realloc_r+0x130>
800083da:	09 0b       	ld.w	r11,r4++
800083dc:	93 0b       	st.w	r9[0x0],r11
800083de:	09 09       	ld.w	r9,r4++
800083e0:	8f 59       	st.w	r7[0x14],r9
800083e2:	ee c9 ff e8 	sub	r9,r7,-24
800083e6:	e0 4a 00 24 	cp.w	r10,36
800083ea:	c0 71       	brne	800083f8 <_realloc_r+0x130>
800083ec:	09 0a       	ld.w	r10,r4++
800083ee:	93 0a       	st.w	r9[0x0],r10
800083f0:	ee c9 ff e0 	sub	r9,r7,-32
800083f4:	09 0a       	ld.w	r10,r4++
800083f6:	8f 7a       	st.w	r7[0x1c],r10
800083f8:	09 0a       	ld.w	r10,r4++
800083fa:	12 aa       	st.w	r9++,r10
800083fc:	68 0a       	ld.w	r10,r4[0x0]
800083fe:	93 0a       	st.w	r9[0x0],r10
80008400:	68 1a       	ld.w	r10,r4[0x4]
80008402:	93 1a       	st.w	r9[0x4],r10
80008404:	c0 78       	rjmp	80008412 <_realloc_r+0x14a>
80008406:	50 08       	stdsp	sp[0x0],r8
80008408:	08 9b       	mov	r11,r4
8000840a:	0a 9c       	mov	r12,r5
8000840c:	fe b0 fc 53 	rcall	80007cb2 <memmove>
80008410:	40 08       	lddsp	r8,sp[0x0]
80008412:	ee 06 00 09 	add	r9,r7,r6
80008416:	0c 13       	sub	r3,r6
80008418:	a1 a3       	sbr	r3,0x0
8000841a:	93 13       	st.w	r9[0x4],r3
8000841c:	91 29       	st.w	r8[0x8],r9
8000841e:	04 9c       	mov	r12,r2
80008420:	6e 18       	ld.w	r8,r7[0x4]
80008422:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008426:	10 46       	or	r6,r8
80008428:	8f 16       	st.w	r7[0x4],r6
8000842a:	ca a8       	rjmp	8000857e <_realloc_r+0x2b6>
8000842c:	14 03       	add	r3,r10
8000842e:	0c 33       	cp.w	r3,r6
80008430:	c0 85       	brlt	80008440 <_realloc_r+0x178>
80008432:	72 28       	ld.w	r8,r9[0x8]
80008434:	72 39       	ld.w	r9,r9[0xc]
80008436:	93 28       	st.w	r9[0x8],r8
80008438:	91 39       	st.w	r8[0xc],r9
8000843a:	6e 28       	ld.w	r8,r7[0x8]
8000843c:	6e 39       	ld.w	r9,r7[0xc]
8000843e:	c0 78       	rjmp	8000844c <_realloc_r+0x184>
80008440:	f8 00 00 03 	add	r3,r12,r0
80008444:	0c 33       	cp.w	r3,r6
80008446:	c3 35       	brlt	800084ac <_realloc_r+0x1e4>
80008448:	6e 39       	ld.w	r9,r7[0xc]
8000844a:	6e 28       	ld.w	r8,r7[0x8]
8000844c:	93 28       	st.w	r9[0x8],r8
8000844e:	91 39       	st.w	r8[0xc],r9
80008450:	e0 ca 00 04 	sub	r10,r0,4
80008454:	ee cc ff f8 	sub	r12,r7,-8
80008458:	e0 4a 00 24 	cp.w	r10,36
8000845c:	e0 8b 00 24 	brhi	800084a4 <_realloc_r+0x1dc>
80008460:	59 3a       	cp.w	r10,19
80008462:	e0 88 00 1a 	brls	80008496 <_realloc_r+0x1ce>
80008466:	09 08       	ld.w	r8,r4++
80008468:	99 08       	st.w	r12[0x0],r8
8000846a:	09 08       	ld.w	r8,r4++
8000846c:	8f 38       	st.w	r7[0xc],r8
8000846e:	ee cc ff f0 	sub	r12,r7,-16
80008472:	59 ba       	cp.w	r10,27
80008474:	e0 88 00 11 	brls	80008496 <_realloc_r+0x1ce>
80008478:	09 08       	ld.w	r8,r4++
8000847a:	99 08       	st.w	r12[0x0],r8
8000847c:	09 08       	ld.w	r8,r4++
8000847e:	8f 58       	st.w	r7[0x14],r8
80008480:	ee cc ff e8 	sub	r12,r7,-24
80008484:	e0 4a 00 24 	cp.w	r10,36
80008488:	c0 71       	brne	80008496 <_realloc_r+0x1ce>
8000848a:	09 08       	ld.w	r8,r4++
8000848c:	99 08       	st.w	r12[0x0],r8
8000848e:	ee cc ff e0 	sub	r12,r7,-32
80008492:	09 08       	ld.w	r8,r4++
80008494:	8f 78       	st.w	r7[0x1c],r8
80008496:	09 08       	ld.w	r8,r4++
80008498:	18 a8       	st.w	r12++,r8
8000849a:	68 08       	ld.w	r8,r4[0x0]
8000849c:	99 08       	st.w	r12[0x0],r8
8000849e:	68 18       	ld.w	r8,r4[0x4]
800084a0:	99 18       	st.w	r12[0x4],r8
800084a2:	c4 78       	rjmp	80008530 <_realloc_r+0x268>
800084a4:	08 9b       	mov	r11,r4
800084a6:	fe b0 fc 06 	rcall	80007cb2 <memmove>
800084aa:	c4 38       	rjmp	80008530 <_realloc_r+0x268>
800084ac:	04 9c       	mov	r12,r2
800084ae:	fe b0 f9 df 	rcall	8000786c <_malloc_r>
800084b2:	18 95       	mov	r5,r12
800084b4:	c3 a0       	breq	80008528 <_realloc_r+0x260>
800084b6:	62 18       	ld.w	r8,r1[0x4]
800084b8:	f8 c9 00 08 	sub	r9,r12,8
800084bc:	a1 c8       	cbr	r8,0x0
800084be:	e2 08 00 08 	add	r8,r1,r8
800084c2:	10 39       	cp.w	r9,r8
800084c4:	c0 71       	brne	800084d2 <_realloc_r+0x20a>
800084c6:	72 13       	ld.w	r3,r9[0x4]
800084c8:	02 97       	mov	r7,r1
800084ca:	e0 13 ff fc 	andl	r3,0xfffc
800084ce:	00 03       	add	r3,r0
800084d0:	c3 08       	rjmp	80008530 <_realloc_r+0x268>
800084d2:	e0 ca 00 04 	sub	r10,r0,4
800084d6:	e0 4a 00 24 	cp.w	r10,36
800084da:	e0 8b 00 20 	brhi	8000851a <_realloc_r+0x252>
800084de:	08 99       	mov	r9,r4
800084e0:	18 98       	mov	r8,r12
800084e2:	59 3a       	cp.w	r10,19
800084e4:	e0 88 00 14 	brls	8000850c <_realloc_r+0x244>
800084e8:	13 0b       	ld.w	r11,r9++
800084ea:	10 ab       	st.w	r8++,r11
800084ec:	13 0b       	ld.w	r11,r9++
800084ee:	10 ab       	st.w	r8++,r11
800084f0:	59 ba       	cp.w	r10,27
800084f2:	e0 88 00 0d 	brls	8000850c <_realloc_r+0x244>
800084f6:	13 0b       	ld.w	r11,r9++
800084f8:	10 ab       	st.w	r8++,r11
800084fa:	13 0b       	ld.w	r11,r9++
800084fc:	10 ab       	st.w	r8++,r11
800084fe:	e0 4a 00 24 	cp.w	r10,36
80008502:	c0 51       	brne	8000850c <_realloc_r+0x244>
80008504:	13 0a       	ld.w	r10,r9++
80008506:	10 aa       	st.w	r8++,r10
80008508:	13 0a       	ld.w	r10,r9++
8000850a:	10 aa       	st.w	r8++,r10
8000850c:	13 0a       	ld.w	r10,r9++
8000850e:	10 aa       	st.w	r8++,r10
80008510:	72 0a       	ld.w	r10,r9[0x0]
80008512:	91 0a       	st.w	r8[0x0],r10
80008514:	72 19       	ld.w	r9,r9[0x4]
80008516:	91 19       	st.w	r8[0x4],r9
80008518:	c0 48       	rjmp	80008520 <_realloc_r+0x258>
8000851a:	08 9b       	mov	r11,r4
8000851c:	fe b0 fb cb 	rcall	80007cb2 <memmove>
80008520:	08 9b       	mov	r11,r4
80008522:	04 9c       	mov	r12,r2
80008524:	fe b0 f6 fe 	rcall	80007320 <_free_r>
80008528:	04 9c       	mov	r12,r2
8000852a:	c2 a8       	rjmp	8000857e <_realloc_r+0x2b6>
8000852c:	00 93       	mov	r3,r0
8000852e:	02 97       	mov	r7,r1
80008530:	e6 06 01 09 	sub	r9,r3,r6
80008534:	6e 18       	ld.w	r8,r7[0x4]
80008536:	58 f9       	cp.w	r9,15
80008538:	e0 88 00 16 	brls	80008564 <_realloc_r+0x29c>
8000853c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008540:	ed e8 10 08 	or	r8,r6,r8
80008544:	8f 18       	st.w	r7[0x4],r8
80008546:	12 98       	mov	r8,r9
80008548:	a1 a8       	sbr	r8,0x0
8000854a:	ee 06 00 0b 	add	r11,r7,r6
8000854e:	f6 09 00 09 	add	r9,r11,r9
80008552:	97 18       	st.w	r11[0x4],r8
80008554:	72 18       	ld.w	r8,r9[0x4]
80008556:	a1 a8       	sbr	r8,0x0
80008558:	2f 8b       	sub	r11,-8
8000855a:	93 18       	st.w	r9[0x4],r8
8000855c:	04 9c       	mov	r12,r2
8000855e:	fe b0 f6 e1 	rcall	80007320 <_free_r>
80008562:	c0 b8       	rjmp	80008578 <_realloc_r+0x2b0>
80008564:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008568:	e7 e8 10 08 	or	r8,r3,r8
8000856c:	8f 18       	st.w	r7[0x4],r8
8000856e:	ee 03 00 03 	add	r3,r7,r3
80008572:	66 18       	ld.w	r8,r3[0x4]
80008574:	a1 a8       	sbr	r8,0x0
80008576:	87 18       	st.w	r3[0x4],r8
80008578:	04 9c       	mov	r12,r2
8000857a:	ee c5 ff f8 	sub	r5,r7,-8
8000857e:	fe b0 fb ba 	rcall	80007cf2 <__malloc_unlock>
80008582:	0a 9c       	mov	r12,r5
80008584:	2f fd       	sub	sp,-4
80008586:	d8 32       	popm	r0-r7,pc

80008588 <__isinfd>:
80008588:	14 98       	mov	r8,r10
8000858a:	fc 19 7f f0 	movh	r9,0x7ff0
8000858e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008592:	f0 0b 11 00 	rsub	r11,r8,0
80008596:	f7 e8 10 08 	or	r8,r11,r8
8000859a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000859e:	f2 08 01 08 	sub	r8,r9,r8
800085a2:	f0 0c 11 00 	rsub	r12,r8,0
800085a6:	f9 e8 10 08 	or	r8,r12,r8
800085aa:	f0 0c 14 1f 	asr	r12,r8,0x1f
800085ae:	2f fc       	sub	r12,-1
800085b0:	5e fc       	retal	r12

800085b2 <__isnand>:
800085b2:	14 98       	mov	r8,r10
800085b4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800085b8:	f0 0c 11 00 	rsub	r12,r8,0
800085bc:	10 4c       	or	r12,r8
800085be:	fc 18 7f f0 	movh	r8,0x7ff0
800085c2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800085c6:	f0 0c 01 0c 	sub	r12,r8,r12
800085ca:	bf 9c       	lsr	r12,0x1f
800085cc:	5e fc       	retal	r12
800085ce:	d7 03       	nop

800085d0 <_sbrk_r>:
800085d0:	d4 21       	pushm	r4-r7,lr
800085d2:	30 08       	mov	r8,0
800085d4:	18 97       	mov	r7,r12
800085d6:	e0 66 08 1c 	mov	r6,2076
800085da:	16 9c       	mov	r12,r11
800085dc:	8d 08       	st.w	r6[0x0],r8
800085de:	ca fc       	rcall	8000873c <_sbrk>
800085e0:	5b fc       	cp.w	r12,-1
800085e2:	c0 51       	brne	800085ec <_sbrk_r+0x1c>
800085e4:	6c 08       	ld.w	r8,r6[0x0]
800085e6:	58 08       	cp.w	r8,0
800085e8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800085ec:	d8 22       	popm	r4-r7,pc
800085ee:	d7 03       	nop

800085f0 <__sclose>:
800085f0:	d4 01       	pushm	lr
800085f2:	96 7b       	ld.sh	r11,r11[0xe]
800085f4:	cf ec       	rcall	800087f0 <_close_r>
800085f6:	d8 02       	popm	pc

800085f8 <__sseek>:
800085f8:	d4 21       	pushm	r4-r7,lr
800085fa:	16 97       	mov	r7,r11
800085fc:	96 7b       	ld.sh	r11,r11[0xe]
800085fe:	c8 5d       	rcall	80008908 <_lseek_r>
80008600:	8e 68       	ld.sh	r8,r7[0xc]
80008602:	10 99       	mov	r9,r8
80008604:	ad c8       	cbr	r8,0xc
80008606:	ad a9       	sbr	r9,0xc
80008608:	5b fc       	cp.w	r12,-1
8000860a:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000860e:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008612:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008616:	d8 22       	popm	r4-r7,pc

80008618 <__swrite>:
80008618:	d4 21       	pushm	r4-r7,lr
8000861a:	96 68       	ld.sh	r8,r11[0xc]
8000861c:	16 97       	mov	r7,r11
8000861e:	14 95       	mov	r5,r10
80008620:	12 94       	mov	r4,r9
80008622:	e2 18 01 00 	andl	r8,0x100,COH
80008626:	18 96       	mov	r6,r12
80008628:	c0 50       	breq	80008632 <__swrite+0x1a>
8000862a:	30 29       	mov	r9,2
8000862c:	30 0a       	mov	r10,0
8000862e:	96 7b       	ld.sh	r11,r11[0xe]
80008630:	c6 cd       	rcall	80008908 <_lseek_r>
80008632:	8e 68       	ld.sh	r8,r7[0xc]
80008634:	ad c8       	cbr	r8,0xc
80008636:	08 99       	mov	r9,r4
80008638:	0a 9a       	mov	r10,r5
8000863a:	8e 7b       	ld.sh	r11,r7[0xe]
8000863c:	0c 9c       	mov	r12,r6
8000863e:	ae 68       	st.h	r7[0xc],r8
80008640:	c9 ac       	rcall	80008774 <_write_r>
80008642:	d8 22       	popm	r4-r7,pc

80008644 <__sread>:
80008644:	d4 21       	pushm	r4-r7,lr
80008646:	16 97       	mov	r7,r11
80008648:	96 7b       	ld.sh	r11,r11[0xe]
8000864a:	c7 1d       	rcall	8000892c <_read_r>
8000864c:	c0 65       	brlt	80008658 <__sread+0x14>
8000864e:	6f 58       	ld.w	r8,r7[0x54]
80008650:	18 08       	add	r8,r12
80008652:	ef 48 00 54 	st.w	r7[84],r8
80008656:	d8 22       	popm	r4-r7,pc
80008658:	8e 68       	ld.sh	r8,r7[0xc]
8000865a:	ad c8       	cbr	r8,0xc
8000865c:	ae 68       	st.h	r7[0xc],r8
8000865e:	d8 22       	popm	r4-r7,pc

80008660 <strlen>:
80008660:	30 09       	mov	r9,0
80008662:	18 98       	mov	r8,r12
80008664:	c0 28       	rjmp	80008668 <strlen+0x8>
80008666:	2f f8       	sub	r8,-1
80008668:	11 8a       	ld.ub	r10,r8[0x0]
8000866a:	f2 0a 18 00 	cp.b	r10,r9
8000866e:	cf c1       	brne	80008666 <strlen+0x6>
80008670:	f0 0c 01 0c 	sub	r12,r8,r12
80008674:	5e fc       	retal	r12
80008676:	d7 03       	nop

80008678 <_close>:
80008678:	30 28       	mov	r8,2
8000867a:	d6 73       	breakpoint
8000867c:	3f fc       	mov	r12,-1
8000867e:	35 8b       	mov	r11,88
80008680:	58 0c       	cp.w	r12,0
80008682:	5e 4c       	retge	r12
80008684:	e0 6a 08 1c 	mov	r10,2076
80008688:	95 0b       	st.w	r10[0x0],r11
8000868a:	5e fc       	retal	r12

8000868c <_lseek>:
8000868c:	30 58       	mov	r8,5
8000868e:	d6 73       	breakpoint
80008690:	3f fc       	mov	r12,-1
80008692:	35 8b       	mov	r11,88
80008694:	58 0c       	cp.w	r12,0
80008696:	5e 4c       	retge	r12
80008698:	e0 6a 08 1c 	mov	r10,2076
8000869c:	95 0b       	st.w	r10[0x0],r11
8000869e:	5e fc       	retal	r12

800086a0 <_read>:
800086a0:	30 38       	mov	r8,3
800086a2:	d6 73       	breakpoint
800086a4:	3f fc       	mov	r12,-1
800086a6:	35 8b       	mov	r11,88
800086a8:	58 0c       	cp.w	r12,0
800086aa:	5e 4c       	retge	r12
800086ac:	e0 6a 08 1c 	mov	r10,2076
800086b0:	95 0b       	st.w	r10[0x0],r11
800086b2:	5e fc       	retal	r12

800086b4 <_write>:
800086b4:	30 48       	mov	r8,4
800086b6:	d6 73       	breakpoint
800086b8:	3f fc       	mov	r12,-1
800086ba:	35 8b       	mov	r11,88
800086bc:	58 0c       	cp.w	r12,0
800086be:	5e 4c       	retge	r12
800086c0:	e0 6a 08 1c 	mov	r10,2076
800086c4:	95 0b       	st.w	r10[0x0],r11
800086c6:	5e fc       	retal	r12

800086c8 <isatty>:
800086c8:	30 b8       	mov	r8,11
800086ca:	d6 73       	breakpoint
800086cc:	3f fc       	mov	r12,-1
800086ce:	35 8b       	mov	r11,88
800086d0:	58 0c       	cp.w	r12,0
800086d2:	5e 4c       	retge	r12
800086d4:	e0 6a 08 1c 	mov	r10,2076
800086d8:	95 0b       	st.w	r10[0x0],r11
800086da:	5e fc       	retal	r12

800086dc <_fstat_host>:
800086dc:	30 98       	mov	r8,9
800086de:	d6 73       	breakpoint
800086e0:	3f fc       	mov	r12,-1
800086e2:	35 8b       	mov	r11,88
800086e4:	58 0c       	cp.w	r12,0
800086e6:	5e 4c       	retge	r12
800086e8:	e0 6a 08 1c 	mov	r10,2076
800086ec:	95 0b       	st.w	r10[0x0],r11
800086ee:	5e fc       	retal	r12

800086f0 <_fstat>:
800086f0:	d4 21       	pushm	r4-r7,lr
800086f2:	21 0d       	sub	sp,64
800086f4:	16 97       	mov	r7,r11
800086f6:	1a 9b       	mov	r11,sp
800086f8:	cf 2f       	rcall	800086dc <_fstat_host>
800086fa:	c0 34       	brge	80008700 <_fstat+0x10>
800086fc:	3f fc       	mov	r12,-1
800086fe:	c1 c8       	rjmp	80008736 <_fstat+0x46>
80008700:	40 08       	lddsp	r8,sp[0x0]
80008702:	ae 08       	st.h	r7[0x0],r8
80008704:	40 18       	lddsp	r8,sp[0x4]
80008706:	ae 18       	st.h	r7[0x2],r8
80008708:	40 28       	lddsp	r8,sp[0x8]
8000870a:	8f 18       	st.w	r7[0x4],r8
8000870c:	40 38       	lddsp	r8,sp[0xc]
8000870e:	ae 48       	st.h	r7[0x8],r8
80008710:	40 48       	lddsp	r8,sp[0x10]
80008712:	ae 58       	st.h	r7[0xa],r8
80008714:	40 58       	lddsp	r8,sp[0x14]
80008716:	ae 68       	st.h	r7[0xc],r8
80008718:	40 68       	lddsp	r8,sp[0x18]
8000871a:	ae 78       	st.h	r7[0xe],r8
8000871c:	40 88       	lddsp	r8,sp[0x20]
8000871e:	8f 48       	st.w	r7[0x10],r8
80008720:	40 a8       	lddsp	r8,sp[0x28]
80008722:	8f b8       	st.w	r7[0x2c],r8
80008724:	40 c8       	lddsp	r8,sp[0x30]
80008726:	8f c8       	st.w	r7[0x30],r8
80008728:	40 d8       	lddsp	r8,sp[0x34]
8000872a:	8f 58       	st.w	r7[0x14],r8
8000872c:	40 e8       	lddsp	r8,sp[0x38]
8000872e:	30 0c       	mov	r12,0
80008730:	8f 78       	st.w	r7[0x1c],r8
80008732:	40 f8       	lddsp	r8,sp[0x3c]
80008734:	8f 98       	st.w	r7[0x24],r8
80008736:	2f 0d       	sub	sp,-64
80008738:	d8 22       	popm	r4-r7,pc
8000873a:	d7 03       	nop

8000873c <_sbrk>:
8000873c:	d4 01       	pushm	lr
8000873e:	e0 68 06 7c 	mov	r8,1660
80008742:	70 09       	ld.w	r9,r8[0x0]
80008744:	58 09       	cp.w	r9,0
80008746:	c0 41       	brne	8000874e <_sbrk+0x12>
80008748:	e0 69 08 20 	mov	r9,2080
8000874c:	91 09       	st.w	r8[0x0],r9
8000874e:	e0 69 06 7c 	mov	r9,1660
80008752:	e0 6a 30 00 	mov	r10,12288
80008756:	72 08       	ld.w	r8,r9[0x0]
80008758:	f0 0c 00 0c 	add	r12,r8,r12
8000875c:	14 3c       	cp.w	r12,r10
8000875e:	e0 8b 00 04 	brhi	80008766 <_sbrk+0x2a>
80008762:	93 0c       	st.w	r9[0x0],r12
80008764:	c0 58       	rjmp	8000876e <_sbrk+0x32>
80008766:	c5 5c       	rcall	80008810 <__errno>
80008768:	30 c8       	mov	r8,12
8000876a:	99 08       	st.w	r12[0x0],r8
8000876c:	3f f8       	mov	r8,-1
8000876e:	10 9c       	mov	r12,r8
80008770:	d8 02       	popm	pc
80008772:	d7 03       	nop

80008774 <_write_r>:
80008774:	d4 21       	pushm	r4-r7,lr
80008776:	16 98       	mov	r8,r11
80008778:	18 97       	mov	r7,r12
8000877a:	10 9c       	mov	r12,r8
8000877c:	30 08       	mov	r8,0
8000877e:	14 9b       	mov	r11,r10
80008780:	e0 66 08 1c 	mov	r6,2076
80008784:	12 9a       	mov	r10,r9
80008786:	8d 08       	st.w	r6[0x0],r8
80008788:	c9 6f       	rcall	800086b4 <_write>
8000878a:	5b fc       	cp.w	r12,-1
8000878c:	c0 51       	brne	80008796 <_write_r+0x22>
8000878e:	6c 08       	ld.w	r8,r6[0x0]
80008790:	58 08       	cp.w	r8,0
80008792:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008796:	d8 22       	popm	r4-r7,pc

80008798 <_calloc_r>:
80008798:	d4 21       	pushm	r4-r7,lr
8000879a:	f4 0b 02 4b 	mul	r11,r10,r11
8000879e:	fe b0 f8 67 	rcall	8000786c <_malloc_r>
800087a2:	18 97       	mov	r7,r12
800087a4:	c2 30       	breq	800087ea <_calloc_r+0x52>
800087a6:	f8 fa ff fc 	ld.w	r10,r12[-4]
800087aa:	e0 1a ff fc 	andl	r10,0xfffc
800087ae:	20 4a       	sub	r10,4
800087b0:	e0 4a 00 24 	cp.w	r10,36
800087b4:	e0 8b 00 18 	brhi	800087e4 <_calloc_r+0x4c>
800087b8:	18 98       	mov	r8,r12
800087ba:	59 3a       	cp.w	r10,19
800087bc:	e0 88 00 0f 	brls	800087da <_calloc_r+0x42>
800087c0:	30 09       	mov	r9,0
800087c2:	10 a9       	st.w	r8++,r9
800087c4:	10 a9       	st.w	r8++,r9
800087c6:	59 ba       	cp.w	r10,27
800087c8:	e0 88 00 09 	brls	800087da <_calloc_r+0x42>
800087cc:	10 a9       	st.w	r8++,r9
800087ce:	10 a9       	st.w	r8++,r9
800087d0:	e0 4a 00 24 	cp.w	r10,36
800087d4:	c0 31       	brne	800087da <_calloc_r+0x42>
800087d6:	10 a9       	st.w	r8++,r9
800087d8:	10 a9       	st.w	r8++,r9
800087da:	30 09       	mov	r9,0
800087dc:	10 a9       	st.w	r8++,r9
800087de:	91 19       	st.w	r8[0x4],r9
800087e0:	91 09       	st.w	r8[0x0],r9
800087e2:	c0 48       	rjmp	800087ea <_calloc_r+0x52>
800087e4:	30 0b       	mov	r11,0
800087e6:	fe b0 db fc 	rcall	80003fde <memset>
800087ea:	0e 9c       	mov	r12,r7
800087ec:	d8 22       	popm	r4-r7,pc
800087ee:	d7 03       	nop

800087f0 <_close_r>:
800087f0:	d4 21       	pushm	r4-r7,lr
800087f2:	30 08       	mov	r8,0
800087f4:	18 97       	mov	r7,r12
800087f6:	e0 66 08 1c 	mov	r6,2076
800087fa:	16 9c       	mov	r12,r11
800087fc:	8d 08       	st.w	r6[0x0],r8
800087fe:	c3 df       	rcall	80008678 <_close>
80008800:	5b fc       	cp.w	r12,-1
80008802:	c0 51       	brne	8000880c <_close_r+0x1c>
80008804:	6c 08       	ld.w	r8,r6[0x0]
80008806:	58 08       	cp.w	r8,0
80008808:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000880c:	d8 22       	popm	r4-r7,pc
8000880e:	d7 03       	nop

80008810 <__errno>:
80008810:	e0 68 01 18 	mov	r8,280
80008814:	70 0c       	ld.w	r12,r8[0x0]
80008816:	2f 4c       	sub	r12,-12
80008818:	5e fc       	retal	r12
8000881a:	d7 03       	nop

8000881c <_fclose_r>:
8000881c:	d4 21       	pushm	r4-r7,lr
8000881e:	18 96       	mov	r6,r12
80008820:	16 97       	mov	r7,r11
80008822:	58 0b       	cp.w	r11,0
80008824:	c0 31       	brne	8000882a <_fclose_r+0xe>
80008826:	16 95       	mov	r5,r11
80008828:	c5 38       	rjmp	800088ce <_fclose_r+0xb2>
8000882a:	fe b0 f4 8f 	rcall	80007148 <__sfp_lock_acquire>
8000882e:	58 06       	cp.w	r6,0
80008830:	c0 70       	breq	8000883e <_fclose_r+0x22>
80008832:	6c 68       	ld.w	r8,r6[0x18]
80008834:	58 08       	cp.w	r8,0
80008836:	c0 41       	brne	8000883e <_fclose_r+0x22>
80008838:	0c 9c       	mov	r12,r6
8000883a:	fe b0 f4 d9 	rcall	800071ec <__sinit>
8000883e:	fe c8 e8 82 	sub	r8,pc,-6014
80008842:	10 37       	cp.w	r7,r8
80008844:	c0 31       	brne	8000884a <_fclose_r+0x2e>
80008846:	6c 07       	ld.w	r7,r6[0x0]
80008848:	c0 c8       	rjmp	80008860 <_fclose_r+0x44>
8000884a:	fe c8 e8 6e 	sub	r8,pc,-6034
8000884e:	10 37       	cp.w	r7,r8
80008850:	c0 31       	brne	80008856 <_fclose_r+0x3a>
80008852:	6c 17       	ld.w	r7,r6[0x4]
80008854:	c0 68       	rjmp	80008860 <_fclose_r+0x44>
80008856:	fe c8 e8 5a 	sub	r8,pc,-6054
8000885a:	10 37       	cp.w	r7,r8
8000885c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008860:	8e 69       	ld.sh	r9,r7[0xc]
80008862:	30 08       	mov	r8,0
80008864:	f0 09 19 00 	cp.h	r9,r8
80008868:	c0 51       	brne	80008872 <_fclose_r+0x56>
8000886a:	fe b0 f4 70 	rcall	8000714a <__sfp_lock_release>
8000886e:	30 05       	mov	r5,0
80008870:	c2 f8       	rjmp	800088ce <_fclose_r+0xb2>
80008872:	0e 9b       	mov	r11,r7
80008874:	0c 9c       	mov	r12,r6
80008876:	fe b0 f3 e3 	rcall	8000703c <_fflush_r>
8000887a:	6e c8       	ld.w	r8,r7[0x30]
8000887c:	18 95       	mov	r5,r12
8000887e:	58 08       	cp.w	r8,0
80008880:	c0 60       	breq	8000888c <_fclose_r+0x70>
80008882:	6e 8b       	ld.w	r11,r7[0x20]
80008884:	0c 9c       	mov	r12,r6
80008886:	5d 18       	icall	r8
80008888:	f9 b5 05 ff 	movlt	r5,-1
8000888c:	8e 68       	ld.sh	r8,r7[0xc]
8000888e:	ed b8 00 07 	bld	r8,0x7
80008892:	c0 51       	brne	8000889c <_fclose_r+0x80>
80008894:	6e 4b       	ld.w	r11,r7[0x10]
80008896:	0c 9c       	mov	r12,r6
80008898:	fe b0 f5 44 	rcall	80007320 <_free_r>
8000889c:	6e db       	ld.w	r11,r7[0x34]
8000889e:	58 0b       	cp.w	r11,0
800088a0:	c0 a0       	breq	800088b4 <_fclose_r+0x98>
800088a2:	ee c8 ff bc 	sub	r8,r7,-68
800088a6:	10 3b       	cp.w	r11,r8
800088a8:	c0 40       	breq	800088b0 <_fclose_r+0x94>
800088aa:	0c 9c       	mov	r12,r6
800088ac:	fe b0 f5 3a 	rcall	80007320 <_free_r>
800088b0:	30 08       	mov	r8,0
800088b2:	8f d8       	st.w	r7[0x34],r8
800088b4:	6f 2b       	ld.w	r11,r7[0x48]
800088b6:	58 0b       	cp.w	r11,0
800088b8:	c0 70       	breq	800088c6 <_fclose_r+0xaa>
800088ba:	0c 9c       	mov	r12,r6
800088bc:	fe b0 f5 32 	rcall	80007320 <_free_r>
800088c0:	30 08       	mov	r8,0
800088c2:	ef 48 00 48 	st.w	r7[72],r8
800088c6:	30 08       	mov	r8,0
800088c8:	ae 68       	st.h	r7[0xc],r8
800088ca:	fe b0 f4 40 	rcall	8000714a <__sfp_lock_release>
800088ce:	0a 9c       	mov	r12,r5
800088d0:	d8 22       	popm	r4-r7,pc
800088d2:	d7 03       	nop

800088d4 <fclose>:
800088d4:	d4 01       	pushm	lr
800088d6:	e0 68 01 18 	mov	r8,280
800088da:	18 9b       	mov	r11,r12
800088dc:	70 0c       	ld.w	r12,r8[0x0]
800088de:	c9 ff       	rcall	8000881c <_fclose_r>
800088e0:	d8 02       	popm	pc
800088e2:	d7 03       	nop

800088e4 <_fstat_r>:
800088e4:	d4 21       	pushm	r4-r7,lr
800088e6:	16 98       	mov	r8,r11
800088e8:	18 97       	mov	r7,r12
800088ea:	10 9c       	mov	r12,r8
800088ec:	30 08       	mov	r8,0
800088ee:	e0 66 08 1c 	mov	r6,2076
800088f2:	14 9b       	mov	r11,r10
800088f4:	8d 08       	st.w	r6[0x0],r8
800088f6:	cf de       	rcall	800086f0 <_fstat>
800088f8:	5b fc       	cp.w	r12,-1
800088fa:	c0 51       	brne	80008904 <_fstat_r+0x20>
800088fc:	6c 08       	ld.w	r8,r6[0x0]
800088fe:	58 08       	cp.w	r8,0
80008900:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008904:	d8 22       	popm	r4-r7,pc
80008906:	d7 03       	nop

80008908 <_lseek_r>:
80008908:	d4 21       	pushm	r4-r7,lr
8000890a:	16 98       	mov	r8,r11
8000890c:	18 97       	mov	r7,r12
8000890e:	10 9c       	mov	r12,r8
80008910:	30 08       	mov	r8,0
80008912:	14 9b       	mov	r11,r10
80008914:	e0 66 08 1c 	mov	r6,2076
80008918:	12 9a       	mov	r10,r9
8000891a:	8d 08       	st.w	r6[0x0],r8
8000891c:	cb 8e       	rcall	8000868c <_lseek>
8000891e:	5b fc       	cp.w	r12,-1
80008920:	c0 51       	brne	8000892a <_lseek_r+0x22>
80008922:	6c 08       	ld.w	r8,r6[0x0]
80008924:	58 08       	cp.w	r8,0
80008926:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000892a:	d8 22       	popm	r4-r7,pc

8000892c <_read_r>:
8000892c:	d4 21       	pushm	r4-r7,lr
8000892e:	16 98       	mov	r8,r11
80008930:	18 97       	mov	r7,r12
80008932:	10 9c       	mov	r12,r8
80008934:	30 08       	mov	r8,0
80008936:	14 9b       	mov	r11,r10
80008938:	e0 66 08 1c 	mov	r6,2076
8000893c:	12 9a       	mov	r10,r9
8000893e:	8d 08       	st.w	r6[0x0],r8
80008940:	cb 0e       	rcall	800086a0 <_read>
80008942:	5b fc       	cp.w	r12,-1
80008944:	c0 51       	brne	8000894e <_read_r+0x22>
80008946:	6c 08       	ld.w	r8,r6[0x0]
80008948:	58 08       	cp.w	r8,0
8000894a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000894e:	d8 22       	popm	r4-r7,pc

80008950 <__avr32_f64_sub_from_add>:
80008950:	ee 19 80 00 	eorh	r9,0x8000

80008954 <__avr32_f64_sub>:
80008954:	f7 e9 20 0c 	eor	r12,r11,r9
80008958:	e0 86 00 ca 	brmi	80008aec <__avr32_f64_add_from_sub>
8000895c:	eb cd 40 e0 	pushm	r5-r7,lr
80008960:	16 9c       	mov	r12,r11
80008962:	e6 1c 80 00 	andh	r12,0x8000,COH
80008966:	bf db       	cbr	r11,0x1f
80008968:	bf d9       	cbr	r9,0x1f
8000896a:	10 3a       	cp.w	r10,r8
8000896c:	f2 0b 13 00 	cpc	r11,r9
80008970:	c0 92       	brcc	80008982 <__avr32_f64_sub+0x2e>
80008972:	16 97       	mov	r7,r11
80008974:	12 9b       	mov	r11,r9
80008976:	0e 99       	mov	r9,r7
80008978:	14 97       	mov	r7,r10
8000897a:	10 9a       	mov	r10,r8
8000897c:	0e 98       	mov	r8,r7
8000897e:	ee 1c 80 00 	eorh	r12,0x8000
80008982:	f6 07 16 14 	lsr	r7,r11,0x14
80008986:	ab 7b       	lsl	r11,0xb
80008988:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000898c:	ab 7a       	lsl	r10,0xb
8000898e:	bf bb       	sbr	r11,0x1f
80008990:	f2 06 16 14 	lsr	r6,r9,0x14
80008994:	c4 40       	breq	80008a1c <__avr32_f64_sub_opL_subnormal>
80008996:	ab 79       	lsl	r9,0xb
80008998:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000899c:	ab 78       	lsl	r8,0xb
8000899e:	bf b9       	sbr	r9,0x1f

800089a0 <__avr32_f64_sub_opL_subnormal_done>:
800089a0:	e0 47 07 ff 	cp.w	r7,2047
800089a4:	c4 f0       	breq	80008a42 <__avr32_f64_sub_opH_nan_or_inf>
800089a6:	0e 26       	rsub	r6,r7
800089a8:	c1 20       	breq	800089cc <__avr32_f64_sub_shift_done>
800089aa:	ec 05 11 20 	rsub	r5,r6,32
800089ae:	e0 46 00 20 	cp.w	r6,32
800089b2:	c7 c2       	brcc	80008aaa <__avr32_f64_sub_longshift>
800089b4:	f0 05 09 4e 	lsl	lr,r8,r5
800089b8:	f2 05 09 45 	lsl	r5,r9,r5
800089bc:	f0 06 0a 48 	lsr	r8,r8,r6
800089c0:	f2 06 0a 49 	lsr	r9,r9,r6
800089c4:	0a 48       	or	r8,r5
800089c6:	58 0e       	cp.w	lr,0
800089c8:	5f 1e       	srne	lr
800089ca:	1c 48       	or	r8,lr

800089cc <__avr32_f64_sub_shift_done>:
800089cc:	10 1a       	sub	r10,r8
800089ce:	f6 09 01 4b 	sbc	r11,r11,r9
800089d2:	f6 06 12 00 	clz	r6,r11
800089d6:	c0 e0       	breq	800089f2 <__avr32_f64_sub_longnormalize_done>
800089d8:	c7 83       	brcs	80008ac8 <__avr32_f64_sub_longnormalize>
800089da:	ec 0e 11 20 	rsub	lr,r6,32
800089de:	f6 06 09 4b 	lsl	r11,r11,r6
800089e2:	f4 0e 0a 4e 	lsr	lr,r10,lr
800089e6:	1c 4b       	or	r11,lr
800089e8:	f4 06 09 4a 	lsl	r10,r10,r6
800089ec:	0c 17       	sub	r7,r6
800089ee:	e0 8a 00 39 	brle	80008a60 <__avr32_f64_sub_subnormal_result>

800089f2 <__avr32_f64_sub_longnormalize_done>:
800089f2:	f4 09 15 15 	lsl	r9,r10,0x15
800089f6:	ab 9a       	lsr	r10,0xb
800089f8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800089fc:	ab 9b       	lsr	r11,0xb
800089fe:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008a02:	18 4b       	or	r11,r12

80008a04 <__avr32_f64_sub_round>:
80008a04:	fc 17 80 00 	movh	r7,0x8000
80008a08:	ed ba 00 00 	bld	r10,0x0
80008a0c:	f7 b7 01 ff 	subne	r7,-1
80008a10:	0e 39       	cp.w	r9,r7
80008a12:	5f 29       	srhs	r9
80008a14:	12 0a       	add	r10,r9
80008a16:	5c 0b       	acr	r11
80008a18:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008a1c <__avr32_f64_sub_opL_subnormal>:
80008a1c:	ab 79       	lsl	r9,0xb
80008a1e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008a22:	ab 78       	lsl	r8,0xb
80008a24:	f3 e8 10 0e 	or	lr,r9,r8
80008a28:	f9 b6 01 01 	movne	r6,1
80008a2c:	ee 0e 11 00 	rsub	lr,r7,0
80008a30:	f9 b7 00 01 	moveq	r7,1
80008a34:	ef bb 00 1f 	bst	r11,0x1f
80008a38:	f7 ea 10 0e 	or	lr,r11,r10
80008a3c:	f9 b7 00 00 	moveq	r7,0
80008a40:	cb 0b       	rjmp	800089a0 <__avr32_f64_sub_opL_subnormal_done>

80008a42 <__avr32_f64_sub_opH_nan_or_inf>:
80008a42:	bf db       	cbr	r11,0x1f
80008a44:	f7 ea 10 0e 	or	lr,r11,r10
80008a48:	c0 81       	brne	80008a58 <__avr32_f64_sub_return_nan>
80008a4a:	e0 46 07 ff 	cp.w	r6,2047
80008a4e:	c0 50       	breq	80008a58 <__avr32_f64_sub_return_nan>
80008a50:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008a54:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008a58 <__avr32_f64_sub_return_nan>:
80008a58:	3f fa       	mov	r10,-1
80008a5a:	3f fb       	mov	r11,-1
80008a5c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008a60 <__avr32_f64_sub_subnormal_result>:
80008a60:	5c 37       	neg	r7
80008a62:	2f f7       	sub	r7,-1
80008a64:	f1 b7 04 c0 	satu	r7,0x6
80008a68:	e0 47 00 20 	cp.w	r7,32
80008a6c:	c1 14       	brge	80008a8e <__avr32_f64_sub_subnormal_result+0x2e>
80008a6e:	ee 08 11 20 	rsub	r8,r7,32
80008a72:	f4 08 09 49 	lsl	r9,r10,r8
80008a76:	5f 16       	srne	r6
80008a78:	f4 07 0a 4a 	lsr	r10,r10,r7
80008a7c:	0c 4a       	or	r10,r6
80008a7e:	f6 08 09 49 	lsl	r9,r11,r8
80008a82:	f5 e9 10 0a 	or	r10,r10,r9
80008a86:	f4 07 0a 4b 	lsr	r11,r10,r7
80008a8a:	30 07       	mov	r7,0
80008a8c:	cb 3b       	rjmp	800089f2 <__avr32_f64_sub_longnormalize_done>
80008a8e:	ee 08 11 40 	rsub	r8,r7,64
80008a92:	f6 08 09 49 	lsl	r9,r11,r8
80008a96:	14 49       	or	r9,r10
80008a98:	5f 16       	srne	r6
80008a9a:	f6 07 0a 4a 	lsr	r10,r11,r7
80008a9e:	0c 4a       	or	r10,r6
80008aa0:	30 0b       	mov	r11,0
80008aa2:	30 07       	mov	r7,0
80008aa4:	ca 7b       	rjmp	800089f2 <__avr32_f64_sub_longnormalize_done>
80008aa6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008aaa <__avr32_f64_sub_longshift>:
80008aaa:	f1 b6 04 c0 	satu	r6,0x6
80008aae:	f0 0e 17 00 	moveq	lr,r8
80008ab2:	c0 40       	breq	80008aba <__avr32_f64_sub_longshift+0x10>
80008ab4:	f2 05 09 4e 	lsl	lr,r9,r5
80008ab8:	10 4e       	or	lr,r8
80008aba:	f2 06 0a 48 	lsr	r8,r9,r6
80008abe:	30 09       	mov	r9,0
80008ac0:	58 0e       	cp.w	lr,0
80008ac2:	5f 1e       	srne	lr
80008ac4:	1c 48       	or	r8,lr
80008ac6:	c8 3b       	rjmp	800089cc <__avr32_f64_sub_shift_done>

80008ac8 <__avr32_f64_sub_longnormalize>:
80008ac8:	f4 06 12 00 	clz	r6,r10
80008acc:	f9 b7 03 00 	movlo	r7,0
80008ad0:	f9 b6 03 00 	movlo	r6,0
80008ad4:	f9 bc 03 00 	movlo	r12,0
80008ad8:	f7 b6 02 e0 	subhs	r6,-32
80008adc:	f4 06 09 4b 	lsl	r11,r10,r6
80008ae0:	30 0a       	mov	r10,0
80008ae2:	0c 17       	sub	r7,r6
80008ae4:	fe 9a ff be 	brle	80008a60 <__avr32_f64_sub_subnormal_result>
80008ae8:	c8 5b       	rjmp	800089f2 <__avr32_f64_sub_longnormalize_done>
80008aea:	d7 03       	nop

80008aec <__avr32_f64_add_from_sub>:
80008aec:	ee 19 80 00 	eorh	r9,0x8000

80008af0 <__avr32_f64_add>:
80008af0:	f7 e9 20 0c 	eor	r12,r11,r9
80008af4:	fe 96 ff 2e 	brmi	80008950 <__avr32_f64_sub_from_add>
80008af8:	eb cd 40 e0 	pushm	r5-r7,lr
80008afc:	16 9c       	mov	r12,r11
80008afe:	e6 1c 80 00 	andh	r12,0x8000,COH
80008b02:	bf db       	cbr	r11,0x1f
80008b04:	bf d9       	cbr	r9,0x1f
80008b06:	12 3b       	cp.w	r11,r9
80008b08:	c0 72       	brcc	80008b16 <__avr32_f64_add+0x26>
80008b0a:	16 97       	mov	r7,r11
80008b0c:	12 9b       	mov	r11,r9
80008b0e:	0e 99       	mov	r9,r7
80008b10:	14 97       	mov	r7,r10
80008b12:	10 9a       	mov	r10,r8
80008b14:	0e 98       	mov	r8,r7
80008b16:	30 0e       	mov	lr,0
80008b18:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008b1c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008b20:	b5 ab       	sbr	r11,0x14
80008b22:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008b26:	c6 20       	breq	80008bea <__avr32_f64_add_op2_subnormal>
80008b28:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008b2c:	b5 a9       	sbr	r9,0x14
80008b2e:	e0 47 07 ff 	cp.w	r7,2047
80008b32:	c2 80       	breq	80008b82 <__avr32_f64_add_opH_nan_or_inf>
80008b34:	0e 26       	rsub	r6,r7
80008b36:	c1 20       	breq	80008b5a <__avr32_f64_add_shift_done>
80008b38:	e0 46 00 36 	cp.w	r6,54
80008b3c:	c1 52       	brcc	80008b66 <__avr32_f64_add_res_of_done>
80008b3e:	ec 05 11 20 	rsub	r5,r6,32
80008b42:	e0 46 00 20 	cp.w	r6,32
80008b46:	c3 52       	brcc	80008bb0 <__avr32_f64_add_longshift>
80008b48:	f0 05 09 4e 	lsl	lr,r8,r5
80008b4c:	f2 05 09 45 	lsl	r5,r9,r5
80008b50:	f0 06 0a 48 	lsr	r8,r8,r6
80008b54:	f2 06 0a 49 	lsr	r9,r9,r6
80008b58:	0a 48       	or	r8,r5

80008b5a <__avr32_f64_add_shift_done>:
80008b5a:	10 0a       	add	r10,r8
80008b5c:	f6 09 00 4b 	adc	r11,r11,r9
80008b60:	ed bb 00 15 	bld	r11,0x15
80008b64:	c3 40       	breq	80008bcc <__avr32_f64_add_res_of>

80008b66 <__avr32_f64_add_res_of_done>:
80008b66:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008b6a:	18 4b       	or	r11,r12

80008b6c <__avr32_f64_add_round>:
80008b6c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008b70:	18 4e       	or	lr,r12
80008b72:	ee 1e 80 00 	eorh	lr,0x8000
80008b76:	f1 be 04 20 	satu	lr,0x1
80008b7a:	1c 0a       	add	r10,lr
80008b7c:	5c 0b       	acr	r11
80008b7e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008b82 <__avr32_f64_add_opH_nan_or_inf>:
80008b82:	b5 cb       	cbr	r11,0x14
80008b84:	f7 ea 10 0e 	or	lr,r11,r10
80008b88:	c1 01       	brne	80008ba8 <__avr32_f64_add_return_nan>
80008b8a:	e0 46 07 ff 	cp.w	r6,2047
80008b8e:	c0 30       	breq	80008b94 <__avr32_f64_add_opL_nan_or_inf>
80008b90:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008b94 <__avr32_f64_add_opL_nan_or_inf>:
80008b94:	b5 c9       	cbr	r9,0x14
80008b96:	f3 e8 10 0e 	or	lr,r9,r8
80008b9a:	c0 71       	brne	80008ba8 <__avr32_f64_add_return_nan>
80008b9c:	30 0a       	mov	r10,0
80008b9e:	fc 1b 7f f0 	movh	r11,0x7ff0
80008ba2:	18 4b       	or	r11,r12
80008ba4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ba8 <__avr32_f64_add_return_nan>:
80008ba8:	3f fa       	mov	r10,-1
80008baa:	3f fb       	mov	r11,-1
80008bac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008bb0 <__avr32_f64_add_longshift>:
80008bb0:	f1 b6 04 c0 	satu	r6,0x6
80008bb4:	f0 0e 17 00 	moveq	lr,r8
80008bb8:	c0 60       	breq	80008bc4 <__avr32_f64_add_longshift+0x14>
80008bba:	f2 05 09 4e 	lsl	lr,r9,r5
80008bbe:	58 08       	cp.w	r8,0
80008bc0:	5f 18       	srne	r8
80008bc2:	10 4e       	or	lr,r8
80008bc4:	f2 06 0a 48 	lsr	r8,r9,r6
80008bc8:	30 09       	mov	r9,0
80008bca:	cc 8b       	rjmp	80008b5a <__avr32_f64_add_shift_done>

80008bcc <__avr32_f64_add_res_of>:
80008bcc:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008bd0:	a1 9b       	lsr	r11,0x1
80008bd2:	5d 0a       	ror	r10
80008bd4:	5d 0e       	ror	lr
80008bd6:	2f f7       	sub	r7,-1
80008bd8:	e0 47 07 ff 	cp.w	r7,2047
80008bdc:	f9 ba 00 00 	moveq	r10,0
80008be0:	f9 bb 00 00 	moveq	r11,0
80008be4:	f9 be 00 00 	moveq	lr,0
80008be8:	cb fb       	rjmp	80008b66 <__avr32_f64_add_res_of_done>

80008bea <__avr32_f64_add_op2_subnormal>:
80008bea:	30 16       	mov	r6,1
80008bec:	58 07       	cp.w	r7,0
80008bee:	ca 01       	brne	80008b2e <__avr32_f64_add+0x3e>
80008bf0:	b5 cb       	cbr	r11,0x14
80008bf2:	10 0a       	add	r10,r8
80008bf4:	f6 09 00 4b 	adc	r11,r11,r9
80008bf8:	18 4b       	or	r11,r12
80008bfa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008bfe:	d7 03       	nop

80008c00 <__avr32_f64_to_u32>:
80008c00:	58 0b       	cp.w	r11,0
80008c02:	5e 6d       	retmi	0

80008c04 <__avr32_f64_to_s32>:
80008c04:	f6 0c 15 01 	lsl	r12,r11,0x1
80008c08:	b5 9c       	lsr	r12,0x15
80008c0a:	e0 2c 03 ff 	sub	r12,1023
80008c0e:	5e 3d       	retlo	0
80008c10:	f8 0c 11 1f 	rsub	r12,r12,31
80008c14:	16 99       	mov	r9,r11
80008c16:	ab 7b       	lsl	r11,0xb
80008c18:	bf bb       	sbr	r11,0x1f
80008c1a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008c1e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008c22:	a1 79       	lsl	r9,0x1
80008c24:	5e 2b       	reths	r11
80008c26:	5c 3b       	neg	r11
80008c28:	5e fb       	retal	r11

80008c2a <__avr32_f64_cmp_eq>:
80008c2a:	10 3a       	cp.w	r10,r8
80008c2c:	f2 0b 13 00 	cpc	r11,r9
80008c30:	c0 80       	breq	80008c40 <__avr32_f64_cmp_eq+0x16>
80008c32:	a1 7b       	lsl	r11,0x1
80008c34:	a1 79       	lsl	r9,0x1
80008c36:	14 4b       	or	r11,r10
80008c38:	12 4b       	or	r11,r9
80008c3a:	10 4b       	or	r11,r8
80008c3c:	5e 0f       	reteq	1
80008c3e:	5e fd       	retal	0
80008c40:	a1 7b       	lsl	r11,0x1
80008c42:	fc 1c ff e0 	movh	r12,0xffe0
80008c46:	58 0a       	cp.w	r10,0
80008c48:	f8 0b 13 00 	cpc	r11,r12
80008c4c:	5e 8f       	retls	1
80008c4e:	5e fd       	retal	0

80008c50 <__avr32_f64_cmp_ge>:
80008c50:	1a de       	st.w	--sp,lr
80008c52:	1a d7       	st.w	--sp,r7
80008c54:	a1 7b       	lsl	r11,0x1
80008c56:	5f 3c       	srlo	r12
80008c58:	a1 79       	lsl	r9,0x1
80008c5a:	5f 37       	srlo	r7
80008c5c:	5c fc       	rol	r12
80008c5e:	fc 1e ff e0 	movh	lr,0xffe0
80008c62:	58 0a       	cp.w	r10,0
80008c64:	fc 0b 13 00 	cpc	r11,lr
80008c68:	e0 8b 00 1d 	brhi	80008ca2 <__avr32_f64_cmp_ge+0x52>
80008c6c:	58 08       	cp.w	r8,0
80008c6e:	fc 09 13 00 	cpc	r9,lr
80008c72:	e0 8b 00 18 	brhi	80008ca2 <__avr32_f64_cmp_ge+0x52>
80008c76:	58 0b       	cp.w	r11,0
80008c78:	f5 ba 00 00 	subfeq	r10,0
80008c7c:	c1 50       	breq	80008ca6 <__avr32_f64_cmp_ge+0x56>
80008c7e:	1b 07       	ld.w	r7,sp++
80008c80:	1b 0e       	ld.w	lr,sp++
80008c82:	58 3c       	cp.w	r12,3
80008c84:	c0 a0       	breq	80008c98 <__avr32_f64_cmp_ge+0x48>
80008c86:	58 1c       	cp.w	r12,1
80008c88:	c0 33       	brcs	80008c8e <__avr32_f64_cmp_ge+0x3e>
80008c8a:	5e 0f       	reteq	1
80008c8c:	5e 1d       	retne	0
80008c8e:	10 3a       	cp.w	r10,r8
80008c90:	f2 0b 13 00 	cpc	r11,r9
80008c94:	5e 2f       	reths	1
80008c96:	5e 3d       	retlo	0
80008c98:	14 38       	cp.w	r8,r10
80008c9a:	f6 09 13 00 	cpc	r9,r11
80008c9e:	5e 2f       	reths	1
80008ca0:	5e 3d       	retlo	0
80008ca2:	1b 07       	ld.w	r7,sp++
80008ca4:	d8 0a       	popm	pc,r12=0
80008ca6:	58 17       	cp.w	r7,1
80008ca8:	5f 0c       	sreq	r12
80008caa:	58 09       	cp.w	r9,0
80008cac:	f5 b8 00 00 	subfeq	r8,0
80008cb0:	1b 07       	ld.w	r7,sp++
80008cb2:	1b 0e       	ld.w	lr,sp++
80008cb4:	5e 0f       	reteq	1
80008cb6:	5e fc       	retal	r12

80008cb8 <__avr32_f64_cmp_lt>:
80008cb8:	1a de       	st.w	--sp,lr
80008cba:	1a d7       	st.w	--sp,r7
80008cbc:	a1 7b       	lsl	r11,0x1
80008cbe:	5f 3c       	srlo	r12
80008cc0:	a1 79       	lsl	r9,0x1
80008cc2:	5f 37       	srlo	r7
80008cc4:	5c fc       	rol	r12
80008cc6:	fc 1e ff e0 	movh	lr,0xffe0
80008cca:	58 0a       	cp.w	r10,0
80008ccc:	fc 0b 13 00 	cpc	r11,lr
80008cd0:	e0 8b 00 1d 	brhi	80008d0a <__avr32_f64_cmp_lt+0x52>
80008cd4:	58 08       	cp.w	r8,0
80008cd6:	fc 09 13 00 	cpc	r9,lr
80008cda:	e0 8b 00 18 	brhi	80008d0a <__avr32_f64_cmp_lt+0x52>
80008cde:	58 0b       	cp.w	r11,0
80008ce0:	f5 ba 00 00 	subfeq	r10,0
80008ce4:	c1 50       	breq	80008d0e <__avr32_f64_cmp_lt+0x56>
80008ce6:	1b 07       	ld.w	r7,sp++
80008ce8:	1b 0e       	ld.w	lr,sp++
80008cea:	58 3c       	cp.w	r12,3
80008cec:	c0 a0       	breq	80008d00 <__avr32_f64_cmp_lt+0x48>
80008cee:	58 1c       	cp.w	r12,1
80008cf0:	c0 33       	brcs	80008cf6 <__avr32_f64_cmp_lt+0x3e>
80008cf2:	5e 0d       	reteq	0
80008cf4:	5e 1f       	retne	1
80008cf6:	10 3a       	cp.w	r10,r8
80008cf8:	f2 0b 13 00 	cpc	r11,r9
80008cfc:	5e 2d       	reths	0
80008cfe:	5e 3f       	retlo	1
80008d00:	14 38       	cp.w	r8,r10
80008d02:	f6 09 13 00 	cpc	r9,r11
80008d06:	5e 2d       	reths	0
80008d08:	5e 3f       	retlo	1
80008d0a:	1b 07       	ld.w	r7,sp++
80008d0c:	d8 0a       	popm	pc,r12=0
80008d0e:	58 17       	cp.w	r7,1
80008d10:	5f 1c       	srne	r12
80008d12:	58 09       	cp.w	r9,0
80008d14:	f5 b8 00 00 	subfeq	r8,0
80008d18:	1b 07       	ld.w	r7,sp++
80008d1a:	1b 0e       	ld.w	lr,sp++
80008d1c:	5e 0d       	reteq	0
80008d1e:	5e fc       	retal	r12

80008d20 <__avr32_f64_div>:
80008d20:	eb cd 40 ff 	pushm	r0-r7,lr
80008d24:	f7 e9 20 0e 	eor	lr,r11,r9
80008d28:	f6 07 16 14 	lsr	r7,r11,0x14
80008d2c:	a9 7b       	lsl	r11,0x9
80008d2e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008d32:	a9 7a       	lsl	r10,0x9
80008d34:	bd bb       	sbr	r11,0x1d
80008d36:	e4 1b 3f ff 	andh	r11,0x3fff
80008d3a:	ab d7       	cbr	r7,0xb
80008d3c:	e0 80 00 cc 	breq	80008ed4 <__avr32_f64_div_round_subnormal+0x54>
80008d40:	e0 47 07 ff 	cp.w	r7,2047
80008d44:	e0 84 00 b5 	brge	80008eae <__avr32_f64_div_round_subnormal+0x2e>
80008d48:	f2 06 16 14 	lsr	r6,r9,0x14
80008d4c:	a9 79       	lsl	r9,0x9
80008d4e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008d52:	a9 78       	lsl	r8,0x9
80008d54:	bd b9       	sbr	r9,0x1d
80008d56:	e4 19 3f ff 	andh	r9,0x3fff
80008d5a:	ab d6       	cbr	r6,0xb
80008d5c:	e0 80 00 e2 	breq	80008f20 <__avr32_f64_div_round_subnormal+0xa0>
80008d60:	e0 46 07 ff 	cp.w	r6,2047
80008d64:	e0 84 00 b2 	brge	80008ec8 <__avr32_f64_div_round_subnormal+0x48>
80008d68:	0c 17       	sub	r7,r6
80008d6a:	fe 37 fc 01 	sub	r7,-1023
80008d6e:	fc 1c 80 00 	movh	r12,0x8000
80008d72:	f8 03 16 01 	lsr	r3,r12,0x1
80008d76:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008d7a:	5c d4       	com	r4
80008d7c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008d80:	e6 09 06 44 	mulu.d	r4,r3,r9
80008d84:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008d88:	e6 05 06 44 	mulu.d	r4,r3,r5
80008d8c:	ea 03 15 02 	lsl	r3,r5,0x2
80008d90:	e6 09 06 44 	mulu.d	r4,r3,r9
80008d94:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008d98:	e6 05 06 44 	mulu.d	r4,r3,r5
80008d9c:	ea 03 15 02 	lsl	r3,r5,0x2
80008da0:	e6 09 06 44 	mulu.d	r4,r3,r9
80008da4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008da8:	e6 05 06 44 	mulu.d	r4,r3,r5
80008dac:	ea 03 15 02 	lsl	r3,r5,0x2
80008db0:	e6 08 06 40 	mulu.d	r0,r3,r8
80008db4:	e4 09 07 40 	macu.d	r0,r2,r9
80008db8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008dbc:	02 04       	add	r4,r1
80008dbe:	5c 05       	acr	r5
80008dc0:	a3 65       	lsl	r5,0x2
80008dc2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008dc6:	a3 64       	lsl	r4,0x2
80008dc8:	5c 34       	neg	r4
80008dca:	f8 05 01 45 	sbc	r5,r12,r5
80008dce:	e6 04 06 40 	mulu.d	r0,r3,r4
80008dd2:	e4 05 07 40 	macu.d	r0,r2,r5
80008dd6:	e6 05 06 44 	mulu.d	r4,r3,r5
80008dda:	02 04       	add	r4,r1
80008ddc:	5c 05       	acr	r5
80008dde:	ea 03 15 02 	lsl	r3,r5,0x2
80008de2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008de6:	e8 02 15 02 	lsl	r2,r4,0x2
80008dea:	e6 08 06 40 	mulu.d	r0,r3,r8
80008dee:	e4 09 07 40 	macu.d	r0,r2,r9
80008df2:	e6 09 06 44 	mulu.d	r4,r3,r9
80008df6:	02 04       	add	r4,r1
80008df8:	5c 05       	acr	r5
80008dfa:	a3 65       	lsl	r5,0x2
80008dfc:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008e00:	a3 64       	lsl	r4,0x2
80008e02:	5c 34       	neg	r4
80008e04:	f8 05 01 45 	sbc	r5,r12,r5
80008e08:	e6 04 06 40 	mulu.d	r0,r3,r4
80008e0c:	e4 05 07 40 	macu.d	r0,r2,r5
80008e10:	e6 05 06 44 	mulu.d	r4,r3,r5
80008e14:	02 04       	add	r4,r1
80008e16:	5c 05       	acr	r5
80008e18:	ea 03 15 02 	lsl	r3,r5,0x2
80008e1c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008e20:	e8 02 15 02 	lsl	r2,r4,0x2
80008e24:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008e28:	e4 0b 07 40 	macu.d	r0,r2,r11
80008e2c:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008e30:	02 02       	add	r2,r1
80008e32:	5c 03       	acr	r3
80008e34:	ed b3 00 1c 	bld	r3,0x1c
80008e38:	c0 90       	breq	80008e4a <__avr32_f64_div+0x12a>
80008e3a:	a1 72       	lsl	r2,0x1
80008e3c:	5c f3       	rol	r3
80008e3e:	20 17       	sub	r7,1
80008e40:	a3 9a       	lsr	r10,0x3
80008e42:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008e46:	a3 9b       	lsr	r11,0x3
80008e48:	c0 58       	rjmp	80008e52 <__avr32_f64_div+0x132>
80008e4a:	a5 8a       	lsr	r10,0x4
80008e4c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008e50:	a5 8b       	lsr	r11,0x4
80008e52:	58 07       	cp.w	r7,0
80008e54:	e0 8a 00 8b 	brle	80008f6a <__avr32_f64_div_res_subnormal>
80008e58:	e0 12 ff 00 	andl	r2,0xff00
80008e5c:	e8 12 00 80 	orl	r2,0x80
80008e60:	e6 08 06 40 	mulu.d	r0,r3,r8
80008e64:	e4 09 07 40 	macu.d	r0,r2,r9
80008e68:	e4 08 06 44 	mulu.d	r4,r2,r8
80008e6c:	e6 09 06 48 	mulu.d	r8,r3,r9
80008e70:	00 05       	add	r5,r0
80008e72:	f0 01 00 48 	adc	r8,r8,r1
80008e76:	5c 09       	acr	r9
80008e78:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008e7c:	58 04       	cp.w	r4,0
80008e7e:	5c 25       	cpc	r5

80008e80 <__avr32_f64_div_round_subnormal>:
80008e80:	f4 08 13 00 	cpc	r8,r10
80008e84:	f6 09 13 00 	cpc	r9,r11
80008e88:	5f 36       	srlo	r6
80008e8a:	f8 06 17 00 	moveq	r6,r12
80008e8e:	e4 0a 16 08 	lsr	r10,r2,0x8
80008e92:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008e96:	e6 0b 16 08 	lsr	r11,r3,0x8
80008e9a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008e9e:	ed be 00 1f 	bld	lr,0x1f
80008ea2:	ef bb 00 1f 	bst	r11,0x1f
80008ea6:	0c 0a       	add	r10,r6
80008ea8:	5c 0b       	acr	r11
80008eaa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008eae:	e4 1b 00 0f 	andh	r11,0xf
80008eb2:	14 4b       	or	r11,r10
80008eb4:	e0 81 00 a7 	brne	80009002 <__avr32_f64_div_res_subnormal+0x98>
80008eb8:	f2 06 16 14 	lsr	r6,r9,0x14
80008ebc:	ab d6       	cbr	r6,0xb
80008ebe:	e0 46 07 ff 	cp.w	r6,2047
80008ec2:	e0 81 00 a4 	brne	8000900a <__avr32_f64_div_res_subnormal+0xa0>
80008ec6:	c9 e8       	rjmp	80009002 <__avr32_f64_div_res_subnormal+0x98>
80008ec8:	e4 19 00 0f 	andh	r9,0xf
80008ecc:	10 49       	or	r9,r8
80008ece:	e0 81 00 9a 	brne	80009002 <__avr32_f64_div_res_subnormal+0x98>
80008ed2:	c9 28       	rjmp	80008ff6 <__avr32_f64_div_res_subnormal+0x8c>
80008ed4:	a3 7b       	lsl	r11,0x3
80008ed6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008eda:	a3 7a       	lsl	r10,0x3
80008edc:	f5 eb 10 04 	or	r4,r10,r11
80008ee0:	e0 80 00 a0 	breq	80009020 <__avr32_f64_div_op1_zero>
80008ee4:	f6 04 12 00 	clz	r4,r11
80008ee8:	c1 70       	breq	80008f16 <__avr32_f64_div_round_subnormal+0x96>
80008eea:	c0 c3       	brcs	80008f02 <__avr32_f64_div_round_subnormal+0x82>
80008eec:	e8 05 11 20 	rsub	r5,r4,32
80008ef0:	f6 04 09 4b 	lsl	r11,r11,r4
80008ef4:	f4 05 0a 45 	lsr	r5,r10,r5
80008ef8:	0a 4b       	or	r11,r5
80008efa:	f4 04 09 4a 	lsl	r10,r10,r4
80008efe:	08 17       	sub	r7,r4
80008f00:	c0 b8       	rjmp	80008f16 <__avr32_f64_div_round_subnormal+0x96>
80008f02:	f4 04 12 00 	clz	r4,r10
80008f06:	f9 b4 03 00 	movlo	r4,0
80008f0a:	f7 b4 02 e0 	subhs	r4,-32
80008f0e:	f4 04 09 4b 	lsl	r11,r10,r4
80008f12:	30 0a       	mov	r10,0
80008f14:	08 17       	sub	r7,r4
80008f16:	a3 8a       	lsr	r10,0x2
80008f18:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008f1c:	a3 8b       	lsr	r11,0x2
80008f1e:	c1 1b       	rjmp	80008d40 <__avr32_f64_div+0x20>
80008f20:	a3 79       	lsl	r9,0x3
80008f22:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008f26:	a3 78       	lsl	r8,0x3
80008f28:	f3 e8 10 04 	or	r4,r9,r8
80008f2c:	c6 f0       	breq	8000900a <__avr32_f64_div_res_subnormal+0xa0>
80008f2e:	f2 04 12 00 	clz	r4,r9
80008f32:	c1 70       	breq	80008f60 <__avr32_f64_div_round_subnormal+0xe0>
80008f34:	c0 c3       	brcs	80008f4c <__avr32_f64_div_round_subnormal+0xcc>
80008f36:	e8 05 11 20 	rsub	r5,r4,32
80008f3a:	f2 04 09 49 	lsl	r9,r9,r4
80008f3e:	f0 05 0a 45 	lsr	r5,r8,r5
80008f42:	0a 49       	or	r9,r5
80008f44:	f0 04 09 48 	lsl	r8,r8,r4
80008f48:	08 16       	sub	r6,r4
80008f4a:	c0 b8       	rjmp	80008f60 <__avr32_f64_div_round_subnormal+0xe0>
80008f4c:	f0 04 12 00 	clz	r4,r8
80008f50:	f9 b4 03 00 	movlo	r4,0
80008f54:	f7 b4 02 e0 	subhs	r4,-32
80008f58:	f0 04 09 49 	lsl	r9,r8,r4
80008f5c:	30 08       	mov	r8,0
80008f5e:	08 16       	sub	r6,r4
80008f60:	a3 88       	lsr	r8,0x2
80008f62:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008f66:	a3 89       	lsr	r9,0x2
80008f68:	cf ca       	rjmp	80008d60 <__avr32_f64_div+0x40>

80008f6a <__avr32_f64_div_res_subnormal>:
80008f6a:	5c 37       	neg	r7
80008f6c:	2f f7       	sub	r7,-1
80008f6e:	f1 b7 04 c0 	satu	r7,0x6
80008f72:	e0 47 00 20 	cp.w	r7,32
80008f76:	c1 54       	brge	80008fa0 <__avr32_f64_div_res_subnormal+0x36>
80008f78:	ee 06 11 20 	rsub	r6,r7,32
80008f7c:	e4 07 0a 42 	lsr	r2,r2,r7
80008f80:	e6 06 09 4c 	lsl	r12,r3,r6
80008f84:	18 42       	or	r2,r12
80008f86:	e6 07 0a 43 	lsr	r3,r3,r7
80008f8a:	f4 06 09 41 	lsl	r1,r10,r6
80008f8e:	f4 07 0a 4a 	lsr	r10,r10,r7
80008f92:	f6 06 09 4c 	lsl	r12,r11,r6
80008f96:	18 4a       	or	r10,r12
80008f98:	f6 07 0a 4b 	lsr	r11,r11,r7
80008f9c:	30 00       	mov	r0,0
80008f9e:	c1 58       	rjmp	80008fc8 <__avr32_f64_div_res_subnormal+0x5e>
80008fa0:	ee 06 11 20 	rsub	r6,r7,32
80008fa4:	f9 b0 00 00 	moveq	r0,0
80008fa8:	f9 bc 00 00 	moveq	r12,0
80008fac:	c0 50       	breq	80008fb6 <__avr32_f64_div_res_subnormal+0x4c>
80008fae:	f4 06 09 40 	lsl	r0,r10,r6
80008fb2:	f6 06 09 4c 	lsl	r12,r11,r6
80008fb6:	e6 07 0a 42 	lsr	r2,r3,r7
80008fba:	30 03       	mov	r3,0
80008fbc:	f4 07 0a 41 	lsr	r1,r10,r7
80008fc0:	18 41       	or	r1,r12
80008fc2:	f6 07 0a 4a 	lsr	r10,r11,r7
80008fc6:	30 0b       	mov	r11,0
80008fc8:	e0 12 ff 00 	andl	r2,0xff00
80008fcc:	e8 12 00 80 	orl	r2,0x80
80008fd0:	e6 08 06 46 	mulu.d	r6,r3,r8
80008fd4:	e4 09 07 46 	macu.d	r6,r2,r9
80008fd8:	e4 08 06 44 	mulu.d	r4,r2,r8
80008fdc:	e6 09 06 48 	mulu.d	r8,r3,r9
80008fe0:	0c 05       	add	r5,r6
80008fe2:	f0 07 00 48 	adc	r8,r8,r7
80008fe6:	5c 09       	acr	r9
80008fe8:	30 07       	mov	r7,0
80008fea:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008fee:	00 34       	cp.w	r4,r0
80008ff0:	e2 05 13 00 	cpc	r5,r1
80008ff4:	c4 6b       	rjmp	80008e80 <__avr32_f64_div_round_subnormal>
80008ff6:	1c 9b       	mov	r11,lr
80008ff8:	e6 1b 80 00 	andh	r11,0x8000,COH
80008ffc:	30 0a       	mov	r10,0
80008ffe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009002:	3f fb       	mov	r11,-1
80009004:	30 0a       	mov	r10,0
80009006:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000900a:	f5 eb 10 04 	or	r4,r10,r11
8000900e:	c0 90       	breq	80009020 <__avr32_f64_div_op1_zero>
80009010:	1c 9b       	mov	r11,lr
80009012:	e6 1b 80 00 	andh	r11,0x8000,COH
80009016:	ea 1b 7f f0 	orh	r11,0x7ff0
8000901a:	30 0a       	mov	r10,0
8000901c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009020 <__avr32_f64_div_op1_zero>:
80009020:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009024:	ce f0       	breq	80009002 <__avr32_f64_div_res_subnormal+0x98>
80009026:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000902a:	e0 44 07 ff 	cp.w	r4,2047
8000902e:	ce 41       	brne	80008ff6 <__avr32_f64_div_res_subnormal+0x8c>
80009030:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009034:	ce 10       	breq	80008ff6 <__avr32_f64_div_res_subnormal+0x8c>
80009036:	ce 6b       	rjmp	80009002 <__avr32_f64_div_res_subnormal+0x98>

80009038 <__avr32_umod64>:
80009038:	d4 31       	pushm	r0-r7,lr
8000903a:	1a 97       	mov	r7,sp
8000903c:	20 3d       	sub	sp,12
8000903e:	10 9c       	mov	r12,r8
80009040:	12 95       	mov	r5,r9
80009042:	14 9e       	mov	lr,r10
80009044:	16 91       	mov	r1,r11
80009046:	16 96       	mov	r6,r11
80009048:	58 09       	cp.w	r9,0
8000904a:	e0 81 00 81 	brne	8000914c <__avr32_umod64+0x114>
8000904e:	16 38       	cp.w	r8,r11
80009050:	e0 88 00 12 	brls	80009074 <__avr32_umod64+0x3c>
80009054:	f0 08 12 00 	clz	r8,r8
80009058:	c4 e0       	breq	800090f4 <__avr32_umod64+0xbc>
8000905a:	f6 08 09 46 	lsl	r6,r11,r8
8000905e:	f8 08 09 4c 	lsl	r12,r12,r8
80009062:	f0 0b 11 20 	rsub	r11,r8,32
80009066:	f4 08 09 4e 	lsl	lr,r10,r8
8000906a:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000906e:	f7 e6 10 06 	or	r6,r11,r6
80009072:	c4 18       	rjmp	800090f4 <__avr32_umod64+0xbc>
80009074:	58 08       	cp.w	r8,0
80009076:	c0 51       	brne	80009080 <__avr32_umod64+0x48>
80009078:	30 19       	mov	r9,1
8000907a:	f2 08 0d 08 	divu	r8,r9,r8
8000907e:	10 9c       	mov	r12,r8
80009080:	f8 08 12 00 	clz	r8,r12
80009084:	c0 31       	brne	8000908a <__avr32_umod64+0x52>
80009086:	18 16       	sub	r6,r12
80009088:	c3 68       	rjmp	800090f4 <__avr32_umod64+0xbc>
8000908a:	f0 03 11 20 	rsub	r3,r8,32
8000908e:	f4 03 0a 4b 	lsr	r11,r10,r3
80009092:	f8 08 09 4c 	lsl	r12,r12,r8
80009096:	ec 08 09 49 	lsl	r9,r6,r8
8000909a:	ec 03 0a 43 	lsr	r3,r6,r3
8000909e:	f7 e9 10 09 	or	r9,r11,r9
800090a2:	f8 05 16 10 	lsr	r5,r12,0x10
800090a6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800090aa:	e6 05 0d 02 	divu	r2,r3,r5
800090ae:	f2 0e 16 10 	lsr	lr,r9,0x10
800090b2:	ec 02 02 4b 	mul	r11,r6,r2
800090b6:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800090ba:	16 3e       	cp.w	lr,r11
800090bc:	c0 72       	brcc	800090ca <__avr32_umod64+0x92>
800090be:	18 0e       	add	lr,r12
800090c0:	18 3e       	cp.w	lr,r12
800090c2:	c0 43       	brcs	800090ca <__avr32_umod64+0x92>
800090c4:	16 3e       	cp.w	lr,r11
800090c6:	fd dc e3 0e 	addcs	lr,lr,r12
800090ca:	fc 0b 01 03 	sub	r3,lr,r11
800090ce:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800090d2:	e6 05 0d 02 	divu	r2,r3,r5
800090d6:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800090da:	a5 36       	mul	r6,r2
800090dc:	0c 39       	cp.w	r9,r6
800090de:	c0 72       	brcc	800090ec <__avr32_umod64+0xb4>
800090e0:	18 09       	add	r9,r12
800090e2:	18 39       	cp.w	r9,r12
800090e4:	c0 43       	brcs	800090ec <__avr32_umod64+0xb4>
800090e6:	0c 39       	cp.w	r9,r6
800090e8:	f3 dc e3 09 	addcs	r9,r9,r12
800090ec:	f2 06 01 06 	sub	r6,r9,r6
800090f0:	f4 08 09 4e 	lsl	lr,r10,r8
800090f4:	f8 0a 16 10 	lsr	r10,r12,0x10
800090f8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800090fc:	ec 0a 0d 02 	divu	r2,r6,r10
80009100:	fc 09 16 10 	lsr	r9,lr,0x10
80009104:	ea 02 02 4b 	mul	r11,r5,r2
80009108:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000910c:	16 39       	cp.w	r9,r11
8000910e:	c0 72       	brcc	8000911c <__avr32_umod64+0xe4>
80009110:	18 09       	add	r9,r12
80009112:	18 39       	cp.w	r9,r12
80009114:	c0 43       	brcs	8000911c <__avr32_umod64+0xe4>
80009116:	16 39       	cp.w	r9,r11
80009118:	f3 dc e3 09 	addcs	r9,r9,r12
8000911c:	f2 0b 01 0b 	sub	r11,r9,r11
80009120:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009124:	f6 0a 0d 0a 	divu	r10,r11,r10
80009128:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000912c:	ea 0a 02 4a 	mul	r10,r5,r10
80009130:	14 3e       	cp.w	lr,r10
80009132:	c0 72       	brcc	80009140 <__avr32_umod64+0x108>
80009134:	18 0e       	add	lr,r12
80009136:	18 3e       	cp.w	lr,r12
80009138:	c0 43       	brcs	80009140 <__avr32_umod64+0x108>
8000913a:	14 3e       	cp.w	lr,r10
8000913c:	fd dc e3 0e 	addcs	lr,lr,r12
80009140:	fc 0a 01 0a 	sub	r10,lr,r10
80009144:	30 0b       	mov	r11,0
80009146:	f4 08 0a 4a 	lsr	r10,r10,r8
8000914a:	c7 b8       	rjmp	80009240 <__avr32_umod64+0x208>
8000914c:	16 39       	cp.w	r9,r11
8000914e:	e0 8b 00 79 	brhi	80009240 <__avr32_umod64+0x208>
80009152:	f2 09 12 00 	clz	r9,r9
80009156:	c1 21       	brne	8000917a <__avr32_umod64+0x142>
80009158:	10 3a       	cp.w	r10,r8
8000915a:	5f 2b       	srhs	r11
8000915c:	0a 31       	cp.w	r1,r5
8000915e:	5f ba       	srhi	r10
80009160:	f7 ea 10 0a 	or	r10,r11,r10
80009164:	f2 0a 18 00 	cp.b	r10,r9
80009168:	c0 60       	breq	80009174 <__avr32_umod64+0x13c>
8000916a:	fc 08 01 0c 	sub	r12,lr,r8
8000916e:	e2 05 01 46 	sbc	r6,r1,r5
80009172:	18 9e       	mov	lr,r12
80009174:	0c 9b       	mov	r11,r6
80009176:	1c 9a       	mov	r10,lr
80009178:	c6 48       	rjmp	80009240 <__avr32_umod64+0x208>
8000917a:	ea 09 09 4c 	lsl	r12,r5,r9
8000917e:	f2 06 11 20 	rsub	r6,r9,32
80009182:	f6 09 09 4b 	lsl	r11,r11,r9
80009186:	f0 09 09 42 	lsl	r2,r8,r9
8000918a:	ef 46 ff f4 	st.w	r7[-12],r6
8000918e:	f0 06 0a 48 	lsr	r8,r8,r6
80009192:	18 48       	or	r8,r12
80009194:	e2 06 0a 4c 	lsr	r12,r1,r6
80009198:	f4 09 09 43 	lsl	r3,r10,r9
8000919c:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
800091a0:	f4 06 0a 4a 	lsr	r10,r10,r6
800091a4:	16 4a       	or	r10,r11
800091a6:	f0 0b 16 10 	lsr	r11,r8,0x10
800091aa:	f8 0b 0d 04 	divu	r4,r12,r11
800091ae:	f4 0c 16 10 	lsr	r12,r10,0x10
800091b2:	08 91       	mov	r1,r4
800091b4:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
800091b8:	e8 0e 02 46 	mul	r6,r4,lr
800091bc:	0c 3c       	cp.w	r12,r6
800091be:	c0 a2       	brcc	800091d2 <__avr32_umod64+0x19a>
800091c0:	20 11       	sub	r1,1
800091c2:	10 0c       	add	r12,r8
800091c4:	10 3c       	cp.w	r12,r8
800091c6:	c0 63       	brcs	800091d2 <__avr32_umod64+0x19a>
800091c8:	0c 3c       	cp.w	r12,r6
800091ca:	f7 b1 03 01 	sublo	r1,1
800091ce:	f9 d8 e3 0c 	addcs	r12,r12,r8
800091d2:	0c 1c       	sub	r12,r6
800091d4:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800091d8:	f8 0b 0d 04 	divu	r4,r12,r11
800091dc:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800091e0:	08 96       	mov	r6,r4
800091e2:	e8 0e 02 4e 	mul	lr,r4,lr
800091e6:	1c 3b       	cp.w	r11,lr
800091e8:	c0 a2       	brcc	800091fc <__avr32_umod64+0x1c4>
800091ea:	20 16       	sub	r6,1
800091ec:	10 0b       	add	r11,r8
800091ee:	10 3b       	cp.w	r11,r8
800091f0:	c0 63       	brcs	800091fc <__avr32_umod64+0x1c4>
800091f2:	1c 3b       	cp.w	r11,lr
800091f4:	f7 b6 03 01 	sublo	r6,1
800091f8:	f7 d8 e3 0b 	addcs	r11,r11,r8
800091fc:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009200:	1c 1b       	sub	r11,lr
80009202:	e2 02 06 40 	mulu.d	r0,r1,r2
80009206:	00 9e       	mov	lr,r0
80009208:	02 9c       	mov	r12,r1
8000920a:	16 3c       	cp.w	r12,r11
8000920c:	e0 8b 00 08 	brhi	8000921c <__avr32_umod64+0x1e4>
80009210:	5f 06       	sreq	r6
80009212:	06 30       	cp.w	r0,r3
80009214:	5f ba       	srhi	r10
80009216:	ed ea 00 0a 	and	r10,r6,r10
8000921a:	c0 60       	breq	80009226 <__avr32_umod64+0x1ee>
8000921c:	fc 02 01 04 	sub	r4,lr,r2
80009220:	f8 08 01 4c 	sbc	r12,r12,r8
80009224:	08 9e       	mov	lr,r4
80009226:	e6 0e 01 0a 	sub	r10,r3,lr
8000922a:	f6 0c 01 4c 	sbc	r12,r11,r12
8000922e:	ee f1 ff f4 	ld.w	r1,r7[-12]
80009232:	f8 09 0a 4b 	lsr	r11,r12,r9
80009236:	f4 09 0a 4a 	lsr	r10,r10,r9
8000923a:	f8 01 09 4c 	lsl	r12,r12,r1
8000923e:	18 4a       	or	r10,r12
80009240:	2f dd       	sub	sp,-12
80009242:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009400:	c0 08       	rjmp	80009400 <_evba>
	...

80009404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009404:	c0 08       	rjmp	80009404 <_handle_TLB_Multiple_Hit>
	...

80009408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009408:	c0 08       	rjmp	80009408 <_handle_Bus_Error_Data_Fetch>
	...

8000940c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000940c:	c0 08       	rjmp	8000940c <_handle_Bus_Error_Instruction_Fetch>
	...

80009410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009410:	c0 08       	rjmp	80009410 <_handle_NMI>
	...

80009414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009414:	c0 08       	rjmp	80009414 <_handle_Instruction_Address>
	...

80009418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009418:	c0 08       	rjmp	80009418 <_handle_ITLB_Protection>
	...

8000941c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000941c:	c0 08       	rjmp	8000941c <_handle_Breakpoint>
	...

80009420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009420:	c0 08       	rjmp	80009420 <_handle_Illegal_Opcode>
	...

80009424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009424:	c0 08       	rjmp	80009424 <_handle_Unimplemented_Instruction>
	...

80009428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009428:	c0 08       	rjmp	80009428 <_handle_Privilege_Violation>
	...

8000942c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000942c:	c0 08       	rjmp	8000942c <_handle_Floating_Point>
	...

80009430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009430:	c0 08       	rjmp	80009430 <_handle_Coprocessor_Absent>
	...

80009434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009434:	c0 08       	rjmp	80009434 <_handle_Data_Address_Read>
	...

80009438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009438:	c0 08       	rjmp	80009438 <_handle_Data_Address_Write>
	...

8000943c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000943c:	c0 08       	rjmp	8000943c <_handle_DTLB_Protection_Read>
	...

80009440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009440:	c0 08       	rjmp	80009440 <_handle_DTLB_Protection_Write>
	...

80009444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009444:	c0 08       	rjmp	80009444 <_handle_DTLB_Modified>
	...

80009450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009450:	c0 08       	rjmp	80009450 <_handle_ITLB_Miss>
	...

80009460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009460:	c0 08       	rjmp	80009460 <_handle_DTLB_Miss_Read>
	...

80009470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009470:	c0 08       	rjmp	80009470 <_handle_DTLB_Miss_Write>
	...

80009500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009500:	c0 08       	rjmp	80009500 <_handle_Supervisor_Call>
80009502:	d7 03       	nop

80009504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009504:	30 0c       	mov	r12,0
80009506:	fe b0 c9 3f 	rcall	80002784 <_get_interrupt_handler>
8000950a:	58 0c       	cp.w	r12,0
8000950c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009510:	d6 03       	rete

80009512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009512:	30 1c       	mov	r12,1
80009514:	fe b0 c9 38 	rcall	80002784 <_get_interrupt_handler>
80009518:	58 0c       	cp.w	r12,0
8000951a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000951e:	d6 03       	rete

80009520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009520:	30 2c       	mov	r12,2
80009522:	fe b0 c9 31 	rcall	80002784 <_get_interrupt_handler>
80009526:	58 0c       	cp.w	r12,0
80009528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000952c:	d6 03       	rete

8000952e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000952e:	30 3c       	mov	r12,3
80009530:	fe b0 c9 2a 	rcall	80002784 <_get_interrupt_handler>
80009534:	58 0c       	cp.w	r12,0
80009536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000953a:	d6 03       	rete
8000953c:	d7 03       	nop
8000953e:	d7 03       	nop
80009540:	d7 03       	nop
80009542:	d7 03       	nop
80009544:	d7 03       	nop
80009546:	d7 03       	nop
80009548:	d7 03       	nop
8000954a:	d7 03       	nop
8000954c:	d7 03       	nop
8000954e:	d7 03       	nop
80009550:	d7 03       	nop
80009552:	d7 03       	nop
80009554:	d7 03       	nop
80009556:	d7 03       	nop
80009558:	d7 03       	nop
8000955a:	d7 03       	nop
8000955c:	d7 03       	nop
8000955e:	d7 03       	nop
80009560:	d7 03       	nop
80009562:	d7 03       	nop
80009564:	d7 03       	nop
80009566:	d7 03       	nop
80009568:	d7 03       	nop
8000956a:	d7 03       	nop
8000956c:	d7 03       	nop
8000956e:	d7 03       	nop
80009570:	d7 03       	nop
80009572:	d7 03       	nop
80009574:	d7 03       	nop
80009576:	d7 03       	nop
80009578:	d7 03       	nop
8000957a:	d7 03       	nop
8000957c:	d7 03       	nop
8000957e:	d7 03       	nop
80009580:	d7 03       	nop
80009582:	d7 03       	nop
80009584:	d7 03       	nop
80009586:	d7 03       	nop
80009588:	d7 03       	nop
8000958a:	d7 03       	nop
8000958c:	d7 03       	nop
8000958e:	d7 03       	nop
80009590:	d7 03       	nop
80009592:	d7 03       	nop
80009594:	d7 03       	nop
80009596:	d7 03       	nop
80009598:	d7 03       	nop
8000959a:	d7 03       	nop
8000959c:	d7 03       	nop
8000959e:	d7 03       	nop
800095a0:	d7 03       	nop
800095a2:	d7 03       	nop
800095a4:	d7 03       	nop
800095a6:	d7 03       	nop
800095a8:	d7 03       	nop
800095aa:	d7 03       	nop
800095ac:	d7 03       	nop
800095ae:	d7 03       	nop
800095b0:	d7 03       	nop
800095b2:	d7 03       	nop
800095b4:	d7 03       	nop
800095b6:	d7 03       	nop
800095b8:	d7 03       	nop
800095ba:	d7 03       	nop
800095bc:	d7 03       	nop
800095be:	d7 03       	nop
800095c0:	d7 03       	nop
800095c2:	d7 03       	nop
800095c4:	d7 03       	nop
800095c6:	d7 03       	nop
800095c8:	d7 03       	nop
800095ca:	d7 03       	nop
800095cc:	d7 03       	nop
800095ce:	d7 03       	nop
800095d0:	d7 03       	nop
800095d2:	d7 03       	nop
800095d4:	d7 03       	nop
800095d6:	d7 03       	nop
800095d8:	d7 03       	nop
800095da:	d7 03       	nop
800095dc:	d7 03       	nop
800095de:	d7 03       	nop
800095e0:	d7 03       	nop
800095e2:	d7 03       	nop
800095e4:	d7 03       	nop
800095e6:	d7 03       	nop
800095e8:	d7 03       	nop
800095ea:	d7 03       	nop
800095ec:	d7 03       	nop
800095ee:	d7 03       	nop
800095f0:	d7 03       	nop
800095f2:	d7 03       	nop
800095f4:	d7 03       	nop
800095f6:	d7 03       	nop
800095f8:	d7 03       	nop
800095fa:	d7 03       	nop
800095fc:	d7 03       	nop
800095fe:	d7 03       	nop
