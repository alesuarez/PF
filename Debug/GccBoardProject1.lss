
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000744c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009600  80009600  00009a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000aa0  80009800  80009800  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000524  00000008  8000a2a0  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000052c  8000a7c4  0000ad2c  2**0
                  ALLOC
  8 .bss          000002f0  00000530  00000530  00000000  2**2
                  ALLOC
  9 .heap         000027e0  00000820  00000820  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d98  00000000  00000000  0000ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001adc  00000000  00000000  0000baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00028624  00000000  00000000  0000d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000582c  00000000  00000000  00035bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ec75  00000000  00000000  0003b424  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002058  00000000  00000000  0004a09c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000558d  00000000  00000000  0004c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a721  00000000  00000000  00051681  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00797142  00000000  00000000  0005bda2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001038  00000000  00000000  007f2ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 b0 	sub	pc,pc,-3408

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	05 30       	ld.ub	r0,r2++
800020c0:	00 00       	add	r0,r0
800020c2:	05 44       	ld.w	r4,--r2
800020c4:	00 00       	add	r0,r0
800020c6:	05 3c       	ld.ub	r12,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 48       	ld.w	r8,--r2
800020cc:	00 00       	add	r0,r0
800020ce:	05 34       	ld.ub	r4,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 38       	ld.ub	r8,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 50       	ld.sh	r0,--r2
800020d8:	00 00       	add	r0,r0
800020da:	05 40       	ld.w	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 4c       	ld.w	r12,--r2

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	05 30       	ld.ub	r0,r2++

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	05 30       	ld.ub	r0,r2++
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	05 40       	ld.w	r0,--r2
80002200:	00 00       	add	r0,r0
80002202:	05 50       	ld.sh	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 48       	ld.w	r8,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 3c       	ld.ub	r12,r2++
8000220c:	00 00       	add	r0,r0
8000220e:	05 44       	ld.w	r4,--r2
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	18 96       	mov	r6,r12
80002236:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002238:	30 28       	mov	r8,2
8000223a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000223c:	4b 78       	lddpc	r8,80002318 <twim_read_packet+0xe8>
8000223e:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002240:	f0 1f 00 37 	mcall	8000231c <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002244:	6e 29       	ld.w	r9,r7[0x8]
80002246:	4b 78       	lddpc	r8,80002320 <twim_read_packet+0xf0>
80002248:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224a:	6e 39       	ld.w	r9,r7[0xc]
8000224c:	4b 68       	lddpc	r8,80002324 <twim_read_packet+0xf4>
8000224e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002250:	30 08       	mov	r8,0
80002252:	4b 6a       	lddpc	r10,80002328 <twim_read_packet+0xf8>
80002254:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002256:	30 0b       	mov	r11,0
80002258:	4b 5a       	lddpc	r10,8000232c <twim_read_packet+0xfc>
8000225a:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
8000225c:	0f fa       	ld.ub	r10,r7[0x7]
8000225e:	f0 0a 18 00 	cp.b	r10,r8
80002262:	c2 50       	breq	800022ac <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002264:	4a d8       	lddpc	r8,80002318 <twim_read_packet+0xe8>
80002266:	70 08       	ld.w	r8,r8[0x0]
80002268:	30 19       	mov	r9,1
8000226a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226c:	e0 69 00 80 	mov	r9,128
80002270:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002272:	30 29       	mov	r9,2
80002274:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002276:	ee ca ff fc 	sub	r10,r7,-4
8000227a:	4a e9       	lddpc	r9,80002330 <twim_read_packet+0x100>
8000227c:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000227e:	0f f9       	ld.ub	r9,r7[0x7]
80002280:	4a da       	lddpc	r10,80002334 <twim_read_packet+0x104>
80002282:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002284:	e0 6b 07 03 	mov	r11,1795
80002288:	4a ca       	lddpc	r10,80002338 <twim_read_packet+0x108>
8000228a:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000228c:	6e 0a       	ld.w	r10,r7[0x0]
8000228e:	a1 7a       	lsl	r10,0x1
80002290:	e8 1a a0 00 	orl	r10,0xa000
80002294:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002298:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229a:	6e 0a       	ld.w	r10,r7[0x0]
8000229c:	6e 39       	ld.w	r9,r7[0xc]
8000229e:	b1 69       	lsl	r9,0x10
800022a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a4:	e8 19 e0 01 	orl	r9,0xe001
800022a8:	91 49       	st.w	r8[0x10],r9
800022aa:	c1 18       	rjmp	800022cc <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022ac:	30 0a       	mov	r10,0
800022ae:	4a 28       	lddpc	r8,80002334 <twim_read_packet+0x104>
800022b0:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b2:	e0 6a 07 01 	mov	r10,1793
800022b6:	4a 18       	lddpc	r8,80002338 <twim_read_packet+0x108>
800022b8:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022ba:	49 88       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022bc:	70 08       	ld.w	r8,r8[0x0]
800022be:	6e 0a       	ld.w	r10,r7[0x0]
800022c0:	b1 69       	lsl	r9,0x10
800022c2:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022c6:	e8 19 e0 01 	orl	r9,0xe001
800022ca:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022cc:	49 38       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	49 a9       	lddpc	r9,80002338 <twim_read_packet+0x108>
800022d2:	72 09       	ld.w	r9,r9[0x0]
800022d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022d6:	30 18       	mov	r8,1
800022d8:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022da:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022dc:	49 48       	lddpc	r8,8000232c <twim_read_packet+0xfc>
800022de:	70 08       	ld.w	r8,r8[0x0]
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 80       	breq	800022f2 <twim_read_packet+0xc2>
800022e4:	c0 b8       	rjmp	800022fa <twim_read_packet+0xca>
		cpu_relax();
800022e6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ea:	6e 08       	ld.w	r8,r7[0x0]
800022ec:	58 08       	cp.w	r8,0
800022ee:	c0 30       	breq	800022f4 <twim_read_packet+0xc4>
800022f0:	c0 58       	rjmp	800022fa <twim_read_packet+0xca>
800022f2:	48 f7       	lddpc	r7,8000232c <twim_read_packet+0xfc>
800022f4:	f0 1f 00 12 	mcall	8000233c <twim_read_packet+0x10c>
800022f8:	cf 70       	breq	800022e6 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fa:	30 28       	mov	r8,2
800022fc:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022fe:	48 c8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002300:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002302:	5b c8       	cp.w	r8,-4
80002304:	c0 70       	breq	80002312 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002306:	48 a8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002308:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230a:	5b e8       	cp.w	r8,-2
8000230c:	c0 30       	breq	80002312 <twim_read_packet+0xe2>
8000230e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002312:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002316:	00 00       	add	r0,r0
80002318:	00 00       	add	r0,r0
8000231a:	05 30       	ld.ub	r0,r2++
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 54       	sub	r4,21
80002320:	00 00       	add	r0,r0
80002322:	05 34       	ld.ub	r4,r2++
80002324:	00 00       	add	r0,r0
80002326:	05 38       	ld.ub	r8,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 48       	ld.w	r8,--r2
8000232c:	00 00       	add	r0,r0
8000232e:	05 3c       	ld.ub	r12,r2++
80002330:	00 00       	add	r0,r0
80002332:	05 40       	ld.w	r0,--r2
80002334:	00 00       	add	r0,r0
80002336:	05 50       	ld.sh	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 44       	ld.w	r4,--r2
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 44       	sub	r4,20

80002340 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002340:	eb cd 40 e0 	pushm	r5-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002348:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000234c:	30 0a       	mov	r10,0
8000234e:	4a 69       	lddpc	r9,800023e4 <twim_master_init+0xa4>
80002350:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002352:	e6 18 00 01 	andh	r8,0x1,COH
80002356:	c0 b1       	brne	8000236c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002358:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235a:	3f f8       	mov	r8,-1
8000235c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000235e:	30 18       	mov	r8,1
80002360:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002362:	e0 68 00 80 	mov	r8,128
80002366:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002368:	d5 03       	csrf	0x10
8000236a:	c0 88       	rjmp	8000237a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000236c:	3f f8       	mov	r8,-1
8000236e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002370:	30 18       	mov	r8,1
80002372:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002374:	e0 68 00 80 	mov	r8,128
80002378:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237a:	3f f8       	mov	r8,-1
8000237c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000237e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002382:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002384:	30 1a       	mov	r10,1
80002386:	e0 6b 02 80 	mov	r11,640
8000238a:	49 8c       	lddpc	r12,800023e8 <twim_master_init+0xa8>
8000238c:	f0 1f 00 18 	mcall	800023ec <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002390:	e6 16 00 01 	andh	r6,0x1,COH
80002394:	c0 21       	brne	80002398 <twim_master_init+0x58>
      cpu_irq_enable();
80002396:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002398:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000239c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000239e:	f0 09 18 00 	cp.b	r9,r8
800023a2:	f9 b8 01 10 	movne	r8,16
800023a6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023aa:	f9 b8 01 ff 	movne	r8,-1
800023ae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b2:	6a 0a       	ld.w	r10,r5[0x0]
800023b4:	6a 1b       	ld.w	r11,r5[0x4]
800023b6:	0e 9c       	mov	r12,r7
800023b8:	f0 1f 00 0e 	mcall	800023f0 <twim_master_init+0xb0>
800023bc:	5b 8c       	cp.w	r12,-8
800023be:	c1 00       	breq	800023de <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c0:	6a 2b       	ld.w	r11,r5[0x8]
800023c2:	0e 9c       	mov	r12,r7
800023c4:	f0 1f 00 0c 	mcall	800023f4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023c8:	48 78       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023cc:	5b c8       	cp.w	r8,-4
800023ce:	c0 70       	breq	800023dc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d0:	48 58       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d4:	5b e8       	cp.w	r8,-2
800023d6:	c0 30       	breq	800023dc <twim_master_init+0x9c>
800023d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023dc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	00 00       	add	r0,r0
800023e6:	05 3c       	ld.ub	r12,r2++
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	20 04       	sub	r4,0
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	26 dc       	sub	r12,109
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 e0       	sub	r0,14
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 14       	sub	r4,33

800023f8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023f8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800023fc:	58 0a       	cp.w	r10,0
800023fe:	c6 30       	breq	800024c4 <eic_init+0xcc>
80002400:	30 08       	mov	r8,0
80002402:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002404:	30 19       	mov	r9,1
80002406:	30 1e       	mov	lr,1
80002408:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000240c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002410:	11 96       	ld.ub	r6,r8[0x1]
80002412:	f2 06 18 00 	cp.b	r6,r9
80002416:	c0 71       	brne	80002424 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002418:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241a:	11 86       	ld.ub	r6,r8[0x0]
8000241c:	fc 06 09 46 	lsl	r6,lr,r6
80002420:	0a 46       	or	r6,r5
80002422:	c0 78       	rjmp	80002430 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002424:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002426:	11 86       	ld.ub	r6,r8[0x0]
80002428:	fc 06 09 46 	lsl	r6,lr,r6
8000242c:	5c d6       	com	r6
8000242e:	0a 66       	and	r6,r5
80002430:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002432:	11 a6       	ld.ub	r6,r8[0x2]
80002434:	f2 06 18 00 	cp.b	r6,r9
80002438:	c0 71       	brne	80002446 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000243c:	11 86       	ld.ub	r6,r8[0x0]
8000243e:	fc 06 09 46 	lsl	r6,lr,r6
80002442:	0a 46       	or	r6,r5
80002444:	c0 78       	rjmp	80002452 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002446:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002448:	11 86       	ld.ub	r6,r8[0x0]
8000244a:	fc 06 09 46 	lsl	r6,lr,r6
8000244e:	5c d6       	com	r6
80002450:	0a 66       	and	r6,r5
80002452:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002454:	11 b6       	ld.ub	r6,r8[0x3]
80002456:	f2 06 18 00 	cp.b	r6,r9
8000245a:	c0 71       	brne	80002468 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000245c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000245e:	11 86       	ld.ub	r6,r8[0x0]
80002460:	fc 06 09 46 	lsl	r6,lr,r6
80002464:	0a 46       	or	r6,r5
80002466:	c0 78       	rjmp	80002474 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002468:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246a:	11 86       	ld.ub	r6,r8[0x0]
8000246c:	fc 06 09 46 	lsl	r6,lr,r6
80002470:	5c d6       	com	r6
80002472:	0a 66       	and	r6,r5
80002474:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002476:	11 c6       	ld.ub	r6,r8[0x4]
80002478:	f2 06 18 00 	cp.b	r6,r9
8000247c:	c0 71       	brne	8000248a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000247e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002480:	11 86       	ld.ub	r6,r8[0x0]
80002482:	fc 06 09 46 	lsl	r6,lr,r6
80002486:	0a 46       	or	r6,r5
80002488:	c0 78       	rjmp	80002496 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000248c:	11 86       	ld.ub	r6,r8[0x0]
8000248e:	fc 06 09 46 	lsl	r6,lr,r6
80002492:	5c d6       	com	r6
80002494:	0a 66       	and	r6,r5
80002496:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002498:	11 d6       	ld.ub	r6,r8[0x5]
8000249a:	f2 06 18 00 	cp.b	r6,r9
8000249e:	c0 71       	brne	800024ac <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a2:	11 88       	ld.ub	r8,r8[0x0]
800024a4:	fc 08 09 48 	lsl	r8,lr,r8
800024a8:	0c 48       	or	r8,r6
800024aa:	c0 78       	rjmp	800024b8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024ac:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024ae:	11 88       	ld.ub	r8,r8[0x0]
800024b0:	fc 08 09 48 	lsl	r8,lr,r8
800024b4:	5c d8       	com	r8
800024b6:	0c 68       	and	r8,r6
800024b8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024ba:	2f f7       	sub	r7,-1
800024bc:	0e 98       	mov	r8,r7
800024be:	0e 3a       	cp.w	r10,r7
800024c0:	fe 9b ff a4 	brhi	80002408 <eic_init+0x10>
800024c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024c8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024c8:	30 18       	mov	r8,1
800024ca:	f0 0b 09 48 	lsl	r8,r8,r11
800024ce:	99 c8       	st.w	r12[0x30],r8
}
800024d0:	5e fc       	retal	r12

800024d2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d2:	30 18       	mov	r8,1
800024d4:	f0 0b 09 48 	lsl	r8,r8,r11
800024d8:	99 08       	st.w	r12[0x0],r8
}
800024da:	5e fc       	retal	r12

800024dc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800024e8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ea:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024ec:	e6 18 00 01 	andh	r8,0x1,COH
800024f0:	c0 21       	brne	800024f4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f4:	5e fc       	retal	r12
800024f6:	d7 03       	nop

800024f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 78       	lsl	r8,0x9
800024fe:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002502:	58 7b       	cp.w	r11,7
80002504:	e0 8b 00 05 	brhi	8000250e <gpio_enable_module_pin+0x16>
80002508:	4a 09       	lddpc	r9,80002588 <gpio_enable_module_pin+0x90>
8000250a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000250e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002510:	30 19       	mov	r9,1
80002512:	f2 0c 09 49 	lsl	r9,r9,r12
80002516:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002518:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000251c:	c3 18       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251e:	30 19       	mov	r9,1
80002520:	f2 0c 09 49 	lsl	r9,r9,r12
80002524:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002526:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002528:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252a:	c2 a8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000252c:	30 19       	mov	r9,1
8000252e:	f2 0c 09 49 	lsl	r9,r9,r12
80002532:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002534:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002536:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002538:	c2 38       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002542:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002544:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002546:	c1 c8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002548:	30 19       	mov	r9,1
8000254a:	f2 0c 09 49 	lsl	r9,r9,r12
8000254e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002550:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002552:	91 d9       	st.w	r8[0x34],r9
		break;
80002554:	c1 58       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002556:	30 19       	mov	r9,1
80002558:	f2 0c 09 49 	lsl	r9,r9,r12
8000255c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000255e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002560:	91 d9       	st.w	r8[0x34],r9
		break;
80002562:	c0 e8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002564:	30 19       	mov	r9,1
80002566:	f2 0c 09 49 	lsl	r9,r9,r12
8000256a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000256c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000256e:	91 d9       	st.w	r8[0x34],r9
		break;
80002570:	c0 78       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002572:	30 19       	mov	r9,1
80002574:	f2 0c 09 49 	lsl	r9,r9,r12
80002578:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000257c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000257e:	30 19       	mov	r9,1
80002580:	f2 0c 09 4c 	lsl	r12,r9,r12
80002584:	91 2c       	st.w	r8[0x8],r12
80002586:	5e fd       	retal	0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	98 00       	ld.sh	r0,r12[0x0]

8000258c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000258c:	d4 21       	pushm	r4-r7,lr
8000258e:	18 97       	mov	r7,r12
80002590:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002592:	58 0b       	cp.w	r11,0
80002594:	c0 31       	brne	8000259a <gpio_enable_module+0xe>
80002596:	30 05       	mov	r5,0
80002598:	c0 d8       	rjmp	800025b2 <gpio_enable_module+0x26>
8000259a:	30 06       	mov	r6,0
8000259c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000259e:	6e 1b       	ld.w	r11,r7[0x4]
800025a0:	6e 0c       	ld.w	r12,r7[0x0]
800025a2:	f0 1f 00 06 	mcall	800025b8 <gpio_enable_module+0x2c>
800025a6:	18 45       	or	r5,r12
		gpiomap++;
800025a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025aa:	2f f6       	sub	r6,-1
800025ac:	0c 34       	cp.w	r4,r6
800025ae:	fe 9b ff f8 	brhi	8000259e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b2:	0a 9c       	mov	r12,r5
800025b4:	d8 22       	popm	r4-r7,pc
800025b6:	00 00       	add	r0,r0
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	24 f8       	sub	r8,79

800025bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025bc:	f8 08 16 05 	lsr	r8,r12,0x5
800025c0:	a9 78       	lsl	r8,0x9
800025c2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025c6:	16 99       	mov	r9,r11
800025c8:	e2 19 00 04 	andl	r9,0x4,COH
800025cc:	c0 70       	breq	800025da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025ce:	30 19       	mov	r9,1
800025d0:	f2 0c 09 49 	lsl	r9,r9,r12
800025d4:	f1 49 00 74 	st.w	r8[116],r9
800025d8:	c0 68       	rjmp	800025e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025da:	30 19       	mov	r9,1
800025dc:	f2 0c 09 49 	lsl	r9,r9,r12
800025e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e4:	16 99       	mov	r9,r11
800025e6:	e2 19 00 80 	andl	r9,0x80,COH
800025ea:	c2 40       	breq	80002632 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025ec:	16 99       	mov	r9,r11
800025ee:	e2 19 01 80 	andl	r9,0x180,COH
800025f2:	c0 90       	breq	80002604 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 49 	lsl	r9,r9,r12
800025fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 49 00 b8 	st.w	r8[184],r9
80002602:	c1 88       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002604:	16 99       	mov	r9,r11
80002606:	e2 19 02 80 	andl	r9,0x280,COH
8000260a:	c0 90       	breq	8000261c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000260c:	30 19       	mov	r9,1
8000260e:	f2 0c 09 49 	lsl	r9,r9,r12
80002612:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002616:	f1 49 00 b8 	st.w	r8[184],r9
8000261a:	c0 c8       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000261c:	16 99       	mov	r9,r11
8000261e:	e2 19 03 80 	andl	r9,0x380,COH
80002622:	c0 80       	breq	80002632 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002624:	30 19       	mov	r9,1
80002626:	f2 0c 09 49 	lsl	r9,r9,r12
8000262a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000262e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002632:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002636:	c1 50       	breq	80002660 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002638:	e2 1b 00 02 	andl	r11,0x2,COH
8000263c:	c0 70       	breq	8000264a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000263e:	30 19       	mov	r9,1
80002640:	f2 0c 09 49 	lsl	r9,r9,r12
80002644:	f1 49 00 54 	st.w	r8[84],r9
80002648:	c0 68       	rjmp	80002654 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264a:	30 19       	mov	r9,1
8000264c:	f2 0c 09 49 	lsl	r9,r9,r12
80002650:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 49 	lsl	r9,r9,r12
8000265a:	f1 49 00 44 	st.w	r8[68],r9
8000265e:	c0 68       	rjmp	8000266a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002660:	30 19       	mov	r9,1
80002662:	f2 0c 09 49 	lsl	r9,r9,r12
80002666:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266a:	30 19       	mov	r9,1
8000266c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002670:	91 1c       	st.w	r8[0x4],r12
}
80002672:	5e fc       	retal	r12

80002674 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002674:	f8 08 16 05 	lsr	r8,r12,0x5
80002678:	a9 78       	lsl	r8,0x9
8000267a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000267e:	30 19       	mov	r9,1
80002680:	f2 0c 09 4c 	lsl	r12,r9,r12
80002684:	f1 4c 00 54 	st.w	r8[84],r12
}
80002688:	5e fc       	retal	r12

8000268a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268a:	f8 08 16 05 	lsr	r8,r12,0x5
8000268e:	a9 78       	lsl	r8,0x9
80002690:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002694:	30 19       	mov	r9,1
80002696:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000269e:	5e fc       	retal	r12

800026a0 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026a0:	f8 08 16 05 	lsr	r8,r12,0x5
800026a4:	a9 78       	lsl	r8,0x9
800026a6:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800026aa:	30 19       	mov	r9,1
800026ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800026b0:	f1 4c 00 5c 	st.w	r8[92],r12
}
800026b4:	5e fc       	retal	r12

800026b6 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026b6:	f8 08 16 05 	lsr	r8,r12,0x5
800026ba:	a9 78       	lsl	r8,0x9
800026bc:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
800026c0:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
800026c4:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800026c8:	30 1a       	mov	r10,1
800026ca:	f4 0c 09 4c 	lsl	r12,r10,r12
800026ce:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026d2:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026d6:	5e fc       	retal	r12

800026d8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026d8:	c0 08       	rjmp	800026d8 <_unhandled_interrupt>
800026da:	d7 03       	nop

800026dc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026dc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026e0:	49 99       	lddpc	r9,80002744 <INTC_register_interrupt+0x68>
800026e2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026e6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026ea:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026ec:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026f0:	58 0a       	cp.w	r10,0
800026f2:	c0 91       	brne	80002704 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026f4:	49 59       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
800026f6:	49 6a       	lddpc	r10,8000274c <INTC_register_interrupt+0x70>
800026f8:	12 1a       	sub	r10,r9
800026fa:	fe 79 10 00 	mov	r9,-61440
800026fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002702:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002704:	58 1a       	cp.w	r10,1
80002706:	c0 a1       	brne	8000271a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002708:	49 09       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
8000270a:	49 2a       	lddpc	r10,80002750 <INTC_register_interrupt+0x74>
8000270c:	12 1a       	sub	r10,r9
8000270e:	bf aa       	sbr	r10,0x1e
80002710:	fe 79 10 00 	mov	r9,-61440
80002714:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002718:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000271a:	58 2a       	cp.w	r10,2
8000271c:	c0 a1       	brne	80002730 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000271e:	48 b9       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002720:	48 da       	lddpc	r10,80002754 <INTC_register_interrupt+0x78>
80002722:	12 1a       	sub	r10,r9
80002724:	bf ba       	sbr	r10,0x1f
80002726:	fe 79 10 00 	mov	r9,-61440
8000272a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000272e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002730:	48 69       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002732:	48 aa       	lddpc	r10,80002758 <INTC_register_interrupt+0x7c>
80002734:	12 1a       	sub	r10,r9
80002736:	ea 1a c0 00 	orh	r10,0xc000
8000273a:	fe 79 10 00 	mov	r9,-61440
8000273e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002742:	5e fc       	retal	r12
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	98 20       	ld.sh	r0,r12[0x4]
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	96 00       	ld.sh	r0,r11[0x0]
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	97 04       	st.w	r11[0x0],r4
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	97 12       	st.w	r11[0x4],r2
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	97 20       	st.w	r11[0x8],r0
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	97 2e       	st.w	r11[0x8],lr

8000275c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000275c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000275e:	49 18       	lddpc	r8,800027a0 <INTC_init_interrupts+0x44>
80002760:	e3 b8 00 01 	mtsr	0x4,r8
80002764:	49 0e       	lddpc	lr,800027a4 <INTC_init_interrupts+0x48>
80002766:	30 07       	mov	r7,0
80002768:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000276a:	49 0c       	lddpc	r12,800027a8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000276c:	49 05       	lddpc	r5,800027ac <INTC_init_interrupts+0x50>
8000276e:	10 15       	sub	r5,r8
80002770:	fe 76 10 00 	mov	r6,-61440
80002774:	c1 08       	rjmp	80002794 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002776:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002778:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000277a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000277c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002780:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002782:	10 3a       	cp.w	r10,r8
80002784:	fe 9b ff fc 	brhi	8000277c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002788:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000278c:	2f f7       	sub	r7,-1
8000278e:	2f 8e       	sub	lr,-8
80002790:	59 f7       	cp.w	r7,31
80002792:	c0 50       	breq	8000279c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002794:	7c 08       	ld.w	r8,lr[0x0]
80002796:	58 08       	cp.w	r8,0
80002798:	ce f1       	brne	80002776 <INTC_init_interrupts+0x1a>
8000279a:	cf 7b       	rjmp	80002788 <INTC_init_interrupts+0x2c>
8000279c:	d8 22       	popm	r4-r7,pc
8000279e:	00 00       	add	r0,r0
800027a0:	80 00       	ld.sh	r0,r0[0x0]
800027a2:	96 00       	ld.sh	r0,r11[0x0]
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	98 20       	ld.sh	r0,r12[0x4]
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	26 d8       	sub	r8,109
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	97 04       	st.w	r11[0x0],r4

800027b0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800027b0:	fe 78 10 00 	mov	r8,-61440
800027b4:	e0 69 00 83 	mov	r9,131
800027b8:	f2 0c 01 0c 	sub	r12,r9,r12
800027bc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800027c0:	f2 ca ff c0 	sub	r10,r9,-64
800027c4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027c8:	58 08       	cp.w	r8,0
800027ca:	c0 21       	brne	800027ce <_get_interrupt_handler+0x1e>
800027cc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027ce:	f0 08 12 00 	clz	r8,r8
800027d2:	48 5a       	lddpc	r10,800027e4 <_get_interrupt_handler+0x34>
800027d4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027d8:	f0 08 11 1f 	rsub	r8,r8,31
800027dc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027de:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027e2:	5e fc       	retal	r12
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	98 20       	ld.sh	r0,r12[0x4]

800027e8 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027e8:	f8 c8 00 01 	sub	r8,r12,1
800027ec:	f0 0b 00 0b 	add	r11,r8,r11
800027f0:	f6 0c 0d 0a 	divu	r10,r11,r12
800027f4:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027f6:	f4 c8 00 01 	sub	r8,r10,1
800027fa:	e0 48 00 fe 	cp.w	r8,254
800027fe:	e0 88 00 03 	brls	80002804 <getBaudDiv+0x1c>
80002802:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002804:	5c 8c       	casts.h	r12
}
80002806:	5e fc       	retal	r12

80002808 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002808:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000280a:	30 18       	mov	r8,1
8000280c:	f0 0b 18 00 	cp.b	r11,r8
80002810:	5f be       	srhi	lr
80002812:	f0 0a 18 00 	cp.b	r10,r8
80002816:	5f b8       	srhi	r8
80002818:	fd e8 10 08 	or	r8,lr,r8
8000281c:	c0 30       	breq	80002822 <spi_selectionMode+0x1a>
8000281e:	30 2c       	mov	r12,2
80002820:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002822:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002824:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002828:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000282c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002830:	99 18       	st.w	r12[0x4],r8
80002832:	d8 0a       	popm	pc,r12=0

80002834 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002834:	78 18       	ld.w	r8,r12[0x4]
80002836:	ea 18 00 0f 	orh	r8,0xf
8000283a:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000283c:	78 18       	ld.w	r8,r12[0x4]
8000283e:	e2 18 00 04 	andl	r8,0x4,COH
80002842:	c0 f0       	breq	80002860 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002844:	30 e8       	mov	r8,14
80002846:	f0 0b 18 00 	cp.b	r11,r8
8000284a:	e0 8b 00 19 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000284e:	78 18       	ld.w	r8,r12[0x4]
80002850:	b1 6b       	lsl	r11,0x10
80002852:	ea 1b ff f0 	orh	r11,0xfff0
80002856:	e8 1b ff ff 	orl	r11,0xffff
8000285a:	10 6b       	and	r11,r8
8000285c:	99 1b       	st.w	r12[0x4],r11
8000285e:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002860:	30 38       	mov	r8,3
80002862:	f0 0b 18 00 	cp.b	r11,r8
80002866:	e0 8b 00 0b 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000286a:	78 18       	ld.w	r8,r12[0x4]
8000286c:	2f 0b       	sub	r11,-16
8000286e:	30 19       	mov	r9,1
80002870:	f2 0b 09 4b 	lsl	r11,r9,r11
80002874:	5c db       	com	r11
80002876:	10 6b       	and	r11,r8
80002878:	99 1b       	st.w	r12[0x4],r11
8000287a:	5e fd       	retal	0
8000287c:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000287e:	5e fc       	retal	r12

80002880 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002880:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002884:	c0 58       	rjmp	8000288e <spi_unselectChip+0xe>
		if (!timeout--) {
80002886:	58 08       	cp.w	r8,0
80002888:	c0 21       	brne	8000288c <spi_unselectChip+0xc>
8000288a:	5e ff       	retal	1
8000288c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000288e:	78 49       	ld.w	r9,r12[0x10]
80002890:	e2 19 02 00 	andl	r9,0x200,COH
80002894:	cf 90       	breq	80002886 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002896:	78 18       	ld.w	r8,r12[0x4]
80002898:	ea 18 00 0f 	orh	r8,0xf
8000289c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000289e:	fc 18 01 00 	movh	r8,0x100
800028a2:	99 08       	st.w	r12[0x0],r8
800028a4:	5e fd       	retal	0
800028a6:	d7 03       	nop

800028a8 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a8:	eb cd 40 f8 	pushm	r3-r7,lr
800028ac:	18 95       	mov	r5,r12
800028ae:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028b0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800028b4:	30 38       	mov	r8,3
800028b6:	f0 06 18 00 	cp.b	r6,r8
800028ba:	e0 8b 00 4d 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800028be:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028c2:	30 18       	mov	r8,1
800028c4:	f0 04 18 00 	cp.b	r4,r8
800028c8:	e0 8b 00 46 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028cc:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028d0:	30 78       	mov	r8,7
800028d2:	f0 03 18 00 	cp.b	r3,r8
800028d6:	e0 88 00 3f 	brls	80002954 <spi_setupChipReg+0xac>
800028da:	31 08       	mov	r8,16
800028dc:	f0 03 18 00 	cp.b	r3,r8
800028e0:	e0 8b 00 3a 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028e4:	14 9b       	mov	r11,r10
800028e6:	6e 1c       	ld.w	r12,r7[0x4]
800028e8:	f0 1f 00 1d 	mcall	8000295c <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028ec:	c3 45       	brlt	80002954 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028ee:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028f0:	ec 09 16 01 	lsr	r9,r6,0x1
800028f4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028f8:	ec 16 00 01 	eorl	r6,0x1
800028fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002900:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002904:	20 83       	sub	r3,8
80002906:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000290a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000290e:	ef 39 00 09 	ld.ub	r9,r7[9]
80002912:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002916:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000291a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000291e:	0f 89       	ld.ub	r9,r7[0x0]
80002920:	30 1a       	mov	r10,1
80002922:	f4 09 18 00 	cp.b	r9,r10
80002926:	c0 e0       	breq	80002942 <spi_setupChipReg+0x9a>
80002928:	c0 a3       	brcs	8000293c <spi_setupChipReg+0x94>
8000292a:	30 2a       	mov	r10,2
8000292c:	f4 09 18 00 	cp.b	r9,r10
80002930:	c0 c0       	breq	80002948 <spi_setupChipReg+0xa0>
80002932:	30 3a       	mov	r10,3
80002934:	f4 09 18 00 	cp.b	r9,r10
80002938:	c0 e1       	brne	80002954 <spi_setupChipReg+0xac>
8000293a:	c0 a8       	rjmp	8000294e <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000293c:	8b c8       	st.w	r5[0x30],r8
8000293e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002942:	8b d8       	st.w	r5[0x34],r8
80002944:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002948:	8b e8       	st.w	r5[0x38],r8
8000294a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000294e:	8b f8       	st.w	r5[0x3c],r8
80002950:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002954:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002956:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000295a:	00 00       	add	r0,r0
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	27 e8       	sub	r8,126

80002960 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002960:	30 18       	mov	r8,1
80002962:	99 08       	st.w	r12[0x0],r8
}
80002964:	5e fc       	retal	r12

80002966 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002966:	76 09       	ld.w	r9,r11[0x0]
80002968:	58 29       	cp.w	r9,2
8000296a:	e0 88 00 03 	brls	80002970 <tc_init_waveform+0xa>
8000296e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002970:	76 18       	ld.w	r8,r11[0x4]
80002972:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002976:	af ba       	sbr	r10,0xf
80002978:	10 9b       	mov	r11,r8
8000297a:	e6 1b c0 00 	andh	r11,0xc000,COH
8000297e:	16 4a       	or	r10,r11
80002980:	10 9b       	mov	r11,r8
80002982:	e6 1b 30 00 	andh	r11,0x3000,COH
80002986:	16 4a       	or	r10,r11
80002988:	10 9b       	mov	r11,r8
8000298a:	e6 1b 0c 00 	andh	r11,0xc00,COH
8000298e:	16 4a       	or	r10,r11
80002990:	10 9b       	mov	r11,r8
80002992:	e6 1b 03 00 	andh	r11,0x300,COH
80002996:	16 4a       	or	r10,r11
80002998:	10 9b       	mov	r11,r8
8000299a:	e6 1b 00 c0 	andh	r11,0xc0,COH
8000299e:	16 4a       	or	r10,r11
800029a0:	10 9b       	mov	r11,r8
800029a2:	e6 1b 00 30 	andh	r11,0x30,COH
800029a6:	16 4a       	or	r10,r11
800029a8:	10 9b       	mov	r11,r8
800029aa:	e6 1b 00 0c 	andh	r11,0xc,COH
800029ae:	16 4a       	or	r10,r11
800029b0:	10 9b       	mov	r11,r8
800029b2:	e6 1b 00 03 	andh	r11,0x3,COH
800029b6:	16 4a       	or	r10,r11
800029b8:	10 9b       	mov	r11,r8
800029ba:	e2 1b 60 00 	andl	r11,0x6000,COH
800029be:	16 4a       	or	r10,r11
800029c0:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
800029c4:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800029c8:	10 9b       	mov	r11,r8
800029ca:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029ce:	16 4a       	or	r10,r11
800029d0:	10 9b       	mov	r11,r8
800029d2:	e2 1b 03 00 	andl	r11,0x300,COH
800029d6:	16 4a       	or	r10,r11
800029d8:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029dc:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029e0:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029e4:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029e8:	10 9b       	mov	r11,r8
800029ea:	e2 1b 00 30 	andl	r11,0x30,COH
800029ee:	16 4a       	or	r10,r11
800029f0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029f4:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029f8:	a5 69       	lsl	r9,0x4
800029fa:	2f f9       	sub	r9,-1
800029fc:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a00:	5e fd       	retal	0

80002a02 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a02:	58 2b       	cp.w	r11,2
80002a04:	e0 88 00 03 	brls	80002a0a <tc_start+0x8>
80002a08:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002a0a:	a7 6b       	lsl	r11,0x6
80002a0c:	16 0c       	add	r12,r11
80002a0e:	30 58       	mov	r8,5
80002a10:	99 08       	st.w	r12[0x0],r8
80002a12:	5e fd       	retal	0

80002a14 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a14:	58 2b       	cp.w	r11,2
80002a16:	e0 88 00 03 	brls	80002a1c <tc_stop+0x8>
80002a1a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80002a1c:	a7 6b       	lsl	r11,0x6
80002a1e:	16 0c       	add	r12,r11
80002a20:	30 28       	mov	r8,2
80002a22:	99 08       	st.w	r12[0x0],r8
80002a24:	5e fd       	retal	0

80002a26 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a26:	58 2b       	cp.w	r11,2
80002a28:	e0 88 00 03 	brls	80002a2e <tc_read_sr+0x8>
80002a2c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a2e:	a7 6b       	lsl	r11,0x6
80002a30:	2e 0b       	sub	r11,-32
80002a32:	16 0c       	add	r12,r11
80002a34:	78 0c       	ld.w	r12,r12[0x0]
}
80002a36:	5e fc       	retal	r12

80002a38 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a38:	58 2b       	cp.w	r11,2
80002a3a:	e0 88 00 03 	brls	80002a40 <tc_write_rc+0x8>
80002a3e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a40:	f6 08 15 04 	lsl	r8,r11,0x4
80002a44:	2f f8       	sub	r8,-1
80002a46:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a4a:	e2 18 80 00 	andl	r8,0x8000,COH
80002a4e:	c0 c0       	breq	80002a66 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a50:	a7 6b       	lsl	r11,0x6
80002a52:	16 0c       	add	r12,r11
80002a54:	2e 4c       	sub	r12,-28
80002a56:	78 08       	ld.w	r8,r12[0x0]
80002a58:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a5c:	e0 18 00 00 	andl	r8,0x0
80002a60:	f3 e8 10 08 	or	r8,r9,r8
80002a64:	99 08       	st.w	r12[0x0],r8

  return value;
80002a66:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a6a:	5e fc       	retal	r12

80002a6c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a6c:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a70:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a74:	58 2b       	cp.w	r11,2
80002a76:	e0 88 00 04 	brls	80002a7e <tc_configure_interrupts+0x12>
80002a7a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a7e:	ee 19 00 01 	eorh	r9,0x1
80002a82:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a86:	74 08       	ld.w	r8,r10[0x0]
80002a88:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a8c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a90:	a7 6e       	lsl	lr,0x6
80002a92:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a96:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a9a:	0e 4e       	or	lr,r7
80002a9c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002aa0:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002aa4:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002aa8:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002aac:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002ab0:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002ab4:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002ab8:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002abc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002ac0:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002ac4:	f6 0e 15 06 	lsl	lr,r11,0x6
80002ac8:	f8 0e 00 0e 	add	lr,r12,lr
80002acc:	2d ce       	sub	lr,-36
80002ace:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002ad0:	58 09       	cp.w	r9,0
80002ad2:	c0 20       	breq	80002ad6 <tc_configure_interrupts+0x6a>
80002ad4:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002ad6:	74 08       	ld.w	r8,r10[0x0]
80002ad8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002adc:	e0 65 00 80 	mov	r5,128
80002ae0:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002ae4:	74 08       	ld.w	r8,r10[0x0]
80002ae6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002aea:	f9 b4 00 40 	moveq	r4,64
80002aee:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002af2:	74 08       	ld.w	r8,r10[0x0]
80002af4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002af8:	f9 b3 00 20 	moveq	r3,32
80002afc:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002b00:	74 08       	ld.w	r8,r10[0x0]
80002b02:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002b06:	f9 b2 00 10 	moveq	r2,16
80002b0a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002b0e:	74 08       	ld.w	r8,r10[0x0]
80002b10:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002b14:	f9 b6 00 08 	moveq	r6,8
80002b18:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002b1c:	74 08       	ld.w	r8,r10[0x0]
80002b1e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002b22:	f9 b7 00 04 	moveq	r7,4
80002b26:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002b2a:	74 08       	ld.w	r8,r10[0x0]
80002b2c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b30:	f9 be 00 02 	moveq	lr,2
80002b34:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b38:	74 08       	ld.w	r8,r10[0x0]
80002b3a:	ec 18 00 01 	eorl	r8,0x1
80002b3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b42:	eb e8 10 08 	or	r8,r5,r8
80002b46:	08 48       	or	r8,r4
80002b48:	06 48       	or	r8,r3
80002b4a:	04 48       	or	r8,r2
80002b4c:	0c 48       	or	r8,r6
80002b4e:	0e 48       	or	r8,r7
80002b50:	1c 48       	or	r8,lr
80002b52:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b56:	f8 0a 00 0a 	add	r10,r12,r10
80002b5a:	2d 8a       	sub	r10,-40
80002b5c:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b5e:	a7 6b       	lsl	r11,0x6
80002b60:	2e 0b       	sub	r11,-32
80002b62:	16 0c       	add	r12,r11
80002b64:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b66:	58 09       	cp.w	r9,0
80002b68:	c0 31       	brne	80002b6e <tc_configure_interrupts+0x102>
80002b6a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b6e:	d5 03       	csrf	0x10
80002b70:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b74 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b74:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b76:	f6 08 15 04 	lsl	r8,r11,0x4
80002b7a:	14 38       	cp.w	r8,r10
80002b7c:	f9 b8 08 10 	movls	r8,16
80002b80:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b84:	f0 0b 02 4b 	mul	r11,r8,r11
80002b88:	f6 09 16 01 	lsr	r9,r11,0x1
80002b8c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b90:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b94:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b98:	f2 cb 00 01 	sub	r11,r9,1
80002b9c:	e0 4b ff fe 	cp.w	r11,65534
80002ba0:	e0 88 00 03 	brls	80002ba6 <usart_set_async_baudrate+0x32>
80002ba4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002ba6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002ba8:	e8 6e 00 00 	mov	lr,524288
80002bac:	59 08       	cp.w	r8,16
80002bae:	fc 08 17 10 	movne	r8,lr
80002bb2:	f9 b8 00 00 	moveq	r8,0
80002bb6:	e4 1b ff f7 	andh	r11,0xfff7
80002bba:	e0 1b fe cf 	andl	r11,0xfecf
80002bbe:	16 48       	or	r8,r11
80002bc0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002bc2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002bc6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002bca:	99 89       	st.w	r12[0x20],r9
80002bcc:	d8 0a       	popm	pc,r12=0

80002bce <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002bce:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002bd0:	e2 18 00 02 	andl	r8,0x2,COH
80002bd4:	c0 31       	brne	80002bda <usart_write_char+0xc>
80002bd6:	30 2c       	mov	r12,2
80002bd8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bda:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bde:	99 7b       	st.w	r12[0x1c],r11
80002be0:	5e fd       	retal	0
80002be2:	d7 03       	nop

80002be4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002be4:	eb cd 40 e0 	pushm	r5-r7,lr
80002be8:	18 96       	mov	r6,r12
80002bea:	16 95       	mov	r5,r11
80002bec:	e0 67 27 0f 	mov	r7,9999
80002bf0:	c0 68       	rjmp	80002bfc <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bf2:	58 07       	cp.w	r7,0
80002bf4:	c0 31       	brne	80002bfa <usart_putchar+0x16>
80002bf6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bfa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bfc:	0a 9b       	mov	r11,r5
80002bfe:	0c 9c       	mov	r12,r6
80002c00:	f0 1f 00 03 	mcall	80002c0c <usart_putchar+0x28>
80002c04:	cf 71       	brne	80002bf2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002c06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2b ce       	sub	lr,-68

80002c10 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, uint8_t *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002c10:	78 58       	ld.w	r8,r12[0x14]
80002c12:	e2 18 00 e0 	andl	r8,0xe0,COH
80002c16:	c0 30       	breq	80002c1c <usart_read_char+0xc>
80002c18:	30 4c       	mov	r12,4
80002c1a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002c1c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002c1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002c22:	f9 bc 00 03 	moveq	r12,3
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002c26:	f9 f8 10 06 	ld.wne	r8,r12[0x18]
80002c2a:	f7 f8 1e 00 	st.bne	r11[0x0],r8
80002c2e:	f9 bc 01 00 	movne	r12,0
    return USART_SUCCESS;
  }
  else
    return USART_RX_EMPTY;
}
80002c32:	5e fc       	retal	r12

80002c34 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c34:	eb cd 40 c0 	pushm	r6-r7,lr
80002c38:	18 96       	mov	r6,r12
80002c3a:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c3c:	17 8b       	ld.ub	r11,r11[0x0]
80002c3e:	58 0b       	cp.w	r11,0
80002c40:	c0 80       	breq	80002c50 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c42:	2f f7       	sub	r7,-1
80002c44:	0c 9c       	mov	r12,r6
80002c46:	f0 1f 00 04 	mcall	80002c54 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c4a:	0f 8b       	ld.ub	r11,r7[0x0]
80002c4c:	58 0b       	cp.w	r11,0
80002c4e:	cf a1       	brne	80002c42 <usart_write_line+0xe>
80002c50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	2b e4       	sub	r4,-66

80002c58 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c58:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c5c:	e6 18 00 01 	andh	r8,0x1,COH
80002c60:	c0 71       	brne	80002c6e <usart_reset+0x16>
80002c62:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c64:	3f f8       	mov	r8,-1
80002c66:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c68:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c6a:	d5 03       	csrf	0x10
80002c6c:	c0 48       	rjmp	80002c74 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c6e:	3f f8       	mov	r8,-1
80002c70:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c72:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c74:	30 08       	mov	r8,0
80002c76:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c78:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c7a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c7c:	e8 68 61 0c 	mov	r8,549132
80002c80:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c82:	5e fc       	retal	r12

80002c84 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c84:	eb cd 40 e0 	pushm	r5-r7,lr
80002c88:	18 96       	mov	r6,r12
80002c8a:	16 97       	mov	r7,r11
80002c8c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c8e:	f0 1f 00 2f 	mcall	80002d48 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c92:	58 07       	cp.w	r7,0
80002c94:	c5 80       	breq	80002d44 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c96:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c98:	30 49       	mov	r9,4
80002c9a:	f2 08 18 00 	cp.b	r8,r9
80002c9e:	e0 88 00 53 	brls	80002d44 <usart_init_rs232+0xc0>
80002ca2:	30 99       	mov	r9,9
80002ca4:	f2 08 18 00 	cp.b	r8,r9
80002ca8:	e0 8b 00 4e 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002cac:	0f d9       	ld.ub	r9,r7[0x5]
80002cae:	30 78       	mov	r8,7
80002cb0:	f0 09 18 00 	cp.b	r9,r8
80002cb4:	e0 8b 00 48 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002cb8:	8e 39       	ld.sh	r9,r7[0x6]
80002cba:	e0 68 01 01 	mov	r8,257
80002cbe:	f0 09 19 00 	cp.h	r9,r8
80002cc2:	e0 8b 00 41 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002cc6:	ef 39 00 08 	ld.ub	r9,r7[8]
80002cca:	30 38       	mov	r8,3
80002ccc:	f0 09 18 00 	cp.b	r9,r8
80002cd0:	e0 8b 00 3a 	brhi	80002d44 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002cd4:	0a 9a       	mov	r10,r5
80002cd6:	6e 0b       	ld.w	r11,r7[0x0]
80002cd8:	0c 9c       	mov	r12,r6
80002cda:	f0 1f 00 1d 	mcall	80002d4c <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cde:	58 1c       	cp.w	r12,1
80002ce0:	c3 20       	breq	80002d44 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002ce2:	0f c8       	ld.ub	r8,r7[0x4]
80002ce4:	30 99       	mov	r9,9
80002ce6:	f2 08 18 00 	cp.b	r8,r9
80002cea:	c0 51       	brne	80002cf4 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cec:	6c 18       	ld.w	r8,r6[0x4]
80002cee:	b1 b8       	sbr	r8,0x11
80002cf0:	8d 18       	st.w	r6[0x4],r8
80002cf2:	c0 68       	rjmp	80002cfe <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002cf4:	6c 19       	ld.w	r9,r6[0x4]
80002cf6:	20 58       	sub	r8,5
80002cf8:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cfc:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cfe:	6c 19       	ld.w	r9,r6[0x4]
80002d00:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002d04:	0f d8       	ld.ub	r8,r7[0x5]
80002d06:	a9 78       	lsl	r8,0x9
80002d08:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002d0c:	12 48       	or	r8,r9
80002d0e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002d10:	8e 38       	ld.sh	r8,r7[0x6]
80002d12:	30 29       	mov	r9,2
80002d14:	f2 08 19 00 	cp.h	r8,r9
80002d18:	e0 88 00 09 	brls	80002d2a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002d1c:	6c 18       	ld.w	r8,r6[0x4]
80002d1e:	ad b8       	sbr	r8,0xd
80002d20:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002d22:	8e b8       	ld.uh	r8,r7[0x6]
80002d24:	20 28       	sub	r8,2
80002d26:	8d a8       	st.w	r6[0x28],r8
80002d28:	c0 68       	rjmp	80002d34 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002d2a:	6c 19       	ld.w	r9,r6[0x4]
80002d2c:	5c 78       	castu.h	r8
80002d2e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d32:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d34:	6c 18       	ld.w	r8,r6[0x4]
80002d36:	e0 18 ff f0 	andl	r8,0xfff0
80002d3a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d3c:	35 08       	mov	r8,80
80002d3e:	8d 08       	st.w	r6[0x0],r8
80002d40:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d44:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2c 58       	sub	r8,-59
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2b 74       	sub	r4,-73

80002d50 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d50:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d54:	fe c0 97 54 	sub	r0,pc,-26796

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d58:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d5c:	d5 53       	csrf	0x15
  cp      r0, r1
80002d5e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d60:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d64:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d66:	c0 72       	brcc	80002d74 <idata_load_loop_end>
  cp      r0, r1
80002d68:	fe c2 8a c8 	sub	r2,pc,-30008

80002d6c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d6c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d6e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d70:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d72:	cf d3       	brcs	80002d6c <idata_load_loop>

80002d74 <idata_load_loop_end>:
  mov     r2, 0
80002d74:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d78:	e0 61 08 20 	mov	r1,2080
  cp      r0, r1
  brlo    udata_clear_loop
80002d7c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d7e:	c0 62       	brcc	80002d8a <udata_clear_loop_end>
80002d80:	30 02       	mov	r2,0
80002d82:	30 03       	mov	r3,0

80002d84 <udata_clear_loop>:
80002d84:	a1 22       	st.d	r0++,r2
80002d86:	02 30       	cp.w	r0,r1
80002d88:	cf e3       	brcs	80002d84 <udata_clear_loop>

80002d8a <udata_clear_loop_end>:
80002d8a:	fe cf f5 3a 	sub	pc,pc,-2758
80002d8e:	d7 03       	nop

80002d90 <pal_trx_frame_read>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_read(uint8_t * data, uint8_t length)
{
80002d90:	eb cd 40 78 	pushm	r3-r6,lr
80002d94:	20 1d       	sub	sp,4
80002d96:	18 94       	mov	r4,r12
80002d98:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d9a:	e1 b3 00 00 	mfsr	r3,0x0
80002d9e:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002da0:	49 16       	lddpc	r6,80002de4 <pal_trx_frame_read+0x54>
80002da2:	0d 8b       	ld.ub	r11,r6[0x0]
80002da4:	fe 7c 40 00 	mov	r12,-49152
80002da8:	f0 1f 00 10 	mcall	80002de8 <pal_trx_frame_read+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FR;
80002dac:	fa cb ff fc 	sub	r11,sp,-4
80002db0:	32 08       	mov	r8,32
80002db2:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80002db4:	30 1a       	mov	r10,1
80002db6:	fe 7c 40 00 	mov	r12,-49152
80002dba:	f0 1f 00 0d 	mcall	80002dec <pal_trx_frame_read+0x5c>

	spi_read_packet(AT86RFX_SPI, data, length);
80002dbe:	0a 9a       	mov	r10,r5
80002dc0:	08 9b       	mov	r11,r4
80002dc2:	fe 7c 40 00 	mov	r12,-49152
80002dc6:	f0 1f 00 0b 	mcall	80002df0 <pal_trx_frame_read+0x60>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002dca:	0d 8b       	ld.ub	r11,r6[0x0]
80002dcc:	fe 7c 40 00 	mov	r12,-49152
80002dd0:	f0 1f 00 09 	mcall	80002df4 <pal_trx_frame_read+0x64>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002dd4:	e6 13 00 01 	andh	r3,0x1,COH
80002dd8:	c0 21       	brne	80002ddc <pal_trx_frame_read+0x4c>
80002dda:	d5 03       	csrf	0x10
}
80002ddc:	2f fd       	sub	sp,-4
80002dde:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002de2:	00 00       	add	r0,r0
80002de4:	00 00       	add	r0,r0
80002de6:	00 08       	add	r8,r0
80002de8:	80 00       	ld.sh	r0,r0[0x0]
80002dea:	28 34       	sub	r4,-125
80002dec:	80 00       	ld.sh	r0,r0[0x0]
80002dee:	2f 72       	sub	r2,-9
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2f 22       	sub	r2,-14
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	28 80       	sub	r0,-120

80002df8 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002df8:	eb cd 40 c0 	pushm	r6-r7,lr
80002dfc:	20 2d       	sub	sp,8
80002dfe:	ba cc       	st.b	sp[0x4],r12
80002e00:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e02:	e1 b6 00 00 	mfsr	r6,0x0
80002e06:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002e08:	1b c8       	ld.ub	r8,sp[0x4]
80002e0a:	ea 18 ff ff 	orh	r8,0xffff
80002e0e:	e8 18 ff c0 	orl	r8,0xffc0
80002e12:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e14:	49 07       	lddpc	r7,80002e54 <pal_trx_reg_write+0x5c>
80002e16:	0f 8b       	ld.ub	r11,r7[0x0]
80002e18:	fe 7c 40 00 	mov	r12,-49152
80002e1c:	f0 1f 00 0f 	mcall	80002e58 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002e20:	30 1a       	mov	r10,1
80002e22:	fa cb ff fc 	sub	r11,sp,-4
80002e26:	fe 7c 40 00 	mov	r12,-49152
80002e2a:	f0 1f 00 0d 	mcall	80002e5c <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002e2e:	30 1a       	mov	r10,1
80002e30:	1a 9b       	mov	r11,sp
80002e32:	fe 7c 40 00 	mov	r12,-49152
80002e36:	f0 1f 00 0a 	mcall	80002e5c <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e3a:	0f 8b       	ld.ub	r11,r7[0x0]
80002e3c:	fe 7c 40 00 	mov	r12,-49152
80002e40:	f0 1f 00 08 	mcall	80002e60 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e44:	e6 16 00 01 	andh	r6,0x1,COH
80002e48:	c0 21       	brne	80002e4c <pal_trx_reg_write+0x54>
80002e4a:	d5 03       	csrf	0x10
}
80002e4c:	2f ed       	sub	sp,-8
80002e4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e52:	00 00       	add	r0,r0
80002e54:	00 00       	add	r0,r0
80002e56:	00 08       	add	r8,r0
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	28 34       	sub	r4,-125
80002e5c:	80 00       	ld.sh	r0,r0[0x0]
80002e5e:	2f 72       	sub	r2,-9
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	28 80       	sub	r0,-120

80002e64 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002e64:	eb cd 40 c0 	pushm	r6-r7,lr
80002e68:	20 2d       	sub	sp,8
80002e6a:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002e6c:	30 08       	mov	r8,0
80002e6e:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e70:	e1 b6 00 00 	mfsr	r6,0x0
80002e74:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002e76:	1b 88       	ld.ub	r8,sp[0x0]
80002e78:	ea 18 ff ff 	orh	r8,0xffff
80002e7c:	e8 18 ff 80 	orl	r8,0xff80
80002e80:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e82:	49 17       	lddpc	r7,80002ec4 <pal_trx_reg_read+0x60>
80002e84:	0f 8b       	ld.ub	r11,r7[0x0]
80002e86:	fe 7c 40 00 	mov	r12,-49152
80002e8a:	f0 1f 00 10 	mcall	80002ec8 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002e8e:	30 1a       	mov	r10,1
80002e90:	1a 9b       	mov	r11,sp
80002e92:	fe 7c 40 00 	mov	r12,-49152
80002e96:	f0 1f 00 0e 	mcall	80002ecc <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002e9a:	30 1a       	mov	r10,1
80002e9c:	fa cb ff f9 	sub	r11,sp,-7
80002ea0:	fe 7c 40 00 	mov	r12,-49152
80002ea4:	f0 1f 00 0b 	mcall	80002ed0 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002ea8:	0f 8b       	ld.ub	r11,r7[0x0]
80002eaa:	fe 7c 40 00 	mov	r12,-49152
80002eae:	f0 1f 00 0a 	mcall	80002ed4 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002eb2:	e6 16 00 01 	andh	r6,0x1,COH
80002eb6:	c0 21       	brne	80002eba <pal_trx_reg_read+0x56>
80002eb8:	d5 03       	csrf	0x10

	return register_value;
}
80002eba:	1b fc       	ld.ub	r12,sp[0x7]
80002ebc:	2f ed       	sub	sp,-8
80002ebe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ec2:	00 00       	add	r0,r0
80002ec4:	00 00       	add	r0,r0
80002ec6:	00 08       	add	r8,r0
80002ec8:	80 00       	ld.sh	r0,r0[0x0]
80002eca:	28 34       	sub	r4,-125
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	2f 72       	sub	r2,-9
80002ed0:	80 00       	ld.sh	r0,r0[0x0]
80002ed2:	2f 22       	sub	r2,-14
80002ed4:	80 00       	ld.sh	r0,r0[0x0]
80002ed6:	28 80       	sub	r0,-120

80002ed8 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ed8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002edc:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ede:	e6 18 00 01 	andh	r8,0x1,COH
80002ee2:	c0 21       	brne	80002ee6 <sysclk_init+0xe>
      cpu_irq_enable();
80002ee4:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002ee6:	5e fc       	retal	r12

80002ee8 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002ee8:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002eea:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002eee:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002ef0:	a3 6c       	lsl	r12,0x2
80002ef2:	fe 7a 14 20 	mov	r10,-60384
80002ef6:	f8 0a 00 08 	add	r8,r12,r10
80002efa:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002efc:	30 1e       	mov	lr,1
80002efe:	fc 0b 09 4b 	lsl	r11,lr,r11
80002f02:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002f04:	32 0a       	mov	r10,32
80002f06:	ea 1a aa 00 	orh	r10,0xaa00
80002f0a:	14 0c       	add	r12,r10
80002f0c:	fe 7a 14 00 	mov	r10,-60416
80002f10:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002f14:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f16:	12 98       	mov	r8,r9
80002f18:	e6 18 00 01 	andh	r8,0x1,COH
80002f1c:	c0 21       	brne	80002f20 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002f1e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002f20:	d8 02       	popm	pc

80002f22 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002f22:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002f26:	58 0a       	cp.w	r10,0
80002f28:	c0 61       	brne	80002f34 <spi_read_packet+0x12>
80002f2a:	c2 28       	rjmp	80002f6e <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002f2c:	58 08       	cp.w	r8,0
80002f2e:	c1 d0       	breq	80002f68 <spi_read_packet+0x46>
80002f30:	20 18       	sub	r8,1
80002f32:	c0 68       	rjmp	80002f3e <spi_read_packet+0x1c>
80002f34:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f38:	e0 67 00 ff 	mov	r7,255
80002f3c:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002f3e:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002f40:	e2 19 00 02 	andl	r9,0x2,COH
80002f44:	cf 40       	breq	80002f2c <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f46:	99 37       	st.w	r12[0xc],r7
80002f48:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002f4a:	c0 48       	rjmp	80002f52 <spi_read_packet+0x30>
			if (!timeout--) {
80002f4c:	58 08       	cp.w	r8,0
80002f4e:	c0 d0       	breq	80002f68 <spi_read_packet+0x46>
80002f50:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002f52:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002f54:	e2 19 02 01 	andl	r9,0x201,COH
80002f58:	e0 49 02 01 	cp.w	r9,513
80002f5c:	cf 81       	brne	80002f4c <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002f5e:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002f60:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002f62:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002f64:	ce c1       	brne	80002f3c <spi_read_packet+0x1a>
80002f66:	c0 48       	rjmp	80002f6e <spi_read_packet+0x4c>
80002f68:	3f dc       	mov	r12,-3
80002f6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f6e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002f72 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002f72:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f74:	58 0a       	cp.w	r10,0
80002f76:	c0 81       	brne	80002f86 <spi_write_packet+0x14>
80002f78:	c1 28       	rjmp	80002f9c <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002f7a:	58 08       	cp.w	r8,0
80002f7c:	c0 31       	brne	80002f82 <spi_write_packet+0x10>
80002f7e:	3f dc       	mov	r12,-3
80002f80:	d8 02       	popm	pc
80002f82:	20 18       	sub	r8,1
80002f84:	c0 48       	rjmp	80002f8c <spi_write_packet+0x1a>
80002f86:	e0 6e 3a 98 	mov	lr,15000
80002f8a:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002f8c:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002f8e:	e2 19 00 02 	andl	r9,0x2,COH
80002f92:	cf 40       	breq	80002f7a <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f94:	17 38       	ld.ub	r8,r11++
80002f96:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002f98:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f9a:	cf 81       	brne	80002f8a <spi_write_packet+0x18>
80002f9c:	d8 0a       	popm	pc,r12=0
80002f9e:	d7 03       	nop
	...

80002fac <getStateAT86RF212>:
{
	pal_trx_reg_write(RG_TRX_STATE, state);
	DELAY_US(time);
}
uint8_t getStateAT86RF212(void)
{
80002fac:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80002fae:	30 1c       	mov	r12,1
80002fb0:	f0 1f 00 03 	mcall	80002fbc <getStateAT86RF212+0x10>
}
80002fb4:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002fb8:	d8 02       	popm	pc
80002fba:	00 00       	add	r0,r0
80002fbc:	80 00       	ld.sh	r0,r0[0x0]
80002fbe:	2e 64       	sub	r4,-26

80002fc0 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002fc0:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002fc2:	30 0b       	mov	r11,0
80002fc4:	fe 7c 5c 00 	mov	r12,-41984
80002fc8:	f0 1f 00 17 	mcall	80003024 <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002fcc:	49 78       	lddpc	r8,80003028 <tc_irq+0x68>
80002fce:	70 09       	ld.w	r9,r8[0x0]
80002fd0:	2f f9       	sub	r9,-1
80002fd2:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002fd4:	70 08       	ld.w	r8,r8[0x0]
80002fd6:	59 38       	cp.w	r8,19
80002fd8:	e0 8b 00 0c 	brhi	80002ff0 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002fdc:	32 9c       	mov	r12,41
80002fde:	f0 1f 00 14 	mcall	8000302c <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002fe2:	30 4c       	mov	r12,4
80002fe4:	f0 1f 00 12 	mcall	8000302c <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002fe8:	30 bc       	mov	r12,11
80002fea:	f0 1f 00 11 	mcall	8000302c <tc_irq+0x6c>
		return;
80002fee:	c1 98       	rjmp	80003020 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002ff0:	48 e8       	lddpc	r8,80003028 <tc_irq+0x68>
80002ff2:	70 08       	ld.w	r8,r8[0x0]
80002ff4:	59 58       	cp.w	r8,21
80002ff6:	c0 41       	brne	80002ffe <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002ff8:	32 9c       	mov	r12,41
80002ffa:	f0 1f 00 0d 	mcall	8000302c <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002ffe:	48 b8       	lddpc	r8,80003028 <tc_irq+0x68>
80003000:	70 08       	ld.w	r8,r8[0x0]
80003002:	59 68       	cp.w	r8,22
80003004:	c0 41       	brne	8000300c <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80003006:	30 4c       	mov	r12,4
80003008:	f0 1f 00 09 	mcall	8000302c <tc_irq+0x6c>
	
	if (tc_tick == 23)
8000300c:	48 78       	lddpc	r8,80003028 <tc_irq+0x68>
8000300e:	70 08       	ld.w	r8,r8[0x0]
80003010:	59 78       	cp.w	r8,23
80003012:	c0 71       	brne	80003020 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80003014:	30 bc       	mov	r12,11
80003016:	f0 1f 00 06 	mcall	8000302c <tc_irq+0x6c>
		tc_tick = 1;
8000301a:	30 19       	mov	r9,1
8000301c:	48 38       	lddpc	r8,80003028 <tc_irq+0x68>
8000301e:	91 09       	st.w	r8[0x0],r9
	}
}
80003020:	d4 02       	popm	lr
80003022:	d6 03       	rete
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	2a 26       	sub	r6,-94
80003028:	00 00       	add	r0,r0
8000302a:	00 1c       	sub	r12,r0
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	26 a0       	sub	r0,106

80003030 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80003030:	d4 01       	pushm	lr
80003032:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80003034:	30 0b       	mov	r11,0
80003036:	49 b8       	lddpc	r8,800030a0 <usart_int_handler_RS232+0x70>
80003038:	70 0c       	ld.w	r12,r8[0x0]
8000303a:	f0 1f 00 1b 	mcall	800030a4 <usart_int_handler_RS232+0x74>
	
	uint8_t c=0;
8000303e:	fa cb ff fc 	sub	r11,sp,-4
80003042:	30 08       	mov	r8,0
80003044:	16 f8       	st.b	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80003046:	fe 7c 38 00 	mov	r12,-51200
8000304a:	f0 1f 00 18 	mcall	800030a8 <usart_int_handler_RS232+0x78>
8000304e:	c2 61       	brne	8000309a <usart_int_handler_RS232+0x6a>
		return;
	
	cola_PC[cola_PC_nw] = c;
80003050:	49 78       	lddpc	r8,800030ac <usart_int_handler_RS232+0x7c>
80003052:	11 88       	ld.ub	r8,r8[0x0]
80003054:	1b b9       	ld.ub	r9,sp[0x3]
80003056:	49 7a       	lddpc	r10,800030b0 <usart_int_handler_RS232+0x80>
80003058:	f4 08 0b 09 	st.b	r10[r8],r9
	
	if (cola_PC[cola_PC_nw] == 0x01)
8000305c:	30 1a       	mov	r10,1
8000305e:	f4 09 18 00 	cp.b	r9,r10
80003062:	c0 c1       	brne	8000307a <usart_int_handler_RS232+0x4a>
	{	
		if (!configuracion){
80003064:	49 49       	lddpc	r9,800030b4 <usart_int_handler_RS232+0x84>
80003066:	13 8a       	ld.ub	r10,r9[0x0]
80003068:	30 09       	mov	r9,0
8000306a:	f2 0a 18 00 	cp.b	r10,r9
8000306e:	c0 31       	brne	80003074 <usart_int_handler_RS232+0x44>
			pConfiguracion = cola_PC_nw;
80003070:	49 29       	lddpc	r9,800030b8 <usart_int_handler_RS232+0x88>
80003072:	b2 88       	st.b	r9[0x0],r8
		}
		configuracion = true;
80003074:	30 1a       	mov	r10,1
80003076:	49 09       	lddpc	r9,800030b4 <usart_int_handler_RS232+0x84>
80003078:	b2 8a       	st.b	r9[0x0],r10
		
	}
	cola_PC_nw++;
8000307a:	2f f8       	sub	r8,-1
8000307c:	48 c9       	lddpc	r9,800030ac <usart_int_handler_RS232+0x7c>
8000307e:	b2 88       	st.b	r9[0x0],r8
	
	if (cola_PC_nw >= tamano_cola)
80003080:	3c 79       	mov	r9,-57
80003082:	f2 08 18 00 	cp.b	r8,r9
80003086:	e0 88 00 05 	brls	80003090 <usart_int_handler_RS232+0x60>
	cola_PC_nw = 0;
8000308a:	30 09       	mov	r9,0
8000308c:	48 88       	lddpc	r8,800030ac <usart_int_handler_RS232+0x7c>
8000308e:	b0 89       	st.b	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003090:	30 0b       	mov	r11,0
80003092:	48 48       	lddpc	r8,800030a0 <usart_int_handler_RS232+0x70>
80003094:	70 0c       	ld.w	r12,r8[0x0]
80003096:	f0 1f 00 0a 	mcall	800030bc <usart_int_handler_RS232+0x8c>
	return;

	
}
8000309a:	2f fd       	sub	sp,-4
8000309c:	d4 02       	popm	lr
8000309e:	d6 03       	rete
800030a0:	00 00       	add	r0,r0
800030a2:	00 18       	sub	r8,r0
800030a4:	80 00       	ld.sh	r0,r0[0x0]
800030a6:	2a 14       	sub	r4,-95
800030a8:	80 00       	ld.sh	r0,r0[0x0]
800030aa:	2c 10       	sub	r0,-63
800030ac:	00 00       	add	r0,r0
800030ae:	06 37       	cp.w	r7,r3
800030b0:	00 00       	add	r0,r0
800030b2:	07 4c       	ld.w	r12,--r3
800030b4:	00 00       	add	r0,r0
800030b6:	06 34       	cp.w	r4,r3
800030b8:	00 00       	add	r0,r0
800030ba:	06 38       	cp.w	r8,r3
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	2a 02       	sub	r2,-96

800030c0 <promiscuous_mode>:
		pal_trx_frame_write(RG_TRX_STATE,CMD_RX_ON);
	}
	
}
void promiscuous_mode()
{
800030c0:	eb cd 40 e0 	pushm	r5-r7,lr
	
	for (address=0x20; address<0x2C; address++)
800030c4:	32 09       	mov	r9,32
800030c6:	48 f8       	lddpc	r8,80003100 <promiscuous_mode+0x40>
800030c8:	b0 89       	st.b	r8[0x0],r9
800030ca:	32 0c       	mov	r12,32
	{
		pal_trx_reg_write(address, 0x00);
800030cc:	30 05       	mov	r5,0
	
}
void promiscuous_mode()
{
	
	for (address=0x20; address<0x2C; address++)
800030ce:	10 97       	mov	r7,r8
800030d0:	32 b6       	mov	r6,43
	{
		pal_trx_reg_write(address, 0x00);
800030d2:	0a 9b       	mov	r11,r5
800030d4:	f0 1f 00 0c 	mcall	80003104 <promiscuous_mode+0x44>
	
}
void promiscuous_mode()
{
	
	for (address=0x20; address<0x2C; address++)
800030d8:	0f 8c       	ld.ub	r12,r7[0x0]
800030da:	2f fc       	sub	r12,-1
800030dc:	5c 5c       	castu.b	r12
800030de:	ae 8c       	st.b	r7[0x0],r12
800030e0:	ec 0c 18 00 	cp.b	r12,r6
800030e4:	fe 98 ff f7 	brls	800030d2 <promiscuous_mode+0x12>
	{
		pal_trx_reg_write(address, 0x00);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
800030e8:	30 2b       	mov	r11,2
800030ea:	31 7c       	mov	r12,23
800030ec:	f0 1f 00 06 	mcall	80003104 <promiscuous_mode+0x44>
//	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_CSMA_SEED_1, 0xD2); // AACK_DIS_ACK = 1 && AACK_FVN_MODE = 3
800030f0:	e0 6b 00 d2 	mov	r11,210
800030f4:	32 ec       	mov	r12,46
800030f6:	f0 1f 00 04 	mcall	80003104 <promiscuous_mode+0x44>
//	PAL_WAIT_1_US();
	
}
800030fa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800030fe:	00 00       	add	r0,r0
80003100:	00 00       	add	r0,r0
80003102:	07 40       	ld.w	r0,--r3
80003104:	80 00       	ld.sh	r0,r0[0x0]
80003106:	2d f8       	sub	r8,-33

80003108 <RESET>:

void RESET()
{
80003108:	d4 01       	pushm	lr
	RST_LOW();
8000310a:	32 8c       	mov	r12,40
8000310c:	f0 1f 00 19 	mcall	80003170 <RESET+0x68>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003110:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003114:	f0 ca ff b8 	sub	r10,r8,-72
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003118:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000311c:	14 38       	cp.w	r8,r10
8000311e:	e0 88 00 08 	brls	8000312e <RESET+0x26>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003122:	12 38       	cp.w	r8,r9
80003124:	fe 98 ff fa 	brls	80003118 <RESET+0x10>
80003128:	12 3a       	cp.w	r10,r9
8000312a:	c1 93       	brcs	8000315c <RESET+0x54>
8000312c:	cf 6b       	rjmp	80003118 <RESET+0x10>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000312e:	12 38       	cp.w	r8,r9
80003130:	e0 8b 00 16 	brhi	8000315c <RESET+0x54>
80003134:	12 3a       	cp.w	r10,r9
80003136:	c1 33       	brcs	8000315c <RESET+0x54>
80003138:	cf 0b       	rjmp	80003118 <RESET+0x10>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000313a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000313e:	14 38       	cp.w	r8,r10
80003140:	e0 88 00 08 	brls	80003150 <RESET+0x48>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003144:	12 38       	cp.w	r8,r9
80003146:	fe 98 ff fa 	brls	8000313a <RESET+0x32>
8000314a:	12 3a       	cp.w	r10,r9
8000314c:	c1 03       	brcs	8000316c <RESET+0x64>
8000314e:	cf 6b       	rjmp	8000313a <RESET+0x32>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003150:	12 38       	cp.w	r8,r9
80003152:	e0 8b 00 0d 	brhi	8000316c <RESET+0x64>
80003156:	12 3a       	cp.w	r10,r9
80003158:	c0 a3       	brcs	8000316c <RESET+0x64>
8000315a:	cf 0b       	rjmp	8000313a <RESET+0x32>
	DELAY_US(RST_PULSE_WIDTH_NS);
	RST_HIGH();
8000315c:	32 8c       	mov	r12,40
8000315e:	f0 1f 00 06 	mcall	80003174 <RESET+0x6c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003162:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003166:	f0 ca ff 8d 	sub	r10,r8,-115
8000316a:	ce 8b       	rjmp	8000313a <RESET+0x32>
8000316c:	d8 02       	popm	pc
8000316e:	00 00       	add	r0,r0
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	26 8a       	sub	r10,104
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	26 74       	sub	r4,103

80003178 <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
80003178:	eb cd 40 80 	pushm	r7,lr
8000317c:	20 6d       	sub	sp,24
8000317e:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80003180:	30 08       	mov	r8,0
80003182:	ba 98       	st.b	sp[0x1],r8
80003184:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
80003186:	34 89       	mov	r9,72
80003188:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
8000318a:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
8000318c:	30 29       	mov	r9,2
8000318e:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
80003190:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
80003194:	30 18       	mov	r8,1
80003196:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
8000319a:	fa cb ff fc 	sub	r11,sp,-4
8000319e:	fe 7c 44 00 	mov	r12,-48128
800031a2:	f0 1f 00 39 	mcall	80003284 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
800031a6:	c6 61       	brne	80003272 <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
800031a8:	1b 89       	ld.ub	r9,sp[0x0]
800031aa:	1b 98       	ld.ub	r8,sp[0x1]
800031ac:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800031b0:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
800031b2:	30 09       	mov	r9,0
800031b4:	f2 08 19 00 	cp.h	r8,r9
800031b8:	c0 35       	brlt	800031be <leer_temp+0x46>
800031ba:	30 1b       	mov	r11,1
800031bc:	c0 58       	rjmp	800031c6 <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
800031be:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800031c2:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
800031c6:	4b 19       	lddpc	r9,80003288 <leer_temp+0x110>
800031c8:	13 89       	ld.ub	r9,r9[0x0]
800031ca:	30 1a       	mov	r10,1
800031cc:	f4 09 18 00 	cp.b	r9,r10
800031d0:	c1 c0       	breq	80003208 <leer_temp+0x90>
800031d2:	58 09       	cp.w	r9,0
800031d4:	c0 b0       	breq	800031ea <leer_temp+0x72>
800031d6:	30 2a       	mov	r10,2
800031d8:	f4 09 18 00 	cp.b	r9,r10
800031dc:	c2 50       	breq	80003226 <leer_temp+0xae>
800031de:	30 3a       	mov	r10,3
800031e0:	f4 09 18 00 	cp.b	r9,r10
800031e4:	c3 00       	breq	80003244 <leer_temp+0xcc>
800031e6:	30 0c       	mov	r12,0
800031e8:	c3 c8       	rjmp	80003260 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
800031ea:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
800031ee:	5c 6b       	casts.b	r11
800031f0:	f0 0b 02 4c 	mul	r12,r8,r11
800031f4:	f0 1f 00 26 	mcall	8000328c <leer_temp+0x114>
800031f8:	30 08       	mov	r8,0
800031fa:	fc 19 3f e0 	movh	r9,0x3fe0
800031fe:	f0 1f 00 25 	mcall	80003290 <leer_temp+0x118>
80003202:	f0 1f 00 25 	mcall	80003294 <leer_temp+0x11c>
			break;
80003206:	c2 d8       	rjmp	80003260 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
80003208:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
8000320c:	5c 6b       	casts.b	r11
8000320e:	f0 0b 02 4c 	mul	r12,r8,r11
80003212:	f0 1f 00 1f 	mcall	8000328c <leer_temp+0x114>
80003216:	30 08       	mov	r8,0
80003218:	fc 19 3f d0 	movh	r9,0x3fd0
8000321c:	f0 1f 00 1d 	mcall	80003290 <leer_temp+0x118>
80003220:	f0 1f 00 1d 	mcall	80003294 <leer_temp+0x11c>
			break;
80003224:	c1 e8       	rjmp	80003260 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
80003226:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
8000322a:	5c 6b       	casts.b	r11
8000322c:	f0 0b 02 4c 	mul	r12,r8,r11
80003230:	f0 1f 00 17 	mcall	8000328c <leer_temp+0x114>
80003234:	30 08       	mov	r8,0
80003236:	fc 19 3f c0 	movh	r9,0x3fc0
8000323a:	f0 1f 00 16 	mcall	80003290 <leer_temp+0x118>
8000323e:	f0 1f 00 16 	mcall	80003294 <leer_temp+0x11c>
			break;
80003242:	c0 f8       	rjmp	80003260 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
80003244:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
80003248:	5c 6b       	casts.b	r11
8000324a:	f0 0b 02 4c 	mul	r12,r8,r11
8000324e:	f0 1f 00 10 	mcall	8000328c <leer_temp+0x114>
80003252:	30 08       	mov	r8,0
80003254:	fc 19 3f b0 	movh	r9,0x3fb0
80003258:	f0 1f 00 0e 	mcall	80003290 <leer_temp+0x118>
8000325c:	f0 1f 00 0e 	mcall	80003294 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
80003260:	f0 1f 00 0e 	mcall	80003298 <leer_temp+0x120>
80003264:	bb 2b       	st.d	--sp,r10
80003266:	48 eb       	lddpc	r11,8000329c <leer_temp+0x124>
80003268:	0e 9c       	mov	r12,r7
8000326a:	f0 1f 00 0e 	mcall	800032a0 <leer_temp+0x128>
8000326e:	2f ed       	sub	sp,-8
80003270:	c0 68       	rjmp	8000327c <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
80003272:	30 2a       	mov	r10,2
80003274:	48 cb       	lddpc	r11,800032a4 <leer_temp+0x12c>
80003276:	0e 9c       	mov	r12,r7
80003278:	f0 1f 00 0c 	mcall	800032a8 <leer_temp+0x130>
}
8000327c:	2f ad       	sub	sp,-24
8000327e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003282:	00 00       	add	r0,r0
80003284:	80 00       	ld.sh	r0,r0[0x0]
80003286:	22 30       	sub	r0,35
80003288:	00 00       	add	r0,r0
8000328a:	00 26       	rsub	r6,r0
8000328c:	80 00       	ld.sh	r0,r0[0x0]
8000328e:	3c 74       	mov	r4,-57
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	3a 98       	mov	r8,-87
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	3d b4       	mov	r4,-37
80003298:	80 00       	ld.sh	r0,r0[0x0]
8000329a:	3d 54       	mov	r4,-43
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	99 4c       	st.w	r12[0x10],r12
800032a0:	80 00       	ld.sh	r0,r0[0x0]
800032a2:	41 f8       	lddsp	r8,sp[0x7c]
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	99 54       	st.w	r12[0x14],r4
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	40 a2       	lddsp	r2,sp[0x28]

800032ac <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800032ac:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800032ae:	18 9b       	mov	r11,r12
800032b0:	30 2c       	mov	r12,2
800032b2:	f0 1f 00 02 	mcall	800032b8 <sysclk_enable_pba_module+0xc>
}
800032b6:	d8 02       	popm	pc
800032b8:	80 00       	ld.sh	r0,r0[0x0]
800032ba:	2e e8       	sub	r8,-18

800032bc <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800032bc:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800032be:	30 bc       	mov	r12,11
800032c0:	f0 1f 00 05 	mcall	800032d4 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
800032c4:	e0 7a c1 38 	mov	r10,115000
800032c8:	48 4b       	lddpc	r11,800032d8 <rs_232_init_usart+0x1c>
800032ca:	fe 7c 38 00 	mov	r12,-51200
800032ce:	f0 1f 00 04 	mcall	800032dc <rs_232_init_usart+0x20>
	return estado_usart2;
}
800032d2:	d8 02       	popm	pc
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	32 ac       	mov	r12,42
800032d8:	00 00       	add	r0,r0
800032da:	00 0c       	add	r12,r0
800032dc:	80 00       	ld.sh	r0,r0[0x0]
800032de:	2c 84       	sub	r4,-56

800032e0 <rs_232_init_pins>:
	//

}

void rs_232_init_pins(void)
{
800032e0:	d4 01       	pushm	lr
800032e2:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
800032e4:	48 88       	lddpc	r8,80003304 <rs_232_init_pins+0x24>
800032e6:	1a 9c       	mov	r12,sp
800032e8:	70 09       	ld.w	r9,r8[0x0]
800032ea:	50 09       	stdsp	sp[0x0],r9
800032ec:	70 19       	ld.w	r9,r8[0x4]
800032ee:	50 19       	stdsp	sp[0x4],r9
800032f0:	70 29       	ld.w	r9,r8[0x8]
800032f2:	50 29       	stdsp	sp[0x8],r9
800032f4:	70 38       	ld.w	r8,r8[0xc]
800032f6:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
800032f8:	30 2b       	mov	r11,2
800032fa:	f0 1f 00 04 	mcall	80003308 <rs_232_init_pins+0x28>
}
800032fe:	2f cd       	sub	sp,-16
80003300:	d8 02       	popm	pc
80003302:	00 00       	add	r0,r0
80003304:	80 00       	ld.sh	r0,r0[0x0]
80003306:	9d 00       	st.w	lr[0x0],r0
80003308:	80 00       	ld.sh	r0,r0[0x0]
8000330a:	25 8c       	sub	r12,88

8000330c <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
8000330c:	d4 01       	pushm	lr
8000330e:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003310:	48 88       	lddpc	r8,80003330 <init_i2c_pins+0x24>
80003312:	1a 9c       	mov	r12,sp
80003314:	70 09       	ld.w	r9,r8[0x0]
80003316:	50 09       	stdsp	sp[0x0],r9
80003318:	70 19       	ld.w	r9,r8[0x4]
8000331a:	50 19       	stdsp	sp[0x4],r9
8000331c:	70 29       	ld.w	r9,r8[0x8]
8000331e:	50 29       	stdsp	sp[0x8],r9
80003320:	70 38       	ld.w	r8,r8[0xc]
80003322:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003324:	30 2b       	mov	r11,2
80003326:	f0 1f 00 04 	mcall	80003334 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000332a:	2f cd       	sub	sp,-16
8000332c:	d8 02       	popm	pc
8000332e:	00 00       	add	r0,r0
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	9c f0       	ld.uh	r0,lr[0xe]
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	25 8c       	sub	r12,88

80003338 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
80003338:	d4 01       	pushm	lr
8000333a:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
8000333c:	48 d8       	lddpc	r8,80003370 <spi_init_pins+0x38>
8000333e:	1a 9c       	mov	r12,sp
80003340:	70 09       	ld.w	r9,r8[0x0]
80003342:	50 09       	stdsp	sp[0x0],r9
80003344:	70 19       	ld.w	r9,r8[0x4]
80003346:	50 19       	stdsp	sp[0x4],r9
80003348:	70 29       	ld.w	r9,r8[0x8]
8000334a:	50 29       	stdsp	sp[0x8],r9
8000334c:	70 39       	ld.w	r9,r8[0xc]
8000334e:	50 39       	stdsp	sp[0xc],r9
80003350:	fa c9 ff f0 	sub	r9,sp,-16
80003354:	2f 08       	sub	r8,-16
80003356:	70 0a       	ld.w	r10,r8[0x0]
80003358:	93 0a       	st.w	r9[0x0],r10
8000335a:	70 1a       	ld.w	r10,r8[0x4]
8000335c:	93 1a       	st.w	r9[0x4],r10
8000335e:	70 2a       	ld.w	r10,r8[0x8]
80003360:	93 2a       	st.w	r9[0x8],r10
80003362:	70 38       	ld.w	r8,r8[0xc]
80003364:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
80003366:	30 4b       	mov	r11,4
80003368:	f0 1f 00 03 	mcall	80003374 <spi_init_pins+0x3c>
}
8000336c:	2f 8d       	sub	sp,-32
8000336e:	d8 02       	popm	pc
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	99 18       	st.w	r12[0x4],r8
80003374:	80 00       	ld.sh	r0,r0[0x0]
80003376:	25 8c       	sub	r12,88

80003378 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
80003378:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
8000337a:	30 5b       	mov	r11,5
8000337c:	30 4c       	mov	r12,4
8000337e:	f0 1f 00 06 	mcall	80003394 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
80003382:	30 5b       	mov	r11,5
80003384:	30 bc       	mov	r12,11
80003386:	f0 1f 00 04 	mcall	80003394 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
8000338a:	30 5b       	mov	r11,5
8000338c:	32 9c       	mov	r12,41
8000338e:	f0 1f 00 02 	mcall	80003394 <led_init_pins+0x1c>
}
80003392:	d8 02       	popm	pc
80003394:	80 00       	ld.sh	r0,r0[0x0]
80003396:	25 bc       	sub	r12,91

80003398 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
80003398:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
8000339a:	f0 1f 00 08 	mcall	800033b8 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
8000339e:	30 4b       	mov	r11,4
800033a0:	30 dc       	mov	r12,13
800033a2:	f0 1f 00 07 	mcall	800033bc <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800033a6:	30 6b       	mov	r11,6
800033a8:	30 dc       	mov	r12,13
800033aa:	f0 1f 00 06 	mcall	800033c0 <init_rf_pins+0x28>
	//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
800033ae:	30 dc       	mov	r12,13
800033b0:	f0 1f 00 05 	mcall	800033c4 <init_rf_pins+0x2c>

	// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	//

}
800033b4:	d8 02       	popm	pc
800033b6:	00 00       	add	r0,r0
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	33 38       	mov	r8,51
800033bc:	80 00       	ld.sh	r0,r0[0x0]
800033be:	25 bc       	sub	r12,91
800033c0:	80 00       	ld.sh	r0,r0[0x0]
800033c2:	24 f8       	sub	r8,79
800033c4:	80 00       	ld.sh	r0,r0[0x0]
800033c6:	26 b6       	sub	r6,107

800033c8 <escribir_linea_pc>:
// 		return false; //el LRC del paquete y el calculado no coinciden
// 	}
// }

void escribir_linea_pc (char *str)
{
800033c8:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800033ca:	18 9b       	mov	r11,r12
800033cc:	fe 7c 38 00 	mov	r12,-51200
800033d0:	f0 1f 00 02 	mcall	800033d8 <escribir_linea_pc+0x10>
}
800033d4:	d8 02       	popm	pc
800033d6:	00 00       	add	r0,r0
800033d8:	80 00       	ld.sh	r0,r0[0x0]
800033da:	2c 34       	sub	r4,-61

800033dc <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
800033dc:	eb cd 40 80 	pushm	r7,lr
	
	IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS) & 0x0C;
800033e0:	30 fc       	mov	r12,15
800033e2:	f0 1f 00 1a 	mcall	80003448 <eic_int_handler2+0x6c>
800033e6:	e2 1c 00 0c 	andl	r12,0xc,COH
800033ea:	49 98       	lddpc	r8,8000344c <eic_int_handler2+0x70>
800033ec:	b0 8c       	st.b	r8[0x0],r12
	
	//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
	//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
800033ee:	30 2b       	mov	r11,2
800033f0:	fe 7c 24 00 	mov	r12,-56320
800033f4:	f0 1f 00 17 	mcall	80003450 <eic_int_handler2+0x74>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		//IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
		//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
		//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		if (contadorRX>120){
800033f8:	49 78       	lddpc	r8,80003454 <eic_int_handler2+0x78>
800033fa:	11 89       	ld.ub	r9,r8[0x0]
800033fc:	37 88       	mov	r8,120
800033fe:	f0 09 18 00 	cp.b	r9,r8
80003402:	e0 88 00 0f 	brls	80003420 <eic_int_handler2+0x44>
			escribir_linea_pc("\n\n a \n\n");
80003406:	49 57       	lddpc	r7,80003458 <eic_int_handler2+0x7c>
80003408:	0e 9c       	mov	r12,r7
8000340a:	f0 1f 00 15 	mcall	8000345c <eic_int_handler2+0x80>
			escribir_linea_pc(colaRX);
8000340e:	49 5c       	lddpc	r12,80003460 <eic_int_handler2+0x84>
80003410:	f0 1f 00 13 	mcall	8000345c <eic_int_handler2+0x80>
			escribir_linea_pc("\n\n a \n\n");
80003414:	0e 9c       	mov	r12,r7
80003416:	f0 1f 00 12 	mcall	8000345c <eic_int_handler2+0x80>
 			 contadorRX=0;
8000341a:	30 09       	mov	r9,0
8000341c:	48 e8       	lddpc	r8,80003454 <eic_int_handler2+0x78>
8000341e:	b0 89       	st.b	r8[0x0],r9
		}
		switch (IRQ_STATUS){
80003420:	48 b8       	lddpc	r8,8000344c <eic_int_handler2+0x70>
80003422:	11 89       	ld.ub	r9,r8[0x0]
80003424:	30 48       	mov	r8,4
80003426:	f0 09 18 00 	cp.b	r9,r8
8000342a:	c0 b1       	brne	80003440 <eic_int_handler2+0x64>
// 			
// 						
// 			break;
			case TRX_IRQ_RX_START:
			
				pal_trx_frame_read(&colaRX[contadorRX],120);
8000342c:	48 a7       	lddpc	r7,80003454 <eic_int_handler2+0x78>
8000342e:	0f 88       	ld.ub	r8,r7[0x0]
80003430:	37 8b       	mov	r11,120
80003432:	48 cc       	lddpc	r12,80003460 <eic_int_handler2+0x84>
80003434:	10 0c       	add	r12,r8
80003436:	f0 1f 00 0c 	mcall	80003464 <eic_int_handler2+0x88>
				contadorRX=contadorRX+120;
8000343a:	0f 88       	ld.ub	r8,r7[0x0]
8000343c:	28 88       	sub	r8,-120
8000343e:	ae 88       	st.b	r7[0x0],r8
			break;
		}
}
80003440:	e3 cd 40 80 	ldm	sp++,r7,lr
80003444:	d6 03       	rete
80003446:	00 00       	add	r0,r0
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	2e 64       	sub	r4,-26
8000344c:	00 00       	add	r0,r0
8000344e:	08 15       	sub	r5,r4
80003450:	80 00       	ld.sh	r0,r0[0x0]
80003452:	24 dc       	sub	r12,77
80003454:	00 00       	add	r0,r0
80003456:	06 39       	cp.w	r9,r3
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	99 58       	st.w	r12[0x14],r8
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	33 c8       	mov	r8,60
80003460:	00 00       	add	r0,r0
80003462:	06 78       	tst	r8,r3
80003464:	80 00       	ld.sh	r0,r0[0x0]
80003466:	2d 90       	sub	r0,-39

80003468 <modeConfig>:
	Enable_global_interrupt();
	
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
}
void modeConfig()
{
80003468:	d4 01       	pushm	lr
// cuando esta en modo de configuracion no hace nada, solo espera que le lleguen los datos
	uint8_t tam=8;
	while(cola_PC_nw < (pConfiguracion + 0x09));
8000346a:	49 48       	lddpc	r8,800034b8 <modeConfig+0x50>
8000346c:	11 89       	ld.ub	r9,r8[0x0]
8000346e:	49 48       	lddpc	r8,800034bc <modeConfig+0x54>
80003470:	11 8a       	ld.ub	r10,r8[0x0]
80003472:	f2 c8 ff f7 	sub	r8,r9,-9
80003476:	10 3a       	cp.w	r10,r8
80003478:	c1 e5       	brlt	800034b4 <modeConfig+0x4c>
	// comprobar CRC
//	if (check_pack(tam)){
	// solo si pasa el crc sigo la configuracion
		tramaConfiguracion.crc = cola_PC[pConfiguracion+8];
8000347a:	49 28       	lddpc	r8,800034c0 <modeConfig+0x58>
8000347c:	49 2a       	lddpc	r10,800034c4 <modeConfig+0x5c>
8000347e:	f4 09 00 09 	add	r9,r10,r9
	
		// fin comprobacion
		
		tramaConfiguracion.cmd = cola_PC[pConfiguracion+3];
80003482:	13 ba       	ld.ub	r10,r9[0x3]
80003484:	b0 9a       	st.b	r8[0x1],r10
	
		tramaConfiguracion.payload[0] = cola_PC[pConfiguracion+5];	
80003486:	13 db       	ld.ub	r11,r9[0x5]
80003488:	b0 ab       	st.b	r8[0x2],r11
		tramaConfiguracion.payload[1] = cola_PC[pConfiguracion+6];
8000348a:	13 eb       	ld.ub	r11,r9[0x6]
8000348c:	b0 bb       	st.b	r8[0x3],r11
		tramaConfiguracion.payload[2] = cola_PC[pConfiguracion+7];
8000348e:	13 f9       	ld.ub	r9,r9[0x7]
80003490:	b0 c9       	st.b	r8[0x4],r9
	
		switch (tramaConfiguracion.cmd){
80003492:	33 18       	mov	r8,49
80003494:	f0 0a 18 00 	cp.b	r10,r8
80003498:	c0 60       	breq	800034a4 <modeConfig+0x3c>
8000349a:	33 28       	mov	r8,50
8000349c:	f0 0a 18 00 	cp.b	r10,r8
800034a0:	c0 b1       	brne	800034b6 <modeConfig+0x4e>
800034a2:	c0 58       	rjmp	800034ac <modeConfig+0x44>
			case BAUDRATE:
				escribir_linea_pc("\r\nConfiguracion del baud rate\n");
800034a4:	48 9c       	lddpc	r12,800034c8 <modeConfig+0x60>
800034a6:	f0 1f 00 0a 	mcall	800034cc <modeConfig+0x64>
			break;
800034aa:	d8 02       	popm	pc
			case TEMPERATURA:
				escribir_linea_pc("\r\nVeo la temperatura\n");
800034ac:	48 9c       	lddpc	r12,800034d0 <modeConfig+0x68>
800034ae:	f0 1f 00 08 	mcall	800034cc <modeConfig+0x64>
800034b2:	d8 02       	popm	pc
800034b4:	c0 08       	rjmp	800034b4 <modeConfig+0x4c>
800034b6:	d8 02       	popm	pc
800034b8:	00 00       	add	r0,r0
800034ba:	06 38       	cp.w	r8,r3
800034bc:	00 00       	add	r0,r0
800034be:	06 37       	cp.w	r7,r3
800034c0:	00 00       	add	r0,r0
800034c2:	07 43       	ld.w	r3,--r3
800034c4:	00 00       	add	r0,r0
800034c6:	07 4c       	ld.w	r12,--r3
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	99 60       	st.w	r12[0x18],r0
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	33 c8       	mov	r8,60
800034d0:	80 00       	ld.sh	r0,r0[0x0]
800034d2:	99 80       	st.w	r12[0x20],r0

800034d4 <init_AT86RF212>:
	}
	delay_ms(1);
}

uint8_t init_AT86RF212(void)
{
800034d4:	eb cd 40 80 	pushm	r7,lr
	escribir_linea_pc("\n Inicializando AT86RF212 \n\n");
800034d8:	fe fc 02 60 	ld.w	r12,pc[608]
800034dc:	f0 1f 00 98 	mcall	8000373c <init_AT86RF212+0x268>
	Disable_global_interrupt();
800034e0:	d3 03       	ssrf	0x10
	
	//SLP_TR_LOW();
	
	
	//estadoPorPc();
	RESET();
800034e2:	f0 1f 00 98 	mcall	80003740 <init_AT86RF212+0x26c>
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
800034e6:	30 0b       	mov	r11,0
800034e8:	30 ec       	mov	r12,14
800034ea:	f0 1f 00 97 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800034ee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034f2:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800034f6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800034fa:	14 38       	cp.w	r8,r10
800034fc:	e0 88 00 09 	brls	8000350e <init_AT86RF212+0x3a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003500:	12 38       	cp.w	r8,r9
80003502:	fe 98 ff fa 	brls	800034f6 <init_AT86RF212+0x22>
80003506:	12 3a       	cp.w	r10,r9
80003508:	e0 83 00 ce 	brlo	800036a4 <init_AT86RF212+0x1d0>
8000350c:	cf 5b       	rjmp	800034f6 <init_AT86RF212+0x22>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000350e:	12 38       	cp.w	r8,r9
80003510:	e0 8b 00 ca 	brhi	800036a4 <init_AT86RF212+0x1d0>
80003514:	12 3a       	cp.w	r10,r9
80003516:	e0 83 00 c7 	brlo	800036a4 <init_AT86RF212+0x1d0>
8000351a:	ce eb       	rjmp	800034f6 <init_AT86RF212+0x22>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000351c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003520:	14 38       	cp.w	r8,r10
80003522:	e0 88 00 08 	brls	80003532 <init_AT86RF212+0x5e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003526:	12 38       	cp.w	r8,r9
80003528:	fe 98 ff fa 	brls	8000351c <init_AT86RF212+0x48>
8000352c:	12 3a       	cp.w	r10,r9
8000352e:	c0 73       	brcs	8000353c <init_AT86RF212+0x68>
80003530:	cf 6b       	rjmp	8000351c <init_AT86RF212+0x48>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003532:	12 38       	cp.w	r8,r9
80003534:	e0 8b 00 04 	brhi	8000353c <init_AT86RF212+0x68>
80003538:	12 3a       	cp.w	r10,r9
8000353a:	cf 12       	brcc	8000351c <init_AT86RF212+0x48>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	
	//variable1=getStateAT86RF212();
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
8000353c:	30 87       	mov	r7,8
8000353e:	f0 1f 00 83 	mcall	80003748 <init_AT86RF212+0x274>
80003542:	ee 0c 18 00 	cp.b	r12,r7
80003546:	cf c1       	brne	8000353e <init_AT86RF212+0x6a>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003548:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000354c:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003550:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003554:	14 38       	cp.w	r8,r10
80003556:	e0 88 00 09 	brls	80003568 <init_AT86RF212+0x94>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000355a:	12 38       	cp.w	r8,r9
8000355c:	fe 98 ff fa 	brls	80003550 <init_AT86RF212+0x7c>
80003560:	12 3a       	cp.w	r10,r9
80003562:	e0 83 00 aa 	brlo	800036b6 <init_AT86RF212+0x1e2>
80003566:	cf 5b       	rjmp	80003550 <init_AT86RF212+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003568:	12 38       	cp.w	r8,r9
8000356a:	e0 8b 00 a6 	brhi	800036b6 <init_AT86RF212+0x1e2>
8000356e:	12 3a       	cp.w	r10,r9
80003570:	e0 83 00 a3 	brlo	800036b6 <init_AT86RF212+0x1e2>
80003574:	ce eb       	rjmp	80003550 <init_AT86RF212+0x7c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003576:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000357a:	14 38       	cp.w	r8,r10
8000357c:	e0 88 00 09 	brls	8000358e <init_AT86RF212+0xba>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003580:	12 38       	cp.w	r8,r9
80003582:	fe 98 ff fa 	brls	80003576 <init_AT86RF212+0xa2>
80003586:	12 3a       	cp.w	r10,r9
80003588:	e0 83 00 a0 	brlo	800036c8 <init_AT86RF212+0x1f4>
8000358c:	cf 5b       	rjmp	80003576 <init_AT86RF212+0xa2>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000358e:	12 38       	cp.w	r8,r9
80003590:	e0 8b 00 9c 	brhi	800036c8 <init_AT86RF212+0x1f4>
80003594:	12 3a       	cp.w	r10,r9
80003596:	e0 83 00 99 	brlo	800036c8 <init_AT86RF212+0x1f4>
8000359a:	ce eb       	rjmp	80003576 <init_AT86RF212+0xa2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000359c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035a0:	14 38       	cp.w	r8,r10
800035a2:	e0 88 00 09 	brls	800035b4 <init_AT86RF212+0xe0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035a6:	12 38       	cp.w	r8,r9
800035a8:	fe 98 ff fa 	brls	8000359c <init_AT86RF212+0xc8>
800035ac:	12 3a       	cp.w	r10,r9
800035ae:	e0 83 00 96 	brlo	800036da <init_AT86RF212+0x206>
800035b2:	cf 5b       	rjmp	8000359c <init_AT86RF212+0xc8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035b4:	12 38       	cp.w	r8,r9
800035b6:	e0 8b 00 92 	brhi	800036da <init_AT86RF212+0x206>
800035ba:	12 3a       	cp.w	r10,r9
800035bc:	e0 83 00 8f 	brlo	800036da <init_AT86RF212+0x206>
800035c0:	ce eb       	rjmp	8000359c <init_AT86RF212+0xc8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035c2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035c6:	14 38       	cp.w	r8,r10
800035c8:	e0 88 00 09 	brls	800035da <init_AT86RF212+0x106>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035cc:	12 38       	cp.w	r8,r9
800035ce:	fe 98 ff fa 	brls	800035c2 <init_AT86RF212+0xee>
800035d2:	12 3a       	cp.w	r10,r9
800035d4:	e0 83 00 8c 	brlo	800036ec <init_AT86RF212+0x218>
800035d8:	cf 5b       	rjmp	800035c2 <init_AT86RF212+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035da:	12 38       	cp.w	r8,r9
800035dc:	e0 8b 00 88 	brhi	800036ec <init_AT86RF212+0x218>
800035e0:	12 3a       	cp.w	r10,r9
800035e2:	e0 83 00 85 	brlo	800036ec <init_AT86RF212+0x218>
800035e6:	ce eb       	rjmp	800035c2 <init_AT86RF212+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035e8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035ec:	14 38       	cp.w	r8,r10
800035ee:	e0 88 00 08 	brls	800035fe <init_AT86RF212+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035f2:	12 38       	cp.w	r8,r9
800035f4:	fe 98 ff fa 	brls	800035e8 <init_AT86RF212+0x114>
800035f8:	12 3a       	cp.w	r10,r9
800035fa:	c7 e3       	brcs	800036f6 <init_AT86RF212+0x222>
800035fc:	cf 6b       	rjmp	800035e8 <init_AT86RF212+0x114>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035fe:	12 38       	cp.w	r8,r9
80003600:	e0 8b 00 7b 	brhi	800036f6 <init_AT86RF212+0x222>
80003604:	12 3a       	cp.w	r10,r9
80003606:	c7 83       	brcs	800036f6 <init_AT86RF212+0x222>
80003608:	cf 0b       	rjmp	800035e8 <init_AT86RF212+0x114>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000360a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000360e:	14 38       	cp.w	r8,r10
80003610:	e0 88 00 08 	brls	80003620 <init_AT86RF212+0x14c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003614:	12 38       	cp.w	r8,r9
80003616:	fe 98 ff fa 	brls	8000360a <init_AT86RF212+0x136>
8000361a:	12 3a       	cp.w	r10,r9
8000361c:	c7 43       	brcs	80003704 <init_AT86RF212+0x230>
8000361e:	cf 6b       	rjmp	8000360a <init_AT86RF212+0x136>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003620:	12 38       	cp.w	r8,r9
80003622:	e0 8b 00 71 	brhi	80003704 <init_AT86RF212+0x230>
80003626:	12 3a       	cp.w	r10,r9
80003628:	c6 e3       	brcs	80003704 <init_AT86RF212+0x230>
8000362a:	cf 0b       	rjmp	8000360a <init_AT86RF212+0x136>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000362c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003630:	14 38       	cp.w	r8,r10
80003632:	e0 88 00 08 	brls	80003642 <init_AT86RF212+0x16e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003636:	12 38       	cp.w	r8,r9
80003638:	fe 98 ff fa 	brls	8000362c <init_AT86RF212+0x158>
8000363c:	12 3a       	cp.w	r10,r9
8000363e:	c0 73       	brcs	8000364c <init_AT86RF212+0x178>
80003640:	cf 6b       	rjmp	8000362c <init_AT86RF212+0x158>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003642:	12 38       	cp.w	r8,r9
80003644:	e0 8b 00 04 	brhi	8000364c <init_AT86RF212+0x178>
80003648:	12 3a       	cp.w	r10,r9
8000364a:	cf 12       	brcc	8000362c <init_AT86RF212+0x158>
	promiscuous_mode();
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en
	DELAY_US(TIME_PLL_ON_RX_ON);

	while (getStateAT86RF212()!=CMD_PLL_ON);
8000364c:	30 97       	mov	r7,9
8000364e:	f0 1f 00 3f 	mcall	80003748 <init_AT86RF212+0x274>
80003652:	ee 0c 18 00 	cp.b	r12,r7
80003656:	cf c1       	brne	8000364e <init_AT86RF212+0x17a>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003658:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000365c:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003660:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003664:	14 38       	cp.w	r8,r10
80003666:	e0 88 00 08 	brls	80003676 <init_AT86RF212+0x1a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000366a:	12 38       	cp.w	r8,r9
8000366c:	fe 98 ff fa 	brls	80003660 <init_AT86RF212+0x18c>
80003670:	12 3a       	cp.w	r10,r9
80003672:	c5 23       	brcs	80003716 <init_AT86RF212+0x242>
80003674:	cf 6b       	rjmp	80003660 <init_AT86RF212+0x18c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003676:	12 38       	cp.w	r8,r9
80003678:	e0 8b 00 4f 	brhi	80003716 <init_AT86RF212+0x242>
8000367c:	12 3a       	cp.w	r10,r9
8000367e:	c4 c3       	brcs	80003716 <init_AT86RF212+0x242>
80003680:	cf 0b       	rjmp	80003660 <init_AT86RF212+0x18c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003682:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003686:	14 38       	cp.w	r8,r10
80003688:	e0 88 00 08 	brls	80003698 <init_AT86RF212+0x1c4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000368c:	12 38       	cp.w	r8,r9
8000368e:	fe 98 ff fa 	brls	80003682 <init_AT86RF212+0x1ae>
80003692:	12 3a       	cp.w	r10,r9
80003694:	c4 a3       	brcs	80003728 <init_AT86RF212+0x254>
80003696:	cf 6b       	rjmp	80003682 <init_AT86RF212+0x1ae>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003698:	12 38       	cp.w	r8,r9
8000369a:	e0 8b 00 47 	brhi	80003728 <init_AT86RF212+0x254>
8000369e:	12 3a       	cp.w	r10,r9
800036a0:	c4 43       	brcs	80003728 <init_AT86RF212+0x254>
800036a2:	cf 0b       	rjmp	80003682 <init_AT86RF212+0x1ae>
	//estadoPorPc();
	RESET();
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
800036a4:	30 3b       	mov	r11,3
800036a6:	30 2c       	mov	r12,2
800036a8:	f0 1f 00 27 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036ac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036b0:	f0 ca ff ff 	sub	r10,r8,-1
800036b4:	c3 4b       	rjmp	8000351c <init_AT86RF212+0x48>
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	
	//variable1=getStateAT86RF212();
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_CTRL_0, 0x08);
800036b6:	30 8b       	mov	r11,8
800036b8:	30 3c       	mov	r12,3
800036ba:	f0 1f 00 23 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036be:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036c2:	f0 ca ff ff 	sub	r10,r8,-1
800036c6:	c5 8b       	rjmp	80003576 <init_AT86RF212+0xa2>
	//pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz set channel ->
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_CTRL_1, 0x22); // 1 -> TX AUTO_CRC && 1-> IRQ_MASK_MODE
800036c8:	32 2b       	mov	r11,34
800036ca:	30 4c       	mov	r12,4
800036cc:	f0 1f 00 1e 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036d0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036d4:	f0 ca ff ff 	sub	r10,r8,-1
800036d8:	c6 2b       	rjmp	8000359c <init_AT86RF212+0xc8>
	PAL_WAIT_1_US();
	//pal_trx_reg_write(RG_RX_CTRL, 0x20);
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
800036da:	30 cb       	mov	r11,12
800036dc:	30 ec       	mov	r12,14
800036de:	f0 1f 00 1a 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036e2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036e6:	f0 ca ff ff 	sub	r10,r8,-1
800036ea:	c6 cb       	rjmp	800035c2 <init_AT86RF212+0xee>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036ec:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036f0:	f0 ca ff ff 	sub	r10,r8,-1
800036f4:	c7 ab       	rjmp	800035e8 <init_AT86RF212+0x114>
//	pal_trx_reg_write(RG_TRX_CTRL_2, 0x00); // configuracion de velocidad y frec
	PAL_WAIT_1_US();
	//pal_trx_reg_write(RG_XOSC_CTRL, 0x40); // manejo del cristal externo y capacitores se muere cuando se activa
	PAL_WAIT_1_US();
	promiscuous_mode();
800036f6:	f0 1f 00 16 	mcall	8000374c <init_AT86RF212+0x278>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036fa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036fe:	f0 ca ff ff 	sub	r10,r8,-1
80003702:	c8 4b       	rjmp	8000360a <init_AT86RF212+0x136>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en
80003704:	30 4b       	mov	r11,4
80003706:	30 2c       	mov	r12,2
80003708:	f0 1f 00 0f 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000370c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003710:	f0 ca ff ff 	sub	r10,r8,-1
80003714:	c8 cb       	rjmp	8000362c <init_AT86RF212+0x158>
	DELAY_US(TIME_PLL_ON_RX_ON);

	while (getStateAT86RF212()!=CMD_PLL_ON);
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
80003716:	30 6b       	mov	r11,6
80003718:	30 2c       	mov	r12,2
8000371a:	f0 1f 00 0b 	mcall	80003744 <init_AT86RF212+0x270>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000371e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003722:	f0 ca ff ff 	sub	r10,r8,-1
80003726:	ca eb       	rjmp	80003682 <init_AT86RF212+0x1ae>
	PAL_WAIT_1_US();
 	
	cpu_irq_enable();
80003728:	d5 03       	csrf	0x10
	Enable_global_interrupt();
8000372a:	d5 03       	csrf	0x10
	
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
8000372c:	48 9c       	lddpc	r12,80003750 <init_AT86RF212+0x27c>
8000372e:	f0 1f 00 04 	mcall	8000373c <init_AT86RF212+0x268>
}
80003732:	e3 cd 80 80 	ldm	sp++,r7,pc
80003736:	00 00       	add	r0,r0
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	99 98       	st.w	r12[0x24],r8
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	33 c8       	mov	r8,60
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	31 08       	mov	r8,16
80003744:	80 00       	ld.sh	r0,r0[0x0]
80003746:	2d f8       	sub	r8,-33
80003748:	80 00       	ld.sh	r0,r0[0x0]
8000374a:	2f ac       	sub	r12,-6
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	30 c0       	mov	r0,12
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	99 b8       	st.w	r12[0x2c],r8

80003754 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003754:	d4 01       	pushm	lr
80003756:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003758:	30 eb       	mov	r11,14
8000375a:	30 2c       	mov	r12,2
8000375c:	f0 1f 00 0e 	mcall	80003794 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
80003760:	e0 78 c1 38 	mov	r8,115000
80003764:	50 08       	stdsp	sp[0x0],r8
80003766:	e0 68 27 10 	mov	r8,10000
8000376a:	50 18       	stdsp	sp[0x4],r8
8000376c:	34 88       	mov	r8,72
8000376e:	50 28       	stdsp	sp[0x8],r8
80003770:	30 08       	mov	r8,0
80003772:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
80003776:	1a 9b       	mov	r11,sp
80003778:	fe 7c 44 00 	mov	r12,-48128
8000377c:	f0 1f 00 07 	mcall	80003798 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
80003780:	c0 51       	brne	8000378a <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
80003782:	48 7c       	lddpc	r12,8000379c <init_i2c_module+0x48>
80003784:	f0 1f 00 07 	mcall	800037a0 <init_i2c_module+0x4c>
80003788:	c0 48       	rjmp	80003790 <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
8000378a:	48 7c       	lddpc	r12,800037a4 <init_i2c_module+0x50>
8000378c:	f0 1f 00 05 	mcall	800037a0 <init_i2c_module+0x4c>
	}
} 
80003790:	2f cd       	sub	sp,-16
80003792:	d8 02       	popm	pc
80003794:	80 00       	ld.sh	r0,r0[0x0]
80003796:	2e e8       	sub	r8,-18
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	23 40       	sub	r0,52
8000379c:	80 00       	ld.sh	r0,r0[0x0]
8000379e:	9c 74       	ld.sh	r4,lr[0xe]
800037a0:	80 00       	ld.sh	r0,r0[0x0]
800037a2:	33 c8       	mov	r8,60
800037a4:	80 00       	ld.sh	r0,r0[0x0]
800037a6:	9c 88       	ld.uh	r8,lr[0x0]

800037a8 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
800037a8:	eb cd 40 e0 	pushm	r5-r7,lr
800037ac:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800037ae:	4a 48       	lddpc	r8,8000383c <spi_init_module+0x94>
800037b0:	1a 95       	mov	r5,sp
800037b2:	70 09       	ld.w	r9,r8[0x0]
800037b4:	50 09       	stdsp	sp[0x0],r9
800037b6:	70 19       	ld.w	r9,r8[0x4]
800037b8:	50 19       	stdsp	sp[0x4],r9
800037ba:	70 29       	ld.w	r9,r8[0x8]
800037bc:	50 29       	stdsp	sp[0x8],r9
800037be:	70 38       	ld.w	r8,r8[0xc]
800037c0:	50 38       	stdsp	sp[0xc],r8
800037c2:	30 db       	mov	r11,13
800037c4:	30 2c       	mov	r12,2
800037c6:	f0 1f 00 1f 	mcall	80003840 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800037ca:	fe 77 40 00 	mov	r7,-49152
800037ce:	e0 68 00 80 	mov	r8,128
800037d2:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800037d4:	6e 18       	ld.w	r8,r7[0x4]
800037d6:	30 19       	mov	r9,1
800037d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800037dc:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
800037de:	6e 18       	ld.w	r8,r7[0x4]
800037e0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800037e4:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
800037e6:	6e 18       	ld.w	r8,r7[0x4]
800037e8:	30 06       	mov	r6,0
800037ea:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
800037ee:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
800037f0:	6e 18       	ld.w	r8,r7[0x4]
800037f2:	30 f9       	mov	r9,15
800037f4:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800037f8:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
800037fa:	6e 18       	ld.w	r8,r7[0x4]
800037fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003800:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
80003802:	6e 18       	ld.w	r8,r7[0x4]
80003804:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003808:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
8000380a:	6e 18       	ld.w	r8,r7[0x4]
8000380c:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003810:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
80003812:	30 38       	mov	r8,3
80003814:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
80003816:	e0 7a c1 38 	mov	r10,115000
8000381a:	1a 9b       	mov	r11,sp
8000381c:	0e 9c       	mov	r12,r7
8000381e:	f0 1f 00 0a 	mcall	80003844 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
80003822:	0c 99       	mov	r9,r6
80003824:	0c 9a       	mov	r10,r6
80003826:	0c 9b       	mov	r11,r6
80003828:	0e 9c       	mov	r12,r7
8000382a:	f0 1f 00 08 	mcall	80003848 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
8000382e:	0e 9c       	mov	r12,r7
80003830:	f0 1f 00 07 	mcall	8000384c <spi_init_module+0xa4>
}
80003834:	2f cd       	sub	sp,-16
80003836:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000383a:	00 00       	add	r0,r0
8000383c:	80 00       	ld.sh	r0,r0[0x0]
8000383e:	99 3c       	st.w	r12[0xc],r12
80003840:	80 00       	ld.sh	r0,r0[0x0]
80003842:	2e e8       	sub	r8,-18
80003844:	80 00       	ld.sh	r0,r0[0x0]
80003846:	28 a8       	sub	r8,-118
80003848:	80 00       	ld.sh	r0,r0[0x0]
8000384a:	28 08       	sub	r8,-128
8000384c:	80 00       	ld.sh	r0,r0[0x0]
8000384e:	29 60       	sub	r0,-106

80003850 <main>:
//	} //ver que onda cuando sale de aca, si falla el LRC no hace nada, quiza deberia hacer algo?
	return;
}

int main (void)
{
80003850:	d4 31       	pushm	r0-r7,lr
80003852:	20 3d       	sub	sp,12
// nodo II
	char temps[10] = "\0";
80003854:	4e 78       	lddpc	r8,800039f0 <main+0x1a0>
80003856:	90 08       	ld.sh	r8,r8[0x0]
80003858:	ba 08       	st.h	sp[0x0],r8
8000385a:	30 8a       	mov	r10,8
8000385c:	30 0b       	mov	r11,0
8000385e:	fa cc ff fe 	sub	r12,sp,-2
80003862:	f0 1f 00 65 	mcall	800039f4 <main+0x1a4>
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
80003866:	f0 1f 00 65 	mcall	800039f8 <main+0x1a8>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
8000386a:	f0 1f 00 65 	mcall	800039fc <main+0x1ac>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
8000386e:	f0 1f 00 65 	mcall	80003a00 <main+0x1b0>
	
	//Configuracion pins para RF
	init_rf_pins();
80003872:	f0 1f 00 65 	mcall	80003a04 <main+0x1b4>
	
	//Inicializacion del SPI
	spi_init_module();
80003876:	f0 1f 00 65 	mcall	80003a08 <main+0x1b8>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
8000387a:	f0 1f 00 65 	mcall	80003a0c <main+0x1bc>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
8000387e:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003880:	f0 1f 00 64 	mcall	80003a10 <main+0x1c0>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003884:	30 0a       	mov	r10,0
80003886:	e0 6b 02 20 	mov	r11,544
8000388a:	4e 3c       	lddpc	r12,80003a14 <main+0x1c4>
8000388c:	f0 1f 00 63 	mcall	80003a18 <main+0x1c8>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
80003890:	30 2a       	mov	r10,2
80003892:	e0 6b 01 61 	mov	r11,353
80003896:	4e 2c       	lddpc	r12,80003a1c <main+0x1cc>
80003898:	f0 1f 00 60 	mcall	80003a18 <main+0x1c8>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
8000389c:	30 3a       	mov	r10,3
8000389e:	e0 6b 03 40 	mov	r11,832
800038a2:	4e 0c       	lddpc	r12,80003a20 <main+0x1d0>
800038a4:	f0 1f 00 5d 	mcall	80003a18 <main+0x1c8>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
800038a8:	30 1a       	mov	r10,1
800038aa:	4d fb       	lddpc	r11,80003a24 <main+0x1d4>
800038ac:	fe 7c 24 00 	mov	r12,-56320
800038b0:	f0 1f 00 5e 	mcall	80003a28 <main+0x1d8>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
800038b4:	30 2b       	mov	r11,2
800038b6:	fe 7c 24 00 	mov	r12,-56320
800038ba:	f0 1f 00 5d 	mcall	80003a2c <main+0x1dc>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
800038be:	30 2b       	mov	r11,2
800038c0:	fe 7c 24 00 	mov	r12,-56320
800038c4:	f0 1f 00 5b 	mcall	80003a30 <main+0x1e0>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
800038c8:	30 19       	mov	r9,1
800038ca:	fe 78 38 00 	mov	r8,-51200
800038ce:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
800038d0:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
800038d2:	4d 98       	lddpc	r8,80003a34 <main+0x1e4>
800038d4:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800038d6:	4d 9b       	lddpc	r11,80003a38 <main+0x1e8>
800038d8:	0e 9c       	mov	r12,r7
800038da:	f0 1f 00 59 	mcall	80003a3c <main+0x1ec>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
800038de:	e0 6a 00 b3 	mov	r10,179
800038e2:	30 0b       	mov	r11,0
800038e4:	0e 9c       	mov	r12,r7
800038e6:	f0 1f 00 57 	mcall	80003a40 <main+0x1f0>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
800038ea:	4d 7a       	lddpc	r10,80003a44 <main+0x1f4>
800038ec:	30 0b       	mov	r11,0
800038ee:	0e 9c       	mov	r12,r7
800038f0:	f0 1f 00 56 	mcall	80003a48 <main+0x1f8>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
800038f4:	30 0b       	mov	r11,0
800038f6:	0e 9c       	mov	r12,r7
800038f8:	f0 1f 00 55 	mcall	80003a4c <main+0x1fc>
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
	
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
800038fc:	31 cc       	mov	r12,28
800038fe:	f0 1f 00 55 	mcall	80003a50 <main+0x200>
80003902:	4d 58       	lddpc	r8,80003a54 <main+0x204>
80003904:	b0 8c       	st.b	r8[0x0],r12
	
	if (register_value == PART_NUM_AT86RF212) 
80003906:	30 78       	mov	r8,7
80003908:	f0 0c 18 00 	cp.b	r12,r8
8000390c:	c0 51       	brne	80003916 <main+0xc6>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
8000390e:	4d 3c       	lddpc	r12,80003a58 <main+0x208>
80003910:	f0 1f 00 53 	mcall	80003a5c <main+0x20c>
80003914:	c0 48       	rjmp	8000391c <main+0xcc>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
80003916:	4d 3c       	lddpc	r12,80003a60 <main+0x210>
80003918:	f0 1f 00 51 	mcall	80003a5c <main+0x20c>
	escribir_linea_pc(register_value);
8000391c:	4c e8       	lddpc	r8,80003a54 <main+0x204>
8000391e:	11 8c       	ld.ub	r12,r8[0x0]
80003920:	f0 1f 00 4f 	mcall	80003a5c <main+0x20c>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
80003924:	f0 1f 00 50 	mcall	80003a64 <main+0x214>
	init_i2c_module();
80003928:	f0 1f 00 50 	mcall	80003a68 <main+0x218>
	// inicializacion del tran
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_PLL_ON);

	

	init_AT86RF212();
8000392c:	f0 1f 00 50 	mcall	80003a6c <main+0x21c>
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r\n");
80003930:	4d 0c       	lddpc	r12,80003a70 <main+0x220>
80003932:	f0 1f 00 4b 	mcall	80003a5c <main+0x20c>
	
	//setStateAT86RF212(CMD_RX_ON, TIME_PLL_ON_RX_ON);// seteo el tran en RX
	//pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003936:	4d 07       	lddpc	r7,80003a74 <main+0x224>
80003938:	4d 04       	lddpc	r4,80003a78 <main+0x228>
		{
			if (cola_PC[cola_PC_nr] == 't')
8000393a:	4d 11       	lddpc	r1,80003a7c <main+0x22c>
8000393c:	37 40       	mov	r0,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			
			if (cola_PC_nr >= tamano_cola)
8000393e:	3c 73       	mov	r3,-57
				cola_PC_nr = 0;
				
			if (configuracion && (cola_PC_nr >= pConfiguracion + 4))
80003940:	4d 02       	lddpc	r2,80003a80 <main+0x230>
80003942:	30 05       	mov	r5,0
	
	//setStateAT86RF212(CMD_RX_ON, TIME_PLL_ON_RX_ON);// seteo el tran en RX
	//pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
80003944:	0f 88       	ld.ub	r8,r7[0x0]
80003946:	09 89       	ld.ub	r9,r4[0x0]
80003948:	f0 09 18 00 	cp.b	r9,r8
8000394c:	c3 b0       	breq	800039c2 <main+0x172>
		{
			if (cola_PC[cola_PC_nr] == 't')
8000394e:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003952:	e0 08 18 00 	cp.b	r8,r0
80003956:	c0 d1       	brne	80003970 <main+0x120>
			{
				leer_temp(temps);
80003958:	1a 9c       	mov	r12,sp
8000395a:	f0 1f 00 4b 	mcall	80003a84 <main+0x234>
				escribir_linea_pc("Temp: ");
8000395e:	4c bc       	lddpc	r12,80003a88 <main+0x238>
80003960:	f0 1f 00 3f 	mcall	80003a5c <main+0x20c>
				escribir_linea_pc(temps);
80003964:	1a 9c       	mov	r12,sp
80003966:	f0 1f 00 3e 	mcall	80003a5c <main+0x20c>
				escribir_linea_pc("*C\r\n");
8000396a:	4c 9c       	lddpc	r12,80003a8c <main+0x23c>
8000396c:	f0 1f 00 3c 	mcall	80003a5c <main+0x20c>
			}
			cola_PC_nr++;
80003970:	0f 88       	ld.ub	r8,r7[0x0]
80003972:	2f f8       	sub	r8,-1
			
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
80003974:	f0 03 18 00 	cp.b	r3,r8
80003978:	ea 08 17 30 	movlo	r8,r5
8000397c:	ae 88       	st.b	r7[0x0],r8
				
			if (configuracion && (cola_PC_nr >= pConfiguracion + 4))
8000397e:	05 88       	ld.ub	r8,r2[0x0]
80003980:	ea 08 18 00 	cp.b	r8,r5
80003984:	c1 f0       	breq	800039c2 <main+0x172>
80003986:	4c 3a       	lddpc	r10,80003a90 <main+0x240>
80003988:	15 88       	ld.ub	r8,r10[0x0]
8000398a:	0f 8a       	ld.ub	r10,r7[0x0]
8000398c:	f0 c9 ff fc 	sub	r9,r8,-4
80003990:	12 3a       	cp.w	r10,r9
80003992:	c1 85       	brlt	800039c2 <main+0x172>
			{
				if ((cola_PC[pConfiguracion] & cola_PC[pConfiguracion+1] & cola_PC[pConfiguracion+2]) == 0x01)
80003994:	e2 08 00 09 	add	r9,r1,r8
80003998:	13 9a       	ld.ub	r10,r9[0x1]
8000399a:	13 a9       	ld.ub	r9,r9[0x2]
8000399c:	f5 e9 00 09 	and	r9,r10,r9
800039a0:	e2 08 07 0a 	ld.ub	r10,r1[r8]
800039a4:	14 69       	and	r9,r10
800039a6:	30 1a       	mov	r10,1
800039a8:	f4 09 18 00 	cp.b	r9,r10
800039ac:	c0 a1       	brne	800039c0 <main+0x170>
				{
					if (cola_PC[pConfiguracion+3] == ADDRESS)
800039ae:	e2 08 00 08 	add	r8,r1,r8
800039b2:	11 b9       	ld.ub	r9,r8[0x3]
800039b4:	33 18       	mov	r8,49
800039b6:	f0 09 18 00 	cp.b	r9,r8
800039ba:	c0 31       	brne	800039c0 <main+0x170>
					{
						modeConfig();
800039bc:	f0 1f 00 36 	mcall	80003a94 <main+0x244>
					}
					
				}
				configuracion = false;
800039c0:	a4 85       	st.b	r2[0x0],r5
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800039c2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800039c6:	e0 69 e0 9c 	mov	r9,57500
800039ca:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800039ce:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800039d2:	14 38       	cp.w	r8,r10
800039d4:	e0 88 00 08 	brls	800039e4 <main+0x194>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800039d8:	12 38       	cp.w	r8,r9
800039da:	fe 98 ff fa 	brls	800039ce <main+0x17e>
800039de:	12 3a       	cp.w	r10,r9
800039e0:	cb 23       	brcs	80003944 <main+0xf4>
800039e2:	cf 6b       	rjmp	800039ce <main+0x17e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800039e4:	12 38       	cp.w	r8,r9
800039e6:	fe 9b ff af 	brhi	80003944 <main+0xf4>
800039ea:	12 3a       	cp.w	r10,r9
800039ec:	ca c3       	brcs	80003944 <main+0xf4>
800039ee:	cf 0b       	rjmp	800039ce <main+0x17e>
800039f0:	80 00       	ld.sh	r0,r0[0x0]
800039f2:	2f a0       	sub	r0,-6
800039f4:	80 00       	ld.sh	r0,r0[0x0]
800039f6:	41 ea       	lddsp	r10,sp[0x78]
800039f8:	80 00       	ld.sh	r0,r0[0x0]
800039fa:	2e d8       	sub	r8,-19
800039fc:	80 00       	ld.sh	r0,r0[0x0]
800039fe:	33 78       	mov	r8,55
80003a00:	80 00       	ld.sh	r0,r0[0x0]
80003a02:	32 e0       	mov	r0,46
80003a04:	80 00       	ld.sh	r0,r0[0x0]
80003a06:	33 98       	mov	r8,57
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	37 a8       	mov	r8,122
80003a0c:	80 00       	ld.sh	r0,r0[0x0]
80003a0e:	32 bc       	mov	r12,43
80003a10:	80 00       	ld.sh	r0,r0[0x0]
80003a12:	27 5c       	sub	r12,117
80003a14:	80 00       	ld.sh	r0,r0[0x0]
80003a16:	30 30       	mov	r0,3
80003a18:	80 00       	ld.sh	r0,r0[0x0]
80003a1a:	26 dc       	sub	r12,109
80003a1c:	80 00       	ld.sh	r0,r0[0x0]
80003a1e:	33 dc       	mov	r12,61
80003a20:	80 00       	ld.sh	r0,r0[0x0]
80003a22:	2f c0       	sub	r0,-4
80003a24:	00 00       	add	r0,r0
80003a26:	00 20       	rsub	r0,r0
80003a28:	80 00       	ld.sh	r0,r0[0x0]
80003a2a:	23 f8       	sub	r8,63
80003a2c:	80 00       	ld.sh	r0,r0[0x0]
80003a2e:	24 c8       	sub	r8,76
80003a30:	80 00       	ld.sh	r0,r0[0x0]
80003a32:	24 d2       	sub	r2,77
80003a34:	00 00       	add	r0,r0
80003a36:	00 18       	sub	r8,r0
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	9d 10       	st.w	lr[0x4],r0
80003a3c:	80 00       	ld.sh	r0,r0[0x0]
80003a3e:	29 66       	sub	r6,-106
80003a40:	80 00       	ld.sh	r0,r0[0x0]
80003a42:	2a 38       	sub	r8,-93
80003a44:	80 00       	ld.sh	r0,r0[0x0]
80003a46:	99 38       	st.w	r12[0xc],r8
80003a48:	80 00       	ld.sh	r0,r0[0x0]
80003a4a:	2a 6c       	sub	r12,-90
80003a4c:	80 00       	ld.sh	r0,r0[0x0]
80003a4e:	2a 02       	sub	r2,-96
80003a50:	80 00       	ld.sh	r0,r0[0x0]
80003a52:	2e 64       	sub	r4,-26
80003a54:	00 00       	add	r0,r0
80003a56:	06 35       	cp.w	r5,r3
80003a58:	80 00       	ld.sh	r0,r0[0x0]
80003a5a:	9c a0       	ld.uh	r0,lr[0x4]
80003a5c:	80 00       	ld.sh	r0,r0[0x0]
80003a5e:	33 c8       	mov	r8,60
80003a60:	80 00       	ld.sh	r0,r0[0x0]
80003a62:	9c b4       	ld.uh	r4,lr[0x6]
80003a64:	80 00       	ld.sh	r0,r0[0x0]
80003a66:	33 0c       	mov	r12,48
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	37 54       	mov	r4,117
80003a6c:	80 00       	ld.sh	r0,r0[0x0]
80003a6e:	34 d4       	mov	r4,77
80003a70:	80 00       	ld.sh	r0,r0[0x0]
80003a72:	9c c8       	ld.uh	r8,lr[0x8]
80003a74:	00 00       	add	r0,r0
80003a76:	06 36       	cp.w	r6,r3
80003a78:	00 00       	add	r0,r0
80003a7a:	06 37       	cp.w	r7,r3
80003a7c:	00 00       	add	r0,r0
80003a7e:	07 4c       	ld.w	r12,--r3
80003a80:	00 00       	add	r0,r0
80003a82:	06 34       	cp.w	r4,r3
80003a84:	80 00       	ld.sh	r0,r0[0x0]
80003a86:	31 78       	mov	r8,23
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	9c e0       	ld.uh	r0,lr[0xc]
80003a8c:	80 00       	ld.sh	r0,r0[0x0]
80003a8e:	9c e8       	ld.uh	r8,lr[0xc]
80003a90:	00 00       	add	r0,r0
80003a92:	06 38       	cp.w	r8,r3
80003a94:	80 00       	ld.sh	r0,r0[0x0]
80003a96:	34 68       	mov	r8,70

80003a98 <__avr32_f64_mul>:
80003a98:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003a9c:	e0 80 00 dc 	breq	80003c54 <__avr32_f64_mul_op1_zero>
80003aa0:	d4 21       	pushm	r4-r7,lr
80003aa2:	f7 e9 20 0e 	eor	lr,r11,r9
80003aa6:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003aaa:	30 15       	mov	r5,1
80003aac:	c4 30       	breq	80003b32 <__avr32_f64_mul_op1_subnormal>
80003aae:	ab 6b       	lsl	r11,0xa
80003ab0:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003ab4:	ab 6a       	lsl	r10,0xa
80003ab6:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003aba:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003abe:	c5 c0       	breq	80003b76 <__avr32_f64_mul_op2_subnormal>
80003ac0:	a1 78       	lsl	r8,0x1
80003ac2:	5c f9       	rol	r9
80003ac4:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003ac8:	e0 47 07 ff 	cp.w	r7,2047
80003acc:	c7 70       	breq	80003bba <__avr32_f64_mul_op_nan_or_inf>
80003ace:	e0 46 07 ff 	cp.w	r6,2047
80003ad2:	c7 40       	breq	80003bba <__avr32_f64_mul_op_nan_or_inf>
80003ad4:	ee 06 00 0c 	add	r12,r7,r6
80003ad8:	e0 2c 03 fe 	sub	r12,1022
80003adc:	f6 08 06 44 	mulu.d	r4,r11,r8
80003ae0:	f4 09 07 44 	macu.d	r4,r10,r9
80003ae4:	f4 08 06 46 	mulu.d	r6,r10,r8
80003ae8:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003aec:	08 07       	add	r7,r4
80003aee:	f4 05 00 4a 	adc	r10,r10,r5
80003af2:	5c 0b       	acr	r11
80003af4:	ed bb 00 14 	bld	r11,0x14
80003af8:	c0 50       	breq	80003b02 <__avr32_f64_mul+0x6a>
80003afa:	a1 77       	lsl	r7,0x1
80003afc:	5c fa       	rol	r10
80003afe:	5c fb       	rol	r11
80003b00:	20 1c       	sub	r12,1
80003b02:	58 0c       	cp.w	r12,0
80003b04:	e0 8a 00 6f 	brle	80003be2 <__avr32_f64_mul_res_subnormal>
80003b08:	e0 4c 07 ff 	cp.w	r12,2047
80003b0c:	e0 84 00 9c 	brge	80003c44 <__avr32_f64_mul_res_inf>
80003b10:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003b14:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003b18:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003b1c:	ee 17 80 00 	eorh	r7,0x8000
80003b20:	f1 b7 04 20 	satu	r7,0x1
80003b24:	0e 0a       	add	r10,r7
80003b26:	5c 0b       	acr	r11
80003b28:	ed be 00 1f 	bld	lr,0x1f
80003b2c:	ef bb 00 1f 	bst	r11,0x1f
80003b30:	d8 22       	popm	r4-r7,pc

80003b32 <__avr32_f64_mul_op1_subnormal>:
80003b32:	e4 1b 00 0f 	andh	r11,0xf
80003b36:	f4 0c 12 00 	clz	r12,r10
80003b3a:	f6 06 12 00 	clz	r6,r11
80003b3e:	f7 bc 03 e1 	sublo	r12,-31
80003b42:	f8 06 17 30 	movlo	r6,r12
80003b46:	f7 b6 02 01 	subhs	r6,1
80003b4a:	e0 46 00 20 	cp.w	r6,32
80003b4e:	c0 d4       	brge	80003b68 <__avr32_f64_mul_op1_subnormal+0x36>
80003b50:	ec 0c 11 20 	rsub	r12,r6,32
80003b54:	f6 06 09 4b 	lsl	r11,r11,r6
80003b58:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003b5c:	18 4b       	or	r11,r12
80003b5e:	f4 06 09 4a 	lsl	r10,r10,r6
80003b62:	20 b6       	sub	r6,11
80003b64:	0c 17       	sub	r7,r6
80003b66:	ca ab       	rjmp	80003aba <__avr32_f64_mul+0x22>
80003b68:	f4 06 09 4b 	lsl	r11,r10,r6
80003b6c:	c6 40       	breq	80003c34 <__avr32_f64_mul_res_zero>
80003b6e:	30 0a       	mov	r10,0
80003b70:	20 b6       	sub	r6,11
80003b72:	0c 17       	sub	r7,r6
80003b74:	ca 3b       	rjmp	80003aba <__avr32_f64_mul+0x22>

80003b76 <__avr32_f64_mul_op2_subnormal>:
80003b76:	e4 19 00 0f 	andh	r9,0xf
80003b7a:	f0 0c 12 00 	clz	r12,r8
80003b7e:	f2 05 12 00 	clz	r5,r9
80003b82:	f7 bc 03 ea 	sublo	r12,-22
80003b86:	f8 05 17 30 	movlo	r5,r12
80003b8a:	f7 b5 02 0a 	subhs	r5,10
80003b8e:	e0 45 00 20 	cp.w	r5,32
80003b92:	c0 d4       	brge	80003bac <__avr32_f64_mul_op2_subnormal+0x36>
80003b94:	ea 0c 11 20 	rsub	r12,r5,32
80003b98:	f2 05 09 49 	lsl	r9,r9,r5
80003b9c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003ba0:	18 49       	or	r9,r12
80003ba2:	f0 05 09 48 	lsl	r8,r8,r5
80003ba6:	20 25       	sub	r5,2
80003ba8:	0a 16       	sub	r6,r5
80003baa:	c8 fb       	rjmp	80003ac8 <__avr32_f64_mul+0x30>
80003bac:	f0 05 09 49 	lsl	r9,r8,r5
80003bb0:	c4 20       	breq	80003c34 <__avr32_f64_mul_res_zero>
80003bb2:	30 08       	mov	r8,0
80003bb4:	20 25       	sub	r5,2
80003bb6:	0a 16       	sub	r6,r5
80003bb8:	c8 8b       	rjmp	80003ac8 <__avr32_f64_mul+0x30>

80003bba <__avr32_f64_mul_op_nan_or_inf>:
80003bba:	e4 19 00 0f 	andh	r9,0xf
80003bbe:	e4 1b 00 0f 	andh	r11,0xf
80003bc2:	14 4b       	or	r11,r10
80003bc4:	10 49       	or	r9,r8
80003bc6:	e0 47 07 ff 	cp.w	r7,2047
80003bca:	c0 91       	brne	80003bdc <__avr32_f64_mul_op1_not_naninf>
80003bcc:	58 0b       	cp.w	r11,0
80003bce:	c3 81       	brne	80003c3e <__avr32_f64_mul_res_nan>
80003bd0:	e0 46 07 ff 	cp.w	r6,2047
80003bd4:	c3 81       	brne	80003c44 <__avr32_f64_mul_res_inf>
80003bd6:	58 09       	cp.w	r9,0
80003bd8:	c3 60       	breq	80003c44 <__avr32_f64_mul_res_inf>
80003bda:	c3 28       	rjmp	80003c3e <__avr32_f64_mul_res_nan>

80003bdc <__avr32_f64_mul_op1_not_naninf>:
80003bdc:	58 09       	cp.w	r9,0
80003bde:	c3 30       	breq	80003c44 <__avr32_f64_mul_res_inf>
80003be0:	c2 f8       	rjmp	80003c3e <__avr32_f64_mul_res_nan>

80003be2 <__avr32_f64_mul_res_subnormal>:
80003be2:	5c 3c       	neg	r12
80003be4:	2f fc       	sub	r12,-1
80003be6:	f1 bc 04 c0 	satu	r12,0x6
80003bea:	e0 4c 00 20 	cp.w	r12,32
80003bee:	c1 14       	brge	80003c10 <__avr32_f64_mul_res_subnormal+0x2e>
80003bf0:	f8 08 11 20 	rsub	r8,r12,32
80003bf4:	0e 46       	or	r6,r7
80003bf6:	ee 0c 0a 47 	lsr	r7,r7,r12
80003bfa:	f4 08 09 49 	lsl	r9,r10,r8
80003bfe:	12 47       	or	r7,r9
80003c00:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003c04:	f6 08 09 49 	lsl	r9,r11,r8
80003c08:	12 4a       	or	r10,r9
80003c0a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003c0e:	c8 3b       	rjmp	80003b14 <__avr32_f64_mul+0x7c>
80003c10:	f8 08 11 20 	rsub	r8,r12,32
80003c14:	f9 b9 00 00 	moveq	r9,0
80003c18:	c0 30       	breq	80003c1e <__avr32_f64_mul_res_subnormal+0x3c>
80003c1a:	f6 08 09 49 	lsl	r9,r11,r8
80003c1e:	0e 46       	or	r6,r7
80003c20:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003c24:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003c28:	f3 ea 10 07 	or	r7,r9,r10
80003c2c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003c30:	30 0b       	mov	r11,0
80003c32:	c7 1b       	rjmp	80003b14 <__avr32_f64_mul+0x7c>

80003c34 <__avr32_f64_mul_res_zero>:
80003c34:	1c 9b       	mov	r11,lr
80003c36:	e6 1b 80 00 	andh	r11,0x8000,COH
80003c3a:	30 0a       	mov	r10,0
80003c3c:	d8 22       	popm	r4-r7,pc

80003c3e <__avr32_f64_mul_res_nan>:
80003c3e:	3f fb       	mov	r11,-1
80003c40:	3f fa       	mov	r10,-1
80003c42:	d8 22       	popm	r4-r7,pc

80003c44 <__avr32_f64_mul_res_inf>:
80003c44:	f0 6b 00 00 	mov	r11,-1048576
80003c48:	ed be 00 1f 	bld	lr,0x1f
80003c4c:	ef bb 00 1f 	bst	r11,0x1f
80003c50:	30 0a       	mov	r10,0
80003c52:	d8 22       	popm	r4-r7,pc

80003c54 <__avr32_f64_mul_op1_zero>:
80003c54:	f7 e9 20 0b 	eor	r11,r11,r9
80003c58:	e6 1b 80 00 	andh	r11,0x8000,COH
80003c5c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003c60:	e0 4c 07 ff 	cp.w	r12,2047
80003c64:	5e 1c       	retne	r12
80003c66:	3f fa       	mov	r10,-1
80003c68:	3f fb       	mov	r11,-1
80003c6a:	5e fc       	retal	r12

80003c6c <__avr32_u32_to_f64>:
80003c6c:	f8 cb 00 00 	sub	r11,r12,0
80003c70:	30 0c       	mov	r12,0
80003c72:	c0 38       	rjmp	80003c78 <__avr32_s32_to_f64+0x4>

80003c74 <__avr32_s32_to_f64>:
80003c74:	18 9b       	mov	r11,r12
80003c76:	5c 4b       	abs	r11
80003c78:	30 0a       	mov	r10,0
80003c7a:	5e 0b       	reteq	r11
80003c7c:	d4 01       	pushm	lr
80003c7e:	e0 69 04 1e 	mov	r9,1054
80003c82:	f6 08 12 00 	clz	r8,r11
80003c86:	c1 70       	breq	80003cb4 <__avr32_s32_to_f64+0x40>
80003c88:	c0 c3       	brcs	80003ca0 <__avr32_s32_to_f64+0x2c>
80003c8a:	f0 0e 11 20 	rsub	lr,r8,32
80003c8e:	f6 08 09 4b 	lsl	r11,r11,r8
80003c92:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003c96:	1c 4b       	or	r11,lr
80003c98:	f4 08 09 4a 	lsl	r10,r10,r8
80003c9c:	10 19       	sub	r9,r8
80003c9e:	c0 b8       	rjmp	80003cb4 <__avr32_s32_to_f64+0x40>
80003ca0:	f4 08 12 00 	clz	r8,r10
80003ca4:	f9 b8 03 00 	movlo	r8,0
80003ca8:	f7 b8 02 e0 	subhs	r8,-32
80003cac:	f4 08 09 4b 	lsl	r11,r10,r8
80003cb0:	30 0a       	mov	r10,0
80003cb2:	10 19       	sub	r9,r8
80003cb4:	58 09       	cp.w	r9,0
80003cb6:	e0 89 00 30 	brgt	80003d16 <__avr32_s32_to_f64+0xa2>
80003cba:	5c 39       	neg	r9
80003cbc:	2f f9       	sub	r9,-1
80003cbe:	e0 49 00 36 	cp.w	r9,54
80003cc2:	c0 43       	brcs	80003cca <__avr32_s32_to_f64+0x56>
80003cc4:	30 0b       	mov	r11,0
80003cc6:	30 0a       	mov	r10,0
80003cc8:	c2 68       	rjmp	80003d14 <__avr32_s32_to_f64+0xa0>
80003cca:	2f 69       	sub	r9,-10
80003ccc:	f2 08 11 20 	rsub	r8,r9,32
80003cd0:	e0 49 00 20 	cp.w	r9,32
80003cd4:	c0 b2       	brcc	80003cea <__avr32_s32_to_f64+0x76>
80003cd6:	f4 08 09 4e 	lsl	lr,r10,r8
80003cda:	f6 08 09 48 	lsl	r8,r11,r8
80003cde:	f4 09 0a 4a 	lsr	r10,r10,r9
80003ce2:	f6 09 0a 4b 	lsr	r11,r11,r9
80003ce6:	10 4b       	or	r11,r8
80003ce8:	c0 88       	rjmp	80003cf8 <__avr32_s32_to_f64+0x84>
80003cea:	f6 08 09 4e 	lsl	lr,r11,r8
80003cee:	14 4e       	or	lr,r10
80003cf0:	16 9a       	mov	r10,r11
80003cf2:	30 0b       	mov	r11,0
80003cf4:	f4 09 0a 4a 	lsr	r10,r10,r9
80003cf8:	ed ba 00 00 	bld	r10,0x0
80003cfc:	c0 92       	brcc	80003d0e <__avr32_s32_to_f64+0x9a>
80003cfe:	1c 7e       	tst	lr,lr
80003d00:	c0 41       	brne	80003d08 <__avr32_s32_to_f64+0x94>
80003d02:	ed ba 00 01 	bld	r10,0x1
80003d06:	c0 42       	brcc	80003d0e <__avr32_s32_to_f64+0x9a>
80003d08:	2f fa       	sub	r10,-1
80003d0a:	f7 bb 02 ff 	subhs	r11,-1
80003d0e:	5c fc       	rol	r12
80003d10:	5d 0b       	ror	r11
80003d12:	5d 0a       	ror	r10
80003d14:	d8 02       	popm	pc
80003d16:	e0 68 03 ff 	mov	r8,1023
80003d1a:	ed ba 00 0b 	bld	r10,0xb
80003d1e:	f7 b8 00 ff 	subeq	r8,-1
80003d22:	10 0a       	add	r10,r8
80003d24:	5c 0b       	acr	r11
80003d26:	f7 b9 03 fe 	sublo	r9,-2
80003d2a:	e0 49 07 ff 	cp.w	r9,2047
80003d2e:	c0 55       	brlt	80003d38 <__avr32_s32_to_f64+0xc4>
80003d30:	30 0a       	mov	r10,0
80003d32:	fc 1b ff e0 	movh	r11,0xffe0
80003d36:	c0 c8       	rjmp	80003d4e <__floatsidf_return_op1>
80003d38:	ed bb 00 1f 	bld	r11,0x1f
80003d3c:	f7 b9 01 01 	subne	r9,1
80003d40:	ab 9a       	lsr	r10,0xb
80003d42:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003d46:	a1 7b       	lsl	r11,0x1
80003d48:	ab 9b       	lsr	r11,0xb
80003d4a:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003d4e <__floatsidf_return_op1>:
80003d4e:	a1 7c       	lsl	r12,0x1
80003d50:	5d 0b       	ror	r11
80003d52:	d8 02       	popm	pc

80003d54 <__avr32_f32_to_f64>:
80003d54:	f8 0b 15 01 	lsl	r11,r12,0x1
80003d58:	f9 ba 00 00 	moveq	r10,0
80003d5c:	5e 0b       	reteq	r11
80003d5e:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003d62:	e0 49 00 ff 	cp.w	r9,255
80003d66:	c1 e0       	breq	80003da2 <__extendsfdf_return_op1+0x6>
80003d68:	a7 7b       	lsl	r11,0x7
80003d6a:	30 0a       	mov	r10,0
80003d6c:	58 09       	cp.w	r9,0
80003d6e:	f7 b9 00 ff 	subeq	r9,-1
80003d72:	5f 18       	srne	r8
80003d74:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003d78:	fe 39 fc 80 	sub	r9,-896
80003d7c:	f6 08 12 00 	clz	r8,r11
80003d80:	10 19       	sub	r9,r8
80003d82:	f6 08 09 4b 	lsl	r11,r11,r8
80003d86:	ed bb 00 1f 	bld	r11,0x1f
80003d8a:	f7 b9 01 01 	subne	r9,1
80003d8e:	ab 9a       	lsr	r10,0xb
80003d90:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003d94:	a1 7b       	lsl	r11,0x1
80003d96:	ab 9b       	lsr	r11,0xb
80003d98:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003d9c <__extendsfdf_return_op1>:
80003d9c:	a1 7c       	lsl	r12,0x1
80003d9e:	5d 0b       	ror	r11
80003da0:	5e fb       	retal	r11
80003da2:	fc 1a ff e0 	movh	r10,0xffe0
80003da6:	a9 6b       	lsl	r11,0x8
80003da8:	f9 bb 01 ff 	movne	r11,-1
80003dac:	f4 0b 17 00 	moveq	r11,r10
80003db0:	30 0a       	mov	r10,0
80003db2:	cf 5b       	rjmp	80003d9c <__extendsfdf_return_op1>

80003db4 <__avr32_f64_to_f32>:
80003db4:	f6 09 15 01 	lsl	r9,r11,0x1
80003db8:	b5 99       	lsr	r9,0x15
80003dba:	5e 0d       	reteq	0
80003dbc:	f6 08 15 0a 	lsl	r8,r11,0xa
80003dc0:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003dc4:	ab 6a       	lsl	r10,0xa
80003dc6:	5c 3a       	neg	r10
80003dc8:	5c fc       	rol	r12
80003dca:	e0 49 07 ff 	cp.w	r9,2047
80003dce:	c1 a0       	breq	80003e02 <__truncdfsf_return_op1+0x6>
80003dd0:	e0 29 03 80 	sub	r9,896
80003dd4:	bf bc       	sbr	r12,0x1f
80003dd6:	58 09       	cp.w	r9,0
80003dd8:	e0 8a 00 1a 	brle	80003e0c <__truncdfsf_return_op1+0x10>
80003ddc:	37 fa       	mov	r10,127
80003dde:	ed bc 00 08 	bld	r12,0x8
80003de2:	f7 ba 00 ff 	subeq	r10,-1
80003de6:	14 0c       	add	r12,r10
80003de8:	f7 b9 03 fe 	sublo	r9,-2
80003dec:	ed bc 00 1f 	bld	r12,0x1f
80003df0:	f7 b9 01 01 	subne	r9,1
80003df4:	f8 0c 16 07 	lsr	r12,r12,0x7
80003df8:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003dfc <__truncdfsf_return_op1>:
80003dfc:	a1 7b       	lsl	r11,0x1
80003dfe:	5d 0c       	ror	r12
80003e00:	5e fc       	retal	r12
80003e02:	bf dc       	cbr	r12,0x1f
80003e04:	5e 1e       	retne	-1
80003e06:	fc 1c 7f 80 	movh	r12,0x7f80
80003e0a:	5e fc       	retal	r12
80003e0c:	f2 09 11 01 	rsub	r9,r9,1
80003e10:	59 99       	cp.w	r9,25
80003e12:	f9 bc 02 00 	movhs	r12,0
80003e16:	c1 32       	brcc	80003e3c <__truncdfsf_return_op1+0x40>
80003e18:	f2 0a 11 20 	rsub	r10,r9,32
80003e1c:	f8 0a 09 4a 	lsl	r10,r12,r10
80003e20:	5f 1a       	srne	r10
80003e22:	f8 09 0a 4c 	lsr	r12,r12,r9
80003e26:	14 4c       	or	r12,r10
80003e28:	37 fa       	mov	r10,127
80003e2a:	ed bc 00 08 	bld	r12,0x8
80003e2e:	f7 ba 00 ff 	subeq	r10,-1
80003e32:	14 0c       	add	r12,r10
80003e34:	f8 0c 16 07 	lsr	r12,r12,0x7
80003e38:	a1 7b       	lsl	r11,0x1
80003e3a:	5d 0c       	ror	r12
80003e3c:	5e fc       	retal	r12

80003e3e <__avr32_udiv64>:
80003e3e:	d4 31       	pushm	r0-r7,lr
80003e40:	1a 97       	mov	r7,sp
80003e42:	20 3d       	sub	sp,12
80003e44:	10 9c       	mov	r12,r8
80003e46:	12 9e       	mov	lr,r9
80003e48:	14 93       	mov	r3,r10
80003e4a:	58 09       	cp.w	r9,0
80003e4c:	e0 81 00 bd 	brne	80003fc6 <__avr32_udiv64+0x188>
80003e50:	16 38       	cp.w	r8,r11
80003e52:	e0 88 00 40 	brls	80003ed2 <__avr32_udiv64+0x94>
80003e56:	f0 08 12 00 	clz	r8,r8
80003e5a:	c0 d0       	breq	80003e74 <__avr32_udiv64+0x36>
80003e5c:	f6 08 09 4b 	lsl	r11,r11,r8
80003e60:	f0 09 11 20 	rsub	r9,r8,32
80003e64:	f8 08 09 4c 	lsl	r12,r12,r8
80003e68:	f4 09 0a 49 	lsr	r9,r10,r9
80003e6c:	f4 08 09 43 	lsl	r3,r10,r8
80003e70:	f3 eb 10 0b 	or	r11,r9,r11
80003e74:	f8 0e 16 10 	lsr	lr,r12,0x10
80003e78:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003e7c:	f6 0e 0d 00 	divu	r0,r11,lr
80003e80:	e6 0b 16 10 	lsr	r11,r3,0x10
80003e84:	00 99       	mov	r9,r0
80003e86:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003e8a:	e0 0a 02 48 	mul	r8,r0,r10
80003e8e:	10 3b       	cp.w	r11,r8
80003e90:	c0 a2       	brcc	80003ea4 <__avr32_udiv64+0x66>
80003e92:	20 19       	sub	r9,1
80003e94:	18 0b       	add	r11,r12
80003e96:	18 3b       	cp.w	r11,r12
80003e98:	c0 63       	brcs	80003ea4 <__avr32_udiv64+0x66>
80003e9a:	10 3b       	cp.w	r11,r8
80003e9c:	f7 b9 03 01 	sublo	r9,1
80003ea0:	f7 dc e3 0b 	addcs	r11,r11,r12
80003ea4:	f6 08 01 01 	sub	r1,r11,r8
80003ea8:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003eac:	e2 0e 0d 00 	divu	r0,r1,lr
80003eb0:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003eb4:	00 98       	mov	r8,r0
80003eb6:	e0 0a 02 4a 	mul	r10,r0,r10
80003eba:	14 33       	cp.w	r3,r10
80003ebc:	c0 82       	brcc	80003ecc <__avr32_udiv64+0x8e>
80003ebe:	20 18       	sub	r8,1
80003ec0:	18 03       	add	r3,r12
80003ec2:	18 33       	cp.w	r3,r12
80003ec4:	c0 43       	brcs	80003ecc <__avr32_udiv64+0x8e>
80003ec6:	14 33       	cp.w	r3,r10
80003ec8:	f7 b8 03 01 	sublo	r8,1
80003ecc:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003ed0:	cd f8       	rjmp	8000408e <__avr32_udiv64+0x250>
80003ed2:	58 08       	cp.w	r8,0
80003ed4:	c0 51       	brne	80003ede <__avr32_udiv64+0xa0>
80003ed6:	30 19       	mov	r9,1
80003ed8:	f2 08 0d 08 	divu	r8,r9,r8
80003edc:	10 9c       	mov	r12,r8
80003ede:	f8 06 12 00 	clz	r6,r12
80003ee2:	c0 41       	brne	80003eea <__avr32_udiv64+0xac>
80003ee4:	18 1b       	sub	r11,r12
80003ee6:	30 19       	mov	r9,1
80003ee8:	c4 08       	rjmp	80003f68 <__avr32_udiv64+0x12a>
80003eea:	ec 01 11 20 	rsub	r1,r6,32
80003eee:	f4 01 0a 49 	lsr	r9,r10,r1
80003ef2:	f8 06 09 4c 	lsl	r12,r12,r6
80003ef6:	f6 06 09 48 	lsl	r8,r11,r6
80003efa:	f6 01 0a 41 	lsr	r1,r11,r1
80003efe:	f3 e8 10 08 	or	r8,r9,r8
80003f02:	f8 03 16 10 	lsr	r3,r12,0x10
80003f06:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003f0a:	e2 03 0d 00 	divu	r0,r1,r3
80003f0e:	f0 0b 16 10 	lsr	r11,r8,0x10
80003f12:	00 9e       	mov	lr,r0
80003f14:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003f18:	e0 05 02 49 	mul	r9,r0,r5
80003f1c:	12 3b       	cp.w	r11,r9
80003f1e:	c0 a2       	brcc	80003f32 <__avr32_udiv64+0xf4>
80003f20:	20 1e       	sub	lr,1
80003f22:	18 0b       	add	r11,r12
80003f24:	18 3b       	cp.w	r11,r12
80003f26:	c0 63       	brcs	80003f32 <__avr32_udiv64+0xf4>
80003f28:	12 3b       	cp.w	r11,r9
80003f2a:	f7 be 03 01 	sublo	lr,1
80003f2e:	f7 dc e3 0b 	addcs	r11,r11,r12
80003f32:	12 1b       	sub	r11,r9
80003f34:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003f38:	f6 03 0d 02 	divu	r2,r11,r3
80003f3c:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003f40:	04 99       	mov	r9,r2
80003f42:	e4 05 02 4b 	mul	r11,r2,r5
80003f46:	16 38       	cp.w	r8,r11
80003f48:	c0 a2       	brcc	80003f5c <__avr32_udiv64+0x11e>
80003f4a:	20 19       	sub	r9,1
80003f4c:	18 08       	add	r8,r12
80003f4e:	18 38       	cp.w	r8,r12
80003f50:	c0 63       	brcs	80003f5c <__avr32_udiv64+0x11e>
80003f52:	16 38       	cp.w	r8,r11
80003f54:	f7 b9 03 01 	sublo	r9,1
80003f58:	f1 dc e3 08 	addcs	r8,r8,r12
80003f5c:	f4 06 09 43 	lsl	r3,r10,r6
80003f60:	f0 0b 01 0b 	sub	r11,r8,r11
80003f64:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003f68:	f8 06 16 10 	lsr	r6,r12,0x10
80003f6c:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003f70:	f6 06 0d 00 	divu	r0,r11,r6
80003f74:	e6 0b 16 10 	lsr	r11,r3,0x10
80003f78:	00 9a       	mov	r10,r0
80003f7a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003f7e:	e0 0e 02 48 	mul	r8,r0,lr
80003f82:	10 3b       	cp.w	r11,r8
80003f84:	c0 a2       	brcc	80003f98 <__avr32_udiv64+0x15a>
80003f86:	20 1a       	sub	r10,1
80003f88:	18 0b       	add	r11,r12
80003f8a:	18 3b       	cp.w	r11,r12
80003f8c:	c0 63       	brcs	80003f98 <__avr32_udiv64+0x15a>
80003f8e:	10 3b       	cp.w	r11,r8
80003f90:	f7 ba 03 01 	sublo	r10,1
80003f94:	f7 dc e3 0b 	addcs	r11,r11,r12
80003f98:	f6 08 01 01 	sub	r1,r11,r8
80003f9c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003fa0:	e2 06 0d 00 	divu	r0,r1,r6
80003fa4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003fa8:	00 98       	mov	r8,r0
80003faa:	e0 0e 02 4b 	mul	r11,r0,lr
80003fae:	16 33       	cp.w	r3,r11
80003fb0:	c0 82       	brcc	80003fc0 <__avr32_udiv64+0x182>
80003fb2:	20 18       	sub	r8,1
80003fb4:	18 03       	add	r3,r12
80003fb6:	18 33       	cp.w	r3,r12
80003fb8:	c0 43       	brcs	80003fc0 <__avr32_udiv64+0x182>
80003fba:	16 33       	cp.w	r3,r11
80003fbc:	f7 b8 03 01 	sublo	r8,1
80003fc0:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003fc4:	c6 98       	rjmp	80004096 <__avr32_udiv64+0x258>
80003fc6:	16 39       	cp.w	r9,r11
80003fc8:	e0 8b 00 65 	brhi	80004092 <__avr32_udiv64+0x254>
80003fcc:	f2 09 12 00 	clz	r9,r9
80003fd0:	c0 b1       	brne	80003fe6 <__avr32_udiv64+0x1a8>
80003fd2:	10 3a       	cp.w	r10,r8
80003fd4:	5f 2a       	srhs	r10
80003fd6:	1c 3b       	cp.w	r11,lr
80003fd8:	5f b8       	srhi	r8
80003fda:	10 4a       	or	r10,r8
80003fdc:	f2 0a 18 00 	cp.b	r10,r9
80003fe0:	c5 90       	breq	80004092 <__avr32_udiv64+0x254>
80003fe2:	30 18       	mov	r8,1
80003fe4:	c5 98       	rjmp	80004096 <__avr32_udiv64+0x258>
80003fe6:	f0 09 09 46 	lsl	r6,r8,r9
80003fea:	f2 03 11 20 	rsub	r3,r9,32
80003fee:	fc 09 09 4e 	lsl	lr,lr,r9
80003ff2:	f0 03 0a 48 	lsr	r8,r8,r3
80003ff6:	f6 09 09 4c 	lsl	r12,r11,r9
80003ffa:	f4 03 0a 42 	lsr	r2,r10,r3
80003ffe:	ef 46 ff f4 	st.w	r7[-12],r6
80004002:	f6 03 0a 43 	lsr	r3,r11,r3
80004006:	18 42       	or	r2,r12
80004008:	f1 ee 10 0c 	or	r12,r8,lr
8000400c:	f8 01 16 10 	lsr	r1,r12,0x10
80004010:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80004014:	e6 01 0d 04 	divu	r4,r3,r1
80004018:	e4 03 16 10 	lsr	r3,r2,0x10
8000401c:	08 9e       	mov	lr,r4
8000401e:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80004022:	e8 06 02 48 	mul	r8,r4,r6
80004026:	10 33       	cp.w	r3,r8
80004028:	c0 a2       	brcc	8000403c <__avr32_udiv64+0x1fe>
8000402a:	20 1e       	sub	lr,1
8000402c:	18 03       	add	r3,r12
8000402e:	18 33       	cp.w	r3,r12
80004030:	c0 63       	brcs	8000403c <__avr32_udiv64+0x1fe>
80004032:	10 33       	cp.w	r3,r8
80004034:	f7 be 03 01 	sublo	lr,1
80004038:	e7 dc e3 03 	addcs	r3,r3,r12
8000403c:	10 13       	sub	r3,r8
8000403e:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80004042:	e6 01 0d 00 	divu	r0,r3,r1
80004046:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000404a:	00 98       	mov	r8,r0
8000404c:	e0 06 02 46 	mul	r6,r0,r6
80004050:	0c 3b       	cp.w	r11,r6
80004052:	c0 a2       	brcc	80004066 <__avr32_udiv64+0x228>
80004054:	20 18       	sub	r8,1
80004056:	18 0b       	add	r11,r12
80004058:	18 3b       	cp.w	r11,r12
8000405a:	c0 63       	brcs	80004066 <__avr32_udiv64+0x228>
8000405c:	0c 3b       	cp.w	r11,r6
8000405e:	f7 dc e3 0b 	addcs	r11,r11,r12
80004062:	f7 b8 03 01 	sublo	r8,1
80004066:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000406a:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000406e:	0c 1b       	sub	r11,r6
80004070:	f0 04 06 42 	mulu.d	r2,r8,r4
80004074:	06 95       	mov	r5,r3
80004076:	16 35       	cp.w	r5,r11
80004078:	e0 8b 00 0a 	brhi	8000408c <__avr32_udiv64+0x24e>
8000407c:	5f 0b       	sreq	r11
8000407e:	f4 09 09 49 	lsl	r9,r10,r9
80004082:	12 32       	cp.w	r2,r9
80004084:	5f b9       	srhi	r9
80004086:	f7 e9 00 09 	and	r9,r11,r9
8000408a:	c0 60       	breq	80004096 <__avr32_udiv64+0x258>
8000408c:	20 18       	sub	r8,1
8000408e:	30 09       	mov	r9,0
80004090:	c0 38       	rjmp	80004096 <__avr32_udiv64+0x258>
80004092:	30 09       	mov	r9,0
80004094:	12 98       	mov	r8,r9
80004096:	10 9a       	mov	r10,r8
80004098:	12 93       	mov	r3,r9
8000409a:	10 92       	mov	r2,r8
8000409c:	12 9b       	mov	r11,r9
8000409e:	2f dd       	sub	sp,-12
800040a0:	d8 32       	popm	r0-r7,pc

800040a2 <memcpy>:
800040a2:	58 8a       	cp.w	r10,8
800040a4:	c2 f5       	brlt	80004102 <memcpy+0x60>
800040a6:	f9 eb 10 09 	or	r9,r12,r11
800040aa:	e2 19 00 03 	andl	r9,0x3,COH
800040ae:	e0 81 00 97 	brne	800041dc <memcpy+0x13a>
800040b2:	e0 4a 00 20 	cp.w	r10,32
800040b6:	c3 b4       	brge	8000412c <memcpy+0x8a>
800040b8:	f4 08 14 02 	asr	r8,r10,0x2
800040bc:	f0 09 11 08 	rsub	r9,r8,8
800040c0:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800040c4:	76 69       	ld.w	r9,r11[0x18]
800040c6:	99 69       	st.w	r12[0x18],r9
800040c8:	76 59       	ld.w	r9,r11[0x14]
800040ca:	99 59       	st.w	r12[0x14],r9
800040cc:	76 49       	ld.w	r9,r11[0x10]
800040ce:	99 49       	st.w	r12[0x10],r9
800040d0:	76 39       	ld.w	r9,r11[0xc]
800040d2:	99 39       	st.w	r12[0xc],r9
800040d4:	76 29       	ld.w	r9,r11[0x8]
800040d6:	99 29       	st.w	r12[0x8],r9
800040d8:	76 19       	ld.w	r9,r11[0x4]
800040da:	99 19       	st.w	r12[0x4],r9
800040dc:	76 09       	ld.w	r9,r11[0x0]
800040de:	99 09       	st.w	r12[0x0],r9
800040e0:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800040e4:	f8 08 00 28 	add	r8,r12,r8<<0x2
800040e8:	e0 1a 00 03 	andl	r10,0x3
800040ec:	f4 0a 11 04 	rsub	r10,r10,4
800040f0:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800040f4:	17 a9       	ld.ub	r9,r11[0x2]
800040f6:	b0 a9       	st.b	r8[0x2],r9
800040f8:	17 99       	ld.ub	r9,r11[0x1]
800040fa:	b0 99       	st.b	r8[0x1],r9
800040fc:	17 89       	ld.ub	r9,r11[0x0]
800040fe:	b0 89       	st.b	r8[0x0],r9
80004100:	5e fc       	retal	r12
80004102:	f4 0a 11 09 	rsub	r10,r10,9
80004106:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000410a:	17 f9       	ld.ub	r9,r11[0x7]
8000410c:	b8 f9       	st.b	r12[0x7],r9
8000410e:	17 e9       	ld.ub	r9,r11[0x6]
80004110:	b8 e9       	st.b	r12[0x6],r9
80004112:	17 d9       	ld.ub	r9,r11[0x5]
80004114:	b8 d9       	st.b	r12[0x5],r9
80004116:	17 c9       	ld.ub	r9,r11[0x4]
80004118:	b8 c9       	st.b	r12[0x4],r9
8000411a:	17 b9       	ld.ub	r9,r11[0x3]
8000411c:	b8 b9       	st.b	r12[0x3],r9
8000411e:	17 a9       	ld.ub	r9,r11[0x2]
80004120:	b8 a9       	st.b	r12[0x2],r9
80004122:	17 99       	ld.ub	r9,r11[0x1]
80004124:	b8 99       	st.b	r12[0x1],r9
80004126:	17 89       	ld.ub	r9,r11[0x0]
80004128:	b8 89       	st.b	r12[0x0],r9
8000412a:	5e fc       	retal	r12
8000412c:	eb cd 40 c0 	pushm	r6-r7,lr
80004130:	18 99       	mov	r9,r12
80004132:	22 0a       	sub	r10,32
80004134:	b7 07       	ld.d	r6,r11++
80004136:	b3 26       	st.d	r9++,r6
80004138:	b7 07       	ld.d	r6,r11++
8000413a:	b3 26       	st.d	r9++,r6
8000413c:	b7 07       	ld.d	r6,r11++
8000413e:	b3 26       	st.d	r9++,r6
80004140:	b7 07       	ld.d	r6,r11++
80004142:	b3 26       	st.d	r9++,r6
80004144:	22 0a       	sub	r10,32
80004146:	cf 74       	brge	80004134 <memcpy+0x92>
80004148:	2f 0a       	sub	r10,-16
8000414a:	c0 65       	brlt	80004156 <memcpy+0xb4>
8000414c:	b7 07       	ld.d	r6,r11++
8000414e:	b3 26       	st.d	r9++,r6
80004150:	b7 07       	ld.d	r6,r11++
80004152:	b3 26       	st.d	r9++,r6
80004154:	21 0a       	sub	r10,16
80004156:	5c 3a       	neg	r10
80004158:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000415c:	d7 03       	nop
8000415e:	d7 03       	nop
80004160:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004164:	f3 66 00 0e 	st.b	r9[14],r6
80004168:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000416c:	f3 66 00 0d 	st.b	r9[13],r6
80004170:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004174:	f3 66 00 0c 	st.b	r9[12],r6
80004178:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000417c:	f3 66 00 0b 	st.b	r9[11],r6
80004180:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004184:	f3 66 00 0a 	st.b	r9[10],r6
80004188:	f7 36 00 09 	ld.ub	r6,r11[9]
8000418c:	f3 66 00 09 	st.b	r9[9],r6
80004190:	f7 36 00 08 	ld.ub	r6,r11[8]
80004194:	f3 66 00 08 	st.b	r9[8],r6
80004198:	f7 36 00 07 	ld.ub	r6,r11[7]
8000419c:	f3 66 00 07 	st.b	r9[7],r6
800041a0:	f7 36 00 06 	ld.ub	r6,r11[6]
800041a4:	f3 66 00 06 	st.b	r9[6],r6
800041a8:	f7 36 00 05 	ld.ub	r6,r11[5]
800041ac:	f3 66 00 05 	st.b	r9[5],r6
800041b0:	f7 36 00 04 	ld.ub	r6,r11[4]
800041b4:	f3 66 00 04 	st.b	r9[4],r6
800041b8:	f7 36 00 03 	ld.ub	r6,r11[3]
800041bc:	f3 66 00 03 	st.b	r9[3],r6
800041c0:	f7 36 00 02 	ld.ub	r6,r11[2]
800041c4:	f3 66 00 02 	st.b	r9[2],r6
800041c8:	f7 36 00 01 	ld.ub	r6,r11[1]
800041cc:	f3 66 00 01 	st.b	r9[1],r6
800041d0:	f7 36 00 00 	ld.ub	r6,r11[0]
800041d4:	f3 66 00 00 	st.b	r9[0],r6
800041d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800041dc:	20 1a       	sub	r10,1
800041de:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800041e2:	f8 0a 0b 09 	st.b	r12[r10],r9
800041e6:	cf b1       	brne	800041dc <memcpy+0x13a>
800041e8:	5e fc       	retal	r12

800041ea <memset>:
800041ea:	18 98       	mov	r8,r12
800041ec:	c0 38       	rjmp	800041f2 <memset+0x8>
800041ee:	10 cb       	st.b	r8++,r11
800041f0:	20 1a       	sub	r10,1
800041f2:	58 0a       	cp.w	r10,0
800041f4:	cf d1       	brne	800041ee <memset+0x4>
800041f6:	5e fc       	retal	r12

800041f8 <sprintf>:
800041f8:	d4 01       	pushm	lr
800041fa:	21 7d       	sub	sp,92
800041fc:	e0 68 ff ff 	mov	r8,65535
80004200:	ea 18 7f ff 	orh	r8,0x7fff
80004204:	50 58       	stdsp	sp[0x14],r8
80004206:	50 28       	stdsp	sp[0x8],r8
80004208:	e0 68 02 08 	mov	r8,520
8000420c:	ba 68       	st.h	sp[0xc],r8
8000420e:	3f f8       	mov	r8,-1
80004210:	ba 78       	st.h	sp[0xe],r8
80004212:	e0 68 01 18 	mov	r8,280
80004216:	50 4c       	stdsp	sp[0x10],r12
80004218:	16 9a       	mov	r10,r11
8000421a:	50 0c       	stdsp	sp[0x0],r12
8000421c:	fa c9 ff a0 	sub	r9,sp,-96
80004220:	70 0c       	ld.w	r12,r8[0x0]
80004222:	1a 9b       	mov	r11,sp
80004224:	c9 cd       	rcall	8000455c <_vfprintf_r>
80004226:	30 09       	mov	r9,0
80004228:	40 08       	lddsp	r8,sp[0x0]
8000422a:	b0 89       	st.b	r8[0x0],r9
8000422c:	2e 9d       	sub	sp,-92
8000422e:	d8 02       	popm	pc

80004230 <get_arg>:
80004230:	d4 31       	pushm	r0-r7,lr
80004232:	20 8d       	sub	sp,32
80004234:	fa c4 ff bc 	sub	r4,sp,-68
80004238:	50 4b       	stdsp	sp[0x10],r11
8000423a:	68 2e       	ld.w	lr,r4[0x8]
8000423c:	50 58       	stdsp	sp[0x14],r8
8000423e:	12 96       	mov	r6,r9
80004240:	7c 0b       	ld.w	r11,lr[0x0]
80004242:	70 05       	ld.w	r5,r8[0x0]
80004244:	50 6e       	stdsp	sp[0x18],lr
80004246:	58 0b       	cp.w	r11,0
80004248:	f4 0b 17 00 	moveq	r11,r10
8000424c:	68 03       	ld.w	r3,r4[0x0]
8000424e:	68 11       	ld.w	r1,r4[0x4]
80004250:	40 49       	lddsp	r9,sp[0x10]
80004252:	30 08       	mov	r8,0
80004254:	c2 69       	rjmp	800044a0 <get_arg+0x270>
80004256:	2f fb       	sub	r11,-1
80004258:	32 5c       	mov	r12,37
8000425a:	17 8a       	ld.ub	r10,r11[0x0]
8000425c:	f8 0a 18 00 	cp.b	r10,r12
80004260:	5f 1e       	srne	lr
80004262:	f0 0a 18 00 	cp.b	r10,r8
80004266:	5f 1c       	srne	r12
80004268:	fd ec 00 0c 	and	r12,lr,r12
8000426c:	f0 0c 18 00 	cp.b	r12,r8
80004270:	cf 31       	brne	80004256 <get_arg+0x26>
80004272:	58 0a       	cp.w	r10,0
80004274:	e0 80 01 23 	breq	800044ba <get_arg+0x28a>
80004278:	30 0c       	mov	r12,0
8000427a:	3f fa       	mov	r10,-1
8000427c:	18 90       	mov	r0,r12
8000427e:	50 3a       	stdsp	sp[0xc],r10
80004280:	18 94       	mov	r4,r12
80004282:	18 92       	mov	r2,r12
80004284:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80004288:	16 97       	mov	r7,r11
8000428a:	50 7c       	stdsp	sp[0x1c],r12
8000428c:	fe cc a2 a0 	sub	r12,pc,-23904
80004290:	0f 3a       	ld.ub	r10,r7++
80004292:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80004296:	40 7c       	lddsp	r12,sp[0x1c]
80004298:	1c 0c       	add	r12,lr
8000429a:	fe ce a3 76 	sub	lr,pc,-23690
8000429e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800042a2:	20 1e       	sub	lr,1
800042a4:	50 0e       	stdsp	sp[0x0],lr
800042a6:	fe ce a3 ee 	sub	lr,pc,-23570
800042aa:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800042ae:	50 7c       	stdsp	sp[0x1c],r12
800042b0:	40 0c       	lddsp	r12,sp[0x0]
800042b2:	58 7c       	cp.w	r12,7
800042b4:	e0 8b 00 ef 	brhi	80004492 <get_arg+0x262>
800042b8:	fe ce a5 a0 	sub	lr,pc,-23136
800042bc:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800042c0:	36 8b       	mov	r11,104
800042c2:	f6 0a 18 00 	cp.b	r10,r11
800042c6:	e0 80 00 e6 	breq	80004492 <get_arg+0x262>
800042ca:	37 1b       	mov	r11,113
800042cc:	f6 0a 18 00 	cp.b	r10,r11
800042d0:	c0 70       	breq	800042de <get_arg+0xae>
800042d2:	34 cb       	mov	r11,76
800042d4:	f6 0a 18 00 	cp.b	r10,r11
800042d8:	c0 51       	brne	800042e2 <get_arg+0xb2>
800042da:	a3 b4       	sbr	r4,0x3
800042dc:	cd b8       	rjmp	80004492 <get_arg+0x262>
800042de:	a5 b4       	sbr	r4,0x5
800042e0:	cd 98       	rjmp	80004492 <get_arg+0x262>
800042e2:	08 9a       	mov	r10,r4
800042e4:	0e 9b       	mov	r11,r7
800042e6:	a5 aa       	sbr	r10,0x4
800042e8:	17 3c       	ld.ub	r12,r11++
800042ea:	a5 b4       	sbr	r4,0x5
800042ec:	36 ce       	mov	lr,108
800042ee:	fc 0c 18 00 	cp.b	r12,lr
800042f2:	e0 80 00 d1 	breq	80004494 <get_arg+0x264>
800042f6:	14 94       	mov	r4,r10
800042f8:	cc d8       	rjmp	80004492 <get_arg+0x262>
800042fa:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800042fe:	36 7c       	mov	r12,103
80004300:	f8 0a 18 00 	cp.b	r10,r12
80004304:	e0 8b 00 27 	brhi	80004352 <get_arg+0x122>
80004308:	36 5b       	mov	r11,101
8000430a:	f6 0a 18 00 	cp.b	r10,r11
8000430e:	c4 82       	brcc	8000439e <get_arg+0x16e>
80004310:	34 fb       	mov	r11,79
80004312:	f6 0a 18 00 	cp.b	r10,r11
80004316:	c4 80       	breq	800043a6 <get_arg+0x176>
80004318:	e0 8b 00 0c 	brhi	80004330 <get_arg+0x100>
8000431c:	34 5b       	mov	r11,69
8000431e:	f6 0a 18 00 	cp.b	r10,r11
80004322:	c3 e0       	breq	8000439e <get_arg+0x16e>
80004324:	34 7b       	mov	r11,71
80004326:	f6 0a 18 00 	cp.b	r10,r11
8000432a:	c3 a0       	breq	8000439e <get_arg+0x16e>
8000432c:	34 4b       	mov	r11,68
8000432e:	c0 88       	rjmp	8000433e <get_arg+0x10e>
80004330:	35 8b       	mov	r11,88
80004332:	f6 0a 18 00 	cp.b	r10,r11
80004336:	c2 c0       	breq	8000438e <get_arg+0x15e>
80004338:	e0 8b 00 07 	brhi	80004346 <get_arg+0x116>
8000433c:	35 5b       	mov	r11,85
8000433e:	f6 0a 18 00 	cp.b	r10,r11
80004342:	c3 51       	brne	800043ac <get_arg+0x17c>
80004344:	c3 18       	rjmp	800043a6 <get_arg+0x176>
80004346:	36 3b       	mov	r11,99
80004348:	f6 0a 18 00 	cp.b	r10,r11
8000434c:	c2 f0       	breq	800043aa <get_arg+0x17a>
8000434e:	36 4b       	mov	r11,100
80004350:	c0 e8       	rjmp	8000436c <get_arg+0x13c>
80004352:	37 0b       	mov	r11,112
80004354:	f6 0a 18 00 	cp.b	r10,r11
80004358:	c2 50       	breq	800043a2 <get_arg+0x172>
8000435a:	e0 8b 00 0d 	brhi	80004374 <get_arg+0x144>
8000435e:	36 eb       	mov	r11,110
80004360:	f6 0a 18 00 	cp.b	r10,r11
80004364:	c1 f0       	breq	800043a2 <get_arg+0x172>
80004366:	e0 8b 00 14 	brhi	8000438e <get_arg+0x15e>
8000436a:	36 9b       	mov	r11,105
8000436c:	f6 0a 18 00 	cp.b	r10,r11
80004370:	c1 e1       	brne	800043ac <get_arg+0x17c>
80004372:	c0 e8       	rjmp	8000438e <get_arg+0x15e>
80004374:	37 5b       	mov	r11,117
80004376:	f6 0a 18 00 	cp.b	r10,r11
8000437a:	c0 a0       	breq	8000438e <get_arg+0x15e>
8000437c:	37 8b       	mov	r11,120
8000437e:	f6 0a 18 00 	cp.b	r10,r11
80004382:	c0 60       	breq	8000438e <get_arg+0x15e>
80004384:	37 3b       	mov	r11,115
80004386:	f6 0a 18 00 	cp.b	r10,r11
8000438a:	c1 11       	brne	800043ac <get_arg+0x17c>
8000438c:	c0 b8       	rjmp	800043a2 <get_arg+0x172>
8000438e:	ed b4 00 04 	bld	r4,0x4
80004392:	c0 a0       	breq	800043a6 <get_arg+0x176>
80004394:	ed b4 00 05 	bld	r4,0x5
80004398:	c0 91       	brne	800043aa <get_arg+0x17a>
8000439a:	30 20       	mov	r0,2
8000439c:	c0 88       	rjmp	800043ac <get_arg+0x17c>
8000439e:	30 40       	mov	r0,4
800043a0:	c0 68       	rjmp	800043ac <get_arg+0x17c>
800043a2:	30 30       	mov	r0,3
800043a4:	c0 48       	rjmp	800043ac <get_arg+0x17c>
800043a6:	30 10       	mov	r0,1
800043a8:	c0 28       	rjmp	800043ac <get_arg+0x17c>
800043aa:	30 00       	mov	r0,0
800043ac:	40 3b       	lddsp	r11,sp[0xc]
800043ae:	5b fb       	cp.w	r11,-1
800043b0:	c0 40       	breq	800043b8 <get_arg+0x188>
800043b2:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800043b6:	c6 e8       	rjmp	80004492 <get_arg+0x262>
800043b8:	58 60       	cp.w	r0,6
800043ba:	e0 8b 00 6c 	brhi	80004492 <get_arg+0x262>
800043be:	6c 0a       	ld.w	r10,r6[0x0]
800043c0:	ea cc ff ff 	sub	r12,r5,-1
800043c4:	fe ce a6 8c 	sub	lr,pc,-22900
800043c8:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800043cc:	f4 cb ff f8 	sub	r11,r10,-8
800043d0:	8d 0b       	st.w	r6[0x0],r11
800043d2:	f4 ea 00 00 	ld.d	r10,r10[0]
800043d6:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800043da:	c0 f8       	rjmp	800043f8 <get_arg+0x1c8>
800043dc:	f4 cb ff fc 	sub	r11,r10,-4
800043e0:	8d 0b       	st.w	r6[0x0],r11
800043e2:	74 0a       	ld.w	r10,r10[0x0]
800043e4:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800043e8:	c0 88       	rjmp	800043f8 <get_arg+0x1c8>
800043ea:	f4 cb ff f8 	sub	r11,r10,-8
800043ee:	8d 0b       	st.w	r6[0x0],r11
800043f0:	f4 ea 00 00 	ld.d	r10,r10[0]
800043f4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800043f8:	0e 9b       	mov	r11,r7
800043fa:	18 95       	mov	r5,r12
800043fc:	c4 c8       	rjmp	80004494 <get_arg+0x264>
800043fe:	62 0a       	ld.w	r10,r1[0x0]
80004400:	5b fa       	cp.w	r10,-1
80004402:	c0 a1       	brne	80004416 <get_arg+0x1e6>
80004404:	50 19       	stdsp	sp[0x4],r9
80004406:	50 28       	stdsp	sp[0x8],r8
80004408:	e0 6a 00 80 	mov	r10,128
8000440c:	30 0b       	mov	r11,0
8000440e:	02 9c       	mov	r12,r1
80004410:	ce de       	rcall	800041ea <memset>
80004412:	40 28       	lddsp	r8,sp[0x8]
80004414:	40 19       	lddsp	r9,sp[0x4]
80004416:	e4 cc 00 01 	sub	r12,r2,1
8000441a:	0e 9b       	mov	r11,r7
8000441c:	50 3c       	stdsp	sp[0xc],r12
8000441e:	f2 0c 0c 49 	max	r9,r9,r12
80004422:	c3 98       	rjmp	80004494 <get_arg+0x264>
80004424:	62 0a       	ld.w	r10,r1[0x0]
80004426:	5b fa       	cp.w	r10,-1
80004428:	c0 a1       	brne	8000443c <get_arg+0x20c>
8000442a:	50 19       	stdsp	sp[0x4],r9
8000442c:	50 28       	stdsp	sp[0x8],r8
8000442e:	e0 6a 00 80 	mov	r10,128
80004432:	30 0b       	mov	r11,0
80004434:	02 9c       	mov	r12,r1
80004436:	cd ae       	rcall	800041ea <memset>
80004438:	40 28       	lddsp	r8,sp[0x8]
8000443a:	40 19       	lddsp	r9,sp[0x4]
8000443c:	20 12       	sub	r2,1
8000443e:	30 0a       	mov	r10,0
80004440:	0e 9b       	mov	r11,r7
80004442:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004446:	f2 02 0c 49 	max	r9,r9,r2
8000444a:	c2 58       	rjmp	80004494 <get_arg+0x264>
8000444c:	16 97       	mov	r7,r11
8000444e:	6c 0a       	ld.w	r10,r6[0x0]
80004450:	f4 cb ff fc 	sub	r11,r10,-4
80004454:	8d 0b       	st.w	r6[0x0],r11
80004456:	74 0a       	ld.w	r10,r10[0x0]
80004458:	0e 9b       	mov	r11,r7
8000445a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000445e:	2f f5       	sub	r5,-1
80004460:	c1 a8       	rjmp	80004494 <get_arg+0x264>
80004462:	f4 c2 00 30 	sub	r2,r10,48
80004466:	c0 68       	rjmp	80004472 <get_arg+0x242>
80004468:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000446c:	2f f7       	sub	r7,-1
8000446e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004472:	0f 8a       	ld.ub	r10,r7[0x0]
80004474:	58 0a       	cp.w	r10,0
80004476:	c0 e0       	breq	80004492 <get_arg+0x262>
80004478:	23 0a       	sub	r10,48
8000447a:	58 9a       	cp.w	r10,9
8000447c:	fe 98 ff f6 	brls	80004468 <get_arg+0x238>
80004480:	c0 98       	rjmp	80004492 <get_arg+0x262>
80004482:	2f f7       	sub	r7,-1
80004484:	0f 8a       	ld.ub	r10,r7[0x0]
80004486:	58 0a       	cp.w	r10,0
80004488:	c0 50       	breq	80004492 <get_arg+0x262>
8000448a:	23 0a       	sub	r10,48
8000448c:	58 9a       	cp.w	r10,9
8000448e:	fe 98 ff fa 	brls	80004482 <get_arg+0x252>
80004492:	0e 9b       	mov	r11,r7
80004494:	40 7c       	lddsp	r12,sp[0x1c]
80004496:	30 ba       	mov	r10,11
80004498:	f4 0c 18 00 	cp.b	r12,r10
8000449c:	fe 91 fe f4 	brne	80004284 <get_arg+0x54>
800044a0:	40 42       	lddsp	r2,sp[0x10]
800044a2:	17 8c       	ld.ub	r12,r11[0x0]
800044a4:	0a 32       	cp.w	r2,r5
800044a6:	5f 4a       	srge	r10
800044a8:	f0 0c 18 00 	cp.b	r12,r8
800044ac:	5f 1c       	srne	r12
800044ae:	f9 ea 00 0a 	and	r10,r12,r10
800044b2:	f0 0a 18 00 	cp.b	r10,r8
800044b6:	fe 91 fe d1 	brne	80004258 <get_arg+0x28>
800044ba:	30 08       	mov	r8,0
800044bc:	40 4e       	lddsp	lr,sp[0x10]
800044be:	17 8a       	ld.ub	r10,r11[0x0]
800044c0:	e2 05 00 21 	add	r1,r1,r5<<0x2
800044c4:	f0 0a 18 00 	cp.b	r10,r8
800044c8:	fc 09 17 10 	movne	r9,lr
800044cc:	e6 05 00 38 	add	r8,r3,r5<<0x3
800044d0:	06 9e       	mov	lr,r3
800044d2:	c2 a8       	rjmp	80004526 <get_arg+0x2f6>
800044d4:	62 0a       	ld.w	r10,r1[0x0]
800044d6:	58 3a       	cp.w	r10,3
800044d8:	c1 e0       	breq	80004514 <get_arg+0x2e4>
800044da:	e0 89 00 07 	brgt	800044e8 <get_arg+0x2b8>
800044de:	58 1a       	cp.w	r10,1
800044e0:	c1 a0       	breq	80004514 <get_arg+0x2e4>
800044e2:	58 2a       	cp.w	r10,2
800044e4:	c1 81       	brne	80004514 <get_arg+0x2e4>
800044e6:	c0 58       	rjmp	800044f0 <get_arg+0x2c0>
800044e8:	58 5a       	cp.w	r10,5
800044ea:	c0 c0       	breq	80004502 <get_arg+0x2d2>
800044ec:	c0 b5       	brlt	80004502 <get_arg+0x2d2>
800044ee:	c1 38       	rjmp	80004514 <get_arg+0x2e4>
800044f0:	6c 0a       	ld.w	r10,r6[0x0]
800044f2:	f4 cc ff f8 	sub	r12,r10,-8
800044f6:	8d 0c       	st.w	r6[0x0],r12
800044f8:	f4 e2 00 00 	ld.d	r2,r10[0]
800044fc:	f0 e3 00 00 	st.d	r8[0],r2
80004500:	c1 08       	rjmp	80004520 <get_arg+0x2f0>
80004502:	6c 0a       	ld.w	r10,r6[0x0]
80004504:	f4 cc ff f8 	sub	r12,r10,-8
80004508:	8d 0c       	st.w	r6[0x0],r12
8000450a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000450e:	f0 e3 00 00 	st.d	r8[0],r2
80004512:	c0 78       	rjmp	80004520 <get_arg+0x2f0>
80004514:	6c 0a       	ld.w	r10,r6[0x0]
80004516:	f4 cc ff fc 	sub	r12,r10,-4
8000451a:	8d 0c       	st.w	r6[0x0],r12
8000451c:	74 0a       	ld.w	r10,r10[0x0]
8000451e:	91 0a       	st.w	r8[0x0],r10
80004520:	2f f5       	sub	r5,-1
80004522:	2f 88       	sub	r8,-8
80004524:	2f c1       	sub	r1,-4
80004526:	12 35       	cp.w	r5,r9
80004528:	fe 9a ff d6 	brle	800044d4 <get_arg+0x2a4>
8000452c:	1c 93       	mov	r3,lr
8000452e:	40 52       	lddsp	r2,sp[0x14]
80004530:	40 6e       	lddsp	lr,sp[0x18]
80004532:	85 05       	st.w	r2[0x0],r5
80004534:	9d 0b       	st.w	lr[0x0],r11
80004536:	40 4b       	lddsp	r11,sp[0x10]
80004538:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000453c:	2f 8d       	sub	sp,-32
8000453e:	d8 32       	popm	r0-r7,pc

80004540 <__sprint_r>:
80004540:	d4 21       	pushm	r4-r7,lr
80004542:	14 97       	mov	r7,r10
80004544:	74 28       	ld.w	r8,r10[0x8]
80004546:	58 08       	cp.w	r8,0
80004548:	c0 41       	brne	80004550 <__sprint_r+0x10>
8000454a:	95 18       	st.w	r10[0x4],r8
8000454c:	10 9c       	mov	r12,r8
8000454e:	d8 22       	popm	r4-r7,pc
80004550:	e0 a0 18 b4 	rcall	800076b8 <__sfvwrite_r>
80004554:	30 08       	mov	r8,0
80004556:	8f 18       	st.w	r7[0x4],r8
80004558:	8f 28       	st.w	r7[0x8],r8
8000455a:	d8 22       	popm	r4-r7,pc

8000455c <_vfprintf_r>:
8000455c:	d4 31       	pushm	r0-r7,lr
8000455e:	fa cd 06 bc 	sub	sp,sp,1724
80004562:	51 09       	stdsp	sp[0x40],r9
80004564:	16 91       	mov	r1,r11
80004566:	14 97       	mov	r7,r10
80004568:	18 95       	mov	r5,r12
8000456a:	e0 a0 1a 1d 	rcall	800079a4 <_localeconv_r>
8000456e:	78 0c       	ld.w	r12,r12[0x0]
80004570:	50 cc       	stdsp	sp[0x30],r12
80004572:	58 05       	cp.w	r5,0
80004574:	c0 70       	breq	80004582 <_vfprintf_r+0x26>
80004576:	6a 68       	ld.w	r8,r5[0x18]
80004578:	58 08       	cp.w	r8,0
8000457a:	c0 41       	brne	80004582 <_vfprintf_r+0x26>
8000457c:	0a 9c       	mov	r12,r5
8000457e:	e0 a0 17 3d 	rcall	800073f8 <__sinit>
80004582:	fe c8 a4 86 	sub	r8,pc,-23418
80004586:	10 31       	cp.w	r1,r8
80004588:	c0 31       	brne	8000458e <_vfprintf_r+0x32>
8000458a:	6a 01       	ld.w	r1,r5[0x0]
8000458c:	c0 c8       	rjmp	800045a4 <_vfprintf_r+0x48>
8000458e:	fe c8 a4 72 	sub	r8,pc,-23438
80004592:	10 31       	cp.w	r1,r8
80004594:	c0 31       	brne	8000459a <_vfprintf_r+0x3e>
80004596:	6a 11       	ld.w	r1,r5[0x4]
80004598:	c0 68       	rjmp	800045a4 <_vfprintf_r+0x48>
8000459a:	fe c8 a4 5e 	sub	r8,pc,-23458
8000459e:	10 31       	cp.w	r1,r8
800045a0:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800045a4:	82 68       	ld.sh	r8,r1[0xc]
800045a6:	ed b8 00 03 	bld	r8,0x3
800045aa:	c0 41       	brne	800045b2 <_vfprintf_r+0x56>
800045ac:	62 48       	ld.w	r8,r1[0x10]
800045ae:	58 08       	cp.w	r8,0
800045b0:	c0 71       	brne	800045be <_vfprintf_r+0x62>
800045b2:	02 9b       	mov	r11,r1
800045b4:	0a 9c       	mov	r12,r5
800045b6:	e0 a0 0f 5d 	rcall	80006470 <__swsetup_r>
800045ba:	e0 81 0f 54 	brne	80006462 <_vfprintf_r+0x1f06>
800045be:	82 68       	ld.sh	r8,r1[0xc]
800045c0:	10 99       	mov	r9,r8
800045c2:	e2 19 00 1a 	andl	r9,0x1a,COH
800045c6:	58 a9       	cp.w	r9,10
800045c8:	c3 c1       	brne	80004640 <_vfprintf_r+0xe4>
800045ca:	82 79       	ld.sh	r9,r1[0xe]
800045cc:	30 0a       	mov	r10,0
800045ce:	f4 09 19 00 	cp.h	r9,r10
800045d2:	c3 75       	brlt	80004640 <_vfprintf_r+0xe4>
800045d4:	a1 d8       	cbr	r8,0x1
800045d6:	fb 58 05 d0 	st.h	sp[1488],r8
800045da:	62 88       	ld.w	r8,r1[0x20]
800045dc:	fb 48 05 e4 	st.w	sp[1508],r8
800045e0:	62 a8       	ld.w	r8,r1[0x28]
800045e2:	fb 48 05 ec 	st.w	sp[1516],r8
800045e6:	fa c8 ff bc 	sub	r8,sp,-68
800045ea:	fb 48 05 d4 	st.w	sp[1492],r8
800045ee:	fb 48 05 c4 	st.w	sp[1476],r8
800045f2:	e0 68 04 00 	mov	r8,1024
800045f6:	fb 48 05 d8 	st.w	sp[1496],r8
800045fa:	fb 48 05 cc 	st.w	sp[1484],r8
800045fe:	30 08       	mov	r8,0
80004600:	fb 59 05 d2 	st.h	sp[1490],r9
80004604:	0e 9a       	mov	r10,r7
80004606:	41 09       	lddsp	r9,sp[0x40]
80004608:	fa c7 fa 3c 	sub	r7,sp,-1476
8000460c:	fb 48 05 dc 	st.w	sp[1500],r8
80004610:	0a 9c       	mov	r12,r5
80004612:	0e 9b       	mov	r11,r7
80004614:	ca 4f       	rcall	8000455c <_vfprintf_r>
80004616:	50 bc       	stdsp	sp[0x2c],r12
80004618:	c0 95       	brlt	8000462a <_vfprintf_r+0xce>
8000461a:	0e 9b       	mov	r11,r7
8000461c:	0a 9c       	mov	r12,r5
8000461e:	e0 a0 16 15 	rcall	80007248 <_fflush_r>
80004622:	40 be       	lddsp	lr,sp[0x2c]
80004624:	f9 be 01 ff 	movne	lr,-1
80004628:	50 be       	stdsp	sp[0x2c],lr
8000462a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000462e:	ed b8 00 06 	bld	r8,0x6
80004632:	e0 81 0f 1a 	brne	80006466 <_vfprintf_r+0x1f0a>
80004636:	82 68       	ld.sh	r8,r1[0xc]
80004638:	a7 a8       	sbr	r8,0x6
8000463a:	a2 68       	st.h	r1[0xc],r8
8000463c:	e0 8f 0f 15 	bral	80006466 <_vfprintf_r+0x1f0a>
80004640:	30 08       	mov	r8,0
80004642:	fb 48 06 b4 	st.w	sp[1716],r8
80004646:	fb 48 06 90 	st.w	sp[1680],r8
8000464a:	fb 48 06 8c 	st.w	sp[1676],r8
8000464e:	fb 48 06 b0 	st.w	sp[1712],r8
80004652:	30 08       	mov	r8,0
80004654:	30 09       	mov	r9,0
80004656:	50 a7       	stdsp	sp[0x28],r7
80004658:	50 78       	stdsp	sp[0x1c],r8
8000465a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000465e:	3f f8       	mov	r8,-1
80004660:	50 59       	stdsp	sp[0x14],r9
80004662:	fb 43 06 88 	st.w	sp[1672],r3
80004666:	fb 48 05 44 	st.w	sp[1348],r8
8000466a:	12 9c       	mov	r12,r9
8000466c:	50 69       	stdsp	sp[0x18],r9
8000466e:	50 d9       	stdsp	sp[0x34],r9
80004670:	50 e9       	stdsp	sp[0x38],r9
80004672:	50 b9       	stdsp	sp[0x2c],r9
80004674:	12 97       	mov	r7,r9
80004676:	0a 94       	mov	r4,r5
80004678:	40 a2       	lddsp	r2,sp[0x28]
8000467a:	32 5a       	mov	r10,37
8000467c:	30 08       	mov	r8,0
8000467e:	c0 28       	rjmp	80004682 <_vfprintf_r+0x126>
80004680:	2f f2       	sub	r2,-1
80004682:	05 89       	ld.ub	r9,r2[0x0]
80004684:	f0 09 18 00 	cp.b	r9,r8
80004688:	5f 1b       	srne	r11
8000468a:	f4 09 18 00 	cp.b	r9,r10
8000468e:	5f 19       	srne	r9
80004690:	f3 eb 00 0b 	and	r11,r9,r11
80004694:	f0 0b 18 00 	cp.b	r11,r8
80004698:	cf 41       	brne	80004680 <_vfprintf_r+0x124>
8000469a:	40 ab       	lddsp	r11,sp[0x28]
8000469c:	e4 0b 01 06 	sub	r6,r2,r11
800046a0:	c1 e0       	breq	800046dc <_vfprintf_r+0x180>
800046a2:	fa f8 06 90 	ld.w	r8,sp[1680]
800046a6:	0c 08       	add	r8,r6
800046a8:	87 0b       	st.w	r3[0x0],r11
800046aa:	fb 48 06 90 	st.w	sp[1680],r8
800046ae:	87 16       	st.w	r3[0x4],r6
800046b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800046b4:	2f f8       	sub	r8,-1
800046b6:	fb 48 06 8c 	st.w	sp[1676],r8
800046ba:	58 78       	cp.w	r8,7
800046bc:	e0 89 00 04 	brgt	800046c4 <_vfprintf_r+0x168>
800046c0:	2f 83       	sub	r3,-8
800046c2:	c0 a8       	rjmp	800046d6 <_vfprintf_r+0x17a>
800046c4:	fa ca f9 78 	sub	r10,sp,-1672
800046c8:	02 9b       	mov	r11,r1
800046ca:	08 9c       	mov	r12,r4
800046cc:	c3 af       	rcall	80004540 <__sprint_r>
800046ce:	e0 81 0e c6 	brne	8000645a <_vfprintf_r+0x1efe>
800046d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800046d6:	40 ba       	lddsp	r10,sp[0x2c]
800046d8:	0c 0a       	add	r10,r6
800046da:	50 ba       	stdsp	sp[0x2c],r10
800046dc:	05 89       	ld.ub	r9,r2[0x0]
800046de:	30 08       	mov	r8,0
800046e0:	f0 09 18 00 	cp.b	r9,r8
800046e4:	e0 80 0e aa 	breq	80006438 <_vfprintf_r+0x1edc>
800046e8:	30 09       	mov	r9,0
800046ea:	fb 68 06 bb 	st.b	sp[1723],r8
800046ee:	0e 96       	mov	r6,r7
800046f0:	e4 c8 ff ff 	sub	r8,r2,-1
800046f4:	3f fe       	mov	lr,-1
800046f6:	50 93       	stdsp	sp[0x24],r3
800046f8:	50 41       	stdsp	sp[0x10],r1
800046fa:	0e 93       	mov	r3,r7
800046fc:	04 91       	mov	r1,r2
800046fe:	50 89       	stdsp	sp[0x20],r9
80004700:	50 a8       	stdsp	sp[0x28],r8
80004702:	50 2e       	stdsp	sp[0x8],lr
80004704:	50 39       	stdsp	sp[0xc],r9
80004706:	12 95       	mov	r5,r9
80004708:	12 90       	mov	r0,r9
8000470a:	10 97       	mov	r7,r8
8000470c:	08 92       	mov	r2,r4
8000470e:	c0 78       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004710:	3f fc       	mov	r12,-1
80004712:	08 97       	mov	r7,r4
80004714:	50 2c       	stdsp	sp[0x8],r12
80004716:	c0 38       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004718:	30 0b       	mov	r11,0
8000471a:	50 3b       	stdsp	sp[0xc],r11
8000471c:	0f 38       	ld.ub	r8,r7++
8000471e:	c0 28       	rjmp	80004722 <_vfprintf_r+0x1c6>
80004720:	12 90       	mov	r0,r9
80004722:	f0 c9 00 20 	sub	r9,r8,32
80004726:	e0 49 00 58 	cp.w	r9,88
8000472a:	e0 8b 0a 30 	brhi	80005b8a <_vfprintf_r+0x162e>
8000472e:	fe ca a9 da 	sub	r10,pc,-22054
80004732:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004736:	50 a7       	stdsp	sp[0x28],r7
80004738:	50 80       	stdsp	sp[0x20],r0
8000473a:	0c 97       	mov	r7,r6
8000473c:	04 94       	mov	r4,r2
8000473e:	06 96       	mov	r6,r3
80004740:	02 92       	mov	r2,r1
80004742:	fe c9 a7 b2 	sub	r9,pc,-22606
80004746:	40 93       	lddsp	r3,sp[0x24]
80004748:	10 90       	mov	r0,r8
8000474a:	40 41       	lddsp	r1,sp[0x10]
8000474c:	50 d9       	stdsp	sp[0x34],r9
8000474e:	e0 8f 08 8e 	bral	8000586a <_vfprintf_r+0x130e>
80004752:	30 08       	mov	r8,0
80004754:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004758:	f0 09 18 00 	cp.b	r9,r8
8000475c:	ce 01       	brne	8000471c <_vfprintf_r+0x1c0>
8000475e:	32 08       	mov	r8,32
80004760:	c6 e8       	rjmp	8000483c <_vfprintf_r+0x2e0>
80004762:	a1 a5       	sbr	r5,0x0
80004764:	cd cb       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004766:	0f 89       	ld.ub	r9,r7[0x0]
80004768:	f2 c8 00 30 	sub	r8,r9,48
8000476c:	58 98       	cp.w	r8,9
8000476e:	e0 8b 00 1d 	brhi	800047a8 <_vfprintf_r+0x24c>
80004772:	ee c8 ff ff 	sub	r8,r7,-1
80004776:	30 0b       	mov	r11,0
80004778:	23 09       	sub	r9,48
8000477a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000477e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004782:	11 39       	ld.ub	r9,r8++
80004784:	f2 ca 00 30 	sub	r10,r9,48
80004788:	58 9a       	cp.w	r10,9
8000478a:	fe 98 ff f7 	brls	80004778 <_vfprintf_r+0x21c>
8000478e:	e0 49 00 24 	cp.w	r9,36
80004792:	cc 31       	brne	80004718 <_vfprintf_r+0x1bc>
80004794:	e0 4b 00 20 	cp.w	r11,32
80004798:	e0 89 0e 60 	brgt	80006458 <_vfprintf_r+0x1efc>
8000479c:	20 1b       	sub	r11,1
8000479e:	fa f9 06 b4 	ld.w	r9,sp[1716]
800047a2:	12 3b       	cp.w	r11,r9
800047a4:	c0 95       	brlt	800047b6 <_vfprintf_r+0x25a>
800047a6:	c1 08       	rjmp	800047c6 <_vfprintf_r+0x26a>
800047a8:	fa f9 06 b4 	ld.w	r9,sp[1716]
800047ac:	ec ca ff ff 	sub	r10,r6,-1
800047b0:	12 36       	cp.w	r6,r9
800047b2:	c1 f5       	brlt	800047f0 <_vfprintf_r+0x294>
800047b4:	c2 68       	rjmp	80004800 <_vfprintf_r+0x2a4>
800047b6:	fa ce f9 44 	sub	lr,sp,-1724
800047ba:	10 97       	mov	r7,r8
800047bc:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800047c0:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800047c4:	c3 58       	rjmp	8000482e <_vfprintf_r+0x2d2>
800047c6:	10 97       	mov	r7,r8
800047c8:	fa c8 f9 50 	sub	r8,sp,-1712
800047cc:	1a d8       	st.w	--sp,r8
800047ce:	fa c8 fa b8 	sub	r8,sp,-1352
800047d2:	1a d8       	st.w	--sp,r8
800047d4:	fa c8 fb b4 	sub	r8,sp,-1100
800047d8:	02 9a       	mov	r10,r1
800047da:	1a d8       	st.w	--sp,r8
800047dc:	04 9c       	mov	r12,r2
800047de:	fa c8 f9 40 	sub	r8,sp,-1728
800047e2:	fa c9 ff b4 	sub	r9,sp,-76
800047e6:	fe b0 fd 25 	rcall	80004230 <get_arg>
800047ea:	2f dd       	sub	sp,-12
800047ec:	78 00       	ld.w	r0,r12[0x0]
800047ee:	c2 08       	rjmp	8000482e <_vfprintf_r+0x2d2>
800047f0:	fa cc f9 44 	sub	r12,sp,-1724
800047f4:	14 96       	mov	r6,r10
800047f6:	f8 03 00 38 	add	r8,r12,r3<<0x3
800047fa:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800047fe:	c1 88       	rjmp	8000482e <_vfprintf_r+0x2d2>
80004800:	41 08       	lddsp	r8,sp[0x40]
80004802:	59 f9       	cp.w	r9,31
80004804:	e0 89 00 11 	brgt	80004826 <_vfprintf_r+0x2ca>
80004808:	f0 cb ff fc 	sub	r11,r8,-4
8000480c:	51 0b       	stdsp	sp[0x40],r11
8000480e:	70 00       	ld.w	r0,r8[0x0]
80004810:	fa cb f9 44 	sub	r11,sp,-1724
80004814:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004818:	f1 40 fd 88 	st.w	r8[-632],r0
8000481c:	2f f9       	sub	r9,-1
8000481e:	14 96       	mov	r6,r10
80004820:	fb 49 06 b4 	st.w	sp[1716],r9
80004824:	c0 58       	rjmp	8000482e <_vfprintf_r+0x2d2>
80004826:	70 00       	ld.w	r0,r8[0x0]
80004828:	14 96       	mov	r6,r10
8000482a:	2f c8       	sub	r8,-4
8000482c:	51 08       	stdsp	sp[0x40],r8
8000482e:	58 00       	cp.w	r0,0
80004830:	fe 94 ff 76 	brge	8000471c <_vfprintf_r+0x1c0>
80004834:	5c 30       	neg	r0
80004836:	a3 a5       	sbr	r5,0x2
80004838:	c7 2b       	rjmp	8000471c <_vfprintf_r+0x1c0>
8000483a:	32 b8       	mov	r8,43
8000483c:	fb 68 06 bb 	st.b	sp[1723],r8
80004840:	c6 eb       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004842:	0f 38       	ld.ub	r8,r7++
80004844:	e0 48 00 2a 	cp.w	r8,42
80004848:	c0 30       	breq	8000484e <_vfprintf_r+0x2f2>
8000484a:	30 09       	mov	r9,0
8000484c:	c7 98       	rjmp	8000493e <_vfprintf_r+0x3e2>
8000484e:	0f 88       	ld.ub	r8,r7[0x0]
80004850:	f0 c9 00 30 	sub	r9,r8,48
80004854:	58 99       	cp.w	r9,9
80004856:	e0 8b 00 1f 	brhi	80004894 <_vfprintf_r+0x338>
8000485a:	ee c4 ff ff 	sub	r4,r7,-1
8000485e:	30 0b       	mov	r11,0
80004860:	23 08       	sub	r8,48
80004862:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004866:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000486a:	09 38       	ld.ub	r8,r4++
8000486c:	f0 c9 00 30 	sub	r9,r8,48
80004870:	58 99       	cp.w	r9,9
80004872:	fe 98 ff f7 	brls	80004860 <_vfprintf_r+0x304>
80004876:	e0 48 00 24 	cp.w	r8,36
8000487a:	fe 91 ff 4f 	brne	80004718 <_vfprintf_r+0x1bc>
8000487e:	e0 4b 00 20 	cp.w	r11,32
80004882:	e0 89 0d eb 	brgt	80006458 <_vfprintf_r+0x1efc>
80004886:	20 1b       	sub	r11,1
80004888:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000488c:	10 3b       	cp.w	r11,r8
8000488e:	c0 a5       	brlt	800048a2 <_vfprintf_r+0x346>
80004890:	c1 18       	rjmp	800048b2 <_vfprintf_r+0x356>
80004892:	d7 03       	nop
80004894:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004898:	ec c9 ff ff 	sub	r9,r6,-1
8000489c:	14 36       	cp.w	r6,r10
8000489e:	c1 f5       	brlt	800048dc <_vfprintf_r+0x380>
800048a0:	c2 88       	rjmp	800048f0 <_vfprintf_r+0x394>
800048a2:	fa ca f9 44 	sub	r10,sp,-1724
800048a6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800048aa:	f6 fb fd 88 	ld.w	r11,r11[-632]
800048ae:	50 2b       	stdsp	sp[0x8],r11
800048b0:	c3 c8       	rjmp	80004928 <_vfprintf_r+0x3cc>
800048b2:	fa c8 f9 50 	sub	r8,sp,-1712
800048b6:	1a d8       	st.w	--sp,r8
800048b8:	fa c8 fa b8 	sub	r8,sp,-1352
800048bc:	1a d8       	st.w	--sp,r8
800048be:	fa c8 fb b4 	sub	r8,sp,-1100
800048c2:	02 9a       	mov	r10,r1
800048c4:	1a d8       	st.w	--sp,r8
800048c6:	04 9c       	mov	r12,r2
800048c8:	fa c8 f9 40 	sub	r8,sp,-1728
800048cc:	fa c9 ff b4 	sub	r9,sp,-76
800048d0:	fe b0 fc b0 	rcall	80004230 <get_arg>
800048d4:	2f dd       	sub	sp,-12
800048d6:	78 0c       	ld.w	r12,r12[0x0]
800048d8:	50 2c       	stdsp	sp[0x8],r12
800048da:	c2 78       	rjmp	80004928 <_vfprintf_r+0x3cc>
800048dc:	12 96       	mov	r6,r9
800048de:	0e 94       	mov	r4,r7
800048e0:	fa c9 f9 44 	sub	r9,sp,-1724
800048e4:	f2 03 00 38 	add	r8,r9,r3<<0x3
800048e8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800048ec:	50 28       	stdsp	sp[0x8],r8
800048ee:	c1 d8       	rjmp	80004928 <_vfprintf_r+0x3cc>
800048f0:	41 08       	lddsp	r8,sp[0x40]
800048f2:	59 fa       	cp.w	r10,31
800048f4:	e0 89 00 14 	brgt	8000491c <_vfprintf_r+0x3c0>
800048f8:	f0 cb ff fc 	sub	r11,r8,-4
800048fc:	70 08       	ld.w	r8,r8[0x0]
800048fe:	51 0b       	stdsp	sp[0x40],r11
80004900:	50 28       	stdsp	sp[0x8],r8
80004902:	fa c6 f9 44 	sub	r6,sp,-1724
80004906:	40 2e       	lddsp	lr,sp[0x8]
80004908:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000490c:	f1 4e fd 88 	st.w	r8[-632],lr
80004910:	2f fa       	sub	r10,-1
80004912:	0e 94       	mov	r4,r7
80004914:	fb 4a 06 b4 	st.w	sp[1716],r10
80004918:	12 96       	mov	r6,r9
8000491a:	c0 78       	rjmp	80004928 <_vfprintf_r+0x3cc>
8000491c:	70 0c       	ld.w	r12,r8[0x0]
8000491e:	0e 94       	mov	r4,r7
80004920:	2f c8       	sub	r8,-4
80004922:	50 2c       	stdsp	sp[0x8],r12
80004924:	12 96       	mov	r6,r9
80004926:	51 08       	stdsp	sp[0x40],r8
80004928:	40 2b       	lddsp	r11,sp[0x8]
8000492a:	58 0b       	cp.w	r11,0
8000492c:	fe 95 fe f2 	brlt	80004710 <_vfprintf_r+0x1b4>
80004930:	08 97       	mov	r7,r4
80004932:	cf 5a       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004934:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004938:	0f 38       	ld.ub	r8,r7++
8000493a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000493e:	f0 ca 00 30 	sub	r10,r8,48
80004942:	58 9a       	cp.w	r10,9
80004944:	fe 98 ff f8 	brls	80004934 <_vfprintf_r+0x3d8>
80004948:	3f fa       	mov	r10,-1
8000494a:	f2 0a 0c 49 	max	r9,r9,r10
8000494e:	50 29       	stdsp	sp[0x8],r9
80004950:	ce 9a       	rjmp	80004722 <_vfprintf_r+0x1c6>
80004952:	a7 b5       	sbr	r5,0x7
80004954:	ce 4a       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004956:	30 09       	mov	r9,0
80004958:	23 08       	sub	r8,48
8000495a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000495e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004962:	0f 38       	ld.ub	r8,r7++
80004964:	f0 ca 00 30 	sub	r10,r8,48
80004968:	58 9a       	cp.w	r10,9
8000496a:	fe 98 ff f7 	brls	80004958 <_vfprintf_r+0x3fc>
8000496e:	e0 48 00 24 	cp.w	r8,36
80004972:	fe 91 fe d7 	brne	80004720 <_vfprintf_r+0x1c4>
80004976:	e0 49 00 20 	cp.w	r9,32
8000497a:	e0 89 0d 6f 	brgt	80006458 <_vfprintf_r+0x1efc>
8000497e:	f2 c3 00 01 	sub	r3,r9,1
80004982:	30 19       	mov	r9,1
80004984:	50 39       	stdsp	sp[0xc],r9
80004986:	cc ba       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004988:	a3 b5       	sbr	r5,0x3
8000498a:	cc 9a       	rjmp	8000471c <_vfprintf_r+0x1c0>
8000498c:	a7 a5       	sbr	r5,0x6
8000498e:	cc 7a       	rjmp	8000471c <_vfprintf_r+0x1c0>
80004990:	0a 98       	mov	r8,r5
80004992:	a5 b5       	sbr	r5,0x5
80004994:	a5 a8       	sbr	r8,0x4
80004996:	0f 89       	ld.ub	r9,r7[0x0]
80004998:	36 ce       	mov	lr,108
8000499a:	fc 09 18 00 	cp.b	r9,lr
8000499e:	f7 b7 00 ff 	subeq	r7,-1
800049a2:	f0 05 17 10 	movne	r5,r8
800049a6:	cb ba       	rjmp	8000471c <_vfprintf_r+0x1c0>
800049a8:	a5 b5       	sbr	r5,0x5
800049aa:	cb 9a       	rjmp	8000471c <_vfprintf_r+0x1c0>
800049ac:	50 a7       	stdsp	sp[0x28],r7
800049ae:	50 80       	stdsp	sp[0x20],r0
800049b0:	0c 97       	mov	r7,r6
800049b2:	10 90       	mov	r0,r8
800049b4:	06 96       	mov	r6,r3
800049b6:	04 94       	mov	r4,r2
800049b8:	40 93       	lddsp	r3,sp[0x24]
800049ba:	02 92       	mov	r2,r1
800049bc:	0e 99       	mov	r9,r7
800049be:	40 41       	lddsp	r1,sp[0x10]
800049c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049c4:	40 3c       	lddsp	r12,sp[0xc]
800049c6:	58 0c       	cp.w	r12,0
800049c8:	c1 d0       	breq	80004a02 <_vfprintf_r+0x4a6>
800049ca:	10 36       	cp.w	r6,r8
800049cc:	c0 64       	brge	800049d8 <_vfprintf_r+0x47c>
800049ce:	fa cb f9 44 	sub	r11,sp,-1724
800049d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049d6:	c1 d8       	rjmp	80004a10 <_vfprintf_r+0x4b4>
800049d8:	fa c8 f9 50 	sub	r8,sp,-1712
800049dc:	1a d8       	st.w	--sp,r8
800049de:	fa c8 fa b8 	sub	r8,sp,-1352
800049e2:	1a d8       	st.w	--sp,r8
800049e4:	fa c8 fb b4 	sub	r8,sp,-1100
800049e8:	1a d8       	st.w	--sp,r8
800049ea:	fa c8 f9 40 	sub	r8,sp,-1728
800049ee:	fa c9 ff b4 	sub	r9,sp,-76
800049f2:	04 9a       	mov	r10,r2
800049f4:	0c 9b       	mov	r11,r6
800049f6:	08 9c       	mov	r12,r4
800049f8:	fe b0 fc 1c 	rcall	80004230 <get_arg>
800049fc:	2f dd       	sub	sp,-12
800049fe:	19 b8       	ld.ub	r8,r12[0x3]
80004a00:	c2 28       	rjmp	80004a44 <_vfprintf_r+0x4e8>
80004a02:	2f f7       	sub	r7,-1
80004a04:	10 39       	cp.w	r9,r8
80004a06:	c0 84       	brge	80004a16 <_vfprintf_r+0x4ba>
80004a08:	fa ca f9 44 	sub	r10,sp,-1724
80004a0c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a10:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004a14:	c1 88       	rjmp	80004a44 <_vfprintf_r+0x4e8>
80004a16:	41 09       	lddsp	r9,sp[0x40]
80004a18:	59 f8       	cp.w	r8,31
80004a1a:	e0 89 00 12 	brgt	80004a3e <_vfprintf_r+0x4e2>
80004a1e:	f2 ca ff fc 	sub	r10,r9,-4
80004a22:	51 0a       	stdsp	sp[0x40],r10
80004a24:	72 09       	ld.w	r9,r9[0x0]
80004a26:	fa c6 f9 44 	sub	r6,sp,-1724
80004a2a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004a2e:	2f f8       	sub	r8,-1
80004a30:	f5 49 fd 88 	st.w	r10[-632],r9
80004a34:	fb 48 06 b4 	st.w	sp[1716],r8
80004a38:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004a3c:	c0 48       	rjmp	80004a44 <_vfprintf_r+0x4e8>
80004a3e:	13 b8       	ld.ub	r8,r9[0x3]
80004a40:	2f c9       	sub	r9,-4
80004a42:	51 09       	stdsp	sp[0x40],r9
80004a44:	fb 68 06 60 	st.b	sp[1632],r8
80004a48:	30 0e       	mov	lr,0
80004a4a:	30 08       	mov	r8,0
80004a4c:	30 12       	mov	r2,1
80004a4e:	fb 68 06 bb 	st.b	sp[1723],r8
80004a52:	50 2e       	stdsp	sp[0x8],lr
80004a54:	e0 8f 08 ad 	bral	80005bae <_vfprintf_r+0x1652>
80004a58:	50 a7       	stdsp	sp[0x28],r7
80004a5a:	50 80       	stdsp	sp[0x20],r0
80004a5c:	0c 97       	mov	r7,r6
80004a5e:	04 94       	mov	r4,r2
80004a60:	06 96       	mov	r6,r3
80004a62:	02 92       	mov	r2,r1
80004a64:	40 93       	lddsp	r3,sp[0x24]
80004a66:	10 90       	mov	r0,r8
80004a68:	40 41       	lddsp	r1,sp[0x10]
80004a6a:	a5 a5       	sbr	r5,0x4
80004a6c:	c0 a8       	rjmp	80004a80 <_vfprintf_r+0x524>
80004a6e:	50 a7       	stdsp	sp[0x28],r7
80004a70:	50 80       	stdsp	sp[0x20],r0
80004a72:	0c 97       	mov	r7,r6
80004a74:	04 94       	mov	r4,r2
80004a76:	06 96       	mov	r6,r3
80004a78:	02 92       	mov	r2,r1
80004a7a:	40 93       	lddsp	r3,sp[0x24]
80004a7c:	10 90       	mov	r0,r8
80004a7e:	40 41       	lddsp	r1,sp[0x10]
80004a80:	ed b5 00 05 	bld	r5,0x5
80004a84:	c5 11       	brne	80004b26 <_vfprintf_r+0x5ca>
80004a86:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a8a:	40 3c       	lddsp	r12,sp[0xc]
80004a8c:	58 0c       	cp.w	r12,0
80004a8e:	c1 e0       	breq	80004aca <_vfprintf_r+0x56e>
80004a90:	10 36       	cp.w	r6,r8
80004a92:	c0 64       	brge	80004a9e <_vfprintf_r+0x542>
80004a94:	fa cb f9 44 	sub	r11,sp,-1724
80004a98:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a9c:	c2 08       	rjmp	80004adc <_vfprintf_r+0x580>
80004a9e:	fa c8 f9 50 	sub	r8,sp,-1712
80004aa2:	1a d8       	st.w	--sp,r8
80004aa4:	fa c8 fa b8 	sub	r8,sp,-1352
80004aa8:	0c 9b       	mov	r11,r6
80004aaa:	1a d8       	st.w	--sp,r8
80004aac:	fa c8 fb b4 	sub	r8,sp,-1100
80004ab0:	1a d8       	st.w	--sp,r8
80004ab2:	fa c9 ff b4 	sub	r9,sp,-76
80004ab6:	fa c8 f9 40 	sub	r8,sp,-1728
80004aba:	04 9a       	mov	r10,r2
80004abc:	08 9c       	mov	r12,r4
80004abe:	fe b0 fb b9 	rcall	80004230 <get_arg>
80004ac2:	2f dd       	sub	sp,-12
80004ac4:	78 1b       	ld.w	r11,r12[0x4]
80004ac6:	78 09       	ld.w	r9,r12[0x0]
80004ac8:	c2 b8       	rjmp	80004b1e <_vfprintf_r+0x5c2>
80004aca:	ee ca ff ff 	sub	r10,r7,-1
80004ace:	10 37       	cp.w	r7,r8
80004ad0:	c0 b4       	brge	80004ae6 <_vfprintf_r+0x58a>
80004ad2:	fa c9 f9 44 	sub	r9,sp,-1724
80004ad6:	14 97       	mov	r7,r10
80004ad8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004adc:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004ae0:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004ae4:	c1 d8       	rjmp	80004b1e <_vfprintf_r+0x5c2>
80004ae6:	41 09       	lddsp	r9,sp[0x40]
80004ae8:	59 f8       	cp.w	r8,31
80004aea:	e0 89 00 14 	brgt	80004b12 <_vfprintf_r+0x5b6>
80004aee:	f2 cb ff f8 	sub	r11,r9,-8
80004af2:	51 0b       	stdsp	sp[0x40],r11
80004af4:	fa c6 f9 44 	sub	r6,sp,-1724
80004af8:	72 1b       	ld.w	r11,r9[0x4]
80004afa:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004afe:	72 09       	ld.w	r9,r9[0x0]
80004b00:	f9 4b fd 8c 	st.w	r12[-628],r11
80004b04:	f9 49 fd 88 	st.w	r12[-632],r9
80004b08:	2f f8       	sub	r8,-1
80004b0a:	14 97       	mov	r7,r10
80004b0c:	fb 48 06 b4 	st.w	sp[1716],r8
80004b10:	c0 78       	rjmp	80004b1e <_vfprintf_r+0x5c2>
80004b12:	f2 c8 ff f8 	sub	r8,r9,-8
80004b16:	72 1b       	ld.w	r11,r9[0x4]
80004b18:	14 97       	mov	r7,r10
80004b1a:	51 08       	stdsp	sp[0x40],r8
80004b1c:	72 09       	ld.w	r9,r9[0x0]
80004b1e:	16 98       	mov	r8,r11
80004b20:	fa e9 00 00 	st.d	sp[0],r8
80004b24:	ca e8       	rjmp	80004c80 <_vfprintf_r+0x724>
80004b26:	ed b5 00 04 	bld	r5,0x4
80004b2a:	c1 71       	brne	80004b58 <_vfprintf_r+0x5fc>
80004b2c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b30:	40 3e       	lddsp	lr,sp[0xc]
80004b32:	58 0e       	cp.w	lr,0
80004b34:	c0 80       	breq	80004b44 <_vfprintf_r+0x5e8>
80004b36:	10 36       	cp.w	r6,r8
80004b38:	c6 94       	brge	80004c0a <_vfprintf_r+0x6ae>
80004b3a:	fa cc f9 44 	sub	r12,sp,-1724
80004b3e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b42:	c8 28       	rjmp	80004c46 <_vfprintf_r+0x6ea>
80004b44:	ee ca ff ff 	sub	r10,r7,-1
80004b48:	10 37       	cp.w	r7,r8
80004b4a:	e0 84 00 81 	brge	80004c4c <_vfprintf_r+0x6f0>
80004b4e:	fa cb f9 44 	sub	r11,sp,-1724
80004b52:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b56:	c7 78       	rjmp	80004c44 <_vfprintf_r+0x6e8>
80004b58:	ed b5 00 06 	bld	r5,0x6
80004b5c:	c4 b1       	brne	80004bf2 <_vfprintf_r+0x696>
80004b5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b62:	40 3c       	lddsp	r12,sp[0xc]
80004b64:	58 0c       	cp.w	r12,0
80004b66:	c1 d0       	breq	80004ba0 <_vfprintf_r+0x644>
80004b68:	10 36       	cp.w	r6,r8
80004b6a:	c0 64       	brge	80004b76 <_vfprintf_r+0x61a>
80004b6c:	fa cb f9 44 	sub	r11,sp,-1724
80004b70:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b74:	c1 f8       	rjmp	80004bb2 <_vfprintf_r+0x656>
80004b76:	fa c8 f9 50 	sub	r8,sp,-1712
80004b7a:	1a d8       	st.w	--sp,r8
80004b7c:	fa c8 fa b8 	sub	r8,sp,-1352
80004b80:	1a d8       	st.w	--sp,r8
80004b82:	fa c8 fb b4 	sub	r8,sp,-1100
80004b86:	1a d8       	st.w	--sp,r8
80004b88:	fa c8 f9 40 	sub	r8,sp,-1728
80004b8c:	fa c9 ff b4 	sub	r9,sp,-76
80004b90:	04 9a       	mov	r10,r2
80004b92:	0c 9b       	mov	r11,r6
80004b94:	08 9c       	mov	r12,r4
80004b96:	fe b0 fb 4d 	rcall	80004230 <get_arg>
80004b9a:	2f dd       	sub	sp,-12
80004b9c:	98 18       	ld.sh	r8,r12[0x2]
80004b9e:	c2 68       	rjmp	80004bea <_vfprintf_r+0x68e>
80004ba0:	ee ca ff ff 	sub	r10,r7,-1
80004ba4:	10 37       	cp.w	r7,r8
80004ba6:	c0 94       	brge	80004bb8 <_vfprintf_r+0x65c>
80004ba8:	fa c9 f9 44 	sub	r9,sp,-1724
80004bac:	14 97       	mov	r7,r10
80004bae:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bb2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004bb6:	c1 a8       	rjmp	80004bea <_vfprintf_r+0x68e>
80004bb8:	41 09       	lddsp	r9,sp[0x40]
80004bba:	59 f8       	cp.w	r8,31
80004bbc:	e0 89 00 13 	brgt	80004be2 <_vfprintf_r+0x686>
80004bc0:	f2 cb ff fc 	sub	r11,r9,-4
80004bc4:	51 0b       	stdsp	sp[0x40],r11
80004bc6:	72 09       	ld.w	r9,r9[0x0]
80004bc8:	fa c6 f9 44 	sub	r6,sp,-1724
80004bcc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004bd0:	2f f8       	sub	r8,-1
80004bd2:	f7 49 fd 88 	st.w	r11[-632],r9
80004bd6:	fb 48 06 b4 	st.w	sp[1716],r8
80004bda:	14 97       	mov	r7,r10
80004bdc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004be0:	c0 58       	rjmp	80004bea <_vfprintf_r+0x68e>
80004be2:	92 18       	ld.sh	r8,r9[0x2]
80004be4:	14 97       	mov	r7,r10
80004be6:	2f c9       	sub	r9,-4
80004be8:	51 09       	stdsp	sp[0x40],r9
80004bea:	50 18       	stdsp	sp[0x4],r8
80004bec:	bf 58       	asr	r8,0x1f
80004bee:	50 08       	stdsp	sp[0x0],r8
80004bf0:	c4 88       	rjmp	80004c80 <_vfprintf_r+0x724>
80004bf2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bf6:	40 3c       	lddsp	r12,sp[0xc]
80004bf8:	58 0c       	cp.w	r12,0
80004bfa:	c1 d0       	breq	80004c34 <_vfprintf_r+0x6d8>
80004bfc:	10 36       	cp.w	r6,r8
80004bfe:	c0 64       	brge	80004c0a <_vfprintf_r+0x6ae>
80004c00:	fa cb f9 44 	sub	r11,sp,-1724
80004c04:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c08:	c1 f8       	rjmp	80004c46 <_vfprintf_r+0x6ea>
80004c0a:	fa c8 f9 50 	sub	r8,sp,-1712
80004c0e:	1a d8       	st.w	--sp,r8
80004c10:	fa c8 fa b8 	sub	r8,sp,-1352
80004c14:	0c 9b       	mov	r11,r6
80004c16:	1a d8       	st.w	--sp,r8
80004c18:	fa c8 fb b4 	sub	r8,sp,-1100
80004c1c:	04 9a       	mov	r10,r2
80004c1e:	1a d8       	st.w	--sp,r8
80004c20:	08 9c       	mov	r12,r4
80004c22:	fa c8 f9 40 	sub	r8,sp,-1728
80004c26:	fa c9 ff b4 	sub	r9,sp,-76
80004c2a:	fe b0 fb 03 	rcall	80004230 <get_arg>
80004c2e:	2f dd       	sub	sp,-12
80004c30:	78 0b       	ld.w	r11,r12[0x0]
80004c32:	c2 48       	rjmp	80004c7a <_vfprintf_r+0x71e>
80004c34:	ee ca ff ff 	sub	r10,r7,-1
80004c38:	10 37       	cp.w	r7,r8
80004c3a:	c0 94       	brge	80004c4c <_vfprintf_r+0x6f0>
80004c3c:	fa c9 f9 44 	sub	r9,sp,-1724
80004c40:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c44:	14 97       	mov	r7,r10
80004c46:	ec fb fd 88 	ld.w	r11,r6[-632]
80004c4a:	c1 88       	rjmp	80004c7a <_vfprintf_r+0x71e>
80004c4c:	41 09       	lddsp	r9,sp[0x40]
80004c4e:	59 f8       	cp.w	r8,31
80004c50:	e0 89 00 11 	brgt	80004c72 <_vfprintf_r+0x716>
80004c54:	f2 cb ff fc 	sub	r11,r9,-4
80004c58:	51 0b       	stdsp	sp[0x40],r11
80004c5a:	fa c6 f9 44 	sub	r6,sp,-1724
80004c5e:	72 0b       	ld.w	r11,r9[0x0]
80004c60:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c64:	f3 4b fd 88 	st.w	r9[-632],r11
80004c68:	2f f8       	sub	r8,-1
80004c6a:	14 97       	mov	r7,r10
80004c6c:	fb 48 06 b4 	st.w	sp[1716],r8
80004c70:	c0 58       	rjmp	80004c7a <_vfprintf_r+0x71e>
80004c72:	72 0b       	ld.w	r11,r9[0x0]
80004c74:	14 97       	mov	r7,r10
80004c76:	2f c9       	sub	r9,-4
80004c78:	51 09       	stdsp	sp[0x40],r9
80004c7a:	50 1b       	stdsp	sp[0x4],r11
80004c7c:	bf 5b       	asr	r11,0x1f
80004c7e:	50 0b       	stdsp	sp[0x0],r11
80004c80:	fa ea 00 00 	ld.d	r10,sp[0]
80004c84:	58 0a       	cp.w	r10,0
80004c86:	5c 2b       	cpc	r11
80004c88:	c0 e4       	brge	80004ca4 <_vfprintf_r+0x748>
80004c8a:	30 08       	mov	r8,0
80004c8c:	fa ea 00 00 	ld.d	r10,sp[0]
80004c90:	30 09       	mov	r9,0
80004c92:	f0 0a 01 0a 	sub	r10,r8,r10
80004c96:	f2 0b 01 4b 	sbc	r11,r9,r11
80004c9a:	32 d8       	mov	r8,45
80004c9c:	fa eb 00 00 	st.d	sp[0],r10
80004ca0:	fb 68 06 bb 	st.b	sp[1723],r8
80004ca4:	30 18       	mov	r8,1
80004ca6:	e0 8f 06 fa 	bral	80005a9a <_vfprintf_r+0x153e>
80004caa:	50 a7       	stdsp	sp[0x28],r7
80004cac:	50 80       	stdsp	sp[0x20],r0
80004cae:	0c 97       	mov	r7,r6
80004cb0:	04 94       	mov	r4,r2
80004cb2:	06 96       	mov	r6,r3
80004cb4:	02 92       	mov	r2,r1
80004cb6:	40 93       	lddsp	r3,sp[0x24]
80004cb8:	10 90       	mov	r0,r8
80004cba:	40 41       	lddsp	r1,sp[0x10]
80004cbc:	0e 99       	mov	r9,r7
80004cbe:	ed b5 00 03 	bld	r5,0x3
80004cc2:	c4 11       	brne	80004d44 <_vfprintf_r+0x7e8>
80004cc4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cc8:	40 3a       	lddsp	r10,sp[0xc]
80004cca:	58 0a       	cp.w	r10,0
80004ccc:	c1 90       	breq	80004cfe <_vfprintf_r+0x7a2>
80004cce:	10 36       	cp.w	r6,r8
80004cd0:	c6 45       	brlt	80004d98 <_vfprintf_r+0x83c>
80004cd2:	fa c8 f9 50 	sub	r8,sp,-1712
80004cd6:	1a d8       	st.w	--sp,r8
80004cd8:	fa c8 fa b8 	sub	r8,sp,-1352
80004cdc:	1a d8       	st.w	--sp,r8
80004cde:	fa c8 fb b4 	sub	r8,sp,-1100
80004ce2:	0c 9b       	mov	r11,r6
80004ce4:	1a d8       	st.w	--sp,r8
80004ce6:	04 9a       	mov	r10,r2
80004ce8:	fa c8 f9 40 	sub	r8,sp,-1728
80004cec:	fa c9 ff b4 	sub	r9,sp,-76
80004cf0:	08 9c       	mov	r12,r4
80004cf2:	fe b0 fa 9f 	rcall	80004230 <get_arg>
80004cf6:	2f dd       	sub	sp,-12
80004cf8:	78 16       	ld.w	r6,r12[0x4]
80004cfa:	50 76       	stdsp	sp[0x1c],r6
80004cfc:	c4 88       	rjmp	80004d8c <_vfprintf_r+0x830>
80004cfe:	2f f7       	sub	r7,-1
80004d00:	10 39       	cp.w	r9,r8
80004d02:	c0 c4       	brge	80004d1a <_vfprintf_r+0x7be>
80004d04:	fa ce f9 44 	sub	lr,sp,-1724
80004d08:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004d0c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004d10:	50 7c       	stdsp	sp[0x1c],r12
80004d12:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004d16:	50 56       	stdsp	sp[0x14],r6
80004d18:	c6 68       	rjmp	80004de4 <_vfprintf_r+0x888>
80004d1a:	41 09       	lddsp	r9,sp[0x40]
80004d1c:	59 f8       	cp.w	r8,31
80004d1e:	e0 89 00 10 	brgt	80004d3e <_vfprintf_r+0x7e2>
80004d22:	f2 ca ff f8 	sub	r10,r9,-8
80004d26:	72 1b       	ld.w	r11,r9[0x4]
80004d28:	51 0a       	stdsp	sp[0x40],r10
80004d2a:	72 09       	ld.w	r9,r9[0x0]
80004d2c:	fa ca f9 44 	sub	r10,sp,-1724
80004d30:	50 7b       	stdsp	sp[0x1c],r11
80004d32:	50 59       	stdsp	sp[0x14],r9
80004d34:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004d38:	40 5b       	lddsp	r11,sp[0x14]
80004d3a:	40 7a       	lddsp	r10,sp[0x1c]
80004d3c:	c4 78       	rjmp	80004dca <_vfprintf_r+0x86e>
80004d3e:	72 18       	ld.w	r8,r9[0x4]
80004d40:	50 78       	stdsp	sp[0x1c],r8
80004d42:	c4 c8       	rjmp	80004dda <_vfprintf_r+0x87e>
80004d44:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d48:	40 3e       	lddsp	lr,sp[0xc]
80004d4a:	58 0e       	cp.w	lr,0
80004d4c:	c2 30       	breq	80004d92 <_vfprintf_r+0x836>
80004d4e:	10 36       	cp.w	r6,r8
80004d50:	c0 94       	brge	80004d62 <_vfprintf_r+0x806>
80004d52:	fa cc f9 44 	sub	r12,sp,-1724
80004d56:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d5a:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004d5e:	50 7b       	stdsp	sp[0x1c],r11
80004d60:	cd 9b       	rjmp	80004d12 <_vfprintf_r+0x7b6>
80004d62:	fa c8 f9 50 	sub	r8,sp,-1712
80004d66:	1a d8       	st.w	--sp,r8
80004d68:	fa c8 fa b8 	sub	r8,sp,-1352
80004d6c:	04 9a       	mov	r10,r2
80004d6e:	1a d8       	st.w	--sp,r8
80004d70:	fa c8 fb b4 	sub	r8,sp,-1100
80004d74:	0c 9b       	mov	r11,r6
80004d76:	1a d8       	st.w	--sp,r8
80004d78:	08 9c       	mov	r12,r4
80004d7a:	fa c8 f9 40 	sub	r8,sp,-1728
80004d7e:	fa c9 ff b4 	sub	r9,sp,-76
80004d82:	fe b0 fa 57 	rcall	80004230 <get_arg>
80004d86:	2f dd       	sub	sp,-12
80004d88:	78 1a       	ld.w	r10,r12[0x4]
80004d8a:	50 7a       	stdsp	sp[0x1c],r10
80004d8c:	78 0c       	ld.w	r12,r12[0x0]
80004d8e:	50 5c       	stdsp	sp[0x14],r12
80004d90:	c2 a8       	rjmp	80004de4 <_vfprintf_r+0x888>
80004d92:	2f f7       	sub	r7,-1
80004d94:	10 39       	cp.w	r9,r8
80004d96:	c0 94       	brge	80004da8 <_vfprintf_r+0x84c>
80004d98:	fa c9 f9 44 	sub	r9,sp,-1724
80004d9c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004da0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004da4:	50 78       	stdsp	sp[0x1c],r8
80004da6:	cb 6b       	rjmp	80004d12 <_vfprintf_r+0x7b6>
80004da8:	41 09       	lddsp	r9,sp[0x40]
80004daa:	59 f8       	cp.w	r8,31
80004dac:	e0 89 00 15 	brgt	80004dd6 <_vfprintf_r+0x87a>
80004db0:	f2 ca ff f8 	sub	r10,r9,-8
80004db4:	72 16       	ld.w	r6,r9[0x4]
80004db6:	72 09       	ld.w	r9,r9[0x0]
80004db8:	51 0a       	stdsp	sp[0x40],r10
80004dba:	50 59       	stdsp	sp[0x14],r9
80004dbc:	fa ce f9 44 	sub	lr,sp,-1724
80004dc0:	50 76       	stdsp	sp[0x1c],r6
80004dc2:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004dc6:	40 5b       	lddsp	r11,sp[0x14]
80004dc8:	0c 9a       	mov	r10,r6
80004dca:	f2 eb fd 88 	st.d	r9[-632],r10
80004dce:	2f f8       	sub	r8,-1
80004dd0:	fb 48 06 b4 	st.w	sp[1716],r8
80004dd4:	c0 88       	rjmp	80004de4 <_vfprintf_r+0x888>
80004dd6:	72 1c       	ld.w	r12,r9[0x4]
80004dd8:	50 7c       	stdsp	sp[0x1c],r12
80004dda:	f2 c8 ff f8 	sub	r8,r9,-8
80004dde:	51 08       	stdsp	sp[0x40],r8
80004de0:	72 09       	ld.w	r9,r9[0x0]
80004de2:	50 59       	stdsp	sp[0x14],r9
80004de4:	40 5b       	lddsp	r11,sp[0x14]
80004de6:	40 7a       	lddsp	r10,sp[0x1c]
80004de8:	e0 a0 1c d6 	rcall	80008794 <__isinfd>
80004dec:	18 96       	mov	r6,r12
80004dee:	c1 70       	breq	80004e1c <_vfprintf_r+0x8c0>
80004df0:	30 08       	mov	r8,0
80004df2:	30 09       	mov	r9,0
80004df4:	40 5b       	lddsp	r11,sp[0x14]
80004df6:	40 7a       	lddsp	r10,sp[0x1c]
80004df8:	e0 a0 20 66 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80004dfc:	c0 40       	breq	80004e04 <_vfprintf_r+0x8a8>
80004dfe:	32 d8       	mov	r8,45
80004e00:	fb 68 06 bb 	st.b	sp[1723],r8
80004e04:	fe c8 ae 60 	sub	r8,pc,-20896
80004e08:	fe c6 ae 60 	sub	r6,pc,-20896
80004e0c:	a7 d5       	cbr	r5,0x7
80004e0e:	e0 40 00 47 	cp.w	r0,71
80004e12:	f0 06 17 a0 	movle	r6,r8
80004e16:	30 32       	mov	r2,3
80004e18:	e0 8f 06 ce 	bral	80005bb4 <_vfprintf_r+0x1658>
80004e1c:	40 5b       	lddsp	r11,sp[0x14]
80004e1e:	40 7a       	lddsp	r10,sp[0x1c]
80004e20:	e0 a0 1c cf 	rcall	800087be <__isnand>
80004e24:	c0 e0       	breq	80004e40 <_vfprintf_r+0x8e4>
80004e26:	50 26       	stdsp	sp[0x8],r6
80004e28:	fe c8 ae 7c 	sub	r8,pc,-20868
80004e2c:	fe c6 ae 7c 	sub	r6,pc,-20868
80004e30:	a7 d5       	cbr	r5,0x7
80004e32:	e0 40 00 47 	cp.w	r0,71
80004e36:	f0 06 17 a0 	movle	r6,r8
80004e3a:	30 32       	mov	r2,3
80004e3c:	e0 8f 06 c2 	bral	80005bc0 <_vfprintf_r+0x1664>
80004e40:	40 2a       	lddsp	r10,sp[0x8]
80004e42:	5b fa       	cp.w	r10,-1
80004e44:	c0 41       	brne	80004e4c <_vfprintf_r+0x8f0>
80004e46:	30 69       	mov	r9,6
80004e48:	50 29       	stdsp	sp[0x8],r9
80004e4a:	c1 18       	rjmp	80004e6c <_vfprintf_r+0x910>
80004e4c:	e0 40 00 47 	cp.w	r0,71
80004e50:	5f 09       	sreq	r9
80004e52:	e0 40 00 67 	cp.w	r0,103
80004e56:	5f 08       	sreq	r8
80004e58:	f3 e8 10 08 	or	r8,r9,r8
80004e5c:	f8 08 18 00 	cp.b	r8,r12
80004e60:	c0 60       	breq	80004e6c <_vfprintf_r+0x910>
80004e62:	40 28       	lddsp	r8,sp[0x8]
80004e64:	58 08       	cp.w	r8,0
80004e66:	f9 b8 00 01 	moveq	r8,1
80004e6a:	50 28       	stdsp	sp[0x8],r8
80004e6c:	40 78       	lddsp	r8,sp[0x1c]
80004e6e:	40 59       	lddsp	r9,sp[0x14]
80004e70:	fa e9 06 94 	st.d	sp[1684],r8
80004e74:	a9 a5       	sbr	r5,0x8
80004e76:	fa f8 06 94 	ld.w	r8,sp[1684]
80004e7a:	58 08       	cp.w	r8,0
80004e7c:	c0 65       	brlt	80004e88 <_vfprintf_r+0x92c>
80004e7e:	40 5e       	lddsp	lr,sp[0x14]
80004e80:	30 0c       	mov	r12,0
80004e82:	50 6e       	stdsp	sp[0x18],lr
80004e84:	50 9c       	stdsp	sp[0x24],r12
80004e86:	c0 78       	rjmp	80004e94 <_vfprintf_r+0x938>
80004e88:	40 5b       	lddsp	r11,sp[0x14]
80004e8a:	32 da       	mov	r10,45
80004e8c:	ee 1b 80 00 	eorh	r11,0x8000
80004e90:	50 9a       	stdsp	sp[0x24],r10
80004e92:	50 6b       	stdsp	sp[0x18],r11
80004e94:	e0 40 00 46 	cp.w	r0,70
80004e98:	5f 09       	sreq	r9
80004e9a:	e0 40 00 66 	cp.w	r0,102
80004e9e:	5f 08       	sreq	r8
80004ea0:	f3 e8 10 08 	or	r8,r9,r8
80004ea4:	50 48       	stdsp	sp[0x10],r8
80004ea6:	c0 40       	breq	80004eae <_vfprintf_r+0x952>
80004ea8:	40 22       	lddsp	r2,sp[0x8]
80004eaa:	30 39       	mov	r9,3
80004eac:	c1 08       	rjmp	80004ecc <_vfprintf_r+0x970>
80004eae:	e0 40 00 45 	cp.w	r0,69
80004eb2:	5f 09       	sreq	r9
80004eb4:	e0 40 00 65 	cp.w	r0,101
80004eb8:	5f 08       	sreq	r8
80004eba:	40 22       	lddsp	r2,sp[0x8]
80004ebc:	10 49       	or	r9,r8
80004ebe:	2f f2       	sub	r2,-1
80004ec0:	40 46       	lddsp	r6,sp[0x10]
80004ec2:	ec 09 18 00 	cp.b	r9,r6
80004ec6:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004eca:	30 29       	mov	r9,2
80004ecc:	fa c8 f9 5c 	sub	r8,sp,-1700
80004ed0:	1a d8       	st.w	--sp,r8
80004ed2:	fa c8 f9 54 	sub	r8,sp,-1708
80004ed6:	1a d8       	st.w	--sp,r8
80004ed8:	fa c8 f9 4c 	sub	r8,sp,-1716
80004edc:	08 9c       	mov	r12,r4
80004ede:	1a d8       	st.w	--sp,r8
80004ee0:	04 98       	mov	r8,r2
80004ee2:	40 9b       	lddsp	r11,sp[0x24]
80004ee4:	40 aa       	lddsp	r10,sp[0x28]
80004ee6:	e0 a0 0b c3 	rcall	8000666c <_dtoa_r>
80004eea:	e0 40 00 47 	cp.w	r0,71
80004eee:	5f 19       	srne	r9
80004ef0:	e0 40 00 67 	cp.w	r0,103
80004ef4:	5f 18       	srne	r8
80004ef6:	18 96       	mov	r6,r12
80004ef8:	2f dd       	sub	sp,-12
80004efa:	f3 e8 00 08 	and	r8,r9,r8
80004efe:	c0 41       	brne	80004f06 <_vfprintf_r+0x9aa>
80004f00:	ed b5 00 00 	bld	r5,0x0
80004f04:	c3 01       	brne	80004f64 <_vfprintf_r+0xa08>
80004f06:	ec 02 00 0e 	add	lr,r6,r2
80004f0a:	50 3e       	stdsp	sp[0xc],lr
80004f0c:	40 4c       	lddsp	r12,sp[0x10]
80004f0e:	58 0c       	cp.w	r12,0
80004f10:	c1 50       	breq	80004f3a <_vfprintf_r+0x9de>
80004f12:	0d 89       	ld.ub	r9,r6[0x0]
80004f14:	33 08       	mov	r8,48
80004f16:	f0 09 18 00 	cp.b	r9,r8
80004f1a:	c0 b1       	brne	80004f30 <_vfprintf_r+0x9d4>
80004f1c:	30 08       	mov	r8,0
80004f1e:	30 09       	mov	r9,0
80004f20:	40 6b       	lddsp	r11,sp[0x18]
80004f22:	40 7a       	lddsp	r10,sp[0x1c]
80004f24:	e0 a0 1f 89 	rcall	80008e36 <__avr32_f64_cmp_eq>
80004f28:	fb b2 00 01 	rsubeq	r2,1
80004f2c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004f30:	40 3b       	lddsp	r11,sp[0xc]
80004f32:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004f36:	10 0b       	add	r11,r8
80004f38:	50 3b       	stdsp	sp[0xc],r11
80004f3a:	40 6b       	lddsp	r11,sp[0x18]
80004f3c:	30 08       	mov	r8,0
80004f3e:	30 09       	mov	r9,0
80004f40:	40 7a       	lddsp	r10,sp[0x1c]
80004f42:	e0 a0 1f 7a 	rcall	80008e36 <__avr32_f64_cmp_eq>
80004f46:	c0 90       	breq	80004f58 <_vfprintf_r+0x9fc>
80004f48:	40 3a       	lddsp	r10,sp[0xc]
80004f4a:	fb 4a 06 a4 	st.w	sp[1700],r10
80004f4e:	c0 58       	rjmp	80004f58 <_vfprintf_r+0x9fc>
80004f50:	10 c9       	st.b	r8++,r9
80004f52:	fb 48 06 a4 	st.w	sp[1700],r8
80004f56:	c0 28       	rjmp	80004f5a <_vfprintf_r+0x9fe>
80004f58:	33 09       	mov	r9,48
80004f5a:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004f5e:	40 3e       	lddsp	lr,sp[0xc]
80004f60:	1c 38       	cp.w	r8,lr
80004f62:	cf 73       	brcs	80004f50 <_vfprintf_r+0x9f4>
80004f64:	e0 40 00 47 	cp.w	r0,71
80004f68:	5f 09       	sreq	r9
80004f6a:	e0 40 00 67 	cp.w	r0,103
80004f6e:	5f 08       	sreq	r8
80004f70:	f3 e8 10 08 	or	r8,r9,r8
80004f74:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004f78:	0c 19       	sub	r9,r6
80004f7a:	50 69       	stdsp	sp[0x18],r9
80004f7c:	58 08       	cp.w	r8,0
80004f7e:	c0 b0       	breq	80004f94 <_vfprintf_r+0xa38>
80004f80:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004f84:	5b d8       	cp.w	r8,-3
80004f86:	c0 55       	brlt	80004f90 <_vfprintf_r+0xa34>
80004f88:	40 2c       	lddsp	r12,sp[0x8]
80004f8a:	18 38       	cp.w	r8,r12
80004f8c:	e0 8a 00 6a 	brle	80005060 <_vfprintf_r+0xb04>
80004f90:	20 20       	sub	r0,2
80004f92:	c0 58       	rjmp	80004f9c <_vfprintf_r+0xa40>
80004f94:	e0 40 00 65 	cp.w	r0,101
80004f98:	e0 89 00 46 	brgt	80005024 <_vfprintf_r+0xac8>
80004f9c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004fa0:	fb 60 06 9c 	st.b	sp[1692],r0
80004fa4:	20 1b       	sub	r11,1
80004fa6:	fb 4b 06 ac 	st.w	sp[1708],r11
80004faa:	c0 47       	brpl	80004fb2 <_vfprintf_r+0xa56>
80004fac:	5c 3b       	neg	r11
80004fae:	32 d8       	mov	r8,45
80004fb0:	c0 28       	rjmp	80004fb4 <_vfprintf_r+0xa58>
80004fb2:	32 b8       	mov	r8,43
80004fb4:	fb 68 06 9d 	st.b	sp[1693],r8
80004fb8:	58 9b       	cp.w	r11,9
80004fba:	e0 8a 00 1d 	brle	80004ff4 <_vfprintf_r+0xa98>
80004fbe:	fa c9 fa 35 	sub	r9,sp,-1483
80004fc2:	30 aa       	mov	r10,10
80004fc4:	12 98       	mov	r8,r9
80004fc6:	0e 9c       	mov	r12,r7
80004fc8:	0c 92       	mov	r2,r6
80004fca:	f6 0a 0c 06 	divs	r6,r11,r10
80004fce:	0e 9b       	mov	r11,r7
80004fd0:	2d 0b       	sub	r11,-48
80004fd2:	10 fb       	st.b	--r8,r11
80004fd4:	0c 9b       	mov	r11,r6
80004fd6:	58 96       	cp.w	r6,9
80004fd8:	fe 99 ff f9 	brgt	80004fca <_vfprintf_r+0xa6e>
80004fdc:	2d 0b       	sub	r11,-48
80004fde:	18 97       	mov	r7,r12
80004fe0:	04 96       	mov	r6,r2
80004fe2:	10 fb       	st.b	--r8,r11
80004fe4:	fa ca f9 62 	sub	r10,sp,-1694
80004fe8:	c0 38       	rjmp	80004fee <_vfprintf_r+0xa92>
80004fea:	11 3b       	ld.ub	r11,r8++
80004fec:	14 cb       	st.b	r10++,r11
80004fee:	12 38       	cp.w	r8,r9
80004ff0:	cf d3       	brcs	80004fea <_vfprintf_r+0xa8e>
80004ff2:	c0 98       	rjmp	80005004 <_vfprintf_r+0xaa8>
80004ff4:	2d 0b       	sub	r11,-48
80004ff6:	33 08       	mov	r8,48
80004ff8:	fb 6b 06 9f 	st.b	sp[1695],r11
80004ffc:	fb 68 06 9e 	st.b	sp[1694],r8
80005000:	fa ca f9 60 	sub	r10,sp,-1696
80005004:	fa c8 f9 64 	sub	r8,sp,-1692
80005008:	f4 08 01 08 	sub	r8,r10,r8
8000500c:	50 e8       	stdsp	sp[0x38],r8
8000500e:	10 92       	mov	r2,r8
80005010:	40 6b       	lddsp	r11,sp[0x18]
80005012:	16 02       	add	r2,r11
80005014:	58 1b       	cp.w	r11,1
80005016:	e0 89 00 05 	brgt	80005020 <_vfprintf_r+0xac4>
8000501a:	ed b5 00 00 	bld	r5,0x0
8000501e:	c3 51       	brne	80005088 <_vfprintf_r+0xb2c>
80005020:	2f f2       	sub	r2,-1
80005022:	c3 38       	rjmp	80005088 <_vfprintf_r+0xb2c>
80005024:	e0 40 00 66 	cp.w	r0,102
80005028:	c1 c1       	brne	80005060 <_vfprintf_r+0xb04>
8000502a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000502e:	58 02       	cp.w	r2,0
80005030:	e0 8a 00 0c 	brle	80005048 <_vfprintf_r+0xaec>
80005034:	40 2a       	lddsp	r10,sp[0x8]
80005036:	58 0a       	cp.w	r10,0
80005038:	c0 41       	brne	80005040 <_vfprintf_r+0xae4>
8000503a:	ed b5 00 00 	bld	r5,0x0
8000503e:	c2 51       	brne	80005088 <_vfprintf_r+0xb2c>
80005040:	2f f2       	sub	r2,-1
80005042:	40 29       	lddsp	r9,sp[0x8]
80005044:	12 02       	add	r2,r9
80005046:	c0 b8       	rjmp	8000505c <_vfprintf_r+0xb00>
80005048:	40 28       	lddsp	r8,sp[0x8]
8000504a:	58 08       	cp.w	r8,0
8000504c:	c0 61       	brne	80005058 <_vfprintf_r+0xafc>
8000504e:	ed b5 00 00 	bld	r5,0x0
80005052:	c0 30       	breq	80005058 <_vfprintf_r+0xafc>
80005054:	30 12       	mov	r2,1
80005056:	c1 98       	rjmp	80005088 <_vfprintf_r+0xb2c>
80005058:	40 22       	lddsp	r2,sp[0x8]
8000505a:	2f e2       	sub	r2,-2
8000505c:	36 60       	mov	r0,102
8000505e:	c1 58       	rjmp	80005088 <_vfprintf_r+0xb2c>
80005060:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005064:	40 6e       	lddsp	lr,sp[0x18]
80005066:	1c 32       	cp.w	r2,lr
80005068:	c0 65       	brlt	80005074 <_vfprintf_r+0xb18>
8000506a:	ed b5 00 00 	bld	r5,0x0
8000506e:	f7 b2 00 ff 	subeq	r2,-1
80005072:	c0 a8       	rjmp	80005086 <_vfprintf_r+0xb2a>
80005074:	e4 08 11 02 	rsub	r8,r2,2
80005078:	40 6c       	lddsp	r12,sp[0x18]
8000507a:	58 02       	cp.w	r2,0
8000507c:	f0 02 17 a0 	movle	r2,r8
80005080:	f9 b2 09 01 	movgt	r2,1
80005084:	18 02       	add	r2,r12
80005086:	36 70       	mov	r0,103
80005088:	40 9b       	lddsp	r11,sp[0x24]
8000508a:	58 0b       	cp.w	r11,0
8000508c:	e0 80 05 94 	breq	80005bb4 <_vfprintf_r+0x1658>
80005090:	32 d8       	mov	r8,45
80005092:	fb 68 06 bb 	st.b	sp[1723],r8
80005096:	e0 8f 05 93 	bral	80005bbc <_vfprintf_r+0x1660>
8000509a:	50 a7       	stdsp	sp[0x28],r7
8000509c:	04 94       	mov	r4,r2
8000509e:	0c 97       	mov	r7,r6
800050a0:	02 92       	mov	r2,r1
800050a2:	06 96       	mov	r6,r3
800050a4:	40 41       	lddsp	r1,sp[0x10]
800050a6:	40 93       	lddsp	r3,sp[0x24]
800050a8:	0e 99       	mov	r9,r7
800050aa:	ed b5 00 05 	bld	r5,0x5
800050ae:	c4 81       	brne	8000513e <_vfprintf_r+0xbe2>
800050b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050b4:	40 3e       	lddsp	lr,sp[0xc]
800050b6:	58 0e       	cp.w	lr,0
800050b8:	c1 d0       	breq	800050f2 <_vfprintf_r+0xb96>
800050ba:	10 36       	cp.w	r6,r8
800050bc:	c0 64       	brge	800050c8 <_vfprintf_r+0xb6c>
800050be:	fa cc f9 44 	sub	r12,sp,-1724
800050c2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800050c6:	c1 d8       	rjmp	80005100 <_vfprintf_r+0xba4>
800050c8:	fa c8 f9 50 	sub	r8,sp,-1712
800050cc:	1a d8       	st.w	--sp,r8
800050ce:	fa c8 fa b8 	sub	r8,sp,-1352
800050d2:	04 9a       	mov	r10,r2
800050d4:	1a d8       	st.w	--sp,r8
800050d6:	fa c8 fb b4 	sub	r8,sp,-1100
800050da:	0c 9b       	mov	r11,r6
800050dc:	1a d8       	st.w	--sp,r8
800050de:	08 9c       	mov	r12,r4
800050e0:	fa c8 f9 40 	sub	r8,sp,-1728
800050e4:	fa c9 ff b4 	sub	r9,sp,-76
800050e8:	fe b0 f8 a4 	rcall	80004230 <get_arg>
800050ec:	2f dd       	sub	sp,-12
800050ee:	78 0a       	ld.w	r10,r12[0x0]
800050f0:	c2 08       	rjmp	80005130 <_vfprintf_r+0xbd4>
800050f2:	2f f7       	sub	r7,-1
800050f4:	10 39       	cp.w	r9,r8
800050f6:	c0 84       	brge	80005106 <_vfprintf_r+0xbaa>
800050f8:	fa cb f9 44 	sub	r11,sp,-1724
800050fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005100:	ec fa fd 88 	ld.w	r10,r6[-632]
80005104:	c1 68       	rjmp	80005130 <_vfprintf_r+0xbd4>
80005106:	41 09       	lddsp	r9,sp[0x40]
80005108:	59 f8       	cp.w	r8,31
8000510a:	e0 89 00 10 	brgt	8000512a <_vfprintf_r+0xbce>
8000510e:	f2 ca ff fc 	sub	r10,r9,-4
80005112:	51 0a       	stdsp	sp[0x40],r10
80005114:	fa c6 f9 44 	sub	r6,sp,-1724
80005118:	72 0a       	ld.w	r10,r9[0x0]
8000511a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000511e:	f3 4a fd 88 	st.w	r9[-632],r10
80005122:	2f f8       	sub	r8,-1
80005124:	fb 48 06 b4 	st.w	sp[1716],r8
80005128:	c0 48       	rjmp	80005130 <_vfprintf_r+0xbd4>
8000512a:	72 0a       	ld.w	r10,r9[0x0]
8000512c:	2f c9       	sub	r9,-4
8000512e:	51 09       	stdsp	sp[0x40],r9
80005130:	40 be       	lddsp	lr,sp[0x2c]
80005132:	1c 98       	mov	r8,lr
80005134:	95 1e       	st.w	r10[0x4],lr
80005136:	bf 58       	asr	r8,0x1f
80005138:	95 08       	st.w	r10[0x0],r8
8000513a:	fe 9f fa 9f 	bral	80004678 <_vfprintf_r+0x11c>
8000513e:	ed b5 00 04 	bld	r5,0x4
80005142:	c4 80       	breq	800051d2 <_vfprintf_r+0xc76>
80005144:	e2 15 00 40 	andl	r5,0x40,COH
80005148:	c4 50       	breq	800051d2 <_vfprintf_r+0xc76>
8000514a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000514e:	40 3c       	lddsp	r12,sp[0xc]
80005150:	58 0c       	cp.w	r12,0
80005152:	c1 d0       	breq	8000518c <_vfprintf_r+0xc30>
80005154:	10 36       	cp.w	r6,r8
80005156:	c0 64       	brge	80005162 <_vfprintf_r+0xc06>
80005158:	fa cb f9 44 	sub	r11,sp,-1724
8000515c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005160:	c1 d8       	rjmp	8000519a <_vfprintf_r+0xc3e>
80005162:	fa c8 f9 50 	sub	r8,sp,-1712
80005166:	1a d8       	st.w	--sp,r8
80005168:	fa c8 fa b8 	sub	r8,sp,-1352
8000516c:	04 9a       	mov	r10,r2
8000516e:	1a d8       	st.w	--sp,r8
80005170:	fa c8 fb b4 	sub	r8,sp,-1100
80005174:	0c 9b       	mov	r11,r6
80005176:	1a d8       	st.w	--sp,r8
80005178:	08 9c       	mov	r12,r4
8000517a:	fa c8 f9 40 	sub	r8,sp,-1728
8000517e:	fa c9 ff b4 	sub	r9,sp,-76
80005182:	fe b0 f8 57 	rcall	80004230 <get_arg>
80005186:	2f dd       	sub	sp,-12
80005188:	78 0a       	ld.w	r10,r12[0x0]
8000518a:	c2 08       	rjmp	800051ca <_vfprintf_r+0xc6e>
8000518c:	2f f7       	sub	r7,-1
8000518e:	10 39       	cp.w	r9,r8
80005190:	c0 84       	brge	800051a0 <_vfprintf_r+0xc44>
80005192:	fa ca f9 44 	sub	r10,sp,-1724
80005196:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000519a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000519e:	c1 68       	rjmp	800051ca <_vfprintf_r+0xc6e>
800051a0:	41 09       	lddsp	r9,sp[0x40]
800051a2:	59 f8       	cp.w	r8,31
800051a4:	e0 89 00 10 	brgt	800051c4 <_vfprintf_r+0xc68>
800051a8:	f2 ca ff fc 	sub	r10,r9,-4
800051ac:	51 0a       	stdsp	sp[0x40],r10
800051ae:	fa c6 f9 44 	sub	r6,sp,-1724
800051b2:	72 0a       	ld.w	r10,r9[0x0]
800051b4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800051b8:	f3 4a fd 88 	st.w	r9[-632],r10
800051bc:	2f f8       	sub	r8,-1
800051be:	fb 48 06 b4 	st.w	sp[1716],r8
800051c2:	c0 48       	rjmp	800051ca <_vfprintf_r+0xc6e>
800051c4:	72 0a       	ld.w	r10,r9[0x0]
800051c6:	2f c9       	sub	r9,-4
800051c8:	51 09       	stdsp	sp[0x40],r9
800051ca:	40 be       	lddsp	lr,sp[0x2c]
800051cc:	b4 0e       	st.h	r10[0x0],lr
800051ce:	fe 9f fa 55 	bral	80004678 <_vfprintf_r+0x11c>
800051d2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051d6:	40 3c       	lddsp	r12,sp[0xc]
800051d8:	58 0c       	cp.w	r12,0
800051da:	c1 d0       	breq	80005214 <_vfprintf_r+0xcb8>
800051dc:	10 36       	cp.w	r6,r8
800051de:	c0 64       	brge	800051ea <_vfprintf_r+0xc8e>
800051e0:	fa cb f9 44 	sub	r11,sp,-1724
800051e4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051e8:	c1 d8       	rjmp	80005222 <_vfprintf_r+0xcc6>
800051ea:	fa c8 f9 50 	sub	r8,sp,-1712
800051ee:	1a d8       	st.w	--sp,r8
800051f0:	fa c8 fa b8 	sub	r8,sp,-1352
800051f4:	04 9a       	mov	r10,r2
800051f6:	1a d8       	st.w	--sp,r8
800051f8:	fa c8 fb b4 	sub	r8,sp,-1100
800051fc:	0c 9b       	mov	r11,r6
800051fe:	1a d8       	st.w	--sp,r8
80005200:	08 9c       	mov	r12,r4
80005202:	fa c8 f9 40 	sub	r8,sp,-1728
80005206:	fa c9 ff b4 	sub	r9,sp,-76
8000520a:	fe b0 f8 13 	rcall	80004230 <get_arg>
8000520e:	2f dd       	sub	sp,-12
80005210:	78 0a       	ld.w	r10,r12[0x0]
80005212:	c2 08       	rjmp	80005252 <_vfprintf_r+0xcf6>
80005214:	2f f7       	sub	r7,-1
80005216:	10 39       	cp.w	r9,r8
80005218:	c0 84       	brge	80005228 <_vfprintf_r+0xccc>
8000521a:	fa ca f9 44 	sub	r10,sp,-1724
8000521e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005222:	ec fa fd 88 	ld.w	r10,r6[-632]
80005226:	c1 68       	rjmp	80005252 <_vfprintf_r+0xcf6>
80005228:	41 09       	lddsp	r9,sp[0x40]
8000522a:	59 f8       	cp.w	r8,31
8000522c:	e0 89 00 10 	brgt	8000524c <_vfprintf_r+0xcf0>
80005230:	f2 ca ff fc 	sub	r10,r9,-4
80005234:	51 0a       	stdsp	sp[0x40],r10
80005236:	fa c6 f9 44 	sub	r6,sp,-1724
8000523a:	72 0a       	ld.w	r10,r9[0x0]
8000523c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005240:	f3 4a fd 88 	st.w	r9[-632],r10
80005244:	2f f8       	sub	r8,-1
80005246:	fb 48 06 b4 	st.w	sp[1716],r8
8000524a:	c0 48       	rjmp	80005252 <_vfprintf_r+0xcf6>
8000524c:	72 0a       	ld.w	r10,r9[0x0]
8000524e:	2f c9       	sub	r9,-4
80005250:	51 09       	stdsp	sp[0x40],r9
80005252:	40 be       	lddsp	lr,sp[0x2c]
80005254:	95 0e       	st.w	r10[0x0],lr
80005256:	fe 9f fa 11 	bral	80004678 <_vfprintf_r+0x11c>
8000525a:	50 a7       	stdsp	sp[0x28],r7
8000525c:	50 80       	stdsp	sp[0x20],r0
8000525e:	0c 97       	mov	r7,r6
80005260:	04 94       	mov	r4,r2
80005262:	06 96       	mov	r6,r3
80005264:	02 92       	mov	r2,r1
80005266:	40 93       	lddsp	r3,sp[0x24]
80005268:	10 90       	mov	r0,r8
8000526a:	40 41       	lddsp	r1,sp[0x10]
8000526c:	a5 a5       	sbr	r5,0x4
8000526e:	c0 a8       	rjmp	80005282 <_vfprintf_r+0xd26>
80005270:	50 a7       	stdsp	sp[0x28],r7
80005272:	50 80       	stdsp	sp[0x20],r0
80005274:	0c 97       	mov	r7,r6
80005276:	04 94       	mov	r4,r2
80005278:	06 96       	mov	r6,r3
8000527a:	02 92       	mov	r2,r1
8000527c:	40 93       	lddsp	r3,sp[0x24]
8000527e:	10 90       	mov	r0,r8
80005280:	40 41       	lddsp	r1,sp[0x10]
80005282:	ed b5 00 05 	bld	r5,0x5
80005286:	c5 d1       	brne	80005340 <_vfprintf_r+0xde4>
80005288:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000528c:	40 3c       	lddsp	r12,sp[0xc]
8000528e:	58 0c       	cp.w	r12,0
80005290:	c2 60       	breq	800052dc <_vfprintf_r+0xd80>
80005292:	10 36       	cp.w	r6,r8
80005294:	c0 a4       	brge	800052a8 <_vfprintf_r+0xd4c>
80005296:	fa cb f9 44 	sub	r11,sp,-1724
8000529a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000529e:	ec e8 fd 88 	ld.d	r8,r6[-632]
800052a2:	fa e9 00 00 	st.d	sp[0],r8
800052a6:	c1 88       	rjmp	800052d6 <_vfprintf_r+0xd7a>
800052a8:	fa c8 f9 50 	sub	r8,sp,-1712
800052ac:	1a d8       	st.w	--sp,r8
800052ae:	fa c8 fa b8 	sub	r8,sp,-1352
800052b2:	04 9a       	mov	r10,r2
800052b4:	1a d8       	st.w	--sp,r8
800052b6:	0c 9b       	mov	r11,r6
800052b8:	fa c8 fb b4 	sub	r8,sp,-1100
800052bc:	08 9c       	mov	r12,r4
800052be:	1a d8       	st.w	--sp,r8
800052c0:	fa c8 f9 40 	sub	r8,sp,-1728
800052c4:	fa c9 ff b4 	sub	r9,sp,-76
800052c8:	fe b0 f7 b4 	rcall	80004230 <get_arg>
800052cc:	2f dd       	sub	sp,-12
800052ce:	f8 ea 00 00 	ld.d	r10,r12[0]
800052d2:	fa eb 00 00 	st.d	sp[0],r10
800052d6:	30 08       	mov	r8,0
800052d8:	e0 8f 03 de 	bral	80005a94 <_vfprintf_r+0x1538>
800052dc:	ee ca ff ff 	sub	r10,r7,-1
800052e0:	10 37       	cp.w	r7,r8
800052e2:	c0 b4       	brge	800052f8 <_vfprintf_r+0xd9c>
800052e4:	fa c9 f9 44 	sub	r9,sp,-1724
800052e8:	14 97       	mov	r7,r10
800052ea:	f2 06 00 36 	add	r6,r9,r6<<0x3
800052ee:	ec ea fd 88 	ld.d	r10,r6[-632]
800052f2:	fa eb 00 00 	st.d	sp[0],r10
800052f6:	c1 88       	rjmp	80005326 <_vfprintf_r+0xdca>
800052f8:	41 09       	lddsp	r9,sp[0x40]
800052fa:	59 f8       	cp.w	r8,31
800052fc:	e0 89 00 18 	brgt	8000532c <_vfprintf_r+0xdd0>
80005300:	f2 e6 00 00 	ld.d	r6,r9[0]
80005304:	f2 cb ff f8 	sub	r11,r9,-8
80005308:	fa e7 00 00 	st.d	sp[0],r6
8000530c:	51 0b       	stdsp	sp[0x40],r11
8000530e:	fa c6 f9 44 	sub	r6,sp,-1724
80005312:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005316:	fa e6 00 00 	ld.d	r6,sp[0]
8000531a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000531e:	2f f8       	sub	r8,-1
80005320:	14 97       	mov	r7,r10
80005322:	fb 48 06 b4 	st.w	sp[1716],r8
80005326:	40 38       	lddsp	r8,sp[0xc]
80005328:	e0 8f 03 b6 	bral	80005a94 <_vfprintf_r+0x1538>
8000532c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005330:	40 38       	lddsp	r8,sp[0xc]
80005332:	fa e7 00 00 	st.d	sp[0],r6
80005336:	2f 89       	sub	r9,-8
80005338:	14 97       	mov	r7,r10
8000533a:	51 09       	stdsp	sp[0x40],r9
8000533c:	e0 8f 03 ac 	bral	80005a94 <_vfprintf_r+0x1538>
80005340:	ed b5 00 04 	bld	r5,0x4
80005344:	c1 61       	brne	80005370 <_vfprintf_r+0xe14>
80005346:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000534a:	40 3e       	lddsp	lr,sp[0xc]
8000534c:	58 0e       	cp.w	lr,0
8000534e:	c0 80       	breq	8000535e <_vfprintf_r+0xe02>
80005350:	10 36       	cp.w	r6,r8
80005352:	c6 74       	brge	80005420 <_vfprintf_r+0xec4>
80005354:	fa cc f9 44 	sub	r12,sp,-1724
80005358:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000535c:	c8 08       	rjmp	8000545c <_vfprintf_r+0xf00>
8000535e:	ee ca ff ff 	sub	r10,r7,-1
80005362:	10 37       	cp.w	r7,r8
80005364:	c7 f4       	brge	80005462 <_vfprintf_r+0xf06>
80005366:	fa cb f9 44 	sub	r11,sp,-1724
8000536a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000536e:	c7 68       	rjmp	8000545a <_vfprintf_r+0xefe>
80005370:	ed b5 00 06 	bld	r5,0x6
80005374:	c4 a1       	brne	80005408 <_vfprintf_r+0xeac>
80005376:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000537a:	40 3c       	lddsp	r12,sp[0xc]
8000537c:	58 0c       	cp.w	r12,0
8000537e:	c1 d0       	breq	800053b8 <_vfprintf_r+0xe5c>
80005380:	10 36       	cp.w	r6,r8
80005382:	c0 64       	brge	8000538e <_vfprintf_r+0xe32>
80005384:	fa cb f9 44 	sub	r11,sp,-1724
80005388:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000538c:	c1 f8       	rjmp	800053ca <_vfprintf_r+0xe6e>
8000538e:	fa c8 f9 50 	sub	r8,sp,-1712
80005392:	1a d8       	st.w	--sp,r8
80005394:	fa c8 fa b8 	sub	r8,sp,-1352
80005398:	1a d8       	st.w	--sp,r8
8000539a:	fa c8 fb b4 	sub	r8,sp,-1100
8000539e:	1a d8       	st.w	--sp,r8
800053a0:	fa c8 f9 40 	sub	r8,sp,-1728
800053a4:	fa c9 ff b4 	sub	r9,sp,-76
800053a8:	04 9a       	mov	r10,r2
800053aa:	0c 9b       	mov	r11,r6
800053ac:	08 9c       	mov	r12,r4
800053ae:	fe b0 f7 41 	rcall	80004230 <get_arg>
800053b2:	2f dd       	sub	sp,-12
800053b4:	98 18       	ld.sh	r8,r12[0x2]
800053b6:	c2 68       	rjmp	80005402 <_vfprintf_r+0xea6>
800053b8:	ee ca ff ff 	sub	r10,r7,-1
800053bc:	10 37       	cp.w	r7,r8
800053be:	c0 94       	brge	800053d0 <_vfprintf_r+0xe74>
800053c0:	fa c9 f9 44 	sub	r9,sp,-1724
800053c4:	14 97       	mov	r7,r10
800053c6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800053ca:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800053ce:	c1 a8       	rjmp	80005402 <_vfprintf_r+0xea6>
800053d0:	41 09       	lddsp	r9,sp[0x40]
800053d2:	59 f8       	cp.w	r8,31
800053d4:	e0 89 00 13 	brgt	800053fa <_vfprintf_r+0xe9e>
800053d8:	f2 cb ff fc 	sub	r11,r9,-4
800053dc:	51 0b       	stdsp	sp[0x40],r11
800053de:	72 09       	ld.w	r9,r9[0x0]
800053e0:	fa c6 f9 44 	sub	r6,sp,-1724
800053e4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800053e8:	2f f8       	sub	r8,-1
800053ea:	f7 49 fd 88 	st.w	r11[-632],r9
800053ee:	fb 48 06 b4 	st.w	sp[1716],r8
800053f2:	14 97       	mov	r7,r10
800053f4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800053f8:	c0 58       	rjmp	80005402 <_vfprintf_r+0xea6>
800053fa:	92 18       	ld.sh	r8,r9[0x2]
800053fc:	14 97       	mov	r7,r10
800053fe:	2f c9       	sub	r9,-4
80005400:	51 09       	stdsp	sp[0x40],r9
80005402:	5c 78       	castu.h	r8
80005404:	50 18       	stdsp	sp[0x4],r8
80005406:	c4 68       	rjmp	80005492 <_vfprintf_r+0xf36>
80005408:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000540c:	40 3c       	lddsp	r12,sp[0xc]
8000540e:	58 0c       	cp.w	r12,0
80005410:	c1 d0       	breq	8000544a <_vfprintf_r+0xeee>
80005412:	10 36       	cp.w	r6,r8
80005414:	c0 64       	brge	80005420 <_vfprintf_r+0xec4>
80005416:	fa cb f9 44 	sub	r11,sp,-1724
8000541a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000541e:	c1 f8       	rjmp	8000545c <_vfprintf_r+0xf00>
80005420:	fa c8 f9 50 	sub	r8,sp,-1712
80005424:	1a d8       	st.w	--sp,r8
80005426:	fa c8 fa b8 	sub	r8,sp,-1352
8000542a:	0c 9b       	mov	r11,r6
8000542c:	1a d8       	st.w	--sp,r8
8000542e:	fa c8 fb b4 	sub	r8,sp,-1100
80005432:	04 9a       	mov	r10,r2
80005434:	1a d8       	st.w	--sp,r8
80005436:	08 9c       	mov	r12,r4
80005438:	fa c8 f9 40 	sub	r8,sp,-1728
8000543c:	fa c9 ff b4 	sub	r9,sp,-76
80005440:	fe b0 f6 f8 	rcall	80004230 <get_arg>
80005444:	2f dd       	sub	sp,-12
80005446:	78 0b       	ld.w	r11,r12[0x0]
80005448:	c2 48       	rjmp	80005490 <_vfprintf_r+0xf34>
8000544a:	ee ca ff ff 	sub	r10,r7,-1
8000544e:	10 37       	cp.w	r7,r8
80005450:	c0 94       	brge	80005462 <_vfprintf_r+0xf06>
80005452:	fa c9 f9 44 	sub	r9,sp,-1724
80005456:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000545a:	14 97       	mov	r7,r10
8000545c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005460:	c1 88       	rjmp	80005490 <_vfprintf_r+0xf34>
80005462:	41 09       	lddsp	r9,sp[0x40]
80005464:	59 f8       	cp.w	r8,31
80005466:	e0 89 00 11 	brgt	80005488 <_vfprintf_r+0xf2c>
8000546a:	f2 cb ff fc 	sub	r11,r9,-4
8000546e:	51 0b       	stdsp	sp[0x40],r11
80005470:	fa c6 f9 44 	sub	r6,sp,-1724
80005474:	72 0b       	ld.w	r11,r9[0x0]
80005476:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000547a:	f3 4b fd 88 	st.w	r9[-632],r11
8000547e:	2f f8       	sub	r8,-1
80005480:	14 97       	mov	r7,r10
80005482:	fb 48 06 b4 	st.w	sp[1716],r8
80005486:	c0 58       	rjmp	80005490 <_vfprintf_r+0xf34>
80005488:	72 0b       	ld.w	r11,r9[0x0]
8000548a:	14 97       	mov	r7,r10
8000548c:	2f c9       	sub	r9,-4
8000548e:	51 09       	stdsp	sp[0x40],r9
80005490:	50 1b       	stdsp	sp[0x4],r11
80005492:	30 0e       	mov	lr,0
80005494:	50 0e       	stdsp	sp[0x0],lr
80005496:	1c 98       	mov	r8,lr
80005498:	e0 8f 02 fe 	bral	80005a94 <_vfprintf_r+0x1538>
8000549c:	50 a7       	stdsp	sp[0x28],r7
8000549e:	50 80       	stdsp	sp[0x20],r0
800054a0:	0c 97       	mov	r7,r6
800054a2:	04 94       	mov	r4,r2
800054a4:	06 96       	mov	r6,r3
800054a6:	02 92       	mov	r2,r1
800054a8:	40 93       	lddsp	r3,sp[0x24]
800054aa:	40 41       	lddsp	r1,sp[0x10]
800054ac:	0e 99       	mov	r9,r7
800054ae:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054b2:	40 3c       	lddsp	r12,sp[0xc]
800054b4:	58 0c       	cp.w	r12,0
800054b6:	c1 d0       	breq	800054f0 <_vfprintf_r+0xf94>
800054b8:	10 36       	cp.w	r6,r8
800054ba:	c0 64       	brge	800054c6 <_vfprintf_r+0xf6a>
800054bc:	fa cb f9 44 	sub	r11,sp,-1724
800054c0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800054c4:	c1 d8       	rjmp	800054fe <_vfprintf_r+0xfa2>
800054c6:	fa c8 f9 50 	sub	r8,sp,-1712
800054ca:	1a d8       	st.w	--sp,r8
800054cc:	fa c8 fa b8 	sub	r8,sp,-1352
800054d0:	1a d8       	st.w	--sp,r8
800054d2:	fa c8 fb b4 	sub	r8,sp,-1100
800054d6:	1a d8       	st.w	--sp,r8
800054d8:	fa c9 ff b4 	sub	r9,sp,-76
800054dc:	fa c8 f9 40 	sub	r8,sp,-1728
800054e0:	04 9a       	mov	r10,r2
800054e2:	0c 9b       	mov	r11,r6
800054e4:	08 9c       	mov	r12,r4
800054e6:	fe b0 f6 a5 	rcall	80004230 <get_arg>
800054ea:	2f dd       	sub	sp,-12
800054ec:	78 09       	ld.w	r9,r12[0x0]
800054ee:	c2 18       	rjmp	80005530 <_vfprintf_r+0xfd4>
800054f0:	2f f7       	sub	r7,-1
800054f2:	10 39       	cp.w	r9,r8
800054f4:	c0 84       	brge	80005504 <_vfprintf_r+0xfa8>
800054f6:	fa ca f9 44 	sub	r10,sp,-1724
800054fa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800054fe:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005502:	c1 78       	rjmp	80005530 <_vfprintf_r+0xfd4>
80005504:	41 09       	lddsp	r9,sp[0x40]
80005506:	59 f8       	cp.w	r8,31
80005508:	e0 89 00 10 	brgt	80005528 <_vfprintf_r+0xfcc>
8000550c:	f2 ca ff fc 	sub	r10,r9,-4
80005510:	51 0a       	stdsp	sp[0x40],r10
80005512:	fa c6 f9 44 	sub	r6,sp,-1724
80005516:	72 09       	ld.w	r9,r9[0x0]
80005518:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000551c:	f5 49 fd 88 	st.w	r10[-632],r9
80005520:	2f f8       	sub	r8,-1
80005522:	fb 48 06 b4 	st.w	sp[1716],r8
80005526:	c0 58       	rjmp	80005530 <_vfprintf_r+0xfd4>
80005528:	f2 c8 ff fc 	sub	r8,r9,-4
8000552c:	51 08       	stdsp	sp[0x40],r8
8000552e:	72 09       	ld.w	r9,r9[0x0]
80005530:	33 08       	mov	r8,48
80005532:	fb 68 06 b8 	st.b	sp[1720],r8
80005536:	37 88       	mov	r8,120
80005538:	30 0e       	mov	lr,0
8000553a:	fb 68 06 b9 	st.b	sp[1721],r8
8000553e:	fe cc b5 8a 	sub	r12,pc,-19062
80005542:	50 19       	stdsp	sp[0x4],r9
80005544:	a1 b5       	sbr	r5,0x1
80005546:	50 0e       	stdsp	sp[0x0],lr
80005548:	50 dc       	stdsp	sp[0x34],r12
8000554a:	30 28       	mov	r8,2
8000554c:	37 80       	mov	r0,120
8000554e:	e0 8f 02 a3 	bral	80005a94 <_vfprintf_r+0x1538>
80005552:	50 a7       	stdsp	sp[0x28],r7
80005554:	50 80       	stdsp	sp[0x20],r0
80005556:	10 90       	mov	r0,r8
80005558:	30 08       	mov	r8,0
8000555a:	fb 68 06 bb 	st.b	sp[1723],r8
8000555e:	0c 97       	mov	r7,r6
80005560:	04 94       	mov	r4,r2
80005562:	06 96       	mov	r6,r3
80005564:	02 92       	mov	r2,r1
80005566:	40 93       	lddsp	r3,sp[0x24]
80005568:	40 41       	lddsp	r1,sp[0x10]
8000556a:	0e 99       	mov	r9,r7
8000556c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005570:	40 3b       	lddsp	r11,sp[0xc]
80005572:	58 0b       	cp.w	r11,0
80005574:	c1 d0       	breq	800055ae <_vfprintf_r+0x1052>
80005576:	10 36       	cp.w	r6,r8
80005578:	c0 64       	brge	80005584 <_vfprintf_r+0x1028>
8000557a:	fa ca f9 44 	sub	r10,sp,-1724
8000557e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005582:	c1 d8       	rjmp	800055bc <_vfprintf_r+0x1060>
80005584:	fa c8 f9 50 	sub	r8,sp,-1712
80005588:	1a d8       	st.w	--sp,r8
8000558a:	fa c8 fa b8 	sub	r8,sp,-1352
8000558e:	1a d8       	st.w	--sp,r8
80005590:	fa c8 fb b4 	sub	r8,sp,-1100
80005594:	0c 9b       	mov	r11,r6
80005596:	1a d8       	st.w	--sp,r8
80005598:	04 9a       	mov	r10,r2
8000559a:	fa c8 f9 40 	sub	r8,sp,-1728
8000559e:	fa c9 ff b4 	sub	r9,sp,-76
800055a2:	08 9c       	mov	r12,r4
800055a4:	fe b0 f6 46 	rcall	80004230 <get_arg>
800055a8:	2f dd       	sub	sp,-12
800055aa:	78 06       	ld.w	r6,r12[0x0]
800055ac:	c2 08       	rjmp	800055ec <_vfprintf_r+0x1090>
800055ae:	2f f7       	sub	r7,-1
800055b0:	10 39       	cp.w	r9,r8
800055b2:	c0 84       	brge	800055c2 <_vfprintf_r+0x1066>
800055b4:	fa c9 f9 44 	sub	r9,sp,-1724
800055b8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055bc:	ec f6 fd 88 	ld.w	r6,r6[-632]
800055c0:	c1 68       	rjmp	800055ec <_vfprintf_r+0x1090>
800055c2:	41 09       	lddsp	r9,sp[0x40]
800055c4:	59 f8       	cp.w	r8,31
800055c6:	e0 89 00 10 	brgt	800055e6 <_vfprintf_r+0x108a>
800055ca:	f2 ca ff fc 	sub	r10,r9,-4
800055ce:	51 0a       	stdsp	sp[0x40],r10
800055d0:	72 06       	ld.w	r6,r9[0x0]
800055d2:	fa ce f9 44 	sub	lr,sp,-1724
800055d6:	fc 08 00 39 	add	r9,lr,r8<<0x3
800055da:	f3 46 fd 88 	st.w	r9[-632],r6
800055de:	2f f8       	sub	r8,-1
800055e0:	fb 48 06 b4 	st.w	sp[1716],r8
800055e4:	c0 48       	rjmp	800055ec <_vfprintf_r+0x1090>
800055e6:	72 06       	ld.w	r6,r9[0x0]
800055e8:	2f c9       	sub	r9,-4
800055ea:	51 09       	stdsp	sp[0x40],r9
800055ec:	40 2c       	lddsp	r12,sp[0x8]
800055ee:	58 0c       	cp.w	r12,0
800055f0:	c1 05       	brlt	80005610 <_vfprintf_r+0x10b4>
800055f2:	18 9a       	mov	r10,r12
800055f4:	30 0b       	mov	r11,0
800055f6:	0c 9c       	mov	r12,r6
800055f8:	e0 a0 14 58 	rcall	80007ea8 <memchr>
800055fc:	e0 80 02 df 	breq	80005bba <_vfprintf_r+0x165e>
80005600:	f8 06 01 02 	sub	r2,r12,r6
80005604:	40 2b       	lddsp	r11,sp[0x8]
80005606:	16 32       	cp.w	r2,r11
80005608:	e0 89 02 d9 	brgt	80005bba <_vfprintf_r+0x165e>
8000560c:	e0 8f 02 d4 	bral	80005bb4 <_vfprintf_r+0x1658>
80005610:	30 0a       	mov	r10,0
80005612:	0c 9c       	mov	r12,r6
80005614:	50 2a       	stdsp	sp[0x8],r10
80005616:	e0 a0 19 2b 	rcall	8000886c <strlen>
8000561a:	18 92       	mov	r2,r12
8000561c:	e0 8f 02 d2 	bral	80005bc0 <_vfprintf_r+0x1664>
80005620:	50 a7       	stdsp	sp[0x28],r7
80005622:	50 80       	stdsp	sp[0x20],r0
80005624:	0c 97       	mov	r7,r6
80005626:	04 94       	mov	r4,r2
80005628:	06 96       	mov	r6,r3
8000562a:	02 92       	mov	r2,r1
8000562c:	40 93       	lddsp	r3,sp[0x24]
8000562e:	10 90       	mov	r0,r8
80005630:	40 41       	lddsp	r1,sp[0x10]
80005632:	a5 a5       	sbr	r5,0x4
80005634:	c0 a8       	rjmp	80005648 <_vfprintf_r+0x10ec>
80005636:	50 a7       	stdsp	sp[0x28],r7
80005638:	50 80       	stdsp	sp[0x20],r0
8000563a:	0c 97       	mov	r7,r6
8000563c:	04 94       	mov	r4,r2
8000563e:	06 96       	mov	r6,r3
80005640:	02 92       	mov	r2,r1
80005642:	40 93       	lddsp	r3,sp[0x24]
80005644:	10 90       	mov	r0,r8
80005646:	40 41       	lddsp	r1,sp[0x10]
80005648:	ed b5 00 05 	bld	r5,0x5
8000564c:	c5 61       	brne	800056f8 <_vfprintf_r+0x119c>
8000564e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005652:	40 39       	lddsp	r9,sp[0xc]
80005654:	58 09       	cp.w	r9,0
80005656:	c2 10       	breq	80005698 <_vfprintf_r+0x113c>
80005658:	10 36       	cp.w	r6,r8
8000565a:	c0 74       	brge	80005668 <_vfprintf_r+0x110c>
8000565c:	fa c8 f9 44 	sub	r8,sp,-1724
80005660:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005664:	c2 38       	rjmp	800056aa <_vfprintf_r+0x114e>
80005666:	d7 03       	nop
80005668:	fa c8 f9 50 	sub	r8,sp,-1712
8000566c:	1a d8       	st.w	--sp,r8
8000566e:	fa c8 fa b8 	sub	r8,sp,-1352
80005672:	1a d8       	st.w	--sp,r8
80005674:	fa c8 fb b4 	sub	r8,sp,-1100
80005678:	1a d8       	st.w	--sp,r8
8000567a:	fa c8 f9 40 	sub	r8,sp,-1728
8000567e:	fa c9 ff b4 	sub	r9,sp,-76
80005682:	04 9a       	mov	r10,r2
80005684:	0c 9b       	mov	r11,r6
80005686:	08 9c       	mov	r12,r4
80005688:	fe b0 f5 d4 	rcall	80004230 <get_arg>
8000568c:	2f dd       	sub	sp,-12
8000568e:	f8 e8 00 00 	ld.d	r8,r12[0]
80005692:	fa e9 00 00 	st.d	sp[0],r8
80005696:	c2 e8       	rjmp	800056f2 <_vfprintf_r+0x1196>
80005698:	ee ca ff ff 	sub	r10,r7,-1
8000569c:	10 37       	cp.w	r7,r8
8000569e:	c0 b4       	brge	800056b4 <_vfprintf_r+0x1158>
800056a0:	fa c8 f9 44 	sub	r8,sp,-1724
800056a4:	14 97       	mov	r7,r10
800056a6:	f0 06 00 36 	add	r6,r8,r6<<0x3
800056aa:	ec ea fd 88 	ld.d	r10,r6[-632]
800056ae:	fa eb 00 00 	st.d	sp[0],r10
800056b2:	c2 08       	rjmp	800056f2 <_vfprintf_r+0x1196>
800056b4:	41 09       	lddsp	r9,sp[0x40]
800056b6:	59 f8       	cp.w	r8,31
800056b8:	e0 89 00 16 	brgt	800056e4 <_vfprintf_r+0x1188>
800056bc:	f2 e6 00 00 	ld.d	r6,r9[0]
800056c0:	f2 cb ff f8 	sub	r11,r9,-8
800056c4:	fa e7 00 00 	st.d	sp[0],r6
800056c8:	51 0b       	stdsp	sp[0x40],r11
800056ca:	fa c6 f9 44 	sub	r6,sp,-1724
800056ce:	ec 08 00 39 	add	r9,r6,r8<<0x3
800056d2:	fa e6 00 00 	ld.d	r6,sp[0]
800056d6:	f2 e7 fd 88 	st.d	r9[-632],r6
800056da:	2f f8       	sub	r8,-1
800056dc:	14 97       	mov	r7,r10
800056de:	fb 48 06 b4 	st.w	sp[1716],r8
800056e2:	c0 88       	rjmp	800056f2 <_vfprintf_r+0x1196>
800056e4:	f2 e6 00 00 	ld.d	r6,r9[0]
800056e8:	2f 89       	sub	r9,-8
800056ea:	fa e7 00 00 	st.d	sp[0],r6
800056ee:	51 09       	stdsp	sp[0x40],r9
800056f0:	14 97       	mov	r7,r10
800056f2:	30 18       	mov	r8,1
800056f4:	e0 8f 01 d0 	bral	80005a94 <_vfprintf_r+0x1538>
800056f8:	ed b5 00 04 	bld	r5,0x4
800056fc:	c1 61       	brne	80005728 <_vfprintf_r+0x11cc>
800056fe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005702:	40 3e       	lddsp	lr,sp[0xc]
80005704:	58 0e       	cp.w	lr,0
80005706:	c0 80       	breq	80005716 <_vfprintf_r+0x11ba>
80005708:	10 36       	cp.w	r6,r8
8000570a:	c6 74       	brge	800057d8 <_vfprintf_r+0x127c>
8000570c:	fa cc f9 44 	sub	r12,sp,-1724
80005710:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005714:	c8 08       	rjmp	80005814 <_vfprintf_r+0x12b8>
80005716:	ee ca ff ff 	sub	r10,r7,-1
8000571a:	10 37       	cp.w	r7,r8
8000571c:	c7 f4       	brge	8000581a <_vfprintf_r+0x12be>
8000571e:	fa cb f9 44 	sub	r11,sp,-1724
80005722:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005726:	c7 68       	rjmp	80005812 <_vfprintf_r+0x12b6>
80005728:	ed b5 00 06 	bld	r5,0x6
8000572c:	c4 a1       	brne	800057c0 <_vfprintf_r+0x1264>
8000572e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005732:	40 3c       	lddsp	r12,sp[0xc]
80005734:	58 0c       	cp.w	r12,0
80005736:	c1 d0       	breq	80005770 <_vfprintf_r+0x1214>
80005738:	10 36       	cp.w	r6,r8
8000573a:	c0 64       	brge	80005746 <_vfprintf_r+0x11ea>
8000573c:	fa cb f9 44 	sub	r11,sp,-1724
80005740:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005744:	c1 f8       	rjmp	80005782 <_vfprintf_r+0x1226>
80005746:	fa c8 f9 50 	sub	r8,sp,-1712
8000574a:	1a d8       	st.w	--sp,r8
8000574c:	fa c8 fa b8 	sub	r8,sp,-1352
80005750:	1a d8       	st.w	--sp,r8
80005752:	fa c8 fb b4 	sub	r8,sp,-1100
80005756:	1a d8       	st.w	--sp,r8
80005758:	fa c8 f9 40 	sub	r8,sp,-1728
8000575c:	fa c9 ff b4 	sub	r9,sp,-76
80005760:	04 9a       	mov	r10,r2
80005762:	0c 9b       	mov	r11,r6
80005764:	08 9c       	mov	r12,r4
80005766:	fe b0 f5 65 	rcall	80004230 <get_arg>
8000576a:	2f dd       	sub	sp,-12
8000576c:	98 18       	ld.sh	r8,r12[0x2]
8000576e:	c2 68       	rjmp	800057ba <_vfprintf_r+0x125e>
80005770:	ee ca ff ff 	sub	r10,r7,-1
80005774:	10 37       	cp.w	r7,r8
80005776:	c0 94       	brge	80005788 <_vfprintf_r+0x122c>
80005778:	fa c9 f9 44 	sub	r9,sp,-1724
8000577c:	14 97       	mov	r7,r10
8000577e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005782:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005786:	c1 a8       	rjmp	800057ba <_vfprintf_r+0x125e>
80005788:	41 09       	lddsp	r9,sp[0x40]
8000578a:	59 f8       	cp.w	r8,31
8000578c:	e0 89 00 13 	brgt	800057b2 <_vfprintf_r+0x1256>
80005790:	f2 cb ff fc 	sub	r11,r9,-4
80005794:	51 0b       	stdsp	sp[0x40],r11
80005796:	72 09       	ld.w	r9,r9[0x0]
80005798:	fa c6 f9 44 	sub	r6,sp,-1724
8000579c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800057a0:	2f f8       	sub	r8,-1
800057a2:	f7 49 fd 88 	st.w	r11[-632],r9
800057a6:	fb 48 06 b4 	st.w	sp[1716],r8
800057aa:	14 97       	mov	r7,r10
800057ac:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800057b0:	c0 58       	rjmp	800057ba <_vfprintf_r+0x125e>
800057b2:	92 18       	ld.sh	r8,r9[0x2]
800057b4:	14 97       	mov	r7,r10
800057b6:	2f c9       	sub	r9,-4
800057b8:	51 09       	stdsp	sp[0x40],r9
800057ba:	5c 78       	castu.h	r8
800057bc:	50 18       	stdsp	sp[0x4],r8
800057be:	c4 68       	rjmp	8000584a <_vfprintf_r+0x12ee>
800057c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800057c4:	40 3c       	lddsp	r12,sp[0xc]
800057c6:	58 0c       	cp.w	r12,0
800057c8:	c1 d0       	breq	80005802 <_vfprintf_r+0x12a6>
800057ca:	10 36       	cp.w	r6,r8
800057cc:	c0 64       	brge	800057d8 <_vfprintf_r+0x127c>
800057ce:	fa cb f9 44 	sub	r11,sp,-1724
800057d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800057d6:	c1 f8       	rjmp	80005814 <_vfprintf_r+0x12b8>
800057d8:	fa c8 f9 50 	sub	r8,sp,-1712
800057dc:	1a d8       	st.w	--sp,r8
800057de:	fa c8 fa b8 	sub	r8,sp,-1352
800057e2:	0c 9b       	mov	r11,r6
800057e4:	1a d8       	st.w	--sp,r8
800057e6:	fa c8 fb b4 	sub	r8,sp,-1100
800057ea:	04 9a       	mov	r10,r2
800057ec:	1a d8       	st.w	--sp,r8
800057ee:	08 9c       	mov	r12,r4
800057f0:	fa c8 f9 40 	sub	r8,sp,-1728
800057f4:	fa c9 ff b4 	sub	r9,sp,-76
800057f8:	fe b0 f5 1c 	rcall	80004230 <get_arg>
800057fc:	2f dd       	sub	sp,-12
800057fe:	78 0b       	ld.w	r11,r12[0x0]
80005800:	c2 48       	rjmp	80005848 <_vfprintf_r+0x12ec>
80005802:	ee ca ff ff 	sub	r10,r7,-1
80005806:	10 37       	cp.w	r7,r8
80005808:	c0 94       	brge	8000581a <_vfprintf_r+0x12be>
8000580a:	fa c9 f9 44 	sub	r9,sp,-1724
8000580e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005812:	14 97       	mov	r7,r10
80005814:	ec fb fd 88 	ld.w	r11,r6[-632]
80005818:	c1 88       	rjmp	80005848 <_vfprintf_r+0x12ec>
8000581a:	41 09       	lddsp	r9,sp[0x40]
8000581c:	59 f8       	cp.w	r8,31
8000581e:	e0 89 00 11 	brgt	80005840 <_vfprintf_r+0x12e4>
80005822:	f2 cb ff fc 	sub	r11,r9,-4
80005826:	51 0b       	stdsp	sp[0x40],r11
80005828:	fa c6 f9 44 	sub	r6,sp,-1724
8000582c:	72 0b       	ld.w	r11,r9[0x0]
8000582e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005832:	f3 4b fd 88 	st.w	r9[-632],r11
80005836:	2f f8       	sub	r8,-1
80005838:	14 97       	mov	r7,r10
8000583a:	fb 48 06 b4 	st.w	sp[1716],r8
8000583e:	c0 58       	rjmp	80005848 <_vfprintf_r+0x12ec>
80005840:	72 0b       	ld.w	r11,r9[0x0]
80005842:	14 97       	mov	r7,r10
80005844:	2f c9       	sub	r9,-4
80005846:	51 09       	stdsp	sp[0x40],r9
80005848:	50 1b       	stdsp	sp[0x4],r11
8000584a:	30 0e       	mov	lr,0
8000584c:	30 18       	mov	r8,1
8000584e:	50 0e       	stdsp	sp[0x0],lr
80005850:	c2 29       	rjmp	80005a94 <_vfprintf_r+0x1538>
80005852:	50 a7       	stdsp	sp[0x28],r7
80005854:	50 80       	stdsp	sp[0x20],r0
80005856:	0c 97       	mov	r7,r6
80005858:	04 94       	mov	r4,r2
8000585a:	06 96       	mov	r6,r3
8000585c:	02 92       	mov	r2,r1
8000585e:	fe cc b8 aa 	sub	r12,pc,-18262
80005862:	40 93       	lddsp	r3,sp[0x24]
80005864:	10 90       	mov	r0,r8
80005866:	40 41       	lddsp	r1,sp[0x10]
80005868:	50 dc       	stdsp	sp[0x34],r12
8000586a:	ed b5 00 05 	bld	r5,0x5
8000586e:	c5 51       	brne	80005918 <_vfprintf_r+0x13bc>
80005870:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005874:	40 3b       	lddsp	r11,sp[0xc]
80005876:	58 0b       	cp.w	r11,0
80005878:	c2 20       	breq	800058bc <_vfprintf_r+0x1360>
8000587a:	10 36       	cp.w	r6,r8
8000587c:	c0 a4       	brge	80005890 <_vfprintf_r+0x1334>
8000587e:	fa ca f9 44 	sub	r10,sp,-1724
80005882:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005886:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000588a:	fa e9 00 00 	st.d	sp[0],r8
8000588e:	cf 28       	rjmp	80005a72 <_vfprintf_r+0x1516>
80005890:	fa c8 f9 50 	sub	r8,sp,-1712
80005894:	1a d8       	st.w	--sp,r8
80005896:	fa c8 fa b8 	sub	r8,sp,-1352
8000589a:	04 9a       	mov	r10,r2
8000589c:	1a d8       	st.w	--sp,r8
8000589e:	0c 9b       	mov	r11,r6
800058a0:	fa c8 fb b4 	sub	r8,sp,-1100
800058a4:	08 9c       	mov	r12,r4
800058a6:	1a d8       	st.w	--sp,r8
800058a8:	fa c8 f9 40 	sub	r8,sp,-1728
800058ac:	fa c9 ff b4 	sub	r9,sp,-76
800058b0:	fe b0 f4 c0 	rcall	80004230 <get_arg>
800058b4:	2f dd       	sub	sp,-12
800058b6:	f8 ea 00 00 	ld.d	r10,r12[0]
800058ba:	c0 c8       	rjmp	800058d2 <_vfprintf_r+0x1376>
800058bc:	ee ca ff ff 	sub	r10,r7,-1
800058c0:	10 37       	cp.w	r7,r8
800058c2:	c0 b4       	brge	800058d8 <_vfprintf_r+0x137c>
800058c4:	fa c9 f9 44 	sub	r9,sp,-1724
800058c8:	14 97       	mov	r7,r10
800058ca:	f2 06 00 36 	add	r6,r9,r6<<0x3
800058ce:	ec ea fd 88 	ld.d	r10,r6[-632]
800058d2:	fa eb 00 00 	st.d	sp[0],r10
800058d6:	cc e8       	rjmp	80005a72 <_vfprintf_r+0x1516>
800058d8:	41 09       	lddsp	r9,sp[0x40]
800058da:	59 f8       	cp.w	r8,31
800058dc:	e0 89 00 16 	brgt	80005908 <_vfprintf_r+0x13ac>
800058e0:	f2 e6 00 00 	ld.d	r6,r9[0]
800058e4:	f2 cb ff f8 	sub	r11,r9,-8
800058e8:	fa e7 00 00 	st.d	sp[0],r6
800058ec:	51 0b       	stdsp	sp[0x40],r11
800058ee:	fa c6 f9 44 	sub	r6,sp,-1724
800058f2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800058f6:	fa e6 00 00 	ld.d	r6,sp[0]
800058fa:	f2 e7 fd 88 	st.d	r9[-632],r6
800058fe:	2f f8       	sub	r8,-1
80005900:	14 97       	mov	r7,r10
80005902:	fb 48 06 b4 	st.w	sp[1716],r8
80005906:	cb 68       	rjmp	80005a72 <_vfprintf_r+0x1516>
80005908:	f2 e6 00 00 	ld.d	r6,r9[0]
8000590c:	2f 89       	sub	r9,-8
8000590e:	fa e7 00 00 	st.d	sp[0],r6
80005912:	51 09       	stdsp	sp[0x40],r9
80005914:	14 97       	mov	r7,r10
80005916:	ca e8       	rjmp	80005a72 <_vfprintf_r+0x1516>
80005918:	ed b5 00 04 	bld	r5,0x4
8000591c:	c1 71       	brne	8000594a <_vfprintf_r+0x13ee>
8000591e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005922:	40 3e       	lddsp	lr,sp[0xc]
80005924:	58 0e       	cp.w	lr,0
80005926:	c0 80       	breq	80005936 <_vfprintf_r+0x13da>
80005928:	10 36       	cp.w	r6,r8
8000592a:	c6 94       	brge	800059fc <_vfprintf_r+0x14a0>
8000592c:	fa cc f9 44 	sub	r12,sp,-1724
80005930:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005934:	c8 28       	rjmp	80005a38 <_vfprintf_r+0x14dc>
80005936:	ee ca ff ff 	sub	r10,r7,-1
8000593a:	10 37       	cp.w	r7,r8
8000593c:	e0 84 00 81 	brge	80005a3e <_vfprintf_r+0x14e2>
80005940:	fa cb f9 44 	sub	r11,sp,-1724
80005944:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005948:	c7 78       	rjmp	80005a36 <_vfprintf_r+0x14da>
8000594a:	ed b5 00 06 	bld	r5,0x6
8000594e:	c4 b1       	brne	800059e4 <_vfprintf_r+0x1488>
80005950:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005954:	40 3c       	lddsp	r12,sp[0xc]
80005956:	58 0c       	cp.w	r12,0
80005958:	c1 d0       	breq	80005992 <_vfprintf_r+0x1436>
8000595a:	10 36       	cp.w	r6,r8
8000595c:	c0 64       	brge	80005968 <_vfprintf_r+0x140c>
8000595e:	fa cb f9 44 	sub	r11,sp,-1724
80005962:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005966:	c1 f8       	rjmp	800059a4 <_vfprintf_r+0x1448>
80005968:	fa c8 f9 50 	sub	r8,sp,-1712
8000596c:	1a d8       	st.w	--sp,r8
8000596e:	fa c8 fa b8 	sub	r8,sp,-1352
80005972:	1a d8       	st.w	--sp,r8
80005974:	fa c8 fb b4 	sub	r8,sp,-1100
80005978:	1a d8       	st.w	--sp,r8
8000597a:	fa c8 f9 40 	sub	r8,sp,-1728
8000597e:	fa c9 ff b4 	sub	r9,sp,-76
80005982:	04 9a       	mov	r10,r2
80005984:	0c 9b       	mov	r11,r6
80005986:	08 9c       	mov	r12,r4
80005988:	fe b0 f4 54 	rcall	80004230 <get_arg>
8000598c:	2f dd       	sub	sp,-12
8000598e:	98 18       	ld.sh	r8,r12[0x2]
80005990:	c2 78       	rjmp	800059de <_vfprintf_r+0x1482>
80005992:	ee ca ff ff 	sub	r10,r7,-1
80005996:	10 37       	cp.w	r7,r8
80005998:	c0 a4       	brge	800059ac <_vfprintf_r+0x1450>
8000599a:	fa c9 f9 44 	sub	r9,sp,-1724
8000599e:	14 97       	mov	r7,r10
800059a0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800059a4:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800059a8:	c1 b8       	rjmp	800059de <_vfprintf_r+0x1482>
800059aa:	d7 03       	nop
800059ac:	41 09       	lddsp	r9,sp[0x40]
800059ae:	59 f8       	cp.w	r8,31
800059b0:	e0 89 00 13 	brgt	800059d6 <_vfprintf_r+0x147a>
800059b4:	f2 cb ff fc 	sub	r11,r9,-4
800059b8:	51 0b       	stdsp	sp[0x40],r11
800059ba:	72 09       	ld.w	r9,r9[0x0]
800059bc:	fa c6 f9 44 	sub	r6,sp,-1724
800059c0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800059c4:	2f f8       	sub	r8,-1
800059c6:	f7 49 fd 88 	st.w	r11[-632],r9
800059ca:	fb 48 06 b4 	st.w	sp[1716],r8
800059ce:	14 97       	mov	r7,r10
800059d0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800059d4:	c0 58       	rjmp	800059de <_vfprintf_r+0x1482>
800059d6:	92 18       	ld.sh	r8,r9[0x2]
800059d8:	14 97       	mov	r7,r10
800059da:	2f c9       	sub	r9,-4
800059dc:	51 09       	stdsp	sp[0x40],r9
800059de:	5c 78       	castu.h	r8
800059e0:	50 18       	stdsp	sp[0x4],r8
800059e2:	c4 68       	rjmp	80005a6e <_vfprintf_r+0x1512>
800059e4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059e8:	40 3c       	lddsp	r12,sp[0xc]
800059ea:	58 0c       	cp.w	r12,0
800059ec:	c1 d0       	breq	80005a26 <_vfprintf_r+0x14ca>
800059ee:	10 36       	cp.w	r6,r8
800059f0:	c0 64       	brge	800059fc <_vfprintf_r+0x14a0>
800059f2:	fa cb f9 44 	sub	r11,sp,-1724
800059f6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059fa:	c1 f8       	rjmp	80005a38 <_vfprintf_r+0x14dc>
800059fc:	fa c8 f9 50 	sub	r8,sp,-1712
80005a00:	1a d8       	st.w	--sp,r8
80005a02:	fa c8 fa b8 	sub	r8,sp,-1352
80005a06:	0c 9b       	mov	r11,r6
80005a08:	1a d8       	st.w	--sp,r8
80005a0a:	fa c8 fb b4 	sub	r8,sp,-1100
80005a0e:	04 9a       	mov	r10,r2
80005a10:	1a d8       	st.w	--sp,r8
80005a12:	08 9c       	mov	r12,r4
80005a14:	fa c8 f9 40 	sub	r8,sp,-1728
80005a18:	fa c9 ff b4 	sub	r9,sp,-76
80005a1c:	fe b0 f4 0a 	rcall	80004230 <get_arg>
80005a20:	2f dd       	sub	sp,-12
80005a22:	78 0b       	ld.w	r11,r12[0x0]
80005a24:	c2 48       	rjmp	80005a6c <_vfprintf_r+0x1510>
80005a26:	ee ca ff ff 	sub	r10,r7,-1
80005a2a:	10 37       	cp.w	r7,r8
80005a2c:	c0 94       	brge	80005a3e <_vfprintf_r+0x14e2>
80005a2e:	fa c9 f9 44 	sub	r9,sp,-1724
80005a32:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a36:	14 97       	mov	r7,r10
80005a38:	ec fb fd 88 	ld.w	r11,r6[-632]
80005a3c:	c1 88       	rjmp	80005a6c <_vfprintf_r+0x1510>
80005a3e:	41 09       	lddsp	r9,sp[0x40]
80005a40:	59 f8       	cp.w	r8,31
80005a42:	e0 89 00 11 	brgt	80005a64 <_vfprintf_r+0x1508>
80005a46:	f2 cb ff fc 	sub	r11,r9,-4
80005a4a:	51 0b       	stdsp	sp[0x40],r11
80005a4c:	fa c6 f9 44 	sub	r6,sp,-1724
80005a50:	72 0b       	ld.w	r11,r9[0x0]
80005a52:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005a56:	f3 4b fd 88 	st.w	r9[-632],r11
80005a5a:	2f f8       	sub	r8,-1
80005a5c:	14 97       	mov	r7,r10
80005a5e:	fb 48 06 b4 	st.w	sp[1716],r8
80005a62:	c0 58       	rjmp	80005a6c <_vfprintf_r+0x1510>
80005a64:	72 0b       	ld.w	r11,r9[0x0]
80005a66:	14 97       	mov	r7,r10
80005a68:	2f c9       	sub	r9,-4
80005a6a:	51 09       	stdsp	sp[0x40],r9
80005a6c:	50 1b       	stdsp	sp[0x4],r11
80005a6e:	30 0e       	mov	lr,0
80005a70:	50 0e       	stdsp	sp[0x0],lr
80005a72:	40 08       	lddsp	r8,sp[0x0]
80005a74:	40 1c       	lddsp	r12,sp[0x4]
80005a76:	18 48       	or	r8,r12
80005a78:	5f 19       	srne	r9
80005a7a:	0a 98       	mov	r8,r5
80005a7c:	eb e9 00 09 	and	r9,r5,r9
80005a80:	a1 b8       	sbr	r8,0x1
80005a82:	58 09       	cp.w	r9,0
80005a84:	c0 70       	breq	80005a92 <_vfprintf_r+0x1536>
80005a86:	10 95       	mov	r5,r8
80005a88:	fb 60 06 b9 	st.b	sp[1721],r0
80005a8c:	33 08       	mov	r8,48
80005a8e:	fb 68 06 b8 	st.b	sp[1720],r8
80005a92:	30 28       	mov	r8,2
80005a94:	30 09       	mov	r9,0
80005a96:	fb 69 06 bb 	st.b	sp[1723],r9
80005a9a:	0a 99       	mov	r9,r5
80005a9c:	a7 d9       	cbr	r9,0x7
80005a9e:	40 2b       	lddsp	r11,sp[0x8]
80005aa0:	40 16       	lddsp	r6,sp[0x4]
80005aa2:	58 0b       	cp.w	r11,0
80005aa4:	5f 1a       	srne	r10
80005aa6:	f2 05 17 40 	movge	r5,r9
80005aaa:	fa c2 f9 78 	sub	r2,sp,-1672
80005aae:	40 09       	lddsp	r9,sp[0x0]
80005ab0:	0c 49       	or	r9,r6
80005ab2:	5f 19       	srne	r9
80005ab4:	f5 e9 10 09 	or	r9,r10,r9
80005ab8:	c5 c0       	breq	80005b70 <_vfprintf_r+0x1614>
80005aba:	30 19       	mov	r9,1
80005abc:	f2 08 18 00 	cp.b	r8,r9
80005ac0:	c0 60       	breq	80005acc <_vfprintf_r+0x1570>
80005ac2:	30 29       	mov	r9,2
80005ac4:	f2 08 18 00 	cp.b	r8,r9
80005ac8:	c0 41       	brne	80005ad0 <_vfprintf_r+0x1574>
80005aca:	c3 c8       	rjmp	80005b42 <_vfprintf_r+0x15e6>
80005acc:	04 96       	mov	r6,r2
80005ace:	c3 08       	rjmp	80005b2e <_vfprintf_r+0x15d2>
80005ad0:	04 96       	mov	r6,r2
80005ad2:	fa e8 00 00 	ld.d	r8,sp[0]
80005ad6:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005ada:	2d 0a       	sub	r10,-48
80005adc:	0c fa       	st.b	--r6,r10
80005ade:	f0 0b 16 03 	lsr	r11,r8,0x3
80005ae2:	f2 0c 16 03 	lsr	r12,r9,0x3
80005ae6:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005aea:	18 99       	mov	r9,r12
80005aec:	16 98       	mov	r8,r11
80005aee:	58 08       	cp.w	r8,0
80005af0:	5c 29       	cpc	r9
80005af2:	cf 21       	brne	80005ad6 <_vfprintf_r+0x157a>
80005af4:	fa e9 00 00 	st.d	sp[0],r8
80005af8:	ed b5 00 00 	bld	r5,0x0
80005afc:	c4 51       	brne	80005b86 <_vfprintf_r+0x162a>
80005afe:	33 09       	mov	r9,48
80005b00:	f2 0a 18 00 	cp.b	r10,r9
80005b04:	c4 10       	breq	80005b86 <_vfprintf_r+0x162a>
80005b06:	0c f9       	st.b	--r6,r9
80005b08:	c3 f8       	rjmp	80005b86 <_vfprintf_r+0x162a>
80005b0a:	fa ea 00 00 	ld.d	r10,sp[0]
80005b0e:	30 a8       	mov	r8,10
80005b10:	30 09       	mov	r9,0
80005b12:	e0 a0 1b 99 	rcall	80009244 <__avr32_umod64>
80005b16:	30 a8       	mov	r8,10
80005b18:	2d 0a       	sub	r10,-48
80005b1a:	30 09       	mov	r9,0
80005b1c:	ac 8a       	st.b	r6[0x0],r10
80005b1e:	fa ea 00 00 	ld.d	r10,sp[0]
80005b22:	fe b0 f1 8e 	rcall	80003e3e <__avr32_udiv64>
80005b26:	16 99       	mov	r9,r11
80005b28:	14 98       	mov	r8,r10
80005b2a:	fa e9 00 00 	st.d	sp[0],r8
80005b2e:	20 16       	sub	r6,1
80005b30:	fa ea 00 00 	ld.d	r10,sp[0]
80005b34:	58 9a       	cp.w	r10,9
80005b36:	5c 2b       	cpc	r11
80005b38:	fe 9b ff e9 	brhi	80005b0a <_vfprintf_r+0x15ae>
80005b3c:	1b f8       	ld.ub	r8,sp[0x7]
80005b3e:	2d 08       	sub	r8,-48
80005b40:	c2 08       	rjmp	80005b80 <_vfprintf_r+0x1624>
80005b42:	04 96       	mov	r6,r2
80005b44:	fa e8 00 00 	ld.d	r8,sp[0]
80005b48:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005b4c:	40 de       	lddsp	lr,sp[0x34]
80005b4e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005b52:	0c fa       	st.b	--r6,r10
80005b54:	f2 0b 16 04 	lsr	r11,r9,0x4
80005b58:	f0 0a 16 04 	lsr	r10,r8,0x4
80005b5c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005b60:	16 99       	mov	r9,r11
80005b62:	14 98       	mov	r8,r10
80005b64:	58 08       	cp.w	r8,0
80005b66:	5c 29       	cpc	r9
80005b68:	cf 01       	brne	80005b48 <_vfprintf_r+0x15ec>
80005b6a:	fa e9 00 00 	st.d	sp[0],r8
80005b6e:	c0 c8       	rjmp	80005b86 <_vfprintf_r+0x162a>
80005b70:	58 08       	cp.w	r8,0
80005b72:	c0 91       	brne	80005b84 <_vfprintf_r+0x1628>
80005b74:	ed b5 00 00 	bld	r5,0x0
80005b78:	c0 61       	brne	80005b84 <_vfprintf_r+0x1628>
80005b7a:	fa c6 f9 79 	sub	r6,sp,-1671
80005b7e:	33 08       	mov	r8,48
80005b80:	ac 88       	st.b	r6[0x0],r8
80005b82:	c0 28       	rjmp	80005b86 <_vfprintf_r+0x162a>
80005b84:	04 96       	mov	r6,r2
80005b86:	0c 12       	sub	r2,r6
80005b88:	c1 c8       	rjmp	80005bc0 <_vfprintf_r+0x1664>
80005b8a:	50 a7       	stdsp	sp[0x28],r7
80005b8c:	50 80       	stdsp	sp[0x20],r0
80005b8e:	40 93       	lddsp	r3,sp[0x24]
80005b90:	0c 97       	mov	r7,r6
80005b92:	10 90       	mov	r0,r8
80005b94:	04 94       	mov	r4,r2
80005b96:	40 41       	lddsp	r1,sp[0x10]
80005b98:	58 08       	cp.w	r8,0
80005b9a:	e0 80 04 4f 	breq	80006438 <_vfprintf_r+0x1edc>
80005b9e:	fb 68 06 60 	st.b	sp[1632],r8
80005ba2:	30 0c       	mov	r12,0
80005ba4:	30 08       	mov	r8,0
80005ba6:	30 12       	mov	r2,1
80005ba8:	fb 68 06 bb 	st.b	sp[1723],r8
80005bac:	50 2c       	stdsp	sp[0x8],r12
80005bae:	fa c6 f9 a0 	sub	r6,sp,-1632
80005bb2:	c0 78       	rjmp	80005bc0 <_vfprintf_r+0x1664>
80005bb4:	30 0b       	mov	r11,0
80005bb6:	50 2b       	stdsp	sp[0x8],r11
80005bb8:	c0 48       	rjmp	80005bc0 <_vfprintf_r+0x1664>
80005bba:	40 22       	lddsp	r2,sp[0x8]
80005bbc:	30 0a       	mov	r10,0
80005bbe:	50 2a       	stdsp	sp[0x8],r10
80005bc0:	40 29       	lddsp	r9,sp[0x8]
80005bc2:	e4 09 0c 49 	max	r9,r2,r9
80005bc6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005bca:	50 39       	stdsp	sp[0xc],r9
80005bcc:	0a 9e       	mov	lr,r5
80005bce:	30 09       	mov	r9,0
80005bd0:	e2 1e 00 02 	andl	lr,0x2,COH
80005bd4:	f2 08 18 00 	cp.b	r8,r9
80005bd8:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005bdc:	f7 b8 01 ff 	subne	r8,-1
80005be0:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005be4:	0a 9b       	mov	r11,r5
80005be6:	58 0e       	cp.w	lr,0
80005be8:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005bec:	f7 bc 01 fe 	subne	r12,-2
80005bf0:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005bf4:	e2 1b 00 84 	andl	r11,0x84,COH
80005bf8:	50 fe       	stdsp	sp[0x3c],lr
80005bfa:	50 9b       	stdsp	sp[0x24],r11
80005bfc:	c4 71       	brne	80005c8a <_vfprintf_r+0x172e>
80005bfe:	40 8a       	lddsp	r10,sp[0x20]
80005c00:	40 39       	lddsp	r9,sp[0xc]
80005c02:	12 1a       	sub	r10,r9
80005c04:	50 4a       	stdsp	sp[0x10],r10
80005c06:	58 0a       	cp.w	r10,0
80005c08:	e0 89 00 20 	brgt	80005c48 <_vfprintf_r+0x16ec>
80005c0c:	c3 f8       	rjmp	80005c8a <_vfprintf_r+0x172e>
80005c0e:	2f 09       	sub	r9,-16
80005c10:	2f f8       	sub	r8,-1
80005c12:	fe ce bc 46 	sub	lr,pc,-17338
80005c16:	31 0c       	mov	r12,16
80005c18:	fb 49 06 90 	st.w	sp[1680],r9
80005c1c:	87 0e       	st.w	r3[0x0],lr
80005c1e:	87 1c       	st.w	r3[0x4],r12
80005c20:	fb 48 06 8c 	st.w	sp[1676],r8
80005c24:	58 78       	cp.w	r8,7
80005c26:	e0 89 00 04 	brgt	80005c2e <_vfprintf_r+0x16d2>
80005c2a:	2f 83       	sub	r3,-8
80005c2c:	c0 b8       	rjmp	80005c42 <_vfprintf_r+0x16e6>
80005c2e:	fa ca f9 78 	sub	r10,sp,-1672
80005c32:	02 9b       	mov	r11,r1
80005c34:	08 9c       	mov	r12,r4
80005c36:	fe b0 f4 85 	rcall	80004540 <__sprint_r>
80005c3a:	e0 81 04 10 	brne	8000645a <_vfprintf_r+0x1efe>
80005c3e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c42:	40 4b       	lddsp	r11,sp[0x10]
80005c44:	21 0b       	sub	r11,16
80005c46:	50 4b       	stdsp	sp[0x10],r11
80005c48:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c4c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c50:	fe ca bc 84 	sub	r10,pc,-17276
80005c54:	40 4e       	lddsp	lr,sp[0x10]
80005c56:	59 0e       	cp.w	lr,16
80005c58:	fe 99 ff db 	brgt	80005c0e <_vfprintf_r+0x16b2>
80005c5c:	1c 09       	add	r9,lr
80005c5e:	2f f8       	sub	r8,-1
80005c60:	87 0a       	st.w	r3[0x0],r10
80005c62:	fb 49 06 90 	st.w	sp[1680],r9
80005c66:	87 1e       	st.w	r3[0x4],lr
80005c68:	fb 48 06 8c 	st.w	sp[1676],r8
80005c6c:	58 78       	cp.w	r8,7
80005c6e:	e0 89 00 04 	brgt	80005c76 <_vfprintf_r+0x171a>
80005c72:	2f 83       	sub	r3,-8
80005c74:	c0 b8       	rjmp	80005c8a <_vfprintf_r+0x172e>
80005c76:	fa ca f9 78 	sub	r10,sp,-1672
80005c7a:	02 9b       	mov	r11,r1
80005c7c:	08 9c       	mov	r12,r4
80005c7e:	fe b0 f4 61 	rcall	80004540 <__sprint_r>
80005c82:	e0 81 03 ec 	brne	8000645a <_vfprintf_r+0x1efe>
80005c86:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c8a:	30 09       	mov	r9,0
80005c8c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005c90:	f2 08 18 00 	cp.b	r8,r9
80005c94:	c1 f0       	breq	80005cd2 <_vfprintf_r+0x1776>
80005c96:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c9a:	fa c9 f9 45 	sub	r9,sp,-1723
80005c9e:	2f f8       	sub	r8,-1
80005ca0:	87 09       	st.w	r3[0x0],r9
80005ca2:	fb 48 06 90 	st.w	sp[1680],r8
80005ca6:	30 19       	mov	r9,1
80005ca8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cac:	87 19       	st.w	r3[0x4],r9
80005cae:	2f f8       	sub	r8,-1
80005cb0:	fb 48 06 8c 	st.w	sp[1676],r8
80005cb4:	58 78       	cp.w	r8,7
80005cb6:	e0 89 00 04 	brgt	80005cbe <_vfprintf_r+0x1762>
80005cba:	2f 83       	sub	r3,-8
80005cbc:	c0 b8       	rjmp	80005cd2 <_vfprintf_r+0x1776>
80005cbe:	fa ca f9 78 	sub	r10,sp,-1672
80005cc2:	02 9b       	mov	r11,r1
80005cc4:	08 9c       	mov	r12,r4
80005cc6:	fe b0 f4 3d 	rcall	80004540 <__sprint_r>
80005cca:	e0 81 03 c8 	brne	8000645a <_vfprintf_r+0x1efe>
80005cce:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cd2:	40 fc       	lddsp	r12,sp[0x3c]
80005cd4:	58 0c       	cp.w	r12,0
80005cd6:	c1 f0       	breq	80005d14 <_vfprintf_r+0x17b8>
80005cd8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005cdc:	fa c9 f9 48 	sub	r9,sp,-1720
80005ce0:	2f e8       	sub	r8,-2
80005ce2:	87 09       	st.w	r3[0x0],r9
80005ce4:	fb 48 06 90 	st.w	sp[1680],r8
80005ce8:	30 29       	mov	r9,2
80005cea:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cee:	87 19       	st.w	r3[0x4],r9
80005cf0:	2f f8       	sub	r8,-1
80005cf2:	fb 48 06 8c 	st.w	sp[1676],r8
80005cf6:	58 78       	cp.w	r8,7
80005cf8:	e0 89 00 04 	brgt	80005d00 <_vfprintf_r+0x17a4>
80005cfc:	2f 83       	sub	r3,-8
80005cfe:	c0 b8       	rjmp	80005d14 <_vfprintf_r+0x17b8>
80005d00:	fa ca f9 78 	sub	r10,sp,-1672
80005d04:	02 9b       	mov	r11,r1
80005d06:	08 9c       	mov	r12,r4
80005d08:	fe b0 f4 1c 	rcall	80004540 <__sprint_r>
80005d0c:	e0 81 03 a7 	brne	8000645a <_vfprintf_r+0x1efe>
80005d10:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d14:	40 9b       	lddsp	r11,sp[0x24]
80005d16:	e0 4b 00 80 	cp.w	r11,128
80005d1a:	c4 71       	brne	80005da8 <_vfprintf_r+0x184c>
80005d1c:	40 8a       	lddsp	r10,sp[0x20]
80005d1e:	40 39       	lddsp	r9,sp[0xc]
80005d20:	12 1a       	sub	r10,r9
80005d22:	50 4a       	stdsp	sp[0x10],r10
80005d24:	58 0a       	cp.w	r10,0
80005d26:	e0 89 00 20 	brgt	80005d66 <_vfprintf_r+0x180a>
80005d2a:	c3 f8       	rjmp	80005da8 <_vfprintf_r+0x184c>
80005d2c:	2f 09       	sub	r9,-16
80005d2e:	2f f8       	sub	r8,-1
80005d30:	fe ce bd 54 	sub	lr,pc,-17068
80005d34:	31 0c       	mov	r12,16
80005d36:	fb 49 06 90 	st.w	sp[1680],r9
80005d3a:	87 0e       	st.w	r3[0x0],lr
80005d3c:	87 1c       	st.w	r3[0x4],r12
80005d3e:	fb 48 06 8c 	st.w	sp[1676],r8
80005d42:	58 78       	cp.w	r8,7
80005d44:	e0 89 00 04 	brgt	80005d4c <_vfprintf_r+0x17f0>
80005d48:	2f 83       	sub	r3,-8
80005d4a:	c0 b8       	rjmp	80005d60 <_vfprintf_r+0x1804>
80005d4c:	fa ca f9 78 	sub	r10,sp,-1672
80005d50:	02 9b       	mov	r11,r1
80005d52:	08 9c       	mov	r12,r4
80005d54:	fe b0 f3 f6 	rcall	80004540 <__sprint_r>
80005d58:	e0 81 03 81 	brne	8000645a <_vfprintf_r+0x1efe>
80005d5c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d60:	40 4b       	lddsp	r11,sp[0x10]
80005d62:	21 0b       	sub	r11,16
80005d64:	50 4b       	stdsp	sp[0x10],r11
80005d66:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d6a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d6e:	fe ca bd 92 	sub	r10,pc,-17006
80005d72:	40 4e       	lddsp	lr,sp[0x10]
80005d74:	59 0e       	cp.w	lr,16
80005d76:	fe 99 ff db 	brgt	80005d2c <_vfprintf_r+0x17d0>
80005d7a:	1c 09       	add	r9,lr
80005d7c:	2f f8       	sub	r8,-1
80005d7e:	87 0a       	st.w	r3[0x0],r10
80005d80:	fb 49 06 90 	st.w	sp[1680],r9
80005d84:	87 1e       	st.w	r3[0x4],lr
80005d86:	fb 48 06 8c 	st.w	sp[1676],r8
80005d8a:	58 78       	cp.w	r8,7
80005d8c:	e0 89 00 04 	brgt	80005d94 <_vfprintf_r+0x1838>
80005d90:	2f 83       	sub	r3,-8
80005d92:	c0 b8       	rjmp	80005da8 <_vfprintf_r+0x184c>
80005d94:	fa ca f9 78 	sub	r10,sp,-1672
80005d98:	02 9b       	mov	r11,r1
80005d9a:	08 9c       	mov	r12,r4
80005d9c:	fe b0 f3 d2 	rcall	80004540 <__sprint_r>
80005da0:	e0 81 03 5d 	brne	8000645a <_vfprintf_r+0x1efe>
80005da4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005da8:	40 2c       	lddsp	r12,sp[0x8]
80005daa:	04 1c       	sub	r12,r2
80005dac:	50 2c       	stdsp	sp[0x8],r12
80005dae:	58 0c       	cp.w	r12,0
80005db0:	e0 89 00 20 	brgt	80005df0 <_vfprintf_r+0x1894>
80005db4:	c3 f8       	rjmp	80005e32 <_vfprintf_r+0x18d6>
80005db6:	2f 09       	sub	r9,-16
80005db8:	2f f8       	sub	r8,-1
80005dba:	fe cb bd de 	sub	r11,pc,-16930
80005dbe:	31 0a       	mov	r10,16
80005dc0:	fb 49 06 90 	st.w	sp[1680],r9
80005dc4:	87 0b       	st.w	r3[0x0],r11
80005dc6:	87 1a       	st.w	r3[0x4],r10
80005dc8:	fb 48 06 8c 	st.w	sp[1676],r8
80005dcc:	58 78       	cp.w	r8,7
80005dce:	e0 89 00 04 	brgt	80005dd6 <_vfprintf_r+0x187a>
80005dd2:	2f 83       	sub	r3,-8
80005dd4:	c0 b8       	rjmp	80005dea <_vfprintf_r+0x188e>
80005dd6:	fa ca f9 78 	sub	r10,sp,-1672
80005dda:	02 9b       	mov	r11,r1
80005ddc:	08 9c       	mov	r12,r4
80005dde:	fe b0 f3 b1 	rcall	80004540 <__sprint_r>
80005de2:	e0 81 03 3c 	brne	8000645a <_vfprintf_r+0x1efe>
80005de6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dea:	40 29       	lddsp	r9,sp[0x8]
80005dec:	21 09       	sub	r9,16
80005dee:	50 29       	stdsp	sp[0x8],r9
80005df0:	fa f9 06 90 	ld.w	r9,sp[1680]
80005df4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005df8:	fe ca be 1c 	sub	r10,pc,-16868
80005dfc:	40 2e       	lddsp	lr,sp[0x8]
80005dfe:	59 0e       	cp.w	lr,16
80005e00:	fe 99 ff db 	brgt	80005db6 <_vfprintf_r+0x185a>
80005e04:	1c 09       	add	r9,lr
80005e06:	2f f8       	sub	r8,-1
80005e08:	87 0a       	st.w	r3[0x0],r10
80005e0a:	fb 49 06 90 	st.w	sp[1680],r9
80005e0e:	87 1e       	st.w	r3[0x4],lr
80005e10:	fb 48 06 8c 	st.w	sp[1676],r8
80005e14:	58 78       	cp.w	r8,7
80005e16:	e0 89 00 04 	brgt	80005e1e <_vfprintf_r+0x18c2>
80005e1a:	2f 83       	sub	r3,-8
80005e1c:	c0 b8       	rjmp	80005e32 <_vfprintf_r+0x18d6>
80005e1e:	fa ca f9 78 	sub	r10,sp,-1672
80005e22:	02 9b       	mov	r11,r1
80005e24:	08 9c       	mov	r12,r4
80005e26:	fe b0 f3 8d 	rcall	80004540 <__sprint_r>
80005e2a:	e0 81 03 18 	brne	8000645a <_vfprintf_r+0x1efe>
80005e2e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e32:	ed b5 00 08 	bld	r5,0x8
80005e36:	c0 b0       	breq	80005e4c <_vfprintf_r+0x18f0>
80005e38:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e3c:	87 12       	st.w	r3[0x4],r2
80005e3e:	87 06       	st.w	r3[0x0],r6
80005e40:	f0 02 00 02 	add	r2,r8,r2
80005e44:	fb 42 06 90 	st.w	sp[1680],r2
80005e48:	e0 8f 01 d4 	bral	800061f0 <_vfprintf_r+0x1c94>
80005e4c:	e0 40 00 65 	cp.w	r0,101
80005e50:	e0 8a 01 d6 	brle	800061fc <_vfprintf_r+0x1ca0>
80005e54:	30 08       	mov	r8,0
80005e56:	30 09       	mov	r9,0
80005e58:	40 5b       	lddsp	r11,sp[0x14]
80005e5a:	40 7a       	lddsp	r10,sp[0x1c]
80005e5c:	e0 a0 17 ed 	rcall	80008e36 <__avr32_f64_cmp_eq>
80005e60:	c7 90       	breq	80005f52 <_vfprintf_r+0x19f6>
80005e62:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e66:	fe c9 be 9e 	sub	r9,pc,-16738
80005e6a:	2f f8       	sub	r8,-1
80005e6c:	87 09       	st.w	r3[0x0],r9
80005e6e:	fb 48 06 90 	st.w	sp[1680],r8
80005e72:	30 19       	mov	r9,1
80005e74:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e78:	87 19       	st.w	r3[0x4],r9
80005e7a:	2f f8       	sub	r8,-1
80005e7c:	fb 48 06 8c 	st.w	sp[1676],r8
80005e80:	58 78       	cp.w	r8,7
80005e82:	e0 89 00 05 	brgt	80005e8c <_vfprintf_r+0x1930>
80005e86:	2f 83       	sub	r3,-8
80005e88:	c0 c8       	rjmp	80005ea0 <_vfprintf_r+0x1944>
80005e8a:	d7 03       	nop
80005e8c:	fa ca f9 78 	sub	r10,sp,-1672
80005e90:	02 9b       	mov	r11,r1
80005e92:	08 9c       	mov	r12,r4
80005e94:	fe b0 f3 56 	rcall	80004540 <__sprint_r>
80005e98:	e0 81 02 e1 	brne	8000645a <_vfprintf_r+0x1efe>
80005e9c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ea0:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005ea4:	40 6c       	lddsp	r12,sp[0x18]
80005ea6:	18 38       	cp.w	r8,r12
80005ea8:	c0 55       	brlt	80005eb2 <_vfprintf_r+0x1956>
80005eaa:	ed b5 00 00 	bld	r5,0x0
80005eae:	e0 81 02 6b 	brne	80006384 <_vfprintf_r+0x1e28>
80005eb2:	fa f8 06 90 	ld.w	r8,sp[1680]
80005eb6:	2f f8       	sub	r8,-1
80005eb8:	40 cb       	lddsp	r11,sp[0x30]
80005eba:	fb 48 06 90 	st.w	sp[1680],r8
80005ebe:	30 19       	mov	r9,1
80005ec0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ec4:	87 0b       	st.w	r3[0x0],r11
80005ec6:	2f f8       	sub	r8,-1
80005ec8:	87 19       	st.w	r3[0x4],r9
80005eca:	fb 48 06 8c 	st.w	sp[1676],r8
80005ece:	58 78       	cp.w	r8,7
80005ed0:	e0 89 00 04 	brgt	80005ed8 <_vfprintf_r+0x197c>
80005ed4:	2f 83       	sub	r3,-8
80005ed6:	c0 b8       	rjmp	80005eec <_vfprintf_r+0x1990>
80005ed8:	fa ca f9 78 	sub	r10,sp,-1672
80005edc:	02 9b       	mov	r11,r1
80005ede:	08 9c       	mov	r12,r4
80005ee0:	fe b0 f3 30 	rcall	80004540 <__sprint_r>
80005ee4:	e0 81 02 bb 	brne	8000645a <_vfprintf_r+0x1efe>
80005ee8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005eec:	40 66       	lddsp	r6,sp[0x18]
80005eee:	20 16       	sub	r6,1
80005ef0:	58 06       	cp.w	r6,0
80005ef2:	e0 89 00 1d 	brgt	80005f2c <_vfprintf_r+0x19d0>
80005ef6:	e0 8f 02 47 	bral	80006384 <_vfprintf_r+0x1e28>
80005efa:	2f 09       	sub	r9,-16
80005efc:	2f f8       	sub	r8,-1
80005efe:	fb 49 06 90 	st.w	sp[1680],r9
80005f02:	87 02       	st.w	r3[0x0],r2
80005f04:	87 10       	st.w	r3[0x4],r0
80005f06:	fb 48 06 8c 	st.w	sp[1676],r8
80005f0a:	58 78       	cp.w	r8,7
80005f0c:	e0 89 00 04 	brgt	80005f14 <_vfprintf_r+0x19b8>
80005f10:	2f 83       	sub	r3,-8
80005f12:	c0 b8       	rjmp	80005f28 <_vfprintf_r+0x19cc>
80005f14:	fa ca f9 78 	sub	r10,sp,-1672
80005f18:	02 9b       	mov	r11,r1
80005f1a:	08 9c       	mov	r12,r4
80005f1c:	fe b0 f3 12 	rcall	80004540 <__sprint_r>
80005f20:	e0 81 02 9d 	brne	8000645a <_vfprintf_r+0x1efe>
80005f24:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f28:	21 06       	sub	r6,16
80005f2a:	c0 48       	rjmp	80005f32 <_vfprintf_r+0x19d6>
80005f2c:	fe c2 bf 50 	sub	r2,pc,-16560
80005f30:	31 00       	mov	r0,16
80005f32:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f36:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f3a:	fe ca bf 5e 	sub	r10,pc,-16546
80005f3e:	59 06       	cp.w	r6,16
80005f40:	fe 99 ff dd 	brgt	80005efa <_vfprintf_r+0x199e>
80005f44:	0c 09       	add	r9,r6
80005f46:	87 0a       	st.w	r3[0x0],r10
80005f48:	fb 49 06 90 	st.w	sp[1680],r9
80005f4c:	2f f8       	sub	r8,-1
80005f4e:	87 16       	st.w	r3[0x4],r6
80005f50:	c5 39       	rjmp	800061f6 <_vfprintf_r+0x1c9a>
80005f52:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005f56:	58 0a       	cp.w	r10,0
80005f58:	e0 89 00 92 	brgt	8000607c <_vfprintf_r+0x1b20>
80005f5c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f60:	fe c9 bf 98 	sub	r9,pc,-16488
80005f64:	2f f8       	sub	r8,-1
80005f66:	87 09       	st.w	r3[0x0],r9
80005f68:	fb 48 06 90 	st.w	sp[1680],r8
80005f6c:	30 19       	mov	r9,1
80005f6e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f72:	87 19       	st.w	r3[0x4],r9
80005f74:	2f f8       	sub	r8,-1
80005f76:	fb 48 06 8c 	st.w	sp[1676],r8
80005f7a:	58 78       	cp.w	r8,7
80005f7c:	e0 89 00 04 	brgt	80005f84 <_vfprintf_r+0x1a28>
80005f80:	2f 83       	sub	r3,-8
80005f82:	c0 b8       	rjmp	80005f98 <_vfprintf_r+0x1a3c>
80005f84:	fa ca f9 78 	sub	r10,sp,-1672
80005f88:	02 9b       	mov	r11,r1
80005f8a:	08 9c       	mov	r12,r4
80005f8c:	fe b0 f2 da 	rcall	80004540 <__sprint_r>
80005f90:	e0 81 02 65 	brne	8000645a <_vfprintf_r+0x1efe>
80005f94:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f98:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005f9c:	58 08       	cp.w	r8,0
80005f9e:	c0 81       	brne	80005fae <_vfprintf_r+0x1a52>
80005fa0:	40 6a       	lddsp	r10,sp[0x18]
80005fa2:	58 0a       	cp.w	r10,0
80005fa4:	c0 51       	brne	80005fae <_vfprintf_r+0x1a52>
80005fa6:	ed b5 00 00 	bld	r5,0x0
80005faa:	e0 81 01 ed 	brne	80006384 <_vfprintf_r+0x1e28>
80005fae:	40 c9       	lddsp	r9,sp[0x30]
80005fb0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fb4:	2f f8       	sub	r8,-1
80005fb6:	87 09       	st.w	r3[0x0],r9
80005fb8:	fb 48 06 90 	st.w	sp[1680],r8
80005fbc:	30 19       	mov	r9,1
80005fbe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fc2:	87 19       	st.w	r3[0x4],r9
80005fc4:	2f f8       	sub	r8,-1
80005fc6:	fb 48 06 8c 	st.w	sp[1676],r8
80005fca:	58 78       	cp.w	r8,7
80005fcc:	e0 89 00 04 	brgt	80005fd4 <_vfprintf_r+0x1a78>
80005fd0:	2f 83       	sub	r3,-8
80005fd2:	c0 b8       	rjmp	80005fe8 <_vfprintf_r+0x1a8c>
80005fd4:	fa ca f9 78 	sub	r10,sp,-1672
80005fd8:	02 9b       	mov	r11,r1
80005fda:	08 9c       	mov	r12,r4
80005fdc:	fe b0 f2 b2 	rcall	80004540 <__sprint_r>
80005fe0:	e0 81 02 3d 	brne	8000645a <_vfprintf_r+0x1efe>
80005fe4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fe8:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005fec:	5c 32       	neg	r2
80005fee:	58 02       	cp.w	r2,0
80005ff0:	e0 89 00 1d 	brgt	8000602a <_vfprintf_r+0x1ace>
80005ff4:	c3 d8       	rjmp	8000606e <_vfprintf_r+0x1b12>
80005ff6:	2f 09       	sub	r9,-16
80005ff8:	2f f8       	sub	r8,-1
80005ffa:	31 0e       	mov	lr,16
80005ffc:	fb 49 06 90 	st.w	sp[1680],r9
80006000:	87 00       	st.w	r3[0x0],r0
80006002:	87 1e       	st.w	r3[0x4],lr
80006004:	fb 48 06 8c 	st.w	sp[1676],r8
80006008:	58 78       	cp.w	r8,7
8000600a:	e0 89 00 04 	brgt	80006012 <_vfprintf_r+0x1ab6>
8000600e:	2f 83       	sub	r3,-8
80006010:	c0 b8       	rjmp	80006026 <_vfprintf_r+0x1aca>
80006012:	fa ca f9 78 	sub	r10,sp,-1672
80006016:	02 9b       	mov	r11,r1
80006018:	08 9c       	mov	r12,r4
8000601a:	fe b0 f2 93 	rcall	80004540 <__sprint_r>
8000601e:	e0 81 02 1e 	brne	8000645a <_vfprintf_r+0x1efe>
80006022:	fa c3 f9 e0 	sub	r3,sp,-1568
80006026:	21 02       	sub	r2,16
80006028:	c0 38       	rjmp	8000602e <_vfprintf_r+0x1ad2>
8000602a:	fe c0 c0 4e 	sub	r0,pc,-16306
8000602e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006032:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006036:	fe ca c0 5a 	sub	r10,pc,-16294
8000603a:	59 02       	cp.w	r2,16
8000603c:	fe 99 ff dd 	brgt	80005ff6 <_vfprintf_r+0x1a9a>
80006040:	04 09       	add	r9,r2
80006042:	2f f8       	sub	r8,-1
80006044:	87 0a       	st.w	r3[0x0],r10
80006046:	fb 49 06 90 	st.w	sp[1680],r9
8000604a:	87 12       	st.w	r3[0x4],r2
8000604c:	fb 48 06 8c 	st.w	sp[1676],r8
80006050:	58 78       	cp.w	r8,7
80006052:	e0 89 00 04 	brgt	8000605a <_vfprintf_r+0x1afe>
80006056:	2f 83       	sub	r3,-8
80006058:	c0 b8       	rjmp	8000606e <_vfprintf_r+0x1b12>
8000605a:	fa ca f9 78 	sub	r10,sp,-1672
8000605e:	02 9b       	mov	r11,r1
80006060:	08 9c       	mov	r12,r4
80006062:	fe b0 f2 6f 	rcall	80004540 <__sprint_r>
80006066:	e0 81 01 fa 	brne	8000645a <_vfprintf_r+0x1efe>
8000606a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000606e:	40 6c       	lddsp	r12,sp[0x18]
80006070:	fa f8 06 90 	ld.w	r8,sp[1680]
80006074:	87 06       	st.w	r3[0x0],r6
80006076:	87 1c       	st.w	r3[0x4],r12
80006078:	18 08       	add	r8,r12
8000607a:	cb 98       	rjmp	800061ec <_vfprintf_r+0x1c90>
8000607c:	fa f9 06 90 	ld.w	r9,sp[1680]
80006080:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006084:	40 6b       	lddsp	r11,sp[0x18]
80006086:	16 3a       	cp.w	r10,r11
80006088:	c6 f5       	brlt	80006166 <_vfprintf_r+0x1c0a>
8000608a:	16 09       	add	r9,r11
8000608c:	2f f8       	sub	r8,-1
8000608e:	87 06       	st.w	r3[0x0],r6
80006090:	fb 49 06 90 	st.w	sp[1680],r9
80006094:	87 1b       	st.w	r3[0x4],r11
80006096:	fb 48 06 8c 	st.w	sp[1676],r8
8000609a:	58 78       	cp.w	r8,7
8000609c:	e0 89 00 04 	brgt	800060a4 <_vfprintf_r+0x1b48>
800060a0:	2f 83       	sub	r3,-8
800060a2:	c0 b8       	rjmp	800060b8 <_vfprintf_r+0x1b5c>
800060a4:	fa ca f9 78 	sub	r10,sp,-1672
800060a8:	02 9b       	mov	r11,r1
800060aa:	08 9c       	mov	r12,r4
800060ac:	fe b0 f2 4a 	rcall	80004540 <__sprint_r>
800060b0:	e0 81 01 d5 	brne	8000645a <_vfprintf_r+0x1efe>
800060b4:	fa c3 f9 e0 	sub	r3,sp,-1568
800060b8:	fa f6 06 ac 	ld.w	r6,sp[1708]
800060bc:	40 6a       	lddsp	r10,sp[0x18]
800060be:	14 16       	sub	r6,r10
800060c0:	58 06       	cp.w	r6,0
800060c2:	e0 89 00 1c 	brgt	800060fa <_vfprintf_r+0x1b9e>
800060c6:	c3 d8       	rjmp	80006140 <_vfprintf_r+0x1be4>
800060c8:	2f 09       	sub	r9,-16
800060ca:	2f f8       	sub	r8,-1
800060cc:	fb 49 06 90 	st.w	sp[1680],r9
800060d0:	87 02       	st.w	r3[0x0],r2
800060d2:	87 10       	st.w	r3[0x4],r0
800060d4:	fb 48 06 8c 	st.w	sp[1676],r8
800060d8:	58 78       	cp.w	r8,7
800060da:	e0 89 00 04 	brgt	800060e2 <_vfprintf_r+0x1b86>
800060de:	2f 83       	sub	r3,-8
800060e0:	c0 b8       	rjmp	800060f6 <_vfprintf_r+0x1b9a>
800060e2:	fa ca f9 78 	sub	r10,sp,-1672
800060e6:	02 9b       	mov	r11,r1
800060e8:	08 9c       	mov	r12,r4
800060ea:	fe b0 f2 2b 	rcall	80004540 <__sprint_r>
800060ee:	e0 81 01 b6 	brne	8000645a <_vfprintf_r+0x1efe>
800060f2:	fa c3 f9 e0 	sub	r3,sp,-1568
800060f6:	21 06       	sub	r6,16
800060f8:	c0 48       	rjmp	80006100 <_vfprintf_r+0x1ba4>
800060fa:	fe c2 c1 1e 	sub	r2,pc,-16098
800060fe:	31 00       	mov	r0,16
80006100:	fa f9 06 90 	ld.w	r9,sp[1680]
80006104:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006108:	fe ca c1 2c 	sub	r10,pc,-16084
8000610c:	59 06       	cp.w	r6,16
8000610e:	fe 99 ff dd 	brgt	800060c8 <_vfprintf_r+0x1b6c>
80006112:	0c 09       	add	r9,r6
80006114:	2f f8       	sub	r8,-1
80006116:	87 0a       	st.w	r3[0x0],r10
80006118:	fb 49 06 90 	st.w	sp[1680],r9
8000611c:	87 16       	st.w	r3[0x4],r6
8000611e:	fb 48 06 8c 	st.w	sp[1676],r8
80006122:	58 78       	cp.w	r8,7
80006124:	e0 89 00 04 	brgt	8000612c <_vfprintf_r+0x1bd0>
80006128:	2f 83       	sub	r3,-8
8000612a:	c0 b8       	rjmp	80006140 <_vfprintf_r+0x1be4>
8000612c:	fa ca f9 78 	sub	r10,sp,-1672
80006130:	02 9b       	mov	r11,r1
80006132:	08 9c       	mov	r12,r4
80006134:	fe b0 f2 06 	rcall	80004540 <__sprint_r>
80006138:	e0 81 01 91 	brne	8000645a <_vfprintf_r+0x1efe>
8000613c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006140:	ed b5 00 00 	bld	r5,0x0
80006144:	e0 81 01 20 	brne	80006384 <_vfprintf_r+0x1e28>
80006148:	40 c9       	lddsp	r9,sp[0x30]
8000614a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000614e:	2f f8       	sub	r8,-1
80006150:	87 09       	st.w	r3[0x0],r9
80006152:	fb 48 06 90 	st.w	sp[1680],r8
80006156:	30 19       	mov	r9,1
80006158:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000615c:	87 19       	st.w	r3[0x4],r9
8000615e:	2f f8       	sub	r8,-1
80006160:	fb 48 06 8c 	st.w	sp[1676],r8
80006164:	c0 29       	rjmp	80006368 <_vfprintf_r+0x1e0c>
80006166:	14 09       	add	r9,r10
80006168:	2f f8       	sub	r8,-1
8000616a:	fb 49 06 90 	st.w	sp[1680],r9
8000616e:	87 06       	st.w	r3[0x0],r6
80006170:	87 1a       	st.w	r3[0x4],r10
80006172:	fb 48 06 8c 	st.w	sp[1676],r8
80006176:	58 78       	cp.w	r8,7
80006178:	e0 89 00 04 	brgt	80006180 <_vfprintf_r+0x1c24>
8000617c:	2f 83       	sub	r3,-8
8000617e:	c0 b8       	rjmp	80006194 <_vfprintf_r+0x1c38>
80006180:	fa ca f9 78 	sub	r10,sp,-1672
80006184:	02 9b       	mov	r11,r1
80006186:	08 9c       	mov	r12,r4
80006188:	fe b0 f1 dc 	rcall	80004540 <__sprint_r>
8000618c:	e0 81 01 67 	brne	8000645a <_vfprintf_r+0x1efe>
80006190:	fa c3 f9 e0 	sub	r3,sp,-1568
80006194:	40 c8       	lddsp	r8,sp[0x30]
80006196:	87 08       	st.w	r3[0x0],r8
80006198:	fa f8 06 90 	ld.w	r8,sp[1680]
8000619c:	2f f8       	sub	r8,-1
8000619e:	30 19       	mov	r9,1
800061a0:	fb 48 06 90 	st.w	sp[1680],r8
800061a4:	87 19       	st.w	r3[0x4],r9
800061a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061aa:	2f f8       	sub	r8,-1
800061ac:	fb 48 06 8c 	st.w	sp[1676],r8
800061b0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800061b4:	58 78       	cp.w	r8,7
800061b6:	e0 89 00 04 	brgt	800061be <_vfprintf_r+0x1c62>
800061ba:	2f 83       	sub	r3,-8
800061bc:	c0 b8       	rjmp	800061d2 <_vfprintf_r+0x1c76>
800061be:	fa ca f9 78 	sub	r10,sp,-1672
800061c2:	02 9b       	mov	r11,r1
800061c4:	08 9c       	mov	r12,r4
800061c6:	fe b0 f1 bd 	rcall	80004540 <__sprint_r>
800061ca:	e0 81 01 48 	brne	8000645a <_vfprintf_r+0x1efe>
800061ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800061d2:	04 06       	add	r6,r2
800061d4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800061d8:	87 06       	st.w	r3[0x0],r6
800061da:	fa f9 06 90 	ld.w	r9,sp[1680]
800061de:	40 66       	lddsp	r6,sp[0x18]
800061e0:	40 6e       	lddsp	lr,sp[0x18]
800061e2:	10 16       	sub	r6,r8
800061e4:	f2 08 01 08 	sub	r8,r9,r8
800061e8:	87 16       	st.w	r3[0x4],r6
800061ea:	1c 08       	add	r8,lr
800061ec:	fb 48 06 90 	st.w	sp[1680],r8
800061f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061f4:	2f f8       	sub	r8,-1
800061f6:	fb 48 06 8c 	st.w	sp[1676],r8
800061fa:	cb 78       	rjmp	80006368 <_vfprintf_r+0x1e0c>
800061fc:	40 6c       	lddsp	r12,sp[0x18]
800061fe:	58 1c       	cp.w	r12,1
80006200:	e0 89 00 06 	brgt	8000620c <_vfprintf_r+0x1cb0>
80006204:	ed b5 00 00 	bld	r5,0x0
80006208:	e0 81 00 85 	brne	80006312 <_vfprintf_r+0x1db6>
8000620c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006210:	2f f8       	sub	r8,-1
80006212:	30 19       	mov	r9,1
80006214:	fb 48 06 90 	st.w	sp[1680],r8
80006218:	87 06       	st.w	r3[0x0],r6
8000621a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000621e:	87 19       	st.w	r3[0x4],r9
80006220:	2f f8       	sub	r8,-1
80006222:	fb 48 06 8c 	st.w	sp[1676],r8
80006226:	58 78       	cp.w	r8,7
80006228:	e0 89 00 04 	brgt	80006230 <_vfprintf_r+0x1cd4>
8000622c:	2f 83       	sub	r3,-8
8000622e:	c0 b8       	rjmp	80006244 <_vfprintf_r+0x1ce8>
80006230:	fa ca f9 78 	sub	r10,sp,-1672
80006234:	02 9b       	mov	r11,r1
80006236:	08 9c       	mov	r12,r4
80006238:	fe b0 f1 84 	rcall	80004540 <__sprint_r>
8000623c:	e0 81 01 0f 	brne	8000645a <_vfprintf_r+0x1efe>
80006240:	fa c3 f9 e0 	sub	r3,sp,-1568
80006244:	fa f8 06 90 	ld.w	r8,sp[1680]
80006248:	2f f8       	sub	r8,-1
8000624a:	40 cb       	lddsp	r11,sp[0x30]
8000624c:	fb 48 06 90 	st.w	sp[1680],r8
80006250:	30 19       	mov	r9,1
80006252:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006256:	87 0b       	st.w	r3[0x0],r11
80006258:	2f f8       	sub	r8,-1
8000625a:	87 19       	st.w	r3[0x4],r9
8000625c:	fb 48 06 8c 	st.w	sp[1676],r8
80006260:	58 78       	cp.w	r8,7
80006262:	e0 89 00 05 	brgt	8000626c <_vfprintf_r+0x1d10>
80006266:	2f 83       	sub	r3,-8
80006268:	c0 c8       	rjmp	80006280 <_vfprintf_r+0x1d24>
8000626a:	d7 03       	nop
8000626c:	fa ca f9 78 	sub	r10,sp,-1672
80006270:	02 9b       	mov	r11,r1
80006272:	08 9c       	mov	r12,r4
80006274:	fe b0 f1 66 	rcall	80004540 <__sprint_r>
80006278:	e0 81 00 f1 	brne	8000645a <_vfprintf_r+0x1efe>
8000627c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006280:	30 08       	mov	r8,0
80006282:	30 09       	mov	r9,0
80006284:	40 5b       	lddsp	r11,sp[0x14]
80006286:	40 7a       	lddsp	r10,sp[0x1c]
80006288:	e0 a0 15 d7 	rcall	80008e36 <__avr32_f64_cmp_eq>
8000628c:	40 68       	lddsp	r8,sp[0x18]
8000628e:	20 18       	sub	r8,1
80006290:	58 0c       	cp.w	r12,0
80006292:	c0 d1       	brne	800062ac <_vfprintf_r+0x1d50>
80006294:	2f f6       	sub	r6,-1
80006296:	87 18       	st.w	r3[0x4],r8
80006298:	87 06       	st.w	r3[0x0],r6
8000629a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000629e:	10 06       	add	r6,r8
800062a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062a4:	fb 46 06 90 	st.w	sp[1680],r6
800062a8:	2f f8       	sub	r8,-1
800062aa:	c3 18       	rjmp	8000630c <_vfprintf_r+0x1db0>
800062ac:	10 96       	mov	r6,r8
800062ae:	58 08       	cp.w	r8,0
800062b0:	e0 89 00 1c 	brgt	800062e8 <_vfprintf_r+0x1d8c>
800062b4:	c4 b8       	rjmp	8000634a <_vfprintf_r+0x1dee>
800062b6:	2f 09       	sub	r9,-16
800062b8:	2f f8       	sub	r8,-1
800062ba:	fb 49 06 90 	st.w	sp[1680],r9
800062be:	87 02       	st.w	r3[0x0],r2
800062c0:	87 10       	st.w	r3[0x4],r0
800062c2:	fb 48 06 8c 	st.w	sp[1676],r8
800062c6:	58 78       	cp.w	r8,7
800062c8:	e0 89 00 04 	brgt	800062d0 <_vfprintf_r+0x1d74>
800062cc:	2f 83       	sub	r3,-8
800062ce:	c0 b8       	rjmp	800062e4 <_vfprintf_r+0x1d88>
800062d0:	fa ca f9 78 	sub	r10,sp,-1672
800062d4:	02 9b       	mov	r11,r1
800062d6:	08 9c       	mov	r12,r4
800062d8:	fe b0 f1 34 	rcall	80004540 <__sprint_r>
800062dc:	e0 81 00 bf 	brne	8000645a <_vfprintf_r+0x1efe>
800062e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800062e4:	21 06       	sub	r6,16
800062e6:	c0 48       	rjmp	800062ee <_vfprintf_r+0x1d92>
800062e8:	fe c2 c3 0c 	sub	r2,pc,-15604
800062ec:	31 00       	mov	r0,16
800062ee:	fa f9 06 90 	ld.w	r9,sp[1680]
800062f2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062f6:	fe ca c3 1a 	sub	r10,pc,-15590
800062fa:	59 06       	cp.w	r6,16
800062fc:	fe 99 ff dd 	brgt	800062b6 <_vfprintf_r+0x1d5a>
80006300:	0c 09       	add	r9,r6
80006302:	87 0a       	st.w	r3[0x0],r10
80006304:	fb 49 06 90 	st.w	sp[1680],r9
80006308:	2f f8       	sub	r8,-1
8000630a:	87 16       	st.w	r3[0x4],r6
8000630c:	fb 48 06 8c 	st.w	sp[1676],r8
80006310:	c0 e8       	rjmp	8000632c <_vfprintf_r+0x1dd0>
80006312:	fa f8 06 90 	ld.w	r8,sp[1680]
80006316:	2f f8       	sub	r8,-1
80006318:	30 19       	mov	r9,1
8000631a:	fb 48 06 90 	st.w	sp[1680],r8
8000631e:	87 06       	st.w	r3[0x0],r6
80006320:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006324:	87 19       	st.w	r3[0x4],r9
80006326:	2f f8       	sub	r8,-1
80006328:	fb 48 06 8c 	st.w	sp[1676],r8
8000632c:	58 78       	cp.w	r8,7
8000632e:	e0 89 00 04 	brgt	80006336 <_vfprintf_r+0x1dda>
80006332:	2f 83       	sub	r3,-8
80006334:	c0 b8       	rjmp	8000634a <_vfprintf_r+0x1dee>
80006336:	fa ca f9 78 	sub	r10,sp,-1672
8000633a:	02 9b       	mov	r11,r1
8000633c:	08 9c       	mov	r12,r4
8000633e:	fe b0 f1 01 	rcall	80004540 <__sprint_r>
80006342:	e0 81 00 8c 	brne	8000645a <_vfprintf_r+0x1efe>
80006346:	fa c3 f9 e0 	sub	r3,sp,-1568
8000634a:	40 ea       	lddsp	r10,sp[0x38]
8000634c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006350:	14 08       	add	r8,r10
80006352:	fa c9 f9 64 	sub	r9,sp,-1692
80006356:	fb 48 06 90 	st.w	sp[1680],r8
8000635a:	87 1a       	st.w	r3[0x4],r10
8000635c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006360:	87 09       	st.w	r3[0x0],r9
80006362:	2f f8       	sub	r8,-1
80006364:	fb 48 06 8c 	st.w	sp[1676],r8
80006368:	58 78       	cp.w	r8,7
8000636a:	e0 89 00 04 	brgt	80006372 <_vfprintf_r+0x1e16>
8000636e:	2f 83       	sub	r3,-8
80006370:	c0 a8       	rjmp	80006384 <_vfprintf_r+0x1e28>
80006372:	fa ca f9 78 	sub	r10,sp,-1672
80006376:	02 9b       	mov	r11,r1
80006378:	08 9c       	mov	r12,r4
8000637a:	fe b0 f0 e3 	rcall	80004540 <__sprint_r>
8000637e:	c6 e1       	brne	8000645a <_vfprintf_r+0x1efe>
80006380:	fa c3 f9 e0 	sub	r3,sp,-1568
80006384:	e2 15 00 04 	andl	r5,0x4,COH
80006388:	c3 f0       	breq	80006406 <_vfprintf_r+0x1eaa>
8000638a:	40 86       	lddsp	r6,sp[0x20]
8000638c:	40 39       	lddsp	r9,sp[0xc]
8000638e:	12 16       	sub	r6,r9
80006390:	58 06       	cp.w	r6,0
80006392:	e0 89 00 1a 	brgt	800063c6 <_vfprintf_r+0x1e6a>
80006396:	c3 88       	rjmp	80006406 <_vfprintf_r+0x1eaa>
80006398:	2f 09       	sub	r9,-16
8000639a:	2f f8       	sub	r8,-1
8000639c:	fb 49 06 90 	st.w	sp[1680],r9
800063a0:	87 05       	st.w	r3[0x0],r5
800063a2:	87 12       	st.w	r3[0x4],r2
800063a4:	fb 48 06 8c 	st.w	sp[1676],r8
800063a8:	58 78       	cp.w	r8,7
800063aa:	e0 89 00 04 	brgt	800063b2 <_vfprintf_r+0x1e56>
800063ae:	2f 83       	sub	r3,-8
800063b0:	c0 98       	rjmp	800063c2 <_vfprintf_r+0x1e66>
800063b2:	00 9a       	mov	r10,r0
800063b4:	02 9b       	mov	r11,r1
800063b6:	08 9c       	mov	r12,r4
800063b8:	fe b0 f0 c4 	rcall	80004540 <__sprint_r>
800063bc:	c4 f1       	brne	8000645a <_vfprintf_r+0x1efe>
800063be:	fa c3 f9 e0 	sub	r3,sp,-1568
800063c2:	21 06       	sub	r6,16
800063c4:	c0 68       	rjmp	800063d0 <_vfprintf_r+0x1e74>
800063c6:	fe c5 c3 fa 	sub	r5,pc,-15366
800063ca:	31 02       	mov	r2,16
800063cc:	fa c0 f9 78 	sub	r0,sp,-1672
800063d0:	fa f9 06 90 	ld.w	r9,sp[1680]
800063d4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063d8:	fe ca c4 0c 	sub	r10,pc,-15348
800063dc:	59 06       	cp.w	r6,16
800063de:	fe 99 ff dd 	brgt	80006398 <_vfprintf_r+0x1e3c>
800063e2:	0c 09       	add	r9,r6
800063e4:	2f f8       	sub	r8,-1
800063e6:	87 0a       	st.w	r3[0x0],r10
800063e8:	87 16       	st.w	r3[0x4],r6
800063ea:	fb 49 06 90 	st.w	sp[1680],r9
800063ee:	fb 48 06 8c 	st.w	sp[1676],r8
800063f2:	58 78       	cp.w	r8,7
800063f4:	e0 8a 00 09 	brle	80006406 <_vfprintf_r+0x1eaa>
800063f8:	fa ca f9 78 	sub	r10,sp,-1672
800063fc:	02 9b       	mov	r11,r1
800063fe:	08 9c       	mov	r12,r4
80006400:	fe b0 f0 a0 	rcall	80004540 <__sprint_r>
80006404:	c2 b1       	brne	8000645a <_vfprintf_r+0x1efe>
80006406:	40 bc       	lddsp	r12,sp[0x2c]
80006408:	40 36       	lddsp	r6,sp[0xc]
8000640a:	40 8e       	lddsp	lr,sp[0x20]
8000640c:	ec 0e 0c 48 	max	r8,r6,lr
80006410:	10 0c       	add	r12,r8
80006412:	50 bc       	stdsp	sp[0x2c],r12
80006414:	fa f8 06 90 	ld.w	r8,sp[1680]
80006418:	58 08       	cp.w	r8,0
8000641a:	c0 80       	breq	8000642a <_vfprintf_r+0x1ece>
8000641c:	fa ca f9 78 	sub	r10,sp,-1672
80006420:	02 9b       	mov	r11,r1
80006422:	08 9c       	mov	r12,r4
80006424:	fe b0 f0 8e 	rcall	80004540 <__sprint_r>
80006428:	c1 91       	brne	8000645a <_vfprintf_r+0x1efe>
8000642a:	30 0b       	mov	r11,0
8000642c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006430:	fb 4b 06 8c 	st.w	sp[1676],r11
80006434:	fe 9f f1 22 	bral	80004678 <_vfprintf_r+0x11c>
80006438:	08 95       	mov	r5,r4
8000643a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000643e:	58 08       	cp.w	r8,0
80006440:	c0 80       	breq	80006450 <_vfprintf_r+0x1ef4>
80006442:	08 9c       	mov	r12,r4
80006444:	fa ca f9 78 	sub	r10,sp,-1672
80006448:	02 9b       	mov	r11,r1
8000644a:	fe b0 f0 7b 	rcall	80004540 <__sprint_r>
8000644e:	c0 61       	brne	8000645a <_vfprintf_r+0x1efe>
80006450:	30 08       	mov	r8,0
80006452:	fb 48 06 8c 	st.w	sp[1676],r8
80006456:	c0 28       	rjmp	8000645a <_vfprintf_r+0x1efe>
80006458:	40 41       	lddsp	r1,sp[0x10]
8000645a:	82 68       	ld.sh	r8,r1[0xc]
8000645c:	ed b8 00 06 	bld	r8,0x6
80006460:	c0 31       	brne	80006466 <_vfprintf_r+0x1f0a>
80006462:	3f fa       	mov	r10,-1
80006464:	50 ba       	stdsp	sp[0x2c],r10
80006466:	40 bc       	lddsp	r12,sp[0x2c]
80006468:	fe 3d f9 44 	sub	sp,-1724
8000646c:	d8 32       	popm	r0-r7,pc
8000646e:	d7 03       	nop

80006470 <__swsetup_r>:
80006470:	d4 21       	pushm	r4-r7,lr
80006472:	e0 68 01 18 	mov	r8,280
80006476:	18 96       	mov	r6,r12
80006478:	16 97       	mov	r7,r11
8000647a:	70 0c       	ld.w	r12,r8[0x0]
8000647c:	58 0c       	cp.w	r12,0
8000647e:	c0 60       	breq	8000648a <__swsetup_r+0x1a>
80006480:	78 68       	ld.w	r8,r12[0x18]
80006482:	58 08       	cp.w	r8,0
80006484:	c0 31       	brne	8000648a <__swsetup_r+0x1a>
80006486:	e0 a0 07 b9 	rcall	800073f8 <__sinit>
8000648a:	fe c8 c3 8e 	sub	r8,pc,-15474
8000648e:	10 37       	cp.w	r7,r8
80006490:	c0 61       	brne	8000649c <__swsetup_r+0x2c>
80006492:	e0 68 01 18 	mov	r8,280
80006496:	70 08       	ld.w	r8,r8[0x0]
80006498:	70 07       	ld.w	r7,r8[0x0]
8000649a:	c1 28       	rjmp	800064be <__swsetup_r+0x4e>
8000649c:	fe c8 c3 80 	sub	r8,pc,-15488
800064a0:	10 37       	cp.w	r7,r8
800064a2:	c0 61       	brne	800064ae <__swsetup_r+0x3e>
800064a4:	e0 68 01 18 	mov	r8,280
800064a8:	70 08       	ld.w	r8,r8[0x0]
800064aa:	70 17       	ld.w	r7,r8[0x4]
800064ac:	c0 98       	rjmp	800064be <__swsetup_r+0x4e>
800064ae:	fe c8 c3 72 	sub	r8,pc,-15502
800064b2:	10 37       	cp.w	r7,r8
800064b4:	c0 51       	brne	800064be <__swsetup_r+0x4e>
800064b6:	e0 68 01 18 	mov	r8,280
800064ba:	70 08       	ld.w	r8,r8[0x0]
800064bc:	70 27       	ld.w	r7,r8[0x8]
800064be:	8e 68       	ld.sh	r8,r7[0xc]
800064c0:	ed b8 00 03 	bld	r8,0x3
800064c4:	c1 e0       	breq	80006500 <__swsetup_r+0x90>
800064c6:	ed b8 00 04 	bld	r8,0x4
800064ca:	c3 e1       	brne	80006546 <__swsetup_r+0xd6>
800064cc:	ed b8 00 02 	bld	r8,0x2
800064d0:	c1 51       	brne	800064fa <__swsetup_r+0x8a>
800064d2:	6e db       	ld.w	r11,r7[0x34]
800064d4:	58 0b       	cp.w	r11,0
800064d6:	c0 a0       	breq	800064ea <__swsetup_r+0x7a>
800064d8:	ee c8 ff bc 	sub	r8,r7,-68
800064dc:	10 3b       	cp.w	r11,r8
800064de:	c0 40       	breq	800064e6 <__swsetup_r+0x76>
800064e0:	0c 9c       	mov	r12,r6
800064e2:	e0 a0 08 25 	rcall	8000752c <_free_r>
800064e6:	30 08       	mov	r8,0
800064e8:	8f d8       	st.w	r7[0x34],r8
800064ea:	8e 68       	ld.sh	r8,r7[0xc]
800064ec:	e0 18 ff db 	andl	r8,0xffdb
800064f0:	ae 68       	st.h	r7[0xc],r8
800064f2:	30 08       	mov	r8,0
800064f4:	8f 18       	st.w	r7[0x4],r8
800064f6:	6e 48       	ld.w	r8,r7[0x10]
800064f8:	8f 08       	st.w	r7[0x0],r8
800064fa:	8e 68       	ld.sh	r8,r7[0xc]
800064fc:	a3 b8       	sbr	r8,0x3
800064fe:	ae 68       	st.h	r7[0xc],r8
80006500:	6e 48       	ld.w	r8,r7[0x10]
80006502:	58 08       	cp.w	r8,0
80006504:	c0 b1       	brne	8000651a <__swsetup_r+0xaa>
80006506:	8e 68       	ld.sh	r8,r7[0xc]
80006508:	e2 18 02 80 	andl	r8,0x280,COH
8000650c:	e0 48 02 00 	cp.w	r8,512
80006510:	c0 50       	breq	8000651a <__swsetup_r+0xaa>
80006512:	0c 9c       	mov	r12,r6
80006514:	0e 9b       	mov	r11,r7
80006516:	e0 a0 0a 4b 	rcall	800079ac <__smakebuf_r>
8000651a:	8e 69       	ld.sh	r9,r7[0xc]
8000651c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006520:	c0 70       	breq	8000652e <__swsetup_r+0xbe>
80006522:	30 08       	mov	r8,0
80006524:	8f 28       	st.w	r7[0x8],r8
80006526:	6e 58       	ld.w	r8,r7[0x14]
80006528:	5c 38       	neg	r8
8000652a:	8f 68       	st.w	r7[0x18],r8
8000652c:	c0 68       	rjmp	80006538 <__swsetup_r+0xc8>
8000652e:	ed b9 00 01 	bld	r9,0x1
80006532:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80006536:	8f 28       	st.w	r7[0x8],r8
80006538:	6e 48       	ld.w	r8,r7[0x10]
8000653a:	58 08       	cp.w	r8,0
8000653c:	c0 61       	brne	80006548 <__swsetup_r+0xd8>
8000653e:	8e 68       	ld.sh	r8,r7[0xc]
80006540:	ed b8 00 07 	bld	r8,0x7
80006544:	c0 21       	brne	80006548 <__swsetup_r+0xd8>
80006546:	dc 2a       	popm	r4-r7,pc,r12=-1
80006548:	d8 2a       	popm	r4-r7,pc,r12=0
8000654a:	d7 03       	nop

8000654c <quorem>:
8000654c:	d4 31       	pushm	r0-r7,lr
8000654e:	20 2d       	sub	sp,8
80006550:	18 97       	mov	r7,r12
80006552:	78 48       	ld.w	r8,r12[0x10]
80006554:	76 46       	ld.w	r6,r11[0x10]
80006556:	0c 38       	cp.w	r8,r6
80006558:	c0 34       	brge	8000655e <quorem+0x12>
8000655a:	30 0c       	mov	r12,0
8000655c:	c8 58       	rjmp	80006666 <quorem+0x11a>
8000655e:	ec c2 ff fc 	sub	r2,r6,-4
80006562:	f6 c3 ff ec 	sub	r3,r11,-20
80006566:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000656a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000656e:	2f f9       	sub	r9,-1
80006570:	20 16       	sub	r6,1
80006572:	f8 09 0d 08 	divu	r8,r12,r9
80006576:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000657a:	ee c4 ff ec 	sub	r4,r7,-20
8000657e:	10 95       	mov	r5,r8
80006580:	58 08       	cp.w	r8,0
80006582:	c4 10       	breq	80006604 <quorem+0xb8>
80006584:	30 09       	mov	r9,0
80006586:	06 9a       	mov	r10,r3
80006588:	08 98       	mov	r8,r4
8000658a:	12 91       	mov	r1,r9
8000658c:	50 0b       	stdsp	sp[0x0],r11
8000658e:	70 0e       	ld.w	lr,r8[0x0]
80006590:	b1 8e       	lsr	lr,0x10
80006592:	50 1e       	stdsp	sp[0x4],lr
80006594:	15 0e       	ld.w	lr,r10++
80006596:	fc 00 16 10 	lsr	r0,lr,0x10
8000659a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000659e:	ea 0e 03 41 	mac	r1,r5,lr
800065a2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800065a6:	b1 81       	lsr	r1,0x10
800065a8:	40 1b       	lddsp	r11,sp[0x4]
800065aa:	ea 00 02 40 	mul	r0,r5,r0
800065ae:	e2 00 00 00 	add	r0,r1,r0
800065b2:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800065b6:	02 1b       	sub	r11,r1
800065b8:	50 1b       	stdsp	sp[0x4],r11
800065ba:	70 0b       	ld.w	r11,r8[0x0]
800065bc:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800065c0:	02 09       	add	r9,r1
800065c2:	f2 0e 01 0e 	sub	lr,r9,lr
800065c6:	b0 1e       	st.h	r8[0x2],lr
800065c8:	fc 09 14 10 	asr	r9,lr,0x10
800065cc:	40 1e       	lddsp	lr,sp[0x4]
800065ce:	fc 09 00 09 	add	r9,lr,r9
800065d2:	b0 09       	st.h	r8[0x0],r9
800065d4:	e0 01 16 10 	lsr	r1,r0,0x10
800065d8:	2f c8       	sub	r8,-4
800065da:	b1 49       	asr	r9,0x10
800065dc:	04 3a       	cp.w	r10,r2
800065de:	fe 98 ff d8 	brls	8000658e <quorem+0x42>
800065e2:	40 0b       	lddsp	r11,sp[0x0]
800065e4:	58 0c       	cp.w	r12,0
800065e6:	c0 f1       	brne	80006604 <quorem+0xb8>
800065e8:	ec c8 ff fb 	sub	r8,r6,-5
800065ec:	ee 08 00 28 	add	r8,r7,r8<<0x2
800065f0:	c0 28       	rjmp	800065f4 <quorem+0xa8>
800065f2:	20 16       	sub	r6,1
800065f4:	20 48       	sub	r8,4
800065f6:	08 38       	cp.w	r8,r4
800065f8:	e0 88 00 05 	brls	80006602 <quorem+0xb6>
800065fc:	70 09       	ld.w	r9,r8[0x0]
800065fe:	58 09       	cp.w	r9,0
80006600:	cf 90       	breq	800065f2 <quorem+0xa6>
80006602:	8f 46       	st.w	r7[0x10],r6
80006604:	0e 9c       	mov	r12,r7
80006606:	e0 a0 0c f4 	rcall	80007fee <__mcmp>
8000660a:	c2 d5       	brlt	80006664 <quorem+0x118>
8000660c:	2f f5       	sub	r5,-1
8000660e:	08 98       	mov	r8,r4
80006610:	30 09       	mov	r9,0
80006612:	07 0b       	ld.w	r11,r3++
80006614:	f6 0a 16 10 	lsr	r10,r11,0x10
80006618:	70 0c       	ld.w	r12,r8[0x0]
8000661a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000661e:	f8 0e 16 10 	lsr	lr,r12,0x10
80006622:	14 1e       	sub	lr,r10
80006624:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006628:	16 1a       	sub	r10,r11
8000662a:	12 0a       	add	r10,r9
8000662c:	b0 1a       	st.h	r8[0x2],r10
8000662e:	b1 4a       	asr	r10,0x10
80006630:	fc 0a 00 09 	add	r9,lr,r10
80006634:	b0 09       	st.h	r8[0x0],r9
80006636:	2f c8       	sub	r8,-4
80006638:	b1 49       	asr	r9,0x10
8000663a:	04 33       	cp.w	r3,r2
8000663c:	fe 98 ff eb 	brls	80006612 <quorem+0xc6>
80006640:	ec c8 ff fb 	sub	r8,r6,-5
80006644:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006648:	58 09       	cp.w	r9,0
8000664a:	c0 d1       	brne	80006664 <quorem+0x118>
8000664c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006650:	c0 28       	rjmp	80006654 <quorem+0x108>
80006652:	20 16       	sub	r6,1
80006654:	20 48       	sub	r8,4
80006656:	08 38       	cp.w	r8,r4
80006658:	e0 88 00 05 	brls	80006662 <quorem+0x116>
8000665c:	70 09       	ld.w	r9,r8[0x0]
8000665e:	58 09       	cp.w	r9,0
80006660:	cf 90       	breq	80006652 <quorem+0x106>
80006662:	8f 46       	st.w	r7[0x10],r6
80006664:	0a 9c       	mov	r12,r5
80006666:	2f ed       	sub	sp,-8
80006668:	d8 32       	popm	r0-r7,pc
8000666a:	d7 03       	nop

8000666c <_dtoa_r>:
8000666c:	d4 31       	pushm	r0-r7,lr
8000666e:	21 ad       	sub	sp,104
80006670:	fa c4 ff 74 	sub	r4,sp,-140
80006674:	18 97       	mov	r7,r12
80006676:	16 95       	mov	r5,r11
80006678:	68 2c       	ld.w	r12,r4[0x8]
8000667a:	50 c9       	stdsp	sp[0x30],r9
8000667c:	68 16       	ld.w	r6,r4[0x4]
8000667e:	68 09       	ld.w	r9,r4[0x0]
80006680:	50 e8       	stdsp	sp[0x38],r8
80006682:	14 94       	mov	r4,r10
80006684:	51 2c       	stdsp	sp[0x48],r12
80006686:	fa e5 00 08 	st.d	sp[8],r4
8000668a:	51 59       	stdsp	sp[0x54],r9
8000668c:	6e 95       	ld.w	r5,r7[0x24]
8000668e:	58 05       	cp.w	r5,0
80006690:	c0 91       	brne	800066a2 <_dtoa_r+0x36>
80006692:	31 0c       	mov	r12,16
80006694:	e0 a0 09 ea 	rcall	80007a68 <malloc>
80006698:	99 35       	st.w	r12[0xc],r5
8000669a:	8f 9c       	st.w	r7[0x24],r12
8000669c:	99 15       	st.w	r12[0x4],r5
8000669e:	99 25       	st.w	r12[0x8],r5
800066a0:	99 05       	st.w	r12[0x0],r5
800066a2:	6e 99       	ld.w	r9,r7[0x24]
800066a4:	72 08       	ld.w	r8,r9[0x0]
800066a6:	58 08       	cp.w	r8,0
800066a8:	c0 f0       	breq	800066c6 <_dtoa_r+0x5a>
800066aa:	72 1a       	ld.w	r10,r9[0x4]
800066ac:	91 1a       	st.w	r8[0x4],r10
800066ae:	30 1a       	mov	r10,1
800066b0:	72 19       	ld.w	r9,r9[0x4]
800066b2:	f4 09 09 49 	lsl	r9,r10,r9
800066b6:	10 9b       	mov	r11,r8
800066b8:	91 29       	st.w	r8[0x8],r9
800066ba:	0e 9c       	mov	r12,r7
800066bc:	e0 a0 0c b2 	rcall	80008020 <_Bfree>
800066c0:	6e 98       	ld.w	r8,r7[0x24]
800066c2:	30 09       	mov	r9,0
800066c4:	91 09       	st.w	r8[0x0],r9
800066c6:	40 28       	lddsp	r8,sp[0x8]
800066c8:	10 94       	mov	r4,r8
800066ca:	58 08       	cp.w	r8,0
800066cc:	c0 64       	brge	800066d8 <_dtoa_r+0x6c>
800066ce:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800066d2:	50 28       	stdsp	sp[0x8],r8
800066d4:	30 18       	mov	r8,1
800066d6:	c0 28       	rjmp	800066da <_dtoa_r+0x6e>
800066d8:	30 08       	mov	r8,0
800066da:	8d 08       	st.w	r6[0x0],r8
800066dc:	fc 1c 7f f0 	movh	r12,0x7ff0
800066e0:	40 26       	lddsp	r6,sp[0x8]
800066e2:	0c 98       	mov	r8,r6
800066e4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800066e8:	18 38       	cp.w	r8,r12
800066ea:	c2 01       	brne	8000672a <_dtoa_r+0xbe>
800066ec:	e0 68 27 0f 	mov	r8,9999
800066f0:	41 5b       	lddsp	r11,sp[0x54]
800066f2:	97 08       	st.w	r11[0x0],r8
800066f4:	40 3a       	lddsp	r10,sp[0xc]
800066f6:	58 0a       	cp.w	r10,0
800066f8:	c0 71       	brne	80006706 <_dtoa_r+0x9a>
800066fa:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800066fe:	c0 41       	brne	80006706 <_dtoa_r+0x9a>
80006700:	fe cc c6 14 	sub	r12,pc,-14828
80006704:	c0 38       	rjmp	8000670a <_dtoa_r+0x9e>
80006706:	fe cc c6 0e 	sub	r12,pc,-14834
8000670a:	41 29       	lddsp	r9,sp[0x48]
8000670c:	58 09       	cp.w	r9,0
8000670e:	e0 80 05 9a 	breq	80007242 <_dtoa_r+0xbd6>
80006712:	f8 c8 ff fd 	sub	r8,r12,-3
80006716:	f8 c9 ff f8 	sub	r9,r12,-8
8000671a:	11 8b       	ld.ub	r11,r8[0x0]
8000671c:	30 0a       	mov	r10,0
8000671e:	41 25       	lddsp	r5,sp[0x48]
80006720:	f4 0b 18 00 	cp.b	r11,r10
80006724:	f2 08 17 10 	movne	r8,r9
80006728:	c1 68       	rjmp	80006754 <_dtoa_r+0xe8>
8000672a:	fa ea 00 08 	ld.d	r10,sp[8]
8000672e:	30 08       	mov	r8,0
80006730:	fa eb 00 3c 	st.d	sp[60],r10
80006734:	30 09       	mov	r9,0
80006736:	e0 a0 13 80 	rcall	80008e36 <__avr32_f64_cmp_eq>
8000673a:	c1 00       	breq	8000675a <_dtoa_r+0xee>
8000673c:	30 18       	mov	r8,1
8000673e:	41 5a       	lddsp	r10,sp[0x54]
80006740:	95 08       	st.w	r10[0x0],r8
80006742:	fe cc c7 7a 	sub	r12,pc,-14470
80006746:	41 29       	lddsp	r9,sp[0x48]
80006748:	f8 08 00 08 	add	r8,r12,r8
8000674c:	58 09       	cp.w	r9,0
8000674e:	e0 80 05 7a 	breq	80007242 <_dtoa_r+0xbd6>
80006752:	12 95       	mov	r5,r9
80006754:	8b 08       	st.w	r5[0x0],r8
80006756:	e0 8f 05 76 	bral	80007242 <_dtoa_r+0xbd6>
8000675a:	fa c8 ff 9c 	sub	r8,sp,-100
8000675e:	fa c9 ff a0 	sub	r9,sp,-96
80006762:	fa ea 00 3c 	ld.d	r10,sp[60]
80006766:	0e 9c       	mov	r12,r7
80006768:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000676c:	e0 a0 0c ac 	rcall	800080c4 <__d2b>
80006770:	18 93       	mov	r3,r12
80006772:	58 05       	cp.w	r5,0
80006774:	c0 d0       	breq	8000678e <_dtoa_r+0x122>
80006776:	fa ea 00 3c 	ld.d	r10,sp[60]
8000677a:	30 04       	mov	r4,0
8000677c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006780:	ea c5 03 ff 	sub	r5,r5,1023
80006784:	10 9b       	mov	r11,r8
80006786:	51 74       	stdsp	sp[0x5c],r4
80006788:	ea 1b 3f f0 	orh	r11,0x3ff0
8000678c:	c2 58       	rjmp	800067d6 <_dtoa_r+0x16a>
8000678e:	41 88       	lddsp	r8,sp[0x60]
80006790:	41 9c       	lddsp	r12,sp[0x64]
80006792:	10 0c       	add	r12,r8
80006794:	f8 c5 fb ce 	sub	r5,r12,-1074
80006798:	e0 45 00 20 	cp.w	r5,32
8000679c:	e0 8a 00 0e 	brle	800067b8 <_dtoa_r+0x14c>
800067a0:	f8 cc fb ee 	sub	r12,r12,-1042
800067a4:	40 3b       	lddsp	r11,sp[0xc]
800067a6:	ea 08 11 40 	rsub	r8,r5,64
800067aa:	f6 0c 0a 4c 	lsr	r12,r11,r12
800067ae:	ec 08 09 46 	lsl	r6,r6,r8
800067b2:	0c 4c       	or	r12,r6
800067b4:	c0 78       	rjmp	800067c2 <_dtoa_r+0x156>
800067b6:	d7 03       	nop
800067b8:	ea 0c 11 20 	rsub	r12,r5,32
800067bc:	40 3a       	lddsp	r10,sp[0xc]
800067be:	f4 0c 09 4c 	lsl	r12,r10,r12
800067c2:	fe b0 ea 55 	rcall	80003c6c <__avr32_u32_to_f64>
800067c6:	fc 18 fe 10 	movh	r8,0xfe10
800067ca:	30 19       	mov	r9,1
800067cc:	ea c5 04 33 	sub	r5,r5,1075
800067d0:	f0 0b 00 0b 	add	r11,r8,r11
800067d4:	51 79       	stdsp	sp[0x5c],r9
800067d6:	30 08       	mov	r8,0
800067d8:	fc 19 3f f8 	movh	r9,0x3ff8
800067dc:	e0 a0 11 c2 	rcall	80008b60 <__avr32_f64_sub>
800067e0:	e0 68 43 61 	mov	r8,17249
800067e4:	ea 18 63 6f 	orh	r8,0x636f
800067e8:	e0 69 87 a7 	mov	r9,34727
800067ec:	ea 19 3f d2 	orh	r9,0x3fd2
800067f0:	fe b0 e9 54 	rcall	80003a98 <__avr32_f64_mul>
800067f4:	e0 68 c8 b3 	mov	r8,51379
800067f8:	ea 18 8b 60 	orh	r8,0x8b60
800067fc:	e0 69 8a 28 	mov	r9,35368
80006800:	ea 19 3f c6 	orh	r9,0x3fc6
80006804:	e0 a0 12 7c 	rcall	80008cfc <__avr32_f64_add>
80006808:	0a 9c       	mov	r12,r5
8000680a:	14 90       	mov	r0,r10
8000680c:	16 91       	mov	r1,r11
8000680e:	fe b0 ea 33 	rcall	80003c74 <__avr32_s32_to_f64>
80006812:	e0 68 79 fb 	mov	r8,31227
80006816:	ea 18 50 9f 	orh	r8,0x509f
8000681a:	e0 69 44 13 	mov	r9,17427
8000681e:	ea 19 3f d3 	orh	r9,0x3fd3
80006822:	fe b0 e9 3b 	rcall	80003a98 <__avr32_f64_mul>
80006826:	14 98       	mov	r8,r10
80006828:	16 99       	mov	r9,r11
8000682a:	00 9a       	mov	r10,r0
8000682c:	02 9b       	mov	r11,r1
8000682e:	e0 a0 12 67 	rcall	80008cfc <__avr32_f64_add>
80006832:	14 90       	mov	r0,r10
80006834:	16 91       	mov	r1,r11
80006836:	e0 a0 12 ed 	rcall	80008e10 <__avr32_f64_to_s32>
8000683a:	30 08       	mov	r8,0
8000683c:	18 96       	mov	r6,r12
8000683e:	30 09       	mov	r9,0
80006840:	00 9a       	mov	r10,r0
80006842:	02 9b       	mov	r11,r1
80006844:	e0 a0 13 40 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006848:	c0 c0       	breq	80006860 <_dtoa_r+0x1f4>
8000684a:	0c 9c       	mov	r12,r6
8000684c:	fe b0 ea 14 	rcall	80003c74 <__avr32_s32_to_f64>
80006850:	14 98       	mov	r8,r10
80006852:	16 99       	mov	r9,r11
80006854:	00 9a       	mov	r10,r0
80006856:	02 9b       	mov	r11,r1
80006858:	e0 a0 12 ef 	rcall	80008e36 <__avr32_f64_cmp_eq>
8000685c:	f7 b6 00 01 	subeq	r6,1
80006860:	59 66       	cp.w	r6,22
80006862:	e0 88 00 05 	brls	8000686c <_dtoa_r+0x200>
80006866:	30 18       	mov	r8,1
80006868:	51 48       	stdsp	sp[0x50],r8
8000686a:	c1 38       	rjmp	80006890 <_dtoa_r+0x224>
8000686c:	fe c8 c6 bc 	sub	r8,pc,-14660
80006870:	fa ea 00 3c 	ld.d	r10,sp[60]
80006874:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006878:	e0 a0 13 26 	rcall	80008ec4 <__avr32_f64_cmp_lt>
8000687c:	f9 b4 00 00 	moveq	r4,0
80006880:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006884:	f7 b6 01 01 	subne	r6,1
80006888:	f9 bc 01 00 	movne	r12,0
8000688c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006890:	41 90       	lddsp	r0,sp[0x64]
80006892:	20 10       	sub	r0,1
80006894:	0a 10       	sub	r0,r5
80006896:	c0 46       	brmi	8000689e <_dtoa_r+0x232>
80006898:	50 40       	stdsp	sp[0x10],r0
8000689a:	30 00       	mov	r0,0
8000689c:	c0 48       	rjmp	800068a4 <_dtoa_r+0x238>
8000689e:	30 0b       	mov	r11,0
800068a0:	5c 30       	neg	r0
800068a2:	50 4b       	stdsp	sp[0x10],r11
800068a4:	ec 02 11 00 	rsub	r2,r6,0
800068a8:	58 06       	cp.w	r6,0
800068aa:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800068ae:	f5 d6 e4 0a 	addge	r10,r10,r6
800068b2:	fb fa 4a 04 	st.wge	sp[0x10],r10
800068b6:	fb f6 4a 11 	st.wge	sp[0x44],r6
800068ba:	f9 b2 04 00 	movge	r2,0
800068be:	e1 d6 e5 10 	sublt	r0,r0,r6
800068c2:	f9 b9 05 00 	movlt	r9,0
800068c6:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800068ca:	40 c8       	lddsp	r8,sp[0x30]
800068cc:	58 98       	cp.w	r8,9
800068ce:	e0 8b 00 20 	brhi	8000690e <_dtoa_r+0x2a2>
800068d2:	58 58       	cp.w	r8,5
800068d4:	f9 b4 0a 01 	movle	r4,1
800068d8:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800068dc:	f7 b5 09 04 	subgt	r5,4
800068e0:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800068e4:	f9 b4 09 00 	movgt	r4,0
800068e8:	40 cc       	lddsp	r12,sp[0x30]
800068ea:	58 3c       	cp.w	r12,3
800068ec:	c2 d0       	breq	80006946 <_dtoa_r+0x2da>
800068ee:	e0 89 00 05 	brgt	800068f8 <_dtoa_r+0x28c>
800068f2:	58 2c       	cp.w	r12,2
800068f4:	c1 01       	brne	80006914 <_dtoa_r+0x2a8>
800068f6:	c1 88       	rjmp	80006926 <_dtoa_r+0x2ba>
800068f8:	40 cb       	lddsp	r11,sp[0x30]
800068fa:	58 4b       	cp.w	r11,4
800068fc:	c0 60       	breq	80006908 <_dtoa_r+0x29c>
800068fe:	58 5b       	cp.w	r11,5
80006900:	c0 a1       	brne	80006914 <_dtoa_r+0x2a8>
80006902:	30 1a       	mov	r10,1
80006904:	50 da       	stdsp	sp[0x34],r10
80006906:	c2 28       	rjmp	8000694a <_dtoa_r+0x2de>
80006908:	30 19       	mov	r9,1
8000690a:	50 d9       	stdsp	sp[0x34],r9
8000690c:	c0 f8       	rjmp	8000692a <_dtoa_r+0x2be>
8000690e:	30 08       	mov	r8,0
80006910:	30 14       	mov	r4,1
80006912:	50 c8       	stdsp	sp[0x30],r8
80006914:	3f f5       	mov	r5,-1
80006916:	30 1c       	mov	r12,1
80006918:	30 0b       	mov	r11,0
8000691a:	50 95       	stdsp	sp[0x24],r5
8000691c:	50 dc       	stdsp	sp[0x34],r12
8000691e:	0a 91       	mov	r1,r5
80006920:	31 28       	mov	r8,18
80006922:	50 eb       	stdsp	sp[0x38],r11
80006924:	c2 08       	rjmp	80006964 <_dtoa_r+0x2f8>
80006926:	30 0a       	mov	r10,0
80006928:	50 da       	stdsp	sp[0x34],r10
8000692a:	40 e9       	lddsp	r9,sp[0x38]
8000692c:	58 09       	cp.w	r9,0
8000692e:	e0 89 00 07 	brgt	8000693c <_dtoa_r+0x2d0>
80006932:	30 18       	mov	r8,1
80006934:	50 98       	stdsp	sp[0x24],r8
80006936:	10 91       	mov	r1,r8
80006938:	50 e8       	stdsp	sp[0x38],r8
8000693a:	c1 58       	rjmp	80006964 <_dtoa_r+0x2f8>
8000693c:	40 e5       	lddsp	r5,sp[0x38]
8000693e:	50 95       	stdsp	sp[0x24],r5
80006940:	0a 91       	mov	r1,r5
80006942:	0a 98       	mov	r8,r5
80006944:	c1 08       	rjmp	80006964 <_dtoa_r+0x2f8>
80006946:	30 0c       	mov	r12,0
80006948:	50 dc       	stdsp	sp[0x34],r12
8000694a:	40 eb       	lddsp	r11,sp[0x38]
8000694c:	ec 0b 00 0b 	add	r11,r6,r11
80006950:	50 9b       	stdsp	sp[0x24],r11
80006952:	16 98       	mov	r8,r11
80006954:	2f f8       	sub	r8,-1
80006956:	58 08       	cp.w	r8,0
80006958:	e0 89 00 05 	brgt	80006962 <_dtoa_r+0x2f6>
8000695c:	10 91       	mov	r1,r8
8000695e:	30 18       	mov	r8,1
80006960:	c0 28       	rjmp	80006964 <_dtoa_r+0x2f8>
80006962:	10 91       	mov	r1,r8
80006964:	30 09       	mov	r9,0
80006966:	6e 9a       	ld.w	r10,r7[0x24]
80006968:	95 19       	st.w	r10[0x4],r9
8000696a:	30 49       	mov	r9,4
8000696c:	c0 68       	rjmp	80006978 <_dtoa_r+0x30c>
8000696e:	d7 03       	nop
80006970:	6a 1a       	ld.w	r10,r5[0x4]
80006972:	a1 79       	lsl	r9,0x1
80006974:	2f fa       	sub	r10,-1
80006976:	8b 1a       	st.w	r5[0x4],r10
80006978:	6e 95       	ld.w	r5,r7[0x24]
8000697a:	f2 ca ff ec 	sub	r10,r9,-20
8000697e:	10 3a       	cp.w	r10,r8
80006980:	fe 98 ff f8 	brls	80006970 <_dtoa_r+0x304>
80006984:	6a 1b       	ld.w	r11,r5[0x4]
80006986:	0e 9c       	mov	r12,r7
80006988:	e0 a0 0b 66 	rcall	80008054 <_Balloc>
8000698c:	58 e1       	cp.w	r1,14
8000698e:	5f 88       	srls	r8
80006990:	8b 0c       	st.w	r5[0x0],r12
80006992:	f1 e4 00 04 	and	r4,r8,r4
80006996:	6e 98       	ld.w	r8,r7[0x24]
80006998:	70 08       	ld.w	r8,r8[0x0]
8000699a:	50 88       	stdsp	sp[0x20],r8
8000699c:	e0 80 01 82 	breq	80006ca0 <_dtoa_r+0x634>
800069a0:	58 06       	cp.w	r6,0
800069a2:	e0 8a 00 43 	brle	80006a28 <_dtoa_r+0x3bc>
800069a6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800069aa:	fe c8 c7 fa 	sub	r8,pc,-14342
800069ae:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800069b2:	fa e5 00 18 	st.d	sp[24],r4
800069b6:	ec 04 14 04 	asr	r4,r6,0x4
800069ba:	ed b4 00 04 	bld	r4,0x4
800069be:	c0 30       	breq	800069c4 <_dtoa_r+0x358>
800069c0:	30 25       	mov	r5,2
800069c2:	c1 08       	rjmp	800069e2 <_dtoa_r+0x376>
800069c4:	fe c8 c7 4c 	sub	r8,pc,-14516
800069c8:	f0 e8 00 20 	ld.d	r8,r8[32]
800069cc:	fa ea 00 3c 	ld.d	r10,sp[60]
800069d0:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800069d4:	e0 a0 12 ac 	rcall	80008f2c <__avr32_f64_div>
800069d8:	30 35       	mov	r5,3
800069da:	14 98       	mov	r8,r10
800069dc:	16 99       	mov	r9,r11
800069de:	fa e9 00 08 	st.d	sp[8],r8
800069e2:	fe cc c7 6a 	sub	r12,pc,-14486
800069e6:	50 a3       	stdsp	sp[0x28],r3
800069e8:	0c 93       	mov	r3,r6
800069ea:	18 96       	mov	r6,r12
800069ec:	c0 f8       	rjmp	80006a0a <_dtoa_r+0x39e>
800069ee:	fa ea 00 18 	ld.d	r10,sp[24]
800069f2:	ed b4 00 00 	bld	r4,0x0
800069f6:	c0 81       	brne	80006a06 <_dtoa_r+0x39a>
800069f8:	ec e8 00 00 	ld.d	r8,r6[0]
800069fc:	2f f5       	sub	r5,-1
800069fe:	fe b0 e8 4d 	rcall	80003a98 <__avr32_f64_mul>
80006a02:	fa eb 00 18 	st.d	sp[24],r10
80006a06:	a1 54       	asr	r4,0x1
80006a08:	2f 86       	sub	r6,-8
80006a0a:	58 04       	cp.w	r4,0
80006a0c:	cf 11       	brne	800069ee <_dtoa_r+0x382>
80006a0e:	fa e8 00 18 	ld.d	r8,sp[24]
80006a12:	fa ea 00 08 	ld.d	r10,sp[8]
80006a16:	06 96       	mov	r6,r3
80006a18:	e0 a0 12 8a 	rcall	80008f2c <__avr32_f64_div>
80006a1c:	40 a3       	lddsp	r3,sp[0x28]
80006a1e:	14 98       	mov	r8,r10
80006a20:	16 99       	mov	r9,r11
80006a22:	fa e9 00 08 	st.d	sp[8],r8
80006a26:	c2 f8       	rjmp	80006a84 <_dtoa_r+0x418>
80006a28:	ec 08 11 00 	rsub	r8,r6,0
80006a2c:	c0 31       	brne	80006a32 <_dtoa_r+0x3c6>
80006a2e:	30 25       	mov	r5,2
80006a30:	c2 a8       	rjmp	80006a84 <_dtoa_r+0x418>
80006a32:	fe cc c7 ba 	sub	r12,pc,-14406
80006a36:	f0 04 14 04 	asr	r4,r8,0x4
80006a3a:	50 1c       	stdsp	sp[0x4],r12
80006a3c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006a40:	fe c9 c8 90 	sub	r9,pc,-14192
80006a44:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a48:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006a4c:	fe b0 e8 26 	rcall	80003a98 <__avr32_f64_mul>
80006a50:	40 1c       	lddsp	r12,sp[0x4]
80006a52:	50 63       	stdsp	sp[0x18],r3
80006a54:	30 25       	mov	r5,2
80006a56:	0c 93       	mov	r3,r6
80006a58:	fa eb 00 08 	st.d	sp[8],r10
80006a5c:	18 96       	mov	r6,r12
80006a5e:	c0 f8       	rjmp	80006a7c <_dtoa_r+0x410>
80006a60:	fa ea 00 08 	ld.d	r10,sp[8]
80006a64:	ed b4 00 00 	bld	r4,0x0
80006a68:	c0 81       	brne	80006a78 <_dtoa_r+0x40c>
80006a6a:	ec e8 00 00 	ld.d	r8,r6[0]
80006a6e:	2f f5       	sub	r5,-1
80006a70:	fe b0 e8 14 	rcall	80003a98 <__avr32_f64_mul>
80006a74:	fa eb 00 08 	st.d	sp[8],r10
80006a78:	a1 54       	asr	r4,0x1
80006a7a:	2f 86       	sub	r6,-8
80006a7c:	58 04       	cp.w	r4,0
80006a7e:	cf 11       	brne	80006a60 <_dtoa_r+0x3f4>
80006a80:	06 96       	mov	r6,r3
80006a82:	40 63       	lddsp	r3,sp[0x18]
80006a84:	41 4a       	lddsp	r10,sp[0x50]
80006a86:	58 0a       	cp.w	r10,0
80006a88:	c2 a0       	breq	80006adc <_dtoa_r+0x470>
80006a8a:	fa e8 00 08 	ld.d	r8,sp[8]
80006a8e:	58 01       	cp.w	r1,0
80006a90:	5f 94       	srgt	r4
80006a92:	fa e9 00 18 	st.d	sp[24],r8
80006a96:	30 08       	mov	r8,0
80006a98:	fc 19 3f f0 	movh	r9,0x3ff0
80006a9c:	fa ea 00 18 	ld.d	r10,sp[24]
80006aa0:	e0 a0 12 12 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006aa4:	f9 bc 00 00 	moveq	r12,0
80006aa8:	f9 bc 01 01 	movne	r12,1
80006aac:	e9 ec 00 0c 	and	r12,r4,r12
80006ab0:	c1 60       	breq	80006adc <_dtoa_r+0x470>
80006ab2:	40 98       	lddsp	r8,sp[0x24]
80006ab4:	58 08       	cp.w	r8,0
80006ab6:	e0 8a 00 f1 	brle	80006c98 <_dtoa_r+0x62c>
80006aba:	30 08       	mov	r8,0
80006abc:	fc 19 40 24 	movh	r9,0x4024
80006ac0:	ec c4 00 01 	sub	r4,r6,1
80006ac4:	fa ea 00 18 	ld.d	r10,sp[24]
80006ac8:	2f f5       	sub	r5,-1
80006aca:	50 64       	stdsp	sp[0x18],r4
80006acc:	fe b0 e7 e6 	rcall	80003a98 <__avr32_f64_mul>
80006ad0:	40 94       	lddsp	r4,sp[0x24]
80006ad2:	14 98       	mov	r8,r10
80006ad4:	16 99       	mov	r9,r11
80006ad6:	fa e9 00 08 	st.d	sp[8],r8
80006ada:	c0 38       	rjmp	80006ae0 <_dtoa_r+0x474>
80006adc:	50 66       	stdsp	sp[0x18],r6
80006ade:	02 94       	mov	r4,r1
80006ae0:	0a 9c       	mov	r12,r5
80006ae2:	fe b0 e8 c9 	rcall	80003c74 <__avr32_s32_to_f64>
80006ae6:	fa e8 00 08 	ld.d	r8,sp[8]
80006aea:	fe b0 e7 d7 	rcall	80003a98 <__avr32_f64_mul>
80006aee:	30 08       	mov	r8,0
80006af0:	fc 19 40 1c 	movh	r9,0x401c
80006af4:	e0 a0 11 04 	rcall	80008cfc <__avr32_f64_add>
80006af8:	14 98       	mov	r8,r10
80006afa:	16 99       	mov	r9,r11
80006afc:	fa e9 00 28 	st.d	sp[40],r8
80006b00:	fc 18 fc c0 	movh	r8,0xfcc0
80006b04:	40 a5       	lddsp	r5,sp[0x28]
80006b06:	10 05       	add	r5,r8
80006b08:	50 a5       	stdsp	sp[0x28],r5
80006b0a:	58 04       	cp.w	r4,0
80006b0c:	c2 11       	brne	80006b4e <_dtoa_r+0x4e2>
80006b0e:	fa ea 00 08 	ld.d	r10,sp[8]
80006b12:	30 08       	mov	r8,0
80006b14:	fc 19 40 14 	movh	r9,0x4014
80006b18:	e0 a0 10 24 	rcall	80008b60 <__avr32_f64_sub>
80006b1c:	40 bc       	lddsp	r12,sp[0x2c]
80006b1e:	fa eb 00 08 	st.d	sp[8],r10
80006b22:	14 98       	mov	r8,r10
80006b24:	16 99       	mov	r9,r11
80006b26:	18 9a       	mov	r10,r12
80006b28:	0a 9b       	mov	r11,r5
80006b2a:	e0 a0 11 cd 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006b2e:	e0 81 02 54 	brne	80006fd6 <_dtoa_r+0x96a>
80006b32:	0a 98       	mov	r8,r5
80006b34:	40 b9       	lddsp	r9,sp[0x2c]
80006b36:	ee 18 80 00 	eorh	r8,0x8000
80006b3a:	fa ea 00 08 	ld.d	r10,sp[8]
80006b3e:	10 95       	mov	r5,r8
80006b40:	12 98       	mov	r8,r9
80006b42:	0a 99       	mov	r9,r5
80006b44:	e0 a0 11 c0 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006b48:	e0 81 02 3e 	brne	80006fc4 <_dtoa_r+0x958>
80006b4c:	ca 68       	rjmp	80006c98 <_dtoa_r+0x62c>
80006b4e:	fe c9 c9 9e 	sub	r9,pc,-13922
80006b52:	e8 c8 00 01 	sub	r8,r4,1
80006b56:	40 d5       	lddsp	r5,sp[0x34]
80006b58:	58 05       	cp.w	r5,0
80006b5a:	c4 f0       	breq	80006bf8 <_dtoa_r+0x58c>
80006b5c:	30 0c       	mov	r12,0
80006b5e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006b62:	51 3c       	stdsp	sp[0x4c],r12
80006b64:	30 0a       	mov	r10,0
80006b66:	fc 1b 3f e0 	movh	r11,0x3fe0
80006b6a:	e0 a0 11 e1 	rcall	80008f2c <__avr32_f64_div>
80006b6e:	fa e8 00 28 	ld.d	r8,sp[40]
80006b72:	40 85       	lddsp	r5,sp[0x20]
80006b74:	e0 a0 0f f6 	rcall	80008b60 <__avr32_f64_sub>
80006b78:	fa eb 00 28 	st.d	sp[40],r10
80006b7c:	fa ea 00 08 	ld.d	r10,sp[8]
80006b80:	e0 a0 11 48 	rcall	80008e10 <__avr32_f64_to_s32>
80006b84:	51 6c       	stdsp	sp[0x58],r12
80006b86:	fe b0 e8 77 	rcall	80003c74 <__avr32_s32_to_f64>
80006b8a:	14 98       	mov	r8,r10
80006b8c:	16 99       	mov	r9,r11
80006b8e:	fa ea 00 08 	ld.d	r10,sp[8]
80006b92:	e0 a0 0f e7 	rcall	80008b60 <__avr32_f64_sub>
80006b96:	fa eb 00 08 	st.d	sp[8],r10
80006b9a:	41 68       	lddsp	r8,sp[0x58]
80006b9c:	2d 08       	sub	r8,-48
80006b9e:	0a c8       	st.b	r5++,r8
80006ba0:	41 39       	lddsp	r9,sp[0x4c]
80006ba2:	2f f9       	sub	r9,-1
80006ba4:	51 39       	stdsp	sp[0x4c],r9
80006ba6:	fa e8 00 28 	ld.d	r8,sp[40]
80006baa:	e0 a0 11 8d 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006bae:	e0 81 03 39 	brne	80007220 <_dtoa_r+0xbb4>
80006bb2:	fa e8 00 08 	ld.d	r8,sp[8]
80006bb6:	30 0a       	mov	r10,0
80006bb8:	fc 1b 3f f0 	movh	r11,0x3ff0
80006bbc:	e0 a0 0f d2 	rcall	80008b60 <__avr32_f64_sub>
80006bc0:	fa e8 00 28 	ld.d	r8,sp[40]
80006bc4:	e0 a0 11 80 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006bc8:	fa ea 00 28 	ld.d	r10,sp[40]
80006bcc:	30 08       	mov	r8,0
80006bce:	fc 19 40 24 	movh	r9,0x4024
80006bd2:	e0 81 00 da 	brne	80006d86 <_dtoa_r+0x71a>
80006bd6:	41 3c       	lddsp	r12,sp[0x4c]
80006bd8:	08 3c       	cp.w	r12,r4
80006bda:	c5 f4       	brge	80006c98 <_dtoa_r+0x62c>
80006bdc:	fe b0 e7 5e 	rcall	80003a98 <__avr32_f64_mul>
80006be0:	30 08       	mov	r8,0
80006be2:	fa eb 00 28 	st.d	sp[40],r10
80006be6:	fc 19 40 24 	movh	r9,0x4024
80006bea:	fa ea 00 08 	ld.d	r10,sp[8]
80006bee:	fe b0 e7 55 	rcall	80003a98 <__avr32_f64_mul>
80006bf2:	fa eb 00 08 	st.d	sp[8],r10
80006bf6:	cc 3b       	rjmp	80006b7c <_dtoa_r+0x510>
80006bf8:	40 85       	lddsp	r5,sp[0x20]
80006bfa:	08 05       	add	r5,r4
80006bfc:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006c00:	51 35       	stdsp	sp[0x4c],r5
80006c02:	fa e8 00 28 	ld.d	r8,sp[40]
80006c06:	40 85       	lddsp	r5,sp[0x20]
80006c08:	fe b0 e7 48 	rcall	80003a98 <__avr32_f64_mul>
80006c0c:	fa eb 00 28 	st.d	sp[40],r10
80006c10:	fa ea 00 08 	ld.d	r10,sp[8]
80006c14:	e0 a0 10 fe 	rcall	80008e10 <__avr32_f64_to_s32>
80006c18:	51 6c       	stdsp	sp[0x58],r12
80006c1a:	fe b0 e8 2d 	rcall	80003c74 <__avr32_s32_to_f64>
80006c1e:	14 98       	mov	r8,r10
80006c20:	16 99       	mov	r9,r11
80006c22:	fa ea 00 08 	ld.d	r10,sp[8]
80006c26:	e0 a0 0f 9d 	rcall	80008b60 <__avr32_f64_sub>
80006c2a:	fa eb 00 08 	st.d	sp[8],r10
80006c2e:	41 68       	lddsp	r8,sp[0x58]
80006c30:	2d 08       	sub	r8,-48
80006c32:	0a c8       	st.b	r5++,r8
80006c34:	41 3c       	lddsp	r12,sp[0x4c]
80006c36:	18 35       	cp.w	r5,r12
80006c38:	c2 81       	brne	80006c88 <_dtoa_r+0x61c>
80006c3a:	30 08       	mov	r8,0
80006c3c:	fc 19 3f e0 	movh	r9,0x3fe0
80006c40:	fa ea 00 28 	ld.d	r10,sp[40]
80006c44:	e0 a0 10 5c 	rcall	80008cfc <__avr32_f64_add>
80006c48:	40 85       	lddsp	r5,sp[0x20]
80006c4a:	fa e8 00 08 	ld.d	r8,sp[8]
80006c4e:	08 05       	add	r5,r4
80006c50:	e0 a0 11 3a 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006c54:	e0 81 00 99 	brne	80006d86 <_dtoa_r+0x71a>
80006c58:	fa e8 00 28 	ld.d	r8,sp[40]
80006c5c:	30 0a       	mov	r10,0
80006c5e:	fc 1b 3f e0 	movh	r11,0x3fe0
80006c62:	e0 a0 0f 7f 	rcall	80008b60 <__avr32_f64_sub>
80006c66:	14 98       	mov	r8,r10
80006c68:	16 99       	mov	r9,r11
80006c6a:	fa ea 00 08 	ld.d	r10,sp[8]
80006c6e:	e0 a0 11 2b 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006c72:	c1 30       	breq	80006c98 <_dtoa_r+0x62c>
80006c74:	33 09       	mov	r9,48
80006c76:	0a 98       	mov	r8,r5
80006c78:	11 7a       	ld.ub	r10,--r8
80006c7a:	f2 0a 18 00 	cp.b	r10,r9
80006c7e:	e0 81 02 d1 	brne	80007220 <_dtoa_r+0xbb4>
80006c82:	10 95       	mov	r5,r8
80006c84:	cf 9b       	rjmp	80006c76 <_dtoa_r+0x60a>
80006c86:	d7 03       	nop
80006c88:	30 08       	mov	r8,0
80006c8a:	fc 19 40 24 	movh	r9,0x4024
80006c8e:	fe b0 e7 05 	rcall	80003a98 <__avr32_f64_mul>
80006c92:	fa eb 00 08 	st.d	sp[8],r10
80006c96:	cb db       	rjmp	80006c10 <_dtoa_r+0x5a4>
80006c98:	fa ea 00 3c 	ld.d	r10,sp[60]
80006c9c:	fa eb 00 08 	st.d	sp[8],r10
80006ca0:	58 e6       	cp.w	r6,14
80006ca2:	5f ab       	srle	r11
80006ca4:	41 8a       	lddsp	r10,sp[0x60]
80006ca6:	30 08       	mov	r8,0
80006ca8:	f4 09 11 ff 	rsub	r9,r10,-1
80006cac:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006cb0:	f0 09 18 00 	cp.b	r9,r8
80006cb4:	e0 80 00 82 	breq	80006db8 <_dtoa_r+0x74c>
80006cb8:	40 ea       	lddsp	r10,sp[0x38]
80006cba:	58 01       	cp.w	r1,0
80006cbc:	5f a9       	srle	r9
80006cbe:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006cc2:	fe ca cb 12 	sub	r10,pc,-13550
80006cc6:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006cca:	fa e5 00 10 	st.d	sp[16],r4
80006cce:	f0 09 18 00 	cp.b	r9,r8
80006cd2:	c1 40       	breq	80006cfa <_dtoa_r+0x68e>
80006cd4:	58 01       	cp.w	r1,0
80006cd6:	e0 81 01 77 	brne	80006fc4 <_dtoa_r+0x958>
80006cda:	30 08       	mov	r8,0
80006cdc:	fc 19 40 14 	movh	r9,0x4014
80006ce0:	08 9a       	mov	r10,r4
80006ce2:	0a 9b       	mov	r11,r5
80006ce4:	fe b0 e6 da 	rcall	80003a98 <__avr32_f64_mul>
80006ce8:	fa e8 00 08 	ld.d	r8,sp[8]
80006cec:	e0 a0 10 b8 	rcall	80008e5c <__avr32_f64_cmp_ge>
80006cf0:	e0 81 01 6a 	brne	80006fc4 <_dtoa_r+0x958>
80006cf4:	02 92       	mov	r2,r1
80006cf6:	e0 8f 01 72 	bral	80006fda <_dtoa_r+0x96e>
80006cfa:	40 85       	lddsp	r5,sp[0x20]
80006cfc:	30 14       	mov	r4,1
80006cfe:	fa e8 00 10 	ld.d	r8,sp[16]
80006d02:	fa ea 00 08 	ld.d	r10,sp[8]
80006d06:	e0 a0 11 13 	rcall	80008f2c <__avr32_f64_div>
80006d0a:	e0 a0 10 83 	rcall	80008e10 <__avr32_f64_to_s32>
80006d0e:	18 92       	mov	r2,r12
80006d10:	fe b0 e7 b2 	rcall	80003c74 <__avr32_s32_to_f64>
80006d14:	fa e8 00 10 	ld.d	r8,sp[16]
80006d18:	fe b0 e6 c0 	rcall	80003a98 <__avr32_f64_mul>
80006d1c:	14 98       	mov	r8,r10
80006d1e:	16 99       	mov	r9,r11
80006d20:	fa ea 00 08 	ld.d	r10,sp[8]
80006d24:	e0 a0 0f 1e 	rcall	80008b60 <__avr32_f64_sub>
80006d28:	fa eb 00 08 	st.d	sp[8],r10
80006d2c:	e4 c8 ff d0 	sub	r8,r2,-48
80006d30:	0a c8       	st.b	r5++,r8
80006d32:	fc 19 40 24 	movh	r9,0x4024
80006d36:	30 08       	mov	r8,0
80006d38:	02 34       	cp.w	r4,r1
80006d3a:	c3 31       	brne	80006da0 <_dtoa_r+0x734>
80006d3c:	fa e8 00 08 	ld.d	r8,sp[8]
80006d40:	e0 a0 0f de 	rcall	80008cfc <__avr32_f64_add>
80006d44:	16 91       	mov	r1,r11
80006d46:	14 90       	mov	r0,r10
80006d48:	14 98       	mov	r8,r10
80006d4a:	02 99       	mov	r9,r1
80006d4c:	fa ea 00 10 	ld.d	r10,sp[16]
80006d50:	e0 a0 10 ba 	rcall	80008ec4 <__avr32_f64_cmp_lt>
80006d54:	c1 a1       	brne	80006d88 <_dtoa_r+0x71c>
80006d56:	fa e8 00 10 	ld.d	r8,sp[16]
80006d5a:	00 9a       	mov	r10,r0
80006d5c:	02 9b       	mov	r11,r1
80006d5e:	e0 a0 10 6c 	rcall	80008e36 <__avr32_f64_cmp_eq>
80006d62:	e0 80 02 5e 	breq	8000721e <_dtoa_r+0xbb2>
80006d66:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006d6a:	c0 f1       	brne	80006d88 <_dtoa_r+0x71c>
80006d6c:	e0 8f 02 59 	bral	8000721e <_dtoa_r+0xbb2>
80006d70:	40 8a       	lddsp	r10,sp[0x20]
80006d72:	14 38       	cp.w	r8,r10
80006d74:	c0 30       	breq	80006d7a <_dtoa_r+0x70e>
80006d76:	10 95       	mov	r5,r8
80006d78:	c0 98       	rjmp	80006d8a <_dtoa_r+0x71e>
80006d7a:	33 08       	mov	r8,48
80006d7c:	40 89       	lddsp	r9,sp[0x20]
80006d7e:	2f f6       	sub	r6,-1
80006d80:	b2 88       	st.b	r9[0x0],r8
80006d82:	40 88       	lddsp	r8,sp[0x20]
80006d84:	c0 88       	rjmp	80006d94 <_dtoa_r+0x728>
80006d86:	40 66       	lddsp	r6,sp[0x18]
80006d88:	33 99       	mov	r9,57
80006d8a:	0a 98       	mov	r8,r5
80006d8c:	11 7a       	ld.ub	r10,--r8
80006d8e:	f2 0a 18 00 	cp.b	r10,r9
80006d92:	ce f0       	breq	80006d70 <_dtoa_r+0x704>
80006d94:	50 66       	stdsp	sp[0x18],r6
80006d96:	11 89       	ld.ub	r9,r8[0x0]
80006d98:	2f f9       	sub	r9,-1
80006d9a:	b0 89       	st.b	r8[0x0],r9
80006d9c:	e0 8f 02 42 	bral	80007220 <_dtoa_r+0xbb4>
80006da0:	fe b0 e6 7c 	rcall	80003a98 <__avr32_f64_mul>
80006da4:	2f f4       	sub	r4,-1
80006da6:	fa eb 00 08 	st.d	sp[8],r10
80006daa:	30 08       	mov	r8,0
80006dac:	30 09       	mov	r9,0
80006dae:	e0 a0 10 44 	rcall	80008e36 <__avr32_f64_cmp_eq>
80006db2:	ca 60       	breq	80006cfe <_dtoa_r+0x692>
80006db4:	e0 8f 02 35 	bral	8000721e <_dtoa_r+0xbb2>
80006db8:	40 d8       	lddsp	r8,sp[0x34]
80006dba:	58 08       	cp.w	r8,0
80006dbc:	c0 51       	brne	80006dc6 <_dtoa_r+0x75a>
80006dbe:	04 98       	mov	r8,r2
80006dc0:	00 95       	mov	r5,r0
80006dc2:	40 d4       	lddsp	r4,sp[0x34]
80006dc4:	c3 78       	rjmp	80006e32 <_dtoa_r+0x7c6>
80006dc6:	40 c5       	lddsp	r5,sp[0x30]
80006dc8:	58 15       	cp.w	r5,1
80006dca:	e0 89 00 0f 	brgt	80006de8 <_dtoa_r+0x77c>
80006dce:	41 74       	lddsp	r4,sp[0x5c]
80006dd0:	58 04       	cp.w	r4,0
80006dd2:	c0 40       	breq	80006dda <_dtoa_r+0x76e>
80006dd4:	f4 c9 fb cd 	sub	r9,r10,-1075
80006dd8:	c0 48       	rjmp	80006de0 <_dtoa_r+0x774>
80006dda:	41 99       	lddsp	r9,sp[0x64]
80006ddc:	f2 09 11 36 	rsub	r9,r9,54
80006de0:	04 98       	mov	r8,r2
80006de2:	00 95       	mov	r5,r0
80006de4:	c1 c8       	rjmp	80006e1c <_dtoa_r+0x7b0>
80006de6:	d7 03       	nop
80006de8:	e2 c8 00 01 	sub	r8,r1,1
80006dec:	58 01       	cp.w	r1,0
80006dee:	e0 05 17 40 	movge	r5,r0
80006df2:	e2 09 17 40 	movge	r9,r1
80006df6:	e1 d1 e5 15 	sublt	r5,r0,r1
80006dfa:	f9 b9 05 00 	movlt	r9,0
80006dfe:	10 32       	cp.w	r2,r8
80006e00:	e5 d8 e4 18 	subge	r8,r2,r8
80006e04:	f1 d2 e5 18 	sublt	r8,r8,r2
80006e08:	e5 d8 e5 02 	addlt	r2,r2,r8
80006e0c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006e10:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006e14:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006e18:	f9 b8 05 00 	movlt	r8,0
80006e1c:	40 4b       	lddsp	r11,sp[0x10]
80006e1e:	12 0b       	add	r11,r9
80006e20:	50 08       	stdsp	sp[0x0],r8
80006e22:	50 4b       	stdsp	sp[0x10],r11
80006e24:	12 00       	add	r0,r9
80006e26:	30 1b       	mov	r11,1
80006e28:	0e 9c       	mov	r12,r7
80006e2a:	e0 a0 0a c9 	rcall	800083bc <__i2b>
80006e2e:	40 08       	lddsp	r8,sp[0x0]
80006e30:	18 94       	mov	r4,r12
80006e32:	40 4a       	lddsp	r10,sp[0x10]
80006e34:	58 05       	cp.w	r5,0
80006e36:	5f 99       	srgt	r9
80006e38:	58 0a       	cp.w	r10,0
80006e3a:	5f 9a       	srgt	r10
80006e3c:	f5 e9 00 09 	and	r9,r10,r9
80006e40:	c0 80       	breq	80006e50 <_dtoa_r+0x7e4>
80006e42:	40 4c       	lddsp	r12,sp[0x10]
80006e44:	f8 05 0d 49 	min	r9,r12,r5
80006e48:	12 1c       	sub	r12,r9
80006e4a:	12 10       	sub	r0,r9
80006e4c:	50 4c       	stdsp	sp[0x10],r12
80006e4e:	12 15       	sub	r5,r9
80006e50:	58 02       	cp.w	r2,0
80006e52:	e0 8a 00 27 	brle	80006ea0 <_dtoa_r+0x834>
80006e56:	40 db       	lddsp	r11,sp[0x34]
80006e58:	58 0b       	cp.w	r11,0
80006e5a:	c1 d0       	breq	80006e94 <_dtoa_r+0x828>
80006e5c:	58 08       	cp.w	r8,0
80006e5e:	e0 8a 00 17 	brle	80006e8c <_dtoa_r+0x820>
80006e62:	10 9a       	mov	r10,r8
80006e64:	50 08       	stdsp	sp[0x0],r8
80006e66:	08 9b       	mov	r11,r4
80006e68:	0e 9c       	mov	r12,r7
80006e6a:	e0 a0 0a ef 	rcall	80008448 <__pow5mult>
80006e6e:	06 9a       	mov	r10,r3
80006e70:	18 9b       	mov	r11,r12
80006e72:	18 94       	mov	r4,r12
80006e74:	0e 9c       	mov	r12,r7
80006e76:	e0 a0 0a 23 	rcall	800082bc <__multiply>
80006e7a:	18 99       	mov	r9,r12
80006e7c:	06 9b       	mov	r11,r3
80006e7e:	50 19       	stdsp	sp[0x4],r9
80006e80:	0e 9c       	mov	r12,r7
80006e82:	e0 a0 08 cf 	rcall	80008020 <_Bfree>
80006e86:	40 19       	lddsp	r9,sp[0x4]
80006e88:	40 08       	lddsp	r8,sp[0x0]
80006e8a:	12 93       	mov	r3,r9
80006e8c:	e4 08 01 0a 	sub	r10,r2,r8
80006e90:	c0 80       	breq	80006ea0 <_dtoa_r+0x834>
80006e92:	c0 28       	rjmp	80006e96 <_dtoa_r+0x82a>
80006e94:	04 9a       	mov	r10,r2
80006e96:	06 9b       	mov	r11,r3
80006e98:	0e 9c       	mov	r12,r7
80006e9a:	e0 a0 0a d7 	rcall	80008448 <__pow5mult>
80006e9e:	18 93       	mov	r3,r12
80006ea0:	30 1b       	mov	r11,1
80006ea2:	0e 9c       	mov	r12,r7
80006ea4:	e0 a0 0a 8c 	rcall	800083bc <__i2b>
80006ea8:	41 1a       	lddsp	r10,sp[0x44]
80006eaa:	18 92       	mov	r2,r12
80006eac:	58 0a       	cp.w	r10,0
80006eae:	e0 8a 00 07 	brle	80006ebc <_dtoa_r+0x850>
80006eb2:	18 9b       	mov	r11,r12
80006eb4:	0e 9c       	mov	r12,r7
80006eb6:	e0 a0 0a c9 	rcall	80008448 <__pow5mult>
80006eba:	18 92       	mov	r2,r12
80006ebc:	40 c9       	lddsp	r9,sp[0x30]
80006ebe:	58 19       	cp.w	r9,1
80006ec0:	e0 89 00 14 	brgt	80006ee8 <_dtoa_r+0x87c>
80006ec4:	40 38       	lddsp	r8,sp[0xc]
80006ec6:	58 08       	cp.w	r8,0
80006ec8:	c1 01       	brne	80006ee8 <_dtoa_r+0x87c>
80006eca:	40 29       	lddsp	r9,sp[0x8]
80006ecc:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006ed0:	c0 c1       	brne	80006ee8 <_dtoa_r+0x87c>
80006ed2:	12 98       	mov	r8,r9
80006ed4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006ed8:	c0 80       	breq	80006ee8 <_dtoa_r+0x87c>
80006eda:	40 4c       	lddsp	r12,sp[0x10]
80006edc:	30 1b       	mov	r11,1
80006ede:	2f fc       	sub	r12,-1
80006ee0:	2f f0       	sub	r0,-1
80006ee2:	50 4c       	stdsp	sp[0x10],r12
80006ee4:	50 6b       	stdsp	sp[0x18],r11
80006ee6:	c0 38       	rjmp	80006eec <_dtoa_r+0x880>
80006ee8:	30 0a       	mov	r10,0
80006eea:	50 6a       	stdsp	sp[0x18],r10
80006eec:	41 19       	lddsp	r9,sp[0x44]
80006eee:	58 09       	cp.w	r9,0
80006ef0:	c0 31       	brne	80006ef6 <_dtoa_r+0x88a>
80006ef2:	30 1c       	mov	r12,1
80006ef4:	c0 98       	rjmp	80006f06 <_dtoa_r+0x89a>
80006ef6:	64 48       	ld.w	r8,r2[0x10]
80006ef8:	2f c8       	sub	r8,-4
80006efa:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006efe:	e0 a0 08 01 	rcall	80007f00 <__hi0bits>
80006f02:	f8 0c 11 20 	rsub	r12,r12,32
80006f06:	40 4b       	lddsp	r11,sp[0x10]
80006f08:	f8 0b 00 08 	add	r8,r12,r11
80006f0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006f10:	c0 c0       	breq	80006f28 <_dtoa_r+0x8bc>
80006f12:	f0 08 11 20 	rsub	r8,r8,32
80006f16:	58 48       	cp.w	r8,4
80006f18:	e0 8a 00 06 	brle	80006f24 <_dtoa_r+0x8b8>
80006f1c:	20 48       	sub	r8,4
80006f1e:	10 0b       	add	r11,r8
80006f20:	50 4b       	stdsp	sp[0x10],r11
80006f22:	c0 78       	rjmp	80006f30 <_dtoa_r+0x8c4>
80006f24:	58 48       	cp.w	r8,4
80006f26:	c0 70       	breq	80006f34 <_dtoa_r+0x8c8>
80006f28:	40 4a       	lddsp	r10,sp[0x10]
80006f2a:	2e 48       	sub	r8,-28
80006f2c:	10 0a       	add	r10,r8
80006f2e:	50 4a       	stdsp	sp[0x10],r10
80006f30:	10 00       	add	r0,r8
80006f32:	10 05       	add	r5,r8
80006f34:	58 00       	cp.w	r0,0
80006f36:	e0 8a 00 08 	brle	80006f46 <_dtoa_r+0x8da>
80006f3a:	06 9b       	mov	r11,r3
80006f3c:	00 9a       	mov	r10,r0
80006f3e:	0e 9c       	mov	r12,r7
80006f40:	e0 a0 09 7a 	rcall	80008234 <__lshift>
80006f44:	18 93       	mov	r3,r12
80006f46:	40 49       	lddsp	r9,sp[0x10]
80006f48:	58 09       	cp.w	r9,0
80006f4a:	e0 8a 00 08 	brle	80006f5a <_dtoa_r+0x8ee>
80006f4e:	04 9b       	mov	r11,r2
80006f50:	12 9a       	mov	r10,r9
80006f52:	0e 9c       	mov	r12,r7
80006f54:	e0 a0 09 70 	rcall	80008234 <__lshift>
80006f58:	18 92       	mov	r2,r12
80006f5a:	41 48       	lddsp	r8,sp[0x50]
80006f5c:	58 08       	cp.w	r8,0
80006f5e:	c1 b0       	breq	80006f94 <_dtoa_r+0x928>
80006f60:	04 9b       	mov	r11,r2
80006f62:	06 9c       	mov	r12,r3
80006f64:	e0 a0 08 45 	rcall	80007fee <__mcmp>
80006f68:	c1 64       	brge	80006f94 <_dtoa_r+0x928>
80006f6a:	06 9b       	mov	r11,r3
80006f6c:	30 09       	mov	r9,0
80006f6e:	30 aa       	mov	r10,10
80006f70:	0e 9c       	mov	r12,r7
80006f72:	e0 a0 0a 2d 	rcall	800083cc <__multadd>
80006f76:	20 16       	sub	r6,1
80006f78:	18 93       	mov	r3,r12
80006f7a:	40 dc       	lddsp	r12,sp[0x34]
80006f7c:	58 0c       	cp.w	r12,0
80006f7e:	c0 31       	brne	80006f84 <_dtoa_r+0x918>
80006f80:	40 91       	lddsp	r1,sp[0x24]
80006f82:	c0 98       	rjmp	80006f94 <_dtoa_r+0x928>
80006f84:	08 9b       	mov	r11,r4
80006f86:	40 91       	lddsp	r1,sp[0x24]
80006f88:	30 09       	mov	r9,0
80006f8a:	30 aa       	mov	r10,10
80006f8c:	0e 9c       	mov	r12,r7
80006f8e:	e0 a0 0a 1f 	rcall	800083cc <__multadd>
80006f92:	18 94       	mov	r4,r12
80006f94:	58 01       	cp.w	r1,0
80006f96:	5f a9       	srle	r9
80006f98:	40 cb       	lddsp	r11,sp[0x30]
80006f9a:	58 2b       	cp.w	r11,2
80006f9c:	5f 98       	srgt	r8
80006f9e:	f3 e8 00 08 	and	r8,r9,r8
80006fa2:	c2 50       	breq	80006fec <_dtoa_r+0x980>
80006fa4:	58 01       	cp.w	r1,0
80006fa6:	c1 11       	brne	80006fc8 <_dtoa_r+0x95c>
80006fa8:	04 9b       	mov	r11,r2
80006faa:	02 99       	mov	r9,r1
80006fac:	30 5a       	mov	r10,5
80006fae:	0e 9c       	mov	r12,r7
80006fb0:	e0 a0 0a 0e 	rcall	800083cc <__multadd>
80006fb4:	18 92       	mov	r2,r12
80006fb6:	18 9b       	mov	r11,r12
80006fb8:	06 9c       	mov	r12,r3
80006fba:	e0 a0 08 1a 	rcall	80007fee <__mcmp>
80006fbe:	e0 89 00 0f 	brgt	80006fdc <_dtoa_r+0x970>
80006fc2:	c0 38       	rjmp	80006fc8 <_dtoa_r+0x95c>
80006fc4:	30 02       	mov	r2,0
80006fc6:	04 94       	mov	r4,r2
80006fc8:	40 ea       	lddsp	r10,sp[0x38]
80006fca:	30 09       	mov	r9,0
80006fcc:	5c da       	com	r10
80006fce:	40 85       	lddsp	r5,sp[0x20]
80006fd0:	50 6a       	stdsp	sp[0x18],r10
80006fd2:	50 49       	stdsp	sp[0x10],r9
80006fd4:	c0 f9       	rjmp	800071f2 <_dtoa_r+0xb86>
80006fd6:	08 92       	mov	r2,r4
80006fd8:	40 66       	lddsp	r6,sp[0x18]
80006fda:	04 94       	mov	r4,r2
80006fdc:	2f f6       	sub	r6,-1
80006fde:	50 66       	stdsp	sp[0x18],r6
80006fe0:	33 18       	mov	r8,49
80006fe2:	40 85       	lddsp	r5,sp[0x20]
80006fe4:	0a c8       	st.b	r5++,r8
80006fe6:	30 08       	mov	r8,0
80006fe8:	50 48       	stdsp	sp[0x10],r8
80006fea:	c0 49       	rjmp	800071f2 <_dtoa_r+0xb86>
80006fec:	40 dc       	lddsp	r12,sp[0x34]
80006fee:	58 0c       	cp.w	r12,0
80006ff0:	e0 80 00 b5 	breq	8000715a <_dtoa_r+0xaee>
80006ff4:	58 05       	cp.w	r5,0
80006ff6:	e0 8a 00 08 	brle	80007006 <_dtoa_r+0x99a>
80006ffa:	08 9b       	mov	r11,r4
80006ffc:	0a 9a       	mov	r10,r5
80006ffe:	0e 9c       	mov	r12,r7
80007000:	e0 a0 09 1a 	rcall	80008234 <__lshift>
80007004:	18 94       	mov	r4,r12
80007006:	40 6b       	lddsp	r11,sp[0x18]
80007008:	58 0b       	cp.w	r11,0
8000700a:	c0 31       	brne	80007010 <_dtoa_r+0x9a4>
8000700c:	08 9c       	mov	r12,r4
8000700e:	c1 38       	rjmp	80007034 <_dtoa_r+0x9c8>
80007010:	68 1b       	ld.w	r11,r4[0x4]
80007012:	0e 9c       	mov	r12,r7
80007014:	e0 a0 08 20 	rcall	80008054 <_Balloc>
80007018:	68 4a       	ld.w	r10,r4[0x10]
8000701a:	18 95       	mov	r5,r12
8000701c:	e8 cb ff f4 	sub	r11,r4,-12
80007020:	2f ea       	sub	r10,-2
80007022:	2f 4c       	sub	r12,-12
80007024:	a3 6a       	lsl	r10,0x2
80007026:	fe b0 e8 3e 	rcall	800040a2 <memcpy>
8000702a:	0a 9b       	mov	r11,r5
8000702c:	30 1a       	mov	r10,1
8000702e:	0e 9c       	mov	r12,r7
80007030:	e0 a0 09 02 	rcall	80008234 <__lshift>
80007034:	50 44       	stdsp	sp[0x10],r4
80007036:	40 3a       	lddsp	r10,sp[0xc]
80007038:	30 19       	mov	r9,1
8000703a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000703e:	18 94       	mov	r4,r12
80007040:	50 da       	stdsp	sp[0x34],r10
80007042:	40 85       	lddsp	r5,sp[0x20]
80007044:	50 99       	stdsp	sp[0x24],r9
80007046:	50 26       	stdsp	sp[0x8],r6
80007048:	50 e1       	stdsp	sp[0x38],r1
8000704a:	04 9b       	mov	r11,r2
8000704c:	06 9c       	mov	r12,r3
8000704e:	fe b0 fa 7f 	rcall	8000654c <quorem>
80007052:	40 4b       	lddsp	r11,sp[0x10]
80007054:	f8 c0 ff d0 	sub	r0,r12,-48
80007058:	06 9c       	mov	r12,r3
8000705a:	e0 a0 07 ca 	rcall	80007fee <__mcmp>
8000705e:	08 9a       	mov	r10,r4
80007060:	50 6c       	stdsp	sp[0x18],r12
80007062:	04 9b       	mov	r11,r2
80007064:	0e 9c       	mov	r12,r7
80007066:	e0 a0 08 7f 	rcall	80008164 <__mdiff>
8000706a:	18 91       	mov	r1,r12
8000706c:	78 38       	ld.w	r8,r12[0xc]
8000706e:	58 08       	cp.w	r8,0
80007070:	c0 30       	breq	80007076 <_dtoa_r+0xa0a>
80007072:	30 16       	mov	r6,1
80007074:	c0 68       	rjmp	80007080 <_dtoa_r+0xa14>
80007076:	18 9b       	mov	r11,r12
80007078:	06 9c       	mov	r12,r3
8000707a:	e0 a0 07 ba 	rcall	80007fee <__mcmp>
8000707e:	18 96       	mov	r6,r12
80007080:	0e 9c       	mov	r12,r7
80007082:	02 9b       	mov	r11,r1
80007084:	e0 a0 07 ce 	rcall	80008020 <_Bfree>
80007088:	40 cc       	lddsp	r12,sp[0x30]
8000708a:	ed ec 10 08 	or	r8,r6,r12
8000708e:	c0 d1       	brne	800070a8 <_dtoa_r+0xa3c>
80007090:	40 db       	lddsp	r11,sp[0x34]
80007092:	58 0b       	cp.w	r11,0
80007094:	c0 a1       	brne	800070a8 <_dtoa_r+0xa3c>
80007096:	40 26       	lddsp	r6,sp[0x8]
80007098:	e0 40 00 39 	cp.w	r0,57
8000709c:	c3 00       	breq	800070fc <_dtoa_r+0xa90>
8000709e:	40 6a       	lddsp	r10,sp[0x18]
800070a0:	58 0a       	cp.w	r10,0
800070a2:	e0 89 00 24 	brgt	800070ea <_dtoa_r+0xa7e>
800070a6:	c2 f8       	rjmp	80007104 <_dtoa_r+0xa98>
800070a8:	40 69       	lddsp	r9,sp[0x18]
800070aa:	58 09       	cp.w	r9,0
800070ac:	c0 85       	brlt	800070bc <_dtoa_r+0xa50>
800070ae:	12 98       	mov	r8,r9
800070b0:	40 cc       	lddsp	r12,sp[0x30]
800070b2:	18 48       	or	r8,r12
800070b4:	c1 d1       	brne	800070ee <_dtoa_r+0xa82>
800070b6:	40 db       	lddsp	r11,sp[0x34]
800070b8:	58 0b       	cp.w	r11,0
800070ba:	c1 a1       	brne	800070ee <_dtoa_r+0xa82>
800070bc:	0c 99       	mov	r9,r6
800070be:	40 26       	lddsp	r6,sp[0x8]
800070c0:	58 09       	cp.w	r9,0
800070c2:	e0 8a 00 21 	brle	80007104 <_dtoa_r+0xa98>
800070c6:	06 9b       	mov	r11,r3
800070c8:	30 1a       	mov	r10,1
800070ca:	0e 9c       	mov	r12,r7
800070cc:	e0 a0 08 b4 	rcall	80008234 <__lshift>
800070d0:	04 9b       	mov	r11,r2
800070d2:	18 93       	mov	r3,r12
800070d4:	e0 a0 07 8d 	rcall	80007fee <__mcmp>
800070d8:	e0 89 00 06 	brgt	800070e4 <_dtoa_r+0xa78>
800070dc:	c1 41       	brne	80007104 <_dtoa_r+0xa98>
800070de:	ed b0 00 00 	bld	r0,0x0
800070e2:	c1 11       	brne	80007104 <_dtoa_r+0xa98>
800070e4:	e0 40 00 39 	cp.w	r0,57
800070e8:	c0 a0       	breq	800070fc <_dtoa_r+0xa90>
800070ea:	2f f0       	sub	r0,-1
800070ec:	c0 c8       	rjmp	80007104 <_dtoa_r+0xa98>
800070ee:	58 06       	cp.w	r6,0
800070f0:	e0 8a 00 0c 	brle	80007108 <_dtoa_r+0xa9c>
800070f4:	40 26       	lddsp	r6,sp[0x8]
800070f6:	e0 40 00 39 	cp.w	r0,57
800070fa:	c0 41       	brne	80007102 <_dtoa_r+0xa96>
800070fc:	33 98       	mov	r8,57
800070fe:	0a c8       	st.b	r5++,r8
80007100:	c6 78       	rjmp	800071ce <_dtoa_r+0xb62>
80007102:	2f f0       	sub	r0,-1
80007104:	0a c0       	st.b	r5++,r0
80007106:	c7 58       	rjmp	800071f0 <_dtoa_r+0xb84>
80007108:	0a c0       	st.b	r5++,r0
8000710a:	40 9a       	lddsp	r10,sp[0x24]
8000710c:	40 e9       	lddsp	r9,sp[0x38]
8000710e:	12 3a       	cp.w	r10,r9
80007110:	c4 30       	breq	80007196 <_dtoa_r+0xb2a>
80007112:	06 9b       	mov	r11,r3
80007114:	30 09       	mov	r9,0
80007116:	30 aa       	mov	r10,10
80007118:	0e 9c       	mov	r12,r7
8000711a:	e0 a0 09 59 	rcall	800083cc <__multadd>
8000711e:	40 48       	lddsp	r8,sp[0x10]
80007120:	18 93       	mov	r3,r12
80007122:	08 38       	cp.w	r8,r4
80007124:	c0 91       	brne	80007136 <_dtoa_r+0xaca>
80007126:	10 9b       	mov	r11,r8
80007128:	30 09       	mov	r9,0
8000712a:	30 aa       	mov	r10,10
8000712c:	0e 9c       	mov	r12,r7
8000712e:	e0 a0 09 4f 	rcall	800083cc <__multadd>
80007132:	50 4c       	stdsp	sp[0x10],r12
80007134:	c0 e8       	rjmp	80007150 <_dtoa_r+0xae4>
80007136:	40 4b       	lddsp	r11,sp[0x10]
80007138:	30 09       	mov	r9,0
8000713a:	30 aa       	mov	r10,10
8000713c:	0e 9c       	mov	r12,r7
8000713e:	e0 a0 09 47 	rcall	800083cc <__multadd>
80007142:	08 9b       	mov	r11,r4
80007144:	50 4c       	stdsp	sp[0x10],r12
80007146:	30 09       	mov	r9,0
80007148:	30 aa       	mov	r10,10
8000714a:	0e 9c       	mov	r12,r7
8000714c:	e0 a0 09 40 	rcall	800083cc <__multadd>
80007150:	18 94       	mov	r4,r12
80007152:	40 9c       	lddsp	r12,sp[0x24]
80007154:	2f fc       	sub	r12,-1
80007156:	50 9c       	stdsp	sp[0x24],r12
80007158:	c7 9b       	rjmp	8000704a <_dtoa_r+0x9de>
8000715a:	30 18       	mov	r8,1
8000715c:	06 90       	mov	r0,r3
8000715e:	40 85       	lddsp	r5,sp[0x20]
80007160:	08 93       	mov	r3,r4
80007162:	0c 94       	mov	r4,r6
80007164:	10 96       	mov	r6,r8
80007166:	04 9b       	mov	r11,r2
80007168:	00 9c       	mov	r12,r0
8000716a:	fe b0 f9 f1 	rcall	8000654c <quorem>
8000716e:	2d 0c       	sub	r12,-48
80007170:	0a cc       	st.b	r5++,r12
80007172:	02 36       	cp.w	r6,r1
80007174:	c0 a4       	brge	80007188 <_dtoa_r+0xb1c>
80007176:	00 9b       	mov	r11,r0
80007178:	30 09       	mov	r9,0
8000717a:	30 aa       	mov	r10,10
8000717c:	0e 9c       	mov	r12,r7
8000717e:	2f f6       	sub	r6,-1
80007180:	e0 a0 09 26 	rcall	800083cc <__multadd>
80007184:	18 90       	mov	r0,r12
80007186:	cf 0b       	rjmp	80007166 <_dtoa_r+0xafa>
80007188:	08 96       	mov	r6,r4
8000718a:	30 0b       	mov	r11,0
8000718c:	06 94       	mov	r4,r3
8000718e:	50 4b       	stdsp	sp[0x10],r11
80007190:	00 93       	mov	r3,r0
80007192:	18 90       	mov	r0,r12
80007194:	c0 28       	rjmp	80007198 <_dtoa_r+0xb2c>
80007196:	40 26       	lddsp	r6,sp[0x8]
80007198:	06 9b       	mov	r11,r3
8000719a:	30 1a       	mov	r10,1
8000719c:	0e 9c       	mov	r12,r7
8000719e:	e0 a0 08 4b 	rcall	80008234 <__lshift>
800071a2:	04 9b       	mov	r11,r2
800071a4:	18 93       	mov	r3,r12
800071a6:	e0 a0 07 24 	rcall	80007fee <__mcmp>
800071aa:	e0 89 00 12 	brgt	800071ce <_dtoa_r+0xb62>
800071ae:	c1 b1       	brne	800071e4 <_dtoa_r+0xb78>
800071b0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800071b4:	c0 d1       	brne	800071ce <_dtoa_r+0xb62>
800071b6:	c1 78       	rjmp	800071e4 <_dtoa_r+0xb78>
800071b8:	40 89       	lddsp	r9,sp[0x20]
800071ba:	12 38       	cp.w	r8,r9
800071bc:	c0 30       	breq	800071c2 <_dtoa_r+0xb56>
800071be:	10 95       	mov	r5,r8
800071c0:	c0 88       	rjmp	800071d0 <_dtoa_r+0xb64>
800071c2:	2f f6       	sub	r6,-1
800071c4:	50 66       	stdsp	sp[0x18],r6
800071c6:	33 18       	mov	r8,49
800071c8:	40 8c       	lddsp	r12,sp[0x20]
800071ca:	b8 88       	st.b	r12[0x0],r8
800071cc:	c1 38       	rjmp	800071f2 <_dtoa_r+0xb86>
800071ce:	33 9a       	mov	r10,57
800071d0:	0a 98       	mov	r8,r5
800071d2:	11 79       	ld.ub	r9,--r8
800071d4:	f4 09 18 00 	cp.b	r9,r10
800071d8:	cf 00       	breq	800071b8 <_dtoa_r+0xb4c>
800071da:	2f f9       	sub	r9,-1
800071dc:	b0 89       	st.b	r8[0x0],r9
800071de:	c0 98       	rjmp	800071f0 <_dtoa_r+0xb84>
800071e0:	10 95       	mov	r5,r8
800071e2:	c0 28       	rjmp	800071e6 <_dtoa_r+0xb7a>
800071e4:	33 09       	mov	r9,48
800071e6:	0a 98       	mov	r8,r5
800071e8:	11 7a       	ld.ub	r10,--r8
800071ea:	f2 0a 18 00 	cp.b	r10,r9
800071ee:	cf 90       	breq	800071e0 <_dtoa_r+0xb74>
800071f0:	50 66       	stdsp	sp[0x18],r6
800071f2:	04 9b       	mov	r11,r2
800071f4:	0e 9c       	mov	r12,r7
800071f6:	e0 a0 07 15 	rcall	80008020 <_Bfree>
800071fa:	58 04       	cp.w	r4,0
800071fc:	c1 20       	breq	80007220 <_dtoa_r+0xbb4>
800071fe:	40 4b       	lddsp	r11,sp[0x10]
80007200:	08 3b       	cp.w	r11,r4
80007202:	5f 19       	srne	r9
80007204:	58 0b       	cp.w	r11,0
80007206:	5f 18       	srne	r8
80007208:	f3 e8 00 08 	and	r8,r9,r8
8000720c:	c0 40       	breq	80007214 <_dtoa_r+0xba8>
8000720e:	0e 9c       	mov	r12,r7
80007210:	e0 a0 07 08 	rcall	80008020 <_Bfree>
80007214:	08 9b       	mov	r11,r4
80007216:	0e 9c       	mov	r12,r7
80007218:	e0 a0 07 04 	rcall	80008020 <_Bfree>
8000721c:	c0 28       	rjmp	80007220 <_dtoa_r+0xbb4>
8000721e:	50 66       	stdsp	sp[0x18],r6
80007220:	0e 9c       	mov	r12,r7
80007222:	06 9b       	mov	r11,r3
80007224:	e0 a0 06 fe 	rcall	80008020 <_Bfree>
80007228:	30 08       	mov	r8,0
8000722a:	aa 88       	st.b	r5[0x0],r8
8000722c:	40 68       	lddsp	r8,sp[0x18]
8000722e:	41 5a       	lddsp	r10,sp[0x54]
80007230:	2f f8       	sub	r8,-1
80007232:	41 29       	lddsp	r9,sp[0x48]
80007234:	95 08       	st.w	r10[0x0],r8
80007236:	40 8c       	lddsp	r12,sp[0x20]
80007238:	58 09       	cp.w	r9,0
8000723a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000723e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80007242:	2e 6d       	sub	sp,-104
80007244:	d8 32       	popm	r0-r7,pc
80007246:	d7 03       	nop

80007248 <_fflush_r>:
80007248:	d4 21       	pushm	r4-r7,lr
8000724a:	16 97       	mov	r7,r11
8000724c:	18 96       	mov	r6,r12
8000724e:	76 48       	ld.w	r8,r11[0x10]
80007250:	58 08       	cp.w	r8,0
80007252:	c7 f0       	breq	80007350 <_fflush_r+0x108>
80007254:	58 0c       	cp.w	r12,0
80007256:	c0 50       	breq	80007260 <_fflush_r+0x18>
80007258:	78 68       	ld.w	r8,r12[0x18]
8000725a:	58 08       	cp.w	r8,0
8000725c:	c0 21       	brne	80007260 <_fflush_r+0x18>
8000725e:	cc dc       	rcall	800073f8 <__sinit>
80007260:	fe c8 d1 64 	sub	r8,pc,-11932
80007264:	10 37       	cp.w	r7,r8
80007266:	c0 31       	brne	8000726c <_fflush_r+0x24>
80007268:	6c 07       	ld.w	r7,r6[0x0]
8000726a:	c0 c8       	rjmp	80007282 <_fflush_r+0x3a>
8000726c:	fe c8 d1 50 	sub	r8,pc,-11952
80007270:	10 37       	cp.w	r7,r8
80007272:	c0 31       	brne	80007278 <_fflush_r+0x30>
80007274:	6c 17       	ld.w	r7,r6[0x4]
80007276:	c0 68       	rjmp	80007282 <_fflush_r+0x3a>
80007278:	fe c8 d1 3c 	sub	r8,pc,-11972
8000727c:	10 37       	cp.w	r7,r8
8000727e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007282:	8e 6a       	ld.sh	r10,r7[0xc]
80007284:	14 98       	mov	r8,r10
80007286:	ed ba 00 03 	bld	r10,0x3
8000728a:	c4 20       	breq	8000730e <_fflush_r+0xc6>
8000728c:	ab ba       	sbr	r10,0xb
8000728e:	ae 6a       	st.h	r7[0xc],r10
80007290:	6e 18       	ld.w	r8,r7[0x4]
80007292:	58 08       	cp.w	r8,0
80007294:	e0 89 00 06 	brgt	800072a0 <_fflush_r+0x58>
80007298:	6f 08       	ld.w	r8,r7[0x40]
8000729a:	58 08       	cp.w	r8,0
8000729c:	e0 8a 00 5a 	brle	80007350 <_fflush_r+0x108>
800072a0:	6e b8       	ld.w	r8,r7[0x2c]
800072a2:	58 08       	cp.w	r8,0
800072a4:	c5 60       	breq	80007350 <_fflush_r+0x108>
800072a6:	e2 1a 10 00 	andl	r10,0x1000,COH
800072aa:	c0 30       	breq	800072b0 <_fflush_r+0x68>
800072ac:	6f 55       	ld.w	r5,r7[0x54]
800072ae:	c0 f8       	rjmp	800072cc <_fflush_r+0x84>
800072b0:	30 19       	mov	r9,1
800072b2:	6e 8b       	ld.w	r11,r7[0x20]
800072b4:	0c 9c       	mov	r12,r6
800072b6:	5d 18       	icall	r8
800072b8:	18 95       	mov	r5,r12
800072ba:	5b fc       	cp.w	r12,-1
800072bc:	c0 81       	brne	800072cc <_fflush_r+0x84>
800072be:	6c 38       	ld.w	r8,r6[0xc]
800072c0:	59 d8       	cp.w	r8,29
800072c2:	c4 70       	breq	80007350 <_fflush_r+0x108>
800072c4:	8e 68       	ld.sh	r8,r7[0xc]
800072c6:	a7 a8       	sbr	r8,0x6
800072c8:	ae 68       	st.h	r7[0xc],r8
800072ca:	d8 22       	popm	r4-r7,pc
800072cc:	8e 68       	ld.sh	r8,r7[0xc]
800072ce:	ed b8 00 02 	bld	r8,0x2
800072d2:	c0 91       	brne	800072e4 <_fflush_r+0x9c>
800072d4:	6e 18       	ld.w	r8,r7[0x4]
800072d6:	10 15       	sub	r5,r8
800072d8:	6e d8       	ld.w	r8,r7[0x34]
800072da:	58 08       	cp.w	r8,0
800072dc:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800072e0:	eb d8 e1 15 	subne	r5,r5,r8
800072e4:	6e b8       	ld.w	r8,r7[0x2c]
800072e6:	0c 9c       	mov	r12,r6
800072e8:	30 09       	mov	r9,0
800072ea:	0a 9a       	mov	r10,r5
800072ec:	6e 8b       	ld.w	r11,r7[0x20]
800072ee:	5d 18       	icall	r8
800072f0:	8e 68       	ld.sh	r8,r7[0xc]
800072f2:	0a 3c       	cp.w	r12,r5
800072f4:	c2 61       	brne	80007340 <_fflush_r+0xf8>
800072f6:	ab d8       	cbr	r8,0xb
800072f8:	30 0c       	mov	r12,0
800072fa:	6e 49       	ld.w	r9,r7[0x10]
800072fc:	ae 68       	st.h	r7[0xc],r8
800072fe:	8f 1c       	st.w	r7[0x4],r12
80007300:	8f 09       	st.w	r7[0x0],r9
80007302:	ed b8 00 0c 	bld	r8,0xc
80007306:	c2 51       	brne	80007350 <_fflush_r+0x108>
80007308:	ef 45 00 54 	st.w	r7[84],r5
8000730c:	d8 22       	popm	r4-r7,pc
8000730e:	6e 45       	ld.w	r5,r7[0x10]
80007310:	58 05       	cp.w	r5,0
80007312:	c1 f0       	breq	80007350 <_fflush_r+0x108>
80007314:	6e 04       	ld.w	r4,r7[0x0]
80007316:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000731a:	8f 05       	st.w	r7[0x0],r5
8000731c:	f9 b8 01 00 	movne	r8,0
80007320:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007324:	0a 14       	sub	r4,r5
80007326:	8f 28       	st.w	r7[0x8],r8
80007328:	c1 18       	rjmp	8000734a <_fflush_r+0x102>
8000732a:	08 99       	mov	r9,r4
8000732c:	0a 9a       	mov	r10,r5
8000732e:	6e a8       	ld.w	r8,r7[0x28]
80007330:	6e 8b       	ld.w	r11,r7[0x20]
80007332:	0c 9c       	mov	r12,r6
80007334:	5d 18       	icall	r8
80007336:	18 14       	sub	r4,r12
80007338:	58 0c       	cp.w	r12,0
8000733a:	e0 89 00 07 	brgt	80007348 <_fflush_r+0x100>
8000733e:	8e 68       	ld.sh	r8,r7[0xc]
80007340:	a7 a8       	sbr	r8,0x6
80007342:	3f fc       	mov	r12,-1
80007344:	ae 68       	st.h	r7[0xc],r8
80007346:	d8 22       	popm	r4-r7,pc
80007348:	18 05       	add	r5,r12
8000734a:	58 04       	cp.w	r4,0
8000734c:	fe 99 ff ef 	brgt	8000732a <_fflush_r+0xe2>
80007350:	d8 2a       	popm	r4-r7,pc,r12=0
80007352:	d7 03       	nop

80007354 <__sfp_lock_acquire>:
80007354:	5e fc       	retal	r12

80007356 <__sfp_lock_release>:
80007356:	5e fc       	retal	r12

80007358 <_cleanup_r>:
80007358:	d4 01       	pushm	lr
8000735a:	fe cb e8 7a 	sub	r11,pc,-6022
8000735e:	e0 a0 02 fd 	rcall	80007958 <_fwalk>
80007362:	d8 02       	popm	pc

80007364 <__sfmoreglue>:
80007364:	d4 21       	pushm	r4-r7,lr
80007366:	16 95       	mov	r5,r11
80007368:	f6 06 10 5c 	mul	r6,r11,92
8000736c:	ec cb ff f4 	sub	r11,r6,-12
80007370:	e0 a0 03 84 	rcall	80007a78 <_malloc_r>
80007374:	18 97       	mov	r7,r12
80007376:	c0 90       	breq	80007388 <__sfmoreglue+0x24>
80007378:	99 15       	st.w	r12[0x4],r5
8000737a:	30 0b       	mov	r11,0
8000737c:	2f 4c       	sub	r12,-12
8000737e:	0c 9a       	mov	r10,r6
80007380:	8f 2c       	st.w	r7[0x8],r12
80007382:	8f 0b       	st.w	r7[0x0],r11
80007384:	fe b0 e7 33 	rcall	800041ea <memset>
80007388:	0e 9c       	mov	r12,r7
8000738a:	d8 22       	popm	r4-r7,pc

8000738c <__sfp>:
8000738c:	d4 21       	pushm	r4-r7,lr
8000738e:	fe c8 d2 2e 	sub	r8,pc,-11730
80007392:	18 96       	mov	r6,r12
80007394:	70 07       	ld.w	r7,r8[0x0]
80007396:	6e 68       	ld.w	r8,r7[0x18]
80007398:	58 08       	cp.w	r8,0
8000739a:	c0 31       	brne	800073a0 <__sfp+0x14>
8000739c:	0e 9c       	mov	r12,r7
8000739e:	c2 dc       	rcall	800073f8 <__sinit>
800073a0:	ee c7 ff 28 	sub	r7,r7,-216
800073a4:	30 05       	mov	r5,0
800073a6:	6e 2c       	ld.w	r12,r7[0x8]
800073a8:	6e 18       	ld.w	r8,r7[0x4]
800073aa:	c0 68       	rjmp	800073b6 <__sfp+0x2a>
800073ac:	98 69       	ld.sh	r9,r12[0xc]
800073ae:	ea 09 19 00 	cp.h	r9,r5
800073b2:	c1 10       	breq	800073d4 <__sfp+0x48>
800073b4:	2a 4c       	sub	r12,-92
800073b6:	20 18       	sub	r8,1
800073b8:	cf a7       	brpl	800073ac <__sfp+0x20>
800073ba:	6e 08       	ld.w	r8,r7[0x0]
800073bc:	58 08       	cp.w	r8,0
800073be:	c0 61       	brne	800073ca <__sfp+0x3e>
800073c0:	30 4b       	mov	r11,4
800073c2:	0c 9c       	mov	r12,r6
800073c4:	cd 0f       	rcall	80007364 <__sfmoreglue>
800073c6:	8f 0c       	st.w	r7[0x0],r12
800073c8:	c0 30       	breq	800073ce <__sfp+0x42>
800073ca:	6e 07       	ld.w	r7,r7[0x0]
800073cc:	ce db       	rjmp	800073a6 <__sfp+0x1a>
800073ce:	30 c8       	mov	r8,12
800073d0:	8d 38       	st.w	r6[0xc],r8
800073d2:	d8 22       	popm	r4-r7,pc
800073d4:	30 08       	mov	r8,0
800073d6:	f9 48 00 4c 	st.w	r12[76],r8
800073da:	99 08       	st.w	r12[0x0],r8
800073dc:	99 28       	st.w	r12[0x8],r8
800073de:	99 18       	st.w	r12[0x4],r8
800073e0:	99 48       	st.w	r12[0x10],r8
800073e2:	99 58       	st.w	r12[0x14],r8
800073e4:	99 68       	st.w	r12[0x18],r8
800073e6:	99 d8       	st.w	r12[0x34],r8
800073e8:	99 e8       	st.w	r12[0x38],r8
800073ea:	f9 48 00 48 	st.w	r12[72],r8
800073ee:	3f f8       	mov	r8,-1
800073f0:	b8 78       	st.h	r12[0xe],r8
800073f2:	30 18       	mov	r8,1
800073f4:	b8 68       	st.h	r12[0xc],r8
800073f6:	d8 22       	popm	r4-r7,pc

800073f8 <__sinit>:
800073f8:	d4 21       	pushm	r4-r7,lr
800073fa:	18 96       	mov	r6,r12
800073fc:	78 67       	ld.w	r7,r12[0x18]
800073fe:	58 07       	cp.w	r7,0
80007400:	c4 91       	brne	80007492 <__sinit+0x9a>
80007402:	fe c8 00 aa 	sub	r8,pc,170
80007406:	30 15       	mov	r5,1
80007408:	99 a8       	st.w	r12[0x28],r8
8000740a:	f9 47 00 d8 	st.w	r12[216],r7
8000740e:	f9 47 00 dc 	st.w	r12[220],r7
80007412:	f9 47 00 e0 	st.w	r12[224],r7
80007416:	99 65       	st.w	r12[0x18],r5
80007418:	cb af       	rcall	8000738c <__sfp>
8000741a:	8d 0c       	st.w	r6[0x0],r12
8000741c:	0c 9c       	mov	r12,r6
8000741e:	cb 7f       	rcall	8000738c <__sfp>
80007420:	8d 1c       	st.w	r6[0x4],r12
80007422:	0c 9c       	mov	r12,r6
80007424:	cb 4f       	rcall	8000738c <__sfp>
80007426:	6c 09       	ld.w	r9,r6[0x0]
80007428:	30 48       	mov	r8,4
8000742a:	93 07       	st.w	r9[0x0],r7
8000742c:	b2 68       	st.h	r9[0xc],r8
8000742e:	93 17       	st.w	r9[0x4],r7
80007430:	93 27       	st.w	r9[0x8],r7
80007432:	6c 18       	ld.w	r8,r6[0x4]
80007434:	b2 77       	st.h	r9[0xe],r7
80007436:	93 47       	st.w	r9[0x10],r7
80007438:	93 57       	st.w	r9[0x14],r7
8000743a:	93 67       	st.w	r9[0x18],r7
8000743c:	93 89       	st.w	r9[0x20],r9
8000743e:	91 07       	st.w	r8[0x0],r7
80007440:	91 17       	st.w	r8[0x4],r7
80007442:	91 27       	st.w	r8[0x8],r7
80007444:	fe ce eb f4 	sub	lr,pc,-5132
80007448:	fe cb ec 24 	sub	r11,pc,-5084
8000744c:	93 9e       	st.w	r9[0x24],lr
8000744e:	93 ab       	st.w	r9[0x28],r11
80007450:	fe ca ec 4c 	sub	r10,pc,-5044
80007454:	fe c4 ec 58 	sub	r4,pc,-5032
80007458:	93 ba       	st.w	r9[0x2c],r10
8000745a:	93 c4       	st.w	r9[0x30],r4
8000745c:	30 99       	mov	r9,9
8000745e:	b0 69       	st.h	r8[0xc],r9
80007460:	b0 75       	st.h	r8[0xe],r5
80007462:	91 c4       	st.w	r8[0x30],r4
80007464:	91 47       	st.w	r8[0x10],r7
80007466:	91 57       	st.w	r8[0x14],r7
80007468:	91 67       	st.w	r8[0x18],r7
8000746a:	91 88       	st.w	r8[0x20],r8
8000746c:	91 9e       	st.w	r8[0x24],lr
8000746e:	91 ab       	st.w	r8[0x28],r11
80007470:	91 ba       	st.w	r8[0x2c],r10
80007472:	8d 2c       	st.w	r6[0x8],r12
80007474:	31 28       	mov	r8,18
80007476:	99 07       	st.w	r12[0x0],r7
80007478:	b8 68       	st.h	r12[0xc],r8
8000747a:	99 17       	st.w	r12[0x4],r7
8000747c:	99 27       	st.w	r12[0x8],r7
8000747e:	30 28       	mov	r8,2
80007480:	b8 78       	st.h	r12[0xe],r8
80007482:	99 c4       	st.w	r12[0x30],r4
80007484:	99 67       	st.w	r12[0x18],r7
80007486:	99 9e       	st.w	r12[0x24],lr
80007488:	99 ab       	st.w	r12[0x28],r11
8000748a:	99 ba       	st.w	r12[0x2c],r10
8000748c:	99 47       	st.w	r12[0x10],r7
8000748e:	99 57       	st.w	r12[0x14],r7
80007490:	99 8c       	st.w	r12[0x20],r12
80007492:	d8 22       	popm	r4-r7,pc

80007494 <_malloc_trim_r>:
80007494:	d4 21       	pushm	r4-r7,lr
80007496:	16 95       	mov	r5,r11
80007498:	18 97       	mov	r7,r12
8000749a:	e0 a0 05 31 	rcall	80007efc <__malloc_lock>
8000749e:	e0 64 01 1c 	mov	r4,284
800074a2:	68 28       	ld.w	r8,r4[0x8]
800074a4:	70 16       	ld.w	r6,r8[0x4]
800074a6:	e0 16 ff fc 	andl	r6,0xfffc
800074aa:	ec c8 ff 91 	sub	r8,r6,-111
800074ae:	f0 05 01 05 	sub	r5,r8,r5
800074b2:	e0 15 ff 80 	andl	r5,0xff80
800074b6:	ea c5 00 80 	sub	r5,r5,128
800074ba:	e0 45 00 7f 	cp.w	r5,127
800074be:	e0 8a 00 25 	brle	80007508 <_malloc_trim_r+0x74>
800074c2:	30 0b       	mov	r11,0
800074c4:	0e 9c       	mov	r12,r7
800074c6:	e0 a0 09 8b 	rcall	800087dc <_sbrk_r>
800074ca:	68 28       	ld.w	r8,r4[0x8]
800074cc:	0c 08       	add	r8,r6
800074ce:	10 3c       	cp.w	r12,r8
800074d0:	c1 c1       	brne	80007508 <_malloc_trim_r+0x74>
800074d2:	ea 0b 11 00 	rsub	r11,r5,0
800074d6:	0e 9c       	mov	r12,r7
800074d8:	e0 a0 09 82 	rcall	800087dc <_sbrk_r>
800074dc:	5b fc       	cp.w	r12,-1
800074de:	c1 91       	brne	80007510 <_malloc_trim_r+0x7c>
800074e0:	30 0b       	mov	r11,0
800074e2:	0e 9c       	mov	r12,r7
800074e4:	e0 a0 09 7c 	rcall	800087dc <_sbrk_r>
800074e8:	68 28       	ld.w	r8,r4[0x8]
800074ea:	f8 08 01 09 	sub	r9,r12,r8
800074ee:	58 f9       	cp.w	r9,15
800074f0:	e0 8a 00 0c 	brle	80007508 <_malloc_trim_r+0x74>
800074f4:	a1 a9       	sbr	r9,0x0
800074f6:	91 19       	st.w	r8[0x4],r9
800074f8:	e0 68 05 28 	mov	r8,1320
800074fc:	70 09       	ld.w	r9,r8[0x0]
800074fe:	e0 68 06 48 	mov	r8,1608
80007502:	f8 09 01 09 	sub	r9,r12,r9
80007506:	91 09       	st.w	r8[0x0],r9
80007508:	0e 9c       	mov	r12,r7
8000750a:	e0 a0 04 fa 	rcall	80007efe <__malloc_unlock>
8000750e:	d8 2a       	popm	r4-r7,pc,r12=0
80007510:	68 28       	ld.w	r8,r4[0x8]
80007512:	0a 16       	sub	r6,r5
80007514:	a1 a6       	sbr	r6,0x0
80007516:	91 16       	st.w	r8[0x4],r6
80007518:	e0 68 06 48 	mov	r8,1608
8000751c:	70 09       	ld.w	r9,r8[0x0]
8000751e:	0a 19       	sub	r9,r5
80007520:	0e 9c       	mov	r12,r7
80007522:	91 09       	st.w	r8[0x0],r9
80007524:	e0 a0 04 ed 	rcall	80007efe <__malloc_unlock>
80007528:	da 2a       	popm	r4-r7,pc,r12=1
8000752a:	d7 03       	nop

8000752c <_free_r>:
8000752c:	d4 21       	pushm	r4-r7,lr
8000752e:	16 96       	mov	r6,r11
80007530:	18 97       	mov	r7,r12
80007532:	58 0b       	cp.w	r11,0
80007534:	e0 80 00 c0 	breq	800076b4 <_free_r+0x188>
80007538:	e0 a0 04 e2 	rcall	80007efc <__malloc_lock>
8000753c:	20 86       	sub	r6,8
8000753e:	e0 6a 01 1c 	mov	r10,284
80007542:	6c 18       	ld.w	r8,r6[0x4]
80007544:	74 2e       	ld.w	lr,r10[0x8]
80007546:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000754a:	a1 c8       	cbr	r8,0x0
8000754c:	ec 08 00 09 	add	r9,r6,r8
80007550:	72 1b       	ld.w	r11,r9[0x4]
80007552:	e0 1b ff fc 	andl	r11,0xfffc
80007556:	1c 39       	cp.w	r9,lr
80007558:	c1 e1       	brne	80007594 <_free_r+0x68>
8000755a:	f6 08 00 08 	add	r8,r11,r8
8000755e:	58 0c       	cp.w	r12,0
80007560:	c0 81       	brne	80007570 <_free_r+0x44>
80007562:	6c 09       	ld.w	r9,r6[0x0]
80007564:	12 16       	sub	r6,r9
80007566:	12 08       	add	r8,r9
80007568:	6c 3b       	ld.w	r11,r6[0xc]
8000756a:	6c 29       	ld.w	r9,r6[0x8]
8000756c:	97 29       	st.w	r11[0x8],r9
8000756e:	93 3b       	st.w	r9[0xc],r11
80007570:	10 99       	mov	r9,r8
80007572:	95 26       	st.w	r10[0x8],r6
80007574:	a1 a9       	sbr	r9,0x0
80007576:	8d 19       	st.w	r6[0x4],r9
80007578:	e0 69 05 24 	mov	r9,1316
8000757c:	72 09       	ld.w	r9,r9[0x0]
8000757e:	12 38       	cp.w	r8,r9
80007580:	c0 63       	brcs	8000758c <_free_r+0x60>
80007582:	e0 68 06 44 	mov	r8,1604
80007586:	0e 9c       	mov	r12,r7
80007588:	70 0b       	ld.w	r11,r8[0x0]
8000758a:	c8 5f       	rcall	80007494 <_malloc_trim_r>
8000758c:	0e 9c       	mov	r12,r7
8000758e:	e0 a0 04 b8 	rcall	80007efe <__malloc_unlock>
80007592:	d8 22       	popm	r4-r7,pc
80007594:	93 1b       	st.w	r9[0x4],r11
80007596:	58 0c       	cp.w	r12,0
80007598:	c0 30       	breq	8000759e <_free_r+0x72>
8000759a:	30 0c       	mov	r12,0
8000759c:	c1 08       	rjmp	800075bc <_free_r+0x90>
8000759e:	6c 0e       	ld.w	lr,r6[0x0]
800075a0:	f4 c5 ff f8 	sub	r5,r10,-8
800075a4:	1c 16       	sub	r6,lr
800075a6:	1c 08       	add	r8,lr
800075a8:	6c 2e       	ld.w	lr,r6[0x8]
800075aa:	0a 3e       	cp.w	lr,r5
800075ac:	f9 bc 00 01 	moveq	r12,1
800075b0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800075b4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800075b8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800075bc:	f2 0b 00 0e 	add	lr,r9,r11
800075c0:	7c 1e       	ld.w	lr,lr[0x4]
800075c2:	ed be 00 00 	bld	lr,0x0
800075c6:	c1 40       	breq	800075ee <_free_r+0xc2>
800075c8:	16 08       	add	r8,r11
800075ca:	58 0c       	cp.w	r12,0
800075cc:	c0 d1       	brne	800075e6 <_free_r+0xba>
800075ce:	e0 6e 01 1c 	mov	lr,284
800075d2:	72 2b       	ld.w	r11,r9[0x8]
800075d4:	2f 8e       	sub	lr,-8
800075d6:	1c 3b       	cp.w	r11,lr
800075d8:	c0 71       	brne	800075e6 <_free_r+0xba>
800075da:	97 36       	st.w	r11[0xc],r6
800075dc:	97 26       	st.w	r11[0x8],r6
800075de:	8d 2b       	st.w	r6[0x8],r11
800075e0:	8d 3b       	st.w	r6[0xc],r11
800075e2:	30 1c       	mov	r12,1
800075e4:	c0 58       	rjmp	800075ee <_free_r+0xc2>
800075e6:	72 2b       	ld.w	r11,r9[0x8]
800075e8:	72 39       	ld.w	r9,r9[0xc]
800075ea:	93 2b       	st.w	r9[0x8],r11
800075ec:	97 39       	st.w	r11[0xc],r9
800075ee:	10 99       	mov	r9,r8
800075f0:	ec 08 09 08 	st.w	r6[r8],r8
800075f4:	a1 a9       	sbr	r9,0x0
800075f6:	8d 19       	st.w	r6[0x4],r9
800075f8:	58 0c       	cp.w	r12,0
800075fa:	c5 a1       	brne	800076ae <_free_r+0x182>
800075fc:	e0 48 01 ff 	cp.w	r8,511
80007600:	e0 8b 00 13 	brhi	80007626 <_free_r+0xfa>
80007604:	a3 98       	lsr	r8,0x3
80007606:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000760a:	72 2b       	ld.w	r11,r9[0x8]
8000760c:	8d 39       	st.w	r6[0xc],r9
8000760e:	8d 2b       	st.w	r6[0x8],r11
80007610:	97 36       	st.w	r11[0xc],r6
80007612:	93 26       	st.w	r9[0x8],r6
80007614:	a3 48       	asr	r8,0x2
80007616:	74 19       	ld.w	r9,r10[0x4]
80007618:	30 1b       	mov	r11,1
8000761a:	f6 08 09 48 	lsl	r8,r11,r8
8000761e:	f3 e8 10 08 	or	r8,r9,r8
80007622:	95 18       	st.w	r10[0x4],r8
80007624:	c4 58       	rjmp	800076ae <_free_r+0x182>
80007626:	f0 0b 16 09 	lsr	r11,r8,0x9
8000762a:	58 4b       	cp.w	r11,4
8000762c:	e0 8b 00 06 	brhi	80007638 <_free_r+0x10c>
80007630:	f0 0b 16 06 	lsr	r11,r8,0x6
80007634:	2c 8b       	sub	r11,-56
80007636:	c2 08       	rjmp	80007676 <_free_r+0x14a>
80007638:	59 4b       	cp.w	r11,20
8000763a:	e0 8b 00 04 	brhi	80007642 <_free_r+0x116>
8000763e:	2a 5b       	sub	r11,-91
80007640:	c1 b8       	rjmp	80007676 <_free_r+0x14a>
80007642:	e0 4b 00 54 	cp.w	r11,84
80007646:	e0 8b 00 06 	brhi	80007652 <_free_r+0x126>
8000764a:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000764e:	29 2b       	sub	r11,-110
80007650:	c1 38       	rjmp	80007676 <_free_r+0x14a>
80007652:	e0 4b 01 54 	cp.w	r11,340
80007656:	e0 8b 00 06 	brhi	80007662 <_free_r+0x136>
8000765a:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000765e:	28 9b       	sub	r11,-119
80007660:	c0 b8       	rjmp	80007676 <_free_r+0x14a>
80007662:	e0 4b 05 54 	cp.w	r11,1364
80007666:	e0 88 00 05 	brls	80007670 <_free_r+0x144>
8000766a:	37 eb       	mov	r11,126
8000766c:	c0 58       	rjmp	80007676 <_free_r+0x14a>
8000766e:	d7 03       	nop
80007670:	f0 0b 16 12 	lsr	r11,r8,0x12
80007674:	28 4b       	sub	r11,-124
80007676:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000767a:	78 29       	ld.w	r9,r12[0x8]
8000767c:	18 39       	cp.w	r9,r12
8000767e:	c0 e1       	brne	8000769a <_free_r+0x16e>
80007680:	74 18       	ld.w	r8,r10[0x4]
80007682:	a3 4b       	asr	r11,0x2
80007684:	30 1c       	mov	r12,1
80007686:	f8 0b 09 4b 	lsl	r11,r12,r11
8000768a:	f1 eb 10 0b 	or	r11,r8,r11
8000768e:	12 98       	mov	r8,r9
80007690:	95 1b       	st.w	r10[0x4],r11
80007692:	c0 a8       	rjmp	800076a6 <_free_r+0x17a>
80007694:	72 29       	ld.w	r9,r9[0x8]
80007696:	18 39       	cp.w	r9,r12
80007698:	c0 60       	breq	800076a4 <_free_r+0x178>
8000769a:	72 1a       	ld.w	r10,r9[0x4]
8000769c:	e0 1a ff fc 	andl	r10,0xfffc
800076a0:	14 38       	cp.w	r8,r10
800076a2:	cf 93       	brcs	80007694 <_free_r+0x168>
800076a4:	72 38       	ld.w	r8,r9[0xc]
800076a6:	8d 38       	st.w	r6[0xc],r8
800076a8:	8d 29       	st.w	r6[0x8],r9
800076aa:	93 36       	st.w	r9[0xc],r6
800076ac:	91 26       	st.w	r8[0x8],r6
800076ae:	0e 9c       	mov	r12,r7
800076b0:	e0 a0 04 27 	rcall	80007efe <__malloc_unlock>
800076b4:	d8 22       	popm	r4-r7,pc
800076b6:	d7 03       	nop

800076b8 <__sfvwrite_r>:
800076b8:	d4 31       	pushm	r0-r7,lr
800076ba:	20 3d       	sub	sp,12
800076bc:	14 94       	mov	r4,r10
800076be:	18 95       	mov	r5,r12
800076c0:	16 97       	mov	r7,r11
800076c2:	74 28       	ld.w	r8,r10[0x8]
800076c4:	58 08       	cp.w	r8,0
800076c6:	e0 80 01 45 	breq	80007950 <__sfvwrite_r+0x298>
800076ca:	96 68       	ld.sh	r8,r11[0xc]
800076cc:	ed b8 00 03 	bld	r8,0x3
800076d0:	c0 41       	brne	800076d8 <__sfvwrite_r+0x20>
800076d2:	76 48       	ld.w	r8,r11[0x10]
800076d4:	58 08       	cp.w	r8,0
800076d6:	c0 c1       	brne	800076ee <__sfvwrite_r+0x36>
800076d8:	0e 9b       	mov	r11,r7
800076da:	0a 9c       	mov	r12,r5
800076dc:	fe b0 f6 ca 	rcall	80006470 <__swsetup_r>
800076e0:	c0 70       	breq	800076ee <__sfvwrite_r+0x36>
800076e2:	8e 68       	ld.sh	r8,r7[0xc]
800076e4:	a7 a8       	sbr	r8,0x6
800076e6:	ae 68       	st.h	r7[0xc],r8
800076e8:	30 98       	mov	r8,9
800076ea:	8b 38       	st.w	r5[0xc],r8
800076ec:	c3 09       	rjmp	8000794c <__sfvwrite_r+0x294>
800076ee:	8e 63       	ld.sh	r3,r7[0xc]
800076f0:	68 00       	ld.w	r0,r4[0x0]
800076f2:	06 96       	mov	r6,r3
800076f4:	e2 16 00 02 	andl	r6,0x2,COH
800076f8:	c2 10       	breq	8000773a <__sfvwrite_r+0x82>
800076fa:	30 03       	mov	r3,0
800076fc:	e0 62 04 00 	mov	r2,1024
80007700:	06 96       	mov	r6,r3
80007702:	c0 48       	rjmp	8000770a <__sfvwrite_r+0x52>
80007704:	60 03       	ld.w	r3,r0[0x0]
80007706:	60 16       	ld.w	r6,r0[0x4]
80007708:	2f 80       	sub	r0,-8
8000770a:	58 06       	cp.w	r6,0
8000770c:	cf c0       	breq	80007704 <__sfvwrite_r+0x4c>
8000770e:	e0 46 04 00 	cp.w	r6,1024
80007712:	ec 09 17 80 	movls	r9,r6
80007716:	e4 09 17 b0 	movhi	r9,r2
8000771a:	06 9a       	mov	r10,r3
8000771c:	6e a8       	ld.w	r8,r7[0x28]
8000771e:	6e 8b       	ld.w	r11,r7[0x20]
80007720:	0a 9c       	mov	r12,r5
80007722:	5d 18       	icall	r8
80007724:	18 16       	sub	r6,r12
80007726:	58 0c       	cp.w	r12,0
80007728:	e0 8a 01 0f 	brle	80007946 <__sfvwrite_r+0x28e>
8000772c:	68 28       	ld.w	r8,r4[0x8]
8000772e:	18 18       	sub	r8,r12
80007730:	89 28       	st.w	r4[0x8],r8
80007732:	e0 80 01 0f 	breq	80007950 <__sfvwrite_r+0x298>
80007736:	18 03       	add	r3,r12
80007738:	ce 9b       	rjmp	8000770a <__sfvwrite_r+0x52>
8000773a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000773e:	c0 70       	breq	8000774c <__sfvwrite_r+0x94>
80007740:	50 06       	stdsp	sp[0x0],r6
80007742:	0c 93       	mov	r3,r6
80007744:	0c 91       	mov	r1,r6
80007746:	50 15       	stdsp	sp[0x4],r5
80007748:	08 92       	mov	r2,r4
8000774a:	c9 e8       	rjmp	80007886 <__sfvwrite_r+0x1ce>
8000774c:	06 96       	mov	r6,r3
8000774e:	08 91       	mov	r1,r4
80007750:	c0 48       	rjmp	80007758 <__sfvwrite_r+0xa0>
80007752:	60 03       	ld.w	r3,r0[0x0]
80007754:	60 16       	ld.w	r6,r0[0x4]
80007756:	2f 80       	sub	r0,-8
80007758:	58 06       	cp.w	r6,0
8000775a:	cf c0       	breq	80007752 <__sfvwrite_r+0x9a>
8000775c:	8e 68       	ld.sh	r8,r7[0xc]
8000775e:	6e 24       	ld.w	r4,r7[0x8]
80007760:	10 99       	mov	r9,r8
80007762:	e2 19 02 00 	andl	r9,0x200,COH
80007766:	c5 50       	breq	80007810 <__sfvwrite_r+0x158>
80007768:	08 36       	cp.w	r6,r4
8000776a:	c4 33       	brcs	800077f0 <__sfvwrite_r+0x138>
8000776c:	10 99       	mov	r9,r8
8000776e:	e2 19 04 80 	andl	r9,0x480,COH
80007772:	c3 f0       	breq	800077f0 <__sfvwrite_r+0x138>
80007774:	6e 4b       	ld.w	r11,r7[0x10]
80007776:	6e 09       	ld.w	r9,r7[0x0]
80007778:	16 19       	sub	r9,r11
8000777a:	50 09       	stdsp	sp[0x0],r9
8000777c:	6e 59       	ld.w	r9,r7[0x14]
8000777e:	10 9c       	mov	r12,r8
80007780:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007784:	30 28       	mov	r8,2
80007786:	f4 08 0c 08 	divs	r8,r10,r8
8000778a:	fa e9 00 04 	st.d	sp[4],r8
8000778e:	10 94       	mov	r4,r8
80007790:	40 09       	lddsp	r9,sp[0x0]
80007792:	e2 1c 04 00 	andl	r12,0x400,COH
80007796:	2f f9       	sub	r9,-1
80007798:	0c 09       	add	r9,r6
8000779a:	12 38       	cp.w	r8,r9
8000779c:	f2 04 17 30 	movlo	r4,r9
800077a0:	58 0c       	cp.w	r12,0
800077a2:	c1 00       	breq	800077c2 <__sfvwrite_r+0x10a>
800077a4:	08 9b       	mov	r11,r4
800077a6:	0a 9c       	mov	r12,r5
800077a8:	c6 8d       	rcall	80007a78 <_malloc_r>
800077aa:	18 92       	mov	r2,r12
800077ac:	c1 40       	breq	800077d4 <__sfvwrite_r+0x11c>
800077ae:	40 0a       	lddsp	r10,sp[0x0]
800077b0:	6e 4b       	ld.w	r11,r7[0x10]
800077b2:	fe b0 e4 78 	rcall	800040a2 <memcpy>
800077b6:	8e 68       	ld.sh	r8,r7[0xc]
800077b8:	e0 18 fb 7f 	andl	r8,0xfb7f
800077bc:	a7 b8       	sbr	r8,0x7
800077be:	ae 68       	st.h	r7[0xc],r8
800077c0:	c0 d8       	rjmp	800077da <__sfvwrite_r+0x122>
800077c2:	08 9a       	mov	r10,r4
800077c4:	0a 9c       	mov	r12,r5
800077c6:	e0 a0 06 87 	rcall	800084d4 <_realloc_r>
800077ca:	18 92       	mov	r2,r12
800077cc:	c0 71       	brne	800077da <__sfvwrite_r+0x122>
800077ce:	6e 4b       	ld.w	r11,r7[0x10]
800077d0:	0a 9c       	mov	r12,r5
800077d2:	ca de       	rcall	8000752c <_free_r>
800077d4:	30 c8       	mov	r8,12
800077d6:	8b 38       	st.w	r5[0xc],r8
800077d8:	cb 78       	rjmp	80007946 <__sfvwrite_r+0x28e>
800077da:	40 0a       	lddsp	r10,sp[0x0]
800077dc:	40 09       	lddsp	r9,sp[0x0]
800077de:	e8 0a 01 0a 	sub	r10,r4,r10
800077e2:	e4 09 00 08 	add	r8,r2,r9
800077e6:	8f 54       	st.w	r7[0x14],r4
800077e8:	8f 2a       	st.w	r7[0x8],r10
800077ea:	8f 08       	st.w	r7[0x0],r8
800077ec:	8f 42       	st.w	r7[0x10],r2
800077ee:	0c 94       	mov	r4,r6
800077f0:	08 36       	cp.w	r6,r4
800077f2:	ec 04 17 30 	movlo	r4,r6
800077f6:	06 9b       	mov	r11,r3
800077f8:	08 9a       	mov	r10,r4
800077fa:	6e 0c       	ld.w	r12,r7[0x0]
800077fc:	e0 a0 03 61 	rcall	80007ebe <memmove>
80007800:	6e 08       	ld.w	r8,r7[0x0]
80007802:	08 08       	add	r8,r4
80007804:	8f 08       	st.w	r7[0x0],r8
80007806:	6e 28       	ld.w	r8,r7[0x8]
80007808:	08 18       	sub	r8,r4
8000780a:	0c 94       	mov	r4,r6
8000780c:	8f 28       	st.w	r7[0x8],r8
8000780e:	c3 08       	rjmp	8000786e <__sfvwrite_r+0x1b6>
80007810:	08 36       	cp.w	r6,r4
80007812:	5f ba       	srhi	r10
80007814:	6e 0c       	ld.w	r12,r7[0x0]
80007816:	6e 48       	ld.w	r8,r7[0x10]
80007818:	10 3c       	cp.w	r12,r8
8000781a:	5f b8       	srhi	r8
8000781c:	f5 e8 00 08 	and	r8,r10,r8
80007820:	f2 08 18 00 	cp.b	r8,r9
80007824:	c0 e0       	breq	80007840 <__sfvwrite_r+0x188>
80007826:	06 9b       	mov	r11,r3
80007828:	08 9a       	mov	r10,r4
8000782a:	e0 a0 03 4a 	rcall	80007ebe <memmove>
8000782e:	6e 08       	ld.w	r8,r7[0x0]
80007830:	08 08       	add	r8,r4
80007832:	0e 9b       	mov	r11,r7
80007834:	8f 08       	st.w	r7[0x0],r8
80007836:	0a 9c       	mov	r12,r5
80007838:	fe b0 fd 08 	rcall	80007248 <_fflush_r>
8000783c:	c1 90       	breq	8000786e <__sfvwrite_r+0x1b6>
8000783e:	c8 48       	rjmp	80007946 <__sfvwrite_r+0x28e>
80007840:	6e 59       	ld.w	r9,r7[0x14]
80007842:	12 36       	cp.w	r6,r9
80007844:	c0 a3       	brcs	80007858 <__sfvwrite_r+0x1a0>
80007846:	6e a8       	ld.w	r8,r7[0x28]
80007848:	06 9a       	mov	r10,r3
8000784a:	6e 8b       	ld.w	r11,r7[0x20]
8000784c:	0a 9c       	mov	r12,r5
8000784e:	5d 18       	icall	r8
80007850:	18 94       	mov	r4,r12
80007852:	e0 89 00 0e 	brgt	8000786e <__sfvwrite_r+0x1b6>
80007856:	c7 88       	rjmp	80007946 <__sfvwrite_r+0x28e>
80007858:	0c 9a       	mov	r10,r6
8000785a:	06 9b       	mov	r11,r3
8000785c:	e0 a0 03 31 	rcall	80007ebe <memmove>
80007860:	6e 08       	ld.w	r8,r7[0x0]
80007862:	0c 08       	add	r8,r6
80007864:	0c 94       	mov	r4,r6
80007866:	8f 08       	st.w	r7[0x0],r8
80007868:	6e 28       	ld.w	r8,r7[0x8]
8000786a:	0c 18       	sub	r8,r6
8000786c:	8f 28       	st.w	r7[0x8],r8
8000786e:	62 28       	ld.w	r8,r1[0x8]
80007870:	08 18       	sub	r8,r4
80007872:	83 28       	st.w	r1[0x8],r8
80007874:	c6 e0       	breq	80007950 <__sfvwrite_r+0x298>
80007876:	08 16       	sub	r6,r4
80007878:	08 03       	add	r3,r4
8000787a:	c6 fb       	rjmp	80007758 <__sfvwrite_r+0xa0>
8000787c:	60 03       	ld.w	r3,r0[0x0]
8000787e:	60 11       	ld.w	r1,r0[0x4]
80007880:	30 08       	mov	r8,0
80007882:	2f 80       	sub	r0,-8
80007884:	50 08       	stdsp	sp[0x0],r8
80007886:	58 01       	cp.w	r1,0
80007888:	cf a0       	breq	8000787c <__sfvwrite_r+0x1c4>
8000788a:	40 0a       	lddsp	r10,sp[0x0]
8000788c:	58 0a       	cp.w	r10,0
8000788e:	c1 51       	brne	800078b8 <__sfvwrite_r+0x200>
80007890:	e2 c6 ff ff 	sub	r6,r1,-1
80007894:	02 9a       	mov	r10,r1
80007896:	30 ab       	mov	r11,10
80007898:	06 9c       	mov	r12,r3
8000789a:	e0 a0 03 07 	rcall	80007ea8 <memchr>
8000789e:	f8 c8 ff ff 	sub	r8,r12,-1
800078a2:	58 0c       	cp.w	r12,0
800078a4:	f1 d3 e1 16 	subne	r6,r8,r3
800078a8:	f9 b9 01 01 	movne	r9,1
800078ac:	fb f9 1a 00 	st.wne	sp[0x0],r9
800078b0:	f9 b8 00 01 	moveq	r8,1
800078b4:	fb f8 0a 00 	st.weq	sp[0x0],r8
800078b8:	02 36       	cp.w	r6,r1
800078ba:	ec 04 17 80 	movls	r4,r6
800078be:	e2 04 17 b0 	movhi	r4,r1
800078c2:	6e 59       	ld.w	r9,r7[0x14]
800078c4:	6e 25       	ld.w	r5,r7[0x8]
800078c6:	f2 05 00 05 	add	r5,r9,r5
800078ca:	0a 34       	cp.w	r4,r5
800078cc:	5f 9a       	srgt	r10
800078ce:	6e 0c       	ld.w	r12,r7[0x0]
800078d0:	6e 48       	ld.w	r8,r7[0x10]
800078d2:	10 3c       	cp.w	r12,r8
800078d4:	5f b8       	srhi	r8
800078d6:	f5 e8 00 08 	and	r8,r10,r8
800078da:	30 0a       	mov	r10,0
800078dc:	f4 08 18 00 	cp.b	r8,r10
800078e0:	c0 e0       	breq	800078fc <__sfvwrite_r+0x244>
800078e2:	06 9b       	mov	r11,r3
800078e4:	0a 9a       	mov	r10,r5
800078e6:	e0 a0 02 ec 	rcall	80007ebe <memmove>
800078ea:	6e 08       	ld.w	r8,r7[0x0]
800078ec:	0a 08       	add	r8,r5
800078ee:	0e 9b       	mov	r11,r7
800078f0:	8f 08       	st.w	r7[0x0],r8
800078f2:	40 1c       	lddsp	r12,sp[0x4]
800078f4:	fe b0 fc aa 	rcall	80007248 <_fflush_r>
800078f8:	c1 80       	breq	80007928 <__sfvwrite_r+0x270>
800078fa:	c2 68       	rjmp	80007946 <__sfvwrite_r+0x28e>
800078fc:	12 34       	cp.w	r4,r9
800078fe:	c0 a5       	brlt	80007912 <__sfvwrite_r+0x25a>
80007900:	6e a8       	ld.w	r8,r7[0x28]
80007902:	06 9a       	mov	r10,r3
80007904:	6e 8b       	ld.w	r11,r7[0x20]
80007906:	40 1c       	lddsp	r12,sp[0x4]
80007908:	5d 18       	icall	r8
8000790a:	18 95       	mov	r5,r12
8000790c:	e0 89 00 0e 	brgt	80007928 <__sfvwrite_r+0x270>
80007910:	c1 b8       	rjmp	80007946 <__sfvwrite_r+0x28e>
80007912:	08 9a       	mov	r10,r4
80007914:	06 9b       	mov	r11,r3
80007916:	e0 a0 02 d4 	rcall	80007ebe <memmove>
8000791a:	6e 08       	ld.w	r8,r7[0x0]
8000791c:	08 08       	add	r8,r4
8000791e:	08 95       	mov	r5,r4
80007920:	8f 08       	st.w	r7[0x0],r8
80007922:	6e 28       	ld.w	r8,r7[0x8]
80007924:	08 18       	sub	r8,r4
80007926:	8f 28       	st.w	r7[0x8],r8
80007928:	0a 16       	sub	r6,r5
8000792a:	c0 71       	brne	80007938 <__sfvwrite_r+0x280>
8000792c:	0e 9b       	mov	r11,r7
8000792e:	40 1c       	lddsp	r12,sp[0x4]
80007930:	fe b0 fc 8c 	rcall	80007248 <_fflush_r>
80007934:	c0 91       	brne	80007946 <__sfvwrite_r+0x28e>
80007936:	50 06       	stdsp	sp[0x0],r6
80007938:	64 28       	ld.w	r8,r2[0x8]
8000793a:	0a 18       	sub	r8,r5
8000793c:	85 28       	st.w	r2[0x8],r8
8000793e:	c0 90       	breq	80007950 <__sfvwrite_r+0x298>
80007940:	0a 11       	sub	r1,r5
80007942:	0a 03       	add	r3,r5
80007944:	ca 1b       	rjmp	80007886 <__sfvwrite_r+0x1ce>
80007946:	8e 68       	ld.sh	r8,r7[0xc]
80007948:	a7 a8       	sbr	r8,0x6
8000794a:	ae 68       	st.h	r7[0xc],r8
8000794c:	3f fc       	mov	r12,-1
8000794e:	c0 28       	rjmp	80007952 <__sfvwrite_r+0x29a>
80007950:	30 0c       	mov	r12,0
80007952:	2f dd       	sub	sp,-12
80007954:	d8 32       	popm	r0-r7,pc
80007956:	d7 03       	nop

80007958 <_fwalk>:
80007958:	d4 31       	pushm	r0-r7,lr
8000795a:	30 05       	mov	r5,0
8000795c:	16 91       	mov	r1,r11
8000795e:	f8 c7 ff 28 	sub	r7,r12,-216
80007962:	0a 92       	mov	r2,r5
80007964:	fe b0 fc f8 	rcall	80007354 <__sfp_lock_acquire>
80007968:	3f f3       	mov	r3,-1
8000796a:	c1 68       	rjmp	80007996 <_fwalk+0x3e>
8000796c:	6e 26       	ld.w	r6,r7[0x8]
8000796e:	6e 14       	ld.w	r4,r7[0x4]
80007970:	2f 46       	sub	r6,-12
80007972:	c0 c8       	rjmp	8000798a <_fwalk+0x32>
80007974:	8c 08       	ld.sh	r8,r6[0x0]
80007976:	e4 08 19 00 	cp.h	r8,r2
8000797a:	c0 70       	breq	80007988 <_fwalk+0x30>
8000797c:	8c 18       	ld.sh	r8,r6[0x2]
8000797e:	e6 08 19 00 	cp.h	r8,r3
80007982:	c0 30       	breq	80007988 <_fwalk+0x30>
80007984:	5d 11       	icall	r1
80007986:	18 45       	or	r5,r12
80007988:	2a 46       	sub	r6,-92
8000798a:	20 14       	sub	r4,1
8000798c:	ec cc 00 0c 	sub	r12,r6,12
80007990:	58 04       	cp.w	r4,0
80007992:	cf 14       	brge	80007974 <_fwalk+0x1c>
80007994:	6e 07       	ld.w	r7,r7[0x0]
80007996:	58 07       	cp.w	r7,0
80007998:	ce a1       	brne	8000796c <_fwalk+0x14>
8000799a:	fe b0 fc de 	rcall	80007356 <__sfp_lock_release>
8000799e:	0a 9c       	mov	r12,r5
800079a0:	d8 32       	popm	r0-r7,pc
800079a2:	d7 03       	nop

800079a4 <_localeconv_r>:
800079a4:	fe cc d8 40 	sub	r12,pc,-10176
800079a8:	5e fc       	retal	r12
800079aa:	d7 03       	nop

800079ac <__smakebuf_r>:
800079ac:	d4 21       	pushm	r4-r7,lr
800079ae:	20 fd       	sub	sp,60
800079b0:	96 68       	ld.sh	r8,r11[0xc]
800079b2:	16 97       	mov	r7,r11
800079b4:	18 96       	mov	r6,r12
800079b6:	e2 18 00 02 	andl	r8,0x2,COH
800079ba:	c3 c1       	brne	80007a32 <__smakebuf_r+0x86>
800079bc:	96 7b       	ld.sh	r11,r11[0xe]
800079be:	f0 0b 19 00 	cp.h	r11,r8
800079c2:	c0 55       	brlt	800079cc <__smakebuf_r+0x20>
800079c4:	1a 9a       	mov	r10,sp
800079c6:	e0 a0 08 95 	rcall	80008af0 <_fstat_r>
800079ca:	c0 f4       	brge	800079e8 <__smakebuf_r+0x3c>
800079cc:	8e 65       	ld.sh	r5,r7[0xc]
800079ce:	0a 98       	mov	r8,r5
800079d0:	ab b8       	sbr	r8,0xb
800079d2:	e2 15 00 80 	andl	r5,0x80,COH
800079d6:	ae 68       	st.h	r7[0xc],r8
800079d8:	30 04       	mov	r4,0
800079da:	e0 68 04 00 	mov	r8,1024
800079de:	f9 b5 01 40 	movne	r5,64
800079e2:	f0 05 17 00 	moveq	r5,r8
800079e6:	c1 c8       	rjmp	80007a1e <__smakebuf_r+0x72>
800079e8:	40 18       	lddsp	r8,sp[0x4]
800079ea:	e2 18 f0 00 	andl	r8,0xf000,COH
800079ee:	e0 48 20 00 	cp.w	r8,8192
800079f2:	5f 04       	sreq	r4
800079f4:	e0 48 80 00 	cp.w	r8,32768
800079f8:	c0 e1       	brne	80007a14 <__smakebuf_r+0x68>
800079fa:	6e b9       	ld.w	r9,r7[0x2c]
800079fc:	fe c8 f1 f8 	sub	r8,pc,-3592
80007a00:	10 39       	cp.w	r9,r8
80007a02:	c0 91       	brne	80007a14 <__smakebuf_r+0x68>
80007a04:	8e 68       	ld.sh	r8,r7[0xc]
80007a06:	e0 65 04 00 	mov	r5,1024
80007a0a:	ab a8       	sbr	r8,0xa
80007a0c:	ef 45 00 50 	st.w	r7[80],r5
80007a10:	ae 68       	st.h	r7[0xc],r8
80007a12:	c0 68       	rjmp	80007a1e <__smakebuf_r+0x72>
80007a14:	8e 68       	ld.sh	r8,r7[0xc]
80007a16:	e0 65 04 00 	mov	r5,1024
80007a1a:	ab b8       	sbr	r8,0xb
80007a1c:	ae 68       	st.h	r7[0xc],r8
80007a1e:	0a 9b       	mov	r11,r5
80007a20:	0c 9c       	mov	r12,r6
80007a22:	c2 bc       	rcall	80007a78 <_malloc_r>
80007a24:	8e 68       	ld.sh	r8,r7[0xc]
80007a26:	c0 d1       	brne	80007a40 <__smakebuf_r+0x94>
80007a28:	ed b8 00 09 	bld	r8,0x9
80007a2c:	c1 b0       	breq	80007a62 <__smakebuf_r+0xb6>
80007a2e:	a1 b8       	sbr	r8,0x1
80007a30:	ae 68       	st.h	r7[0xc],r8
80007a32:	ee c8 ff b9 	sub	r8,r7,-71
80007a36:	8f 48       	st.w	r7[0x10],r8
80007a38:	8f 08       	st.w	r7[0x0],r8
80007a3a:	30 18       	mov	r8,1
80007a3c:	8f 58       	st.w	r7[0x14],r8
80007a3e:	c1 28       	rjmp	80007a62 <__smakebuf_r+0xb6>
80007a40:	a7 b8       	sbr	r8,0x7
80007a42:	8f 4c       	st.w	r7[0x10],r12
80007a44:	ae 68       	st.h	r7[0xc],r8
80007a46:	8f 55       	st.w	r7[0x14],r5
80007a48:	fe c8 06 f0 	sub	r8,pc,1776
80007a4c:	8f 0c       	st.w	r7[0x0],r12
80007a4e:	8d a8       	st.w	r6[0x28],r8
80007a50:	58 04       	cp.w	r4,0
80007a52:	c0 80       	breq	80007a62 <__smakebuf_r+0xb6>
80007a54:	8e 7c       	ld.sh	r12,r7[0xe]
80007a56:	e0 a0 07 3f 	rcall	800088d4 <isatty>
80007a5a:	c0 40       	breq	80007a62 <__smakebuf_r+0xb6>
80007a5c:	8e 68       	ld.sh	r8,r7[0xc]
80007a5e:	a1 a8       	sbr	r8,0x0
80007a60:	ae 68       	st.h	r7[0xc],r8
80007a62:	2f 1d       	sub	sp,-60
80007a64:	d8 22       	popm	r4-r7,pc
80007a66:	d7 03       	nop

80007a68 <malloc>:
80007a68:	d4 01       	pushm	lr
80007a6a:	e0 68 01 18 	mov	r8,280
80007a6e:	18 9b       	mov	r11,r12
80007a70:	70 0c       	ld.w	r12,r8[0x0]
80007a72:	c0 3c       	rcall	80007a78 <_malloc_r>
80007a74:	d8 02       	popm	pc
80007a76:	d7 03       	nop

80007a78 <_malloc_r>:
80007a78:	d4 31       	pushm	r0-r7,lr
80007a7a:	f6 c8 ff f5 	sub	r8,r11,-11
80007a7e:	18 95       	mov	r5,r12
80007a80:	10 97       	mov	r7,r8
80007a82:	e0 17 ff f8 	andl	r7,0xfff8
80007a86:	59 68       	cp.w	r8,22
80007a88:	f9 b7 08 10 	movls	r7,16
80007a8c:	16 37       	cp.w	r7,r11
80007a8e:	5f 38       	srlo	r8
80007a90:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007a94:	c0 50       	breq	80007a9e <_malloc_r+0x26>
80007a96:	30 c8       	mov	r8,12
80007a98:	99 38       	st.w	r12[0xc],r8
80007a9a:	e0 8f 01 f7 	bral	80007e88 <_malloc_r+0x410>
80007a9e:	e0 a0 02 2f 	rcall	80007efc <__malloc_lock>
80007aa2:	e0 47 01 f7 	cp.w	r7,503
80007aa6:	e0 8b 00 1d 	brhi	80007ae0 <_malloc_r+0x68>
80007aaa:	ee 03 16 03 	lsr	r3,r7,0x3
80007aae:	e0 68 01 1c 	mov	r8,284
80007ab2:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007ab6:	70 36       	ld.w	r6,r8[0xc]
80007ab8:	10 36       	cp.w	r6,r8
80007aba:	c0 61       	brne	80007ac6 <_malloc_r+0x4e>
80007abc:	ec c8 ff f8 	sub	r8,r6,-8
80007ac0:	70 36       	ld.w	r6,r8[0xc]
80007ac2:	10 36       	cp.w	r6,r8
80007ac4:	c0 c0       	breq	80007adc <_malloc_r+0x64>
80007ac6:	6c 18       	ld.w	r8,r6[0x4]
80007ac8:	e0 18 ff fc 	andl	r8,0xfffc
80007acc:	6c 3a       	ld.w	r10,r6[0xc]
80007ace:	ec 08 00 09 	add	r9,r6,r8
80007ad2:	0a 9c       	mov	r12,r5
80007ad4:	6c 28       	ld.w	r8,r6[0x8]
80007ad6:	95 28       	st.w	r10[0x8],r8
80007ad8:	91 3a       	st.w	r8[0xc],r10
80007ada:	c4 78       	rjmp	80007b68 <_malloc_r+0xf0>
80007adc:	2f e3       	sub	r3,-2
80007ade:	c4 d8       	rjmp	80007b78 <_malloc_r+0x100>
80007ae0:	ee 03 16 09 	lsr	r3,r7,0x9
80007ae4:	c0 41       	brne	80007aec <_malloc_r+0x74>
80007ae6:	ee 03 16 03 	lsr	r3,r7,0x3
80007aea:	c2 68       	rjmp	80007b36 <_malloc_r+0xbe>
80007aec:	58 43       	cp.w	r3,4
80007aee:	e0 8b 00 06 	brhi	80007afa <_malloc_r+0x82>
80007af2:	ee 03 16 06 	lsr	r3,r7,0x6
80007af6:	2c 83       	sub	r3,-56
80007af8:	c1 f8       	rjmp	80007b36 <_malloc_r+0xbe>
80007afa:	59 43       	cp.w	r3,20
80007afc:	e0 8b 00 04 	brhi	80007b04 <_malloc_r+0x8c>
80007b00:	2a 53       	sub	r3,-91
80007b02:	c1 a8       	rjmp	80007b36 <_malloc_r+0xbe>
80007b04:	e0 43 00 54 	cp.w	r3,84
80007b08:	e0 8b 00 06 	brhi	80007b14 <_malloc_r+0x9c>
80007b0c:	ee 03 16 0c 	lsr	r3,r7,0xc
80007b10:	29 23       	sub	r3,-110
80007b12:	c1 28       	rjmp	80007b36 <_malloc_r+0xbe>
80007b14:	e0 43 01 54 	cp.w	r3,340
80007b18:	e0 8b 00 06 	brhi	80007b24 <_malloc_r+0xac>
80007b1c:	ee 03 16 0f 	lsr	r3,r7,0xf
80007b20:	28 93       	sub	r3,-119
80007b22:	c0 a8       	rjmp	80007b36 <_malloc_r+0xbe>
80007b24:	e0 43 05 54 	cp.w	r3,1364
80007b28:	e0 88 00 04 	brls	80007b30 <_malloc_r+0xb8>
80007b2c:	37 e3       	mov	r3,126
80007b2e:	c0 48       	rjmp	80007b36 <_malloc_r+0xbe>
80007b30:	ee 03 16 12 	lsr	r3,r7,0x12
80007b34:	28 43       	sub	r3,-124
80007b36:	e0 6a 01 1c 	mov	r10,284
80007b3a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007b3e:	74 36       	ld.w	r6,r10[0xc]
80007b40:	c1 98       	rjmp	80007b72 <_malloc_r+0xfa>
80007b42:	6c 19       	ld.w	r9,r6[0x4]
80007b44:	e0 19 ff fc 	andl	r9,0xfffc
80007b48:	f2 07 01 0b 	sub	r11,r9,r7
80007b4c:	58 fb       	cp.w	r11,15
80007b4e:	e0 8a 00 04 	brle	80007b56 <_malloc_r+0xde>
80007b52:	20 13       	sub	r3,1
80007b54:	c1 18       	rjmp	80007b76 <_malloc_r+0xfe>
80007b56:	6c 38       	ld.w	r8,r6[0xc]
80007b58:	58 0b       	cp.w	r11,0
80007b5a:	c0 b5       	brlt	80007b70 <_malloc_r+0xf8>
80007b5c:	6c 2a       	ld.w	r10,r6[0x8]
80007b5e:	ec 09 00 09 	add	r9,r6,r9
80007b62:	0a 9c       	mov	r12,r5
80007b64:	91 2a       	st.w	r8[0x8],r10
80007b66:	95 38       	st.w	r10[0xc],r8
80007b68:	72 18       	ld.w	r8,r9[0x4]
80007b6a:	a1 a8       	sbr	r8,0x0
80007b6c:	93 18       	st.w	r9[0x4],r8
80007b6e:	cb c8       	rjmp	80007ce6 <_malloc_r+0x26e>
80007b70:	10 96       	mov	r6,r8
80007b72:	14 36       	cp.w	r6,r10
80007b74:	ce 71       	brne	80007b42 <_malloc_r+0xca>
80007b76:	2f f3       	sub	r3,-1
80007b78:	e0 6a 01 1c 	mov	r10,284
80007b7c:	f4 cc ff f8 	sub	r12,r10,-8
80007b80:	78 26       	ld.w	r6,r12[0x8]
80007b82:	18 36       	cp.w	r6,r12
80007b84:	c6 c0       	breq	80007c5c <_malloc_r+0x1e4>
80007b86:	6c 19       	ld.w	r9,r6[0x4]
80007b88:	e0 19 ff fc 	andl	r9,0xfffc
80007b8c:	f2 07 01 08 	sub	r8,r9,r7
80007b90:	58 f8       	cp.w	r8,15
80007b92:	e0 89 00 8f 	brgt	80007cb0 <_malloc_r+0x238>
80007b96:	99 3c       	st.w	r12[0xc],r12
80007b98:	99 2c       	st.w	r12[0x8],r12
80007b9a:	58 08       	cp.w	r8,0
80007b9c:	c0 55       	brlt	80007ba6 <_malloc_r+0x12e>
80007b9e:	ec 09 00 09 	add	r9,r6,r9
80007ba2:	0a 9c       	mov	r12,r5
80007ba4:	ce 2b       	rjmp	80007b68 <_malloc_r+0xf0>
80007ba6:	e0 49 01 ff 	cp.w	r9,511
80007baa:	e0 8b 00 13 	brhi	80007bd0 <_malloc_r+0x158>
80007bae:	a3 99       	lsr	r9,0x3
80007bb0:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007bb4:	70 2b       	ld.w	r11,r8[0x8]
80007bb6:	8d 38       	st.w	r6[0xc],r8
80007bb8:	8d 2b       	st.w	r6[0x8],r11
80007bba:	97 36       	st.w	r11[0xc],r6
80007bbc:	91 26       	st.w	r8[0x8],r6
80007bbe:	a3 49       	asr	r9,0x2
80007bc0:	74 18       	ld.w	r8,r10[0x4]
80007bc2:	30 1b       	mov	r11,1
80007bc4:	f6 09 09 49 	lsl	r9,r11,r9
80007bc8:	f1 e9 10 09 	or	r9,r8,r9
80007bcc:	95 19       	st.w	r10[0x4],r9
80007bce:	c4 78       	rjmp	80007c5c <_malloc_r+0x1e4>
80007bd0:	f2 0a 16 09 	lsr	r10,r9,0x9
80007bd4:	58 4a       	cp.w	r10,4
80007bd6:	e0 8b 00 07 	brhi	80007be4 <_malloc_r+0x16c>
80007bda:	f2 0a 16 06 	lsr	r10,r9,0x6
80007bde:	2c 8a       	sub	r10,-56
80007be0:	c2 08       	rjmp	80007c20 <_malloc_r+0x1a8>
80007be2:	d7 03       	nop
80007be4:	59 4a       	cp.w	r10,20
80007be6:	e0 8b 00 04 	brhi	80007bee <_malloc_r+0x176>
80007bea:	2a 5a       	sub	r10,-91
80007bec:	c1 a8       	rjmp	80007c20 <_malloc_r+0x1a8>
80007bee:	e0 4a 00 54 	cp.w	r10,84
80007bf2:	e0 8b 00 06 	brhi	80007bfe <_malloc_r+0x186>
80007bf6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007bfa:	29 2a       	sub	r10,-110
80007bfc:	c1 28       	rjmp	80007c20 <_malloc_r+0x1a8>
80007bfe:	e0 4a 01 54 	cp.w	r10,340
80007c02:	e0 8b 00 06 	brhi	80007c0e <_malloc_r+0x196>
80007c06:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007c0a:	28 9a       	sub	r10,-119
80007c0c:	c0 a8       	rjmp	80007c20 <_malloc_r+0x1a8>
80007c0e:	e0 4a 05 54 	cp.w	r10,1364
80007c12:	e0 88 00 04 	brls	80007c1a <_malloc_r+0x1a2>
80007c16:	37 ea       	mov	r10,126
80007c18:	c0 48       	rjmp	80007c20 <_malloc_r+0x1a8>
80007c1a:	f2 0a 16 12 	lsr	r10,r9,0x12
80007c1e:	28 4a       	sub	r10,-124
80007c20:	e0 6b 01 1c 	mov	r11,284
80007c24:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007c28:	68 28       	ld.w	r8,r4[0x8]
80007c2a:	08 38       	cp.w	r8,r4
80007c2c:	c0 e1       	brne	80007c48 <_malloc_r+0x1d0>
80007c2e:	76 19       	ld.w	r9,r11[0x4]
80007c30:	a3 4a       	asr	r10,0x2
80007c32:	30 1e       	mov	lr,1
80007c34:	fc 0a 09 4a 	lsl	r10,lr,r10
80007c38:	f3 ea 10 0a 	or	r10,r9,r10
80007c3c:	10 99       	mov	r9,r8
80007c3e:	97 1a       	st.w	r11[0x4],r10
80007c40:	c0 a8       	rjmp	80007c54 <_malloc_r+0x1dc>
80007c42:	70 28       	ld.w	r8,r8[0x8]
80007c44:	08 38       	cp.w	r8,r4
80007c46:	c0 60       	breq	80007c52 <_malloc_r+0x1da>
80007c48:	70 1a       	ld.w	r10,r8[0x4]
80007c4a:	e0 1a ff fc 	andl	r10,0xfffc
80007c4e:	14 39       	cp.w	r9,r10
80007c50:	cf 93       	brcs	80007c42 <_malloc_r+0x1ca>
80007c52:	70 39       	ld.w	r9,r8[0xc]
80007c54:	8d 39       	st.w	r6[0xc],r9
80007c56:	8d 28       	st.w	r6[0x8],r8
80007c58:	91 36       	st.w	r8[0xc],r6
80007c5a:	93 26       	st.w	r9[0x8],r6
80007c5c:	e6 08 14 02 	asr	r8,r3,0x2
80007c60:	30 1b       	mov	r11,1
80007c62:	e0 64 01 1c 	mov	r4,284
80007c66:	f6 08 09 4b 	lsl	r11,r11,r8
80007c6a:	68 18       	ld.w	r8,r4[0x4]
80007c6c:	10 3b       	cp.w	r11,r8
80007c6e:	e0 8b 00 69 	brhi	80007d40 <_malloc_r+0x2c8>
80007c72:	f7 e8 00 09 	and	r9,r11,r8
80007c76:	c0 b1       	brne	80007c8c <_malloc_r+0x214>
80007c78:	e0 13 ff fc 	andl	r3,0xfffc
80007c7c:	a1 7b       	lsl	r11,0x1
80007c7e:	2f c3       	sub	r3,-4
80007c80:	c0 38       	rjmp	80007c86 <_malloc_r+0x20e>
80007c82:	2f c3       	sub	r3,-4
80007c84:	a1 7b       	lsl	r11,0x1
80007c86:	f7 e8 00 09 	and	r9,r11,r8
80007c8a:	cf c0       	breq	80007c82 <_malloc_r+0x20a>
80007c8c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007c90:	06 92       	mov	r2,r3
80007c92:	1c 91       	mov	r1,lr
80007c94:	62 36       	ld.w	r6,r1[0xc]
80007c96:	c2 d8       	rjmp	80007cf0 <_malloc_r+0x278>
80007c98:	6c 1a       	ld.w	r10,r6[0x4]
80007c9a:	e0 1a ff fc 	andl	r10,0xfffc
80007c9e:	f4 07 01 08 	sub	r8,r10,r7
80007ca2:	58 f8       	cp.w	r8,15
80007ca4:	e0 8a 00 15 	brle	80007cce <_malloc_r+0x256>
80007ca8:	6c 3a       	ld.w	r10,r6[0xc]
80007caa:	6c 29       	ld.w	r9,r6[0x8]
80007cac:	95 29       	st.w	r10[0x8],r9
80007cae:	93 3a       	st.w	r9[0xc],r10
80007cb0:	0e 99       	mov	r9,r7
80007cb2:	ec 07 00 07 	add	r7,r6,r7
80007cb6:	a1 a9       	sbr	r9,0x0
80007cb8:	99 37       	st.w	r12[0xc],r7
80007cba:	99 27       	st.w	r12[0x8],r7
80007cbc:	8d 19       	st.w	r6[0x4],r9
80007cbe:	ee 08 09 08 	st.w	r7[r8],r8
80007cc2:	8f 2c       	st.w	r7[0x8],r12
80007cc4:	8f 3c       	st.w	r7[0xc],r12
80007cc6:	a1 a8       	sbr	r8,0x0
80007cc8:	0a 9c       	mov	r12,r5
80007cca:	8f 18       	st.w	r7[0x4],r8
80007ccc:	c0 d8       	rjmp	80007ce6 <_malloc_r+0x26e>
80007cce:	6c 39       	ld.w	r9,r6[0xc]
80007cd0:	58 08       	cp.w	r8,0
80007cd2:	c0 e5       	brlt	80007cee <_malloc_r+0x276>
80007cd4:	ec 0a 00 0a 	add	r10,r6,r10
80007cd8:	74 18       	ld.w	r8,r10[0x4]
80007cda:	a1 a8       	sbr	r8,0x0
80007cdc:	0a 9c       	mov	r12,r5
80007cde:	95 18       	st.w	r10[0x4],r8
80007ce0:	6c 28       	ld.w	r8,r6[0x8]
80007ce2:	93 28       	st.w	r9[0x8],r8
80007ce4:	91 39       	st.w	r8[0xc],r9
80007ce6:	c0 cd       	rcall	80007efe <__malloc_unlock>
80007ce8:	ec cc ff f8 	sub	r12,r6,-8
80007cec:	d8 32       	popm	r0-r7,pc
80007cee:	12 96       	mov	r6,r9
80007cf0:	02 36       	cp.w	r6,r1
80007cf2:	cd 31       	brne	80007c98 <_malloc_r+0x220>
80007cf4:	2f f2       	sub	r2,-1
80007cf6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007cfa:	c0 30       	breq	80007d00 <_malloc_r+0x288>
80007cfc:	2f 81       	sub	r1,-8
80007cfe:	cc bb       	rjmp	80007c94 <_malloc_r+0x21c>
80007d00:	1c 98       	mov	r8,lr
80007d02:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007d06:	c0 81       	brne	80007d16 <_malloc_r+0x29e>
80007d08:	68 19       	ld.w	r9,r4[0x4]
80007d0a:	f6 08 11 ff 	rsub	r8,r11,-1
80007d0e:	f3 e8 00 08 	and	r8,r9,r8
80007d12:	89 18       	st.w	r4[0x4],r8
80007d14:	c0 78       	rjmp	80007d22 <_malloc_r+0x2aa>
80007d16:	f0 c9 00 08 	sub	r9,r8,8
80007d1a:	20 13       	sub	r3,1
80007d1c:	70 08       	ld.w	r8,r8[0x0]
80007d1e:	12 38       	cp.w	r8,r9
80007d20:	cf 10       	breq	80007d02 <_malloc_r+0x28a>
80007d22:	a1 7b       	lsl	r11,0x1
80007d24:	68 18       	ld.w	r8,r4[0x4]
80007d26:	10 3b       	cp.w	r11,r8
80007d28:	e0 8b 00 0c 	brhi	80007d40 <_malloc_r+0x2c8>
80007d2c:	58 0b       	cp.w	r11,0
80007d2e:	c0 90       	breq	80007d40 <_malloc_r+0x2c8>
80007d30:	04 93       	mov	r3,r2
80007d32:	c0 38       	rjmp	80007d38 <_malloc_r+0x2c0>
80007d34:	2f c3       	sub	r3,-4
80007d36:	a1 7b       	lsl	r11,0x1
80007d38:	f7 e8 00 09 	and	r9,r11,r8
80007d3c:	ca 81       	brne	80007c8c <_malloc_r+0x214>
80007d3e:	cf bb       	rjmp	80007d34 <_malloc_r+0x2bc>
80007d40:	68 23       	ld.w	r3,r4[0x8]
80007d42:	66 12       	ld.w	r2,r3[0x4]
80007d44:	e0 12 ff fc 	andl	r2,0xfffc
80007d48:	0e 32       	cp.w	r2,r7
80007d4a:	5f 39       	srlo	r9
80007d4c:	e4 07 01 08 	sub	r8,r2,r7
80007d50:	58 f8       	cp.w	r8,15
80007d52:	5f aa       	srle	r10
80007d54:	f5 e9 10 09 	or	r9,r10,r9
80007d58:	e0 80 00 9a 	breq	80007e8c <_malloc_r+0x414>
80007d5c:	e0 68 06 44 	mov	r8,1604
80007d60:	70 01       	ld.w	r1,r8[0x0]
80007d62:	e0 68 05 28 	mov	r8,1320
80007d66:	2f 01       	sub	r1,-16
80007d68:	70 08       	ld.w	r8,r8[0x0]
80007d6a:	0e 01       	add	r1,r7
80007d6c:	5b f8       	cp.w	r8,-1
80007d6e:	c0 40       	breq	80007d76 <_malloc_r+0x2fe>
80007d70:	28 11       	sub	r1,-127
80007d72:	e0 11 ff 80 	andl	r1,0xff80
80007d76:	02 9b       	mov	r11,r1
80007d78:	0a 9c       	mov	r12,r5
80007d7a:	e0 a0 05 31 	rcall	800087dc <_sbrk_r>
80007d7e:	18 96       	mov	r6,r12
80007d80:	5b fc       	cp.w	r12,-1
80007d82:	c7 50       	breq	80007e6c <_malloc_r+0x3f4>
80007d84:	e6 02 00 08 	add	r8,r3,r2
80007d88:	10 3c       	cp.w	r12,r8
80007d8a:	c0 32       	brcc	80007d90 <_malloc_r+0x318>
80007d8c:	08 33       	cp.w	r3,r4
80007d8e:	c6 f1       	brne	80007e6c <_malloc_r+0x3f4>
80007d90:	e0 6a 06 48 	mov	r10,1608
80007d94:	74 09       	ld.w	r9,r10[0x0]
80007d96:	e2 09 00 09 	add	r9,r1,r9
80007d9a:	95 09       	st.w	r10[0x0],r9
80007d9c:	10 36       	cp.w	r6,r8
80007d9e:	c0 a1       	brne	80007db2 <_malloc_r+0x33a>
80007da0:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007da4:	c0 71       	brne	80007db2 <_malloc_r+0x33a>
80007da6:	e2 02 00 02 	add	r2,r1,r2
80007daa:	68 28       	ld.w	r8,r4[0x8]
80007dac:	a1 a2       	sbr	r2,0x0
80007dae:	91 12       	st.w	r8[0x4],r2
80007db0:	c4 f8       	rjmp	80007e4e <_malloc_r+0x3d6>
80007db2:	e0 6a 05 28 	mov	r10,1320
80007db6:	74 0b       	ld.w	r11,r10[0x0]
80007db8:	5b fb       	cp.w	r11,-1
80007dba:	c0 31       	brne	80007dc0 <_malloc_r+0x348>
80007dbc:	95 06       	st.w	r10[0x0],r6
80007dbe:	c0 78       	rjmp	80007dcc <_malloc_r+0x354>
80007dc0:	ec 09 00 09 	add	r9,r6,r9
80007dc4:	e0 6a 06 48 	mov	r10,1608
80007dc8:	10 19       	sub	r9,r8
80007dca:	95 09       	st.w	r10[0x0],r9
80007dcc:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007dd0:	f0 09 11 08 	rsub	r9,r8,8
80007dd4:	58 08       	cp.w	r8,0
80007dd6:	f2 08 17 10 	movne	r8,r9
80007dda:	ed d8 e1 06 	addne	r6,r6,r8
80007dde:	28 08       	sub	r8,-128
80007de0:	ec 01 00 01 	add	r1,r6,r1
80007de4:	0a 9c       	mov	r12,r5
80007de6:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007dea:	f0 01 01 01 	sub	r1,r8,r1
80007dee:	02 9b       	mov	r11,r1
80007df0:	e0 a0 04 f6 	rcall	800087dc <_sbrk_r>
80007df4:	e0 68 06 48 	mov	r8,1608
80007df8:	5b fc       	cp.w	r12,-1
80007dfa:	ec 0c 17 00 	moveq	r12,r6
80007dfe:	f9 b1 00 00 	moveq	r1,0
80007e02:	70 09       	ld.w	r9,r8[0x0]
80007e04:	0c 1c       	sub	r12,r6
80007e06:	89 26       	st.w	r4[0x8],r6
80007e08:	02 0c       	add	r12,r1
80007e0a:	12 01       	add	r1,r9
80007e0c:	a1 ac       	sbr	r12,0x0
80007e0e:	91 01       	st.w	r8[0x0],r1
80007e10:	8d 1c       	st.w	r6[0x4],r12
80007e12:	08 33       	cp.w	r3,r4
80007e14:	c1 d0       	breq	80007e4e <_malloc_r+0x3d6>
80007e16:	58 f2       	cp.w	r2,15
80007e18:	e0 8b 00 05 	brhi	80007e22 <_malloc_r+0x3aa>
80007e1c:	30 18       	mov	r8,1
80007e1e:	8d 18       	st.w	r6[0x4],r8
80007e20:	c2 68       	rjmp	80007e6c <_malloc_r+0x3f4>
80007e22:	30 59       	mov	r9,5
80007e24:	20 c2       	sub	r2,12
80007e26:	e0 12 ff f8 	andl	r2,0xfff8
80007e2a:	e6 02 00 08 	add	r8,r3,r2
80007e2e:	91 29       	st.w	r8[0x8],r9
80007e30:	91 19       	st.w	r8[0x4],r9
80007e32:	66 18       	ld.w	r8,r3[0x4]
80007e34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007e38:	e5 e8 10 08 	or	r8,r2,r8
80007e3c:	87 18       	st.w	r3[0x4],r8
80007e3e:	58 f2       	cp.w	r2,15
80007e40:	e0 88 00 07 	brls	80007e4e <_malloc_r+0x3d6>
80007e44:	e6 cb ff f8 	sub	r11,r3,-8
80007e48:	0a 9c       	mov	r12,r5
80007e4a:	fe b0 fb 71 	rcall	8000752c <_free_r>
80007e4e:	e0 69 06 40 	mov	r9,1600
80007e52:	72 0a       	ld.w	r10,r9[0x0]
80007e54:	e0 68 06 48 	mov	r8,1608
80007e58:	70 08       	ld.w	r8,r8[0x0]
80007e5a:	14 38       	cp.w	r8,r10
80007e5c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007e60:	e0 69 06 3c 	mov	r9,1596
80007e64:	72 0a       	ld.w	r10,r9[0x0]
80007e66:	14 38       	cp.w	r8,r10
80007e68:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007e6c:	68 28       	ld.w	r8,r4[0x8]
80007e6e:	70 18       	ld.w	r8,r8[0x4]
80007e70:	e0 18 ff fc 	andl	r8,0xfffc
80007e74:	0e 38       	cp.w	r8,r7
80007e76:	5f 39       	srlo	r9
80007e78:	0e 18       	sub	r8,r7
80007e7a:	58 f8       	cp.w	r8,15
80007e7c:	5f aa       	srle	r10
80007e7e:	f5 e9 10 09 	or	r9,r10,r9
80007e82:	c0 50       	breq	80007e8c <_malloc_r+0x414>
80007e84:	0a 9c       	mov	r12,r5
80007e86:	c3 cc       	rcall	80007efe <__malloc_unlock>
80007e88:	d8 3a       	popm	r0-r7,pc,r12=0
80007e8a:	d7 03       	nop
80007e8c:	68 26       	ld.w	r6,r4[0x8]
80007e8e:	a1 a8       	sbr	r8,0x0
80007e90:	0e 99       	mov	r9,r7
80007e92:	a1 a9       	sbr	r9,0x0
80007e94:	8d 19       	st.w	r6[0x4],r9
80007e96:	ec 07 00 07 	add	r7,r6,r7
80007e9a:	0a 9c       	mov	r12,r5
80007e9c:	89 27       	st.w	r4[0x8],r7
80007e9e:	8f 18       	st.w	r7[0x4],r8
80007ea0:	c2 fc       	rcall	80007efe <__malloc_unlock>
80007ea2:	ec cc ff f8 	sub	r12,r6,-8
80007ea6:	d8 32       	popm	r0-r7,pc

80007ea8 <memchr>:
80007ea8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007eac:	c0 68       	rjmp	80007eb8 <memchr+0x10>
80007eae:	20 1a       	sub	r10,1
80007eb0:	19 88       	ld.ub	r8,r12[0x0]
80007eb2:	16 38       	cp.w	r8,r11
80007eb4:	5e 0c       	reteq	r12
80007eb6:	2f fc       	sub	r12,-1
80007eb8:	58 0a       	cp.w	r10,0
80007eba:	cf a1       	brne	80007eae <memchr+0x6>
80007ebc:	5e fa       	retal	r10

80007ebe <memmove>:
80007ebe:	d4 01       	pushm	lr
80007ec0:	18 3b       	cp.w	r11,r12
80007ec2:	c1 92       	brcc	80007ef4 <memmove+0x36>
80007ec4:	f6 0a 00 09 	add	r9,r11,r10
80007ec8:	12 3c       	cp.w	r12,r9
80007eca:	c1 52       	brcc	80007ef4 <memmove+0x36>
80007ecc:	f8 0a 00 0b 	add	r11,r12,r10
80007ed0:	30 08       	mov	r8,0
80007ed2:	c0 68       	rjmp	80007ede <memmove+0x20>
80007ed4:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007ed8:	20 1a       	sub	r10,1
80007eda:	f6 08 0b 0e 	st.b	r11[r8],lr
80007ede:	20 18       	sub	r8,1
80007ee0:	58 0a       	cp.w	r10,0
80007ee2:	cf 91       	brne	80007ed4 <memmove+0x16>
80007ee4:	d8 02       	popm	pc
80007ee6:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007eea:	20 1a       	sub	r10,1
80007eec:	f8 08 0b 09 	st.b	r12[r8],r9
80007ef0:	2f f8       	sub	r8,-1
80007ef2:	c0 28       	rjmp	80007ef6 <memmove+0x38>
80007ef4:	30 08       	mov	r8,0
80007ef6:	58 0a       	cp.w	r10,0
80007ef8:	cf 71       	brne	80007ee6 <memmove+0x28>
80007efa:	d8 02       	popm	pc

80007efc <__malloc_lock>:
80007efc:	5e fc       	retal	r12

80007efe <__malloc_unlock>:
80007efe:	5e fc       	retal	r12

80007f00 <__hi0bits>:
80007f00:	18 98       	mov	r8,r12
80007f02:	e0 1c 00 00 	andl	r12,0x0
80007f06:	f0 09 15 10 	lsl	r9,r8,0x10
80007f0a:	58 0c       	cp.w	r12,0
80007f0c:	f2 08 17 00 	moveq	r8,r9
80007f10:	f9 bc 00 10 	moveq	r12,16
80007f14:	f9 bc 01 00 	movne	r12,0
80007f18:	10 9a       	mov	r10,r8
80007f1a:	f0 09 15 08 	lsl	r9,r8,0x8
80007f1e:	e6 1a ff 00 	andh	r10,0xff00,COH
80007f22:	f7 bc 00 f8 	subeq	r12,-8
80007f26:	f2 08 17 00 	moveq	r8,r9
80007f2a:	10 9a       	mov	r10,r8
80007f2c:	f0 09 15 04 	lsl	r9,r8,0x4
80007f30:	e6 1a f0 00 	andh	r10,0xf000,COH
80007f34:	f7 bc 00 fc 	subeq	r12,-4
80007f38:	f2 08 17 00 	moveq	r8,r9
80007f3c:	10 9a       	mov	r10,r8
80007f3e:	f0 09 15 02 	lsl	r9,r8,0x2
80007f42:	e6 1a c0 00 	andh	r10,0xc000,COH
80007f46:	f7 bc 00 fe 	subeq	r12,-2
80007f4a:	f2 08 17 00 	moveq	r8,r9
80007f4e:	58 08       	cp.w	r8,0
80007f50:	5e 5c       	retlt	r12
80007f52:	ed b8 00 1e 	bld	r8,0x1e
80007f56:	f9 bc 01 20 	movne	r12,32
80007f5a:	f7 bc 00 ff 	subeq	r12,-1
80007f5e:	5e fc       	retal	r12

80007f60 <__lo0bits>:
80007f60:	18 99       	mov	r9,r12
80007f62:	78 08       	ld.w	r8,r12[0x0]
80007f64:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007f68:	c1 50       	breq	80007f92 <__lo0bits+0x32>
80007f6a:	ed b8 00 00 	bld	r8,0x0
80007f6e:	c0 21       	brne	80007f72 <__lo0bits+0x12>
80007f70:	5e fd       	retal	0
80007f72:	10 9b       	mov	r11,r8
80007f74:	f0 0a 16 01 	lsr	r10,r8,0x1
80007f78:	e2 1b 00 02 	andl	r11,0x2,COH
80007f7c:	a3 88       	lsr	r8,0x2
80007f7e:	58 0b       	cp.w	r11,0
80007f80:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007f84:	f9 bc 01 01 	movne	r12,1
80007f88:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007f8c:	f9 bc 00 02 	moveq	r12,2
80007f90:	5e fc       	retal	r12
80007f92:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007f96:	f0 0b 16 10 	lsr	r11,r8,0x10
80007f9a:	58 0a       	cp.w	r10,0
80007f9c:	f6 08 17 00 	moveq	r8,r11
80007fa0:	f9 bc 00 10 	moveq	r12,16
80007fa4:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007fa8:	f0 0a 16 08 	lsr	r10,r8,0x8
80007fac:	58 0b       	cp.w	r11,0
80007fae:	f7 bc 00 f8 	subeq	r12,-8
80007fb2:	f4 08 17 00 	moveq	r8,r10
80007fb6:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007fba:	f0 0a 16 04 	lsr	r10,r8,0x4
80007fbe:	58 0b       	cp.w	r11,0
80007fc0:	f7 bc 00 fc 	subeq	r12,-4
80007fc4:	f4 08 17 00 	moveq	r8,r10
80007fc8:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007fcc:	f0 0a 16 02 	lsr	r10,r8,0x2
80007fd0:	58 0b       	cp.w	r11,0
80007fd2:	f7 bc 00 fe 	subeq	r12,-2
80007fd6:	f4 08 17 00 	moveq	r8,r10
80007fda:	ed b8 00 00 	bld	r8,0x0
80007fde:	c0 60       	breq	80007fea <__lo0bits+0x8a>
80007fe0:	a1 98       	lsr	r8,0x1
80007fe2:	c0 31       	brne	80007fe8 <__lo0bits+0x88>
80007fe4:	32 0c       	mov	r12,32
80007fe6:	5e fc       	retal	r12
80007fe8:	2f fc       	sub	r12,-1
80007fea:	93 08       	st.w	r9[0x0],r8
80007fec:	5e fc       	retal	r12

80007fee <__mcmp>:
80007fee:	d4 01       	pushm	lr
80007ff0:	18 98       	mov	r8,r12
80007ff2:	76 49       	ld.w	r9,r11[0x10]
80007ff4:	78 4c       	ld.w	r12,r12[0x10]
80007ff6:	12 1c       	sub	r12,r9
80007ff8:	c1 31       	brne	8000801e <__mcmp+0x30>
80007ffa:	2f b9       	sub	r9,-5
80007ffc:	a3 69       	lsl	r9,0x2
80007ffe:	12 0b       	add	r11,r9
80008000:	f0 09 00 09 	add	r9,r8,r9
80008004:	2e c8       	sub	r8,-20
80008006:	13 4e       	ld.w	lr,--r9
80008008:	17 4a       	ld.w	r10,--r11
8000800a:	14 3e       	cp.w	lr,r10
8000800c:	c0 60       	breq	80008018 <__mcmp+0x2a>
8000800e:	f9 bc 03 ff 	movlo	r12,-1
80008012:	f9 bc 02 01 	movhs	r12,1
80008016:	d8 02       	popm	pc
80008018:	10 39       	cp.w	r9,r8
8000801a:	fe 9b ff f6 	brhi	80008006 <__mcmp+0x18>
8000801e:	d8 02       	popm	pc

80008020 <_Bfree>:
80008020:	d4 21       	pushm	r4-r7,lr
80008022:	18 97       	mov	r7,r12
80008024:	16 95       	mov	r5,r11
80008026:	78 96       	ld.w	r6,r12[0x24]
80008028:	58 06       	cp.w	r6,0
8000802a:	c0 91       	brne	8000803c <_Bfree+0x1c>
8000802c:	31 0c       	mov	r12,16
8000802e:	fe b0 fd 1d 	rcall	80007a68 <malloc>
80008032:	99 36       	st.w	r12[0xc],r6
80008034:	8f 9c       	st.w	r7[0x24],r12
80008036:	99 16       	st.w	r12[0x4],r6
80008038:	99 26       	st.w	r12[0x8],r6
8000803a:	99 06       	st.w	r12[0x0],r6
8000803c:	58 05       	cp.w	r5,0
8000803e:	c0 90       	breq	80008050 <_Bfree+0x30>
80008040:	6a 19       	ld.w	r9,r5[0x4]
80008042:	6e 98       	ld.w	r8,r7[0x24]
80008044:	70 38       	ld.w	r8,r8[0xc]
80008046:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000804a:	8b 0a       	st.w	r5[0x0],r10
8000804c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008050:	d8 22       	popm	r4-r7,pc
80008052:	d7 03       	nop

80008054 <_Balloc>:
80008054:	d4 21       	pushm	r4-r7,lr
80008056:	18 97       	mov	r7,r12
80008058:	16 96       	mov	r6,r11
8000805a:	78 95       	ld.w	r5,r12[0x24]
8000805c:	58 05       	cp.w	r5,0
8000805e:	c0 91       	brne	80008070 <_Balloc+0x1c>
80008060:	31 0c       	mov	r12,16
80008062:	fe b0 fd 03 	rcall	80007a68 <malloc>
80008066:	99 35       	st.w	r12[0xc],r5
80008068:	8f 9c       	st.w	r7[0x24],r12
8000806a:	99 15       	st.w	r12[0x4],r5
8000806c:	99 25       	st.w	r12[0x8],r5
8000806e:	99 05       	st.w	r12[0x0],r5
80008070:	6e 95       	ld.w	r5,r7[0x24]
80008072:	6a 38       	ld.w	r8,r5[0xc]
80008074:	58 08       	cp.w	r8,0
80008076:	c0 b1       	brne	8000808c <_Balloc+0x38>
80008078:	31 0a       	mov	r10,16
8000807a:	30 4b       	mov	r11,4
8000807c:	0e 9c       	mov	r12,r7
8000807e:	e0 a0 04 93 	rcall	800089a4 <_calloc_r>
80008082:	8b 3c       	st.w	r5[0xc],r12
80008084:	6e 98       	ld.w	r8,r7[0x24]
80008086:	70 3c       	ld.w	r12,r8[0xc]
80008088:	58 0c       	cp.w	r12,0
8000808a:	c1 b0       	breq	800080c0 <_Balloc+0x6c>
8000808c:	6e 98       	ld.w	r8,r7[0x24]
8000808e:	70 38       	ld.w	r8,r8[0xc]
80008090:	f0 06 00 28 	add	r8,r8,r6<<0x2
80008094:	70 0c       	ld.w	r12,r8[0x0]
80008096:	58 0c       	cp.w	r12,0
80008098:	c0 40       	breq	800080a0 <_Balloc+0x4c>
8000809a:	78 09       	ld.w	r9,r12[0x0]
8000809c:	91 09       	st.w	r8[0x0],r9
8000809e:	c0 e8       	rjmp	800080ba <_Balloc+0x66>
800080a0:	0e 9c       	mov	r12,r7
800080a2:	30 17       	mov	r7,1
800080a4:	0e 9b       	mov	r11,r7
800080a6:	ee 06 09 47 	lsl	r7,r7,r6
800080aa:	ee ca ff fb 	sub	r10,r7,-5
800080ae:	a3 6a       	lsl	r10,0x2
800080b0:	e0 a0 04 7a 	rcall	800089a4 <_calloc_r>
800080b4:	c0 60       	breq	800080c0 <_Balloc+0x6c>
800080b6:	99 16       	st.w	r12[0x4],r6
800080b8:	99 27       	st.w	r12[0x8],r7
800080ba:	30 08       	mov	r8,0
800080bc:	99 38       	st.w	r12[0xc],r8
800080be:	99 48       	st.w	r12[0x10],r8
800080c0:	d8 22       	popm	r4-r7,pc
800080c2:	d7 03       	nop

800080c4 <__d2b>:
800080c4:	d4 31       	pushm	r0-r7,lr
800080c6:	20 2d       	sub	sp,8
800080c8:	16 93       	mov	r3,r11
800080ca:	12 96       	mov	r6,r9
800080cc:	10 95       	mov	r5,r8
800080ce:	14 92       	mov	r2,r10
800080d0:	30 1b       	mov	r11,1
800080d2:	cc 1f       	rcall	80008054 <_Balloc>
800080d4:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800080d8:	50 09       	stdsp	sp[0x0],r9
800080da:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800080de:	b5 a9       	sbr	r9,0x14
800080e0:	f0 01 16 14 	lsr	r1,r8,0x14
800080e4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800080e8:	18 94       	mov	r4,r12
800080ea:	58 02       	cp.w	r2,0
800080ec:	c1 d0       	breq	80008126 <__d2b+0x62>
800080ee:	fa cc ff f8 	sub	r12,sp,-8
800080f2:	18 d2       	st.w	--r12,r2
800080f4:	c3 6f       	rcall	80007f60 <__lo0bits>
800080f6:	40 18       	lddsp	r8,sp[0x4]
800080f8:	c0 d0       	breq	80008112 <__d2b+0x4e>
800080fa:	40 09       	lddsp	r9,sp[0x0]
800080fc:	f8 0a 11 20 	rsub	r10,r12,32
80008100:	f2 0a 09 4a 	lsl	r10,r9,r10
80008104:	f5 e8 10 08 	or	r8,r10,r8
80008108:	89 58       	st.w	r4[0x14],r8
8000810a:	f2 0c 0a 49 	lsr	r9,r9,r12
8000810e:	50 09       	stdsp	sp[0x0],r9
80008110:	c0 28       	rjmp	80008114 <__d2b+0x50>
80008112:	89 58       	st.w	r4[0x14],r8
80008114:	40 08       	lddsp	r8,sp[0x0]
80008116:	58 08       	cp.w	r8,0
80008118:	f9 b3 01 02 	movne	r3,2
8000811c:	f9 b3 00 01 	moveq	r3,1
80008120:	89 68       	st.w	r4[0x18],r8
80008122:	89 43       	st.w	r4[0x10],r3
80008124:	c0 88       	rjmp	80008134 <__d2b+0x70>
80008126:	1a 9c       	mov	r12,sp
80008128:	c1 cf       	rcall	80007f60 <__lo0bits>
8000812a:	30 13       	mov	r3,1
8000812c:	40 08       	lddsp	r8,sp[0x0]
8000812e:	2e 0c       	sub	r12,-32
80008130:	89 43       	st.w	r4[0x10],r3
80008132:	89 58       	st.w	r4[0x14],r8
80008134:	58 01       	cp.w	r1,0
80008136:	c0 90       	breq	80008148 <__d2b+0x84>
80008138:	e2 c1 04 33 	sub	r1,r1,1075
8000813c:	18 01       	add	r1,r12
8000813e:	8d 01       	st.w	r6[0x0],r1
80008140:	f8 0c 11 35 	rsub	r12,r12,53
80008144:	8b 0c       	st.w	r5[0x0],r12
80008146:	c0 c8       	rjmp	8000815e <__d2b+0x9a>
80008148:	e6 c8 ff fc 	sub	r8,r3,-4
8000814c:	f8 cc 04 32 	sub	r12,r12,1074
80008150:	a5 73       	lsl	r3,0x5
80008152:	8d 0c       	st.w	r6[0x0],r12
80008154:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80008158:	cd 4e       	rcall	80007f00 <__hi0bits>
8000815a:	18 13       	sub	r3,r12
8000815c:	8b 03       	st.w	r5[0x0],r3
8000815e:	08 9c       	mov	r12,r4
80008160:	2f ed       	sub	sp,-8
80008162:	d8 32       	popm	r0-r7,pc

80008164 <__mdiff>:
80008164:	d4 31       	pushm	r0-r7,lr
80008166:	74 48       	ld.w	r8,r10[0x10]
80008168:	76 45       	ld.w	r5,r11[0x10]
8000816a:	16 97       	mov	r7,r11
8000816c:	14 96       	mov	r6,r10
8000816e:	10 15       	sub	r5,r8
80008170:	c1 31       	brne	80008196 <__mdiff+0x32>
80008172:	2f b8       	sub	r8,-5
80008174:	ee ce ff ec 	sub	lr,r7,-20
80008178:	a3 68       	lsl	r8,0x2
8000817a:	f4 08 00 0b 	add	r11,r10,r8
8000817e:	ee 08 00 08 	add	r8,r7,r8
80008182:	11 4a       	ld.w	r10,--r8
80008184:	17 49       	ld.w	r9,--r11
80008186:	12 3a       	cp.w	r10,r9
80008188:	c0 30       	breq	8000818e <__mdiff+0x2a>
8000818a:	c0 e2       	brcc	800081a6 <__mdiff+0x42>
8000818c:	c0 78       	rjmp	8000819a <__mdiff+0x36>
8000818e:	1c 38       	cp.w	r8,lr
80008190:	fe 9b ff f9 	brhi	80008182 <__mdiff+0x1e>
80008194:	c4 98       	rjmp	80008226 <__mdiff+0xc2>
80008196:	58 05       	cp.w	r5,0
80008198:	c0 64       	brge	800081a4 <__mdiff+0x40>
8000819a:	0e 98       	mov	r8,r7
8000819c:	30 15       	mov	r5,1
8000819e:	0c 97       	mov	r7,r6
800081a0:	10 96       	mov	r6,r8
800081a2:	c0 28       	rjmp	800081a6 <__mdiff+0x42>
800081a4:	30 05       	mov	r5,0
800081a6:	6e 1b       	ld.w	r11,r7[0x4]
800081a8:	c5 6f       	rcall	80008054 <_Balloc>
800081aa:	6e 49       	ld.w	r9,r7[0x10]
800081ac:	6c 44       	ld.w	r4,r6[0x10]
800081ae:	99 35       	st.w	r12[0xc],r5
800081b0:	2f b4       	sub	r4,-5
800081b2:	f2 c5 ff fb 	sub	r5,r9,-5
800081b6:	ec 04 00 24 	add	r4,r6,r4<<0x2
800081ba:	ee 05 00 25 	add	r5,r7,r5<<0x2
800081be:	2e c6       	sub	r6,-20
800081c0:	2e c7       	sub	r7,-20
800081c2:	f8 c8 ff ec 	sub	r8,r12,-20
800081c6:	30 0a       	mov	r10,0
800081c8:	0f 0e       	ld.w	lr,r7++
800081ca:	0d 0b       	ld.w	r11,r6++
800081cc:	fc 02 16 10 	lsr	r2,lr,0x10
800081d0:	f6 03 16 10 	lsr	r3,r11,0x10
800081d4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800081d8:	e4 03 01 03 	sub	r3,r2,r3
800081dc:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800081e0:	fc 0b 01 0b 	sub	r11,lr,r11
800081e4:	f6 0a 00 0a 	add	r10,r11,r10
800081e8:	b0 1a       	st.h	r8[0x2],r10
800081ea:	b1 4a       	asr	r10,0x10
800081ec:	e6 0a 00 0a 	add	r10,r3,r10
800081f0:	b0 0a       	st.h	r8[0x0],r10
800081f2:	2f c8       	sub	r8,-4
800081f4:	b1 4a       	asr	r10,0x10
800081f6:	08 36       	cp.w	r6,r4
800081f8:	ce 83       	brcs	800081c8 <__mdiff+0x64>
800081fa:	c0 d8       	rjmp	80008214 <__mdiff+0xb0>
800081fc:	0f 0b       	ld.w	r11,r7++
800081fe:	f6 0e 16 10 	lsr	lr,r11,0x10
80008202:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008206:	16 0a       	add	r10,r11
80008208:	b0 1a       	st.h	r8[0x2],r10
8000820a:	b1 4a       	asr	r10,0x10
8000820c:	1c 0a       	add	r10,lr
8000820e:	b0 0a       	st.h	r8[0x0],r10
80008210:	2f c8       	sub	r8,-4
80008212:	b1 4a       	asr	r10,0x10
80008214:	0a 37       	cp.w	r7,r5
80008216:	cf 33       	brcs	800081fc <__mdiff+0x98>
80008218:	c0 28       	rjmp	8000821c <__mdiff+0xb8>
8000821a:	20 19       	sub	r9,1
8000821c:	11 4a       	ld.w	r10,--r8
8000821e:	58 0a       	cp.w	r10,0
80008220:	cf d0       	breq	8000821a <__mdiff+0xb6>
80008222:	99 49       	st.w	r12[0x10],r9
80008224:	d8 32       	popm	r0-r7,pc
80008226:	30 0b       	mov	r11,0
80008228:	c1 6f       	rcall	80008054 <_Balloc>
8000822a:	30 18       	mov	r8,1
8000822c:	99 48       	st.w	r12[0x10],r8
8000822e:	30 08       	mov	r8,0
80008230:	99 58       	st.w	r12[0x14],r8
80008232:	d8 32       	popm	r0-r7,pc

80008234 <__lshift>:
80008234:	d4 31       	pushm	r0-r7,lr
80008236:	16 97       	mov	r7,r11
80008238:	76 46       	ld.w	r6,r11[0x10]
8000823a:	f4 02 14 05 	asr	r2,r10,0x5
8000823e:	2f f6       	sub	r6,-1
80008240:	14 93       	mov	r3,r10
80008242:	18 94       	mov	r4,r12
80008244:	04 06       	add	r6,r2
80008246:	76 1b       	ld.w	r11,r11[0x4]
80008248:	6e 28       	ld.w	r8,r7[0x8]
8000824a:	c0 38       	rjmp	80008250 <__lshift+0x1c>
8000824c:	2f fb       	sub	r11,-1
8000824e:	a1 78       	lsl	r8,0x1
80008250:	10 36       	cp.w	r6,r8
80008252:	fe 99 ff fd 	brgt	8000824c <__lshift+0x18>
80008256:	08 9c       	mov	r12,r4
80008258:	cf ee       	rcall	80008054 <_Balloc>
8000825a:	30 09       	mov	r9,0
8000825c:	18 95       	mov	r5,r12
8000825e:	f8 c8 ff ec 	sub	r8,r12,-20
80008262:	12 9a       	mov	r10,r9
80008264:	c0 38       	rjmp	8000826a <__lshift+0x36>
80008266:	10 aa       	st.w	r8++,r10
80008268:	2f f9       	sub	r9,-1
8000826a:	04 39       	cp.w	r9,r2
8000826c:	cf d5       	brlt	80008266 <__lshift+0x32>
8000826e:	6e 4b       	ld.w	r11,r7[0x10]
80008270:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008274:	2f bb       	sub	r11,-5
80008276:	ee c9 ff ec 	sub	r9,r7,-20
8000827a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000827e:	58 03       	cp.w	r3,0
80008280:	c1 30       	breq	800082a6 <__lshift+0x72>
80008282:	e6 0c 11 20 	rsub	r12,r3,32
80008286:	30 0a       	mov	r10,0
80008288:	72 02       	ld.w	r2,r9[0x0]
8000828a:	e4 03 09 42 	lsl	r2,r2,r3
8000828e:	04 4a       	or	r10,r2
80008290:	10 aa       	st.w	r8++,r10
80008292:	13 0a       	ld.w	r10,r9++
80008294:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008298:	16 39       	cp.w	r9,r11
8000829a:	cf 73       	brcs	80008288 <__lshift+0x54>
8000829c:	91 0a       	st.w	r8[0x0],r10
8000829e:	58 0a       	cp.w	r10,0
800082a0:	c0 70       	breq	800082ae <__lshift+0x7a>
800082a2:	2f f6       	sub	r6,-1
800082a4:	c0 58       	rjmp	800082ae <__lshift+0x7a>
800082a6:	13 0a       	ld.w	r10,r9++
800082a8:	10 aa       	st.w	r8++,r10
800082aa:	16 39       	cp.w	r9,r11
800082ac:	cf d3       	brcs	800082a6 <__lshift+0x72>
800082ae:	08 9c       	mov	r12,r4
800082b0:	20 16       	sub	r6,1
800082b2:	0e 9b       	mov	r11,r7
800082b4:	8b 46       	st.w	r5[0x10],r6
800082b6:	cb 5e       	rcall	80008020 <_Bfree>
800082b8:	0a 9c       	mov	r12,r5
800082ba:	d8 32       	popm	r0-r7,pc

800082bc <__multiply>:
800082bc:	d4 31       	pushm	r0-r7,lr
800082be:	20 2d       	sub	sp,8
800082c0:	76 49       	ld.w	r9,r11[0x10]
800082c2:	74 48       	ld.w	r8,r10[0x10]
800082c4:	16 96       	mov	r6,r11
800082c6:	14 95       	mov	r5,r10
800082c8:	10 39       	cp.w	r9,r8
800082ca:	ec 08 17 50 	movlt	r8,r6
800082ce:	ea 06 17 50 	movlt	r6,r5
800082d2:	f0 05 17 50 	movlt	r5,r8
800082d6:	6c 28       	ld.w	r8,r6[0x8]
800082d8:	76 43       	ld.w	r3,r11[0x10]
800082da:	74 42       	ld.w	r2,r10[0x10]
800082dc:	76 1b       	ld.w	r11,r11[0x4]
800082de:	e4 03 00 07 	add	r7,r2,r3
800082e2:	10 37       	cp.w	r7,r8
800082e4:	f7 bb 09 ff 	subgt	r11,-1
800082e8:	cb 6e       	rcall	80008054 <_Balloc>
800082ea:	ee c4 ff fb 	sub	r4,r7,-5
800082ee:	f8 c9 ff ec 	sub	r9,r12,-20
800082f2:	f8 04 00 24 	add	r4,r12,r4<<0x2
800082f6:	30 0a       	mov	r10,0
800082f8:	12 98       	mov	r8,r9
800082fa:	c0 28       	rjmp	800082fe <__multiply+0x42>
800082fc:	10 aa       	st.w	r8++,r10
800082fe:	08 38       	cp.w	r8,r4
80008300:	cf e3       	brcs	800082fc <__multiply+0x40>
80008302:	2f b3       	sub	r3,-5
80008304:	2f b2       	sub	r2,-5
80008306:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000830a:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000830e:	ec cb ff ec 	sub	r11,r6,-20
80008312:	50 12       	stdsp	sp[0x4],r2
80008314:	ea ca ff ec 	sub	r10,r5,-20
80008318:	c4 48       	rjmp	800083a0 <__multiply+0xe4>
8000831a:	94 95       	ld.uh	r5,r10[0x2]
8000831c:	58 05       	cp.w	r5,0
8000831e:	c2 00       	breq	8000835e <__multiply+0xa2>
80008320:	12 98       	mov	r8,r9
80008322:	16 96       	mov	r6,r11
80008324:	30 0e       	mov	lr,0
80008326:	50 09       	stdsp	sp[0x0],r9
80008328:	0d 02       	ld.w	r2,r6++
8000832a:	e4 00 16 10 	lsr	r0,r2,0x10
8000832e:	70 01       	ld.w	r1,r8[0x0]
80008330:	70 09       	ld.w	r9,r8[0x0]
80008332:	b1 81       	lsr	r1,0x10
80008334:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80008338:	e0 05 03 41 	mac	r1,r0,r5
8000833c:	ab 32       	mul	r2,r5
8000833e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008342:	00 02       	add	r2,r0
80008344:	e4 0e 00 0e 	add	lr,r2,lr
80008348:	b0 1e       	st.h	r8[0x2],lr
8000834a:	b1 8e       	lsr	lr,0x10
8000834c:	1c 01       	add	r1,lr
8000834e:	b0 01       	st.h	r8[0x0],r1
80008350:	e2 0e 16 10 	lsr	lr,r1,0x10
80008354:	2f c8       	sub	r8,-4
80008356:	06 36       	cp.w	r6,r3
80008358:	ce 83       	brcs	80008328 <__multiply+0x6c>
8000835a:	40 09       	lddsp	r9,sp[0x0]
8000835c:	91 0e       	st.w	r8[0x0],lr
8000835e:	94 86       	ld.uh	r6,r10[0x0]
80008360:	58 06       	cp.w	r6,0
80008362:	c1 d0       	breq	8000839c <__multiply+0xe0>
80008364:	72 02       	ld.w	r2,r9[0x0]
80008366:	12 98       	mov	r8,r9
80008368:	16 9e       	mov	lr,r11
8000836a:	30 05       	mov	r5,0
8000836c:	b0 12       	st.h	r8[0x2],r2
8000836e:	1d 01       	ld.w	r1,lr++
80008370:	90 82       	ld.uh	r2,r8[0x0]
80008372:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80008376:	ad 30       	mul	r0,r6
80008378:	e0 02 00 02 	add	r2,r0,r2
8000837c:	e4 05 00 05 	add	r5,r2,r5
80008380:	b0 05       	st.h	r8[0x0],r5
80008382:	b1 85       	lsr	r5,0x10
80008384:	b1 81       	lsr	r1,0x10
80008386:	2f c8       	sub	r8,-4
80008388:	ad 31       	mul	r1,r6
8000838a:	90 92       	ld.uh	r2,r8[0x2]
8000838c:	e2 02 00 02 	add	r2,r1,r2
80008390:	0a 02       	add	r2,r5
80008392:	e4 05 16 10 	lsr	r5,r2,0x10
80008396:	06 3e       	cp.w	lr,r3
80008398:	ce a3       	brcs	8000836c <__multiply+0xb0>
8000839a:	91 02       	st.w	r8[0x0],r2
8000839c:	2f ca       	sub	r10,-4
8000839e:	2f c9       	sub	r9,-4
800083a0:	40 18       	lddsp	r8,sp[0x4]
800083a2:	10 3a       	cp.w	r10,r8
800083a4:	cb b3       	brcs	8000831a <__multiply+0x5e>
800083a6:	c0 28       	rjmp	800083aa <__multiply+0xee>
800083a8:	20 17       	sub	r7,1
800083aa:	58 07       	cp.w	r7,0
800083ac:	e0 8a 00 05 	brle	800083b6 <__multiply+0xfa>
800083b0:	09 48       	ld.w	r8,--r4
800083b2:	58 08       	cp.w	r8,0
800083b4:	cf a0       	breq	800083a8 <__multiply+0xec>
800083b6:	99 47       	st.w	r12[0x10],r7
800083b8:	2f ed       	sub	sp,-8
800083ba:	d8 32       	popm	r0-r7,pc

800083bc <__i2b>:
800083bc:	d4 21       	pushm	r4-r7,lr
800083be:	16 97       	mov	r7,r11
800083c0:	30 1b       	mov	r11,1
800083c2:	c4 9e       	rcall	80008054 <_Balloc>
800083c4:	30 19       	mov	r9,1
800083c6:	99 57       	st.w	r12[0x14],r7
800083c8:	99 49       	st.w	r12[0x10],r9
800083ca:	d8 22       	popm	r4-r7,pc

800083cc <__multadd>:
800083cc:	d4 31       	pushm	r0-r7,lr
800083ce:	30 08       	mov	r8,0
800083d0:	12 95       	mov	r5,r9
800083d2:	16 97       	mov	r7,r11
800083d4:	18 96       	mov	r6,r12
800083d6:	76 44       	ld.w	r4,r11[0x10]
800083d8:	f6 c9 ff ec 	sub	r9,r11,-20
800083dc:	72 0b       	ld.w	r11,r9[0x0]
800083de:	f6 0c 16 10 	lsr	r12,r11,0x10
800083e2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800083e6:	f4 0c 02 4c 	mul	r12,r10,r12
800083ea:	f4 0b 03 45 	mac	r5,r10,r11
800083ee:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800083f2:	b1 85       	lsr	r5,0x10
800083f4:	18 05       	add	r5,r12
800083f6:	ea 0c 15 10 	lsl	r12,r5,0x10
800083fa:	f8 0b 00 0b 	add	r11,r12,r11
800083fe:	12 ab       	st.w	r9++,r11
80008400:	2f f8       	sub	r8,-1
80008402:	b1 85       	lsr	r5,0x10
80008404:	08 38       	cp.w	r8,r4
80008406:	ce b5       	brlt	800083dc <__multadd+0x10>
80008408:	58 05       	cp.w	r5,0
8000840a:	c1 c0       	breq	80008442 <__multadd+0x76>
8000840c:	6e 28       	ld.w	r8,r7[0x8]
8000840e:	10 34       	cp.w	r4,r8
80008410:	c1 35       	brlt	80008436 <__multadd+0x6a>
80008412:	6e 1b       	ld.w	r11,r7[0x4]
80008414:	0c 9c       	mov	r12,r6
80008416:	2f fb       	sub	r11,-1
80008418:	c1 ee       	rcall	80008054 <_Balloc>
8000841a:	6e 4a       	ld.w	r10,r7[0x10]
8000841c:	ee cb ff f4 	sub	r11,r7,-12
80008420:	18 93       	mov	r3,r12
80008422:	2f ea       	sub	r10,-2
80008424:	2f 4c       	sub	r12,-12
80008426:	a3 6a       	lsl	r10,0x2
80008428:	fe b0 de 3d 	rcall	800040a2 <memcpy>
8000842c:	0e 9b       	mov	r11,r7
8000842e:	0c 9c       	mov	r12,r6
80008430:	fe b0 fd f8 	rcall	80008020 <_Bfree>
80008434:	06 97       	mov	r7,r3
80008436:	e8 c8 ff ff 	sub	r8,r4,-1
8000843a:	2f b4       	sub	r4,-5
8000843c:	8f 48       	st.w	r7[0x10],r8
8000843e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008442:	0e 9c       	mov	r12,r7
80008444:	d8 32       	popm	r0-r7,pc
80008446:	d7 03       	nop

80008448 <__pow5mult>:
80008448:	d4 31       	pushm	r0-r7,lr
8000844a:	14 96       	mov	r6,r10
8000844c:	18 97       	mov	r7,r12
8000844e:	16 94       	mov	r4,r11
80008450:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008454:	c0 90       	breq	80008466 <__pow5mult+0x1e>
80008456:	20 18       	sub	r8,1
80008458:	fe c9 e2 b4 	sub	r9,pc,-7500
8000845c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008460:	30 09       	mov	r9,0
80008462:	cb 5f       	rcall	800083cc <__multadd>
80008464:	18 94       	mov	r4,r12
80008466:	a3 46       	asr	r6,0x2
80008468:	c3 40       	breq	800084d0 <__pow5mult+0x88>
8000846a:	6e 95       	ld.w	r5,r7[0x24]
8000846c:	58 05       	cp.w	r5,0
8000846e:	c0 91       	brne	80008480 <__pow5mult+0x38>
80008470:	31 0c       	mov	r12,16
80008472:	fe b0 fa fb 	rcall	80007a68 <malloc>
80008476:	99 35       	st.w	r12[0xc],r5
80008478:	8f 9c       	st.w	r7[0x24],r12
8000847a:	99 15       	st.w	r12[0x4],r5
8000847c:	99 25       	st.w	r12[0x8],r5
8000847e:	99 05       	st.w	r12[0x0],r5
80008480:	6e 93       	ld.w	r3,r7[0x24]
80008482:	66 25       	ld.w	r5,r3[0x8]
80008484:	58 05       	cp.w	r5,0
80008486:	c0 c1       	brne	8000849e <__pow5mult+0x56>
80008488:	e0 6b 02 71 	mov	r11,625
8000848c:	0e 9c       	mov	r12,r7
8000848e:	c9 7f       	rcall	800083bc <__i2b>
80008490:	87 2c       	st.w	r3[0x8],r12
80008492:	30 08       	mov	r8,0
80008494:	18 95       	mov	r5,r12
80008496:	99 08       	st.w	r12[0x0],r8
80008498:	c0 38       	rjmp	8000849e <__pow5mult+0x56>
8000849a:	06 9c       	mov	r12,r3
8000849c:	18 95       	mov	r5,r12
8000849e:	ed b6 00 00 	bld	r6,0x0
800084a2:	c0 b1       	brne	800084b8 <__pow5mult+0x70>
800084a4:	08 9b       	mov	r11,r4
800084a6:	0a 9a       	mov	r10,r5
800084a8:	0e 9c       	mov	r12,r7
800084aa:	c0 9f       	rcall	800082bc <__multiply>
800084ac:	08 9b       	mov	r11,r4
800084ae:	18 93       	mov	r3,r12
800084b0:	0e 9c       	mov	r12,r7
800084b2:	06 94       	mov	r4,r3
800084b4:	fe b0 fd b6 	rcall	80008020 <_Bfree>
800084b8:	a1 56       	asr	r6,0x1
800084ba:	c0 b0       	breq	800084d0 <__pow5mult+0x88>
800084bc:	6a 03       	ld.w	r3,r5[0x0]
800084be:	58 03       	cp.w	r3,0
800084c0:	ce d1       	brne	8000849a <__pow5mult+0x52>
800084c2:	0a 9a       	mov	r10,r5
800084c4:	0a 9b       	mov	r11,r5
800084c6:	0e 9c       	mov	r12,r7
800084c8:	cf ae       	rcall	800082bc <__multiply>
800084ca:	8b 0c       	st.w	r5[0x0],r12
800084cc:	99 03       	st.w	r12[0x0],r3
800084ce:	ce 7b       	rjmp	8000849c <__pow5mult+0x54>
800084d0:	08 9c       	mov	r12,r4
800084d2:	d8 32       	popm	r0-r7,pc

800084d4 <_realloc_r>:
800084d4:	d4 31       	pushm	r0-r7,lr
800084d6:	20 1d       	sub	sp,4
800084d8:	16 94       	mov	r4,r11
800084da:	18 92       	mov	r2,r12
800084dc:	14 9b       	mov	r11,r10
800084de:	58 04       	cp.w	r4,0
800084e0:	c0 51       	brne	800084ea <_realloc_r+0x16>
800084e2:	fe b0 fa cb 	rcall	80007a78 <_malloc_r>
800084e6:	18 95       	mov	r5,r12
800084e8:	c5 39       	rjmp	8000878e <_realloc_r+0x2ba>
800084ea:	50 0a       	stdsp	sp[0x0],r10
800084ec:	fe b0 fd 08 	rcall	80007efc <__malloc_lock>
800084f0:	40 0b       	lddsp	r11,sp[0x0]
800084f2:	f6 c8 ff f5 	sub	r8,r11,-11
800084f6:	e8 c1 00 08 	sub	r1,r4,8
800084fa:	10 96       	mov	r6,r8
800084fc:	62 1c       	ld.w	r12,r1[0x4]
800084fe:	e0 16 ff f8 	andl	r6,0xfff8
80008502:	59 68       	cp.w	r8,22
80008504:	f9 b6 08 10 	movls	r6,16
80008508:	16 36       	cp.w	r6,r11
8000850a:	5f 38       	srlo	r8
8000850c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008510:	c0 50       	breq	8000851a <_realloc_r+0x46>
80008512:	30 c8       	mov	r8,12
80008514:	30 05       	mov	r5,0
80008516:	85 38       	st.w	r2[0xc],r8
80008518:	c3 b9       	rjmp	8000878e <_realloc_r+0x2ba>
8000851a:	18 90       	mov	r0,r12
8000851c:	e0 10 ff fc 	andl	r0,0xfffc
80008520:	0c 30       	cp.w	r0,r6
80008522:	e0 84 01 0b 	brge	80008738 <_realloc_r+0x264>
80008526:	e0 68 01 1c 	mov	r8,284
8000852a:	e2 00 00 09 	add	r9,r1,r0
8000852e:	70 25       	ld.w	r5,r8[0x8]
80008530:	0a 39       	cp.w	r9,r5
80008532:	c0 90       	breq	80008544 <_realloc_r+0x70>
80008534:	72 1a       	ld.w	r10,r9[0x4]
80008536:	a1 ca       	cbr	r10,0x0
80008538:	f2 0a 00 0a 	add	r10,r9,r10
8000853c:	74 1a       	ld.w	r10,r10[0x4]
8000853e:	ed ba 00 00 	bld	r10,0x0
80008542:	c2 20       	breq	80008586 <_realloc_r+0xb2>
80008544:	72 1a       	ld.w	r10,r9[0x4]
80008546:	e0 1a ff fc 	andl	r10,0xfffc
8000854a:	f4 00 00 03 	add	r3,r10,r0
8000854e:	0a 39       	cp.w	r9,r5
80008550:	c1 31       	brne	80008576 <_realloc_r+0xa2>
80008552:	ec c7 ff f0 	sub	r7,r6,-16
80008556:	0e 33       	cp.w	r3,r7
80008558:	c1 95       	brlt	8000858a <_realloc_r+0xb6>
8000855a:	e2 06 00 09 	add	r9,r1,r6
8000855e:	0c 13       	sub	r3,r6
80008560:	a1 a3       	sbr	r3,0x0
80008562:	93 13       	st.w	r9[0x4],r3
80008564:	91 29       	st.w	r8[0x8],r9
80008566:	04 9c       	mov	r12,r2
80008568:	62 18       	ld.w	r8,r1[0x4]
8000856a:	08 95       	mov	r5,r4
8000856c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008570:	10 46       	or	r6,r8
80008572:	83 16       	st.w	r1[0x4],r6
80008574:	c0 b9       	rjmp	8000878a <_realloc_r+0x2b6>
80008576:	0c 33       	cp.w	r3,r6
80008578:	c0 95       	brlt	8000858a <_realloc_r+0xb6>
8000857a:	72 28       	ld.w	r8,r9[0x8]
8000857c:	02 97       	mov	r7,r1
8000857e:	72 39       	ld.w	r9,r9[0xc]
80008580:	93 28       	st.w	r9[0x8],r8
80008582:	91 39       	st.w	r8[0xc],r9
80008584:	cd c8       	rjmp	8000873c <_realloc_r+0x268>
80008586:	30 0a       	mov	r10,0
80008588:	14 99       	mov	r9,r10
8000858a:	ed bc 00 00 	bld	r12,0x0
8000858e:	e0 80 00 95 	breq	800086b8 <_realloc_r+0x1e4>
80008592:	62 07       	ld.w	r7,r1[0x0]
80008594:	e2 07 01 07 	sub	r7,r1,r7
80008598:	6e 1c       	ld.w	r12,r7[0x4]
8000859a:	e0 1c ff fc 	andl	r12,0xfffc
8000859e:	58 09       	cp.w	r9,0
800085a0:	c5 60       	breq	8000864c <_realloc_r+0x178>
800085a2:	f8 00 00 03 	add	r3,r12,r0
800085a6:	0a 39       	cp.w	r9,r5
800085a8:	c4 81       	brne	80008638 <_realloc_r+0x164>
800085aa:	14 03       	add	r3,r10
800085ac:	ec c9 ff f0 	sub	r9,r6,-16
800085b0:	12 33       	cp.w	r3,r9
800085b2:	c4 d5       	brlt	8000864c <_realloc_r+0x178>
800085b4:	6e 3a       	ld.w	r10,r7[0xc]
800085b6:	6e 29       	ld.w	r9,r7[0x8]
800085b8:	95 29       	st.w	r10[0x8],r9
800085ba:	93 3a       	st.w	r9[0xc],r10
800085bc:	ee c5 ff f8 	sub	r5,r7,-8
800085c0:	e0 ca 00 04 	sub	r10,r0,4
800085c4:	e0 4a 00 24 	cp.w	r10,36
800085c8:	e0 8b 00 25 	brhi	80008612 <_realloc_r+0x13e>
800085cc:	0a 99       	mov	r9,r5
800085ce:	59 3a       	cp.w	r10,19
800085d0:	e0 88 00 1a 	brls	80008604 <_realloc_r+0x130>
800085d4:	09 09       	ld.w	r9,r4++
800085d6:	8b 09       	st.w	r5[0x0],r9
800085d8:	09 09       	ld.w	r9,r4++
800085da:	8f 39       	st.w	r7[0xc],r9
800085dc:	ee c9 ff f0 	sub	r9,r7,-16
800085e0:	59 ba       	cp.w	r10,27
800085e2:	e0 88 00 11 	brls	80008604 <_realloc_r+0x130>
800085e6:	09 0b       	ld.w	r11,r4++
800085e8:	93 0b       	st.w	r9[0x0],r11
800085ea:	09 09       	ld.w	r9,r4++
800085ec:	8f 59       	st.w	r7[0x14],r9
800085ee:	ee c9 ff e8 	sub	r9,r7,-24
800085f2:	e0 4a 00 24 	cp.w	r10,36
800085f6:	c0 71       	brne	80008604 <_realloc_r+0x130>
800085f8:	09 0a       	ld.w	r10,r4++
800085fa:	93 0a       	st.w	r9[0x0],r10
800085fc:	ee c9 ff e0 	sub	r9,r7,-32
80008600:	09 0a       	ld.w	r10,r4++
80008602:	8f 7a       	st.w	r7[0x1c],r10
80008604:	09 0a       	ld.w	r10,r4++
80008606:	12 aa       	st.w	r9++,r10
80008608:	68 0a       	ld.w	r10,r4[0x0]
8000860a:	93 0a       	st.w	r9[0x0],r10
8000860c:	68 1a       	ld.w	r10,r4[0x4]
8000860e:	93 1a       	st.w	r9[0x4],r10
80008610:	c0 78       	rjmp	8000861e <_realloc_r+0x14a>
80008612:	50 08       	stdsp	sp[0x0],r8
80008614:	08 9b       	mov	r11,r4
80008616:	0a 9c       	mov	r12,r5
80008618:	fe b0 fc 53 	rcall	80007ebe <memmove>
8000861c:	40 08       	lddsp	r8,sp[0x0]
8000861e:	ee 06 00 09 	add	r9,r7,r6
80008622:	0c 13       	sub	r3,r6
80008624:	a1 a3       	sbr	r3,0x0
80008626:	93 13       	st.w	r9[0x4],r3
80008628:	91 29       	st.w	r8[0x8],r9
8000862a:	04 9c       	mov	r12,r2
8000862c:	6e 18       	ld.w	r8,r7[0x4]
8000862e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008632:	10 46       	or	r6,r8
80008634:	8f 16       	st.w	r7[0x4],r6
80008636:	ca a8       	rjmp	8000878a <_realloc_r+0x2b6>
80008638:	14 03       	add	r3,r10
8000863a:	0c 33       	cp.w	r3,r6
8000863c:	c0 85       	brlt	8000864c <_realloc_r+0x178>
8000863e:	72 28       	ld.w	r8,r9[0x8]
80008640:	72 39       	ld.w	r9,r9[0xc]
80008642:	93 28       	st.w	r9[0x8],r8
80008644:	91 39       	st.w	r8[0xc],r9
80008646:	6e 28       	ld.w	r8,r7[0x8]
80008648:	6e 39       	ld.w	r9,r7[0xc]
8000864a:	c0 78       	rjmp	80008658 <_realloc_r+0x184>
8000864c:	f8 00 00 03 	add	r3,r12,r0
80008650:	0c 33       	cp.w	r3,r6
80008652:	c3 35       	brlt	800086b8 <_realloc_r+0x1e4>
80008654:	6e 39       	ld.w	r9,r7[0xc]
80008656:	6e 28       	ld.w	r8,r7[0x8]
80008658:	93 28       	st.w	r9[0x8],r8
8000865a:	91 39       	st.w	r8[0xc],r9
8000865c:	e0 ca 00 04 	sub	r10,r0,4
80008660:	ee cc ff f8 	sub	r12,r7,-8
80008664:	e0 4a 00 24 	cp.w	r10,36
80008668:	e0 8b 00 24 	brhi	800086b0 <_realloc_r+0x1dc>
8000866c:	59 3a       	cp.w	r10,19
8000866e:	e0 88 00 1a 	brls	800086a2 <_realloc_r+0x1ce>
80008672:	09 08       	ld.w	r8,r4++
80008674:	99 08       	st.w	r12[0x0],r8
80008676:	09 08       	ld.w	r8,r4++
80008678:	8f 38       	st.w	r7[0xc],r8
8000867a:	ee cc ff f0 	sub	r12,r7,-16
8000867e:	59 ba       	cp.w	r10,27
80008680:	e0 88 00 11 	brls	800086a2 <_realloc_r+0x1ce>
80008684:	09 08       	ld.w	r8,r4++
80008686:	99 08       	st.w	r12[0x0],r8
80008688:	09 08       	ld.w	r8,r4++
8000868a:	8f 58       	st.w	r7[0x14],r8
8000868c:	ee cc ff e8 	sub	r12,r7,-24
80008690:	e0 4a 00 24 	cp.w	r10,36
80008694:	c0 71       	brne	800086a2 <_realloc_r+0x1ce>
80008696:	09 08       	ld.w	r8,r4++
80008698:	99 08       	st.w	r12[0x0],r8
8000869a:	ee cc ff e0 	sub	r12,r7,-32
8000869e:	09 08       	ld.w	r8,r4++
800086a0:	8f 78       	st.w	r7[0x1c],r8
800086a2:	09 08       	ld.w	r8,r4++
800086a4:	18 a8       	st.w	r12++,r8
800086a6:	68 08       	ld.w	r8,r4[0x0]
800086a8:	99 08       	st.w	r12[0x0],r8
800086aa:	68 18       	ld.w	r8,r4[0x4]
800086ac:	99 18       	st.w	r12[0x4],r8
800086ae:	c4 78       	rjmp	8000873c <_realloc_r+0x268>
800086b0:	08 9b       	mov	r11,r4
800086b2:	fe b0 fc 06 	rcall	80007ebe <memmove>
800086b6:	c4 38       	rjmp	8000873c <_realloc_r+0x268>
800086b8:	04 9c       	mov	r12,r2
800086ba:	fe b0 f9 df 	rcall	80007a78 <_malloc_r>
800086be:	18 95       	mov	r5,r12
800086c0:	c3 a0       	breq	80008734 <_realloc_r+0x260>
800086c2:	62 18       	ld.w	r8,r1[0x4]
800086c4:	f8 c9 00 08 	sub	r9,r12,8
800086c8:	a1 c8       	cbr	r8,0x0
800086ca:	e2 08 00 08 	add	r8,r1,r8
800086ce:	10 39       	cp.w	r9,r8
800086d0:	c0 71       	brne	800086de <_realloc_r+0x20a>
800086d2:	72 13       	ld.w	r3,r9[0x4]
800086d4:	02 97       	mov	r7,r1
800086d6:	e0 13 ff fc 	andl	r3,0xfffc
800086da:	00 03       	add	r3,r0
800086dc:	c3 08       	rjmp	8000873c <_realloc_r+0x268>
800086de:	e0 ca 00 04 	sub	r10,r0,4
800086e2:	e0 4a 00 24 	cp.w	r10,36
800086e6:	e0 8b 00 20 	brhi	80008726 <_realloc_r+0x252>
800086ea:	08 99       	mov	r9,r4
800086ec:	18 98       	mov	r8,r12
800086ee:	59 3a       	cp.w	r10,19
800086f0:	e0 88 00 14 	brls	80008718 <_realloc_r+0x244>
800086f4:	13 0b       	ld.w	r11,r9++
800086f6:	10 ab       	st.w	r8++,r11
800086f8:	13 0b       	ld.w	r11,r9++
800086fa:	10 ab       	st.w	r8++,r11
800086fc:	59 ba       	cp.w	r10,27
800086fe:	e0 88 00 0d 	brls	80008718 <_realloc_r+0x244>
80008702:	13 0b       	ld.w	r11,r9++
80008704:	10 ab       	st.w	r8++,r11
80008706:	13 0b       	ld.w	r11,r9++
80008708:	10 ab       	st.w	r8++,r11
8000870a:	e0 4a 00 24 	cp.w	r10,36
8000870e:	c0 51       	brne	80008718 <_realloc_r+0x244>
80008710:	13 0a       	ld.w	r10,r9++
80008712:	10 aa       	st.w	r8++,r10
80008714:	13 0a       	ld.w	r10,r9++
80008716:	10 aa       	st.w	r8++,r10
80008718:	13 0a       	ld.w	r10,r9++
8000871a:	10 aa       	st.w	r8++,r10
8000871c:	72 0a       	ld.w	r10,r9[0x0]
8000871e:	91 0a       	st.w	r8[0x0],r10
80008720:	72 19       	ld.w	r9,r9[0x4]
80008722:	91 19       	st.w	r8[0x4],r9
80008724:	c0 48       	rjmp	8000872c <_realloc_r+0x258>
80008726:	08 9b       	mov	r11,r4
80008728:	fe b0 fb cb 	rcall	80007ebe <memmove>
8000872c:	08 9b       	mov	r11,r4
8000872e:	04 9c       	mov	r12,r2
80008730:	fe b0 f6 fe 	rcall	8000752c <_free_r>
80008734:	04 9c       	mov	r12,r2
80008736:	c2 a8       	rjmp	8000878a <_realloc_r+0x2b6>
80008738:	00 93       	mov	r3,r0
8000873a:	02 97       	mov	r7,r1
8000873c:	e6 06 01 09 	sub	r9,r3,r6
80008740:	6e 18       	ld.w	r8,r7[0x4]
80008742:	58 f9       	cp.w	r9,15
80008744:	e0 88 00 16 	brls	80008770 <_realloc_r+0x29c>
80008748:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000874c:	ed e8 10 08 	or	r8,r6,r8
80008750:	8f 18       	st.w	r7[0x4],r8
80008752:	12 98       	mov	r8,r9
80008754:	a1 a8       	sbr	r8,0x0
80008756:	ee 06 00 0b 	add	r11,r7,r6
8000875a:	f6 09 00 09 	add	r9,r11,r9
8000875e:	97 18       	st.w	r11[0x4],r8
80008760:	72 18       	ld.w	r8,r9[0x4]
80008762:	a1 a8       	sbr	r8,0x0
80008764:	2f 8b       	sub	r11,-8
80008766:	93 18       	st.w	r9[0x4],r8
80008768:	04 9c       	mov	r12,r2
8000876a:	fe b0 f6 e1 	rcall	8000752c <_free_r>
8000876e:	c0 b8       	rjmp	80008784 <_realloc_r+0x2b0>
80008770:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008774:	e7 e8 10 08 	or	r8,r3,r8
80008778:	8f 18       	st.w	r7[0x4],r8
8000877a:	ee 03 00 03 	add	r3,r7,r3
8000877e:	66 18       	ld.w	r8,r3[0x4]
80008780:	a1 a8       	sbr	r8,0x0
80008782:	87 18       	st.w	r3[0x4],r8
80008784:	04 9c       	mov	r12,r2
80008786:	ee c5 ff f8 	sub	r5,r7,-8
8000878a:	fe b0 fb ba 	rcall	80007efe <__malloc_unlock>
8000878e:	0a 9c       	mov	r12,r5
80008790:	2f fd       	sub	sp,-4
80008792:	d8 32       	popm	r0-r7,pc

80008794 <__isinfd>:
80008794:	14 98       	mov	r8,r10
80008796:	fc 19 7f f0 	movh	r9,0x7ff0
8000879a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000879e:	f0 0b 11 00 	rsub	r11,r8,0
800087a2:	f7 e8 10 08 	or	r8,r11,r8
800087a6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800087aa:	f2 08 01 08 	sub	r8,r9,r8
800087ae:	f0 0c 11 00 	rsub	r12,r8,0
800087b2:	f9 e8 10 08 	or	r8,r12,r8
800087b6:	f0 0c 14 1f 	asr	r12,r8,0x1f
800087ba:	2f fc       	sub	r12,-1
800087bc:	5e fc       	retal	r12

800087be <__isnand>:
800087be:	14 98       	mov	r8,r10
800087c0:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800087c4:	f0 0c 11 00 	rsub	r12,r8,0
800087c8:	10 4c       	or	r12,r8
800087ca:	fc 18 7f f0 	movh	r8,0x7ff0
800087ce:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800087d2:	f0 0c 01 0c 	sub	r12,r8,r12
800087d6:	bf 9c       	lsr	r12,0x1f
800087d8:	5e fc       	retal	r12
800087da:	d7 03       	nop

800087dc <_sbrk_r>:
800087dc:	d4 21       	pushm	r4-r7,lr
800087de:	30 08       	mov	r8,0
800087e0:	18 97       	mov	r7,r12
800087e2:	e0 66 08 18 	mov	r6,2072
800087e6:	16 9c       	mov	r12,r11
800087e8:	8d 08       	st.w	r6[0x0],r8
800087ea:	ca fc       	rcall	80008948 <_sbrk>
800087ec:	5b fc       	cp.w	r12,-1
800087ee:	c0 51       	brne	800087f8 <_sbrk_r+0x1c>
800087f0:	6c 08       	ld.w	r8,r6[0x0]
800087f2:	58 08       	cp.w	r8,0
800087f4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800087f8:	d8 22       	popm	r4-r7,pc
800087fa:	d7 03       	nop

800087fc <__sclose>:
800087fc:	d4 01       	pushm	lr
800087fe:	96 7b       	ld.sh	r11,r11[0xe]
80008800:	cf ec       	rcall	800089fc <_close_r>
80008802:	d8 02       	popm	pc

80008804 <__sseek>:
80008804:	d4 21       	pushm	r4-r7,lr
80008806:	16 97       	mov	r7,r11
80008808:	96 7b       	ld.sh	r11,r11[0xe]
8000880a:	c8 5d       	rcall	80008b14 <_lseek_r>
8000880c:	8e 68       	ld.sh	r8,r7[0xc]
8000880e:	10 99       	mov	r9,r8
80008810:	ad c8       	cbr	r8,0xc
80008812:	ad a9       	sbr	r9,0xc
80008814:	5b fc       	cp.w	r12,-1
80008816:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000881a:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000881e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008822:	d8 22       	popm	r4-r7,pc

80008824 <__swrite>:
80008824:	d4 21       	pushm	r4-r7,lr
80008826:	96 68       	ld.sh	r8,r11[0xc]
80008828:	16 97       	mov	r7,r11
8000882a:	14 95       	mov	r5,r10
8000882c:	12 94       	mov	r4,r9
8000882e:	e2 18 01 00 	andl	r8,0x100,COH
80008832:	18 96       	mov	r6,r12
80008834:	c0 50       	breq	8000883e <__swrite+0x1a>
80008836:	30 29       	mov	r9,2
80008838:	30 0a       	mov	r10,0
8000883a:	96 7b       	ld.sh	r11,r11[0xe]
8000883c:	c6 cd       	rcall	80008b14 <_lseek_r>
8000883e:	8e 68       	ld.sh	r8,r7[0xc]
80008840:	ad c8       	cbr	r8,0xc
80008842:	08 99       	mov	r9,r4
80008844:	0a 9a       	mov	r10,r5
80008846:	8e 7b       	ld.sh	r11,r7[0xe]
80008848:	0c 9c       	mov	r12,r6
8000884a:	ae 68       	st.h	r7[0xc],r8
8000884c:	c9 ac       	rcall	80008980 <_write_r>
8000884e:	d8 22       	popm	r4-r7,pc

80008850 <__sread>:
80008850:	d4 21       	pushm	r4-r7,lr
80008852:	16 97       	mov	r7,r11
80008854:	96 7b       	ld.sh	r11,r11[0xe]
80008856:	c7 1d       	rcall	80008b38 <_read_r>
80008858:	c0 65       	brlt	80008864 <__sread+0x14>
8000885a:	6f 58       	ld.w	r8,r7[0x54]
8000885c:	18 08       	add	r8,r12
8000885e:	ef 48 00 54 	st.w	r7[84],r8
80008862:	d8 22       	popm	r4-r7,pc
80008864:	8e 68       	ld.sh	r8,r7[0xc]
80008866:	ad c8       	cbr	r8,0xc
80008868:	ae 68       	st.h	r7[0xc],r8
8000886a:	d8 22       	popm	r4-r7,pc

8000886c <strlen>:
8000886c:	30 09       	mov	r9,0
8000886e:	18 98       	mov	r8,r12
80008870:	c0 28       	rjmp	80008874 <strlen+0x8>
80008872:	2f f8       	sub	r8,-1
80008874:	11 8a       	ld.ub	r10,r8[0x0]
80008876:	f2 0a 18 00 	cp.b	r10,r9
8000887a:	cf c1       	brne	80008872 <strlen+0x6>
8000887c:	f0 0c 01 0c 	sub	r12,r8,r12
80008880:	5e fc       	retal	r12
80008882:	d7 03       	nop

80008884 <_close>:
80008884:	30 28       	mov	r8,2
80008886:	d6 73       	breakpoint
80008888:	3f fc       	mov	r12,-1
8000888a:	35 8b       	mov	r11,88
8000888c:	58 0c       	cp.w	r12,0
8000888e:	5e 4c       	retge	r12
80008890:	e0 6a 08 18 	mov	r10,2072
80008894:	95 0b       	st.w	r10[0x0],r11
80008896:	5e fc       	retal	r12

80008898 <_lseek>:
80008898:	30 58       	mov	r8,5
8000889a:	d6 73       	breakpoint
8000889c:	3f fc       	mov	r12,-1
8000889e:	35 8b       	mov	r11,88
800088a0:	58 0c       	cp.w	r12,0
800088a2:	5e 4c       	retge	r12
800088a4:	e0 6a 08 18 	mov	r10,2072
800088a8:	95 0b       	st.w	r10[0x0],r11
800088aa:	5e fc       	retal	r12

800088ac <_read>:
800088ac:	30 38       	mov	r8,3
800088ae:	d6 73       	breakpoint
800088b0:	3f fc       	mov	r12,-1
800088b2:	35 8b       	mov	r11,88
800088b4:	58 0c       	cp.w	r12,0
800088b6:	5e 4c       	retge	r12
800088b8:	e0 6a 08 18 	mov	r10,2072
800088bc:	95 0b       	st.w	r10[0x0],r11
800088be:	5e fc       	retal	r12

800088c0 <_write>:
800088c0:	30 48       	mov	r8,4
800088c2:	d6 73       	breakpoint
800088c4:	3f fc       	mov	r12,-1
800088c6:	35 8b       	mov	r11,88
800088c8:	58 0c       	cp.w	r12,0
800088ca:	5e 4c       	retge	r12
800088cc:	e0 6a 08 18 	mov	r10,2072
800088d0:	95 0b       	st.w	r10[0x0],r11
800088d2:	5e fc       	retal	r12

800088d4 <isatty>:
800088d4:	30 b8       	mov	r8,11
800088d6:	d6 73       	breakpoint
800088d8:	3f fc       	mov	r12,-1
800088da:	35 8b       	mov	r11,88
800088dc:	58 0c       	cp.w	r12,0
800088de:	5e 4c       	retge	r12
800088e0:	e0 6a 08 18 	mov	r10,2072
800088e4:	95 0b       	st.w	r10[0x0],r11
800088e6:	5e fc       	retal	r12

800088e8 <_fstat_host>:
800088e8:	30 98       	mov	r8,9
800088ea:	d6 73       	breakpoint
800088ec:	3f fc       	mov	r12,-1
800088ee:	35 8b       	mov	r11,88
800088f0:	58 0c       	cp.w	r12,0
800088f2:	5e 4c       	retge	r12
800088f4:	e0 6a 08 18 	mov	r10,2072
800088f8:	95 0b       	st.w	r10[0x0],r11
800088fa:	5e fc       	retal	r12

800088fc <_fstat>:
800088fc:	d4 21       	pushm	r4-r7,lr
800088fe:	21 0d       	sub	sp,64
80008900:	16 97       	mov	r7,r11
80008902:	1a 9b       	mov	r11,sp
80008904:	cf 2f       	rcall	800088e8 <_fstat_host>
80008906:	c0 34       	brge	8000890c <_fstat+0x10>
80008908:	3f fc       	mov	r12,-1
8000890a:	c1 c8       	rjmp	80008942 <_fstat+0x46>
8000890c:	40 08       	lddsp	r8,sp[0x0]
8000890e:	ae 08       	st.h	r7[0x0],r8
80008910:	40 18       	lddsp	r8,sp[0x4]
80008912:	ae 18       	st.h	r7[0x2],r8
80008914:	40 28       	lddsp	r8,sp[0x8]
80008916:	8f 18       	st.w	r7[0x4],r8
80008918:	40 38       	lddsp	r8,sp[0xc]
8000891a:	ae 48       	st.h	r7[0x8],r8
8000891c:	40 48       	lddsp	r8,sp[0x10]
8000891e:	ae 58       	st.h	r7[0xa],r8
80008920:	40 58       	lddsp	r8,sp[0x14]
80008922:	ae 68       	st.h	r7[0xc],r8
80008924:	40 68       	lddsp	r8,sp[0x18]
80008926:	ae 78       	st.h	r7[0xe],r8
80008928:	40 88       	lddsp	r8,sp[0x20]
8000892a:	8f 48       	st.w	r7[0x10],r8
8000892c:	40 a8       	lddsp	r8,sp[0x28]
8000892e:	8f b8       	st.w	r7[0x2c],r8
80008930:	40 c8       	lddsp	r8,sp[0x30]
80008932:	8f c8       	st.w	r7[0x30],r8
80008934:	40 d8       	lddsp	r8,sp[0x34]
80008936:	8f 58       	st.w	r7[0x14],r8
80008938:	40 e8       	lddsp	r8,sp[0x38]
8000893a:	30 0c       	mov	r12,0
8000893c:	8f 78       	st.w	r7[0x1c],r8
8000893e:	40 f8       	lddsp	r8,sp[0x3c]
80008940:	8f 98       	st.w	r7[0x24],r8
80008942:	2f 0d       	sub	sp,-64
80008944:	d8 22       	popm	r4-r7,pc
80008946:	d7 03       	nop

80008948 <_sbrk>:
80008948:	d4 01       	pushm	lr
8000894a:	e0 68 06 70 	mov	r8,1648
8000894e:	70 09       	ld.w	r9,r8[0x0]
80008950:	58 09       	cp.w	r9,0
80008952:	c0 41       	brne	8000895a <_sbrk+0x12>
80008954:	e0 69 08 20 	mov	r9,2080
80008958:	91 09       	st.w	r8[0x0],r9
8000895a:	e0 69 06 70 	mov	r9,1648
8000895e:	e0 6a 30 00 	mov	r10,12288
80008962:	72 08       	ld.w	r8,r9[0x0]
80008964:	f0 0c 00 0c 	add	r12,r8,r12
80008968:	14 3c       	cp.w	r12,r10
8000896a:	e0 8b 00 04 	brhi	80008972 <_sbrk+0x2a>
8000896e:	93 0c       	st.w	r9[0x0],r12
80008970:	c0 58       	rjmp	8000897a <_sbrk+0x32>
80008972:	c5 5c       	rcall	80008a1c <__errno>
80008974:	30 c8       	mov	r8,12
80008976:	99 08       	st.w	r12[0x0],r8
80008978:	3f f8       	mov	r8,-1
8000897a:	10 9c       	mov	r12,r8
8000897c:	d8 02       	popm	pc
8000897e:	d7 03       	nop

80008980 <_write_r>:
80008980:	d4 21       	pushm	r4-r7,lr
80008982:	16 98       	mov	r8,r11
80008984:	18 97       	mov	r7,r12
80008986:	10 9c       	mov	r12,r8
80008988:	30 08       	mov	r8,0
8000898a:	14 9b       	mov	r11,r10
8000898c:	e0 66 08 18 	mov	r6,2072
80008990:	12 9a       	mov	r10,r9
80008992:	8d 08       	st.w	r6[0x0],r8
80008994:	c9 6f       	rcall	800088c0 <_write>
80008996:	5b fc       	cp.w	r12,-1
80008998:	c0 51       	brne	800089a2 <_write_r+0x22>
8000899a:	6c 08       	ld.w	r8,r6[0x0]
8000899c:	58 08       	cp.w	r8,0
8000899e:	ef f8 1a 03 	st.wne	r7[0xc],r8
800089a2:	d8 22       	popm	r4-r7,pc

800089a4 <_calloc_r>:
800089a4:	d4 21       	pushm	r4-r7,lr
800089a6:	f4 0b 02 4b 	mul	r11,r10,r11
800089aa:	fe b0 f8 67 	rcall	80007a78 <_malloc_r>
800089ae:	18 97       	mov	r7,r12
800089b0:	c2 30       	breq	800089f6 <_calloc_r+0x52>
800089b2:	f8 fa ff fc 	ld.w	r10,r12[-4]
800089b6:	e0 1a ff fc 	andl	r10,0xfffc
800089ba:	20 4a       	sub	r10,4
800089bc:	e0 4a 00 24 	cp.w	r10,36
800089c0:	e0 8b 00 18 	brhi	800089f0 <_calloc_r+0x4c>
800089c4:	18 98       	mov	r8,r12
800089c6:	59 3a       	cp.w	r10,19
800089c8:	e0 88 00 0f 	brls	800089e6 <_calloc_r+0x42>
800089cc:	30 09       	mov	r9,0
800089ce:	10 a9       	st.w	r8++,r9
800089d0:	10 a9       	st.w	r8++,r9
800089d2:	59 ba       	cp.w	r10,27
800089d4:	e0 88 00 09 	brls	800089e6 <_calloc_r+0x42>
800089d8:	10 a9       	st.w	r8++,r9
800089da:	10 a9       	st.w	r8++,r9
800089dc:	e0 4a 00 24 	cp.w	r10,36
800089e0:	c0 31       	brne	800089e6 <_calloc_r+0x42>
800089e2:	10 a9       	st.w	r8++,r9
800089e4:	10 a9       	st.w	r8++,r9
800089e6:	30 09       	mov	r9,0
800089e8:	10 a9       	st.w	r8++,r9
800089ea:	91 19       	st.w	r8[0x4],r9
800089ec:	91 09       	st.w	r8[0x0],r9
800089ee:	c0 48       	rjmp	800089f6 <_calloc_r+0x52>
800089f0:	30 0b       	mov	r11,0
800089f2:	fe b0 db fc 	rcall	800041ea <memset>
800089f6:	0e 9c       	mov	r12,r7
800089f8:	d8 22       	popm	r4-r7,pc
800089fa:	d7 03       	nop

800089fc <_close_r>:
800089fc:	d4 21       	pushm	r4-r7,lr
800089fe:	30 08       	mov	r8,0
80008a00:	18 97       	mov	r7,r12
80008a02:	e0 66 08 18 	mov	r6,2072
80008a06:	16 9c       	mov	r12,r11
80008a08:	8d 08       	st.w	r6[0x0],r8
80008a0a:	c3 df       	rcall	80008884 <_close>
80008a0c:	5b fc       	cp.w	r12,-1
80008a0e:	c0 51       	brne	80008a18 <_close_r+0x1c>
80008a10:	6c 08       	ld.w	r8,r6[0x0]
80008a12:	58 08       	cp.w	r8,0
80008a14:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a18:	d8 22       	popm	r4-r7,pc
80008a1a:	d7 03       	nop

80008a1c <__errno>:
80008a1c:	e0 68 01 18 	mov	r8,280
80008a20:	70 0c       	ld.w	r12,r8[0x0]
80008a22:	2f 4c       	sub	r12,-12
80008a24:	5e fc       	retal	r12
80008a26:	d7 03       	nop

80008a28 <_fclose_r>:
80008a28:	d4 21       	pushm	r4-r7,lr
80008a2a:	18 96       	mov	r6,r12
80008a2c:	16 97       	mov	r7,r11
80008a2e:	58 0b       	cp.w	r11,0
80008a30:	c0 31       	brne	80008a36 <_fclose_r+0xe>
80008a32:	16 95       	mov	r5,r11
80008a34:	c5 38       	rjmp	80008ada <_fclose_r+0xb2>
80008a36:	fe b0 f4 8f 	rcall	80007354 <__sfp_lock_acquire>
80008a3a:	58 06       	cp.w	r6,0
80008a3c:	c0 70       	breq	80008a4a <_fclose_r+0x22>
80008a3e:	6c 68       	ld.w	r8,r6[0x18]
80008a40:	58 08       	cp.w	r8,0
80008a42:	c0 41       	brne	80008a4a <_fclose_r+0x22>
80008a44:	0c 9c       	mov	r12,r6
80008a46:	fe b0 f4 d9 	rcall	800073f8 <__sinit>
80008a4a:	fe c8 e9 4e 	sub	r8,pc,-5810
80008a4e:	10 37       	cp.w	r7,r8
80008a50:	c0 31       	brne	80008a56 <_fclose_r+0x2e>
80008a52:	6c 07       	ld.w	r7,r6[0x0]
80008a54:	c0 c8       	rjmp	80008a6c <_fclose_r+0x44>
80008a56:	fe c8 e9 3a 	sub	r8,pc,-5830
80008a5a:	10 37       	cp.w	r7,r8
80008a5c:	c0 31       	brne	80008a62 <_fclose_r+0x3a>
80008a5e:	6c 17       	ld.w	r7,r6[0x4]
80008a60:	c0 68       	rjmp	80008a6c <_fclose_r+0x44>
80008a62:	fe c8 e9 26 	sub	r8,pc,-5850
80008a66:	10 37       	cp.w	r7,r8
80008a68:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008a6c:	8e 69       	ld.sh	r9,r7[0xc]
80008a6e:	30 08       	mov	r8,0
80008a70:	f0 09 19 00 	cp.h	r9,r8
80008a74:	c0 51       	brne	80008a7e <_fclose_r+0x56>
80008a76:	fe b0 f4 70 	rcall	80007356 <__sfp_lock_release>
80008a7a:	30 05       	mov	r5,0
80008a7c:	c2 f8       	rjmp	80008ada <_fclose_r+0xb2>
80008a7e:	0e 9b       	mov	r11,r7
80008a80:	0c 9c       	mov	r12,r6
80008a82:	fe b0 f3 e3 	rcall	80007248 <_fflush_r>
80008a86:	6e c8       	ld.w	r8,r7[0x30]
80008a88:	18 95       	mov	r5,r12
80008a8a:	58 08       	cp.w	r8,0
80008a8c:	c0 60       	breq	80008a98 <_fclose_r+0x70>
80008a8e:	6e 8b       	ld.w	r11,r7[0x20]
80008a90:	0c 9c       	mov	r12,r6
80008a92:	5d 18       	icall	r8
80008a94:	f9 b5 05 ff 	movlt	r5,-1
80008a98:	8e 68       	ld.sh	r8,r7[0xc]
80008a9a:	ed b8 00 07 	bld	r8,0x7
80008a9e:	c0 51       	brne	80008aa8 <_fclose_r+0x80>
80008aa0:	6e 4b       	ld.w	r11,r7[0x10]
80008aa2:	0c 9c       	mov	r12,r6
80008aa4:	fe b0 f5 44 	rcall	8000752c <_free_r>
80008aa8:	6e db       	ld.w	r11,r7[0x34]
80008aaa:	58 0b       	cp.w	r11,0
80008aac:	c0 a0       	breq	80008ac0 <_fclose_r+0x98>
80008aae:	ee c8 ff bc 	sub	r8,r7,-68
80008ab2:	10 3b       	cp.w	r11,r8
80008ab4:	c0 40       	breq	80008abc <_fclose_r+0x94>
80008ab6:	0c 9c       	mov	r12,r6
80008ab8:	fe b0 f5 3a 	rcall	8000752c <_free_r>
80008abc:	30 08       	mov	r8,0
80008abe:	8f d8       	st.w	r7[0x34],r8
80008ac0:	6f 2b       	ld.w	r11,r7[0x48]
80008ac2:	58 0b       	cp.w	r11,0
80008ac4:	c0 70       	breq	80008ad2 <_fclose_r+0xaa>
80008ac6:	0c 9c       	mov	r12,r6
80008ac8:	fe b0 f5 32 	rcall	8000752c <_free_r>
80008acc:	30 08       	mov	r8,0
80008ace:	ef 48 00 48 	st.w	r7[72],r8
80008ad2:	30 08       	mov	r8,0
80008ad4:	ae 68       	st.h	r7[0xc],r8
80008ad6:	fe b0 f4 40 	rcall	80007356 <__sfp_lock_release>
80008ada:	0a 9c       	mov	r12,r5
80008adc:	d8 22       	popm	r4-r7,pc
80008ade:	d7 03       	nop

80008ae0 <fclose>:
80008ae0:	d4 01       	pushm	lr
80008ae2:	e0 68 01 18 	mov	r8,280
80008ae6:	18 9b       	mov	r11,r12
80008ae8:	70 0c       	ld.w	r12,r8[0x0]
80008aea:	c9 ff       	rcall	80008a28 <_fclose_r>
80008aec:	d8 02       	popm	pc
80008aee:	d7 03       	nop

80008af0 <_fstat_r>:
80008af0:	d4 21       	pushm	r4-r7,lr
80008af2:	16 98       	mov	r8,r11
80008af4:	18 97       	mov	r7,r12
80008af6:	10 9c       	mov	r12,r8
80008af8:	30 08       	mov	r8,0
80008afa:	e0 66 08 18 	mov	r6,2072
80008afe:	14 9b       	mov	r11,r10
80008b00:	8d 08       	st.w	r6[0x0],r8
80008b02:	cf de       	rcall	800088fc <_fstat>
80008b04:	5b fc       	cp.w	r12,-1
80008b06:	c0 51       	brne	80008b10 <_fstat_r+0x20>
80008b08:	6c 08       	ld.w	r8,r6[0x0]
80008b0a:	58 08       	cp.w	r8,0
80008b0c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b10:	d8 22       	popm	r4-r7,pc
80008b12:	d7 03       	nop

80008b14 <_lseek_r>:
80008b14:	d4 21       	pushm	r4-r7,lr
80008b16:	16 98       	mov	r8,r11
80008b18:	18 97       	mov	r7,r12
80008b1a:	10 9c       	mov	r12,r8
80008b1c:	30 08       	mov	r8,0
80008b1e:	14 9b       	mov	r11,r10
80008b20:	e0 66 08 18 	mov	r6,2072
80008b24:	12 9a       	mov	r10,r9
80008b26:	8d 08       	st.w	r6[0x0],r8
80008b28:	cb 8e       	rcall	80008898 <_lseek>
80008b2a:	5b fc       	cp.w	r12,-1
80008b2c:	c0 51       	brne	80008b36 <_lseek_r+0x22>
80008b2e:	6c 08       	ld.w	r8,r6[0x0]
80008b30:	58 08       	cp.w	r8,0
80008b32:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b36:	d8 22       	popm	r4-r7,pc

80008b38 <_read_r>:
80008b38:	d4 21       	pushm	r4-r7,lr
80008b3a:	16 98       	mov	r8,r11
80008b3c:	18 97       	mov	r7,r12
80008b3e:	10 9c       	mov	r12,r8
80008b40:	30 08       	mov	r8,0
80008b42:	14 9b       	mov	r11,r10
80008b44:	e0 66 08 18 	mov	r6,2072
80008b48:	12 9a       	mov	r10,r9
80008b4a:	8d 08       	st.w	r6[0x0],r8
80008b4c:	cb 0e       	rcall	800088ac <_read>
80008b4e:	5b fc       	cp.w	r12,-1
80008b50:	c0 51       	brne	80008b5a <_read_r+0x22>
80008b52:	6c 08       	ld.w	r8,r6[0x0]
80008b54:	58 08       	cp.w	r8,0
80008b56:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b5a:	d8 22       	popm	r4-r7,pc

80008b5c <__avr32_f64_sub_from_add>:
80008b5c:	ee 19 80 00 	eorh	r9,0x8000

80008b60 <__avr32_f64_sub>:
80008b60:	f7 e9 20 0c 	eor	r12,r11,r9
80008b64:	e0 86 00 ca 	brmi	80008cf8 <__avr32_f64_add_from_sub>
80008b68:	eb cd 40 e0 	pushm	r5-r7,lr
80008b6c:	16 9c       	mov	r12,r11
80008b6e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008b72:	bf db       	cbr	r11,0x1f
80008b74:	bf d9       	cbr	r9,0x1f
80008b76:	10 3a       	cp.w	r10,r8
80008b78:	f2 0b 13 00 	cpc	r11,r9
80008b7c:	c0 92       	brcc	80008b8e <__avr32_f64_sub+0x2e>
80008b7e:	16 97       	mov	r7,r11
80008b80:	12 9b       	mov	r11,r9
80008b82:	0e 99       	mov	r9,r7
80008b84:	14 97       	mov	r7,r10
80008b86:	10 9a       	mov	r10,r8
80008b88:	0e 98       	mov	r8,r7
80008b8a:	ee 1c 80 00 	eorh	r12,0x8000
80008b8e:	f6 07 16 14 	lsr	r7,r11,0x14
80008b92:	ab 7b       	lsl	r11,0xb
80008b94:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008b98:	ab 7a       	lsl	r10,0xb
80008b9a:	bf bb       	sbr	r11,0x1f
80008b9c:	f2 06 16 14 	lsr	r6,r9,0x14
80008ba0:	c4 40       	breq	80008c28 <__avr32_f64_sub_opL_subnormal>
80008ba2:	ab 79       	lsl	r9,0xb
80008ba4:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008ba8:	ab 78       	lsl	r8,0xb
80008baa:	bf b9       	sbr	r9,0x1f

80008bac <__avr32_f64_sub_opL_subnormal_done>:
80008bac:	e0 47 07 ff 	cp.w	r7,2047
80008bb0:	c4 f0       	breq	80008c4e <__avr32_f64_sub_opH_nan_or_inf>
80008bb2:	0e 26       	rsub	r6,r7
80008bb4:	c1 20       	breq	80008bd8 <__avr32_f64_sub_shift_done>
80008bb6:	ec 05 11 20 	rsub	r5,r6,32
80008bba:	e0 46 00 20 	cp.w	r6,32
80008bbe:	c7 c2       	brcc	80008cb6 <__avr32_f64_sub_longshift>
80008bc0:	f0 05 09 4e 	lsl	lr,r8,r5
80008bc4:	f2 05 09 45 	lsl	r5,r9,r5
80008bc8:	f0 06 0a 48 	lsr	r8,r8,r6
80008bcc:	f2 06 0a 49 	lsr	r9,r9,r6
80008bd0:	0a 48       	or	r8,r5
80008bd2:	58 0e       	cp.w	lr,0
80008bd4:	5f 1e       	srne	lr
80008bd6:	1c 48       	or	r8,lr

80008bd8 <__avr32_f64_sub_shift_done>:
80008bd8:	10 1a       	sub	r10,r8
80008bda:	f6 09 01 4b 	sbc	r11,r11,r9
80008bde:	f6 06 12 00 	clz	r6,r11
80008be2:	c0 e0       	breq	80008bfe <__avr32_f64_sub_longnormalize_done>
80008be4:	c7 83       	brcs	80008cd4 <__avr32_f64_sub_longnormalize>
80008be6:	ec 0e 11 20 	rsub	lr,r6,32
80008bea:	f6 06 09 4b 	lsl	r11,r11,r6
80008bee:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008bf2:	1c 4b       	or	r11,lr
80008bf4:	f4 06 09 4a 	lsl	r10,r10,r6
80008bf8:	0c 17       	sub	r7,r6
80008bfa:	e0 8a 00 39 	brle	80008c6c <__avr32_f64_sub_subnormal_result>

80008bfe <__avr32_f64_sub_longnormalize_done>:
80008bfe:	f4 09 15 15 	lsl	r9,r10,0x15
80008c02:	ab 9a       	lsr	r10,0xb
80008c04:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008c08:	ab 9b       	lsr	r11,0xb
80008c0a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008c0e:	18 4b       	or	r11,r12

80008c10 <__avr32_f64_sub_round>:
80008c10:	fc 17 80 00 	movh	r7,0x8000
80008c14:	ed ba 00 00 	bld	r10,0x0
80008c18:	f7 b7 01 ff 	subne	r7,-1
80008c1c:	0e 39       	cp.w	r9,r7
80008c1e:	5f 29       	srhs	r9
80008c20:	12 0a       	add	r10,r9
80008c22:	5c 0b       	acr	r11
80008c24:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c28 <__avr32_f64_sub_opL_subnormal>:
80008c28:	ab 79       	lsl	r9,0xb
80008c2a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008c2e:	ab 78       	lsl	r8,0xb
80008c30:	f3 e8 10 0e 	or	lr,r9,r8
80008c34:	f9 b6 01 01 	movne	r6,1
80008c38:	ee 0e 11 00 	rsub	lr,r7,0
80008c3c:	f9 b7 00 01 	moveq	r7,1
80008c40:	ef bb 00 1f 	bst	r11,0x1f
80008c44:	f7 ea 10 0e 	or	lr,r11,r10
80008c48:	f9 b7 00 00 	moveq	r7,0
80008c4c:	cb 0b       	rjmp	80008bac <__avr32_f64_sub_opL_subnormal_done>

80008c4e <__avr32_f64_sub_opH_nan_or_inf>:
80008c4e:	bf db       	cbr	r11,0x1f
80008c50:	f7 ea 10 0e 	or	lr,r11,r10
80008c54:	c0 81       	brne	80008c64 <__avr32_f64_sub_return_nan>
80008c56:	e0 46 07 ff 	cp.w	r6,2047
80008c5a:	c0 50       	breq	80008c64 <__avr32_f64_sub_return_nan>
80008c5c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008c60:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c64 <__avr32_f64_sub_return_nan>:
80008c64:	3f fa       	mov	r10,-1
80008c66:	3f fb       	mov	r11,-1
80008c68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c6c <__avr32_f64_sub_subnormal_result>:
80008c6c:	5c 37       	neg	r7
80008c6e:	2f f7       	sub	r7,-1
80008c70:	f1 b7 04 c0 	satu	r7,0x6
80008c74:	e0 47 00 20 	cp.w	r7,32
80008c78:	c1 14       	brge	80008c9a <__avr32_f64_sub_subnormal_result+0x2e>
80008c7a:	ee 08 11 20 	rsub	r8,r7,32
80008c7e:	f4 08 09 49 	lsl	r9,r10,r8
80008c82:	5f 16       	srne	r6
80008c84:	f4 07 0a 4a 	lsr	r10,r10,r7
80008c88:	0c 4a       	or	r10,r6
80008c8a:	f6 08 09 49 	lsl	r9,r11,r8
80008c8e:	f5 e9 10 0a 	or	r10,r10,r9
80008c92:	f4 07 0a 4b 	lsr	r11,r10,r7
80008c96:	30 07       	mov	r7,0
80008c98:	cb 3b       	rjmp	80008bfe <__avr32_f64_sub_longnormalize_done>
80008c9a:	ee 08 11 40 	rsub	r8,r7,64
80008c9e:	f6 08 09 49 	lsl	r9,r11,r8
80008ca2:	14 49       	or	r9,r10
80008ca4:	5f 16       	srne	r6
80008ca6:	f6 07 0a 4a 	lsr	r10,r11,r7
80008caa:	0c 4a       	or	r10,r6
80008cac:	30 0b       	mov	r11,0
80008cae:	30 07       	mov	r7,0
80008cb0:	ca 7b       	rjmp	80008bfe <__avr32_f64_sub_longnormalize_done>
80008cb2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008cb6 <__avr32_f64_sub_longshift>:
80008cb6:	f1 b6 04 c0 	satu	r6,0x6
80008cba:	f0 0e 17 00 	moveq	lr,r8
80008cbe:	c0 40       	breq	80008cc6 <__avr32_f64_sub_longshift+0x10>
80008cc0:	f2 05 09 4e 	lsl	lr,r9,r5
80008cc4:	10 4e       	or	lr,r8
80008cc6:	f2 06 0a 48 	lsr	r8,r9,r6
80008cca:	30 09       	mov	r9,0
80008ccc:	58 0e       	cp.w	lr,0
80008cce:	5f 1e       	srne	lr
80008cd0:	1c 48       	or	r8,lr
80008cd2:	c8 3b       	rjmp	80008bd8 <__avr32_f64_sub_shift_done>

80008cd4 <__avr32_f64_sub_longnormalize>:
80008cd4:	f4 06 12 00 	clz	r6,r10
80008cd8:	f9 b7 03 00 	movlo	r7,0
80008cdc:	f9 b6 03 00 	movlo	r6,0
80008ce0:	f9 bc 03 00 	movlo	r12,0
80008ce4:	f7 b6 02 e0 	subhs	r6,-32
80008ce8:	f4 06 09 4b 	lsl	r11,r10,r6
80008cec:	30 0a       	mov	r10,0
80008cee:	0c 17       	sub	r7,r6
80008cf0:	fe 9a ff be 	brle	80008c6c <__avr32_f64_sub_subnormal_result>
80008cf4:	c8 5b       	rjmp	80008bfe <__avr32_f64_sub_longnormalize_done>
80008cf6:	d7 03       	nop

80008cf8 <__avr32_f64_add_from_sub>:
80008cf8:	ee 19 80 00 	eorh	r9,0x8000

80008cfc <__avr32_f64_add>:
80008cfc:	f7 e9 20 0c 	eor	r12,r11,r9
80008d00:	fe 96 ff 2e 	brmi	80008b5c <__avr32_f64_sub_from_add>
80008d04:	eb cd 40 e0 	pushm	r5-r7,lr
80008d08:	16 9c       	mov	r12,r11
80008d0a:	e6 1c 80 00 	andh	r12,0x8000,COH
80008d0e:	bf db       	cbr	r11,0x1f
80008d10:	bf d9       	cbr	r9,0x1f
80008d12:	12 3b       	cp.w	r11,r9
80008d14:	c0 72       	brcc	80008d22 <__avr32_f64_add+0x26>
80008d16:	16 97       	mov	r7,r11
80008d18:	12 9b       	mov	r11,r9
80008d1a:	0e 99       	mov	r9,r7
80008d1c:	14 97       	mov	r7,r10
80008d1e:	10 9a       	mov	r10,r8
80008d20:	0e 98       	mov	r8,r7
80008d22:	30 0e       	mov	lr,0
80008d24:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008d28:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008d2c:	b5 ab       	sbr	r11,0x14
80008d2e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008d32:	c6 20       	breq	80008df6 <__avr32_f64_add_op2_subnormal>
80008d34:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008d38:	b5 a9       	sbr	r9,0x14
80008d3a:	e0 47 07 ff 	cp.w	r7,2047
80008d3e:	c2 80       	breq	80008d8e <__avr32_f64_add_opH_nan_or_inf>
80008d40:	0e 26       	rsub	r6,r7
80008d42:	c1 20       	breq	80008d66 <__avr32_f64_add_shift_done>
80008d44:	e0 46 00 36 	cp.w	r6,54
80008d48:	c1 52       	brcc	80008d72 <__avr32_f64_add_res_of_done>
80008d4a:	ec 05 11 20 	rsub	r5,r6,32
80008d4e:	e0 46 00 20 	cp.w	r6,32
80008d52:	c3 52       	brcc	80008dbc <__avr32_f64_add_longshift>
80008d54:	f0 05 09 4e 	lsl	lr,r8,r5
80008d58:	f2 05 09 45 	lsl	r5,r9,r5
80008d5c:	f0 06 0a 48 	lsr	r8,r8,r6
80008d60:	f2 06 0a 49 	lsr	r9,r9,r6
80008d64:	0a 48       	or	r8,r5

80008d66 <__avr32_f64_add_shift_done>:
80008d66:	10 0a       	add	r10,r8
80008d68:	f6 09 00 4b 	adc	r11,r11,r9
80008d6c:	ed bb 00 15 	bld	r11,0x15
80008d70:	c3 40       	breq	80008dd8 <__avr32_f64_add_res_of>

80008d72 <__avr32_f64_add_res_of_done>:
80008d72:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008d76:	18 4b       	or	r11,r12

80008d78 <__avr32_f64_add_round>:
80008d78:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008d7c:	18 4e       	or	lr,r12
80008d7e:	ee 1e 80 00 	eorh	lr,0x8000
80008d82:	f1 be 04 20 	satu	lr,0x1
80008d86:	1c 0a       	add	r10,lr
80008d88:	5c 0b       	acr	r11
80008d8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d8e <__avr32_f64_add_opH_nan_or_inf>:
80008d8e:	b5 cb       	cbr	r11,0x14
80008d90:	f7 ea 10 0e 	or	lr,r11,r10
80008d94:	c1 01       	brne	80008db4 <__avr32_f64_add_return_nan>
80008d96:	e0 46 07 ff 	cp.w	r6,2047
80008d9a:	c0 30       	breq	80008da0 <__avr32_f64_add_opL_nan_or_inf>
80008d9c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008da0 <__avr32_f64_add_opL_nan_or_inf>:
80008da0:	b5 c9       	cbr	r9,0x14
80008da2:	f3 e8 10 0e 	or	lr,r9,r8
80008da6:	c0 71       	brne	80008db4 <__avr32_f64_add_return_nan>
80008da8:	30 0a       	mov	r10,0
80008daa:	fc 1b 7f f0 	movh	r11,0x7ff0
80008dae:	18 4b       	or	r11,r12
80008db0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008db4 <__avr32_f64_add_return_nan>:
80008db4:	3f fa       	mov	r10,-1
80008db6:	3f fb       	mov	r11,-1
80008db8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008dbc <__avr32_f64_add_longshift>:
80008dbc:	f1 b6 04 c0 	satu	r6,0x6
80008dc0:	f0 0e 17 00 	moveq	lr,r8
80008dc4:	c0 60       	breq	80008dd0 <__avr32_f64_add_longshift+0x14>
80008dc6:	f2 05 09 4e 	lsl	lr,r9,r5
80008dca:	58 08       	cp.w	r8,0
80008dcc:	5f 18       	srne	r8
80008dce:	10 4e       	or	lr,r8
80008dd0:	f2 06 0a 48 	lsr	r8,r9,r6
80008dd4:	30 09       	mov	r9,0
80008dd6:	cc 8b       	rjmp	80008d66 <__avr32_f64_add_shift_done>

80008dd8 <__avr32_f64_add_res_of>:
80008dd8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008ddc:	a1 9b       	lsr	r11,0x1
80008dde:	5d 0a       	ror	r10
80008de0:	5d 0e       	ror	lr
80008de2:	2f f7       	sub	r7,-1
80008de4:	e0 47 07 ff 	cp.w	r7,2047
80008de8:	f9 ba 00 00 	moveq	r10,0
80008dec:	f9 bb 00 00 	moveq	r11,0
80008df0:	f9 be 00 00 	moveq	lr,0
80008df4:	cb fb       	rjmp	80008d72 <__avr32_f64_add_res_of_done>

80008df6 <__avr32_f64_add_op2_subnormal>:
80008df6:	30 16       	mov	r6,1
80008df8:	58 07       	cp.w	r7,0
80008dfa:	ca 01       	brne	80008d3a <__avr32_f64_add+0x3e>
80008dfc:	b5 cb       	cbr	r11,0x14
80008dfe:	10 0a       	add	r10,r8
80008e00:	f6 09 00 4b 	adc	r11,r11,r9
80008e04:	18 4b       	or	r11,r12
80008e06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008e0a:	d7 03       	nop

80008e0c <__avr32_f64_to_u32>:
80008e0c:	58 0b       	cp.w	r11,0
80008e0e:	5e 6d       	retmi	0

80008e10 <__avr32_f64_to_s32>:
80008e10:	f6 0c 15 01 	lsl	r12,r11,0x1
80008e14:	b5 9c       	lsr	r12,0x15
80008e16:	e0 2c 03 ff 	sub	r12,1023
80008e1a:	5e 3d       	retlo	0
80008e1c:	f8 0c 11 1f 	rsub	r12,r12,31
80008e20:	16 99       	mov	r9,r11
80008e22:	ab 7b       	lsl	r11,0xb
80008e24:	bf bb       	sbr	r11,0x1f
80008e26:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008e2a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008e2e:	a1 79       	lsl	r9,0x1
80008e30:	5e 2b       	reths	r11
80008e32:	5c 3b       	neg	r11
80008e34:	5e fb       	retal	r11

80008e36 <__avr32_f64_cmp_eq>:
80008e36:	10 3a       	cp.w	r10,r8
80008e38:	f2 0b 13 00 	cpc	r11,r9
80008e3c:	c0 80       	breq	80008e4c <__avr32_f64_cmp_eq+0x16>
80008e3e:	a1 7b       	lsl	r11,0x1
80008e40:	a1 79       	lsl	r9,0x1
80008e42:	14 4b       	or	r11,r10
80008e44:	12 4b       	or	r11,r9
80008e46:	10 4b       	or	r11,r8
80008e48:	5e 0f       	reteq	1
80008e4a:	5e fd       	retal	0
80008e4c:	a1 7b       	lsl	r11,0x1
80008e4e:	fc 1c ff e0 	movh	r12,0xffe0
80008e52:	58 0a       	cp.w	r10,0
80008e54:	f8 0b 13 00 	cpc	r11,r12
80008e58:	5e 8f       	retls	1
80008e5a:	5e fd       	retal	0

80008e5c <__avr32_f64_cmp_ge>:
80008e5c:	1a de       	st.w	--sp,lr
80008e5e:	1a d7       	st.w	--sp,r7
80008e60:	a1 7b       	lsl	r11,0x1
80008e62:	5f 3c       	srlo	r12
80008e64:	a1 79       	lsl	r9,0x1
80008e66:	5f 37       	srlo	r7
80008e68:	5c fc       	rol	r12
80008e6a:	fc 1e ff e0 	movh	lr,0xffe0
80008e6e:	58 0a       	cp.w	r10,0
80008e70:	fc 0b 13 00 	cpc	r11,lr
80008e74:	e0 8b 00 1d 	brhi	80008eae <__avr32_f64_cmp_ge+0x52>
80008e78:	58 08       	cp.w	r8,0
80008e7a:	fc 09 13 00 	cpc	r9,lr
80008e7e:	e0 8b 00 18 	brhi	80008eae <__avr32_f64_cmp_ge+0x52>
80008e82:	58 0b       	cp.w	r11,0
80008e84:	f5 ba 00 00 	subfeq	r10,0
80008e88:	c1 50       	breq	80008eb2 <__avr32_f64_cmp_ge+0x56>
80008e8a:	1b 07       	ld.w	r7,sp++
80008e8c:	1b 0e       	ld.w	lr,sp++
80008e8e:	58 3c       	cp.w	r12,3
80008e90:	c0 a0       	breq	80008ea4 <__avr32_f64_cmp_ge+0x48>
80008e92:	58 1c       	cp.w	r12,1
80008e94:	c0 33       	brcs	80008e9a <__avr32_f64_cmp_ge+0x3e>
80008e96:	5e 0f       	reteq	1
80008e98:	5e 1d       	retne	0
80008e9a:	10 3a       	cp.w	r10,r8
80008e9c:	f2 0b 13 00 	cpc	r11,r9
80008ea0:	5e 2f       	reths	1
80008ea2:	5e 3d       	retlo	0
80008ea4:	14 38       	cp.w	r8,r10
80008ea6:	f6 09 13 00 	cpc	r9,r11
80008eaa:	5e 2f       	reths	1
80008eac:	5e 3d       	retlo	0
80008eae:	1b 07       	ld.w	r7,sp++
80008eb0:	d8 0a       	popm	pc,r12=0
80008eb2:	58 17       	cp.w	r7,1
80008eb4:	5f 0c       	sreq	r12
80008eb6:	58 09       	cp.w	r9,0
80008eb8:	f5 b8 00 00 	subfeq	r8,0
80008ebc:	1b 07       	ld.w	r7,sp++
80008ebe:	1b 0e       	ld.w	lr,sp++
80008ec0:	5e 0f       	reteq	1
80008ec2:	5e fc       	retal	r12

80008ec4 <__avr32_f64_cmp_lt>:
80008ec4:	1a de       	st.w	--sp,lr
80008ec6:	1a d7       	st.w	--sp,r7
80008ec8:	a1 7b       	lsl	r11,0x1
80008eca:	5f 3c       	srlo	r12
80008ecc:	a1 79       	lsl	r9,0x1
80008ece:	5f 37       	srlo	r7
80008ed0:	5c fc       	rol	r12
80008ed2:	fc 1e ff e0 	movh	lr,0xffe0
80008ed6:	58 0a       	cp.w	r10,0
80008ed8:	fc 0b 13 00 	cpc	r11,lr
80008edc:	e0 8b 00 1d 	brhi	80008f16 <__avr32_f64_cmp_lt+0x52>
80008ee0:	58 08       	cp.w	r8,0
80008ee2:	fc 09 13 00 	cpc	r9,lr
80008ee6:	e0 8b 00 18 	brhi	80008f16 <__avr32_f64_cmp_lt+0x52>
80008eea:	58 0b       	cp.w	r11,0
80008eec:	f5 ba 00 00 	subfeq	r10,0
80008ef0:	c1 50       	breq	80008f1a <__avr32_f64_cmp_lt+0x56>
80008ef2:	1b 07       	ld.w	r7,sp++
80008ef4:	1b 0e       	ld.w	lr,sp++
80008ef6:	58 3c       	cp.w	r12,3
80008ef8:	c0 a0       	breq	80008f0c <__avr32_f64_cmp_lt+0x48>
80008efa:	58 1c       	cp.w	r12,1
80008efc:	c0 33       	brcs	80008f02 <__avr32_f64_cmp_lt+0x3e>
80008efe:	5e 0d       	reteq	0
80008f00:	5e 1f       	retne	1
80008f02:	10 3a       	cp.w	r10,r8
80008f04:	f2 0b 13 00 	cpc	r11,r9
80008f08:	5e 2d       	reths	0
80008f0a:	5e 3f       	retlo	1
80008f0c:	14 38       	cp.w	r8,r10
80008f0e:	f6 09 13 00 	cpc	r9,r11
80008f12:	5e 2d       	reths	0
80008f14:	5e 3f       	retlo	1
80008f16:	1b 07       	ld.w	r7,sp++
80008f18:	d8 0a       	popm	pc,r12=0
80008f1a:	58 17       	cp.w	r7,1
80008f1c:	5f 1c       	srne	r12
80008f1e:	58 09       	cp.w	r9,0
80008f20:	f5 b8 00 00 	subfeq	r8,0
80008f24:	1b 07       	ld.w	r7,sp++
80008f26:	1b 0e       	ld.w	lr,sp++
80008f28:	5e 0d       	reteq	0
80008f2a:	5e fc       	retal	r12

80008f2c <__avr32_f64_div>:
80008f2c:	eb cd 40 ff 	pushm	r0-r7,lr
80008f30:	f7 e9 20 0e 	eor	lr,r11,r9
80008f34:	f6 07 16 14 	lsr	r7,r11,0x14
80008f38:	a9 7b       	lsl	r11,0x9
80008f3a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008f3e:	a9 7a       	lsl	r10,0x9
80008f40:	bd bb       	sbr	r11,0x1d
80008f42:	e4 1b 3f ff 	andh	r11,0x3fff
80008f46:	ab d7       	cbr	r7,0xb
80008f48:	e0 80 00 cc 	breq	800090e0 <__avr32_f64_div_round_subnormal+0x54>
80008f4c:	e0 47 07 ff 	cp.w	r7,2047
80008f50:	e0 84 00 b5 	brge	800090ba <__avr32_f64_div_round_subnormal+0x2e>
80008f54:	f2 06 16 14 	lsr	r6,r9,0x14
80008f58:	a9 79       	lsl	r9,0x9
80008f5a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008f5e:	a9 78       	lsl	r8,0x9
80008f60:	bd b9       	sbr	r9,0x1d
80008f62:	e4 19 3f ff 	andh	r9,0x3fff
80008f66:	ab d6       	cbr	r6,0xb
80008f68:	e0 80 00 e2 	breq	8000912c <__avr32_f64_div_round_subnormal+0xa0>
80008f6c:	e0 46 07 ff 	cp.w	r6,2047
80008f70:	e0 84 00 b2 	brge	800090d4 <__avr32_f64_div_round_subnormal+0x48>
80008f74:	0c 17       	sub	r7,r6
80008f76:	fe 37 fc 01 	sub	r7,-1023
80008f7a:	fc 1c 80 00 	movh	r12,0x8000
80008f7e:	f8 03 16 01 	lsr	r3,r12,0x1
80008f82:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008f86:	5c d4       	com	r4
80008f88:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008f8c:	e6 09 06 44 	mulu.d	r4,r3,r9
80008f90:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008f94:	e6 05 06 44 	mulu.d	r4,r3,r5
80008f98:	ea 03 15 02 	lsl	r3,r5,0x2
80008f9c:	e6 09 06 44 	mulu.d	r4,r3,r9
80008fa0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008fa4:	e6 05 06 44 	mulu.d	r4,r3,r5
80008fa8:	ea 03 15 02 	lsl	r3,r5,0x2
80008fac:	e6 09 06 44 	mulu.d	r4,r3,r9
80008fb0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008fb4:	e6 05 06 44 	mulu.d	r4,r3,r5
80008fb8:	ea 03 15 02 	lsl	r3,r5,0x2
80008fbc:	e6 08 06 40 	mulu.d	r0,r3,r8
80008fc0:	e4 09 07 40 	macu.d	r0,r2,r9
80008fc4:	e6 09 06 44 	mulu.d	r4,r3,r9
80008fc8:	02 04       	add	r4,r1
80008fca:	5c 05       	acr	r5
80008fcc:	a3 65       	lsl	r5,0x2
80008fce:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008fd2:	a3 64       	lsl	r4,0x2
80008fd4:	5c 34       	neg	r4
80008fd6:	f8 05 01 45 	sbc	r5,r12,r5
80008fda:	e6 04 06 40 	mulu.d	r0,r3,r4
80008fde:	e4 05 07 40 	macu.d	r0,r2,r5
80008fe2:	e6 05 06 44 	mulu.d	r4,r3,r5
80008fe6:	02 04       	add	r4,r1
80008fe8:	5c 05       	acr	r5
80008fea:	ea 03 15 02 	lsl	r3,r5,0x2
80008fee:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008ff2:	e8 02 15 02 	lsl	r2,r4,0x2
80008ff6:	e6 08 06 40 	mulu.d	r0,r3,r8
80008ffa:	e4 09 07 40 	macu.d	r0,r2,r9
80008ffe:	e6 09 06 44 	mulu.d	r4,r3,r9
80009002:	02 04       	add	r4,r1
80009004:	5c 05       	acr	r5
80009006:	a3 65       	lsl	r5,0x2
80009008:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000900c:	a3 64       	lsl	r4,0x2
8000900e:	5c 34       	neg	r4
80009010:	f8 05 01 45 	sbc	r5,r12,r5
80009014:	e6 04 06 40 	mulu.d	r0,r3,r4
80009018:	e4 05 07 40 	macu.d	r0,r2,r5
8000901c:	e6 05 06 44 	mulu.d	r4,r3,r5
80009020:	02 04       	add	r4,r1
80009022:	5c 05       	acr	r5
80009024:	ea 03 15 02 	lsl	r3,r5,0x2
80009028:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000902c:	e8 02 15 02 	lsl	r2,r4,0x2
80009030:	e6 0a 06 40 	mulu.d	r0,r3,r10
80009034:	e4 0b 07 40 	macu.d	r0,r2,r11
80009038:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000903c:	02 02       	add	r2,r1
8000903e:	5c 03       	acr	r3
80009040:	ed b3 00 1c 	bld	r3,0x1c
80009044:	c0 90       	breq	80009056 <__avr32_f64_div+0x12a>
80009046:	a1 72       	lsl	r2,0x1
80009048:	5c f3       	rol	r3
8000904a:	20 17       	sub	r7,1
8000904c:	a3 9a       	lsr	r10,0x3
8000904e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80009052:	a3 9b       	lsr	r11,0x3
80009054:	c0 58       	rjmp	8000905e <__avr32_f64_div+0x132>
80009056:	a5 8a       	lsr	r10,0x4
80009058:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000905c:	a5 8b       	lsr	r11,0x4
8000905e:	58 07       	cp.w	r7,0
80009060:	e0 8a 00 8b 	brle	80009176 <__avr32_f64_div_res_subnormal>
80009064:	e0 12 ff 00 	andl	r2,0xff00
80009068:	e8 12 00 80 	orl	r2,0x80
8000906c:	e6 08 06 40 	mulu.d	r0,r3,r8
80009070:	e4 09 07 40 	macu.d	r0,r2,r9
80009074:	e4 08 06 44 	mulu.d	r4,r2,r8
80009078:	e6 09 06 48 	mulu.d	r8,r3,r9
8000907c:	00 05       	add	r5,r0
8000907e:	f0 01 00 48 	adc	r8,r8,r1
80009082:	5c 09       	acr	r9
80009084:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009088:	58 04       	cp.w	r4,0
8000908a:	5c 25       	cpc	r5

8000908c <__avr32_f64_div_round_subnormal>:
8000908c:	f4 08 13 00 	cpc	r8,r10
80009090:	f6 09 13 00 	cpc	r9,r11
80009094:	5f 36       	srlo	r6
80009096:	f8 06 17 00 	moveq	r6,r12
8000909a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000909e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800090a2:	e6 0b 16 08 	lsr	r11,r3,0x8
800090a6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800090aa:	ed be 00 1f 	bld	lr,0x1f
800090ae:	ef bb 00 1f 	bst	r11,0x1f
800090b2:	0c 0a       	add	r10,r6
800090b4:	5c 0b       	acr	r11
800090b6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800090ba:	e4 1b 00 0f 	andh	r11,0xf
800090be:	14 4b       	or	r11,r10
800090c0:	e0 81 00 a7 	brne	8000920e <__avr32_f64_div_res_subnormal+0x98>
800090c4:	f2 06 16 14 	lsr	r6,r9,0x14
800090c8:	ab d6       	cbr	r6,0xb
800090ca:	e0 46 07 ff 	cp.w	r6,2047
800090ce:	e0 81 00 a4 	brne	80009216 <__avr32_f64_div_res_subnormal+0xa0>
800090d2:	c9 e8       	rjmp	8000920e <__avr32_f64_div_res_subnormal+0x98>
800090d4:	e4 19 00 0f 	andh	r9,0xf
800090d8:	10 49       	or	r9,r8
800090da:	e0 81 00 9a 	brne	8000920e <__avr32_f64_div_res_subnormal+0x98>
800090de:	c9 28       	rjmp	80009202 <__avr32_f64_div_res_subnormal+0x8c>
800090e0:	a3 7b       	lsl	r11,0x3
800090e2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800090e6:	a3 7a       	lsl	r10,0x3
800090e8:	f5 eb 10 04 	or	r4,r10,r11
800090ec:	e0 80 00 a0 	breq	8000922c <__avr32_f64_div_op1_zero>
800090f0:	f6 04 12 00 	clz	r4,r11
800090f4:	c1 70       	breq	80009122 <__avr32_f64_div_round_subnormal+0x96>
800090f6:	c0 c3       	brcs	8000910e <__avr32_f64_div_round_subnormal+0x82>
800090f8:	e8 05 11 20 	rsub	r5,r4,32
800090fc:	f6 04 09 4b 	lsl	r11,r11,r4
80009100:	f4 05 0a 45 	lsr	r5,r10,r5
80009104:	0a 4b       	or	r11,r5
80009106:	f4 04 09 4a 	lsl	r10,r10,r4
8000910a:	08 17       	sub	r7,r4
8000910c:	c0 b8       	rjmp	80009122 <__avr32_f64_div_round_subnormal+0x96>
8000910e:	f4 04 12 00 	clz	r4,r10
80009112:	f9 b4 03 00 	movlo	r4,0
80009116:	f7 b4 02 e0 	subhs	r4,-32
8000911a:	f4 04 09 4b 	lsl	r11,r10,r4
8000911e:	30 0a       	mov	r10,0
80009120:	08 17       	sub	r7,r4
80009122:	a3 8a       	lsr	r10,0x2
80009124:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80009128:	a3 8b       	lsr	r11,0x2
8000912a:	c1 1b       	rjmp	80008f4c <__avr32_f64_div+0x20>
8000912c:	a3 79       	lsl	r9,0x3
8000912e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80009132:	a3 78       	lsl	r8,0x3
80009134:	f3 e8 10 04 	or	r4,r9,r8
80009138:	c6 f0       	breq	80009216 <__avr32_f64_div_res_subnormal+0xa0>
8000913a:	f2 04 12 00 	clz	r4,r9
8000913e:	c1 70       	breq	8000916c <__avr32_f64_div_round_subnormal+0xe0>
80009140:	c0 c3       	brcs	80009158 <__avr32_f64_div_round_subnormal+0xcc>
80009142:	e8 05 11 20 	rsub	r5,r4,32
80009146:	f2 04 09 49 	lsl	r9,r9,r4
8000914a:	f0 05 0a 45 	lsr	r5,r8,r5
8000914e:	0a 49       	or	r9,r5
80009150:	f0 04 09 48 	lsl	r8,r8,r4
80009154:	08 16       	sub	r6,r4
80009156:	c0 b8       	rjmp	8000916c <__avr32_f64_div_round_subnormal+0xe0>
80009158:	f0 04 12 00 	clz	r4,r8
8000915c:	f9 b4 03 00 	movlo	r4,0
80009160:	f7 b4 02 e0 	subhs	r4,-32
80009164:	f0 04 09 49 	lsl	r9,r8,r4
80009168:	30 08       	mov	r8,0
8000916a:	08 16       	sub	r6,r4
8000916c:	a3 88       	lsr	r8,0x2
8000916e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80009172:	a3 89       	lsr	r9,0x2
80009174:	cf ca       	rjmp	80008f6c <__avr32_f64_div+0x40>

80009176 <__avr32_f64_div_res_subnormal>:
80009176:	5c 37       	neg	r7
80009178:	2f f7       	sub	r7,-1
8000917a:	f1 b7 04 c0 	satu	r7,0x6
8000917e:	e0 47 00 20 	cp.w	r7,32
80009182:	c1 54       	brge	800091ac <__avr32_f64_div_res_subnormal+0x36>
80009184:	ee 06 11 20 	rsub	r6,r7,32
80009188:	e4 07 0a 42 	lsr	r2,r2,r7
8000918c:	e6 06 09 4c 	lsl	r12,r3,r6
80009190:	18 42       	or	r2,r12
80009192:	e6 07 0a 43 	lsr	r3,r3,r7
80009196:	f4 06 09 41 	lsl	r1,r10,r6
8000919a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000919e:	f6 06 09 4c 	lsl	r12,r11,r6
800091a2:	18 4a       	or	r10,r12
800091a4:	f6 07 0a 4b 	lsr	r11,r11,r7
800091a8:	30 00       	mov	r0,0
800091aa:	c1 58       	rjmp	800091d4 <__avr32_f64_div_res_subnormal+0x5e>
800091ac:	ee 06 11 20 	rsub	r6,r7,32
800091b0:	f9 b0 00 00 	moveq	r0,0
800091b4:	f9 bc 00 00 	moveq	r12,0
800091b8:	c0 50       	breq	800091c2 <__avr32_f64_div_res_subnormal+0x4c>
800091ba:	f4 06 09 40 	lsl	r0,r10,r6
800091be:	f6 06 09 4c 	lsl	r12,r11,r6
800091c2:	e6 07 0a 42 	lsr	r2,r3,r7
800091c6:	30 03       	mov	r3,0
800091c8:	f4 07 0a 41 	lsr	r1,r10,r7
800091cc:	18 41       	or	r1,r12
800091ce:	f6 07 0a 4a 	lsr	r10,r11,r7
800091d2:	30 0b       	mov	r11,0
800091d4:	e0 12 ff 00 	andl	r2,0xff00
800091d8:	e8 12 00 80 	orl	r2,0x80
800091dc:	e6 08 06 46 	mulu.d	r6,r3,r8
800091e0:	e4 09 07 46 	macu.d	r6,r2,r9
800091e4:	e4 08 06 44 	mulu.d	r4,r2,r8
800091e8:	e6 09 06 48 	mulu.d	r8,r3,r9
800091ec:	0c 05       	add	r5,r6
800091ee:	f0 07 00 48 	adc	r8,r8,r7
800091f2:	5c 09       	acr	r9
800091f4:	30 07       	mov	r7,0
800091f6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800091fa:	00 34       	cp.w	r4,r0
800091fc:	e2 05 13 00 	cpc	r5,r1
80009200:	c4 6b       	rjmp	8000908c <__avr32_f64_div_round_subnormal>
80009202:	1c 9b       	mov	r11,lr
80009204:	e6 1b 80 00 	andh	r11,0x8000,COH
80009208:	30 0a       	mov	r10,0
8000920a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000920e:	3f fb       	mov	r11,-1
80009210:	30 0a       	mov	r10,0
80009212:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009216:	f5 eb 10 04 	or	r4,r10,r11
8000921a:	c0 90       	breq	8000922c <__avr32_f64_div_op1_zero>
8000921c:	1c 9b       	mov	r11,lr
8000921e:	e6 1b 80 00 	andh	r11,0x8000,COH
80009222:	ea 1b 7f f0 	orh	r11,0x7ff0
80009226:	30 0a       	mov	r10,0
80009228:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000922c <__avr32_f64_div_op1_zero>:
8000922c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009230:	ce f0       	breq	8000920e <__avr32_f64_div_res_subnormal+0x98>
80009232:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80009236:	e0 44 07 ff 	cp.w	r4,2047
8000923a:	ce 41       	brne	80009202 <__avr32_f64_div_res_subnormal+0x8c>
8000923c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009240:	ce 10       	breq	80009202 <__avr32_f64_div_res_subnormal+0x8c>
80009242:	ce 6b       	rjmp	8000920e <__avr32_f64_div_res_subnormal+0x98>

80009244 <__avr32_umod64>:
80009244:	d4 31       	pushm	r0-r7,lr
80009246:	1a 97       	mov	r7,sp
80009248:	20 3d       	sub	sp,12
8000924a:	10 9c       	mov	r12,r8
8000924c:	12 95       	mov	r5,r9
8000924e:	14 9e       	mov	lr,r10
80009250:	16 91       	mov	r1,r11
80009252:	16 96       	mov	r6,r11
80009254:	58 09       	cp.w	r9,0
80009256:	e0 81 00 81 	brne	80009358 <__avr32_umod64+0x114>
8000925a:	16 38       	cp.w	r8,r11
8000925c:	e0 88 00 12 	brls	80009280 <__avr32_umod64+0x3c>
80009260:	f0 08 12 00 	clz	r8,r8
80009264:	c4 e0       	breq	80009300 <__avr32_umod64+0xbc>
80009266:	f6 08 09 46 	lsl	r6,r11,r8
8000926a:	f8 08 09 4c 	lsl	r12,r12,r8
8000926e:	f0 0b 11 20 	rsub	r11,r8,32
80009272:	f4 08 09 4e 	lsl	lr,r10,r8
80009276:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000927a:	f7 e6 10 06 	or	r6,r11,r6
8000927e:	c4 18       	rjmp	80009300 <__avr32_umod64+0xbc>
80009280:	58 08       	cp.w	r8,0
80009282:	c0 51       	brne	8000928c <__avr32_umod64+0x48>
80009284:	30 19       	mov	r9,1
80009286:	f2 08 0d 08 	divu	r8,r9,r8
8000928a:	10 9c       	mov	r12,r8
8000928c:	f8 08 12 00 	clz	r8,r12
80009290:	c0 31       	brne	80009296 <__avr32_umod64+0x52>
80009292:	18 16       	sub	r6,r12
80009294:	c3 68       	rjmp	80009300 <__avr32_umod64+0xbc>
80009296:	f0 03 11 20 	rsub	r3,r8,32
8000929a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000929e:	f8 08 09 4c 	lsl	r12,r12,r8
800092a2:	ec 08 09 49 	lsl	r9,r6,r8
800092a6:	ec 03 0a 43 	lsr	r3,r6,r3
800092aa:	f7 e9 10 09 	or	r9,r11,r9
800092ae:	f8 05 16 10 	lsr	r5,r12,0x10
800092b2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800092b6:	e6 05 0d 02 	divu	r2,r3,r5
800092ba:	f2 0e 16 10 	lsr	lr,r9,0x10
800092be:	ec 02 02 4b 	mul	r11,r6,r2
800092c2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800092c6:	16 3e       	cp.w	lr,r11
800092c8:	c0 72       	brcc	800092d6 <__avr32_umod64+0x92>
800092ca:	18 0e       	add	lr,r12
800092cc:	18 3e       	cp.w	lr,r12
800092ce:	c0 43       	brcs	800092d6 <__avr32_umod64+0x92>
800092d0:	16 3e       	cp.w	lr,r11
800092d2:	fd dc e3 0e 	addcs	lr,lr,r12
800092d6:	fc 0b 01 03 	sub	r3,lr,r11
800092da:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800092de:	e6 05 0d 02 	divu	r2,r3,r5
800092e2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800092e6:	a5 36       	mul	r6,r2
800092e8:	0c 39       	cp.w	r9,r6
800092ea:	c0 72       	brcc	800092f8 <__avr32_umod64+0xb4>
800092ec:	18 09       	add	r9,r12
800092ee:	18 39       	cp.w	r9,r12
800092f0:	c0 43       	brcs	800092f8 <__avr32_umod64+0xb4>
800092f2:	0c 39       	cp.w	r9,r6
800092f4:	f3 dc e3 09 	addcs	r9,r9,r12
800092f8:	f2 06 01 06 	sub	r6,r9,r6
800092fc:	f4 08 09 4e 	lsl	lr,r10,r8
80009300:	f8 0a 16 10 	lsr	r10,r12,0x10
80009304:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009308:	ec 0a 0d 02 	divu	r2,r6,r10
8000930c:	fc 09 16 10 	lsr	r9,lr,0x10
80009310:	ea 02 02 4b 	mul	r11,r5,r2
80009314:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009318:	16 39       	cp.w	r9,r11
8000931a:	c0 72       	brcc	80009328 <__avr32_umod64+0xe4>
8000931c:	18 09       	add	r9,r12
8000931e:	18 39       	cp.w	r9,r12
80009320:	c0 43       	brcs	80009328 <__avr32_umod64+0xe4>
80009322:	16 39       	cp.w	r9,r11
80009324:	f3 dc e3 09 	addcs	r9,r9,r12
80009328:	f2 0b 01 0b 	sub	r11,r9,r11
8000932c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009330:	f6 0a 0d 0a 	divu	r10,r11,r10
80009334:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009338:	ea 0a 02 4a 	mul	r10,r5,r10
8000933c:	14 3e       	cp.w	lr,r10
8000933e:	c0 72       	brcc	8000934c <__avr32_umod64+0x108>
80009340:	18 0e       	add	lr,r12
80009342:	18 3e       	cp.w	lr,r12
80009344:	c0 43       	brcs	8000934c <__avr32_umod64+0x108>
80009346:	14 3e       	cp.w	lr,r10
80009348:	fd dc e3 0e 	addcs	lr,lr,r12
8000934c:	fc 0a 01 0a 	sub	r10,lr,r10
80009350:	30 0b       	mov	r11,0
80009352:	f4 08 0a 4a 	lsr	r10,r10,r8
80009356:	c7 b8       	rjmp	8000944c <__avr32_umod64+0x208>
80009358:	16 39       	cp.w	r9,r11
8000935a:	e0 8b 00 79 	brhi	8000944c <__avr32_umod64+0x208>
8000935e:	f2 09 12 00 	clz	r9,r9
80009362:	c1 21       	brne	80009386 <__avr32_umod64+0x142>
80009364:	10 3a       	cp.w	r10,r8
80009366:	5f 2b       	srhs	r11
80009368:	0a 31       	cp.w	r1,r5
8000936a:	5f ba       	srhi	r10
8000936c:	f7 ea 10 0a 	or	r10,r11,r10
80009370:	f2 0a 18 00 	cp.b	r10,r9
80009374:	c0 60       	breq	80009380 <__avr32_umod64+0x13c>
80009376:	fc 08 01 0c 	sub	r12,lr,r8
8000937a:	e2 05 01 46 	sbc	r6,r1,r5
8000937e:	18 9e       	mov	lr,r12
80009380:	0c 9b       	mov	r11,r6
80009382:	1c 9a       	mov	r10,lr
80009384:	c6 48       	rjmp	8000944c <__avr32_umod64+0x208>
80009386:	ea 09 09 4c 	lsl	r12,r5,r9
8000938a:	f2 06 11 20 	rsub	r6,r9,32
8000938e:	f6 09 09 4b 	lsl	r11,r11,r9
80009392:	f0 09 09 42 	lsl	r2,r8,r9
80009396:	ef 46 ff f4 	st.w	r7[-12],r6
8000939a:	f0 06 0a 48 	lsr	r8,r8,r6
8000939e:	18 48       	or	r8,r12
800093a0:	e2 06 0a 4c 	lsr	r12,r1,r6
800093a4:	f4 09 09 43 	lsl	r3,r10,r9
800093a8:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
800093ac:	f4 06 0a 4a 	lsr	r10,r10,r6
800093b0:	16 4a       	or	r10,r11
800093b2:	f0 0b 16 10 	lsr	r11,r8,0x10
800093b6:	f8 0b 0d 04 	divu	r4,r12,r11
800093ba:	f4 0c 16 10 	lsr	r12,r10,0x10
800093be:	08 91       	mov	r1,r4
800093c0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
800093c4:	e8 0e 02 46 	mul	r6,r4,lr
800093c8:	0c 3c       	cp.w	r12,r6
800093ca:	c0 a2       	brcc	800093de <__avr32_umod64+0x19a>
800093cc:	20 11       	sub	r1,1
800093ce:	10 0c       	add	r12,r8
800093d0:	10 3c       	cp.w	r12,r8
800093d2:	c0 63       	brcs	800093de <__avr32_umod64+0x19a>
800093d4:	0c 3c       	cp.w	r12,r6
800093d6:	f7 b1 03 01 	sublo	r1,1
800093da:	f9 d8 e3 0c 	addcs	r12,r12,r8
800093de:	0c 1c       	sub	r12,r6
800093e0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800093e4:	f8 0b 0d 04 	divu	r4,r12,r11
800093e8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800093ec:	08 96       	mov	r6,r4
800093ee:	e8 0e 02 4e 	mul	lr,r4,lr
800093f2:	1c 3b       	cp.w	r11,lr
800093f4:	c0 a2       	brcc	80009408 <__avr32_umod64+0x1c4>
800093f6:	20 16       	sub	r6,1
800093f8:	10 0b       	add	r11,r8
800093fa:	10 3b       	cp.w	r11,r8
800093fc:	c0 63       	brcs	80009408 <__avr32_umod64+0x1c4>
800093fe:	1c 3b       	cp.w	r11,lr
80009400:	f7 b6 03 01 	sublo	r6,1
80009404:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009408:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000940c:	1c 1b       	sub	r11,lr
8000940e:	e2 02 06 40 	mulu.d	r0,r1,r2
80009412:	00 9e       	mov	lr,r0
80009414:	02 9c       	mov	r12,r1
80009416:	16 3c       	cp.w	r12,r11
80009418:	e0 8b 00 08 	brhi	80009428 <__avr32_umod64+0x1e4>
8000941c:	5f 06       	sreq	r6
8000941e:	06 30       	cp.w	r0,r3
80009420:	5f ba       	srhi	r10
80009422:	ed ea 00 0a 	and	r10,r6,r10
80009426:	c0 60       	breq	80009432 <__avr32_umod64+0x1ee>
80009428:	fc 02 01 04 	sub	r4,lr,r2
8000942c:	f8 08 01 4c 	sbc	r12,r12,r8
80009430:	08 9e       	mov	lr,r4
80009432:	e6 0e 01 0a 	sub	r10,r3,lr
80009436:	f6 0c 01 4c 	sbc	r12,r11,r12
8000943a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000943e:	f8 09 0a 4b 	lsr	r11,r12,r9
80009442:	f4 09 0a 4a 	lsr	r10,r10,r9
80009446:	f8 01 09 4c 	lsl	r12,r12,r1
8000944a:	18 4a       	or	r10,r12
8000944c:	2f dd       	sub	sp,-12
8000944e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009600:	c0 08       	rjmp	80009600 <_evba>
	...

80009604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009604:	c0 08       	rjmp	80009604 <_handle_TLB_Multiple_Hit>
	...

80009608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009608:	c0 08       	rjmp	80009608 <_handle_Bus_Error_Data_Fetch>
	...

8000960c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000960c:	c0 08       	rjmp	8000960c <_handle_Bus_Error_Instruction_Fetch>
	...

80009610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009610:	c0 08       	rjmp	80009610 <_handle_NMI>
	...

80009614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009614:	c0 08       	rjmp	80009614 <_handle_Instruction_Address>
	...

80009618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009618:	c0 08       	rjmp	80009618 <_handle_ITLB_Protection>
	...

8000961c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000961c:	c0 08       	rjmp	8000961c <_handle_Breakpoint>
	...

80009620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009620:	c0 08       	rjmp	80009620 <_handle_Illegal_Opcode>
	...

80009624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009624:	c0 08       	rjmp	80009624 <_handle_Unimplemented_Instruction>
	...

80009628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009628:	c0 08       	rjmp	80009628 <_handle_Privilege_Violation>
	...

8000962c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000962c:	c0 08       	rjmp	8000962c <_handle_Floating_Point>
	...

80009630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009630:	c0 08       	rjmp	80009630 <_handle_Coprocessor_Absent>
	...

80009634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009634:	c0 08       	rjmp	80009634 <_handle_Data_Address_Read>
	...

80009638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009638:	c0 08       	rjmp	80009638 <_handle_Data_Address_Write>
	...

8000963c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000963c:	c0 08       	rjmp	8000963c <_handle_DTLB_Protection_Read>
	...

80009640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009640:	c0 08       	rjmp	80009640 <_handle_DTLB_Protection_Write>
	...

80009644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009644:	c0 08       	rjmp	80009644 <_handle_DTLB_Modified>
	...

80009650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009650:	c0 08       	rjmp	80009650 <_handle_ITLB_Miss>
	...

80009660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009660:	c0 08       	rjmp	80009660 <_handle_DTLB_Miss_Read>
	...

80009670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009670:	c0 08       	rjmp	80009670 <_handle_DTLB_Miss_Write>
	...

80009700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009700:	c0 08       	rjmp	80009700 <_handle_Supervisor_Call>
80009702:	d7 03       	nop

80009704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009704:	30 0c       	mov	r12,0
80009706:	fe b0 c8 55 	rcall	800027b0 <_get_interrupt_handler>
8000970a:	58 0c       	cp.w	r12,0
8000970c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009710:	d6 03       	rete

80009712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009712:	30 1c       	mov	r12,1
80009714:	fe b0 c8 4e 	rcall	800027b0 <_get_interrupt_handler>
80009718:	58 0c       	cp.w	r12,0
8000971a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000971e:	d6 03       	rete

80009720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009720:	30 2c       	mov	r12,2
80009722:	fe b0 c8 47 	rcall	800027b0 <_get_interrupt_handler>
80009726:	58 0c       	cp.w	r12,0
80009728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000972c:	d6 03       	rete

8000972e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000972e:	30 3c       	mov	r12,3
80009730:	fe b0 c8 40 	rcall	800027b0 <_get_interrupt_handler>
80009734:	58 0c       	cp.w	r12,0
80009736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000973a:	d6 03       	rete
8000973c:	d7 03       	nop
8000973e:	d7 03       	nop
80009740:	d7 03       	nop
80009742:	d7 03       	nop
80009744:	d7 03       	nop
80009746:	d7 03       	nop
80009748:	d7 03       	nop
8000974a:	d7 03       	nop
8000974c:	d7 03       	nop
8000974e:	d7 03       	nop
80009750:	d7 03       	nop
80009752:	d7 03       	nop
80009754:	d7 03       	nop
80009756:	d7 03       	nop
80009758:	d7 03       	nop
8000975a:	d7 03       	nop
8000975c:	d7 03       	nop
8000975e:	d7 03       	nop
80009760:	d7 03       	nop
80009762:	d7 03       	nop
80009764:	d7 03       	nop
80009766:	d7 03       	nop
80009768:	d7 03       	nop
8000976a:	d7 03       	nop
8000976c:	d7 03       	nop
8000976e:	d7 03       	nop
80009770:	d7 03       	nop
80009772:	d7 03       	nop
80009774:	d7 03       	nop
80009776:	d7 03       	nop
80009778:	d7 03       	nop
8000977a:	d7 03       	nop
8000977c:	d7 03       	nop
8000977e:	d7 03       	nop
80009780:	d7 03       	nop
80009782:	d7 03       	nop
80009784:	d7 03       	nop
80009786:	d7 03       	nop
80009788:	d7 03       	nop
8000978a:	d7 03       	nop
8000978c:	d7 03       	nop
8000978e:	d7 03       	nop
80009790:	d7 03       	nop
80009792:	d7 03       	nop
80009794:	d7 03       	nop
80009796:	d7 03       	nop
80009798:	d7 03       	nop
8000979a:	d7 03       	nop
8000979c:	d7 03       	nop
8000979e:	d7 03       	nop
800097a0:	d7 03       	nop
800097a2:	d7 03       	nop
800097a4:	d7 03       	nop
800097a6:	d7 03       	nop
800097a8:	d7 03       	nop
800097aa:	d7 03       	nop
800097ac:	d7 03       	nop
800097ae:	d7 03       	nop
800097b0:	d7 03       	nop
800097b2:	d7 03       	nop
800097b4:	d7 03       	nop
800097b6:	d7 03       	nop
800097b8:	d7 03       	nop
800097ba:	d7 03       	nop
800097bc:	d7 03       	nop
800097be:	d7 03       	nop
800097c0:	d7 03       	nop
800097c2:	d7 03       	nop
800097c4:	d7 03       	nop
800097c6:	d7 03       	nop
800097c8:	d7 03       	nop
800097ca:	d7 03       	nop
800097cc:	d7 03       	nop
800097ce:	d7 03       	nop
800097d0:	d7 03       	nop
800097d2:	d7 03       	nop
800097d4:	d7 03       	nop
800097d6:	d7 03       	nop
800097d8:	d7 03       	nop
800097da:	d7 03       	nop
800097dc:	d7 03       	nop
800097de:	d7 03       	nop
800097e0:	d7 03       	nop
800097e2:	d7 03       	nop
800097e4:	d7 03       	nop
800097e6:	d7 03       	nop
800097e8:	d7 03       	nop
800097ea:	d7 03       	nop
800097ec:	d7 03       	nop
800097ee:	d7 03       	nop
800097f0:	d7 03       	nop
800097f2:	d7 03       	nop
800097f4:	d7 03       	nop
800097f6:	d7 03       	nop
800097f8:	d7 03       	nop
800097fa:	d7 03       	nop
800097fc:	d7 03       	nop
800097fe:	d7 03       	nop
