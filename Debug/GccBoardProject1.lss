
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007708  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009800  80009800  00009c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000958  80009a00  80009a00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000540  00000008  8000a358  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000308  00000548  00000548  00000000  2**2
                  ALLOC
  8 .heap         000027b0  00000850  00000850  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000ad48  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000db0  00000000  00000000  0000ad78  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001a79  00000000  00000000  0000bb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00028454  00000000  00000000  0000d5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005859  00000000  00000000  000359f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ec7a  00000000  00000000  0003b24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000020a0  00000000  00000000  00049ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005496  00000000  00000000  0004bf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000a7e0  00000000  00000000  000513fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 007971f8  00000000  00000000  0005bbde  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00001020  00000000  00000000  007f2dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 d4 	sub	pc,pc,-3372

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	05 48       	ld.w	r8,--r2
800020c0:	00 00       	add	r0,r0
800020c2:	05 5c       	ld.sh	r12,--r2
800020c4:	00 00       	add	r0,r0
800020c6:	05 54       	ld.sh	r4,--r2
800020c8:	00 00       	add	r0,r0
800020ca:	05 60       	ld.uh	r0,--r2
800020cc:	00 00       	add	r0,r0
800020ce:	05 4c       	ld.w	r12,--r2
800020d0:	00 00       	add	r0,r0
800020d2:	05 50       	ld.sh	r0,--r2
800020d4:	00 00       	add	r0,r0
800020d6:	05 68       	ld.uh	r8,--r2
800020d8:	00 00       	add	r0,r0
800020da:	05 58       	ld.sh	r8,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 64       	ld.uh	r4,--r2

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	05 48       	ld.w	r8,--r2

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	05 48       	ld.w	r8,--r2
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	05 58       	ld.sh	r8,--r2
80002200:	00 00       	add	r0,r0
80002202:	05 68       	ld.uh	r8,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 60       	ld.uh	r0,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 54       	ld.sh	r4,--r2
8000220c:	00 00       	add	r0,r0
8000220e:	05 5c       	ld.sh	r12,--r2
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	18 96       	mov	r6,r12
80002236:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002238:	30 28       	mov	r8,2
8000223a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000223c:	4b 78       	lddpc	r8,80002318 <twim_read_packet+0xe8>
8000223e:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002240:	f0 1f 00 37 	mcall	8000231c <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002244:	6e 29       	ld.w	r9,r7[0x8]
80002246:	4b 78       	lddpc	r8,80002320 <twim_read_packet+0xf0>
80002248:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224a:	6e 39       	ld.w	r9,r7[0xc]
8000224c:	4b 68       	lddpc	r8,80002324 <twim_read_packet+0xf4>
8000224e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002250:	30 08       	mov	r8,0
80002252:	4b 6a       	lddpc	r10,80002328 <twim_read_packet+0xf8>
80002254:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002256:	30 0b       	mov	r11,0
80002258:	4b 5a       	lddpc	r10,8000232c <twim_read_packet+0xfc>
8000225a:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
8000225c:	0f fa       	ld.ub	r10,r7[0x7]
8000225e:	f0 0a 18 00 	cp.b	r10,r8
80002262:	c2 50       	breq	800022ac <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002264:	4a d8       	lddpc	r8,80002318 <twim_read_packet+0xe8>
80002266:	70 08       	ld.w	r8,r8[0x0]
80002268:	30 19       	mov	r9,1
8000226a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226c:	e0 69 00 80 	mov	r9,128
80002270:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002272:	30 29       	mov	r9,2
80002274:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002276:	ee ca ff fc 	sub	r10,r7,-4
8000227a:	4a e9       	lddpc	r9,80002330 <twim_read_packet+0x100>
8000227c:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000227e:	0f f9       	ld.ub	r9,r7[0x7]
80002280:	4a da       	lddpc	r10,80002334 <twim_read_packet+0x104>
80002282:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002284:	e0 6b 07 03 	mov	r11,1795
80002288:	4a ca       	lddpc	r10,80002338 <twim_read_packet+0x108>
8000228a:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000228c:	6e 0a       	ld.w	r10,r7[0x0]
8000228e:	a1 7a       	lsl	r10,0x1
80002290:	e8 1a a0 00 	orl	r10,0xa000
80002294:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002298:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229a:	6e 0a       	ld.w	r10,r7[0x0]
8000229c:	6e 39       	ld.w	r9,r7[0xc]
8000229e:	b1 69       	lsl	r9,0x10
800022a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a4:	e8 19 e0 01 	orl	r9,0xe001
800022a8:	91 49       	st.w	r8[0x10],r9
800022aa:	c1 18       	rjmp	800022cc <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022ac:	30 0a       	mov	r10,0
800022ae:	4a 28       	lddpc	r8,80002334 <twim_read_packet+0x104>
800022b0:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b2:	e0 6a 07 01 	mov	r10,1793
800022b6:	4a 18       	lddpc	r8,80002338 <twim_read_packet+0x108>
800022b8:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022ba:	49 88       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022bc:	70 08       	ld.w	r8,r8[0x0]
800022be:	6e 0a       	ld.w	r10,r7[0x0]
800022c0:	b1 69       	lsl	r9,0x10
800022c2:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022c6:	e8 19 e0 01 	orl	r9,0xe001
800022ca:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022cc:	49 38       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	49 a9       	lddpc	r9,80002338 <twim_read_packet+0x108>
800022d2:	72 09       	ld.w	r9,r9[0x0]
800022d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022d6:	30 18       	mov	r8,1
800022d8:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022da:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022dc:	49 48       	lddpc	r8,8000232c <twim_read_packet+0xfc>
800022de:	70 08       	ld.w	r8,r8[0x0]
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 80       	breq	800022f2 <twim_read_packet+0xc2>
800022e4:	c0 b8       	rjmp	800022fa <twim_read_packet+0xca>
		cpu_relax();
800022e6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ea:	6e 08       	ld.w	r8,r7[0x0]
800022ec:	58 08       	cp.w	r8,0
800022ee:	c0 30       	breq	800022f4 <twim_read_packet+0xc4>
800022f0:	c0 58       	rjmp	800022fa <twim_read_packet+0xca>
800022f2:	48 f7       	lddpc	r7,8000232c <twim_read_packet+0xfc>
800022f4:	f0 1f 00 12 	mcall	8000233c <twim_read_packet+0x10c>
800022f8:	cf 70       	breq	800022e6 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fa:	30 28       	mov	r8,2
800022fc:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022fe:	48 c8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002300:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002302:	5b c8       	cp.w	r8,-4
80002304:	c0 70       	breq	80002312 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002306:	48 a8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002308:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230a:	5b e8       	cp.w	r8,-2
8000230c:	c0 30       	breq	80002312 <twim_read_packet+0xe2>
8000230e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002312:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002316:	00 00       	add	r0,r0
80002318:	00 00       	add	r0,r0
8000231a:	05 48       	ld.w	r8,--r2
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 54       	sub	r4,21
80002320:	00 00       	add	r0,r0
80002322:	05 4c       	ld.w	r12,--r2
80002324:	00 00       	add	r0,r0
80002326:	05 50       	ld.sh	r0,--r2
80002328:	00 00       	add	r0,r0
8000232a:	05 60       	ld.uh	r0,--r2
8000232c:	00 00       	add	r0,r0
8000232e:	05 54       	ld.sh	r4,--r2
80002330:	00 00       	add	r0,r0
80002332:	05 58       	ld.sh	r8,--r2
80002334:	00 00       	add	r0,r0
80002336:	05 68       	ld.uh	r8,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 5c       	ld.sh	r12,--r2
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 44       	sub	r4,20

80002340 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002340:	eb cd 40 e0 	pushm	r5-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002348:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000234c:	30 0a       	mov	r10,0
8000234e:	4a 69       	lddpc	r9,800023e4 <twim_master_init+0xa4>
80002350:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002352:	e6 18 00 01 	andh	r8,0x1,COH
80002356:	c0 b1       	brne	8000236c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002358:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235a:	3f f8       	mov	r8,-1
8000235c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000235e:	30 18       	mov	r8,1
80002360:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002362:	e0 68 00 80 	mov	r8,128
80002366:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002368:	d5 03       	csrf	0x10
8000236a:	c0 88       	rjmp	8000237a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000236c:	3f f8       	mov	r8,-1
8000236e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002370:	30 18       	mov	r8,1
80002372:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002374:	e0 68 00 80 	mov	r8,128
80002378:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237a:	3f f8       	mov	r8,-1
8000237c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000237e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002382:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002384:	30 1a       	mov	r10,1
80002386:	e0 6b 02 80 	mov	r11,640
8000238a:	49 8c       	lddpc	r12,800023e8 <twim_master_init+0xa8>
8000238c:	f0 1f 00 18 	mcall	800023ec <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002390:	e6 16 00 01 	andh	r6,0x1,COH
80002394:	c0 21       	brne	80002398 <twim_master_init+0x58>
      cpu_irq_enable();
80002396:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002398:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000239c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000239e:	f0 09 18 00 	cp.b	r9,r8
800023a2:	f9 b8 01 10 	movne	r8,16
800023a6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023aa:	f9 b8 01 ff 	movne	r8,-1
800023ae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b2:	6a 0a       	ld.w	r10,r5[0x0]
800023b4:	6a 1b       	ld.w	r11,r5[0x4]
800023b6:	0e 9c       	mov	r12,r7
800023b8:	f0 1f 00 0e 	mcall	800023f0 <twim_master_init+0xb0>
800023bc:	5b 8c       	cp.w	r12,-8
800023be:	c1 00       	breq	800023de <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c0:	6a 2b       	ld.w	r11,r5[0x8]
800023c2:	0e 9c       	mov	r12,r7
800023c4:	f0 1f 00 0c 	mcall	800023f4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023c8:	48 78       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023cc:	5b c8       	cp.w	r8,-4
800023ce:	c0 70       	breq	800023dc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d0:	48 58       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d4:	5b e8       	cp.w	r8,-2
800023d6:	c0 30       	breq	800023dc <twim_master_init+0x9c>
800023d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023dc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	00 00       	add	r0,r0
800023e6:	05 54       	ld.sh	r4,--r2
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	20 04       	sub	r4,0
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	26 dc       	sub	r12,109
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 e0       	sub	r0,14
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 14       	sub	r4,33

800023f8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023f8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800023fc:	58 0a       	cp.w	r10,0
800023fe:	c6 30       	breq	800024c4 <eic_init+0xcc>
80002400:	30 08       	mov	r8,0
80002402:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002404:	30 19       	mov	r9,1
80002406:	30 1e       	mov	lr,1
80002408:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000240c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002410:	11 96       	ld.ub	r6,r8[0x1]
80002412:	f2 06 18 00 	cp.b	r6,r9
80002416:	c0 71       	brne	80002424 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002418:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241a:	11 86       	ld.ub	r6,r8[0x0]
8000241c:	fc 06 09 46 	lsl	r6,lr,r6
80002420:	0a 46       	or	r6,r5
80002422:	c0 78       	rjmp	80002430 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002424:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002426:	11 86       	ld.ub	r6,r8[0x0]
80002428:	fc 06 09 46 	lsl	r6,lr,r6
8000242c:	5c d6       	com	r6
8000242e:	0a 66       	and	r6,r5
80002430:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002432:	11 a6       	ld.ub	r6,r8[0x2]
80002434:	f2 06 18 00 	cp.b	r6,r9
80002438:	c0 71       	brne	80002446 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000243c:	11 86       	ld.ub	r6,r8[0x0]
8000243e:	fc 06 09 46 	lsl	r6,lr,r6
80002442:	0a 46       	or	r6,r5
80002444:	c0 78       	rjmp	80002452 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002446:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002448:	11 86       	ld.ub	r6,r8[0x0]
8000244a:	fc 06 09 46 	lsl	r6,lr,r6
8000244e:	5c d6       	com	r6
80002450:	0a 66       	and	r6,r5
80002452:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002454:	11 b6       	ld.ub	r6,r8[0x3]
80002456:	f2 06 18 00 	cp.b	r6,r9
8000245a:	c0 71       	brne	80002468 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000245c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000245e:	11 86       	ld.ub	r6,r8[0x0]
80002460:	fc 06 09 46 	lsl	r6,lr,r6
80002464:	0a 46       	or	r6,r5
80002466:	c0 78       	rjmp	80002474 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002468:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246a:	11 86       	ld.ub	r6,r8[0x0]
8000246c:	fc 06 09 46 	lsl	r6,lr,r6
80002470:	5c d6       	com	r6
80002472:	0a 66       	and	r6,r5
80002474:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002476:	11 c6       	ld.ub	r6,r8[0x4]
80002478:	f2 06 18 00 	cp.b	r6,r9
8000247c:	c0 71       	brne	8000248a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000247e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002480:	11 86       	ld.ub	r6,r8[0x0]
80002482:	fc 06 09 46 	lsl	r6,lr,r6
80002486:	0a 46       	or	r6,r5
80002488:	c0 78       	rjmp	80002496 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000248c:	11 86       	ld.ub	r6,r8[0x0]
8000248e:	fc 06 09 46 	lsl	r6,lr,r6
80002492:	5c d6       	com	r6
80002494:	0a 66       	and	r6,r5
80002496:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002498:	11 d6       	ld.ub	r6,r8[0x5]
8000249a:	f2 06 18 00 	cp.b	r6,r9
8000249e:	c0 71       	brne	800024ac <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a2:	11 88       	ld.ub	r8,r8[0x0]
800024a4:	fc 08 09 48 	lsl	r8,lr,r8
800024a8:	0c 48       	or	r8,r6
800024aa:	c0 78       	rjmp	800024b8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024ac:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024ae:	11 88       	ld.ub	r8,r8[0x0]
800024b0:	fc 08 09 48 	lsl	r8,lr,r8
800024b4:	5c d8       	com	r8
800024b6:	0c 68       	and	r8,r6
800024b8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024ba:	2f f7       	sub	r7,-1
800024bc:	0e 98       	mov	r8,r7
800024be:	0e 3a       	cp.w	r10,r7
800024c0:	fe 9b ff a4 	brhi	80002408 <eic_init+0x10>
800024c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024c8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024c8:	30 18       	mov	r8,1
800024ca:	f0 0b 09 48 	lsl	r8,r8,r11
800024ce:	99 c8       	st.w	r12[0x30],r8
}
800024d0:	5e fc       	retal	r12

800024d2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d2:	30 18       	mov	r8,1
800024d4:	f0 0b 09 48 	lsl	r8,r8,r11
800024d8:	99 08       	st.w	r12[0x0],r8
}
800024da:	5e fc       	retal	r12

800024dc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800024e8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ea:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024ec:	e6 18 00 01 	andh	r8,0x1,COH
800024f0:	c0 21       	brne	800024f4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f4:	5e fc       	retal	r12
800024f6:	d7 03       	nop

800024f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 78       	lsl	r8,0x9
800024fe:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002502:	58 7b       	cp.w	r11,7
80002504:	e0 8b 00 05 	brhi	8000250e <gpio_enable_module_pin+0x16>
80002508:	4a 09       	lddpc	r9,80002588 <gpio_enable_module_pin+0x90>
8000250a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000250e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002510:	30 19       	mov	r9,1
80002512:	f2 0c 09 49 	lsl	r9,r9,r12
80002516:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002518:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000251c:	c3 18       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251e:	30 19       	mov	r9,1
80002520:	f2 0c 09 49 	lsl	r9,r9,r12
80002524:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002526:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002528:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252a:	c2 a8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000252c:	30 19       	mov	r9,1
8000252e:	f2 0c 09 49 	lsl	r9,r9,r12
80002532:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002534:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002536:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002538:	c2 38       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002542:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002544:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002546:	c1 c8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002548:	30 19       	mov	r9,1
8000254a:	f2 0c 09 49 	lsl	r9,r9,r12
8000254e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002550:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002552:	91 d9       	st.w	r8[0x34],r9
		break;
80002554:	c1 58       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002556:	30 19       	mov	r9,1
80002558:	f2 0c 09 49 	lsl	r9,r9,r12
8000255c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000255e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002560:	91 d9       	st.w	r8[0x34],r9
		break;
80002562:	c0 e8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002564:	30 19       	mov	r9,1
80002566:	f2 0c 09 49 	lsl	r9,r9,r12
8000256a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000256c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000256e:	91 d9       	st.w	r8[0x34],r9
		break;
80002570:	c0 78       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002572:	30 19       	mov	r9,1
80002574:	f2 0c 09 49 	lsl	r9,r9,r12
80002578:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000257c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000257e:	30 19       	mov	r9,1
80002580:	f2 0c 09 4c 	lsl	r12,r9,r12
80002584:	91 2c       	st.w	r8[0x8],r12
80002586:	5e fd       	retal	0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	9a 00       	ld.sh	r0,sp[0x0]

8000258c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000258c:	d4 21       	pushm	r4-r7,lr
8000258e:	18 97       	mov	r7,r12
80002590:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002592:	58 0b       	cp.w	r11,0
80002594:	c0 31       	brne	8000259a <gpio_enable_module+0xe>
80002596:	30 05       	mov	r5,0
80002598:	c0 d8       	rjmp	800025b2 <gpio_enable_module+0x26>
8000259a:	30 06       	mov	r6,0
8000259c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000259e:	6e 1b       	ld.w	r11,r7[0x4]
800025a0:	6e 0c       	ld.w	r12,r7[0x0]
800025a2:	f0 1f 00 06 	mcall	800025b8 <gpio_enable_module+0x2c>
800025a6:	18 45       	or	r5,r12
		gpiomap++;
800025a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025aa:	2f f6       	sub	r6,-1
800025ac:	0c 34       	cp.w	r4,r6
800025ae:	fe 9b ff f8 	brhi	8000259e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b2:	0a 9c       	mov	r12,r5
800025b4:	d8 22       	popm	r4-r7,pc
800025b6:	00 00       	add	r0,r0
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	24 f8       	sub	r8,79

800025bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025bc:	f8 08 16 05 	lsr	r8,r12,0x5
800025c0:	a9 78       	lsl	r8,0x9
800025c2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025c6:	16 99       	mov	r9,r11
800025c8:	e2 19 00 04 	andl	r9,0x4,COH
800025cc:	c0 70       	breq	800025da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025ce:	30 19       	mov	r9,1
800025d0:	f2 0c 09 49 	lsl	r9,r9,r12
800025d4:	f1 49 00 74 	st.w	r8[116],r9
800025d8:	c0 68       	rjmp	800025e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025da:	30 19       	mov	r9,1
800025dc:	f2 0c 09 49 	lsl	r9,r9,r12
800025e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e4:	16 99       	mov	r9,r11
800025e6:	e2 19 00 80 	andl	r9,0x80,COH
800025ea:	c2 40       	breq	80002632 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025ec:	16 99       	mov	r9,r11
800025ee:	e2 19 01 80 	andl	r9,0x180,COH
800025f2:	c0 90       	breq	80002604 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 49 	lsl	r9,r9,r12
800025fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 49 00 b8 	st.w	r8[184],r9
80002602:	c1 88       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002604:	16 99       	mov	r9,r11
80002606:	e2 19 02 80 	andl	r9,0x280,COH
8000260a:	c0 90       	breq	8000261c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000260c:	30 19       	mov	r9,1
8000260e:	f2 0c 09 49 	lsl	r9,r9,r12
80002612:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002616:	f1 49 00 b8 	st.w	r8[184],r9
8000261a:	c0 c8       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000261c:	16 99       	mov	r9,r11
8000261e:	e2 19 03 80 	andl	r9,0x380,COH
80002622:	c0 80       	breq	80002632 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002624:	30 19       	mov	r9,1
80002626:	f2 0c 09 49 	lsl	r9,r9,r12
8000262a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000262e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002632:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002636:	c1 50       	breq	80002660 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002638:	e2 1b 00 02 	andl	r11,0x2,COH
8000263c:	c0 70       	breq	8000264a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000263e:	30 19       	mov	r9,1
80002640:	f2 0c 09 49 	lsl	r9,r9,r12
80002644:	f1 49 00 54 	st.w	r8[84],r9
80002648:	c0 68       	rjmp	80002654 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264a:	30 19       	mov	r9,1
8000264c:	f2 0c 09 49 	lsl	r9,r9,r12
80002650:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 49 	lsl	r9,r9,r12
8000265a:	f1 49 00 44 	st.w	r8[68],r9
8000265e:	c0 68       	rjmp	8000266a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002660:	30 19       	mov	r9,1
80002662:	f2 0c 09 49 	lsl	r9,r9,r12
80002666:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266a:	30 19       	mov	r9,1
8000266c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002670:	91 1c       	st.w	r8[0x4],r12
}
80002672:	5e fc       	retal	r12

80002674 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002674:	f8 08 16 05 	lsr	r8,r12,0x5
80002678:	a9 78       	lsl	r8,0x9
8000267a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000267e:	30 19       	mov	r9,1
80002680:	f2 0c 09 4c 	lsl	r12,r9,r12
80002684:	f1 4c 00 54 	st.w	r8[84],r12
}
80002688:	5e fc       	retal	r12

8000268a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268a:	f8 08 16 05 	lsr	r8,r12,0x5
8000268e:	a9 78       	lsl	r8,0x9
80002690:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002694:	30 19       	mov	r9,1
80002696:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000269e:	5e fc       	retal	r12

800026a0 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026a0:	f8 08 16 05 	lsr	r8,r12,0x5
800026a4:	a9 78       	lsl	r8,0x9
800026a6:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800026aa:	30 19       	mov	r9,1
800026ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800026b0:	f1 4c 00 5c 	st.w	r8[92],r12
}
800026b4:	5e fc       	retal	r12

800026b6 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026b6:	f8 08 16 05 	lsr	r8,r12,0x5
800026ba:	a9 78       	lsl	r8,0x9
800026bc:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
800026c0:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
800026c4:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800026c8:	30 1a       	mov	r10,1
800026ca:	f4 0c 09 4c 	lsl	r12,r10,r12
800026ce:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026d2:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026d6:	5e fc       	retal	r12

800026d8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026d8:	c0 08       	rjmp	800026d8 <_unhandled_interrupt>
800026da:	d7 03       	nop

800026dc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026dc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026e0:	49 99       	lddpc	r9,80002744 <INTC_register_interrupt+0x68>
800026e2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026e6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026ea:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026ec:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026f0:	58 0a       	cp.w	r10,0
800026f2:	c0 91       	brne	80002704 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026f4:	49 59       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
800026f6:	49 6a       	lddpc	r10,8000274c <INTC_register_interrupt+0x70>
800026f8:	12 1a       	sub	r10,r9
800026fa:	fe 79 10 00 	mov	r9,-61440
800026fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002702:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002704:	58 1a       	cp.w	r10,1
80002706:	c0 a1       	brne	8000271a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002708:	49 09       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
8000270a:	49 2a       	lddpc	r10,80002750 <INTC_register_interrupt+0x74>
8000270c:	12 1a       	sub	r10,r9
8000270e:	bf aa       	sbr	r10,0x1e
80002710:	fe 79 10 00 	mov	r9,-61440
80002714:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002718:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000271a:	58 2a       	cp.w	r10,2
8000271c:	c0 a1       	brne	80002730 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000271e:	48 b9       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002720:	48 da       	lddpc	r10,80002754 <INTC_register_interrupt+0x78>
80002722:	12 1a       	sub	r10,r9
80002724:	bf ba       	sbr	r10,0x1f
80002726:	fe 79 10 00 	mov	r9,-61440
8000272a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000272e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002730:	48 69       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002732:	48 aa       	lddpc	r10,80002758 <INTC_register_interrupt+0x7c>
80002734:	12 1a       	sub	r10,r9
80002736:	ea 1a c0 00 	orh	r10,0xc000
8000273a:	fe 79 10 00 	mov	r9,-61440
8000273e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002742:	5e fc       	retal	r12
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	9a 20       	ld.sh	r0,sp[0x4]
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	98 00       	ld.sh	r0,r12[0x0]
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	99 04       	st.w	r12[0x0],r4
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	99 12       	st.w	r12[0x4],r2
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	99 20       	st.w	r12[0x8],r0
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	99 2e       	st.w	r12[0x8],lr

8000275c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000275c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000275e:	49 18       	lddpc	r8,800027a0 <INTC_init_interrupts+0x44>
80002760:	e3 b8 00 01 	mtsr	0x4,r8
80002764:	49 0e       	lddpc	lr,800027a4 <INTC_init_interrupts+0x48>
80002766:	30 07       	mov	r7,0
80002768:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000276a:	49 0c       	lddpc	r12,800027a8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000276c:	49 05       	lddpc	r5,800027ac <INTC_init_interrupts+0x50>
8000276e:	10 15       	sub	r5,r8
80002770:	fe 76 10 00 	mov	r6,-61440
80002774:	c1 08       	rjmp	80002794 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002776:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002778:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000277a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000277c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002780:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002782:	10 3a       	cp.w	r10,r8
80002784:	fe 9b ff fc 	brhi	8000277c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002788:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000278c:	2f f7       	sub	r7,-1
8000278e:	2f 8e       	sub	lr,-8
80002790:	59 f7       	cp.w	r7,31
80002792:	c0 50       	breq	8000279c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002794:	7c 08       	ld.w	r8,lr[0x0]
80002796:	58 08       	cp.w	r8,0
80002798:	ce f1       	brne	80002776 <INTC_init_interrupts+0x1a>
8000279a:	cf 7b       	rjmp	80002788 <INTC_init_interrupts+0x2c>
8000279c:	d8 22       	popm	r4-r7,pc
8000279e:	00 00       	add	r0,r0
800027a0:	80 00       	ld.sh	r0,r0[0x0]
800027a2:	98 00       	ld.sh	r0,r12[0x0]
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	9a 20       	ld.sh	r0,sp[0x4]
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	26 d8       	sub	r8,109
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	99 04       	st.w	r12[0x0],r4

800027b0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800027b0:	fe 78 10 00 	mov	r8,-61440
800027b4:	e0 69 00 83 	mov	r9,131
800027b8:	f2 0c 01 0c 	sub	r12,r9,r12
800027bc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800027c0:	f2 ca ff c0 	sub	r10,r9,-64
800027c4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027c8:	58 08       	cp.w	r8,0
800027ca:	c0 21       	brne	800027ce <_get_interrupt_handler+0x1e>
800027cc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027ce:	f0 08 12 00 	clz	r8,r8
800027d2:	48 5a       	lddpc	r10,800027e4 <_get_interrupt_handler+0x34>
800027d4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027d8:	f0 08 11 1f 	rsub	r8,r8,31
800027dc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027de:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027e2:	5e fc       	retal	r12
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	9a 20       	ld.sh	r0,sp[0x4]

800027e8 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027e8:	f8 c8 00 01 	sub	r8,r12,1
800027ec:	f0 0b 00 0b 	add	r11,r8,r11
800027f0:	f6 0c 0d 0a 	divu	r10,r11,r12
800027f4:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027f6:	f4 c8 00 01 	sub	r8,r10,1
800027fa:	e0 48 00 fe 	cp.w	r8,254
800027fe:	e0 88 00 03 	brls	80002804 <getBaudDiv+0x1c>
80002802:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002804:	5c 8c       	casts.h	r12
}
80002806:	5e fc       	retal	r12

80002808 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002808:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000280a:	30 18       	mov	r8,1
8000280c:	f0 0b 18 00 	cp.b	r11,r8
80002810:	5f be       	srhi	lr
80002812:	f0 0a 18 00 	cp.b	r10,r8
80002816:	5f b8       	srhi	r8
80002818:	fd e8 10 08 	or	r8,lr,r8
8000281c:	c0 30       	breq	80002822 <spi_selectionMode+0x1a>
8000281e:	30 2c       	mov	r12,2
80002820:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002822:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002824:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002828:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000282c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002830:	99 18       	st.w	r12[0x4],r8
80002832:	d8 0a       	popm	pc,r12=0

80002834 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002834:	78 18       	ld.w	r8,r12[0x4]
80002836:	ea 18 00 0f 	orh	r8,0xf
8000283a:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000283c:	78 18       	ld.w	r8,r12[0x4]
8000283e:	e2 18 00 04 	andl	r8,0x4,COH
80002842:	c0 f0       	breq	80002860 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002844:	30 e8       	mov	r8,14
80002846:	f0 0b 18 00 	cp.b	r11,r8
8000284a:	e0 8b 00 19 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000284e:	78 18       	ld.w	r8,r12[0x4]
80002850:	b1 6b       	lsl	r11,0x10
80002852:	ea 1b ff f0 	orh	r11,0xfff0
80002856:	e8 1b ff ff 	orl	r11,0xffff
8000285a:	10 6b       	and	r11,r8
8000285c:	99 1b       	st.w	r12[0x4],r11
8000285e:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002860:	30 38       	mov	r8,3
80002862:	f0 0b 18 00 	cp.b	r11,r8
80002866:	e0 8b 00 0b 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000286a:	78 18       	ld.w	r8,r12[0x4]
8000286c:	2f 0b       	sub	r11,-16
8000286e:	30 19       	mov	r9,1
80002870:	f2 0b 09 4b 	lsl	r11,r9,r11
80002874:	5c db       	com	r11
80002876:	10 6b       	and	r11,r8
80002878:	99 1b       	st.w	r12[0x4],r11
8000287a:	5e fd       	retal	0
8000287c:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000287e:	5e fc       	retal	r12

80002880 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002880:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002884:	c0 58       	rjmp	8000288e <spi_unselectChip+0xe>
		if (!timeout--) {
80002886:	58 08       	cp.w	r8,0
80002888:	c0 21       	brne	8000288c <spi_unselectChip+0xc>
8000288a:	5e ff       	retal	1
8000288c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000288e:	78 49       	ld.w	r9,r12[0x10]
80002890:	e2 19 02 00 	andl	r9,0x200,COH
80002894:	cf 90       	breq	80002886 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002896:	78 18       	ld.w	r8,r12[0x4]
80002898:	ea 18 00 0f 	orh	r8,0xf
8000289c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000289e:	fc 18 01 00 	movh	r8,0x100
800028a2:	99 08       	st.w	r12[0x0],r8
800028a4:	5e fd       	retal	0
800028a6:	d7 03       	nop

800028a8 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a8:	eb cd 40 f8 	pushm	r3-r7,lr
800028ac:	18 95       	mov	r5,r12
800028ae:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028b0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800028b4:	30 38       	mov	r8,3
800028b6:	f0 06 18 00 	cp.b	r6,r8
800028ba:	e0 8b 00 4d 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800028be:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028c2:	30 18       	mov	r8,1
800028c4:	f0 04 18 00 	cp.b	r4,r8
800028c8:	e0 8b 00 46 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028cc:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028d0:	30 78       	mov	r8,7
800028d2:	f0 03 18 00 	cp.b	r3,r8
800028d6:	e0 88 00 3f 	brls	80002954 <spi_setupChipReg+0xac>
800028da:	31 08       	mov	r8,16
800028dc:	f0 03 18 00 	cp.b	r3,r8
800028e0:	e0 8b 00 3a 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028e4:	14 9b       	mov	r11,r10
800028e6:	6e 1c       	ld.w	r12,r7[0x4]
800028e8:	f0 1f 00 1d 	mcall	8000295c <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028ec:	c3 45       	brlt	80002954 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028ee:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028f0:	ec 09 16 01 	lsr	r9,r6,0x1
800028f4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028f8:	ec 16 00 01 	eorl	r6,0x1
800028fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002900:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002904:	20 83       	sub	r3,8
80002906:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000290a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000290e:	ef 39 00 09 	ld.ub	r9,r7[9]
80002912:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002916:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000291a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000291e:	0f 89       	ld.ub	r9,r7[0x0]
80002920:	30 1a       	mov	r10,1
80002922:	f4 09 18 00 	cp.b	r9,r10
80002926:	c0 e0       	breq	80002942 <spi_setupChipReg+0x9a>
80002928:	c0 a3       	brcs	8000293c <spi_setupChipReg+0x94>
8000292a:	30 2a       	mov	r10,2
8000292c:	f4 09 18 00 	cp.b	r9,r10
80002930:	c0 c0       	breq	80002948 <spi_setupChipReg+0xa0>
80002932:	30 3a       	mov	r10,3
80002934:	f4 09 18 00 	cp.b	r9,r10
80002938:	c0 e1       	brne	80002954 <spi_setupChipReg+0xac>
8000293a:	c0 a8       	rjmp	8000294e <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000293c:	8b c8       	st.w	r5[0x30],r8
8000293e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002942:	8b d8       	st.w	r5[0x34],r8
80002944:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002948:	8b e8       	st.w	r5[0x38],r8
8000294a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000294e:	8b f8       	st.w	r5[0x3c],r8
80002950:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002954:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002956:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000295a:	00 00       	add	r0,r0
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	27 e8       	sub	r8,126

80002960 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002960:	30 18       	mov	r8,1
80002962:	99 08       	st.w	r12[0x0],r8
}
80002964:	5e fc       	retal	r12

80002966 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002966:	76 09       	ld.w	r9,r11[0x0]
80002968:	58 29       	cp.w	r9,2
8000296a:	e0 88 00 03 	brls	80002970 <tc_init_waveform+0xa>
8000296e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002970:	76 18       	ld.w	r8,r11[0x4]
80002972:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002976:	af ba       	sbr	r10,0xf
80002978:	10 9b       	mov	r11,r8
8000297a:	e6 1b c0 00 	andh	r11,0xc000,COH
8000297e:	16 4a       	or	r10,r11
80002980:	10 9b       	mov	r11,r8
80002982:	e6 1b 30 00 	andh	r11,0x3000,COH
80002986:	16 4a       	or	r10,r11
80002988:	10 9b       	mov	r11,r8
8000298a:	e6 1b 0c 00 	andh	r11,0xc00,COH
8000298e:	16 4a       	or	r10,r11
80002990:	10 9b       	mov	r11,r8
80002992:	e6 1b 03 00 	andh	r11,0x300,COH
80002996:	16 4a       	or	r10,r11
80002998:	10 9b       	mov	r11,r8
8000299a:	e6 1b 00 c0 	andh	r11,0xc0,COH
8000299e:	16 4a       	or	r10,r11
800029a0:	10 9b       	mov	r11,r8
800029a2:	e6 1b 00 30 	andh	r11,0x30,COH
800029a6:	16 4a       	or	r10,r11
800029a8:	10 9b       	mov	r11,r8
800029aa:	e6 1b 00 0c 	andh	r11,0xc,COH
800029ae:	16 4a       	or	r10,r11
800029b0:	10 9b       	mov	r11,r8
800029b2:	e6 1b 00 03 	andh	r11,0x3,COH
800029b6:	16 4a       	or	r10,r11
800029b8:	10 9b       	mov	r11,r8
800029ba:	e2 1b 60 00 	andl	r11,0x6000,COH
800029be:	16 4a       	or	r10,r11
800029c0:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
800029c4:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800029c8:	10 9b       	mov	r11,r8
800029ca:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029ce:	16 4a       	or	r10,r11
800029d0:	10 9b       	mov	r11,r8
800029d2:	e2 1b 03 00 	andl	r11,0x300,COH
800029d6:	16 4a       	or	r10,r11
800029d8:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029dc:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029e0:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029e4:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029e8:	10 9b       	mov	r11,r8
800029ea:	e2 1b 00 30 	andl	r11,0x30,COH
800029ee:	16 4a       	or	r10,r11
800029f0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029f4:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029f8:	a5 69       	lsl	r9,0x4
800029fa:	2f f9       	sub	r9,-1
800029fc:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a00:	5e fd       	retal	0

80002a02 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a02:	58 2b       	cp.w	r11,2
80002a04:	e0 88 00 03 	brls	80002a0a <tc_start+0x8>
80002a08:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002a0a:	a7 6b       	lsl	r11,0x6
80002a0c:	16 0c       	add	r12,r11
80002a0e:	30 58       	mov	r8,5
80002a10:	99 08       	st.w	r12[0x0],r8
80002a12:	5e fd       	retal	0

80002a14 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a14:	58 2b       	cp.w	r11,2
80002a16:	e0 88 00 03 	brls	80002a1c <tc_stop+0x8>
80002a1a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80002a1c:	a7 6b       	lsl	r11,0x6
80002a1e:	16 0c       	add	r12,r11
80002a20:	30 28       	mov	r8,2
80002a22:	99 08       	st.w	r12[0x0],r8
80002a24:	5e fd       	retal	0

80002a26 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a26:	58 2b       	cp.w	r11,2
80002a28:	e0 88 00 03 	brls	80002a2e <tc_read_sr+0x8>
80002a2c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a2e:	a7 6b       	lsl	r11,0x6
80002a30:	2e 0b       	sub	r11,-32
80002a32:	16 0c       	add	r12,r11
80002a34:	78 0c       	ld.w	r12,r12[0x0]
}
80002a36:	5e fc       	retal	r12

80002a38 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a38:	58 2b       	cp.w	r11,2
80002a3a:	e0 88 00 03 	brls	80002a40 <tc_write_rc+0x8>
80002a3e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a40:	f6 08 15 04 	lsl	r8,r11,0x4
80002a44:	2f f8       	sub	r8,-1
80002a46:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a4a:	e2 18 80 00 	andl	r8,0x8000,COH
80002a4e:	c0 c0       	breq	80002a66 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a50:	a7 6b       	lsl	r11,0x6
80002a52:	16 0c       	add	r12,r11
80002a54:	2e 4c       	sub	r12,-28
80002a56:	78 08       	ld.w	r8,r12[0x0]
80002a58:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a5c:	e0 18 00 00 	andl	r8,0x0
80002a60:	f3 e8 10 08 	or	r8,r9,r8
80002a64:	99 08       	st.w	r12[0x0],r8

  return value;
80002a66:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a6a:	5e fc       	retal	r12

80002a6c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a6c:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a70:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a74:	58 2b       	cp.w	r11,2
80002a76:	e0 88 00 04 	brls	80002a7e <tc_configure_interrupts+0x12>
80002a7a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a7e:	ee 19 00 01 	eorh	r9,0x1
80002a82:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a86:	74 08       	ld.w	r8,r10[0x0]
80002a88:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a8c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a90:	a7 6e       	lsl	lr,0x6
80002a92:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a96:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a9a:	0e 4e       	or	lr,r7
80002a9c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002aa0:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002aa4:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002aa8:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002aac:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002ab0:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002ab4:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002ab8:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002abc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002ac0:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002ac4:	f6 0e 15 06 	lsl	lr,r11,0x6
80002ac8:	f8 0e 00 0e 	add	lr,r12,lr
80002acc:	2d ce       	sub	lr,-36
80002ace:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002ad0:	58 09       	cp.w	r9,0
80002ad2:	c0 20       	breq	80002ad6 <tc_configure_interrupts+0x6a>
80002ad4:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002ad6:	74 08       	ld.w	r8,r10[0x0]
80002ad8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002adc:	e0 65 00 80 	mov	r5,128
80002ae0:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002ae4:	74 08       	ld.w	r8,r10[0x0]
80002ae6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002aea:	f9 b4 00 40 	moveq	r4,64
80002aee:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002af2:	74 08       	ld.w	r8,r10[0x0]
80002af4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002af8:	f9 b3 00 20 	moveq	r3,32
80002afc:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002b00:	74 08       	ld.w	r8,r10[0x0]
80002b02:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002b06:	f9 b2 00 10 	moveq	r2,16
80002b0a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002b0e:	74 08       	ld.w	r8,r10[0x0]
80002b10:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002b14:	f9 b6 00 08 	moveq	r6,8
80002b18:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002b1c:	74 08       	ld.w	r8,r10[0x0]
80002b1e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002b22:	f9 b7 00 04 	moveq	r7,4
80002b26:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002b2a:	74 08       	ld.w	r8,r10[0x0]
80002b2c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b30:	f9 be 00 02 	moveq	lr,2
80002b34:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b38:	74 08       	ld.w	r8,r10[0x0]
80002b3a:	ec 18 00 01 	eorl	r8,0x1
80002b3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b42:	eb e8 10 08 	or	r8,r5,r8
80002b46:	08 48       	or	r8,r4
80002b48:	06 48       	or	r8,r3
80002b4a:	04 48       	or	r8,r2
80002b4c:	0c 48       	or	r8,r6
80002b4e:	0e 48       	or	r8,r7
80002b50:	1c 48       	or	r8,lr
80002b52:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b56:	f8 0a 00 0a 	add	r10,r12,r10
80002b5a:	2d 8a       	sub	r10,-40
80002b5c:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b5e:	a7 6b       	lsl	r11,0x6
80002b60:	2e 0b       	sub	r11,-32
80002b62:	16 0c       	add	r12,r11
80002b64:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b66:	58 09       	cp.w	r9,0
80002b68:	c0 31       	brne	80002b6e <tc_configure_interrupts+0x102>
80002b6a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b6e:	d5 03       	csrf	0x10
80002b70:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b74 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b74:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b76:	f6 08 15 04 	lsl	r8,r11,0x4
80002b7a:	14 38       	cp.w	r8,r10
80002b7c:	f9 b8 08 10 	movls	r8,16
80002b80:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b84:	f0 0b 02 4b 	mul	r11,r8,r11
80002b88:	f6 09 16 01 	lsr	r9,r11,0x1
80002b8c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b90:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b94:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b98:	f2 cb 00 01 	sub	r11,r9,1
80002b9c:	e0 4b ff fe 	cp.w	r11,65534
80002ba0:	e0 88 00 03 	brls	80002ba6 <usart_set_async_baudrate+0x32>
80002ba4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002ba6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002ba8:	e8 6e 00 00 	mov	lr,524288
80002bac:	59 08       	cp.w	r8,16
80002bae:	fc 08 17 10 	movne	r8,lr
80002bb2:	f9 b8 00 00 	moveq	r8,0
80002bb6:	e4 1b ff f7 	andh	r11,0xfff7
80002bba:	e0 1b fe cf 	andl	r11,0xfecf
80002bbe:	16 48       	or	r8,r11
80002bc0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002bc2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002bc6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002bca:	99 89       	st.w	r12[0x20],r9
80002bcc:	d8 0a       	popm	pc,r12=0

80002bce <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002bce:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002bd0:	e2 18 00 02 	andl	r8,0x2,COH
80002bd4:	c0 31       	brne	80002bda <usart_write_char+0xc>
80002bd6:	30 2c       	mov	r12,2
80002bd8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bda:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bde:	99 7b       	st.w	r12[0x1c],r11
80002be0:	5e fd       	retal	0
80002be2:	d7 03       	nop

80002be4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002be4:	eb cd 40 e0 	pushm	r5-r7,lr
80002be8:	18 96       	mov	r6,r12
80002bea:	16 95       	mov	r5,r11
80002bec:	e0 67 27 0f 	mov	r7,9999
80002bf0:	c0 68       	rjmp	80002bfc <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bf2:	58 07       	cp.w	r7,0
80002bf4:	c0 31       	brne	80002bfa <usart_putchar+0x16>
80002bf6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bfa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bfc:	0a 9b       	mov	r11,r5
80002bfe:	0c 9c       	mov	r12,r6
80002c00:	f0 1f 00 03 	mcall	80002c0c <usart_putchar+0x28>
80002c04:	cf 71       	brne	80002bf2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002c06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2b ce       	sub	lr,-68

80002c10 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c10:	eb cd 40 c0 	pushm	r6-r7,lr
80002c14:	18 96       	mov	r6,r12
80002c16:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c18:	17 8b       	ld.ub	r11,r11[0x0]
80002c1a:	58 0b       	cp.w	r11,0
80002c1c:	c0 80       	breq	80002c2c <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c1e:	2f f7       	sub	r7,-1
80002c20:	0c 9c       	mov	r12,r6
80002c22:	f0 1f 00 04 	mcall	80002c30 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c26:	0f 8b       	ld.ub	r11,r7[0x0]
80002c28:	58 0b       	cp.w	r11,0
80002c2a:	cf a1       	brne	80002c1e <usart_write_line+0xe>
80002c2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c30:	80 00       	ld.sh	r0,r0[0x0]
80002c32:	2b e4       	sub	r4,-66

80002c34 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c34:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c38:	e6 18 00 01 	andh	r8,0x1,COH
80002c3c:	c0 71       	brne	80002c4a <usart_reset+0x16>
80002c3e:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c40:	3f f8       	mov	r8,-1
80002c42:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c44:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c46:	d5 03       	csrf	0x10
80002c48:	c0 48       	rjmp	80002c50 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c4a:	3f f8       	mov	r8,-1
80002c4c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c4e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c50:	30 08       	mov	r8,0
80002c52:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c54:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c56:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c58:	e8 68 61 0c 	mov	r8,549132
80002c5c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c5e:	5e fc       	retal	r12

80002c60 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c60:	eb cd 40 e0 	pushm	r5-r7,lr
80002c64:	18 96       	mov	r6,r12
80002c66:	16 97       	mov	r7,r11
80002c68:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c6a:	f0 1f 00 2f 	mcall	80002d24 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c6e:	58 07       	cp.w	r7,0
80002c70:	c5 80       	breq	80002d20 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c72:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c74:	30 49       	mov	r9,4
80002c76:	f2 08 18 00 	cp.b	r8,r9
80002c7a:	e0 88 00 53 	brls	80002d20 <usart_init_rs232+0xc0>
80002c7e:	30 99       	mov	r9,9
80002c80:	f2 08 18 00 	cp.b	r8,r9
80002c84:	e0 8b 00 4e 	brhi	80002d20 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c88:	0f d9       	ld.ub	r9,r7[0x5]
80002c8a:	30 78       	mov	r8,7
80002c8c:	f0 09 18 00 	cp.b	r9,r8
80002c90:	e0 8b 00 48 	brhi	80002d20 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002c94:	8e 39       	ld.sh	r9,r7[0x6]
80002c96:	e0 68 01 01 	mov	r8,257
80002c9a:	f0 09 19 00 	cp.h	r9,r8
80002c9e:	e0 8b 00 41 	brhi	80002d20 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002ca2:	ef 39 00 08 	ld.ub	r9,r7[8]
80002ca6:	30 38       	mov	r8,3
80002ca8:	f0 09 18 00 	cp.b	r9,r8
80002cac:	e0 8b 00 3a 	brhi	80002d20 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002cb0:	0a 9a       	mov	r10,r5
80002cb2:	6e 0b       	ld.w	r11,r7[0x0]
80002cb4:	0c 9c       	mov	r12,r6
80002cb6:	f0 1f 00 1d 	mcall	80002d28 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cba:	58 1c       	cp.w	r12,1
80002cbc:	c3 20       	breq	80002d20 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002cbe:	0f c8       	ld.ub	r8,r7[0x4]
80002cc0:	30 99       	mov	r9,9
80002cc2:	f2 08 18 00 	cp.b	r8,r9
80002cc6:	c0 51       	brne	80002cd0 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cc8:	6c 18       	ld.w	r8,r6[0x4]
80002cca:	b1 b8       	sbr	r8,0x11
80002ccc:	8d 18       	st.w	r6[0x4],r8
80002cce:	c0 68       	rjmp	80002cda <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002cd0:	6c 19       	ld.w	r9,r6[0x4]
80002cd2:	20 58       	sub	r8,5
80002cd4:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cd8:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cda:	6c 19       	ld.w	r9,r6[0x4]
80002cdc:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002ce0:	0f d8       	ld.ub	r8,r7[0x5]
80002ce2:	a9 78       	lsl	r8,0x9
80002ce4:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002ce8:	12 48       	or	r8,r9
80002cea:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002cec:	8e 38       	ld.sh	r8,r7[0x6]
80002cee:	30 29       	mov	r9,2
80002cf0:	f2 08 19 00 	cp.h	r8,r9
80002cf4:	e0 88 00 09 	brls	80002d06 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002cf8:	6c 18       	ld.w	r8,r6[0x4]
80002cfa:	ad b8       	sbr	r8,0xd
80002cfc:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002cfe:	8e b8       	ld.uh	r8,r7[0x6]
80002d00:	20 28       	sub	r8,2
80002d02:	8d a8       	st.w	r6[0x28],r8
80002d04:	c0 68       	rjmp	80002d10 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002d06:	6c 19       	ld.w	r9,r6[0x4]
80002d08:	5c 78       	castu.h	r8
80002d0a:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d0e:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d10:	6c 18       	ld.w	r8,r6[0x4]
80002d12:	e0 18 ff f0 	andl	r8,0xfff0
80002d16:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d18:	35 08       	mov	r8,80
80002d1a:	8d 08       	st.w	r6[0x0],r8
80002d1c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d20:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	2c 34       	sub	r4,-61
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	2b 74       	sub	r4,-73

80002d2c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d2c:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d30:	fe c0 95 30 	sub	r0,pc,-27344

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d34:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d38:	d5 53       	csrf	0x15
  cp      r0, r1
80002d3a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d3c:	e0 61 05 48 	mov	r1,1352
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d40:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d42:	c0 72       	brcc	80002d50 <idata_load_loop_end>
  cp      r0, r1
80002d44:	fe c2 89 ec 	sub	r2,pc,-30228

80002d48 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d48:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d4a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d4c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d4e:	cf d3       	brcs	80002d48 <idata_load_loop>

80002d50 <idata_load_loop_end>:
  mov     r2, 0
80002d50:	e0 60 05 48 	mov	r0,1352
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d54:	e0 61 08 50 	mov	r1,2128
  cp      r0, r1
  brlo    udata_clear_loop
80002d58:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d5a:	c0 62       	brcc	80002d66 <udata_clear_loop_end>
80002d5c:	30 02       	mov	r2,0
80002d5e:	30 03       	mov	r3,0

80002d60 <udata_clear_loop>:
80002d60:	a1 22       	st.d	r0++,r2
80002d62:	02 30       	cp.w	r0,r1
80002d64:	cf e3       	brcs	80002d60 <udata_clear_loop>

80002d66 <udata_clear_loop_end>:
80002d66:	fe cf f0 9a 	sub	pc,pc,-3942
80002d6a:	d7 03       	nop

80002d6c <pal_trx_frame_write>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_write(uint8_t * data, uint8_t length)
{
80002d6c:	eb cd 40 78 	pushm	r3-r6,lr
80002d70:	20 1d       	sub	sp,4
80002d72:	18 94       	mov	r4,r12
80002d74:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d76:	e1 b3 00 00 	mfsr	r3,0x0
80002d7a:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002d7c:	49 16       	lddpc	r6,80002dc0 <pal_trx_frame_write+0x54>
80002d7e:	0d 8b       	ld.ub	r11,r6[0x0]
80002d80:	fe 7c 40 00 	mov	r12,-49152
80002d84:	f0 1f 00 10 	mcall	80002dc4 <pal_trx_frame_write+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FW;
80002d88:	fa cb ff fc 	sub	r11,sp,-4
80002d8c:	36 08       	mov	r8,96
80002d8e:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80002d90:	30 1a       	mov	r10,1
80002d92:	fe 7c 40 00 	mov	r12,-49152
80002d96:	f0 1f 00 0d 	mcall	80002dc8 <pal_trx_frame_write+0x5c>

	spi_write_packet(AT86RFX_SPI, data, length);
80002d9a:	0a 9a       	mov	r10,r5
80002d9c:	08 9b       	mov	r11,r4
80002d9e:	fe 7c 40 00 	mov	r12,-49152
80002da2:	f0 1f 00 0a 	mcall	80002dc8 <pal_trx_frame_write+0x5c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002da6:	0d 8b       	ld.ub	r11,r6[0x0]
80002da8:	fe 7c 40 00 	mov	r12,-49152
80002dac:	f0 1f 00 08 	mcall	80002dcc <pal_trx_frame_write+0x60>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002db0:	e6 13 00 01 	andh	r3,0x1,COH
80002db4:	c0 21       	brne	80002db8 <pal_trx_frame_write+0x4c>
80002db6:	d5 03       	csrf	0x10
}
80002db8:	2f fd       	sub	sp,-4
80002dba:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002dbe:	00 00       	add	r0,r0
80002dc0:	00 00       	add	r0,r0
80002dc2:	00 08       	add	r8,r0
80002dc4:	80 00       	ld.sh	r0,r0[0x0]
80002dc6:	28 34       	sub	r4,-125
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	2f b2       	sub	r2,-5
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	28 80       	sub	r0,-120

80002dd0 <pal_trx_frame_read>:
	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
}

void pal_trx_frame_read(uint8_t * data, uint8_t length)
{
80002dd0:	eb cd 40 78 	pushm	r3-r6,lr
80002dd4:	20 1d       	sub	sp,4
80002dd6:	18 94       	mov	r4,r12
80002dd8:	16 95       	mov	r5,r11
	uint8_t temp;
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002dda:	e1 b3 00 00 	mfsr	r3,0x0
80002dde:	d3 03       	ssrf	0x10
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002de0:	49 16       	lddpc	r6,80002e24 <pal_trx_frame_read+0x54>
80002de2:	0d 8b       	ld.ub	r11,r6[0x0]
80002de4:	fe 7c 40 00 	mov	r12,-49152
80002de8:	f0 1f 00 10 	mcall	80002e28 <pal_trx_frame_read+0x58>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	temp = TRX_CMD_FR;
80002dec:	fa cb ff fc 	sub	r11,sp,-4
80002df0:	32 08       	mov	r8,32
80002df2:	16 f8       	st.b	--r11,r8

	/* Send the command byte */
	spi_write_packet(AT86RFX_SPI, &temp, 1);
80002df4:	30 1a       	mov	r10,1
80002df6:	fe 7c 40 00 	mov	r12,-49152
80002dfa:	f0 1f 00 0d 	mcall	80002e2c <pal_trx_frame_read+0x5c>

	spi_read_packet(AT86RFX_SPI, data, length);
80002dfe:	0a 9a       	mov	r10,r5
80002e00:	08 9b       	mov	r11,r4
80002e02:	fe 7c 40 00 	mov	r12,-49152
80002e06:	f0 1f 00 0b 	mcall	80002e30 <pal_trx_frame_read+0x60>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e0a:	0d 8b       	ld.ub	r11,r6[0x0]
80002e0c:	fe 7c 40 00 	mov	r12,-49152
80002e10:	f0 1f 00 09 	mcall	80002e34 <pal_trx_frame_read+0x64>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e14:	e6 13 00 01 	andh	r3,0x1,COH
80002e18:	c0 21       	brne	80002e1c <pal_trx_frame_read+0x4c>
80002e1a:	d5 03       	csrf	0x10
}
80002e1c:	2f fd       	sub	sp,-4
80002e1e:	e3 cd 80 78 	ldm	sp++,r3-r6,pc
80002e22:	00 00       	add	r0,r0
80002e24:	00 00       	add	r0,r0
80002e26:	00 08       	add	r8,r0
80002e28:	80 00       	ld.sh	r0,r0[0x0]
80002e2a:	28 34       	sub	r4,-125
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	2f b2       	sub	r2,-5
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	2f 62       	sub	r2,-10
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	28 80       	sub	r0,-120

80002e38 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002e38:	eb cd 40 c0 	pushm	r6-r7,lr
80002e3c:	20 2d       	sub	sp,8
80002e3e:	ba cc       	st.b	sp[0x4],r12
80002e40:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e42:	e1 b6 00 00 	mfsr	r6,0x0
80002e46:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002e48:	1b c8       	ld.ub	r8,sp[0x4]
80002e4a:	ea 18 ff ff 	orh	r8,0xffff
80002e4e:	e8 18 ff c0 	orl	r8,0xffc0
80002e52:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e54:	49 07       	lddpc	r7,80002e94 <pal_trx_reg_write+0x5c>
80002e56:	0f 8b       	ld.ub	r11,r7[0x0]
80002e58:	fe 7c 40 00 	mov	r12,-49152
80002e5c:	f0 1f 00 0f 	mcall	80002e98 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002e60:	30 1a       	mov	r10,1
80002e62:	fa cb ff fc 	sub	r11,sp,-4
80002e66:	fe 7c 40 00 	mov	r12,-49152
80002e6a:	f0 1f 00 0d 	mcall	80002e9c <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002e6e:	30 1a       	mov	r10,1
80002e70:	1a 9b       	mov	r11,sp
80002e72:	fe 7c 40 00 	mov	r12,-49152
80002e76:	f0 1f 00 0a 	mcall	80002e9c <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e7a:	0f 8b       	ld.ub	r11,r7[0x0]
80002e7c:	fe 7c 40 00 	mov	r12,-49152
80002e80:	f0 1f 00 08 	mcall	80002ea0 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e84:	e6 16 00 01 	andh	r6,0x1,COH
80002e88:	c0 21       	brne	80002e8c <pal_trx_reg_write+0x54>
80002e8a:	d5 03       	csrf	0x10
}
80002e8c:	2f ed       	sub	sp,-8
80002e8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e92:	00 00       	add	r0,r0
80002e94:	00 00       	add	r0,r0
80002e96:	00 08       	add	r8,r0
80002e98:	80 00       	ld.sh	r0,r0[0x0]
80002e9a:	28 34       	sub	r4,-125
80002e9c:	80 00       	ld.sh	r0,r0[0x0]
80002e9e:	2f b2       	sub	r2,-5
80002ea0:	80 00       	ld.sh	r0,r0[0x0]
80002ea2:	28 80       	sub	r0,-120

80002ea4 <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002ea4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ea8:	20 2d       	sub	sp,8
80002eaa:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002eac:	30 08       	mov	r8,0
80002eae:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002eb0:	e1 b6 00 00 	mfsr	r6,0x0
80002eb4:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002eb6:	1b 88       	ld.ub	r8,sp[0x0]
80002eb8:	ea 18 ff ff 	orh	r8,0xffff
80002ebc:	e8 18 ff 80 	orl	r8,0xff80
80002ec0:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002ec2:	49 17       	lddpc	r7,80002f04 <pal_trx_reg_read+0x60>
80002ec4:	0f 8b       	ld.ub	r11,r7[0x0]
80002ec6:	fe 7c 40 00 	mov	r12,-49152
80002eca:	f0 1f 00 10 	mcall	80002f08 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002ece:	30 1a       	mov	r10,1
80002ed0:	1a 9b       	mov	r11,sp
80002ed2:	fe 7c 40 00 	mov	r12,-49152
80002ed6:	f0 1f 00 0e 	mcall	80002f0c <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002eda:	30 1a       	mov	r10,1
80002edc:	fa cb ff f9 	sub	r11,sp,-7
80002ee0:	fe 7c 40 00 	mov	r12,-49152
80002ee4:	f0 1f 00 0b 	mcall	80002f10 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002ee8:	0f 8b       	ld.ub	r11,r7[0x0]
80002eea:	fe 7c 40 00 	mov	r12,-49152
80002eee:	f0 1f 00 0a 	mcall	80002f14 <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002ef2:	e6 16 00 01 	andh	r6,0x1,COH
80002ef6:	c0 21       	brne	80002efa <pal_trx_reg_read+0x56>
80002ef8:	d5 03       	csrf	0x10

	return register_value;
}
80002efa:	1b fc       	ld.ub	r12,sp[0x7]
80002efc:	2f ed       	sub	sp,-8
80002efe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f02:	00 00       	add	r0,r0
80002f04:	00 00       	add	r0,r0
80002f06:	00 08       	add	r8,r0
80002f08:	80 00       	ld.sh	r0,r0[0x0]
80002f0a:	28 34       	sub	r4,-125
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	2f b2       	sub	r2,-5
80002f10:	80 00       	ld.sh	r0,r0[0x0]
80002f12:	2f 62       	sub	r2,-10
80002f14:	80 00       	ld.sh	r0,r0[0x0]
80002f16:	28 80       	sub	r0,-120

80002f18 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f18:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002f1c:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f1e:	e6 18 00 01 	andh	r8,0x1,COH
80002f22:	c0 21       	brne	80002f26 <sysclk_init+0xe>
      cpu_irq_enable();
80002f24:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002f26:	5e fc       	retal	r12

80002f28 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002f28:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f2a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002f2e:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002f30:	a3 6c       	lsl	r12,0x2
80002f32:	fe 7a 14 20 	mov	r10,-60384
80002f36:	f8 0a 00 08 	add	r8,r12,r10
80002f3a:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002f3c:	30 1e       	mov	lr,1
80002f3e:	fc 0b 09 4b 	lsl	r11,lr,r11
80002f42:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002f44:	32 0a       	mov	r10,32
80002f46:	ea 1a aa 00 	orh	r10,0xaa00
80002f4a:	14 0c       	add	r12,r10
80002f4c:	fe 7a 14 00 	mov	r10,-60416
80002f50:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002f54:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f56:	12 98       	mov	r8,r9
80002f58:	e6 18 00 01 	andh	r8,0x1,COH
80002f5c:	c0 21       	brne	80002f60 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002f5e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002f60:	d8 02       	popm	pc

80002f62 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002f62:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002f66:	58 0a       	cp.w	r10,0
80002f68:	c0 61       	brne	80002f74 <spi_read_packet+0x12>
80002f6a:	c2 28       	rjmp	80002fae <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002f6c:	58 08       	cp.w	r8,0
80002f6e:	c1 d0       	breq	80002fa8 <spi_read_packet+0x46>
80002f70:	20 18       	sub	r8,1
80002f72:	c0 68       	rjmp	80002f7e <spi_read_packet+0x1c>
80002f74:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f78:	e0 67 00 ff 	mov	r7,255
80002f7c:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002f7e:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002f80:	e2 19 00 02 	andl	r9,0x2,COH
80002f84:	cf 40       	breq	80002f6c <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f86:	99 37       	st.w	r12[0xc],r7
80002f88:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002f8a:	c0 48       	rjmp	80002f92 <spi_read_packet+0x30>
			if (!timeout--) {
80002f8c:	58 08       	cp.w	r8,0
80002f8e:	c0 d0       	breq	80002fa8 <spi_read_packet+0x46>
80002f90:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002f92:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002f94:	e2 19 02 01 	andl	r9,0x201,COH
80002f98:	e0 49 02 01 	cp.w	r9,513
80002f9c:	cf 81       	brne	80002f8c <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002f9e:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002fa0:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002fa2:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002fa4:	ce c1       	brne	80002f7c <spi_read_packet+0x1a>
80002fa6:	c0 48       	rjmp	80002fae <spi_read_packet+0x4c>
80002fa8:	3f dc       	mov	r12,-3
80002faa:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fae:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002fb2 <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002fb2:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002fb4:	58 0a       	cp.w	r10,0
80002fb6:	c0 81       	brne	80002fc6 <spi_write_packet+0x14>
80002fb8:	c1 28       	rjmp	80002fdc <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002fba:	58 08       	cp.w	r8,0
80002fbc:	c0 31       	brne	80002fc2 <spi_write_packet+0x10>
80002fbe:	3f dc       	mov	r12,-3
80002fc0:	d8 02       	popm	pc
80002fc2:	20 18       	sub	r8,1
80002fc4:	c0 48       	rjmp	80002fcc <spi_write_packet+0x1a>
80002fc6:	e0 6e 3a 98 	mov	lr,15000
80002fca:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002fcc:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002fce:	e2 19 00 02 	andl	r9,0x2,COH
80002fd2:	cf 40       	breq	80002fba <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002fd4:	17 38       	ld.ub	r8,r11++
80002fd6:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002fd8:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002fda:	cf 81       	brne	80002fca <spi_write_packet+0x18>
80002fdc:	d8 0a       	popm	pc,r12=0
80002fde:	d7 03       	nop
	...

80002fec <usart_int_handler_RS232>:
// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	uint8_t c;
	if((&AVR32_USART2)->csr & AVR32_USART_CSR_TXEMPTY_MASK)
80002fec:	fe 78 38 00 	mov	r8,-51200
80002ff0:	70 58       	ld.w	r8,r8[0x14]
80002ff2:	e2 18 02 00 	andl	r8,0x200,COH
80002ff6:	c2 a0       	breq	8000304a <usart_int_handler_RS232+0x5e>
	{
		c = (&AVR32_USART2)->rhr;
80002ff8:	fe 78 38 00 	mov	r8,-51200
80002ffc:	70 69       	ld.w	r9,r8[0x18]
80002ffe:	5c 59       	castu.b	r9
		
		cola_PC[cola_PC_nw] = c;
80003000:	49 88       	lddpc	r8,80003060 <usart_int_handler_RS232+0x74>
80003002:	11 88       	ld.ub	r8,r8[0x0]
80003004:	49 8a       	lddpc	r10,80003064 <usart_int_handler_RS232+0x78>
80003006:	f4 08 0b 09 	st.b	r10[r8],r9
		if ( cSOH < 3) {
8000300a:	49 8a       	lddpc	r10,80003068 <usart_int_handler_RS232+0x7c>
8000300c:	15 8a       	ld.ub	r10,r10[0x0]
8000300e:	30 2b       	mov	r11,2
80003010:	f6 0a 18 00 	cp.b	r10,r11
80003014:	e0 8b 00 0c 	brhi	8000302c <usart_int_handler_RS232+0x40>
			if (c == SOH ) {
80003018:	30 1b       	mov	r11,1
8000301a:	f6 09 18 00 	cp.b	r9,r11
8000301e:	c0 71       	brne	8000302c <usart_int_handler_RS232+0x40>
				pSOH=cola_PC_nw;
80003020:	49 39       	lddpc	r9,8000306c <usart_int_handler_RS232+0x80>
80003022:	b2 88       	st.b	r9[0x0],r8
				cSOH++;
80003024:	16 0a       	add	r10,r11
80003026:	49 19       	lddpc	r9,80003068 <usart_int_handler_RS232+0x7c>
80003028:	b2 8a       	st.b	r9[0x0],r10
8000302a:	c0 d8       	rjmp	80003044 <usart_int_handler_RS232+0x58>
			}
		}
		
		if (c == EOT) {
8000302c:	30 4a       	mov	r10,4
8000302e:	f4 09 18 00 	cp.b	r9,r10
80003032:	c0 91       	brne	80003044 <usart_int_handler_RS232+0x58>
			pEOT = cola_PC_nw;
80003034:	48 f9       	lddpc	r9,80003070 <usart_int_handler_RS232+0x84>
80003036:	b2 88       	st.b	r9[0x0],r8
			configuracion = true;
80003038:	30 1a       	mov	r10,1
8000303a:	48 f9       	lddpc	r9,80003074 <usart_int_handler_RS232+0x88>
8000303c:	b2 8a       	st.b	r9[0x0],r10
			cSOH=0;
8000303e:	30 0a       	mov	r10,0
80003040:	48 a9       	lddpc	r9,80003068 <usart_int_handler_RS232+0x7c>
80003042:	b2 8a       	st.b	r9[0x0],r10
		}
		
		cola_PC_nw++;
80003044:	2f f8       	sub	r8,-1
80003046:	48 79       	lddpc	r9,80003060 <usart_int_handler_RS232+0x74>
80003048:	b2 88       	st.b	r9[0x0],r8
	}
	if (cola_PC_nw >= tamano_cola)
8000304a:	48 68       	lddpc	r8,80003060 <usart_int_handler_RS232+0x74>
8000304c:	11 89       	ld.ub	r9,r8[0x0]
8000304e:	3c 78       	mov	r8,-57
80003050:	f0 09 18 00 	cp.b	r9,r8
80003054:	e0 88 00 05 	brls	8000305e <usart_int_handler_RS232+0x72>
	cola_PC_nw = 0;
80003058:	30 09       	mov	r9,0
8000305a:	48 28       	lddpc	r8,80003060 <usart_int_handler_RS232+0x74>
8000305c:	b0 89       	st.b	r8[0x0],r9
8000305e:	d6 03       	rete
80003060:	00 00       	add	r0,r0
80003062:	06 60       	and	r0,r3
80003064:	00 00       	add	r0,r0
80003066:	07 7c       	ld.ub	r12,--r3
80003068:	00 00       	add	r0,r0
8000306a:	06 62       	and	r2,r3
8000306c:	00 00       	add	r0,r0
8000306e:	06 63       	and	r3,r3
80003070:	00 00       	add	r0,r0
80003072:	06 61       	and	r1,r3
80003074:	00 00       	add	r0,r0
80003076:	06 5f       	eor	pc,r3

80003078 <generateLRC>:
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
	Enable_global_interrupt();
	tc_start(tc,EXAMPLE_TC_CHANNEL);
}
uint8_t generateLRC(config_package packet)
{
80003078:	eb cd 00 10 	pushm	r4
8000307c:	fa c4 ff fc 	sub	r4,sp,-4
80003080:	09 8a       	ld.ub	r10,r4[0x0]
80003082:	30 0c       	mov	r12,0
80003084:	18 98       	mov	r8,r12
	uint8_t i = 0;
	uint8_t lrc = 0;
	while(i <= packet.tamPayload) {
		lrc = lrc ^ packet.payload[i];
80003086:	e8 08 00 09 	add	r9,r4,r8
8000308a:	13 b9       	ld.ub	r9,r9[0x3]
8000308c:	12 5c       	eor	r12,r9
		i++;
8000308e:	2f f8       	sub	r8,-1
80003090:	5c 58       	castu.b	r8
}
uint8_t generateLRC(config_package packet)
{
	uint8_t i = 0;
	uint8_t lrc = 0;
	while(i <= packet.tamPayload) {
80003092:	f0 0a 18 00 	cp.b	r10,r8
80003096:	cf 82       	brcc	80003086 <generateLRC+0xe>
		lrc = lrc ^ packet.payload[i];
		i++;
	}
	return lrc;
	
}
80003098:	e3 cd 00 10 	ldm	sp++,r4
8000309c:	5e fc       	retal	r12
8000309e:	d7 03       	nop

800030a0 <checkPack>:
uint8_t checkPack(config_package packet)
{
800030a0:	eb cd 40 90 	pushm	r4,r7,lr
800030a4:	fa c4 ff f4 	sub	r4,sp,-12
800030a8:	e9 37 00 12 	ld.ub	r7,r4[18]
	if (generateLRC(packet) == packet.lrc){
800030ac:	e9 67 00 12 	st.b	r4[18],r7
800030b0:	20 5d       	sub	sp,20
800030b2:	68 08       	ld.w	r8,r4[0x0]
800030b4:	50 08       	stdsp	sp[0x0],r8
800030b6:	68 18       	ld.w	r8,r4[0x4]
800030b8:	50 18       	stdsp	sp[0x4],r8
800030ba:	68 28       	ld.w	r8,r4[0x8]
800030bc:	50 28       	stdsp	sp[0x8],r8
800030be:	68 38       	ld.w	r8,r4[0xc]
800030c0:	50 38       	stdsp	sp[0xc],r8
800030c2:	e9 38 00 10 	ld.ub	r8,r4[16]
800030c6:	fb 68 00 10 	st.b	sp[16],r8
800030ca:	e9 38 00 11 	ld.ub	r8,r4[17]
800030ce:	fb 68 00 11 	st.b	sp[17],r8
800030d2:	fb 67 00 12 	st.b	sp[18],r7
800030d6:	f0 1f 00 05 	mcall	800030e8 <checkPack+0x48>
800030da:	2f bd       	sub	sp,-20
800030dc:	f8 07 18 00 	cp.b	r7,r12
		return 1;
	}
	
	return 0;
}
800030e0:	5f 0c       	sreq	r12
800030e2:	e3 cd 80 90 	ldm	sp++,r4,r7,pc
800030e6:	00 00       	add	r0,r0
800030e8:	80 00       	ld.sh	r0,r0[0x0]
800030ea:	30 78       	mov	r8,7

800030ec <unpack>:

void unpack()
{
800030ec:	eb cd 40 80 	pushm	r7,lr
	uint8_t i = 0;
	
	tConfiguracion.tamPayload = cola_PC[pSOH+1];
800030f0:	49 68       	lddpc	r8,80003148 <unpack+0x5c>
800030f2:	11 89       	ld.ub	r9,r8[0x0]
800030f4:	49 6a       	lddpc	r10,8000314c <unpack+0x60>
800030f6:	12 0a       	add	r10,r9
800030f8:	15 9c       	ld.ub	r12,r10[0x1]
800030fa:	49 68       	lddpc	r8,80003150 <unpack+0x64>
800030fc:	b0 8c       	st.b	r8[0x0],r12
	tConfiguracion.addr = cola_PC[pSOH+2];
800030fe:	15 ab       	ld.ub	r11,r10[0x2]
80003100:	b0 9b       	st.b	r8[0x1],r11
	tConfiguracion.cmd = cola_PC[pSOH+3];
80003102:	15 ba       	ld.ub	r10,r10[0x3]
80003104:	b0 aa       	st.b	r8[0x2],r10
80003106:	2f f9       	sub	r9,-1
80003108:	5c 59       	castu.b	r9
8000310a:	30 08       	mov	r8,0
	
	while( i <= tConfiguracion.tamPayload)
	tConfiguracion.payload[i++] = cola_PC[++pSOH];
8000310c:	49 17       	lddpc	r7,80003150 <unpack+0x64>
8000310e:	49 0e       	lddpc	lr,8000314c <unpack+0x60>
80003110:	ee 08 00 0a 	add	r10,r7,r8
80003114:	fc 09 07 0b 	ld.ub	r11,lr[r9]
80003118:	b4 bb       	st.b	r10[0x3],r11
8000311a:	2f f8       	sub	r8,-1
8000311c:	5c 58       	castu.b	r8
8000311e:	f2 ca ff ff 	sub	r10,r9,-1
80003122:	12 9b       	mov	r11,r9
80003124:	f3 da c0 08 	bfextu	r9,r10,0x0,0x8
	
	tConfiguracion.tamPayload = cola_PC[pSOH+1];
	tConfiguracion.addr = cola_PC[pSOH+2];
	tConfiguracion.cmd = cola_PC[pSOH+3];
	
	while( i <= tConfiguracion.tamPayload)
80003128:	f0 0c 18 00 	cp.b	r12,r8
8000312c:	cf 22       	brcc	80003110 <unpack+0x24>
	tConfiguracion.payload[i++] = cola_PC[++pSOH];

	tConfiguracion.lrc=cola_PC[++pSOH];
8000312e:	2f fb       	sub	r11,-1
80003130:	5c 5b       	castu.b	r11
80003132:	48 68       	lddpc	r8,80003148 <unpack+0x5c>
80003134:	b0 8b       	st.b	r8[0x0],r11
80003136:	48 68       	lddpc	r8,8000314c <unpack+0x60>
80003138:	f0 0b 07 09 	ld.ub	r9,r8[r11]
8000313c:	48 58       	lddpc	r8,80003150 <unpack+0x64>
8000313e:	f1 69 00 12 	st.b	r8[18],r9
}
80003142:	e3 cd 80 80 	ldm	sp++,r7,pc
80003146:	00 00       	add	r0,r0
80003148:	00 00       	add	r0,r0
8000314a:	06 63       	and	r3,r3
8000314c:	00 00       	add	r0,r0
8000314e:	07 7c       	ld.ub	r12,--r3
80003150:	00 00       	add	r0,r0
80003152:	06 4c       	or	r12,r3

80003154 <getStateAT86RF212>:
	
	else
		sprintf(temps,"%s","X");
}
uint8_t getStateAT86RF212(void)
{
80003154:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80003156:	30 1c       	mov	r12,1
80003158:	f0 1f 00 03 	mcall	80003164 <getStateAT86RF212+0x10>
}
8000315c:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80003160:	d8 02       	popm	pc
80003162:	00 00       	add	r0,r0
80003164:	80 00       	ld.sh	r0,r0[0x0]
80003166:	2e a4       	sub	r4,-22

80003168 <promiscuous_mode>:
	} 
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); //vuelvo a estador RX ON
}

void promiscuous_mode()
{
80003168:	eb cd 40 e0 	pushm	r5-r7,lr
	for (address=0x20; address<0x2C; address++)
8000316c:	32 09       	mov	r9,32
8000316e:	4a f8       	lddpc	r8,80003228 <promiscuous_mode+0xc0>
80003170:	b0 89       	st.b	r8[0x0],r9
80003172:	32 0c       	mov	r12,32
	{
		pal_trx_reg_write(address, 0x00);
80003174:	30 05       	mov	r5,0
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); //vuelvo a estador RX ON
}

void promiscuous_mode()
{
	for (address=0x20; address<0x2C; address++)
80003176:	10 97       	mov	r7,r8
80003178:	32 b6       	mov	r6,43
	{
		pal_trx_reg_write(address, 0x00);
8000317a:	0a 9b       	mov	r11,r5
8000317c:	f0 1f 00 2c 	mcall	8000322c <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003180:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003184:	f0 ca fd c1 	sub	r10,r8,-575
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003188:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000318c:	14 38       	cp.w	r8,r10
8000318e:	e0 88 00 08 	brls	8000319e <promiscuous_mode+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003192:	12 38       	cp.w	r8,r9
80003194:	fe 98 ff fa 	brls	80003188 <promiscuous_mode+0x20>
80003198:	12 3a       	cp.w	r10,r9
8000319a:	c3 23       	brcs	800031fe <promiscuous_mode+0x96>
8000319c:	cf 6b       	rjmp	80003188 <promiscuous_mode+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000319e:	12 38       	cp.w	r8,r9
800031a0:	e0 8b 00 2f 	brhi	800031fe <promiscuous_mode+0x96>
800031a4:	12 3a       	cp.w	r10,r9
800031a6:	c2 c3       	brcs	800031fe <promiscuous_mode+0x96>
800031a8:	cf 0b       	rjmp	80003188 <promiscuous_mode+0x20>
		delay_ms(5);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
800031aa:	30 2b       	mov	r11,2
800031ac:	31 7c       	mov	r12,23
800031ae:	f0 1f 00 20 	mcall	8000322c <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031b2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031b6:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031ba:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031be:	14 38       	cp.w	r8,r10
800031c0:	e0 88 00 08 	brls	800031d0 <promiscuous_mode+0x68>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031c4:	12 38       	cp.w	r8,r9
800031c6:	fe 98 ff fa 	brls	800031ba <promiscuous_mode+0x52>
800031ca:	12 3a       	cp.w	r10,r9
800031cc:	c2 23       	brcs	80003210 <promiscuous_mode+0xa8>
800031ce:	cf 6b       	rjmp	800031ba <promiscuous_mode+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800031d0:	12 38       	cp.w	r8,r9
800031d2:	e0 8b 00 1f 	brhi	80003210 <promiscuous_mode+0xa8>
800031d6:	12 3a       	cp.w	r10,r9
800031d8:	c1 c3       	brcs	80003210 <promiscuous_mode+0xa8>
800031da:	cf 0b       	rjmp	800031ba <promiscuous_mode+0x52>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031dc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031e0:	14 38       	cp.w	r8,r10
800031e2:	e0 88 00 08 	brls	800031f2 <promiscuous_mode+0x8a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031e6:	12 38       	cp.w	r8,r9
800031e8:	fe 98 ff fa 	brls	800031dc <promiscuous_mode+0x74>
800031ec:	12 3a       	cp.w	r10,r9
800031ee:	c1 b3       	brcs	80003224 <promiscuous_mode+0xbc>
800031f0:	cf 6b       	rjmp	800031dc <promiscuous_mode+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800031f2:	12 38       	cp.w	r8,r9
800031f4:	e0 8b 00 18 	brhi	80003224 <promiscuous_mode+0xbc>
800031f8:	12 3a       	cp.w	r10,r9
800031fa:	c1 53       	brcs	80003224 <promiscuous_mode+0xbc>
800031fc:	cf 0b       	rjmp	800031dc <promiscuous_mode+0x74>
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); //vuelvo a estador RX ON
}

void promiscuous_mode()
{
	for (address=0x20; address<0x2C; address++)
800031fe:	0f 8c       	ld.ub	r12,r7[0x0]
80003200:	2f fc       	sub	r12,-1
80003202:	5c 5c       	castu.b	r12
80003204:	ae 8c       	st.b	r7[0x0],r12
80003206:	ec 0c 18 00 	cp.b	r12,r6
8000320a:	fe 98 ff b8 	brls	8000317a <promiscuous_mode+0x12>
8000320e:	cc eb       	rjmp	800031aa <promiscuous_mode+0x42>
		pal_trx_reg_write(address, 0x00);
		delay_ms(5);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_CSMA_SEED_1, 0xD2); // AACK_DIS_ACK = 1 && AACK_FVN_MODE = 3
80003210:	e0 6b 00 d2 	mov	r11,210
80003214:	32 ec       	mov	r12,46
80003216:	f0 1f 00 06 	mcall	8000322c <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000321a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000321e:	f0 ca ff ff 	sub	r10,r8,-1
80003222:	cd db       	rjmp	800031dc <promiscuous_mode+0x74>
80003224:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003228:	00 00       	add	r0,r0
8000322a:	07 68       	ld.uh	r8,--r3
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	2e 38       	sub	r8,-29

80003230 <RESET>:
	PAL_WAIT_1_US();
	
}

void RESET()
{
80003230:	d4 01       	pushm	lr
	RST_LOW();
80003232:	32 8c       	mov	r12,40
80003234:	f0 1f 00 19 	mcall	80003298 <RESET+0x68>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003238:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000323c:	f0 ca ff b8 	sub	r10,r8,-72
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003240:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003244:	14 38       	cp.w	r8,r10
80003246:	e0 88 00 08 	brls	80003256 <RESET+0x26>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000324a:	12 38       	cp.w	r8,r9
8000324c:	fe 98 ff fa 	brls	80003240 <RESET+0x10>
80003250:	12 3a       	cp.w	r10,r9
80003252:	c1 93       	brcs	80003284 <RESET+0x54>
80003254:	cf 6b       	rjmp	80003240 <RESET+0x10>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003256:	12 38       	cp.w	r8,r9
80003258:	e0 8b 00 16 	brhi	80003284 <RESET+0x54>
8000325c:	12 3a       	cp.w	r10,r9
8000325e:	c1 33       	brcs	80003284 <RESET+0x54>
80003260:	cf 0b       	rjmp	80003240 <RESET+0x10>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003262:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003266:	14 38       	cp.w	r8,r10
80003268:	e0 88 00 08 	brls	80003278 <RESET+0x48>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000326c:	12 38       	cp.w	r8,r9
8000326e:	fe 98 ff fa 	brls	80003262 <RESET+0x32>
80003272:	12 3a       	cp.w	r10,r9
80003274:	c1 03       	brcs	80003294 <RESET+0x64>
80003276:	cf 6b       	rjmp	80003262 <RESET+0x32>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003278:	12 38       	cp.w	r8,r9
8000327a:	e0 8b 00 0d 	brhi	80003294 <RESET+0x64>
8000327e:	12 3a       	cp.w	r10,r9
80003280:	c0 a3       	brcs	80003294 <RESET+0x64>
80003282:	cf 0b       	rjmp	80003262 <RESET+0x32>
	DELAY_US(RST_PULSE_WIDTH_NS);
	RST_HIGH();
80003284:	32 8c       	mov	r12,40
80003286:	f0 1f 00 06 	mcall	8000329c <RESET+0x6c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000328a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000328e:	f0 ca ff 8d 	sub	r10,r8,-115
80003292:	ce 8b       	rjmp	80003262 <RESET+0x32>
80003294:	d8 02       	popm	pc
80003296:	00 00       	add	r0,r0
80003298:	80 00       	ld.sh	r0,r0[0x0]
8000329a:	26 8a       	sub	r10,104
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	26 74       	sub	r4,103

800032a0 <init_AT86RF212>:
	}
	delay_ms(1);
}

uint8_t init_AT86RF212(void)
{
800032a0:	eb cd 40 80 	pushm	r7,lr
	Disable_global_interrupt();
800032a4:	d3 03       	ssrf	0x10
	RESET();
800032a6:	f0 1f 00 88 	mcall	800034c4 <init_AT86RF212+0x224>
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
800032aa:	30 0b       	mov	r11,0
800032ac:	30 ec       	mov	r12,14
800032ae:	f0 1f 00 87 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032b2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032b6:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800032ba:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800032be:	14 38       	cp.w	r8,r10
800032c0:	e0 88 00 09 	brls	800032d2 <init_AT86RF212+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800032c4:	12 38       	cp.w	r8,r9
800032c6:	fe 98 ff fa 	brls	800032ba <init_AT86RF212+0x1a>
800032ca:	12 3a       	cp.w	r10,r9
800032cc:	e0 83 00 ba 	brlo	80003440 <init_AT86RF212+0x1a0>
800032d0:	cf 5b       	rjmp	800032ba <init_AT86RF212+0x1a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800032d2:	12 38       	cp.w	r8,r9
800032d4:	e0 8b 00 b6 	brhi	80003440 <init_AT86RF212+0x1a0>
800032d8:	12 3a       	cp.w	r10,r9
800032da:	e0 83 00 b3 	brlo	80003440 <init_AT86RF212+0x1a0>
800032de:	ce eb       	rjmp	800032ba <init_AT86RF212+0x1a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800032e0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800032e4:	14 38       	cp.w	r8,r10
800032e6:	e0 88 00 08 	brls	800032f6 <init_AT86RF212+0x56>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800032ea:	12 38       	cp.w	r8,r9
800032ec:	fe 98 ff fa 	brls	800032e0 <init_AT86RF212+0x40>
800032f0:	12 3a       	cp.w	r10,r9
800032f2:	c0 73       	brcs	80003300 <init_AT86RF212+0x60>
800032f4:	cf 6b       	rjmp	800032e0 <init_AT86RF212+0x40>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800032f6:	12 38       	cp.w	r8,r9
800032f8:	e0 8b 00 04 	brhi	80003300 <init_AT86RF212+0x60>
800032fc:	12 3a       	cp.w	r10,r9
800032fe:	cf 12       	brcc	800032e0 <init_AT86RF212+0x40>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
80003300:	30 87       	mov	r7,8
80003302:	f0 1f 00 73 	mcall	800034cc <init_AT86RF212+0x22c>
80003306:	ee 0c 18 00 	cp.b	r12,r7
8000330a:	cf c1       	brne	80003302 <init_AT86RF212+0x62>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000330c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003310:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003314:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003318:	14 38       	cp.w	r8,r10
8000331a:	e0 88 00 09 	brls	8000332c <init_AT86RF212+0x8c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000331e:	12 38       	cp.w	r8,r9
80003320:	fe 98 ff fa 	brls	80003314 <init_AT86RF212+0x74>
80003324:	12 3a       	cp.w	r10,r9
80003326:	e0 83 00 96 	brlo	80003452 <init_AT86RF212+0x1b2>
8000332a:	cf 5b       	rjmp	80003314 <init_AT86RF212+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000332c:	12 38       	cp.w	r8,r9
8000332e:	e0 8b 00 92 	brhi	80003452 <init_AT86RF212+0x1b2>
80003332:	12 3a       	cp.w	r10,r9
80003334:	e0 83 00 8f 	brlo	80003452 <init_AT86RF212+0x1b2>
80003338:	ce eb       	rjmp	80003314 <init_AT86RF212+0x74>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000333a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000333e:	14 38       	cp.w	r8,r10
80003340:	e0 88 00 09 	brls	80003352 <init_AT86RF212+0xb2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003344:	12 38       	cp.w	r8,r9
80003346:	fe 98 ff fa 	brls	8000333a <init_AT86RF212+0x9a>
8000334a:	12 3a       	cp.w	r10,r9
8000334c:	e0 83 00 8c 	brlo	80003464 <init_AT86RF212+0x1c4>
80003350:	cf 5b       	rjmp	8000333a <init_AT86RF212+0x9a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003352:	12 38       	cp.w	r8,r9
80003354:	e0 8b 00 88 	brhi	80003464 <init_AT86RF212+0x1c4>
80003358:	12 3a       	cp.w	r10,r9
8000335a:	e0 83 00 85 	brlo	80003464 <init_AT86RF212+0x1c4>
8000335e:	ce eb       	rjmp	8000333a <init_AT86RF212+0x9a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003360:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003364:	14 38       	cp.w	r8,r10
80003366:	e0 88 00 09 	brls	80003378 <init_AT86RF212+0xd8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000336a:	12 38       	cp.w	r8,r9
8000336c:	fe 98 ff fa 	brls	80003360 <init_AT86RF212+0xc0>
80003370:	12 3a       	cp.w	r10,r9
80003372:	e0 83 00 82 	brlo	80003476 <init_AT86RF212+0x1d6>
80003376:	cf 5b       	rjmp	80003360 <init_AT86RF212+0xc0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003378:	12 38       	cp.w	r8,r9
8000337a:	e0 8b 00 7e 	brhi	80003476 <init_AT86RF212+0x1d6>
8000337e:	12 3a       	cp.w	r10,r9
80003380:	c7 b3       	brcs	80003476 <init_AT86RF212+0x1d6>
80003382:	ce fb       	rjmp	80003360 <init_AT86RF212+0xc0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003384:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003388:	14 38       	cp.w	r8,r10
8000338a:	e0 88 00 08 	brls	8000339a <init_AT86RF212+0xfa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000338e:	12 38       	cp.w	r8,r9
80003390:	fe 98 ff fa 	brls	80003384 <init_AT86RF212+0xe4>
80003394:	12 3a       	cp.w	r10,r9
80003396:	c7 93       	brcs	80003488 <init_AT86RF212+0x1e8>
80003398:	cf 6b       	rjmp	80003384 <init_AT86RF212+0xe4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000339a:	12 38       	cp.w	r8,r9
8000339c:	e0 8b 00 76 	brhi	80003488 <init_AT86RF212+0x1e8>
800033a0:	12 3a       	cp.w	r10,r9
800033a2:	c7 33       	brcs	80003488 <init_AT86RF212+0x1e8>
800033a4:	cf 0b       	rjmp	80003384 <init_AT86RF212+0xe4>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033a6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033aa:	14 38       	cp.w	r8,r10
800033ac:	e0 88 00 08 	brls	800033bc <init_AT86RF212+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033b0:	12 38       	cp.w	r8,r9
800033b2:	fe 98 ff fa 	brls	800033a6 <init_AT86RF212+0x106>
800033b6:	12 3a       	cp.w	r10,r9
800033b8:	c6 f3       	brcs	80003496 <init_AT86RF212+0x1f6>
800033ba:	cf 6b       	rjmp	800033a6 <init_AT86RF212+0x106>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033bc:	12 38       	cp.w	r8,r9
800033be:	e0 8b 00 6c 	brhi	80003496 <init_AT86RF212+0x1f6>
800033c2:	12 3a       	cp.w	r10,r9
800033c4:	c6 93       	brcs	80003496 <init_AT86RF212+0x1f6>
800033c6:	cf 0b       	rjmp	800033a6 <init_AT86RF212+0x106>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033c8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033cc:	14 38       	cp.w	r8,r10
800033ce:	e0 88 00 08 	brls	800033de <init_AT86RF212+0x13e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033d2:	12 38       	cp.w	r8,r9
800033d4:	fe 98 ff fa 	brls	800033c8 <init_AT86RF212+0x128>
800033d8:	12 3a       	cp.w	r10,r9
800033da:	c0 73       	brcs	800033e8 <init_AT86RF212+0x148>
800033dc:	cf 6b       	rjmp	800033c8 <init_AT86RF212+0x128>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033de:	12 38       	cp.w	r8,r9
800033e0:	e0 8b 00 04 	brhi	800033e8 <init_AT86RF212+0x148>
800033e4:	12 3a       	cp.w	r10,r9
800033e6:	cf 12       	brcc	800033c8 <init_AT86RF212+0x128>
	promiscuous_mode();
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en
	DELAY_US(TIME_PLL_ON_RX_ON);

	while (getStateAT86RF212()!=CMD_PLL_ON);
800033e8:	30 97       	mov	r7,9
800033ea:	f0 1f 00 39 	mcall	800034cc <init_AT86RF212+0x22c>
800033ee:	ee 0c 18 00 	cp.b	r12,r7
800033f2:	cf c1       	brne	800033ea <init_AT86RF212+0x14a>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800033f4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800033f8:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033fc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003400:	14 38       	cp.w	r8,r10
80003402:	e0 88 00 08 	brls	80003412 <init_AT86RF212+0x172>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003406:	12 38       	cp.w	r8,r9
80003408:	fe 98 ff fa 	brls	800033fc <init_AT86RF212+0x15c>
8000340c:	12 3a       	cp.w	r10,r9
8000340e:	c4 d3       	brcs	800034a8 <init_AT86RF212+0x208>
80003410:	cf 6b       	rjmp	800033fc <init_AT86RF212+0x15c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003412:	12 38       	cp.w	r8,r9
80003414:	e0 8b 00 4a 	brhi	800034a8 <init_AT86RF212+0x208>
80003418:	12 3a       	cp.w	r10,r9
8000341a:	c4 73       	brcs	800034a8 <init_AT86RF212+0x208>
8000341c:	cf 0b       	rjmp	800033fc <init_AT86RF212+0x15c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000341e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003422:	14 38       	cp.w	r8,r10
80003424:	e0 88 00 08 	brls	80003434 <init_AT86RF212+0x194>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003428:	12 38       	cp.w	r8,r9
8000342a:	fe 98 ff fa 	brls	8000341e <init_AT86RF212+0x17e>
8000342e:	12 3a       	cp.w	r10,r9
80003430:	c4 53       	brcs	800034ba <init_AT86RF212+0x21a>
80003432:	cf 6b       	rjmp	8000341e <init_AT86RF212+0x17e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003434:	12 38       	cp.w	r8,r9
80003436:	e0 8b 00 42 	brhi	800034ba <init_AT86RF212+0x21a>
8000343a:	12 3a       	cp.w	r10,r9
8000343c:	c3 f3       	brcs	800034ba <init_AT86RF212+0x21a>
8000343e:	cf 0b       	rjmp	8000341e <init_AT86RF212+0x17e>
{
	Disable_global_interrupt();
	RESET();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
80003440:	30 3b       	mov	r11,3
80003442:	30 2c       	mov	r12,2
80003444:	f0 1f 00 21 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003448:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000344c:	f0 ca ff ff 	sub	r10,r8,-1
80003450:	c4 8b       	rjmp	800032e0 <init_AT86RF212+0x40>
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_CTRL_0, 0x08);
80003452:	30 8b       	mov	r11,8
80003454:	30 3c       	mov	r12,3
80003456:	f0 1f 00 1d 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000345a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000345e:	f0 ca ff ff 	sub	r10,r8,-1
80003462:	c6 cb       	rjmp	8000333a <init_AT86RF212+0x9a>
	PAL_WAIT_1_US();
pal_trx_reg_write(RG_TRX_CTRL_1, 0x2E); // 1 -> TX AUTO_CRC && SPI_CMD_MODE -> 3 && 1-> IRQ_MASK_MODE
80003464:	32 eb       	mov	r11,46
80003466:	30 4c       	mov	r12,4
80003468:	f0 1f 00 18 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000346c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003470:	f0 ca ff ff 	sub	r10,r8,-1
80003474:	c7 6b       	rjmp	80003360 <init_AT86RF212+0xc0>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
80003476:	30 cb       	mov	r11,12
80003478:	30 ec       	mov	r12,14
8000347a:	f0 1f 00 14 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000347e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003482:	f0 ca ff ff 	sub	r10,r8,-1
80003486:	c7 fb       	rjmp	80003384 <init_AT86RF212+0xe4>
	PAL_WAIT_1_US();
	promiscuous_mode();
80003488:	f0 1f 00 12 	mcall	800034d0 <init_AT86RF212+0x230>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000348c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003490:	f0 ca ff ff 	sub	r10,r8,-1
80003494:	c8 9b       	rjmp	800033a6 <init_AT86RF212+0x106>
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en
80003496:	30 4b       	mov	r11,4
80003498:	30 2c       	mov	r12,2
8000349a:	f0 1f 00 0c 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000349e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034a2:	f0 ca ff ff 	sub	r10,r8,-1
800034a6:	c9 1b       	rjmp	800033c8 <init_AT86RF212+0x128>
	DELAY_US(TIME_PLL_ON_RX_ON);

	while (getStateAT86RF212()!=CMD_PLL_ON);

	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
800034a8:	30 6b       	mov	r11,6
800034aa:	30 2c       	mov	r12,2
800034ac:	f0 1f 00 07 	mcall	800034c8 <init_AT86RF212+0x228>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800034b0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034b4:	f0 ca ff ff 	sub	r10,r8,-1
800034b8:	cb 3b       	rjmp	8000341e <init_AT86RF212+0x17e>
	PAL_WAIT_1_US();
	
	cpu_irq_enable();
800034ba:	d5 03       	csrf	0x10
	Enable_global_interrupt();
800034bc:	d5 03       	csrf	0x10
}
800034be:	e3 cd 80 80 	ldm	sp++,r7,pc
800034c2:	00 00       	add	r0,r0
800034c4:	80 00       	ld.sh	r0,r0[0x0]
800034c6:	32 30       	mov	r0,35
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	2e 38       	sub	r8,-29
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	31 54       	mov	r4,21
800034d0:	80 00       	ld.sh	r0,r0[0x0]
800034d2:	31 68       	mov	r8,22

800034d4 <txTramaManual>:
{
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
}

uint8_t txTramaManual(uint8_t *data)
{
800034d4:	eb cd 40 c0 	pushm	r6-r7,lr
800034d8:	18 96       	mov	r6,r12
	if (getStateAT86RF212()==CMD_RX_ON) {
800034da:	f0 1f 00 1d 	mcall	8000354c <txTramaManual+0x78>
800034de:	30 68       	mov	r8,6
800034e0:	f0 0c 18 00 	cp.b	r12,r8
800034e4:	c2 e1       	brne	80003540 <txTramaManual+0x6c>
		pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_PLL_ON); //pongo en PLL ON
800034e6:	30 4b       	mov	r11,4
800034e8:	30 2c       	mov	r12,2
800034ea:	f0 1f 00 1a 	mcall	80003550 <txTramaManual+0x7c>
		while(getStateAT86RF212()!=CMD_PLL_ON);  //espero q se ponga en PLL ON
800034ee:	30 97       	mov	r7,9
800034f0:	f0 1f 00 17 	mcall	8000354c <txTramaManual+0x78>
800034f4:	ee 0c 18 00 	cp.b	r12,r7
800034f8:	cf c1       	brne	800034f0 <txTramaManual+0x1c>
		pal_trx_reg_write(RG_IRQ_MASK,0x0C);
800034fa:	30 cb       	mov	r11,12
800034fc:	30 ec       	mov	r12,14
800034fe:	f0 1f 00 15 	mcall	80003550 <txTramaManual+0x7c>
		pal_trx_frame_write(data,cola_PC_nw+1);  // 200kbps
80003502:	49 58       	lddpc	r8,80003554 <txTramaManual+0x80>
80003504:	11 8b       	ld.ub	r11,r8[0x0]
80003506:	2f fb       	sub	r11,-1
80003508:	5c 5b       	castu.b	r11
8000350a:	0c 9c       	mov	r12,r6
8000350c:	f0 1f 00 13 	mcall	80003558 <txTramaManual+0x84>
		pal_trx_reg_write(RG_TRX_STATE,CMD_TX_START); // inicio tx - segun manual: Write TRX_CMD = TX_START, or assert pin 11 (SLP_TR)
80003510:	30 2b       	mov	r11,2
80003512:	16 9c       	mov	r12,r11
80003514:	f0 1f 00 0f 	mcall	80003550 <txTramaManual+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003518:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000351c:	f0 ca ff b8 	sub	r10,r8,-72
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003520:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003524:	14 38       	cp.w	r8,r10
80003526:	e0 88 00 08 	brls	80003536 <txTramaManual+0x62>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000352a:	12 38       	cp.w	r8,r9
8000352c:	fe 98 ff fa 	brls	80003520 <txTramaManual+0x4c>
80003530:	12 3a       	cp.w	r10,r9
80003532:	c0 73       	brcs	80003540 <txTramaManual+0x6c>
80003534:	cf 6b       	rjmp	80003520 <txTramaManual+0x4c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003536:	12 38       	cp.w	r8,r9
80003538:	e0 8b 00 04 	brhi	80003540 <txTramaManual+0x6c>
8000353c:	12 3a       	cp.w	r10,r9
8000353e:	cf 12       	brcc	80003520 <txTramaManual+0x4c>
		DELAY_US(RST_PULSE_WIDTH_NS); // hacia el estado busy_tx
	} 
	pal_trx_reg_write(RG_TRX_STATE,CMD_RX_ON); //vuelvo a estador RX ON
80003540:	30 6b       	mov	r11,6
80003542:	30 2c       	mov	r12,2
80003544:	f0 1f 00 03 	mcall	80003550 <txTramaManual+0x7c>
}
80003548:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000354c:	80 00       	ld.sh	r0,r0[0x0]
8000354e:	31 54       	mov	r4,21
80003550:	80 00       	ld.sh	r0,r0[0x0]
80003552:	2e 38       	sub	r8,-29
80003554:	00 00       	add	r0,r0
80003556:	06 60       	and	r0,r3
80003558:	80 00       	ld.sh	r0,r0[0x0]
8000355a:	2d 6c       	sub	r12,-42

8000355c <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
8000355c:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
8000355e:	30 0b       	mov	r11,0
80003560:	fe 7c 5c 00 	mov	r12,-41984
80003564:	f0 1f 00 20 	mcall	800035e4 <tc_irq+0x88>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80003568:	4a 08       	lddpc	r8,800035e8 <tc_irq+0x8c>
8000356a:	70 09       	ld.w	r9,r8[0x0]
8000356c:	2f f9       	sub	r9,-1
8000356e:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80003570:	70 08       	ld.w	r8,r8[0x0]
80003572:	59 38       	cp.w	r8,19
80003574:	e0 8b 00 0c 	brhi	8000358c <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80003578:	32 9c       	mov	r12,41
8000357a:	f0 1f 00 1d 	mcall	800035ec <tc_irq+0x90>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
8000357e:	30 4c       	mov	r12,4
80003580:	f0 1f 00 1b 	mcall	800035ec <tc_irq+0x90>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80003584:	30 bc       	mov	r12,11
80003586:	f0 1f 00 1a 	mcall	800035ec <tc_irq+0x90>
		return;
8000358a:	c2 b8       	rjmp	800035e0 <tc_irq+0x84>
	}
	
	if (tc_tick == 21)	
8000358c:	49 78       	lddpc	r8,800035e8 <tc_irq+0x8c>
8000358e:	70 08       	ld.w	r8,r8[0x0]
80003590:	59 58       	cp.w	r8,21
80003592:	c0 41       	brne	8000359a <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80003594:	32 9c       	mov	r12,41
80003596:	f0 1f 00 16 	mcall	800035ec <tc_irq+0x90>
		
	if (tc_tick == 22)
8000359a:	49 48       	lddpc	r8,800035e8 <tc_irq+0x8c>
8000359c:	70 08       	ld.w	r8,r8[0x0]
8000359e:	59 68       	cp.w	r8,22
800035a0:	c0 41       	brne	800035a8 <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
800035a2:	30 4c       	mov	r12,4
800035a4:	f0 1f 00 12 	mcall	800035ec <tc_irq+0x90>
	
	if (tc_tick == 23)
800035a8:	49 08       	lddpc	r8,800035e8 <tc_irq+0x8c>
800035aa:	70 08       	ld.w	r8,r8[0x0]
800035ac:	59 78       	cp.w	r8,23
800035ae:	c0 71       	brne	800035bc <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
800035b0:	30 bc       	mov	r12,11
800035b2:	f0 1f 00 0f 	mcall	800035ec <tc_irq+0x90>
		tc_tick = 1;
800035b6:	30 19       	mov	r9,1
800035b8:	48 c8       	lddpc	r8,800035e8 <tc_irq+0x8c>
800035ba:	91 09       	st.w	r8[0x0],r9
	}
	if (cola_PC_nw>0){
800035bc:	48 d8       	lddpc	r8,800035f0 <tc_irq+0x94>
800035be:	11 88       	ld.ub	r8,r8[0x0]
800035c0:	58 08       	cp.w	r8,0
800035c2:	c0 f0       	breq	800035e0 <tc_irq+0x84>
		if (cola_PC_nw!=tamano_cola)
800035c4:	3c 89       	mov	r9,-56
800035c6:	f2 08 18 00 	cp.b	r8,r9
800035ca:	c0 50       	breq	800035d4 <tc_irq+0x78>
		cola_PC[cola_PC_nw]=0x03;
800035cc:	30 3a       	mov	r10,3
800035ce:	48 a9       	lddpc	r9,800035f4 <tc_irq+0x98>
800035d0:	f2 08 0b 0a 	st.b	r9[r8],r10
		txTramaManual(cola_PC);
800035d4:	48 8c       	lddpc	r12,800035f4 <tc_irq+0x98>
800035d6:	f0 1f 00 09 	mcall	800035f8 <tc_irq+0x9c>
		cola_PC_nw = 0;
800035da:	30 09       	mov	r9,0
800035dc:	48 58       	lddpc	r8,800035f0 <tc_irq+0x94>
800035de:	b0 89       	st.b	r8[0x0],r9
	}
}
800035e0:	d4 02       	popm	lr
800035e2:	d6 03       	rete
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	2a 26       	sub	r6,-94
800035e8:	00 00       	add	r0,r0
800035ea:	00 1c       	sub	r12,r0
800035ec:	80 00       	ld.sh	r0,r0[0x0]
800035ee:	26 a0       	sub	r0,106
800035f0:	00 00       	add	r0,r0
800035f2:	06 60       	and	r0,r3
800035f4:	00 00       	add	r0,r0
800035f6:	07 7c       	ld.ub	r12,--r3
800035f8:	80 00       	ld.sh	r0,r0[0x0]
800035fa:	34 d4       	mov	r4,77

800035fc <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart1200, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
800035fc:	eb cd 40 80 	pushm	r7,lr
80003600:	20 6d       	sub	sp,24
80003602:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
80003604:	30 08       	mov	r8,0
80003606:	ba 98       	st.b	sp[0x1],r8
80003608:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
8000360a:	34 89       	mov	r9,72
8000360c:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
8000360e:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
80003610:	30 29       	mov	r9,2
80003612:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
80003614:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
80003618:	30 18       	mov	r8,1
8000361a:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
8000361e:	fa cb ff fc 	sub	r11,sp,-4
80003622:	fe 7c 44 00 	mov	r12,-48128
80003626:	f0 1f 00 39 	mcall	80003708 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
8000362a:	c6 61       	brne	800036f6 <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
8000362c:	1b 89       	ld.ub	r9,sp[0x0]
8000362e:	1b 98       	ld.ub	r8,sp[0x1]
80003630:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003634:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
80003636:	30 09       	mov	r9,0
80003638:	f2 08 19 00 	cp.h	r8,r9
8000363c:	c0 35       	brlt	80003642 <leer_temp+0x46>
8000363e:	30 1b       	mov	r11,1
80003640:	c0 58       	rjmp	8000364a <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
80003642:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80003646:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
8000364a:	4b 19       	lddpc	r9,8000370c <leer_temp+0x110>
8000364c:	13 89       	ld.ub	r9,r9[0x0]
8000364e:	30 1a       	mov	r10,1
80003650:	f4 09 18 00 	cp.b	r9,r10
80003654:	c1 c0       	breq	8000368c <leer_temp+0x90>
80003656:	58 09       	cp.w	r9,0
80003658:	c0 b0       	breq	8000366e <leer_temp+0x72>
8000365a:	30 2a       	mov	r10,2
8000365c:	f4 09 18 00 	cp.b	r9,r10
80003660:	c2 50       	breq	800036aa <leer_temp+0xae>
80003662:	30 3a       	mov	r10,3
80003664:	f4 09 18 00 	cp.b	r9,r10
80003668:	c3 00       	breq	800036c8 <leer_temp+0xcc>
8000366a:	30 0c       	mov	r12,0
8000366c:	c3 c8       	rjmp	800036e4 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
8000366e:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
80003672:	5c 6b       	casts.b	r11
80003674:	f0 0b 02 4c 	mul	r12,r8,r11
80003678:	f0 1f 00 26 	mcall	80003710 <leer_temp+0x114>
8000367c:	30 08       	mov	r8,0
8000367e:	fc 19 3f e0 	movh	r9,0x3fe0
80003682:	f0 1f 00 25 	mcall	80003714 <leer_temp+0x118>
80003686:	f0 1f 00 25 	mcall	80003718 <leer_temp+0x11c>
			break;
8000368a:	c2 d8       	rjmp	800036e4 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
8000368c:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
80003690:	5c 6b       	casts.b	r11
80003692:	f0 0b 02 4c 	mul	r12,r8,r11
80003696:	f0 1f 00 1f 	mcall	80003710 <leer_temp+0x114>
8000369a:	30 08       	mov	r8,0
8000369c:	fc 19 3f d0 	movh	r9,0x3fd0
800036a0:	f0 1f 00 1d 	mcall	80003714 <leer_temp+0x118>
800036a4:	f0 1f 00 1d 	mcall	80003718 <leer_temp+0x11c>
			break;
800036a8:	c1 e8       	rjmp	800036e4 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
800036aa:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
800036ae:	5c 6b       	casts.b	r11
800036b0:	f0 0b 02 4c 	mul	r12,r8,r11
800036b4:	f0 1f 00 17 	mcall	80003710 <leer_temp+0x114>
800036b8:	30 08       	mov	r8,0
800036ba:	fc 19 3f c0 	movh	r9,0x3fc0
800036be:	f0 1f 00 16 	mcall	80003714 <leer_temp+0x118>
800036c2:	f0 1f 00 16 	mcall	80003718 <leer_temp+0x11c>
			break;
800036c6:	c0 f8       	rjmp	800036e4 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
800036c8:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
800036cc:	5c 6b       	casts.b	r11
800036ce:	f0 0b 02 4c 	mul	r12,r8,r11
800036d2:	f0 1f 00 10 	mcall	80003710 <leer_temp+0x114>
800036d6:	30 08       	mov	r8,0
800036d8:	fc 19 3f b0 	movh	r9,0x3fb0
800036dc:	f0 1f 00 0e 	mcall	80003714 <leer_temp+0x118>
800036e0:	f0 1f 00 0e 	mcall	80003718 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
800036e4:	f0 1f 00 0e 	mcall	8000371c <leer_temp+0x120>
800036e8:	bb 2b       	st.d	--sp,r10
800036ea:	48 eb       	lddpc	r11,80003720 <leer_temp+0x124>
800036ec:	0e 9c       	mov	r12,r7
800036ee:	f0 1f 00 0e 	mcall	80003724 <leer_temp+0x128>
800036f2:	2f ed       	sub	sp,-8
800036f4:	c0 68       	rjmp	80003700 <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
800036f6:	30 2a       	mov	r10,2
800036f8:	48 cb       	lddpc	r11,80003728 <leer_temp+0x12c>
800036fa:	0e 9c       	mov	r12,r7
800036fc:	f0 1f 00 0c 	mcall	8000372c <leer_temp+0x130>
}
80003700:	2f ad       	sub	sp,-24
80003702:	e3 cd 80 80 	ldm	sp++,r7,pc
80003706:	00 00       	add	r0,r0
80003708:	80 00       	ld.sh	r0,r0[0x0]
8000370a:	22 30       	sub	r0,35
8000370c:	00 00       	add	r0,r0
8000370e:	00 40       	or	r0,r0
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	3f 28       	mov	r8,-14
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	3d 4c       	mov	r12,-44
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	40 68       	lddsp	r8,sp[0x18]
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	40 08       	lddsp	r8,sp[0x0]
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	9b 4c       	st.w	sp[0x10],r12
80003724:	80 00       	ld.sh	r0,r0[0x0]
80003726:	42 3c       	lddsp	r12,sp[0x8c]
80003728:	80 00       	ld.sh	r0,r0[0x0]
8000372a:	9b 54       	st.w	sp[0x14],r4
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	40 f2       	lddsp	r2,sp[0x3c]

80003730 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003730:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003732:	18 9b       	mov	r11,r12
80003734:	30 2c       	mov	r12,2
80003736:	f0 1f 00 02 	mcall	8000373c <sysclk_enable_pba_module+0xc>
}
8000373a:	d8 02       	popm	pc
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	2f 28       	sub	r8,-14

80003740 <rs_232_init_pins>:
	//

}

void rs_232_init_pins(void)
{
80003740:	d4 01       	pushm	lr
80003742:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
80003744:	48 88       	lddpc	r8,80003764 <rs_232_init_pins+0x24>
80003746:	1a 9c       	mov	r12,sp
80003748:	70 09       	ld.w	r9,r8[0x0]
8000374a:	50 09       	stdsp	sp[0x0],r9
8000374c:	70 19       	ld.w	r9,r8[0x4]
8000374e:	50 19       	stdsp	sp[0x4],r9
80003750:	70 29       	ld.w	r9,r8[0x8]
80003752:	50 29       	stdsp	sp[0x8],r9
80003754:	70 38       	ld.w	r8,r8[0xc]
80003756:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
80003758:	30 2b       	mov	r11,2
8000375a:	f0 1f 00 04 	mcall	80003768 <rs_232_init_pins+0x28>
}
8000375e:	2f cd       	sub	sp,-16
80003760:	d8 02       	popm	pc
80003762:	00 00       	add	r0,r0
80003764:	80 00       	ld.sh	r0,r0[0x0]
80003766:	9b 18       	st.w	sp[0x4],r8
80003768:	80 00       	ld.sh	r0,r0[0x0]
8000376a:	25 8c       	sub	r12,88

8000376c <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
8000376c:	d4 01       	pushm	lr
8000376e:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003770:	48 88       	lddpc	r8,80003790 <init_i2c_pins+0x24>
80003772:	1a 9c       	mov	r12,sp
80003774:	70 09       	ld.w	r9,r8[0x0]
80003776:	50 09       	stdsp	sp[0x0],r9
80003778:	70 19       	ld.w	r9,r8[0x4]
8000377a:	50 19       	stdsp	sp[0x4],r9
8000377c:	70 29       	ld.w	r9,r8[0x8]
8000377e:	50 29       	stdsp	sp[0x8],r9
80003780:	70 38       	ld.w	r8,r8[0xc]
80003782:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003784:	30 2b       	mov	r11,2
80003786:	f0 1f 00 04 	mcall	80003794 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000378a:	2f cd       	sub	sp,-16
8000378c:	d8 02       	popm	pc
8000378e:	00 00       	add	r0,r0
80003790:	80 00       	ld.sh	r0,r0[0x0]
80003792:	9b 3c       	st.w	sp[0xc],r12
80003794:	80 00       	ld.sh	r0,r0[0x0]
80003796:	25 8c       	sub	r12,88

80003798 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
80003798:	d4 01       	pushm	lr
8000379a:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
8000379c:	48 d8       	lddpc	r8,800037d0 <spi_init_pins+0x38>
8000379e:	1a 9c       	mov	r12,sp
800037a0:	70 09       	ld.w	r9,r8[0x0]
800037a2:	50 09       	stdsp	sp[0x0],r9
800037a4:	70 19       	ld.w	r9,r8[0x4]
800037a6:	50 19       	stdsp	sp[0x4],r9
800037a8:	70 29       	ld.w	r9,r8[0x8]
800037aa:	50 29       	stdsp	sp[0x8],r9
800037ac:	70 39       	ld.w	r9,r8[0xc]
800037ae:	50 39       	stdsp	sp[0xc],r9
800037b0:	fa c9 ff f0 	sub	r9,sp,-16
800037b4:	2f 08       	sub	r8,-16
800037b6:	70 0a       	ld.w	r10,r8[0x0]
800037b8:	93 0a       	st.w	r9[0x0],r10
800037ba:	70 1a       	ld.w	r10,r8[0x4]
800037bc:	93 1a       	st.w	r9[0x4],r10
800037be:	70 2a       	ld.w	r10,r8[0x8]
800037c0:	93 2a       	st.w	r9[0x8],r10
800037c2:	70 38       	ld.w	r8,r8[0xc]
800037c4:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
800037c6:	30 4b       	mov	r11,4
800037c8:	f0 1f 00 03 	mcall	800037d4 <spi_init_pins+0x3c>
}
800037cc:	2f 8d       	sub	sp,-32
800037ce:	d8 02       	popm	pc
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	9d b0       	st.w	lr[0x2c],r0
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	25 8c       	sub	r12,88

800037d8 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
800037d8:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
800037da:	30 5b       	mov	r11,5
800037dc:	30 4c       	mov	r12,4
800037de:	f0 1f 00 06 	mcall	800037f4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800037e2:	30 5b       	mov	r11,5
800037e4:	30 bc       	mov	r12,11
800037e6:	f0 1f 00 04 	mcall	800037f4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800037ea:	30 5b       	mov	r11,5
800037ec:	32 9c       	mov	r12,41
800037ee:	f0 1f 00 02 	mcall	800037f4 <led_init_pins+0x1c>
}
800037f2:	d8 02       	popm	pc
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	25 bc       	sub	r12,91

800037f8 <init_rf_pins>:
// 		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
// 	}
} 

void init_rf_pins(void)
{
800037f8:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800037fa:	f0 1f 00 08 	mcall	80003818 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800037fe:	30 4b       	mov	r11,4
80003800:	30 dc       	mov	r12,13
80003802:	f0 1f 00 07 	mcall	8000381c <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
80003806:	30 6b       	mov	r11,6
80003808:	30 dc       	mov	r12,13
8000380a:	f0 1f 00 06 	mcall	80003820 <init_rf_pins+0x28>
	//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
8000380e:	30 dc       	mov	r12,13
80003810:	f0 1f 00 05 	mcall	80003824 <init_rf_pins+0x2c>

	// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	//

}
80003814:	d8 02       	popm	pc
80003816:	00 00       	add	r0,r0
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	37 98       	mov	r8,121
8000381c:	80 00       	ld.sh	r0,r0[0x0]
8000381e:	25 bc       	sub	r12,91
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	24 f8       	sub	r8,79
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	26 b6       	sub	r6,107

80003828 <escribirPorPCBufferRX>:

void escribir_linea_pc (char *str)
{
	usart_write_line(&AVR32_USART2,str);
}
void escribirPorPCBufferRX(char *str){
80003828:	eb cd 40 e0 	pushm	r5-r7,lr
8000382c:	18 97       	mov	r7,r12
	while (*str != 0x03)
8000382e:	19 8b       	ld.ub	r11,r12[0x0]
80003830:	30 38       	mov	r8,3
80003832:	f0 0b 18 00 	cp.b	r11,r8
80003836:	c0 c0       	breq	8000384e <escribirPorPCBufferRX+0x26>
		usart_putchar(&AVR32_USART2, *str++);
80003838:	fe 75 38 00 	mov	r5,-51200
void escribir_linea_pc (char *str)
{
	usart_write_line(&AVR32_USART2,str);
}
void escribirPorPCBufferRX(char *str){
	while (*str != 0x03)
8000383c:	10 96       	mov	r6,r8
		usart_putchar(&AVR32_USART2, *str++);
8000383e:	2f f7       	sub	r7,-1
80003840:	0a 9c       	mov	r12,r5
80003842:	f0 1f 00 05 	mcall	80003854 <escribirPorPCBufferRX+0x2c>
void escribir_linea_pc (char *str)
{
	usart_write_line(&AVR32_USART2,str);
}
void escribirPorPCBufferRX(char *str){
	while (*str != 0x03)
80003846:	0f 8b       	ld.ub	r11,r7[0x0]
80003848:	ec 0b 18 00 	cp.b	r11,r6
8000384c:	cf 91       	brne	8000383e <escribirPorPCBufferRX+0x16>
8000384e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003852:	00 00       	add	r0,r0
80003854:	80 00       	ld.sh	r0,r0[0x0]
80003856:	2b e4       	sub	r4,-66

80003858 <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
80003858:	eb cd 40 c0 	pushm	r6-r7,lr
	
	IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS) & 0x0C;
8000385c:	30 fc       	mov	r12,15
8000385e:	f0 1f 00 11 	mcall	800038a0 <eic_int_handler2+0x48>
80003862:	49 17       	lddpc	r7,800038a4 <eic_int_handler2+0x4c>
80003864:	e2 1c 00 0c 	andl	r12,0xc,COH
80003868:	ae 8c       	st.b	r7[0x0],r12
	
	//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
	//variable2=pal_trx_reg_read(RG_IRQ_MASK);
	
	// Interrupt Line must be cleared to enable
	eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
8000386a:	30 2b       	mov	r11,2
8000386c:	fe 7c 24 00 	mov	r12,-56320
80003870:	f0 1f 00 0e 	mcall	800038a8 <eic_int_handler2+0x50>
	//IRQ2 Pin 26 MCU --> Pin 24 T
	//IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
	//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
	//variable2=pal_trx_reg_read(RG_IRQ_MASK);
	
	switch (IRQ_STATUS){
80003874:	0f 89       	ld.ub	r9,r7[0x0]
80003876:	30 48       	mov	r8,4
80003878:	f0 09 18 00 	cp.b	r9,r8
8000387c:	c0 e1       	brne	80003898 <eic_int_handler2+0x40>
		// 				contadorRX=contadorRX+6;
		//
		//
		// 			break;
		case TRX_IRQ_RX_START:
		pal_trx_frame_read(&colaRX[contadorRX],103); // para 200kbps
8000387e:	48 c7       	lddpc	r7,800038ac <eic_int_handler2+0x54>
80003880:	0f 8c       	ld.ub	r12,r7[0x0]
80003882:	48 c6       	lddpc	r6,800038b0 <eic_int_handler2+0x58>
80003884:	36 7b       	mov	r11,103
80003886:	ec 0c 00 0c 	add	r12,r6,r12
8000388a:	f0 1f 00 0b 	mcall	800038b4 <eic_int_handler2+0x5c>
		escribirPorPCBufferRX(colaRX);
8000388e:	0c 9c       	mov	r12,r6
80003890:	f0 1f 00 0a 	mcall	800038b8 <eic_int_handler2+0x60>
		contadorRX = 0;
80003894:	30 08       	mov	r8,0
80003896:	ae 88       	st.b	r7[0x0],r8
		
		break;
	}
}
80003898:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8000389c:	d6 03       	rete
8000389e:	00 00       	add	r0,r0
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	2e a4       	sub	r4,-22
800038a4:	00 00       	add	r0,r0
800038a6:	08 45       	or	r5,r4
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	24 dc       	sub	r12,77
800038ac:	00 00       	add	r0,r0
800038ae:	06 64       	and	r4,r3
800038b0:	00 00       	add	r0,r0
800038b2:	06 a0       	st.w	r3++,r0
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	2d d0       	sub	r0,-35
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	38 28       	mov	r8,-126

800038bc <escribir_linea_pc>:
	
	return;
}

void escribir_linea_pc (char *str)
{
800038bc:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800038be:	18 9b       	mov	r11,r12
800038c0:	fe 7c 38 00 	mov	r12,-51200
800038c4:	f0 1f 00 02 	mcall	800038cc <escribir_linea_pc+0x10>
}
800038c8:	d8 02       	popm	pc
800038ca:	00 00       	add	r0,r0
800038cc:	80 00       	ld.sh	r0,r0[0x0]
800038ce:	2c 10       	sub	r0,-63

800038d0 <getTemperature>:
	
	cpu_irq_enable();
	Enable_global_interrupt();
}
void getTemperature()
{
800038d0:	d4 01       	pushm	lr
800038d2:	20 8d       	sub	sp,32
	char temps[10] = "\0";
800038d4:	4a d8       	lddpc	r8,80003988 <getTemperature+0xb8>
800038d6:	90 08       	ld.sh	r8,r8[0x0]
800038d8:	fb 58 00 14 	st.h	sp[20],r8
800038dc:	fa c8 ff ea 	sub	r8,sp,-22
800038e0:	30 09       	mov	r9,0
800038e2:	b0 09       	st.h	r8[0x0],r9
800038e4:	fa c8 ff e8 	sub	r8,sp,-24
800038e8:	b0 09       	st.h	r8[0x0],r9
800038ea:	fa c8 ff e6 	sub	r8,sp,-26
800038ee:	b0 09       	st.h	r8[0x0],r9
800038f0:	fa c8 ff e4 	sub	r8,sp,-28
800038f4:	b0 09       	st.h	r8[0x0],r9
	uint8_t i;
	uint8_t LRC = 0;
	char tramaRespuesta[20]="\0";
800038f6:	fa c8 ff fa 	sub	r8,sp,-6
800038fa:	b0 09       	st.h	r8[0x0],r9
800038fc:	fa c8 ff f8 	sub	r8,sp,-8
80003900:	b0 09       	st.h	r8[0x0],r9
80003902:	fa c8 ff f6 	sub	r8,sp,-10
80003906:	b0 09       	st.h	r8[0x0],r9
80003908:	fa c8 ff f4 	sub	r8,sp,-12
8000390c:	b0 09       	st.h	r8[0x0],r9
8000390e:	fa c8 ff f2 	sub	r8,sp,-14
80003912:	b0 09       	st.h	r8[0x0],r9
80003914:	fa c8 ff f0 	sub	r8,sp,-16
80003918:	b0 09       	st.h	r8[0x0],r9
8000391a:	fa c8 ff ee 	sub	r8,sp,-18
8000391e:	b0 09       	st.h	r8[0x0],r9
	tramaRespuesta[0]=SOH;
80003920:	30 18       	mov	r8,1
80003922:	ba 88       	st.b	sp[0x0],r8
	tramaRespuesta[1]=SOH;
80003924:	ba 98       	st.b	sp[0x1],r8
	tramaRespuesta[2]=SOH;
80003926:	ba a8       	st.b	sp[0x2],r8
	tramaRespuesta[3]=0x06;
80003928:	30 68       	mov	r8,6
8000392a:	ba b8       	st.b	sp[0x3],r8
	tramaRespuesta[4]=ADDRESS;
8000392c:	33 18       	mov	r8,49
8000392e:	ba c8       	st.b	sp[0x4],r8
	tramaRespuesta[5]=CONFIG_TEMPERATURA;
80003930:	33 28       	mov	r8,50
80003932:	ba d8       	st.b	sp[0x5],r8
	leer_temp(temps);
80003934:	fa cc ff ec 	sub	r12,sp,-20
80003938:	f0 1f 00 15 	mcall	8000398c <getTemperature+0xbc>
	tramaRespuesta[6]=temps[0];
8000393c:	fb 3b 00 14 	ld.ub	r11,sp[20]
80003940:	ba eb       	st.b	sp[0x6],r11
	tramaRespuesta[7]=temps[1];
80003942:	fb 3a 00 15 	ld.ub	r10,sp[21]
80003946:	ba fa       	st.b	sp[0x7],r10
	tramaRespuesta[8]=temps[2];
80003948:	fb 39 00 16 	ld.ub	r9,sp[22]
8000394c:	fb 69 00 08 	st.b	sp[8],r9
	tramaRespuesta[9]=temps[3];
80003950:	fb 38 00 17 	ld.ub	r8,sp[23]
80003954:	fb 68 00 09 	st.b	sp[9],r8
	
	for (i = 4; i <= 9; i++){
		LRC = LRC ^ tramaRespuesta[i];
80003958:	1b dc       	ld.ub	r12,sp[0x5]
8000395a:	1b ce       	ld.ub	lr,sp[0x4]
8000395c:	fd ec 20 0c 	eor	r12,lr,r12
80003960:	5c 5c       	castu.b	r12
80003962:	f9 eb 20 0b 	eor	r11,r12,r11
80003966:	f7 ea 20 0a 	eor	r10,r11,r10
8000396a:	f5 e9 20 09 	eor	r9,r10,r9
	}
	tramaRespuesta[10] = LRC;
8000396e:	f3 e8 20 08 	eor	r8,r9,r8
80003972:	fb 68 00 0a 	st.b	sp[10],r8
	tramaRespuesta[11] = EOT;
80003976:	30 48       	mov	r8,4
80003978:	fb 68 00 0b 	st.b	sp[11],r8
	escribir_linea_pc(tramaRespuesta);
8000397c:	1a 9c       	mov	r12,sp
8000397e:	f0 1f 00 05 	mcall	80003990 <getTemperature+0xc0>
	return;
}
80003982:	2f 8d       	sub	sp,-32
80003984:	d8 02       	popm	pc
80003986:	00 00       	add	r0,r0
80003988:	80 00       	ld.sh	r0,r0[0x0]
8000398a:	2f e0       	sub	r0,-2
8000398c:	80 00       	ld.sh	r0,r0[0x0]
8000398e:	35 fc       	mov	r12,95
80003990:	80 00       	ld.sh	r0,r0[0x0]
80003992:	38 bc       	mov	r12,-117

80003994 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
80003994:	d4 01       	pushm	lr
80003996:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003998:	30 eb       	mov	r11,14
8000399a:	30 2c       	mov	r12,2
8000399c:	f0 1f 00 0a 	mcall	800039c4 <init_i2c_module+0x30>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
800039a0:	e0 78 c1 38 	mov	r8,115000
800039a4:	50 08       	stdsp	sp[0x0],r8
800039a6:	e0 68 27 10 	mov	r8,10000
800039aa:	50 18       	stdsp	sp[0x4],r8
800039ac:	34 88       	mov	r8,72
800039ae:	50 28       	stdsp	sp[0x8],r8
800039b0:	30 08       	mov	r8,0
800039b2:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
800039b6:	1a 9b       	mov	r11,sp
800039b8:	fe 7c 44 00 	mov	r12,-48128
800039bc:	f0 1f 00 03 	mcall	800039c8 <init_i2c_module+0x34>
// 		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
// 	} else {
// 		// display test result to user
// 		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
// 	}
} 
800039c0:	2f cd       	sub	sp,-16
800039c2:	d8 02       	popm	pc
800039c4:	80 00       	ld.sh	r0,r0[0x0]
800039c6:	2f 28       	sub	r8,-14
800039c8:	80 00       	ld.sh	r0,r0[0x0]
800039ca:	23 40       	sub	r0,52

800039cc <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
800039cc:	eb cd 40 e0 	pushm	r5-r7,lr
800039d0:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
800039d2:	4a 48       	lddpc	r8,80003a60 <spi_init_module+0x94>
800039d4:	1a 95       	mov	r5,sp
800039d6:	70 09       	ld.w	r9,r8[0x0]
800039d8:	50 09       	stdsp	sp[0x0],r9
800039da:	70 19       	ld.w	r9,r8[0x4]
800039dc:	50 19       	stdsp	sp[0x4],r9
800039de:	70 29       	ld.w	r9,r8[0x8]
800039e0:	50 29       	stdsp	sp[0x8],r9
800039e2:	70 38       	ld.w	r8,r8[0xc]
800039e4:	50 38       	stdsp	sp[0xc],r8
800039e6:	30 db       	mov	r11,13
800039e8:	30 2c       	mov	r12,2
800039ea:	f0 1f 00 1f 	mcall	80003a64 <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800039ee:	fe 77 40 00 	mov	r7,-49152
800039f2:	e0 68 00 80 	mov	r8,128
800039f6:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
800039f8:	6e 18       	ld.w	r8,r7[0x4]
800039fa:	30 19       	mov	r9,1
800039fc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003a00:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
80003a02:	6e 18       	ld.w	r8,r7[0x4]
80003a04:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003a08:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
80003a0a:	6e 18       	ld.w	r8,r7[0x4]
80003a0c:	30 06       	mov	r6,0
80003a0e:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
80003a12:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
80003a14:	6e 18       	ld.w	r8,r7[0x4]
80003a16:	30 f9       	mov	r9,15
80003a18:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003a1c:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
80003a1e:	6e 18       	ld.w	r8,r7[0x4]
80003a20:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003a24:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
80003a26:	6e 18       	ld.w	r8,r7[0x4]
80003a28:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003a2c:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
80003a2e:	6e 18       	ld.w	r8,r7[0x4]
80003a30:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
80003a34:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
80003a36:	30 38       	mov	r8,3
80003a38:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
80003a3a:	e0 7a c1 38 	mov	r10,115000
80003a3e:	1a 9b       	mov	r11,sp
80003a40:	0e 9c       	mov	r12,r7
80003a42:	f0 1f 00 0a 	mcall	80003a68 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
80003a46:	0c 99       	mov	r9,r6
80003a48:	0c 9a       	mov	r10,r6
80003a4a:	0c 9b       	mov	r11,r6
80003a4c:	0e 9c       	mov	r12,r7
80003a4e:	f0 1f 00 08 	mcall	80003a6c <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
80003a52:	0e 9c       	mov	r12,r7
80003a54:	f0 1f 00 07 	mcall	80003a70 <spi_init_module+0xa4>
}
80003a58:	2f cd       	sub	sp,-16
80003a5a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003a5e:	00 00       	add	r0,r0
80003a60:	80 00       	ld.sh	r0,r0[0x0]
80003a62:	9b 2c       	st.w	sp[0x8],r12
80003a64:	80 00       	ld.sh	r0,r0[0x0]
80003a66:	2f 28       	sub	r8,-14
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	28 a8       	sub	r8,-118
80003a6c:	80 00       	ld.sh	r0,r0[0x0]
80003a6e:	28 08       	sub	r8,-128
80003a70:	80 00       	ld.sh	r0,r0[0x0]
80003a72:	29 60       	sub	r0,-106

80003a74 <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
80003a74:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
80003a76:	30 bc       	mov	r12,11
80003a78:	f0 1f 00 05 	mcall	80003a8c <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart1200, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
80003a7c:	e0 7a c1 38 	mov	r10,115000
80003a80:	48 4b       	lddpc	r11,80003a90 <rs_232_init_usart+0x1c>
80003a82:	fe 7c 38 00 	mov	r12,-51200
80003a86:	f0 1f 00 04 	mcall	80003a94 <rs_232_init_usart+0x20>
	return estado_usart2;
}
80003a8a:	d8 02       	popm	pc
80003a8c:	80 00       	ld.sh	r0,r0[0x0]
80003a8e:	37 30       	mov	r0,115
80003a90:	00 00       	add	r0,r0
80003a92:	00 34       	cp.w	r4,r0
80003a94:	80 00       	ld.sh	r0,r0[0x0]
80003a96:	2c 60       	sub	r0,-58

80003a98 <inciarDispositivos>:
		break;
	}
	return;
}
void inciarDispositivos()
{
80003a98:	eb cd 40 80 	pushm	r7,lr
	// configuracion del clock del sistema ver archivo "conf_clock.h"
	sysclk_init();
80003a9c:	f0 1f 00 2a 	mcall	80003b44 <inciarDispositivos+0xac>
	
	//Configuracion de los pines para los LEDS
	led_init_pins();
80003aa0:	f0 1f 00 2a 	mcall	80003b48 <inciarDispositivos+0xb0>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
80003aa4:	f0 1f 00 2a 	mcall	80003b4c <inciarDispositivos+0xb4>
	
	//Configuracion pins para RF
	init_rf_pins();
80003aa8:	f0 1f 00 2a 	mcall	80003b50 <inciarDispositivos+0xb8>
	
	//Inicializacion del SPI
	spi_init_module();
80003aac:	f0 1f 00 2a 	mcall	80003b54 <inciarDispositivos+0xbc>
	
	//Inicializacion de la USART
	int estado_rs_232 = rs_232_init_usart();
80003ab0:	f0 1f 00 2a 	mcall	80003b58 <inciarDispositivos+0xc0>
}

static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
80003ab4:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
80003ab6:	f0 1f 00 2a 	mcall	80003b5c <inciarDispositivos+0xc4>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003aba:	30 0a       	mov	r10,0
80003abc:	e0 6b 02 20 	mov	r11,544
80003ac0:	4a 8c       	lddpc	r12,80003b60 <inciarDispositivos+0xc8>
80003ac2:	f0 1f 00 29 	mcall	80003b64 <inciarDispositivos+0xcc>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
80003ac6:	30 2a       	mov	r10,2
80003ac8:	e0 6b 01 61 	mov	r11,353
80003acc:	4a 7c       	lddpc	r12,80003b68 <inciarDispositivos+0xd0>
80003ace:	f0 1f 00 26 	mcall	80003b64 <inciarDispositivos+0xcc>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003ad2:	30 3a       	mov	r10,3
80003ad4:	e0 6b 03 40 	mov	r11,832
80003ad8:	4a 5c       	lddpc	r12,80003b6c <inciarDispositivos+0xd4>
80003ada:	f0 1f 00 23 	mcall	80003b64 <inciarDispositivos+0xcc>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
80003ade:	30 1a       	mov	r10,1
80003ae0:	4a 4b       	lddpc	r11,80003b70 <inciarDispositivos+0xd8>
80003ae2:	fe 7c 24 00 	mov	r12,-56320
80003ae6:	f0 1f 00 24 	mcall	80003b74 <inciarDispositivos+0xdc>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
80003aea:	30 2b       	mov	r11,2
80003aec:	fe 7c 24 00 	mov	r12,-56320
80003af0:	f0 1f 00 22 	mcall	80003b78 <inciarDispositivos+0xe0>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
80003af4:	30 2b       	mov	r11,2
80003af6:	fe 7c 24 00 	mov	r12,-56320
80003afa:	f0 1f 00 21 	mcall	80003b7c <inciarDispositivos+0xe4>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
80003afe:	30 19       	mov	r9,1
80003b00:	fe 78 38 00 	mov	r8,-51200
80003b04:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
80003b06:	d5 03       	csrf	0x10
	
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
80003b08:	49 e8       	lddpc	r8,80003b80 <inciarDispositivos+0xe8>
80003b0a:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003b0c:	49 eb       	lddpc	r11,80003b84 <inciarDispositivos+0xec>
80003b0e:	0e 9c       	mov	r12,r7
80003b10:	f0 1f 00 1e 	mcall	80003b88 <inciarDispositivos+0xf0>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
80003b14:	e0 6a 00 b3 	mov	r10,179
80003b18:	30 0b       	mov	r11,0
80003b1a:	0e 9c       	mov	r12,r7
80003b1c:	f0 1f 00 1c 	mcall	80003b8c <inciarDispositivos+0xf4>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003b20:	49 ca       	lddpc	r10,80003b90 <inciarDispositivos+0xf8>
80003b22:	30 0b       	mov	r11,0
80003b24:	0e 9c       	mov	r12,r7
80003b26:	f0 1f 00 1c 	mcall	80003b94 <inciarDispositivos+0xfc>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003b2a:	30 0b       	mov	r11,0
80003b2c:	0e 9c       	mov	r12,r7
80003b2e:	f0 1f 00 1b 	mcall	80003b98 <inciarDispositivos+0x100>
	
	// Inicializacion del timer
	tc_init(tc);
	
	//Inicializacion del sensor de temp
	init_i2c_pins();
80003b32:	f0 1f 00 1b 	mcall	80003b9c <inciarDispositivos+0x104>
	init_i2c_module();
80003b36:	f0 1f 00 1b 	mcall	80003ba0 <inciarDispositivos+0x108>
	
	init_AT86RF212();
80003b3a:	f0 1f 00 1b 	mcall	80003ba4 <inciarDispositivos+0x10c>
}
80003b3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b42:	00 00       	add	r0,r0
80003b44:	80 00       	ld.sh	r0,r0[0x0]
80003b46:	2f 18       	sub	r8,-15
80003b48:	80 00       	ld.sh	r0,r0[0x0]
80003b4a:	37 d8       	mov	r8,125
80003b4c:	80 00       	ld.sh	r0,r0[0x0]
80003b4e:	37 40       	mov	r0,116
80003b50:	80 00       	ld.sh	r0,r0[0x0]
80003b52:	37 f8       	mov	r8,127
80003b54:	80 00       	ld.sh	r0,r0[0x0]
80003b56:	39 cc       	mov	r12,-100
80003b58:	80 00       	ld.sh	r0,r0[0x0]
80003b5a:	3a 74       	mov	r4,-89
80003b5c:	80 00       	ld.sh	r0,r0[0x0]
80003b5e:	27 5c       	sub	r12,117
80003b60:	80 00       	ld.sh	r0,r0[0x0]
80003b62:	2f ec       	sub	r12,-2
80003b64:	80 00       	ld.sh	r0,r0[0x0]
80003b66:	26 dc       	sub	r12,109
80003b68:	80 00       	ld.sh	r0,r0[0x0]
80003b6a:	38 58       	mov	r8,-123
80003b6c:	80 00       	ld.sh	r0,r0[0x0]
80003b6e:	35 5c       	mov	r12,85
80003b70:	00 00       	add	r0,r0
80003b72:	00 2c       	rsub	r12,r0
80003b74:	80 00       	ld.sh	r0,r0[0x0]
80003b76:	23 f8       	sub	r8,63
80003b78:	80 00       	ld.sh	r0,r0[0x0]
80003b7a:	24 c8       	sub	r8,76
80003b7c:	80 00       	ld.sh	r0,r0[0x0]
80003b7e:	24 d2       	sub	r2,77
80003b80:	00 00       	add	r0,r0
80003b82:	00 0c       	add	r12,r0
80003b84:	80 00       	ld.sh	r0,r0[0x0]
80003b86:	9d a8       	st.w	lr[0x28],r8
80003b88:	80 00       	ld.sh	r0,r0[0x0]
80003b8a:	29 66       	sub	r6,-106
80003b8c:	80 00       	ld.sh	r0,r0[0x0]
80003b8e:	2a 38       	sub	r8,-93
80003b90:	80 00       	ld.sh	r0,r0[0x0]
80003b92:	9b 28       	st.w	sp[0x8],r8
80003b94:	80 00       	ld.sh	r0,r0[0x0]
80003b96:	2a 6c       	sub	r12,-90
80003b98:	80 00       	ld.sh	r0,r0[0x0]
80003b9a:	2a 02       	sub	r2,-96
80003b9c:	80 00       	ld.sh	r0,r0[0x0]
80003b9e:	37 6c       	mov	r12,118
80003ba0:	80 00       	ld.sh	r0,r0[0x0]
80003ba2:	39 94       	mov	r4,-103
80003ba4:	80 00       	ld.sh	r0,r0[0x0]
80003ba6:	32 a0       	mov	r0,42

80003ba8 <setUART>:
	escribir_linea_pc(tramaRespuesta);
	return;
}

void setUART()
{
80003ba8:	d4 01       	pushm	lr
	int i=3;
	int mult = 1;
	unsigned long baudRate = 0;
	Disable_global_interrupt();
80003baa:	d3 03       	ssrf	0x10
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80003bac:	30 0b       	mov	r11,0
80003bae:	4a 78       	lddpc	r8,80003c48 <setUART+0xa0>
80003bb0:	70 0c       	ld.w	r12,r8[0x0]
80003bb2:	f0 1f 00 27 	mcall	80003c4c <setUART+0xa4>
	
	while(i<tConfiguracion.tamPayload)
80003bb6:	4a 78       	lddpc	r8,80003c50 <setUART+0xa8>
80003bb8:	11 8c       	ld.ub	r12,r8[0x0]
80003bba:	58 3c       	cp.w	r12,3
80003bbc:	e0 8a 00 3b 	brle	80003c32 <setUART+0x8a>
80003bc0:	10 99       	mov	r9,r8
80003bc2:	2f a9       	sub	r9,-6
80003bc4:	12 9a       	mov	r10,r9
80003bc6:	30 38       	mov	r8,3
	{
		tConfiguracion.payload[i++]-=0x30;
80003bc8:	15 8b       	ld.ub	r11,r10[0x0]
80003bca:	23 0b       	sub	r11,48
80003bcc:	14 cb       	st.b	r10++,r11
80003bce:	2f f8       	sub	r8,-1
	int mult = 1;
	unsigned long baudRate = 0;
	Disable_global_interrupt();
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
	
	while(i<tConfiguracion.tamPayload)
80003bd0:	18 38       	cp.w	r8,r12
80003bd2:	cf b5       	brlt	80003bc8 <setUART+0x20>
	tramaRespuesta[11] = EOT;
	escribir_linea_pc(tramaRespuesta);
	return;
}

void setUART()
80003bd4:	49 f8       	lddpc	r8,80003c50 <setUART+0xa8>
80003bd6:	2f d8       	sub	r8,-3
80003bd8:	f0 0c 00 0c 	add	r12,r8,r12
80003bdc:	30 0a       	mov	r10,0
80003bde:	30 18       	mov	r8,1
	{
		tConfiguracion.payload[i++]-=0x30;
	}
	for(int i=3; i < tConfiguracion.tamPayload; i++)
	{
		baudRate = baudRate * mult + tConfiguracion.payload[i];
80003be0:	f0 0a 02 4a 	mul	r10,r8,r10
80003be4:	13 3b       	ld.ub	r11,r9++
80003be6:	16 0a       	add	r10,r11
		mult = mult*10;
80003be8:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003bec:	a1 78       	lsl	r8,0x1
	
	while(i<tConfiguracion.tamPayload)
	{
		tConfiguracion.payload[i++]-=0x30;
	}
	for(int i=3; i < tConfiguracion.tamPayload; i++)
80003bee:	18 39       	cp.w	r9,r12
80003bf0:	cf 81       	brne	80003be0 <setUART+0x38>
	{
		baudRate = baudRate * mult + tConfiguracion.payload[i];
		mult = mult*10;
	}
	switch (baudRate){
80003bf2:	e0 4a 25 80 	cp.w	r10,9600
80003bf6:	c0 f0       	breq	80003c14 <setUART+0x6c>
80003bf8:	e0 4a 38 40 	cp.w	r10,14400
80003bfc:	c1 40       	breq	80003c24 <setUART+0x7c>
80003bfe:	e0 4a 04 b0 	cp.w	r10,1200
80003c02:	c1 81       	brne	80003c32 <setUART+0x8a>
		case 1200:
		usart_init_rs232(&AVR32_USART2, &usart1200, sysclk_get_peripheral_bus_hz(&AVR32_USART2));
80003c04:	e0 7a c1 38 	mov	r10,115000
80003c08:	49 3b       	lddpc	r11,80003c54 <setUART+0xac>
80003c0a:	fe 7c 38 00 	mov	r12,-51200
80003c0e:	f0 1f 00 13 	mcall	80003c58 <setUART+0xb0>
		break;
80003c12:	c1 08       	rjmp	80003c32 <setUART+0x8a>
		case 9600:
		usart_init_rs232(&AVR32_USART2, &usart9600, sysclk_get_peripheral_bus_hz(&AVR32_USART2));
80003c14:	e0 7a c1 38 	mov	r10,115000
80003c18:	49 1b       	lddpc	r11,80003c5c <setUART+0xb4>
80003c1a:	fe 7c 38 00 	mov	r12,-51200
80003c1e:	f0 1f 00 0f 	mcall	80003c58 <setUART+0xb0>
		break;
80003c22:	c0 88       	rjmp	80003c32 <setUART+0x8a>
		case 14400:
		usart_init_rs232(&AVR32_USART2, &usart14400, sysclk_get_peripheral_bus_hz(&AVR32_USART2));
80003c24:	e0 7a c1 38 	mov	r10,115000
80003c28:	48 eb       	lddpc	r11,80003c60 <setUART+0xb8>
80003c2a:	fe 7c 38 00 	mov	r12,-51200
80003c2e:	f0 1f 00 0b 	mcall	80003c58 <setUART+0xb0>
		break;
	}
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
80003c32:	30 19       	mov	r9,1
80003c34:	fe 78 38 00 	mov	r8,-51200
80003c38:	91 29       	st.w	r8[0x8],r9
	Enable_global_interrupt();
80003c3a:	d5 03       	csrf	0x10
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003c3c:	30 0b       	mov	r11,0
80003c3e:	48 38       	lddpc	r8,80003c48 <setUART+0xa0>
80003c40:	70 0c       	ld.w	r12,r8[0x0]
80003c42:	f0 1f 00 09 	mcall	80003c64 <setUART+0xbc>
}
80003c46:	d8 02       	popm	pc
80003c48:	00 00       	add	r0,r0
80003c4a:	00 0c       	add	r12,r0
80003c4c:	80 00       	ld.sh	r0,r0[0x0]
80003c4e:	2a 14       	sub	r4,-95
80003c50:	00 00       	add	r0,r0
80003c52:	06 4c       	or	r12,r3
80003c54:	00 00       	add	r0,r0
80003c56:	00 34       	cp.w	r4,r0
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	2c 60       	sub	r0,-58
80003c5c:	00 00       	add	r0,r0
80003c5e:	00 10       	sub	r0,r0
80003c60:	00 00       	add	r0,r0
80003c62:	00 20       	rsub	r0,r0
80003c64:	80 00       	ld.sh	r0,r0[0x0]
80003c66:	2a 02       	sub	r2,-96

80003c68 <modeConfig>:

	tConfiguracion.lrc=cola_PC[++pSOH];
}

void modeConfig()
{
80003c68:	d4 01       	pushm	lr
	if (!checkPack(tConfiguracion))
80003c6a:	20 5d       	sub	sp,20
80003c6c:	31 3a       	mov	r10,19
80003c6e:	49 1b       	lddpc	r11,80003cb0 <modeConfig+0x48>
80003c70:	1a 9c       	mov	r12,sp
80003c72:	f0 1f 00 11 	mcall	80003cb4 <modeConfig+0x4c>
80003c76:	f0 1f 00 11 	mcall	80003cb8 <modeConfig+0x50>
80003c7a:	2f bd       	sub	sp,-20
80003c7c:	58 0c       	cp.w	r12,0
80003c7e:	c1 80       	breq	80003cae <modeConfig+0x46>
	return;
	
	switch (tConfiguracion.cmd){
80003c80:	48 c8       	lddpc	r8,80003cb0 <modeConfig+0x48>
80003c82:	11 a8       	ld.ub	r8,r8[0x2]
80003c84:	33 29       	mov	r9,50
80003c86:	f2 08 18 00 	cp.b	r8,r9
80003c8a:	c0 c0       	breq	80003ca2 <modeConfig+0x3a>
80003c8c:	33 89       	mov	r9,56
80003c8e:	f2 08 18 00 	cp.b	r8,r9
80003c92:	c0 b0       	breq	80003ca8 <modeConfig+0x40>
80003c94:	33 19       	mov	r9,49
80003c96:	f2 08 18 00 	cp.b	r8,r9
80003c9a:	c0 a1       	brne	80003cae <modeConfig+0x46>
		case CONFIG_BAUDRATE:
		setUART();
80003c9c:	f0 1f 00 08 	mcall	80003cbc <modeConfig+0x54>
		
		break;
80003ca0:	d8 02       	popm	pc
		
		case CONFIG_TEMPERATURA:
		getTemperature();
80003ca2:	f0 1f 00 08 	mcall	80003cc0 <modeConfig+0x58>
		break;
80003ca6:	d8 02       	popm	pc
		case HIDDEN_SETTINGS:
		escribir_linea_pc("\nA life is like a garden. Perfect moments can be had, but not preserved, except in memory... \n");
80003ca8:	48 7c       	lddpc	r12,80003cc4 <modeConfig+0x5c>
80003caa:	f0 1f 00 08 	mcall	80003cc8 <modeConfig+0x60>
80003cae:	d8 02       	popm	pc
80003cb0:	00 00       	add	r0,r0
80003cb2:	06 4c       	or	r12,r3
80003cb4:	80 00       	ld.sh	r0,r0[0x0]
80003cb6:	40 f2       	lddsp	r2,sp[0x3c]
80003cb8:	80 00       	ld.sh	r0,r0[0x0]
80003cba:	30 a0       	mov	r0,10
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	3b a8       	mov	r8,-70
80003cc0:	80 00       	ld.sh	r0,r0[0x0]
80003cc2:	38 d0       	mov	r0,-115
80003cc4:	80 00       	ld.sh	r0,r0[0x0]
80003cc6:	9d 48       	st.w	lr[0x10],r8
80003cc8:	80 00       	ld.sh	r0,r0[0x0]
80003cca:	38 bc       	mov	r12,-117

80003ccc <main>:
	
	init_AT86RF212();
}

int main (void)
{
80003ccc:	eb cd 40 fe 	pushm	r1-r7,lr
	inciarDispositivos();	
80003cd0:	f0 1f 00 17 	mcall	80003d2c <main+0x60>
	
	while(true)
	{
			if (configuracion)
80003cd4:	49 76       	lddpc	r6,80003d30 <main+0x64>
80003cd6:	30 07       	mov	r7,0
			{
				unpack();
				if (tConfiguracion.addr == ADDRESS) {
80003cd8:	49 75       	lddpc	r5,80003d34 <main+0x68>
80003cda:	33 14       	mov	r4,49
					modeConfig();
				}
				configuracion = false;
				pSOH = 0;
80003cdc:	49 73       	lddpc	r3,80003d38 <main+0x6c>
				pEOT = 0;
80003cde:	49 82       	lddpc	r2,80003d3c <main+0x70>
				cola_PC_nw=0;
80003ce0:	49 81       	lddpc	r1,80003d40 <main+0x74>
{
	inciarDispositivos();	
	
	while(true)
	{
			if (configuracion)
80003ce2:	0d 88       	ld.ub	r8,r6[0x0]
80003ce4:	ee 08 18 00 	cp.b	r8,r7
80003ce8:	c0 d0       	breq	80003d02 <main+0x36>
			{
				unpack();
80003cea:	f0 1f 00 17 	mcall	80003d44 <main+0x78>
				if (tConfiguracion.addr == ADDRESS) {
80003cee:	0b 98       	ld.ub	r8,r5[0x1]
80003cf0:	e8 08 18 00 	cp.b	r8,r4
80003cf4:	c0 31       	brne	80003cfa <main+0x2e>
					modeConfig();
80003cf6:	f0 1f 00 15 	mcall	80003d48 <main+0x7c>
				}
				configuracion = false;
80003cfa:	ac 87       	st.b	r6[0x0],r7
				pSOH = 0;
80003cfc:	a6 87       	st.b	r3[0x0],r7
				pEOT = 0;
80003cfe:	a4 87       	st.b	r2[0x0],r7
				cola_PC_nw=0;
80003d00:	a2 87       	st.b	r1[0x0],r7
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003d02:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003d06:	f0 ca fb 82 	sub	r10,r8,-1150
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003d0a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003d0e:	14 38       	cp.w	r8,r10
80003d10:	e0 88 00 08 	brls	80003d20 <main+0x54>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003d14:	12 38       	cp.w	r8,r9
80003d16:	fe 98 ff fa 	brls	80003d0a <main+0x3e>
80003d1a:	12 3a       	cp.w	r10,r9
80003d1c:	ce 33       	brcs	80003ce2 <main+0x16>
80003d1e:	cf 6b       	rjmp	80003d0a <main+0x3e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003d20:	12 38       	cp.w	r8,r9
80003d22:	fe 9b ff e0 	brhi	80003ce2 <main+0x16>
80003d26:	12 3a       	cp.w	r10,r9
80003d28:	cd d3       	brcs	80003ce2 <main+0x16>
80003d2a:	cf 0b       	rjmp	80003d0a <main+0x3e>
80003d2c:	80 00       	ld.sh	r0,r0[0x0]
80003d2e:	3a 98       	mov	r8,-87
80003d30:	00 00       	add	r0,r0
80003d32:	06 5f       	eor	pc,r3
80003d34:	00 00       	add	r0,r0
80003d36:	06 4c       	or	r12,r3
80003d38:	00 00       	add	r0,r0
80003d3a:	06 63       	and	r3,r3
80003d3c:	00 00       	add	r0,r0
80003d3e:	06 61       	and	r1,r3
80003d40:	00 00       	add	r0,r0
80003d42:	06 60       	and	r0,r3
80003d44:	80 00       	ld.sh	r0,r0[0x0]
80003d46:	30 ec       	mov	r12,14
80003d48:	80 00       	ld.sh	r0,r0[0x0]
80003d4a:	3c 68       	mov	r8,-58

80003d4c <__avr32_f64_mul>:
80003d4c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003d50:	e0 80 00 dc 	breq	80003f08 <__avr32_f64_mul_op1_zero>
80003d54:	d4 21       	pushm	r4-r7,lr
80003d56:	f7 e9 20 0e 	eor	lr,r11,r9
80003d5a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003d5e:	30 15       	mov	r5,1
80003d60:	c4 30       	breq	80003de6 <__avr32_f64_mul_op1_subnormal>
80003d62:	ab 6b       	lsl	r11,0xa
80003d64:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003d68:	ab 6a       	lsl	r10,0xa
80003d6a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003d6e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003d72:	c5 c0       	breq	80003e2a <__avr32_f64_mul_op2_subnormal>
80003d74:	a1 78       	lsl	r8,0x1
80003d76:	5c f9       	rol	r9
80003d78:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003d7c:	e0 47 07 ff 	cp.w	r7,2047
80003d80:	c7 70       	breq	80003e6e <__avr32_f64_mul_op_nan_or_inf>
80003d82:	e0 46 07 ff 	cp.w	r6,2047
80003d86:	c7 40       	breq	80003e6e <__avr32_f64_mul_op_nan_or_inf>
80003d88:	ee 06 00 0c 	add	r12,r7,r6
80003d8c:	e0 2c 03 fe 	sub	r12,1022
80003d90:	f6 08 06 44 	mulu.d	r4,r11,r8
80003d94:	f4 09 07 44 	macu.d	r4,r10,r9
80003d98:	f4 08 06 46 	mulu.d	r6,r10,r8
80003d9c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003da0:	08 07       	add	r7,r4
80003da2:	f4 05 00 4a 	adc	r10,r10,r5
80003da6:	5c 0b       	acr	r11
80003da8:	ed bb 00 14 	bld	r11,0x14
80003dac:	c0 50       	breq	80003db6 <__avr32_f64_mul+0x6a>
80003dae:	a1 77       	lsl	r7,0x1
80003db0:	5c fa       	rol	r10
80003db2:	5c fb       	rol	r11
80003db4:	20 1c       	sub	r12,1
80003db6:	58 0c       	cp.w	r12,0
80003db8:	e0 8a 00 6f 	brle	80003e96 <__avr32_f64_mul_res_subnormal>
80003dbc:	e0 4c 07 ff 	cp.w	r12,2047
80003dc0:	e0 84 00 9c 	brge	80003ef8 <__avr32_f64_mul_res_inf>
80003dc4:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003dc8:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003dcc:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003dd0:	ee 17 80 00 	eorh	r7,0x8000
80003dd4:	f1 b7 04 20 	satu	r7,0x1
80003dd8:	0e 0a       	add	r10,r7
80003dda:	5c 0b       	acr	r11
80003ddc:	ed be 00 1f 	bld	lr,0x1f
80003de0:	ef bb 00 1f 	bst	r11,0x1f
80003de4:	d8 22       	popm	r4-r7,pc

80003de6 <__avr32_f64_mul_op1_subnormal>:
80003de6:	e4 1b 00 0f 	andh	r11,0xf
80003dea:	f4 0c 12 00 	clz	r12,r10
80003dee:	f6 06 12 00 	clz	r6,r11
80003df2:	f7 bc 03 e1 	sublo	r12,-31
80003df6:	f8 06 17 30 	movlo	r6,r12
80003dfa:	f7 b6 02 01 	subhs	r6,1
80003dfe:	e0 46 00 20 	cp.w	r6,32
80003e02:	c0 d4       	brge	80003e1c <__avr32_f64_mul_op1_subnormal+0x36>
80003e04:	ec 0c 11 20 	rsub	r12,r6,32
80003e08:	f6 06 09 4b 	lsl	r11,r11,r6
80003e0c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003e10:	18 4b       	or	r11,r12
80003e12:	f4 06 09 4a 	lsl	r10,r10,r6
80003e16:	20 b6       	sub	r6,11
80003e18:	0c 17       	sub	r7,r6
80003e1a:	ca ab       	rjmp	80003d6e <__avr32_f64_mul+0x22>
80003e1c:	f4 06 09 4b 	lsl	r11,r10,r6
80003e20:	c6 40       	breq	80003ee8 <__avr32_f64_mul_res_zero>
80003e22:	30 0a       	mov	r10,0
80003e24:	20 b6       	sub	r6,11
80003e26:	0c 17       	sub	r7,r6
80003e28:	ca 3b       	rjmp	80003d6e <__avr32_f64_mul+0x22>

80003e2a <__avr32_f64_mul_op2_subnormal>:
80003e2a:	e4 19 00 0f 	andh	r9,0xf
80003e2e:	f0 0c 12 00 	clz	r12,r8
80003e32:	f2 05 12 00 	clz	r5,r9
80003e36:	f7 bc 03 ea 	sublo	r12,-22
80003e3a:	f8 05 17 30 	movlo	r5,r12
80003e3e:	f7 b5 02 0a 	subhs	r5,10
80003e42:	e0 45 00 20 	cp.w	r5,32
80003e46:	c0 d4       	brge	80003e60 <__avr32_f64_mul_op2_subnormal+0x36>
80003e48:	ea 0c 11 20 	rsub	r12,r5,32
80003e4c:	f2 05 09 49 	lsl	r9,r9,r5
80003e50:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003e54:	18 49       	or	r9,r12
80003e56:	f0 05 09 48 	lsl	r8,r8,r5
80003e5a:	20 25       	sub	r5,2
80003e5c:	0a 16       	sub	r6,r5
80003e5e:	c8 fb       	rjmp	80003d7c <__avr32_f64_mul+0x30>
80003e60:	f0 05 09 49 	lsl	r9,r8,r5
80003e64:	c4 20       	breq	80003ee8 <__avr32_f64_mul_res_zero>
80003e66:	30 08       	mov	r8,0
80003e68:	20 25       	sub	r5,2
80003e6a:	0a 16       	sub	r6,r5
80003e6c:	c8 8b       	rjmp	80003d7c <__avr32_f64_mul+0x30>

80003e6e <__avr32_f64_mul_op_nan_or_inf>:
80003e6e:	e4 19 00 0f 	andh	r9,0xf
80003e72:	e4 1b 00 0f 	andh	r11,0xf
80003e76:	14 4b       	or	r11,r10
80003e78:	10 49       	or	r9,r8
80003e7a:	e0 47 07 ff 	cp.w	r7,2047
80003e7e:	c0 91       	brne	80003e90 <__avr32_f64_mul_op1_not_naninf>
80003e80:	58 0b       	cp.w	r11,0
80003e82:	c3 81       	brne	80003ef2 <__avr32_f64_mul_res_nan>
80003e84:	e0 46 07 ff 	cp.w	r6,2047
80003e88:	c3 81       	brne	80003ef8 <__avr32_f64_mul_res_inf>
80003e8a:	58 09       	cp.w	r9,0
80003e8c:	c3 60       	breq	80003ef8 <__avr32_f64_mul_res_inf>
80003e8e:	c3 28       	rjmp	80003ef2 <__avr32_f64_mul_res_nan>

80003e90 <__avr32_f64_mul_op1_not_naninf>:
80003e90:	58 09       	cp.w	r9,0
80003e92:	c3 30       	breq	80003ef8 <__avr32_f64_mul_res_inf>
80003e94:	c2 f8       	rjmp	80003ef2 <__avr32_f64_mul_res_nan>

80003e96 <__avr32_f64_mul_res_subnormal>:
80003e96:	5c 3c       	neg	r12
80003e98:	2f fc       	sub	r12,-1
80003e9a:	f1 bc 04 c0 	satu	r12,0x6
80003e9e:	e0 4c 00 20 	cp.w	r12,32
80003ea2:	c1 14       	brge	80003ec4 <__avr32_f64_mul_res_subnormal+0x2e>
80003ea4:	f8 08 11 20 	rsub	r8,r12,32
80003ea8:	0e 46       	or	r6,r7
80003eaa:	ee 0c 0a 47 	lsr	r7,r7,r12
80003eae:	f4 08 09 49 	lsl	r9,r10,r8
80003eb2:	12 47       	or	r7,r9
80003eb4:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003eb8:	f6 08 09 49 	lsl	r9,r11,r8
80003ebc:	12 4a       	or	r10,r9
80003ebe:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003ec2:	c8 3b       	rjmp	80003dc8 <__avr32_f64_mul+0x7c>
80003ec4:	f8 08 11 20 	rsub	r8,r12,32
80003ec8:	f9 b9 00 00 	moveq	r9,0
80003ecc:	c0 30       	breq	80003ed2 <__avr32_f64_mul_res_subnormal+0x3c>
80003ece:	f6 08 09 49 	lsl	r9,r11,r8
80003ed2:	0e 46       	or	r6,r7
80003ed4:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003ed8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003edc:	f3 ea 10 07 	or	r7,r9,r10
80003ee0:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003ee4:	30 0b       	mov	r11,0
80003ee6:	c7 1b       	rjmp	80003dc8 <__avr32_f64_mul+0x7c>

80003ee8 <__avr32_f64_mul_res_zero>:
80003ee8:	1c 9b       	mov	r11,lr
80003eea:	e6 1b 80 00 	andh	r11,0x8000,COH
80003eee:	30 0a       	mov	r10,0
80003ef0:	d8 22       	popm	r4-r7,pc

80003ef2 <__avr32_f64_mul_res_nan>:
80003ef2:	3f fb       	mov	r11,-1
80003ef4:	3f fa       	mov	r10,-1
80003ef6:	d8 22       	popm	r4-r7,pc

80003ef8 <__avr32_f64_mul_res_inf>:
80003ef8:	f0 6b 00 00 	mov	r11,-1048576
80003efc:	ed be 00 1f 	bld	lr,0x1f
80003f00:	ef bb 00 1f 	bst	r11,0x1f
80003f04:	30 0a       	mov	r10,0
80003f06:	d8 22       	popm	r4-r7,pc

80003f08 <__avr32_f64_mul_op1_zero>:
80003f08:	f7 e9 20 0b 	eor	r11,r11,r9
80003f0c:	e6 1b 80 00 	andh	r11,0x8000,COH
80003f10:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003f14:	e0 4c 07 ff 	cp.w	r12,2047
80003f18:	5e 1c       	retne	r12
80003f1a:	3f fa       	mov	r10,-1
80003f1c:	3f fb       	mov	r11,-1
80003f1e:	5e fc       	retal	r12

80003f20 <__avr32_u32_to_f64>:
80003f20:	f8 cb 00 00 	sub	r11,r12,0
80003f24:	30 0c       	mov	r12,0
80003f26:	c0 38       	rjmp	80003f2c <__avr32_s32_to_f64+0x4>

80003f28 <__avr32_s32_to_f64>:
80003f28:	18 9b       	mov	r11,r12
80003f2a:	5c 4b       	abs	r11
80003f2c:	30 0a       	mov	r10,0
80003f2e:	5e 0b       	reteq	r11
80003f30:	d4 01       	pushm	lr
80003f32:	e0 69 04 1e 	mov	r9,1054
80003f36:	f6 08 12 00 	clz	r8,r11
80003f3a:	c1 70       	breq	80003f68 <__avr32_s32_to_f64+0x40>
80003f3c:	c0 c3       	brcs	80003f54 <__avr32_s32_to_f64+0x2c>
80003f3e:	f0 0e 11 20 	rsub	lr,r8,32
80003f42:	f6 08 09 4b 	lsl	r11,r11,r8
80003f46:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003f4a:	1c 4b       	or	r11,lr
80003f4c:	f4 08 09 4a 	lsl	r10,r10,r8
80003f50:	10 19       	sub	r9,r8
80003f52:	c0 b8       	rjmp	80003f68 <__avr32_s32_to_f64+0x40>
80003f54:	f4 08 12 00 	clz	r8,r10
80003f58:	f9 b8 03 00 	movlo	r8,0
80003f5c:	f7 b8 02 e0 	subhs	r8,-32
80003f60:	f4 08 09 4b 	lsl	r11,r10,r8
80003f64:	30 0a       	mov	r10,0
80003f66:	10 19       	sub	r9,r8
80003f68:	58 09       	cp.w	r9,0
80003f6a:	e0 89 00 30 	brgt	80003fca <__avr32_s32_to_f64+0xa2>
80003f6e:	5c 39       	neg	r9
80003f70:	2f f9       	sub	r9,-1
80003f72:	e0 49 00 36 	cp.w	r9,54
80003f76:	c0 43       	brcs	80003f7e <__avr32_s32_to_f64+0x56>
80003f78:	30 0b       	mov	r11,0
80003f7a:	30 0a       	mov	r10,0
80003f7c:	c2 68       	rjmp	80003fc8 <__avr32_s32_to_f64+0xa0>
80003f7e:	2f 69       	sub	r9,-10
80003f80:	f2 08 11 20 	rsub	r8,r9,32
80003f84:	e0 49 00 20 	cp.w	r9,32
80003f88:	c0 b2       	brcc	80003f9e <__avr32_s32_to_f64+0x76>
80003f8a:	f4 08 09 4e 	lsl	lr,r10,r8
80003f8e:	f6 08 09 48 	lsl	r8,r11,r8
80003f92:	f4 09 0a 4a 	lsr	r10,r10,r9
80003f96:	f6 09 0a 4b 	lsr	r11,r11,r9
80003f9a:	10 4b       	or	r11,r8
80003f9c:	c0 88       	rjmp	80003fac <__avr32_s32_to_f64+0x84>
80003f9e:	f6 08 09 4e 	lsl	lr,r11,r8
80003fa2:	14 4e       	or	lr,r10
80003fa4:	16 9a       	mov	r10,r11
80003fa6:	30 0b       	mov	r11,0
80003fa8:	f4 09 0a 4a 	lsr	r10,r10,r9
80003fac:	ed ba 00 00 	bld	r10,0x0
80003fb0:	c0 92       	brcc	80003fc2 <__avr32_s32_to_f64+0x9a>
80003fb2:	1c 7e       	tst	lr,lr
80003fb4:	c0 41       	brne	80003fbc <__avr32_s32_to_f64+0x94>
80003fb6:	ed ba 00 01 	bld	r10,0x1
80003fba:	c0 42       	brcc	80003fc2 <__avr32_s32_to_f64+0x9a>
80003fbc:	2f fa       	sub	r10,-1
80003fbe:	f7 bb 02 ff 	subhs	r11,-1
80003fc2:	5c fc       	rol	r12
80003fc4:	5d 0b       	ror	r11
80003fc6:	5d 0a       	ror	r10
80003fc8:	d8 02       	popm	pc
80003fca:	e0 68 03 ff 	mov	r8,1023
80003fce:	ed ba 00 0b 	bld	r10,0xb
80003fd2:	f7 b8 00 ff 	subeq	r8,-1
80003fd6:	10 0a       	add	r10,r8
80003fd8:	5c 0b       	acr	r11
80003fda:	f7 b9 03 fe 	sublo	r9,-2
80003fde:	e0 49 07 ff 	cp.w	r9,2047
80003fe2:	c0 55       	brlt	80003fec <__avr32_s32_to_f64+0xc4>
80003fe4:	30 0a       	mov	r10,0
80003fe6:	fc 1b ff e0 	movh	r11,0xffe0
80003fea:	c0 c8       	rjmp	80004002 <__floatsidf_return_op1>
80003fec:	ed bb 00 1f 	bld	r11,0x1f
80003ff0:	f7 b9 01 01 	subne	r9,1
80003ff4:	ab 9a       	lsr	r10,0xb
80003ff6:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003ffa:	a1 7b       	lsl	r11,0x1
80003ffc:	ab 9b       	lsr	r11,0xb
80003ffe:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80004002 <__floatsidf_return_op1>:
80004002:	a1 7c       	lsl	r12,0x1
80004004:	5d 0b       	ror	r11
80004006:	d8 02       	popm	pc

80004008 <__avr32_f32_to_f64>:
80004008:	f8 0b 15 01 	lsl	r11,r12,0x1
8000400c:	f9 ba 00 00 	moveq	r10,0
80004010:	5e 0b       	reteq	r11
80004012:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80004016:	e0 49 00 ff 	cp.w	r9,255
8000401a:	c1 e0       	breq	80004056 <__extendsfdf_return_op1+0x6>
8000401c:	a7 7b       	lsl	r11,0x7
8000401e:	30 0a       	mov	r10,0
80004020:	58 09       	cp.w	r9,0
80004022:	f7 b9 00 ff 	subeq	r9,-1
80004026:	5f 18       	srne	r8
80004028:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
8000402c:	fe 39 fc 80 	sub	r9,-896
80004030:	f6 08 12 00 	clz	r8,r11
80004034:	10 19       	sub	r9,r8
80004036:	f6 08 09 4b 	lsl	r11,r11,r8
8000403a:	ed bb 00 1f 	bld	r11,0x1f
8000403e:	f7 b9 01 01 	subne	r9,1
80004042:	ab 9a       	lsr	r10,0xb
80004044:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80004048:	a1 7b       	lsl	r11,0x1
8000404a:	ab 9b       	lsr	r11,0xb
8000404c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80004050 <__extendsfdf_return_op1>:
80004050:	a1 7c       	lsl	r12,0x1
80004052:	5d 0b       	ror	r11
80004054:	5e fb       	retal	r11
80004056:	fc 1a ff e0 	movh	r10,0xffe0
8000405a:	a9 6b       	lsl	r11,0x8
8000405c:	f9 bb 01 ff 	movne	r11,-1
80004060:	f4 0b 17 00 	moveq	r11,r10
80004064:	30 0a       	mov	r10,0
80004066:	cf 5b       	rjmp	80004050 <__extendsfdf_return_op1>

80004068 <__avr32_f64_to_f32>:
80004068:	f6 09 15 01 	lsl	r9,r11,0x1
8000406c:	b5 99       	lsr	r9,0x15
8000406e:	5e 0d       	reteq	0
80004070:	f6 08 15 0a 	lsl	r8,r11,0xa
80004074:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80004078:	ab 6a       	lsl	r10,0xa
8000407a:	5c 3a       	neg	r10
8000407c:	5c fc       	rol	r12
8000407e:	e0 49 07 ff 	cp.w	r9,2047
80004082:	c1 a0       	breq	800040b6 <__truncdfsf_return_op1+0x6>
80004084:	e0 29 03 80 	sub	r9,896
80004088:	bf bc       	sbr	r12,0x1f
8000408a:	58 09       	cp.w	r9,0
8000408c:	e0 8a 00 1a 	brle	800040c0 <__truncdfsf_return_op1+0x10>
80004090:	37 fa       	mov	r10,127
80004092:	ed bc 00 08 	bld	r12,0x8
80004096:	f7 ba 00 ff 	subeq	r10,-1
8000409a:	14 0c       	add	r12,r10
8000409c:	f7 b9 03 fe 	sublo	r9,-2
800040a0:	ed bc 00 1f 	bld	r12,0x1f
800040a4:	f7 b9 01 01 	subne	r9,1
800040a8:	f8 0c 16 07 	lsr	r12,r12,0x7
800040ac:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

800040b0 <__truncdfsf_return_op1>:
800040b0:	a1 7b       	lsl	r11,0x1
800040b2:	5d 0c       	ror	r12
800040b4:	5e fc       	retal	r12
800040b6:	bf dc       	cbr	r12,0x1f
800040b8:	5e 1e       	retne	-1
800040ba:	fc 1c 7f 80 	movh	r12,0x7f80
800040be:	5e fc       	retal	r12
800040c0:	f2 09 11 01 	rsub	r9,r9,1
800040c4:	59 99       	cp.w	r9,25
800040c6:	f9 bc 02 00 	movhs	r12,0
800040ca:	c1 32       	brcc	800040f0 <__truncdfsf_return_op1+0x40>
800040cc:	f2 0a 11 20 	rsub	r10,r9,32
800040d0:	f8 0a 09 4a 	lsl	r10,r12,r10
800040d4:	5f 1a       	srne	r10
800040d6:	f8 09 0a 4c 	lsr	r12,r12,r9
800040da:	14 4c       	or	r12,r10
800040dc:	37 fa       	mov	r10,127
800040de:	ed bc 00 08 	bld	r12,0x8
800040e2:	f7 ba 00 ff 	subeq	r10,-1
800040e6:	14 0c       	add	r12,r10
800040e8:	f8 0c 16 07 	lsr	r12,r12,0x7
800040ec:	a1 7b       	lsl	r11,0x1
800040ee:	5d 0c       	ror	r12
800040f0:	5e fc       	retal	r12

800040f2 <memcpy>:
800040f2:	58 8a       	cp.w	r10,8
800040f4:	c2 f5       	brlt	80004152 <memcpy+0x60>
800040f6:	f9 eb 10 09 	or	r9,r12,r11
800040fa:	e2 19 00 03 	andl	r9,0x3,COH
800040fe:	e0 81 00 97 	brne	8000422c <memcpy+0x13a>
80004102:	e0 4a 00 20 	cp.w	r10,32
80004106:	c3 b4       	brge	8000417c <memcpy+0x8a>
80004108:	f4 08 14 02 	asr	r8,r10,0x2
8000410c:	f0 09 11 08 	rsub	r9,r8,8
80004110:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004114:	76 69       	ld.w	r9,r11[0x18]
80004116:	99 69       	st.w	r12[0x18],r9
80004118:	76 59       	ld.w	r9,r11[0x14]
8000411a:	99 59       	st.w	r12[0x14],r9
8000411c:	76 49       	ld.w	r9,r11[0x10]
8000411e:	99 49       	st.w	r12[0x10],r9
80004120:	76 39       	ld.w	r9,r11[0xc]
80004122:	99 39       	st.w	r12[0xc],r9
80004124:	76 29       	ld.w	r9,r11[0x8]
80004126:	99 29       	st.w	r12[0x8],r9
80004128:	76 19       	ld.w	r9,r11[0x4]
8000412a:	99 19       	st.w	r12[0x4],r9
8000412c:	76 09       	ld.w	r9,r11[0x0]
8000412e:	99 09       	st.w	r12[0x0],r9
80004130:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004134:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004138:	e0 1a 00 03 	andl	r10,0x3
8000413c:	f4 0a 11 04 	rsub	r10,r10,4
80004140:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004144:	17 a9       	ld.ub	r9,r11[0x2]
80004146:	b0 a9       	st.b	r8[0x2],r9
80004148:	17 99       	ld.ub	r9,r11[0x1]
8000414a:	b0 99       	st.b	r8[0x1],r9
8000414c:	17 89       	ld.ub	r9,r11[0x0]
8000414e:	b0 89       	st.b	r8[0x0],r9
80004150:	5e fc       	retal	r12
80004152:	f4 0a 11 09 	rsub	r10,r10,9
80004156:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000415a:	17 f9       	ld.ub	r9,r11[0x7]
8000415c:	b8 f9       	st.b	r12[0x7],r9
8000415e:	17 e9       	ld.ub	r9,r11[0x6]
80004160:	b8 e9       	st.b	r12[0x6],r9
80004162:	17 d9       	ld.ub	r9,r11[0x5]
80004164:	b8 d9       	st.b	r12[0x5],r9
80004166:	17 c9       	ld.ub	r9,r11[0x4]
80004168:	b8 c9       	st.b	r12[0x4],r9
8000416a:	17 b9       	ld.ub	r9,r11[0x3]
8000416c:	b8 b9       	st.b	r12[0x3],r9
8000416e:	17 a9       	ld.ub	r9,r11[0x2]
80004170:	b8 a9       	st.b	r12[0x2],r9
80004172:	17 99       	ld.ub	r9,r11[0x1]
80004174:	b8 99       	st.b	r12[0x1],r9
80004176:	17 89       	ld.ub	r9,r11[0x0]
80004178:	b8 89       	st.b	r12[0x0],r9
8000417a:	5e fc       	retal	r12
8000417c:	eb cd 40 c0 	pushm	r6-r7,lr
80004180:	18 99       	mov	r9,r12
80004182:	22 0a       	sub	r10,32
80004184:	b7 07       	ld.d	r6,r11++
80004186:	b3 26       	st.d	r9++,r6
80004188:	b7 07       	ld.d	r6,r11++
8000418a:	b3 26       	st.d	r9++,r6
8000418c:	b7 07       	ld.d	r6,r11++
8000418e:	b3 26       	st.d	r9++,r6
80004190:	b7 07       	ld.d	r6,r11++
80004192:	b3 26       	st.d	r9++,r6
80004194:	22 0a       	sub	r10,32
80004196:	cf 74       	brge	80004184 <memcpy+0x92>
80004198:	2f 0a       	sub	r10,-16
8000419a:	c0 65       	brlt	800041a6 <memcpy+0xb4>
8000419c:	b7 07       	ld.d	r6,r11++
8000419e:	b3 26       	st.d	r9++,r6
800041a0:	b7 07       	ld.d	r6,r11++
800041a2:	b3 26       	st.d	r9++,r6
800041a4:	21 0a       	sub	r10,16
800041a6:	5c 3a       	neg	r10
800041a8:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800041ac:	d7 03       	nop
800041ae:	d7 03       	nop
800041b0:	f7 36 00 0e 	ld.ub	r6,r11[14]
800041b4:	f3 66 00 0e 	st.b	r9[14],r6
800041b8:	f7 36 00 0d 	ld.ub	r6,r11[13]
800041bc:	f3 66 00 0d 	st.b	r9[13],r6
800041c0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800041c4:	f3 66 00 0c 	st.b	r9[12],r6
800041c8:	f7 36 00 0b 	ld.ub	r6,r11[11]
800041cc:	f3 66 00 0b 	st.b	r9[11],r6
800041d0:	f7 36 00 0a 	ld.ub	r6,r11[10]
800041d4:	f3 66 00 0a 	st.b	r9[10],r6
800041d8:	f7 36 00 09 	ld.ub	r6,r11[9]
800041dc:	f3 66 00 09 	st.b	r9[9],r6
800041e0:	f7 36 00 08 	ld.ub	r6,r11[8]
800041e4:	f3 66 00 08 	st.b	r9[8],r6
800041e8:	f7 36 00 07 	ld.ub	r6,r11[7]
800041ec:	f3 66 00 07 	st.b	r9[7],r6
800041f0:	f7 36 00 06 	ld.ub	r6,r11[6]
800041f4:	f3 66 00 06 	st.b	r9[6],r6
800041f8:	f7 36 00 05 	ld.ub	r6,r11[5]
800041fc:	f3 66 00 05 	st.b	r9[5],r6
80004200:	f7 36 00 04 	ld.ub	r6,r11[4]
80004204:	f3 66 00 04 	st.b	r9[4],r6
80004208:	f7 36 00 03 	ld.ub	r6,r11[3]
8000420c:	f3 66 00 03 	st.b	r9[3],r6
80004210:	f7 36 00 02 	ld.ub	r6,r11[2]
80004214:	f3 66 00 02 	st.b	r9[2],r6
80004218:	f7 36 00 01 	ld.ub	r6,r11[1]
8000421c:	f3 66 00 01 	st.b	r9[1],r6
80004220:	f7 36 00 00 	ld.ub	r6,r11[0]
80004224:	f3 66 00 00 	st.b	r9[0],r6
80004228:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000422c:	20 1a       	sub	r10,1
8000422e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004232:	f8 0a 0b 09 	st.b	r12[r10],r9
80004236:	cf b1       	brne	8000422c <memcpy+0x13a>
80004238:	5e fc       	retal	r12
8000423a:	d7 03       	nop

8000423c <sprintf>:
8000423c:	d4 01       	pushm	lr
8000423e:	21 7d       	sub	sp,92
80004240:	e0 68 ff ff 	mov	r8,65535
80004244:	ea 18 7f ff 	orh	r8,0x7fff
80004248:	50 58       	stdsp	sp[0x14],r8
8000424a:	50 28       	stdsp	sp[0x8],r8
8000424c:	e0 68 02 08 	mov	r8,520
80004250:	ba 68       	st.h	sp[0xc],r8
80004252:	3f f8       	mov	r8,-1
80004254:	ba 78       	st.h	sp[0xe],r8
80004256:	e0 68 01 34 	mov	r8,308
8000425a:	50 4c       	stdsp	sp[0x10],r12
8000425c:	16 9a       	mov	r10,r11
8000425e:	50 0c       	stdsp	sp[0x0],r12
80004260:	fa c9 ff a0 	sub	r9,sp,-96
80004264:	70 0c       	ld.w	r12,r8[0x0]
80004266:	1a 9b       	mov	r11,sp
80004268:	c9 ed       	rcall	800045a4 <_vfprintf_r>
8000426a:	30 09       	mov	r9,0
8000426c:	40 08       	lddsp	r8,sp[0x0]
8000426e:	b0 89       	st.b	r8[0x0],r9
80004270:	2e 9d       	sub	sp,-92
80004272:	d8 02       	popm	pc

80004274 <get_arg>:
80004274:	d4 31       	pushm	r0-r7,lr
80004276:	20 8d       	sub	sp,32
80004278:	fa c4 ff bc 	sub	r4,sp,-68
8000427c:	50 4b       	stdsp	sp[0x10],r11
8000427e:	68 2e       	ld.w	lr,r4[0x8]
80004280:	50 58       	stdsp	sp[0x14],r8
80004282:	12 96       	mov	r6,r9
80004284:	7c 0b       	ld.w	r11,lr[0x0]
80004286:	70 05       	ld.w	r5,r8[0x0]
80004288:	50 6e       	stdsp	sp[0x18],lr
8000428a:	58 0b       	cp.w	r11,0
8000428c:	f4 0b 17 00 	moveq	r11,r10
80004290:	68 03       	ld.w	r3,r4[0x0]
80004292:	68 11       	ld.w	r1,r4[0x4]
80004294:	40 49       	lddsp	r9,sp[0x10]
80004296:	30 08       	mov	r8,0
80004298:	c2 89       	rjmp	800044e8 <get_arg+0x274>
8000429a:	2f fb       	sub	r11,-1
8000429c:	32 5c       	mov	r12,37
8000429e:	17 8a       	ld.ub	r10,r11[0x0]
800042a0:	f8 0a 18 00 	cp.b	r10,r12
800042a4:	5f 1e       	srne	lr
800042a6:	f0 0a 18 00 	cp.b	r10,r8
800042aa:	5f 1c       	srne	r12
800042ac:	fd ec 00 0c 	and	r12,lr,r12
800042b0:	f0 0c 18 00 	cp.b	r12,r8
800042b4:	cf 31       	brne	8000429a <get_arg+0x26>
800042b6:	58 0a       	cp.w	r10,0
800042b8:	e0 80 01 25 	breq	80004502 <get_arg+0x28e>
800042bc:	30 0c       	mov	r12,0
800042be:	3f fa       	mov	r10,-1
800042c0:	18 90       	mov	r0,r12
800042c2:	50 3a       	stdsp	sp[0xc],r10
800042c4:	18 94       	mov	r4,r12
800042c6:	18 92       	mov	r2,r12
800042c8:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800042cc:	16 97       	mov	r7,r11
800042ce:	50 7c       	stdsp	sp[0x1c],r12
800042d0:	fe cc a2 2c 	sub	r12,pc,-24020
800042d4:	0f 3a       	ld.ub	r10,r7++
800042d6:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800042da:	40 7c       	lddsp	r12,sp[0x1c]
800042dc:	1c 0c       	add	r12,lr
800042de:	fe ce a3 02 	sub	lr,pc,-23806
800042e2:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800042e6:	20 1e       	sub	lr,1
800042e8:	50 0e       	stdsp	sp[0x0],lr
800042ea:	fe ce a3 7a 	sub	lr,pc,-23686
800042ee:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800042f2:	50 7c       	stdsp	sp[0x1c],r12
800042f4:	40 0c       	lddsp	r12,sp[0x0]
800042f6:	58 7c       	cp.w	r12,7
800042f8:	e0 8b 00 f1 	brhi	800044da <get_arg+0x266>
800042fc:	fe ce a5 2c 	sub	lr,pc,-23252
80004300:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80004304:	36 8b       	mov	r11,104
80004306:	f6 0a 18 00 	cp.b	r10,r11
8000430a:	e0 80 00 e8 	breq	800044da <get_arg+0x266>
8000430e:	37 1b       	mov	r11,113
80004310:	f6 0a 18 00 	cp.b	r10,r11
80004314:	c0 70       	breq	80004322 <get_arg+0xae>
80004316:	34 cb       	mov	r11,76
80004318:	f6 0a 18 00 	cp.b	r10,r11
8000431c:	c0 51       	brne	80004326 <get_arg+0xb2>
8000431e:	a3 b4       	sbr	r4,0x3
80004320:	cd d8       	rjmp	800044da <get_arg+0x266>
80004322:	a5 b4       	sbr	r4,0x5
80004324:	cd b8       	rjmp	800044da <get_arg+0x266>
80004326:	08 9a       	mov	r10,r4
80004328:	0e 9b       	mov	r11,r7
8000432a:	a5 aa       	sbr	r10,0x4
8000432c:	17 3c       	ld.ub	r12,r11++
8000432e:	a5 b4       	sbr	r4,0x5
80004330:	36 ce       	mov	lr,108
80004332:	fc 0c 18 00 	cp.b	r12,lr
80004336:	e0 80 00 d3 	breq	800044dc <get_arg+0x268>
8000433a:	14 94       	mov	r4,r10
8000433c:	cc f8       	rjmp	800044da <get_arg+0x266>
8000433e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80004342:	36 7c       	mov	r12,103
80004344:	f8 0a 18 00 	cp.b	r10,r12
80004348:	e0 8b 00 27 	brhi	80004396 <get_arg+0x122>
8000434c:	36 5b       	mov	r11,101
8000434e:	f6 0a 18 00 	cp.b	r10,r11
80004352:	c4 82       	brcc	800043e2 <get_arg+0x16e>
80004354:	34 fb       	mov	r11,79
80004356:	f6 0a 18 00 	cp.b	r10,r11
8000435a:	c4 80       	breq	800043ea <get_arg+0x176>
8000435c:	e0 8b 00 0c 	brhi	80004374 <get_arg+0x100>
80004360:	34 5b       	mov	r11,69
80004362:	f6 0a 18 00 	cp.b	r10,r11
80004366:	c3 e0       	breq	800043e2 <get_arg+0x16e>
80004368:	34 7b       	mov	r11,71
8000436a:	f6 0a 18 00 	cp.b	r10,r11
8000436e:	c3 a0       	breq	800043e2 <get_arg+0x16e>
80004370:	34 4b       	mov	r11,68
80004372:	c0 88       	rjmp	80004382 <get_arg+0x10e>
80004374:	35 8b       	mov	r11,88
80004376:	f6 0a 18 00 	cp.b	r10,r11
8000437a:	c2 c0       	breq	800043d2 <get_arg+0x15e>
8000437c:	e0 8b 00 07 	brhi	8000438a <get_arg+0x116>
80004380:	35 5b       	mov	r11,85
80004382:	f6 0a 18 00 	cp.b	r10,r11
80004386:	c3 51       	brne	800043f0 <get_arg+0x17c>
80004388:	c3 18       	rjmp	800043ea <get_arg+0x176>
8000438a:	36 3b       	mov	r11,99
8000438c:	f6 0a 18 00 	cp.b	r10,r11
80004390:	c2 f0       	breq	800043ee <get_arg+0x17a>
80004392:	36 4b       	mov	r11,100
80004394:	c0 e8       	rjmp	800043b0 <get_arg+0x13c>
80004396:	37 0b       	mov	r11,112
80004398:	f6 0a 18 00 	cp.b	r10,r11
8000439c:	c2 50       	breq	800043e6 <get_arg+0x172>
8000439e:	e0 8b 00 0d 	brhi	800043b8 <get_arg+0x144>
800043a2:	36 eb       	mov	r11,110
800043a4:	f6 0a 18 00 	cp.b	r10,r11
800043a8:	c1 f0       	breq	800043e6 <get_arg+0x172>
800043aa:	e0 8b 00 14 	brhi	800043d2 <get_arg+0x15e>
800043ae:	36 9b       	mov	r11,105
800043b0:	f6 0a 18 00 	cp.b	r10,r11
800043b4:	c1 e1       	brne	800043f0 <get_arg+0x17c>
800043b6:	c0 e8       	rjmp	800043d2 <get_arg+0x15e>
800043b8:	37 5b       	mov	r11,117
800043ba:	f6 0a 18 00 	cp.b	r10,r11
800043be:	c0 a0       	breq	800043d2 <get_arg+0x15e>
800043c0:	37 8b       	mov	r11,120
800043c2:	f6 0a 18 00 	cp.b	r10,r11
800043c6:	c0 60       	breq	800043d2 <get_arg+0x15e>
800043c8:	37 3b       	mov	r11,115
800043ca:	f6 0a 18 00 	cp.b	r10,r11
800043ce:	c1 11       	brne	800043f0 <get_arg+0x17c>
800043d0:	c0 b8       	rjmp	800043e6 <get_arg+0x172>
800043d2:	ed b4 00 04 	bld	r4,0x4
800043d6:	c0 a0       	breq	800043ea <get_arg+0x176>
800043d8:	ed b4 00 05 	bld	r4,0x5
800043dc:	c0 91       	brne	800043ee <get_arg+0x17a>
800043de:	30 20       	mov	r0,2
800043e0:	c0 88       	rjmp	800043f0 <get_arg+0x17c>
800043e2:	30 40       	mov	r0,4
800043e4:	c0 68       	rjmp	800043f0 <get_arg+0x17c>
800043e6:	30 30       	mov	r0,3
800043e8:	c0 48       	rjmp	800043f0 <get_arg+0x17c>
800043ea:	30 10       	mov	r0,1
800043ec:	c0 28       	rjmp	800043f0 <get_arg+0x17c>
800043ee:	30 00       	mov	r0,0
800043f0:	40 3b       	lddsp	r11,sp[0xc]
800043f2:	5b fb       	cp.w	r11,-1
800043f4:	c0 40       	breq	800043fc <get_arg+0x188>
800043f6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800043fa:	c7 08       	rjmp	800044da <get_arg+0x266>
800043fc:	58 60       	cp.w	r0,6
800043fe:	e0 8b 00 6e 	brhi	800044da <get_arg+0x266>
80004402:	6c 0a       	ld.w	r10,r6[0x0]
80004404:	ea cc ff ff 	sub	r12,r5,-1
80004408:	fe ce a6 18 	sub	lr,pc,-23016
8000440c:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80004410:	f4 cb ff f8 	sub	r11,r10,-8
80004414:	8d 0b       	st.w	r6[0x0],r11
80004416:	f4 ea 00 00 	ld.d	r10,r10[0]
8000441a:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000441e:	c0 f8       	rjmp	8000443c <get_arg+0x1c8>
80004420:	f4 cb ff fc 	sub	r11,r10,-4
80004424:	8d 0b       	st.w	r6[0x0],r11
80004426:	74 0a       	ld.w	r10,r10[0x0]
80004428:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000442c:	c0 88       	rjmp	8000443c <get_arg+0x1c8>
8000442e:	f4 cb ff f8 	sub	r11,r10,-8
80004432:	8d 0b       	st.w	r6[0x0],r11
80004434:	f4 ea 00 00 	ld.d	r10,r10[0]
80004438:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000443c:	0e 9b       	mov	r11,r7
8000443e:	18 95       	mov	r5,r12
80004440:	c4 e8       	rjmp	800044dc <get_arg+0x268>
80004442:	62 0a       	ld.w	r10,r1[0x0]
80004444:	5b fa       	cp.w	r10,-1
80004446:	c0 b1       	brne	8000445c <get_arg+0x1e8>
80004448:	50 19       	stdsp	sp[0x4],r9
8000444a:	50 28       	stdsp	sp[0x8],r8
8000444c:	e0 6a 00 80 	mov	r10,128
80004450:	30 0b       	mov	r11,0
80004452:	02 9c       	mov	r12,r1
80004454:	e0 a0 1d 78 	rcall	80007f44 <memset>
80004458:	40 28       	lddsp	r8,sp[0x8]
8000445a:	40 19       	lddsp	r9,sp[0x4]
8000445c:	e4 cc 00 01 	sub	r12,r2,1
80004460:	0e 9b       	mov	r11,r7
80004462:	50 3c       	stdsp	sp[0xc],r12
80004464:	f2 0c 0c 49 	max	r9,r9,r12
80004468:	c3 a8       	rjmp	800044dc <get_arg+0x268>
8000446a:	62 0a       	ld.w	r10,r1[0x0]
8000446c:	5b fa       	cp.w	r10,-1
8000446e:	c0 b1       	brne	80004484 <get_arg+0x210>
80004470:	50 19       	stdsp	sp[0x4],r9
80004472:	50 28       	stdsp	sp[0x8],r8
80004474:	e0 6a 00 80 	mov	r10,128
80004478:	30 0b       	mov	r11,0
8000447a:	02 9c       	mov	r12,r1
8000447c:	e0 a0 1d 64 	rcall	80007f44 <memset>
80004480:	40 28       	lddsp	r8,sp[0x8]
80004482:	40 19       	lddsp	r9,sp[0x4]
80004484:	20 12       	sub	r2,1
80004486:	30 0a       	mov	r10,0
80004488:	0e 9b       	mov	r11,r7
8000448a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000448e:	f2 02 0c 49 	max	r9,r9,r2
80004492:	c2 58       	rjmp	800044dc <get_arg+0x268>
80004494:	16 97       	mov	r7,r11
80004496:	6c 0a       	ld.w	r10,r6[0x0]
80004498:	f4 cb ff fc 	sub	r11,r10,-4
8000449c:	8d 0b       	st.w	r6[0x0],r11
8000449e:	74 0a       	ld.w	r10,r10[0x0]
800044a0:	0e 9b       	mov	r11,r7
800044a2:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800044a6:	2f f5       	sub	r5,-1
800044a8:	c1 a8       	rjmp	800044dc <get_arg+0x268>
800044aa:	f4 c2 00 30 	sub	r2,r10,48
800044ae:	c0 68       	rjmp	800044ba <get_arg+0x246>
800044b0:	e4 02 00 22 	add	r2,r2,r2<<0x2
800044b4:	2f f7       	sub	r7,-1
800044b6:	f4 02 00 12 	add	r2,r10,r2<<0x1
800044ba:	0f 8a       	ld.ub	r10,r7[0x0]
800044bc:	58 0a       	cp.w	r10,0
800044be:	c0 e0       	breq	800044da <get_arg+0x266>
800044c0:	23 0a       	sub	r10,48
800044c2:	58 9a       	cp.w	r10,9
800044c4:	fe 98 ff f6 	brls	800044b0 <get_arg+0x23c>
800044c8:	c0 98       	rjmp	800044da <get_arg+0x266>
800044ca:	2f f7       	sub	r7,-1
800044cc:	0f 8a       	ld.ub	r10,r7[0x0]
800044ce:	58 0a       	cp.w	r10,0
800044d0:	c0 50       	breq	800044da <get_arg+0x266>
800044d2:	23 0a       	sub	r10,48
800044d4:	58 9a       	cp.w	r10,9
800044d6:	fe 98 ff fa 	brls	800044ca <get_arg+0x256>
800044da:	0e 9b       	mov	r11,r7
800044dc:	40 7c       	lddsp	r12,sp[0x1c]
800044de:	30 ba       	mov	r10,11
800044e0:	f4 0c 18 00 	cp.b	r12,r10
800044e4:	fe 91 fe f2 	brne	800042c8 <get_arg+0x54>
800044e8:	40 42       	lddsp	r2,sp[0x10]
800044ea:	17 8c       	ld.ub	r12,r11[0x0]
800044ec:	0a 32       	cp.w	r2,r5
800044ee:	5f 4a       	srge	r10
800044f0:	f0 0c 18 00 	cp.b	r12,r8
800044f4:	5f 1c       	srne	r12
800044f6:	f9 ea 00 0a 	and	r10,r12,r10
800044fa:	f0 0a 18 00 	cp.b	r10,r8
800044fe:	fe 91 fe cf 	brne	8000429c <get_arg+0x28>
80004502:	30 08       	mov	r8,0
80004504:	40 4e       	lddsp	lr,sp[0x10]
80004506:	17 8a       	ld.ub	r10,r11[0x0]
80004508:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000450c:	f0 0a 18 00 	cp.b	r10,r8
80004510:	fc 09 17 10 	movne	r9,lr
80004514:	e6 05 00 38 	add	r8,r3,r5<<0x3
80004518:	06 9e       	mov	lr,r3
8000451a:	c2 a8       	rjmp	8000456e <get_arg+0x2fa>
8000451c:	62 0a       	ld.w	r10,r1[0x0]
8000451e:	58 3a       	cp.w	r10,3
80004520:	c1 e0       	breq	8000455c <get_arg+0x2e8>
80004522:	e0 89 00 07 	brgt	80004530 <get_arg+0x2bc>
80004526:	58 1a       	cp.w	r10,1
80004528:	c1 a0       	breq	8000455c <get_arg+0x2e8>
8000452a:	58 2a       	cp.w	r10,2
8000452c:	c1 81       	brne	8000455c <get_arg+0x2e8>
8000452e:	c0 58       	rjmp	80004538 <get_arg+0x2c4>
80004530:	58 5a       	cp.w	r10,5
80004532:	c0 c0       	breq	8000454a <get_arg+0x2d6>
80004534:	c0 b5       	brlt	8000454a <get_arg+0x2d6>
80004536:	c1 38       	rjmp	8000455c <get_arg+0x2e8>
80004538:	6c 0a       	ld.w	r10,r6[0x0]
8000453a:	f4 cc ff f8 	sub	r12,r10,-8
8000453e:	8d 0c       	st.w	r6[0x0],r12
80004540:	f4 e2 00 00 	ld.d	r2,r10[0]
80004544:	f0 e3 00 00 	st.d	r8[0],r2
80004548:	c1 08       	rjmp	80004568 <get_arg+0x2f4>
8000454a:	6c 0a       	ld.w	r10,r6[0x0]
8000454c:	f4 cc ff f8 	sub	r12,r10,-8
80004550:	8d 0c       	st.w	r6[0x0],r12
80004552:	f4 e2 00 00 	ld.d	r2,r10[0]
80004556:	f0 e3 00 00 	st.d	r8[0],r2
8000455a:	c0 78       	rjmp	80004568 <get_arg+0x2f4>
8000455c:	6c 0a       	ld.w	r10,r6[0x0]
8000455e:	f4 cc ff fc 	sub	r12,r10,-4
80004562:	8d 0c       	st.w	r6[0x0],r12
80004564:	74 0a       	ld.w	r10,r10[0x0]
80004566:	91 0a       	st.w	r8[0x0],r10
80004568:	2f f5       	sub	r5,-1
8000456a:	2f 88       	sub	r8,-8
8000456c:	2f c1       	sub	r1,-4
8000456e:	12 35       	cp.w	r5,r9
80004570:	fe 9a ff d6 	brle	8000451c <get_arg+0x2a8>
80004574:	1c 93       	mov	r3,lr
80004576:	40 52       	lddsp	r2,sp[0x14]
80004578:	40 6e       	lddsp	lr,sp[0x18]
8000457a:	85 05       	st.w	r2[0x0],r5
8000457c:	9d 0b       	st.w	lr[0x0],r11
8000457e:	40 4b       	lddsp	r11,sp[0x10]
80004580:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004584:	2f 8d       	sub	sp,-32
80004586:	d8 32       	popm	r0-r7,pc

80004588 <__sprint_r>:
80004588:	d4 21       	pushm	r4-r7,lr
8000458a:	14 97       	mov	r7,r10
8000458c:	74 28       	ld.w	r8,r10[0x8]
8000458e:	58 08       	cp.w	r8,0
80004590:	c0 41       	brne	80004598 <__sprint_r+0x10>
80004592:	95 18       	st.w	r10[0x4],r8
80004594:	10 9c       	mov	r12,r8
80004596:	d8 22       	popm	r4-r7,pc
80004598:	e0 a0 18 b4 	rcall	80007700 <__sfvwrite_r>
8000459c:	30 08       	mov	r8,0
8000459e:	8f 18       	st.w	r7[0x4],r8
800045a0:	8f 28       	st.w	r7[0x8],r8
800045a2:	d8 22       	popm	r4-r7,pc

800045a4 <_vfprintf_r>:
800045a4:	d4 31       	pushm	r0-r7,lr
800045a6:	fa cd 06 bc 	sub	sp,sp,1724
800045aa:	51 09       	stdsp	sp[0x40],r9
800045ac:	16 91       	mov	r1,r11
800045ae:	14 97       	mov	r7,r10
800045b0:	18 95       	mov	r5,r12
800045b2:	e0 a0 1a 1d 	rcall	800079ec <_localeconv_r>
800045b6:	78 0c       	ld.w	r12,r12[0x0]
800045b8:	50 cc       	stdsp	sp[0x30],r12
800045ba:	58 05       	cp.w	r5,0
800045bc:	c0 70       	breq	800045ca <_vfprintf_r+0x26>
800045be:	6a 68       	ld.w	r8,r5[0x18]
800045c0:	58 08       	cp.w	r8,0
800045c2:	c0 41       	brne	800045ca <_vfprintf_r+0x26>
800045c4:	0a 9c       	mov	r12,r5
800045c6:	e0 a0 17 3d 	rcall	80007440 <__sinit>
800045ca:	fe c8 a4 16 	sub	r8,pc,-23530
800045ce:	10 31       	cp.w	r1,r8
800045d0:	c0 31       	brne	800045d6 <_vfprintf_r+0x32>
800045d2:	6a 01       	ld.w	r1,r5[0x0]
800045d4:	c0 c8       	rjmp	800045ec <_vfprintf_r+0x48>
800045d6:	fe c8 a4 02 	sub	r8,pc,-23550
800045da:	10 31       	cp.w	r1,r8
800045dc:	c0 31       	brne	800045e2 <_vfprintf_r+0x3e>
800045de:	6a 11       	ld.w	r1,r5[0x4]
800045e0:	c0 68       	rjmp	800045ec <_vfprintf_r+0x48>
800045e2:	fe c8 a3 ee 	sub	r8,pc,-23570
800045e6:	10 31       	cp.w	r1,r8
800045e8:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800045ec:	82 68       	ld.sh	r8,r1[0xc]
800045ee:	ed b8 00 03 	bld	r8,0x3
800045f2:	c0 41       	brne	800045fa <_vfprintf_r+0x56>
800045f4:	62 48       	ld.w	r8,r1[0x10]
800045f6:	58 08       	cp.w	r8,0
800045f8:	c0 71       	brne	80004606 <_vfprintf_r+0x62>
800045fa:	02 9b       	mov	r11,r1
800045fc:	0a 9c       	mov	r12,r5
800045fe:	e0 a0 0f 5d 	rcall	800064b8 <__swsetup_r>
80004602:	e0 81 0f 54 	brne	800064aa <_vfprintf_r+0x1f06>
80004606:	82 68       	ld.sh	r8,r1[0xc]
80004608:	10 99       	mov	r9,r8
8000460a:	e2 19 00 1a 	andl	r9,0x1a,COH
8000460e:	58 a9       	cp.w	r9,10
80004610:	c3 c1       	brne	80004688 <_vfprintf_r+0xe4>
80004612:	82 79       	ld.sh	r9,r1[0xe]
80004614:	30 0a       	mov	r10,0
80004616:	f4 09 19 00 	cp.h	r9,r10
8000461a:	c3 75       	brlt	80004688 <_vfprintf_r+0xe4>
8000461c:	a1 d8       	cbr	r8,0x1
8000461e:	fb 58 05 d0 	st.h	sp[1488],r8
80004622:	62 88       	ld.w	r8,r1[0x20]
80004624:	fb 48 05 e4 	st.w	sp[1508],r8
80004628:	62 a8       	ld.w	r8,r1[0x28]
8000462a:	fb 48 05 ec 	st.w	sp[1516],r8
8000462e:	fa c8 ff bc 	sub	r8,sp,-68
80004632:	fb 48 05 d4 	st.w	sp[1492],r8
80004636:	fb 48 05 c4 	st.w	sp[1476],r8
8000463a:	e0 68 04 00 	mov	r8,1024
8000463e:	fb 48 05 d8 	st.w	sp[1496],r8
80004642:	fb 48 05 cc 	st.w	sp[1484],r8
80004646:	30 08       	mov	r8,0
80004648:	fb 59 05 d2 	st.h	sp[1490],r9
8000464c:	0e 9a       	mov	r10,r7
8000464e:	41 09       	lddsp	r9,sp[0x40]
80004650:	fa c7 fa 3c 	sub	r7,sp,-1476
80004654:	fb 48 05 dc 	st.w	sp[1500],r8
80004658:	0a 9c       	mov	r12,r5
8000465a:	0e 9b       	mov	r11,r7
8000465c:	ca 4f       	rcall	800045a4 <_vfprintf_r>
8000465e:	50 bc       	stdsp	sp[0x2c],r12
80004660:	c0 95       	brlt	80004672 <_vfprintf_r+0xce>
80004662:	0e 9b       	mov	r11,r7
80004664:	0a 9c       	mov	r12,r5
80004666:	e0 a0 16 15 	rcall	80007290 <_fflush_r>
8000466a:	40 be       	lddsp	lr,sp[0x2c]
8000466c:	f9 be 01 ff 	movne	lr,-1
80004670:	50 be       	stdsp	sp[0x2c],lr
80004672:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004676:	ed b8 00 06 	bld	r8,0x6
8000467a:	e0 81 0f 1a 	brne	800064ae <_vfprintf_r+0x1f0a>
8000467e:	82 68       	ld.sh	r8,r1[0xc]
80004680:	a7 a8       	sbr	r8,0x6
80004682:	a2 68       	st.h	r1[0xc],r8
80004684:	e0 8f 0f 15 	bral	800064ae <_vfprintf_r+0x1f0a>
80004688:	30 08       	mov	r8,0
8000468a:	fb 48 06 b4 	st.w	sp[1716],r8
8000468e:	fb 48 06 90 	st.w	sp[1680],r8
80004692:	fb 48 06 8c 	st.w	sp[1676],r8
80004696:	fb 48 06 b0 	st.w	sp[1712],r8
8000469a:	30 08       	mov	r8,0
8000469c:	30 09       	mov	r9,0
8000469e:	50 a7       	stdsp	sp[0x28],r7
800046a0:	50 78       	stdsp	sp[0x1c],r8
800046a2:	fa c3 f9 e0 	sub	r3,sp,-1568
800046a6:	3f f8       	mov	r8,-1
800046a8:	50 59       	stdsp	sp[0x14],r9
800046aa:	fb 43 06 88 	st.w	sp[1672],r3
800046ae:	fb 48 05 44 	st.w	sp[1348],r8
800046b2:	12 9c       	mov	r12,r9
800046b4:	50 69       	stdsp	sp[0x18],r9
800046b6:	50 d9       	stdsp	sp[0x34],r9
800046b8:	50 e9       	stdsp	sp[0x38],r9
800046ba:	50 b9       	stdsp	sp[0x2c],r9
800046bc:	12 97       	mov	r7,r9
800046be:	0a 94       	mov	r4,r5
800046c0:	40 a2       	lddsp	r2,sp[0x28]
800046c2:	32 5a       	mov	r10,37
800046c4:	30 08       	mov	r8,0
800046c6:	c0 28       	rjmp	800046ca <_vfprintf_r+0x126>
800046c8:	2f f2       	sub	r2,-1
800046ca:	05 89       	ld.ub	r9,r2[0x0]
800046cc:	f0 09 18 00 	cp.b	r9,r8
800046d0:	5f 1b       	srne	r11
800046d2:	f4 09 18 00 	cp.b	r9,r10
800046d6:	5f 19       	srne	r9
800046d8:	f3 eb 00 0b 	and	r11,r9,r11
800046dc:	f0 0b 18 00 	cp.b	r11,r8
800046e0:	cf 41       	brne	800046c8 <_vfprintf_r+0x124>
800046e2:	40 ab       	lddsp	r11,sp[0x28]
800046e4:	e4 0b 01 06 	sub	r6,r2,r11
800046e8:	c1 e0       	breq	80004724 <_vfprintf_r+0x180>
800046ea:	fa f8 06 90 	ld.w	r8,sp[1680]
800046ee:	0c 08       	add	r8,r6
800046f0:	87 0b       	st.w	r3[0x0],r11
800046f2:	fb 48 06 90 	st.w	sp[1680],r8
800046f6:	87 16       	st.w	r3[0x4],r6
800046f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800046fc:	2f f8       	sub	r8,-1
800046fe:	fb 48 06 8c 	st.w	sp[1676],r8
80004702:	58 78       	cp.w	r8,7
80004704:	e0 89 00 04 	brgt	8000470c <_vfprintf_r+0x168>
80004708:	2f 83       	sub	r3,-8
8000470a:	c0 a8       	rjmp	8000471e <_vfprintf_r+0x17a>
8000470c:	fa ca f9 78 	sub	r10,sp,-1672
80004710:	02 9b       	mov	r11,r1
80004712:	08 9c       	mov	r12,r4
80004714:	c3 af       	rcall	80004588 <__sprint_r>
80004716:	e0 81 0e c6 	brne	800064a2 <_vfprintf_r+0x1efe>
8000471a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000471e:	40 ba       	lddsp	r10,sp[0x2c]
80004720:	0c 0a       	add	r10,r6
80004722:	50 ba       	stdsp	sp[0x2c],r10
80004724:	05 89       	ld.ub	r9,r2[0x0]
80004726:	30 08       	mov	r8,0
80004728:	f0 09 18 00 	cp.b	r9,r8
8000472c:	e0 80 0e aa 	breq	80006480 <_vfprintf_r+0x1edc>
80004730:	30 09       	mov	r9,0
80004732:	fb 68 06 bb 	st.b	sp[1723],r8
80004736:	0e 96       	mov	r6,r7
80004738:	e4 c8 ff ff 	sub	r8,r2,-1
8000473c:	3f fe       	mov	lr,-1
8000473e:	50 93       	stdsp	sp[0x24],r3
80004740:	50 41       	stdsp	sp[0x10],r1
80004742:	0e 93       	mov	r3,r7
80004744:	04 91       	mov	r1,r2
80004746:	50 89       	stdsp	sp[0x20],r9
80004748:	50 a8       	stdsp	sp[0x28],r8
8000474a:	50 2e       	stdsp	sp[0x8],lr
8000474c:	50 39       	stdsp	sp[0xc],r9
8000474e:	12 95       	mov	r5,r9
80004750:	12 90       	mov	r0,r9
80004752:	10 97       	mov	r7,r8
80004754:	08 92       	mov	r2,r4
80004756:	c0 78       	rjmp	80004764 <_vfprintf_r+0x1c0>
80004758:	3f fc       	mov	r12,-1
8000475a:	08 97       	mov	r7,r4
8000475c:	50 2c       	stdsp	sp[0x8],r12
8000475e:	c0 38       	rjmp	80004764 <_vfprintf_r+0x1c0>
80004760:	30 0b       	mov	r11,0
80004762:	50 3b       	stdsp	sp[0xc],r11
80004764:	0f 38       	ld.ub	r8,r7++
80004766:	c0 28       	rjmp	8000476a <_vfprintf_r+0x1c6>
80004768:	12 90       	mov	r0,r9
8000476a:	f0 c9 00 20 	sub	r9,r8,32
8000476e:	e0 49 00 58 	cp.w	r9,88
80004772:	e0 8b 0a 30 	brhi	80005bd2 <_vfprintf_r+0x162e>
80004776:	fe ca a9 6a 	sub	r10,pc,-22166
8000477a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000477e:	50 a7       	stdsp	sp[0x28],r7
80004780:	50 80       	stdsp	sp[0x20],r0
80004782:	0c 97       	mov	r7,r6
80004784:	04 94       	mov	r4,r2
80004786:	06 96       	mov	r6,r3
80004788:	02 92       	mov	r2,r1
8000478a:	fe c9 a7 42 	sub	r9,pc,-22718
8000478e:	40 93       	lddsp	r3,sp[0x24]
80004790:	10 90       	mov	r0,r8
80004792:	40 41       	lddsp	r1,sp[0x10]
80004794:	50 d9       	stdsp	sp[0x34],r9
80004796:	e0 8f 08 8e 	bral	800058b2 <_vfprintf_r+0x130e>
8000479a:	30 08       	mov	r8,0
8000479c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800047a0:	f0 09 18 00 	cp.b	r9,r8
800047a4:	ce 01       	brne	80004764 <_vfprintf_r+0x1c0>
800047a6:	32 08       	mov	r8,32
800047a8:	c6 e8       	rjmp	80004884 <_vfprintf_r+0x2e0>
800047aa:	a1 a5       	sbr	r5,0x0
800047ac:	cd cb       	rjmp	80004764 <_vfprintf_r+0x1c0>
800047ae:	0f 89       	ld.ub	r9,r7[0x0]
800047b0:	f2 c8 00 30 	sub	r8,r9,48
800047b4:	58 98       	cp.w	r8,9
800047b6:	e0 8b 00 1d 	brhi	800047f0 <_vfprintf_r+0x24c>
800047ba:	ee c8 ff ff 	sub	r8,r7,-1
800047be:	30 0b       	mov	r11,0
800047c0:	23 09       	sub	r9,48
800047c2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800047c6:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800047ca:	11 39       	ld.ub	r9,r8++
800047cc:	f2 ca 00 30 	sub	r10,r9,48
800047d0:	58 9a       	cp.w	r10,9
800047d2:	fe 98 ff f7 	brls	800047c0 <_vfprintf_r+0x21c>
800047d6:	e0 49 00 24 	cp.w	r9,36
800047da:	cc 31       	brne	80004760 <_vfprintf_r+0x1bc>
800047dc:	e0 4b 00 20 	cp.w	r11,32
800047e0:	e0 89 0e 60 	brgt	800064a0 <_vfprintf_r+0x1efc>
800047e4:	20 1b       	sub	r11,1
800047e6:	fa f9 06 b4 	ld.w	r9,sp[1716]
800047ea:	12 3b       	cp.w	r11,r9
800047ec:	c0 95       	brlt	800047fe <_vfprintf_r+0x25a>
800047ee:	c1 08       	rjmp	8000480e <_vfprintf_r+0x26a>
800047f0:	fa f9 06 b4 	ld.w	r9,sp[1716]
800047f4:	ec ca ff ff 	sub	r10,r6,-1
800047f8:	12 36       	cp.w	r6,r9
800047fa:	c1 f5       	brlt	80004838 <_vfprintf_r+0x294>
800047fc:	c2 68       	rjmp	80004848 <_vfprintf_r+0x2a4>
800047fe:	fa ce f9 44 	sub	lr,sp,-1724
80004802:	10 97       	mov	r7,r8
80004804:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004808:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000480c:	c3 58       	rjmp	80004876 <_vfprintf_r+0x2d2>
8000480e:	10 97       	mov	r7,r8
80004810:	fa c8 f9 50 	sub	r8,sp,-1712
80004814:	1a d8       	st.w	--sp,r8
80004816:	fa c8 fa b8 	sub	r8,sp,-1352
8000481a:	1a d8       	st.w	--sp,r8
8000481c:	fa c8 fb b4 	sub	r8,sp,-1100
80004820:	02 9a       	mov	r10,r1
80004822:	1a d8       	st.w	--sp,r8
80004824:	04 9c       	mov	r12,r2
80004826:	fa c8 f9 40 	sub	r8,sp,-1728
8000482a:	fa c9 ff b4 	sub	r9,sp,-76
8000482e:	fe b0 fd 23 	rcall	80004274 <get_arg>
80004832:	2f dd       	sub	sp,-12
80004834:	78 00       	ld.w	r0,r12[0x0]
80004836:	c2 08       	rjmp	80004876 <_vfprintf_r+0x2d2>
80004838:	fa cc f9 44 	sub	r12,sp,-1724
8000483c:	14 96       	mov	r6,r10
8000483e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004842:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004846:	c1 88       	rjmp	80004876 <_vfprintf_r+0x2d2>
80004848:	41 08       	lddsp	r8,sp[0x40]
8000484a:	59 f9       	cp.w	r9,31
8000484c:	e0 89 00 11 	brgt	8000486e <_vfprintf_r+0x2ca>
80004850:	f0 cb ff fc 	sub	r11,r8,-4
80004854:	51 0b       	stdsp	sp[0x40],r11
80004856:	70 00       	ld.w	r0,r8[0x0]
80004858:	fa cb f9 44 	sub	r11,sp,-1724
8000485c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004860:	f1 40 fd 88 	st.w	r8[-632],r0
80004864:	2f f9       	sub	r9,-1
80004866:	14 96       	mov	r6,r10
80004868:	fb 49 06 b4 	st.w	sp[1716],r9
8000486c:	c0 58       	rjmp	80004876 <_vfprintf_r+0x2d2>
8000486e:	70 00       	ld.w	r0,r8[0x0]
80004870:	14 96       	mov	r6,r10
80004872:	2f c8       	sub	r8,-4
80004874:	51 08       	stdsp	sp[0x40],r8
80004876:	58 00       	cp.w	r0,0
80004878:	fe 94 ff 76 	brge	80004764 <_vfprintf_r+0x1c0>
8000487c:	5c 30       	neg	r0
8000487e:	a3 a5       	sbr	r5,0x2
80004880:	c7 2b       	rjmp	80004764 <_vfprintf_r+0x1c0>
80004882:	32 b8       	mov	r8,43
80004884:	fb 68 06 bb 	st.b	sp[1723],r8
80004888:	c6 eb       	rjmp	80004764 <_vfprintf_r+0x1c0>
8000488a:	0f 38       	ld.ub	r8,r7++
8000488c:	e0 48 00 2a 	cp.w	r8,42
80004890:	c0 30       	breq	80004896 <_vfprintf_r+0x2f2>
80004892:	30 09       	mov	r9,0
80004894:	c7 98       	rjmp	80004986 <_vfprintf_r+0x3e2>
80004896:	0f 88       	ld.ub	r8,r7[0x0]
80004898:	f0 c9 00 30 	sub	r9,r8,48
8000489c:	58 99       	cp.w	r9,9
8000489e:	e0 8b 00 1f 	brhi	800048dc <_vfprintf_r+0x338>
800048a2:	ee c4 ff ff 	sub	r4,r7,-1
800048a6:	30 0b       	mov	r11,0
800048a8:	23 08       	sub	r8,48
800048aa:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800048ae:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800048b2:	09 38       	ld.ub	r8,r4++
800048b4:	f0 c9 00 30 	sub	r9,r8,48
800048b8:	58 99       	cp.w	r9,9
800048ba:	fe 98 ff f7 	brls	800048a8 <_vfprintf_r+0x304>
800048be:	e0 48 00 24 	cp.w	r8,36
800048c2:	fe 91 ff 4f 	brne	80004760 <_vfprintf_r+0x1bc>
800048c6:	e0 4b 00 20 	cp.w	r11,32
800048ca:	e0 89 0d eb 	brgt	800064a0 <_vfprintf_r+0x1efc>
800048ce:	20 1b       	sub	r11,1
800048d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048d4:	10 3b       	cp.w	r11,r8
800048d6:	c0 a5       	brlt	800048ea <_vfprintf_r+0x346>
800048d8:	c1 18       	rjmp	800048fa <_vfprintf_r+0x356>
800048da:	d7 03       	nop
800048dc:	fa fa 06 b4 	ld.w	r10,sp[1716]
800048e0:	ec c9 ff ff 	sub	r9,r6,-1
800048e4:	14 36       	cp.w	r6,r10
800048e6:	c1 f5       	brlt	80004924 <_vfprintf_r+0x380>
800048e8:	c2 88       	rjmp	80004938 <_vfprintf_r+0x394>
800048ea:	fa ca f9 44 	sub	r10,sp,-1724
800048ee:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800048f2:	f6 fb fd 88 	ld.w	r11,r11[-632]
800048f6:	50 2b       	stdsp	sp[0x8],r11
800048f8:	c3 c8       	rjmp	80004970 <_vfprintf_r+0x3cc>
800048fa:	fa c8 f9 50 	sub	r8,sp,-1712
800048fe:	1a d8       	st.w	--sp,r8
80004900:	fa c8 fa b8 	sub	r8,sp,-1352
80004904:	1a d8       	st.w	--sp,r8
80004906:	fa c8 fb b4 	sub	r8,sp,-1100
8000490a:	02 9a       	mov	r10,r1
8000490c:	1a d8       	st.w	--sp,r8
8000490e:	04 9c       	mov	r12,r2
80004910:	fa c8 f9 40 	sub	r8,sp,-1728
80004914:	fa c9 ff b4 	sub	r9,sp,-76
80004918:	fe b0 fc ae 	rcall	80004274 <get_arg>
8000491c:	2f dd       	sub	sp,-12
8000491e:	78 0c       	ld.w	r12,r12[0x0]
80004920:	50 2c       	stdsp	sp[0x8],r12
80004922:	c2 78       	rjmp	80004970 <_vfprintf_r+0x3cc>
80004924:	12 96       	mov	r6,r9
80004926:	0e 94       	mov	r4,r7
80004928:	fa c9 f9 44 	sub	r9,sp,-1724
8000492c:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004930:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004934:	50 28       	stdsp	sp[0x8],r8
80004936:	c1 d8       	rjmp	80004970 <_vfprintf_r+0x3cc>
80004938:	41 08       	lddsp	r8,sp[0x40]
8000493a:	59 fa       	cp.w	r10,31
8000493c:	e0 89 00 14 	brgt	80004964 <_vfprintf_r+0x3c0>
80004940:	f0 cb ff fc 	sub	r11,r8,-4
80004944:	70 08       	ld.w	r8,r8[0x0]
80004946:	51 0b       	stdsp	sp[0x40],r11
80004948:	50 28       	stdsp	sp[0x8],r8
8000494a:	fa c6 f9 44 	sub	r6,sp,-1724
8000494e:	40 2e       	lddsp	lr,sp[0x8]
80004950:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004954:	f1 4e fd 88 	st.w	r8[-632],lr
80004958:	2f fa       	sub	r10,-1
8000495a:	0e 94       	mov	r4,r7
8000495c:	fb 4a 06 b4 	st.w	sp[1716],r10
80004960:	12 96       	mov	r6,r9
80004962:	c0 78       	rjmp	80004970 <_vfprintf_r+0x3cc>
80004964:	70 0c       	ld.w	r12,r8[0x0]
80004966:	0e 94       	mov	r4,r7
80004968:	2f c8       	sub	r8,-4
8000496a:	50 2c       	stdsp	sp[0x8],r12
8000496c:	12 96       	mov	r6,r9
8000496e:	51 08       	stdsp	sp[0x40],r8
80004970:	40 2b       	lddsp	r11,sp[0x8]
80004972:	58 0b       	cp.w	r11,0
80004974:	fe 95 fe f2 	brlt	80004758 <_vfprintf_r+0x1b4>
80004978:	08 97       	mov	r7,r4
8000497a:	cf 5a       	rjmp	80004764 <_vfprintf_r+0x1c0>
8000497c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004980:	0f 38       	ld.ub	r8,r7++
80004982:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004986:	f0 ca 00 30 	sub	r10,r8,48
8000498a:	58 9a       	cp.w	r10,9
8000498c:	fe 98 ff f8 	brls	8000497c <_vfprintf_r+0x3d8>
80004990:	3f fa       	mov	r10,-1
80004992:	f2 0a 0c 49 	max	r9,r9,r10
80004996:	50 29       	stdsp	sp[0x8],r9
80004998:	ce 9a       	rjmp	8000476a <_vfprintf_r+0x1c6>
8000499a:	a7 b5       	sbr	r5,0x7
8000499c:	ce 4a       	rjmp	80004764 <_vfprintf_r+0x1c0>
8000499e:	30 09       	mov	r9,0
800049a0:	23 08       	sub	r8,48
800049a2:	f2 09 00 29 	add	r9,r9,r9<<0x2
800049a6:	f0 09 00 19 	add	r9,r8,r9<<0x1
800049aa:	0f 38       	ld.ub	r8,r7++
800049ac:	f0 ca 00 30 	sub	r10,r8,48
800049b0:	58 9a       	cp.w	r10,9
800049b2:	fe 98 ff f7 	brls	800049a0 <_vfprintf_r+0x3fc>
800049b6:	e0 48 00 24 	cp.w	r8,36
800049ba:	fe 91 fe d7 	brne	80004768 <_vfprintf_r+0x1c4>
800049be:	e0 49 00 20 	cp.w	r9,32
800049c2:	e0 89 0d 6f 	brgt	800064a0 <_vfprintf_r+0x1efc>
800049c6:	f2 c3 00 01 	sub	r3,r9,1
800049ca:	30 19       	mov	r9,1
800049cc:	50 39       	stdsp	sp[0xc],r9
800049ce:	cc ba       	rjmp	80004764 <_vfprintf_r+0x1c0>
800049d0:	a3 b5       	sbr	r5,0x3
800049d2:	cc 9a       	rjmp	80004764 <_vfprintf_r+0x1c0>
800049d4:	a7 a5       	sbr	r5,0x6
800049d6:	cc 7a       	rjmp	80004764 <_vfprintf_r+0x1c0>
800049d8:	0a 98       	mov	r8,r5
800049da:	a5 b5       	sbr	r5,0x5
800049dc:	a5 a8       	sbr	r8,0x4
800049de:	0f 89       	ld.ub	r9,r7[0x0]
800049e0:	36 ce       	mov	lr,108
800049e2:	fc 09 18 00 	cp.b	r9,lr
800049e6:	f7 b7 00 ff 	subeq	r7,-1
800049ea:	f0 05 17 10 	movne	r5,r8
800049ee:	cb ba       	rjmp	80004764 <_vfprintf_r+0x1c0>
800049f0:	a5 b5       	sbr	r5,0x5
800049f2:	cb 9a       	rjmp	80004764 <_vfprintf_r+0x1c0>
800049f4:	50 a7       	stdsp	sp[0x28],r7
800049f6:	50 80       	stdsp	sp[0x20],r0
800049f8:	0c 97       	mov	r7,r6
800049fa:	10 90       	mov	r0,r8
800049fc:	06 96       	mov	r6,r3
800049fe:	04 94       	mov	r4,r2
80004a00:	40 93       	lddsp	r3,sp[0x24]
80004a02:	02 92       	mov	r2,r1
80004a04:	0e 99       	mov	r9,r7
80004a06:	40 41       	lddsp	r1,sp[0x10]
80004a08:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a0c:	40 3c       	lddsp	r12,sp[0xc]
80004a0e:	58 0c       	cp.w	r12,0
80004a10:	c1 d0       	breq	80004a4a <_vfprintf_r+0x4a6>
80004a12:	10 36       	cp.w	r6,r8
80004a14:	c0 64       	brge	80004a20 <_vfprintf_r+0x47c>
80004a16:	fa cb f9 44 	sub	r11,sp,-1724
80004a1a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a1e:	c1 d8       	rjmp	80004a58 <_vfprintf_r+0x4b4>
80004a20:	fa c8 f9 50 	sub	r8,sp,-1712
80004a24:	1a d8       	st.w	--sp,r8
80004a26:	fa c8 fa b8 	sub	r8,sp,-1352
80004a2a:	1a d8       	st.w	--sp,r8
80004a2c:	fa c8 fb b4 	sub	r8,sp,-1100
80004a30:	1a d8       	st.w	--sp,r8
80004a32:	fa c8 f9 40 	sub	r8,sp,-1728
80004a36:	fa c9 ff b4 	sub	r9,sp,-76
80004a3a:	04 9a       	mov	r10,r2
80004a3c:	0c 9b       	mov	r11,r6
80004a3e:	08 9c       	mov	r12,r4
80004a40:	fe b0 fc 1a 	rcall	80004274 <get_arg>
80004a44:	2f dd       	sub	sp,-12
80004a46:	19 b8       	ld.ub	r8,r12[0x3]
80004a48:	c2 28       	rjmp	80004a8c <_vfprintf_r+0x4e8>
80004a4a:	2f f7       	sub	r7,-1
80004a4c:	10 39       	cp.w	r9,r8
80004a4e:	c0 84       	brge	80004a5e <_vfprintf_r+0x4ba>
80004a50:	fa ca f9 44 	sub	r10,sp,-1724
80004a54:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a58:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004a5c:	c1 88       	rjmp	80004a8c <_vfprintf_r+0x4e8>
80004a5e:	41 09       	lddsp	r9,sp[0x40]
80004a60:	59 f8       	cp.w	r8,31
80004a62:	e0 89 00 12 	brgt	80004a86 <_vfprintf_r+0x4e2>
80004a66:	f2 ca ff fc 	sub	r10,r9,-4
80004a6a:	51 0a       	stdsp	sp[0x40],r10
80004a6c:	72 09       	ld.w	r9,r9[0x0]
80004a6e:	fa c6 f9 44 	sub	r6,sp,-1724
80004a72:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004a76:	2f f8       	sub	r8,-1
80004a78:	f5 49 fd 88 	st.w	r10[-632],r9
80004a7c:	fb 48 06 b4 	st.w	sp[1716],r8
80004a80:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004a84:	c0 48       	rjmp	80004a8c <_vfprintf_r+0x4e8>
80004a86:	13 b8       	ld.ub	r8,r9[0x3]
80004a88:	2f c9       	sub	r9,-4
80004a8a:	51 09       	stdsp	sp[0x40],r9
80004a8c:	fb 68 06 60 	st.b	sp[1632],r8
80004a90:	30 0e       	mov	lr,0
80004a92:	30 08       	mov	r8,0
80004a94:	30 12       	mov	r2,1
80004a96:	fb 68 06 bb 	st.b	sp[1723],r8
80004a9a:	50 2e       	stdsp	sp[0x8],lr
80004a9c:	e0 8f 08 ad 	bral	80005bf6 <_vfprintf_r+0x1652>
80004aa0:	50 a7       	stdsp	sp[0x28],r7
80004aa2:	50 80       	stdsp	sp[0x20],r0
80004aa4:	0c 97       	mov	r7,r6
80004aa6:	04 94       	mov	r4,r2
80004aa8:	06 96       	mov	r6,r3
80004aaa:	02 92       	mov	r2,r1
80004aac:	40 93       	lddsp	r3,sp[0x24]
80004aae:	10 90       	mov	r0,r8
80004ab0:	40 41       	lddsp	r1,sp[0x10]
80004ab2:	a5 a5       	sbr	r5,0x4
80004ab4:	c0 a8       	rjmp	80004ac8 <_vfprintf_r+0x524>
80004ab6:	50 a7       	stdsp	sp[0x28],r7
80004ab8:	50 80       	stdsp	sp[0x20],r0
80004aba:	0c 97       	mov	r7,r6
80004abc:	04 94       	mov	r4,r2
80004abe:	06 96       	mov	r6,r3
80004ac0:	02 92       	mov	r2,r1
80004ac2:	40 93       	lddsp	r3,sp[0x24]
80004ac4:	10 90       	mov	r0,r8
80004ac6:	40 41       	lddsp	r1,sp[0x10]
80004ac8:	ed b5 00 05 	bld	r5,0x5
80004acc:	c5 11       	brne	80004b6e <_vfprintf_r+0x5ca>
80004ace:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ad2:	40 3c       	lddsp	r12,sp[0xc]
80004ad4:	58 0c       	cp.w	r12,0
80004ad6:	c1 e0       	breq	80004b12 <_vfprintf_r+0x56e>
80004ad8:	10 36       	cp.w	r6,r8
80004ada:	c0 64       	brge	80004ae6 <_vfprintf_r+0x542>
80004adc:	fa cb f9 44 	sub	r11,sp,-1724
80004ae0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ae4:	c2 08       	rjmp	80004b24 <_vfprintf_r+0x580>
80004ae6:	fa c8 f9 50 	sub	r8,sp,-1712
80004aea:	1a d8       	st.w	--sp,r8
80004aec:	fa c8 fa b8 	sub	r8,sp,-1352
80004af0:	0c 9b       	mov	r11,r6
80004af2:	1a d8       	st.w	--sp,r8
80004af4:	fa c8 fb b4 	sub	r8,sp,-1100
80004af8:	1a d8       	st.w	--sp,r8
80004afa:	fa c9 ff b4 	sub	r9,sp,-76
80004afe:	fa c8 f9 40 	sub	r8,sp,-1728
80004b02:	04 9a       	mov	r10,r2
80004b04:	08 9c       	mov	r12,r4
80004b06:	fe b0 fb b7 	rcall	80004274 <get_arg>
80004b0a:	2f dd       	sub	sp,-12
80004b0c:	78 1b       	ld.w	r11,r12[0x4]
80004b0e:	78 09       	ld.w	r9,r12[0x0]
80004b10:	c2 b8       	rjmp	80004b66 <_vfprintf_r+0x5c2>
80004b12:	ee ca ff ff 	sub	r10,r7,-1
80004b16:	10 37       	cp.w	r7,r8
80004b18:	c0 b4       	brge	80004b2e <_vfprintf_r+0x58a>
80004b1a:	fa c9 f9 44 	sub	r9,sp,-1724
80004b1e:	14 97       	mov	r7,r10
80004b20:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b24:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004b28:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004b2c:	c1 d8       	rjmp	80004b66 <_vfprintf_r+0x5c2>
80004b2e:	41 09       	lddsp	r9,sp[0x40]
80004b30:	59 f8       	cp.w	r8,31
80004b32:	e0 89 00 14 	brgt	80004b5a <_vfprintf_r+0x5b6>
80004b36:	f2 cb ff f8 	sub	r11,r9,-8
80004b3a:	51 0b       	stdsp	sp[0x40],r11
80004b3c:	fa c6 f9 44 	sub	r6,sp,-1724
80004b40:	72 1b       	ld.w	r11,r9[0x4]
80004b42:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004b46:	72 09       	ld.w	r9,r9[0x0]
80004b48:	f9 4b fd 8c 	st.w	r12[-628],r11
80004b4c:	f9 49 fd 88 	st.w	r12[-632],r9
80004b50:	2f f8       	sub	r8,-1
80004b52:	14 97       	mov	r7,r10
80004b54:	fb 48 06 b4 	st.w	sp[1716],r8
80004b58:	c0 78       	rjmp	80004b66 <_vfprintf_r+0x5c2>
80004b5a:	f2 c8 ff f8 	sub	r8,r9,-8
80004b5e:	72 1b       	ld.w	r11,r9[0x4]
80004b60:	14 97       	mov	r7,r10
80004b62:	51 08       	stdsp	sp[0x40],r8
80004b64:	72 09       	ld.w	r9,r9[0x0]
80004b66:	16 98       	mov	r8,r11
80004b68:	fa e9 00 00 	st.d	sp[0],r8
80004b6c:	ca e8       	rjmp	80004cc8 <_vfprintf_r+0x724>
80004b6e:	ed b5 00 04 	bld	r5,0x4
80004b72:	c1 71       	brne	80004ba0 <_vfprintf_r+0x5fc>
80004b74:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b78:	40 3e       	lddsp	lr,sp[0xc]
80004b7a:	58 0e       	cp.w	lr,0
80004b7c:	c0 80       	breq	80004b8c <_vfprintf_r+0x5e8>
80004b7e:	10 36       	cp.w	r6,r8
80004b80:	c6 94       	brge	80004c52 <_vfprintf_r+0x6ae>
80004b82:	fa cc f9 44 	sub	r12,sp,-1724
80004b86:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b8a:	c8 28       	rjmp	80004c8e <_vfprintf_r+0x6ea>
80004b8c:	ee ca ff ff 	sub	r10,r7,-1
80004b90:	10 37       	cp.w	r7,r8
80004b92:	e0 84 00 81 	brge	80004c94 <_vfprintf_r+0x6f0>
80004b96:	fa cb f9 44 	sub	r11,sp,-1724
80004b9a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b9e:	c7 78       	rjmp	80004c8c <_vfprintf_r+0x6e8>
80004ba0:	ed b5 00 06 	bld	r5,0x6
80004ba4:	c4 b1       	brne	80004c3a <_vfprintf_r+0x696>
80004ba6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004baa:	40 3c       	lddsp	r12,sp[0xc]
80004bac:	58 0c       	cp.w	r12,0
80004bae:	c1 d0       	breq	80004be8 <_vfprintf_r+0x644>
80004bb0:	10 36       	cp.w	r6,r8
80004bb2:	c0 64       	brge	80004bbe <_vfprintf_r+0x61a>
80004bb4:	fa cb f9 44 	sub	r11,sp,-1724
80004bb8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bbc:	c1 f8       	rjmp	80004bfa <_vfprintf_r+0x656>
80004bbe:	fa c8 f9 50 	sub	r8,sp,-1712
80004bc2:	1a d8       	st.w	--sp,r8
80004bc4:	fa c8 fa b8 	sub	r8,sp,-1352
80004bc8:	1a d8       	st.w	--sp,r8
80004bca:	fa c8 fb b4 	sub	r8,sp,-1100
80004bce:	1a d8       	st.w	--sp,r8
80004bd0:	fa c8 f9 40 	sub	r8,sp,-1728
80004bd4:	fa c9 ff b4 	sub	r9,sp,-76
80004bd8:	04 9a       	mov	r10,r2
80004bda:	0c 9b       	mov	r11,r6
80004bdc:	08 9c       	mov	r12,r4
80004bde:	fe b0 fb 4b 	rcall	80004274 <get_arg>
80004be2:	2f dd       	sub	sp,-12
80004be4:	98 18       	ld.sh	r8,r12[0x2]
80004be6:	c2 68       	rjmp	80004c32 <_vfprintf_r+0x68e>
80004be8:	ee ca ff ff 	sub	r10,r7,-1
80004bec:	10 37       	cp.w	r7,r8
80004bee:	c0 94       	brge	80004c00 <_vfprintf_r+0x65c>
80004bf0:	fa c9 f9 44 	sub	r9,sp,-1724
80004bf4:	14 97       	mov	r7,r10
80004bf6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bfa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004bfe:	c1 a8       	rjmp	80004c32 <_vfprintf_r+0x68e>
80004c00:	41 09       	lddsp	r9,sp[0x40]
80004c02:	59 f8       	cp.w	r8,31
80004c04:	e0 89 00 13 	brgt	80004c2a <_vfprintf_r+0x686>
80004c08:	f2 cb ff fc 	sub	r11,r9,-4
80004c0c:	51 0b       	stdsp	sp[0x40],r11
80004c0e:	72 09       	ld.w	r9,r9[0x0]
80004c10:	fa c6 f9 44 	sub	r6,sp,-1724
80004c14:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004c18:	2f f8       	sub	r8,-1
80004c1a:	f7 49 fd 88 	st.w	r11[-632],r9
80004c1e:	fb 48 06 b4 	st.w	sp[1716],r8
80004c22:	14 97       	mov	r7,r10
80004c24:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004c28:	c0 58       	rjmp	80004c32 <_vfprintf_r+0x68e>
80004c2a:	92 18       	ld.sh	r8,r9[0x2]
80004c2c:	14 97       	mov	r7,r10
80004c2e:	2f c9       	sub	r9,-4
80004c30:	51 09       	stdsp	sp[0x40],r9
80004c32:	50 18       	stdsp	sp[0x4],r8
80004c34:	bf 58       	asr	r8,0x1f
80004c36:	50 08       	stdsp	sp[0x0],r8
80004c38:	c4 88       	rjmp	80004cc8 <_vfprintf_r+0x724>
80004c3a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c3e:	40 3c       	lddsp	r12,sp[0xc]
80004c40:	58 0c       	cp.w	r12,0
80004c42:	c1 d0       	breq	80004c7c <_vfprintf_r+0x6d8>
80004c44:	10 36       	cp.w	r6,r8
80004c46:	c0 64       	brge	80004c52 <_vfprintf_r+0x6ae>
80004c48:	fa cb f9 44 	sub	r11,sp,-1724
80004c4c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c50:	c1 f8       	rjmp	80004c8e <_vfprintf_r+0x6ea>
80004c52:	fa c8 f9 50 	sub	r8,sp,-1712
80004c56:	1a d8       	st.w	--sp,r8
80004c58:	fa c8 fa b8 	sub	r8,sp,-1352
80004c5c:	0c 9b       	mov	r11,r6
80004c5e:	1a d8       	st.w	--sp,r8
80004c60:	fa c8 fb b4 	sub	r8,sp,-1100
80004c64:	04 9a       	mov	r10,r2
80004c66:	1a d8       	st.w	--sp,r8
80004c68:	08 9c       	mov	r12,r4
80004c6a:	fa c8 f9 40 	sub	r8,sp,-1728
80004c6e:	fa c9 ff b4 	sub	r9,sp,-76
80004c72:	fe b0 fb 01 	rcall	80004274 <get_arg>
80004c76:	2f dd       	sub	sp,-12
80004c78:	78 0b       	ld.w	r11,r12[0x0]
80004c7a:	c2 48       	rjmp	80004cc2 <_vfprintf_r+0x71e>
80004c7c:	ee ca ff ff 	sub	r10,r7,-1
80004c80:	10 37       	cp.w	r7,r8
80004c82:	c0 94       	brge	80004c94 <_vfprintf_r+0x6f0>
80004c84:	fa c9 f9 44 	sub	r9,sp,-1724
80004c88:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c8c:	14 97       	mov	r7,r10
80004c8e:	ec fb fd 88 	ld.w	r11,r6[-632]
80004c92:	c1 88       	rjmp	80004cc2 <_vfprintf_r+0x71e>
80004c94:	41 09       	lddsp	r9,sp[0x40]
80004c96:	59 f8       	cp.w	r8,31
80004c98:	e0 89 00 11 	brgt	80004cba <_vfprintf_r+0x716>
80004c9c:	f2 cb ff fc 	sub	r11,r9,-4
80004ca0:	51 0b       	stdsp	sp[0x40],r11
80004ca2:	fa c6 f9 44 	sub	r6,sp,-1724
80004ca6:	72 0b       	ld.w	r11,r9[0x0]
80004ca8:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004cac:	f3 4b fd 88 	st.w	r9[-632],r11
80004cb0:	2f f8       	sub	r8,-1
80004cb2:	14 97       	mov	r7,r10
80004cb4:	fb 48 06 b4 	st.w	sp[1716],r8
80004cb8:	c0 58       	rjmp	80004cc2 <_vfprintf_r+0x71e>
80004cba:	72 0b       	ld.w	r11,r9[0x0]
80004cbc:	14 97       	mov	r7,r10
80004cbe:	2f c9       	sub	r9,-4
80004cc0:	51 09       	stdsp	sp[0x40],r9
80004cc2:	50 1b       	stdsp	sp[0x4],r11
80004cc4:	bf 5b       	asr	r11,0x1f
80004cc6:	50 0b       	stdsp	sp[0x0],r11
80004cc8:	fa ea 00 00 	ld.d	r10,sp[0]
80004ccc:	58 0a       	cp.w	r10,0
80004cce:	5c 2b       	cpc	r11
80004cd0:	c0 e4       	brge	80004cec <_vfprintf_r+0x748>
80004cd2:	30 08       	mov	r8,0
80004cd4:	fa ea 00 00 	ld.d	r10,sp[0]
80004cd8:	30 09       	mov	r9,0
80004cda:	f0 0a 01 0a 	sub	r10,r8,r10
80004cde:	f2 0b 01 4b 	sbc	r11,r9,r11
80004ce2:	32 d8       	mov	r8,45
80004ce4:	fa eb 00 00 	st.d	sp[0],r10
80004ce8:	fb 68 06 bb 	st.b	sp[1723],r8
80004cec:	30 18       	mov	r8,1
80004cee:	e0 8f 06 fa 	bral	80005ae2 <_vfprintf_r+0x153e>
80004cf2:	50 a7       	stdsp	sp[0x28],r7
80004cf4:	50 80       	stdsp	sp[0x20],r0
80004cf6:	0c 97       	mov	r7,r6
80004cf8:	04 94       	mov	r4,r2
80004cfa:	06 96       	mov	r6,r3
80004cfc:	02 92       	mov	r2,r1
80004cfe:	40 93       	lddsp	r3,sp[0x24]
80004d00:	10 90       	mov	r0,r8
80004d02:	40 41       	lddsp	r1,sp[0x10]
80004d04:	0e 99       	mov	r9,r7
80004d06:	ed b5 00 03 	bld	r5,0x3
80004d0a:	c4 11       	brne	80004d8c <_vfprintf_r+0x7e8>
80004d0c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d10:	40 3a       	lddsp	r10,sp[0xc]
80004d12:	58 0a       	cp.w	r10,0
80004d14:	c1 90       	breq	80004d46 <_vfprintf_r+0x7a2>
80004d16:	10 36       	cp.w	r6,r8
80004d18:	c6 45       	brlt	80004de0 <_vfprintf_r+0x83c>
80004d1a:	fa c8 f9 50 	sub	r8,sp,-1712
80004d1e:	1a d8       	st.w	--sp,r8
80004d20:	fa c8 fa b8 	sub	r8,sp,-1352
80004d24:	1a d8       	st.w	--sp,r8
80004d26:	fa c8 fb b4 	sub	r8,sp,-1100
80004d2a:	0c 9b       	mov	r11,r6
80004d2c:	1a d8       	st.w	--sp,r8
80004d2e:	04 9a       	mov	r10,r2
80004d30:	fa c8 f9 40 	sub	r8,sp,-1728
80004d34:	fa c9 ff b4 	sub	r9,sp,-76
80004d38:	08 9c       	mov	r12,r4
80004d3a:	fe b0 fa 9d 	rcall	80004274 <get_arg>
80004d3e:	2f dd       	sub	sp,-12
80004d40:	78 16       	ld.w	r6,r12[0x4]
80004d42:	50 76       	stdsp	sp[0x1c],r6
80004d44:	c4 88       	rjmp	80004dd4 <_vfprintf_r+0x830>
80004d46:	2f f7       	sub	r7,-1
80004d48:	10 39       	cp.w	r9,r8
80004d4a:	c0 c4       	brge	80004d62 <_vfprintf_r+0x7be>
80004d4c:	fa ce f9 44 	sub	lr,sp,-1724
80004d50:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004d54:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004d58:	50 7c       	stdsp	sp[0x1c],r12
80004d5a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004d5e:	50 56       	stdsp	sp[0x14],r6
80004d60:	c6 68       	rjmp	80004e2c <_vfprintf_r+0x888>
80004d62:	41 09       	lddsp	r9,sp[0x40]
80004d64:	59 f8       	cp.w	r8,31
80004d66:	e0 89 00 10 	brgt	80004d86 <_vfprintf_r+0x7e2>
80004d6a:	f2 ca ff f8 	sub	r10,r9,-8
80004d6e:	72 1b       	ld.w	r11,r9[0x4]
80004d70:	51 0a       	stdsp	sp[0x40],r10
80004d72:	72 09       	ld.w	r9,r9[0x0]
80004d74:	fa ca f9 44 	sub	r10,sp,-1724
80004d78:	50 7b       	stdsp	sp[0x1c],r11
80004d7a:	50 59       	stdsp	sp[0x14],r9
80004d7c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004d80:	40 5b       	lddsp	r11,sp[0x14]
80004d82:	40 7a       	lddsp	r10,sp[0x1c]
80004d84:	c4 78       	rjmp	80004e12 <_vfprintf_r+0x86e>
80004d86:	72 18       	ld.w	r8,r9[0x4]
80004d88:	50 78       	stdsp	sp[0x1c],r8
80004d8a:	c4 c8       	rjmp	80004e22 <_vfprintf_r+0x87e>
80004d8c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d90:	40 3e       	lddsp	lr,sp[0xc]
80004d92:	58 0e       	cp.w	lr,0
80004d94:	c2 30       	breq	80004dda <_vfprintf_r+0x836>
80004d96:	10 36       	cp.w	r6,r8
80004d98:	c0 94       	brge	80004daa <_vfprintf_r+0x806>
80004d9a:	fa cc f9 44 	sub	r12,sp,-1724
80004d9e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004da2:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004da6:	50 7b       	stdsp	sp[0x1c],r11
80004da8:	cd 9b       	rjmp	80004d5a <_vfprintf_r+0x7b6>
80004daa:	fa c8 f9 50 	sub	r8,sp,-1712
80004dae:	1a d8       	st.w	--sp,r8
80004db0:	fa c8 fa b8 	sub	r8,sp,-1352
80004db4:	04 9a       	mov	r10,r2
80004db6:	1a d8       	st.w	--sp,r8
80004db8:	fa c8 fb b4 	sub	r8,sp,-1100
80004dbc:	0c 9b       	mov	r11,r6
80004dbe:	1a d8       	st.w	--sp,r8
80004dc0:	08 9c       	mov	r12,r4
80004dc2:	fa c8 f9 40 	sub	r8,sp,-1728
80004dc6:	fa c9 ff b4 	sub	r9,sp,-76
80004dca:	fe b0 fa 55 	rcall	80004274 <get_arg>
80004dce:	2f dd       	sub	sp,-12
80004dd0:	78 1a       	ld.w	r10,r12[0x4]
80004dd2:	50 7a       	stdsp	sp[0x1c],r10
80004dd4:	78 0c       	ld.w	r12,r12[0x0]
80004dd6:	50 5c       	stdsp	sp[0x14],r12
80004dd8:	c2 a8       	rjmp	80004e2c <_vfprintf_r+0x888>
80004dda:	2f f7       	sub	r7,-1
80004ddc:	10 39       	cp.w	r9,r8
80004dde:	c0 94       	brge	80004df0 <_vfprintf_r+0x84c>
80004de0:	fa c9 f9 44 	sub	r9,sp,-1724
80004de4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004de8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004dec:	50 78       	stdsp	sp[0x1c],r8
80004dee:	cb 6b       	rjmp	80004d5a <_vfprintf_r+0x7b6>
80004df0:	41 09       	lddsp	r9,sp[0x40]
80004df2:	59 f8       	cp.w	r8,31
80004df4:	e0 89 00 15 	brgt	80004e1e <_vfprintf_r+0x87a>
80004df8:	f2 ca ff f8 	sub	r10,r9,-8
80004dfc:	72 16       	ld.w	r6,r9[0x4]
80004dfe:	72 09       	ld.w	r9,r9[0x0]
80004e00:	51 0a       	stdsp	sp[0x40],r10
80004e02:	50 59       	stdsp	sp[0x14],r9
80004e04:	fa ce f9 44 	sub	lr,sp,-1724
80004e08:	50 76       	stdsp	sp[0x1c],r6
80004e0a:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004e0e:	40 5b       	lddsp	r11,sp[0x14]
80004e10:	0c 9a       	mov	r10,r6
80004e12:	f2 eb fd 88 	st.d	r9[-632],r10
80004e16:	2f f8       	sub	r8,-1
80004e18:	fb 48 06 b4 	st.w	sp[1716],r8
80004e1c:	c0 88       	rjmp	80004e2c <_vfprintf_r+0x888>
80004e1e:	72 1c       	ld.w	r12,r9[0x4]
80004e20:	50 7c       	stdsp	sp[0x1c],r12
80004e22:	f2 c8 ff f8 	sub	r8,r9,-8
80004e26:	51 08       	stdsp	sp[0x40],r8
80004e28:	72 09       	ld.w	r9,r9[0x0]
80004e2a:	50 59       	stdsp	sp[0x14],r9
80004e2c:	40 5b       	lddsp	r11,sp[0x14]
80004e2e:	40 7a       	lddsp	r10,sp[0x1c]
80004e30:	e0 a0 1c de 	rcall	800087ec <__isinfd>
80004e34:	18 96       	mov	r6,r12
80004e36:	c1 70       	breq	80004e64 <_vfprintf_r+0x8c0>
80004e38:	30 08       	mov	r8,0
80004e3a:	30 09       	mov	r9,0
80004e3c:	40 5b       	lddsp	r11,sp[0x14]
80004e3e:	40 7a       	lddsp	r10,sp[0x1c]
80004e40:	e0 a0 20 6e 	rcall	80008f1c <__avr32_f64_cmp_lt>
80004e44:	c0 40       	breq	80004e4c <_vfprintf_r+0x8a8>
80004e46:	32 d8       	mov	r8,45
80004e48:	fb 68 06 bb 	st.b	sp[1723],r8
80004e4c:	fe c8 ad f0 	sub	r8,pc,-21008
80004e50:	fe c6 ad f0 	sub	r6,pc,-21008
80004e54:	a7 d5       	cbr	r5,0x7
80004e56:	e0 40 00 47 	cp.w	r0,71
80004e5a:	f0 06 17 a0 	movle	r6,r8
80004e5e:	30 32       	mov	r2,3
80004e60:	e0 8f 06 ce 	bral	80005bfc <_vfprintf_r+0x1658>
80004e64:	40 5b       	lddsp	r11,sp[0x14]
80004e66:	40 7a       	lddsp	r10,sp[0x1c]
80004e68:	e0 a0 1c d7 	rcall	80008816 <__isnand>
80004e6c:	c0 e0       	breq	80004e88 <_vfprintf_r+0x8e4>
80004e6e:	50 26       	stdsp	sp[0x8],r6
80004e70:	fe c8 ae 0c 	sub	r8,pc,-20980
80004e74:	fe c6 ae 0c 	sub	r6,pc,-20980
80004e78:	a7 d5       	cbr	r5,0x7
80004e7a:	e0 40 00 47 	cp.w	r0,71
80004e7e:	f0 06 17 a0 	movle	r6,r8
80004e82:	30 32       	mov	r2,3
80004e84:	e0 8f 06 c2 	bral	80005c08 <_vfprintf_r+0x1664>
80004e88:	40 2a       	lddsp	r10,sp[0x8]
80004e8a:	5b fa       	cp.w	r10,-1
80004e8c:	c0 41       	brne	80004e94 <_vfprintf_r+0x8f0>
80004e8e:	30 69       	mov	r9,6
80004e90:	50 29       	stdsp	sp[0x8],r9
80004e92:	c1 18       	rjmp	80004eb4 <_vfprintf_r+0x910>
80004e94:	e0 40 00 47 	cp.w	r0,71
80004e98:	5f 09       	sreq	r9
80004e9a:	e0 40 00 67 	cp.w	r0,103
80004e9e:	5f 08       	sreq	r8
80004ea0:	f3 e8 10 08 	or	r8,r9,r8
80004ea4:	f8 08 18 00 	cp.b	r8,r12
80004ea8:	c0 60       	breq	80004eb4 <_vfprintf_r+0x910>
80004eaa:	40 28       	lddsp	r8,sp[0x8]
80004eac:	58 08       	cp.w	r8,0
80004eae:	f9 b8 00 01 	moveq	r8,1
80004eb2:	50 28       	stdsp	sp[0x8],r8
80004eb4:	40 78       	lddsp	r8,sp[0x1c]
80004eb6:	40 59       	lddsp	r9,sp[0x14]
80004eb8:	fa e9 06 94 	st.d	sp[1684],r8
80004ebc:	a9 a5       	sbr	r5,0x8
80004ebe:	fa f8 06 94 	ld.w	r8,sp[1684]
80004ec2:	58 08       	cp.w	r8,0
80004ec4:	c0 65       	brlt	80004ed0 <_vfprintf_r+0x92c>
80004ec6:	40 5e       	lddsp	lr,sp[0x14]
80004ec8:	30 0c       	mov	r12,0
80004eca:	50 6e       	stdsp	sp[0x18],lr
80004ecc:	50 9c       	stdsp	sp[0x24],r12
80004ece:	c0 78       	rjmp	80004edc <_vfprintf_r+0x938>
80004ed0:	40 5b       	lddsp	r11,sp[0x14]
80004ed2:	32 da       	mov	r10,45
80004ed4:	ee 1b 80 00 	eorh	r11,0x8000
80004ed8:	50 9a       	stdsp	sp[0x24],r10
80004eda:	50 6b       	stdsp	sp[0x18],r11
80004edc:	e0 40 00 46 	cp.w	r0,70
80004ee0:	5f 09       	sreq	r9
80004ee2:	e0 40 00 66 	cp.w	r0,102
80004ee6:	5f 08       	sreq	r8
80004ee8:	f3 e8 10 08 	or	r8,r9,r8
80004eec:	50 48       	stdsp	sp[0x10],r8
80004eee:	c0 40       	breq	80004ef6 <_vfprintf_r+0x952>
80004ef0:	40 22       	lddsp	r2,sp[0x8]
80004ef2:	30 39       	mov	r9,3
80004ef4:	c1 08       	rjmp	80004f14 <_vfprintf_r+0x970>
80004ef6:	e0 40 00 45 	cp.w	r0,69
80004efa:	5f 09       	sreq	r9
80004efc:	e0 40 00 65 	cp.w	r0,101
80004f00:	5f 08       	sreq	r8
80004f02:	40 22       	lddsp	r2,sp[0x8]
80004f04:	10 49       	or	r9,r8
80004f06:	2f f2       	sub	r2,-1
80004f08:	40 46       	lddsp	r6,sp[0x10]
80004f0a:	ec 09 18 00 	cp.b	r9,r6
80004f0e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004f12:	30 29       	mov	r9,2
80004f14:	fa c8 f9 5c 	sub	r8,sp,-1700
80004f18:	1a d8       	st.w	--sp,r8
80004f1a:	fa c8 f9 54 	sub	r8,sp,-1708
80004f1e:	1a d8       	st.w	--sp,r8
80004f20:	fa c8 f9 4c 	sub	r8,sp,-1716
80004f24:	08 9c       	mov	r12,r4
80004f26:	1a d8       	st.w	--sp,r8
80004f28:	04 98       	mov	r8,r2
80004f2a:	40 9b       	lddsp	r11,sp[0x24]
80004f2c:	40 aa       	lddsp	r10,sp[0x28]
80004f2e:	e0 a0 0b c3 	rcall	800066b4 <_dtoa_r>
80004f32:	e0 40 00 47 	cp.w	r0,71
80004f36:	5f 19       	srne	r9
80004f38:	e0 40 00 67 	cp.w	r0,103
80004f3c:	5f 18       	srne	r8
80004f3e:	18 96       	mov	r6,r12
80004f40:	2f dd       	sub	sp,-12
80004f42:	f3 e8 00 08 	and	r8,r9,r8
80004f46:	c0 41       	brne	80004f4e <_vfprintf_r+0x9aa>
80004f48:	ed b5 00 00 	bld	r5,0x0
80004f4c:	c3 01       	brne	80004fac <_vfprintf_r+0xa08>
80004f4e:	ec 02 00 0e 	add	lr,r6,r2
80004f52:	50 3e       	stdsp	sp[0xc],lr
80004f54:	40 4c       	lddsp	r12,sp[0x10]
80004f56:	58 0c       	cp.w	r12,0
80004f58:	c1 50       	breq	80004f82 <_vfprintf_r+0x9de>
80004f5a:	0d 89       	ld.ub	r9,r6[0x0]
80004f5c:	33 08       	mov	r8,48
80004f5e:	f0 09 18 00 	cp.b	r9,r8
80004f62:	c0 b1       	brne	80004f78 <_vfprintf_r+0x9d4>
80004f64:	30 08       	mov	r8,0
80004f66:	30 09       	mov	r9,0
80004f68:	40 6b       	lddsp	r11,sp[0x18]
80004f6a:	40 7a       	lddsp	r10,sp[0x1c]
80004f6c:	e0 a0 1f 91 	rcall	80008e8e <__avr32_f64_cmp_eq>
80004f70:	fb b2 00 01 	rsubeq	r2,1
80004f74:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004f78:	40 3b       	lddsp	r11,sp[0xc]
80004f7a:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004f7e:	10 0b       	add	r11,r8
80004f80:	50 3b       	stdsp	sp[0xc],r11
80004f82:	40 6b       	lddsp	r11,sp[0x18]
80004f84:	30 08       	mov	r8,0
80004f86:	30 09       	mov	r9,0
80004f88:	40 7a       	lddsp	r10,sp[0x1c]
80004f8a:	e0 a0 1f 82 	rcall	80008e8e <__avr32_f64_cmp_eq>
80004f8e:	c0 90       	breq	80004fa0 <_vfprintf_r+0x9fc>
80004f90:	40 3a       	lddsp	r10,sp[0xc]
80004f92:	fb 4a 06 a4 	st.w	sp[1700],r10
80004f96:	c0 58       	rjmp	80004fa0 <_vfprintf_r+0x9fc>
80004f98:	10 c9       	st.b	r8++,r9
80004f9a:	fb 48 06 a4 	st.w	sp[1700],r8
80004f9e:	c0 28       	rjmp	80004fa2 <_vfprintf_r+0x9fe>
80004fa0:	33 09       	mov	r9,48
80004fa2:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004fa6:	40 3e       	lddsp	lr,sp[0xc]
80004fa8:	1c 38       	cp.w	r8,lr
80004faa:	cf 73       	brcs	80004f98 <_vfprintf_r+0x9f4>
80004fac:	e0 40 00 47 	cp.w	r0,71
80004fb0:	5f 09       	sreq	r9
80004fb2:	e0 40 00 67 	cp.w	r0,103
80004fb6:	5f 08       	sreq	r8
80004fb8:	f3 e8 10 08 	or	r8,r9,r8
80004fbc:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004fc0:	0c 19       	sub	r9,r6
80004fc2:	50 69       	stdsp	sp[0x18],r9
80004fc4:	58 08       	cp.w	r8,0
80004fc6:	c0 b0       	breq	80004fdc <_vfprintf_r+0xa38>
80004fc8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004fcc:	5b d8       	cp.w	r8,-3
80004fce:	c0 55       	brlt	80004fd8 <_vfprintf_r+0xa34>
80004fd0:	40 2c       	lddsp	r12,sp[0x8]
80004fd2:	18 38       	cp.w	r8,r12
80004fd4:	e0 8a 00 6a 	brle	800050a8 <_vfprintf_r+0xb04>
80004fd8:	20 20       	sub	r0,2
80004fda:	c0 58       	rjmp	80004fe4 <_vfprintf_r+0xa40>
80004fdc:	e0 40 00 65 	cp.w	r0,101
80004fe0:	e0 89 00 46 	brgt	8000506c <_vfprintf_r+0xac8>
80004fe4:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004fe8:	fb 60 06 9c 	st.b	sp[1692],r0
80004fec:	20 1b       	sub	r11,1
80004fee:	fb 4b 06 ac 	st.w	sp[1708],r11
80004ff2:	c0 47       	brpl	80004ffa <_vfprintf_r+0xa56>
80004ff4:	5c 3b       	neg	r11
80004ff6:	32 d8       	mov	r8,45
80004ff8:	c0 28       	rjmp	80004ffc <_vfprintf_r+0xa58>
80004ffa:	32 b8       	mov	r8,43
80004ffc:	fb 68 06 9d 	st.b	sp[1693],r8
80005000:	58 9b       	cp.w	r11,9
80005002:	e0 8a 00 1d 	brle	8000503c <_vfprintf_r+0xa98>
80005006:	fa c9 fa 35 	sub	r9,sp,-1483
8000500a:	30 aa       	mov	r10,10
8000500c:	12 98       	mov	r8,r9
8000500e:	0e 9c       	mov	r12,r7
80005010:	0c 92       	mov	r2,r6
80005012:	f6 0a 0c 06 	divs	r6,r11,r10
80005016:	0e 9b       	mov	r11,r7
80005018:	2d 0b       	sub	r11,-48
8000501a:	10 fb       	st.b	--r8,r11
8000501c:	0c 9b       	mov	r11,r6
8000501e:	58 96       	cp.w	r6,9
80005020:	fe 99 ff f9 	brgt	80005012 <_vfprintf_r+0xa6e>
80005024:	2d 0b       	sub	r11,-48
80005026:	18 97       	mov	r7,r12
80005028:	04 96       	mov	r6,r2
8000502a:	10 fb       	st.b	--r8,r11
8000502c:	fa ca f9 62 	sub	r10,sp,-1694
80005030:	c0 38       	rjmp	80005036 <_vfprintf_r+0xa92>
80005032:	11 3b       	ld.ub	r11,r8++
80005034:	14 cb       	st.b	r10++,r11
80005036:	12 38       	cp.w	r8,r9
80005038:	cf d3       	brcs	80005032 <_vfprintf_r+0xa8e>
8000503a:	c0 98       	rjmp	8000504c <_vfprintf_r+0xaa8>
8000503c:	2d 0b       	sub	r11,-48
8000503e:	33 08       	mov	r8,48
80005040:	fb 6b 06 9f 	st.b	sp[1695],r11
80005044:	fb 68 06 9e 	st.b	sp[1694],r8
80005048:	fa ca f9 60 	sub	r10,sp,-1696
8000504c:	fa c8 f9 64 	sub	r8,sp,-1692
80005050:	f4 08 01 08 	sub	r8,r10,r8
80005054:	50 e8       	stdsp	sp[0x38],r8
80005056:	10 92       	mov	r2,r8
80005058:	40 6b       	lddsp	r11,sp[0x18]
8000505a:	16 02       	add	r2,r11
8000505c:	58 1b       	cp.w	r11,1
8000505e:	e0 89 00 05 	brgt	80005068 <_vfprintf_r+0xac4>
80005062:	ed b5 00 00 	bld	r5,0x0
80005066:	c3 51       	brne	800050d0 <_vfprintf_r+0xb2c>
80005068:	2f f2       	sub	r2,-1
8000506a:	c3 38       	rjmp	800050d0 <_vfprintf_r+0xb2c>
8000506c:	e0 40 00 66 	cp.w	r0,102
80005070:	c1 c1       	brne	800050a8 <_vfprintf_r+0xb04>
80005072:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005076:	58 02       	cp.w	r2,0
80005078:	e0 8a 00 0c 	brle	80005090 <_vfprintf_r+0xaec>
8000507c:	40 2a       	lddsp	r10,sp[0x8]
8000507e:	58 0a       	cp.w	r10,0
80005080:	c0 41       	brne	80005088 <_vfprintf_r+0xae4>
80005082:	ed b5 00 00 	bld	r5,0x0
80005086:	c2 51       	brne	800050d0 <_vfprintf_r+0xb2c>
80005088:	2f f2       	sub	r2,-1
8000508a:	40 29       	lddsp	r9,sp[0x8]
8000508c:	12 02       	add	r2,r9
8000508e:	c0 b8       	rjmp	800050a4 <_vfprintf_r+0xb00>
80005090:	40 28       	lddsp	r8,sp[0x8]
80005092:	58 08       	cp.w	r8,0
80005094:	c0 61       	brne	800050a0 <_vfprintf_r+0xafc>
80005096:	ed b5 00 00 	bld	r5,0x0
8000509a:	c0 30       	breq	800050a0 <_vfprintf_r+0xafc>
8000509c:	30 12       	mov	r2,1
8000509e:	c1 98       	rjmp	800050d0 <_vfprintf_r+0xb2c>
800050a0:	40 22       	lddsp	r2,sp[0x8]
800050a2:	2f e2       	sub	r2,-2
800050a4:	36 60       	mov	r0,102
800050a6:	c1 58       	rjmp	800050d0 <_vfprintf_r+0xb2c>
800050a8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800050ac:	40 6e       	lddsp	lr,sp[0x18]
800050ae:	1c 32       	cp.w	r2,lr
800050b0:	c0 65       	brlt	800050bc <_vfprintf_r+0xb18>
800050b2:	ed b5 00 00 	bld	r5,0x0
800050b6:	f7 b2 00 ff 	subeq	r2,-1
800050ba:	c0 a8       	rjmp	800050ce <_vfprintf_r+0xb2a>
800050bc:	e4 08 11 02 	rsub	r8,r2,2
800050c0:	40 6c       	lddsp	r12,sp[0x18]
800050c2:	58 02       	cp.w	r2,0
800050c4:	f0 02 17 a0 	movle	r2,r8
800050c8:	f9 b2 09 01 	movgt	r2,1
800050cc:	18 02       	add	r2,r12
800050ce:	36 70       	mov	r0,103
800050d0:	40 9b       	lddsp	r11,sp[0x24]
800050d2:	58 0b       	cp.w	r11,0
800050d4:	e0 80 05 94 	breq	80005bfc <_vfprintf_r+0x1658>
800050d8:	32 d8       	mov	r8,45
800050da:	fb 68 06 bb 	st.b	sp[1723],r8
800050de:	e0 8f 05 93 	bral	80005c04 <_vfprintf_r+0x1660>
800050e2:	50 a7       	stdsp	sp[0x28],r7
800050e4:	04 94       	mov	r4,r2
800050e6:	0c 97       	mov	r7,r6
800050e8:	02 92       	mov	r2,r1
800050ea:	06 96       	mov	r6,r3
800050ec:	40 41       	lddsp	r1,sp[0x10]
800050ee:	40 93       	lddsp	r3,sp[0x24]
800050f0:	0e 99       	mov	r9,r7
800050f2:	ed b5 00 05 	bld	r5,0x5
800050f6:	c4 81       	brne	80005186 <_vfprintf_r+0xbe2>
800050f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050fc:	40 3e       	lddsp	lr,sp[0xc]
800050fe:	58 0e       	cp.w	lr,0
80005100:	c1 d0       	breq	8000513a <_vfprintf_r+0xb96>
80005102:	10 36       	cp.w	r6,r8
80005104:	c0 64       	brge	80005110 <_vfprintf_r+0xb6c>
80005106:	fa cc f9 44 	sub	r12,sp,-1724
8000510a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000510e:	c1 d8       	rjmp	80005148 <_vfprintf_r+0xba4>
80005110:	fa c8 f9 50 	sub	r8,sp,-1712
80005114:	1a d8       	st.w	--sp,r8
80005116:	fa c8 fa b8 	sub	r8,sp,-1352
8000511a:	04 9a       	mov	r10,r2
8000511c:	1a d8       	st.w	--sp,r8
8000511e:	fa c8 fb b4 	sub	r8,sp,-1100
80005122:	0c 9b       	mov	r11,r6
80005124:	1a d8       	st.w	--sp,r8
80005126:	08 9c       	mov	r12,r4
80005128:	fa c8 f9 40 	sub	r8,sp,-1728
8000512c:	fa c9 ff b4 	sub	r9,sp,-76
80005130:	fe b0 f8 a2 	rcall	80004274 <get_arg>
80005134:	2f dd       	sub	sp,-12
80005136:	78 0a       	ld.w	r10,r12[0x0]
80005138:	c2 08       	rjmp	80005178 <_vfprintf_r+0xbd4>
8000513a:	2f f7       	sub	r7,-1
8000513c:	10 39       	cp.w	r9,r8
8000513e:	c0 84       	brge	8000514e <_vfprintf_r+0xbaa>
80005140:	fa cb f9 44 	sub	r11,sp,-1724
80005144:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005148:	ec fa fd 88 	ld.w	r10,r6[-632]
8000514c:	c1 68       	rjmp	80005178 <_vfprintf_r+0xbd4>
8000514e:	41 09       	lddsp	r9,sp[0x40]
80005150:	59 f8       	cp.w	r8,31
80005152:	e0 89 00 10 	brgt	80005172 <_vfprintf_r+0xbce>
80005156:	f2 ca ff fc 	sub	r10,r9,-4
8000515a:	51 0a       	stdsp	sp[0x40],r10
8000515c:	fa c6 f9 44 	sub	r6,sp,-1724
80005160:	72 0a       	ld.w	r10,r9[0x0]
80005162:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005166:	f3 4a fd 88 	st.w	r9[-632],r10
8000516a:	2f f8       	sub	r8,-1
8000516c:	fb 48 06 b4 	st.w	sp[1716],r8
80005170:	c0 48       	rjmp	80005178 <_vfprintf_r+0xbd4>
80005172:	72 0a       	ld.w	r10,r9[0x0]
80005174:	2f c9       	sub	r9,-4
80005176:	51 09       	stdsp	sp[0x40],r9
80005178:	40 be       	lddsp	lr,sp[0x2c]
8000517a:	1c 98       	mov	r8,lr
8000517c:	95 1e       	st.w	r10[0x4],lr
8000517e:	bf 58       	asr	r8,0x1f
80005180:	95 08       	st.w	r10[0x0],r8
80005182:	fe 9f fa 9f 	bral	800046c0 <_vfprintf_r+0x11c>
80005186:	ed b5 00 04 	bld	r5,0x4
8000518a:	c4 80       	breq	8000521a <_vfprintf_r+0xc76>
8000518c:	e2 15 00 40 	andl	r5,0x40,COH
80005190:	c4 50       	breq	8000521a <_vfprintf_r+0xc76>
80005192:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005196:	40 3c       	lddsp	r12,sp[0xc]
80005198:	58 0c       	cp.w	r12,0
8000519a:	c1 d0       	breq	800051d4 <_vfprintf_r+0xc30>
8000519c:	10 36       	cp.w	r6,r8
8000519e:	c0 64       	brge	800051aa <_vfprintf_r+0xc06>
800051a0:	fa cb f9 44 	sub	r11,sp,-1724
800051a4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051a8:	c1 d8       	rjmp	800051e2 <_vfprintf_r+0xc3e>
800051aa:	fa c8 f9 50 	sub	r8,sp,-1712
800051ae:	1a d8       	st.w	--sp,r8
800051b0:	fa c8 fa b8 	sub	r8,sp,-1352
800051b4:	04 9a       	mov	r10,r2
800051b6:	1a d8       	st.w	--sp,r8
800051b8:	fa c8 fb b4 	sub	r8,sp,-1100
800051bc:	0c 9b       	mov	r11,r6
800051be:	1a d8       	st.w	--sp,r8
800051c0:	08 9c       	mov	r12,r4
800051c2:	fa c8 f9 40 	sub	r8,sp,-1728
800051c6:	fa c9 ff b4 	sub	r9,sp,-76
800051ca:	fe b0 f8 55 	rcall	80004274 <get_arg>
800051ce:	2f dd       	sub	sp,-12
800051d0:	78 0a       	ld.w	r10,r12[0x0]
800051d2:	c2 08       	rjmp	80005212 <_vfprintf_r+0xc6e>
800051d4:	2f f7       	sub	r7,-1
800051d6:	10 39       	cp.w	r9,r8
800051d8:	c0 84       	brge	800051e8 <_vfprintf_r+0xc44>
800051da:	fa ca f9 44 	sub	r10,sp,-1724
800051de:	f4 06 00 36 	add	r6,r10,r6<<0x3
800051e2:	ec fa fd 88 	ld.w	r10,r6[-632]
800051e6:	c1 68       	rjmp	80005212 <_vfprintf_r+0xc6e>
800051e8:	41 09       	lddsp	r9,sp[0x40]
800051ea:	59 f8       	cp.w	r8,31
800051ec:	e0 89 00 10 	brgt	8000520c <_vfprintf_r+0xc68>
800051f0:	f2 ca ff fc 	sub	r10,r9,-4
800051f4:	51 0a       	stdsp	sp[0x40],r10
800051f6:	fa c6 f9 44 	sub	r6,sp,-1724
800051fa:	72 0a       	ld.w	r10,r9[0x0]
800051fc:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005200:	f3 4a fd 88 	st.w	r9[-632],r10
80005204:	2f f8       	sub	r8,-1
80005206:	fb 48 06 b4 	st.w	sp[1716],r8
8000520a:	c0 48       	rjmp	80005212 <_vfprintf_r+0xc6e>
8000520c:	72 0a       	ld.w	r10,r9[0x0]
8000520e:	2f c9       	sub	r9,-4
80005210:	51 09       	stdsp	sp[0x40],r9
80005212:	40 be       	lddsp	lr,sp[0x2c]
80005214:	b4 0e       	st.h	r10[0x0],lr
80005216:	fe 9f fa 55 	bral	800046c0 <_vfprintf_r+0x11c>
8000521a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000521e:	40 3c       	lddsp	r12,sp[0xc]
80005220:	58 0c       	cp.w	r12,0
80005222:	c1 d0       	breq	8000525c <_vfprintf_r+0xcb8>
80005224:	10 36       	cp.w	r6,r8
80005226:	c0 64       	brge	80005232 <_vfprintf_r+0xc8e>
80005228:	fa cb f9 44 	sub	r11,sp,-1724
8000522c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005230:	c1 d8       	rjmp	8000526a <_vfprintf_r+0xcc6>
80005232:	fa c8 f9 50 	sub	r8,sp,-1712
80005236:	1a d8       	st.w	--sp,r8
80005238:	fa c8 fa b8 	sub	r8,sp,-1352
8000523c:	04 9a       	mov	r10,r2
8000523e:	1a d8       	st.w	--sp,r8
80005240:	fa c8 fb b4 	sub	r8,sp,-1100
80005244:	0c 9b       	mov	r11,r6
80005246:	1a d8       	st.w	--sp,r8
80005248:	08 9c       	mov	r12,r4
8000524a:	fa c8 f9 40 	sub	r8,sp,-1728
8000524e:	fa c9 ff b4 	sub	r9,sp,-76
80005252:	fe b0 f8 11 	rcall	80004274 <get_arg>
80005256:	2f dd       	sub	sp,-12
80005258:	78 0a       	ld.w	r10,r12[0x0]
8000525a:	c2 08       	rjmp	8000529a <_vfprintf_r+0xcf6>
8000525c:	2f f7       	sub	r7,-1
8000525e:	10 39       	cp.w	r9,r8
80005260:	c0 84       	brge	80005270 <_vfprintf_r+0xccc>
80005262:	fa ca f9 44 	sub	r10,sp,-1724
80005266:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000526a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000526e:	c1 68       	rjmp	8000529a <_vfprintf_r+0xcf6>
80005270:	41 09       	lddsp	r9,sp[0x40]
80005272:	59 f8       	cp.w	r8,31
80005274:	e0 89 00 10 	brgt	80005294 <_vfprintf_r+0xcf0>
80005278:	f2 ca ff fc 	sub	r10,r9,-4
8000527c:	51 0a       	stdsp	sp[0x40],r10
8000527e:	fa c6 f9 44 	sub	r6,sp,-1724
80005282:	72 0a       	ld.w	r10,r9[0x0]
80005284:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005288:	f3 4a fd 88 	st.w	r9[-632],r10
8000528c:	2f f8       	sub	r8,-1
8000528e:	fb 48 06 b4 	st.w	sp[1716],r8
80005292:	c0 48       	rjmp	8000529a <_vfprintf_r+0xcf6>
80005294:	72 0a       	ld.w	r10,r9[0x0]
80005296:	2f c9       	sub	r9,-4
80005298:	51 09       	stdsp	sp[0x40],r9
8000529a:	40 be       	lddsp	lr,sp[0x2c]
8000529c:	95 0e       	st.w	r10[0x0],lr
8000529e:	fe 9f fa 11 	bral	800046c0 <_vfprintf_r+0x11c>
800052a2:	50 a7       	stdsp	sp[0x28],r7
800052a4:	50 80       	stdsp	sp[0x20],r0
800052a6:	0c 97       	mov	r7,r6
800052a8:	04 94       	mov	r4,r2
800052aa:	06 96       	mov	r6,r3
800052ac:	02 92       	mov	r2,r1
800052ae:	40 93       	lddsp	r3,sp[0x24]
800052b0:	10 90       	mov	r0,r8
800052b2:	40 41       	lddsp	r1,sp[0x10]
800052b4:	a5 a5       	sbr	r5,0x4
800052b6:	c0 a8       	rjmp	800052ca <_vfprintf_r+0xd26>
800052b8:	50 a7       	stdsp	sp[0x28],r7
800052ba:	50 80       	stdsp	sp[0x20],r0
800052bc:	0c 97       	mov	r7,r6
800052be:	04 94       	mov	r4,r2
800052c0:	06 96       	mov	r6,r3
800052c2:	02 92       	mov	r2,r1
800052c4:	40 93       	lddsp	r3,sp[0x24]
800052c6:	10 90       	mov	r0,r8
800052c8:	40 41       	lddsp	r1,sp[0x10]
800052ca:	ed b5 00 05 	bld	r5,0x5
800052ce:	c5 d1       	brne	80005388 <_vfprintf_r+0xde4>
800052d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052d4:	40 3c       	lddsp	r12,sp[0xc]
800052d6:	58 0c       	cp.w	r12,0
800052d8:	c2 60       	breq	80005324 <_vfprintf_r+0xd80>
800052da:	10 36       	cp.w	r6,r8
800052dc:	c0 a4       	brge	800052f0 <_vfprintf_r+0xd4c>
800052de:	fa cb f9 44 	sub	r11,sp,-1724
800052e2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800052e6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800052ea:	fa e9 00 00 	st.d	sp[0],r8
800052ee:	c1 88       	rjmp	8000531e <_vfprintf_r+0xd7a>
800052f0:	fa c8 f9 50 	sub	r8,sp,-1712
800052f4:	1a d8       	st.w	--sp,r8
800052f6:	fa c8 fa b8 	sub	r8,sp,-1352
800052fa:	04 9a       	mov	r10,r2
800052fc:	1a d8       	st.w	--sp,r8
800052fe:	0c 9b       	mov	r11,r6
80005300:	fa c8 fb b4 	sub	r8,sp,-1100
80005304:	08 9c       	mov	r12,r4
80005306:	1a d8       	st.w	--sp,r8
80005308:	fa c8 f9 40 	sub	r8,sp,-1728
8000530c:	fa c9 ff b4 	sub	r9,sp,-76
80005310:	fe b0 f7 b2 	rcall	80004274 <get_arg>
80005314:	2f dd       	sub	sp,-12
80005316:	f8 ea 00 00 	ld.d	r10,r12[0]
8000531a:	fa eb 00 00 	st.d	sp[0],r10
8000531e:	30 08       	mov	r8,0
80005320:	e0 8f 03 de 	bral	80005adc <_vfprintf_r+0x1538>
80005324:	ee ca ff ff 	sub	r10,r7,-1
80005328:	10 37       	cp.w	r7,r8
8000532a:	c0 b4       	brge	80005340 <_vfprintf_r+0xd9c>
8000532c:	fa c9 f9 44 	sub	r9,sp,-1724
80005330:	14 97       	mov	r7,r10
80005332:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005336:	ec ea fd 88 	ld.d	r10,r6[-632]
8000533a:	fa eb 00 00 	st.d	sp[0],r10
8000533e:	c1 88       	rjmp	8000536e <_vfprintf_r+0xdca>
80005340:	41 09       	lddsp	r9,sp[0x40]
80005342:	59 f8       	cp.w	r8,31
80005344:	e0 89 00 18 	brgt	80005374 <_vfprintf_r+0xdd0>
80005348:	f2 e6 00 00 	ld.d	r6,r9[0]
8000534c:	f2 cb ff f8 	sub	r11,r9,-8
80005350:	fa e7 00 00 	st.d	sp[0],r6
80005354:	51 0b       	stdsp	sp[0x40],r11
80005356:	fa c6 f9 44 	sub	r6,sp,-1724
8000535a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000535e:	fa e6 00 00 	ld.d	r6,sp[0]
80005362:	f2 e7 fd 88 	st.d	r9[-632],r6
80005366:	2f f8       	sub	r8,-1
80005368:	14 97       	mov	r7,r10
8000536a:	fb 48 06 b4 	st.w	sp[1716],r8
8000536e:	40 38       	lddsp	r8,sp[0xc]
80005370:	e0 8f 03 b6 	bral	80005adc <_vfprintf_r+0x1538>
80005374:	f2 e6 00 00 	ld.d	r6,r9[0]
80005378:	40 38       	lddsp	r8,sp[0xc]
8000537a:	fa e7 00 00 	st.d	sp[0],r6
8000537e:	2f 89       	sub	r9,-8
80005380:	14 97       	mov	r7,r10
80005382:	51 09       	stdsp	sp[0x40],r9
80005384:	e0 8f 03 ac 	bral	80005adc <_vfprintf_r+0x1538>
80005388:	ed b5 00 04 	bld	r5,0x4
8000538c:	c1 61       	brne	800053b8 <_vfprintf_r+0xe14>
8000538e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005392:	40 3e       	lddsp	lr,sp[0xc]
80005394:	58 0e       	cp.w	lr,0
80005396:	c0 80       	breq	800053a6 <_vfprintf_r+0xe02>
80005398:	10 36       	cp.w	r6,r8
8000539a:	c6 74       	brge	80005468 <_vfprintf_r+0xec4>
8000539c:	fa cc f9 44 	sub	r12,sp,-1724
800053a0:	f8 06 00 36 	add	r6,r12,r6<<0x3
800053a4:	c8 08       	rjmp	800054a4 <_vfprintf_r+0xf00>
800053a6:	ee ca ff ff 	sub	r10,r7,-1
800053aa:	10 37       	cp.w	r7,r8
800053ac:	c7 f4       	brge	800054aa <_vfprintf_r+0xf06>
800053ae:	fa cb f9 44 	sub	r11,sp,-1724
800053b2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053b6:	c7 68       	rjmp	800054a2 <_vfprintf_r+0xefe>
800053b8:	ed b5 00 06 	bld	r5,0x6
800053bc:	c4 a1       	brne	80005450 <_vfprintf_r+0xeac>
800053be:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053c2:	40 3c       	lddsp	r12,sp[0xc]
800053c4:	58 0c       	cp.w	r12,0
800053c6:	c1 d0       	breq	80005400 <_vfprintf_r+0xe5c>
800053c8:	10 36       	cp.w	r6,r8
800053ca:	c0 64       	brge	800053d6 <_vfprintf_r+0xe32>
800053cc:	fa cb f9 44 	sub	r11,sp,-1724
800053d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053d4:	c1 f8       	rjmp	80005412 <_vfprintf_r+0xe6e>
800053d6:	fa c8 f9 50 	sub	r8,sp,-1712
800053da:	1a d8       	st.w	--sp,r8
800053dc:	fa c8 fa b8 	sub	r8,sp,-1352
800053e0:	1a d8       	st.w	--sp,r8
800053e2:	fa c8 fb b4 	sub	r8,sp,-1100
800053e6:	1a d8       	st.w	--sp,r8
800053e8:	fa c8 f9 40 	sub	r8,sp,-1728
800053ec:	fa c9 ff b4 	sub	r9,sp,-76
800053f0:	04 9a       	mov	r10,r2
800053f2:	0c 9b       	mov	r11,r6
800053f4:	08 9c       	mov	r12,r4
800053f6:	fe b0 f7 3f 	rcall	80004274 <get_arg>
800053fa:	2f dd       	sub	sp,-12
800053fc:	98 18       	ld.sh	r8,r12[0x2]
800053fe:	c2 68       	rjmp	8000544a <_vfprintf_r+0xea6>
80005400:	ee ca ff ff 	sub	r10,r7,-1
80005404:	10 37       	cp.w	r7,r8
80005406:	c0 94       	brge	80005418 <_vfprintf_r+0xe74>
80005408:	fa c9 f9 44 	sub	r9,sp,-1724
8000540c:	14 97       	mov	r7,r10
8000540e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005412:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005416:	c1 a8       	rjmp	8000544a <_vfprintf_r+0xea6>
80005418:	41 09       	lddsp	r9,sp[0x40]
8000541a:	59 f8       	cp.w	r8,31
8000541c:	e0 89 00 13 	brgt	80005442 <_vfprintf_r+0xe9e>
80005420:	f2 cb ff fc 	sub	r11,r9,-4
80005424:	51 0b       	stdsp	sp[0x40],r11
80005426:	72 09       	ld.w	r9,r9[0x0]
80005428:	fa c6 f9 44 	sub	r6,sp,-1724
8000542c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005430:	2f f8       	sub	r8,-1
80005432:	f7 49 fd 88 	st.w	r11[-632],r9
80005436:	fb 48 06 b4 	st.w	sp[1716],r8
8000543a:	14 97       	mov	r7,r10
8000543c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005440:	c0 58       	rjmp	8000544a <_vfprintf_r+0xea6>
80005442:	92 18       	ld.sh	r8,r9[0x2]
80005444:	14 97       	mov	r7,r10
80005446:	2f c9       	sub	r9,-4
80005448:	51 09       	stdsp	sp[0x40],r9
8000544a:	5c 78       	castu.h	r8
8000544c:	50 18       	stdsp	sp[0x4],r8
8000544e:	c4 68       	rjmp	800054da <_vfprintf_r+0xf36>
80005450:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005454:	40 3c       	lddsp	r12,sp[0xc]
80005456:	58 0c       	cp.w	r12,0
80005458:	c1 d0       	breq	80005492 <_vfprintf_r+0xeee>
8000545a:	10 36       	cp.w	r6,r8
8000545c:	c0 64       	brge	80005468 <_vfprintf_r+0xec4>
8000545e:	fa cb f9 44 	sub	r11,sp,-1724
80005462:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005466:	c1 f8       	rjmp	800054a4 <_vfprintf_r+0xf00>
80005468:	fa c8 f9 50 	sub	r8,sp,-1712
8000546c:	1a d8       	st.w	--sp,r8
8000546e:	fa c8 fa b8 	sub	r8,sp,-1352
80005472:	0c 9b       	mov	r11,r6
80005474:	1a d8       	st.w	--sp,r8
80005476:	fa c8 fb b4 	sub	r8,sp,-1100
8000547a:	04 9a       	mov	r10,r2
8000547c:	1a d8       	st.w	--sp,r8
8000547e:	08 9c       	mov	r12,r4
80005480:	fa c8 f9 40 	sub	r8,sp,-1728
80005484:	fa c9 ff b4 	sub	r9,sp,-76
80005488:	fe b0 f6 f6 	rcall	80004274 <get_arg>
8000548c:	2f dd       	sub	sp,-12
8000548e:	78 0b       	ld.w	r11,r12[0x0]
80005490:	c2 48       	rjmp	800054d8 <_vfprintf_r+0xf34>
80005492:	ee ca ff ff 	sub	r10,r7,-1
80005496:	10 37       	cp.w	r7,r8
80005498:	c0 94       	brge	800054aa <_vfprintf_r+0xf06>
8000549a:	fa c9 f9 44 	sub	r9,sp,-1724
8000549e:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054a2:	14 97       	mov	r7,r10
800054a4:	ec fb fd 88 	ld.w	r11,r6[-632]
800054a8:	c1 88       	rjmp	800054d8 <_vfprintf_r+0xf34>
800054aa:	41 09       	lddsp	r9,sp[0x40]
800054ac:	59 f8       	cp.w	r8,31
800054ae:	e0 89 00 11 	brgt	800054d0 <_vfprintf_r+0xf2c>
800054b2:	f2 cb ff fc 	sub	r11,r9,-4
800054b6:	51 0b       	stdsp	sp[0x40],r11
800054b8:	fa c6 f9 44 	sub	r6,sp,-1724
800054bc:	72 0b       	ld.w	r11,r9[0x0]
800054be:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054c2:	f3 4b fd 88 	st.w	r9[-632],r11
800054c6:	2f f8       	sub	r8,-1
800054c8:	14 97       	mov	r7,r10
800054ca:	fb 48 06 b4 	st.w	sp[1716],r8
800054ce:	c0 58       	rjmp	800054d8 <_vfprintf_r+0xf34>
800054d0:	72 0b       	ld.w	r11,r9[0x0]
800054d2:	14 97       	mov	r7,r10
800054d4:	2f c9       	sub	r9,-4
800054d6:	51 09       	stdsp	sp[0x40],r9
800054d8:	50 1b       	stdsp	sp[0x4],r11
800054da:	30 0e       	mov	lr,0
800054dc:	50 0e       	stdsp	sp[0x0],lr
800054de:	1c 98       	mov	r8,lr
800054e0:	e0 8f 02 fe 	bral	80005adc <_vfprintf_r+0x1538>
800054e4:	50 a7       	stdsp	sp[0x28],r7
800054e6:	50 80       	stdsp	sp[0x20],r0
800054e8:	0c 97       	mov	r7,r6
800054ea:	04 94       	mov	r4,r2
800054ec:	06 96       	mov	r6,r3
800054ee:	02 92       	mov	r2,r1
800054f0:	40 93       	lddsp	r3,sp[0x24]
800054f2:	40 41       	lddsp	r1,sp[0x10]
800054f4:	0e 99       	mov	r9,r7
800054f6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054fa:	40 3c       	lddsp	r12,sp[0xc]
800054fc:	58 0c       	cp.w	r12,0
800054fe:	c1 d0       	breq	80005538 <_vfprintf_r+0xf94>
80005500:	10 36       	cp.w	r6,r8
80005502:	c0 64       	brge	8000550e <_vfprintf_r+0xf6a>
80005504:	fa cb f9 44 	sub	r11,sp,-1724
80005508:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000550c:	c1 d8       	rjmp	80005546 <_vfprintf_r+0xfa2>
8000550e:	fa c8 f9 50 	sub	r8,sp,-1712
80005512:	1a d8       	st.w	--sp,r8
80005514:	fa c8 fa b8 	sub	r8,sp,-1352
80005518:	1a d8       	st.w	--sp,r8
8000551a:	fa c8 fb b4 	sub	r8,sp,-1100
8000551e:	1a d8       	st.w	--sp,r8
80005520:	fa c9 ff b4 	sub	r9,sp,-76
80005524:	fa c8 f9 40 	sub	r8,sp,-1728
80005528:	04 9a       	mov	r10,r2
8000552a:	0c 9b       	mov	r11,r6
8000552c:	08 9c       	mov	r12,r4
8000552e:	fe b0 f6 a3 	rcall	80004274 <get_arg>
80005532:	2f dd       	sub	sp,-12
80005534:	78 09       	ld.w	r9,r12[0x0]
80005536:	c2 18       	rjmp	80005578 <_vfprintf_r+0xfd4>
80005538:	2f f7       	sub	r7,-1
8000553a:	10 39       	cp.w	r9,r8
8000553c:	c0 84       	brge	8000554c <_vfprintf_r+0xfa8>
8000553e:	fa ca f9 44 	sub	r10,sp,-1724
80005542:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005546:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000554a:	c1 78       	rjmp	80005578 <_vfprintf_r+0xfd4>
8000554c:	41 09       	lddsp	r9,sp[0x40]
8000554e:	59 f8       	cp.w	r8,31
80005550:	e0 89 00 10 	brgt	80005570 <_vfprintf_r+0xfcc>
80005554:	f2 ca ff fc 	sub	r10,r9,-4
80005558:	51 0a       	stdsp	sp[0x40],r10
8000555a:	fa c6 f9 44 	sub	r6,sp,-1724
8000555e:	72 09       	ld.w	r9,r9[0x0]
80005560:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005564:	f5 49 fd 88 	st.w	r10[-632],r9
80005568:	2f f8       	sub	r8,-1
8000556a:	fb 48 06 b4 	st.w	sp[1716],r8
8000556e:	c0 58       	rjmp	80005578 <_vfprintf_r+0xfd4>
80005570:	f2 c8 ff fc 	sub	r8,r9,-4
80005574:	51 08       	stdsp	sp[0x40],r8
80005576:	72 09       	ld.w	r9,r9[0x0]
80005578:	33 08       	mov	r8,48
8000557a:	fb 68 06 b8 	st.b	sp[1720],r8
8000557e:	37 88       	mov	r8,120
80005580:	30 0e       	mov	lr,0
80005582:	fb 68 06 b9 	st.b	sp[1721],r8
80005586:	fe cc b5 1a 	sub	r12,pc,-19174
8000558a:	50 19       	stdsp	sp[0x4],r9
8000558c:	a1 b5       	sbr	r5,0x1
8000558e:	50 0e       	stdsp	sp[0x0],lr
80005590:	50 dc       	stdsp	sp[0x34],r12
80005592:	30 28       	mov	r8,2
80005594:	37 80       	mov	r0,120
80005596:	e0 8f 02 a3 	bral	80005adc <_vfprintf_r+0x1538>
8000559a:	50 a7       	stdsp	sp[0x28],r7
8000559c:	50 80       	stdsp	sp[0x20],r0
8000559e:	10 90       	mov	r0,r8
800055a0:	30 08       	mov	r8,0
800055a2:	fb 68 06 bb 	st.b	sp[1723],r8
800055a6:	0c 97       	mov	r7,r6
800055a8:	04 94       	mov	r4,r2
800055aa:	06 96       	mov	r6,r3
800055ac:	02 92       	mov	r2,r1
800055ae:	40 93       	lddsp	r3,sp[0x24]
800055b0:	40 41       	lddsp	r1,sp[0x10]
800055b2:	0e 99       	mov	r9,r7
800055b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055b8:	40 3b       	lddsp	r11,sp[0xc]
800055ba:	58 0b       	cp.w	r11,0
800055bc:	c1 d0       	breq	800055f6 <_vfprintf_r+0x1052>
800055be:	10 36       	cp.w	r6,r8
800055c0:	c0 64       	brge	800055cc <_vfprintf_r+0x1028>
800055c2:	fa ca f9 44 	sub	r10,sp,-1724
800055c6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800055ca:	c1 d8       	rjmp	80005604 <_vfprintf_r+0x1060>
800055cc:	fa c8 f9 50 	sub	r8,sp,-1712
800055d0:	1a d8       	st.w	--sp,r8
800055d2:	fa c8 fa b8 	sub	r8,sp,-1352
800055d6:	1a d8       	st.w	--sp,r8
800055d8:	fa c8 fb b4 	sub	r8,sp,-1100
800055dc:	0c 9b       	mov	r11,r6
800055de:	1a d8       	st.w	--sp,r8
800055e0:	04 9a       	mov	r10,r2
800055e2:	fa c8 f9 40 	sub	r8,sp,-1728
800055e6:	fa c9 ff b4 	sub	r9,sp,-76
800055ea:	08 9c       	mov	r12,r4
800055ec:	fe b0 f6 44 	rcall	80004274 <get_arg>
800055f0:	2f dd       	sub	sp,-12
800055f2:	78 06       	ld.w	r6,r12[0x0]
800055f4:	c2 08       	rjmp	80005634 <_vfprintf_r+0x1090>
800055f6:	2f f7       	sub	r7,-1
800055f8:	10 39       	cp.w	r9,r8
800055fa:	c0 84       	brge	8000560a <_vfprintf_r+0x1066>
800055fc:	fa c9 f9 44 	sub	r9,sp,-1724
80005600:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005604:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005608:	c1 68       	rjmp	80005634 <_vfprintf_r+0x1090>
8000560a:	41 09       	lddsp	r9,sp[0x40]
8000560c:	59 f8       	cp.w	r8,31
8000560e:	e0 89 00 10 	brgt	8000562e <_vfprintf_r+0x108a>
80005612:	f2 ca ff fc 	sub	r10,r9,-4
80005616:	51 0a       	stdsp	sp[0x40],r10
80005618:	72 06       	ld.w	r6,r9[0x0]
8000561a:	fa ce f9 44 	sub	lr,sp,-1724
8000561e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005622:	f3 46 fd 88 	st.w	r9[-632],r6
80005626:	2f f8       	sub	r8,-1
80005628:	fb 48 06 b4 	st.w	sp[1716],r8
8000562c:	c0 48       	rjmp	80005634 <_vfprintf_r+0x1090>
8000562e:	72 06       	ld.w	r6,r9[0x0]
80005630:	2f c9       	sub	r9,-4
80005632:	51 09       	stdsp	sp[0x40],r9
80005634:	40 2c       	lddsp	r12,sp[0x8]
80005636:	58 0c       	cp.w	r12,0
80005638:	c1 05       	brlt	80005658 <_vfprintf_r+0x10b4>
8000563a:	18 9a       	mov	r10,r12
8000563c:	30 0b       	mov	r11,0
8000563e:	0c 9c       	mov	r12,r6
80005640:	e0 a0 14 58 	rcall	80007ef0 <memchr>
80005644:	e0 80 02 df 	breq	80005c02 <_vfprintf_r+0x165e>
80005648:	f8 06 01 02 	sub	r2,r12,r6
8000564c:	40 2b       	lddsp	r11,sp[0x8]
8000564e:	16 32       	cp.w	r2,r11
80005650:	e0 89 02 d9 	brgt	80005c02 <_vfprintf_r+0x165e>
80005654:	e0 8f 02 d4 	bral	80005bfc <_vfprintf_r+0x1658>
80005658:	30 0a       	mov	r10,0
8000565a:	0c 9c       	mov	r12,r6
8000565c:	50 2a       	stdsp	sp[0x8],r10
8000565e:	e0 a0 19 33 	rcall	800088c4 <strlen>
80005662:	18 92       	mov	r2,r12
80005664:	e0 8f 02 d2 	bral	80005c08 <_vfprintf_r+0x1664>
80005668:	50 a7       	stdsp	sp[0x28],r7
8000566a:	50 80       	stdsp	sp[0x20],r0
8000566c:	0c 97       	mov	r7,r6
8000566e:	04 94       	mov	r4,r2
80005670:	06 96       	mov	r6,r3
80005672:	02 92       	mov	r2,r1
80005674:	40 93       	lddsp	r3,sp[0x24]
80005676:	10 90       	mov	r0,r8
80005678:	40 41       	lddsp	r1,sp[0x10]
8000567a:	a5 a5       	sbr	r5,0x4
8000567c:	c0 a8       	rjmp	80005690 <_vfprintf_r+0x10ec>
8000567e:	50 a7       	stdsp	sp[0x28],r7
80005680:	50 80       	stdsp	sp[0x20],r0
80005682:	0c 97       	mov	r7,r6
80005684:	04 94       	mov	r4,r2
80005686:	06 96       	mov	r6,r3
80005688:	02 92       	mov	r2,r1
8000568a:	40 93       	lddsp	r3,sp[0x24]
8000568c:	10 90       	mov	r0,r8
8000568e:	40 41       	lddsp	r1,sp[0x10]
80005690:	ed b5 00 05 	bld	r5,0x5
80005694:	c5 61       	brne	80005740 <_vfprintf_r+0x119c>
80005696:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000569a:	40 39       	lddsp	r9,sp[0xc]
8000569c:	58 09       	cp.w	r9,0
8000569e:	c2 10       	breq	800056e0 <_vfprintf_r+0x113c>
800056a0:	10 36       	cp.w	r6,r8
800056a2:	c0 74       	brge	800056b0 <_vfprintf_r+0x110c>
800056a4:	fa c8 f9 44 	sub	r8,sp,-1724
800056a8:	f0 06 00 36 	add	r6,r8,r6<<0x3
800056ac:	c2 38       	rjmp	800056f2 <_vfprintf_r+0x114e>
800056ae:	d7 03       	nop
800056b0:	fa c8 f9 50 	sub	r8,sp,-1712
800056b4:	1a d8       	st.w	--sp,r8
800056b6:	fa c8 fa b8 	sub	r8,sp,-1352
800056ba:	1a d8       	st.w	--sp,r8
800056bc:	fa c8 fb b4 	sub	r8,sp,-1100
800056c0:	1a d8       	st.w	--sp,r8
800056c2:	fa c8 f9 40 	sub	r8,sp,-1728
800056c6:	fa c9 ff b4 	sub	r9,sp,-76
800056ca:	04 9a       	mov	r10,r2
800056cc:	0c 9b       	mov	r11,r6
800056ce:	08 9c       	mov	r12,r4
800056d0:	fe b0 f5 d2 	rcall	80004274 <get_arg>
800056d4:	2f dd       	sub	sp,-12
800056d6:	f8 e8 00 00 	ld.d	r8,r12[0]
800056da:	fa e9 00 00 	st.d	sp[0],r8
800056de:	c2 e8       	rjmp	8000573a <_vfprintf_r+0x1196>
800056e0:	ee ca ff ff 	sub	r10,r7,-1
800056e4:	10 37       	cp.w	r7,r8
800056e6:	c0 b4       	brge	800056fc <_vfprintf_r+0x1158>
800056e8:	fa c8 f9 44 	sub	r8,sp,-1724
800056ec:	14 97       	mov	r7,r10
800056ee:	f0 06 00 36 	add	r6,r8,r6<<0x3
800056f2:	ec ea fd 88 	ld.d	r10,r6[-632]
800056f6:	fa eb 00 00 	st.d	sp[0],r10
800056fa:	c2 08       	rjmp	8000573a <_vfprintf_r+0x1196>
800056fc:	41 09       	lddsp	r9,sp[0x40]
800056fe:	59 f8       	cp.w	r8,31
80005700:	e0 89 00 16 	brgt	8000572c <_vfprintf_r+0x1188>
80005704:	f2 e6 00 00 	ld.d	r6,r9[0]
80005708:	f2 cb ff f8 	sub	r11,r9,-8
8000570c:	fa e7 00 00 	st.d	sp[0],r6
80005710:	51 0b       	stdsp	sp[0x40],r11
80005712:	fa c6 f9 44 	sub	r6,sp,-1724
80005716:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000571a:	fa e6 00 00 	ld.d	r6,sp[0]
8000571e:	f2 e7 fd 88 	st.d	r9[-632],r6
80005722:	2f f8       	sub	r8,-1
80005724:	14 97       	mov	r7,r10
80005726:	fb 48 06 b4 	st.w	sp[1716],r8
8000572a:	c0 88       	rjmp	8000573a <_vfprintf_r+0x1196>
8000572c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005730:	2f 89       	sub	r9,-8
80005732:	fa e7 00 00 	st.d	sp[0],r6
80005736:	51 09       	stdsp	sp[0x40],r9
80005738:	14 97       	mov	r7,r10
8000573a:	30 18       	mov	r8,1
8000573c:	e0 8f 01 d0 	bral	80005adc <_vfprintf_r+0x1538>
80005740:	ed b5 00 04 	bld	r5,0x4
80005744:	c1 61       	brne	80005770 <_vfprintf_r+0x11cc>
80005746:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000574a:	40 3e       	lddsp	lr,sp[0xc]
8000574c:	58 0e       	cp.w	lr,0
8000574e:	c0 80       	breq	8000575e <_vfprintf_r+0x11ba>
80005750:	10 36       	cp.w	r6,r8
80005752:	c6 74       	brge	80005820 <_vfprintf_r+0x127c>
80005754:	fa cc f9 44 	sub	r12,sp,-1724
80005758:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000575c:	c8 08       	rjmp	8000585c <_vfprintf_r+0x12b8>
8000575e:	ee ca ff ff 	sub	r10,r7,-1
80005762:	10 37       	cp.w	r7,r8
80005764:	c7 f4       	brge	80005862 <_vfprintf_r+0x12be>
80005766:	fa cb f9 44 	sub	r11,sp,-1724
8000576a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000576e:	c7 68       	rjmp	8000585a <_vfprintf_r+0x12b6>
80005770:	ed b5 00 06 	bld	r5,0x6
80005774:	c4 a1       	brne	80005808 <_vfprintf_r+0x1264>
80005776:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000577a:	40 3c       	lddsp	r12,sp[0xc]
8000577c:	58 0c       	cp.w	r12,0
8000577e:	c1 d0       	breq	800057b8 <_vfprintf_r+0x1214>
80005780:	10 36       	cp.w	r6,r8
80005782:	c0 64       	brge	8000578e <_vfprintf_r+0x11ea>
80005784:	fa cb f9 44 	sub	r11,sp,-1724
80005788:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000578c:	c1 f8       	rjmp	800057ca <_vfprintf_r+0x1226>
8000578e:	fa c8 f9 50 	sub	r8,sp,-1712
80005792:	1a d8       	st.w	--sp,r8
80005794:	fa c8 fa b8 	sub	r8,sp,-1352
80005798:	1a d8       	st.w	--sp,r8
8000579a:	fa c8 fb b4 	sub	r8,sp,-1100
8000579e:	1a d8       	st.w	--sp,r8
800057a0:	fa c8 f9 40 	sub	r8,sp,-1728
800057a4:	fa c9 ff b4 	sub	r9,sp,-76
800057a8:	04 9a       	mov	r10,r2
800057aa:	0c 9b       	mov	r11,r6
800057ac:	08 9c       	mov	r12,r4
800057ae:	fe b0 f5 63 	rcall	80004274 <get_arg>
800057b2:	2f dd       	sub	sp,-12
800057b4:	98 18       	ld.sh	r8,r12[0x2]
800057b6:	c2 68       	rjmp	80005802 <_vfprintf_r+0x125e>
800057b8:	ee ca ff ff 	sub	r10,r7,-1
800057bc:	10 37       	cp.w	r7,r8
800057be:	c0 94       	brge	800057d0 <_vfprintf_r+0x122c>
800057c0:	fa c9 f9 44 	sub	r9,sp,-1724
800057c4:	14 97       	mov	r7,r10
800057c6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800057ca:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800057ce:	c1 a8       	rjmp	80005802 <_vfprintf_r+0x125e>
800057d0:	41 09       	lddsp	r9,sp[0x40]
800057d2:	59 f8       	cp.w	r8,31
800057d4:	e0 89 00 13 	brgt	800057fa <_vfprintf_r+0x1256>
800057d8:	f2 cb ff fc 	sub	r11,r9,-4
800057dc:	51 0b       	stdsp	sp[0x40],r11
800057de:	72 09       	ld.w	r9,r9[0x0]
800057e0:	fa c6 f9 44 	sub	r6,sp,-1724
800057e4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800057e8:	2f f8       	sub	r8,-1
800057ea:	f7 49 fd 88 	st.w	r11[-632],r9
800057ee:	fb 48 06 b4 	st.w	sp[1716],r8
800057f2:	14 97       	mov	r7,r10
800057f4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800057f8:	c0 58       	rjmp	80005802 <_vfprintf_r+0x125e>
800057fa:	92 18       	ld.sh	r8,r9[0x2]
800057fc:	14 97       	mov	r7,r10
800057fe:	2f c9       	sub	r9,-4
80005800:	51 09       	stdsp	sp[0x40],r9
80005802:	5c 78       	castu.h	r8
80005804:	50 18       	stdsp	sp[0x4],r8
80005806:	c4 68       	rjmp	80005892 <_vfprintf_r+0x12ee>
80005808:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000580c:	40 3c       	lddsp	r12,sp[0xc]
8000580e:	58 0c       	cp.w	r12,0
80005810:	c1 d0       	breq	8000584a <_vfprintf_r+0x12a6>
80005812:	10 36       	cp.w	r6,r8
80005814:	c0 64       	brge	80005820 <_vfprintf_r+0x127c>
80005816:	fa cb f9 44 	sub	r11,sp,-1724
8000581a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000581e:	c1 f8       	rjmp	8000585c <_vfprintf_r+0x12b8>
80005820:	fa c8 f9 50 	sub	r8,sp,-1712
80005824:	1a d8       	st.w	--sp,r8
80005826:	fa c8 fa b8 	sub	r8,sp,-1352
8000582a:	0c 9b       	mov	r11,r6
8000582c:	1a d8       	st.w	--sp,r8
8000582e:	fa c8 fb b4 	sub	r8,sp,-1100
80005832:	04 9a       	mov	r10,r2
80005834:	1a d8       	st.w	--sp,r8
80005836:	08 9c       	mov	r12,r4
80005838:	fa c8 f9 40 	sub	r8,sp,-1728
8000583c:	fa c9 ff b4 	sub	r9,sp,-76
80005840:	fe b0 f5 1a 	rcall	80004274 <get_arg>
80005844:	2f dd       	sub	sp,-12
80005846:	78 0b       	ld.w	r11,r12[0x0]
80005848:	c2 48       	rjmp	80005890 <_vfprintf_r+0x12ec>
8000584a:	ee ca ff ff 	sub	r10,r7,-1
8000584e:	10 37       	cp.w	r7,r8
80005850:	c0 94       	brge	80005862 <_vfprintf_r+0x12be>
80005852:	fa c9 f9 44 	sub	r9,sp,-1724
80005856:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000585a:	14 97       	mov	r7,r10
8000585c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005860:	c1 88       	rjmp	80005890 <_vfprintf_r+0x12ec>
80005862:	41 09       	lddsp	r9,sp[0x40]
80005864:	59 f8       	cp.w	r8,31
80005866:	e0 89 00 11 	brgt	80005888 <_vfprintf_r+0x12e4>
8000586a:	f2 cb ff fc 	sub	r11,r9,-4
8000586e:	51 0b       	stdsp	sp[0x40],r11
80005870:	fa c6 f9 44 	sub	r6,sp,-1724
80005874:	72 0b       	ld.w	r11,r9[0x0]
80005876:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000587a:	f3 4b fd 88 	st.w	r9[-632],r11
8000587e:	2f f8       	sub	r8,-1
80005880:	14 97       	mov	r7,r10
80005882:	fb 48 06 b4 	st.w	sp[1716],r8
80005886:	c0 58       	rjmp	80005890 <_vfprintf_r+0x12ec>
80005888:	72 0b       	ld.w	r11,r9[0x0]
8000588a:	14 97       	mov	r7,r10
8000588c:	2f c9       	sub	r9,-4
8000588e:	51 09       	stdsp	sp[0x40],r9
80005890:	50 1b       	stdsp	sp[0x4],r11
80005892:	30 0e       	mov	lr,0
80005894:	30 18       	mov	r8,1
80005896:	50 0e       	stdsp	sp[0x0],lr
80005898:	c2 29       	rjmp	80005adc <_vfprintf_r+0x1538>
8000589a:	50 a7       	stdsp	sp[0x28],r7
8000589c:	50 80       	stdsp	sp[0x20],r0
8000589e:	0c 97       	mov	r7,r6
800058a0:	04 94       	mov	r4,r2
800058a2:	06 96       	mov	r6,r3
800058a4:	02 92       	mov	r2,r1
800058a6:	fe cc b8 3a 	sub	r12,pc,-18374
800058aa:	40 93       	lddsp	r3,sp[0x24]
800058ac:	10 90       	mov	r0,r8
800058ae:	40 41       	lddsp	r1,sp[0x10]
800058b0:	50 dc       	stdsp	sp[0x34],r12
800058b2:	ed b5 00 05 	bld	r5,0x5
800058b6:	c5 51       	brne	80005960 <_vfprintf_r+0x13bc>
800058b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800058bc:	40 3b       	lddsp	r11,sp[0xc]
800058be:	58 0b       	cp.w	r11,0
800058c0:	c2 20       	breq	80005904 <_vfprintf_r+0x1360>
800058c2:	10 36       	cp.w	r6,r8
800058c4:	c0 a4       	brge	800058d8 <_vfprintf_r+0x1334>
800058c6:	fa ca f9 44 	sub	r10,sp,-1724
800058ca:	f4 06 00 36 	add	r6,r10,r6<<0x3
800058ce:	ec e8 fd 88 	ld.d	r8,r6[-632]
800058d2:	fa e9 00 00 	st.d	sp[0],r8
800058d6:	cf 28       	rjmp	80005aba <_vfprintf_r+0x1516>
800058d8:	fa c8 f9 50 	sub	r8,sp,-1712
800058dc:	1a d8       	st.w	--sp,r8
800058de:	fa c8 fa b8 	sub	r8,sp,-1352
800058e2:	04 9a       	mov	r10,r2
800058e4:	1a d8       	st.w	--sp,r8
800058e6:	0c 9b       	mov	r11,r6
800058e8:	fa c8 fb b4 	sub	r8,sp,-1100
800058ec:	08 9c       	mov	r12,r4
800058ee:	1a d8       	st.w	--sp,r8
800058f0:	fa c8 f9 40 	sub	r8,sp,-1728
800058f4:	fa c9 ff b4 	sub	r9,sp,-76
800058f8:	fe b0 f4 be 	rcall	80004274 <get_arg>
800058fc:	2f dd       	sub	sp,-12
800058fe:	f8 ea 00 00 	ld.d	r10,r12[0]
80005902:	c0 c8       	rjmp	8000591a <_vfprintf_r+0x1376>
80005904:	ee ca ff ff 	sub	r10,r7,-1
80005908:	10 37       	cp.w	r7,r8
8000590a:	c0 b4       	brge	80005920 <_vfprintf_r+0x137c>
8000590c:	fa c9 f9 44 	sub	r9,sp,-1724
80005910:	14 97       	mov	r7,r10
80005912:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005916:	ec ea fd 88 	ld.d	r10,r6[-632]
8000591a:	fa eb 00 00 	st.d	sp[0],r10
8000591e:	cc e8       	rjmp	80005aba <_vfprintf_r+0x1516>
80005920:	41 09       	lddsp	r9,sp[0x40]
80005922:	59 f8       	cp.w	r8,31
80005924:	e0 89 00 16 	brgt	80005950 <_vfprintf_r+0x13ac>
80005928:	f2 e6 00 00 	ld.d	r6,r9[0]
8000592c:	f2 cb ff f8 	sub	r11,r9,-8
80005930:	fa e7 00 00 	st.d	sp[0],r6
80005934:	51 0b       	stdsp	sp[0x40],r11
80005936:	fa c6 f9 44 	sub	r6,sp,-1724
8000593a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000593e:	fa e6 00 00 	ld.d	r6,sp[0]
80005942:	f2 e7 fd 88 	st.d	r9[-632],r6
80005946:	2f f8       	sub	r8,-1
80005948:	14 97       	mov	r7,r10
8000594a:	fb 48 06 b4 	st.w	sp[1716],r8
8000594e:	cb 68       	rjmp	80005aba <_vfprintf_r+0x1516>
80005950:	f2 e6 00 00 	ld.d	r6,r9[0]
80005954:	2f 89       	sub	r9,-8
80005956:	fa e7 00 00 	st.d	sp[0],r6
8000595a:	51 09       	stdsp	sp[0x40],r9
8000595c:	14 97       	mov	r7,r10
8000595e:	ca e8       	rjmp	80005aba <_vfprintf_r+0x1516>
80005960:	ed b5 00 04 	bld	r5,0x4
80005964:	c1 71       	brne	80005992 <_vfprintf_r+0x13ee>
80005966:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000596a:	40 3e       	lddsp	lr,sp[0xc]
8000596c:	58 0e       	cp.w	lr,0
8000596e:	c0 80       	breq	8000597e <_vfprintf_r+0x13da>
80005970:	10 36       	cp.w	r6,r8
80005972:	c6 94       	brge	80005a44 <_vfprintf_r+0x14a0>
80005974:	fa cc f9 44 	sub	r12,sp,-1724
80005978:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000597c:	c8 28       	rjmp	80005a80 <_vfprintf_r+0x14dc>
8000597e:	ee ca ff ff 	sub	r10,r7,-1
80005982:	10 37       	cp.w	r7,r8
80005984:	e0 84 00 81 	brge	80005a86 <_vfprintf_r+0x14e2>
80005988:	fa cb f9 44 	sub	r11,sp,-1724
8000598c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005990:	c7 78       	rjmp	80005a7e <_vfprintf_r+0x14da>
80005992:	ed b5 00 06 	bld	r5,0x6
80005996:	c4 b1       	brne	80005a2c <_vfprintf_r+0x1488>
80005998:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000599c:	40 3c       	lddsp	r12,sp[0xc]
8000599e:	58 0c       	cp.w	r12,0
800059a0:	c1 d0       	breq	800059da <_vfprintf_r+0x1436>
800059a2:	10 36       	cp.w	r6,r8
800059a4:	c0 64       	brge	800059b0 <_vfprintf_r+0x140c>
800059a6:	fa cb f9 44 	sub	r11,sp,-1724
800059aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059ae:	c1 f8       	rjmp	800059ec <_vfprintf_r+0x1448>
800059b0:	fa c8 f9 50 	sub	r8,sp,-1712
800059b4:	1a d8       	st.w	--sp,r8
800059b6:	fa c8 fa b8 	sub	r8,sp,-1352
800059ba:	1a d8       	st.w	--sp,r8
800059bc:	fa c8 fb b4 	sub	r8,sp,-1100
800059c0:	1a d8       	st.w	--sp,r8
800059c2:	fa c8 f9 40 	sub	r8,sp,-1728
800059c6:	fa c9 ff b4 	sub	r9,sp,-76
800059ca:	04 9a       	mov	r10,r2
800059cc:	0c 9b       	mov	r11,r6
800059ce:	08 9c       	mov	r12,r4
800059d0:	fe b0 f4 52 	rcall	80004274 <get_arg>
800059d4:	2f dd       	sub	sp,-12
800059d6:	98 18       	ld.sh	r8,r12[0x2]
800059d8:	c2 78       	rjmp	80005a26 <_vfprintf_r+0x1482>
800059da:	ee ca ff ff 	sub	r10,r7,-1
800059de:	10 37       	cp.w	r7,r8
800059e0:	c0 a4       	brge	800059f4 <_vfprintf_r+0x1450>
800059e2:	fa c9 f9 44 	sub	r9,sp,-1724
800059e6:	14 97       	mov	r7,r10
800059e8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800059ec:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800059f0:	c1 b8       	rjmp	80005a26 <_vfprintf_r+0x1482>
800059f2:	d7 03       	nop
800059f4:	41 09       	lddsp	r9,sp[0x40]
800059f6:	59 f8       	cp.w	r8,31
800059f8:	e0 89 00 13 	brgt	80005a1e <_vfprintf_r+0x147a>
800059fc:	f2 cb ff fc 	sub	r11,r9,-4
80005a00:	51 0b       	stdsp	sp[0x40],r11
80005a02:	72 09       	ld.w	r9,r9[0x0]
80005a04:	fa c6 f9 44 	sub	r6,sp,-1724
80005a08:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005a0c:	2f f8       	sub	r8,-1
80005a0e:	f7 49 fd 88 	st.w	r11[-632],r9
80005a12:	fb 48 06 b4 	st.w	sp[1716],r8
80005a16:	14 97       	mov	r7,r10
80005a18:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005a1c:	c0 58       	rjmp	80005a26 <_vfprintf_r+0x1482>
80005a1e:	92 18       	ld.sh	r8,r9[0x2]
80005a20:	14 97       	mov	r7,r10
80005a22:	2f c9       	sub	r9,-4
80005a24:	51 09       	stdsp	sp[0x40],r9
80005a26:	5c 78       	castu.h	r8
80005a28:	50 18       	stdsp	sp[0x4],r8
80005a2a:	c4 68       	rjmp	80005ab6 <_vfprintf_r+0x1512>
80005a2c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a30:	40 3c       	lddsp	r12,sp[0xc]
80005a32:	58 0c       	cp.w	r12,0
80005a34:	c1 d0       	breq	80005a6e <_vfprintf_r+0x14ca>
80005a36:	10 36       	cp.w	r6,r8
80005a38:	c0 64       	brge	80005a44 <_vfprintf_r+0x14a0>
80005a3a:	fa cb f9 44 	sub	r11,sp,-1724
80005a3e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a42:	c1 f8       	rjmp	80005a80 <_vfprintf_r+0x14dc>
80005a44:	fa c8 f9 50 	sub	r8,sp,-1712
80005a48:	1a d8       	st.w	--sp,r8
80005a4a:	fa c8 fa b8 	sub	r8,sp,-1352
80005a4e:	0c 9b       	mov	r11,r6
80005a50:	1a d8       	st.w	--sp,r8
80005a52:	fa c8 fb b4 	sub	r8,sp,-1100
80005a56:	04 9a       	mov	r10,r2
80005a58:	1a d8       	st.w	--sp,r8
80005a5a:	08 9c       	mov	r12,r4
80005a5c:	fa c8 f9 40 	sub	r8,sp,-1728
80005a60:	fa c9 ff b4 	sub	r9,sp,-76
80005a64:	fe b0 f4 08 	rcall	80004274 <get_arg>
80005a68:	2f dd       	sub	sp,-12
80005a6a:	78 0b       	ld.w	r11,r12[0x0]
80005a6c:	c2 48       	rjmp	80005ab4 <_vfprintf_r+0x1510>
80005a6e:	ee ca ff ff 	sub	r10,r7,-1
80005a72:	10 37       	cp.w	r7,r8
80005a74:	c0 94       	brge	80005a86 <_vfprintf_r+0x14e2>
80005a76:	fa c9 f9 44 	sub	r9,sp,-1724
80005a7a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a7e:	14 97       	mov	r7,r10
80005a80:	ec fb fd 88 	ld.w	r11,r6[-632]
80005a84:	c1 88       	rjmp	80005ab4 <_vfprintf_r+0x1510>
80005a86:	41 09       	lddsp	r9,sp[0x40]
80005a88:	59 f8       	cp.w	r8,31
80005a8a:	e0 89 00 11 	brgt	80005aac <_vfprintf_r+0x1508>
80005a8e:	f2 cb ff fc 	sub	r11,r9,-4
80005a92:	51 0b       	stdsp	sp[0x40],r11
80005a94:	fa c6 f9 44 	sub	r6,sp,-1724
80005a98:	72 0b       	ld.w	r11,r9[0x0]
80005a9a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005a9e:	f3 4b fd 88 	st.w	r9[-632],r11
80005aa2:	2f f8       	sub	r8,-1
80005aa4:	14 97       	mov	r7,r10
80005aa6:	fb 48 06 b4 	st.w	sp[1716],r8
80005aaa:	c0 58       	rjmp	80005ab4 <_vfprintf_r+0x1510>
80005aac:	72 0b       	ld.w	r11,r9[0x0]
80005aae:	14 97       	mov	r7,r10
80005ab0:	2f c9       	sub	r9,-4
80005ab2:	51 09       	stdsp	sp[0x40],r9
80005ab4:	50 1b       	stdsp	sp[0x4],r11
80005ab6:	30 0e       	mov	lr,0
80005ab8:	50 0e       	stdsp	sp[0x0],lr
80005aba:	40 08       	lddsp	r8,sp[0x0]
80005abc:	40 1c       	lddsp	r12,sp[0x4]
80005abe:	18 48       	or	r8,r12
80005ac0:	5f 19       	srne	r9
80005ac2:	0a 98       	mov	r8,r5
80005ac4:	eb e9 00 09 	and	r9,r5,r9
80005ac8:	a1 b8       	sbr	r8,0x1
80005aca:	58 09       	cp.w	r9,0
80005acc:	c0 70       	breq	80005ada <_vfprintf_r+0x1536>
80005ace:	10 95       	mov	r5,r8
80005ad0:	fb 60 06 b9 	st.b	sp[1721],r0
80005ad4:	33 08       	mov	r8,48
80005ad6:	fb 68 06 b8 	st.b	sp[1720],r8
80005ada:	30 28       	mov	r8,2
80005adc:	30 09       	mov	r9,0
80005ade:	fb 69 06 bb 	st.b	sp[1723],r9
80005ae2:	0a 99       	mov	r9,r5
80005ae4:	a7 d9       	cbr	r9,0x7
80005ae6:	40 2b       	lddsp	r11,sp[0x8]
80005ae8:	40 16       	lddsp	r6,sp[0x4]
80005aea:	58 0b       	cp.w	r11,0
80005aec:	5f 1a       	srne	r10
80005aee:	f2 05 17 40 	movge	r5,r9
80005af2:	fa c2 f9 78 	sub	r2,sp,-1672
80005af6:	40 09       	lddsp	r9,sp[0x0]
80005af8:	0c 49       	or	r9,r6
80005afa:	5f 19       	srne	r9
80005afc:	f5 e9 10 09 	or	r9,r10,r9
80005b00:	c5 c0       	breq	80005bb8 <_vfprintf_r+0x1614>
80005b02:	30 19       	mov	r9,1
80005b04:	f2 08 18 00 	cp.b	r8,r9
80005b08:	c0 60       	breq	80005b14 <_vfprintf_r+0x1570>
80005b0a:	30 29       	mov	r9,2
80005b0c:	f2 08 18 00 	cp.b	r8,r9
80005b10:	c0 41       	brne	80005b18 <_vfprintf_r+0x1574>
80005b12:	c3 c8       	rjmp	80005b8a <_vfprintf_r+0x15e6>
80005b14:	04 96       	mov	r6,r2
80005b16:	c3 08       	rjmp	80005b76 <_vfprintf_r+0x15d2>
80005b18:	04 96       	mov	r6,r2
80005b1a:	fa e8 00 00 	ld.d	r8,sp[0]
80005b1e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005b22:	2d 0a       	sub	r10,-48
80005b24:	0c fa       	st.b	--r6,r10
80005b26:	f0 0b 16 03 	lsr	r11,r8,0x3
80005b2a:	f2 0c 16 03 	lsr	r12,r9,0x3
80005b2e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005b32:	18 99       	mov	r9,r12
80005b34:	16 98       	mov	r8,r11
80005b36:	58 08       	cp.w	r8,0
80005b38:	5c 29       	cpc	r9
80005b3a:	cf 21       	brne	80005b1e <_vfprintf_r+0x157a>
80005b3c:	fa e9 00 00 	st.d	sp[0],r8
80005b40:	ed b5 00 00 	bld	r5,0x0
80005b44:	c4 51       	brne	80005bce <_vfprintf_r+0x162a>
80005b46:	33 09       	mov	r9,48
80005b48:	f2 0a 18 00 	cp.b	r10,r9
80005b4c:	c4 10       	breq	80005bce <_vfprintf_r+0x162a>
80005b4e:	0c f9       	st.b	--r6,r9
80005b50:	c3 f8       	rjmp	80005bce <_vfprintf_r+0x162a>
80005b52:	fa ea 00 00 	ld.d	r10,sp[0]
80005b56:	30 a8       	mov	r8,10
80005b58:	30 09       	mov	r9,0
80005b5a:	e0 a0 1c d3 	rcall	80009500 <__avr32_umod64>
80005b5e:	30 a8       	mov	r8,10
80005b60:	2d 0a       	sub	r10,-48
80005b62:	30 09       	mov	r9,0
80005b64:	ac 8a       	st.b	r6[0x0],r10
80005b66:	fa ea 00 00 	ld.d	r10,sp[0]
80005b6a:	e0 a0 1b 99 	rcall	8000929c <__avr32_udiv64>
80005b6e:	16 99       	mov	r9,r11
80005b70:	14 98       	mov	r8,r10
80005b72:	fa e9 00 00 	st.d	sp[0],r8
80005b76:	20 16       	sub	r6,1
80005b78:	fa ea 00 00 	ld.d	r10,sp[0]
80005b7c:	58 9a       	cp.w	r10,9
80005b7e:	5c 2b       	cpc	r11
80005b80:	fe 9b ff e9 	brhi	80005b52 <_vfprintf_r+0x15ae>
80005b84:	1b f8       	ld.ub	r8,sp[0x7]
80005b86:	2d 08       	sub	r8,-48
80005b88:	c2 08       	rjmp	80005bc8 <_vfprintf_r+0x1624>
80005b8a:	04 96       	mov	r6,r2
80005b8c:	fa e8 00 00 	ld.d	r8,sp[0]
80005b90:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005b94:	40 de       	lddsp	lr,sp[0x34]
80005b96:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005b9a:	0c fa       	st.b	--r6,r10
80005b9c:	f2 0b 16 04 	lsr	r11,r9,0x4
80005ba0:	f0 0a 16 04 	lsr	r10,r8,0x4
80005ba4:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005ba8:	16 99       	mov	r9,r11
80005baa:	14 98       	mov	r8,r10
80005bac:	58 08       	cp.w	r8,0
80005bae:	5c 29       	cpc	r9
80005bb0:	cf 01       	brne	80005b90 <_vfprintf_r+0x15ec>
80005bb2:	fa e9 00 00 	st.d	sp[0],r8
80005bb6:	c0 c8       	rjmp	80005bce <_vfprintf_r+0x162a>
80005bb8:	58 08       	cp.w	r8,0
80005bba:	c0 91       	brne	80005bcc <_vfprintf_r+0x1628>
80005bbc:	ed b5 00 00 	bld	r5,0x0
80005bc0:	c0 61       	brne	80005bcc <_vfprintf_r+0x1628>
80005bc2:	fa c6 f9 79 	sub	r6,sp,-1671
80005bc6:	33 08       	mov	r8,48
80005bc8:	ac 88       	st.b	r6[0x0],r8
80005bca:	c0 28       	rjmp	80005bce <_vfprintf_r+0x162a>
80005bcc:	04 96       	mov	r6,r2
80005bce:	0c 12       	sub	r2,r6
80005bd0:	c1 c8       	rjmp	80005c08 <_vfprintf_r+0x1664>
80005bd2:	50 a7       	stdsp	sp[0x28],r7
80005bd4:	50 80       	stdsp	sp[0x20],r0
80005bd6:	40 93       	lddsp	r3,sp[0x24]
80005bd8:	0c 97       	mov	r7,r6
80005bda:	10 90       	mov	r0,r8
80005bdc:	04 94       	mov	r4,r2
80005bde:	40 41       	lddsp	r1,sp[0x10]
80005be0:	58 08       	cp.w	r8,0
80005be2:	e0 80 04 4f 	breq	80006480 <_vfprintf_r+0x1edc>
80005be6:	fb 68 06 60 	st.b	sp[1632],r8
80005bea:	30 0c       	mov	r12,0
80005bec:	30 08       	mov	r8,0
80005bee:	30 12       	mov	r2,1
80005bf0:	fb 68 06 bb 	st.b	sp[1723],r8
80005bf4:	50 2c       	stdsp	sp[0x8],r12
80005bf6:	fa c6 f9 a0 	sub	r6,sp,-1632
80005bfa:	c0 78       	rjmp	80005c08 <_vfprintf_r+0x1664>
80005bfc:	30 0b       	mov	r11,0
80005bfe:	50 2b       	stdsp	sp[0x8],r11
80005c00:	c0 48       	rjmp	80005c08 <_vfprintf_r+0x1664>
80005c02:	40 22       	lddsp	r2,sp[0x8]
80005c04:	30 0a       	mov	r10,0
80005c06:	50 2a       	stdsp	sp[0x8],r10
80005c08:	40 29       	lddsp	r9,sp[0x8]
80005c0a:	e4 09 0c 49 	max	r9,r2,r9
80005c0e:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005c12:	50 39       	stdsp	sp[0xc],r9
80005c14:	0a 9e       	mov	lr,r5
80005c16:	30 09       	mov	r9,0
80005c18:	e2 1e 00 02 	andl	lr,0x2,COH
80005c1c:	f2 08 18 00 	cp.b	r8,r9
80005c20:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005c24:	f7 b8 01 ff 	subne	r8,-1
80005c28:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005c2c:	0a 9b       	mov	r11,r5
80005c2e:	58 0e       	cp.w	lr,0
80005c30:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005c34:	f7 bc 01 fe 	subne	r12,-2
80005c38:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005c3c:	e2 1b 00 84 	andl	r11,0x84,COH
80005c40:	50 fe       	stdsp	sp[0x3c],lr
80005c42:	50 9b       	stdsp	sp[0x24],r11
80005c44:	c4 71       	brne	80005cd2 <_vfprintf_r+0x172e>
80005c46:	40 8a       	lddsp	r10,sp[0x20]
80005c48:	40 39       	lddsp	r9,sp[0xc]
80005c4a:	12 1a       	sub	r10,r9
80005c4c:	50 4a       	stdsp	sp[0x10],r10
80005c4e:	58 0a       	cp.w	r10,0
80005c50:	e0 89 00 20 	brgt	80005c90 <_vfprintf_r+0x16ec>
80005c54:	c3 f8       	rjmp	80005cd2 <_vfprintf_r+0x172e>
80005c56:	2f 09       	sub	r9,-16
80005c58:	2f f8       	sub	r8,-1
80005c5a:	fe ce bb d6 	sub	lr,pc,-17450
80005c5e:	31 0c       	mov	r12,16
80005c60:	fb 49 06 90 	st.w	sp[1680],r9
80005c64:	87 0e       	st.w	r3[0x0],lr
80005c66:	87 1c       	st.w	r3[0x4],r12
80005c68:	fb 48 06 8c 	st.w	sp[1676],r8
80005c6c:	58 78       	cp.w	r8,7
80005c6e:	e0 89 00 04 	brgt	80005c76 <_vfprintf_r+0x16d2>
80005c72:	2f 83       	sub	r3,-8
80005c74:	c0 b8       	rjmp	80005c8a <_vfprintf_r+0x16e6>
80005c76:	fa ca f9 78 	sub	r10,sp,-1672
80005c7a:	02 9b       	mov	r11,r1
80005c7c:	08 9c       	mov	r12,r4
80005c7e:	fe b0 f4 85 	rcall	80004588 <__sprint_r>
80005c82:	e0 81 04 10 	brne	800064a2 <_vfprintf_r+0x1efe>
80005c86:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c8a:	40 4b       	lddsp	r11,sp[0x10]
80005c8c:	21 0b       	sub	r11,16
80005c8e:	50 4b       	stdsp	sp[0x10],r11
80005c90:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c94:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c98:	fe ca bc 14 	sub	r10,pc,-17388
80005c9c:	40 4e       	lddsp	lr,sp[0x10]
80005c9e:	59 0e       	cp.w	lr,16
80005ca0:	fe 99 ff db 	brgt	80005c56 <_vfprintf_r+0x16b2>
80005ca4:	1c 09       	add	r9,lr
80005ca6:	2f f8       	sub	r8,-1
80005ca8:	87 0a       	st.w	r3[0x0],r10
80005caa:	fb 49 06 90 	st.w	sp[1680],r9
80005cae:	87 1e       	st.w	r3[0x4],lr
80005cb0:	fb 48 06 8c 	st.w	sp[1676],r8
80005cb4:	58 78       	cp.w	r8,7
80005cb6:	e0 89 00 04 	brgt	80005cbe <_vfprintf_r+0x171a>
80005cba:	2f 83       	sub	r3,-8
80005cbc:	c0 b8       	rjmp	80005cd2 <_vfprintf_r+0x172e>
80005cbe:	fa ca f9 78 	sub	r10,sp,-1672
80005cc2:	02 9b       	mov	r11,r1
80005cc4:	08 9c       	mov	r12,r4
80005cc6:	fe b0 f4 61 	rcall	80004588 <__sprint_r>
80005cca:	e0 81 03 ec 	brne	800064a2 <_vfprintf_r+0x1efe>
80005cce:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cd2:	30 09       	mov	r9,0
80005cd4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005cd8:	f2 08 18 00 	cp.b	r8,r9
80005cdc:	c1 f0       	breq	80005d1a <_vfprintf_r+0x1776>
80005cde:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ce2:	fa c9 f9 45 	sub	r9,sp,-1723
80005ce6:	2f f8       	sub	r8,-1
80005ce8:	87 09       	st.w	r3[0x0],r9
80005cea:	fb 48 06 90 	st.w	sp[1680],r8
80005cee:	30 19       	mov	r9,1
80005cf0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cf4:	87 19       	st.w	r3[0x4],r9
80005cf6:	2f f8       	sub	r8,-1
80005cf8:	fb 48 06 8c 	st.w	sp[1676],r8
80005cfc:	58 78       	cp.w	r8,7
80005cfe:	e0 89 00 04 	brgt	80005d06 <_vfprintf_r+0x1762>
80005d02:	2f 83       	sub	r3,-8
80005d04:	c0 b8       	rjmp	80005d1a <_vfprintf_r+0x1776>
80005d06:	fa ca f9 78 	sub	r10,sp,-1672
80005d0a:	02 9b       	mov	r11,r1
80005d0c:	08 9c       	mov	r12,r4
80005d0e:	fe b0 f4 3d 	rcall	80004588 <__sprint_r>
80005d12:	e0 81 03 c8 	brne	800064a2 <_vfprintf_r+0x1efe>
80005d16:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d1a:	40 fc       	lddsp	r12,sp[0x3c]
80005d1c:	58 0c       	cp.w	r12,0
80005d1e:	c1 f0       	breq	80005d5c <_vfprintf_r+0x17b8>
80005d20:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d24:	fa c9 f9 48 	sub	r9,sp,-1720
80005d28:	2f e8       	sub	r8,-2
80005d2a:	87 09       	st.w	r3[0x0],r9
80005d2c:	fb 48 06 90 	st.w	sp[1680],r8
80005d30:	30 29       	mov	r9,2
80005d32:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d36:	87 19       	st.w	r3[0x4],r9
80005d38:	2f f8       	sub	r8,-1
80005d3a:	fb 48 06 8c 	st.w	sp[1676],r8
80005d3e:	58 78       	cp.w	r8,7
80005d40:	e0 89 00 04 	brgt	80005d48 <_vfprintf_r+0x17a4>
80005d44:	2f 83       	sub	r3,-8
80005d46:	c0 b8       	rjmp	80005d5c <_vfprintf_r+0x17b8>
80005d48:	fa ca f9 78 	sub	r10,sp,-1672
80005d4c:	02 9b       	mov	r11,r1
80005d4e:	08 9c       	mov	r12,r4
80005d50:	fe b0 f4 1c 	rcall	80004588 <__sprint_r>
80005d54:	e0 81 03 a7 	brne	800064a2 <_vfprintf_r+0x1efe>
80005d58:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d5c:	40 9b       	lddsp	r11,sp[0x24]
80005d5e:	e0 4b 00 80 	cp.w	r11,128
80005d62:	c4 71       	brne	80005df0 <_vfprintf_r+0x184c>
80005d64:	40 8a       	lddsp	r10,sp[0x20]
80005d66:	40 39       	lddsp	r9,sp[0xc]
80005d68:	12 1a       	sub	r10,r9
80005d6a:	50 4a       	stdsp	sp[0x10],r10
80005d6c:	58 0a       	cp.w	r10,0
80005d6e:	e0 89 00 20 	brgt	80005dae <_vfprintf_r+0x180a>
80005d72:	c3 f8       	rjmp	80005df0 <_vfprintf_r+0x184c>
80005d74:	2f 09       	sub	r9,-16
80005d76:	2f f8       	sub	r8,-1
80005d78:	fe ce bc e4 	sub	lr,pc,-17180
80005d7c:	31 0c       	mov	r12,16
80005d7e:	fb 49 06 90 	st.w	sp[1680],r9
80005d82:	87 0e       	st.w	r3[0x0],lr
80005d84:	87 1c       	st.w	r3[0x4],r12
80005d86:	fb 48 06 8c 	st.w	sp[1676],r8
80005d8a:	58 78       	cp.w	r8,7
80005d8c:	e0 89 00 04 	brgt	80005d94 <_vfprintf_r+0x17f0>
80005d90:	2f 83       	sub	r3,-8
80005d92:	c0 b8       	rjmp	80005da8 <_vfprintf_r+0x1804>
80005d94:	fa ca f9 78 	sub	r10,sp,-1672
80005d98:	02 9b       	mov	r11,r1
80005d9a:	08 9c       	mov	r12,r4
80005d9c:	fe b0 f3 f6 	rcall	80004588 <__sprint_r>
80005da0:	e0 81 03 81 	brne	800064a2 <_vfprintf_r+0x1efe>
80005da4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005da8:	40 4b       	lddsp	r11,sp[0x10]
80005daa:	21 0b       	sub	r11,16
80005dac:	50 4b       	stdsp	sp[0x10],r11
80005dae:	fa f9 06 90 	ld.w	r9,sp[1680]
80005db2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005db6:	fe ca bd 22 	sub	r10,pc,-17118
80005dba:	40 4e       	lddsp	lr,sp[0x10]
80005dbc:	59 0e       	cp.w	lr,16
80005dbe:	fe 99 ff db 	brgt	80005d74 <_vfprintf_r+0x17d0>
80005dc2:	1c 09       	add	r9,lr
80005dc4:	2f f8       	sub	r8,-1
80005dc6:	87 0a       	st.w	r3[0x0],r10
80005dc8:	fb 49 06 90 	st.w	sp[1680],r9
80005dcc:	87 1e       	st.w	r3[0x4],lr
80005dce:	fb 48 06 8c 	st.w	sp[1676],r8
80005dd2:	58 78       	cp.w	r8,7
80005dd4:	e0 89 00 04 	brgt	80005ddc <_vfprintf_r+0x1838>
80005dd8:	2f 83       	sub	r3,-8
80005dda:	c0 b8       	rjmp	80005df0 <_vfprintf_r+0x184c>
80005ddc:	fa ca f9 78 	sub	r10,sp,-1672
80005de0:	02 9b       	mov	r11,r1
80005de2:	08 9c       	mov	r12,r4
80005de4:	fe b0 f3 d2 	rcall	80004588 <__sprint_r>
80005de8:	e0 81 03 5d 	brne	800064a2 <_vfprintf_r+0x1efe>
80005dec:	fa c3 f9 e0 	sub	r3,sp,-1568
80005df0:	40 2c       	lddsp	r12,sp[0x8]
80005df2:	04 1c       	sub	r12,r2
80005df4:	50 2c       	stdsp	sp[0x8],r12
80005df6:	58 0c       	cp.w	r12,0
80005df8:	e0 89 00 20 	brgt	80005e38 <_vfprintf_r+0x1894>
80005dfc:	c3 f8       	rjmp	80005e7a <_vfprintf_r+0x18d6>
80005dfe:	2f 09       	sub	r9,-16
80005e00:	2f f8       	sub	r8,-1
80005e02:	fe cb bd 6e 	sub	r11,pc,-17042
80005e06:	31 0a       	mov	r10,16
80005e08:	fb 49 06 90 	st.w	sp[1680],r9
80005e0c:	87 0b       	st.w	r3[0x0],r11
80005e0e:	87 1a       	st.w	r3[0x4],r10
80005e10:	fb 48 06 8c 	st.w	sp[1676],r8
80005e14:	58 78       	cp.w	r8,7
80005e16:	e0 89 00 04 	brgt	80005e1e <_vfprintf_r+0x187a>
80005e1a:	2f 83       	sub	r3,-8
80005e1c:	c0 b8       	rjmp	80005e32 <_vfprintf_r+0x188e>
80005e1e:	fa ca f9 78 	sub	r10,sp,-1672
80005e22:	02 9b       	mov	r11,r1
80005e24:	08 9c       	mov	r12,r4
80005e26:	fe b0 f3 b1 	rcall	80004588 <__sprint_r>
80005e2a:	e0 81 03 3c 	brne	800064a2 <_vfprintf_r+0x1efe>
80005e2e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e32:	40 29       	lddsp	r9,sp[0x8]
80005e34:	21 09       	sub	r9,16
80005e36:	50 29       	stdsp	sp[0x8],r9
80005e38:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e3c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e40:	fe ca bd ac 	sub	r10,pc,-16980
80005e44:	40 2e       	lddsp	lr,sp[0x8]
80005e46:	59 0e       	cp.w	lr,16
80005e48:	fe 99 ff db 	brgt	80005dfe <_vfprintf_r+0x185a>
80005e4c:	1c 09       	add	r9,lr
80005e4e:	2f f8       	sub	r8,-1
80005e50:	87 0a       	st.w	r3[0x0],r10
80005e52:	fb 49 06 90 	st.w	sp[1680],r9
80005e56:	87 1e       	st.w	r3[0x4],lr
80005e58:	fb 48 06 8c 	st.w	sp[1676],r8
80005e5c:	58 78       	cp.w	r8,7
80005e5e:	e0 89 00 04 	brgt	80005e66 <_vfprintf_r+0x18c2>
80005e62:	2f 83       	sub	r3,-8
80005e64:	c0 b8       	rjmp	80005e7a <_vfprintf_r+0x18d6>
80005e66:	fa ca f9 78 	sub	r10,sp,-1672
80005e6a:	02 9b       	mov	r11,r1
80005e6c:	08 9c       	mov	r12,r4
80005e6e:	fe b0 f3 8d 	rcall	80004588 <__sprint_r>
80005e72:	e0 81 03 18 	brne	800064a2 <_vfprintf_r+0x1efe>
80005e76:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e7a:	ed b5 00 08 	bld	r5,0x8
80005e7e:	c0 b0       	breq	80005e94 <_vfprintf_r+0x18f0>
80005e80:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e84:	87 12       	st.w	r3[0x4],r2
80005e86:	87 06       	st.w	r3[0x0],r6
80005e88:	f0 02 00 02 	add	r2,r8,r2
80005e8c:	fb 42 06 90 	st.w	sp[1680],r2
80005e90:	e0 8f 01 d4 	bral	80006238 <_vfprintf_r+0x1c94>
80005e94:	e0 40 00 65 	cp.w	r0,101
80005e98:	e0 8a 01 d6 	brle	80006244 <_vfprintf_r+0x1ca0>
80005e9c:	30 08       	mov	r8,0
80005e9e:	30 09       	mov	r9,0
80005ea0:	40 5b       	lddsp	r11,sp[0x14]
80005ea2:	40 7a       	lddsp	r10,sp[0x1c]
80005ea4:	e0 a0 17 f5 	rcall	80008e8e <__avr32_f64_cmp_eq>
80005ea8:	c7 90       	breq	80005f9a <_vfprintf_r+0x19f6>
80005eaa:	fa f8 06 90 	ld.w	r8,sp[1680]
80005eae:	fe c9 be 2e 	sub	r9,pc,-16850
80005eb2:	2f f8       	sub	r8,-1
80005eb4:	87 09       	st.w	r3[0x0],r9
80005eb6:	fb 48 06 90 	st.w	sp[1680],r8
80005eba:	30 19       	mov	r9,1
80005ebc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ec0:	87 19       	st.w	r3[0x4],r9
80005ec2:	2f f8       	sub	r8,-1
80005ec4:	fb 48 06 8c 	st.w	sp[1676],r8
80005ec8:	58 78       	cp.w	r8,7
80005eca:	e0 89 00 05 	brgt	80005ed4 <_vfprintf_r+0x1930>
80005ece:	2f 83       	sub	r3,-8
80005ed0:	c0 c8       	rjmp	80005ee8 <_vfprintf_r+0x1944>
80005ed2:	d7 03       	nop
80005ed4:	fa ca f9 78 	sub	r10,sp,-1672
80005ed8:	02 9b       	mov	r11,r1
80005eda:	08 9c       	mov	r12,r4
80005edc:	fe b0 f3 56 	rcall	80004588 <__sprint_r>
80005ee0:	e0 81 02 e1 	brne	800064a2 <_vfprintf_r+0x1efe>
80005ee4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ee8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005eec:	40 6c       	lddsp	r12,sp[0x18]
80005eee:	18 38       	cp.w	r8,r12
80005ef0:	c0 55       	brlt	80005efa <_vfprintf_r+0x1956>
80005ef2:	ed b5 00 00 	bld	r5,0x0
80005ef6:	e0 81 02 6b 	brne	800063cc <_vfprintf_r+0x1e28>
80005efa:	fa f8 06 90 	ld.w	r8,sp[1680]
80005efe:	2f f8       	sub	r8,-1
80005f00:	40 cb       	lddsp	r11,sp[0x30]
80005f02:	fb 48 06 90 	st.w	sp[1680],r8
80005f06:	30 19       	mov	r9,1
80005f08:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f0c:	87 0b       	st.w	r3[0x0],r11
80005f0e:	2f f8       	sub	r8,-1
80005f10:	87 19       	st.w	r3[0x4],r9
80005f12:	fb 48 06 8c 	st.w	sp[1676],r8
80005f16:	58 78       	cp.w	r8,7
80005f18:	e0 89 00 04 	brgt	80005f20 <_vfprintf_r+0x197c>
80005f1c:	2f 83       	sub	r3,-8
80005f1e:	c0 b8       	rjmp	80005f34 <_vfprintf_r+0x1990>
80005f20:	fa ca f9 78 	sub	r10,sp,-1672
80005f24:	02 9b       	mov	r11,r1
80005f26:	08 9c       	mov	r12,r4
80005f28:	fe b0 f3 30 	rcall	80004588 <__sprint_r>
80005f2c:	e0 81 02 bb 	brne	800064a2 <_vfprintf_r+0x1efe>
80005f30:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f34:	40 66       	lddsp	r6,sp[0x18]
80005f36:	20 16       	sub	r6,1
80005f38:	58 06       	cp.w	r6,0
80005f3a:	e0 89 00 1d 	brgt	80005f74 <_vfprintf_r+0x19d0>
80005f3e:	e0 8f 02 47 	bral	800063cc <_vfprintf_r+0x1e28>
80005f42:	2f 09       	sub	r9,-16
80005f44:	2f f8       	sub	r8,-1
80005f46:	fb 49 06 90 	st.w	sp[1680],r9
80005f4a:	87 02       	st.w	r3[0x0],r2
80005f4c:	87 10       	st.w	r3[0x4],r0
80005f4e:	fb 48 06 8c 	st.w	sp[1676],r8
80005f52:	58 78       	cp.w	r8,7
80005f54:	e0 89 00 04 	brgt	80005f5c <_vfprintf_r+0x19b8>
80005f58:	2f 83       	sub	r3,-8
80005f5a:	c0 b8       	rjmp	80005f70 <_vfprintf_r+0x19cc>
80005f5c:	fa ca f9 78 	sub	r10,sp,-1672
80005f60:	02 9b       	mov	r11,r1
80005f62:	08 9c       	mov	r12,r4
80005f64:	fe b0 f3 12 	rcall	80004588 <__sprint_r>
80005f68:	e0 81 02 9d 	brne	800064a2 <_vfprintf_r+0x1efe>
80005f6c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f70:	21 06       	sub	r6,16
80005f72:	c0 48       	rjmp	80005f7a <_vfprintf_r+0x19d6>
80005f74:	fe c2 be e0 	sub	r2,pc,-16672
80005f78:	31 00       	mov	r0,16
80005f7a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f7e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f82:	fe ca be ee 	sub	r10,pc,-16658
80005f86:	59 06       	cp.w	r6,16
80005f88:	fe 99 ff dd 	brgt	80005f42 <_vfprintf_r+0x199e>
80005f8c:	0c 09       	add	r9,r6
80005f8e:	87 0a       	st.w	r3[0x0],r10
80005f90:	fb 49 06 90 	st.w	sp[1680],r9
80005f94:	2f f8       	sub	r8,-1
80005f96:	87 16       	st.w	r3[0x4],r6
80005f98:	c5 39       	rjmp	8000623e <_vfprintf_r+0x1c9a>
80005f9a:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005f9e:	58 0a       	cp.w	r10,0
80005fa0:	e0 89 00 92 	brgt	800060c4 <_vfprintf_r+0x1b20>
80005fa4:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fa8:	fe c9 bf 28 	sub	r9,pc,-16600
80005fac:	2f f8       	sub	r8,-1
80005fae:	87 09       	st.w	r3[0x0],r9
80005fb0:	fb 48 06 90 	st.w	sp[1680],r8
80005fb4:	30 19       	mov	r9,1
80005fb6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fba:	87 19       	st.w	r3[0x4],r9
80005fbc:	2f f8       	sub	r8,-1
80005fbe:	fb 48 06 8c 	st.w	sp[1676],r8
80005fc2:	58 78       	cp.w	r8,7
80005fc4:	e0 89 00 04 	brgt	80005fcc <_vfprintf_r+0x1a28>
80005fc8:	2f 83       	sub	r3,-8
80005fca:	c0 b8       	rjmp	80005fe0 <_vfprintf_r+0x1a3c>
80005fcc:	fa ca f9 78 	sub	r10,sp,-1672
80005fd0:	02 9b       	mov	r11,r1
80005fd2:	08 9c       	mov	r12,r4
80005fd4:	fe b0 f2 da 	rcall	80004588 <__sprint_r>
80005fd8:	e0 81 02 65 	brne	800064a2 <_vfprintf_r+0x1efe>
80005fdc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fe0:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005fe4:	58 08       	cp.w	r8,0
80005fe6:	c0 81       	brne	80005ff6 <_vfprintf_r+0x1a52>
80005fe8:	40 6a       	lddsp	r10,sp[0x18]
80005fea:	58 0a       	cp.w	r10,0
80005fec:	c0 51       	brne	80005ff6 <_vfprintf_r+0x1a52>
80005fee:	ed b5 00 00 	bld	r5,0x0
80005ff2:	e0 81 01 ed 	brne	800063cc <_vfprintf_r+0x1e28>
80005ff6:	40 c9       	lddsp	r9,sp[0x30]
80005ff8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ffc:	2f f8       	sub	r8,-1
80005ffe:	87 09       	st.w	r3[0x0],r9
80006000:	fb 48 06 90 	st.w	sp[1680],r8
80006004:	30 19       	mov	r9,1
80006006:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000600a:	87 19       	st.w	r3[0x4],r9
8000600c:	2f f8       	sub	r8,-1
8000600e:	fb 48 06 8c 	st.w	sp[1676],r8
80006012:	58 78       	cp.w	r8,7
80006014:	e0 89 00 04 	brgt	8000601c <_vfprintf_r+0x1a78>
80006018:	2f 83       	sub	r3,-8
8000601a:	c0 b8       	rjmp	80006030 <_vfprintf_r+0x1a8c>
8000601c:	fa ca f9 78 	sub	r10,sp,-1672
80006020:	02 9b       	mov	r11,r1
80006022:	08 9c       	mov	r12,r4
80006024:	fe b0 f2 b2 	rcall	80004588 <__sprint_r>
80006028:	e0 81 02 3d 	brne	800064a2 <_vfprintf_r+0x1efe>
8000602c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006030:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006034:	5c 32       	neg	r2
80006036:	58 02       	cp.w	r2,0
80006038:	e0 89 00 1d 	brgt	80006072 <_vfprintf_r+0x1ace>
8000603c:	c3 d8       	rjmp	800060b6 <_vfprintf_r+0x1b12>
8000603e:	2f 09       	sub	r9,-16
80006040:	2f f8       	sub	r8,-1
80006042:	31 0e       	mov	lr,16
80006044:	fb 49 06 90 	st.w	sp[1680],r9
80006048:	87 00       	st.w	r3[0x0],r0
8000604a:	87 1e       	st.w	r3[0x4],lr
8000604c:	fb 48 06 8c 	st.w	sp[1676],r8
80006050:	58 78       	cp.w	r8,7
80006052:	e0 89 00 04 	brgt	8000605a <_vfprintf_r+0x1ab6>
80006056:	2f 83       	sub	r3,-8
80006058:	c0 b8       	rjmp	8000606e <_vfprintf_r+0x1aca>
8000605a:	fa ca f9 78 	sub	r10,sp,-1672
8000605e:	02 9b       	mov	r11,r1
80006060:	08 9c       	mov	r12,r4
80006062:	fe b0 f2 93 	rcall	80004588 <__sprint_r>
80006066:	e0 81 02 1e 	brne	800064a2 <_vfprintf_r+0x1efe>
8000606a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000606e:	21 02       	sub	r2,16
80006070:	c0 38       	rjmp	80006076 <_vfprintf_r+0x1ad2>
80006072:	fe c0 bf de 	sub	r0,pc,-16418
80006076:	fa f9 06 90 	ld.w	r9,sp[1680]
8000607a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000607e:	fe ca bf ea 	sub	r10,pc,-16406
80006082:	59 02       	cp.w	r2,16
80006084:	fe 99 ff dd 	brgt	8000603e <_vfprintf_r+0x1a9a>
80006088:	04 09       	add	r9,r2
8000608a:	2f f8       	sub	r8,-1
8000608c:	87 0a       	st.w	r3[0x0],r10
8000608e:	fb 49 06 90 	st.w	sp[1680],r9
80006092:	87 12       	st.w	r3[0x4],r2
80006094:	fb 48 06 8c 	st.w	sp[1676],r8
80006098:	58 78       	cp.w	r8,7
8000609a:	e0 89 00 04 	brgt	800060a2 <_vfprintf_r+0x1afe>
8000609e:	2f 83       	sub	r3,-8
800060a0:	c0 b8       	rjmp	800060b6 <_vfprintf_r+0x1b12>
800060a2:	fa ca f9 78 	sub	r10,sp,-1672
800060a6:	02 9b       	mov	r11,r1
800060a8:	08 9c       	mov	r12,r4
800060aa:	fe b0 f2 6f 	rcall	80004588 <__sprint_r>
800060ae:	e0 81 01 fa 	brne	800064a2 <_vfprintf_r+0x1efe>
800060b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800060b6:	40 6c       	lddsp	r12,sp[0x18]
800060b8:	fa f8 06 90 	ld.w	r8,sp[1680]
800060bc:	87 06       	st.w	r3[0x0],r6
800060be:	87 1c       	st.w	r3[0x4],r12
800060c0:	18 08       	add	r8,r12
800060c2:	cb 98       	rjmp	80006234 <_vfprintf_r+0x1c90>
800060c4:	fa f9 06 90 	ld.w	r9,sp[1680]
800060c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060cc:	40 6b       	lddsp	r11,sp[0x18]
800060ce:	16 3a       	cp.w	r10,r11
800060d0:	c6 f5       	brlt	800061ae <_vfprintf_r+0x1c0a>
800060d2:	16 09       	add	r9,r11
800060d4:	2f f8       	sub	r8,-1
800060d6:	87 06       	st.w	r3[0x0],r6
800060d8:	fb 49 06 90 	st.w	sp[1680],r9
800060dc:	87 1b       	st.w	r3[0x4],r11
800060de:	fb 48 06 8c 	st.w	sp[1676],r8
800060e2:	58 78       	cp.w	r8,7
800060e4:	e0 89 00 04 	brgt	800060ec <_vfprintf_r+0x1b48>
800060e8:	2f 83       	sub	r3,-8
800060ea:	c0 b8       	rjmp	80006100 <_vfprintf_r+0x1b5c>
800060ec:	fa ca f9 78 	sub	r10,sp,-1672
800060f0:	02 9b       	mov	r11,r1
800060f2:	08 9c       	mov	r12,r4
800060f4:	fe b0 f2 4a 	rcall	80004588 <__sprint_r>
800060f8:	e0 81 01 d5 	brne	800064a2 <_vfprintf_r+0x1efe>
800060fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80006100:	fa f6 06 ac 	ld.w	r6,sp[1708]
80006104:	40 6a       	lddsp	r10,sp[0x18]
80006106:	14 16       	sub	r6,r10
80006108:	58 06       	cp.w	r6,0
8000610a:	e0 89 00 1c 	brgt	80006142 <_vfprintf_r+0x1b9e>
8000610e:	c3 d8       	rjmp	80006188 <_vfprintf_r+0x1be4>
80006110:	2f 09       	sub	r9,-16
80006112:	2f f8       	sub	r8,-1
80006114:	fb 49 06 90 	st.w	sp[1680],r9
80006118:	87 02       	st.w	r3[0x0],r2
8000611a:	87 10       	st.w	r3[0x4],r0
8000611c:	fb 48 06 8c 	st.w	sp[1676],r8
80006120:	58 78       	cp.w	r8,7
80006122:	e0 89 00 04 	brgt	8000612a <_vfprintf_r+0x1b86>
80006126:	2f 83       	sub	r3,-8
80006128:	c0 b8       	rjmp	8000613e <_vfprintf_r+0x1b9a>
8000612a:	fa ca f9 78 	sub	r10,sp,-1672
8000612e:	02 9b       	mov	r11,r1
80006130:	08 9c       	mov	r12,r4
80006132:	fe b0 f2 2b 	rcall	80004588 <__sprint_r>
80006136:	e0 81 01 b6 	brne	800064a2 <_vfprintf_r+0x1efe>
8000613a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000613e:	21 06       	sub	r6,16
80006140:	c0 48       	rjmp	80006148 <_vfprintf_r+0x1ba4>
80006142:	fe c2 c0 ae 	sub	r2,pc,-16210
80006146:	31 00       	mov	r0,16
80006148:	fa f9 06 90 	ld.w	r9,sp[1680]
8000614c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006150:	fe ca c0 bc 	sub	r10,pc,-16196
80006154:	59 06       	cp.w	r6,16
80006156:	fe 99 ff dd 	brgt	80006110 <_vfprintf_r+0x1b6c>
8000615a:	0c 09       	add	r9,r6
8000615c:	2f f8       	sub	r8,-1
8000615e:	87 0a       	st.w	r3[0x0],r10
80006160:	fb 49 06 90 	st.w	sp[1680],r9
80006164:	87 16       	st.w	r3[0x4],r6
80006166:	fb 48 06 8c 	st.w	sp[1676],r8
8000616a:	58 78       	cp.w	r8,7
8000616c:	e0 89 00 04 	brgt	80006174 <_vfprintf_r+0x1bd0>
80006170:	2f 83       	sub	r3,-8
80006172:	c0 b8       	rjmp	80006188 <_vfprintf_r+0x1be4>
80006174:	fa ca f9 78 	sub	r10,sp,-1672
80006178:	02 9b       	mov	r11,r1
8000617a:	08 9c       	mov	r12,r4
8000617c:	fe b0 f2 06 	rcall	80004588 <__sprint_r>
80006180:	e0 81 01 91 	brne	800064a2 <_vfprintf_r+0x1efe>
80006184:	fa c3 f9 e0 	sub	r3,sp,-1568
80006188:	ed b5 00 00 	bld	r5,0x0
8000618c:	e0 81 01 20 	brne	800063cc <_vfprintf_r+0x1e28>
80006190:	40 c9       	lddsp	r9,sp[0x30]
80006192:	fa f8 06 90 	ld.w	r8,sp[1680]
80006196:	2f f8       	sub	r8,-1
80006198:	87 09       	st.w	r3[0x0],r9
8000619a:	fb 48 06 90 	st.w	sp[1680],r8
8000619e:	30 19       	mov	r9,1
800061a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061a4:	87 19       	st.w	r3[0x4],r9
800061a6:	2f f8       	sub	r8,-1
800061a8:	fb 48 06 8c 	st.w	sp[1676],r8
800061ac:	c0 29       	rjmp	800063b0 <_vfprintf_r+0x1e0c>
800061ae:	14 09       	add	r9,r10
800061b0:	2f f8       	sub	r8,-1
800061b2:	fb 49 06 90 	st.w	sp[1680],r9
800061b6:	87 06       	st.w	r3[0x0],r6
800061b8:	87 1a       	st.w	r3[0x4],r10
800061ba:	fb 48 06 8c 	st.w	sp[1676],r8
800061be:	58 78       	cp.w	r8,7
800061c0:	e0 89 00 04 	brgt	800061c8 <_vfprintf_r+0x1c24>
800061c4:	2f 83       	sub	r3,-8
800061c6:	c0 b8       	rjmp	800061dc <_vfprintf_r+0x1c38>
800061c8:	fa ca f9 78 	sub	r10,sp,-1672
800061cc:	02 9b       	mov	r11,r1
800061ce:	08 9c       	mov	r12,r4
800061d0:	fe b0 f1 dc 	rcall	80004588 <__sprint_r>
800061d4:	e0 81 01 67 	brne	800064a2 <_vfprintf_r+0x1efe>
800061d8:	fa c3 f9 e0 	sub	r3,sp,-1568
800061dc:	40 c8       	lddsp	r8,sp[0x30]
800061de:	87 08       	st.w	r3[0x0],r8
800061e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800061e4:	2f f8       	sub	r8,-1
800061e6:	30 19       	mov	r9,1
800061e8:	fb 48 06 90 	st.w	sp[1680],r8
800061ec:	87 19       	st.w	r3[0x4],r9
800061ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061f2:	2f f8       	sub	r8,-1
800061f4:	fb 48 06 8c 	st.w	sp[1676],r8
800061f8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800061fc:	58 78       	cp.w	r8,7
800061fe:	e0 89 00 04 	brgt	80006206 <_vfprintf_r+0x1c62>
80006202:	2f 83       	sub	r3,-8
80006204:	c0 b8       	rjmp	8000621a <_vfprintf_r+0x1c76>
80006206:	fa ca f9 78 	sub	r10,sp,-1672
8000620a:	02 9b       	mov	r11,r1
8000620c:	08 9c       	mov	r12,r4
8000620e:	fe b0 f1 bd 	rcall	80004588 <__sprint_r>
80006212:	e0 81 01 48 	brne	800064a2 <_vfprintf_r+0x1efe>
80006216:	fa c3 f9 e0 	sub	r3,sp,-1568
8000621a:	04 06       	add	r6,r2
8000621c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006220:	87 06       	st.w	r3[0x0],r6
80006222:	fa f9 06 90 	ld.w	r9,sp[1680]
80006226:	40 66       	lddsp	r6,sp[0x18]
80006228:	40 6e       	lddsp	lr,sp[0x18]
8000622a:	10 16       	sub	r6,r8
8000622c:	f2 08 01 08 	sub	r8,r9,r8
80006230:	87 16       	st.w	r3[0x4],r6
80006232:	1c 08       	add	r8,lr
80006234:	fb 48 06 90 	st.w	sp[1680],r8
80006238:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000623c:	2f f8       	sub	r8,-1
8000623e:	fb 48 06 8c 	st.w	sp[1676],r8
80006242:	cb 78       	rjmp	800063b0 <_vfprintf_r+0x1e0c>
80006244:	40 6c       	lddsp	r12,sp[0x18]
80006246:	58 1c       	cp.w	r12,1
80006248:	e0 89 00 06 	brgt	80006254 <_vfprintf_r+0x1cb0>
8000624c:	ed b5 00 00 	bld	r5,0x0
80006250:	e0 81 00 85 	brne	8000635a <_vfprintf_r+0x1db6>
80006254:	fa f8 06 90 	ld.w	r8,sp[1680]
80006258:	2f f8       	sub	r8,-1
8000625a:	30 19       	mov	r9,1
8000625c:	fb 48 06 90 	st.w	sp[1680],r8
80006260:	87 06       	st.w	r3[0x0],r6
80006262:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006266:	87 19       	st.w	r3[0x4],r9
80006268:	2f f8       	sub	r8,-1
8000626a:	fb 48 06 8c 	st.w	sp[1676],r8
8000626e:	58 78       	cp.w	r8,7
80006270:	e0 89 00 04 	brgt	80006278 <_vfprintf_r+0x1cd4>
80006274:	2f 83       	sub	r3,-8
80006276:	c0 b8       	rjmp	8000628c <_vfprintf_r+0x1ce8>
80006278:	fa ca f9 78 	sub	r10,sp,-1672
8000627c:	02 9b       	mov	r11,r1
8000627e:	08 9c       	mov	r12,r4
80006280:	fe b0 f1 84 	rcall	80004588 <__sprint_r>
80006284:	e0 81 01 0f 	brne	800064a2 <_vfprintf_r+0x1efe>
80006288:	fa c3 f9 e0 	sub	r3,sp,-1568
8000628c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006290:	2f f8       	sub	r8,-1
80006292:	40 cb       	lddsp	r11,sp[0x30]
80006294:	fb 48 06 90 	st.w	sp[1680],r8
80006298:	30 19       	mov	r9,1
8000629a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000629e:	87 0b       	st.w	r3[0x0],r11
800062a0:	2f f8       	sub	r8,-1
800062a2:	87 19       	st.w	r3[0x4],r9
800062a4:	fb 48 06 8c 	st.w	sp[1676],r8
800062a8:	58 78       	cp.w	r8,7
800062aa:	e0 89 00 05 	brgt	800062b4 <_vfprintf_r+0x1d10>
800062ae:	2f 83       	sub	r3,-8
800062b0:	c0 c8       	rjmp	800062c8 <_vfprintf_r+0x1d24>
800062b2:	d7 03       	nop
800062b4:	fa ca f9 78 	sub	r10,sp,-1672
800062b8:	02 9b       	mov	r11,r1
800062ba:	08 9c       	mov	r12,r4
800062bc:	fe b0 f1 66 	rcall	80004588 <__sprint_r>
800062c0:	e0 81 00 f1 	brne	800064a2 <_vfprintf_r+0x1efe>
800062c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800062c8:	30 08       	mov	r8,0
800062ca:	30 09       	mov	r9,0
800062cc:	40 5b       	lddsp	r11,sp[0x14]
800062ce:	40 7a       	lddsp	r10,sp[0x1c]
800062d0:	e0 a0 15 df 	rcall	80008e8e <__avr32_f64_cmp_eq>
800062d4:	40 68       	lddsp	r8,sp[0x18]
800062d6:	20 18       	sub	r8,1
800062d8:	58 0c       	cp.w	r12,0
800062da:	c0 d1       	brne	800062f4 <_vfprintf_r+0x1d50>
800062dc:	2f f6       	sub	r6,-1
800062de:	87 18       	st.w	r3[0x4],r8
800062e0:	87 06       	st.w	r3[0x0],r6
800062e2:	fa f6 06 90 	ld.w	r6,sp[1680]
800062e6:	10 06       	add	r6,r8
800062e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062ec:	fb 46 06 90 	st.w	sp[1680],r6
800062f0:	2f f8       	sub	r8,-1
800062f2:	c3 18       	rjmp	80006354 <_vfprintf_r+0x1db0>
800062f4:	10 96       	mov	r6,r8
800062f6:	58 08       	cp.w	r8,0
800062f8:	e0 89 00 1c 	brgt	80006330 <_vfprintf_r+0x1d8c>
800062fc:	c4 b8       	rjmp	80006392 <_vfprintf_r+0x1dee>
800062fe:	2f 09       	sub	r9,-16
80006300:	2f f8       	sub	r8,-1
80006302:	fb 49 06 90 	st.w	sp[1680],r9
80006306:	87 02       	st.w	r3[0x0],r2
80006308:	87 10       	st.w	r3[0x4],r0
8000630a:	fb 48 06 8c 	st.w	sp[1676],r8
8000630e:	58 78       	cp.w	r8,7
80006310:	e0 89 00 04 	brgt	80006318 <_vfprintf_r+0x1d74>
80006314:	2f 83       	sub	r3,-8
80006316:	c0 b8       	rjmp	8000632c <_vfprintf_r+0x1d88>
80006318:	fa ca f9 78 	sub	r10,sp,-1672
8000631c:	02 9b       	mov	r11,r1
8000631e:	08 9c       	mov	r12,r4
80006320:	fe b0 f1 34 	rcall	80004588 <__sprint_r>
80006324:	e0 81 00 bf 	brne	800064a2 <_vfprintf_r+0x1efe>
80006328:	fa c3 f9 e0 	sub	r3,sp,-1568
8000632c:	21 06       	sub	r6,16
8000632e:	c0 48       	rjmp	80006336 <_vfprintf_r+0x1d92>
80006330:	fe c2 c2 9c 	sub	r2,pc,-15716
80006334:	31 00       	mov	r0,16
80006336:	fa f9 06 90 	ld.w	r9,sp[1680]
8000633a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000633e:	fe ca c2 aa 	sub	r10,pc,-15702
80006342:	59 06       	cp.w	r6,16
80006344:	fe 99 ff dd 	brgt	800062fe <_vfprintf_r+0x1d5a>
80006348:	0c 09       	add	r9,r6
8000634a:	87 0a       	st.w	r3[0x0],r10
8000634c:	fb 49 06 90 	st.w	sp[1680],r9
80006350:	2f f8       	sub	r8,-1
80006352:	87 16       	st.w	r3[0x4],r6
80006354:	fb 48 06 8c 	st.w	sp[1676],r8
80006358:	c0 e8       	rjmp	80006374 <_vfprintf_r+0x1dd0>
8000635a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000635e:	2f f8       	sub	r8,-1
80006360:	30 19       	mov	r9,1
80006362:	fb 48 06 90 	st.w	sp[1680],r8
80006366:	87 06       	st.w	r3[0x0],r6
80006368:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000636c:	87 19       	st.w	r3[0x4],r9
8000636e:	2f f8       	sub	r8,-1
80006370:	fb 48 06 8c 	st.w	sp[1676],r8
80006374:	58 78       	cp.w	r8,7
80006376:	e0 89 00 04 	brgt	8000637e <_vfprintf_r+0x1dda>
8000637a:	2f 83       	sub	r3,-8
8000637c:	c0 b8       	rjmp	80006392 <_vfprintf_r+0x1dee>
8000637e:	fa ca f9 78 	sub	r10,sp,-1672
80006382:	02 9b       	mov	r11,r1
80006384:	08 9c       	mov	r12,r4
80006386:	fe b0 f1 01 	rcall	80004588 <__sprint_r>
8000638a:	e0 81 00 8c 	brne	800064a2 <_vfprintf_r+0x1efe>
8000638e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006392:	40 ea       	lddsp	r10,sp[0x38]
80006394:	fa f8 06 90 	ld.w	r8,sp[1680]
80006398:	14 08       	add	r8,r10
8000639a:	fa c9 f9 64 	sub	r9,sp,-1692
8000639e:	fb 48 06 90 	st.w	sp[1680],r8
800063a2:	87 1a       	st.w	r3[0x4],r10
800063a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063a8:	87 09       	st.w	r3[0x0],r9
800063aa:	2f f8       	sub	r8,-1
800063ac:	fb 48 06 8c 	st.w	sp[1676],r8
800063b0:	58 78       	cp.w	r8,7
800063b2:	e0 89 00 04 	brgt	800063ba <_vfprintf_r+0x1e16>
800063b6:	2f 83       	sub	r3,-8
800063b8:	c0 a8       	rjmp	800063cc <_vfprintf_r+0x1e28>
800063ba:	fa ca f9 78 	sub	r10,sp,-1672
800063be:	02 9b       	mov	r11,r1
800063c0:	08 9c       	mov	r12,r4
800063c2:	fe b0 f0 e3 	rcall	80004588 <__sprint_r>
800063c6:	c6 e1       	brne	800064a2 <_vfprintf_r+0x1efe>
800063c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800063cc:	e2 15 00 04 	andl	r5,0x4,COH
800063d0:	c3 f0       	breq	8000644e <_vfprintf_r+0x1eaa>
800063d2:	40 86       	lddsp	r6,sp[0x20]
800063d4:	40 39       	lddsp	r9,sp[0xc]
800063d6:	12 16       	sub	r6,r9
800063d8:	58 06       	cp.w	r6,0
800063da:	e0 89 00 1a 	brgt	8000640e <_vfprintf_r+0x1e6a>
800063de:	c3 88       	rjmp	8000644e <_vfprintf_r+0x1eaa>
800063e0:	2f 09       	sub	r9,-16
800063e2:	2f f8       	sub	r8,-1
800063e4:	fb 49 06 90 	st.w	sp[1680],r9
800063e8:	87 05       	st.w	r3[0x0],r5
800063ea:	87 12       	st.w	r3[0x4],r2
800063ec:	fb 48 06 8c 	st.w	sp[1676],r8
800063f0:	58 78       	cp.w	r8,7
800063f2:	e0 89 00 04 	brgt	800063fa <_vfprintf_r+0x1e56>
800063f6:	2f 83       	sub	r3,-8
800063f8:	c0 98       	rjmp	8000640a <_vfprintf_r+0x1e66>
800063fa:	00 9a       	mov	r10,r0
800063fc:	02 9b       	mov	r11,r1
800063fe:	08 9c       	mov	r12,r4
80006400:	fe b0 f0 c4 	rcall	80004588 <__sprint_r>
80006404:	c4 f1       	brne	800064a2 <_vfprintf_r+0x1efe>
80006406:	fa c3 f9 e0 	sub	r3,sp,-1568
8000640a:	21 06       	sub	r6,16
8000640c:	c0 68       	rjmp	80006418 <_vfprintf_r+0x1e74>
8000640e:	fe c5 c3 8a 	sub	r5,pc,-15478
80006412:	31 02       	mov	r2,16
80006414:	fa c0 f9 78 	sub	r0,sp,-1672
80006418:	fa f9 06 90 	ld.w	r9,sp[1680]
8000641c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006420:	fe ca c3 9c 	sub	r10,pc,-15460
80006424:	59 06       	cp.w	r6,16
80006426:	fe 99 ff dd 	brgt	800063e0 <_vfprintf_r+0x1e3c>
8000642a:	0c 09       	add	r9,r6
8000642c:	2f f8       	sub	r8,-1
8000642e:	87 0a       	st.w	r3[0x0],r10
80006430:	87 16       	st.w	r3[0x4],r6
80006432:	fb 49 06 90 	st.w	sp[1680],r9
80006436:	fb 48 06 8c 	st.w	sp[1676],r8
8000643a:	58 78       	cp.w	r8,7
8000643c:	e0 8a 00 09 	brle	8000644e <_vfprintf_r+0x1eaa>
80006440:	fa ca f9 78 	sub	r10,sp,-1672
80006444:	02 9b       	mov	r11,r1
80006446:	08 9c       	mov	r12,r4
80006448:	fe b0 f0 a0 	rcall	80004588 <__sprint_r>
8000644c:	c2 b1       	brne	800064a2 <_vfprintf_r+0x1efe>
8000644e:	40 bc       	lddsp	r12,sp[0x2c]
80006450:	40 36       	lddsp	r6,sp[0xc]
80006452:	40 8e       	lddsp	lr,sp[0x20]
80006454:	ec 0e 0c 48 	max	r8,r6,lr
80006458:	10 0c       	add	r12,r8
8000645a:	50 bc       	stdsp	sp[0x2c],r12
8000645c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006460:	58 08       	cp.w	r8,0
80006462:	c0 80       	breq	80006472 <_vfprintf_r+0x1ece>
80006464:	fa ca f9 78 	sub	r10,sp,-1672
80006468:	02 9b       	mov	r11,r1
8000646a:	08 9c       	mov	r12,r4
8000646c:	fe b0 f0 8e 	rcall	80004588 <__sprint_r>
80006470:	c1 91       	brne	800064a2 <_vfprintf_r+0x1efe>
80006472:	30 0b       	mov	r11,0
80006474:	fa c3 f9 e0 	sub	r3,sp,-1568
80006478:	fb 4b 06 8c 	st.w	sp[1676],r11
8000647c:	fe 9f f1 22 	bral	800046c0 <_vfprintf_r+0x11c>
80006480:	08 95       	mov	r5,r4
80006482:	fa f8 06 90 	ld.w	r8,sp[1680]
80006486:	58 08       	cp.w	r8,0
80006488:	c0 80       	breq	80006498 <_vfprintf_r+0x1ef4>
8000648a:	08 9c       	mov	r12,r4
8000648c:	fa ca f9 78 	sub	r10,sp,-1672
80006490:	02 9b       	mov	r11,r1
80006492:	fe b0 f0 7b 	rcall	80004588 <__sprint_r>
80006496:	c0 61       	brne	800064a2 <_vfprintf_r+0x1efe>
80006498:	30 08       	mov	r8,0
8000649a:	fb 48 06 8c 	st.w	sp[1676],r8
8000649e:	c0 28       	rjmp	800064a2 <_vfprintf_r+0x1efe>
800064a0:	40 41       	lddsp	r1,sp[0x10]
800064a2:	82 68       	ld.sh	r8,r1[0xc]
800064a4:	ed b8 00 06 	bld	r8,0x6
800064a8:	c0 31       	brne	800064ae <_vfprintf_r+0x1f0a>
800064aa:	3f fa       	mov	r10,-1
800064ac:	50 ba       	stdsp	sp[0x2c],r10
800064ae:	40 bc       	lddsp	r12,sp[0x2c]
800064b0:	fe 3d f9 44 	sub	sp,-1724
800064b4:	d8 32       	popm	r0-r7,pc
800064b6:	d7 03       	nop

800064b8 <__swsetup_r>:
800064b8:	d4 21       	pushm	r4-r7,lr
800064ba:	e0 68 01 34 	mov	r8,308
800064be:	18 96       	mov	r6,r12
800064c0:	16 97       	mov	r7,r11
800064c2:	70 0c       	ld.w	r12,r8[0x0]
800064c4:	58 0c       	cp.w	r12,0
800064c6:	c0 60       	breq	800064d2 <__swsetup_r+0x1a>
800064c8:	78 68       	ld.w	r8,r12[0x18]
800064ca:	58 08       	cp.w	r8,0
800064cc:	c0 31       	brne	800064d2 <__swsetup_r+0x1a>
800064ce:	e0 a0 07 b9 	rcall	80007440 <__sinit>
800064d2:	fe c8 c3 1e 	sub	r8,pc,-15586
800064d6:	10 37       	cp.w	r7,r8
800064d8:	c0 61       	brne	800064e4 <__swsetup_r+0x2c>
800064da:	e0 68 01 34 	mov	r8,308
800064de:	70 08       	ld.w	r8,r8[0x0]
800064e0:	70 07       	ld.w	r7,r8[0x0]
800064e2:	c1 28       	rjmp	80006506 <__swsetup_r+0x4e>
800064e4:	fe c8 c3 10 	sub	r8,pc,-15600
800064e8:	10 37       	cp.w	r7,r8
800064ea:	c0 61       	brne	800064f6 <__swsetup_r+0x3e>
800064ec:	e0 68 01 34 	mov	r8,308
800064f0:	70 08       	ld.w	r8,r8[0x0]
800064f2:	70 17       	ld.w	r7,r8[0x4]
800064f4:	c0 98       	rjmp	80006506 <__swsetup_r+0x4e>
800064f6:	fe c8 c3 02 	sub	r8,pc,-15614
800064fa:	10 37       	cp.w	r7,r8
800064fc:	c0 51       	brne	80006506 <__swsetup_r+0x4e>
800064fe:	e0 68 01 34 	mov	r8,308
80006502:	70 08       	ld.w	r8,r8[0x0]
80006504:	70 27       	ld.w	r7,r8[0x8]
80006506:	8e 68       	ld.sh	r8,r7[0xc]
80006508:	ed b8 00 03 	bld	r8,0x3
8000650c:	c1 e0       	breq	80006548 <__swsetup_r+0x90>
8000650e:	ed b8 00 04 	bld	r8,0x4
80006512:	c3 e1       	brne	8000658e <__swsetup_r+0xd6>
80006514:	ed b8 00 02 	bld	r8,0x2
80006518:	c1 51       	brne	80006542 <__swsetup_r+0x8a>
8000651a:	6e db       	ld.w	r11,r7[0x34]
8000651c:	58 0b       	cp.w	r11,0
8000651e:	c0 a0       	breq	80006532 <__swsetup_r+0x7a>
80006520:	ee c8 ff bc 	sub	r8,r7,-68
80006524:	10 3b       	cp.w	r11,r8
80006526:	c0 40       	breq	8000652e <__swsetup_r+0x76>
80006528:	0c 9c       	mov	r12,r6
8000652a:	e0 a0 08 25 	rcall	80007574 <_free_r>
8000652e:	30 08       	mov	r8,0
80006530:	8f d8       	st.w	r7[0x34],r8
80006532:	8e 68       	ld.sh	r8,r7[0xc]
80006534:	e0 18 ff db 	andl	r8,0xffdb
80006538:	ae 68       	st.h	r7[0xc],r8
8000653a:	30 08       	mov	r8,0
8000653c:	8f 18       	st.w	r7[0x4],r8
8000653e:	6e 48       	ld.w	r8,r7[0x10]
80006540:	8f 08       	st.w	r7[0x0],r8
80006542:	8e 68       	ld.sh	r8,r7[0xc]
80006544:	a3 b8       	sbr	r8,0x3
80006546:	ae 68       	st.h	r7[0xc],r8
80006548:	6e 48       	ld.w	r8,r7[0x10]
8000654a:	58 08       	cp.w	r8,0
8000654c:	c0 b1       	brne	80006562 <__swsetup_r+0xaa>
8000654e:	8e 68       	ld.sh	r8,r7[0xc]
80006550:	e2 18 02 80 	andl	r8,0x280,COH
80006554:	e0 48 02 00 	cp.w	r8,512
80006558:	c0 50       	breq	80006562 <__swsetup_r+0xaa>
8000655a:	0c 9c       	mov	r12,r6
8000655c:	0e 9b       	mov	r11,r7
8000655e:	e0 a0 0a 4b 	rcall	800079f4 <__smakebuf_r>
80006562:	8e 69       	ld.sh	r9,r7[0xc]
80006564:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006568:	c0 70       	breq	80006576 <__swsetup_r+0xbe>
8000656a:	30 08       	mov	r8,0
8000656c:	8f 28       	st.w	r7[0x8],r8
8000656e:	6e 58       	ld.w	r8,r7[0x14]
80006570:	5c 38       	neg	r8
80006572:	8f 68       	st.w	r7[0x18],r8
80006574:	c0 68       	rjmp	80006580 <__swsetup_r+0xc8>
80006576:	ed b9 00 01 	bld	r9,0x1
8000657a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000657e:	8f 28       	st.w	r7[0x8],r8
80006580:	6e 48       	ld.w	r8,r7[0x10]
80006582:	58 08       	cp.w	r8,0
80006584:	c0 61       	brne	80006590 <__swsetup_r+0xd8>
80006586:	8e 68       	ld.sh	r8,r7[0xc]
80006588:	ed b8 00 07 	bld	r8,0x7
8000658c:	c0 21       	brne	80006590 <__swsetup_r+0xd8>
8000658e:	dc 2a       	popm	r4-r7,pc,r12=-1
80006590:	d8 2a       	popm	r4-r7,pc,r12=0
80006592:	d7 03       	nop

80006594 <quorem>:
80006594:	d4 31       	pushm	r0-r7,lr
80006596:	20 2d       	sub	sp,8
80006598:	18 97       	mov	r7,r12
8000659a:	78 48       	ld.w	r8,r12[0x10]
8000659c:	76 46       	ld.w	r6,r11[0x10]
8000659e:	0c 38       	cp.w	r8,r6
800065a0:	c0 34       	brge	800065a6 <quorem+0x12>
800065a2:	30 0c       	mov	r12,0
800065a4:	c8 58       	rjmp	800066ae <quorem+0x11a>
800065a6:	ec c2 ff fc 	sub	r2,r6,-4
800065aa:	f6 c3 ff ec 	sub	r3,r11,-20
800065ae:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800065b2:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800065b6:	2f f9       	sub	r9,-1
800065b8:	20 16       	sub	r6,1
800065ba:	f8 09 0d 08 	divu	r8,r12,r9
800065be:	f6 02 00 22 	add	r2,r11,r2<<0x2
800065c2:	ee c4 ff ec 	sub	r4,r7,-20
800065c6:	10 95       	mov	r5,r8
800065c8:	58 08       	cp.w	r8,0
800065ca:	c4 10       	breq	8000664c <quorem+0xb8>
800065cc:	30 09       	mov	r9,0
800065ce:	06 9a       	mov	r10,r3
800065d0:	08 98       	mov	r8,r4
800065d2:	12 91       	mov	r1,r9
800065d4:	50 0b       	stdsp	sp[0x0],r11
800065d6:	70 0e       	ld.w	lr,r8[0x0]
800065d8:	b1 8e       	lsr	lr,0x10
800065da:	50 1e       	stdsp	sp[0x4],lr
800065dc:	15 0e       	ld.w	lr,r10++
800065de:	fc 00 16 10 	lsr	r0,lr,0x10
800065e2:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800065e6:	ea 0e 03 41 	mac	r1,r5,lr
800065ea:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800065ee:	b1 81       	lsr	r1,0x10
800065f0:	40 1b       	lddsp	r11,sp[0x4]
800065f2:	ea 00 02 40 	mul	r0,r5,r0
800065f6:	e2 00 00 00 	add	r0,r1,r0
800065fa:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800065fe:	02 1b       	sub	r11,r1
80006600:	50 1b       	stdsp	sp[0x4],r11
80006602:	70 0b       	ld.w	r11,r8[0x0]
80006604:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006608:	02 09       	add	r9,r1
8000660a:	f2 0e 01 0e 	sub	lr,r9,lr
8000660e:	b0 1e       	st.h	r8[0x2],lr
80006610:	fc 09 14 10 	asr	r9,lr,0x10
80006614:	40 1e       	lddsp	lr,sp[0x4]
80006616:	fc 09 00 09 	add	r9,lr,r9
8000661a:	b0 09       	st.h	r8[0x0],r9
8000661c:	e0 01 16 10 	lsr	r1,r0,0x10
80006620:	2f c8       	sub	r8,-4
80006622:	b1 49       	asr	r9,0x10
80006624:	04 3a       	cp.w	r10,r2
80006626:	fe 98 ff d8 	brls	800065d6 <quorem+0x42>
8000662a:	40 0b       	lddsp	r11,sp[0x0]
8000662c:	58 0c       	cp.w	r12,0
8000662e:	c0 f1       	brne	8000664c <quorem+0xb8>
80006630:	ec c8 ff fb 	sub	r8,r6,-5
80006634:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006638:	c0 28       	rjmp	8000663c <quorem+0xa8>
8000663a:	20 16       	sub	r6,1
8000663c:	20 48       	sub	r8,4
8000663e:	08 38       	cp.w	r8,r4
80006640:	e0 88 00 05 	brls	8000664a <quorem+0xb6>
80006644:	70 09       	ld.w	r9,r8[0x0]
80006646:	58 09       	cp.w	r9,0
80006648:	cf 90       	breq	8000663a <quorem+0xa6>
8000664a:	8f 46       	st.w	r7[0x10],r6
8000664c:	0e 9c       	mov	r12,r7
8000664e:	e0 a0 0c fb 	rcall	80008044 <__mcmp>
80006652:	c2 d5       	brlt	800066ac <quorem+0x118>
80006654:	2f f5       	sub	r5,-1
80006656:	08 98       	mov	r8,r4
80006658:	30 09       	mov	r9,0
8000665a:	07 0b       	ld.w	r11,r3++
8000665c:	f6 0a 16 10 	lsr	r10,r11,0x10
80006660:	70 0c       	ld.w	r12,r8[0x0]
80006662:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80006666:	f8 0e 16 10 	lsr	lr,r12,0x10
8000666a:	14 1e       	sub	lr,r10
8000666c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006670:	16 1a       	sub	r10,r11
80006672:	12 0a       	add	r10,r9
80006674:	b0 1a       	st.h	r8[0x2],r10
80006676:	b1 4a       	asr	r10,0x10
80006678:	fc 0a 00 09 	add	r9,lr,r10
8000667c:	b0 09       	st.h	r8[0x0],r9
8000667e:	2f c8       	sub	r8,-4
80006680:	b1 49       	asr	r9,0x10
80006682:	04 33       	cp.w	r3,r2
80006684:	fe 98 ff eb 	brls	8000665a <quorem+0xc6>
80006688:	ec c8 ff fb 	sub	r8,r6,-5
8000668c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006690:	58 09       	cp.w	r9,0
80006692:	c0 d1       	brne	800066ac <quorem+0x118>
80006694:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006698:	c0 28       	rjmp	8000669c <quorem+0x108>
8000669a:	20 16       	sub	r6,1
8000669c:	20 48       	sub	r8,4
8000669e:	08 38       	cp.w	r8,r4
800066a0:	e0 88 00 05 	brls	800066aa <quorem+0x116>
800066a4:	70 09       	ld.w	r9,r8[0x0]
800066a6:	58 09       	cp.w	r9,0
800066a8:	cf 90       	breq	8000669a <quorem+0x106>
800066aa:	8f 46       	st.w	r7[0x10],r6
800066ac:	0a 9c       	mov	r12,r5
800066ae:	2f ed       	sub	sp,-8
800066b0:	d8 32       	popm	r0-r7,pc
800066b2:	d7 03       	nop

800066b4 <_dtoa_r>:
800066b4:	d4 31       	pushm	r0-r7,lr
800066b6:	21 ad       	sub	sp,104
800066b8:	fa c4 ff 74 	sub	r4,sp,-140
800066bc:	18 97       	mov	r7,r12
800066be:	16 95       	mov	r5,r11
800066c0:	68 2c       	ld.w	r12,r4[0x8]
800066c2:	50 c9       	stdsp	sp[0x30],r9
800066c4:	68 16       	ld.w	r6,r4[0x4]
800066c6:	68 09       	ld.w	r9,r4[0x0]
800066c8:	50 e8       	stdsp	sp[0x38],r8
800066ca:	14 94       	mov	r4,r10
800066cc:	51 2c       	stdsp	sp[0x48],r12
800066ce:	fa e5 00 08 	st.d	sp[8],r4
800066d2:	51 59       	stdsp	sp[0x54],r9
800066d4:	6e 95       	ld.w	r5,r7[0x24]
800066d6:	58 05       	cp.w	r5,0
800066d8:	c0 91       	brne	800066ea <_dtoa_r+0x36>
800066da:	31 0c       	mov	r12,16
800066dc:	e0 a0 09 ea 	rcall	80007ab0 <malloc>
800066e0:	99 35       	st.w	r12[0xc],r5
800066e2:	8f 9c       	st.w	r7[0x24],r12
800066e4:	99 15       	st.w	r12[0x4],r5
800066e6:	99 25       	st.w	r12[0x8],r5
800066e8:	99 05       	st.w	r12[0x0],r5
800066ea:	6e 99       	ld.w	r9,r7[0x24]
800066ec:	72 08       	ld.w	r8,r9[0x0]
800066ee:	58 08       	cp.w	r8,0
800066f0:	c0 f0       	breq	8000670e <_dtoa_r+0x5a>
800066f2:	72 1a       	ld.w	r10,r9[0x4]
800066f4:	91 1a       	st.w	r8[0x4],r10
800066f6:	30 1a       	mov	r10,1
800066f8:	72 19       	ld.w	r9,r9[0x4]
800066fa:	f4 09 09 49 	lsl	r9,r10,r9
800066fe:	10 9b       	mov	r11,r8
80006700:	91 29       	st.w	r8[0x8],r9
80006702:	0e 9c       	mov	r12,r7
80006704:	e0 a0 0c ba 	rcall	80008078 <_Bfree>
80006708:	6e 98       	ld.w	r8,r7[0x24]
8000670a:	30 09       	mov	r9,0
8000670c:	91 09       	st.w	r8[0x0],r9
8000670e:	40 28       	lddsp	r8,sp[0x8]
80006710:	10 94       	mov	r4,r8
80006712:	58 08       	cp.w	r8,0
80006714:	c0 64       	brge	80006720 <_dtoa_r+0x6c>
80006716:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000671a:	50 28       	stdsp	sp[0x8],r8
8000671c:	30 18       	mov	r8,1
8000671e:	c0 28       	rjmp	80006722 <_dtoa_r+0x6e>
80006720:	30 08       	mov	r8,0
80006722:	8d 08       	st.w	r6[0x0],r8
80006724:	fc 1c 7f f0 	movh	r12,0x7ff0
80006728:	40 26       	lddsp	r6,sp[0x8]
8000672a:	0c 98       	mov	r8,r6
8000672c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006730:	18 38       	cp.w	r8,r12
80006732:	c2 01       	brne	80006772 <_dtoa_r+0xbe>
80006734:	e0 68 27 0f 	mov	r8,9999
80006738:	41 5b       	lddsp	r11,sp[0x54]
8000673a:	97 08       	st.w	r11[0x0],r8
8000673c:	40 3a       	lddsp	r10,sp[0xc]
8000673e:	58 0a       	cp.w	r10,0
80006740:	c0 71       	brne	8000674e <_dtoa_r+0x9a>
80006742:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80006746:	c0 41       	brne	8000674e <_dtoa_r+0x9a>
80006748:	fe cc c5 a4 	sub	r12,pc,-14940
8000674c:	c0 38       	rjmp	80006752 <_dtoa_r+0x9e>
8000674e:	fe cc c5 9e 	sub	r12,pc,-14946
80006752:	41 29       	lddsp	r9,sp[0x48]
80006754:	58 09       	cp.w	r9,0
80006756:	e0 80 05 9a 	breq	8000728a <_dtoa_r+0xbd6>
8000675a:	f8 c8 ff fd 	sub	r8,r12,-3
8000675e:	f8 c9 ff f8 	sub	r9,r12,-8
80006762:	11 8b       	ld.ub	r11,r8[0x0]
80006764:	30 0a       	mov	r10,0
80006766:	41 25       	lddsp	r5,sp[0x48]
80006768:	f4 0b 18 00 	cp.b	r11,r10
8000676c:	f2 08 17 10 	movne	r8,r9
80006770:	c1 68       	rjmp	8000679c <_dtoa_r+0xe8>
80006772:	fa ea 00 08 	ld.d	r10,sp[8]
80006776:	30 08       	mov	r8,0
80006778:	fa eb 00 3c 	st.d	sp[60],r10
8000677c:	30 09       	mov	r9,0
8000677e:	e0 a0 13 88 	rcall	80008e8e <__avr32_f64_cmp_eq>
80006782:	c1 00       	breq	800067a2 <_dtoa_r+0xee>
80006784:	30 18       	mov	r8,1
80006786:	41 5a       	lddsp	r10,sp[0x54]
80006788:	95 08       	st.w	r10[0x0],r8
8000678a:	fe cc c7 0a 	sub	r12,pc,-14582
8000678e:	41 29       	lddsp	r9,sp[0x48]
80006790:	f8 08 00 08 	add	r8,r12,r8
80006794:	58 09       	cp.w	r9,0
80006796:	e0 80 05 7a 	breq	8000728a <_dtoa_r+0xbd6>
8000679a:	12 95       	mov	r5,r9
8000679c:	8b 08       	st.w	r5[0x0],r8
8000679e:	e0 8f 05 76 	bral	8000728a <_dtoa_r+0xbd6>
800067a2:	fa c8 ff 9c 	sub	r8,sp,-100
800067a6:	fa c9 ff a0 	sub	r9,sp,-96
800067aa:	fa ea 00 3c 	ld.d	r10,sp[60]
800067ae:	0e 9c       	mov	r12,r7
800067b0:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800067b4:	e0 a0 0c b4 	rcall	8000811c <__d2b>
800067b8:	18 93       	mov	r3,r12
800067ba:	58 05       	cp.w	r5,0
800067bc:	c0 d0       	breq	800067d6 <_dtoa_r+0x122>
800067be:	fa ea 00 3c 	ld.d	r10,sp[60]
800067c2:	30 04       	mov	r4,0
800067c4:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800067c8:	ea c5 03 ff 	sub	r5,r5,1023
800067cc:	10 9b       	mov	r11,r8
800067ce:	51 74       	stdsp	sp[0x5c],r4
800067d0:	ea 1b 3f f0 	orh	r11,0x3ff0
800067d4:	c2 58       	rjmp	8000681e <_dtoa_r+0x16a>
800067d6:	41 88       	lddsp	r8,sp[0x60]
800067d8:	41 9c       	lddsp	r12,sp[0x64]
800067da:	10 0c       	add	r12,r8
800067dc:	f8 c5 fb ce 	sub	r5,r12,-1074
800067e0:	e0 45 00 20 	cp.w	r5,32
800067e4:	e0 8a 00 0e 	brle	80006800 <_dtoa_r+0x14c>
800067e8:	f8 cc fb ee 	sub	r12,r12,-1042
800067ec:	40 3b       	lddsp	r11,sp[0xc]
800067ee:	ea 08 11 40 	rsub	r8,r5,64
800067f2:	f6 0c 0a 4c 	lsr	r12,r11,r12
800067f6:	ec 08 09 46 	lsl	r6,r6,r8
800067fa:	0c 4c       	or	r12,r6
800067fc:	c0 78       	rjmp	8000680a <_dtoa_r+0x156>
800067fe:	d7 03       	nop
80006800:	ea 0c 11 20 	rsub	r12,r5,32
80006804:	40 3a       	lddsp	r10,sp[0xc]
80006806:	f4 0c 09 4c 	lsl	r12,r10,r12
8000680a:	fe b0 eb 8b 	rcall	80003f20 <__avr32_u32_to_f64>
8000680e:	fc 18 fe 10 	movh	r8,0xfe10
80006812:	30 19       	mov	r9,1
80006814:	ea c5 04 33 	sub	r5,r5,1075
80006818:	f0 0b 00 0b 	add	r11,r8,r11
8000681c:	51 79       	stdsp	sp[0x5c],r9
8000681e:	30 08       	mov	r8,0
80006820:	fc 19 3f f8 	movh	r9,0x3ff8
80006824:	e0 a0 11 ca 	rcall	80008bb8 <__avr32_f64_sub>
80006828:	e0 68 43 61 	mov	r8,17249
8000682c:	ea 18 63 6f 	orh	r8,0x636f
80006830:	e0 69 87 a7 	mov	r9,34727
80006834:	ea 19 3f d2 	orh	r9,0x3fd2
80006838:	fe b0 ea 8a 	rcall	80003d4c <__avr32_f64_mul>
8000683c:	e0 68 c8 b3 	mov	r8,51379
80006840:	ea 18 8b 60 	orh	r8,0x8b60
80006844:	e0 69 8a 28 	mov	r9,35368
80006848:	ea 19 3f c6 	orh	r9,0x3fc6
8000684c:	e0 a0 12 84 	rcall	80008d54 <__avr32_f64_add>
80006850:	0a 9c       	mov	r12,r5
80006852:	14 90       	mov	r0,r10
80006854:	16 91       	mov	r1,r11
80006856:	fe b0 eb 69 	rcall	80003f28 <__avr32_s32_to_f64>
8000685a:	e0 68 79 fb 	mov	r8,31227
8000685e:	ea 18 50 9f 	orh	r8,0x509f
80006862:	e0 69 44 13 	mov	r9,17427
80006866:	ea 19 3f d3 	orh	r9,0x3fd3
8000686a:	fe b0 ea 71 	rcall	80003d4c <__avr32_f64_mul>
8000686e:	14 98       	mov	r8,r10
80006870:	16 99       	mov	r9,r11
80006872:	00 9a       	mov	r10,r0
80006874:	02 9b       	mov	r11,r1
80006876:	e0 a0 12 6f 	rcall	80008d54 <__avr32_f64_add>
8000687a:	14 90       	mov	r0,r10
8000687c:	16 91       	mov	r1,r11
8000687e:	e0 a0 12 f5 	rcall	80008e68 <__avr32_f64_to_s32>
80006882:	30 08       	mov	r8,0
80006884:	18 96       	mov	r6,r12
80006886:	30 09       	mov	r9,0
80006888:	00 9a       	mov	r10,r0
8000688a:	02 9b       	mov	r11,r1
8000688c:	e0 a0 13 48 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006890:	c0 c0       	breq	800068a8 <_dtoa_r+0x1f4>
80006892:	0c 9c       	mov	r12,r6
80006894:	fe b0 eb 4a 	rcall	80003f28 <__avr32_s32_to_f64>
80006898:	14 98       	mov	r8,r10
8000689a:	16 99       	mov	r9,r11
8000689c:	00 9a       	mov	r10,r0
8000689e:	02 9b       	mov	r11,r1
800068a0:	e0 a0 12 f7 	rcall	80008e8e <__avr32_f64_cmp_eq>
800068a4:	f7 b6 00 01 	subeq	r6,1
800068a8:	59 66       	cp.w	r6,22
800068aa:	e0 88 00 05 	brls	800068b4 <_dtoa_r+0x200>
800068ae:	30 18       	mov	r8,1
800068b0:	51 48       	stdsp	sp[0x50],r8
800068b2:	c1 38       	rjmp	800068d8 <_dtoa_r+0x224>
800068b4:	fe c8 c6 4c 	sub	r8,pc,-14772
800068b8:	fa ea 00 3c 	ld.d	r10,sp[60]
800068bc:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800068c0:	e0 a0 13 2e 	rcall	80008f1c <__avr32_f64_cmp_lt>
800068c4:	f9 b4 00 00 	moveq	r4,0
800068c8:	fb f4 0a 14 	st.weq	sp[0x50],r4
800068cc:	f7 b6 01 01 	subne	r6,1
800068d0:	f9 bc 01 00 	movne	r12,0
800068d4:	fb fc 1a 14 	st.wne	sp[0x50],r12
800068d8:	41 90       	lddsp	r0,sp[0x64]
800068da:	20 10       	sub	r0,1
800068dc:	0a 10       	sub	r0,r5
800068de:	c0 46       	brmi	800068e6 <_dtoa_r+0x232>
800068e0:	50 40       	stdsp	sp[0x10],r0
800068e2:	30 00       	mov	r0,0
800068e4:	c0 48       	rjmp	800068ec <_dtoa_r+0x238>
800068e6:	30 0b       	mov	r11,0
800068e8:	5c 30       	neg	r0
800068ea:	50 4b       	stdsp	sp[0x10],r11
800068ec:	ec 02 11 00 	rsub	r2,r6,0
800068f0:	58 06       	cp.w	r6,0
800068f2:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800068f6:	f5 d6 e4 0a 	addge	r10,r10,r6
800068fa:	fb fa 4a 04 	st.wge	sp[0x10],r10
800068fe:	fb f6 4a 11 	st.wge	sp[0x44],r6
80006902:	f9 b2 04 00 	movge	r2,0
80006906:	e1 d6 e5 10 	sublt	r0,r0,r6
8000690a:	f9 b9 05 00 	movlt	r9,0
8000690e:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80006912:	40 c8       	lddsp	r8,sp[0x30]
80006914:	58 98       	cp.w	r8,9
80006916:	e0 8b 00 20 	brhi	80006956 <_dtoa_r+0x2a2>
8000691a:	58 58       	cp.w	r8,5
8000691c:	f9 b4 0a 01 	movle	r4,1
80006920:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006924:	f7 b5 09 04 	subgt	r5,4
80006928:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000692c:	f9 b4 09 00 	movgt	r4,0
80006930:	40 cc       	lddsp	r12,sp[0x30]
80006932:	58 3c       	cp.w	r12,3
80006934:	c2 d0       	breq	8000698e <_dtoa_r+0x2da>
80006936:	e0 89 00 05 	brgt	80006940 <_dtoa_r+0x28c>
8000693a:	58 2c       	cp.w	r12,2
8000693c:	c1 01       	brne	8000695c <_dtoa_r+0x2a8>
8000693e:	c1 88       	rjmp	8000696e <_dtoa_r+0x2ba>
80006940:	40 cb       	lddsp	r11,sp[0x30]
80006942:	58 4b       	cp.w	r11,4
80006944:	c0 60       	breq	80006950 <_dtoa_r+0x29c>
80006946:	58 5b       	cp.w	r11,5
80006948:	c0 a1       	brne	8000695c <_dtoa_r+0x2a8>
8000694a:	30 1a       	mov	r10,1
8000694c:	50 da       	stdsp	sp[0x34],r10
8000694e:	c2 28       	rjmp	80006992 <_dtoa_r+0x2de>
80006950:	30 19       	mov	r9,1
80006952:	50 d9       	stdsp	sp[0x34],r9
80006954:	c0 f8       	rjmp	80006972 <_dtoa_r+0x2be>
80006956:	30 08       	mov	r8,0
80006958:	30 14       	mov	r4,1
8000695a:	50 c8       	stdsp	sp[0x30],r8
8000695c:	3f f5       	mov	r5,-1
8000695e:	30 1c       	mov	r12,1
80006960:	30 0b       	mov	r11,0
80006962:	50 95       	stdsp	sp[0x24],r5
80006964:	50 dc       	stdsp	sp[0x34],r12
80006966:	0a 91       	mov	r1,r5
80006968:	31 28       	mov	r8,18
8000696a:	50 eb       	stdsp	sp[0x38],r11
8000696c:	c2 08       	rjmp	800069ac <_dtoa_r+0x2f8>
8000696e:	30 0a       	mov	r10,0
80006970:	50 da       	stdsp	sp[0x34],r10
80006972:	40 e9       	lddsp	r9,sp[0x38]
80006974:	58 09       	cp.w	r9,0
80006976:	e0 89 00 07 	brgt	80006984 <_dtoa_r+0x2d0>
8000697a:	30 18       	mov	r8,1
8000697c:	50 98       	stdsp	sp[0x24],r8
8000697e:	10 91       	mov	r1,r8
80006980:	50 e8       	stdsp	sp[0x38],r8
80006982:	c1 58       	rjmp	800069ac <_dtoa_r+0x2f8>
80006984:	40 e5       	lddsp	r5,sp[0x38]
80006986:	50 95       	stdsp	sp[0x24],r5
80006988:	0a 91       	mov	r1,r5
8000698a:	0a 98       	mov	r8,r5
8000698c:	c1 08       	rjmp	800069ac <_dtoa_r+0x2f8>
8000698e:	30 0c       	mov	r12,0
80006990:	50 dc       	stdsp	sp[0x34],r12
80006992:	40 eb       	lddsp	r11,sp[0x38]
80006994:	ec 0b 00 0b 	add	r11,r6,r11
80006998:	50 9b       	stdsp	sp[0x24],r11
8000699a:	16 98       	mov	r8,r11
8000699c:	2f f8       	sub	r8,-1
8000699e:	58 08       	cp.w	r8,0
800069a0:	e0 89 00 05 	brgt	800069aa <_dtoa_r+0x2f6>
800069a4:	10 91       	mov	r1,r8
800069a6:	30 18       	mov	r8,1
800069a8:	c0 28       	rjmp	800069ac <_dtoa_r+0x2f8>
800069aa:	10 91       	mov	r1,r8
800069ac:	30 09       	mov	r9,0
800069ae:	6e 9a       	ld.w	r10,r7[0x24]
800069b0:	95 19       	st.w	r10[0x4],r9
800069b2:	30 49       	mov	r9,4
800069b4:	c0 68       	rjmp	800069c0 <_dtoa_r+0x30c>
800069b6:	d7 03       	nop
800069b8:	6a 1a       	ld.w	r10,r5[0x4]
800069ba:	a1 79       	lsl	r9,0x1
800069bc:	2f fa       	sub	r10,-1
800069be:	8b 1a       	st.w	r5[0x4],r10
800069c0:	6e 95       	ld.w	r5,r7[0x24]
800069c2:	f2 ca ff ec 	sub	r10,r9,-20
800069c6:	10 3a       	cp.w	r10,r8
800069c8:	fe 98 ff f8 	brls	800069b8 <_dtoa_r+0x304>
800069cc:	6a 1b       	ld.w	r11,r5[0x4]
800069ce:	0e 9c       	mov	r12,r7
800069d0:	e0 a0 0b 6e 	rcall	800080ac <_Balloc>
800069d4:	58 e1       	cp.w	r1,14
800069d6:	5f 88       	srls	r8
800069d8:	8b 0c       	st.w	r5[0x0],r12
800069da:	f1 e4 00 04 	and	r4,r8,r4
800069de:	6e 98       	ld.w	r8,r7[0x24]
800069e0:	70 08       	ld.w	r8,r8[0x0]
800069e2:	50 88       	stdsp	sp[0x20],r8
800069e4:	e0 80 01 82 	breq	80006ce8 <_dtoa_r+0x634>
800069e8:	58 06       	cp.w	r6,0
800069ea:	e0 8a 00 43 	brle	80006a70 <_dtoa_r+0x3bc>
800069ee:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800069f2:	fe c8 c7 8a 	sub	r8,pc,-14454
800069f6:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800069fa:	fa e5 00 18 	st.d	sp[24],r4
800069fe:	ec 04 14 04 	asr	r4,r6,0x4
80006a02:	ed b4 00 04 	bld	r4,0x4
80006a06:	c0 30       	breq	80006a0c <_dtoa_r+0x358>
80006a08:	30 25       	mov	r5,2
80006a0a:	c1 08       	rjmp	80006a2a <_dtoa_r+0x376>
80006a0c:	fe c8 c6 dc 	sub	r8,pc,-14628
80006a10:	f0 e8 00 20 	ld.d	r8,r8[32]
80006a14:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a18:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006a1c:	e0 a0 12 b4 	rcall	80008f84 <__avr32_f64_div>
80006a20:	30 35       	mov	r5,3
80006a22:	14 98       	mov	r8,r10
80006a24:	16 99       	mov	r9,r11
80006a26:	fa e9 00 08 	st.d	sp[8],r8
80006a2a:	fe cc c6 fa 	sub	r12,pc,-14598
80006a2e:	50 a3       	stdsp	sp[0x28],r3
80006a30:	0c 93       	mov	r3,r6
80006a32:	18 96       	mov	r6,r12
80006a34:	c0 f8       	rjmp	80006a52 <_dtoa_r+0x39e>
80006a36:	fa ea 00 18 	ld.d	r10,sp[24]
80006a3a:	ed b4 00 00 	bld	r4,0x0
80006a3e:	c0 81       	brne	80006a4e <_dtoa_r+0x39a>
80006a40:	ec e8 00 00 	ld.d	r8,r6[0]
80006a44:	2f f5       	sub	r5,-1
80006a46:	fe b0 e9 83 	rcall	80003d4c <__avr32_f64_mul>
80006a4a:	fa eb 00 18 	st.d	sp[24],r10
80006a4e:	a1 54       	asr	r4,0x1
80006a50:	2f 86       	sub	r6,-8
80006a52:	58 04       	cp.w	r4,0
80006a54:	cf 11       	brne	80006a36 <_dtoa_r+0x382>
80006a56:	fa e8 00 18 	ld.d	r8,sp[24]
80006a5a:	fa ea 00 08 	ld.d	r10,sp[8]
80006a5e:	06 96       	mov	r6,r3
80006a60:	e0 a0 12 92 	rcall	80008f84 <__avr32_f64_div>
80006a64:	40 a3       	lddsp	r3,sp[0x28]
80006a66:	14 98       	mov	r8,r10
80006a68:	16 99       	mov	r9,r11
80006a6a:	fa e9 00 08 	st.d	sp[8],r8
80006a6e:	c2 f8       	rjmp	80006acc <_dtoa_r+0x418>
80006a70:	ec 08 11 00 	rsub	r8,r6,0
80006a74:	c0 31       	brne	80006a7a <_dtoa_r+0x3c6>
80006a76:	30 25       	mov	r5,2
80006a78:	c2 a8       	rjmp	80006acc <_dtoa_r+0x418>
80006a7a:	fe cc c7 4a 	sub	r12,pc,-14518
80006a7e:	f0 04 14 04 	asr	r4,r8,0x4
80006a82:	50 1c       	stdsp	sp[0x4],r12
80006a84:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006a88:	fe c9 c8 20 	sub	r9,pc,-14304
80006a8c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a90:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006a94:	fe b0 e9 5c 	rcall	80003d4c <__avr32_f64_mul>
80006a98:	40 1c       	lddsp	r12,sp[0x4]
80006a9a:	50 63       	stdsp	sp[0x18],r3
80006a9c:	30 25       	mov	r5,2
80006a9e:	0c 93       	mov	r3,r6
80006aa0:	fa eb 00 08 	st.d	sp[8],r10
80006aa4:	18 96       	mov	r6,r12
80006aa6:	c0 f8       	rjmp	80006ac4 <_dtoa_r+0x410>
80006aa8:	fa ea 00 08 	ld.d	r10,sp[8]
80006aac:	ed b4 00 00 	bld	r4,0x0
80006ab0:	c0 81       	brne	80006ac0 <_dtoa_r+0x40c>
80006ab2:	ec e8 00 00 	ld.d	r8,r6[0]
80006ab6:	2f f5       	sub	r5,-1
80006ab8:	fe b0 e9 4a 	rcall	80003d4c <__avr32_f64_mul>
80006abc:	fa eb 00 08 	st.d	sp[8],r10
80006ac0:	a1 54       	asr	r4,0x1
80006ac2:	2f 86       	sub	r6,-8
80006ac4:	58 04       	cp.w	r4,0
80006ac6:	cf 11       	brne	80006aa8 <_dtoa_r+0x3f4>
80006ac8:	06 96       	mov	r6,r3
80006aca:	40 63       	lddsp	r3,sp[0x18]
80006acc:	41 4a       	lddsp	r10,sp[0x50]
80006ace:	58 0a       	cp.w	r10,0
80006ad0:	c2 a0       	breq	80006b24 <_dtoa_r+0x470>
80006ad2:	fa e8 00 08 	ld.d	r8,sp[8]
80006ad6:	58 01       	cp.w	r1,0
80006ad8:	5f 94       	srgt	r4
80006ada:	fa e9 00 18 	st.d	sp[24],r8
80006ade:	30 08       	mov	r8,0
80006ae0:	fc 19 3f f0 	movh	r9,0x3ff0
80006ae4:	fa ea 00 18 	ld.d	r10,sp[24]
80006ae8:	e0 a0 12 1a 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006aec:	f9 bc 00 00 	moveq	r12,0
80006af0:	f9 bc 01 01 	movne	r12,1
80006af4:	e9 ec 00 0c 	and	r12,r4,r12
80006af8:	c1 60       	breq	80006b24 <_dtoa_r+0x470>
80006afa:	40 98       	lddsp	r8,sp[0x24]
80006afc:	58 08       	cp.w	r8,0
80006afe:	e0 8a 00 f1 	brle	80006ce0 <_dtoa_r+0x62c>
80006b02:	30 08       	mov	r8,0
80006b04:	fc 19 40 24 	movh	r9,0x4024
80006b08:	ec c4 00 01 	sub	r4,r6,1
80006b0c:	fa ea 00 18 	ld.d	r10,sp[24]
80006b10:	2f f5       	sub	r5,-1
80006b12:	50 64       	stdsp	sp[0x18],r4
80006b14:	fe b0 e9 1c 	rcall	80003d4c <__avr32_f64_mul>
80006b18:	40 94       	lddsp	r4,sp[0x24]
80006b1a:	14 98       	mov	r8,r10
80006b1c:	16 99       	mov	r9,r11
80006b1e:	fa e9 00 08 	st.d	sp[8],r8
80006b22:	c0 38       	rjmp	80006b28 <_dtoa_r+0x474>
80006b24:	50 66       	stdsp	sp[0x18],r6
80006b26:	02 94       	mov	r4,r1
80006b28:	0a 9c       	mov	r12,r5
80006b2a:	fe b0 e9 ff 	rcall	80003f28 <__avr32_s32_to_f64>
80006b2e:	fa e8 00 08 	ld.d	r8,sp[8]
80006b32:	fe b0 e9 0d 	rcall	80003d4c <__avr32_f64_mul>
80006b36:	30 08       	mov	r8,0
80006b38:	fc 19 40 1c 	movh	r9,0x401c
80006b3c:	e0 a0 11 0c 	rcall	80008d54 <__avr32_f64_add>
80006b40:	14 98       	mov	r8,r10
80006b42:	16 99       	mov	r9,r11
80006b44:	fa e9 00 28 	st.d	sp[40],r8
80006b48:	fc 18 fc c0 	movh	r8,0xfcc0
80006b4c:	40 a5       	lddsp	r5,sp[0x28]
80006b4e:	10 05       	add	r5,r8
80006b50:	50 a5       	stdsp	sp[0x28],r5
80006b52:	58 04       	cp.w	r4,0
80006b54:	c2 11       	brne	80006b96 <_dtoa_r+0x4e2>
80006b56:	fa ea 00 08 	ld.d	r10,sp[8]
80006b5a:	30 08       	mov	r8,0
80006b5c:	fc 19 40 14 	movh	r9,0x4014
80006b60:	e0 a0 10 2c 	rcall	80008bb8 <__avr32_f64_sub>
80006b64:	40 bc       	lddsp	r12,sp[0x2c]
80006b66:	fa eb 00 08 	st.d	sp[8],r10
80006b6a:	14 98       	mov	r8,r10
80006b6c:	16 99       	mov	r9,r11
80006b6e:	18 9a       	mov	r10,r12
80006b70:	0a 9b       	mov	r11,r5
80006b72:	e0 a0 11 d5 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006b76:	e0 81 02 54 	brne	8000701e <_dtoa_r+0x96a>
80006b7a:	0a 98       	mov	r8,r5
80006b7c:	40 b9       	lddsp	r9,sp[0x2c]
80006b7e:	ee 18 80 00 	eorh	r8,0x8000
80006b82:	fa ea 00 08 	ld.d	r10,sp[8]
80006b86:	10 95       	mov	r5,r8
80006b88:	12 98       	mov	r8,r9
80006b8a:	0a 99       	mov	r9,r5
80006b8c:	e0 a0 11 c8 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006b90:	e0 81 02 3e 	brne	8000700c <_dtoa_r+0x958>
80006b94:	ca 68       	rjmp	80006ce0 <_dtoa_r+0x62c>
80006b96:	fe c9 c9 2e 	sub	r9,pc,-14034
80006b9a:	e8 c8 00 01 	sub	r8,r4,1
80006b9e:	40 d5       	lddsp	r5,sp[0x34]
80006ba0:	58 05       	cp.w	r5,0
80006ba2:	c4 f0       	breq	80006c40 <_dtoa_r+0x58c>
80006ba4:	30 0c       	mov	r12,0
80006ba6:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006baa:	51 3c       	stdsp	sp[0x4c],r12
80006bac:	30 0a       	mov	r10,0
80006bae:	fc 1b 3f e0 	movh	r11,0x3fe0
80006bb2:	e0 a0 11 e9 	rcall	80008f84 <__avr32_f64_div>
80006bb6:	fa e8 00 28 	ld.d	r8,sp[40]
80006bba:	40 85       	lddsp	r5,sp[0x20]
80006bbc:	e0 a0 0f fe 	rcall	80008bb8 <__avr32_f64_sub>
80006bc0:	fa eb 00 28 	st.d	sp[40],r10
80006bc4:	fa ea 00 08 	ld.d	r10,sp[8]
80006bc8:	e0 a0 11 50 	rcall	80008e68 <__avr32_f64_to_s32>
80006bcc:	51 6c       	stdsp	sp[0x58],r12
80006bce:	fe b0 e9 ad 	rcall	80003f28 <__avr32_s32_to_f64>
80006bd2:	14 98       	mov	r8,r10
80006bd4:	16 99       	mov	r9,r11
80006bd6:	fa ea 00 08 	ld.d	r10,sp[8]
80006bda:	e0 a0 0f ef 	rcall	80008bb8 <__avr32_f64_sub>
80006bde:	fa eb 00 08 	st.d	sp[8],r10
80006be2:	41 68       	lddsp	r8,sp[0x58]
80006be4:	2d 08       	sub	r8,-48
80006be6:	0a c8       	st.b	r5++,r8
80006be8:	41 39       	lddsp	r9,sp[0x4c]
80006bea:	2f f9       	sub	r9,-1
80006bec:	51 39       	stdsp	sp[0x4c],r9
80006bee:	fa e8 00 28 	ld.d	r8,sp[40]
80006bf2:	e0 a0 11 95 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006bf6:	e0 81 03 39 	brne	80007268 <_dtoa_r+0xbb4>
80006bfa:	fa e8 00 08 	ld.d	r8,sp[8]
80006bfe:	30 0a       	mov	r10,0
80006c00:	fc 1b 3f f0 	movh	r11,0x3ff0
80006c04:	e0 a0 0f da 	rcall	80008bb8 <__avr32_f64_sub>
80006c08:	fa e8 00 28 	ld.d	r8,sp[40]
80006c0c:	e0 a0 11 88 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006c10:	fa ea 00 28 	ld.d	r10,sp[40]
80006c14:	30 08       	mov	r8,0
80006c16:	fc 19 40 24 	movh	r9,0x4024
80006c1a:	e0 81 00 da 	brne	80006dce <_dtoa_r+0x71a>
80006c1e:	41 3c       	lddsp	r12,sp[0x4c]
80006c20:	08 3c       	cp.w	r12,r4
80006c22:	c5 f4       	brge	80006ce0 <_dtoa_r+0x62c>
80006c24:	fe b0 e8 94 	rcall	80003d4c <__avr32_f64_mul>
80006c28:	30 08       	mov	r8,0
80006c2a:	fa eb 00 28 	st.d	sp[40],r10
80006c2e:	fc 19 40 24 	movh	r9,0x4024
80006c32:	fa ea 00 08 	ld.d	r10,sp[8]
80006c36:	fe b0 e8 8b 	rcall	80003d4c <__avr32_f64_mul>
80006c3a:	fa eb 00 08 	st.d	sp[8],r10
80006c3e:	cc 3b       	rjmp	80006bc4 <_dtoa_r+0x510>
80006c40:	40 85       	lddsp	r5,sp[0x20]
80006c42:	08 05       	add	r5,r4
80006c44:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006c48:	51 35       	stdsp	sp[0x4c],r5
80006c4a:	fa e8 00 28 	ld.d	r8,sp[40]
80006c4e:	40 85       	lddsp	r5,sp[0x20]
80006c50:	fe b0 e8 7e 	rcall	80003d4c <__avr32_f64_mul>
80006c54:	fa eb 00 28 	st.d	sp[40],r10
80006c58:	fa ea 00 08 	ld.d	r10,sp[8]
80006c5c:	e0 a0 11 06 	rcall	80008e68 <__avr32_f64_to_s32>
80006c60:	51 6c       	stdsp	sp[0x58],r12
80006c62:	fe b0 e9 63 	rcall	80003f28 <__avr32_s32_to_f64>
80006c66:	14 98       	mov	r8,r10
80006c68:	16 99       	mov	r9,r11
80006c6a:	fa ea 00 08 	ld.d	r10,sp[8]
80006c6e:	e0 a0 0f a5 	rcall	80008bb8 <__avr32_f64_sub>
80006c72:	fa eb 00 08 	st.d	sp[8],r10
80006c76:	41 68       	lddsp	r8,sp[0x58]
80006c78:	2d 08       	sub	r8,-48
80006c7a:	0a c8       	st.b	r5++,r8
80006c7c:	41 3c       	lddsp	r12,sp[0x4c]
80006c7e:	18 35       	cp.w	r5,r12
80006c80:	c2 81       	brne	80006cd0 <_dtoa_r+0x61c>
80006c82:	30 08       	mov	r8,0
80006c84:	fc 19 3f e0 	movh	r9,0x3fe0
80006c88:	fa ea 00 28 	ld.d	r10,sp[40]
80006c8c:	e0 a0 10 64 	rcall	80008d54 <__avr32_f64_add>
80006c90:	40 85       	lddsp	r5,sp[0x20]
80006c92:	fa e8 00 08 	ld.d	r8,sp[8]
80006c96:	08 05       	add	r5,r4
80006c98:	e0 a0 11 42 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006c9c:	e0 81 00 99 	brne	80006dce <_dtoa_r+0x71a>
80006ca0:	fa e8 00 28 	ld.d	r8,sp[40]
80006ca4:	30 0a       	mov	r10,0
80006ca6:	fc 1b 3f e0 	movh	r11,0x3fe0
80006caa:	e0 a0 0f 87 	rcall	80008bb8 <__avr32_f64_sub>
80006cae:	14 98       	mov	r8,r10
80006cb0:	16 99       	mov	r9,r11
80006cb2:	fa ea 00 08 	ld.d	r10,sp[8]
80006cb6:	e0 a0 11 33 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006cba:	c1 30       	breq	80006ce0 <_dtoa_r+0x62c>
80006cbc:	33 09       	mov	r9,48
80006cbe:	0a 98       	mov	r8,r5
80006cc0:	11 7a       	ld.ub	r10,--r8
80006cc2:	f2 0a 18 00 	cp.b	r10,r9
80006cc6:	e0 81 02 d1 	brne	80007268 <_dtoa_r+0xbb4>
80006cca:	10 95       	mov	r5,r8
80006ccc:	cf 9b       	rjmp	80006cbe <_dtoa_r+0x60a>
80006cce:	d7 03       	nop
80006cd0:	30 08       	mov	r8,0
80006cd2:	fc 19 40 24 	movh	r9,0x4024
80006cd6:	fe b0 e8 3b 	rcall	80003d4c <__avr32_f64_mul>
80006cda:	fa eb 00 08 	st.d	sp[8],r10
80006cde:	cb db       	rjmp	80006c58 <_dtoa_r+0x5a4>
80006ce0:	fa ea 00 3c 	ld.d	r10,sp[60]
80006ce4:	fa eb 00 08 	st.d	sp[8],r10
80006ce8:	58 e6       	cp.w	r6,14
80006cea:	5f ab       	srle	r11
80006cec:	41 8a       	lddsp	r10,sp[0x60]
80006cee:	30 08       	mov	r8,0
80006cf0:	f4 09 11 ff 	rsub	r9,r10,-1
80006cf4:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006cf8:	f0 09 18 00 	cp.b	r9,r8
80006cfc:	e0 80 00 82 	breq	80006e00 <_dtoa_r+0x74c>
80006d00:	40 ea       	lddsp	r10,sp[0x38]
80006d02:	58 01       	cp.w	r1,0
80006d04:	5f a9       	srle	r9
80006d06:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006d0a:	fe ca ca a2 	sub	r10,pc,-13662
80006d0e:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006d12:	fa e5 00 10 	st.d	sp[16],r4
80006d16:	f0 09 18 00 	cp.b	r9,r8
80006d1a:	c1 40       	breq	80006d42 <_dtoa_r+0x68e>
80006d1c:	58 01       	cp.w	r1,0
80006d1e:	e0 81 01 77 	brne	8000700c <_dtoa_r+0x958>
80006d22:	30 08       	mov	r8,0
80006d24:	fc 19 40 14 	movh	r9,0x4014
80006d28:	08 9a       	mov	r10,r4
80006d2a:	0a 9b       	mov	r11,r5
80006d2c:	fe b0 e8 10 	rcall	80003d4c <__avr32_f64_mul>
80006d30:	fa e8 00 08 	ld.d	r8,sp[8]
80006d34:	e0 a0 10 c0 	rcall	80008eb4 <__avr32_f64_cmp_ge>
80006d38:	e0 81 01 6a 	brne	8000700c <_dtoa_r+0x958>
80006d3c:	02 92       	mov	r2,r1
80006d3e:	e0 8f 01 72 	bral	80007022 <_dtoa_r+0x96e>
80006d42:	40 85       	lddsp	r5,sp[0x20]
80006d44:	30 14       	mov	r4,1
80006d46:	fa e8 00 10 	ld.d	r8,sp[16]
80006d4a:	fa ea 00 08 	ld.d	r10,sp[8]
80006d4e:	e0 a0 11 1b 	rcall	80008f84 <__avr32_f64_div>
80006d52:	e0 a0 10 8b 	rcall	80008e68 <__avr32_f64_to_s32>
80006d56:	18 92       	mov	r2,r12
80006d58:	fe b0 e8 e8 	rcall	80003f28 <__avr32_s32_to_f64>
80006d5c:	fa e8 00 10 	ld.d	r8,sp[16]
80006d60:	fe b0 e7 f6 	rcall	80003d4c <__avr32_f64_mul>
80006d64:	14 98       	mov	r8,r10
80006d66:	16 99       	mov	r9,r11
80006d68:	fa ea 00 08 	ld.d	r10,sp[8]
80006d6c:	e0 a0 0f 26 	rcall	80008bb8 <__avr32_f64_sub>
80006d70:	fa eb 00 08 	st.d	sp[8],r10
80006d74:	e4 c8 ff d0 	sub	r8,r2,-48
80006d78:	0a c8       	st.b	r5++,r8
80006d7a:	fc 19 40 24 	movh	r9,0x4024
80006d7e:	30 08       	mov	r8,0
80006d80:	02 34       	cp.w	r4,r1
80006d82:	c3 31       	brne	80006de8 <_dtoa_r+0x734>
80006d84:	fa e8 00 08 	ld.d	r8,sp[8]
80006d88:	e0 a0 0f e6 	rcall	80008d54 <__avr32_f64_add>
80006d8c:	16 91       	mov	r1,r11
80006d8e:	14 90       	mov	r0,r10
80006d90:	14 98       	mov	r8,r10
80006d92:	02 99       	mov	r9,r1
80006d94:	fa ea 00 10 	ld.d	r10,sp[16]
80006d98:	e0 a0 10 c2 	rcall	80008f1c <__avr32_f64_cmp_lt>
80006d9c:	c1 a1       	brne	80006dd0 <_dtoa_r+0x71c>
80006d9e:	fa e8 00 10 	ld.d	r8,sp[16]
80006da2:	00 9a       	mov	r10,r0
80006da4:	02 9b       	mov	r11,r1
80006da6:	e0 a0 10 74 	rcall	80008e8e <__avr32_f64_cmp_eq>
80006daa:	e0 80 02 5e 	breq	80007266 <_dtoa_r+0xbb2>
80006dae:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006db2:	c0 f1       	brne	80006dd0 <_dtoa_r+0x71c>
80006db4:	e0 8f 02 59 	bral	80007266 <_dtoa_r+0xbb2>
80006db8:	40 8a       	lddsp	r10,sp[0x20]
80006dba:	14 38       	cp.w	r8,r10
80006dbc:	c0 30       	breq	80006dc2 <_dtoa_r+0x70e>
80006dbe:	10 95       	mov	r5,r8
80006dc0:	c0 98       	rjmp	80006dd2 <_dtoa_r+0x71e>
80006dc2:	33 08       	mov	r8,48
80006dc4:	40 89       	lddsp	r9,sp[0x20]
80006dc6:	2f f6       	sub	r6,-1
80006dc8:	b2 88       	st.b	r9[0x0],r8
80006dca:	40 88       	lddsp	r8,sp[0x20]
80006dcc:	c0 88       	rjmp	80006ddc <_dtoa_r+0x728>
80006dce:	40 66       	lddsp	r6,sp[0x18]
80006dd0:	33 99       	mov	r9,57
80006dd2:	0a 98       	mov	r8,r5
80006dd4:	11 7a       	ld.ub	r10,--r8
80006dd6:	f2 0a 18 00 	cp.b	r10,r9
80006dda:	ce f0       	breq	80006db8 <_dtoa_r+0x704>
80006ddc:	50 66       	stdsp	sp[0x18],r6
80006dde:	11 89       	ld.ub	r9,r8[0x0]
80006de0:	2f f9       	sub	r9,-1
80006de2:	b0 89       	st.b	r8[0x0],r9
80006de4:	e0 8f 02 42 	bral	80007268 <_dtoa_r+0xbb4>
80006de8:	fe b0 e7 b2 	rcall	80003d4c <__avr32_f64_mul>
80006dec:	2f f4       	sub	r4,-1
80006dee:	fa eb 00 08 	st.d	sp[8],r10
80006df2:	30 08       	mov	r8,0
80006df4:	30 09       	mov	r9,0
80006df6:	e0 a0 10 4c 	rcall	80008e8e <__avr32_f64_cmp_eq>
80006dfa:	ca 60       	breq	80006d46 <_dtoa_r+0x692>
80006dfc:	e0 8f 02 35 	bral	80007266 <_dtoa_r+0xbb2>
80006e00:	40 d8       	lddsp	r8,sp[0x34]
80006e02:	58 08       	cp.w	r8,0
80006e04:	c0 51       	brne	80006e0e <_dtoa_r+0x75a>
80006e06:	04 98       	mov	r8,r2
80006e08:	00 95       	mov	r5,r0
80006e0a:	40 d4       	lddsp	r4,sp[0x34]
80006e0c:	c3 78       	rjmp	80006e7a <_dtoa_r+0x7c6>
80006e0e:	40 c5       	lddsp	r5,sp[0x30]
80006e10:	58 15       	cp.w	r5,1
80006e12:	e0 89 00 0f 	brgt	80006e30 <_dtoa_r+0x77c>
80006e16:	41 74       	lddsp	r4,sp[0x5c]
80006e18:	58 04       	cp.w	r4,0
80006e1a:	c0 40       	breq	80006e22 <_dtoa_r+0x76e>
80006e1c:	f4 c9 fb cd 	sub	r9,r10,-1075
80006e20:	c0 48       	rjmp	80006e28 <_dtoa_r+0x774>
80006e22:	41 99       	lddsp	r9,sp[0x64]
80006e24:	f2 09 11 36 	rsub	r9,r9,54
80006e28:	04 98       	mov	r8,r2
80006e2a:	00 95       	mov	r5,r0
80006e2c:	c1 c8       	rjmp	80006e64 <_dtoa_r+0x7b0>
80006e2e:	d7 03       	nop
80006e30:	e2 c8 00 01 	sub	r8,r1,1
80006e34:	58 01       	cp.w	r1,0
80006e36:	e0 05 17 40 	movge	r5,r0
80006e3a:	e2 09 17 40 	movge	r9,r1
80006e3e:	e1 d1 e5 15 	sublt	r5,r0,r1
80006e42:	f9 b9 05 00 	movlt	r9,0
80006e46:	10 32       	cp.w	r2,r8
80006e48:	e5 d8 e4 18 	subge	r8,r2,r8
80006e4c:	f1 d2 e5 18 	sublt	r8,r8,r2
80006e50:	e5 d8 e5 02 	addlt	r2,r2,r8
80006e54:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006e58:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006e5c:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006e60:	f9 b8 05 00 	movlt	r8,0
80006e64:	40 4b       	lddsp	r11,sp[0x10]
80006e66:	12 0b       	add	r11,r9
80006e68:	50 08       	stdsp	sp[0x0],r8
80006e6a:	50 4b       	stdsp	sp[0x10],r11
80006e6c:	12 00       	add	r0,r9
80006e6e:	30 1b       	mov	r11,1
80006e70:	0e 9c       	mov	r12,r7
80006e72:	e0 a0 0a d1 	rcall	80008414 <__i2b>
80006e76:	40 08       	lddsp	r8,sp[0x0]
80006e78:	18 94       	mov	r4,r12
80006e7a:	40 4a       	lddsp	r10,sp[0x10]
80006e7c:	58 05       	cp.w	r5,0
80006e7e:	5f 99       	srgt	r9
80006e80:	58 0a       	cp.w	r10,0
80006e82:	5f 9a       	srgt	r10
80006e84:	f5 e9 00 09 	and	r9,r10,r9
80006e88:	c0 80       	breq	80006e98 <_dtoa_r+0x7e4>
80006e8a:	40 4c       	lddsp	r12,sp[0x10]
80006e8c:	f8 05 0d 49 	min	r9,r12,r5
80006e90:	12 1c       	sub	r12,r9
80006e92:	12 10       	sub	r0,r9
80006e94:	50 4c       	stdsp	sp[0x10],r12
80006e96:	12 15       	sub	r5,r9
80006e98:	58 02       	cp.w	r2,0
80006e9a:	e0 8a 00 27 	brle	80006ee8 <_dtoa_r+0x834>
80006e9e:	40 db       	lddsp	r11,sp[0x34]
80006ea0:	58 0b       	cp.w	r11,0
80006ea2:	c1 d0       	breq	80006edc <_dtoa_r+0x828>
80006ea4:	58 08       	cp.w	r8,0
80006ea6:	e0 8a 00 17 	brle	80006ed4 <_dtoa_r+0x820>
80006eaa:	10 9a       	mov	r10,r8
80006eac:	50 08       	stdsp	sp[0x0],r8
80006eae:	08 9b       	mov	r11,r4
80006eb0:	0e 9c       	mov	r12,r7
80006eb2:	e0 a0 0a f7 	rcall	800084a0 <__pow5mult>
80006eb6:	06 9a       	mov	r10,r3
80006eb8:	18 9b       	mov	r11,r12
80006eba:	18 94       	mov	r4,r12
80006ebc:	0e 9c       	mov	r12,r7
80006ebe:	e0 a0 0a 2b 	rcall	80008314 <__multiply>
80006ec2:	18 99       	mov	r9,r12
80006ec4:	06 9b       	mov	r11,r3
80006ec6:	50 19       	stdsp	sp[0x4],r9
80006ec8:	0e 9c       	mov	r12,r7
80006eca:	e0 a0 08 d7 	rcall	80008078 <_Bfree>
80006ece:	40 19       	lddsp	r9,sp[0x4]
80006ed0:	40 08       	lddsp	r8,sp[0x0]
80006ed2:	12 93       	mov	r3,r9
80006ed4:	e4 08 01 0a 	sub	r10,r2,r8
80006ed8:	c0 80       	breq	80006ee8 <_dtoa_r+0x834>
80006eda:	c0 28       	rjmp	80006ede <_dtoa_r+0x82a>
80006edc:	04 9a       	mov	r10,r2
80006ede:	06 9b       	mov	r11,r3
80006ee0:	0e 9c       	mov	r12,r7
80006ee2:	e0 a0 0a df 	rcall	800084a0 <__pow5mult>
80006ee6:	18 93       	mov	r3,r12
80006ee8:	30 1b       	mov	r11,1
80006eea:	0e 9c       	mov	r12,r7
80006eec:	e0 a0 0a 94 	rcall	80008414 <__i2b>
80006ef0:	41 1a       	lddsp	r10,sp[0x44]
80006ef2:	18 92       	mov	r2,r12
80006ef4:	58 0a       	cp.w	r10,0
80006ef6:	e0 8a 00 07 	brle	80006f04 <_dtoa_r+0x850>
80006efa:	18 9b       	mov	r11,r12
80006efc:	0e 9c       	mov	r12,r7
80006efe:	e0 a0 0a d1 	rcall	800084a0 <__pow5mult>
80006f02:	18 92       	mov	r2,r12
80006f04:	40 c9       	lddsp	r9,sp[0x30]
80006f06:	58 19       	cp.w	r9,1
80006f08:	e0 89 00 14 	brgt	80006f30 <_dtoa_r+0x87c>
80006f0c:	40 38       	lddsp	r8,sp[0xc]
80006f0e:	58 08       	cp.w	r8,0
80006f10:	c1 01       	brne	80006f30 <_dtoa_r+0x87c>
80006f12:	40 29       	lddsp	r9,sp[0x8]
80006f14:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006f18:	c0 c1       	brne	80006f30 <_dtoa_r+0x87c>
80006f1a:	12 98       	mov	r8,r9
80006f1c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006f20:	c0 80       	breq	80006f30 <_dtoa_r+0x87c>
80006f22:	40 4c       	lddsp	r12,sp[0x10]
80006f24:	30 1b       	mov	r11,1
80006f26:	2f fc       	sub	r12,-1
80006f28:	2f f0       	sub	r0,-1
80006f2a:	50 4c       	stdsp	sp[0x10],r12
80006f2c:	50 6b       	stdsp	sp[0x18],r11
80006f2e:	c0 38       	rjmp	80006f34 <_dtoa_r+0x880>
80006f30:	30 0a       	mov	r10,0
80006f32:	50 6a       	stdsp	sp[0x18],r10
80006f34:	41 19       	lddsp	r9,sp[0x44]
80006f36:	58 09       	cp.w	r9,0
80006f38:	c0 31       	brne	80006f3e <_dtoa_r+0x88a>
80006f3a:	30 1c       	mov	r12,1
80006f3c:	c0 98       	rjmp	80006f4e <_dtoa_r+0x89a>
80006f3e:	64 48       	ld.w	r8,r2[0x10]
80006f40:	2f c8       	sub	r8,-4
80006f42:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006f46:	e0 a0 08 08 	rcall	80007f56 <__hi0bits>
80006f4a:	f8 0c 11 20 	rsub	r12,r12,32
80006f4e:	40 4b       	lddsp	r11,sp[0x10]
80006f50:	f8 0b 00 08 	add	r8,r12,r11
80006f54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006f58:	c0 c0       	breq	80006f70 <_dtoa_r+0x8bc>
80006f5a:	f0 08 11 20 	rsub	r8,r8,32
80006f5e:	58 48       	cp.w	r8,4
80006f60:	e0 8a 00 06 	brle	80006f6c <_dtoa_r+0x8b8>
80006f64:	20 48       	sub	r8,4
80006f66:	10 0b       	add	r11,r8
80006f68:	50 4b       	stdsp	sp[0x10],r11
80006f6a:	c0 78       	rjmp	80006f78 <_dtoa_r+0x8c4>
80006f6c:	58 48       	cp.w	r8,4
80006f6e:	c0 70       	breq	80006f7c <_dtoa_r+0x8c8>
80006f70:	40 4a       	lddsp	r10,sp[0x10]
80006f72:	2e 48       	sub	r8,-28
80006f74:	10 0a       	add	r10,r8
80006f76:	50 4a       	stdsp	sp[0x10],r10
80006f78:	10 00       	add	r0,r8
80006f7a:	10 05       	add	r5,r8
80006f7c:	58 00       	cp.w	r0,0
80006f7e:	e0 8a 00 08 	brle	80006f8e <_dtoa_r+0x8da>
80006f82:	06 9b       	mov	r11,r3
80006f84:	00 9a       	mov	r10,r0
80006f86:	0e 9c       	mov	r12,r7
80006f88:	e0 a0 09 82 	rcall	8000828c <__lshift>
80006f8c:	18 93       	mov	r3,r12
80006f8e:	40 49       	lddsp	r9,sp[0x10]
80006f90:	58 09       	cp.w	r9,0
80006f92:	e0 8a 00 08 	brle	80006fa2 <_dtoa_r+0x8ee>
80006f96:	04 9b       	mov	r11,r2
80006f98:	12 9a       	mov	r10,r9
80006f9a:	0e 9c       	mov	r12,r7
80006f9c:	e0 a0 09 78 	rcall	8000828c <__lshift>
80006fa0:	18 92       	mov	r2,r12
80006fa2:	41 48       	lddsp	r8,sp[0x50]
80006fa4:	58 08       	cp.w	r8,0
80006fa6:	c1 b0       	breq	80006fdc <_dtoa_r+0x928>
80006fa8:	04 9b       	mov	r11,r2
80006faa:	06 9c       	mov	r12,r3
80006fac:	e0 a0 08 4c 	rcall	80008044 <__mcmp>
80006fb0:	c1 64       	brge	80006fdc <_dtoa_r+0x928>
80006fb2:	06 9b       	mov	r11,r3
80006fb4:	30 09       	mov	r9,0
80006fb6:	30 aa       	mov	r10,10
80006fb8:	0e 9c       	mov	r12,r7
80006fba:	e0 a0 0a 35 	rcall	80008424 <__multadd>
80006fbe:	20 16       	sub	r6,1
80006fc0:	18 93       	mov	r3,r12
80006fc2:	40 dc       	lddsp	r12,sp[0x34]
80006fc4:	58 0c       	cp.w	r12,0
80006fc6:	c0 31       	brne	80006fcc <_dtoa_r+0x918>
80006fc8:	40 91       	lddsp	r1,sp[0x24]
80006fca:	c0 98       	rjmp	80006fdc <_dtoa_r+0x928>
80006fcc:	08 9b       	mov	r11,r4
80006fce:	40 91       	lddsp	r1,sp[0x24]
80006fd0:	30 09       	mov	r9,0
80006fd2:	30 aa       	mov	r10,10
80006fd4:	0e 9c       	mov	r12,r7
80006fd6:	e0 a0 0a 27 	rcall	80008424 <__multadd>
80006fda:	18 94       	mov	r4,r12
80006fdc:	58 01       	cp.w	r1,0
80006fde:	5f a9       	srle	r9
80006fe0:	40 cb       	lddsp	r11,sp[0x30]
80006fe2:	58 2b       	cp.w	r11,2
80006fe4:	5f 98       	srgt	r8
80006fe6:	f3 e8 00 08 	and	r8,r9,r8
80006fea:	c2 50       	breq	80007034 <_dtoa_r+0x980>
80006fec:	58 01       	cp.w	r1,0
80006fee:	c1 11       	brne	80007010 <_dtoa_r+0x95c>
80006ff0:	04 9b       	mov	r11,r2
80006ff2:	02 99       	mov	r9,r1
80006ff4:	30 5a       	mov	r10,5
80006ff6:	0e 9c       	mov	r12,r7
80006ff8:	e0 a0 0a 16 	rcall	80008424 <__multadd>
80006ffc:	18 92       	mov	r2,r12
80006ffe:	18 9b       	mov	r11,r12
80007000:	06 9c       	mov	r12,r3
80007002:	e0 a0 08 21 	rcall	80008044 <__mcmp>
80007006:	e0 89 00 0f 	brgt	80007024 <_dtoa_r+0x970>
8000700a:	c0 38       	rjmp	80007010 <_dtoa_r+0x95c>
8000700c:	30 02       	mov	r2,0
8000700e:	04 94       	mov	r4,r2
80007010:	40 ea       	lddsp	r10,sp[0x38]
80007012:	30 09       	mov	r9,0
80007014:	5c da       	com	r10
80007016:	40 85       	lddsp	r5,sp[0x20]
80007018:	50 6a       	stdsp	sp[0x18],r10
8000701a:	50 49       	stdsp	sp[0x10],r9
8000701c:	c0 f9       	rjmp	8000723a <_dtoa_r+0xb86>
8000701e:	08 92       	mov	r2,r4
80007020:	40 66       	lddsp	r6,sp[0x18]
80007022:	04 94       	mov	r4,r2
80007024:	2f f6       	sub	r6,-1
80007026:	50 66       	stdsp	sp[0x18],r6
80007028:	33 18       	mov	r8,49
8000702a:	40 85       	lddsp	r5,sp[0x20]
8000702c:	0a c8       	st.b	r5++,r8
8000702e:	30 08       	mov	r8,0
80007030:	50 48       	stdsp	sp[0x10],r8
80007032:	c0 49       	rjmp	8000723a <_dtoa_r+0xb86>
80007034:	40 dc       	lddsp	r12,sp[0x34]
80007036:	58 0c       	cp.w	r12,0
80007038:	e0 80 00 b5 	breq	800071a2 <_dtoa_r+0xaee>
8000703c:	58 05       	cp.w	r5,0
8000703e:	e0 8a 00 08 	brle	8000704e <_dtoa_r+0x99a>
80007042:	08 9b       	mov	r11,r4
80007044:	0a 9a       	mov	r10,r5
80007046:	0e 9c       	mov	r12,r7
80007048:	e0 a0 09 22 	rcall	8000828c <__lshift>
8000704c:	18 94       	mov	r4,r12
8000704e:	40 6b       	lddsp	r11,sp[0x18]
80007050:	58 0b       	cp.w	r11,0
80007052:	c0 31       	brne	80007058 <_dtoa_r+0x9a4>
80007054:	08 9c       	mov	r12,r4
80007056:	c1 38       	rjmp	8000707c <_dtoa_r+0x9c8>
80007058:	68 1b       	ld.w	r11,r4[0x4]
8000705a:	0e 9c       	mov	r12,r7
8000705c:	e0 a0 08 28 	rcall	800080ac <_Balloc>
80007060:	68 4a       	ld.w	r10,r4[0x10]
80007062:	18 95       	mov	r5,r12
80007064:	e8 cb ff f4 	sub	r11,r4,-12
80007068:	2f ea       	sub	r10,-2
8000706a:	2f 4c       	sub	r12,-12
8000706c:	a3 6a       	lsl	r10,0x2
8000706e:	fe b0 e8 42 	rcall	800040f2 <memcpy>
80007072:	0a 9b       	mov	r11,r5
80007074:	30 1a       	mov	r10,1
80007076:	0e 9c       	mov	r12,r7
80007078:	e0 a0 09 0a 	rcall	8000828c <__lshift>
8000707c:	50 44       	stdsp	sp[0x10],r4
8000707e:	40 3a       	lddsp	r10,sp[0xc]
80007080:	30 19       	mov	r9,1
80007082:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80007086:	18 94       	mov	r4,r12
80007088:	50 da       	stdsp	sp[0x34],r10
8000708a:	40 85       	lddsp	r5,sp[0x20]
8000708c:	50 99       	stdsp	sp[0x24],r9
8000708e:	50 26       	stdsp	sp[0x8],r6
80007090:	50 e1       	stdsp	sp[0x38],r1
80007092:	04 9b       	mov	r11,r2
80007094:	06 9c       	mov	r12,r3
80007096:	fe b0 fa 7f 	rcall	80006594 <quorem>
8000709a:	40 4b       	lddsp	r11,sp[0x10]
8000709c:	f8 c0 ff d0 	sub	r0,r12,-48
800070a0:	06 9c       	mov	r12,r3
800070a2:	e0 a0 07 d1 	rcall	80008044 <__mcmp>
800070a6:	08 9a       	mov	r10,r4
800070a8:	50 6c       	stdsp	sp[0x18],r12
800070aa:	04 9b       	mov	r11,r2
800070ac:	0e 9c       	mov	r12,r7
800070ae:	e0 a0 08 87 	rcall	800081bc <__mdiff>
800070b2:	18 91       	mov	r1,r12
800070b4:	78 38       	ld.w	r8,r12[0xc]
800070b6:	58 08       	cp.w	r8,0
800070b8:	c0 30       	breq	800070be <_dtoa_r+0xa0a>
800070ba:	30 16       	mov	r6,1
800070bc:	c0 68       	rjmp	800070c8 <_dtoa_r+0xa14>
800070be:	18 9b       	mov	r11,r12
800070c0:	06 9c       	mov	r12,r3
800070c2:	e0 a0 07 c1 	rcall	80008044 <__mcmp>
800070c6:	18 96       	mov	r6,r12
800070c8:	0e 9c       	mov	r12,r7
800070ca:	02 9b       	mov	r11,r1
800070cc:	e0 a0 07 d6 	rcall	80008078 <_Bfree>
800070d0:	40 cc       	lddsp	r12,sp[0x30]
800070d2:	ed ec 10 08 	or	r8,r6,r12
800070d6:	c0 d1       	brne	800070f0 <_dtoa_r+0xa3c>
800070d8:	40 db       	lddsp	r11,sp[0x34]
800070da:	58 0b       	cp.w	r11,0
800070dc:	c0 a1       	brne	800070f0 <_dtoa_r+0xa3c>
800070de:	40 26       	lddsp	r6,sp[0x8]
800070e0:	e0 40 00 39 	cp.w	r0,57
800070e4:	c3 00       	breq	80007144 <_dtoa_r+0xa90>
800070e6:	40 6a       	lddsp	r10,sp[0x18]
800070e8:	58 0a       	cp.w	r10,0
800070ea:	e0 89 00 24 	brgt	80007132 <_dtoa_r+0xa7e>
800070ee:	c2 f8       	rjmp	8000714c <_dtoa_r+0xa98>
800070f0:	40 69       	lddsp	r9,sp[0x18]
800070f2:	58 09       	cp.w	r9,0
800070f4:	c0 85       	brlt	80007104 <_dtoa_r+0xa50>
800070f6:	12 98       	mov	r8,r9
800070f8:	40 cc       	lddsp	r12,sp[0x30]
800070fa:	18 48       	or	r8,r12
800070fc:	c1 d1       	brne	80007136 <_dtoa_r+0xa82>
800070fe:	40 db       	lddsp	r11,sp[0x34]
80007100:	58 0b       	cp.w	r11,0
80007102:	c1 a1       	brne	80007136 <_dtoa_r+0xa82>
80007104:	0c 99       	mov	r9,r6
80007106:	40 26       	lddsp	r6,sp[0x8]
80007108:	58 09       	cp.w	r9,0
8000710a:	e0 8a 00 21 	brle	8000714c <_dtoa_r+0xa98>
8000710e:	06 9b       	mov	r11,r3
80007110:	30 1a       	mov	r10,1
80007112:	0e 9c       	mov	r12,r7
80007114:	e0 a0 08 bc 	rcall	8000828c <__lshift>
80007118:	04 9b       	mov	r11,r2
8000711a:	18 93       	mov	r3,r12
8000711c:	e0 a0 07 94 	rcall	80008044 <__mcmp>
80007120:	e0 89 00 06 	brgt	8000712c <_dtoa_r+0xa78>
80007124:	c1 41       	brne	8000714c <_dtoa_r+0xa98>
80007126:	ed b0 00 00 	bld	r0,0x0
8000712a:	c1 11       	brne	8000714c <_dtoa_r+0xa98>
8000712c:	e0 40 00 39 	cp.w	r0,57
80007130:	c0 a0       	breq	80007144 <_dtoa_r+0xa90>
80007132:	2f f0       	sub	r0,-1
80007134:	c0 c8       	rjmp	8000714c <_dtoa_r+0xa98>
80007136:	58 06       	cp.w	r6,0
80007138:	e0 8a 00 0c 	brle	80007150 <_dtoa_r+0xa9c>
8000713c:	40 26       	lddsp	r6,sp[0x8]
8000713e:	e0 40 00 39 	cp.w	r0,57
80007142:	c0 41       	brne	8000714a <_dtoa_r+0xa96>
80007144:	33 98       	mov	r8,57
80007146:	0a c8       	st.b	r5++,r8
80007148:	c6 78       	rjmp	80007216 <_dtoa_r+0xb62>
8000714a:	2f f0       	sub	r0,-1
8000714c:	0a c0       	st.b	r5++,r0
8000714e:	c7 58       	rjmp	80007238 <_dtoa_r+0xb84>
80007150:	0a c0       	st.b	r5++,r0
80007152:	40 9a       	lddsp	r10,sp[0x24]
80007154:	40 e9       	lddsp	r9,sp[0x38]
80007156:	12 3a       	cp.w	r10,r9
80007158:	c4 30       	breq	800071de <_dtoa_r+0xb2a>
8000715a:	06 9b       	mov	r11,r3
8000715c:	30 09       	mov	r9,0
8000715e:	30 aa       	mov	r10,10
80007160:	0e 9c       	mov	r12,r7
80007162:	e0 a0 09 61 	rcall	80008424 <__multadd>
80007166:	40 48       	lddsp	r8,sp[0x10]
80007168:	18 93       	mov	r3,r12
8000716a:	08 38       	cp.w	r8,r4
8000716c:	c0 91       	brne	8000717e <_dtoa_r+0xaca>
8000716e:	10 9b       	mov	r11,r8
80007170:	30 09       	mov	r9,0
80007172:	30 aa       	mov	r10,10
80007174:	0e 9c       	mov	r12,r7
80007176:	e0 a0 09 57 	rcall	80008424 <__multadd>
8000717a:	50 4c       	stdsp	sp[0x10],r12
8000717c:	c0 e8       	rjmp	80007198 <_dtoa_r+0xae4>
8000717e:	40 4b       	lddsp	r11,sp[0x10]
80007180:	30 09       	mov	r9,0
80007182:	30 aa       	mov	r10,10
80007184:	0e 9c       	mov	r12,r7
80007186:	e0 a0 09 4f 	rcall	80008424 <__multadd>
8000718a:	08 9b       	mov	r11,r4
8000718c:	50 4c       	stdsp	sp[0x10],r12
8000718e:	30 09       	mov	r9,0
80007190:	30 aa       	mov	r10,10
80007192:	0e 9c       	mov	r12,r7
80007194:	e0 a0 09 48 	rcall	80008424 <__multadd>
80007198:	18 94       	mov	r4,r12
8000719a:	40 9c       	lddsp	r12,sp[0x24]
8000719c:	2f fc       	sub	r12,-1
8000719e:	50 9c       	stdsp	sp[0x24],r12
800071a0:	c7 9b       	rjmp	80007092 <_dtoa_r+0x9de>
800071a2:	30 18       	mov	r8,1
800071a4:	06 90       	mov	r0,r3
800071a6:	40 85       	lddsp	r5,sp[0x20]
800071a8:	08 93       	mov	r3,r4
800071aa:	0c 94       	mov	r4,r6
800071ac:	10 96       	mov	r6,r8
800071ae:	04 9b       	mov	r11,r2
800071b0:	00 9c       	mov	r12,r0
800071b2:	fe b0 f9 f1 	rcall	80006594 <quorem>
800071b6:	2d 0c       	sub	r12,-48
800071b8:	0a cc       	st.b	r5++,r12
800071ba:	02 36       	cp.w	r6,r1
800071bc:	c0 a4       	brge	800071d0 <_dtoa_r+0xb1c>
800071be:	00 9b       	mov	r11,r0
800071c0:	30 09       	mov	r9,0
800071c2:	30 aa       	mov	r10,10
800071c4:	0e 9c       	mov	r12,r7
800071c6:	2f f6       	sub	r6,-1
800071c8:	e0 a0 09 2e 	rcall	80008424 <__multadd>
800071cc:	18 90       	mov	r0,r12
800071ce:	cf 0b       	rjmp	800071ae <_dtoa_r+0xafa>
800071d0:	08 96       	mov	r6,r4
800071d2:	30 0b       	mov	r11,0
800071d4:	06 94       	mov	r4,r3
800071d6:	50 4b       	stdsp	sp[0x10],r11
800071d8:	00 93       	mov	r3,r0
800071da:	18 90       	mov	r0,r12
800071dc:	c0 28       	rjmp	800071e0 <_dtoa_r+0xb2c>
800071de:	40 26       	lddsp	r6,sp[0x8]
800071e0:	06 9b       	mov	r11,r3
800071e2:	30 1a       	mov	r10,1
800071e4:	0e 9c       	mov	r12,r7
800071e6:	e0 a0 08 53 	rcall	8000828c <__lshift>
800071ea:	04 9b       	mov	r11,r2
800071ec:	18 93       	mov	r3,r12
800071ee:	e0 a0 07 2b 	rcall	80008044 <__mcmp>
800071f2:	e0 89 00 12 	brgt	80007216 <_dtoa_r+0xb62>
800071f6:	c1 b1       	brne	8000722c <_dtoa_r+0xb78>
800071f8:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800071fc:	c0 d1       	brne	80007216 <_dtoa_r+0xb62>
800071fe:	c1 78       	rjmp	8000722c <_dtoa_r+0xb78>
80007200:	40 89       	lddsp	r9,sp[0x20]
80007202:	12 38       	cp.w	r8,r9
80007204:	c0 30       	breq	8000720a <_dtoa_r+0xb56>
80007206:	10 95       	mov	r5,r8
80007208:	c0 88       	rjmp	80007218 <_dtoa_r+0xb64>
8000720a:	2f f6       	sub	r6,-1
8000720c:	50 66       	stdsp	sp[0x18],r6
8000720e:	33 18       	mov	r8,49
80007210:	40 8c       	lddsp	r12,sp[0x20]
80007212:	b8 88       	st.b	r12[0x0],r8
80007214:	c1 38       	rjmp	8000723a <_dtoa_r+0xb86>
80007216:	33 9a       	mov	r10,57
80007218:	0a 98       	mov	r8,r5
8000721a:	11 79       	ld.ub	r9,--r8
8000721c:	f4 09 18 00 	cp.b	r9,r10
80007220:	cf 00       	breq	80007200 <_dtoa_r+0xb4c>
80007222:	2f f9       	sub	r9,-1
80007224:	b0 89       	st.b	r8[0x0],r9
80007226:	c0 98       	rjmp	80007238 <_dtoa_r+0xb84>
80007228:	10 95       	mov	r5,r8
8000722a:	c0 28       	rjmp	8000722e <_dtoa_r+0xb7a>
8000722c:	33 09       	mov	r9,48
8000722e:	0a 98       	mov	r8,r5
80007230:	11 7a       	ld.ub	r10,--r8
80007232:	f2 0a 18 00 	cp.b	r10,r9
80007236:	cf 90       	breq	80007228 <_dtoa_r+0xb74>
80007238:	50 66       	stdsp	sp[0x18],r6
8000723a:	04 9b       	mov	r11,r2
8000723c:	0e 9c       	mov	r12,r7
8000723e:	e0 a0 07 1d 	rcall	80008078 <_Bfree>
80007242:	58 04       	cp.w	r4,0
80007244:	c1 20       	breq	80007268 <_dtoa_r+0xbb4>
80007246:	40 4b       	lddsp	r11,sp[0x10]
80007248:	08 3b       	cp.w	r11,r4
8000724a:	5f 19       	srne	r9
8000724c:	58 0b       	cp.w	r11,0
8000724e:	5f 18       	srne	r8
80007250:	f3 e8 00 08 	and	r8,r9,r8
80007254:	c0 40       	breq	8000725c <_dtoa_r+0xba8>
80007256:	0e 9c       	mov	r12,r7
80007258:	e0 a0 07 10 	rcall	80008078 <_Bfree>
8000725c:	08 9b       	mov	r11,r4
8000725e:	0e 9c       	mov	r12,r7
80007260:	e0 a0 07 0c 	rcall	80008078 <_Bfree>
80007264:	c0 28       	rjmp	80007268 <_dtoa_r+0xbb4>
80007266:	50 66       	stdsp	sp[0x18],r6
80007268:	0e 9c       	mov	r12,r7
8000726a:	06 9b       	mov	r11,r3
8000726c:	e0 a0 07 06 	rcall	80008078 <_Bfree>
80007270:	30 08       	mov	r8,0
80007272:	aa 88       	st.b	r5[0x0],r8
80007274:	40 68       	lddsp	r8,sp[0x18]
80007276:	41 5a       	lddsp	r10,sp[0x54]
80007278:	2f f8       	sub	r8,-1
8000727a:	41 29       	lddsp	r9,sp[0x48]
8000727c:	95 08       	st.w	r10[0x0],r8
8000727e:	40 8c       	lddsp	r12,sp[0x20]
80007280:	58 09       	cp.w	r9,0
80007282:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80007286:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000728a:	2e 6d       	sub	sp,-104
8000728c:	d8 32       	popm	r0-r7,pc
8000728e:	d7 03       	nop

80007290 <_fflush_r>:
80007290:	d4 21       	pushm	r4-r7,lr
80007292:	16 97       	mov	r7,r11
80007294:	18 96       	mov	r6,r12
80007296:	76 48       	ld.w	r8,r11[0x10]
80007298:	58 08       	cp.w	r8,0
8000729a:	c7 f0       	breq	80007398 <_fflush_r+0x108>
8000729c:	58 0c       	cp.w	r12,0
8000729e:	c0 50       	breq	800072a8 <_fflush_r+0x18>
800072a0:	78 68       	ld.w	r8,r12[0x18]
800072a2:	58 08       	cp.w	r8,0
800072a4:	c0 21       	brne	800072a8 <_fflush_r+0x18>
800072a6:	cc dc       	rcall	80007440 <__sinit>
800072a8:	fe c8 d0 f4 	sub	r8,pc,-12044
800072ac:	10 37       	cp.w	r7,r8
800072ae:	c0 31       	brne	800072b4 <_fflush_r+0x24>
800072b0:	6c 07       	ld.w	r7,r6[0x0]
800072b2:	c0 c8       	rjmp	800072ca <_fflush_r+0x3a>
800072b4:	fe c8 d0 e0 	sub	r8,pc,-12064
800072b8:	10 37       	cp.w	r7,r8
800072ba:	c0 31       	brne	800072c0 <_fflush_r+0x30>
800072bc:	6c 17       	ld.w	r7,r6[0x4]
800072be:	c0 68       	rjmp	800072ca <_fflush_r+0x3a>
800072c0:	fe c8 d0 cc 	sub	r8,pc,-12084
800072c4:	10 37       	cp.w	r7,r8
800072c6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800072ca:	8e 6a       	ld.sh	r10,r7[0xc]
800072cc:	14 98       	mov	r8,r10
800072ce:	ed ba 00 03 	bld	r10,0x3
800072d2:	c4 20       	breq	80007356 <_fflush_r+0xc6>
800072d4:	ab ba       	sbr	r10,0xb
800072d6:	ae 6a       	st.h	r7[0xc],r10
800072d8:	6e 18       	ld.w	r8,r7[0x4]
800072da:	58 08       	cp.w	r8,0
800072dc:	e0 89 00 06 	brgt	800072e8 <_fflush_r+0x58>
800072e0:	6f 08       	ld.w	r8,r7[0x40]
800072e2:	58 08       	cp.w	r8,0
800072e4:	e0 8a 00 5a 	brle	80007398 <_fflush_r+0x108>
800072e8:	6e b8       	ld.w	r8,r7[0x2c]
800072ea:	58 08       	cp.w	r8,0
800072ec:	c5 60       	breq	80007398 <_fflush_r+0x108>
800072ee:	e2 1a 10 00 	andl	r10,0x1000,COH
800072f2:	c0 30       	breq	800072f8 <_fflush_r+0x68>
800072f4:	6f 55       	ld.w	r5,r7[0x54]
800072f6:	c0 f8       	rjmp	80007314 <_fflush_r+0x84>
800072f8:	30 19       	mov	r9,1
800072fa:	6e 8b       	ld.w	r11,r7[0x20]
800072fc:	0c 9c       	mov	r12,r6
800072fe:	5d 18       	icall	r8
80007300:	18 95       	mov	r5,r12
80007302:	5b fc       	cp.w	r12,-1
80007304:	c0 81       	brne	80007314 <_fflush_r+0x84>
80007306:	6c 38       	ld.w	r8,r6[0xc]
80007308:	59 d8       	cp.w	r8,29
8000730a:	c4 70       	breq	80007398 <_fflush_r+0x108>
8000730c:	8e 68       	ld.sh	r8,r7[0xc]
8000730e:	a7 a8       	sbr	r8,0x6
80007310:	ae 68       	st.h	r7[0xc],r8
80007312:	d8 22       	popm	r4-r7,pc
80007314:	8e 68       	ld.sh	r8,r7[0xc]
80007316:	ed b8 00 02 	bld	r8,0x2
8000731a:	c0 91       	brne	8000732c <_fflush_r+0x9c>
8000731c:	6e 18       	ld.w	r8,r7[0x4]
8000731e:	10 15       	sub	r5,r8
80007320:	6e d8       	ld.w	r8,r7[0x34]
80007322:	58 08       	cp.w	r8,0
80007324:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80007328:	eb d8 e1 15 	subne	r5,r5,r8
8000732c:	6e b8       	ld.w	r8,r7[0x2c]
8000732e:	0c 9c       	mov	r12,r6
80007330:	30 09       	mov	r9,0
80007332:	0a 9a       	mov	r10,r5
80007334:	6e 8b       	ld.w	r11,r7[0x20]
80007336:	5d 18       	icall	r8
80007338:	8e 68       	ld.sh	r8,r7[0xc]
8000733a:	0a 3c       	cp.w	r12,r5
8000733c:	c2 61       	brne	80007388 <_fflush_r+0xf8>
8000733e:	ab d8       	cbr	r8,0xb
80007340:	30 0c       	mov	r12,0
80007342:	6e 49       	ld.w	r9,r7[0x10]
80007344:	ae 68       	st.h	r7[0xc],r8
80007346:	8f 1c       	st.w	r7[0x4],r12
80007348:	8f 09       	st.w	r7[0x0],r9
8000734a:	ed b8 00 0c 	bld	r8,0xc
8000734e:	c2 51       	brne	80007398 <_fflush_r+0x108>
80007350:	ef 45 00 54 	st.w	r7[84],r5
80007354:	d8 22       	popm	r4-r7,pc
80007356:	6e 45       	ld.w	r5,r7[0x10]
80007358:	58 05       	cp.w	r5,0
8000735a:	c1 f0       	breq	80007398 <_fflush_r+0x108>
8000735c:	6e 04       	ld.w	r4,r7[0x0]
8000735e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80007362:	8f 05       	st.w	r7[0x0],r5
80007364:	f9 b8 01 00 	movne	r8,0
80007368:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000736c:	0a 14       	sub	r4,r5
8000736e:	8f 28       	st.w	r7[0x8],r8
80007370:	c1 18       	rjmp	80007392 <_fflush_r+0x102>
80007372:	08 99       	mov	r9,r4
80007374:	0a 9a       	mov	r10,r5
80007376:	6e a8       	ld.w	r8,r7[0x28]
80007378:	6e 8b       	ld.w	r11,r7[0x20]
8000737a:	0c 9c       	mov	r12,r6
8000737c:	5d 18       	icall	r8
8000737e:	18 14       	sub	r4,r12
80007380:	58 0c       	cp.w	r12,0
80007382:	e0 89 00 07 	brgt	80007390 <_fflush_r+0x100>
80007386:	8e 68       	ld.sh	r8,r7[0xc]
80007388:	a7 a8       	sbr	r8,0x6
8000738a:	3f fc       	mov	r12,-1
8000738c:	ae 68       	st.h	r7[0xc],r8
8000738e:	d8 22       	popm	r4-r7,pc
80007390:	18 05       	add	r5,r12
80007392:	58 04       	cp.w	r4,0
80007394:	fe 99 ff ef 	brgt	80007372 <_fflush_r+0xe2>
80007398:	d8 2a       	popm	r4-r7,pc,r12=0
8000739a:	d7 03       	nop

8000739c <__sfp_lock_acquire>:
8000739c:	5e fc       	retal	r12

8000739e <__sfp_lock_release>:
8000739e:	5e fc       	retal	r12

800073a0 <_cleanup_r>:
800073a0:	d4 01       	pushm	lr
800073a2:	fe cb e8 6a 	sub	r11,pc,-6038
800073a6:	e0 a0 02 fd 	rcall	800079a0 <_fwalk>
800073aa:	d8 02       	popm	pc

800073ac <__sfmoreglue>:
800073ac:	d4 21       	pushm	r4-r7,lr
800073ae:	16 95       	mov	r5,r11
800073b0:	f6 06 10 5c 	mul	r6,r11,92
800073b4:	ec cb ff f4 	sub	r11,r6,-12
800073b8:	e0 a0 03 84 	rcall	80007ac0 <_malloc_r>
800073bc:	18 97       	mov	r7,r12
800073be:	c0 90       	breq	800073d0 <__sfmoreglue+0x24>
800073c0:	99 15       	st.w	r12[0x4],r5
800073c2:	30 0b       	mov	r11,0
800073c4:	2f 4c       	sub	r12,-12
800073c6:	0c 9a       	mov	r10,r6
800073c8:	8f 2c       	st.w	r7[0x8],r12
800073ca:	8f 0b       	st.w	r7[0x0],r11
800073cc:	e0 a0 05 bc 	rcall	80007f44 <memset>
800073d0:	0e 9c       	mov	r12,r7
800073d2:	d8 22       	popm	r4-r7,pc

800073d4 <__sfp>:
800073d4:	d4 21       	pushm	r4-r7,lr
800073d6:	fe c8 d1 be 	sub	r8,pc,-11842
800073da:	18 96       	mov	r6,r12
800073dc:	70 07       	ld.w	r7,r8[0x0]
800073de:	6e 68       	ld.w	r8,r7[0x18]
800073e0:	58 08       	cp.w	r8,0
800073e2:	c0 31       	brne	800073e8 <__sfp+0x14>
800073e4:	0e 9c       	mov	r12,r7
800073e6:	c2 dc       	rcall	80007440 <__sinit>
800073e8:	ee c7 ff 28 	sub	r7,r7,-216
800073ec:	30 05       	mov	r5,0
800073ee:	6e 2c       	ld.w	r12,r7[0x8]
800073f0:	6e 18       	ld.w	r8,r7[0x4]
800073f2:	c0 68       	rjmp	800073fe <__sfp+0x2a>
800073f4:	98 69       	ld.sh	r9,r12[0xc]
800073f6:	ea 09 19 00 	cp.h	r9,r5
800073fa:	c1 10       	breq	8000741c <__sfp+0x48>
800073fc:	2a 4c       	sub	r12,-92
800073fe:	20 18       	sub	r8,1
80007400:	cf a7       	brpl	800073f4 <__sfp+0x20>
80007402:	6e 08       	ld.w	r8,r7[0x0]
80007404:	58 08       	cp.w	r8,0
80007406:	c0 61       	brne	80007412 <__sfp+0x3e>
80007408:	30 4b       	mov	r11,4
8000740a:	0c 9c       	mov	r12,r6
8000740c:	cd 0f       	rcall	800073ac <__sfmoreglue>
8000740e:	8f 0c       	st.w	r7[0x0],r12
80007410:	c0 30       	breq	80007416 <__sfp+0x42>
80007412:	6e 07       	ld.w	r7,r7[0x0]
80007414:	ce db       	rjmp	800073ee <__sfp+0x1a>
80007416:	30 c8       	mov	r8,12
80007418:	8d 38       	st.w	r6[0xc],r8
8000741a:	d8 22       	popm	r4-r7,pc
8000741c:	30 08       	mov	r8,0
8000741e:	f9 48 00 4c 	st.w	r12[76],r8
80007422:	99 08       	st.w	r12[0x0],r8
80007424:	99 28       	st.w	r12[0x8],r8
80007426:	99 18       	st.w	r12[0x4],r8
80007428:	99 48       	st.w	r12[0x10],r8
8000742a:	99 58       	st.w	r12[0x14],r8
8000742c:	99 68       	st.w	r12[0x18],r8
8000742e:	99 d8       	st.w	r12[0x34],r8
80007430:	99 e8       	st.w	r12[0x38],r8
80007432:	f9 48 00 48 	st.w	r12[72],r8
80007436:	3f f8       	mov	r8,-1
80007438:	b8 78       	st.h	r12[0xe],r8
8000743a:	30 18       	mov	r8,1
8000743c:	b8 68       	st.h	r12[0xc],r8
8000743e:	d8 22       	popm	r4-r7,pc

80007440 <__sinit>:
80007440:	d4 21       	pushm	r4-r7,lr
80007442:	18 96       	mov	r6,r12
80007444:	78 67       	ld.w	r7,r12[0x18]
80007446:	58 07       	cp.w	r7,0
80007448:	c4 91       	brne	800074da <__sinit+0x9a>
8000744a:	fe c8 00 aa 	sub	r8,pc,170
8000744e:	30 15       	mov	r5,1
80007450:	99 a8       	st.w	r12[0x28],r8
80007452:	f9 47 00 d8 	st.w	r12[216],r7
80007456:	f9 47 00 dc 	st.w	r12[220],r7
8000745a:	f9 47 00 e0 	st.w	r12[224],r7
8000745e:	99 65       	st.w	r12[0x18],r5
80007460:	cb af       	rcall	800073d4 <__sfp>
80007462:	8d 0c       	st.w	r6[0x0],r12
80007464:	0c 9c       	mov	r12,r6
80007466:	cb 7f       	rcall	800073d4 <__sfp>
80007468:	8d 1c       	st.w	r6[0x4],r12
8000746a:	0c 9c       	mov	r12,r6
8000746c:	cb 4f       	rcall	800073d4 <__sfp>
8000746e:	6c 09       	ld.w	r9,r6[0x0]
80007470:	30 48       	mov	r8,4
80007472:	93 07       	st.w	r9[0x0],r7
80007474:	b2 68       	st.h	r9[0xc],r8
80007476:	93 17       	st.w	r9[0x4],r7
80007478:	93 27       	st.w	r9[0x8],r7
8000747a:	6c 18       	ld.w	r8,r6[0x4]
8000747c:	b2 77       	st.h	r9[0xe],r7
8000747e:	93 47       	st.w	r9[0x10],r7
80007480:	93 57       	st.w	r9[0x14],r7
80007482:	93 67       	st.w	r9[0x18],r7
80007484:	93 89       	st.w	r9[0x20],r9
80007486:	91 07       	st.w	r8[0x0],r7
80007488:	91 17       	st.w	r8[0x4],r7
8000748a:	91 27       	st.w	r8[0x8],r7
8000748c:	fe ce eb e4 	sub	lr,pc,-5148
80007490:	fe cb ec 14 	sub	r11,pc,-5100
80007494:	93 9e       	st.w	r9[0x24],lr
80007496:	93 ab       	st.w	r9[0x28],r11
80007498:	fe ca ec 3c 	sub	r10,pc,-5060
8000749c:	fe c4 ec 48 	sub	r4,pc,-5048
800074a0:	93 ba       	st.w	r9[0x2c],r10
800074a2:	93 c4       	st.w	r9[0x30],r4
800074a4:	30 99       	mov	r9,9
800074a6:	b0 69       	st.h	r8[0xc],r9
800074a8:	b0 75       	st.h	r8[0xe],r5
800074aa:	91 c4       	st.w	r8[0x30],r4
800074ac:	91 47       	st.w	r8[0x10],r7
800074ae:	91 57       	st.w	r8[0x14],r7
800074b0:	91 67       	st.w	r8[0x18],r7
800074b2:	91 88       	st.w	r8[0x20],r8
800074b4:	91 9e       	st.w	r8[0x24],lr
800074b6:	91 ab       	st.w	r8[0x28],r11
800074b8:	91 ba       	st.w	r8[0x2c],r10
800074ba:	8d 2c       	st.w	r6[0x8],r12
800074bc:	31 28       	mov	r8,18
800074be:	99 07       	st.w	r12[0x0],r7
800074c0:	b8 68       	st.h	r12[0xc],r8
800074c2:	99 17       	st.w	r12[0x4],r7
800074c4:	99 27       	st.w	r12[0x8],r7
800074c6:	30 28       	mov	r8,2
800074c8:	b8 78       	st.h	r12[0xe],r8
800074ca:	99 c4       	st.w	r12[0x30],r4
800074cc:	99 67       	st.w	r12[0x18],r7
800074ce:	99 9e       	st.w	r12[0x24],lr
800074d0:	99 ab       	st.w	r12[0x28],r11
800074d2:	99 ba       	st.w	r12[0x2c],r10
800074d4:	99 47       	st.w	r12[0x10],r7
800074d6:	99 57       	st.w	r12[0x14],r7
800074d8:	99 8c       	st.w	r12[0x20],r12
800074da:	d8 22       	popm	r4-r7,pc

800074dc <_malloc_trim_r>:
800074dc:	d4 21       	pushm	r4-r7,lr
800074de:	16 95       	mov	r5,r11
800074e0:	18 97       	mov	r7,r12
800074e2:	e0 a0 05 38 	rcall	80007f52 <__malloc_lock>
800074e6:	e0 64 01 38 	mov	r4,312
800074ea:	68 28       	ld.w	r8,r4[0x8]
800074ec:	70 16       	ld.w	r6,r8[0x4]
800074ee:	e0 16 ff fc 	andl	r6,0xfffc
800074f2:	ec c8 ff 91 	sub	r8,r6,-111
800074f6:	f0 05 01 05 	sub	r5,r8,r5
800074fa:	e0 15 ff 80 	andl	r5,0xff80
800074fe:	ea c5 00 80 	sub	r5,r5,128
80007502:	e0 45 00 7f 	cp.w	r5,127
80007506:	e0 8a 00 25 	brle	80007550 <_malloc_trim_r+0x74>
8000750a:	30 0b       	mov	r11,0
8000750c:	0e 9c       	mov	r12,r7
8000750e:	e0 a0 09 93 	rcall	80008834 <_sbrk_r>
80007512:	68 28       	ld.w	r8,r4[0x8]
80007514:	0c 08       	add	r8,r6
80007516:	10 3c       	cp.w	r12,r8
80007518:	c1 c1       	brne	80007550 <_malloc_trim_r+0x74>
8000751a:	ea 0b 11 00 	rsub	r11,r5,0
8000751e:	0e 9c       	mov	r12,r7
80007520:	e0 a0 09 8a 	rcall	80008834 <_sbrk_r>
80007524:	5b fc       	cp.w	r12,-1
80007526:	c1 91       	brne	80007558 <_malloc_trim_r+0x7c>
80007528:	30 0b       	mov	r11,0
8000752a:	0e 9c       	mov	r12,r7
8000752c:	e0 a0 09 84 	rcall	80008834 <_sbrk_r>
80007530:	68 28       	ld.w	r8,r4[0x8]
80007532:	f8 08 01 09 	sub	r9,r12,r8
80007536:	58 f9       	cp.w	r9,15
80007538:	e0 8a 00 0c 	brle	80007550 <_malloc_trim_r+0x74>
8000753c:	a1 a9       	sbr	r9,0x0
8000753e:	91 19       	st.w	r8[0x4],r9
80007540:	e0 68 05 44 	mov	r8,1348
80007544:	70 09       	ld.w	r9,r8[0x0]
80007546:	e0 68 06 74 	mov	r8,1652
8000754a:	f8 09 01 09 	sub	r9,r12,r9
8000754e:	91 09       	st.w	r8[0x0],r9
80007550:	0e 9c       	mov	r12,r7
80007552:	e0 a0 05 01 	rcall	80007f54 <__malloc_unlock>
80007556:	d8 2a       	popm	r4-r7,pc,r12=0
80007558:	68 28       	ld.w	r8,r4[0x8]
8000755a:	0a 16       	sub	r6,r5
8000755c:	a1 a6       	sbr	r6,0x0
8000755e:	91 16       	st.w	r8[0x4],r6
80007560:	e0 68 06 74 	mov	r8,1652
80007564:	70 09       	ld.w	r9,r8[0x0]
80007566:	0a 19       	sub	r9,r5
80007568:	0e 9c       	mov	r12,r7
8000756a:	91 09       	st.w	r8[0x0],r9
8000756c:	e0 a0 04 f4 	rcall	80007f54 <__malloc_unlock>
80007570:	da 2a       	popm	r4-r7,pc,r12=1
80007572:	d7 03       	nop

80007574 <_free_r>:
80007574:	d4 21       	pushm	r4-r7,lr
80007576:	16 96       	mov	r6,r11
80007578:	18 97       	mov	r7,r12
8000757a:	58 0b       	cp.w	r11,0
8000757c:	e0 80 00 c0 	breq	800076fc <_free_r+0x188>
80007580:	e0 a0 04 e9 	rcall	80007f52 <__malloc_lock>
80007584:	20 86       	sub	r6,8
80007586:	e0 6a 01 38 	mov	r10,312
8000758a:	6c 18       	ld.w	r8,r6[0x4]
8000758c:	74 2e       	ld.w	lr,r10[0x8]
8000758e:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80007592:	a1 c8       	cbr	r8,0x0
80007594:	ec 08 00 09 	add	r9,r6,r8
80007598:	72 1b       	ld.w	r11,r9[0x4]
8000759a:	e0 1b ff fc 	andl	r11,0xfffc
8000759e:	1c 39       	cp.w	r9,lr
800075a0:	c1 e1       	brne	800075dc <_free_r+0x68>
800075a2:	f6 08 00 08 	add	r8,r11,r8
800075a6:	58 0c       	cp.w	r12,0
800075a8:	c0 81       	brne	800075b8 <_free_r+0x44>
800075aa:	6c 09       	ld.w	r9,r6[0x0]
800075ac:	12 16       	sub	r6,r9
800075ae:	12 08       	add	r8,r9
800075b0:	6c 3b       	ld.w	r11,r6[0xc]
800075b2:	6c 29       	ld.w	r9,r6[0x8]
800075b4:	97 29       	st.w	r11[0x8],r9
800075b6:	93 3b       	st.w	r9[0xc],r11
800075b8:	10 99       	mov	r9,r8
800075ba:	95 26       	st.w	r10[0x8],r6
800075bc:	a1 a9       	sbr	r9,0x0
800075be:	8d 19       	st.w	r6[0x4],r9
800075c0:	e0 69 05 40 	mov	r9,1344
800075c4:	72 09       	ld.w	r9,r9[0x0]
800075c6:	12 38       	cp.w	r8,r9
800075c8:	c0 63       	brcs	800075d4 <_free_r+0x60>
800075ca:	e0 68 06 70 	mov	r8,1648
800075ce:	0e 9c       	mov	r12,r7
800075d0:	70 0b       	ld.w	r11,r8[0x0]
800075d2:	c8 5f       	rcall	800074dc <_malloc_trim_r>
800075d4:	0e 9c       	mov	r12,r7
800075d6:	e0 a0 04 bf 	rcall	80007f54 <__malloc_unlock>
800075da:	d8 22       	popm	r4-r7,pc
800075dc:	93 1b       	st.w	r9[0x4],r11
800075de:	58 0c       	cp.w	r12,0
800075e0:	c0 30       	breq	800075e6 <_free_r+0x72>
800075e2:	30 0c       	mov	r12,0
800075e4:	c1 08       	rjmp	80007604 <_free_r+0x90>
800075e6:	6c 0e       	ld.w	lr,r6[0x0]
800075e8:	f4 c5 ff f8 	sub	r5,r10,-8
800075ec:	1c 16       	sub	r6,lr
800075ee:	1c 08       	add	r8,lr
800075f0:	6c 2e       	ld.w	lr,r6[0x8]
800075f2:	0a 3e       	cp.w	lr,r5
800075f4:	f9 bc 00 01 	moveq	r12,1
800075f8:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800075fc:	eb fe 1a 02 	st.wne	r5[0x8],lr
80007600:	fd f5 1a 03 	st.wne	lr[0xc],r5
80007604:	f2 0b 00 0e 	add	lr,r9,r11
80007608:	7c 1e       	ld.w	lr,lr[0x4]
8000760a:	ed be 00 00 	bld	lr,0x0
8000760e:	c1 40       	breq	80007636 <_free_r+0xc2>
80007610:	16 08       	add	r8,r11
80007612:	58 0c       	cp.w	r12,0
80007614:	c0 d1       	brne	8000762e <_free_r+0xba>
80007616:	e0 6e 01 38 	mov	lr,312
8000761a:	72 2b       	ld.w	r11,r9[0x8]
8000761c:	2f 8e       	sub	lr,-8
8000761e:	1c 3b       	cp.w	r11,lr
80007620:	c0 71       	brne	8000762e <_free_r+0xba>
80007622:	97 36       	st.w	r11[0xc],r6
80007624:	97 26       	st.w	r11[0x8],r6
80007626:	8d 2b       	st.w	r6[0x8],r11
80007628:	8d 3b       	st.w	r6[0xc],r11
8000762a:	30 1c       	mov	r12,1
8000762c:	c0 58       	rjmp	80007636 <_free_r+0xc2>
8000762e:	72 2b       	ld.w	r11,r9[0x8]
80007630:	72 39       	ld.w	r9,r9[0xc]
80007632:	93 2b       	st.w	r9[0x8],r11
80007634:	97 39       	st.w	r11[0xc],r9
80007636:	10 99       	mov	r9,r8
80007638:	ec 08 09 08 	st.w	r6[r8],r8
8000763c:	a1 a9       	sbr	r9,0x0
8000763e:	8d 19       	st.w	r6[0x4],r9
80007640:	58 0c       	cp.w	r12,0
80007642:	c5 a1       	brne	800076f6 <_free_r+0x182>
80007644:	e0 48 01 ff 	cp.w	r8,511
80007648:	e0 8b 00 13 	brhi	8000766e <_free_r+0xfa>
8000764c:	a3 98       	lsr	r8,0x3
8000764e:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007652:	72 2b       	ld.w	r11,r9[0x8]
80007654:	8d 39       	st.w	r6[0xc],r9
80007656:	8d 2b       	st.w	r6[0x8],r11
80007658:	97 36       	st.w	r11[0xc],r6
8000765a:	93 26       	st.w	r9[0x8],r6
8000765c:	a3 48       	asr	r8,0x2
8000765e:	74 19       	ld.w	r9,r10[0x4]
80007660:	30 1b       	mov	r11,1
80007662:	f6 08 09 48 	lsl	r8,r11,r8
80007666:	f3 e8 10 08 	or	r8,r9,r8
8000766a:	95 18       	st.w	r10[0x4],r8
8000766c:	c4 58       	rjmp	800076f6 <_free_r+0x182>
8000766e:	f0 0b 16 09 	lsr	r11,r8,0x9
80007672:	58 4b       	cp.w	r11,4
80007674:	e0 8b 00 06 	brhi	80007680 <_free_r+0x10c>
80007678:	f0 0b 16 06 	lsr	r11,r8,0x6
8000767c:	2c 8b       	sub	r11,-56
8000767e:	c2 08       	rjmp	800076be <_free_r+0x14a>
80007680:	59 4b       	cp.w	r11,20
80007682:	e0 8b 00 04 	brhi	8000768a <_free_r+0x116>
80007686:	2a 5b       	sub	r11,-91
80007688:	c1 b8       	rjmp	800076be <_free_r+0x14a>
8000768a:	e0 4b 00 54 	cp.w	r11,84
8000768e:	e0 8b 00 06 	brhi	8000769a <_free_r+0x126>
80007692:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007696:	29 2b       	sub	r11,-110
80007698:	c1 38       	rjmp	800076be <_free_r+0x14a>
8000769a:	e0 4b 01 54 	cp.w	r11,340
8000769e:	e0 8b 00 06 	brhi	800076aa <_free_r+0x136>
800076a2:	f0 0b 16 0f 	lsr	r11,r8,0xf
800076a6:	28 9b       	sub	r11,-119
800076a8:	c0 b8       	rjmp	800076be <_free_r+0x14a>
800076aa:	e0 4b 05 54 	cp.w	r11,1364
800076ae:	e0 88 00 05 	brls	800076b8 <_free_r+0x144>
800076b2:	37 eb       	mov	r11,126
800076b4:	c0 58       	rjmp	800076be <_free_r+0x14a>
800076b6:	d7 03       	nop
800076b8:	f0 0b 16 12 	lsr	r11,r8,0x12
800076bc:	28 4b       	sub	r11,-124
800076be:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800076c2:	78 29       	ld.w	r9,r12[0x8]
800076c4:	18 39       	cp.w	r9,r12
800076c6:	c0 e1       	brne	800076e2 <_free_r+0x16e>
800076c8:	74 18       	ld.w	r8,r10[0x4]
800076ca:	a3 4b       	asr	r11,0x2
800076cc:	30 1c       	mov	r12,1
800076ce:	f8 0b 09 4b 	lsl	r11,r12,r11
800076d2:	f1 eb 10 0b 	or	r11,r8,r11
800076d6:	12 98       	mov	r8,r9
800076d8:	95 1b       	st.w	r10[0x4],r11
800076da:	c0 a8       	rjmp	800076ee <_free_r+0x17a>
800076dc:	72 29       	ld.w	r9,r9[0x8]
800076de:	18 39       	cp.w	r9,r12
800076e0:	c0 60       	breq	800076ec <_free_r+0x178>
800076e2:	72 1a       	ld.w	r10,r9[0x4]
800076e4:	e0 1a ff fc 	andl	r10,0xfffc
800076e8:	14 38       	cp.w	r8,r10
800076ea:	cf 93       	brcs	800076dc <_free_r+0x168>
800076ec:	72 38       	ld.w	r8,r9[0xc]
800076ee:	8d 38       	st.w	r6[0xc],r8
800076f0:	8d 29       	st.w	r6[0x8],r9
800076f2:	93 36       	st.w	r9[0xc],r6
800076f4:	91 26       	st.w	r8[0x8],r6
800076f6:	0e 9c       	mov	r12,r7
800076f8:	e0 a0 04 2e 	rcall	80007f54 <__malloc_unlock>
800076fc:	d8 22       	popm	r4-r7,pc
800076fe:	d7 03       	nop

80007700 <__sfvwrite_r>:
80007700:	d4 31       	pushm	r0-r7,lr
80007702:	20 3d       	sub	sp,12
80007704:	14 94       	mov	r4,r10
80007706:	18 95       	mov	r5,r12
80007708:	16 97       	mov	r7,r11
8000770a:	74 28       	ld.w	r8,r10[0x8]
8000770c:	58 08       	cp.w	r8,0
8000770e:	e0 80 01 45 	breq	80007998 <__sfvwrite_r+0x298>
80007712:	96 68       	ld.sh	r8,r11[0xc]
80007714:	ed b8 00 03 	bld	r8,0x3
80007718:	c0 41       	brne	80007720 <__sfvwrite_r+0x20>
8000771a:	76 48       	ld.w	r8,r11[0x10]
8000771c:	58 08       	cp.w	r8,0
8000771e:	c0 c1       	brne	80007736 <__sfvwrite_r+0x36>
80007720:	0e 9b       	mov	r11,r7
80007722:	0a 9c       	mov	r12,r5
80007724:	fe b0 f6 ca 	rcall	800064b8 <__swsetup_r>
80007728:	c0 70       	breq	80007736 <__sfvwrite_r+0x36>
8000772a:	8e 68       	ld.sh	r8,r7[0xc]
8000772c:	a7 a8       	sbr	r8,0x6
8000772e:	ae 68       	st.h	r7[0xc],r8
80007730:	30 98       	mov	r8,9
80007732:	8b 38       	st.w	r5[0xc],r8
80007734:	c3 09       	rjmp	80007994 <__sfvwrite_r+0x294>
80007736:	8e 63       	ld.sh	r3,r7[0xc]
80007738:	68 00       	ld.w	r0,r4[0x0]
8000773a:	06 96       	mov	r6,r3
8000773c:	e2 16 00 02 	andl	r6,0x2,COH
80007740:	c2 10       	breq	80007782 <__sfvwrite_r+0x82>
80007742:	30 03       	mov	r3,0
80007744:	e0 62 04 00 	mov	r2,1024
80007748:	06 96       	mov	r6,r3
8000774a:	c0 48       	rjmp	80007752 <__sfvwrite_r+0x52>
8000774c:	60 03       	ld.w	r3,r0[0x0]
8000774e:	60 16       	ld.w	r6,r0[0x4]
80007750:	2f 80       	sub	r0,-8
80007752:	58 06       	cp.w	r6,0
80007754:	cf c0       	breq	8000774c <__sfvwrite_r+0x4c>
80007756:	e0 46 04 00 	cp.w	r6,1024
8000775a:	ec 09 17 80 	movls	r9,r6
8000775e:	e4 09 17 b0 	movhi	r9,r2
80007762:	06 9a       	mov	r10,r3
80007764:	6e a8       	ld.w	r8,r7[0x28]
80007766:	6e 8b       	ld.w	r11,r7[0x20]
80007768:	0a 9c       	mov	r12,r5
8000776a:	5d 18       	icall	r8
8000776c:	18 16       	sub	r6,r12
8000776e:	58 0c       	cp.w	r12,0
80007770:	e0 8a 01 0f 	brle	8000798e <__sfvwrite_r+0x28e>
80007774:	68 28       	ld.w	r8,r4[0x8]
80007776:	18 18       	sub	r8,r12
80007778:	89 28       	st.w	r4[0x8],r8
8000777a:	e0 80 01 0f 	breq	80007998 <__sfvwrite_r+0x298>
8000777e:	18 03       	add	r3,r12
80007780:	ce 9b       	rjmp	80007752 <__sfvwrite_r+0x52>
80007782:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007786:	c0 70       	breq	80007794 <__sfvwrite_r+0x94>
80007788:	50 06       	stdsp	sp[0x0],r6
8000778a:	0c 93       	mov	r3,r6
8000778c:	0c 91       	mov	r1,r6
8000778e:	50 15       	stdsp	sp[0x4],r5
80007790:	08 92       	mov	r2,r4
80007792:	c9 e8       	rjmp	800078ce <__sfvwrite_r+0x1ce>
80007794:	06 96       	mov	r6,r3
80007796:	08 91       	mov	r1,r4
80007798:	c0 48       	rjmp	800077a0 <__sfvwrite_r+0xa0>
8000779a:	60 03       	ld.w	r3,r0[0x0]
8000779c:	60 16       	ld.w	r6,r0[0x4]
8000779e:	2f 80       	sub	r0,-8
800077a0:	58 06       	cp.w	r6,0
800077a2:	cf c0       	breq	8000779a <__sfvwrite_r+0x9a>
800077a4:	8e 68       	ld.sh	r8,r7[0xc]
800077a6:	6e 24       	ld.w	r4,r7[0x8]
800077a8:	10 99       	mov	r9,r8
800077aa:	e2 19 02 00 	andl	r9,0x200,COH
800077ae:	c5 50       	breq	80007858 <__sfvwrite_r+0x158>
800077b0:	08 36       	cp.w	r6,r4
800077b2:	c4 33       	brcs	80007838 <__sfvwrite_r+0x138>
800077b4:	10 99       	mov	r9,r8
800077b6:	e2 19 04 80 	andl	r9,0x480,COH
800077ba:	c3 f0       	breq	80007838 <__sfvwrite_r+0x138>
800077bc:	6e 4b       	ld.w	r11,r7[0x10]
800077be:	6e 09       	ld.w	r9,r7[0x0]
800077c0:	16 19       	sub	r9,r11
800077c2:	50 09       	stdsp	sp[0x0],r9
800077c4:	6e 59       	ld.w	r9,r7[0x14]
800077c6:	10 9c       	mov	r12,r8
800077c8:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800077cc:	30 28       	mov	r8,2
800077ce:	f4 08 0c 08 	divs	r8,r10,r8
800077d2:	fa e9 00 04 	st.d	sp[4],r8
800077d6:	10 94       	mov	r4,r8
800077d8:	40 09       	lddsp	r9,sp[0x0]
800077da:	e2 1c 04 00 	andl	r12,0x400,COH
800077de:	2f f9       	sub	r9,-1
800077e0:	0c 09       	add	r9,r6
800077e2:	12 38       	cp.w	r8,r9
800077e4:	f2 04 17 30 	movlo	r4,r9
800077e8:	58 0c       	cp.w	r12,0
800077ea:	c1 00       	breq	8000780a <__sfvwrite_r+0x10a>
800077ec:	08 9b       	mov	r11,r4
800077ee:	0a 9c       	mov	r12,r5
800077f0:	c6 8d       	rcall	80007ac0 <_malloc_r>
800077f2:	18 92       	mov	r2,r12
800077f4:	c1 40       	breq	8000781c <__sfvwrite_r+0x11c>
800077f6:	40 0a       	lddsp	r10,sp[0x0]
800077f8:	6e 4b       	ld.w	r11,r7[0x10]
800077fa:	fe b0 e4 7c 	rcall	800040f2 <memcpy>
800077fe:	8e 68       	ld.sh	r8,r7[0xc]
80007800:	e0 18 fb 7f 	andl	r8,0xfb7f
80007804:	a7 b8       	sbr	r8,0x7
80007806:	ae 68       	st.h	r7[0xc],r8
80007808:	c0 d8       	rjmp	80007822 <__sfvwrite_r+0x122>
8000780a:	08 9a       	mov	r10,r4
8000780c:	0a 9c       	mov	r12,r5
8000780e:	e0 a0 06 8f 	rcall	8000852c <_realloc_r>
80007812:	18 92       	mov	r2,r12
80007814:	c0 71       	brne	80007822 <__sfvwrite_r+0x122>
80007816:	6e 4b       	ld.w	r11,r7[0x10]
80007818:	0a 9c       	mov	r12,r5
8000781a:	ca de       	rcall	80007574 <_free_r>
8000781c:	30 c8       	mov	r8,12
8000781e:	8b 38       	st.w	r5[0xc],r8
80007820:	cb 78       	rjmp	8000798e <__sfvwrite_r+0x28e>
80007822:	40 0a       	lddsp	r10,sp[0x0]
80007824:	40 09       	lddsp	r9,sp[0x0]
80007826:	e8 0a 01 0a 	sub	r10,r4,r10
8000782a:	e4 09 00 08 	add	r8,r2,r9
8000782e:	8f 54       	st.w	r7[0x14],r4
80007830:	8f 2a       	st.w	r7[0x8],r10
80007832:	8f 08       	st.w	r7[0x0],r8
80007834:	8f 42       	st.w	r7[0x10],r2
80007836:	0c 94       	mov	r4,r6
80007838:	08 36       	cp.w	r6,r4
8000783a:	ec 04 17 30 	movlo	r4,r6
8000783e:	06 9b       	mov	r11,r3
80007840:	08 9a       	mov	r10,r4
80007842:	6e 0c       	ld.w	r12,r7[0x0]
80007844:	e0 a0 03 61 	rcall	80007f06 <memmove>
80007848:	6e 08       	ld.w	r8,r7[0x0]
8000784a:	08 08       	add	r8,r4
8000784c:	8f 08       	st.w	r7[0x0],r8
8000784e:	6e 28       	ld.w	r8,r7[0x8]
80007850:	08 18       	sub	r8,r4
80007852:	0c 94       	mov	r4,r6
80007854:	8f 28       	st.w	r7[0x8],r8
80007856:	c3 08       	rjmp	800078b6 <__sfvwrite_r+0x1b6>
80007858:	08 36       	cp.w	r6,r4
8000785a:	5f ba       	srhi	r10
8000785c:	6e 0c       	ld.w	r12,r7[0x0]
8000785e:	6e 48       	ld.w	r8,r7[0x10]
80007860:	10 3c       	cp.w	r12,r8
80007862:	5f b8       	srhi	r8
80007864:	f5 e8 00 08 	and	r8,r10,r8
80007868:	f2 08 18 00 	cp.b	r8,r9
8000786c:	c0 e0       	breq	80007888 <__sfvwrite_r+0x188>
8000786e:	06 9b       	mov	r11,r3
80007870:	08 9a       	mov	r10,r4
80007872:	e0 a0 03 4a 	rcall	80007f06 <memmove>
80007876:	6e 08       	ld.w	r8,r7[0x0]
80007878:	08 08       	add	r8,r4
8000787a:	0e 9b       	mov	r11,r7
8000787c:	8f 08       	st.w	r7[0x0],r8
8000787e:	0a 9c       	mov	r12,r5
80007880:	fe b0 fd 08 	rcall	80007290 <_fflush_r>
80007884:	c1 90       	breq	800078b6 <__sfvwrite_r+0x1b6>
80007886:	c8 48       	rjmp	8000798e <__sfvwrite_r+0x28e>
80007888:	6e 59       	ld.w	r9,r7[0x14]
8000788a:	12 36       	cp.w	r6,r9
8000788c:	c0 a3       	brcs	800078a0 <__sfvwrite_r+0x1a0>
8000788e:	6e a8       	ld.w	r8,r7[0x28]
80007890:	06 9a       	mov	r10,r3
80007892:	6e 8b       	ld.w	r11,r7[0x20]
80007894:	0a 9c       	mov	r12,r5
80007896:	5d 18       	icall	r8
80007898:	18 94       	mov	r4,r12
8000789a:	e0 89 00 0e 	brgt	800078b6 <__sfvwrite_r+0x1b6>
8000789e:	c7 88       	rjmp	8000798e <__sfvwrite_r+0x28e>
800078a0:	0c 9a       	mov	r10,r6
800078a2:	06 9b       	mov	r11,r3
800078a4:	e0 a0 03 31 	rcall	80007f06 <memmove>
800078a8:	6e 08       	ld.w	r8,r7[0x0]
800078aa:	0c 08       	add	r8,r6
800078ac:	0c 94       	mov	r4,r6
800078ae:	8f 08       	st.w	r7[0x0],r8
800078b0:	6e 28       	ld.w	r8,r7[0x8]
800078b2:	0c 18       	sub	r8,r6
800078b4:	8f 28       	st.w	r7[0x8],r8
800078b6:	62 28       	ld.w	r8,r1[0x8]
800078b8:	08 18       	sub	r8,r4
800078ba:	83 28       	st.w	r1[0x8],r8
800078bc:	c6 e0       	breq	80007998 <__sfvwrite_r+0x298>
800078be:	08 16       	sub	r6,r4
800078c0:	08 03       	add	r3,r4
800078c2:	c6 fb       	rjmp	800077a0 <__sfvwrite_r+0xa0>
800078c4:	60 03       	ld.w	r3,r0[0x0]
800078c6:	60 11       	ld.w	r1,r0[0x4]
800078c8:	30 08       	mov	r8,0
800078ca:	2f 80       	sub	r0,-8
800078cc:	50 08       	stdsp	sp[0x0],r8
800078ce:	58 01       	cp.w	r1,0
800078d0:	cf a0       	breq	800078c4 <__sfvwrite_r+0x1c4>
800078d2:	40 0a       	lddsp	r10,sp[0x0]
800078d4:	58 0a       	cp.w	r10,0
800078d6:	c1 51       	brne	80007900 <__sfvwrite_r+0x200>
800078d8:	e2 c6 ff ff 	sub	r6,r1,-1
800078dc:	02 9a       	mov	r10,r1
800078de:	30 ab       	mov	r11,10
800078e0:	06 9c       	mov	r12,r3
800078e2:	e0 a0 03 07 	rcall	80007ef0 <memchr>
800078e6:	f8 c8 ff ff 	sub	r8,r12,-1
800078ea:	58 0c       	cp.w	r12,0
800078ec:	f1 d3 e1 16 	subne	r6,r8,r3
800078f0:	f9 b9 01 01 	movne	r9,1
800078f4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800078f8:	f9 b8 00 01 	moveq	r8,1
800078fc:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007900:	02 36       	cp.w	r6,r1
80007902:	ec 04 17 80 	movls	r4,r6
80007906:	e2 04 17 b0 	movhi	r4,r1
8000790a:	6e 59       	ld.w	r9,r7[0x14]
8000790c:	6e 25       	ld.w	r5,r7[0x8]
8000790e:	f2 05 00 05 	add	r5,r9,r5
80007912:	0a 34       	cp.w	r4,r5
80007914:	5f 9a       	srgt	r10
80007916:	6e 0c       	ld.w	r12,r7[0x0]
80007918:	6e 48       	ld.w	r8,r7[0x10]
8000791a:	10 3c       	cp.w	r12,r8
8000791c:	5f b8       	srhi	r8
8000791e:	f5 e8 00 08 	and	r8,r10,r8
80007922:	30 0a       	mov	r10,0
80007924:	f4 08 18 00 	cp.b	r8,r10
80007928:	c0 e0       	breq	80007944 <__sfvwrite_r+0x244>
8000792a:	06 9b       	mov	r11,r3
8000792c:	0a 9a       	mov	r10,r5
8000792e:	e0 a0 02 ec 	rcall	80007f06 <memmove>
80007932:	6e 08       	ld.w	r8,r7[0x0]
80007934:	0a 08       	add	r8,r5
80007936:	0e 9b       	mov	r11,r7
80007938:	8f 08       	st.w	r7[0x0],r8
8000793a:	40 1c       	lddsp	r12,sp[0x4]
8000793c:	fe b0 fc aa 	rcall	80007290 <_fflush_r>
80007940:	c1 80       	breq	80007970 <__sfvwrite_r+0x270>
80007942:	c2 68       	rjmp	8000798e <__sfvwrite_r+0x28e>
80007944:	12 34       	cp.w	r4,r9
80007946:	c0 a5       	brlt	8000795a <__sfvwrite_r+0x25a>
80007948:	6e a8       	ld.w	r8,r7[0x28]
8000794a:	06 9a       	mov	r10,r3
8000794c:	6e 8b       	ld.w	r11,r7[0x20]
8000794e:	40 1c       	lddsp	r12,sp[0x4]
80007950:	5d 18       	icall	r8
80007952:	18 95       	mov	r5,r12
80007954:	e0 89 00 0e 	brgt	80007970 <__sfvwrite_r+0x270>
80007958:	c1 b8       	rjmp	8000798e <__sfvwrite_r+0x28e>
8000795a:	08 9a       	mov	r10,r4
8000795c:	06 9b       	mov	r11,r3
8000795e:	e0 a0 02 d4 	rcall	80007f06 <memmove>
80007962:	6e 08       	ld.w	r8,r7[0x0]
80007964:	08 08       	add	r8,r4
80007966:	08 95       	mov	r5,r4
80007968:	8f 08       	st.w	r7[0x0],r8
8000796a:	6e 28       	ld.w	r8,r7[0x8]
8000796c:	08 18       	sub	r8,r4
8000796e:	8f 28       	st.w	r7[0x8],r8
80007970:	0a 16       	sub	r6,r5
80007972:	c0 71       	brne	80007980 <__sfvwrite_r+0x280>
80007974:	0e 9b       	mov	r11,r7
80007976:	40 1c       	lddsp	r12,sp[0x4]
80007978:	fe b0 fc 8c 	rcall	80007290 <_fflush_r>
8000797c:	c0 91       	brne	8000798e <__sfvwrite_r+0x28e>
8000797e:	50 06       	stdsp	sp[0x0],r6
80007980:	64 28       	ld.w	r8,r2[0x8]
80007982:	0a 18       	sub	r8,r5
80007984:	85 28       	st.w	r2[0x8],r8
80007986:	c0 90       	breq	80007998 <__sfvwrite_r+0x298>
80007988:	0a 11       	sub	r1,r5
8000798a:	0a 03       	add	r3,r5
8000798c:	ca 1b       	rjmp	800078ce <__sfvwrite_r+0x1ce>
8000798e:	8e 68       	ld.sh	r8,r7[0xc]
80007990:	a7 a8       	sbr	r8,0x6
80007992:	ae 68       	st.h	r7[0xc],r8
80007994:	3f fc       	mov	r12,-1
80007996:	c0 28       	rjmp	8000799a <__sfvwrite_r+0x29a>
80007998:	30 0c       	mov	r12,0
8000799a:	2f dd       	sub	sp,-12
8000799c:	d8 32       	popm	r0-r7,pc
8000799e:	d7 03       	nop

800079a0 <_fwalk>:
800079a0:	d4 31       	pushm	r0-r7,lr
800079a2:	30 05       	mov	r5,0
800079a4:	16 91       	mov	r1,r11
800079a6:	f8 c7 ff 28 	sub	r7,r12,-216
800079aa:	0a 92       	mov	r2,r5
800079ac:	fe b0 fc f8 	rcall	8000739c <__sfp_lock_acquire>
800079b0:	3f f3       	mov	r3,-1
800079b2:	c1 68       	rjmp	800079de <_fwalk+0x3e>
800079b4:	6e 26       	ld.w	r6,r7[0x8]
800079b6:	6e 14       	ld.w	r4,r7[0x4]
800079b8:	2f 46       	sub	r6,-12
800079ba:	c0 c8       	rjmp	800079d2 <_fwalk+0x32>
800079bc:	8c 08       	ld.sh	r8,r6[0x0]
800079be:	e4 08 19 00 	cp.h	r8,r2
800079c2:	c0 70       	breq	800079d0 <_fwalk+0x30>
800079c4:	8c 18       	ld.sh	r8,r6[0x2]
800079c6:	e6 08 19 00 	cp.h	r8,r3
800079ca:	c0 30       	breq	800079d0 <_fwalk+0x30>
800079cc:	5d 11       	icall	r1
800079ce:	18 45       	or	r5,r12
800079d0:	2a 46       	sub	r6,-92
800079d2:	20 14       	sub	r4,1
800079d4:	ec cc 00 0c 	sub	r12,r6,12
800079d8:	58 04       	cp.w	r4,0
800079da:	cf 14       	brge	800079bc <_fwalk+0x1c>
800079dc:	6e 07       	ld.w	r7,r7[0x0]
800079de:	58 07       	cp.w	r7,0
800079e0:	ce a1       	brne	800079b4 <_fwalk+0x14>
800079e2:	fe b0 fc de 	rcall	8000739e <__sfp_lock_release>
800079e6:	0a 9c       	mov	r12,r5
800079e8:	d8 32       	popm	r0-r7,pc
800079ea:	d7 03       	nop

800079ec <_localeconv_r>:
800079ec:	fe cc d7 d0 	sub	r12,pc,-10288
800079f0:	5e fc       	retal	r12
800079f2:	d7 03       	nop

800079f4 <__smakebuf_r>:
800079f4:	d4 21       	pushm	r4-r7,lr
800079f6:	20 fd       	sub	sp,60
800079f8:	96 68       	ld.sh	r8,r11[0xc]
800079fa:	16 97       	mov	r7,r11
800079fc:	18 96       	mov	r6,r12
800079fe:	e2 18 00 02 	andl	r8,0x2,COH
80007a02:	c3 c1       	brne	80007a7a <__smakebuf_r+0x86>
80007a04:	96 7b       	ld.sh	r11,r11[0xe]
80007a06:	f0 0b 19 00 	cp.h	r11,r8
80007a0a:	c0 55       	brlt	80007a14 <__smakebuf_r+0x20>
80007a0c:	1a 9a       	mov	r10,sp
80007a0e:	e0 a0 08 9d 	rcall	80008b48 <_fstat_r>
80007a12:	c0 f4       	brge	80007a30 <__smakebuf_r+0x3c>
80007a14:	8e 65       	ld.sh	r5,r7[0xc]
80007a16:	0a 98       	mov	r8,r5
80007a18:	ab b8       	sbr	r8,0xb
80007a1a:	e2 15 00 80 	andl	r5,0x80,COH
80007a1e:	ae 68       	st.h	r7[0xc],r8
80007a20:	30 04       	mov	r4,0
80007a22:	e0 68 04 00 	mov	r8,1024
80007a26:	f9 b5 01 40 	movne	r5,64
80007a2a:	f0 05 17 00 	moveq	r5,r8
80007a2e:	c1 c8       	rjmp	80007a66 <__smakebuf_r+0x72>
80007a30:	40 18       	lddsp	r8,sp[0x4]
80007a32:	e2 18 f0 00 	andl	r8,0xf000,COH
80007a36:	e0 48 20 00 	cp.w	r8,8192
80007a3a:	5f 04       	sreq	r4
80007a3c:	e0 48 80 00 	cp.w	r8,32768
80007a40:	c0 e1       	brne	80007a5c <__smakebuf_r+0x68>
80007a42:	6e b9       	ld.w	r9,r7[0x2c]
80007a44:	fe c8 f1 e8 	sub	r8,pc,-3608
80007a48:	10 39       	cp.w	r9,r8
80007a4a:	c0 91       	brne	80007a5c <__smakebuf_r+0x68>
80007a4c:	8e 68       	ld.sh	r8,r7[0xc]
80007a4e:	e0 65 04 00 	mov	r5,1024
80007a52:	ab a8       	sbr	r8,0xa
80007a54:	ef 45 00 50 	st.w	r7[80],r5
80007a58:	ae 68       	st.h	r7[0xc],r8
80007a5a:	c0 68       	rjmp	80007a66 <__smakebuf_r+0x72>
80007a5c:	8e 68       	ld.sh	r8,r7[0xc]
80007a5e:	e0 65 04 00 	mov	r5,1024
80007a62:	ab b8       	sbr	r8,0xb
80007a64:	ae 68       	st.h	r7[0xc],r8
80007a66:	0a 9b       	mov	r11,r5
80007a68:	0c 9c       	mov	r12,r6
80007a6a:	c2 bc       	rcall	80007ac0 <_malloc_r>
80007a6c:	8e 68       	ld.sh	r8,r7[0xc]
80007a6e:	c0 d1       	brne	80007a88 <__smakebuf_r+0x94>
80007a70:	ed b8 00 09 	bld	r8,0x9
80007a74:	c1 b0       	breq	80007aaa <__smakebuf_r+0xb6>
80007a76:	a1 b8       	sbr	r8,0x1
80007a78:	ae 68       	st.h	r7[0xc],r8
80007a7a:	ee c8 ff b9 	sub	r8,r7,-71
80007a7e:	8f 48       	st.w	r7[0x10],r8
80007a80:	8f 08       	st.w	r7[0x0],r8
80007a82:	30 18       	mov	r8,1
80007a84:	8f 58       	st.w	r7[0x14],r8
80007a86:	c1 28       	rjmp	80007aaa <__smakebuf_r+0xb6>
80007a88:	a7 b8       	sbr	r8,0x7
80007a8a:	8f 4c       	st.w	r7[0x10],r12
80007a8c:	ae 68       	st.h	r7[0xc],r8
80007a8e:	8f 55       	st.w	r7[0x14],r5
80007a90:	fe c8 06 f0 	sub	r8,pc,1776
80007a94:	8f 0c       	st.w	r7[0x0],r12
80007a96:	8d a8       	st.w	r6[0x28],r8
80007a98:	58 04       	cp.w	r4,0
80007a9a:	c0 80       	breq	80007aaa <__smakebuf_r+0xb6>
80007a9c:	8e 7c       	ld.sh	r12,r7[0xe]
80007a9e:	e0 a0 07 47 	rcall	8000892c <isatty>
80007aa2:	c0 40       	breq	80007aaa <__smakebuf_r+0xb6>
80007aa4:	8e 68       	ld.sh	r8,r7[0xc]
80007aa6:	a1 a8       	sbr	r8,0x0
80007aa8:	ae 68       	st.h	r7[0xc],r8
80007aaa:	2f 1d       	sub	sp,-60
80007aac:	d8 22       	popm	r4-r7,pc
80007aae:	d7 03       	nop

80007ab0 <malloc>:
80007ab0:	d4 01       	pushm	lr
80007ab2:	e0 68 01 34 	mov	r8,308
80007ab6:	18 9b       	mov	r11,r12
80007ab8:	70 0c       	ld.w	r12,r8[0x0]
80007aba:	c0 3c       	rcall	80007ac0 <_malloc_r>
80007abc:	d8 02       	popm	pc
80007abe:	d7 03       	nop

80007ac0 <_malloc_r>:
80007ac0:	d4 31       	pushm	r0-r7,lr
80007ac2:	f6 c8 ff f5 	sub	r8,r11,-11
80007ac6:	18 95       	mov	r5,r12
80007ac8:	10 97       	mov	r7,r8
80007aca:	e0 17 ff f8 	andl	r7,0xfff8
80007ace:	59 68       	cp.w	r8,22
80007ad0:	f9 b7 08 10 	movls	r7,16
80007ad4:	16 37       	cp.w	r7,r11
80007ad6:	5f 38       	srlo	r8
80007ad8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007adc:	c0 50       	breq	80007ae6 <_malloc_r+0x26>
80007ade:	30 c8       	mov	r8,12
80007ae0:	99 38       	st.w	r12[0xc],r8
80007ae2:	e0 8f 01 f7 	bral	80007ed0 <_malloc_r+0x410>
80007ae6:	e0 a0 02 36 	rcall	80007f52 <__malloc_lock>
80007aea:	e0 47 01 f7 	cp.w	r7,503
80007aee:	e0 8b 00 1d 	brhi	80007b28 <_malloc_r+0x68>
80007af2:	ee 03 16 03 	lsr	r3,r7,0x3
80007af6:	e0 68 01 38 	mov	r8,312
80007afa:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007afe:	70 36       	ld.w	r6,r8[0xc]
80007b00:	10 36       	cp.w	r6,r8
80007b02:	c0 61       	brne	80007b0e <_malloc_r+0x4e>
80007b04:	ec c8 ff f8 	sub	r8,r6,-8
80007b08:	70 36       	ld.w	r6,r8[0xc]
80007b0a:	10 36       	cp.w	r6,r8
80007b0c:	c0 c0       	breq	80007b24 <_malloc_r+0x64>
80007b0e:	6c 18       	ld.w	r8,r6[0x4]
80007b10:	e0 18 ff fc 	andl	r8,0xfffc
80007b14:	6c 3a       	ld.w	r10,r6[0xc]
80007b16:	ec 08 00 09 	add	r9,r6,r8
80007b1a:	0a 9c       	mov	r12,r5
80007b1c:	6c 28       	ld.w	r8,r6[0x8]
80007b1e:	95 28       	st.w	r10[0x8],r8
80007b20:	91 3a       	st.w	r8[0xc],r10
80007b22:	c4 78       	rjmp	80007bb0 <_malloc_r+0xf0>
80007b24:	2f e3       	sub	r3,-2
80007b26:	c4 d8       	rjmp	80007bc0 <_malloc_r+0x100>
80007b28:	ee 03 16 09 	lsr	r3,r7,0x9
80007b2c:	c0 41       	brne	80007b34 <_malloc_r+0x74>
80007b2e:	ee 03 16 03 	lsr	r3,r7,0x3
80007b32:	c2 68       	rjmp	80007b7e <_malloc_r+0xbe>
80007b34:	58 43       	cp.w	r3,4
80007b36:	e0 8b 00 06 	brhi	80007b42 <_malloc_r+0x82>
80007b3a:	ee 03 16 06 	lsr	r3,r7,0x6
80007b3e:	2c 83       	sub	r3,-56
80007b40:	c1 f8       	rjmp	80007b7e <_malloc_r+0xbe>
80007b42:	59 43       	cp.w	r3,20
80007b44:	e0 8b 00 04 	brhi	80007b4c <_malloc_r+0x8c>
80007b48:	2a 53       	sub	r3,-91
80007b4a:	c1 a8       	rjmp	80007b7e <_malloc_r+0xbe>
80007b4c:	e0 43 00 54 	cp.w	r3,84
80007b50:	e0 8b 00 06 	brhi	80007b5c <_malloc_r+0x9c>
80007b54:	ee 03 16 0c 	lsr	r3,r7,0xc
80007b58:	29 23       	sub	r3,-110
80007b5a:	c1 28       	rjmp	80007b7e <_malloc_r+0xbe>
80007b5c:	e0 43 01 54 	cp.w	r3,340
80007b60:	e0 8b 00 06 	brhi	80007b6c <_malloc_r+0xac>
80007b64:	ee 03 16 0f 	lsr	r3,r7,0xf
80007b68:	28 93       	sub	r3,-119
80007b6a:	c0 a8       	rjmp	80007b7e <_malloc_r+0xbe>
80007b6c:	e0 43 05 54 	cp.w	r3,1364
80007b70:	e0 88 00 04 	brls	80007b78 <_malloc_r+0xb8>
80007b74:	37 e3       	mov	r3,126
80007b76:	c0 48       	rjmp	80007b7e <_malloc_r+0xbe>
80007b78:	ee 03 16 12 	lsr	r3,r7,0x12
80007b7c:	28 43       	sub	r3,-124
80007b7e:	e0 6a 01 38 	mov	r10,312
80007b82:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007b86:	74 36       	ld.w	r6,r10[0xc]
80007b88:	c1 98       	rjmp	80007bba <_malloc_r+0xfa>
80007b8a:	6c 19       	ld.w	r9,r6[0x4]
80007b8c:	e0 19 ff fc 	andl	r9,0xfffc
80007b90:	f2 07 01 0b 	sub	r11,r9,r7
80007b94:	58 fb       	cp.w	r11,15
80007b96:	e0 8a 00 04 	brle	80007b9e <_malloc_r+0xde>
80007b9a:	20 13       	sub	r3,1
80007b9c:	c1 18       	rjmp	80007bbe <_malloc_r+0xfe>
80007b9e:	6c 38       	ld.w	r8,r6[0xc]
80007ba0:	58 0b       	cp.w	r11,0
80007ba2:	c0 b5       	brlt	80007bb8 <_malloc_r+0xf8>
80007ba4:	6c 2a       	ld.w	r10,r6[0x8]
80007ba6:	ec 09 00 09 	add	r9,r6,r9
80007baa:	0a 9c       	mov	r12,r5
80007bac:	91 2a       	st.w	r8[0x8],r10
80007bae:	95 38       	st.w	r10[0xc],r8
80007bb0:	72 18       	ld.w	r8,r9[0x4]
80007bb2:	a1 a8       	sbr	r8,0x0
80007bb4:	93 18       	st.w	r9[0x4],r8
80007bb6:	cb c8       	rjmp	80007d2e <_malloc_r+0x26e>
80007bb8:	10 96       	mov	r6,r8
80007bba:	14 36       	cp.w	r6,r10
80007bbc:	ce 71       	brne	80007b8a <_malloc_r+0xca>
80007bbe:	2f f3       	sub	r3,-1
80007bc0:	e0 6a 01 38 	mov	r10,312
80007bc4:	f4 cc ff f8 	sub	r12,r10,-8
80007bc8:	78 26       	ld.w	r6,r12[0x8]
80007bca:	18 36       	cp.w	r6,r12
80007bcc:	c6 c0       	breq	80007ca4 <_malloc_r+0x1e4>
80007bce:	6c 19       	ld.w	r9,r6[0x4]
80007bd0:	e0 19 ff fc 	andl	r9,0xfffc
80007bd4:	f2 07 01 08 	sub	r8,r9,r7
80007bd8:	58 f8       	cp.w	r8,15
80007bda:	e0 89 00 8f 	brgt	80007cf8 <_malloc_r+0x238>
80007bde:	99 3c       	st.w	r12[0xc],r12
80007be0:	99 2c       	st.w	r12[0x8],r12
80007be2:	58 08       	cp.w	r8,0
80007be4:	c0 55       	brlt	80007bee <_malloc_r+0x12e>
80007be6:	ec 09 00 09 	add	r9,r6,r9
80007bea:	0a 9c       	mov	r12,r5
80007bec:	ce 2b       	rjmp	80007bb0 <_malloc_r+0xf0>
80007bee:	e0 49 01 ff 	cp.w	r9,511
80007bf2:	e0 8b 00 13 	brhi	80007c18 <_malloc_r+0x158>
80007bf6:	a3 99       	lsr	r9,0x3
80007bf8:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007bfc:	70 2b       	ld.w	r11,r8[0x8]
80007bfe:	8d 38       	st.w	r6[0xc],r8
80007c00:	8d 2b       	st.w	r6[0x8],r11
80007c02:	97 36       	st.w	r11[0xc],r6
80007c04:	91 26       	st.w	r8[0x8],r6
80007c06:	a3 49       	asr	r9,0x2
80007c08:	74 18       	ld.w	r8,r10[0x4]
80007c0a:	30 1b       	mov	r11,1
80007c0c:	f6 09 09 49 	lsl	r9,r11,r9
80007c10:	f1 e9 10 09 	or	r9,r8,r9
80007c14:	95 19       	st.w	r10[0x4],r9
80007c16:	c4 78       	rjmp	80007ca4 <_malloc_r+0x1e4>
80007c18:	f2 0a 16 09 	lsr	r10,r9,0x9
80007c1c:	58 4a       	cp.w	r10,4
80007c1e:	e0 8b 00 07 	brhi	80007c2c <_malloc_r+0x16c>
80007c22:	f2 0a 16 06 	lsr	r10,r9,0x6
80007c26:	2c 8a       	sub	r10,-56
80007c28:	c2 08       	rjmp	80007c68 <_malloc_r+0x1a8>
80007c2a:	d7 03       	nop
80007c2c:	59 4a       	cp.w	r10,20
80007c2e:	e0 8b 00 04 	brhi	80007c36 <_malloc_r+0x176>
80007c32:	2a 5a       	sub	r10,-91
80007c34:	c1 a8       	rjmp	80007c68 <_malloc_r+0x1a8>
80007c36:	e0 4a 00 54 	cp.w	r10,84
80007c3a:	e0 8b 00 06 	brhi	80007c46 <_malloc_r+0x186>
80007c3e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007c42:	29 2a       	sub	r10,-110
80007c44:	c1 28       	rjmp	80007c68 <_malloc_r+0x1a8>
80007c46:	e0 4a 01 54 	cp.w	r10,340
80007c4a:	e0 8b 00 06 	brhi	80007c56 <_malloc_r+0x196>
80007c4e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007c52:	28 9a       	sub	r10,-119
80007c54:	c0 a8       	rjmp	80007c68 <_malloc_r+0x1a8>
80007c56:	e0 4a 05 54 	cp.w	r10,1364
80007c5a:	e0 88 00 04 	brls	80007c62 <_malloc_r+0x1a2>
80007c5e:	37 ea       	mov	r10,126
80007c60:	c0 48       	rjmp	80007c68 <_malloc_r+0x1a8>
80007c62:	f2 0a 16 12 	lsr	r10,r9,0x12
80007c66:	28 4a       	sub	r10,-124
80007c68:	e0 6b 01 38 	mov	r11,312
80007c6c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007c70:	68 28       	ld.w	r8,r4[0x8]
80007c72:	08 38       	cp.w	r8,r4
80007c74:	c0 e1       	brne	80007c90 <_malloc_r+0x1d0>
80007c76:	76 19       	ld.w	r9,r11[0x4]
80007c78:	a3 4a       	asr	r10,0x2
80007c7a:	30 1e       	mov	lr,1
80007c7c:	fc 0a 09 4a 	lsl	r10,lr,r10
80007c80:	f3 ea 10 0a 	or	r10,r9,r10
80007c84:	10 99       	mov	r9,r8
80007c86:	97 1a       	st.w	r11[0x4],r10
80007c88:	c0 a8       	rjmp	80007c9c <_malloc_r+0x1dc>
80007c8a:	70 28       	ld.w	r8,r8[0x8]
80007c8c:	08 38       	cp.w	r8,r4
80007c8e:	c0 60       	breq	80007c9a <_malloc_r+0x1da>
80007c90:	70 1a       	ld.w	r10,r8[0x4]
80007c92:	e0 1a ff fc 	andl	r10,0xfffc
80007c96:	14 39       	cp.w	r9,r10
80007c98:	cf 93       	brcs	80007c8a <_malloc_r+0x1ca>
80007c9a:	70 39       	ld.w	r9,r8[0xc]
80007c9c:	8d 39       	st.w	r6[0xc],r9
80007c9e:	8d 28       	st.w	r6[0x8],r8
80007ca0:	91 36       	st.w	r8[0xc],r6
80007ca2:	93 26       	st.w	r9[0x8],r6
80007ca4:	e6 08 14 02 	asr	r8,r3,0x2
80007ca8:	30 1b       	mov	r11,1
80007caa:	e0 64 01 38 	mov	r4,312
80007cae:	f6 08 09 4b 	lsl	r11,r11,r8
80007cb2:	68 18       	ld.w	r8,r4[0x4]
80007cb4:	10 3b       	cp.w	r11,r8
80007cb6:	e0 8b 00 69 	brhi	80007d88 <_malloc_r+0x2c8>
80007cba:	f7 e8 00 09 	and	r9,r11,r8
80007cbe:	c0 b1       	brne	80007cd4 <_malloc_r+0x214>
80007cc0:	e0 13 ff fc 	andl	r3,0xfffc
80007cc4:	a1 7b       	lsl	r11,0x1
80007cc6:	2f c3       	sub	r3,-4
80007cc8:	c0 38       	rjmp	80007cce <_malloc_r+0x20e>
80007cca:	2f c3       	sub	r3,-4
80007ccc:	a1 7b       	lsl	r11,0x1
80007cce:	f7 e8 00 09 	and	r9,r11,r8
80007cd2:	cf c0       	breq	80007cca <_malloc_r+0x20a>
80007cd4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007cd8:	06 92       	mov	r2,r3
80007cda:	1c 91       	mov	r1,lr
80007cdc:	62 36       	ld.w	r6,r1[0xc]
80007cde:	c2 d8       	rjmp	80007d38 <_malloc_r+0x278>
80007ce0:	6c 1a       	ld.w	r10,r6[0x4]
80007ce2:	e0 1a ff fc 	andl	r10,0xfffc
80007ce6:	f4 07 01 08 	sub	r8,r10,r7
80007cea:	58 f8       	cp.w	r8,15
80007cec:	e0 8a 00 15 	brle	80007d16 <_malloc_r+0x256>
80007cf0:	6c 3a       	ld.w	r10,r6[0xc]
80007cf2:	6c 29       	ld.w	r9,r6[0x8]
80007cf4:	95 29       	st.w	r10[0x8],r9
80007cf6:	93 3a       	st.w	r9[0xc],r10
80007cf8:	0e 99       	mov	r9,r7
80007cfa:	ec 07 00 07 	add	r7,r6,r7
80007cfe:	a1 a9       	sbr	r9,0x0
80007d00:	99 37       	st.w	r12[0xc],r7
80007d02:	99 27       	st.w	r12[0x8],r7
80007d04:	8d 19       	st.w	r6[0x4],r9
80007d06:	ee 08 09 08 	st.w	r7[r8],r8
80007d0a:	8f 2c       	st.w	r7[0x8],r12
80007d0c:	8f 3c       	st.w	r7[0xc],r12
80007d0e:	a1 a8       	sbr	r8,0x0
80007d10:	0a 9c       	mov	r12,r5
80007d12:	8f 18       	st.w	r7[0x4],r8
80007d14:	c0 d8       	rjmp	80007d2e <_malloc_r+0x26e>
80007d16:	6c 39       	ld.w	r9,r6[0xc]
80007d18:	58 08       	cp.w	r8,0
80007d1a:	c0 e5       	brlt	80007d36 <_malloc_r+0x276>
80007d1c:	ec 0a 00 0a 	add	r10,r6,r10
80007d20:	74 18       	ld.w	r8,r10[0x4]
80007d22:	a1 a8       	sbr	r8,0x0
80007d24:	0a 9c       	mov	r12,r5
80007d26:	95 18       	st.w	r10[0x4],r8
80007d28:	6c 28       	ld.w	r8,r6[0x8]
80007d2a:	93 28       	st.w	r9[0x8],r8
80007d2c:	91 39       	st.w	r8[0xc],r9
80007d2e:	c1 3d       	rcall	80007f54 <__malloc_unlock>
80007d30:	ec cc ff f8 	sub	r12,r6,-8
80007d34:	d8 32       	popm	r0-r7,pc
80007d36:	12 96       	mov	r6,r9
80007d38:	02 36       	cp.w	r6,r1
80007d3a:	cd 31       	brne	80007ce0 <_malloc_r+0x220>
80007d3c:	2f f2       	sub	r2,-1
80007d3e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007d42:	c0 30       	breq	80007d48 <_malloc_r+0x288>
80007d44:	2f 81       	sub	r1,-8
80007d46:	cc bb       	rjmp	80007cdc <_malloc_r+0x21c>
80007d48:	1c 98       	mov	r8,lr
80007d4a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007d4e:	c0 81       	brne	80007d5e <_malloc_r+0x29e>
80007d50:	68 19       	ld.w	r9,r4[0x4]
80007d52:	f6 08 11 ff 	rsub	r8,r11,-1
80007d56:	f3 e8 00 08 	and	r8,r9,r8
80007d5a:	89 18       	st.w	r4[0x4],r8
80007d5c:	c0 78       	rjmp	80007d6a <_malloc_r+0x2aa>
80007d5e:	f0 c9 00 08 	sub	r9,r8,8
80007d62:	20 13       	sub	r3,1
80007d64:	70 08       	ld.w	r8,r8[0x0]
80007d66:	12 38       	cp.w	r8,r9
80007d68:	cf 10       	breq	80007d4a <_malloc_r+0x28a>
80007d6a:	a1 7b       	lsl	r11,0x1
80007d6c:	68 18       	ld.w	r8,r4[0x4]
80007d6e:	10 3b       	cp.w	r11,r8
80007d70:	e0 8b 00 0c 	brhi	80007d88 <_malloc_r+0x2c8>
80007d74:	58 0b       	cp.w	r11,0
80007d76:	c0 90       	breq	80007d88 <_malloc_r+0x2c8>
80007d78:	04 93       	mov	r3,r2
80007d7a:	c0 38       	rjmp	80007d80 <_malloc_r+0x2c0>
80007d7c:	2f c3       	sub	r3,-4
80007d7e:	a1 7b       	lsl	r11,0x1
80007d80:	f7 e8 00 09 	and	r9,r11,r8
80007d84:	ca 81       	brne	80007cd4 <_malloc_r+0x214>
80007d86:	cf bb       	rjmp	80007d7c <_malloc_r+0x2bc>
80007d88:	68 23       	ld.w	r3,r4[0x8]
80007d8a:	66 12       	ld.w	r2,r3[0x4]
80007d8c:	e0 12 ff fc 	andl	r2,0xfffc
80007d90:	0e 32       	cp.w	r2,r7
80007d92:	5f 39       	srlo	r9
80007d94:	e4 07 01 08 	sub	r8,r2,r7
80007d98:	58 f8       	cp.w	r8,15
80007d9a:	5f aa       	srle	r10
80007d9c:	f5 e9 10 09 	or	r9,r10,r9
80007da0:	e0 80 00 9a 	breq	80007ed4 <_malloc_r+0x414>
80007da4:	e0 68 06 70 	mov	r8,1648
80007da8:	70 01       	ld.w	r1,r8[0x0]
80007daa:	e0 68 05 44 	mov	r8,1348
80007dae:	2f 01       	sub	r1,-16
80007db0:	70 08       	ld.w	r8,r8[0x0]
80007db2:	0e 01       	add	r1,r7
80007db4:	5b f8       	cp.w	r8,-1
80007db6:	c0 40       	breq	80007dbe <_malloc_r+0x2fe>
80007db8:	28 11       	sub	r1,-127
80007dba:	e0 11 ff 80 	andl	r1,0xff80
80007dbe:	02 9b       	mov	r11,r1
80007dc0:	0a 9c       	mov	r12,r5
80007dc2:	e0 a0 05 39 	rcall	80008834 <_sbrk_r>
80007dc6:	18 96       	mov	r6,r12
80007dc8:	5b fc       	cp.w	r12,-1
80007dca:	c7 50       	breq	80007eb4 <_malloc_r+0x3f4>
80007dcc:	e6 02 00 08 	add	r8,r3,r2
80007dd0:	10 3c       	cp.w	r12,r8
80007dd2:	c0 32       	brcc	80007dd8 <_malloc_r+0x318>
80007dd4:	08 33       	cp.w	r3,r4
80007dd6:	c6 f1       	brne	80007eb4 <_malloc_r+0x3f4>
80007dd8:	e0 6a 06 74 	mov	r10,1652
80007ddc:	74 09       	ld.w	r9,r10[0x0]
80007dde:	e2 09 00 09 	add	r9,r1,r9
80007de2:	95 09       	st.w	r10[0x0],r9
80007de4:	10 36       	cp.w	r6,r8
80007de6:	c0 a1       	brne	80007dfa <_malloc_r+0x33a>
80007de8:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007dec:	c0 71       	brne	80007dfa <_malloc_r+0x33a>
80007dee:	e2 02 00 02 	add	r2,r1,r2
80007df2:	68 28       	ld.w	r8,r4[0x8]
80007df4:	a1 a2       	sbr	r2,0x0
80007df6:	91 12       	st.w	r8[0x4],r2
80007df8:	c4 f8       	rjmp	80007e96 <_malloc_r+0x3d6>
80007dfa:	e0 6a 05 44 	mov	r10,1348
80007dfe:	74 0b       	ld.w	r11,r10[0x0]
80007e00:	5b fb       	cp.w	r11,-1
80007e02:	c0 31       	brne	80007e08 <_malloc_r+0x348>
80007e04:	95 06       	st.w	r10[0x0],r6
80007e06:	c0 78       	rjmp	80007e14 <_malloc_r+0x354>
80007e08:	ec 09 00 09 	add	r9,r6,r9
80007e0c:	e0 6a 06 74 	mov	r10,1652
80007e10:	10 19       	sub	r9,r8
80007e12:	95 09       	st.w	r10[0x0],r9
80007e14:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007e18:	f0 09 11 08 	rsub	r9,r8,8
80007e1c:	58 08       	cp.w	r8,0
80007e1e:	f2 08 17 10 	movne	r8,r9
80007e22:	ed d8 e1 06 	addne	r6,r6,r8
80007e26:	28 08       	sub	r8,-128
80007e28:	ec 01 00 01 	add	r1,r6,r1
80007e2c:	0a 9c       	mov	r12,r5
80007e2e:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007e32:	f0 01 01 01 	sub	r1,r8,r1
80007e36:	02 9b       	mov	r11,r1
80007e38:	e0 a0 04 fe 	rcall	80008834 <_sbrk_r>
80007e3c:	e0 68 06 74 	mov	r8,1652
80007e40:	5b fc       	cp.w	r12,-1
80007e42:	ec 0c 17 00 	moveq	r12,r6
80007e46:	f9 b1 00 00 	moveq	r1,0
80007e4a:	70 09       	ld.w	r9,r8[0x0]
80007e4c:	0c 1c       	sub	r12,r6
80007e4e:	89 26       	st.w	r4[0x8],r6
80007e50:	02 0c       	add	r12,r1
80007e52:	12 01       	add	r1,r9
80007e54:	a1 ac       	sbr	r12,0x0
80007e56:	91 01       	st.w	r8[0x0],r1
80007e58:	8d 1c       	st.w	r6[0x4],r12
80007e5a:	08 33       	cp.w	r3,r4
80007e5c:	c1 d0       	breq	80007e96 <_malloc_r+0x3d6>
80007e5e:	58 f2       	cp.w	r2,15
80007e60:	e0 8b 00 05 	brhi	80007e6a <_malloc_r+0x3aa>
80007e64:	30 18       	mov	r8,1
80007e66:	8d 18       	st.w	r6[0x4],r8
80007e68:	c2 68       	rjmp	80007eb4 <_malloc_r+0x3f4>
80007e6a:	30 59       	mov	r9,5
80007e6c:	20 c2       	sub	r2,12
80007e6e:	e0 12 ff f8 	andl	r2,0xfff8
80007e72:	e6 02 00 08 	add	r8,r3,r2
80007e76:	91 29       	st.w	r8[0x8],r9
80007e78:	91 19       	st.w	r8[0x4],r9
80007e7a:	66 18       	ld.w	r8,r3[0x4]
80007e7c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007e80:	e5 e8 10 08 	or	r8,r2,r8
80007e84:	87 18       	st.w	r3[0x4],r8
80007e86:	58 f2       	cp.w	r2,15
80007e88:	e0 88 00 07 	brls	80007e96 <_malloc_r+0x3d6>
80007e8c:	e6 cb ff f8 	sub	r11,r3,-8
80007e90:	0a 9c       	mov	r12,r5
80007e92:	fe b0 fb 71 	rcall	80007574 <_free_r>
80007e96:	e0 69 06 6c 	mov	r9,1644
80007e9a:	72 0a       	ld.w	r10,r9[0x0]
80007e9c:	e0 68 06 74 	mov	r8,1652
80007ea0:	70 08       	ld.w	r8,r8[0x0]
80007ea2:	14 38       	cp.w	r8,r10
80007ea4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007ea8:	e0 69 06 68 	mov	r9,1640
80007eac:	72 0a       	ld.w	r10,r9[0x0]
80007eae:	14 38       	cp.w	r8,r10
80007eb0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007eb4:	68 28       	ld.w	r8,r4[0x8]
80007eb6:	70 18       	ld.w	r8,r8[0x4]
80007eb8:	e0 18 ff fc 	andl	r8,0xfffc
80007ebc:	0e 38       	cp.w	r8,r7
80007ebe:	5f 39       	srlo	r9
80007ec0:	0e 18       	sub	r8,r7
80007ec2:	58 f8       	cp.w	r8,15
80007ec4:	5f aa       	srle	r10
80007ec6:	f5 e9 10 09 	or	r9,r10,r9
80007eca:	c0 50       	breq	80007ed4 <_malloc_r+0x414>
80007ecc:	0a 9c       	mov	r12,r5
80007ece:	c4 3c       	rcall	80007f54 <__malloc_unlock>
80007ed0:	d8 3a       	popm	r0-r7,pc,r12=0
80007ed2:	d7 03       	nop
80007ed4:	68 26       	ld.w	r6,r4[0x8]
80007ed6:	a1 a8       	sbr	r8,0x0
80007ed8:	0e 99       	mov	r9,r7
80007eda:	a1 a9       	sbr	r9,0x0
80007edc:	8d 19       	st.w	r6[0x4],r9
80007ede:	ec 07 00 07 	add	r7,r6,r7
80007ee2:	0a 9c       	mov	r12,r5
80007ee4:	89 27       	st.w	r4[0x8],r7
80007ee6:	8f 18       	st.w	r7[0x4],r8
80007ee8:	c3 6c       	rcall	80007f54 <__malloc_unlock>
80007eea:	ec cc ff f8 	sub	r12,r6,-8
80007eee:	d8 32       	popm	r0-r7,pc

80007ef0 <memchr>:
80007ef0:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007ef4:	c0 68       	rjmp	80007f00 <memchr+0x10>
80007ef6:	20 1a       	sub	r10,1
80007ef8:	19 88       	ld.ub	r8,r12[0x0]
80007efa:	16 38       	cp.w	r8,r11
80007efc:	5e 0c       	reteq	r12
80007efe:	2f fc       	sub	r12,-1
80007f00:	58 0a       	cp.w	r10,0
80007f02:	cf a1       	brne	80007ef6 <memchr+0x6>
80007f04:	5e fa       	retal	r10

80007f06 <memmove>:
80007f06:	d4 01       	pushm	lr
80007f08:	18 3b       	cp.w	r11,r12
80007f0a:	c1 92       	brcc	80007f3c <memmove+0x36>
80007f0c:	f6 0a 00 09 	add	r9,r11,r10
80007f10:	12 3c       	cp.w	r12,r9
80007f12:	c1 52       	brcc	80007f3c <memmove+0x36>
80007f14:	f8 0a 00 0b 	add	r11,r12,r10
80007f18:	30 08       	mov	r8,0
80007f1a:	c0 68       	rjmp	80007f26 <memmove+0x20>
80007f1c:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007f20:	20 1a       	sub	r10,1
80007f22:	f6 08 0b 0e 	st.b	r11[r8],lr
80007f26:	20 18       	sub	r8,1
80007f28:	58 0a       	cp.w	r10,0
80007f2a:	cf 91       	brne	80007f1c <memmove+0x16>
80007f2c:	d8 02       	popm	pc
80007f2e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007f32:	20 1a       	sub	r10,1
80007f34:	f8 08 0b 09 	st.b	r12[r8],r9
80007f38:	2f f8       	sub	r8,-1
80007f3a:	c0 28       	rjmp	80007f3e <memmove+0x38>
80007f3c:	30 08       	mov	r8,0
80007f3e:	58 0a       	cp.w	r10,0
80007f40:	cf 71       	brne	80007f2e <memmove+0x28>
80007f42:	d8 02       	popm	pc

80007f44 <memset>:
80007f44:	18 98       	mov	r8,r12
80007f46:	c0 38       	rjmp	80007f4c <memset+0x8>
80007f48:	10 cb       	st.b	r8++,r11
80007f4a:	20 1a       	sub	r10,1
80007f4c:	58 0a       	cp.w	r10,0
80007f4e:	cf d1       	brne	80007f48 <memset+0x4>
80007f50:	5e fc       	retal	r12

80007f52 <__malloc_lock>:
80007f52:	5e fc       	retal	r12

80007f54 <__malloc_unlock>:
80007f54:	5e fc       	retal	r12

80007f56 <__hi0bits>:
80007f56:	18 98       	mov	r8,r12
80007f58:	e0 1c 00 00 	andl	r12,0x0
80007f5c:	f0 09 15 10 	lsl	r9,r8,0x10
80007f60:	58 0c       	cp.w	r12,0
80007f62:	f2 08 17 00 	moveq	r8,r9
80007f66:	f9 bc 00 10 	moveq	r12,16
80007f6a:	f9 bc 01 00 	movne	r12,0
80007f6e:	10 9a       	mov	r10,r8
80007f70:	f0 09 15 08 	lsl	r9,r8,0x8
80007f74:	e6 1a ff 00 	andh	r10,0xff00,COH
80007f78:	f7 bc 00 f8 	subeq	r12,-8
80007f7c:	f2 08 17 00 	moveq	r8,r9
80007f80:	10 9a       	mov	r10,r8
80007f82:	f0 09 15 04 	lsl	r9,r8,0x4
80007f86:	e6 1a f0 00 	andh	r10,0xf000,COH
80007f8a:	f7 bc 00 fc 	subeq	r12,-4
80007f8e:	f2 08 17 00 	moveq	r8,r9
80007f92:	10 9a       	mov	r10,r8
80007f94:	f0 09 15 02 	lsl	r9,r8,0x2
80007f98:	e6 1a c0 00 	andh	r10,0xc000,COH
80007f9c:	f7 bc 00 fe 	subeq	r12,-2
80007fa0:	f2 08 17 00 	moveq	r8,r9
80007fa4:	58 08       	cp.w	r8,0
80007fa6:	5e 5c       	retlt	r12
80007fa8:	ed b8 00 1e 	bld	r8,0x1e
80007fac:	f9 bc 01 20 	movne	r12,32
80007fb0:	f7 bc 00 ff 	subeq	r12,-1
80007fb4:	5e fc       	retal	r12

80007fb6 <__lo0bits>:
80007fb6:	18 99       	mov	r9,r12
80007fb8:	78 08       	ld.w	r8,r12[0x0]
80007fba:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007fbe:	c1 50       	breq	80007fe8 <__lo0bits+0x32>
80007fc0:	ed b8 00 00 	bld	r8,0x0
80007fc4:	c0 21       	brne	80007fc8 <__lo0bits+0x12>
80007fc6:	5e fd       	retal	0
80007fc8:	10 9b       	mov	r11,r8
80007fca:	f0 0a 16 01 	lsr	r10,r8,0x1
80007fce:	e2 1b 00 02 	andl	r11,0x2,COH
80007fd2:	a3 88       	lsr	r8,0x2
80007fd4:	58 0b       	cp.w	r11,0
80007fd6:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007fda:	f9 bc 01 01 	movne	r12,1
80007fde:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007fe2:	f9 bc 00 02 	moveq	r12,2
80007fe6:	5e fc       	retal	r12
80007fe8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007fec:	f0 0b 16 10 	lsr	r11,r8,0x10
80007ff0:	58 0a       	cp.w	r10,0
80007ff2:	f6 08 17 00 	moveq	r8,r11
80007ff6:	f9 bc 00 10 	moveq	r12,16
80007ffa:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007ffe:	f0 0a 16 08 	lsr	r10,r8,0x8
80008002:	58 0b       	cp.w	r11,0
80008004:	f7 bc 00 f8 	subeq	r12,-8
80008008:	f4 08 17 00 	moveq	r8,r10
8000800c:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80008010:	f0 0a 16 04 	lsr	r10,r8,0x4
80008014:	58 0b       	cp.w	r11,0
80008016:	f7 bc 00 fc 	subeq	r12,-4
8000801a:	f4 08 17 00 	moveq	r8,r10
8000801e:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80008022:	f0 0a 16 02 	lsr	r10,r8,0x2
80008026:	58 0b       	cp.w	r11,0
80008028:	f7 bc 00 fe 	subeq	r12,-2
8000802c:	f4 08 17 00 	moveq	r8,r10
80008030:	ed b8 00 00 	bld	r8,0x0
80008034:	c0 60       	breq	80008040 <__lo0bits+0x8a>
80008036:	a1 98       	lsr	r8,0x1
80008038:	c0 31       	brne	8000803e <__lo0bits+0x88>
8000803a:	32 0c       	mov	r12,32
8000803c:	5e fc       	retal	r12
8000803e:	2f fc       	sub	r12,-1
80008040:	93 08       	st.w	r9[0x0],r8
80008042:	5e fc       	retal	r12

80008044 <__mcmp>:
80008044:	d4 01       	pushm	lr
80008046:	18 98       	mov	r8,r12
80008048:	76 49       	ld.w	r9,r11[0x10]
8000804a:	78 4c       	ld.w	r12,r12[0x10]
8000804c:	12 1c       	sub	r12,r9
8000804e:	c1 31       	brne	80008074 <__mcmp+0x30>
80008050:	2f b9       	sub	r9,-5
80008052:	a3 69       	lsl	r9,0x2
80008054:	12 0b       	add	r11,r9
80008056:	f0 09 00 09 	add	r9,r8,r9
8000805a:	2e c8       	sub	r8,-20
8000805c:	13 4e       	ld.w	lr,--r9
8000805e:	17 4a       	ld.w	r10,--r11
80008060:	14 3e       	cp.w	lr,r10
80008062:	c0 60       	breq	8000806e <__mcmp+0x2a>
80008064:	f9 bc 03 ff 	movlo	r12,-1
80008068:	f9 bc 02 01 	movhs	r12,1
8000806c:	d8 02       	popm	pc
8000806e:	10 39       	cp.w	r9,r8
80008070:	fe 9b ff f6 	brhi	8000805c <__mcmp+0x18>
80008074:	d8 02       	popm	pc
80008076:	d7 03       	nop

80008078 <_Bfree>:
80008078:	d4 21       	pushm	r4-r7,lr
8000807a:	18 97       	mov	r7,r12
8000807c:	16 95       	mov	r5,r11
8000807e:	78 96       	ld.w	r6,r12[0x24]
80008080:	58 06       	cp.w	r6,0
80008082:	c0 91       	brne	80008094 <_Bfree+0x1c>
80008084:	31 0c       	mov	r12,16
80008086:	fe b0 fd 15 	rcall	80007ab0 <malloc>
8000808a:	99 36       	st.w	r12[0xc],r6
8000808c:	8f 9c       	st.w	r7[0x24],r12
8000808e:	99 16       	st.w	r12[0x4],r6
80008090:	99 26       	st.w	r12[0x8],r6
80008092:	99 06       	st.w	r12[0x0],r6
80008094:	58 05       	cp.w	r5,0
80008096:	c0 90       	breq	800080a8 <_Bfree+0x30>
80008098:	6a 19       	ld.w	r9,r5[0x4]
8000809a:	6e 98       	ld.w	r8,r7[0x24]
8000809c:	70 38       	ld.w	r8,r8[0xc]
8000809e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800080a2:	8b 0a       	st.w	r5[0x0],r10
800080a4:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800080a8:	d8 22       	popm	r4-r7,pc
800080aa:	d7 03       	nop

800080ac <_Balloc>:
800080ac:	d4 21       	pushm	r4-r7,lr
800080ae:	18 97       	mov	r7,r12
800080b0:	16 96       	mov	r6,r11
800080b2:	78 95       	ld.w	r5,r12[0x24]
800080b4:	58 05       	cp.w	r5,0
800080b6:	c0 91       	brne	800080c8 <_Balloc+0x1c>
800080b8:	31 0c       	mov	r12,16
800080ba:	fe b0 fc fb 	rcall	80007ab0 <malloc>
800080be:	99 35       	st.w	r12[0xc],r5
800080c0:	8f 9c       	st.w	r7[0x24],r12
800080c2:	99 15       	st.w	r12[0x4],r5
800080c4:	99 25       	st.w	r12[0x8],r5
800080c6:	99 05       	st.w	r12[0x0],r5
800080c8:	6e 95       	ld.w	r5,r7[0x24]
800080ca:	6a 38       	ld.w	r8,r5[0xc]
800080cc:	58 08       	cp.w	r8,0
800080ce:	c0 b1       	brne	800080e4 <_Balloc+0x38>
800080d0:	31 0a       	mov	r10,16
800080d2:	30 4b       	mov	r11,4
800080d4:	0e 9c       	mov	r12,r7
800080d6:	e0 a0 04 93 	rcall	800089fc <_calloc_r>
800080da:	8b 3c       	st.w	r5[0xc],r12
800080dc:	6e 98       	ld.w	r8,r7[0x24]
800080de:	70 3c       	ld.w	r12,r8[0xc]
800080e0:	58 0c       	cp.w	r12,0
800080e2:	c1 b0       	breq	80008118 <_Balloc+0x6c>
800080e4:	6e 98       	ld.w	r8,r7[0x24]
800080e6:	70 38       	ld.w	r8,r8[0xc]
800080e8:	f0 06 00 28 	add	r8,r8,r6<<0x2
800080ec:	70 0c       	ld.w	r12,r8[0x0]
800080ee:	58 0c       	cp.w	r12,0
800080f0:	c0 40       	breq	800080f8 <_Balloc+0x4c>
800080f2:	78 09       	ld.w	r9,r12[0x0]
800080f4:	91 09       	st.w	r8[0x0],r9
800080f6:	c0 e8       	rjmp	80008112 <_Balloc+0x66>
800080f8:	0e 9c       	mov	r12,r7
800080fa:	30 17       	mov	r7,1
800080fc:	0e 9b       	mov	r11,r7
800080fe:	ee 06 09 47 	lsl	r7,r7,r6
80008102:	ee ca ff fb 	sub	r10,r7,-5
80008106:	a3 6a       	lsl	r10,0x2
80008108:	e0 a0 04 7a 	rcall	800089fc <_calloc_r>
8000810c:	c0 60       	breq	80008118 <_Balloc+0x6c>
8000810e:	99 16       	st.w	r12[0x4],r6
80008110:	99 27       	st.w	r12[0x8],r7
80008112:	30 08       	mov	r8,0
80008114:	99 38       	st.w	r12[0xc],r8
80008116:	99 48       	st.w	r12[0x10],r8
80008118:	d8 22       	popm	r4-r7,pc
8000811a:	d7 03       	nop

8000811c <__d2b>:
8000811c:	d4 31       	pushm	r0-r7,lr
8000811e:	20 2d       	sub	sp,8
80008120:	16 93       	mov	r3,r11
80008122:	12 96       	mov	r6,r9
80008124:	10 95       	mov	r5,r8
80008126:	14 92       	mov	r2,r10
80008128:	30 1b       	mov	r11,1
8000812a:	cc 1f       	rcall	800080ac <_Balloc>
8000812c:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80008130:	50 09       	stdsp	sp[0x0],r9
80008132:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80008136:	b5 a9       	sbr	r9,0x14
80008138:	f0 01 16 14 	lsr	r1,r8,0x14
8000813c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008140:	18 94       	mov	r4,r12
80008142:	58 02       	cp.w	r2,0
80008144:	c1 d0       	breq	8000817e <__d2b+0x62>
80008146:	fa cc ff f8 	sub	r12,sp,-8
8000814a:	18 d2       	st.w	--r12,r2
8000814c:	c3 5f       	rcall	80007fb6 <__lo0bits>
8000814e:	40 18       	lddsp	r8,sp[0x4]
80008150:	c0 d0       	breq	8000816a <__d2b+0x4e>
80008152:	40 09       	lddsp	r9,sp[0x0]
80008154:	f8 0a 11 20 	rsub	r10,r12,32
80008158:	f2 0a 09 4a 	lsl	r10,r9,r10
8000815c:	f5 e8 10 08 	or	r8,r10,r8
80008160:	89 58       	st.w	r4[0x14],r8
80008162:	f2 0c 0a 49 	lsr	r9,r9,r12
80008166:	50 09       	stdsp	sp[0x0],r9
80008168:	c0 28       	rjmp	8000816c <__d2b+0x50>
8000816a:	89 58       	st.w	r4[0x14],r8
8000816c:	40 08       	lddsp	r8,sp[0x0]
8000816e:	58 08       	cp.w	r8,0
80008170:	f9 b3 01 02 	movne	r3,2
80008174:	f9 b3 00 01 	moveq	r3,1
80008178:	89 68       	st.w	r4[0x18],r8
8000817a:	89 43       	st.w	r4[0x10],r3
8000817c:	c0 88       	rjmp	8000818c <__d2b+0x70>
8000817e:	1a 9c       	mov	r12,sp
80008180:	c1 bf       	rcall	80007fb6 <__lo0bits>
80008182:	30 13       	mov	r3,1
80008184:	40 08       	lddsp	r8,sp[0x0]
80008186:	2e 0c       	sub	r12,-32
80008188:	89 43       	st.w	r4[0x10],r3
8000818a:	89 58       	st.w	r4[0x14],r8
8000818c:	58 01       	cp.w	r1,0
8000818e:	c0 90       	breq	800081a0 <__d2b+0x84>
80008190:	e2 c1 04 33 	sub	r1,r1,1075
80008194:	18 01       	add	r1,r12
80008196:	8d 01       	st.w	r6[0x0],r1
80008198:	f8 0c 11 35 	rsub	r12,r12,53
8000819c:	8b 0c       	st.w	r5[0x0],r12
8000819e:	c0 c8       	rjmp	800081b6 <__d2b+0x9a>
800081a0:	e6 c8 ff fc 	sub	r8,r3,-4
800081a4:	f8 cc 04 32 	sub	r12,r12,1074
800081a8:	a5 73       	lsl	r3,0x5
800081aa:	8d 0c       	st.w	r6[0x0],r12
800081ac:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800081b0:	cd 3e       	rcall	80007f56 <__hi0bits>
800081b2:	18 13       	sub	r3,r12
800081b4:	8b 03       	st.w	r5[0x0],r3
800081b6:	08 9c       	mov	r12,r4
800081b8:	2f ed       	sub	sp,-8
800081ba:	d8 32       	popm	r0-r7,pc

800081bc <__mdiff>:
800081bc:	d4 31       	pushm	r0-r7,lr
800081be:	74 48       	ld.w	r8,r10[0x10]
800081c0:	76 45       	ld.w	r5,r11[0x10]
800081c2:	16 97       	mov	r7,r11
800081c4:	14 96       	mov	r6,r10
800081c6:	10 15       	sub	r5,r8
800081c8:	c1 31       	brne	800081ee <__mdiff+0x32>
800081ca:	2f b8       	sub	r8,-5
800081cc:	ee ce ff ec 	sub	lr,r7,-20
800081d0:	a3 68       	lsl	r8,0x2
800081d2:	f4 08 00 0b 	add	r11,r10,r8
800081d6:	ee 08 00 08 	add	r8,r7,r8
800081da:	11 4a       	ld.w	r10,--r8
800081dc:	17 49       	ld.w	r9,--r11
800081de:	12 3a       	cp.w	r10,r9
800081e0:	c0 30       	breq	800081e6 <__mdiff+0x2a>
800081e2:	c0 e2       	brcc	800081fe <__mdiff+0x42>
800081e4:	c0 78       	rjmp	800081f2 <__mdiff+0x36>
800081e6:	1c 38       	cp.w	r8,lr
800081e8:	fe 9b ff f9 	brhi	800081da <__mdiff+0x1e>
800081ec:	c4 98       	rjmp	8000827e <__mdiff+0xc2>
800081ee:	58 05       	cp.w	r5,0
800081f0:	c0 64       	brge	800081fc <__mdiff+0x40>
800081f2:	0e 98       	mov	r8,r7
800081f4:	30 15       	mov	r5,1
800081f6:	0c 97       	mov	r7,r6
800081f8:	10 96       	mov	r6,r8
800081fa:	c0 28       	rjmp	800081fe <__mdiff+0x42>
800081fc:	30 05       	mov	r5,0
800081fe:	6e 1b       	ld.w	r11,r7[0x4]
80008200:	c5 6f       	rcall	800080ac <_Balloc>
80008202:	6e 49       	ld.w	r9,r7[0x10]
80008204:	6c 44       	ld.w	r4,r6[0x10]
80008206:	99 35       	st.w	r12[0xc],r5
80008208:	2f b4       	sub	r4,-5
8000820a:	f2 c5 ff fb 	sub	r5,r9,-5
8000820e:	ec 04 00 24 	add	r4,r6,r4<<0x2
80008212:	ee 05 00 25 	add	r5,r7,r5<<0x2
80008216:	2e c6       	sub	r6,-20
80008218:	2e c7       	sub	r7,-20
8000821a:	f8 c8 ff ec 	sub	r8,r12,-20
8000821e:	30 0a       	mov	r10,0
80008220:	0f 0e       	ld.w	lr,r7++
80008222:	0d 0b       	ld.w	r11,r6++
80008224:	fc 02 16 10 	lsr	r2,lr,0x10
80008228:	f6 03 16 10 	lsr	r3,r11,0x10
8000822c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008230:	e4 03 01 03 	sub	r3,r2,r3
80008234:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008238:	fc 0b 01 0b 	sub	r11,lr,r11
8000823c:	f6 0a 00 0a 	add	r10,r11,r10
80008240:	b0 1a       	st.h	r8[0x2],r10
80008242:	b1 4a       	asr	r10,0x10
80008244:	e6 0a 00 0a 	add	r10,r3,r10
80008248:	b0 0a       	st.h	r8[0x0],r10
8000824a:	2f c8       	sub	r8,-4
8000824c:	b1 4a       	asr	r10,0x10
8000824e:	08 36       	cp.w	r6,r4
80008250:	ce 83       	brcs	80008220 <__mdiff+0x64>
80008252:	c0 d8       	rjmp	8000826c <__mdiff+0xb0>
80008254:	0f 0b       	ld.w	r11,r7++
80008256:	f6 0e 16 10 	lsr	lr,r11,0x10
8000825a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000825e:	16 0a       	add	r10,r11
80008260:	b0 1a       	st.h	r8[0x2],r10
80008262:	b1 4a       	asr	r10,0x10
80008264:	1c 0a       	add	r10,lr
80008266:	b0 0a       	st.h	r8[0x0],r10
80008268:	2f c8       	sub	r8,-4
8000826a:	b1 4a       	asr	r10,0x10
8000826c:	0a 37       	cp.w	r7,r5
8000826e:	cf 33       	brcs	80008254 <__mdiff+0x98>
80008270:	c0 28       	rjmp	80008274 <__mdiff+0xb8>
80008272:	20 19       	sub	r9,1
80008274:	11 4a       	ld.w	r10,--r8
80008276:	58 0a       	cp.w	r10,0
80008278:	cf d0       	breq	80008272 <__mdiff+0xb6>
8000827a:	99 49       	st.w	r12[0x10],r9
8000827c:	d8 32       	popm	r0-r7,pc
8000827e:	30 0b       	mov	r11,0
80008280:	c1 6f       	rcall	800080ac <_Balloc>
80008282:	30 18       	mov	r8,1
80008284:	99 48       	st.w	r12[0x10],r8
80008286:	30 08       	mov	r8,0
80008288:	99 58       	st.w	r12[0x14],r8
8000828a:	d8 32       	popm	r0-r7,pc

8000828c <__lshift>:
8000828c:	d4 31       	pushm	r0-r7,lr
8000828e:	16 97       	mov	r7,r11
80008290:	76 46       	ld.w	r6,r11[0x10]
80008292:	f4 02 14 05 	asr	r2,r10,0x5
80008296:	2f f6       	sub	r6,-1
80008298:	14 93       	mov	r3,r10
8000829a:	18 94       	mov	r4,r12
8000829c:	04 06       	add	r6,r2
8000829e:	76 1b       	ld.w	r11,r11[0x4]
800082a0:	6e 28       	ld.w	r8,r7[0x8]
800082a2:	c0 38       	rjmp	800082a8 <__lshift+0x1c>
800082a4:	2f fb       	sub	r11,-1
800082a6:	a1 78       	lsl	r8,0x1
800082a8:	10 36       	cp.w	r6,r8
800082aa:	fe 99 ff fd 	brgt	800082a4 <__lshift+0x18>
800082ae:	08 9c       	mov	r12,r4
800082b0:	cf ee       	rcall	800080ac <_Balloc>
800082b2:	30 09       	mov	r9,0
800082b4:	18 95       	mov	r5,r12
800082b6:	f8 c8 ff ec 	sub	r8,r12,-20
800082ba:	12 9a       	mov	r10,r9
800082bc:	c0 38       	rjmp	800082c2 <__lshift+0x36>
800082be:	10 aa       	st.w	r8++,r10
800082c0:	2f f9       	sub	r9,-1
800082c2:	04 39       	cp.w	r9,r2
800082c4:	cf d5       	brlt	800082be <__lshift+0x32>
800082c6:	6e 4b       	ld.w	r11,r7[0x10]
800082c8:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800082cc:	2f bb       	sub	r11,-5
800082ce:	ee c9 ff ec 	sub	r9,r7,-20
800082d2:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800082d6:	58 03       	cp.w	r3,0
800082d8:	c1 30       	breq	800082fe <__lshift+0x72>
800082da:	e6 0c 11 20 	rsub	r12,r3,32
800082de:	30 0a       	mov	r10,0
800082e0:	72 02       	ld.w	r2,r9[0x0]
800082e2:	e4 03 09 42 	lsl	r2,r2,r3
800082e6:	04 4a       	or	r10,r2
800082e8:	10 aa       	st.w	r8++,r10
800082ea:	13 0a       	ld.w	r10,r9++
800082ec:	f4 0c 0a 4a 	lsr	r10,r10,r12
800082f0:	16 39       	cp.w	r9,r11
800082f2:	cf 73       	brcs	800082e0 <__lshift+0x54>
800082f4:	91 0a       	st.w	r8[0x0],r10
800082f6:	58 0a       	cp.w	r10,0
800082f8:	c0 70       	breq	80008306 <__lshift+0x7a>
800082fa:	2f f6       	sub	r6,-1
800082fc:	c0 58       	rjmp	80008306 <__lshift+0x7a>
800082fe:	13 0a       	ld.w	r10,r9++
80008300:	10 aa       	st.w	r8++,r10
80008302:	16 39       	cp.w	r9,r11
80008304:	cf d3       	brcs	800082fe <__lshift+0x72>
80008306:	08 9c       	mov	r12,r4
80008308:	20 16       	sub	r6,1
8000830a:	0e 9b       	mov	r11,r7
8000830c:	8b 46       	st.w	r5[0x10],r6
8000830e:	cb 5e       	rcall	80008078 <_Bfree>
80008310:	0a 9c       	mov	r12,r5
80008312:	d8 32       	popm	r0-r7,pc

80008314 <__multiply>:
80008314:	d4 31       	pushm	r0-r7,lr
80008316:	20 2d       	sub	sp,8
80008318:	76 49       	ld.w	r9,r11[0x10]
8000831a:	74 48       	ld.w	r8,r10[0x10]
8000831c:	16 96       	mov	r6,r11
8000831e:	14 95       	mov	r5,r10
80008320:	10 39       	cp.w	r9,r8
80008322:	ec 08 17 50 	movlt	r8,r6
80008326:	ea 06 17 50 	movlt	r6,r5
8000832a:	f0 05 17 50 	movlt	r5,r8
8000832e:	6c 28       	ld.w	r8,r6[0x8]
80008330:	76 43       	ld.w	r3,r11[0x10]
80008332:	74 42       	ld.w	r2,r10[0x10]
80008334:	76 1b       	ld.w	r11,r11[0x4]
80008336:	e4 03 00 07 	add	r7,r2,r3
8000833a:	10 37       	cp.w	r7,r8
8000833c:	f7 bb 09 ff 	subgt	r11,-1
80008340:	cb 6e       	rcall	800080ac <_Balloc>
80008342:	ee c4 ff fb 	sub	r4,r7,-5
80008346:	f8 c9 ff ec 	sub	r9,r12,-20
8000834a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000834e:	30 0a       	mov	r10,0
80008350:	12 98       	mov	r8,r9
80008352:	c0 28       	rjmp	80008356 <__multiply+0x42>
80008354:	10 aa       	st.w	r8++,r10
80008356:	08 38       	cp.w	r8,r4
80008358:	cf e3       	brcs	80008354 <__multiply+0x40>
8000835a:	2f b3       	sub	r3,-5
8000835c:	2f b2       	sub	r2,-5
8000835e:	ec 03 00 23 	add	r3,r6,r3<<0x2
80008362:	ea 02 00 22 	add	r2,r5,r2<<0x2
80008366:	ec cb ff ec 	sub	r11,r6,-20
8000836a:	50 12       	stdsp	sp[0x4],r2
8000836c:	ea ca ff ec 	sub	r10,r5,-20
80008370:	c4 48       	rjmp	800083f8 <__multiply+0xe4>
80008372:	94 95       	ld.uh	r5,r10[0x2]
80008374:	58 05       	cp.w	r5,0
80008376:	c2 00       	breq	800083b6 <__multiply+0xa2>
80008378:	12 98       	mov	r8,r9
8000837a:	16 96       	mov	r6,r11
8000837c:	30 0e       	mov	lr,0
8000837e:	50 09       	stdsp	sp[0x0],r9
80008380:	0d 02       	ld.w	r2,r6++
80008382:	e4 00 16 10 	lsr	r0,r2,0x10
80008386:	70 01       	ld.w	r1,r8[0x0]
80008388:	70 09       	ld.w	r9,r8[0x0]
8000838a:	b1 81       	lsr	r1,0x10
8000838c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80008390:	e0 05 03 41 	mac	r1,r0,r5
80008394:	ab 32       	mul	r2,r5
80008396:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000839a:	00 02       	add	r2,r0
8000839c:	e4 0e 00 0e 	add	lr,r2,lr
800083a0:	b0 1e       	st.h	r8[0x2],lr
800083a2:	b1 8e       	lsr	lr,0x10
800083a4:	1c 01       	add	r1,lr
800083a6:	b0 01       	st.h	r8[0x0],r1
800083a8:	e2 0e 16 10 	lsr	lr,r1,0x10
800083ac:	2f c8       	sub	r8,-4
800083ae:	06 36       	cp.w	r6,r3
800083b0:	ce 83       	brcs	80008380 <__multiply+0x6c>
800083b2:	40 09       	lddsp	r9,sp[0x0]
800083b4:	91 0e       	st.w	r8[0x0],lr
800083b6:	94 86       	ld.uh	r6,r10[0x0]
800083b8:	58 06       	cp.w	r6,0
800083ba:	c1 d0       	breq	800083f4 <__multiply+0xe0>
800083bc:	72 02       	ld.w	r2,r9[0x0]
800083be:	12 98       	mov	r8,r9
800083c0:	16 9e       	mov	lr,r11
800083c2:	30 05       	mov	r5,0
800083c4:	b0 12       	st.h	r8[0x2],r2
800083c6:	1d 01       	ld.w	r1,lr++
800083c8:	90 82       	ld.uh	r2,r8[0x0]
800083ca:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800083ce:	ad 30       	mul	r0,r6
800083d0:	e0 02 00 02 	add	r2,r0,r2
800083d4:	e4 05 00 05 	add	r5,r2,r5
800083d8:	b0 05       	st.h	r8[0x0],r5
800083da:	b1 85       	lsr	r5,0x10
800083dc:	b1 81       	lsr	r1,0x10
800083de:	2f c8       	sub	r8,-4
800083e0:	ad 31       	mul	r1,r6
800083e2:	90 92       	ld.uh	r2,r8[0x2]
800083e4:	e2 02 00 02 	add	r2,r1,r2
800083e8:	0a 02       	add	r2,r5
800083ea:	e4 05 16 10 	lsr	r5,r2,0x10
800083ee:	06 3e       	cp.w	lr,r3
800083f0:	ce a3       	brcs	800083c4 <__multiply+0xb0>
800083f2:	91 02       	st.w	r8[0x0],r2
800083f4:	2f ca       	sub	r10,-4
800083f6:	2f c9       	sub	r9,-4
800083f8:	40 18       	lddsp	r8,sp[0x4]
800083fa:	10 3a       	cp.w	r10,r8
800083fc:	cb b3       	brcs	80008372 <__multiply+0x5e>
800083fe:	c0 28       	rjmp	80008402 <__multiply+0xee>
80008400:	20 17       	sub	r7,1
80008402:	58 07       	cp.w	r7,0
80008404:	e0 8a 00 05 	brle	8000840e <__multiply+0xfa>
80008408:	09 48       	ld.w	r8,--r4
8000840a:	58 08       	cp.w	r8,0
8000840c:	cf a0       	breq	80008400 <__multiply+0xec>
8000840e:	99 47       	st.w	r12[0x10],r7
80008410:	2f ed       	sub	sp,-8
80008412:	d8 32       	popm	r0-r7,pc

80008414 <__i2b>:
80008414:	d4 21       	pushm	r4-r7,lr
80008416:	16 97       	mov	r7,r11
80008418:	30 1b       	mov	r11,1
8000841a:	c4 9e       	rcall	800080ac <_Balloc>
8000841c:	30 19       	mov	r9,1
8000841e:	99 57       	st.w	r12[0x14],r7
80008420:	99 49       	st.w	r12[0x10],r9
80008422:	d8 22       	popm	r4-r7,pc

80008424 <__multadd>:
80008424:	d4 31       	pushm	r0-r7,lr
80008426:	30 08       	mov	r8,0
80008428:	12 95       	mov	r5,r9
8000842a:	16 97       	mov	r7,r11
8000842c:	18 96       	mov	r6,r12
8000842e:	76 44       	ld.w	r4,r11[0x10]
80008430:	f6 c9 ff ec 	sub	r9,r11,-20
80008434:	72 0b       	ld.w	r11,r9[0x0]
80008436:	f6 0c 16 10 	lsr	r12,r11,0x10
8000843a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000843e:	f4 0c 02 4c 	mul	r12,r10,r12
80008442:	f4 0b 03 45 	mac	r5,r10,r11
80008446:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000844a:	b1 85       	lsr	r5,0x10
8000844c:	18 05       	add	r5,r12
8000844e:	ea 0c 15 10 	lsl	r12,r5,0x10
80008452:	f8 0b 00 0b 	add	r11,r12,r11
80008456:	12 ab       	st.w	r9++,r11
80008458:	2f f8       	sub	r8,-1
8000845a:	b1 85       	lsr	r5,0x10
8000845c:	08 38       	cp.w	r8,r4
8000845e:	ce b5       	brlt	80008434 <__multadd+0x10>
80008460:	58 05       	cp.w	r5,0
80008462:	c1 c0       	breq	8000849a <__multadd+0x76>
80008464:	6e 28       	ld.w	r8,r7[0x8]
80008466:	10 34       	cp.w	r4,r8
80008468:	c1 35       	brlt	8000848e <__multadd+0x6a>
8000846a:	6e 1b       	ld.w	r11,r7[0x4]
8000846c:	0c 9c       	mov	r12,r6
8000846e:	2f fb       	sub	r11,-1
80008470:	c1 ee       	rcall	800080ac <_Balloc>
80008472:	6e 4a       	ld.w	r10,r7[0x10]
80008474:	ee cb ff f4 	sub	r11,r7,-12
80008478:	18 93       	mov	r3,r12
8000847a:	2f ea       	sub	r10,-2
8000847c:	2f 4c       	sub	r12,-12
8000847e:	a3 6a       	lsl	r10,0x2
80008480:	fe b0 de 39 	rcall	800040f2 <memcpy>
80008484:	0e 9b       	mov	r11,r7
80008486:	0c 9c       	mov	r12,r6
80008488:	fe b0 fd f8 	rcall	80008078 <_Bfree>
8000848c:	06 97       	mov	r7,r3
8000848e:	e8 c8 ff ff 	sub	r8,r4,-1
80008492:	2f b4       	sub	r4,-5
80008494:	8f 48       	st.w	r7[0x10],r8
80008496:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000849a:	0e 9c       	mov	r12,r7
8000849c:	d8 32       	popm	r0-r7,pc
8000849e:	d7 03       	nop

800084a0 <__pow5mult>:
800084a0:	d4 31       	pushm	r0-r7,lr
800084a2:	14 96       	mov	r6,r10
800084a4:	18 97       	mov	r7,r12
800084a6:	16 94       	mov	r4,r11
800084a8:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800084ac:	c0 90       	breq	800084be <__pow5mult+0x1e>
800084ae:	20 18       	sub	r8,1
800084b0:	fe c9 e2 54 	sub	r9,pc,-7596
800084b4:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800084b8:	30 09       	mov	r9,0
800084ba:	cb 5f       	rcall	80008424 <__multadd>
800084bc:	18 94       	mov	r4,r12
800084be:	a3 46       	asr	r6,0x2
800084c0:	c3 40       	breq	80008528 <__pow5mult+0x88>
800084c2:	6e 95       	ld.w	r5,r7[0x24]
800084c4:	58 05       	cp.w	r5,0
800084c6:	c0 91       	brne	800084d8 <__pow5mult+0x38>
800084c8:	31 0c       	mov	r12,16
800084ca:	fe b0 fa f3 	rcall	80007ab0 <malloc>
800084ce:	99 35       	st.w	r12[0xc],r5
800084d0:	8f 9c       	st.w	r7[0x24],r12
800084d2:	99 15       	st.w	r12[0x4],r5
800084d4:	99 25       	st.w	r12[0x8],r5
800084d6:	99 05       	st.w	r12[0x0],r5
800084d8:	6e 93       	ld.w	r3,r7[0x24]
800084da:	66 25       	ld.w	r5,r3[0x8]
800084dc:	58 05       	cp.w	r5,0
800084de:	c0 c1       	brne	800084f6 <__pow5mult+0x56>
800084e0:	e0 6b 02 71 	mov	r11,625
800084e4:	0e 9c       	mov	r12,r7
800084e6:	c9 7f       	rcall	80008414 <__i2b>
800084e8:	87 2c       	st.w	r3[0x8],r12
800084ea:	30 08       	mov	r8,0
800084ec:	18 95       	mov	r5,r12
800084ee:	99 08       	st.w	r12[0x0],r8
800084f0:	c0 38       	rjmp	800084f6 <__pow5mult+0x56>
800084f2:	06 9c       	mov	r12,r3
800084f4:	18 95       	mov	r5,r12
800084f6:	ed b6 00 00 	bld	r6,0x0
800084fa:	c0 b1       	brne	80008510 <__pow5mult+0x70>
800084fc:	08 9b       	mov	r11,r4
800084fe:	0a 9a       	mov	r10,r5
80008500:	0e 9c       	mov	r12,r7
80008502:	c0 9f       	rcall	80008314 <__multiply>
80008504:	08 9b       	mov	r11,r4
80008506:	18 93       	mov	r3,r12
80008508:	0e 9c       	mov	r12,r7
8000850a:	06 94       	mov	r4,r3
8000850c:	fe b0 fd b6 	rcall	80008078 <_Bfree>
80008510:	a1 56       	asr	r6,0x1
80008512:	c0 b0       	breq	80008528 <__pow5mult+0x88>
80008514:	6a 03       	ld.w	r3,r5[0x0]
80008516:	58 03       	cp.w	r3,0
80008518:	ce d1       	brne	800084f2 <__pow5mult+0x52>
8000851a:	0a 9a       	mov	r10,r5
8000851c:	0a 9b       	mov	r11,r5
8000851e:	0e 9c       	mov	r12,r7
80008520:	cf ae       	rcall	80008314 <__multiply>
80008522:	8b 0c       	st.w	r5[0x0],r12
80008524:	99 03       	st.w	r12[0x0],r3
80008526:	ce 7b       	rjmp	800084f4 <__pow5mult+0x54>
80008528:	08 9c       	mov	r12,r4
8000852a:	d8 32       	popm	r0-r7,pc

8000852c <_realloc_r>:
8000852c:	d4 31       	pushm	r0-r7,lr
8000852e:	20 1d       	sub	sp,4
80008530:	16 94       	mov	r4,r11
80008532:	18 92       	mov	r2,r12
80008534:	14 9b       	mov	r11,r10
80008536:	58 04       	cp.w	r4,0
80008538:	c0 51       	brne	80008542 <_realloc_r+0x16>
8000853a:	fe b0 fa c3 	rcall	80007ac0 <_malloc_r>
8000853e:	18 95       	mov	r5,r12
80008540:	c5 39       	rjmp	800087e6 <_realloc_r+0x2ba>
80008542:	50 0a       	stdsp	sp[0x0],r10
80008544:	fe b0 fd 07 	rcall	80007f52 <__malloc_lock>
80008548:	40 0b       	lddsp	r11,sp[0x0]
8000854a:	f6 c8 ff f5 	sub	r8,r11,-11
8000854e:	e8 c1 00 08 	sub	r1,r4,8
80008552:	10 96       	mov	r6,r8
80008554:	62 1c       	ld.w	r12,r1[0x4]
80008556:	e0 16 ff f8 	andl	r6,0xfff8
8000855a:	59 68       	cp.w	r8,22
8000855c:	f9 b6 08 10 	movls	r6,16
80008560:	16 36       	cp.w	r6,r11
80008562:	5f 38       	srlo	r8
80008564:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008568:	c0 50       	breq	80008572 <_realloc_r+0x46>
8000856a:	30 c8       	mov	r8,12
8000856c:	30 05       	mov	r5,0
8000856e:	85 38       	st.w	r2[0xc],r8
80008570:	c3 b9       	rjmp	800087e6 <_realloc_r+0x2ba>
80008572:	18 90       	mov	r0,r12
80008574:	e0 10 ff fc 	andl	r0,0xfffc
80008578:	0c 30       	cp.w	r0,r6
8000857a:	e0 84 01 0b 	brge	80008790 <_realloc_r+0x264>
8000857e:	e0 68 01 38 	mov	r8,312
80008582:	e2 00 00 09 	add	r9,r1,r0
80008586:	70 25       	ld.w	r5,r8[0x8]
80008588:	0a 39       	cp.w	r9,r5
8000858a:	c0 90       	breq	8000859c <_realloc_r+0x70>
8000858c:	72 1a       	ld.w	r10,r9[0x4]
8000858e:	a1 ca       	cbr	r10,0x0
80008590:	f2 0a 00 0a 	add	r10,r9,r10
80008594:	74 1a       	ld.w	r10,r10[0x4]
80008596:	ed ba 00 00 	bld	r10,0x0
8000859a:	c2 20       	breq	800085de <_realloc_r+0xb2>
8000859c:	72 1a       	ld.w	r10,r9[0x4]
8000859e:	e0 1a ff fc 	andl	r10,0xfffc
800085a2:	f4 00 00 03 	add	r3,r10,r0
800085a6:	0a 39       	cp.w	r9,r5
800085a8:	c1 31       	brne	800085ce <_realloc_r+0xa2>
800085aa:	ec c7 ff f0 	sub	r7,r6,-16
800085ae:	0e 33       	cp.w	r3,r7
800085b0:	c1 95       	brlt	800085e2 <_realloc_r+0xb6>
800085b2:	e2 06 00 09 	add	r9,r1,r6
800085b6:	0c 13       	sub	r3,r6
800085b8:	a1 a3       	sbr	r3,0x0
800085ba:	93 13       	st.w	r9[0x4],r3
800085bc:	91 29       	st.w	r8[0x8],r9
800085be:	04 9c       	mov	r12,r2
800085c0:	62 18       	ld.w	r8,r1[0x4]
800085c2:	08 95       	mov	r5,r4
800085c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800085c8:	10 46       	or	r6,r8
800085ca:	83 16       	st.w	r1[0x4],r6
800085cc:	c0 b9       	rjmp	800087e2 <_realloc_r+0x2b6>
800085ce:	0c 33       	cp.w	r3,r6
800085d0:	c0 95       	brlt	800085e2 <_realloc_r+0xb6>
800085d2:	72 28       	ld.w	r8,r9[0x8]
800085d4:	02 97       	mov	r7,r1
800085d6:	72 39       	ld.w	r9,r9[0xc]
800085d8:	93 28       	st.w	r9[0x8],r8
800085da:	91 39       	st.w	r8[0xc],r9
800085dc:	cd c8       	rjmp	80008794 <_realloc_r+0x268>
800085de:	30 0a       	mov	r10,0
800085e0:	14 99       	mov	r9,r10
800085e2:	ed bc 00 00 	bld	r12,0x0
800085e6:	e0 80 00 95 	breq	80008710 <_realloc_r+0x1e4>
800085ea:	62 07       	ld.w	r7,r1[0x0]
800085ec:	e2 07 01 07 	sub	r7,r1,r7
800085f0:	6e 1c       	ld.w	r12,r7[0x4]
800085f2:	e0 1c ff fc 	andl	r12,0xfffc
800085f6:	58 09       	cp.w	r9,0
800085f8:	c5 60       	breq	800086a4 <_realloc_r+0x178>
800085fa:	f8 00 00 03 	add	r3,r12,r0
800085fe:	0a 39       	cp.w	r9,r5
80008600:	c4 81       	brne	80008690 <_realloc_r+0x164>
80008602:	14 03       	add	r3,r10
80008604:	ec c9 ff f0 	sub	r9,r6,-16
80008608:	12 33       	cp.w	r3,r9
8000860a:	c4 d5       	brlt	800086a4 <_realloc_r+0x178>
8000860c:	6e 3a       	ld.w	r10,r7[0xc]
8000860e:	6e 29       	ld.w	r9,r7[0x8]
80008610:	95 29       	st.w	r10[0x8],r9
80008612:	93 3a       	st.w	r9[0xc],r10
80008614:	ee c5 ff f8 	sub	r5,r7,-8
80008618:	e0 ca 00 04 	sub	r10,r0,4
8000861c:	e0 4a 00 24 	cp.w	r10,36
80008620:	e0 8b 00 25 	brhi	8000866a <_realloc_r+0x13e>
80008624:	0a 99       	mov	r9,r5
80008626:	59 3a       	cp.w	r10,19
80008628:	e0 88 00 1a 	brls	8000865c <_realloc_r+0x130>
8000862c:	09 09       	ld.w	r9,r4++
8000862e:	8b 09       	st.w	r5[0x0],r9
80008630:	09 09       	ld.w	r9,r4++
80008632:	8f 39       	st.w	r7[0xc],r9
80008634:	ee c9 ff f0 	sub	r9,r7,-16
80008638:	59 ba       	cp.w	r10,27
8000863a:	e0 88 00 11 	brls	8000865c <_realloc_r+0x130>
8000863e:	09 0b       	ld.w	r11,r4++
80008640:	93 0b       	st.w	r9[0x0],r11
80008642:	09 09       	ld.w	r9,r4++
80008644:	8f 59       	st.w	r7[0x14],r9
80008646:	ee c9 ff e8 	sub	r9,r7,-24
8000864a:	e0 4a 00 24 	cp.w	r10,36
8000864e:	c0 71       	brne	8000865c <_realloc_r+0x130>
80008650:	09 0a       	ld.w	r10,r4++
80008652:	93 0a       	st.w	r9[0x0],r10
80008654:	ee c9 ff e0 	sub	r9,r7,-32
80008658:	09 0a       	ld.w	r10,r4++
8000865a:	8f 7a       	st.w	r7[0x1c],r10
8000865c:	09 0a       	ld.w	r10,r4++
8000865e:	12 aa       	st.w	r9++,r10
80008660:	68 0a       	ld.w	r10,r4[0x0]
80008662:	93 0a       	st.w	r9[0x0],r10
80008664:	68 1a       	ld.w	r10,r4[0x4]
80008666:	93 1a       	st.w	r9[0x4],r10
80008668:	c0 78       	rjmp	80008676 <_realloc_r+0x14a>
8000866a:	50 08       	stdsp	sp[0x0],r8
8000866c:	08 9b       	mov	r11,r4
8000866e:	0a 9c       	mov	r12,r5
80008670:	fe b0 fc 4b 	rcall	80007f06 <memmove>
80008674:	40 08       	lddsp	r8,sp[0x0]
80008676:	ee 06 00 09 	add	r9,r7,r6
8000867a:	0c 13       	sub	r3,r6
8000867c:	a1 a3       	sbr	r3,0x0
8000867e:	93 13       	st.w	r9[0x4],r3
80008680:	91 29       	st.w	r8[0x8],r9
80008682:	04 9c       	mov	r12,r2
80008684:	6e 18       	ld.w	r8,r7[0x4]
80008686:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000868a:	10 46       	or	r6,r8
8000868c:	8f 16       	st.w	r7[0x4],r6
8000868e:	ca a8       	rjmp	800087e2 <_realloc_r+0x2b6>
80008690:	14 03       	add	r3,r10
80008692:	0c 33       	cp.w	r3,r6
80008694:	c0 85       	brlt	800086a4 <_realloc_r+0x178>
80008696:	72 28       	ld.w	r8,r9[0x8]
80008698:	72 39       	ld.w	r9,r9[0xc]
8000869a:	93 28       	st.w	r9[0x8],r8
8000869c:	91 39       	st.w	r8[0xc],r9
8000869e:	6e 28       	ld.w	r8,r7[0x8]
800086a0:	6e 39       	ld.w	r9,r7[0xc]
800086a2:	c0 78       	rjmp	800086b0 <_realloc_r+0x184>
800086a4:	f8 00 00 03 	add	r3,r12,r0
800086a8:	0c 33       	cp.w	r3,r6
800086aa:	c3 35       	brlt	80008710 <_realloc_r+0x1e4>
800086ac:	6e 39       	ld.w	r9,r7[0xc]
800086ae:	6e 28       	ld.w	r8,r7[0x8]
800086b0:	93 28       	st.w	r9[0x8],r8
800086b2:	91 39       	st.w	r8[0xc],r9
800086b4:	e0 ca 00 04 	sub	r10,r0,4
800086b8:	ee cc ff f8 	sub	r12,r7,-8
800086bc:	e0 4a 00 24 	cp.w	r10,36
800086c0:	e0 8b 00 24 	brhi	80008708 <_realloc_r+0x1dc>
800086c4:	59 3a       	cp.w	r10,19
800086c6:	e0 88 00 1a 	brls	800086fa <_realloc_r+0x1ce>
800086ca:	09 08       	ld.w	r8,r4++
800086cc:	99 08       	st.w	r12[0x0],r8
800086ce:	09 08       	ld.w	r8,r4++
800086d0:	8f 38       	st.w	r7[0xc],r8
800086d2:	ee cc ff f0 	sub	r12,r7,-16
800086d6:	59 ba       	cp.w	r10,27
800086d8:	e0 88 00 11 	brls	800086fa <_realloc_r+0x1ce>
800086dc:	09 08       	ld.w	r8,r4++
800086de:	99 08       	st.w	r12[0x0],r8
800086e0:	09 08       	ld.w	r8,r4++
800086e2:	8f 58       	st.w	r7[0x14],r8
800086e4:	ee cc ff e8 	sub	r12,r7,-24
800086e8:	e0 4a 00 24 	cp.w	r10,36
800086ec:	c0 71       	brne	800086fa <_realloc_r+0x1ce>
800086ee:	09 08       	ld.w	r8,r4++
800086f0:	99 08       	st.w	r12[0x0],r8
800086f2:	ee cc ff e0 	sub	r12,r7,-32
800086f6:	09 08       	ld.w	r8,r4++
800086f8:	8f 78       	st.w	r7[0x1c],r8
800086fa:	09 08       	ld.w	r8,r4++
800086fc:	18 a8       	st.w	r12++,r8
800086fe:	68 08       	ld.w	r8,r4[0x0]
80008700:	99 08       	st.w	r12[0x0],r8
80008702:	68 18       	ld.w	r8,r4[0x4]
80008704:	99 18       	st.w	r12[0x4],r8
80008706:	c4 78       	rjmp	80008794 <_realloc_r+0x268>
80008708:	08 9b       	mov	r11,r4
8000870a:	fe b0 fb fe 	rcall	80007f06 <memmove>
8000870e:	c4 38       	rjmp	80008794 <_realloc_r+0x268>
80008710:	04 9c       	mov	r12,r2
80008712:	fe b0 f9 d7 	rcall	80007ac0 <_malloc_r>
80008716:	18 95       	mov	r5,r12
80008718:	c3 a0       	breq	8000878c <_realloc_r+0x260>
8000871a:	62 18       	ld.w	r8,r1[0x4]
8000871c:	f8 c9 00 08 	sub	r9,r12,8
80008720:	a1 c8       	cbr	r8,0x0
80008722:	e2 08 00 08 	add	r8,r1,r8
80008726:	10 39       	cp.w	r9,r8
80008728:	c0 71       	brne	80008736 <_realloc_r+0x20a>
8000872a:	72 13       	ld.w	r3,r9[0x4]
8000872c:	02 97       	mov	r7,r1
8000872e:	e0 13 ff fc 	andl	r3,0xfffc
80008732:	00 03       	add	r3,r0
80008734:	c3 08       	rjmp	80008794 <_realloc_r+0x268>
80008736:	e0 ca 00 04 	sub	r10,r0,4
8000873a:	e0 4a 00 24 	cp.w	r10,36
8000873e:	e0 8b 00 20 	brhi	8000877e <_realloc_r+0x252>
80008742:	08 99       	mov	r9,r4
80008744:	18 98       	mov	r8,r12
80008746:	59 3a       	cp.w	r10,19
80008748:	e0 88 00 14 	brls	80008770 <_realloc_r+0x244>
8000874c:	13 0b       	ld.w	r11,r9++
8000874e:	10 ab       	st.w	r8++,r11
80008750:	13 0b       	ld.w	r11,r9++
80008752:	10 ab       	st.w	r8++,r11
80008754:	59 ba       	cp.w	r10,27
80008756:	e0 88 00 0d 	brls	80008770 <_realloc_r+0x244>
8000875a:	13 0b       	ld.w	r11,r9++
8000875c:	10 ab       	st.w	r8++,r11
8000875e:	13 0b       	ld.w	r11,r9++
80008760:	10 ab       	st.w	r8++,r11
80008762:	e0 4a 00 24 	cp.w	r10,36
80008766:	c0 51       	brne	80008770 <_realloc_r+0x244>
80008768:	13 0a       	ld.w	r10,r9++
8000876a:	10 aa       	st.w	r8++,r10
8000876c:	13 0a       	ld.w	r10,r9++
8000876e:	10 aa       	st.w	r8++,r10
80008770:	13 0a       	ld.w	r10,r9++
80008772:	10 aa       	st.w	r8++,r10
80008774:	72 0a       	ld.w	r10,r9[0x0]
80008776:	91 0a       	st.w	r8[0x0],r10
80008778:	72 19       	ld.w	r9,r9[0x4]
8000877a:	91 19       	st.w	r8[0x4],r9
8000877c:	c0 48       	rjmp	80008784 <_realloc_r+0x258>
8000877e:	08 9b       	mov	r11,r4
80008780:	fe b0 fb c3 	rcall	80007f06 <memmove>
80008784:	08 9b       	mov	r11,r4
80008786:	04 9c       	mov	r12,r2
80008788:	fe b0 f6 f6 	rcall	80007574 <_free_r>
8000878c:	04 9c       	mov	r12,r2
8000878e:	c2 a8       	rjmp	800087e2 <_realloc_r+0x2b6>
80008790:	00 93       	mov	r3,r0
80008792:	02 97       	mov	r7,r1
80008794:	e6 06 01 09 	sub	r9,r3,r6
80008798:	6e 18       	ld.w	r8,r7[0x4]
8000879a:	58 f9       	cp.w	r9,15
8000879c:	e0 88 00 16 	brls	800087c8 <_realloc_r+0x29c>
800087a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800087a4:	ed e8 10 08 	or	r8,r6,r8
800087a8:	8f 18       	st.w	r7[0x4],r8
800087aa:	12 98       	mov	r8,r9
800087ac:	a1 a8       	sbr	r8,0x0
800087ae:	ee 06 00 0b 	add	r11,r7,r6
800087b2:	f6 09 00 09 	add	r9,r11,r9
800087b6:	97 18       	st.w	r11[0x4],r8
800087b8:	72 18       	ld.w	r8,r9[0x4]
800087ba:	a1 a8       	sbr	r8,0x0
800087bc:	2f 8b       	sub	r11,-8
800087be:	93 18       	st.w	r9[0x4],r8
800087c0:	04 9c       	mov	r12,r2
800087c2:	fe b0 f6 d9 	rcall	80007574 <_free_r>
800087c6:	c0 b8       	rjmp	800087dc <_realloc_r+0x2b0>
800087c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800087cc:	e7 e8 10 08 	or	r8,r3,r8
800087d0:	8f 18       	st.w	r7[0x4],r8
800087d2:	ee 03 00 03 	add	r3,r7,r3
800087d6:	66 18       	ld.w	r8,r3[0x4]
800087d8:	a1 a8       	sbr	r8,0x0
800087da:	87 18       	st.w	r3[0x4],r8
800087dc:	04 9c       	mov	r12,r2
800087de:	ee c5 ff f8 	sub	r5,r7,-8
800087e2:	fe b0 fb b9 	rcall	80007f54 <__malloc_unlock>
800087e6:	0a 9c       	mov	r12,r5
800087e8:	2f fd       	sub	sp,-4
800087ea:	d8 32       	popm	r0-r7,pc

800087ec <__isinfd>:
800087ec:	14 98       	mov	r8,r10
800087ee:	fc 19 7f f0 	movh	r9,0x7ff0
800087f2:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800087f6:	f0 0b 11 00 	rsub	r11,r8,0
800087fa:	f7 e8 10 08 	or	r8,r11,r8
800087fe:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80008802:	f2 08 01 08 	sub	r8,r9,r8
80008806:	f0 0c 11 00 	rsub	r12,r8,0
8000880a:	f9 e8 10 08 	or	r8,r12,r8
8000880e:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008812:	2f fc       	sub	r12,-1
80008814:	5e fc       	retal	r12

80008816 <__isnand>:
80008816:	14 98       	mov	r8,r10
80008818:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000881c:	f0 0c 11 00 	rsub	r12,r8,0
80008820:	10 4c       	or	r12,r8
80008822:	fc 18 7f f0 	movh	r8,0x7ff0
80008826:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000882a:	f0 0c 01 0c 	sub	r12,r8,r12
8000882e:	bf 9c       	lsr	r12,0x1f
80008830:	5e fc       	retal	r12
80008832:	d7 03       	nop

80008834 <_sbrk_r>:
80008834:	d4 21       	pushm	r4-r7,lr
80008836:	30 08       	mov	r8,0
80008838:	18 97       	mov	r7,r12
8000883a:	e0 66 08 48 	mov	r6,2120
8000883e:	16 9c       	mov	r12,r11
80008840:	8d 08       	st.w	r6[0x0],r8
80008842:	ca fc       	rcall	800089a0 <_sbrk>
80008844:	5b fc       	cp.w	r12,-1
80008846:	c0 51       	brne	80008850 <_sbrk_r+0x1c>
80008848:	6c 08       	ld.w	r8,r6[0x0]
8000884a:	58 08       	cp.w	r8,0
8000884c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008850:	d8 22       	popm	r4-r7,pc
80008852:	d7 03       	nop

80008854 <__sclose>:
80008854:	d4 01       	pushm	lr
80008856:	96 7b       	ld.sh	r11,r11[0xe]
80008858:	cf ec       	rcall	80008a54 <_close_r>
8000885a:	d8 02       	popm	pc

8000885c <__sseek>:
8000885c:	d4 21       	pushm	r4-r7,lr
8000885e:	16 97       	mov	r7,r11
80008860:	96 7b       	ld.sh	r11,r11[0xe]
80008862:	c8 5d       	rcall	80008b6c <_lseek_r>
80008864:	8e 68       	ld.sh	r8,r7[0xc]
80008866:	10 99       	mov	r9,r8
80008868:	ad c8       	cbr	r8,0xc
8000886a:	ad a9       	sbr	r9,0xc
8000886c:	5b fc       	cp.w	r12,-1
8000886e:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008872:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008876:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000887a:	d8 22       	popm	r4-r7,pc

8000887c <__swrite>:
8000887c:	d4 21       	pushm	r4-r7,lr
8000887e:	96 68       	ld.sh	r8,r11[0xc]
80008880:	16 97       	mov	r7,r11
80008882:	14 95       	mov	r5,r10
80008884:	12 94       	mov	r4,r9
80008886:	e2 18 01 00 	andl	r8,0x100,COH
8000888a:	18 96       	mov	r6,r12
8000888c:	c0 50       	breq	80008896 <__swrite+0x1a>
8000888e:	30 29       	mov	r9,2
80008890:	30 0a       	mov	r10,0
80008892:	96 7b       	ld.sh	r11,r11[0xe]
80008894:	c6 cd       	rcall	80008b6c <_lseek_r>
80008896:	8e 68       	ld.sh	r8,r7[0xc]
80008898:	ad c8       	cbr	r8,0xc
8000889a:	08 99       	mov	r9,r4
8000889c:	0a 9a       	mov	r10,r5
8000889e:	8e 7b       	ld.sh	r11,r7[0xe]
800088a0:	0c 9c       	mov	r12,r6
800088a2:	ae 68       	st.h	r7[0xc],r8
800088a4:	c9 ac       	rcall	800089d8 <_write_r>
800088a6:	d8 22       	popm	r4-r7,pc

800088a8 <__sread>:
800088a8:	d4 21       	pushm	r4-r7,lr
800088aa:	16 97       	mov	r7,r11
800088ac:	96 7b       	ld.sh	r11,r11[0xe]
800088ae:	c7 1d       	rcall	80008b90 <_read_r>
800088b0:	c0 65       	brlt	800088bc <__sread+0x14>
800088b2:	6f 58       	ld.w	r8,r7[0x54]
800088b4:	18 08       	add	r8,r12
800088b6:	ef 48 00 54 	st.w	r7[84],r8
800088ba:	d8 22       	popm	r4-r7,pc
800088bc:	8e 68       	ld.sh	r8,r7[0xc]
800088be:	ad c8       	cbr	r8,0xc
800088c0:	ae 68       	st.h	r7[0xc],r8
800088c2:	d8 22       	popm	r4-r7,pc

800088c4 <strlen>:
800088c4:	30 09       	mov	r9,0
800088c6:	18 98       	mov	r8,r12
800088c8:	c0 28       	rjmp	800088cc <strlen+0x8>
800088ca:	2f f8       	sub	r8,-1
800088cc:	11 8a       	ld.ub	r10,r8[0x0]
800088ce:	f2 0a 18 00 	cp.b	r10,r9
800088d2:	cf c1       	brne	800088ca <strlen+0x6>
800088d4:	f0 0c 01 0c 	sub	r12,r8,r12
800088d8:	5e fc       	retal	r12
800088da:	d7 03       	nop

800088dc <_close>:
800088dc:	30 28       	mov	r8,2
800088de:	d6 73       	breakpoint
800088e0:	3f fc       	mov	r12,-1
800088e2:	35 8b       	mov	r11,88
800088e4:	58 0c       	cp.w	r12,0
800088e6:	5e 4c       	retge	r12
800088e8:	e0 6a 08 48 	mov	r10,2120
800088ec:	95 0b       	st.w	r10[0x0],r11
800088ee:	5e fc       	retal	r12

800088f0 <_lseek>:
800088f0:	30 58       	mov	r8,5
800088f2:	d6 73       	breakpoint
800088f4:	3f fc       	mov	r12,-1
800088f6:	35 8b       	mov	r11,88
800088f8:	58 0c       	cp.w	r12,0
800088fa:	5e 4c       	retge	r12
800088fc:	e0 6a 08 48 	mov	r10,2120
80008900:	95 0b       	st.w	r10[0x0],r11
80008902:	5e fc       	retal	r12

80008904 <_read>:
80008904:	30 38       	mov	r8,3
80008906:	d6 73       	breakpoint
80008908:	3f fc       	mov	r12,-1
8000890a:	35 8b       	mov	r11,88
8000890c:	58 0c       	cp.w	r12,0
8000890e:	5e 4c       	retge	r12
80008910:	e0 6a 08 48 	mov	r10,2120
80008914:	95 0b       	st.w	r10[0x0],r11
80008916:	5e fc       	retal	r12

80008918 <_write>:
80008918:	30 48       	mov	r8,4
8000891a:	d6 73       	breakpoint
8000891c:	3f fc       	mov	r12,-1
8000891e:	35 8b       	mov	r11,88
80008920:	58 0c       	cp.w	r12,0
80008922:	5e 4c       	retge	r12
80008924:	e0 6a 08 48 	mov	r10,2120
80008928:	95 0b       	st.w	r10[0x0],r11
8000892a:	5e fc       	retal	r12

8000892c <isatty>:
8000892c:	30 b8       	mov	r8,11
8000892e:	d6 73       	breakpoint
80008930:	3f fc       	mov	r12,-1
80008932:	35 8b       	mov	r11,88
80008934:	58 0c       	cp.w	r12,0
80008936:	5e 4c       	retge	r12
80008938:	e0 6a 08 48 	mov	r10,2120
8000893c:	95 0b       	st.w	r10[0x0],r11
8000893e:	5e fc       	retal	r12

80008940 <_fstat_host>:
80008940:	30 98       	mov	r8,9
80008942:	d6 73       	breakpoint
80008944:	3f fc       	mov	r12,-1
80008946:	35 8b       	mov	r11,88
80008948:	58 0c       	cp.w	r12,0
8000894a:	5e 4c       	retge	r12
8000894c:	e0 6a 08 48 	mov	r10,2120
80008950:	95 0b       	st.w	r10[0x0],r11
80008952:	5e fc       	retal	r12

80008954 <_fstat>:
80008954:	d4 21       	pushm	r4-r7,lr
80008956:	21 0d       	sub	sp,64
80008958:	16 97       	mov	r7,r11
8000895a:	1a 9b       	mov	r11,sp
8000895c:	cf 2f       	rcall	80008940 <_fstat_host>
8000895e:	c0 34       	brge	80008964 <_fstat+0x10>
80008960:	3f fc       	mov	r12,-1
80008962:	c1 c8       	rjmp	8000899a <_fstat+0x46>
80008964:	40 08       	lddsp	r8,sp[0x0]
80008966:	ae 08       	st.h	r7[0x0],r8
80008968:	40 18       	lddsp	r8,sp[0x4]
8000896a:	ae 18       	st.h	r7[0x2],r8
8000896c:	40 28       	lddsp	r8,sp[0x8]
8000896e:	8f 18       	st.w	r7[0x4],r8
80008970:	40 38       	lddsp	r8,sp[0xc]
80008972:	ae 48       	st.h	r7[0x8],r8
80008974:	40 48       	lddsp	r8,sp[0x10]
80008976:	ae 58       	st.h	r7[0xa],r8
80008978:	40 58       	lddsp	r8,sp[0x14]
8000897a:	ae 68       	st.h	r7[0xc],r8
8000897c:	40 68       	lddsp	r8,sp[0x18]
8000897e:	ae 78       	st.h	r7[0xe],r8
80008980:	40 88       	lddsp	r8,sp[0x20]
80008982:	8f 48       	st.w	r7[0x10],r8
80008984:	40 a8       	lddsp	r8,sp[0x28]
80008986:	8f b8       	st.w	r7[0x2c],r8
80008988:	40 c8       	lddsp	r8,sp[0x30]
8000898a:	8f c8       	st.w	r7[0x30],r8
8000898c:	40 d8       	lddsp	r8,sp[0x34]
8000898e:	8f 58       	st.w	r7[0x14],r8
80008990:	40 e8       	lddsp	r8,sp[0x38]
80008992:	30 0c       	mov	r12,0
80008994:	8f 78       	st.w	r7[0x1c],r8
80008996:	40 f8       	lddsp	r8,sp[0x3c]
80008998:	8f 98       	st.w	r7[0x24],r8
8000899a:	2f 0d       	sub	sp,-64
8000899c:	d8 22       	popm	r4-r7,pc
8000899e:	d7 03       	nop

800089a0 <_sbrk>:
800089a0:	d4 01       	pushm	lr
800089a2:	e0 68 06 9c 	mov	r8,1692
800089a6:	70 09       	ld.w	r9,r8[0x0]
800089a8:	58 09       	cp.w	r9,0
800089aa:	c0 41       	brne	800089b2 <_sbrk+0x12>
800089ac:	e0 69 08 50 	mov	r9,2128
800089b0:	91 09       	st.w	r8[0x0],r9
800089b2:	e0 69 06 9c 	mov	r9,1692
800089b6:	e0 6a 30 00 	mov	r10,12288
800089ba:	72 08       	ld.w	r8,r9[0x0]
800089bc:	f0 0c 00 0c 	add	r12,r8,r12
800089c0:	14 3c       	cp.w	r12,r10
800089c2:	e0 8b 00 04 	brhi	800089ca <_sbrk+0x2a>
800089c6:	93 0c       	st.w	r9[0x0],r12
800089c8:	c0 58       	rjmp	800089d2 <_sbrk+0x32>
800089ca:	c5 5c       	rcall	80008a74 <__errno>
800089cc:	30 c8       	mov	r8,12
800089ce:	99 08       	st.w	r12[0x0],r8
800089d0:	3f f8       	mov	r8,-1
800089d2:	10 9c       	mov	r12,r8
800089d4:	d8 02       	popm	pc
800089d6:	d7 03       	nop

800089d8 <_write_r>:
800089d8:	d4 21       	pushm	r4-r7,lr
800089da:	16 98       	mov	r8,r11
800089dc:	18 97       	mov	r7,r12
800089de:	10 9c       	mov	r12,r8
800089e0:	30 08       	mov	r8,0
800089e2:	14 9b       	mov	r11,r10
800089e4:	e0 66 08 48 	mov	r6,2120
800089e8:	12 9a       	mov	r10,r9
800089ea:	8d 08       	st.w	r6[0x0],r8
800089ec:	c9 6f       	rcall	80008918 <_write>
800089ee:	5b fc       	cp.w	r12,-1
800089f0:	c0 51       	brne	800089fa <_write_r+0x22>
800089f2:	6c 08       	ld.w	r8,r6[0x0]
800089f4:	58 08       	cp.w	r8,0
800089f6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800089fa:	d8 22       	popm	r4-r7,pc

800089fc <_calloc_r>:
800089fc:	d4 21       	pushm	r4-r7,lr
800089fe:	f4 0b 02 4b 	mul	r11,r10,r11
80008a02:	fe b0 f8 5f 	rcall	80007ac0 <_malloc_r>
80008a06:	18 97       	mov	r7,r12
80008a08:	c2 30       	breq	80008a4e <_calloc_r+0x52>
80008a0a:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008a0e:	e0 1a ff fc 	andl	r10,0xfffc
80008a12:	20 4a       	sub	r10,4
80008a14:	e0 4a 00 24 	cp.w	r10,36
80008a18:	e0 8b 00 18 	brhi	80008a48 <_calloc_r+0x4c>
80008a1c:	18 98       	mov	r8,r12
80008a1e:	59 3a       	cp.w	r10,19
80008a20:	e0 88 00 0f 	brls	80008a3e <_calloc_r+0x42>
80008a24:	30 09       	mov	r9,0
80008a26:	10 a9       	st.w	r8++,r9
80008a28:	10 a9       	st.w	r8++,r9
80008a2a:	59 ba       	cp.w	r10,27
80008a2c:	e0 88 00 09 	brls	80008a3e <_calloc_r+0x42>
80008a30:	10 a9       	st.w	r8++,r9
80008a32:	10 a9       	st.w	r8++,r9
80008a34:	e0 4a 00 24 	cp.w	r10,36
80008a38:	c0 31       	brne	80008a3e <_calloc_r+0x42>
80008a3a:	10 a9       	st.w	r8++,r9
80008a3c:	10 a9       	st.w	r8++,r9
80008a3e:	30 09       	mov	r9,0
80008a40:	10 a9       	st.w	r8++,r9
80008a42:	91 19       	st.w	r8[0x4],r9
80008a44:	91 09       	st.w	r8[0x0],r9
80008a46:	c0 48       	rjmp	80008a4e <_calloc_r+0x52>
80008a48:	30 0b       	mov	r11,0
80008a4a:	fe b0 fa 7d 	rcall	80007f44 <memset>
80008a4e:	0e 9c       	mov	r12,r7
80008a50:	d8 22       	popm	r4-r7,pc
80008a52:	d7 03       	nop

80008a54 <_close_r>:
80008a54:	d4 21       	pushm	r4-r7,lr
80008a56:	30 08       	mov	r8,0
80008a58:	18 97       	mov	r7,r12
80008a5a:	e0 66 08 48 	mov	r6,2120
80008a5e:	16 9c       	mov	r12,r11
80008a60:	8d 08       	st.w	r6[0x0],r8
80008a62:	c3 df       	rcall	800088dc <_close>
80008a64:	5b fc       	cp.w	r12,-1
80008a66:	c0 51       	brne	80008a70 <_close_r+0x1c>
80008a68:	6c 08       	ld.w	r8,r6[0x0]
80008a6a:	58 08       	cp.w	r8,0
80008a6c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a70:	d8 22       	popm	r4-r7,pc
80008a72:	d7 03       	nop

80008a74 <__errno>:
80008a74:	e0 68 01 34 	mov	r8,308
80008a78:	70 0c       	ld.w	r12,r8[0x0]
80008a7a:	2f 4c       	sub	r12,-12
80008a7c:	5e fc       	retal	r12
80008a7e:	d7 03       	nop

80008a80 <_fclose_r>:
80008a80:	d4 21       	pushm	r4-r7,lr
80008a82:	18 96       	mov	r6,r12
80008a84:	16 97       	mov	r7,r11
80008a86:	58 0b       	cp.w	r11,0
80008a88:	c0 31       	brne	80008a8e <_fclose_r+0xe>
80008a8a:	16 95       	mov	r5,r11
80008a8c:	c5 38       	rjmp	80008b32 <_fclose_r+0xb2>
80008a8e:	fe b0 f4 87 	rcall	8000739c <__sfp_lock_acquire>
80008a92:	58 06       	cp.w	r6,0
80008a94:	c0 70       	breq	80008aa2 <_fclose_r+0x22>
80008a96:	6c 68       	ld.w	r8,r6[0x18]
80008a98:	58 08       	cp.w	r8,0
80008a9a:	c0 41       	brne	80008aa2 <_fclose_r+0x22>
80008a9c:	0c 9c       	mov	r12,r6
80008a9e:	fe b0 f4 d1 	rcall	80007440 <__sinit>
80008aa2:	fe c8 e8 ee 	sub	r8,pc,-5906
80008aa6:	10 37       	cp.w	r7,r8
80008aa8:	c0 31       	brne	80008aae <_fclose_r+0x2e>
80008aaa:	6c 07       	ld.w	r7,r6[0x0]
80008aac:	c0 c8       	rjmp	80008ac4 <_fclose_r+0x44>
80008aae:	fe c8 e8 da 	sub	r8,pc,-5926
80008ab2:	10 37       	cp.w	r7,r8
80008ab4:	c0 31       	brne	80008aba <_fclose_r+0x3a>
80008ab6:	6c 17       	ld.w	r7,r6[0x4]
80008ab8:	c0 68       	rjmp	80008ac4 <_fclose_r+0x44>
80008aba:	fe c8 e8 c6 	sub	r8,pc,-5946
80008abe:	10 37       	cp.w	r7,r8
80008ac0:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008ac4:	8e 69       	ld.sh	r9,r7[0xc]
80008ac6:	30 08       	mov	r8,0
80008ac8:	f0 09 19 00 	cp.h	r9,r8
80008acc:	c0 51       	brne	80008ad6 <_fclose_r+0x56>
80008ace:	fe b0 f4 68 	rcall	8000739e <__sfp_lock_release>
80008ad2:	30 05       	mov	r5,0
80008ad4:	c2 f8       	rjmp	80008b32 <_fclose_r+0xb2>
80008ad6:	0e 9b       	mov	r11,r7
80008ad8:	0c 9c       	mov	r12,r6
80008ada:	fe b0 f3 db 	rcall	80007290 <_fflush_r>
80008ade:	6e c8       	ld.w	r8,r7[0x30]
80008ae0:	18 95       	mov	r5,r12
80008ae2:	58 08       	cp.w	r8,0
80008ae4:	c0 60       	breq	80008af0 <_fclose_r+0x70>
80008ae6:	6e 8b       	ld.w	r11,r7[0x20]
80008ae8:	0c 9c       	mov	r12,r6
80008aea:	5d 18       	icall	r8
80008aec:	f9 b5 05 ff 	movlt	r5,-1
80008af0:	8e 68       	ld.sh	r8,r7[0xc]
80008af2:	ed b8 00 07 	bld	r8,0x7
80008af6:	c0 51       	brne	80008b00 <_fclose_r+0x80>
80008af8:	6e 4b       	ld.w	r11,r7[0x10]
80008afa:	0c 9c       	mov	r12,r6
80008afc:	fe b0 f5 3c 	rcall	80007574 <_free_r>
80008b00:	6e db       	ld.w	r11,r7[0x34]
80008b02:	58 0b       	cp.w	r11,0
80008b04:	c0 a0       	breq	80008b18 <_fclose_r+0x98>
80008b06:	ee c8 ff bc 	sub	r8,r7,-68
80008b0a:	10 3b       	cp.w	r11,r8
80008b0c:	c0 40       	breq	80008b14 <_fclose_r+0x94>
80008b0e:	0c 9c       	mov	r12,r6
80008b10:	fe b0 f5 32 	rcall	80007574 <_free_r>
80008b14:	30 08       	mov	r8,0
80008b16:	8f d8       	st.w	r7[0x34],r8
80008b18:	6f 2b       	ld.w	r11,r7[0x48]
80008b1a:	58 0b       	cp.w	r11,0
80008b1c:	c0 70       	breq	80008b2a <_fclose_r+0xaa>
80008b1e:	0c 9c       	mov	r12,r6
80008b20:	fe b0 f5 2a 	rcall	80007574 <_free_r>
80008b24:	30 08       	mov	r8,0
80008b26:	ef 48 00 48 	st.w	r7[72],r8
80008b2a:	30 08       	mov	r8,0
80008b2c:	ae 68       	st.h	r7[0xc],r8
80008b2e:	fe b0 f4 38 	rcall	8000739e <__sfp_lock_release>
80008b32:	0a 9c       	mov	r12,r5
80008b34:	d8 22       	popm	r4-r7,pc
80008b36:	d7 03       	nop

80008b38 <fclose>:
80008b38:	d4 01       	pushm	lr
80008b3a:	e0 68 01 34 	mov	r8,308
80008b3e:	18 9b       	mov	r11,r12
80008b40:	70 0c       	ld.w	r12,r8[0x0]
80008b42:	c9 ff       	rcall	80008a80 <_fclose_r>
80008b44:	d8 02       	popm	pc
80008b46:	d7 03       	nop

80008b48 <_fstat_r>:
80008b48:	d4 21       	pushm	r4-r7,lr
80008b4a:	16 98       	mov	r8,r11
80008b4c:	18 97       	mov	r7,r12
80008b4e:	10 9c       	mov	r12,r8
80008b50:	30 08       	mov	r8,0
80008b52:	e0 66 08 48 	mov	r6,2120
80008b56:	14 9b       	mov	r11,r10
80008b58:	8d 08       	st.w	r6[0x0],r8
80008b5a:	cf de       	rcall	80008954 <_fstat>
80008b5c:	5b fc       	cp.w	r12,-1
80008b5e:	c0 51       	brne	80008b68 <_fstat_r+0x20>
80008b60:	6c 08       	ld.w	r8,r6[0x0]
80008b62:	58 08       	cp.w	r8,0
80008b64:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b68:	d8 22       	popm	r4-r7,pc
80008b6a:	d7 03       	nop

80008b6c <_lseek_r>:
80008b6c:	d4 21       	pushm	r4-r7,lr
80008b6e:	16 98       	mov	r8,r11
80008b70:	18 97       	mov	r7,r12
80008b72:	10 9c       	mov	r12,r8
80008b74:	30 08       	mov	r8,0
80008b76:	14 9b       	mov	r11,r10
80008b78:	e0 66 08 48 	mov	r6,2120
80008b7c:	12 9a       	mov	r10,r9
80008b7e:	8d 08       	st.w	r6[0x0],r8
80008b80:	cb 8e       	rcall	800088f0 <_lseek>
80008b82:	5b fc       	cp.w	r12,-1
80008b84:	c0 51       	brne	80008b8e <_lseek_r+0x22>
80008b86:	6c 08       	ld.w	r8,r6[0x0]
80008b88:	58 08       	cp.w	r8,0
80008b8a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b8e:	d8 22       	popm	r4-r7,pc

80008b90 <_read_r>:
80008b90:	d4 21       	pushm	r4-r7,lr
80008b92:	16 98       	mov	r8,r11
80008b94:	18 97       	mov	r7,r12
80008b96:	10 9c       	mov	r12,r8
80008b98:	30 08       	mov	r8,0
80008b9a:	14 9b       	mov	r11,r10
80008b9c:	e0 66 08 48 	mov	r6,2120
80008ba0:	12 9a       	mov	r10,r9
80008ba2:	8d 08       	st.w	r6[0x0],r8
80008ba4:	cb 0e       	rcall	80008904 <_read>
80008ba6:	5b fc       	cp.w	r12,-1
80008ba8:	c0 51       	brne	80008bb2 <_read_r+0x22>
80008baa:	6c 08       	ld.w	r8,r6[0x0]
80008bac:	58 08       	cp.w	r8,0
80008bae:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008bb2:	d8 22       	popm	r4-r7,pc

80008bb4 <__avr32_f64_sub_from_add>:
80008bb4:	ee 19 80 00 	eorh	r9,0x8000

80008bb8 <__avr32_f64_sub>:
80008bb8:	f7 e9 20 0c 	eor	r12,r11,r9
80008bbc:	e0 86 00 ca 	brmi	80008d50 <__avr32_f64_add_from_sub>
80008bc0:	eb cd 40 e0 	pushm	r5-r7,lr
80008bc4:	16 9c       	mov	r12,r11
80008bc6:	e6 1c 80 00 	andh	r12,0x8000,COH
80008bca:	bf db       	cbr	r11,0x1f
80008bcc:	bf d9       	cbr	r9,0x1f
80008bce:	10 3a       	cp.w	r10,r8
80008bd0:	f2 0b 13 00 	cpc	r11,r9
80008bd4:	c0 92       	brcc	80008be6 <__avr32_f64_sub+0x2e>
80008bd6:	16 97       	mov	r7,r11
80008bd8:	12 9b       	mov	r11,r9
80008bda:	0e 99       	mov	r9,r7
80008bdc:	14 97       	mov	r7,r10
80008bde:	10 9a       	mov	r10,r8
80008be0:	0e 98       	mov	r8,r7
80008be2:	ee 1c 80 00 	eorh	r12,0x8000
80008be6:	f6 07 16 14 	lsr	r7,r11,0x14
80008bea:	ab 7b       	lsl	r11,0xb
80008bec:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008bf0:	ab 7a       	lsl	r10,0xb
80008bf2:	bf bb       	sbr	r11,0x1f
80008bf4:	f2 06 16 14 	lsr	r6,r9,0x14
80008bf8:	c4 40       	breq	80008c80 <__avr32_f64_sub_opL_subnormal>
80008bfa:	ab 79       	lsl	r9,0xb
80008bfc:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008c00:	ab 78       	lsl	r8,0xb
80008c02:	bf b9       	sbr	r9,0x1f

80008c04 <__avr32_f64_sub_opL_subnormal_done>:
80008c04:	e0 47 07 ff 	cp.w	r7,2047
80008c08:	c4 f0       	breq	80008ca6 <__avr32_f64_sub_opH_nan_or_inf>
80008c0a:	0e 26       	rsub	r6,r7
80008c0c:	c1 20       	breq	80008c30 <__avr32_f64_sub_shift_done>
80008c0e:	ec 05 11 20 	rsub	r5,r6,32
80008c12:	e0 46 00 20 	cp.w	r6,32
80008c16:	c7 c2       	brcc	80008d0e <__avr32_f64_sub_longshift>
80008c18:	f0 05 09 4e 	lsl	lr,r8,r5
80008c1c:	f2 05 09 45 	lsl	r5,r9,r5
80008c20:	f0 06 0a 48 	lsr	r8,r8,r6
80008c24:	f2 06 0a 49 	lsr	r9,r9,r6
80008c28:	0a 48       	or	r8,r5
80008c2a:	58 0e       	cp.w	lr,0
80008c2c:	5f 1e       	srne	lr
80008c2e:	1c 48       	or	r8,lr

80008c30 <__avr32_f64_sub_shift_done>:
80008c30:	10 1a       	sub	r10,r8
80008c32:	f6 09 01 4b 	sbc	r11,r11,r9
80008c36:	f6 06 12 00 	clz	r6,r11
80008c3a:	c0 e0       	breq	80008c56 <__avr32_f64_sub_longnormalize_done>
80008c3c:	c7 83       	brcs	80008d2c <__avr32_f64_sub_longnormalize>
80008c3e:	ec 0e 11 20 	rsub	lr,r6,32
80008c42:	f6 06 09 4b 	lsl	r11,r11,r6
80008c46:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008c4a:	1c 4b       	or	r11,lr
80008c4c:	f4 06 09 4a 	lsl	r10,r10,r6
80008c50:	0c 17       	sub	r7,r6
80008c52:	e0 8a 00 39 	brle	80008cc4 <__avr32_f64_sub_subnormal_result>

80008c56 <__avr32_f64_sub_longnormalize_done>:
80008c56:	f4 09 15 15 	lsl	r9,r10,0x15
80008c5a:	ab 9a       	lsr	r10,0xb
80008c5c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008c60:	ab 9b       	lsr	r11,0xb
80008c62:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008c66:	18 4b       	or	r11,r12

80008c68 <__avr32_f64_sub_round>:
80008c68:	fc 17 80 00 	movh	r7,0x8000
80008c6c:	ed ba 00 00 	bld	r10,0x0
80008c70:	f7 b7 01 ff 	subne	r7,-1
80008c74:	0e 39       	cp.w	r9,r7
80008c76:	5f 29       	srhs	r9
80008c78:	12 0a       	add	r10,r9
80008c7a:	5c 0b       	acr	r11
80008c7c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c80 <__avr32_f64_sub_opL_subnormal>:
80008c80:	ab 79       	lsl	r9,0xb
80008c82:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008c86:	ab 78       	lsl	r8,0xb
80008c88:	f3 e8 10 0e 	or	lr,r9,r8
80008c8c:	f9 b6 01 01 	movne	r6,1
80008c90:	ee 0e 11 00 	rsub	lr,r7,0
80008c94:	f9 b7 00 01 	moveq	r7,1
80008c98:	ef bb 00 1f 	bst	r11,0x1f
80008c9c:	f7 ea 10 0e 	or	lr,r11,r10
80008ca0:	f9 b7 00 00 	moveq	r7,0
80008ca4:	cb 0b       	rjmp	80008c04 <__avr32_f64_sub_opL_subnormal_done>

80008ca6 <__avr32_f64_sub_opH_nan_or_inf>:
80008ca6:	bf db       	cbr	r11,0x1f
80008ca8:	f7 ea 10 0e 	or	lr,r11,r10
80008cac:	c0 81       	brne	80008cbc <__avr32_f64_sub_return_nan>
80008cae:	e0 46 07 ff 	cp.w	r6,2047
80008cb2:	c0 50       	breq	80008cbc <__avr32_f64_sub_return_nan>
80008cb4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008cb8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008cbc <__avr32_f64_sub_return_nan>:
80008cbc:	3f fa       	mov	r10,-1
80008cbe:	3f fb       	mov	r11,-1
80008cc0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008cc4 <__avr32_f64_sub_subnormal_result>:
80008cc4:	5c 37       	neg	r7
80008cc6:	2f f7       	sub	r7,-1
80008cc8:	f1 b7 04 c0 	satu	r7,0x6
80008ccc:	e0 47 00 20 	cp.w	r7,32
80008cd0:	c1 14       	brge	80008cf2 <__avr32_f64_sub_subnormal_result+0x2e>
80008cd2:	ee 08 11 20 	rsub	r8,r7,32
80008cd6:	f4 08 09 49 	lsl	r9,r10,r8
80008cda:	5f 16       	srne	r6
80008cdc:	f4 07 0a 4a 	lsr	r10,r10,r7
80008ce0:	0c 4a       	or	r10,r6
80008ce2:	f6 08 09 49 	lsl	r9,r11,r8
80008ce6:	f5 e9 10 0a 	or	r10,r10,r9
80008cea:	f4 07 0a 4b 	lsr	r11,r10,r7
80008cee:	30 07       	mov	r7,0
80008cf0:	cb 3b       	rjmp	80008c56 <__avr32_f64_sub_longnormalize_done>
80008cf2:	ee 08 11 40 	rsub	r8,r7,64
80008cf6:	f6 08 09 49 	lsl	r9,r11,r8
80008cfa:	14 49       	or	r9,r10
80008cfc:	5f 16       	srne	r6
80008cfe:	f6 07 0a 4a 	lsr	r10,r11,r7
80008d02:	0c 4a       	or	r10,r6
80008d04:	30 0b       	mov	r11,0
80008d06:	30 07       	mov	r7,0
80008d08:	ca 7b       	rjmp	80008c56 <__avr32_f64_sub_longnormalize_done>
80008d0a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d0e <__avr32_f64_sub_longshift>:
80008d0e:	f1 b6 04 c0 	satu	r6,0x6
80008d12:	f0 0e 17 00 	moveq	lr,r8
80008d16:	c0 40       	breq	80008d1e <__avr32_f64_sub_longshift+0x10>
80008d18:	f2 05 09 4e 	lsl	lr,r9,r5
80008d1c:	10 4e       	or	lr,r8
80008d1e:	f2 06 0a 48 	lsr	r8,r9,r6
80008d22:	30 09       	mov	r9,0
80008d24:	58 0e       	cp.w	lr,0
80008d26:	5f 1e       	srne	lr
80008d28:	1c 48       	or	r8,lr
80008d2a:	c8 3b       	rjmp	80008c30 <__avr32_f64_sub_shift_done>

80008d2c <__avr32_f64_sub_longnormalize>:
80008d2c:	f4 06 12 00 	clz	r6,r10
80008d30:	f9 b7 03 00 	movlo	r7,0
80008d34:	f9 b6 03 00 	movlo	r6,0
80008d38:	f9 bc 03 00 	movlo	r12,0
80008d3c:	f7 b6 02 e0 	subhs	r6,-32
80008d40:	f4 06 09 4b 	lsl	r11,r10,r6
80008d44:	30 0a       	mov	r10,0
80008d46:	0c 17       	sub	r7,r6
80008d48:	fe 9a ff be 	brle	80008cc4 <__avr32_f64_sub_subnormal_result>
80008d4c:	c8 5b       	rjmp	80008c56 <__avr32_f64_sub_longnormalize_done>
80008d4e:	d7 03       	nop

80008d50 <__avr32_f64_add_from_sub>:
80008d50:	ee 19 80 00 	eorh	r9,0x8000

80008d54 <__avr32_f64_add>:
80008d54:	f7 e9 20 0c 	eor	r12,r11,r9
80008d58:	fe 96 ff 2e 	brmi	80008bb4 <__avr32_f64_sub_from_add>
80008d5c:	eb cd 40 e0 	pushm	r5-r7,lr
80008d60:	16 9c       	mov	r12,r11
80008d62:	e6 1c 80 00 	andh	r12,0x8000,COH
80008d66:	bf db       	cbr	r11,0x1f
80008d68:	bf d9       	cbr	r9,0x1f
80008d6a:	12 3b       	cp.w	r11,r9
80008d6c:	c0 72       	brcc	80008d7a <__avr32_f64_add+0x26>
80008d6e:	16 97       	mov	r7,r11
80008d70:	12 9b       	mov	r11,r9
80008d72:	0e 99       	mov	r9,r7
80008d74:	14 97       	mov	r7,r10
80008d76:	10 9a       	mov	r10,r8
80008d78:	0e 98       	mov	r8,r7
80008d7a:	30 0e       	mov	lr,0
80008d7c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008d80:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008d84:	b5 ab       	sbr	r11,0x14
80008d86:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008d8a:	c6 20       	breq	80008e4e <__avr32_f64_add_op2_subnormal>
80008d8c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008d90:	b5 a9       	sbr	r9,0x14
80008d92:	e0 47 07 ff 	cp.w	r7,2047
80008d96:	c2 80       	breq	80008de6 <__avr32_f64_add_opH_nan_or_inf>
80008d98:	0e 26       	rsub	r6,r7
80008d9a:	c1 20       	breq	80008dbe <__avr32_f64_add_shift_done>
80008d9c:	e0 46 00 36 	cp.w	r6,54
80008da0:	c1 52       	brcc	80008dca <__avr32_f64_add_res_of_done>
80008da2:	ec 05 11 20 	rsub	r5,r6,32
80008da6:	e0 46 00 20 	cp.w	r6,32
80008daa:	c3 52       	brcc	80008e14 <__avr32_f64_add_longshift>
80008dac:	f0 05 09 4e 	lsl	lr,r8,r5
80008db0:	f2 05 09 45 	lsl	r5,r9,r5
80008db4:	f0 06 0a 48 	lsr	r8,r8,r6
80008db8:	f2 06 0a 49 	lsr	r9,r9,r6
80008dbc:	0a 48       	or	r8,r5

80008dbe <__avr32_f64_add_shift_done>:
80008dbe:	10 0a       	add	r10,r8
80008dc0:	f6 09 00 4b 	adc	r11,r11,r9
80008dc4:	ed bb 00 15 	bld	r11,0x15
80008dc8:	c3 40       	breq	80008e30 <__avr32_f64_add_res_of>

80008dca <__avr32_f64_add_res_of_done>:
80008dca:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008dce:	18 4b       	or	r11,r12

80008dd0 <__avr32_f64_add_round>:
80008dd0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008dd4:	18 4e       	or	lr,r12
80008dd6:	ee 1e 80 00 	eorh	lr,0x8000
80008dda:	f1 be 04 20 	satu	lr,0x1
80008dde:	1c 0a       	add	r10,lr
80008de0:	5c 0b       	acr	r11
80008de2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008de6 <__avr32_f64_add_opH_nan_or_inf>:
80008de6:	b5 cb       	cbr	r11,0x14
80008de8:	f7 ea 10 0e 	or	lr,r11,r10
80008dec:	c1 01       	brne	80008e0c <__avr32_f64_add_return_nan>
80008dee:	e0 46 07 ff 	cp.w	r6,2047
80008df2:	c0 30       	breq	80008df8 <__avr32_f64_add_opL_nan_or_inf>
80008df4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008df8 <__avr32_f64_add_opL_nan_or_inf>:
80008df8:	b5 c9       	cbr	r9,0x14
80008dfa:	f3 e8 10 0e 	or	lr,r9,r8
80008dfe:	c0 71       	brne	80008e0c <__avr32_f64_add_return_nan>
80008e00:	30 0a       	mov	r10,0
80008e02:	fc 1b 7f f0 	movh	r11,0x7ff0
80008e06:	18 4b       	or	r11,r12
80008e08:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008e0c <__avr32_f64_add_return_nan>:
80008e0c:	3f fa       	mov	r10,-1
80008e0e:	3f fb       	mov	r11,-1
80008e10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008e14 <__avr32_f64_add_longshift>:
80008e14:	f1 b6 04 c0 	satu	r6,0x6
80008e18:	f0 0e 17 00 	moveq	lr,r8
80008e1c:	c0 60       	breq	80008e28 <__avr32_f64_add_longshift+0x14>
80008e1e:	f2 05 09 4e 	lsl	lr,r9,r5
80008e22:	58 08       	cp.w	r8,0
80008e24:	5f 18       	srne	r8
80008e26:	10 4e       	or	lr,r8
80008e28:	f2 06 0a 48 	lsr	r8,r9,r6
80008e2c:	30 09       	mov	r9,0
80008e2e:	cc 8b       	rjmp	80008dbe <__avr32_f64_add_shift_done>

80008e30 <__avr32_f64_add_res_of>:
80008e30:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008e34:	a1 9b       	lsr	r11,0x1
80008e36:	5d 0a       	ror	r10
80008e38:	5d 0e       	ror	lr
80008e3a:	2f f7       	sub	r7,-1
80008e3c:	e0 47 07 ff 	cp.w	r7,2047
80008e40:	f9 ba 00 00 	moveq	r10,0
80008e44:	f9 bb 00 00 	moveq	r11,0
80008e48:	f9 be 00 00 	moveq	lr,0
80008e4c:	cb fb       	rjmp	80008dca <__avr32_f64_add_res_of_done>

80008e4e <__avr32_f64_add_op2_subnormal>:
80008e4e:	30 16       	mov	r6,1
80008e50:	58 07       	cp.w	r7,0
80008e52:	ca 01       	brne	80008d92 <__avr32_f64_add+0x3e>
80008e54:	b5 cb       	cbr	r11,0x14
80008e56:	10 0a       	add	r10,r8
80008e58:	f6 09 00 4b 	adc	r11,r11,r9
80008e5c:	18 4b       	or	r11,r12
80008e5e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008e62:	d7 03       	nop

80008e64 <__avr32_f64_to_u32>:
80008e64:	58 0b       	cp.w	r11,0
80008e66:	5e 6d       	retmi	0

80008e68 <__avr32_f64_to_s32>:
80008e68:	f6 0c 15 01 	lsl	r12,r11,0x1
80008e6c:	b5 9c       	lsr	r12,0x15
80008e6e:	e0 2c 03 ff 	sub	r12,1023
80008e72:	5e 3d       	retlo	0
80008e74:	f8 0c 11 1f 	rsub	r12,r12,31
80008e78:	16 99       	mov	r9,r11
80008e7a:	ab 7b       	lsl	r11,0xb
80008e7c:	bf bb       	sbr	r11,0x1f
80008e7e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008e82:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008e86:	a1 79       	lsl	r9,0x1
80008e88:	5e 2b       	reths	r11
80008e8a:	5c 3b       	neg	r11
80008e8c:	5e fb       	retal	r11

80008e8e <__avr32_f64_cmp_eq>:
80008e8e:	10 3a       	cp.w	r10,r8
80008e90:	f2 0b 13 00 	cpc	r11,r9
80008e94:	c0 80       	breq	80008ea4 <__avr32_f64_cmp_eq+0x16>
80008e96:	a1 7b       	lsl	r11,0x1
80008e98:	a1 79       	lsl	r9,0x1
80008e9a:	14 4b       	or	r11,r10
80008e9c:	12 4b       	or	r11,r9
80008e9e:	10 4b       	or	r11,r8
80008ea0:	5e 0f       	reteq	1
80008ea2:	5e fd       	retal	0
80008ea4:	a1 7b       	lsl	r11,0x1
80008ea6:	fc 1c ff e0 	movh	r12,0xffe0
80008eaa:	58 0a       	cp.w	r10,0
80008eac:	f8 0b 13 00 	cpc	r11,r12
80008eb0:	5e 8f       	retls	1
80008eb2:	5e fd       	retal	0

80008eb4 <__avr32_f64_cmp_ge>:
80008eb4:	1a de       	st.w	--sp,lr
80008eb6:	1a d7       	st.w	--sp,r7
80008eb8:	a1 7b       	lsl	r11,0x1
80008eba:	5f 3c       	srlo	r12
80008ebc:	a1 79       	lsl	r9,0x1
80008ebe:	5f 37       	srlo	r7
80008ec0:	5c fc       	rol	r12
80008ec2:	fc 1e ff e0 	movh	lr,0xffe0
80008ec6:	58 0a       	cp.w	r10,0
80008ec8:	fc 0b 13 00 	cpc	r11,lr
80008ecc:	e0 8b 00 1d 	brhi	80008f06 <__avr32_f64_cmp_ge+0x52>
80008ed0:	58 08       	cp.w	r8,0
80008ed2:	fc 09 13 00 	cpc	r9,lr
80008ed6:	e0 8b 00 18 	brhi	80008f06 <__avr32_f64_cmp_ge+0x52>
80008eda:	58 0b       	cp.w	r11,0
80008edc:	f5 ba 00 00 	subfeq	r10,0
80008ee0:	c1 50       	breq	80008f0a <__avr32_f64_cmp_ge+0x56>
80008ee2:	1b 07       	ld.w	r7,sp++
80008ee4:	1b 0e       	ld.w	lr,sp++
80008ee6:	58 3c       	cp.w	r12,3
80008ee8:	c0 a0       	breq	80008efc <__avr32_f64_cmp_ge+0x48>
80008eea:	58 1c       	cp.w	r12,1
80008eec:	c0 33       	brcs	80008ef2 <__avr32_f64_cmp_ge+0x3e>
80008eee:	5e 0f       	reteq	1
80008ef0:	5e 1d       	retne	0
80008ef2:	10 3a       	cp.w	r10,r8
80008ef4:	f2 0b 13 00 	cpc	r11,r9
80008ef8:	5e 2f       	reths	1
80008efa:	5e 3d       	retlo	0
80008efc:	14 38       	cp.w	r8,r10
80008efe:	f6 09 13 00 	cpc	r9,r11
80008f02:	5e 2f       	reths	1
80008f04:	5e 3d       	retlo	0
80008f06:	1b 07       	ld.w	r7,sp++
80008f08:	d8 0a       	popm	pc,r12=0
80008f0a:	58 17       	cp.w	r7,1
80008f0c:	5f 0c       	sreq	r12
80008f0e:	58 09       	cp.w	r9,0
80008f10:	f5 b8 00 00 	subfeq	r8,0
80008f14:	1b 07       	ld.w	r7,sp++
80008f16:	1b 0e       	ld.w	lr,sp++
80008f18:	5e 0f       	reteq	1
80008f1a:	5e fc       	retal	r12

80008f1c <__avr32_f64_cmp_lt>:
80008f1c:	1a de       	st.w	--sp,lr
80008f1e:	1a d7       	st.w	--sp,r7
80008f20:	a1 7b       	lsl	r11,0x1
80008f22:	5f 3c       	srlo	r12
80008f24:	a1 79       	lsl	r9,0x1
80008f26:	5f 37       	srlo	r7
80008f28:	5c fc       	rol	r12
80008f2a:	fc 1e ff e0 	movh	lr,0xffe0
80008f2e:	58 0a       	cp.w	r10,0
80008f30:	fc 0b 13 00 	cpc	r11,lr
80008f34:	e0 8b 00 1d 	brhi	80008f6e <__avr32_f64_cmp_lt+0x52>
80008f38:	58 08       	cp.w	r8,0
80008f3a:	fc 09 13 00 	cpc	r9,lr
80008f3e:	e0 8b 00 18 	brhi	80008f6e <__avr32_f64_cmp_lt+0x52>
80008f42:	58 0b       	cp.w	r11,0
80008f44:	f5 ba 00 00 	subfeq	r10,0
80008f48:	c1 50       	breq	80008f72 <__avr32_f64_cmp_lt+0x56>
80008f4a:	1b 07       	ld.w	r7,sp++
80008f4c:	1b 0e       	ld.w	lr,sp++
80008f4e:	58 3c       	cp.w	r12,3
80008f50:	c0 a0       	breq	80008f64 <__avr32_f64_cmp_lt+0x48>
80008f52:	58 1c       	cp.w	r12,1
80008f54:	c0 33       	brcs	80008f5a <__avr32_f64_cmp_lt+0x3e>
80008f56:	5e 0d       	reteq	0
80008f58:	5e 1f       	retne	1
80008f5a:	10 3a       	cp.w	r10,r8
80008f5c:	f2 0b 13 00 	cpc	r11,r9
80008f60:	5e 2d       	reths	0
80008f62:	5e 3f       	retlo	1
80008f64:	14 38       	cp.w	r8,r10
80008f66:	f6 09 13 00 	cpc	r9,r11
80008f6a:	5e 2d       	reths	0
80008f6c:	5e 3f       	retlo	1
80008f6e:	1b 07       	ld.w	r7,sp++
80008f70:	d8 0a       	popm	pc,r12=0
80008f72:	58 17       	cp.w	r7,1
80008f74:	5f 1c       	srne	r12
80008f76:	58 09       	cp.w	r9,0
80008f78:	f5 b8 00 00 	subfeq	r8,0
80008f7c:	1b 07       	ld.w	r7,sp++
80008f7e:	1b 0e       	ld.w	lr,sp++
80008f80:	5e 0d       	reteq	0
80008f82:	5e fc       	retal	r12

80008f84 <__avr32_f64_div>:
80008f84:	eb cd 40 ff 	pushm	r0-r7,lr
80008f88:	f7 e9 20 0e 	eor	lr,r11,r9
80008f8c:	f6 07 16 14 	lsr	r7,r11,0x14
80008f90:	a9 7b       	lsl	r11,0x9
80008f92:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008f96:	a9 7a       	lsl	r10,0x9
80008f98:	bd bb       	sbr	r11,0x1d
80008f9a:	e4 1b 3f ff 	andh	r11,0x3fff
80008f9e:	ab d7       	cbr	r7,0xb
80008fa0:	e0 80 00 cc 	breq	80009138 <__avr32_f64_div_round_subnormal+0x54>
80008fa4:	e0 47 07 ff 	cp.w	r7,2047
80008fa8:	e0 84 00 b5 	brge	80009112 <__avr32_f64_div_round_subnormal+0x2e>
80008fac:	f2 06 16 14 	lsr	r6,r9,0x14
80008fb0:	a9 79       	lsl	r9,0x9
80008fb2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008fb6:	a9 78       	lsl	r8,0x9
80008fb8:	bd b9       	sbr	r9,0x1d
80008fba:	e4 19 3f ff 	andh	r9,0x3fff
80008fbe:	ab d6       	cbr	r6,0xb
80008fc0:	e0 80 00 e2 	breq	80009184 <__avr32_f64_div_round_subnormal+0xa0>
80008fc4:	e0 46 07 ff 	cp.w	r6,2047
80008fc8:	e0 84 00 b2 	brge	8000912c <__avr32_f64_div_round_subnormal+0x48>
80008fcc:	0c 17       	sub	r7,r6
80008fce:	fe 37 fc 01 	sub	r7,-1023
80008fd2:	fc 1c 80 00 	movh	r12,0x8000
80008fd6:	f8 03 16 01 	lsr	r3,r12,0x1
80008fda:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008fde:	5c d4       	com	r4
80008fe0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008fe4:	e6 09 06 44 	mulu.d	r4,r3,r9
80008fe8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008fec:	e6 05 06 44 	mulu.d	r4,r3,r5
80008ff0:	ea 03 15 02 	lsl	r3,r5,0x2
80008ff4:	e6 09 06 44 	mulu.d	r4,r3,r9
80008ff8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008ffc:	e6 05 06 44 	mulu.d	r4,r3,r5
80009000:	ea 03 15 02 	lsl	r3,r5,0x2
80009004:	e6 09 06 44 	mulu.d	r4,r3,r9
80009008:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000900c:	e6 05 06 44 	mulu.d	r4,r3,r5
80009010:	ea 03 15 02 	lsl	r3,r5,0x2
80009014:	e6 08 06 40 	mulu.d	r0,r3,r8
80009018:	e4 09 07 40 	macu.d	r0,r2,r9
8000901c:	e6 09 06 44 	mulu.d	r4,r3,r9
80009020:	02 04       	add	r4,r1
80009022:	5c 05       	acr	r5
80009024:	a3 65       	lsl	r5,0x2
80009026:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000902a:	a3 64       	lsl	r4,0x2
8000902c:	5c 34       	neg	r4
8000902e:	f8 05 01 45 	sbc	r5,r12,r5
80009032:	e6 04 06 40 	mulu.d	r0,r3,r4
80009036:	e4 05 07 40 	macu.d	r0,r2,r5
8000903a:	e6 05 06 44 	mulu.d	r4,r3,r5
8000903e:	02 04       	add	r4,r1
80009040:	5c 05       	acr	r5
80009042:	ea 03 15 02 	lsl	r3,r5,0x2
80009046:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000904a:	e8 02 15 02 	lsl	r2,r4,0x2
8000904e:	e6 08 06 40 	mulu.d	r0,r3,r8
80009052:	e4 09 07 40 	macu.d	r0,r2,r9
80009056:	e6 09 06 44 	mulu.d	r4,r3,r9
8000905a:	02 04       	add	r4,r1
8000905c:	5c 05       	acr	r5
8000905e:	a3 65       	lsl	r5,0x2
80009060:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009064:	a3 64       	lsl	r4,0x2
80009066:	5c 34       	neg	r4
80009068:	f8 05 01 45 	sbc	r5,r12,r5
8000906c:	e6 04 06 40 	mulu.d	r0,r3,r4
80009070:	e4 05 07 40 	macu.d	r0,r2,r5
80009074:	e6 05 06 44 	mulu.d	r4,r3,r5
80009078:	02 04       	add	r4,r1
8000907a:	5c 05       	acr	r5
8000907c:	ea 03 15 02 	lsl	r3,r5,0x2
80009080:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009084:	e8 02 15 02 	lsl	r2,r4,0x2
80009088:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000908c:	e4 0b 07 40 	macu.d	r0,r2,r11
80009090:	e6 0b 06 42 	mulu.d	r2,r3,r11
80009094:	02 02       	add	r2,r1
80009096:	5c 03       	acr	r3
80009098:	ed b3 00 1c 	bld	r3,0x1c
8000909c:	c0 90       	breq	800090ae <__avr32_f64_div+0x12a>
8000909e:	a1 72       	lsl	r2,0x1
800090a0:	5c f3       	rol	r3
800090a2:	20 17       	sub	r7,1
800090a4:	a3 9a       	lsr	r10,0x3
800090a6:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800090aa:	a3 9b       	lsr	r11,0x3
800090ac:	c0 58       	rjmp	800090b6 <__avr32_f64_div+0x132>
800090ae:	a5 8a       	lsr	r10,0x4
800090b0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800090b4:	a5 8b       	lsr	r11,0x4
800090b6:	58 07       	cp.w	r7,0
800090b8:	e0 8a 00 8b 	brle	800091ce <__avr32_f64_div_res_subnormal>
800090bc:	e0 12 ff 00 	andl	r2,0xff00
800090c0:	e8 12 00 80 	orl	r2,0x80
800090c4:	e6 08 06 40 	mulu.d	r0,r3,r8
800090c8:	e4 09 07 40 	macu.d	r0,r2,r9
800090cc:	e4 08 06 44 	mulu.d	r4,r2,r8
800090d0:	e6 09 06 48 	mulu.d	r8,r3,r9
800090d4:	00 05       	add	r5,r0
800090d6:	f0 01 00 48 	adc	r8,r8,r1
800090da:	5c 09       	acr	r9
800090dc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800090e0:	58 04       	cp.w	r4,0
800090e2:	5c 25       	cpc	r5

800090e4 <__avr32_f64_div_round_subnormal>:
800090e4:	f4 08 13 00 	cpc	r8,r10
800090e8:	f6 09 13 00 	cpc	r9,r11
800090ec:	5f 36       	srlo	r6
800090ee:	f8 06 17 00 	moveq	r6,r12
800090f2:	e4 0a 16 08 	lsr	r10,r2,0x8
800090f6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800090fa:	e6 0b 16 08 	lsr	r11,r3,0x8
800090fe:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009102:	ed be 00 1f 	bld	lr,0x1f
80009106:	ef bb 00 1f 	bst	r11,0x1f
8000910a:	0c 0a       	add	r10,r6
8000910c:	5c 0b       	acr	r11
8000910e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009112:	e4 1b 00 0f 	andh	r11,0xf
80009116:	14 4b       	or	r11,r10
80009118:	e0 81 00 a7 	brne	80009266 <__avr32_f64_div_res_subnormal+0x98>
8000911c:	f2 06 16 14 	lsr	r6,r9,0x14
80009120:	ab d6       	cbr	r6,0xb
80009122:	e0 46 07 ff 	cp.w	r6,2047
80009126:	e0 81 00 a4 	brne	8000926e <__avr32_f64_div_res_subnormal+0xa0>
8000912a:	c9 e8       	rjmp	80009266 <__avr32_f64_div_res_subnormal+0x98>
8000912c:	e4 19 00 0f 	andh	r9,0xf
80009130:	10 49       	or	r9,r8
80009132:	e0 81 00 9a 	brne	80009266 <__avr32_f64_div_res_subnormal+0x98>
80009136:	c9 28       	rjmp	8000925a <__avr32_f64_div_res_subnormal+0x8c>
80009138:	a3 7b       	lsl	r11,0x3
8000913a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000913e:	a3 7a       	lsl	r10,0x3
80009140:	f5 eb 10 04 	or	r4,r10,r11
80009144:	e0 80 00 a0 	breq	80009284 <__avr32_f64_div_op1_zero>
80009148:	f6 04 12 00 	clz	r4,r11
8000914c:	c1 70       	breq	8000917a <__avr32_f64_div_round_subnormal+0x96>
8000914e:	c0 c3       	brcs	80009166 <__avr32_f64_div_round_subnormal+0x82>
80009150:	e8 05 11 20 	rsub	r5,r4,32
80009154:	f6 04 09 4b 	lsl	r11,r11,r4
80009158:	f4 05 0a 45 	lsr	r5,r10,r5
8000915c:	0a 4b       	or	r11,r5
8000915e:	f4 04 09 4a 	lsl	r10,r10,r4
80009162:	08 17       	sub	r7,r4
80009164:	c0 b8       	rjmp	8000917a <__avr32_f64_div_round_subnormal+0x96>
80009166:	f4 04 12 00 	clz	r4,r10
8000916a:	f9 b4 03 00 	movlo	r4,0
8000916e:	f7 b4 02 e0 	subhs	r4,-32
80009172:	f4 04 09 4b 	lsl	r11,r10,r4
80009176:	30 0a       	mov	r10,0
80009178:	08 17       	sub	r7,r4
8000917a:	a3 8a       	lsr	r10,0x2
8000917c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80009180:	a3 8b       	lsr	r11,0x2
80009182:	c1 1b       	rjmp	80008fa4 <__avr32_f64_div+0x20>
80009184:	a3 79       	lsl	r9,0x3
80009186:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000918a:	a3 78       	lsl	r8,0x3
8000918c:	f3 e8 10 04 	or	r4,r9,r8
80009190:	c6 f0       	breq	8000926e <__avr32_f64_div_res_subnormal+0xa0>
80009192:	f2 04 12 00 	clz	r4,r9
80009196:	c1 70       	breq	800091c4 <__avr32_f64_div_round_subnormal+0xe0>
80009198:	c0 c3       	brcs	800091b0 <__avr32_f64_div_round_subnormal+0xcc>
8000919a:	e8 05 11 20 	rsub	r5,r4,32
8000919e:	f2 04 09 49 	lsl	r9,r9,r4
800091a2:	f0 05 0a 45 	lsr	r5,r8,r5
800091a6:	0a 49       	or	r9,r5
800091a8:	f0 04 09 48 	lsl	r8,r8,r4
800091ac:	08 16       	sub	r6,r4
800091ae:	c0 b8       	rjmp	800091c4 <__avr32_f64_div_round_subnormal+0xe0>
800091b0:	f0 04 12 00 	clz	r4,r8
800091b4:	f9 b4 03 00 	movlo	r4,0
800091b8:	f7 b4 02 e0 	subhs	r4,-32
800091bc:	f0 04 09 49 	lsl	r9,r8,r4
800091c0:	30 08       	mov	r8,0
800091c2:	08 16       	sub	r6,r4
800091c4:	a3 88       	lsr	r8,0x2
800091c6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800091ca:	a3 89       	lsr	r9,0x2
800091cc:	cf ca       	rjmp	80008fc4 <__avr32_f64_div+0x40>

800091ce <__avr32_f64_div_res_subnormal>:
800091ce:	5c 37       	neg	r7
800091d0:	2f f7       	sub	r7,-1
800091d2:	f1 b7 04 c0 	satu	r7,0x6
800091d6:	e0 47 00 20 	cp.w	r7,32
800091da:	c1 54       	brge	80009204 <__avr32_f64_div_res_subnormal+0x36>
800091dc:	ee 06 11 20 	rsub	r6,r7,32
800091e0:	e4 07 0a 42 	lsr	r2,r2,r7
800091e4:	e6 06 09 4c 	lsl	r12,r3,r6
800091e8:	18 42       	or	r2,r12
800091ea:	e6 07 0a 43 	lsr	r3,r3,r7
800091ee:	f4 06 09 41 	lsl	r1,r10,r6
800091f2:	f4 07 0a 4a 	lsr	r10,r10,r7
800091f6:	f6 06 09 4c 	lsl	r12,r11,r6
800091fa:	18 4a       	or	r10,r12
800091fc:	f6 07 0a 4b 	lsr	r11,r11,r7
80009200:	30 00       	mov	r0,0
80009202:	c1 58       	rjmp	8000922c <__avr32_f64_div_res_subnormal+0x5e>
80009204:	ee 06 11 20 	rsub	r6,r7,32
80009208:	f9 b0 00 00 	moveq	r0,0
8000920c:	f9 bc 00 00 	moveq	r12,0
80009210:	c0 50       	breq	8000921a <__avr32_f64_div_res_subnormal+0x4c>
80009212:	f4 06 09 40 	lsl	r0,r10,r6
80009216:	f6 06 09 4c 	lsl	r12,r11,r6
8000921a:	e6 07 0a 42 	lsr	r2,r3,r7
8000921e:	30 03       	mov	r3,0
80009220:	f4 07 0a 41 	lsr	r1,r10,r7
80009224:	18 41       	or	r1,r12
80009226:	f6 07 0a 4a 	lsr	r10,r11,r7
8000922a:	30 0b       	mov	r11,0
8000922c:	e0 12 ff 00 	andl	r2,0xff00
80009230:	e8 12 00 80 	orl	r2,0x80
80009234:	e6 08 06 46 	mulu.d	r6,r3,r8
80009238:	e4 09 07 46 	macu.d	r6,r2,r9
8000923c:	e4 08 06 44 	mulu.d	r4,r2,r8
80009240:	e6 09 06 48 	mulu.d	r8,r3,r9
80009244:	0c 05       	add	r5,r6
80009246:	f0 07 00 48 	adc	r8,r8,r7
8000924a:	5c 09       	acr	r9
8000924c:	30 07       	mov	r7,0
8000924e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009252:	00 34       	cp.w	r4,r0
80009254:	e2 05 13 00 	cpc	r5,r1
80009258:	c4 6b       	rjmp	800090e4 <__avr32_f64_div_round_subnormal>
8000925a:	1c 9b       	mov	r11,lr
8000925c:	e6 1b 80 00 	andh	r11,0x8000,COH
80009260:	30 0a       	mov	r10,0
80009262:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009266:	3f fb       	mov	r11,-1
80009268:	30 0a       	mov	r10,0
8000926a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000926e:	f5 eb 10 04 	or	r4,r10,r11
80009272:	c0 90       	breq	80009284 <__avr32_f64_div_op1_zero>
80009274:	1c 9b       	mov	r11,lr
80009276:	e6 1b 80 00 	andh	r11,0x8000,COH
8000927a:	ea 1b 7f f0 	orh	r11,0x7ff0
8000927e:	30 0a       	mov	r10,0
80009280:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009284 <__avr32_f64_div_op1_zero>:
80009284:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009288:	ce f0       	breq	80009266 <__avr32_f64_div_res_subnormal+0x98>
8000928a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000928e:	e0 44 07 ff 	cp.w	r4,2047
80009292:	ce 41       	brne	8000925a <__avr32_f64_div_res_subnormal+0x8c>
80009294:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009298:	ce 10       	breq	8000925a <__avr32_f64_div_res_subnormal+0x8c>
8000929a:	ce 6b       	rjmp	80009266 <__avr32_f64_div_res_subnormal+0x98>

8000929c <__avr32_udiv64>:
8000929c:	d4 31       	pushm	r0-r7,lr
8000929e:	1a 97       	mov	r7,sp
800092a0:	20 3d       	sub	sp,12
800092a2:	10 9c       	mov	r12,r8
800092a4:	12 9e       	mov	lr,r9
800092a6:	14 93       	mov	r3,r10
800092a8:	58 09       	cp.w	r9,0
800092aa:	e0 81 00 bd 	brne	80009424 <__avr32_udiv64+0x188>
800092ae:	16 38       	cp.w	r8,r11
800092b0:	e0 88 00 40 	brls	80009330 <__avr32_udiv64+0x94>
800092b4:	f0 08 12 00 	clz	r8,r8
800092b8:	c0 d0       	breq	800092d2 <__avr32_udiv64+0x36>
800092ba:	f6 08 09 4b 	lsl	r11,r11,r8
800092be:	f0 09 11 20 	rsub	r9,r8,32
800092c2:	f8 08 09 4c 	lsl	r12,r12,r8
800092c6:	f4 09 0a 49 	lsr	r9,r10,r9
800092ca:	f4 08 09 43 	lsl	r3,r10,r8
800092ce:	f3 eb 10 0b 	or	r11,r9,r11
800092d2:	f8 0e 16 10 	lsr	lr,r12,0x10
800092d6:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800092da:	f6 0e 0d 00 	divu	r0,r11,lr
800092de:	e6 0b 16 10 	lsr	r11,r3,0x10
800092e2:	00 99       	mov	r9,r0
800092e4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800092e8:	e0 0a 02 48 	mul	r8,r0,r10
800092ec:	10 3b       	cp.w	r11,r8
800092ee:	c0 a2       	brcc	80009302 <__avr32_udiv64+0x66>
800092f0:	20 19       	sub	r9,1
800092f2:	18 0b       	add	r11,r12
800092f4:	18 3b       	cp.w	r11,r12
800092f6:	c0 63       	brcs	80009302 <__avr32_udiv64+0x66>
800092f8:	10 3b       	cp.w	r11,r8
800092fa:	f7 b9 03 01 	sublo	r9,1
800092fe:	f7 dc e3 0b 	addcs	r11,r11,r12
80009302:	f6 08 01 01 	sub	r1,r11,r8
80009306:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000930a:	e2 0e 0d 00 	divu	r0,r1,lr
8000930e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009312:	00 98       	mov	r8,r0
80009314:	e0 0a 02 4a 	mul	r10,r0,r10
80009318:	14 33       	cp.w	r3,r10
8000931a:	c0 82       	brcc	8000932a <__avr32_udiv64+0x8e>
8000931c:	20 18       	sub	r8,1
8000931e:	18 03       	add	r3,r12
80009320:	18 33       	cp.w	r3,r12
80009322:	c0 43       	brcs	8000932a <__avr32_udiv64+0x8e>
80009324:	14 33       	cp.w	r3,r10
80009326:	f7 b8 03 01 	sublo	r8,1
8000932a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000932e:	cd f8       	rjmp	800094ec <__avr32_udiv64+0x250>
80009330:	58 08       	cp.w	r8,0
80009332:	c0 51       	brne	8000933c <__avr32_udiv64+0xa0>
80009334:	30 19       	mov	r9,1
80009336:	f2 08 0d 08 	divu	r8,r9,r8
8000933a:	10 9c       	mov	r12,r8
8000933c:	f8 06 12 00 	clz	r6,r12
80009340:	c0 41       	brne	80009348 <__avr32_udiv64+0xac>
80009342:	18 1b       	sub	r11,r12
80009344:	30 19       	mov	r9,1
80009346:	c4 08       	rjmp	800093c6 <__avr32_udiv64+0x12a>
80009348:	ec 01 11 20 	rsub	r1,r6,32
8000934c:	f4 01 0a 49 	lsr	r9,r10,r1
80009350:	f8 06 09 4c 	lsl	r12,r12,r6
80009354:	f6 06 09 48 	lsl	r8,r11,r6
80009358:	f6 01 0a 41 	lsr	r1,r11,r1
8000935c:	f3 e8 10 08 	or	r8,r9,r8
80009360:	f8 03 16 10 	lsr	r3,r12,0x10
80009364:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009368:	e2 03 0d 00 	divu	r0,r1,r3
8000936c:	f0 0b 16 10 	lsr	r11,r8,0x10
80009370:	00 9e       	mov	lr,r0
80009372:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009376:	e0 05 02 49 	mul	r9,r0,r5
8000937a:	12 3b       	cp.w	r11,r9
8000937c:	c0 a2       	brcc	80009390 <__avr32_udiv64+0xf4>
8000937e:	20 1e       	sub	lr,1
80009380:	18 0b       	add	r11,r12
80009382:	18 3b       	cp.w	r11,r12
80009384:	c0 63       	brcs	80009390 <__avr32_udiv64+0xf4>
80009386:	12 3b       	cp.w	r11,r9
80009388:	f7 be 03 01 	sublo	lr,1
8000938c:	f7 dc e3 0b 	addcs	r11,r11,r12
80009390:	12 1b       	sub	r11,r9
80009392:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009396:	f6 03 0d 02 	divu	r2,r11,r3
8000939a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000939e:	04 99       	mov	r9,r2
800093a0:	e4 05 02 4b 	mul	r11,r2,r5
800093a4:	16 38       	cp.w	r8,r11
800093a6:	c0 a2       	brcc	800093ba <__avr32_udiv64+0x11e>
800093a8:	20 19       	sub	r9,1
800093aa:	18 08       	add	r8,r12
800093ac:	18 38       	cp.w	r8,r12
800093ae:	c0 63       	brcs	800093ba <__avr32_udiv64+0x11e>
800093b0:	16 38       	cp.w	r8,r11
800093b2:	f7 b9 03 01 	sublo	r9,1
800093b6:	f1 dc e3 08 	addcs	r8,r8,r12
800093ba:	f4 06 09 43 	lsl	r3,r10,r6
800093be:	f0 0b 01 0b 	sub	r11,r8,r11
800093c2:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800093c6:	f8 06 16 10 	lsr	r6,r12,0x10
800093ca:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800093ce:	f6 06 0d 00 	divu	r0,r11,r6
800093d2:	e6 0b 16 10 	lsr	r11,r3,0x10
800093d6:	00 9a       	mov	r10,r0
800093d8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800093dc:	e0 0e 02 48 	mul	r8,r0,lr
800093e0:	10 3b       	cp.w	r11,r8
800093e2:	c0 a2       	brcc	800093f6 <__avr32_udiv64+0x15a>
800093e4:	20 1a       	sub	r10,1
800093e6:	18 0b       	add	r11,r12
800093e8:	18 3b       	cp.w	r11,r12
800093ea:	c0 63       	brcs	800093f6 <__avr32_udiv64+0x15a>
800093ec:	10 3b       	cp.w	r11,r8
800093ee:	f7 ba 03 01 	sublo	r10,1
800093f2:	f7 dc e3 0b 	addcs	r11,r11,r12
800093f6:	f6 08 01 01 	sub	r1,r11,r8
800093fa:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800093fe:	e2 06 0d 00 	divu	r0,r1,r6
80009402:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009406:	00 98       	mov	r8,r0
80009408:	e0 0e 02 4b 	mul	r11,r0,lr
8000940c:	16 33       	cp.w	r3,r11
8000940e:	c0 82       	brcc	8000941e <__avr32_udiv64+0x182>
80009410:	20 18       	sub	r8,1
80009412:	18 03       	add	r3,r12
80009414:	18 33       	cp.w	r3,r12
80009416:	c0 43       	brcs	8000941e <__avr32_udiv64+0x182>
80009418:	16 33       	cp.w	r3,r11
8000941a:	f7 b8 03 01 	sublo	r8,1
8000941e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80009422:	c6 98       	rjmp	800094f4 <__avr32_udiv64+0x258>
80009424:	16 39       	cp.w	r9,r11
80009426:	e0 8b 00 65 	brhi	800094f0 <__avr32_udiv64+0x254>
8000942a:	f2 09 12 00 	clz	r9,r9
8000942e:	c0 b1       	brne	80009444 <__avr32_udiv64+0x1a8>
80009430:	10 3a       	cp.w	r10,r8
80009432:	5f 2a       	srhs	r10
80009434:	1c 3b       	cp.w	r11,lr
80009436:	5f b8       	srhi	r8
80009438:	10 4a       	or	r10,r8
8000943a:	f2 0a 18 00 	cp.b	r10,r9
8000943e:	c5 90       	breq	800094f0 <__avr32_udiv64+0x254>
80009440:	30 18       	mov	r8,1
80009442:	c5 98       	rjmp	800094f4 <__avr32_udiv64+0x258>
80009444:	f0 09 09 46 	lsl	r6,r8,r9
80009448:	f2 03 11 20 	rsub	r3,r9,32
8000944c:	fc 09 09 4e 	lsl	lr,lr,r9
80009450:	f0 03 0a 48 	lsr	r8,r8,r3
80009454:	f6 09 09 4c 	lsl	r12,r11,r9
80009458:	f4 03 0a 42 	lsr	r2,r10,r3
8000945c:	ef 46 ff f4 	st.w	r7[-12],r6
80009460:	f6 03 0a 43 	lsr	r3,r11,r3
80009464:	18 42       	or	r2,r12
80009466:	f1 ee 10 0c 	or	r12,r8,lr
8000946a:	f8 01 16 10 	lsr	r1,r12,0x10
8000946e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009472:	e6 01 0d 04 	divu	r4,r3,r1
80009476:	e4 03 16 10 	lsr	r3,r2,0x10
8000947a:	08 9e       	mov	lr,r4
8000947c:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009480:	e8 06 02 48 	mul	r8,r4,r6
80009484:	10 33       	cp.w	r3,r8
80009486:	c0 a2       	brcc	8000949a <__avr32_udiv64+0x1fe>
80009488:	20 1e       	sub	lr,1
8000948a:	18 03       	add	r3,r12
8000948c:	18 33       	cp.w	r3,r12
8000948e:	c0 63       	brcs	8000949a <__avr32_udiv64+0x1fe>
80009490:	10 33       	cp.w	r3,r8
80009492:	f7 be 03 01 	sublo	lr,1
80009496:	e7 dc e3 03 	addcs	r3,r3,r12
8000949a:	10 13       	sub	r3,r8
8000949c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800094a0:	e6 01 0d 00 	divu	r0,r3,r1
800094a4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800094a8:	00 98       	mov	r8,r0
800094aa:	e0 06 02 46 	mul	r6,r0,r6
800094ae:	0c 3b       	cp.w	r11,r6
800094b0:	c0 a2       	brcc	800094c4 <__avr32_udiv64+0x228>
800094b2:	20 18       	sub	r8,1
800094b4:	18 0b       	add	r11,r12
800094b6:	18 3b       	cp.w	r11,r12
800094b8:	c0 63       	brcs	800094c4 <__avr32_udiv64+0x228>
800094ba:	0c 3b       	cp.w	r11,r6
800094bc:	f7 dc e3 0b 	addcs	r11,r11,r12
800094c0:	f7 b8 03 01 	sublo	r8,1
800094c4:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800094c8:	ee f4 ff f4 	ld.w	r4,r7[-12]
800094cc:	0c 1b       	sub	r11,r6
800094ce:	f0 04 06 42 	mulu.d	r2,r8,r4
800094d2:	06 95       	mov	r5,r3
800094d4:	16 35       	cp.w	r5,r11
800094d6:	e0 8b 00 0a 	brhi	800094ea <__avr32_udiv64+0x24e>
800094da:	5f 0b       	sreq	r11
800094dc:	f4 09 09 49 	lsl	r9,r10,r9
800094e0:	12 32       	cp.w	r2,r9
800094e2:	5f b9       	srhi	r9
800094e4:	f7 e9 00 09 	and	r9,r11,r9
800094e8:	c0 60       	breq	800094f4 <__avr32_udiv64+0x258>
800094ea:	20 18       	sub	r8,1
800094ec:	30 09       	mov	r9,0
800094ee:	c0 38       	rjmp	800094f4 <__avr32_udiv64+0x258>
800094f0:	30 09       	mov	r9,0
800094f2:	12 98       	mov	r8,r9
800094f4:	10 9a       	mov	r10,r8
800094f6:	12 93       	mov	r3,r9
800094f8:	10 92       	mov	r2,r8
800094fa:	12 9b       	mov	r11,r9
800094fc:	2f dd       	sub	sp,-12
800094fe:	d8 32       	popm	r0-r7,pc

80009500 <__avr32_umod64>:
80009500:	d4 31       	pushm	r0-r7,lr
80009502:	1a 97       	mov	r7,sp
80009504:	20 3d       	sub	sp,12
80009506:	10 9c       	mov	r12,r8
80009508:	12 95       	mov	r5,r9
8000950a:	14 9e       	mov	lr,r10
8000950c:	16 91       	mov	r1,r11
8000950e:	16 96       	mov	r6,r11
80009510:	58 09       	cp.w	r9,0
80009512:	e0 81 00 81 	brne	80009614 <__avr32_umod64+0x114>
80009516:	16 38       	cp.w	r8,r11
80009518:	e0 88 00 12 	brls	8000953c <__avr32_umod64+0x3c>
8000951c:	f0 08 12 00 	clz	r8,r8
80009520:	c4 e0       	breq	800095bc <__avr32_umod64+0xbc>
80009522:	f6 08 09 46 	lsl	r6,r11,r8
80009526:	f8 08 09 4c 	lsl	r12,r12,r8
8000952a:	f0 0b 11 20 	rsub	r11,r8,32
8000952e:	f4 08 09 4e 	lsl	lr,r10,r8
80009532:	f4 0b 0a 4b 	lsr	r11,r10,r11
80009536:	f7 e6 10 06 	or	r6,r11,r6
8000953a:	c4 18       	rjmp	800095bc <__avr32_umod64+0xbc>
8000953c:	58 08       	cp.w	r8,0
8000953e:	c0 51       	brne	80009548 <__avr32_umod64+0x48>
80009540:	30 19       	mov	r9,1
80009542:	f2 08 0d 08 	divu	r8,r9,r8
80009546:	10 9c       	mov	r12,r8
80009548:	f8 08 12 00 	clz	r8,r12
8000954c:	c0 31       	brne	80009552 <__avr32_umod64+0x52>
8000954e:	18 16       	sub	r6,r12
80009550:	c3 68       	rjmp	800095bc <__avr32_umod64+0xbc>
80009552:	f0 03 11 20 	rsub	r3,r8,32
80009556:	f4 03 0a 4b 	lsr	r11,r10,r3
8000955a:	f8 08 09 4c 	lsl	r12,r12,r8
8000955e:	ec 08 09 49 	lsl	r9,r6,r8
80009562:	ec 03 0a 43 	lsr	r3,r6,r3
80009566:	f7 e9 10 09 	or	r9,r11,r9
8000956a:	f8 05 16 10 	lsr	r5,r12,0x10
8000956e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009572:	e6 05 0d 02 	divu	r2,r3,r5
80009576:	f2 0e 16 10 	lsr	lr,r9,0x10
8000957a:	ec 02 02 4b 	mul	r11,r6,r2
8000957e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009582:	16 3e       	cp.w	lr,r11
80009584:	c0 72       	brcc	80009592 <__avr32_umod64+0x92>
80009586:	18 0e       	add	lr,r12
80009588:	18 3e       	cp.w	lr,r12
8000958a:	c0 43       	brcs	80009592 <__avr32_umod64+0x92>
8000958c:	16 3e       	cp.w	lr,r11
8000958e:	fd dc e3 0e 	addcs	lr,lr,r12
80009592:	fc 0b 01 03 	sub	r3,lr,r11
80009596:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000959a:	e6 05 0d 02 	divu	r2,r3,r5
8000959e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800095a2:	a5 36       	mul	r6,r2
800095a4:	0c 39       	cp.w	r9,r6
800095a6:	c0 72       	brcc	800095b4 <__avr32_umod64+0xb4>
800095a8:	18 09       	add	r9,r12
800095aa:	18 39       	cp.w	r9,r12
800095ac:	c0 43       	brcs	800095b4 <__avr32_umod64+0xb4>
800095ae:	0c 39       	cp.w	r9,r6
800095b0:	f3 dc e3 09 	addcs	r9,r9,r12
800095b4:	f2 06 01 06 	sub	r6,r9,r6
800095b8:	f4 08 09 4e 	lsl	lr,r10,r8
800095bc:	f8 0a 16 10 	lsr	r10,r12,0x10
800095c0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800095c4:	ec 0a 0d 02 	divu	r2,r6,r10
800095c8:	fc 09 16 10 	lsr	r9,lr,0x10
800095cc:	ea 02 02 4b 	mul	r11,r5,r2
800095d0:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800095d4:	16 39       	cp.w	r9,r11
800095d6:	c0 72       	brcc	800095e4 <__avr32_umod64+0xe4>
800095d8:	18 09       	add	r9,r12
800095da:	18 39       	cp.w	r9,r12
800095dc:	c0 43       	brcs	800095e4 <__avr32_umod64+0xe4>
800095de:	16 39       	cp.w	r9,r11
800095e0:	f3 dc e3 09 	addcs	r9,r9,r12
800095e4:	f2 0b 01 0b 	sub	r11,r9,r11
800095e8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800095ec:	f6 0a 0d 0a 	divu	r10,r11,r10
800095f0:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800095f4:	ea 0a 02 4a 	mul	r10,r5,r10
800095f8:	14 3e       	cp.w	lr,r10
800095fa:	c0 72       	brcc	80009608 <__avr32_umod64+0x108>
800095fc:	18 0e       	add	lr,r12
800095fe:	18 3e       	cp.w	lr,r12
80009600:	c0 43       	brcs	80009608 <__avr32_umod64+0x108>
80009602:	14 3e       	cp.w	lr,r10
80009604:	fd dc e3 0e 	addcs	lr,lr,r12
80009608:	fc 0a 01 0a 	sub	r10,lr,r10
8000960c:	30 0b       	mov	r11,0
8000960e:	f4 08 0a 4a 	lsr	r10,r10,r8
80009612:	c7 b8       	rjmp	80009708 <__avr32_umod64+0x208>
80009614:	16 39       	cp.w	r9,r11
80009616:	e0 8b 00 79 	brhi	80009708 <__avr32_umod64+0x208>
8000961a:	f2 09 12 00 	clz	r9,r9
8000961e:	c1 21       	brne	80009642 <__avr32_umod64+0x142>
80009620:	10 3a       	cp.w	r10,r8
80009622:	5f 2b       	srhs	r11
80009624:	0a 31       	cp.w	r1,r5
80009626:	5f ba       	srhi	r10
80009628:	f7 ea 10 0a 	or	r10,r11,r10
8000962c:	f2 0a 18 00 	cp.b	r10,r9
80009630:	c0 60       	breq	8000963c <__avr32_umod64+0x13c>
80009632:	fc 08 01 0c 	sub	r12,lr,r8
80009636:	e2 05 01 46 	sbc	r6,r1,r5
8000963a:	18 9e       	mov	lr,r12
8000963c:	0c 9b       	mov	r11,r6
8000963e:	1c 9a       	mov	r10,lr
80009640:	c6 48       	rjmp	80009708 <__avr32_umod64+0x208>
80009642:	ea 09 09 4c 	lsl	r12,r5,r9
80009646:	f2 06 11 20 	rsub	r6,r9,32
8000964a:	f6 09 09 4b 	lsl	r11,r11,r9
8000964e:	f0 09 09 42 	lsl	r2,r8,r9
80009652:	ef 46 ff f4 	st.w	r7[-12],r6
80009656:	f0 06 0a 48 	lsr	r8,r8,r6
8000965a:	18 48       	or	r8,r12
8000965c:	e2 06 0a 4c 	lsr	r12,r1,r6
80009660:	f4 09 09 43 	lsl	r3,r10,r9
80009664:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80009668:	f4 06 0a 4a 	lsr	r10,r10,r6
8000966c:	16 4a       	or	r10,r11
8000966e:	f0 0b 16 10 	lsr	r11,r8,0x10
80009672:	f8 0b 0d 04 	divu	r4,r12,r11
80009676:	f4 0c 16 10 	lsr	r12,r10,0x10
8000967a:	08 91       	mov	r1,r4
8000967c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009680:	e8 0e 02 46 	mul	r6,r4,lr
80009684:	0c 3c       	cp.w	r12,r6
80009686:	c0 a2       	brcc	8000969a <__avr32_umod64+0x19a>
80009688:	20 11       	sub	r1,1
8000968a:	10 0c       	add	r12,r8
8000968c:	10 3c       	cp.w	r12,r8
8000968e:	c0 63       	brcs	8000969a <__avr32_umod64+0x19a>
80009690:	0c 3c       	cp.w	r12,r6
80009692:	f7 b1 03 01 	sublo	r1,1
80009696:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000969a:	0c 1c       	sub	r12,r6
8000969c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800096a0:	f8 0b 0d 04 	divu	r4,r12,r11
800096a4:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800096a8:	08 96       	mov	r6,r4
800096aa:	e8 0e 02 4e 	mul	lr,r4,lr
800096ae:	1c 3b       	cp.w	r11,lr
800096b0:	c0 a2       	brcc	800096c4 <__avr32_umod64+0x1c4>
800096b2:	20 16       	sub	r6,1
800096b4:	10 0b       	add	r11,r8
800096b6:	10 3b       	cp.w	r11,r8
800096b8:	c0 63       	brcs	800096c4 <__avr32_umod64+0x1c4>
800096ba:	1c 3b       	cp.w	r11,lr
800096bc:	f7 b6 03 01 	sublo	r6,1
800096c0:	f7 d8 e3 0b 	addcs	r11,r11,r8
800096c4:	ed e1 11 01 	or	r1,r6,r1<<0x10
800096c8:	1c 1b       	sub	r11,lr
800096ca:	e2 02 06 40 	mulu.d	r0,r1,r2
800096ce:	00 9e       	mov	lr,r0
800096d0:	02 9c       	mov	r12,r1
800096d2:	16 3c       	cp.w	r12,r11
800096d4:	e0 8b 00 08 	brhi	800096e4 <__avr32_umod64+0x1e4>
800096d8:	5f 06       	sreq	r6
800096da:	06 30       	cp.w	r0,r3
800096dc:	5f ba       	srhi	r10
800096de:	ed ea 00 0a 	and	r10,r6,r10
800096e2:	c0 60       	breq	800096ee <__avr32_umod64+0x1ee>
800096e4:	fc 02 01 04 	sub	r4,lr,r2
800096e8:	f8 08 01 4c 	sbc	r12,r12,r8
800096ec:	08 9e       	mov	lr,r4
800096ee:	e6 0e 01 0a 	sub	r10,r3,lr
800096f2:	f6 0c 01 4c 	sbc	r12,r11,r12
800096f6:	ee f1 ff f4 	ld.w	r1,r7[-12]
800096fa:	f8 09 0a 4b 	lsr	r11,r12,r9
800096fe:	f4 09 0a 4a 	lsr	r10,r10,r9
80009702:	f8 01 09 4c 	lsl	r12,r12,r1
80009706:	18 4a       	or	r10,r12
80009708:	2f dd       	sub	sp,-12
8000970a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009800:	c0 08       	rjmp	80009800 <_evba>
	...

80009804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009804:	c0 08       	rjmp	80009804 <_handle_TLB_Multiple_Hit>
	...

80009808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009808:	c0 08       	rjmp	80009808 <_handle_Bus_Error_Data_Fetch>
	...

8000980c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000980c:	c0 08       	rjmp	8000980c <_handle_Bus_Error_Instruction_Fetch>
	...

80009810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009810:	c0 08       	rjmp	80009810 <_handle_NMI>
	...

80009814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009814:	c0 08       	rjmp	80009814 <_handle_Instruction_Address>
	...

80009818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009818:	c0 08       	rjmp	80009818 <_handle_ITLB_Protection>
	...

8000981c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000981c:	c0 08       	rjmp	8000981c <_handle_Breakpoint>
	...

80009820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009820:	c0 08       	rjmp	80009820 <_handle_Illegal_Opcode>
	...

80009824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009824:	c0 08       	rjmp	80009824 <_handle_Unimplemented_Instruction>
	...

80009828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009828:	c0 08       	rjmp	80009828 <_handle_Privilege_Violation>
	...

8000982c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000982c:	c0 08       	rjmp	8000982c <_handle_Floating_Point>
	...

80009830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009830:	c0 08       	rjmp	80009830 <_handle_Coprocessor_Absent>
	...

80009834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009834:	c0 08       	rjmp	80009834 <_handle_Data_Address_Read>
	...

80009838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009838:	c0 08       	rjmp	80009838 <_handle_Data_Address_Write>
	...

8000983c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000983c:	c0 08       	rjmp	8000983c <_handle_DTLB_Protection_Read>
	...

80009840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009840:	c0 08       	rjmp	80009840 <_handle_DTLB_Protection_Write>
	...

80009844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009844:	c0 08       	rjmp	80009844 <_handle_DTLB_Modified>
	...

80009850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009850:	c0 08       	rjmp	80009850 <_handle_ITLB_Miss>
	...

80009860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009860:	c0 08       	rjmp	80009860 <_handle_DTLB_Miss_Read>
	...

80009870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009870:	c0 08       	rjmp	80009870 <_handle_DTLB_Miss_Write>
	...

80009900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009900:	c0 08       	rjmp	80009900 <_handle_Supervisor_Call>
80009902:	d7 03       	nop

80009904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009904:	30 0c       	mov	r12,0
80009906:	fe b0 c7 55 	rcall	800027b0 <_get_interrupt_handler>
8000990a:	58 0c       	cp.w	r12,0
8000990c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009910:	d6 03       	rete

80009912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009912:	30 1c       	mov	r12,1
80009914:	fe b0 c7 4e 	rcall	800027b0 <_get_interrupt_handler>
80009918:	58 0c       	cp.w	r12,0
8000991a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000991e:	d6 03       	rete

80009920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009920:	30 2c       	mov	r12,2
80009922:	fe b0 c7 47 	rcall	800027b0 <_get_interrupt_handler>
80009926:	58 0c       	cp.w	r12,0
80009928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000992c:	d6 03       	rete

8000992e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000992e:	30 3c       	mov	r12,3
80009930:	fe b0 c7 40 	rcall	800027b0 <_get_interrupt_handler>
80009934:	58 0c       	cp.w	r12,0
80009936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000993a:	d6 03       	rete
8000993c:	d7 03       	nop
8000993e:	d7 03       	nop
80009940:	d7 03       	nop
80009942:	d7 03       	nop
80009944:	d7 03       	nop
80009946:	d7 03       	nop
80009948:	d7 03       	nop
8000994a:	d7 03       	nop
8000994c:	d7 03       	nop
8000994e:	d7 03       	nop
80009950:	d7 03       	nop
80009952:	d7 03       	nop
80009954:	d7 03       	nop
80009956:	d7 03       	nop
80009958:	d7 03       	nop
8000995a:	d7 03       	nop
8000995c:	d7 03       	nop
8000995e:	d7 03       	nop
80009960:	d7 03       	nop
80009962:	d7 03       	nop
80009964:	d7 03       	nop
80009966:	d7 03       	nop
80009968:	d7 03       	nop
8000996a:	d7 03       	nop
8000996c:	d7 03       	nop
8000996e:	d7 03       	nop
80009970:	d7 03       	nop
80009972:	d7 03       	nop
80009974:	d7 03       	nop
80009976:	d7 03       	nop
80009978:	d7 03       	nop
8000997a:	d7 03       	nop
8000997c:	d7 03       	nop
8000997e:	d7 03       	nop
80009980:	d7 03       	nop
80009982:	d7 03       	nop
80009984:	d7 03       	nop
80009986:	d7 03       	nop
80009988:	d7 03       	nop
8000998a:	d7 03       	nop
8000998c:	d7 03       	nop
8000998e:	d7 03       	nop
80009990:	d7 03       	nop
80009992:	d7 03       	nop
80009994:	d7 03       	nop
80009996:	d7 03       	nop
80009998:	d7 03       	nop
8000999a:	d7 03       	nop
8000999c:	d7 03       	nop
8000999e:	d7 03       	nop
800099a0:	d7 03       	nop
800099a2:	d7 03       	nop
800099a4:	d7 03       	nop
800099a6:	d7 03       	nop
800099a8:	d7 03       	nop
800099aa:	d7 03       	nop
800099ac:	d7 03       	nop
800099ae:	d7 03       	nop
800099b0:	d7 03       	nop
800099b2:	d7 03       	nop
800099b4:	d7 03       	nop
800099b6:	d7 03       	nop
800099b8:	d7 03       	nop
800099ba:	d7 03       	nop
800099bc:	d7 03       	nop
800099be:	d7 03       	nop
800099c0:	d7 03       	nop
800099c2:	d7 03       	nop
800099c4:	d7 03       	nop
800099c6:	d7 03       	nop
800099c8:	d7 03       	nop
800099ca:	d7 03       	nop
800099cc:	d7 03       	nop
800099ce:	d7 03       	nop
800099d0:	d7 03       	nop
800099d2:	d7 03       	nop
800099d4:	d7 03       	nop
800099d6:	d7 03       	nop
800099d8:	d7 03       	nop
800099da:	d7 03       	nop
800099dc:	d7 03       	nop
800099de:	d7 03       	nop
800099e0:	d7 03       	nop
800099e2:	d7 03       	nop
800099e4:	d7 03       	nop
800099e6:	d7 03       	nop
800099e8:	d7 03       	nop
800099ea:	d7 03       	nop
800099ec:	d7 03       	nop
800099ee:	d7 03       	nop
800099f0:	d7 03       	nop
800099f2:	d7 03       	nop
800099f4:	d7 03       	nop
800099f6:	d7 03       	nop
800099f8:	d7 03       	nop
800099fa:	d7 03       	nop
800099fc:	d7 03       	nop
800099fe:	d7 03       	nop
