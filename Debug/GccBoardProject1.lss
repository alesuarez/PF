
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000073dc  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009400  80009400  00009800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000b38  80009600  80009600  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000524  00000008  8000a138  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000052c  8000a65c  0000ad2c  2**0
                  ALLOC
  8 .bss          00000220  00000530  00000530  00000000  2**2
                  ALLOC
  9 .heap         000028b0  00000750  00000750  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d90  00000000  00000000  0000ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001aa3  00000000  00000000  0000baf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002834b  00000000  00000000  0000d593  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000581b  00000000  00000000  000358de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ec04  00000000  00000000  0003b0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002034  00000000  00000000  00049d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005564  00000000  00000000  0004bd34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a646  00000000  00000000  00051298  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00797142  00000000  00000000  0005b8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000ee0  00000000  00000000  007f2a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f2 b0 	sub	pc,pc,-3408

Disassembly of section .text:

80002004 <twim_master_interrupt_handler>:
80002004:	4a e8       	lddpc	r8,800020bc <twim_master_interrupt_handler+0xb8>
80002006:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002008:	70 79       	ld.w	r9,r8[0x1c]
8000200a:	4a ea       	lddpc	r10,800020c0 <twim_master_interrupt_handler+0xbc>
8000200c:	74 0a       	ld.w	r10,r10[0x0]
8000200e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002012:	12 9a       	mov	r10,r9
80002014:	e2 1a 07 00 	andl	r10,0x700,COH
80002018:	c1 40       	breq	80002040 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201a:	e2 19 03 00 	andl	r9,0x300,COH
8000201e:	f9 b9 01 fc 	movne	r9,-4
80002022:	f9 b9 00 fe 	moveq	r9,-2
80002026:	4a 8a       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xc0>
80002028:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202a:	70 3a       	ld.w	r10,r8[0xc]
8000202c:	30 09       	mov	r9,0
8000202e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002032:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002034:	3f fa       	mov	r10,-1
80002036:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002038:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203a:	4a 48       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000203c:	b0 89       	st.b	r8[0x0],r9
8000203e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002040:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002044:	c1 30       	breq	8000206a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002046:	4a 2a       	lddpc	r10,800020cc <twim_master_interrupt_handler+0xc8>
80002048:	70 5b       	ld.w	r11,r8[0x14]
8000204a:	74 09       	ld.w	r9,r10[0x0]
8000204c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000204e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002050:	4a 09       	lddpc	r9,800020d0 <twim_master_interrupt_handler+0xcc>
80002052:	72 0a       	ld.w	r10,r9[0x0]
80002054:	20 1a       	sub	r10,1
80002056:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80002058:	72 09       	ld.w	r9,r9[0x0]
8000205a:	58 09       	cp.w	r9,0
8000205c:	c2 f1       	brne	800020ba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000205e:	30 19       	mov	r9,1
80002060:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002062:	30 09       	mov	r9,0
80002064:	49 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002066:	b0 89       	st.b	r8[0x0],r9
80002068:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206a:	e2 19 00 02 	andl	r9,0x2,COH
8000206e:	c2 60       	breq	800020ba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002070:	49 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
80002072:	72 09       	ld.w	r9,r9[0x0]
80002074:	58 09       	cp.w	r9,0
80002076:	c0 71       	brne	80002084 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80002078:	30 29       	mov	r9,2
8000207a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000207c:	30 09       	mov	r9,0
8000207e:	49 38       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
80002080:	b0 89       	st.b	r8[0x0],r9
80002082:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002084:	49 5a       	lddpc	r10,800020d8 <twim_master_interrupt_handler+0xd4>
80002086:	74 09       	ld.w	r9,r10[0x0]
80002088:	13 3b       	ld.ub	r11,r9++
8000208a:	91 6b       	st.w	r8[0x18],r11
8000208c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
8000208e:	49 28       	lddpc	r8,800020d4 <twim_master_interrupt_handler+0xd0>
80002090:	70 09       	ld.w	r9,r8[0x0]
80002092:	20 19       	sub	r9,1
80002094:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80002096:	70 08       	ld.w	r8,r8[0x0]
80002098:	58 08       	cp.w	r8,0
8000209a:	c1 01       	brne	800020ba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
8000209c:	48 b8       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
8000209e:	11 88       	ld.ub	r8,r8[0x0]
800020a0:	58 08       	cp.w	r8,0
800020a2:	c0 c0       	breq	800020ba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a4:	30 09       	mov	r9,0
800020a6:	48 98       	lddpc	r8,800020c8 <twim_master_interrupt_handler+0xc4>
800020a8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020aa:	48 d8       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd8>
800020ac:	70 08       	ld.w	r8,r8[0x0]
800020ae:	70 3a       	ld.w	r10,r8[0xc]
800020b0:	48 99       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xd0>
800020b2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b4:	70 29       	ld.w	r9,r8[0x8]
800020b6:	48 98       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd4>
800020b8:	91 09       	st.w	r8[0x0],r9
800020ba:	d6 03       	rete
800020bc:	00 00       	add	r0,r0
800020be:	05 30       	ld.ub	r0,r2++
800020c0:	00 00       	add	r0,r0
800020c2:	05 44       	ld.w	r4,--r2
800020c4:	00 00       	add	r0,r0
800020c6:	05 3c       	ld.ub	r12,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 48       	ld.w	r8,--r2
800020cc:	00 00       	add	r0,r0
800020ce:	05 34       	ld.ub	r4,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 38       	ld.ub	r8,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 50       	ld.sh	r0,--r2
800020d8:	00 00       	add	r0,r0
800020da:	05 40       	ld.w	r0,--r2
800020dc:	00 00       	add	r0,r0
800020de:	05 4c       	ld.w	r12,--r2

800020e0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e4:	f4 0b 0d 0a 	divu	r10,r10,r11
800020e8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020ec:	e0 48 00 ff 	cp.w	r8,255
800020f0:	e0 8b 00 04 	brhi	800020f8 <twim_set_speed+0x18>
800020f4:	30 09       	mov	r9,0
800020f6:	c1 a8       	rjmp	8000212a <twim_set_speed+0x4a>
800020f8:	30 09       	mov	r9,0
800020fa:	30 77       	mov	r7,7
800020fc:	30 0e       	mov	lr,0
		// increase clock divider
		cwgr_exp++;
800020fe:	2f f9       	sub	r9,-1
80002100:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002102:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002104:	e0 48 00 ff 	cp.w	r8,255
80002108:	5f bb       	srhi	r11
8000210a:	ee 09 18 00 	cp.b	r9,r7
8000210e:	5f 8a       	srls	r10
80002110:	f7 ea 00 0a 	and	r10,r11,r10
80002114:	fc 0a 18 00 	cp.b	r10,lr
80002118:	cf 31       	brne	800020fe <twim_set_speed+0x1e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000211a:	30 7a       	mov	r10,7
8000211c:	f4 09 18 00 	cp.b	r9,r10
80002120:	e0 88 00 05 	brls	8000212a <twim_set_speed+0x4a>
80002124:	3f 8c       	mov	r12,-8
80002126:	e3 cd 80 80 	ldm	sp++,r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000212a:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000212e:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002132:	14 18       	sub	r8,r10
80002134:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80002138:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000213c:	99 19       	st.w	r12[0x4],r9
8000213e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002142:	d7 03       	nop

80002144 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002144:	48 38       	lddpc	r8,80002150 <twim_status+0xc>
80002146:	70 08       	ld.w	r8,r8[0x0]
80002148:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000214a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000214e:	5e fc       	retal	r12
80002150:	00 00       	add	r0,r0
80002152:	05 30       	ld.ub	r0,r2++

80002154 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002154:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002158:	e6 18 00 01 	andh	r8,0x1,COH
8000215c:	c0 21       	brne	80002160 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000215e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002160:	3f f8       	mov	r8,-1
80002162:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002164:	99 b8       	st.w	r12[0x2c],r8
}
80002166:	5e fc       	retal	r12

80002168 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002168:	eb cd 40 fc 	pushm	r2-r7,lr
8000216c:	16 94       	mov	r4,r11
8000216e:	14 97       	mov	r7,r10
80002170:	12 93       	mov	r3,r9
80002172:	10 92       	mov	r2,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002174:	30 15       	mov	r5,1
80002176:	99 05       	st.w	r12[0x0],r5
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002178:	e0 68 00 80 	mov	r8,128
8000217c:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000217e:	30 28       	mov	r8,2
80002180:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002182:	49 d6       	lddpc	r6,800021f4 <twim_write+0x8c>
80002184:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002186:	f0 1f 00 1d 	mcall	800021f8 <twim_write+0x90>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000218a:	49 d8       	lddpc	r8,800021fc <twim_write+0x94>
8000218c:	91 04       	st.w	r8[0x0],r4
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000218e:	49 d8       	lddpc	r8,80002200 <twim_write+0x98>
80002190:	91 07       	st.w	r8[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002192:	30 09       	mov	r9,0
80002194:	49 c8       	lddpc	r8,80002204 <twim_write+0x9c>
80002196:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002198:	49 c9       	lddpc	r9,80002208 <twim_write+0xa0>
8000219a:	30 08       	mov	r8,0
8000219c:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000219e:	6c 08       	ld.w	r8,r6[0x0]
800021a0:	b1 67       	lsl	r7,0x10
800021a2:	e8 17 e0 00 	orl	r7,0xe000
800021a6:	ef e3 10 13 	or	r3,r7,r3<<0x1
800021aa:	e7 e2 10 b2 	or	r2,r3,r2<<0xb
800021ae:	91 32       	st.w	r8[0xc],r2
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021b0:	49 7a       	lddpc	r10,8000220c <twim_write+0xa4>
800021b2:	e0 6b 03 02 	mov	r11,770
800021b6:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021b8:	74 0a       	ld.w	r10,r10[0x0]
800021ba:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021bc:	91 05       	st.w	r8[0x0],r5
	// Enable all interrupts
	cpu_irq_enable ();
800021be:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021c0:	72 08       	ld.w	r8,r9[0x0]
800021c2:	58 08       	cp.w	r8,0
800021c4:	c0 80       	breq	800021d4 <twim_write+0x6c>
800021c6:	c0 b8       	rjmp	800021dc <twim_write+0x74>
		cpu_relax();
800021c8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021cc:	6e 08       	ld.w	r8,r7[0x0]
800021ce:	58 08       	cp.w	r8,0
800021d0:	c0 30       	breq	800021d6 <twim_write+0x6e>
800021d2:	c0 58       	rjmp	800021dc <twim_write+0x74>
800021d4:	48 d7       	lddpc	r7,80002208 <twim_write+0xa0>
800021d6:	f0 1f 00 0f 	mcall	80002210 <twim_write+0xa8>
800021da:	cf 70       	breq	800021c8 <twim_write+0x60>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021dc:	48 b8       	lddpc	r8,80002208 <twim_write+0xa0>
800021de:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e0:	5b c8       	cp.w	r8,-4
800021e2:	c0 70       	breq	800021f0 <twim_write+0x88>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021e4:	48 98       	lddpc	r8,80002208 <twim_write+0xa0>
800021e6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021e8:	5b e8       	cp.w	r8,-2
800021ea:	c0 30       	breq	800021f0 <twim_write+0x88>
800021ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021f0:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800021f4:	00 00       	add	r0,r0
800021f6:	05 30       	ld.ub	r0,r2++
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 54       	sub	r4,21
800021fc:	00 00       	add	r0,r0
800021fe:	05 40       	ld.w	r0,--r2
80002200:	00 00       	add	r0,r0
80002202:	05 50       	ld.sh	r0,--r2
80002204:	00 00       	add	r0,r0
80002206:	05 48       	ld.w	r8,--r2
80002208:	00 00       	add	r0,r0
8000220a:	05 3c       	ld.ub	r12,r2++
8000220c:	00 00       	add	r0,r0
8000220e:	05 44       	ld.w	r4,--r2
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 44       	sub	r4,20

80002214 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002214:	d4 01       	pushm	lr
80002216:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002218:	30 08       	mov	r8,0
8000221a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000221c:	30 08       	mov	r8,0
8000221e:	16 99       	mov	r9,r11
80002220:	10 9a       	mov	r10,r8
80002222:	1a 9b       	mov	r11,sp
80002224:	f0 1f 00 02 	mcall	8000222c <twim_probe+0x18>
}
80002228:	2f fd       	sub	sp,-4
8000222a:	d8 02       	popm	pc
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 68       	sub	r8,22

80002230 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	18 96       	mov	r6,r12
80002236:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002238:	30 28       	mov	r8,2
8000223a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000223c:	4b 78       	lddpc	r8,80002318 <twim_read_packet+0xe8>
8000223e:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002240:	f0 1f 00 37 	mcall	8000231c <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002244:	6e 29       	ld.w	r9,r7[0x8]
80002246:	4b 78       	lddpc	r8,80002320 <twim_read_packet+0xf0>
80002248:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000224a:	6e 39       	ld.w	r9,r7[0xc]
8000224c:	4b 68       	lddpc	r8,80002324 <twim_read_packet+0xf4>
8000224e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80002250:	30 08       	mov	r8,0
80002252:	4b 6a       	lddpc	r10,80002328 <twim_read_packet+0xf8>
80002254:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002256:	30 0b       	mov	r11,0
80002258:	4b 5a       	lddpc	r10,8000232c <twim_read_packet+0xfc>
8000225a:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
8000225c:	0f fa       	ld.ub	r10,r7[0x7]
8000225e:	f0 0a 18 00 	cp.b	r10,r8
80002262:	c2 50       	breq	800022ac <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002264:	4a d8       	lddpc	r8,80002318 <twim_read_packet+0xe8>
80002266:	70 08       	ld.w	r8,r8[0x0]
80002268:	30 19       	mov	r9,1
8000226a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226c:	e0 69 00 80 	mov	r9,128
80002270:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002272:	30 29       	mov	r9,2
80002274:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002276:	ee ca ff fc 	sub	r10,r7,-4
8000227a:	4a e9       	lddpc	r9,80002330 <twim_read_packet+0x100>
8000227c:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000227e:	0f f9       	ld.ub	r9,r7[0x7]
80002280:	4a da       	lddpc	r10,80002334 <twim_read_packet+0x104>
80002282:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002284:	e0 6b 07 03 	mov	r11,1795
80002288:	4a ca       	lddpc	r10,80002338 <twim_read_packet+0x108>
8000228a:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000228c:	6e 0a       	ld.w	r10,r7[0x0]
8000228e:	a1 7a       	lsl	r10,0x1
80002290:	e8 1a a0 00 	orl	r10,0xa000
80002294:	f5 e9 11 09 	or	r9,r10,r9<<0x10
80002298:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000229a:	6e 0a       	ld.w	r10,r7[0x0]
8000229c:	6e 39       	ld.w	r9,r7[0xc]
8000229e:	b1 69       	lsl	r9,0x10
800022a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022a4:	e8 19 e0 01 	orl	r9,0xe001
800022a8:	91 49       	st.w	r8[0x10],r9
800022aa:	c1 18       	rjmp	800022cc <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800022ac:	30 0a       	mov	r10,0
800022ae:	4a 28       	lddpc	r8,80002334 <twim_read_packet+0x104>
800022b0:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800022b2:	e0 6a 07 01 	mov	r10,1793
800022b6:	4a 18       	lddpc	r8,80002338 <twim_read_packet+0x108>
800022b8:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800022ba:	49 88       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022bc:	70 08       	ld.w	r8,r8[0x0]
800022be:	6e 0a       	ld.w	r10,r7[0x0]
800022c0:	b1 69       	lsl	r9,0x10
800022c2:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800022c6:	e8 19 e0 01 	orl	r9,0xe001
800022ca:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800022cc:	49 38       	lddpc	r8,80002318 <twim_read_packet+0xe8>
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	49 a9       	lddpc	r9,80002338 <twim_read_packet+0x108>
800022d2:	72 09       	ld.w	r9,r9[0x0]
800022d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800022d6:	30 18       	mov	r8,1
800022d8:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
800022da:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022dc:	49 48       	lddpc	r8,8000232c <twim_read_packet+0xfc>
800022de:	70 08       	ld.w	r8,r8[0x0]
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 80       	breq	800022f2 <twim_read_packet+0xc2>
800022e4:	c0 b8       	rjmp	800022fa <twim_read_packet+0xca>
		cpu_relax();
800022e6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800022ea:	6e 08       	ld.w	r8,r7[0x0]
800022ec:	58 08       	cp.w	r8,0
800022ee:	c0 30       	breq	800022f4 <twim_read_packet+0xc4>
800022f0:	c0 58       	rjmp	800022fa <twim_read_packet+0xca>
800022f2:	48 f7       	lddpc	r7,8000232c <twim_read_packet+0xfc>
800022f4:	f0 1f 00 12 	mcall	8000233c <twim_read_packet+0x10c>
800022f8:	cf 70       	breq	800022e6 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800022fa:	30 28       	mov	r8,2
800022fc:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022fe:	48 c8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002300:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002302:	5b c8       	cp.w	r8,-4
80002304:	c0 70       	breq	80002312 <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002306:	48 a8       	lddpc	r8,8000232c <twim_read_packet+0xfc>
80002308:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000230a:	5b e8       	cp.w	r8,-2
8000230c:	c0 30       	breq	80002312 <twim_read_packet+0xe2>
8000230e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002312:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002316:	00 00       	add	r0,r0
80002318:	00 00       	add	r0,r0
8000231a:	05 30       	ld.ub	r0,r2++
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 54       	sub	r4,21
80002320:	00 00       	add	r0,r0
80002322:	05 34       	ld.ub	r4,r2++
80002324:	00 00       	add	r0,r0
80002326:	05 38       	ld.ub	r8,r2++
80002328:	00 00       	add	r0,r0
8000232a:	05 48       	ld.w	r8,--r2
8000232c:	00 00       	add	r0,r0
8000232e:	05 3c       	ld.ub	r12,r2++
80002330:	00 00       	add	r0,r0
80002332:	05 40       	ld.w	r0,--r2
80002334:	00 00       	add	r0,r0
80002336:	05 50       	ld.sh	r0,--r2
80002338:	00 00       	add	r0,r0
8000233a:	05 44       	ld.w	r4,--r2
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 44       	sub	r4,20

80002340 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002340:	eb cd 40 e0 	pushm	r5-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002348:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000234c:	30 0a       	mov	r10,0
8000234e:	4a 69       	lddpc	r9,800023e4 <twim_master_init+0xa4>
80002350:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002352:	e6 18 00 01 	andh	r8,0x1,COH
80002356:	c0 b1       	brne	8000236c <twim_master_init+0x2c>
		cpu_irq_disable ();
80002358:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000235a:	3f f8       	mov	r8,-1
8000235c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000235e:	30 18       	mov	r8,1
80002360:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002362:	e0 68 00 80 	mov	r8,128
80002366:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002368:	d5 03       	csrf	0x10
8000236a:	c0 88       	rjmp	8000237a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000236c:	3f f8       	mov	r8,-1
8000236e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002370:	30 18       	mov	r8,1
80002372:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002374:	e0 68 00 80 	mov	r8,128
80002378:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
8000237a:	3f f8       	mov	r8,-1
8000237c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000237e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002382:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002384:	30 1a       	mov	r10,1
80002386:	e0 6b 02 80 	mov	r11,640
8000238a:	49 8c       	lddpc	r12,800023e8 <twim_master_init+0xa8>
8000238c:	f0 1f 00 18 	mcall	800023ec <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002390:	e6 16 00 01 	andh	r6,0x1,COH
80002394:	c0 21       	brne	80002398 <twim_master_init+0x58>
      cpu_irq_enable();
80002396:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002398:	eb 39 00 0c 	ld.ub	r9,r5[12]
8000239c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000239e:	f0 09 18 00 	cp.b	r9,r8
800023a2:	f9 b8 01 10 	movne	r8,16
800023a6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800023aa:	f9 b8 01 ff 	movne	r8,-1
800023ae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800023b2:	6a 0a       	ld.w	r10,r5[0x0]
800023b4:	6a 1b       	ld.w	r11,r5[0x4]
800023b6:	0e 9c       	mov	r12,r7
800023b8:	f0 1f 00 0e 	mcall	800023f0 <twim_master_init+0xb0>
800023bc:	5b 8c       	cp.w	r12,-8
800023be:	c1 00       	breq	800023de <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800023c0:	6a 2b       	ld.w	r11,r5[0x8]
800023c2:	0e 9c       	mov	r12,r7
800023c4:	f0 1f 00 0c 	mcall	800023f4 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023c8:	48 78       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023cc:	5b c8       	cp.w	r8,-4
800023ce:	c0 70       	breq	800023dc <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800023d0:	48 58       	lddpc	r8,800023e4 <twim_master_init+0xa4>
800023d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800023d4:	5b e8       	cp.w	r8,-2
800023d6:	c0 30       	breq	800023dc <twim_master_init+0x9c>
800023d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800023dc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800023de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	00 00       	add	r0,r0
800023e6:	05 3c       	ld.ub	r12,r2++
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	20 04       	sub	r4,0
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	26 dc       	sub	r12,109
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 e0       	sub	r0,14
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 14       	sub	r4,33

800023f8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800023f8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800023fc:	58 0a       	cp.w	r10,0
800023fe:	c6 30       	breq	800024c4 <eic_init+0xcc>
80002400:	30 08       	mov	r8,0
80002402:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002404:	30 19       	mov	r9,1
80002406:	30 1e       	mov	lr,1
80002408:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000240c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002410:	11 96       	ld.ub	r6,r8[0x1]
80002412:	f2 06 18 00 	cp.b	r6,r9
80002416:	c0 71       	brne	80002424 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002418:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000241a:	11 86       	ld.ub	r6,r8[0x0]
8000241c:	fc 06 09 46 	lsl	r6,lr,r6
80002420:	0a 46       	or	r6,r5
80002422:	c0 78       	rjmp	80002430 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002424:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002426:	11 86       	ld.ub	r6,r8[0x0]
80002428:	fc 06 09 46 	lsl	r6,lr,r6
8000242c:	5c d6       	com	r6
8000242e:	0a 66       	and	r6,r5
80002430:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002432:	11 a6       	ld.ub	r6,r8[0x2]
80002434:	f2 06 18 00 	cp.b	r6,r9
80002438:	c0 71       	brne	80002446 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
8000243a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000243c:	11 86       	ld.ub	r6,r8[0x0]
8000243e:	fc 06 09 46 	lsl	r6,lr,r6
80002442:	0a 46       	or	r6,r5
80002444:	c0 78       	rjmp	80002452 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002446:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002448:	11 86       	ld.ub	r6,r8[0x0]
8000244a:	fc 06 09 46 	lsl	r6,lr,r6
8000244e:	5c d6       	com	r6
80002450:	0a 66       	and	r6,r5
80002452:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002454:	11 b6       	ld.ub	r6,r8[0x3]
80002456:	f2 06 18 00 	cp.b	r6,r9
8000245a:	c0 71       	brne	80002468 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000245c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000245e:	11 86       	ld.ub	r6,r8[0x0]
80002460:	fc 06 09 46 	lsl	r6,lr,r6
80002464:	0a 46       	or	r6,r5
80002466:	c0 78       	rjmp	80002474 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002468:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000246a:	11 86       	ld.ub	r6,r8[0x0]
8000246c:	fc 06 09 46 	lsl	r6,lr,r6
80002470:	5c d6       	com	r6
80002472:	0a 66       	and	r6,r5
80002474:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002476:	11 c6       	ld.ub	r6,r8[0x4]
80002478:	f2 06 18 00 	cp.b	r6,r9
8000247c:	c0 71       	brne	8000248a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000247e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002480:	11 86       	ld.ub	r6,r8[0x0]
80002482:	fc 06 09 46 	lsl	r6,lr,r6
80002486:	0a 46       	or	r6,r5
80002488:	c0 78       	rjmp	80002496 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000248a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000248c:	11 86       	ld.ub	r6,r8[0x0]
8000248e:	fc 06 09 46 	lsl	r6,lr,r6
80002492:	5c d6       	com	r6
80002494:	0a 66       	and	r6,r5
80002496:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002498:	11 d6       	ld.ub	r6,r8[0x5]
8000249a:	f2 06 18 00 	cp.b	r6,r9
8000249e:	c0 71       	brne	800024ac <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
800024a0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024a2:	11 88       	ld.ub	r8,r8[0x0]
800024a4:	fc 08 09 48 	lsl	r8,lr,r8
800024a8:	0c 48       	or	r8,r6
800024aa:	c0 78       	rjmp	800024b8 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024ac:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024ae:	11 88       	ld.ub	r8,r8[0x0]
800024b0:	fc 08 09 48 	lsl	r8,lr,r8
800024b4:	5c d8       	com	r8
800024b6:	0c 68       	and	r8,r6
800024b8:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024ba:	2f f7       	sub	r7,-1
800024bc:	0e 98       	mov	r8,r7
800024be:	0e 3a       	cp.w	r10,r7
800024c0:	fe 9b ff a4 	brhi	80002408 <eic_init+0x10>
800024c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800024c8 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800024c8:	30 18       	mov	r8,1
800024ca:	f0 0b 09 48 	lsl	r8,r8,r11
800024ce:	99 c8       	st.w	r12[0x30],r8
}
800024d0:	5e fc       	retal	r12

800024d2 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800024d2:	30 18       	mov	r8,1
800024d4:	f0 0b 09 48 	lsl	r8,r8,r11
800024d8:	99 08       	st.w	r12[0x0],r8
}
800024da:	5e fc       	retal	r12

800024dc <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024e0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800024e2:	30 19       	mov	r9,1
800024e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800024e8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800024ea:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024ec:	e6 18 00 01 	andh	r8,0x1,COH
800024f0:	c0 21       	brne	800024f4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800024f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800024f4:	5e fc       	retal	r12
800024f6:	d7 03       	nop

800024f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 78       	lsl	r8,0x9
800024fe:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002502:	58 7b       	cp.w	r11,7
80002504:	e0 8b 00 05 	brhi	8000250e <gpio_enable_module_pin+0x16>
80002508:	4a 09       	lddpc	r9,80002588 <gpio_enable_module_pin+0x90>
8000250a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000250e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002510:	30 19       	mov	r9,1
80002512:	f2 0c 09 49 	lsl	r9,r9,r12
80002516:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002518:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000251a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000251c:	c3 18       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000251e:	30 19       	mov	r9,1
80002520:	f2 0c 09 49 	lsl	r9,r9,r12
80002524:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002526:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002528:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000252a:	c2 a8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000252c:	30 19       	mov	r9,1
8000252e:	f2 0c 09 49 	lsl	r9,r9,r12
80002532:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002534:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002536:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002538:	c2 38       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000253a:	30 19       	mov	r9,1
8000253c:	f2 0c 09 49 	lsl	r9,r9,r12
80002540:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002542:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002544:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002546:	c1 c8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002548:	30 19       	mov	r9,1
8000254a:	f2 0c 09 49 	lsl	r9,r9,r12
8000254e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002550:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002552:	91 d9       	st.w	r8[0x34],r9
		break;
80002554:	c1 58       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002556:	30 19       	mov	r9,1
80002558:	f2 0c 09 49 	lsl	r9,r9,r12
8000255c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000255e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002560:	91 d9       	st.w	r8[0x34],r9
		break;
80002562:	c0 e8       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002564:	30 19       	mov	r9,1
80002566:	f2 0c 09 49 	lsl	r9,r9,r12
8000256a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000256c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000256e:	91 d9       	st.w	r8[0x34],r9
		break;
80002570:	c0 78       	rjmp	8000257e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002572:	30 19       	mov	r9,1
80002574:	f2 0c 09 49 	lsl	r9,r9,r12
80002578:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000257a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000257c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000257e:	30 19       	mov	r9,1
80002580:	f2 0c 09 4c 	lsl	r12,r9,r12
80002584:	91 2c       	st.w	r8[0x8],r12
80002586:	5e fd       	retal	0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	96 00       	ld.sh	r0,r11[0x0]

8000258c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000258c:	d4 21       	pushm	r4-r7,lr
8000258e:	18 97       	mov	r7,r12
80002590:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002592:	58 0b       	cp.w	r11,0
80002594:	c0 31       	brne	8000259a <gpio_enable_module+0xe>
80002596:	30 05       	mov	r5,0
80002598:	c0 d8       	rjmp	800025b2 <gpio_enable_module+0x26>
8000259a:	30 06       	mov	r6,0
8000259c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000259e:	6e 1b       	ld.w	r11,r7[0x4]
800025a0:	6e 0c       	ld.w	r12,r7[0x0]
800025a2:	f0 1f 00 06 	mcall	800025b8 <gpio_enable_module+0x2c>
800025a6:	18 45       	or	r5,r12
		gpiomap++;
800025a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800025aa:	2f f6       	sub	r6,-1
800025ac:	0c 34       	cp.w	r4,r6
800025ae:	fe 9b ff f8 	brhi	8000259e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800025b2:	0a 9c       	mov	r12,r5
800025b4:	d8 22       	popm	r4-r7,pc
800025b6:	00 00       	add	r0,r0
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	24 f8       	sub	r8,79

800025bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800025bc:	f8 08 16 05 	lsr	r8,r12,0x5
800025c0:	a9 78       	lsl	r8,0x9
800025c2:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800025c6:	16 99       	mov	r9,r11
800025c8:	e2 19 00 04 	andl	r9,0x4,COH
800025cc:	c0 70       	breq	800025da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800025ce:	30 19       	mov	r9,1
800025d0:	f2 0c 09 49 	lsl	r9,r9,r12
800025d4:	f1 49 00 74 	st.w	r8[116],r9
800025d8:	c0 68       	rjmp	800025e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800025da:	30 19       	mov	r9,1
800025dc:	f2 0c 09 49 	lsl	r9,r9,r12
800025e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800025e4:	16 99       	mov	r9,r11
800025e6:	e2 19 00 80 	andl	r9,0x80,COH
800025ea:	c2 40       	breq	80002632 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800025ec:	16 99       	mov	r9,r11
800025ee:	e2 19 01 80 	andl	r9,0x180,COH
800025f2:	c0 90       	breq	80002604 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800025f4:	30 19       	mov	r9,1
800025f6:	f2 0c 09 49 	lsl	r9,r9,r12
800025fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800025fe:	f1 49 00 b8 	st.w	r8[184],r9
80002602:	c1 88       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002604:	16 99       	mov	r9,r11
80002606:	e2 19 02 80 	andl	r9,0x280,COH
8000260a:	c0 90       	breq	8000261c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000260c:	30 19       	mov	r9,1
8000260e:	f2 0c 09 49 	lsl	r9,r9,r12
80002612:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002616:	f1 49 00 b8 	st.w	r8[184],r9
8000261a:	c0 c8       	rjmp	80002632 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000261c:	16 99       	mov	r9,r11
8000261e:	e2 19 03 80 	andl	r9,0x380,COH
80002622:	c0 80       	breq	80002632 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002624:	30 19       	mov	r9,1
80002626:	f2 0c 09 49 	lsl	r9,r9,r12
8000262a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000262e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002632:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002636:	c1 50       	breq	80002660 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002638:	e2 1b 00 02 	andl	r11,0x2,COH
8000263c:	c0 70       	breq	8000264a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000263e:	30 19       	mov	r9,1
80002640:	f2 0c 09 49 	lsl	r9,r9,r12
80002644:	f1 49 00 54 	st.w	r8[84],r9
80002648:	c0 68       	rjmp	80002654 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000264a:	30 19       	mov	r9,1
8000264c:	f2 0c 09 49 	lsl	r9,r9,r12
80002650:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 49 	lsl	r9,r9,r12
8000265a:	f1 49 00 44 	st.w	r8[68],r9
8000265e:	c0 68       	rjmp	8000266a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002660:	30 19       	mov	r9,1
80002662:	f2 0c 09 49 	lsl	r9,r9,r12
80002666:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000266a:	30 19       	mov	r9,1
8000266c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002670:	91 1c       	st.w	r8[0x4],r12
}
80002672:	5e fc       	retal	r12

80002674 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002674:	f8 08 16 05 	lsr	r8,r12,0x5
80002678:	a9 78       	lsl	r8,0x9
8000267a:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000267e:	30 19       	mov	r9,1
80002680:	f2 0c 09 4c 	lsl	r12,r9,r12
80002684:	f1 4c 00 54 	st.w	r8[84],r12
}
80002688:	5e fc       	retal	r12

8000268a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000268a:	f8 08 16 05 	lsr	r8,r12,0x5
8000268e:	a9 78       	lsl	r8,0x9
80002690:	e0 28 d4 00 	sub	r8,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002694:	30 19       	mov	r9,1
80002696:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000269e:	5e fc       	retal	r12

800026a0 <gpio_toggle_pin>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026a0:	f8 08 16 05 	lsr	r8,r12,0x5
800026a4:	a9 78       	lsl	r8,0x9
800026a6:	e0 28 d4 00 	sub	r8,54272
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800026aa:	30 19       	mov	r9,1
800026ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800026b0:	f1 4c 00 5c 	st.w	r8[92],r12
}
800026b4:	5e fc       	retal	r12

800026b6 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026b6:	f8 08 16 05 	lsr	r8,r12,0x5
800026ba:	a9 78       	lsl	r8,0x9
800026bc:	e0 28 d4 00 	sub	r8,54272
	/* Work around for the erratum - Disable the interrupt, clear it by
	 * writing */
	/* a one to GPIO.IFRC, then enable the interrupt. */

	/* Save interrupt enable register. */
	uint32_t const gpio_ier = gpio_port->ier;
800026c0:	f0 f9 00 90 	ld.w	r9,r8[144]

	/* Disable interrupt. */
	gpio_port->ierc = gpio_ier;
800026c4:	f1 49 00 98 	st.w	r8[152],r9

	/* Clear pin interrupt. */
	gpio_port->ifrc = 1 << (pin & 0x1F);
800026c8:	30 1a       	mov	r10,1
800026ca:	f4 0c 09 4c 	lsl	r12,r10,r12
800026ce:	f1 4c 00 d8 	st.w	r8[216],r12

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
800026d2:	f1 49 00 90 	st.w	r8[144],r9
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
#endif
}
800026d6:	5e fc       	retal	r12

800026d8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800026d8:	c0 08       	rjmp	800026d8 <_unhandled_interrupt>
800026da:	d7 03       	nop

800026dc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800026dc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800026e0:	49 99       	lddpc	r9,80002744 <INTC_register_interrupt+0x68>
800026e2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800026e6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800026ea:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800026ec:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800026f0:	58 0a       	cp.w	r10,0
800026f2:	c0 91       	brne	80002704 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800026f4:	49 59       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
800026f6:	49 6a       	lddpc	r10,8000274c <INTC_register_interrupt+0x70>
800026f8:	12 1a       	sub	r10,r9
800026fa:	fe 79 10 00 	mov	r9,-61440
800026fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002702:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002704:	58 1a       	cp.w	r10,1
80002706:	c0 a1       	brne	8000271a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002708:	49 09       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
8000270a:	49 2a       	lddpc	r10,80002750 <INTC_register_interrupt+0x74>
8000270c:	12 1a       	sub	r10,r9
8000270e:	bf aa       	sbr	r10,0x1e
80002710:	fe 79 10 00 	mov	r9,-61440
80002714:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002718:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000271a:	58 2a       	cp.w	r10,2
8000271c:	c0 a1       	brne	80002730 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000271e:	48 b9       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002720:	48 da       	lddpc	r10,80002754 <INTC_register_interrupt+0x78>
80002722:	12 1a       	sub	r10,r9
80002724:	bf ba       	sbr	r10,0x1f
80002726:	fe 79 10 00 	mov	r9,-61440
8000272a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000272e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002730:	48 69       	lddpc	r9,80002748 <INTC_register_interrupt+0x6c>
80002732:	48 aa       	lddpc	r10,80002758 <INTC_register_interrupt+0x7c>
80002734:	12 1a       	sub	r10,r9
80002736:	ea 1a c0 00 	orh	r10,0xc000
8000273a:	fe 79 10 00 	mov	r9,-61440
8000273e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002742:	5e fc       	retal	r12
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	96 20       	ld.sh	r0,r11[0x4]
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	94 00       	ld.sh	r0,r10[0x0]
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	95 04       	st.w	r10[0x0],r4
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	95 12       	st.w	r10[0x4],r2
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	95 20       	st.w	r10[0x8],r0
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	95 2e       	st.w	r10[0x8],lr

8000275c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000275c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000275e:	49 18       	lddpc	r8,800027a0 <INTC_init_interrupts+0x44>
80002760:	e3 b8 00 01 	mtsr	0x4,r8
80002764:	49 0e       	lddpc	lr,800027a4 <INTC_init_interrupts+0x48>
80002766:	30 07       	mov	r7,0
80002768:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000276a:	49 0c       	lddpc	r12,800027a8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000276c:	49 05       	lddpc	r5,800027ac <INTC_init_interrupts+0x50>
8000276e:	10 15       	sub	r5,r8
80002770:	fe 76 10 00 	mov	r6,-61440
80002774:	c1 08       	rjmp	80002794 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002776:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002778:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000277a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000277c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002780:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002782:	10 3a       	cp.w	r10,r8
80002784:	fe 9b ff fc 	brhi	8000277c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002788:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000278c:	2f f7       	sub	r7,-1
8000278e:	2f 8e       	sub	lr,-8
80002790:	59 f7       	cp.w	r7,31
80002792:	c0 50       	breq	8000279c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002794:	7c 08       	ld.w	r8,lr[0x0]
80002796:	58 08       	cp.w	r8,0
80002798:	ce f1       	brne	80002776 <INTC_init_interrupts+0x1a>
8000279a:	cf 7b       	rjmp	80002788 <INTC_init_interrupts+0x2c>
8000279c:	d8 22       	popm	r4-r7,pc
8000279e:	00 00       	add	r0,r0
800027a0:	80 00       	ld.sh	r0,r0[0x0]
800027a2:	94 00       	ld.sh	r0,r10[0x0]
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	96 20       	ld.sh	r0,r11[0x4]
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	26 d8       	sub	r8,109
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	95 04       	st.w	r10[0x0],r4

800027b0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800027b0:	fe 78 10 00 	mov	r8,-61440
800027b4:	e0 69 00 83 	mov	r9,131
800027b8:	f2 0c 01 0c 	sub	r12,r9,r12
800027bc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800027c0:	f2 ca ff c0 	sub	r10,r9,-64
800027c4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027c8:	58 08       	cp.w	r8,0
800027ca:	c0 21       	brne	800027ce <_get_interrupt_handler+0x1e>
800027cc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027ce:	f0 08 12 00 	clz	r8,r8
800027d2:	48 5a       	lddpc	r10,800027e4 <_get_interrupt_handler+0x34>
800027d4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027d8:	f0 08 11 1f 	rsub	r8,r8,31
800027dc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027de:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027e2:	5e fc       	retal	r12
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	96 20       	ld.sh	r0,r11[0x4]

800027e8 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027e8:	f8 c8 00 01 	sub	r8,r12,1
800027ec:	f0 0b 00 0b 	add	r11,r8,r11
800027f0:	f6 0c 0d 0a 	divu	r10,r11,r12
800027f4:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027f6:	f4 c8 00 01 	sub	r8,r10,1
800027fa:	e0 48 00 fe 	cp.w	r8,254
800027fe:	e0 88 00 03 	brls	80002804 <getBaudDiv+0x1c>
80002802:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002804:	5c 8c       	casts.h	r12
}
80002806:	5e fc       	retal	r12

80002808 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002808:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000280a:	30 18       	mov	r8,1
8000280c:	f0 0b 18 00 	cp.b	r11,r8
80002810:	5f be       	srhi	lr
80002812:	f0 0a 18 00 	cp.b	r10,r8
80002816:	5f b8       	srhi	r8
80002818:	fd e8 10 08 	or	r8,lr,r8
8000281c:	c0 30       	breq	80002822 <spi_selectionMode+0x1a>
8000281e:	30 2c       	mov	r12,2
80002820:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002822:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002824:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002828:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000282c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002830:	99 18       	st.w	r12[0x4],r8
80002832:	d8 0a       	popm	pc,r12=0

80002834 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002834:	78 18       	ld.w	r8,r12[0x4]
80002836:	ea 18 00 0f 	orh	r8,0xf
8000283a:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000283c:	78 18       	ld.w	r8,r12[0x4]
8000283e:	e2 18 00 04 	andl	r8,0x4,COH
80002842:	c0 f0       	breq	80002860 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002844:	30 e8       	mov	r8,14
80002846:	f0 0b 18 00 	cp.b	r11,r8
8000284a:	e0 8b 00 19 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000284e:	78 18       	ld.w	r8,r12[0x4]
80002850:	b1 6b       	lsl	r11,0x10
80002852:	ea 1b ff f0 	orh	r11,0xfff0
80002856:	e8 1b ff ff 	orl	r11,0xffff
8000285a:	10 6b       	and	r11,r8
8000285c:	99 1b       	st.w	r12[0x4],r11
8000285e:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002860:	30 38       	mov	r8,3
80002862:	f0 0b 18 00 	cp.b	r11,r8
80002866:	e0 8b 00 0b 	brhi	8000287c <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000286a:	78 18       	ld.w	r8,r12[0x4]
8000286c:	2f 0b       	sub	r11,-16
8000286e:	30 19       	mov	r9,1
80002870:	f2 0b 09 4b 	lsl	r11,r9,r11
80002874:	5c db       	com	r11
80002876:	10 6b       	and	r11,r8
80002878:	99 1b       	st.w	r12[0x4],r11
8000287a:	5e fd       	retal	0
8000287c:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000287e:	5e fc       	retal	r12

80002880 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002880:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002884:	c0 58       	rjmp	8000288e <spi_unselectChip+0xe>
		if (!timeout--) {
80002886:	58 08       	cp.w	r8,0
80002888:	c0 21       	brne	8000288c <spi_unselectChip+0xc>
8000288a:	5e ff       	retal	1
8000288c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000288e:	78 49       	ld.w	r9,r12[0x10]
80002890:	e2 19 02 00 	andl	r9,0x200,COH
80002894:	cf 90       	breq	80002886 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002896:	78 18       	ld.w	r8,r12[0x4]
80002898:	ea 18 00 0f 	orh	r8,0xf
8000289c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000289e:	fc 18 01 00 	movh	r8,0x100
800028a2:	99 08       	st.w	r12[0x0],r8
800028a4:	5e fd       	retal	0
800028a6:	d7 03       	nop

800028a8 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a8:	eb cd 40 f8 	pushm	r3-r7,lr
800028ac:	18 95       	mov	r5,r12
800028ae:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028b0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800028b4:	30 38       	mov	r8,3
800028b6:	f0 06 18 00 	cp.b	r6,r8
800028ba:	e0 8b 00 4d 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800028be:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028c2:	30 18       	mov	r8,1
800028c4:	f0 04 18 00 	cp.b	r4,r8
800028c8:	e0 8b 00 46 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028cc:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028d0:	30 78       	mov	r8,7
800028d2:	f0 03 18 00 	cp.b	r3,r8
800028d6:	e0 88 00 3f 	brls	80002954 <spi_setupChipReg+0xac>
800028da:	31 08       	mov	r8,16
800028dc:	f0 03 18 00 	cp.b	r3,r8
800028e0:	e0 8b 00 3a 	brhi	80002954 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028e4:	14 9b       	mov	r11,r10
800028e6:	6e 1c       	ld.w	r12,r7[0x4]
800028e8:	f0 1f 00 1d 	mcall	8000295c <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028ec:	c3 45       	brlt	80002954 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028ee:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028f0:	ec 09 16 01 	lsr	r9,r6,0x1
800028f4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028f8:	ec 16 00 01 	eorl	r6,0x1
800028fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002900:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002904:	20 83       	sub	r3,8
80002906:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000290a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000290e:	ef 39 00 09 	ld.ub	r9,r7[9]
80002912:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002916:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000291a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000291e:	0f 89       	ld.ub	r9,r7[0x0]
80002920:	30 1a       	mov	r10,1
80002922:	f4 09 18 00 	cp.b	r9,r10
80002926:	c0 e0       	breq	80002942 <spi_setupChipReg+0x9a>
80002928:	c0 a3       	brcs	8000293c <spi_setupChipReg+0x94>
8000292a:	30 2a       	mov	r10,2
8000292c:	f4 09 18 00 	cp.b	r9,r10
80002930:	c0 c0       	breq	80002948 <spi_setupChipReg+0xa0>
80002932:	30 3a       	mov	r10,3
80002934:	f4 09 18 00 	cp.b	r9,r10
80002938:	c0 e1       	brne	80002954 <spi_setupChipReg+0xac>
8000293a:	c0 a8       	rjmp	8000294e <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000293c:	8b c8       	st.w	r5[0x30],r8
8000293e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002942:	8b d8       	st.w	r5[0x34],r8
80002944:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002948:	8b e8       	st.w	r5[0x38],r8
8000294a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000294e:	8b f8       	st.w	r5[0x3c],r8
80002950:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002954:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002956:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000295a:	00 00       	add	r0,r0
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	27 e8       	sub	r8,126

80002960 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002960:	30 18       	mov	r8,1
80002962:	99 08       	st.w	r12[0x0],r8
}
80002964:	5e fc       	retal	r12

80002966 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002966:	76 09       	ld.w	r9,r11[0x0]
80002968:	58 29       	cp.w	r9,2
8000296a:	e0 88 00 03 	brls	80002970 <tc_init_waveform+0xa>
8000296e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002970:	76 18       	ld.w	r8,r11[0x4]
80002972:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002976:	af ba       	sbr	r10,0xf
80002978:	10 9b       	mov	r11,r8
8000297a:	e6 1b c0 00 	andh	r11,0xc000,COH
8000297e:	16 4a       	or	r10,r11
80002980:	10 9b       	mov	r11,r8
80002982:	e6 1b 30 00 	andh	r11,0x3000,COH
80002986:	16 4a       	or	r10,r11
80002988:	10 9b       	mov	r11,r8
8000298a:	e6 1b 0c 00 	andh	r11,0xc00,COH
8000298e:	16 4a       	or	r10,r11
80002990:	10 9b       	mov	r11,r8
80002992:	e6 1b 03 00 	andh	r11,0x300,COH
80002996:	16 4a       	or	r10,r11
80002998:	10 9b       	mov	r11,r8
8000299a:	e6 1b 00 c0 	andh	r11,0xc0,COH
8000299e:	16 4a       	or	r10,r11
800029a0:	10 9b       	mov	r11,r8
800029a2:	e6 1b 00 30 	andh	r11,0x30,COH
800029a6:	16 4a       	or	r10,r11
800029a8:	10 9b       	mov	r11,r8
800029aa:	e6 1b 00 0c 	andh	r11,0xc,COH
800029ae:	16 4a       	or	r10,r11
800029b0:	10 9b       	mov	r11,r8
800029b2:	e6 1b 00 03 	andh	r11,0x3,COH
800029b6:	16 4a       	or	r10,r11
800029b8:	10 9b       	mov	r11,r8
800029ba:	e2 1b 60 00 	andl	r11,0x6000,COH
800029be:	16 4a       	or	r10,r11
800029c0:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
800029c4:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800029c8:	10 9b       	mov	r11,r8
800029ca:	e2 1b 0c 00 	andl	r11,0xc00,COH
800029ce:	16 4a       	or	r10,r11
800029d0:	10 9b       	mov	r11,r8
800029d2:	e2 1b 03 00 	andl	r11,0x300,COH
800029d6:	16 4a       	or	r10,r11
800029d8:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800029dc:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800029e0:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
800029e4:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
800029e8:	10 9b       	mov	r11,r8
800029ea:	e2 1b 00 30 	andl	r11,0x30,COH
800029ee:	16 4a       	or	r10,r11
800029f0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800029f4:	f5 e8 10 38 	or	r8,r10,r8<<0x3
800029f8:	a5 69       	lsl	r9,0x4
800029fa:	2f f9       	sub	r9,-1
800029fc:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a00:	5e fd       	retal	0

80002a02 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a02:	58 2b       	cp.w	r11,2
80002a04:	e0 88 00 03 	brls	80002a0a <tc_start+0x8>
80002a08:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002a0a:	a7 6b       	lsl	r11,0x6
80002a0c:	16 0c       	add	r12,r11
80002a0e:	30 58       	mov	r8,5
80002a10:	99 08       	st.w	r12[0x0],r8
80002a12:	5e fd       	retal	0

80002a14 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a14:	58 2b       	cp.w	r11,2
80002a16:	e0 88 00 03 	brls	80002a1c <tc_stop+0x8>
80002a1a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80002a1c:	a7 6b       	lsl	r11,0x6
80002a1e:	16 0c       	add	r12,r11
80002a20:	30 28       	mov	r8,2
80002a22:	99 08       	st.w	r12[0x0],r8
80002a24:	5e fd       	retal	0

80002a26 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a26:	58 2b       	cp.w	r11,2
80002a28:	e0 88 00 03 	brls	80002a2e <tc_read_sr+0x8>
80002a2c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002a2e:	a7 6b       	lsl	r11,0x6
80002a30:	2e 0b       	sub	r11,-32
80002a32:	16 0c       	add	r12,r11
80002a34:	78 0c       	ld.w	r12,r12[0x0]
}
80002a36:	5e fc       	retal	r12

80002a38 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a38:	58 2b       	cp.w	r11,2
80002a3a:	e0 88 00 03 	brls	80002a40 <tc_write_rc+0x8>
80002a3e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002a40:	f6 08 15 04 	lsl	r8,r11,0x4
80002a44:	2f f8       	sub	r8,-1
80002a46:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002a4a:	e2 18 80 00 	andl	r8,0x8000,COH
80002a4e:	c0 c0       	breq	80002a66 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002a50:	a7 6b       	lsl	r11,0x6
80002a52:	16 0c       	add	r12,r11
80002a54:	2e 4c       	sub	r12,-28
80002a56:	78 08       	ld.w	r8,r12[0x0]
80002a58:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002a5c:	e0 18 00 00 	andl	r8,0x0
80002a60:	f3 e8 10 08 	or	r8,r9,r8
80002a64:	99 08       	st.w	r12[0x0],r8

  return value;
80002a66:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002a6a:	5e fc       	retal	r12

80002a6c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002a6c:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002a70:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a74:	58 2b       	cp.w	r11,2
80002a76:	e0 88 00 04 	brls	80002a7e <tc_configure_interrupts+0x12>
80002a7a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002a7e:	ee 19 00 01 	eorh	r9,0x1
80002a82:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002a86:	74 08       	ld.w	r8,r10[0x0]
80002a88:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002a8c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002a90:	a7 6e       	lsl	lr,0x6
80002a92:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002a96:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002a9a:	0e 4e       	or	lr,r7
80002a9c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002aa0:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002aa4:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002aa8:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002aac:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002ab0:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002ab4:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002ab8:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002abc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002ac0:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002ac4:	f6 0e 15 06 	lsl	lr,r11,0x6
80002ac8:	f8 0e 00 0e 	add	lr,r12,lr
80002acc:	2d ce       	sub	lr,-36
80002ace:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002ad0:	58 09       	cp.w	r9,0
80002ad2:	c0 20       	breq	80002ad6 <tc_configure_interrupts+0x6a>
80002ad4:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002ad6:	74 08       	ld.w	r8,r10[0x0]
80002ad8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002adc:	e0 65 00 80 	mov	r5,128
80002ae0:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002ae4:	74 08       	ld.w	r8,r10[0x0]
80002ae6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002aea:	f9 b4 00 40 	moveq	r4,64
80002aee:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002af2:	74 08       	ld.w	r8,r10[0x0]
80002af4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002af8:	f9 b3 00 20 	moveq	r3,32
80002afc:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002b00:	74 08       	ld.w	r8,r10[0x0]
80002b02:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002b06:	f9 b2 00 10 	moveq	r2,16
80002b0a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002b0e:	74 08       	ld.w	r8,r10[0x0]
80002b10:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002b14:	f9 b6 00 08 	moveq	r6,8
80002b18:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002b1c:	74 08       	ld.w	r8,r10[0x0]
80002b1e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002b22:	f9 b7 00 04 	moveq	r7,4
80002b26:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002b2a:	74 08       	ld.w	r8,r10[0x0]
80002b2c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002b30:	f9 be 00 02 	moveq	lr,2
80002b34:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002b38:	74 08       	ld.w	r8,r10[0x0]
80002b3a:	ec 18 00 01 	eorl	r8,0x1
80002b3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b42:	eb e8 10 08 	or	r8,r5,r8
80002b46:	08 48       	or	r8,r4
80002b48:	06 48       	or	r8,r3
80002b4a:	04 48       	or	r8,r2
80002b4c:	0c 48       	or	r8,r6
80002b4e:	0e 48       	or	r8,r7
80002b50:	1c 48       	or	r8,lr
80002b52:	f6 0a 15 06 	lsl	r10,r11,0x6
80002b56:	f8 0a 00 0a 	add	r10,r12,r10
80002b5a:	2d 8a       	sub	r10,-40
80002b5c:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002b5e:	a7 6b       	lsl	r11,0x6
80002b60:	2e 0b       	sub	r11,-32
80002b62:	16 0c       	add	r12,r11
80002b64:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002b66:	58 09       	cp.w	r9,0
80002b68:	c0 31       	brne	80002b6e <tc_configure_interrupts+0x102>
80002b6a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002b6e:	d5 03       	csrf	0x10
80002b70:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002b74 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002b74:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002b76:	f6 08 15 04 	lsl	r8,r11,0x4
80002b7a:	14 38       	cp.w	r8,r10
80002b7c:	f9 b8 08 10 	movls	r8,16
80002b80:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002b84:	f0 0b 02 4b 	mul	r11,r8,r11
80002b88:	f6 09 16 01 	lsr	r9,r11,0x1
80002b8c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002b90:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002b94:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b98:	f2 cb 00 01 	sub	r11,r9,1
80002b9c:	e0 4b ff fe 	cp.w	r11,65534
80002ba0:	e0 88 00 03 	brls	80002ba6 <usart_set_async_baudrate+0x32>
80002ba4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002ba6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002ba8:	e8 6e 00 00 	mov	lr,524288
80002bac:	59 08       	cp.w	r8,16
80002bae:	fc 08 17 10 	movne	r8,lr
80002bb2:	f9 b8 00 00 	moveq	r8,0
80002bb6:	e4 1b ff f7 	andh	r11,0xfff7
80002bba:	e0 1b fe cf 	andl	r11,0xfecf
80002bbe:	16 48       	or	r8,r11
80002bc0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002bc2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002bc6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002bca:	99 89       	st.w	r12[0x20],r9
80002bcc:	d8 0a       	popm	pc,r12=0

80002bce <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002bce:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002bd0:	e2 18 00 02 	andl	r8,0x2,COH
80002bd4:	c0 31       	brne	80002bda <usart_write_char+0xc>
80002bd6:	30 2c       	mov	r12,2
80002bd8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bda:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002bde:	99 7b       	st.w	r12[0x1c],r11
80002be0:	5e fd       	retal	0
80002be2:	d7 03       	nop

80002be4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002be4:	eb cd 40 e0 	pushm	r5-r7,lr
80002be8:	18 96       	mov	r6,r12
80002bea:	16 95       	mov	r5,r11
80002bec:	e0 67 27 0f 	mov	r7,9999
80002bf0:	c0 68       	rjmp	80002bfc <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002bf2:	58 07       	cp.w	r7,0
80002bf4:	c0 31       	brne	80002bfa <usart_putchar+0x16>
80002bf6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002bfa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002bfc:	0a 9b       	mov	r11,r5
80002bfe:	0c 9c       	mov	r12,r6
80002c00:	f0 1f 00 03 	mcall	80002c0c <usart_putchar+0x28>
80002c04:	cf 71       	brne	80002bf2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002c06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2b ce       	sub	lr,-68

80002c10 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, uint8_t *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002c10:	78 58       	ld.w	r8,r12[0x14]
80002c12:	e2 18 00 e0 	andl	r8,0xe0,COH
80002c16:	c0 30       	breq	80002c1c <usart_read_char+0xc>
80002c18:	30 4c       	mov	r12,4
80002c1a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002c1c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002c1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002c22:	f9 bc 00 03 	moveq	r12,3
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002c26:	f9 f8 10 06 	ld.wne	r8,r12[0x18]
80002c2a:	f7 f8 1e 00 	st.bne	r11[0x0],r8
80002c2e:	f9 bc 01 00 	movne	r12,0
    return USART_SUCCESS;
  }
  else
    return USART_RX_EMPTY;
}
80002c32:	5e fc       	retal	r12

80002c34 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c34:	eb cd 40 c0 	pushm	r6-r7,lr
80002c38:	18 96       	mov	r6,r12
80002c3a:	16 97       	mov	r7,r11
  while (*string != '\0')
80002c3c:	17 8b       	ld.ub	r11,r11[0x0]
80002c3e:	58 0b       	cp.w	r11,0
80002c40:	c0 80       	breq	80002c50 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002c42:	2f f7       	sub	r7,-1
80002c44:	0c 9c       	mov	r12,r6
80002c46:	f0 1f 00 04 	mcall	80002c54 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c4a:	0f 8b       	ld.ub	r11,r7[0x0]
80002c4c:	58 0b       	cp.w	r11,0
80002c4e:	cf a1       	brne	80002c42 <usart_write_line+0xe>
80002c50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	2b e4       	sub	r4,-66

80002c58 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002c58:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c5c:	e6 18 00 01 	andh	r8,0x1,COH
80002c60:	c0 71       	brne	80002c6e <usart_reset+0x16>
80002c62:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c64:	3f f8       	mov	r8,-1
80002c66:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c68:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c6a:	d5 03       	csrf	0x10
80002c6c:	c0 48       	rjmp	80002c74 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80002c6e:	3f f8       	mov	r8,-1
80002c70:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c72:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002c74:	30 08       	mov	r8,0
80002c76:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002c78:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002c7a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002c7c:	e8 68 61 0c 	mov	r8,549132
80002c80:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002c82:	5e fc       	retal	r12

80002c84 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002c84:	eb cd 40 e0 	pushm	r5-r7,lr
80002c88:	18 96       	mov	r6,r12
80002c8a:	16 97       	mov	r7,r11
80002c8c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002c8e:	f0 1f 00 2f 	mcall	80002d48 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002c92:	58 07       	cp.w	r7,0
80002c94:	c5 80       	breq	80002d44 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002c96:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c98:	30 49       	mov	r9,4
80002c9a:	f2 08 18 00 	cp.b	r8,r9
80002c9e:	e0 88 00 53 	brls	80002d44 <usart_init_rs232+0xc0>
80002ca2:	30 99       	mov	r9,9
80002ca4:	f2 08 18 00 	cp.b	r8,r9
80002ca8:	e0 8b 00 4e 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002cac:	0f d9       	ld.ub	r9,r7[0x5]
80002cae:	30 78       	mov	r8,7
80002cb0:	f0 09 18 00 	cp.b	r9,r8
80002cb4:	e0 8b 00 48 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002cb8:	8e 39       	ld.sh	r9,r7[0x6]
80002cba:	e0 68 01 01 	mov	r8,257
80002cbe:	f0 09 19 00 	cp.h	r9,r8
80002cc2:	e0 8b 00 41 	brhi	80002d44 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002cc6:	ef 39 00 08 	ld.ub	r9,r7[8]
80002cca:	30 38       	mov	r8,3
80002ccc:	f0 09 18 00 	cp.b	r9,r8
80002cd0:	e0 8b 00 3a 	brhi	80002d44 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002cd4:	0a 9a       	mov	r10,r5
80002cd6:	6e 0b       	ld.w	r11,r7[0x0]
80002cd8:	0c 9c       	mov	r12,r6
80002cda:	f0 1f 00 1d 	mcall	80002d4c <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002cde:	58 1c       	cp.w	r12,1
80002ce0:	c3 20       	breq	80002d44 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002ce2:	0f c8       	ld.ub	r8,r7[0x4]
80002ce4:	30 99       	mov	r9,9
80002ce6:	f2 08 18 00 	cp.b	r8,r9
80002cea:	c0 51       	brne	80002cf4 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002cec:	6c 18       	ld.w	r8,r6[0x4]
80002cee:	b1 b8       	sbr	r8,0x11
80002cf0:	8d 18       	st.w	r6[0x4],r8
80002cf2:	c0 68       	rjmp	80002cfe <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002cf4:	6c 19       	ld.w	r9,r6[0x4]
80002cf6:	20 58       	sub	r8,5
80002cf8:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002cfc:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002cfe:	6c 19       	ld.w	r9,r6[0x4]
80002d00:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002d04:	0f d8       	ld.ub	r8,r7[0x5]
80002d06:	a9 78       	lsl	r8,0x9
80002d08:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002d0c:	12 48       	or	r8,r9
80002d0e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002d10:	8e 38       	ld.sh	r8,r7[0x6]
80002d12:	30 29       	mov	r9,2
80002d14:	f2 08 19 00 	cp.h	r8,r9
80002d18:	e0 88 00 09 	brls	80002d2a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002d1c:	6c 18       	ld.w	r8,r6[0x4]
80002d1e:	ad b8       	sbr	r8,0xd
80002d20:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002d22:	8e b8       	ld.uh	r8,r7[0x6]
80002d24:	20 28       	sub	r8,2
80002d26:	8d a8       	st.w	r6[0x28],r8
80002d28:	c0 68       	rjmp	80002d34 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002d2a:	6c 19       	ld.w	r9,r6[0x4]
80002d2c:	5c 78       	castu.h	r8
80002d2e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002d32:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002d34:	6c 18       	ld.w	r8,r6[0x4]
80002d36:	e0 18 ff f0 	andl	r8,0xfff0
80002d3a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002d3c:	35 08       	mov	r8,80
80002d3e:	8d 08       	st.w	r6[0x0],r8
80002d40:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002d44:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2c 58       	sub	r8,-59
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2b 74       	sub	r4,-73

80002d50 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d50:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d54:	fe c0 99 54 	sub	r0,pc,-26284

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d58:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d5c:	d5 53       	csrf	0x15
  cp      r0, r1
80002d5e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d60:	e0 61 05 30 	mov	r1,1328
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002d64:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002d66:	c0 72       	brcc	80002d74 <idata_load_loop_end>
  cp      r0, r1
80002d68:	fe c2 8c 30 	sub	r2,pc,-29648

80002d6c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d6c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002d6e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002d70:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002d72:	cf d3       	brcs	80002d6c <idata_load_loop>

80002d74 <idata_load_loop_end>:
  mov     r2, 0
80002d74:	e0 60 05 30 	mov	r0,1328
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002d78:	e0 61 07 50 	mov	r1,1872
  cp      r0, r1
  brlo    udata_clear_loop
80002d7c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002d7e:	c0 62       	brcc	80002d8a <udata_clear_loop_end>
80002d80:	30 02       	mov	r2,0
80002d82:	30 03       	mov	r3,0

80002d84 <udata_clear_loop>:
80002d84:	a1 22       	st.d	r0++,r2
80002d86:	02 30       	cp.w	r0,r1
80002d88:	cf e3       	brcs	80002d84 <udata_clear_loop>

80002d8a <udata_clear_loop_end>:
80002d8a:	fe cf f5 be 	sub	pc,pc,-2626
80002d8e:	d7 03       	nop

80002d90 <pal_trx_reg_write>:

	return register_value;
}

void pal_trx_reg_write(uint8_t addr, uint8_t data)
{
80002d90:	eb cd 40 c0 	pushm	r6-r7,lr
80002d94:	20 2d       	sub	sp,8
80002d96:	ba cc       	st.b	sp[0x4],r12
80002d98:	ba 8b       	st.b	sp[0x0],r11
	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002d9a:	e1 b6 00 00 	mfsr	r6,0x0
80002d9e:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
80002da0:	1b c8       	ld.ub	r8,sp[0x4]
80002da2:	ea 18 ff ff 	orh	r8,0xffff
80002da6:	e8 18 ff c0 	orl	r8,0xffc0
80002daa:	ba c8       	st.b	sp[0x4],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002dac:	49 07       	lddpc	r7,80002dec <pal_trx_reg_write+0x5c>
80002dae:	0f 8b       	ld.ub	r11,r7[0x0]
80002db0:	fe 7c 40 00 	mov	r12,-49152
80002db4:	f0 1f 00 0f 	mcall	80002df0 <pal_trx_reg_write+0x60>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002db8:	30 1a       	mov	r10,1
80002dba:	fa cb ff fc 	sub	r11,sp,-4
80002dbe:	fe 7c 40 00 	mov	r12,-49152
80002dc2:	f0 1f 00 0d 	mcall	80002df4 <pal_trx_reg_write+0x64>

	/* Write the byte in the transceiver data register */
	spi_write_packet(AT86RFX_SPI, &data, 1);
80002dc6:	30 1a       	mov	r10,1
80002dc8:	1a 9b       	mov	r11,sp
80002dca:	fe 7c 40 00 	mov	r12,-49152
80002dce:	f0 1f 00 0a 	mcall	80002df4 <pal_trx_reg_write+0x64>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002dd2:	0f 8b       	ld.ub	r11,r7[0x0]
80002dd4:	fe 7c 40 00 	mov	r12,-49152
80002dd8:	f0 1f 00 08 	mcall	80002df8 <pal_trx_reg_write+0x68>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002ddc:	e6 16 00 01 	andh	r6,0x1,COH
80002de0:	c0 21       	brne	80002de4 <pal_trx_reg_write+0x54>
80002de2:	d5 03       	csrf	0x10
}
80002de4:	2f ed       	sub	sp,-8
80002de6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dea:	00 00       	add	r0,r0
80002dec:	00 00       	add	r0,r0
80002dee:	00 08       	add	r8,r0
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	28 34       	sub	r4,-125
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2f 0a       	sub	r10,-16
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	28 80       	sub	r0,-120

80002dfc <pal_trx_reg_read>:
	/*Calling the interrupt routines */
	trx_irq_handler_cb();
}

uint8_t pal_trx_reg_read(uint8_t addr)
{
80002dfc:	eb cd 40 c0 	pushm	r6-r7,lr
80002e00:	20 2d       	sub	sp,8
80002e02:	ba 8c       	st.b	sp[0x0],r12
	uint8_t register_value = 0;
80002e04:	30 08       	mov	r8,0
80002e06:	ba f8       	st.b	sp[0x7],r8

	/*Saving the current interrupt status & disabling the global interrupt */
	ENTER_CRITICAL_REGION();
80002e08:	e1 b6 00 00 	mfsr	r6,0x0
80002e0c:	d3 03       	ssrf	0x10

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
80002e0e:	1b 88       	ld.ub	r8,sp[0x0]
80002e10:	ea 18 ff ff 	orh	r8,0xffff
80002e14:	e8 18 ff 80 	orl	r8,0xff80
80002e18:	ba 88       	st.b	sp[0x0],r8
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_selectChip(spi,device->id);
80002e1a:	49 17       	lddpc	r7,80002e5c <pal_trx_reg_read+0x60>
80002e1c:	0f 8b       	ld.ub	r11,r7[0x0]
80002e1e:	fe 7c 40 00 	mov	r12,-49152
80002e22:	f0 1f 00 10 	mcall	80002e60 <pal_trx_reg_read+0x64>

	/* Start SPI transaction by pulling SEL low */
	spi_select_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/* Send the Read command byte */
	spi_write_packet(AT86RFX_SPI, &addr, 1);
80002e26:	30 1a       	mov	r10,1
80002e28:	1a 9b       	mov	r11,sp
80002e2a:	fe 7c 40 00 	mov	r12,-49152
80002e2e:	f0 1f 00 0e 	mcall	80002e64 <pal_trx_reg_read+0x68>

	/* Do dummy read for initiating SPI read */
	spi_read_packet(AT86RFX_SPI, &register_value, 1);
80002e32:	30 1a       	mov	r10,1
80002e34:	fa cb ff f9 	sub	r11,sp,-7
80002e38:	fe 7c 40 00 	mov	r12,-49152
80002e3c:	f0 1f 00 0b 	mcall	80002e68 <pal_trx_reg_read+0x6c>
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi,
		struct spi_device *device)
{
	spi_unselectChip(spi,device->id);
80002e40:	0f 8b       	ld.ub	r11,r7[0x0]
80002e42:	fe 7c 40 00 	mov	r12,-49152
80002e46:	f0 1f 00 0a 	mcall	80002e6c <pal_trx_reg_read+0x70>

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);

	/*Restoring the interrupt status which was stored & enabling the global interrupt */
	LEAVE_CRITICAL_REGION();
80002e4a:	e6 16 00 01 	andh	r6,0x1,COH
80002e4e:	c0 21       	brne	80002e52 <pal_trx_reg_read+0x56>
80002e50:	d5 03       	csrf	0x10

	return register_value;
}
80002e52:	1b fc       	ld.ub	r12,sp[0x7]
80002e54:	2f ed       	sub	sp,-8
80002e56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e5a:	00 00       	add	r0,r0
80002e5c:	00 00       	add	r0,r0
80002e5e:	00 08       	add	r8,r0
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	28 34       	sub	r4,-125
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	2f 0a       	sub	r10,-16
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	2e ba       	sub	r10,-21
80002e6c:	80 00       	ld.sh	r0,r0[0x0]
80002e6e:	28 80       	sub	r0,-120

80002e70 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e70:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002e74:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e76:	e6 18 00 01 	andh	r8,0x1,COH
80002e7a:	c0 21       	brne	80002e7e <sysclk_init+0xe>
      cpu_irq_enable();
80002e7c:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002e7e:	5e fc       	retal	r12

80002e80 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002e80:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e82:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002e86:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002e88:	a3 6c       	lsl	r12,0x2
80002e8a:	fe 7a 14 20 	mov	r10,-60384
80002e8e:	f8 0a 00 08 	add	r8,r12,r10
80002e92:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80002e94:	30 1e       	mov	lr,1
80002e96:	fc 0b 09 4b 	lsl	r11,lr,r11
80002e9a:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e9c:	32 0a       	mov	r10,32
80002e9e:	ea 1a aa 00 	orh	r10,0xaa00
80002ea2:	14 0c       	add	r12,r10
80002ea4:	fe 7a 14 00 	mov	r10,-60416
80002ea8:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002eac:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002eae:	12 98       	mov	r8,r9
80002eb0:	e6 18 00 01 	andh	r8,0x1,COH
80002eb4:	c0 21       	brne	80002eb8 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80002eb6:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002eb8:	d8 02       	popm	pc

80002eba <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80002eba:	eb cd 40 80 	pushm	r7,lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002ebe:	58 0a       	cp.w	r10,0
80002ec0:	c0 61       	brne	80002ecc <spi_read_packet+0x12>
80002ec2:	c2 28       	rjmp	80002f06 <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002ec4:	58 08       	cp.w	r8,0
80002ec6:	c1 d0       	breq	80002f00 <spi_read_packet+0x46>
80002ec8:	20 18       	sub	r8,1
80002eca:	c0 68       	rjmp	80002ed6 <spi_read_packet+0x1c>
80002ecc:	e0 6e 3a 98 	mov	lr,15000
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ed0:	e0 67 00 ff 	mov	r7,255
80002ed4:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002ed6:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002ed8:	e2 19 00 02 	andl	r9,0x2,COH
80002edc:	cf 40       	breq	80002ec4 <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002ede:	99 37       	st.w	r12[0xc],r7
80002ee0:	1c 98       	mov	r8,lr
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002ee2:	c0 48       	rjmp	80002eea <spi_read_packet+0x30>
			if (!timeout--) {
80002ee4:	58 08       	cp.w	r8,0
80002ee6:	c0 d0       	breq	80002f00 <spi_read_packet+0x46>
80002ee8:	20 18       	sub	r8,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
80002eea:	78 49       	ld.w	r9,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80002eec:	e2 19 02 01 	andl	r9,0x201,COH
80002ef0:	e0 49 02 01 	cp.w	r9,513
80002ef4:	cf 81       	brne	80002ee4 <spi_read_packet+0x2a>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002ef6:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
80002ef8:	16 c8       	st.b	r11++,r8
		i++;
		len--;
80002efa:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80002efc:	ce c1       	brne	80002ed4 <spi_read_packet+0x1a>
80002efe:	c0 48       	rjmp	80002f06 <spi_read_packet+0x4c>
80002f00:	3f dc       	mov	r12,-3
80002f02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f06:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002f0a <spi_write_packet>:
	return STATUS_OK;
}

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data,
		size_t len)
{
80002f0a:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f0c:	58 0a       	cp.w	r10,0
80002f0e:	c0 81       	brne	80002f1e <spi_write_packet+0x14>
80002f10:	c1 28       	rjmp	80002f34 <spi_write_packet+0x2a>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
80002f12:	58 08       	cp.w	r8,0
80002f14:	c0 31       	brne	80002f1a <spi_write_packet+0x10>
80002f16:	3f dc       	mov	r12,-3
80002f18:	d8 02       	popm	pc
80002f1a:	20 18       	sub	r8,1
80002f1c:	c0 48       	rjmp	80002f24 <spi_write_packet+0x1a>
80002f1e:	e0 6e 3a 98 	mov	lr,15000
80002f22:	1c 98       	mov	r8,lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002f24:	78 49       	ld.w	r9,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80002f26:	e2 19 00 02 	andl	r9,0x2,COH
80002f2a:	cf 40       	breq	80002f12 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f2c:	17 38       	ld.ub	r8,r11++
80002f2e:	99 38       	st.w	r12[0xc],r8
			}
		}
		val = data[i];
		spi_write_single(spi,val);
		i++;
		len--;
80002f30:	20 1a       	sub	r10,1
		size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	size_t i=0;
	uint8_t val;
	while(len) {
80002f32:	cf 81       	brne	80002f22 <spi_write_packet+0x18>
80002f34:	d8 0a       	popm	pc,r12=0
80002f36:	d7 03       	nop
	...

80002f44 <getStateAT86RF212>:
	
	else
		sprintf(temps,"%s","X");
}
uint8_t getStateAT86RF212(void)
{
80002f44:	d4 01       	pushm	lr
	return pal_trx_reg_read(RG_TRX_STATUS) & 0x1F;
80002f46:	30 1c       	mov	r12,1
80002f48:	f0 1f 00 03 	mcall	80002f54 <getStateAT86RF212+0x10>
}
80002f4c:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002f50:	d8 02       	popm	pc
80002f52:	00 00       	add	r0,r0
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	2d fc       	sub	r12,-33

80002f58 <tc_irq>:
__interrupt
#endif

// Existe la variable timer_eneable que controla la ejecucion de los procesos dentro de la interrupcion
static void tc_irq(void)
{
80002f58:	d4 01       	pushm	lr
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80002f5a:	30 0b       	mov	r11,0
80002f5c:	fe 7c 5c 00 	mov	r12,-41984
80002f60:	f0 1f 00 17 	mcall	80002fbc <tc_irq+0x64>

	tc_tick++;	// contador para controlar el tiempo de las interrupciones
80002f64:	49 78       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002f66:	70 09       	ld.w	r9,r8[0x0]
80002f68:	2f f9       	sub	r9,-1
80002f6a:	91 09       	st.w	r8[0x0],r9
	
	if (tc_tick < 20)
80002f6c:	70 08       	ld.w	r8,r8[0x0]
80002f6e:	59 38       	cp.w	r8,19
80002f70:	e0 8b 00 0c 	brhi	80002f88 <tc_irq+0x30>
	{
		// la funcion toggle pin (parece) que pone el pin en 1
		gpio_toggle_pin(AVR32_PIN_PB09); // PB09 = led 3
80002f74:	32 9c       	mov	r12,41
80002f76:	f0 1f 00 14 	mcall	80002fc4 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA04); // PA04 = led 1
80002f7a:	30 4c       	mov	r12,4
80002f7c:	f0 1f 00 12 	mcall	80002fc4 <tc_irq+0x6c>
		gpio_toggle_pin(AVR32_PIN_PA11); // PA11 = led 2 
80002f80:	30 bc       	mov	r12,11
80002f82:	f0 1f 00 11 	mcall	80002fc4 <tc_irq+0x6c>
		return;
80002f86:	c1 98       	rjmp	80002fb8 <tc_irq+0x60>
	}
	
	if (tc_tick == 21)	
80002f88:	48 e8       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002f8a:	70 08       	ld.w	r8,r8[0x0]
80002f8c:	59 58       	cp.w	r8,21
80002f8e:	c0 41       	brne	80002f96 <tc_irq+0x3e>
		gpio_toggle_pin(AVR32_PIN_PB09);
80002f90:	32 9c       	mov	r12,41
80002f92:	f0 1f 00 0d 	mcall	80002fc4 <tc_irq+0x6c>
		
	if (tc_tick == 22)
80002f96:	48 b8       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002f98:	70 08       	ld.w	r8,r8[0x0]
80002f9a:	59 68       	cp.w	r8,22
80002f9c:	c0 41       	brne	80002fa4 <tc_irq+0x4c>
		gpio_toggle_pin(AVR32_PIN_PA04);
80002f9e:	30 4c       	mov	r12,4
80002fa0:	f0 1f 00 09 	mcall	80002fc4 <tc_irq+0x6c>
	
	if (tc_tick == 23)
80002fa4:	48 78       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	59 78       	cp.w	r8,23
80002faa:	c0 71       	brne	80002fb8 <tc_irq+0x60>
	{
		gpio_toggle_pin(AVR32_PIN_PA11);	
80002fac:	30 bc       	mov	r12,11
80002fae:	f0 1f 00 06 	mcall	80002fc4 <tc_irq+0x6c>
		tc_tick = 1;
80002fb2:	30 19       	mov	r9,1
80002fb4:	48 38       	lddpc	r8,80002fc0 <tc_irq+0x68>
80002fb6:	91 09       	st.w	r8[0x0],r9
	}
}
80002fb8:	d4 02       	popm	lr
80002fba:	d6 03       	rete
80002fbc:	80 00       	ld.sh	r0,r0[0x0]
80002fbe:	2a 26       	sub	r6,-94
80002fc0:	00 00       	add	r0,r0
80002fc2:	00 1c       	sub	r12,r0
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	26 a0       	sub	r0,106

80002fc8 <usart_int_handler_RS232>:
#endif


// Manejo INTERRUPCION UART
static void usart_int_handler_RS232(void)
{
80002fc8:	d4 01       	pushm	lr
80002fca:	20 1d       	sub	sp,4
	// TDW sensor de temperatura -> RX UART2 Pin 24 MCU
	tc_stop(tc,EXAMPLE_TC_CHANNEL);
80002fcc:	30 0b       	mov	r11,0
80002fce:	49 b8       	lddpc	r8,80003038 <usart_int_handler_RS232+0x70>
80002fd0:	70 0c       	ld.w	r12,r8[0x0]
80002fd2:	f0 1f 00 1b 	mcall	8000303c <usart_int_handler_RS232+0x74>
	
	uint8_t c=0;
80002fd6:	fa cb ff fc 	sub	r11,sp,-4
80002fda:	30 08       	mov	r8,0
80002fdc:	16 f8       	st.b	--r11,r8
	 * as the call to usart_putchar will take enough time for this before
	 * the interrupt handler is left and the interrupt priority level is
	 * unmasked by the CPU.
	 */
		
	if (usart_read_char(&AVR32_USART2, &c) != USART_SUCCESS) //aqui lee el caracter por el puerto uart2
80002fde:	fe 7c 38 00 	mov	r12,-51200
80002fe2:	f0 1f 00 18 	mcall	80003040 <usart_int_handler_RS232+0x78>
80002fe6:	c2 61       	brne	80003032 <usart_int_handler_RS232+0x6a>
		return;
	
	cola_PC[cola_PC_nw] = c;
80002fe8:	49 78       	lddpc	r8,80003044 <usart_int_handler_RS232+0x7c>
80002fea:	11 88       	ld.ub	r8,r8[0x0]
80002fec:	1b b9       	ld.ub	r9,sp[0x3]
80002fee:	49 7a       	lddpc	r10,80003048 <usart_int_handler_RS232+0x80>
80002ff0:	f4 08 0b 09 	st.b	r10[r8],r9
	
	if (cola_PC[cola_PC_nw] == 0x01)
80002ff4:	30 1a       	mov	r10,1
80002ff6:	f4 09 18 00 	cp.b	r9,r10
80002ffa:	c0 c1       	brne	80003012 <usart_int_handler_RS232+0x4a>
	{	
		if (!configuracion){
80002ffc:	49 49       	lddpc	r9,8000304c <usart_int_handler_RS232+0x84>
80002ffe:	13 8a       	ld.ub	r10,r9[0x0]
80003000:	30 09       	mov	r9,0
80003002:	f2 0a 18 00 	cp.b	r10,r9
80003006:	c0 31       	brne	8000300c <usart_int_handler_RS232+0x44>
			pConfiguracion = cola_PC_nw;
80003008:	49 29       	lddpc	r9,80003050 <usart_int_handler_RS232+0x88>
8000300a:	b2 88       	st.b	r9[0x0],r8
		}
		configuracion = true;
8000300c:	30 1a       	mov	r10,1
8000300e:	49 09       	lddpc	r9,8000304c <usart_int_handler_RS232+0x84>
80003010:	b2 8a       	st.b	r9[0x0],r10
		
	}
	cola_PC_nw++;
80003012:	2f f8       	sub	r8,-1
80003014:	48 c9       	lddpc	r9,80003044 <usart_int_handler_RS232+0x7c>
80003016:	b2 88       	st.b	r9[0x0],r8
	
	if (cola_PC_nw >= tamano_cola)
80003018:	3c 79       	mov	r9,-57
8000301a:	f2 08 18 00 	cp.b	r8,r9
8000301e:	e0 88 00 05 	brls	80003028 <usart_int_handler_RS232+0x60>
	cola_PC_nw = 0;
80003022:	30 09       	mov	r9,0
80003024:	48 88       	lddpc	r8,80003044 <usart_int_handler_RS232+0x7c>
80003026:	b0 89       	st.b	r8[0x0],r9
	
	tc_start(tc,EXAMPLE_TC_CHANNEL);
80003028:	30 0b       	mov	r11,0
8000302a:	48 48       	lddpc	r8,80003038 <usart_int_handler_RS232+0x70>
8000302c:	70 0c       	ld.w	r12,r8[0x0]
8000302e:	f0 1f 00 0a 	mcall	80003054 <usart_int_handler_RS232+0x8c>
	return;

	
}
80003032:	2f fd       	sub	sp,-4
80003034:	d4 02       	popm	lr
80003036:	d6 03       	rete
80003038:	00 00       	add	r0,r0
8000303a:	00 18       	sub	r8,r0
8000303c:	80 00       	ld.sh	r0,r0[0x0]
8000303e:	2a 14       	sub	r4,-95
80003040:	80 00       	ld.sh	r0,r0[0x0]
80003042:	2c 10       	sub	r0,-63
80003044:	00 00       	add	r0,r0
80003046:	06 37       	cp.w	r7,r3
80003048:	00 00       	add	r0,r0
8000304a:	06 80       	andn	r0,r3
8000304c:	00 00       	add	r0,r0
8000304e:	06 34       	cp.w	r4,r3
80003050:	00 00       	add	r0,r0
80003052:	06 38       	cp.w	r8,r3
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	2a 02       	sub	r2,-96

80003058 <promiscuous_mode>:
		pal_trx_frame_write(RG_TRX_STATE,CMD_RX_ON);
	}
	
}
void promiscuous_mode()
{
80003058:	eb cd 40 e0 	pushm	r5-r7,lr
	for (address=0x20; address<0x2C; address++)
8000305c:	32 09       	mov	r9,32
8000305e:	4a f8       	lddpc	r8,80003118 <promiscuous_mode+0xc0>
80003060:	b0 89       	st.b	r8[0x0],r9
80003062:	32 0c       	mov	r12,32
	{
		pal_trx_reg_write(address, 0x00);
80003064:	30 05       	mov	r5,0
	}
	
}
void promiscuous_mode()
{
	for (address=0x20; address<0x2C; address++)
80003066:	10 97       	mov	r7,r8
80003068:	32 b6       	mov	r6,43
	{
		pal_trx_reg_write(address, 0x00);
8000306a:	0a 9b       	mov	r11,r5
8000306c:	f0 1f 00 2c 	mcall	8000311c <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003070:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003074:	f0 ca fd c1 	sub	r10,r8,-575
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003078:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000307c:	14 38       	cp.w	r8,r10
8000307e:	e0 88 00 08 	brls	8000308e <promiscuous_mode+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003082:	12 38       	cp.w	r8,r9
80003084:	fe 98 ff fa 	brls	80003078 <promiscuous_mode+0x20>
80003088:	12 3a       	cp.w	r10,r9
8000308a:	c3 23       	brcs	800030ee <promiscuous_mode+0x96>
8000308c:	cf 6b       	rjmp	80003078 <promiscuous_mode+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000308e:	12 38       	cp.w	r8,r9
80003090:	e0 8b 00 2f 	brhi	800030ee <promiscuous_mode+0x96>
80003094:	12 3a       	cp.w	r10,r9
80003096:	c2 c3       	brcs	800030ee <promiscuous_mode+0x96>
80003098:	cf 0b       	rjmp	80003078 <promiscuous_mode+0x20>
		delay_ms(5);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
8000309a:	30 2b       	mov	r11,2
8000309c:	31 7c       	mov	r12,23
8000309e:	f0 1f 00 20 	mcall	8000311c <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030a2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030a6:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030aa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030ae:	14 38       	cp.w	r8,r10
800030b0:	e0 88 00 08 	brls	800030c0 <promiscuous_mode+0x68>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030b4:	12 38       	cp.w	r8,r9
800030b6:	fe 98 ff fa 	brls	800030aa <promiscuous_mode+0x52>
800030ba:	12 3a       	cp.w	r10,r9
800030bc:	c2 23       	brcs	80003100 <promiscuous_mode+0xa8>
800030be:	cf 6b       	rjmp	800030aa <promiscuous_mode+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030c0:	12 38       	cp.w	r8,r9
800030c2:	e0 8b 00 1f 	brhi	80003100 <promiscuous_mode+0xa8>
800030c6:	12 3a       	cp.w	r10,r9
800030c8:	c1 c3       	brcs	80003100 <promiscuous_mode+0xa8>
800030ca:	cf 0b       	rjmp	800030aa <promiscuous_mode+0x52>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030cc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030d0:	14 38       	cp.w	r8,r10
800030d2:	e0 88 00 08 	brls	800030e2 <promiscuous_mode+0x8a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030d6:	12 38       	cp.w	r8,r9
800030d8:	fe 98 ff fa 	brls	800030cc <promiscuous_mode+0x74>
800030dc:	12 3a       	cp.w	r10,r9
800030de:	c1 b3       	brcs	80003114 <promiscuous_mode+0xbc>
800030e0:	cf 6b       	rjmp	800030cc <promiscuous_mode+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030e2:	12 38       	cp.w	r8,r9
800030e4:	e0 8b 00 18 	brhi	80003114 <promiscuous_mode+0xbc>
800030e8:	12 3a       	cp.w	r10,r9
800030ea:	c1 53       	brcs	80003114 <promiscuous_mode+0xbc>
800030ec:	cf 0b       	rjmp	800030cc <promiscuous_mode+0x74>
	}
	
}
void promiscuous_mode()
{
	for (address=0x20; address<0x2C; address++)
800030ee:	0f 8c       	ld.ub	r12,r7[0x0]
800030f0:	2f fc       	sub	r12,-1
800030f2:	5c 5c       	castu.b	r12
800030f4:	ae 8c       	st.b	r7[0x0],r12
800030f6:	ec 0c 18 00 	cp.b	r12,r6
800030fa:	fe 98 ff b8 	brls	8000306a <promiscuous_mode+0x12>
800030fe:	cc eb       	rjmp	8000309a <promiscuous_mode+0x42>
		pal_trx_reg_write(address, 0x00);
		delay_ms(5);
	}
	pal_trx_reg_write(RG_XAH_CTRL_1, 0x02);	// AACK_PROM_MODE Promiscuous mode is enabled
	PAL_WAIT_1_US();
	pal_trx_reg_write(RG_CSMA_SEED_1, 0xD2); // AACK_DIS_ACK = 1 && AACK_FVN_MODE = 3
80003100:	e0 6b 00 d2 	mov	r11,210
80003104:	32 ec       	mov	r12,46
80003106:	f0 1f 00 06 	mcall	8000311c <promiscuous_mode+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000310a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000310e:	f0 ca ff ff 	sub	r10,r8,-1
80003112:	cd db       	rjmp	800030cc <promiscuous_mode+0x74>
80003114:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003118:	00 00       	add	r0,r0
8000311a:	06 75       	tst	r5,r3
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	2d 90       	sub	r0,-39

80003120 <reset>:
	RST_HIGH();
	
	delay_ms(1);
}
void reset()
{
80003120:	d4 01       	pushm	lr
	SLP_TR_LOW();
80003122:	32 7c       	mov	r12,39
80003124:	f0 1f 00 1e 	mcall	8000319c <reset+0x7c>
	RST_HIGH();
80003128:	32 8c       	mov	r12,40
8000312a:	f0 1f 00 1e 	mcall	800031a0 <reset+0x80>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000312e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003132:	f0 ca ff d2 	sub	r10,r8,-46
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003136:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000313a:	14 38       	cp.w	r8,r10
8000313c:	e0 88 00 08 	brls	8000314c <reset+0x2c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003140:	12 38       	cp.w	r8,r9
80003142:	fe 98 ff fa 	brls	80003136 <reset+0x16>
80003146:	12 3a       	cp.w	r10,r9
80003148:	c1 93       	brcs	8000317a <reset+0x5a>
8000314a:	cf 6b       	rjmp	80003136 <reset+0x16>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000314c:	12 38       	cp.w	r8,r9
8000314e:	e0 8b 00 16 	brhi	8000317a <reset+0x5a>
80003152:	12 3a       	cp.w	r10,r9
80003154:	c1 33       	brcs	8000317a <reset+0x5a>
80003156:	cf 0b       	rjmp	80003136 <reset+0x16>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003158:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000315c:	14 38       	cp.w	r8,r10
8000315e:	e0 88 00 08 	brls	8000316e <reset+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003162:	12 38       	cp.w	r8,r9
80003164:	fe 98 ff fa 	brls	80003158 <reset+0x38>
80003168:	12 3a       	cp.w	r10,r9
8000316a:	c1 03       	brcs	8000318a <reset+0x6a>
8000316c:	cf 6b       	rjmp	80003158 <reset+0x38>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000316e:	12 38       	cp.w	r8,r9
80003170:	e0 8b 00 0d 	brhi	8000318a <reset+0x6a>
80003174:	12 3a       	cp.w	r10,r9
80003176:	c0 a3       	brcs	8000318a <reset+0x6a>
80003178:	cf 0b       	rjmp	80003158 <reset+0x38>
	DELAY_US(400);
	RST_LOW();
8000317a:	32 8c       	mov	r12,40
8000317c:	f0 1f 00 08 	mcall	8000319c <reset+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003180:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003184:	f0 ca ff f8 	sub	r10,r8,-8
80003188:	ce 8b       	rjmp	80003158 <reset+0x38>
	DELAY_US(63);
	RST_LOW();
8000318a:	32 8c       	mov	r12,40
8000318c:	f0 1f 00 04 	mcall	8000319c <reset+0x7c>
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
80003190:	30 8b       	mov	r11,8
80003192:	30 3c       	mov	r12,3
80003194:	f0 1f 00 04 	mcall	800031a4 <reset+0x84>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
80003198:	d8 02       	popm	pc
8000319a:	00 00       	add	r0,r0
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	26 8a       	sub	r10,104
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	26 74       	sub	r4,103
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	2d 90       	sub	r0,-39

800031a8 <leer_temp>:
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
	return estado_usart2;
}

void leer_temp(char* temps)
{
800031a8:	eb cd 40 80 	pushm	r7,lr
800031ac:	20 6d       	sub	sp,24
800031ae:	18 97       	mov	r7,r12
	double temp = 0;
	twim_package_t packet_received;
	uint8_t read_data[2];
	float temperature = 0;
	
	read_data[0] = read_data[1] = 0;
800031b0:	30 08       	mov	r8,0
800031b2:	ba 98       	st.b	sp[0x1],r8
800031b4:	ba 88       	st.b	sp[0x0],r8
	
	status_code_t status;
	// TWI chip address to communicate with
	packet_received.chip = TARGET_ADDRESS;
800031b6:	34 89       	mov	r9,72
800031b8:	50 19       	stdsp	sp[0x4],r9
	
	// Where to find the data to be written
	packet_received.buffer = read_data;
800031ba:	50 3d       	stdsp	sp[0xc],sp
	
	// How many bytes do we want to read
	packet_received.length = AT30TSE_TEMPERATURE_REG_SIZE;
800031bc:	30 29       	mov	r9,2
800031be:	50 49       	stdsp	sp[0x10],r9
	
	//! Transfer direction
	//packet_received.read = true;
	
	// Registry Address
	packet_received.addr[0] = AT30TSE_TEMPERATURE_REG;
800031c0:	fb 68 00 08 	st.b	sp[8],r8
	
	// # of BYTES for Address
	packet_received.addr_length = 1;
800031c4:	30 18       	mov	r8,1
800031c6:	fb 68 00 0b 	st.b	sp[11],r8
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
800031ca:	fa cb ff fc 	sub	r11,sp,-4
800031ce:	fe 7c 44 00 	mov	r12,-48128
800031d2:	f0 1f 00 39 	mcall	800032b4 <leer_temp+0x10c>
	//print_dbg ("Reading data from TARGET\r\n");
	// Read data from TARGET
	status = twi_master_read(&AVR32_TWIM0, &packet_received);
	
	
	if (status == STATUS_OK)
800031d6:	c6 61       	brne	800032a2 <leer_temp+0xfa>
	{
		uint16_t data = (read_data[0] << 8) | read_data[1];
800031d8:	1b 89       	ld.ub	r9,sp[0x0]
800031da:	1b 98       	ld.ub	r8,sp[0x1]
800031dc:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800031e0:	5c 88       	casts.h	r8
		int8_t sign = 1;

		//Check if negative and clear sign bit.
		if (data & (1 << 15)) {
800031e2:	30 09       	mov	r9,0
800031e4:	f2 08 19 00 	cp.h	r8,r9
800031e8:	c0 35       	brlt	800031ee <leer_temp+0x46>
800031ea:	30 1b       	mov	r11,1
800031ec:	c0 58       	rjmp	800031f6 <leer_temp+0x4e>
			sign *= -1;
			data &= ~(1 << 15);
800031ee:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800031f2:	e0 6b 00 ff 	mov	r11,255
		}
		
		
		// Convert to temperature.
		switch (resolution) {
800031f6:	4b 19       	lddpc	r9,800032b8 <leer_temp+0x110>
800031f8:	13 89       	ld.ub	r9,r9[0x0]
800031fa:	30 1a       	mov	r10,1
800031fc:	f4 09 18 00 	cp.b	r9,r10
80003200:	c1 c0       	breq	80003238 <leer_temp+0x90>
80003202:	58 09       	cp.w	r9,0
80003204:	c0 b0       	breq	8000321a <leer_temp+0x72>
80003206:	30 2a       	mov	r10,2
80003208:	f4 09 18 00 	cp.b	r9,r10
8000320c:	c2 50       	breq	80003256 <leer_temp+0xae>
8000320e:	30 3a       	mov	r10,3
80003210:	f4 09 18 00 	cp.b	r9,r10
80003214:	c3 00       	breq	80003274 <leer_temp+0xcc>
80003216:	30 0c       	mov	r12,0
80003218:	c3 c8       	rjmp	80003290 <leer_temp+0xe8>
			case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
8000321a:	f1 d8 c0 e9 	bfextu	r8,r8,0x7,0x9
8000321e:	5c 6b       	casts.b	r11
80003220:	f0 0b 02 4c 	mul	r12,r8,r11
80003224:	f0 1f 00 26 	mcall	800032bc <leer_temp+0x114>
80003228:	30 08       	mov	r8,0
8000322a:	fc 19 3f e0 	movh	r9,0x3fe0
8000322e:	f0 1f 00 25 	mcall	800032c0 <leer_temp+0x118>
80003232:	f0 1f 00 25 	mcall	800032c4 <leer_temp+0x11c>
			break;
80003236:	c2 d8       	rjmp	80003290 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
80003238:	f1 d8 c0 ca 	bfextu	r8,r8,0x6,0xa
8000323c:	5c 6b       	casts.b	r11
8000323e:	f0 0b 02 4c 	mul	r12,r8,r11
80003242:	f0 1f 00 1f 	mcall	800032bc <leer_temp+0x114>
80003246:	30 08       	mov	r8,0
80003248:	fc 19 3f d0 	movh	r9,0x3fd0
8000324c:	f0 1f 00 1d 	mcall	800032c0 <leer_temp+0x118>
80003250:	f0 1f 00 1d 	mcall	800032c4 <leer_temp+0x11c>
			break;
80003254:	c1 e8       	rjmp	80003290 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
80003256:	f1 d8 c0 ab 	bfextu	r8,r8,0x5,0xb
8000325a:	5c 6b       	casts.b	r11
8000325c:	f0 0b 02 4c 	mul	r12,r8,r11
80003260:	f0 1f 00 17 	mcall	800032bc <leer_temp+0x114>
80003264:	30 08       	mov	r8,0
80003266:	fc 19 3f c0 	movh	r9,0x3fc0
8000326a:	f0 1f 00 16 	mcall	800032c0 <leer_temp+0x118>
8000326e:	f0 1f 00 16 	mcall	800032c4 <leer_temp+0x11c>
			break;
80003272:	c0 f8       	rjmp	80003290 <leer_temp+0xe8>

			case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
80003274:	f1 d8 c0 8c 	bfextu	r8,r8,0x4,0xc
80003278:	5c 6b       	casts.b	r11
8000327a:	f0 0b 02 4c 	mul	r12,r8,r11
8000327e:	f0 1f 00 10 	mcall	800032bc <leer_temp+0x114>
80003282:	30 08       	mov	r8,0
80003284:	fc 19 3f b0 	movh	r9,0x3fb0
80003288:	f0 1f 00 0e 	mcall	800032c0 <leer_temp+0x118>
8000328c:	f0 1f 00 0e 	mcall	800032c4 <leer_temp+0x11c>
			default:
			break;
		}
		
		
		sprintf(temps,"%.1f",temperature);
80003290:	f0 1f 00 0e 	mcall	800032c8 <leer_temp+0x120>
80003294:	bb 2b       	st.d	--sp,r10
80003296:	48 eb       	lddpc	r11,800032cc <leer_temp+0x124>
80003298:	0e 9c       	mov	r12,r7
8000329a:	f0 1f 00 0e 	mcall	800032d0 <leer_temp+0x128>
8000329e:	2f ed       	sub	sp,-8
800032a0:	c0 68       	rjmp	800032ac <leer_temp+0x104>
		
	}
	
	else
		sprintf(temps,"%s","X");
800032a2:	30 2a       	mov	r10,2
800032a4:	48 cb       	lddpc	r11,800032d4 <leer_temp+0x12c>
800032a6:	0e 9c       	mov	r12,r7
800032a8:	f0 1f 00 0c 	mcall	800032d8 <leer_temp+0x130>
}
800032ac:	2f ad       	sub	sp,-24
800032ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800032b2:	00 00       	add	r0,r0
800032b4:	80 00       	ld.sh	r0,r0[0x0]
800032b6:	22 30       	sub	r0,35
800032b8:	00 00       	add	r0,r0
800032ba:	00 26       	rsub	r6,r0
800032bc:	80 00       	ld.sh	r0,r0[0x0]
800032be:	3c 04       	mov	r4,-64
800032c0:	80 00       	ld.sh	r0,r0[0x0]
800032c2:	3a 28       	mov	r8,-94
800032c4:	80 00       	ld.sh	r0,r0[0x0]
800032c6:	3d 44       	mov	r4,-44
800032c8:	80 00       	ld.sh	r0,r0[0x0]
800032ca:	3c e4       	mov	r4,-50
800032cc:	80 00       	ld.sh	r0,r0[0x0]
800032ce:	97 ac       	st.w	r11[0x28],r12
800032d0:	80 00       	ld.sh	r0,r0[0x0]
800032d2:	3f 24       	mov	r4,-14
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	97 b4       	st.w	r11[0x2c],r4
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	3d ce       	mov	lr,-36

800032dc <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800032dc:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800032de:	18 9b       	mov	r11,r12
800032e0:	30 2c       	mov	r12,2
800032e2:	f0 1f 00 02 	mcall	800032e8 <sysclk_enable_pba_module+0xc>
}
800032e6:	d8 02       	popm	pc
800032e8:	80 00       	ld.sh	r0,r0[0x0]
800032ea:	2e 80       	sub	r0,-24

800032ec <rs_232_init_usart>:
	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
}


int rs_232_init_usart()
{
800032ec:	d4 01       	pushm	lr
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800032ee:	30 bc       	mov	r12,11
800032f0:	f0 1f 00 05 	mcall	80003304 <rs_232_init_usart+0x18>
	sysclk_enable_peripheral_clock(&AVR32_USART2);	
	int estado_usart2 = usart_init_rs232(&AVR32_USART2, &usart_opt, sysclk_get_peripheral_bus_hz(&AVR32_USART2));	
800032f4:	e0 7a c1 38 	mov	r10,115000
800032f8:	48 4b       	lddpc	r11,80003308 <rs_232_init_usart+0x1c>
800032fa:	fe 7c 38 00 	mov	r12,-51200
800032fe:	f0 1f 00 04 	mcall	8000330c <rs_232_init_usart+0x20>
	return estado_usart2;
}
80003302:	d8 02       	popm	pc
80003304:	80 00       	ld.sh	r0,r0[0x0]
80003306:	32 dc       	mov	r12,45
80003308:	00 00       	add	r0,r0
8000330a:	00 0c       	add	r12,r0
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	2c 84       	sub	r4,-56

80003310 <rs_232_init_pins>:
	//

}

void rs_232_init_pins(void)
{
80003310:	d4 01       	pushm	lr
80003312:	20 4d       	sub	sp,16
	gpio_map_t COMPORT0_GPIO_MAP =
	{
		{ USART2_RX_PIN, USART2_RX_FUNCTION },
		{ USART2_TX_PIN, USART2_TX_FUNCTION }
	};
80003314:	48 88       	lddpc	r8,80003334 <rs_232_init_pins+0x24>
80003316:	1a 9c       	mov	r12,sp
80003318:	70 09       	ld.w	r9,r8[0x0]
8000331a:	50 09       	stdsp	sp[0x0],r9
8000331c:	70 19       	ld.w	r9,r8[0x4]
8000331e:	50 19       	stdsp	sp[0x4],r9
80003320:	70 29       	ld.w	r9,r8[0x8]
80003322:	50 29       	stdsp	sp[0x8],r9
80003324:	70 38       	ld.w	r8,r8[0xc]
80003326:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module(COMPORT0_GPIO_MAP,sizeof(COMPORT0_GPIO_MAP) / sizeof (COMPORT0_GPIO_MAP[0]));
80003328:	30 2b       	mov	r11,2
8000332a:	f0 1f 00 04 	mcall	80003338 <rs_232_init_pins+0x28>
}
8000332e:	2f cd       	sub	sp,-16
80003330:	d8 02       	popm	pc
80003332:	00 00       	add	r0,r0
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	9b 88       	st.w	sp[0x20],r8
80003338:	80 00       	ld.sh	r0,r0[0x0]
8000333a:	25 8c       	sub	r12,88

8000333c <init_i2c_pins>:
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
}

void init_i2c_pins(void)
{
8000333c:	d4 01       	pushm	lr
8000333e:	20 4d       	sub	sp,16
	const gpio_map_t TWI_GPIO_MAP = {
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION},
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION}
	};
80003340:	48 88       	lddpc	r8,80003360 <init_i2c_pins+0x24>
80003342:	1a 9c       	mov	r12,sp
80003344:	70 09       	ld.w	r9,r8[0x0]
80003346:	50 09       	stdsp	sp[0x0],r9
80003348:	70 19       	ld.w	r9,r8[0x4]
8000334a:	50 19       	stdsp	sp[0x4],r9
8000334c:	70 29       	ld.w	r9,r8[0x8]
8000334e:	50 29       	stdsp	sp[0x8],r9
80003350:	70 38       	ld.w	r8,r8[0xc]
80003352:	50 38       	stdsp	sp[0xc],r8

	gpio_enable_module (TWI_GPIO_MAP,
80003354:	30 2b       	mov	r11,2
80003356:	f0 1f 00 04 	mcall	80003364 <init_i2c_pins+0x28>
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
8000335a:	2f cd       	sub	sp,-16
8000335c:	d8 02       	popm	pc
8000335e:	00 00       	add	r0,r0
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	97 98       	st.w	r11[0x24],r8
80003364:	80 00       	ld.sh	r0,r0[0x0]
80003366:	25 8c       	sub	r12,88

80003368 <spi_init_pins>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


void spi_init_pins(void)
{
80003368:	d4 01       	pushm	lr
8000336a:	20 8d       	sub	sp,32
	{
		{SPI_SCK_PIN,  SPI_SCK_FUNCTION },  // SPI Clock.
		{SPI_MISO_PIN, SPI_MISO_FUNCTION},  // MISO.
		{SPI_MOSI_PIN, SPI_MOSI_FUNCTION},  // MOSI.
		{SPI_CS_PIN, SPI_CS_FUNCTION}  // CS.
	};
8000336c:	48 d8       	lddpc	r8,800033a0 <spi_init_pins+0x38>
8000336e:	1a 9c       	mov	r12,sp
80003370:	70 09       	ld.w	r9,r8[0x0]
80003372:	50 09       	stdsp	sp[0x0],r9
80003374:	70 19       	ld.w	r9,r8[0x4]
80003376:	50 19       	stdsp	sp[0x4],r9
80003378:	70 29       	ld.w	r9,r8[0x8]
8000337a:	50 29       	stdsp	sp[0x8],r9
8000337c:	70 39       	ld.w	r9,r8[0xc]
8000337e:	50 39       	stdsp	sp[0xc],r9
80003380:	fa c9 ff f0 	sub	r9,sp,-16
80003384:	2f 08       	sub	r8,-16
80003386:	70 0a       	ld.w	r10,r8[0x0]
80003388:	93 0a       	st.w	r9[0x0],r10
8000338a:	70 1a       	ld.w	r10,r8[0x4]
8000338c:	93 1a       	st.w	r9[0x4],r10
8000338e:	70 2a       	ld.w	r10,r8[0x8]
80003390:	93 2a       	st.w	r9[0x8],r10
80003392:	70 38       	ld.w	r8,r8[0xc]
80003394:	93 38       	st.w	r9[0xc],r8

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
80003396:	30 4b       	mov	r11,4
80003398:	f0 1f 00 03 	mcall	800033a4 <spi_init_pins+0x3c>
}
8000339c:	2f 8d       	sub	sp,-32
8000339e:	d8 02       	popm	pc
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	9b 68       	st.w	sp[0x18],r8
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	25 8c       	sub	r12,88

800033a8 <led_init_pins>:
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
	spi_enable(AT86RFX_SPI);
}

void led_init_pins(void)
{
800033a8:	d4 01       	pushm	lr
		gpio_configure_pin(LED_1, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));	
800033aa:	30 5b       	mov	r11,5
800033ac:	30 4c       	mov	r12,4
800033ae:	f0 1f 00 06 	mcall	800033c4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_2, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800033b2:	30 5b       	mov	r11,5
800033b4:	30 bc       	mov	r12,11
800033b6:	f0 1f 00 04 	mcall	800033c4 <led_init_pins+0x1c>
		gpio_configure_pin(LED_3, (GPIO_DIR_OUTPUT | GPIO_PULL_UP));
800033ba:	30 5b       	mov	r11,5
800033bc:	32 9c       	mov	r12,41
800033be:	f0 1f 00 02 	mcall	800033c4 <led_init_pins+0x1c>
}
800033c2:	d8 02       	popm	pc
800033c4:	80 00       	ld.sh	r0,r0[0x0]
800033c6:	25 bc       	sub	r12,91

800033c8 <init_rf_pins>:
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
	}
} 

void init_rf_pins(void)
{
800033c8:	d4 01       	pushm	lr
	//Configuracion de los pines para SPI
	spi_init_pins();
800033ca:	f0 1f 00 08 	mcall	800033e8 <init_rf_pins+0x20>

	//PIN para interrupcion externa RF PA13-> IRQ2
	gpio_configure_pin (AVR32_PIN_PA13, (GPIO_DIR_INPUT | GPIO_PULL_UP)); // PA13 IRQ2
800033ce:	30 4b       	mov	r11,4
800033d0:	30 dc       	mov	r12,13
800033d2:	f0 1f 00 07 	mcall	800033ec <init_rf_pins+0x24>
	gpio_enable_module_pin(AVR32_EIC_EXTINT_2_0_PIN, AVR32_EIC_EXTINT_2_0_FUNCTION); // Habilito interrupcion externa con este pin
800033d6:	30 6b       	mov	r11,6
800033d8:	30 dc       	mov	r12,13
800033da:	f0 1f 00 06 	mcall	800033f0 <init_rf_pins+0x28>
	//	gpio_enable_pin_interrupt(AT86RFX_IRQ_PIN, GPIO_RISING_EDGE);
	gpio_clear_pin_interrupt_flag(AT86RFX_IRQ_PIN);
800033de:	30 dc       	mov	r12,13
800033e0:	f0 1f 00 05 	mcall	800033f4 <init_rf_pins+0x2c>

	// 	gpio_configure_pin(AT86RFX_RST_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	// 	gpio_configure_pin(AT86RFX_SLP_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	//

}
800033e4:	d8 02       	popm	pc
800033e6:	00 00       	add	r0,r0
800033e8:	80 00       	ld.sh	r0,r0[0x0]
800033ea:	33 68       	mov	r8,54
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	25 bc       	sub	r12,91
800033f0:	80 00       	ld.sh	r0,r0[0x0]
800033f2:	24 f8       	sub	r8,79
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	26 b6       	sub	r6,107

800033f8 <escribir_linea_pc>:
}



void escribir_linea_pc (char *str)
{
800033f8:	d4 01       	pushm	lr
	usart_write_line(&AVR32_USART2,str);
800033fa:	18 9b       	mov	r11,r12
800033fc:	fe 7c 38 00 	mov	r12,-51200
80003400:	f0 1f 00 02 	mcall	80003408 <escribir_linea_pc+0x10>
}
80003404:	d8 02       	popm	pc
80003406:	00 00       	add	r0,r0
80003408:	80 00       	ld.sh	r0,r0[0x0]
8000340a:	2c 34       	sub	r4,-61

8000340c <eic_int_handler2>:

// Manejo INTERRUPCION externa 2 (RF)

// PA13/GPIO 13/GLOC-OUT[0]/GLOC-IN[7]/TC0-A0/SCIF-GCLK[2]/PWMA-PWMA[13]/CAT-SMP/EIC-EXTINT[2]/CAT-CSA[0]/XIN32_2
static void eic_int_handler2(void)
{
8000340c:	eb cd 40 80 	pushm	r7,lr
	IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
80003410:	30 fc       	mov	r12,15
80003412:	f0 1f 00 15 	mcall	80003464 <eic_int_handler2+0x58>
	IRQ_STATUS &= 0x0C;
80003416:	49 57       	lddpc	r7,80003468 <eic_int_handler2+0x5c>
80003418:	e2 1c 00 0c 	andl	r12,0xc,COH
8000341c:	ae 8c       	st.b	r7[0x0],r12
	//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
	//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		
		// Interrupt Line must be cleared to enable
		eic_clear_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);
8000341e:	30 2b       	mov	r11,2
80003420:	fe 7c 24 00 	mov	r12,-56320
80003424:	f0 1f 00 12 	mcall	8000346c <eic_int_handler2+0x60>
		//IRQ2 Pin 26 MCU --> Pin 24 T
		//IRQ_STATUS = pal_trx_reg_read(RG_IRQ_STATUS);
		//variable1=pal_trx_reg_read(RG_IRQ_STATUS);
		//variable2=pal_trx_reg_read(RG_IRQ_MASK);
		switch (IRQ_STATUS)
80003428:	0f 88       	ld.ub	r8,r7[0x0]
8000342a:	30 49       	mov	r9,4
8000342c:	f2 08 18 00 	cp.b	r8,r9
80003430:	c1 10       	breq	80003452 <eic_int_handler2+0x46>
80003432:	30 89       	mov	r9,8
80003434:	f2 08 18 00 	cp.b	r8,r9
80003438:	c1 21       	brne	8000345c <eic_int_handler2+0x50>
		{
			case TRX_IRQ_TRX_END:
				escribir_linea_pc("\n\n --> Trama enviada :) :) \r\n");
8000343a:	48 ec       	lddpc	r12,80003470 <eic_int_handler2+0x64>
8000343c:	f0 1f 00 0e 	mcall	80003474 <eic_int_handler2+0x68>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80003440:	fe 78 40 00 	mov	r8,-49152
80003444:	70 2c       	ld.w	r12,r8[0x8]
				spi = (uint8_t) spi_get(AT86RFX_SPI);
80003446:	5c 5c       	castu.b	r12
80003448:	48 c8       	lddpc	r8,80003478 <eic_int_handler2+0x6c>
8000344a:	b0 8c       	st.b	r8[0x0],r12
				escribir_linea_pc(spi);
8000344c:	f0 1f 00 0a 	mcall	80003474 <eic_int_handler2+0x68>
				
			break;
80003450:	c0 68       	rjmp	8000345c <eic_int_handler2+0x50>
80003452:	fe 78 40 00 	mov	r8,-49152
80003456:	70 29       	ld.w	r9,r8[0x8]
			case TRX_IRQ_RX_START:
				spi = spi_get(AT86RFX_SPI);
80003458:	48 88       	lddpc	r8,80003478 <eic_int_handler2+0x6c>
8000345a:	b0 89       	st.b	r8[0x0],r9
				//escribir_linea_pc(rxTrama()); // creo q se tendria que leer la interrupcion de la SPI
			break;
		}
}
8000345c:	e3 cd 40 80 	ldm	sp++,r7,lr
80003460:	d6 03       	rete
80003462:	00 00       	add	r0,r0
80003464:	80 00       	ld.sh	r0,r0[0x0]
80003466:	2d fc       	sub	r12,-33
80003468:	00 00       	add	r0,r0
8000346a:	07 4a       	ld.w	r10,--r3
8000346c:	80 00       	ld.sh	r0,r0[0x0]
8000346e:	24 dc       	sub	r12,77
80003470:	80 00       	ld.sh	r0,r0[0x0]
80003472:	97 b8       	st.w	r11[0x2c],r8
80003474:	80 00       	ld.sh	r0,r0[0x0]
80003476:	33 f8       	mov	r8,63
80003478:	00 00       	add	r0,r0
8000347a:	07 49       	ld.w	r9,--r3

8000347c <modeConfig>:
	//cpu_irq_enable();
	Enable_global_interrupt();
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
}
void modeConfig()
{
8000347c:	d4 01       	pushm	lr
// cuando esta en modo de configuracion no hace nada, solo espera que le lleguen los datos

	while(cola_PC_nw < (pConfiguracion + 0x09));
8000347e:	49 48       	lddpc	r8,800034cc <modeConfig+0x50>
80003480:	11 89       	ld.ub	r9,r8[0x0]
80003482:	49 48       	lddpc	r8,800034d0 <modeConfig+0x54>
80003484:	11 8a       	ld.ub	r10,r8[0x0]
80003486:	f2 c8 ff f7 	sub	r8,r9,-9
8000348a:	10 3a       	cp.w	r10,r8
8000348c:	c1 e5       	brlt	800034c8 <modeConfig+0x4c>
	// comprobar CRC
	// solo si pasa el crc sigo la configuracion
	tramaConfiguracion.crc = cola_PC[pConfiguracion+8];
8000348e:	49 28       	lddpc	r8,800034d4 <modeConfig+0x58>
80003490:	49 2a       	lddpc	r10,800034d8 <modeConfig+0x5c>
80003492:	f4 09 00 09 	add	r9,r10,r9

	// fin comprobacion
	
	tramaConfiguracion.cmd = cola_PC[pConfiguracion+3];
80003496:	13 ba       	ld.ub	r10,r9[0x3]
80003498:	b0 9a       	st.b	r8[0x1],r10

	tramaConfiguracion.payload[0] = cola_PC[pConfiguracion+5];	
8000349a:	13 db       	ld.ub	r11,r9[0x5]
8000349c:	b0 ab       	st.b	r8[0x2],r11
	tramaConfiguracion.payload[1] = cola_PC[pConfiguracion+6];
8000349e:	13 eb       	ld.ub	r11,r9[0x6]
800034a0:	b0 bb       	st.b	r8[0x3],r11
	tramaConfiguracion.payload[2] = cola_PC[pConfiguracion+7];
800034a2:	13 f9       	ld.ub	r9,r9[0x7]
800034a4:	b0 c9       	st.b	r8[0x4],r9

	switch (tramaConfiguracion.cmd){
800034a6:	33 18       	mov	r8,49
800034a8:	f0 0a 18 00 	cp.b	r10,r8
800034ac:	c0 60       	breq	800034b8 <modeConfig+0x3c>
800034ae:	33 28       	mov	r8,50
800034b0:	f0 0a 18 00 	cp.b	r10,r8
800034b4:	c0 b1       	brne	800034ca <modeConfig+0x4e>
800034b6:	c0 58       	rjmp	800034c0 <modeConfig+0x44>
		case BAUDRATE:
			escribir_linea_pc("\r\nConfiguracion del baud rate\n");
800034b8:	48 9c       	lddpc	r12,800034dc <modeConfig+0x60>
800034ba:	f0 1f 00 0a 	mcall	800034e0 <modeConfig+0x64>
		break;
800034be:	d8 02       	popm	pc
		case TEMPERATURA:
			escribir_linea_pc("\r\nVeo la temperatura\n");
800034c0:	48 9c       	lddpc	r12,800034e4 <modeConfig+0x68>
800034c2:	f0 1f 00 08 	mcall	800034e0 <modeConfig+0x64>
800034c6:	d8 02       	popm	pc
800034c8:	c0 08       	rjmp	800034c8 <modeConfig+0x4c>
800034ca:	d8 02       	popm	pc
800034cc:	00 00       	add	r0,r0
800034ce:	06 38       	cp.w	r8,r3
800034d0:	00 00       	add	r0,r0
800034d2:	06 37       	cp.w	r7,r3
800034d4:	00 00       	add	r0,r0
800034d6:	06 78       	tst	r8,r3
800034d8:	00 00       	add	r0,r0
800034da:	06 80       	andn	r0,r3
800034dc:	80 00       	ld.sh	r0,r0[0x0]
800034de:	97 d8       	st.w	r11[0x34],r8
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	33 f8       	mov	r8,63
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	97 f8       	st.w	r11[0x3c],r8

800034e8 <init_AT86RF212>:
	}
	delay_ms(1);
}

uint8_t init_AT86RF212(void)
{
800034e8:	eb cd 40 80 	pushm	r7,lr
	escribir_linea_pc("\n Inicializando AT86RF212 \n\n");
800034ec:	4a dc       	lddpc	r12,800035a0 <init_AT86RF212+0xb8>
800034ee:	f0 1f 00 2e 	mcall	800035a4 <init_AT86RF212+0xbc>
	Disable_global_interrupt();
800034f2:	d3 03       	ssrf	0x10
	
	//SLP_TR_LOW();
	
	
	//estadoPorPc();
	reset();
800034f4:	f0 1f 00 2d 	mcall	800035a8 <init_AT86RF212+0xc0>
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x00);
800034f8:	30 0b       	mov	r11,0
800034fa:	30 ec       	mov	r12,14
800034fc:	f0 1f 00 2c 	mcall	800035ac <init_AT86RF212+0xc4>
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF); // Forzar el estado off
80003500:	30 3b       	mov	r11,3
80003502:	30 2c       	mov	r12,2
80003504:	f0 1f 00 2a 	mcall	800035ac <init_AT86RF212+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003508:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000350c:	f0 ca ff ff 	sub	r10,r8,-1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003510:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003514:	14 38       	cp.w	r8,r10
80003516:	e0 88 00 08 	brls	80003526 <init_AT86RF212+0x3e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000351a:	12 38       	cp.w	r8,r9
8000351c:	fe 98 ff fa 	brls	80003510 <init_AT86RF212+0x28>
80003520:	12 3a       	cp.w	r10,r9
80003522:	c0 73       	brcs	80003530 <init_AT86RF212+0x48>
80003524:	cf 6b       	rjmp	80003510 <init_AT86RF212+0x28>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003526:	12 38       	cp.w	r8,r9
80003528:	e0 8b 00 04 	brhi	80003530 <init_AT86RF212+0x48>
8000352c:	12 3a       	cp.w	r10,r9
8000352e:	cf 12       	brcc	80003510 <init_AT86RF212+0x28>
	DELAY_US(RST_PULSE_WIDTH_US); //tTR10
	
	//variable1=getStateAT86RF212();
	while(getStateAT86RF212()!= CMD_TRX_OFF); // espero el estado off
80003530:	30 87       	mov	r7,8
80003532:	f0 1f 00 20 	mcall	800035b0 <init_AT86RF212+0xc8>
80003536:	ee 0c 18 00 	cp.b	r12,r7
8000353a:	cf c1       	brne	80003532 <init_AT86RF212+0x4a>
	pal_trx_reg_write(RG_TRX_CTRL_0, 0x08);
8000353c:	30 8b       	mov	r11,8
8000353e:	30 3c       	mov	r12,3
80003540:	f0 1f 00 1b 	mcall	800035ac <init_AT86RF212+0xc4>
	//pal_trx_reg_write(RG_PHY_CC_CCA,||SR_SUB_MODE); // 914Mhz set channel ->

	pal_trx_reg_write(RG_TRX_CTRL_1, 0x2E); // 1 -> TX AUTO_CRC && SPI_CMD_MODE -> 3 && 1-> IRQ_MASK_MODE
80003544:	32 eb       	mov	r11,46
80003546:	30 4c       	mov	r12,4
80003548:	f0 1f 00 19 	mcall	800035ac <init_AT86RF212+0xc4>
	//PAL_WAIT_1_US();
	pal_trx_reg_write(RG_IRQ_MASK, 0x0C);
8000354c:	30 cb       	mov	r11,12
8000354e:	30 ec       	mov	r12,14
80003550:	f0 1f 00 17 	mcall	800035ac <init_AT86RF212+0xc4>
	//pal_trx_reg_write(RG_TRX_CTRL_2, 0x00);
	//PAL_WAIT_1_US();
	//pal_trx_reg_write(RG_XOSC_CTRL, 0x40); // manejo del cristal externo y capacitores
	//PAL_WAIT_1_US();
	promiscuous_mode();
80003554:	f0 1f 00 18 	mcall	800035b4 <init_AT86RF212+0xcc>
	pal_trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);// seteo el tran en 
80003558:	30 4b       	mov	r11,4
8000355a:	30 2c       	mov	r12,2
8000355c:	f0 1f 00 14 	mcall	800035ac <init_AT86RF212+0xc4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003560:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003564:	f0 ca ff f3 	sub	r10,r8,-13
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003568:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000356c:	14 38       	cp.w	r8,r10
8000356e:	e0 88 00 08 	brls	8000357e <init_AT86RF212+0x96>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003572:	12 38       	cp.w	r8,r9
80003574:	fe 98 ff fa 	brls	80003568 <init_AT86RF212+0x80>
80003578:	12 3a       	cp.w	r10,r9
8000357a:	c0 73       	brcs	80003588 <init_AT86RF212+0xa0>
8000357c:	cf 6b       	rjmp	80003568 <init_AT86RF212+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000357e:	12 38       	cp.w	r8,r9
80003580:	e0 8b 00 04 	brhi	80003588 <init_AT86RF212+0xa0>
80003584:	12 3a       	cp.w	r10,r9
80003586:	cf 12       	brcc	80003568 <init_AT86RF212+0x80>
// 	variable1=getStateAT86RF212();
	DELAY_US(TIME_TRX_OFF_PLL_ON );
 	while (getStateAT86RF212()!=CMD_PLL_ON);
80003588:	30 97       	mov	r7,9
8000358a:	f0 1f 00 0a 	mcall	800035b0 <init_AT86RF212+0xc8>
8000358e:	ee 0c 18 00 	cp.b	r12,r7
80003592:	cf c1       	brne	8000358a <init_AT86RF212+0xa2>
	//cpu_irq_enable();
	Enable_global_interrupt();
80003594:	d5 03       	csrf	0x10
	escribir_linea_pc("\n Terminando configuracion AT86RF212 \n\n");
80003596:	48 9c       	lddpc	r12,800035b8 <init_AT86RF212+0xd0>
80003598:	f0 1f 00 03 	mcall	800035a4 <init_AT86RF212+0xbc>
}
8000359c:	e3 cd 80 80 	ldm	sp++,r7,pc
800035a0:	80 00       	ld.sh	r0,r0[0x0]
800035a2:	98 10       	ld.sh	r0,r12[0x2]
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	33 f8       	mov	r8,63
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	31 20       	mov	r0,18
800035ac:	80 00       	ld.sh	r0,r0[0x0]
800035ae:	2d 90       	sub	r0,-39
800035b0:	80 00       	ld.sh	r0,r0[0x0]
800035b2:	2f 44       	sub	r4,-12
800035b4:	80 00       	ld.sh	r0,r0[0x0]
800035b6:	30 58       	mov	r8,5
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	98 30       	ld.sh	r0,r12[0x6]

800035bc <estadoPorPc>:
	RST_LOW();
	pal_trx_reg_write(RG_TRX_CTRL_0,0x08);
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
800035bc:	d4 01       	pushm	lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800035be:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800035c2:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035c6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035ca:	14 38       	cp.w	r8,r10
800035cc:	e0 88 00 08 	brls	800035dc <estadoPorPc+0x20>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035d0:	12 38       	cp.w	r8,r9
800035d2:	fe 98 ff fa 	brls	800035c6 <estadoPorPc+0xa>
800035d6:	12 3a       	cp.w	r10,r9
800035d8:	c5 13       	brcs	8000367a <estadoPorPc+0xbe>
800035da:	cf 6b       	rjmp	800035c6 <estadoPorPc+0xa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035dc:	12 38       	cp.w	r8,r9
800035de:	e0 8b 00 4e 	brhi	8000367a <estadoPorPc+0xbe>
800035e2:	12 3a       	cp.w	r10,r9
800035e4:	c4 b3       	brcs	8000367a <estadoPorPc+0xbe>
800035e6:	cf 0b       	rjmp	800035c6 <estadoPorPc+0xa>
	delay_ms(1);
	switch (getStateAT86RF212()){
		case P_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado ON\n");
800035e8:	4a 9c       	lddpc	r12,8000368c <estadoPorPc+0xd0>
800035ea:	f0 1f 00 2a 	mcall	80003690 <estadoPorPc+0xd4>
		break;
800035ee:	c3 18       	rjmp	80003650 <estadoPorPc+0x94>
		case BUSY_RX:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX\n");
800035f0:	4a 9c       	lddpc	r12,80003694 <estadoPorPc+0xd8>
800035f2:	f0 1f 00 28 	mcall	80003690 <estadoPorPc+0xd4>
		break;
800035f6:	c2 d8       	rjmp	80003650 <estadoPorPc+0x94>
		case RX_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX\n");
800035f8:	4a 8c       	lddpc	r12,80003698 <estadoPorPc+0xdc>
800035fa:	f0 1f 00 26 	mcall	80003690 <estadoPorPc+0xd4>
		break;
800035fe:	c2 98       	rjmp	80003650 <estadoPorPc+0x94>
		case TRX_OFF:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_OFF \n");
80003600:	4a 7c       	lddpc	r12,8000369c <estadoPorPc+0xe0>
80003602:	f0 1f 00 24 	mcall	80003690 <estadoPorPc+0xd4>
		break;
80003606:	c2 58       	rjmp	80003650 <estadoPorPc+0x94>
		case PLL_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado PLL_ON\n");
80003608:	4a 6c       	lddpc	r12,800036a0 <estadoPorPc+0xe4>
8000360a:	f0 1f 00 22 	mcall	80003690 <estadoPorPc+0xd4>
		break;
8000360e:	c2 18       	rjmp	80003650 <estadoPorPc+0x94>
		case TRX_SLEEP:
		escribir_linea_pc("\r\n AT86RF212 en estado TRX_SLEEP \n");
80003610:	4a 5c       	lddpc	r12,800036a4 <estadoPorPc+0xe8>
80003612:	f0 1f 00 20 	mcall	80003690 <estadoPorPc+0xd4>
		break;
80003616:	c1 d8       	rjmp	80003650 <estadoPorPc+0x94>
		case BUSY_RX_AACK:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_RX_AACK\n");
80003618:	4a 4c       	lddpc	r12,800036a8 <estadoPorPc+0xec>
8000361a:	f0 1f 00 1e 	mcall	80003690 <estadoPorPc+0xd4>
		break;
8000361e:	c1 98       	rjmp	80003650 <estadoPorPc+0x94>
		case BUSY_TX_ARET:
		escribir_linea_pc("\r\n AT86RF212 en estado BUSY_TX_ARET \n");
80003620:	4a 3c       	lddpc	r12,800036ac <estadoPorPc+0xf0>
80003622:	f0 1f 00 1c 	mcall	80003690 <estadoPorPc+0xd4>
		break;
80003626:	c1 58       	rjmp	80003650 <estadoPorPc+0x94>
		case RX_AACK_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON\n");
80003628:	4a 2c       	lddpc	r12,800036b0 <estadoPorPc+0xf4>
8000362a:	f0 1f 00 1a 	mcall	80003690 <estadoPorPc+0xd4>
		break;
8000362e:	c1 18       	rjmp	80003650 <estadoPorPc+0x94>
		case CMD_TX_ARET_ON:
		escribir_linea_pc("\r\n AT86RF212 en estado TX_ARET_ON\n");
80003630:	4a 1c       	lddpc	r12,800036b4 <estadoPorPc+0xf8>
80003632:	f0 1f 00 18 	mcall	80003690 <estadoPorPc+0xd4>
		case RX_ON_NOCLK :
		escribir_linea_pc("\r\n AT86RF212 en estado RX_ON_NOCLK \n");
80003636:	4a 1c       	lddpc	r12,800036b8 <estadoPorPc+0xfc>
80003638:	f0 1f 00 16 	mcall	80003690 <estadoPorPc+0xd4>
		case RX_AACK_ON_NOCLK:
		escribir_linea_pc("\r\n AT86RF212 en estado RX_AACK_ON_NOCLK \n");
8000363c:	4a 0c       	lddpc	r12,800036bc <estadoPorPc+0x100>
8000363e:	f0 1f 00 15 	mcall	80003690 <estadoPorPc+0xd4>
		case STATE_TRANSITION_IN_PROGRESS:
		escribir_linea_pc("\r\n :'(  STATE_TRANSITION_IN_PROGRESS ");
80003642:	4a 0c       	lddpc	r12,800036c0 <estadoPorPc+0x104>
80003644:	f0 1f 00 13 	mcall	80003690 <estadoPorPc+0xd4>
		break;
80003648:	c0 48       	rjmp	80003650 <estadoPorPc+0x94>
		
		default:
		escribir_linea_pc("\r\n estado no contemplado");
8000364a:	49 fc       	lddpc	r12,800036c4 <estadoPorPc+0x108>
8000364c:	f0 1f 00 11 	mcall	80003690 <estadoPorPc+0xd4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003650:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003654:	f0 ca ff 8d 	sub	r10,r8,-115
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003658:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000365c:	14 38       	cp.w	r8,r10
8000365e:	e0 88 00 08 	brls	8000366e <estadoPorPc+0xb2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003662:	12 38       	cp.w	r8,r9
80003664:	fe 98 ff fa 	brls	80003658 <estadoPorPc+0x9c>
80003668:	12 3a       	cp.w	r10,r9
8000366a:	c1 03       	brcs	8000368a <estadoPorPc+0xce>
8000366c:	cf 6b       	rjmp	80003658 <estadoPorPc+0x9c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000366e:	12 38       	cp.w	r8,r9
80003670:	e0 8b 00 0d 	brhi	8000368a <estadoPorPc+0xce>
80003674:	12 3a       	cp.w	r10,r9
80003676:	c0 a3       	brcs	8000368a <estadoPorPc+0xce>
80003678:	cf 0b       	rjmp	80003658 <estadoPorPc+0x9c>
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_TRX_OFF);
	
}
void estadoPorPc(){
	delay_ms(1);
	switch (getStateAT86RF212()){
8000367a:	f0 1f 00 14 	mcall	800036c8 <estadoPorPc+0x10c>
8000367e:	59 fc       	cp.w	r12,31
80003680:	fe 9b ff e5 	brhi	8000364a <estadoPorPc+0x8e>
80003684:	49 28       	lddpc	r8,800036cc <estadoPorPc+0x110>
80003686:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
8000368a:	d8 02       	popm	pc
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	98 58       	ld.sh	r8,r12[0xa]
80003690:	80 00       	ld.sh	r0,r0[0x0]
80003692:	33 f8       	mov	r8,63
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	98 74       	ld.sh	r4,r12[0xe]
80003698:	80 00       	ld.sh	r0,r0[0x0]
8000369a:	98 94       	ld.uh	r4,r12[0x2]
8000369c:	80 00       	ld.sh	r0,r0[0x0]
8000369e:	98 b0       	ld.uh	r0,r12[0x6]
800036a0:	80 00       	ld.sh	r0,r0[0x0]
800036a2:	98 d4       	ld.uh	r4,r12[0xa]
800036a4:	80 00       	ld.sh	r0,r0[0x0]
800036a6:	98 f4       	ld.uh	r4,r12[0xe]
800036a8:	80 00       	ld.sh	r0,r0[0x0]
800036aa:	99 18       	st.w	r12[0x4],r8
800036ac:	80 00       	ld.sh	r0,r0[0x0]
800036ae:	99 40       	st.w	r12[0x10],r0
800036b0:	80 00       	ld.sh	r0,r0[0x0]
800036b2:	99 68       	st.w	r12[0x18],r8
800036b4:	80 00       	ld.sh	r0,r0[0x0]
800036b6:	99 8c       	st.w	r12[0x20],r12
800036b8:	80 00       	ld.sh	r0,r0[0x0]
800036ba:	99 b0       	st.w	r12[0x2c],r0
800036bc:	80 00       	ld.sh	r0,r0[0x0]
800036be:	99 d8       	st.w	r12[0x34],r8
800036c0:	80 00       	ld.sh	r0,r0[0x0]
800036c2:	9a 04       	ld.sh	r4,sp[0x0]
800036c4:	80 00       	ld.sh	r0,r0[0x0]
800036c6:	9a 2c       	ld.sh	r12,sp[0x4]
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	2f 44       	sub	r4,-12
800036cc:	80 00       	ld.sh	r0,r0[0x0]
800036ce:	97 18       	st.w	r11[0x4],r8

800036d0 <init_i2c_module>:
	gpio_enable_module (TWI_GPIO_MAP,
			sizeof (TWI_GPIO_MAP) / sizeof (TWI_GPIO_MAP[0]));
			
}
void init_i2c_module(void)
{
800036d0:	d4 01       	pushm	lr
800036d2:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800036d4:	30 eb       	mov	r11,14
800036d6:	30 2c       	mov	r12,2
800036d8:	f0 1f 00 0e 	mcall	80003710 <init_i2c_module+0x40>
	{
		.pba_hz = sysclk_get_cpu_hz(),
		.speed = 10000,
		.chip = TARGET_ADDRESS,
		.smbus = 0,
	};
800036dc:	e0 78 c1 38 	mov	r8,115000
800036e0:	50 08       	stdsp	sp[0x0],r8
800036e2:	e0 68 27 10 	mov	r8,10000
800036e6:	50 18       	stdsp	sp[0x4],r8
800036e8:	34 88       	mov	r8,72
800036ea:	50 28       	stdsp	sp[0x8],r8
800036ec:	30 08       	mov	r8,0
800036ee:	fb 68 00 0c 	st.b	sp[12],r8
	
	// Initialize as master.
	int status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
800036f2:	1a 9b       	mov	r11,sp
800036f4:	fe 7c 44 00 	mov	r12,-48128
800036f8:	f0 1f 00 07 	mcall	80003714 <init_i2c_module+0x44>
	
	// Check whether TARGET device is connected
	
	if (status == STATUS_OK) {
800036fc:	c0 51       	brne	80003706 <init_i2c_module+0x36>
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tPASS\r\n");
800036fe:	48 7c       	lddpc	r12,80003718 <init_i2c_module+0x48>
80003700:	f0 1f 00 07 	mcall	8000371c <init_i2c_module+0x4c>
80003704:	c0 48       	rjmp	8000370c <init_i2c_module+0x3c>
	} else {
		// display test result to user
		escribir_linea_pc("Sensor Temp:\tFAILED\r\n");
80003706:	48 7c       	lddpc	r12,80003720 <init_i2c_module+0x50>
80003708:	f0 1f 00 05 	mcall	8000371c <init_i2c_module+0x4c>
	}
} 
8000370c:	2f cd       	sub	sp,-16
8000370e:	d8 02       	popm	pc
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	2e 80       	sub	r0,-24
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	23 40       	sub	r0,52
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	9a ec       	ld.uh	r12,sp[0xc]
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	33 f8       	mov	r8,63
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	9b 00       	st.w	sp[0x0],r0

80003724 <spi_init_module>:
	};

	gpio_enable_module( SPI_GPIO_MAP,sizeof (SPI_GPIO_MAP) / sizeof (SPI_GPIO_MAP[0]));
}
void spi_init_module(void)
{
80003724:	eb cd 40 e0 	pushm	r5-r7,lr
80003728:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 0
	};
8000372a:	4a 48       	lddpc	r8,800037b8 <spi_init_module+0x94>
8000372c:	1a 95       	mov	r5,sp
8000372e:	70 09       	ld.w	r9,r8[0x0]
80003730:	50 09       	stdsp	sp[0x0],r9
80003732:	70 19       	ld.w	r9,r8[0x4]
80003734:	50 19       	stdsp	sp[0x4],r9
80003736:	70 29       	ld.w	r9,r8[0x8]
80003738:	50 29       	stdsp	sp[0x8],r9
8000373a:	70 38       	ld.w	r8,r8[0xc]
8000373c:	50 38       	stdsp	sp[0xc],r8
8000373e:	30 db       	mov	r11,13
80003740:	30 2c       	mov	r12,2
80003742:	f0 1f 00 1f 	mcall	800037bc <spi_init_module+0x98>
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003746:	fe 77 40 00 	mov	r7,-49152
8000374a:	e0 68 00 80 	mov	r8,128
8000374e:	8f 08       	st.w	r7[0x0],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
	spi->MR.mstr = 1;
80003750:	6e 18       	ld.w	r8,r7[0x4]
80003752:	30 19       	mov	r9,1
80003754:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003758:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
	spi->MR.modfdis = 1;
8000375a:	6e 18       	ld.w	r8,r7[0x4]
8000375c:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003760:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
	spi->MR.llb = 0;
80003762:	6e 18       	ld.w	r8,r7[0x4]
80003764:	30 06       	mov	r6,0
80003766:	f1 d6 d0 e1 	bfins	r8,r6,0x7,0x1
8000376a:	8f 18       	st.w	r7[0x4],r8
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,
		uint8_t chip_select)
{
	spi->MR.pcs = chip_select;
8000376c:	6e 18       	ld.w	r8,r7[0x4]
8000376e:	30 f9       	mov	r9,15
80003770:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003774:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
	spi->MR.ps = 0;
80003776:	6e 18       	ld.w	r8,r7[0x4]
80003778:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
8000377c:	8f 18       	st.w	r7[0x4],r8
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
	spi->MR.pcsdec = 0;
8000377e:	6e 18       	ld.w	r8,r7[0x4]
80003780:	f1 d6 d0 41 	bfins	r8,r6,0x2,0x1
80003784:	8f 18       	st.w	r7[0x4],r8
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi, uint8_t delay)
{
	spi->MR.dlybcs = delay;
80003786:	6e 18       	ld.w	r8,r7[0x4]
80003788:	f1 d6 d3 08 	bfins	r8,r6,0x18,0x8
8000378c:	8f 18       	st.w	r7[0x4],r8

	spi_master_init(AT86RFX_SPI);
	
	spiOptions.reg= SPI_CS;
8000378e:	30 38       	mov	r8,3
80003790:	ba 88       	st.b	sp[0x0],r8
	spi_setupChipReg(AT86RFX_SPI, &spiOptions, sysclk_get_peripheral_bus_hz(&AVR32_SPI));
80003792:	e0 7a c1 38 	mov	r10,115000
80003796:	1a 9b       	mov	r11,sp
80003798:	0e 9c       	mov	r12,r7
8000379a:	f0 1f 00 0a 	mcall	800037c0 <spi_init_module+0x9c>
	spi_selectionMode(AT86RFX_SPI, 0, 0, 0);
8000379e:	0c 99       	mov	r9,r6
800037a0:	0c 9a       	mov	r10,r6
800037a2:	0c 9b       	mov	r11,r6
800037a4:	0e 9c       	mov	r12,r7
800037a6:	f0 1f 00 08 	mcall	800037c4 <spi_init_module+0xa0>
	spi_enable(AT86RFX_SPI);
800037aa:	0e 9c       	mov	r12,r7
800037ac:	f0 1f 00 07 	mcall	800037c8 <spi_init_module+0xa4>
}
800037b0:	2f cd       	sub	sp,-16
800037b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800037b6:	00 00       	add	r0,r0
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	9b 98       	st.w	sp[0x24],r8
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	2e 80       	sub	r0,-24
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	28 a8       	sub	r8,-118
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	28 08       	sub	r8,-128
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	29 60       	sub	r0,-106

800037cc <main>:
	}
	return;
}

int main (void)
{
800037cc:	d4 31       	pushm	r0-r7,lr
800037ce:	20 3d       	sub	sp,12
	char temps[10] = "\0";
800037d0:	4e a8       	lddpc	r8,80003978 <main+0x1ac>
800037d2:	90 08       	ld.sh	r8,r8[0x0]
800037d4:	ba 08       	st.h	sp[0x0],r8
800037d6:	30 8a       	mov	r10,8
800037d8:	30 0b       	mov	r11,0
800037da:	fa cc ff fe 	sub	r12,sp,-2
800037de:	f0 1f 00 68 	mcall	8000397c <main+0x1b0>
	int i=0;
	
	//board_init();
	// configuracion del clock del sistema ver archivo "conf_clock.h"	
	sysclk_init();	
800037e2:	f0 1f 00 68 	mcall	80003980 <main+0x1b4>
	
	//Configuracion de los pines para los LEDS 
	led_init_pins();
800037e6:	f0 1f 00 68 	mcall	80003984 <main+0x1b8>

	//Configuracion de los pines para el RS-232
	rs_232_init_pins();
800037ea:	f0 1f 00 68 	mcall	80003988 <main+0x1bc>
	
	//Configuracion pins para RF
	init_rf_pins();
800037ee:	f0 1f 00 68 	mcall	8000398c <main+0x1c0>
	
	//Inicializacion del SPI
	spi_init_module();
800037f2:	f0 1f 00 68 	mcall	80003990 <main+0x1c4>
	
	//Inicializacion de la USART	
	int estado_rs_232 = rs_232_init_usart();
800037f6:	f0 1f 00 68 	mcall	80003994 <main+0x1c8>


static void inicializar_interrupciones()
{
	// Disable all interrupts.
	Disable_global_interrupt();
800037fa:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	INTC_init_interrupts();
800037fc:	f0 1f 00 67 	mcall	80003998 <main+0x1cc>
	 * EXAMPLE_USART_IRQ is the IRQ of the interrupt handler to register.
	 * AVR32_INTC_INT0 is the interrupt priority level to assign to the
	 * group of this IRQ.
	 */
	
	INTC_register_interrupt(&usart_int_handler_RS232, AVR32_USART2_IRQ, AVR32_INTC_INT0);
80003800:	30 0a       	mov	r10,0
80003802:	e0 6b 02 20 	mov	r11,544
80003806:	4e 6c       	lddpc	r12,8000399c <main+0x1d0>
80003808:	f0 1f 00 66 	mcall	800039a0 <main+0x1d4>

	INTC_register_interrupt(&eic_int_handler2, AVR32_EIC_IRQ_2, AVR32_INTC_INT2);
8000380c:	30 2a       	mov	r10,2
8000380e:	e0 6b 01 61 	mov	r11,353
80003812:	4e 5c       	lddpc	r12,800039a4 <main+0x1d8>
80003814:	f0 1f 00 63 	mcall	800039a0 <main+0x1d4>
	
	// Register the TC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003818:	30 3a       	mov	r10,3
8000381a:	e0 6b 03 40 	mov	r11,832
8000381e:	4e 3c       	lddpc	r12,800039a8 <main+0x1dc>
80003820:	f0 1f 00 60 	mcall	800039a0 <main+0x1d4>
	
	// INTERRUPCIONES EXTERNAS (#2)
	eic_init(&AVR32_EIC, &eic_options2,1);
80003824:	30 1a       	mov	r10,1
80003826:	4e 2b       	lddpc	r11,800039ac <main+0x1e0>
80003828:	fe 7c 24 00 	mov	r12,-56320
8000382c:	f0 1f 00 61 	mcall	800039b0 <main+0x1e4>

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, AVR32_EIC_INT2);
80003830:	30 2b       	mov	r11,2
80003832:	fe 7c 24 00 	mov	r12,-56320
80003836:	f0 1f 00 60 	mcall	800039b4 <main+0x1e8>
	eic_enable_interrupt_line(&AVR32_EIC, AVR32_EIC_INT2);	
8000383a:	30 2b       	mov	r11,2
8000383c:	fe 7c 24 00 	mov	r12,-56320
80003840:	f0 1f 00 5e 	mcall	800039b8 <main+0x1ec>
	
	// Enable USART Rx interrupt.
	(&AVR32_USART2)->ier = AVR32_USART_IER_RXRDY_MASK;
80003844:	30 19       	mov	r9,1
80003846:	fe 78 38 00 	mov	r8,-51200
8000384a:	91 29       	st.w	r8[0x8],r9
	
	// Enable all interrupts.
	Enable_global_interrupt();
8000384c:	d5 03       	csrf	0x10
		
	//Inicializacion de las interrupciones
	inicializar_interrupciones();
	
	// Inicializacion del timer
	tc_init(tc);
8000384e:	4d c8       	lddpc	r8,800039bc <main+0x1f0>
80003850:	70 07       	ld.w	r7,r8[0x0]
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003852:	4d cb       	lddpc	r11,800039c0 <main+0x1f4>
80003854:	0e 9c       	mov	r12,r7
80003856:	f0 1f 00 5c 	mcall	800039c4 <main+0x1f8>
	 * We want: (1 / (fPBA / 128)) * RC = 200 ms, hence RC = (fPBA / 128) / 5
	 * to get an interrupt every 10 ms.
	 */
	
		
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL,((sysclk_get_pba_hz() / 128) /5));
8000385a:	e0 6a 00 b3 	mov	r10,179
8000385e:	30 0b       	mov	r11,0
80003860:	0e 9c       	mov	r12,r7
80003862:	f0 1f 00 5a 	mcall	800039c8 <main+0x1fc>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003866:	4d aa       	lddpc	r10,800039cc <main+0x200>
80003868:	30 0b       	mov	r11,0
8000386a:	0e 9c       	mov	r12,r7
8000386c:	f0 1f 00 59 	mcall	800039d0 <main+0x204>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003870:	30 0b       	mov	r11,0
80003872:	0e 9c       	mov	r12,r7
80003874:	f0 1f 00 58 	mcall	800039d4 <main+0x208>
// 	while (at86rfx_init() != AT86RFX_SUCCESS) {
//  	 		escribir_linea_pc("Modulo RF:\tFAILED\r\n");
//  	 	}
//  		escribir_linea_pc("Modulo RF:\tPASS\r\n");
 
	register_value = pal_trx_reg_read(RG_PART_NUM);//pedido de identificacion del modulo. Debe devolver 0x07
80003878:	31 cc       	mov	r12,28
8000387a:	f0 1f 00 58 	mcall	800039d8 <main+0x20c>
8000387e:	4d 88       	lddpc	r8,800039dc <main+0x210>
80003880:	b0 8c       	st.b	r8[0x0],r12
	
	if (register_value == PART_NUM_AT86RF212) 
80003882:	30 78       	mov	r8,7
80003884:	f0 0c 18 00 	cp.b	r12,r8
80003888:	c0 51       	brne	80003892 <main+0xc6>
 		escribir_linea_pc("Modulo RF:\tPASS\r\n");
8000388a:	4d 6c       	lddpc	r12,800039e0 <main+0x214>
8000388c:	f0 1f 00 56 	mcall	800039e4 <main+0x218>
80003890:	c0 48       	rjmp	80003898 <main+0xcc>
	else
		escribir_linea_pc("Modulo RF:\tFAILED\r\n"); 			
80003892:	4d 6c       	lddpc	r12,800039e8 <main+0x21c>
80003894:	f0 1f 00 54 	mcall	800039e4 <main+0x218>
	escribir_linea_pc(register_value);
80003898:	4d 18       	lddpc	r8,800039dc <main+0x210>
8000389a:	11 8c       	ld.ub	r12,r8[0x0]
8000389c:	f0 1f 00 52 	mcall	800039e4 <main+0x218>
	
	//Inicializacion del sensor de temp
	
	init_i2c_pins();
800038a0:	f0 1f 00 53 	mcall	800039ec <main+0x220>
	init_i2c_module();
800038a4:	f0 1f 00 53 	mcall	800039f0 <main+0x224>
	// inicializacion del tran
	//pal_trx_reg_write(RG_TRX_STATE,CMD_FORCE_PLL_ON);

	

	init_AT86RF212();
800038a8:	f0 1f 00 53 	mcall	800039f4 <main+0x228>
	//------------------Fin de conguracion
	
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r\n");
800038ac:	4d 3c       	lddpc	r12,800039f8 <main+0x22c>
800038ae:	f0 1f 00 4e 	mcall	800039e4 <main+0x218>
	
	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);// seteo el tran en RX
800038b2:	30 6b       	mov	r11,6
800038b4:	30 2c       	mov	r12,2
800038b6:	f0 1f 00 52 	mcall	800039fc <main+0x230>
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
800038ba:	4d 27       	lddpc	r7,80003a00 <main+0x234>
800038bc:	4d 24       	lddpc	r4,80003a04 <main+0x238>
		{
			if (cola_PC[cola_PC_nr] == 't')
800038be:	4d 31       	lddpc	r1,80003a08 <main+0x23c>
800038c0:	37 40       	mov	r0,116
				escribir_linea_pc(temps);
				escribir_linea_pc("*C\r\n");
			}
			cola_PC_nr++;
			
			if (cola_PC_nr >= tamano_cola)
800038c2:	3c 73       	mov	r3,-57
				cola_PC_nr = 0;
				
			if (configuracion && (cola_PC_nr >= pConfiguracion + 4))
800038c4:	4d 22       	lddpc	r2,80003a0c <main+0x240>
800038c6:	30 05       	mov	r5,0
	escribir_linea_pc("TESIS TUCUMAN 2015\n\r\n");
	
	pal_trx_reg_write(RG_TRX_STATE, CMD_RX_ON);// seteo el tran en RX
	while(true)
	{
		if (cola_PC_nr != cola_PC_nw )
800038c8:	0f 88       	ld.ub	r8,r7[0x0]
800038ca:	09 89       	ld.ub	r9,r4[0x0]
800038cc:	f0 09 18 00 	cp.b	r9,r8
800038d0:	c3 b0       	breq	80003946 <main+0x17a>
		{
			if (cola_PC[cola_PC_nr] == 't')
800038d2:	e2 08 07 08 	ld.ub	r8,r1[r8]
800038d6:	e0 08 18 00 	cp.b	r8,r0
800038da:	c0 d1       	brne	800038f4 <main+0x128>
			{
				leer_temp(temps);
800038dc:	1a 9c       	mov	r12,sp
800038de:	f0 1f 00 4d 	mcall	80003a10 <main+0x244>
				escribir_linea_pc("Temp: ");
800038e2:	4c dc       	lddpc	r12,80003a14 <main+0x248>
800038e4:	f0 1f 00 40 	mcall	800039e4 <main+0x218>
				escribir_linea_pc(temps);
800038e8:	1a 9c       	mov	r12,sp
800038ea:	f0 1f 00 3f 	mcall	800039e4 <main+0x218>
				escribir_linea_pc("*C\r\n");
800038ee:	4c bc       	lddpc	r12,80003a18 <main+0x24c>
800038f0:	f0 1f 00 3d 	mcall	800039e4 <main+0x218>
			}
			cola_PC_nr++;
800038f4:	0f 88       	ld.ub	r8,r7[0x0]
800038f6:	2f f8       	sub	r8,-1
			
			if (cola_PC_nr >= tamano_cola)
				cola_PC_nr = 0;
800038f8:	f0 03 18 00 	cp.b	r3,r8
800038fc:	ea 08 17 30 	movlo	r8,r5
80003900:	ae 88       	st.b	r7[0x0],r8
				
			if (configuracion && (cola_PC_nr >= pConfiguracion + 4))
80003902:	05 88       	ld.ub	r8,r2[0x0]
80003904:	ea 08 18 00 	cp.b	r8,r5
80003908:	c1 f0       	breq	80003946 <main+0x17a>
8000390a:	4c 5a       	lddpc	r10,80003a1c <main+0x250>
8000390c:	15 88       	ld.ub	r8,r10[0x0]
8000390e:	0f 8a       	ld.ub	r10,r7[0x0]
80003910:	f0 c9 ff fc 	sub	r9,r8,-4
80003914:	12 3a       	cp.w	r10,r9
80003916:	c1 85       	brlt	80003946 <main+0x17a>
			{
				if ((cola_PC[pConfiguracion] & cola_PC[pConfiguracion+1] & cola_PC[pConfiguracion+2]) == 0x01)
80003918:	e2 08 00 09 	add	r9,r1,r8
8000391c:	13 9a       	ld.ub	r10,r9[0x1]
8000391e:	13 a9       	ld.ub	r9,r9[0x2]
80003920:	f5 e9 00 09 	and	r9,r10,r9
80003924:	e2 08 07 0a 	ld.ub	r10,r1[r8]
80003928:	14 69       	and	r9,r10
8000392a:	30 1a       	mov	r10,1
8000392c:	f4 09 18 00 	cp.b	r9,r10
80003930:	c0 a1       	brne	80003944 <main+0x178>
				{
					if (cola_PC[pConfiguracion+3] == ADDRESS)
80003932:	e2 08 00 08 	add	r8,r1,r8
80003936:	11 b9       	ld.ub	r9,r8[0x3]
80003938:	33 18       	mov	r8,49
8000393a:	f0 09 18 00 	cp.b	r9,r8
8000393e:	c0 31       	brne	80003944 <main+0x178>
					{
						modeConfig();
80003940:	f0 1f 00 38 	mcall	80003a20 <main+0x254>
					}
					
				}
				configuracion = false;
80003944:	a4 85       	st.b	r2[0x0],r5
		}
		//at86rfx_tx_frame(tx_buffer);
		//txTramaManual(tx_buffer);
		//txTramachibi(tx_buffer);
		//txTramachibi(tx_buffer);
		estadoPorPc();
80003946:	f0 1f 00 38 	mcall	80003a24 <main+0x258>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000394a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000394e:	e0 69 e0 9c 	mov	r9,57500
80003952:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003956:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000395a:	14 38       	cp.w	r8,r10
8000395c:	e0 88 00 08 	brls	8000396c <main+0x1a0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003960:	12 38       	cp.w	r8,r9
80003962:	fe 98 ff fa 	brls	80003956 <main+0x18a>
80003966:	12 3a       	cp.w	r10,r9
80003968:	cb 03       	brcs	800038c8 <main+0xfc>
8000396a:	cf 6b       	rjmp	80003956 <main+0x18a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000396c:	12 38       	cp.w	r8,r9
8000396e:	fe 9b ff ad 	brhi	800038c8 <main+0xfc>
80003972:	12 3a       	cp.w	r10,r9
80003974:	ca a3       	brcs	800038c8 <main+0xfc>
80003976:	cf 0b       	rjmp	80003956 <main+0x18a>
80003978:	80 00       	ld.sh	r0,r0[0x0]
8000397a:	2f 38       	sub	r8,-13
8000397c:	80 00       	ld.sh	r0,r0[0x0]
8000397e:	3f 16       	mov	r6,-15
80003980:	80 00       	ld.sh	r0,r0[0x0]
80003982:	2e 70       	sub	r0,-25
80003984:	80 00       	ld.sh	r0,r0[0x0]
80003986:	33 a8       	mov	r8,58
80003988:	80 00       	ld.sh	r0,r0[0x0]
8000398a:	33 10       	mov	r0,49
8000398c:	80 00       	ld.sh	r0,r0[0x0]
8000398e:	33 c8       	mov	r8,60
80003990:	80 00       	ld.sh	r0,r0[0x0]
80003992:	37 24       	mov	r4,114
80003994:	80 00       	ld.sh	r0,r0[0x0]
80003996:	32 ec       	mov	r12,46
80003998:	80 00       	ld.sh	r0,r0[0x0]
8000399a:	27 5c       	sub	r12,117
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	2f c8       	sub	r8,-4
800039a0:	80 00       	ld.sh	r0,r0[0x0]
800039a2:	26 dc       	sub	r12,109
800039a4:	80 00       	ld.sh	r0,r0[0x0]
800039a6:	34 0c       	mov	r12,64
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	2f 58       	sub	r8,-11
800039ac:	00 00       	add	r0,r0
800039ae:	00 20       	rsub	r0,r0
800039b0:	80 00       	ld.sh	r0,r0[0x0]
800039b2:	23 f8       	sub	r8,63
800039b4:	80 00       	ld.sh	r0,r0[0x0]
800039b6:	24 c8       	sub	r8,76
800039b8:	80 00       	ld.sh	r0,r0[0x0]
800039ba:	24 d2       	sub	r2,77
800039bc:	00 00       	add	r0,r0
800039be:	00 18       	sub	r8,r0
800039c0:	80 00       	ld.sh	r0,r0[0x0]
800039c2:	9b a8       	st.w	sp[0x28],r8
800039c4:	80 00       	ld.sh	r0,r0[0x0]
800039c6:	29 66       	sub	r6,-106
800039c8:	80 00       	ld.sh	r0,r0[0x0]
800039ca:	2a 38       	sub	r8,-93
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	97 a8       	st.w	r11[0x28],r8
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	2a 6c       	sub	r12,-90
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	2a 02       	sub	r2,-96
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	2d fc       	sub	r12,-33
800039dc:	00 00       	add	r0,r0
800039de:	06 35       	cp.w	r5,r3
800039e0:	80 00       	ld.sh	r0,r0[0x0]
800039e2:	9b 18       	st.w	sp[0x4],r8
800039e4:	80 00       	ld.sh	r0,r0[0x0]
800039e6:	33 f8       	mov	r8,63
800039e8:	80 00       	ld.sh	r0,r0[0x0]
800039ea:	9b 2c       	st.w	sp[0x8],r12
800039ec:	80 00       	ld.sh	r0,r0[0x0]
800039ee:	33 3c       	mov	r12,51
800039f0:	80 00       	ld.sh	r0,r0[0x0]
800039f2:	36 d0       	mov	r0,109
800039f4:	80 00       	ld.sh	r0,r0[0x0]
800039f6:	34 e8       	mov	r8,78
800039f8:	80 00       	ld.sh	r0,r0[0x0]
800039fa:	9b 40       	st.w	sp[0x10],r0
800039fc:	80 00       	ld.sh	r0,r0[0x0]
800039fe:	2d 90       	sub	r0,-39
80003a00:	00 00       	add	r0,r0
80003a02:	06 36       	cp.w	r6,r3
80003a04:	00 00       	add	r0,r0
80003a06:	06 37       	cp.w	r7,r3
80003a08:	00 00       	add	r0,r0
80003a0a:	06 80       	andn	r0,r3
80003a0c:	00 00       	add	r0,r0
80003a0e:	06 34       	cp.w	r4,r3
80003a10:	80 00       	ld.sh	r0,r0[0x0]
80003a12:	31 a8       	mov	r8,26
80003a14:	80 00       	ld.sh	r0,r0[0x0]
80003a16:	9b 58       	st.w	sp[0x14],r8
80003a18:	80 00       	ld.sh	r0,r0[0x0]
80003a1a:	9b 60       	st.w	sp[0x18],r0
80003a1c:	00 00       	add	r0,r0
80003a1e:	06 38       	cp.w	r8,r3
80003a20:	80 00       	ld.sh	r0,r0[0x0]
80003a22:	34 7c       	mov	r12,71
80003a24:	80 00       	ld.sh	r0,r0[0x0]
80003a26:	35 bc       	mov	r12,91

80003a28 <__avr32_f64_mul>:
80003a28:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003a2c:	e0 80 00 dc 	breq	80003be4 <__avr32_f64_mul_op1_zero>
80003a30:	d4 21       	pushm	r4-r7,lr
80003a32:	f7 e9 20 0e 	eor	lr,r11,r9
80003a36:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003a3a:	30 15       	mov	r5,1
80003a3c:	c4 30       	breq	80003ac2 <__avr32_f64_mul_op1_subnormal>
80003a3e:	ab 6b       	lsl	r11,0xa
80003a40:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003a44:	ab 6a       	lsl	r10,0xa
80003a46:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003a4a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003a4e:	c5 c0       	breq	80003b06 <__avr32_f64_mul_op2_subnormal>
80003a50:	a1 78       	lsl	r8,0x1
80003a52:	5c f9       	rol	r9
80003a54:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003a58:	e0 47 07 ff 	cp.w	r7,2047
80003a5c:	c7 70       	breq	80003b4a <__avr32_f64_mul_op_nan_or_inf>
80003a5e:	e0 46 07 ff 	cp.w	r6,2047
80003a62:	c7 40       	breq	80003b4a <__avr32_f64_mul_op_nan_or_inf>
80003a64:	ee 06 00 0c 	add	r12,r7,r6
80003a68:	e0 2c 03 fe 	sub	r12,1022
80003a6c:	f6 08 06 44 	mulu.d	r4,r11,r8
80003a70:	f4 09 07 44 	macu.d	r4,r10,r9
80003a74:	f4 08 06 46 	mulu.d	r6,r10,r8
80003a78:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003a7c:	08 07       	add	r7,r4
80003a7e:	f4 05 00 4a 	adc	r10,r10,r5
80003a82:	5c 0b       	acr	r11
80003a84:	ed bb 00 14 	bld	r11,0x14
80003a88:	c0 50       	breq	80003a92 <__avr32_f64_mul+0x6a>
80003a8a:	a1 77       	lsl	r7,0x1
80003a8c:	5c fa       	rol	r10
80003a8e:	5c fb       	rol	r11
80003a90:	20 1c       	sub	r12,1
80003a92:	58 0c       	cp.w	r12,0
80003a94:	e0 8a 00 6f 	brle	80003b72 <__avr32_f64_mul_res_subnormal>
80003a98:	e0 4c 07 ff 	cp.w	r12,2047
80003a9c:	e0 84 00 9c 	brge	80003bd4 <__avr32_f64_mul_res_inf>
80003aa0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003aa4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003aa8:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003aac:	ee 17 80 00 	eorh	r7,0x8000
80003ab0:	f1 b7 04 20 	satu	r7,0x1
80003ab4:	0e 0a       	add	r10,r7
80003ab6:	5c 0b       	acr	r11
80003ab8:	ed be 00 1f 	bld	lr,0x1f
80003abc:	ef bb 00 1f 	bst	r11,0x1f
80003ac0:	d8 22       	popm	r4-r7,pc

80003ac2 <__avr32_f64_mul_op1_subnormal>:
80003ac2:	e4 1b 00 0f 	andh	r11,0xf
80003ac6:	f4 0c 12 00 	clz	r12,r10
80003aca:	f6 06 12 00 	clz	r6,r11
80003ace:	f7 bc 03 e1 	sublo	r12,-31
80003ad2:	f8 06 17 30 	movlo	r6,r12
80003ad6:	f7 b6 02 01 	subhs	r6,1
80003ada:	e0 46 00 20 	cp.w	r6,32
80003ade:	c0 d4       	brge	80003af8 <__avr32_f64_mul_op1_subnormal+0x36>
80003ae0:	ec 0c 11 20 	rsub	r12,r6,32
80003ae4:	f6 06 09 4b 	lsl	r11,r11,r6
80003ae8:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003aec:	18 4b       	or	r11,r12
80003aee:	f4 06 09 4a 	lsl	r10,r10,r6
80003af2:	20 b6       	sub	r6,11
80003af4:	0c 17       	sub	r7,r6
80003af6:	ca ab       	rjmp	80003a4a <__avr32_f64_mul+0x22>
80003af8:	f4 06 09 4b 	lsl	r11,r10,r6
80003afc:	c6 40       	breq	80003bc4 <__avr32_f64_mul_res_zero>
80003afe:	30 0a       	mov	r10,0
80003b00:	20 b6       	sub	r6,11
80003b02:	0c 17       	sub	r7,r6
80003b04:	ca 3b       	rjmp	80003a4a <__avr32_f64_mul+0x22>

80003b06 <__avr32_f64_mul_op2_subnormal>:
80003b06:	e4 19 00 0f 	andh	r9,0xf
80003b0a:	f0 0c 12 00 	clz	r12,r8
80003b0e:	f2 05 12 00 	clz	r5,r9
80003b12:	f7 bc 03 ea 	sublo	r12,-22
80003b16:	f8 05 17 30 	movlo	r5,r12
80003b1a:	f7 b5 02 0a 	subhs	r5,10
80003b1e:	e0 45 00 20 	cp.w	r5,32
80003b22:	c0 d4       	brge	80003b3c <__avr32_f64_mul_op2_subnormal+0x36>
80003b24:	ea 0c 11 20 	rsub	r12,r5,32
80003b28:	f2 05 09 49 	lsl	r9,r9,r5
80003b2c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003b30:	18 49       	or	r9,r12
80003b32:	f0 05 09 48 	lsl	r8,r8,r5
80003b36:	20 25       	sub	r5,2
80003b38:	0a 16       	sub	r6,r5
80003b3a:	c8 fb       	rjmp	80003a58 <__avr32_f64_mul+0x30>
80003b3c:	f0 05 09 49 	lsl	r9,r8,r5
80003b40:	c4 20       	breq	80003bc4 <__avr32_f64_mul_res_zero>
80003b42:	30 08       	mov	r8,0
80003b44:	20 25       	sub	r5,2
80003b46:	0a 16       	sub	r6,r5
80003b48:	c8 8b       	rjmp	80003a58 <__avr32_f64_mul+0x30>

80003b4a <__avr32_f64_mul_op_nan_or_inf>:
80003b4a:	e4 19 00 0f 	andh	r9,0xf
80003b4e:	e4 1b 00 0f 	andh	r11,0xf
80003b52:	14 4b       	or	r11,r10
80003b54:	10 49       	or	r9,r8
80003b56:	e0 47 07 ff 	cp.w	r7,2047
80003b5a:	c0 91       	brne	80003b6c <__avr32_f64_mul_op1_not_naninf>
80003b5c:	58 0b       	cp.w	r11,0
80003b5e:	c3 81       	brne	80003bce <__avr32_f64_mul_res_nan>
80003b60:	e0 46 07 ff 	cp.w	r6,2047
80003b64:	c3 81       	brne	80003bd4 <__avr32_f64_mul_res_inf>
80003b66:	58 09       	cp.w	r9,0
80003b68:	c3 60       	breq	80003bd4 <__avr32_f64_mul_res_inf>
80003b6a:	c3 28       	rjmp	80003bce <__avr32_f64_mul_res_nan>

80003b6c <__avr32_f64_mul_op1_not_naninf>:
80003b6c:	58 09       	cp.w	r9,0
80003b6e:	c3 30       	breq	80003bd4 <__avr32_f64_mul_res_inf>
80003b70:	c2 f8       	rjmp	80003bce <__avr32_f64_mul_res_nan>

80003b72 <__avr32_f64_mul_res_subnormal>:
80003b72:	5c 3c       	neg	r12
80003b74:	2f fc       	sub	r12,-1
80003b76:	f1 bc 04 c0 	satu	r12,0x6
80003b7a:	e0 4c 00 20 	cp.w	r12,32
80003b7e:	c1 14       	brge	80003ba0 <__avr32_f64_mul_res_subnormal+0x2e>
80003b80:	f8 08 11 20 	rsub	r8,r12,32
80003b84:	0e 46       	or	r6,r7
80003b86:	ee 0c 0a 47 	lsr	r7,r7,r12
80003b8a:	f4 08 09 49 	lsl	r9,r10,r8
80003b8e:	12 47       	or	r7,r9
80003b90:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003b94:	f6 08 09 49 	lsl	r9,r11,r8
80003b98:	12 4a       	or	r10,r9
80003b9a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003b9e:	c8 3b       	rjmp	80003aa4 <__avr32_f64_mul+0x7c>
80003ba0:	f8 08 11 20 	rsub	r8,r12,32
80003ba4:	f9 b9 00 00 	moveq	r9,0
80003ba8:	c0 30       	breq	80003bae <__avr32_f64_mul_res_subnormal+0x3c>
80003baa:	f6 08 09 49 	lsl	r9,r11,r8
80003bae:	0e 46       	or	r6,r7
80003bb0:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003bb4:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003bb8:	f3 ea 10 07 	or	r7,r9,r10
80003bbc:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003bc0:	30 0b       	mov	r11,0
80003bc2:	c7 1b       	rjmp	80003aa4 <__avr32_f64_mul+0x7c>

80003bc4 <__avr32_f64_mul_res_zero>:
80003bc4:	1c 9b       	mov	r11,lr
80003bc6:	e6 1b 80 00 	andh	r11,0x8000,COH
80003bca:	30 0a       	mov	r10,0
80003bcc:	d8 22       	popm	r4-r7,pc

80003bce <__avr32_f64_mul_res_nan>:
80003bce:	3f fb       	mov	r11,-1
80003bd0:	3f fa       	mov	r10,-1
80003bd2:	d8 22       	popm	r4-r7,pc

80003bd4 <__avr32_f64_mul_res_inf>:
80003bd4:	f0 6b 00 00 	mov	r11,-1048576
80003bd8:	ed be 00 1f 	bld	lr,0x1f
80003bdc:	ef bb 00 1f 	bst	r11,0x1f
80003be0:	30 0a       	mov	r10,0
80003be2:	d8 22       	popm	r4-r7,pc

80003be4 <__avr32_f64_mul_op1_zero>:
80003be4:	f7 e9 20 0b 	eor	r11,r11,r9
80003be8:	e6 1b 80 00 	andh	r11,0x8000,COH
80003bec:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003bf0:	e0 4c 07 ff 	cp.w	r12,2047
80003bf4:	5e 1c       	retne	r12
80003bf6:	3f fa       	mov	r10,-1
80003bf8:	3f fb       	mov	r11,-1
80003bfa:	5e fc       	retal	r12

80003bfc <__avr32_u32_to_f64>:
80003bfc:	f8 cb 00 00 	sub	r11,r12,0
80003c00:	30 0c       	mov	r12,0
80003c02:	c0 38       	rjmp	80003c08 <__avr32_s32_to_f64+0x4>

80003c04 <__avr32_s32_to_f64>:
80003c04:	18 9b       	mov	r11,r12
80003c06:	5c 4b       	abs	r11
80003c08:	30 0a       	mov	r10,0
80003c0a:	5e 0b       	reteq	r11
80003c0c:	d4 01       	pushm	lr
80003c0e:	e0 69 04 1e 	mov	r9,1054
80003c12:	f6 08 12 00 	clz	r8,r11
80003c16:	c1 70       	breq	80003c44 <__avr32_s32_to_f64+0x40>
80003c18:	c0 c3       	brcs	80003c30 <__avr32_s32_to_f64+0x2c>
80003c1a:	f0 0e 11 20 	rsub	lr,r8,32
80003c1e:	f6 08 09 4b 	lsl	r11,r11,r8
80003c22:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003c26:	1c 4b       	or	r11,lr
80003c28:	f4 08 09 4a 	lsl	r10,r10,r8
80003c2c:	10 19       	sub	r9,r8
80003c2e:	c0 b8       	rjmp	80003c44 <__avr32_s32_to_f64+0x40>
80003c30:	f4 08 12 00 	clz	r8,r10
80003c34:	f9 b8 03 00 	movlo	r8,0
80003c38:	f7 b8 02 e0 	subhs	r8,-32
80003c3c:	f4 08 09 4b 	lsl	r11,r10,r8
80003c40:	30 0a       	mov	r10,0
80003c42:	10 19       	sub	r9,r8
80003c44:	58 09       	cp.w	r9,0
80003c46:	e0 89 00 30 	brgt	80003ca6 <__avr32_s32_to_f64+0xa2>
80003c4a:	5c 39       	neg	r9
80003c4c:	2f f9       	sub	r9,-1
80003c4e:	e0 49 00 36 	cp.w	r9,54
80003c52:	c0 43       	brcs	80003c5a <__avr32_s32_to_f64+0x56>
80003c54:	30 0b       	mov	r11,0
80003c56:	30 0a       	mov	r10,0
80003c58:	c2 68       	rjmp	80003ca4 <__avr32_s32_to_f64+0xa0>
80003c5a:	2f 69       	sub	r9,-10
80003c5c:	f2 08 11 20 	rsub	r8,r9,32
80003c60:	e0 49 00 20 	cp.w	r9,32
80003c64:	c0 b2       	brcc	80003c7a <__avr32_s32_to_f64+0x76>
80003c66:	f4 08 09 4e 	lsl	lr,r10,r8
80003c6a:	f6 08 09 48 	lsl	r8,r11,r8
80003c6e:	f4 09 0a 4a 	lsr	r10,r10,r9
80003c72:	f6 09 0a 4b 	lsr	r11,r11,r9
80003c76:	10 4b       	or	r11,r8
80003c78:	c0 88       	rjmp	80003c88 <__avr32_s32_to_f64+0x84>
80003c7a:	f6 08 09 4e 	lsl	lr,r11,r8
80003c7e:	14 4e       	or	lr,r10
80003c80:	16 9a       	mov	r10,r11
80003c82:	30 0b       	mov	r11,0
80003c84:	f4 09 0a 4a 	lsr	r10,r10,r9
80003c88:	ed ba 00 00 	bld	r10,0x0
80003c8c:	c0 92       	brcc	80003c9e <__avr32_s32_to_f64+0x9a>
80003c8e:	1c 7e       	tst	lr,lr
80003c90:	c0 41       	brne	80003c98 <__avr32_s32_to_f64+0x94>
80003c92:	ed ba 00 01 	bld	r10,0x1
80003c96:	c0 42       	brcc	80003c9e <__avr32_s32_to_f64+0x9a>
80003c98:	2f fa       	sub	r10,-1
80003c9a:	f7 bb 02 ff 	subhs	r11,-1
80003c9e:	5c fc       	rol	r12
80003ca0:	5d 0b       	ror	r11
80003ca2:	5d 0a       	ror	r10
80003ca4:	d8 02       	popm	pc
80003ca6:	e0 68 03 ff 	mov	r8,1023
80003caa:	ed ba 00 0b 	bld	r10,0xb
80003cae:	f7 b8 00 ff 	subeq	r8,-1
80003cb2:	10 0a       	add	r10,r8
80003cb4:	5c 0b       	acr	r11
80003cb6:	f7 b9 03 fe 	sublo	r9,-2
80003cba:	e0 49 07 ff 	cp.w	r9,2047
80003cbe:	c0 55       	brlt	80003cc8 <__avr32_s32_to_f64+0xc4>
80003cc0:	30 0a       	mov	r10,0
80003cc2:	fc 1b ff e0 	movh	r11,0xffe0
80003cc6:	c0 c8       	rjmp	80003cde <__floatsidf_return_op1>
80003cc8:	ed bb 00 1f 	bld	r11,0x1f
80003ccc:	f7 b9 01 01 	subne	r9,1
80003cd0:	ab 9a       	lsr	r10,0xb
80003cd2:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003cd6:	a1 7b       	lsl	r11,0x1
80003cd8:	ab 9b       	lsr	r11,0xb
80003cda:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003cde <__floatsidf_return_op1>:
80003cde:	a1 7c       	lsl	r12,0x1
80003ce0:	5d 0b       	ror	r11
80003ce2:	d8 02       	popm	pc

80003ce4 <__avr32_f32_to_f64>:
80003ce4:	f8 0b 15 01 	lsl	r11,r12,0x1
80003ce8:	f9 ba 00 00 	moveq	r10,0
80003cec:	5e 0b       	reteq	r11
80003cee:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003cf2:	e0 49 00 ff 	cp.w	r9,255
80003cf6:	c1 e0       	breq	80003d32 <__extendsfdf_return_op1+0x6>
80003cf8:	a7 7b       	lsl	r11,0x7
80003cfa:	30 0a       	mov	r10,0
80003cfc:	58 09       	cp.w	r9,0
80003cfe:	f7 b9 00 ff 	subeq	r9,-1
80003d02:	5f 18       	srne	r8
80003d04:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003d08:	fe 39 fc 80 	sub	r9,-896
80003d0c:	f6 08 12 00 	clz	r8,r11
80003d10:	10 19       	sub	r9,r8
80003d12:	f6 08 09 4b 	lsl	r11,r11,r8
80003d16:	ed bb 00 1f 	bld	r11,0x1f
80003d1a:	f7 b9 01 01 	subne	r9,1
80003d1e:	ab 9a       	lsr	r10,0xb
80003d20:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003d24:	a1 7b       	lsl	r11,0x1
80003d26:	ab 9b       	lsr	r11,0xb
80003d28:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003d2c <__extendsfdf_return_op1>:
80003d2c:	a1 7c       	lsl	r12,0x1
80003d2e:	5d 0b       	ror	r11
80003d30:	5e fb       	retal	r11
80003d32:	fc 1a ff e0 	movh	r10,0xffe0
80003d36:	a9 6b       	lsl	r11,0x8
80003d38:	f9 bb 01 ff 	movne	r11,-1
80003d3c:	f4 0b 17 00 	moveq	r11,r10
80003d40:	30 0a       	mov	r10,0
80003d42:	cf 5b       	rjmp	80003d2c <__extendsfdf_return_op1>

80003d44 <__avr32_f64_to_f32>:
80003d44:	f6 09 15 01 	lsl	r9,r11,0x1
80003d48:	b5 99       	lsr	r9,0x15
80003d4a:	5e 0d       	reteq	0
80003d4c:	f6 08 15 0a 	lsl	r8,r11,0xa
80003d50:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003d54:	ab 6a       	lsl	r10,0xa
80003d56:	5c 3a       	neg	r10
80003d58:	5c fc       	rol	r12
80003d5a:	e0 49 07 ff 	cp.w	r9,2047
80003d5e:	c1 a0       	breq	80003d92 <__truncdfsf_return_op1+0x6>
80003d60:	e0 29 03 80 	sub	r9,896
80003d64:	bf bc       	sbr	r12,0x1f
80003d66:	58 09       	cp.w	r9,0
80003d68:	e0 8a 00 1a 	brle	80003d9c <__truncdfsf_return_op1+0x10>
80003d6c:	37 fa       	mov	r10,127
80003d6e:	ed bc 00 08 	bld	r12,0x8
80003d72:	f7 ba 00 ff 	subeq	r10,-1
80003d76:	14 0c       	add	r12,r10
80003d78:	f7 b9 03 fe 	sublo	r9,-2
80003d7c:	ed bc 00 1f 	bld	r12,0x1f
80003d80:	f7 b9 01 01 	subne	r9,1
80003d84:	f8 0c 16 07 	lsr	r12,r12,0x7
80003d88:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003d8c <__truncdfsf_return_op1>:
80003d8c:	a1 7b       	lsl	r11,0x1
80003d8e:	5d 0c       	ror	r12
80003d90:	5e fc       	retal	r12
80003d92:	bf dc       	cbr	r12,0x1f
80003d94:	5e 1e       	retne	-1
80003d96:	fc 1c 7f 80 	movh	r12,0x7f80
80003d9a:	5e fc       	retal	r12
80003d9c:	f2 09 11 01 	rsub	r9,r9,1
80003da0:	59 99       	cp.w	r9,25
80003da2:	f9 bc 02 00 	movhs	r12,0
80003da6:	c1 32       	brcc	80003dcc <__truncdfsf_return_op1+0x40>
80003da8:	f2 0a 11 20 	rsub	r10,r9,32
80003dac:	f8 0a 09 4a 	lsl	r10,r12,r10
80003db0:	5f 1a       	srne	r10
80003db2:	f8 09 0a 4c 	lsr	r12,r12,r9
80003db6:	14 4c       	or	r12,r10
80003db8:	37 fa       	mov	r10,127
80003dba:	ed bc 00 08 	bld	r12,0x8
80003dbe:	f7 ba 00 ff 	subeq	r10,-1
80003dc2:	14 0c       	add	r12,r10
80003dc4:	f8 0c 16 07 	lsr	r12,r12,0x7
80003dc8:	a1 7b       	lsl	r11,0x1
80003dca:	5d 0c       	ror	r12
80003dcc:	5e fc       	retal	r12

80003dce <memcpy>:
80003dce:	58 8a       	cp.w	r10,8
80003dd0:	c2 f5       	brlt	80003e2e <memcpy+0x60>
80003dd2:	f9 eb 10 09 	or	r9,r12,r11
80003dd6:	e2 19 00 03 	andl	r9,0x3,COH
80003dda:	e0 81 00 97 	brne	80003f08 <memcpy+0x13a>
80003dde:	e0 4a 00 20 	cp.w	r10,32
80003de2:	c3 b4       	brge	80003e58 <memcpy+0x8a>
80003de4:	f4 08 14 02 	asr	r8,r10,0x2
80003de8:	f0 09 11 08 	rsub	r9,r8,8
80003dec:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003df0:	76 69       	ld.w	r9,r11[0x18]
80003df2:	99 69       	st.w	r12[0x18],r9
80003df4:	76 59       	ld.w	r9,r11[0x14]
80003df6:	99 59       	st.w	r12[0x14],r9
80003df8:	76 49       	ld.w	r9,r11[0x10]
80003dfa:	99 49       	st.w	r12[0x10],r9
80003dfc:	76 39       	ld.w	r9,r11[0xc]
80003dfe:	99 39       	st.w	r12[0xc],r9
80003e00:	76 29       	ld.w	r9,r11[0x8]
80003e02:	99 29       	st.w	r12[0x8],r9
80003e04:	76 19       	ld.w	r9,r11[0x4]
80003e06:	99 19       	st.w	r12[0x4],r9
80003e08:	76 09       	ld.w	r9,r11[0x0]
80003e0a:	99 09       	st.w	r12[0x0],r9
80003e0c:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003e10:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003e14:	e0 1a 00 03 	andl	r10,0x3
80003e18:	f4 0a 11 04 	rsub	r10,r10,4
80003e1c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003e20:	17 a9       	ld.ub	r9,r11[0x2]
80003e22:	b0 a9       	st.b	r8[0x2],r9
80003e24:	17 99       	ld.ub	r9,r11[0x1]
80003e26:	b0 99       	st.b	r8[0x1],r9
80003e28:	17 89       	ld.ub	r9,r11[0x0]
80003e2a:	b0 89       	st.b	r8[0x0],r9
80003e2c:	5e fc       	retal	r12
80003e2e:	f4 0a 11 09 	rsub	r10,r10,9
80003e32:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003e36:	17 f9       	ld.ub	r9,r11[0x7]
80003e38:	b8 f9       	st.b	r12[0x7],r9
80003e3a:	17 e9       	ld.ub	r9,r11[0x6]
80003e3c:	b8 e9       	st.b	r12[0x6],r9
80003e3e:	17 d9       	ld.ub	r9,r11[0x5]
80003e40:	b8 d9       	st.b	r12[0x5],r9
80003e42:	17 c9       	ld.ub	r9,r11[0x4]
80003e44:	b8 c9       	st.b	r12[0x4],r9
80003e46:	17 b9       	ld.ub	r9,r11[0x3]
80003e48:	b8 b9       	st.b	r12[0x3],r9
80003e4a:	17 a9       	ld.ub	r9,r11[0x2]
80003e4c:	b8 a9       	st.b	r12[0x2],r9
80003e4e:	17 99       	ld.ub	r9,r11[0x1]
80003e50:	b8 99       	st.b	r12[0x1],r9
80003e52:	17 89       	ld.ub	r9,r11[0x0]
80003e54:	b8 89       	st.b	r12[0x0],r9
80003e56:	5e fc       	retal	r12
80003e58:	eb cd 40 c0 	pushm	r6-r7,lr
80003e5c:	18 99       	mov	r9,r12
80003e5e:	22 0a       	sub	r10,32
80003e60:	b7 07       	ld.d	r6,r11++
80003e62:	b3 26       	st.d	r9++,r6
80003e64:	b7 07       	ld.d	r6,r11++
80003e66:	b3 26       	st.d	r9++,r6
80003e68:	b7 07       	ld.d	r6,r11++
80003e6a:	b3 26       	st.d	r9++,r6
80003e6c:	b7 07       	ld.d	r6,r11++
80003e6e:	b3 26       	st.d	r9++,r6
80003e70:	22 0a       	sub	r10,32
80003e72:	cf 74       	brge	80003e60 <memcpy+0x92>
80003e74:	2f 0a       	sub	r10,-16
80003e76:	c0 65       	brlt	80003e82 <memcpy+0xb4>
80003e78:	b7 07       	ld.d	r6,r11++
80003e7a:	b3 26       	st.d	r9++,r6
80003e7c:	b7 07       	ld.d	r6,r11++
80003e7e:	b3 26       	st.d	r9++,r6
80003e80:	21 0a       	sub	r10,16
80003e82:	5c 3a       	neg	r10
80003e84:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003e88:	d7 03       	nop
80003e8a:	d7 03       	nop
80003e8c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003e90:	f3 66 00 0e 	st.b	r9[14],r6
80003e94:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003e98:	f3 66 00 0d 	st.b	r9[13],r6
80003e9c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003ea0:	f3 66 00 0c 	st.b	r9[12],r6
80003ea4:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003ea8:	f3 66 00 0b 	st.b	r9[11],r6
80003eac:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003eb0:	f3 66 00 0a 	st.b	r9[10],r6
80003eb4:	f7 36 00 09 	ld.ub	r6,r11[9]
80003eb8:	f3 66 00 09 	st.b	r9[9],r6
80003ebc:	f7 36 00 08 	ld.ub	r6,r11[8]
80003ec0:	f3 66 00 08 	st.b	r9[8],r6
80003ec4:	f7 36 00 07 	ld.ub	r6,r11[7]
80003ec8:	f3 66 00 07 	st.b	r9[7],r6
80003ecc:	f7 36 00 06 	ld.ub	r6,r11[6]
80003ed0:	f3 66 00 06 	st.b	r9[6],r6
80003ed4:	f7 36 00 05 	ld.ub	r6,r11[5]
80003ed8:	f3 66 00 05 	st.b	r9[5],r6
80003edc:	f7 36 00 04 	ld.ub	r6,r11[4]
80003ee0:	f3 66 00 04 	st.b	r9[4],r6
80003ee4:	f7 36 00 03 	ld.ub	r6,r11[3]
80003ee8:	f3 66 00 03 	st.b	r9[3],r6
80003eec:	f7 36 00 02 	ld.ub	r6,r11[2]
80003ef0:	f3 66 00 02 	st.b	r9[2],r6
80003ef4:	f7 36 00 01 	ld.ub	r6,r11[1]
80003ef8:	f3 66 00 01 	st.b	r9[1],r6
80003efc:	f7 36 00 00 	ld.ub	r6,r11[0]
80003f00:	f3 66 00 00 	st.b	r9[0],r6
80003f04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003f08:	20 1a       	sub	r10,1
80003f0a:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003f0e:	f8 0a 0b 09 	st.b	r12[r10],r9
80003f12:	cf b1       	brne	80003f08 <memcpy+0x13a>
80003f14:	5e fc       	retal	r12

80003f16 <memset>:
80003f16:	18 98       	mov	r8,r12
80003f18:	c0 38       	rjmp	80003f1e <memset+0x8>
80003f1a:	10 cb       	st.b	r8++,r11
80003f1c:	20 1a       	sub	r10,1
80003f1e:	58 0a       	cp.w	r10,0
80003f20:	cf d1       	brne	80003f1a <memset+0x4>
80003f22:	5e fc       	retal	r12

80003f24 <sprintf>:
80003f24:	d4 01       	pushm	lr
80003f26:	21 7d       	sub	sp,92
80003f28:	e0 68 ff ff 	mov	r8,65535
80003f2c:	ea 18 7f ff 	orh	r8,0x7fff
80003f30:	50 58       	stdsp	sp[0x14],r8
80003f32:	50 28       	stdsp	sp[0x8],r8
80003f34:	e0 68 02 08 	mov	r8,520
80003f38:	ba 68       	st.h	sp[0xc],r8
80003f3a:	3f f8       	mov	r8,-1
80003f3c:	ba 78       	st.h	sp[0xe],r8
80003f3e:	e0 68 01 18 	mov	r8,280
80003f42:	50 4c       	stdsp	sp[0x10],r12
80003f44:	16 9a       	mov	r10,r11
80003f46:	50 0c       	stdsp	sp[0x0],r12
80003f48:	fa c9 ff a0 	sub	r9,sp,-96
80003f4c:	70 0c       	ld.w	r12,r8[0x0]
80003f4e:	1a 9b       	mov	r11,sp
80003f50:	c9 cd       	rcall	80004288 <_vfprintf_r>
80003f52:	30 09       	mov	r9,0
80003f54:	40 08       	lddsp	r8,sp[0x0]
80003f56:	b0 89       	st.b	r8[0x0],r9
80003f58:	2e 9d       	sub	sp,-92
80003f5a:	d8 02       	popm	pc

80003f5c <get_arg>:
80003f5c:	d4 31       	pushm	r0-r7,lr
80003f5e:	20 8d       	sub	sp,32
80003f60:	fa c4 ff bc 	sub	r4,sp,-68
80003f64:	50 4b       	stdsp	sp[0x10],r11
80003f66:	68 2e       	ld.w	lr,r4[0x8]
80003f68:	50 58       	stdsp	sp[0x14],r8
80003f6a:	12 96       	mov	r6,r9
80003f6c:	7c 0b       	ld.w	r11,lr[0x0]
80003f6e:	70 05       	ld.w	r5,r8[0x0]
80003f70:	50 6e       	stdsp	sp[0x18],lr
80003f72:	58 0b       	cp.w	r11,0
80003f74:	f4 0b 17 00 	moveq	r11,r10
80003f78:	68 03       	ld.w	r3,r4[0x0]
80003f7a:	68 11       	ld.w	r1,r4[0x4]
80003f7c:	40 49       	lddsp	r9,sp[0x10]
80003f7e:	30 08       	mov	r8,0
80003f80:	c2 69       	rjmp	800041cc <get_arg+0x270>
80003f82:	2f fb       	sub	r11,-1
80003f84:	32 5c       	mov	r12,37
80003f86:	17 8a       	ld.ub	r10,r11[0x0]
80003f88:	f8 0a 18 00 	cp.b	r10,r12
80003f8c:	5f 1e       	srne	lr
80003f8e:	f0 0a 18 00 	cp.b	r10,r8
80003f92:	5f 1c       	srne	r12
80003f94:	fd ec 00 0c 	and	r12,lr,r12
80003f98:	f0 0c 18 00 	cp.b	r12,r8
80003f9c:	cf 31       	brne	80003f82 <get_arg+0x26>
80003f9e:	58 0a       	cp.w	r10,0
80003fa0:	e0 80 01 23 	breq	800041e6 <get_arg+0x28a>
80003fa4:	30 0c       	mov	r12,0
80003fa6:	3f fa       	mov	r10,-1
80003fa8:	18 90       	mov	r0,r12
80003faa:	50 3a       	stdsp	sp[0xc],r10
80003fac:	18 94       	mov	r4,r12
80003fae:	18 92       	mov	r2,r12
80003fb0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003fb4:	16 97       	mov	r7,r11
80003fb6:	50 7c       	stdsp	sp[0x1c],r12
80003fb8:	fe cc a1 34 	sub	r12,pc,-24268
80003fbc:	0f 3a       	ld.ub	r10,r7++
80003fbe:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003fc2:	40 7c       	lddsp	r12,sp[0x1c]
80003fc4:	1c 0c       	add	r12,lr
80003fc6:	fe ce a2 0a 	sub	lr,pc,-24054
80003fca:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003fce:	20 1e       	sub	lr,1
80003fd0:	50 0e       	stdsp	sp[0x0],lr
80003fd2:	fe ce a2 82 	sub	lr,pc,-23934
80003fd6:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003fda:	50 7c       	stdsp	sp[0x1c],r12
80003fdc:	40 0c       	lddsp	r12,sp[0x0]
80003fde:	58 7c       	cp.w	r12,7
80003fe0:	e0 8b 00 ef 	brhi	800041be <get_arg+0x262>
80003fe4:	fe ce a4 34 	sub	lr,pc,-23500
80003fe8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003fec:	36 8b       	mov	r11,104
80003fee:	f6 0a 18 00 	cp.b	r10,r11
80003ff2:	e0 80 00 e6 	breq	800041be <get_arg+0x262>
80003ff6:	37 1b       	mov	r11,113
80003ff8:	f6 0a 18 00 	cp.b	r10,r11
80003ffc:	c0 70       	breq	8000400a <get_arg+0xae>
80003ffe:	34 cb       	mov	r11,76
80004000:	f6 0a 18 00 	cp.b	r10,r11
80004004:	c0 51       	brne	8000400e <get_arg+0xb2>
80004006:	a3 b4       	sbr	r4,0x3
80004008:	cd b8       	rjmp	800041be <get_arg+0x262>
8000400a:	a5 b4       	sbr	r4,0x5
8000400c:	cd 98       	rjmp	800041be <get_arg+0x262>
8000400e:	08 9a       	mov	r10,r4
80004010:	0e 9b       	mov	r11,r7
80004012:	a5 aa       	sbr	r10,0x4
80004014:	17 3c       	ld.ub	r12,r11++
80004016:	a5 b4       	sbr	r4,0x5
80004018:	36 ce       	mov	lr,108
8000401a:	fc 0c 18 00 	cp.b	r12,lr
8000401e:	e0 80 00 d1 	breq	800041c0 <get_arg+0x264>
80004022:	14 94       	mov	r4,r10
80004024:	cc d8       	rjmp	800041be <get_arg+0x262>
80004026:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000402a:	36 7c       	mov	r12,103
8000402c:	f8 0a 18 00 	cp.b	r10,r12
80004030:	e0 8b 00 27 	brhi	8000407e <get_arg+0x122>
80004034:	36 5b       	mov	r11,101
80004036:	f6 0a 18 00 	cp.b	r10,r11
8000403a:	c4 82       	brcc	800040ca <get_arg+0x16e>
8000403c:	34 fb       	mov	r11,79
8000403e:	f6 0a 18 00 	cp.b	r10,r11
80004042:	c4 80       	breq	800040d2 <get_arg+0x176>
80004044:	e0 8b 00 0c 	brhi	8000405c <get_arg+0x100>
80004048:	34 5b       	mov	r11,69
8000404a:	f6 0a 18 00 	cp.b	r10,r11
8000404e:	c3 e0       	breq	800040ca <get_arg+0x16e>
80004050:	34 7b       	mov	r11,71
80004052:	f6 0a 18 00 	cp.b	r10,r11
80004056:	c3 a0       	breq	800040ca <get_arg+0x16e>
80004058:	34 4b       	mov	r11,68
8000405a:	c0 88       	rjmp	8000406a <get_arg+0x10e>
8000405c:	35 8b       	mov	r11,88
8000405e:	f6 0a 18 00 	cp.b	r10,r11
80004062:	c2 c0       	breq	800040ba <get_arg+0x15e>
80004064:	e0 8b 00 07 	brhi	80004072 <get_arg+0x116>
80004068:	35 5b       	mov	r11,85
8000406a:	f6 0a 18 00 	cp.b	r10,r11
8000406e:	c3 51       	brne	800040d8 <get_arg+0x17c>
80004070:	c3 18       	rjmp	800040d2 <get_arg+0x176>
80004072:	36 3b       	mov	r11,99
80004074:	f6 0a 18 00 	cp.b	r10,r11
80004078:	c2 f0       	breq	800040d6 <get_arg+0x17a>
8000407a:	36 4b       	mov	r11,100
8000407c:	c0 e8       	rjmp	80004098 <get_arg+0x13c>
8000407e:	37 0b       	mov	r11,112
80004080:	f6 0a 18 00 	cp.b	r10,r11
80004084:	c2 50       	breq	800040ce <get_arg+0x172>
80004086:	e0 8b 00 0d 	brhi	800040a0 <get_arg+0x144>
8000408a:	36 eb       	mov	r11,110
8000408c:	f6 0a 18 00 	cp.b	r10,r11
80004090:	c1 f0       	breq	800040ce <get_arg+0x172>
80004092:	e0 8b 00 14 	brhi	800040ba <get_arg+0x15e>
80004096:	36 9b       	mov	r11,105
80004098:	f6 0a 18 00 	cp.b	r10,r11
8000409c:	c1 e1       	brne	800040d8 <get_arg+0x17c>
8000409e:	c0 e8       	rjmp	800040ba <get_arg+0x15e>
800040a0:	37 5b       	mov	r11,117
800040a2:	f6 0a 18 00 	cp.b	r10,r11
800040a6:	c0 a0       	breq	800040ba <get_arg+0x15e>
800040a8:	37 8b       	mov	r11,120
800040aa:	f6 0a 18 00 	cp.b	r10,r11
800040ae:	c0 60       	breq	800040ba <get_arg+0x15e>
800040b0:	37 3b       	mov	r11,115
800040b2:	f6 0a 18 00 	cp.b	r10,r11
800040b6:	c1 11       	brne	800040d8 <get_arg+0x17c>
800040b8:	c0 b8       	rjmp	800040ce <get_arg+0x172>
800040ba:	ed b4 00 04 	bld	r4,0x4
800040be:	c0 a0       	breq	800040d2 <get_arg+0x176>
800040c0:	ed b4 00 05 	bld	r4,0x5
800040c4:	c0 91       	brne	800040d6 <get_arg+0x17a>
800040c6:	30 20       	mov	r0,2
800040c8:	c0 88       	rjmp	800040d8 <get_arg+0x17c>
800040ca:	30 40       	mov	r0,4
800040cc:	c0 68       	rjmp	800040d8 <get_arg+0x17c>
800040ce:	30 30       	mov	r0,3
800040d0:	c0 48       	rjmp	800040d8 <get_arg+0x17c>
800040d2:	30 10       	mov	r0,1
800040d4:	c0 28       	rjmp	800040d8 <get_arg+0x17c>
800040d6:	30 00       	mov	r0,0
800040d8:	40 3b       	lddsp	r11,sp[0xc]
800040da:	5b fb       	cp.w	r11,-1
800040dc:	c0 40       	breq	800040e4 <get_arg+0x188>
800040de:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800040e2:	c6 e8       	rjmp	800041be <get_arg+0x262>
800040e4:	58 60       	cp.w	r0,6
800040e6:	e0 8b 00 6c 	brhi	800041be <get_arg+0x262>
800040ea:	6c 0a       	ld.w	r10,r6[0x0]
800040ec:	ea cc ff ff 	sub	r12,r5,-1
800040f0:	fe ce a5 20 	sub	lr,pc,-23264
800040f4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800040f8:	f4 cb ff f8 	sub	r11,r10,-8
800040fc:	8d 0b       	st.w	r6[0x0],r11
800040fe:	f4 ea 00 00 	ld.d	r10,r10[0]
80004102:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004106:	c0 f8       	rjmp	80004124 <get_arg+0x1c8>
80004108:	f4 cb ff fc 	sub	r11,r10,-4
8000410c:	8d 0b       	st.w	r6[0x0],r11
8000410e:	74 0a       	ld.w	r10,r10[0x0]
80004110:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004114:	c0 88       	rjmp	80004124 <get_arg+0x1c8>
80004116:	f4 cb ff f8 	sub	r11,r10,-8
8000411a:	8d 0b       	st.w	r6[0x0],r11
8000411c:	f4 ea 00 00 	ld.d	r10,r10[0]
80004120:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004124:	0e 9b       	mov	r11,r7
80004126:	18 95       	mov	r5,r12
80004128:	c4 c8       	rjmp	800041c0 <get_arg+0x264>
8000412a:	62 0a       	ld.w	r10,r1[0x0]
8000412c:	5b fa       	cp.w	r10,-1
8000412e:	c0 a1       	brne	80004142 <get_arg+0x1e6>
80004130:	50 19       	stdsp	sp[0x4],r9
80004132:	50 28       	stdsp	sp[0x8],r8
80004134:	e0 6a 00 80 	mov	r10,128
80004138:	30 0b       	mov	r11,0
8000413a:	02 9c       	mov	r12,r1
8000413c:	ce de       	rcall	80003f16 <memset>
8000413e:	40 28       	lddsp	r8,sp[0x8]
80004140:	40 19       	lddsp	r9,sp[0x4]
80004142:	e4 cc 00 01 	sub	r12,r2,1
80004146:	0e 9b       	mov	r11,r7
80004148:	50 3c       	stdsp	sp[0xc],r12
8000414a:	f2 0c 0c 49 	max	r9,r9,r12
8000414e:	c3 98       	rjmp	800041c0 <get_arg+0x264>
80004150:	62 0a       	ld.w	r10,r1[0x0]
80004152:	5b fa       	cp.w	r10,-1
80004154:	c0 a1       	brne	80004168 <get_arg+0x20c>
80004156:	50 19       	stdsp	sp[0x4],r9
80004158:	50 28       	stdsp	sp[0x8],r8
8000415a:	e0 6a 00 80 	mov	r10,128
8000415e:	30 0b       	mov	r11,0
80004160:	02 9c       	mov	r12,r1
80004162:	cd ae       	rcall	80003f16 <memset>
80004164:	40 28       	lddsp	r8,sp[0x8]
80004166:	40 19       	lddsp	r9,sp[0x4]
80004168:	20 12       	sub	r2,1
8000416a:	30 0a       	mov	r10,0
8000416c:	0e 9b       	mov	r11,r7
8000416e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004172:	f2 02 0c 49 	max	r9,r9,r2
80004176:	c2 58       	rjmp	800041c0 <get_arg+0x264>
80004178:	16 97       	mov	r7,r11
8000417a:	6c 0a       	ld.w	r10,r6[0x0]
8000417c:	f4 cb ff fc 	sub	r11,r10,-4
80004180:	8d 0b       	st.w	r6[0x0],r11
80004182:	74 0a       	ld.w	r10,r10[0x0]
80004184:	0e 9b       	mov	r11,r7
80004186:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000418a:	2f f5       	sub	r5,-1
8000418c:	c1 a8       	rjmp	800041c0 <get_arg+0x264>
8000418e:	f4 c2 00 30 	sub	r2,r10,48
80004192:	c0 68       	rjmp	8000419e <get_arg+0x242>
80004194:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004198:	2f f7       	sub	r7,-1
8000419a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000419e:	0f 8a       	ld.ub	r10,r7[0x0]
800041a0:	58 0a       	cp.w	r10,0
800041a2:	c0 e0       	breq	800041be <get_arg+0x262>
800041a4:	23 0a       	sub	r10,48
800041a6:	58 9a       	cp.w	r10,9
800041a8:	fe 98 ff f6 	brls	80004194 <get_arg+0x238>
800041ac:	c0 98       	rjmp	800041be <get_arg+0x262>
800041ae:	2f f7       	sub	r7,-1
800041b0:	0f 8a       	ld.ub	r10,r7[0x0]
800041b2:	58 0a       	cp.w	r10,0
800041b4:	c0 50       	breq	800041be <get_arg+0x262>
800041b6:	23 0a       	sub	r10,48
800041b8:	58 9a       	cp.w	r10,9
800041ba:	fe 98 ff fa 	brls	800041ae <get_arg+0x252>
800041be:	0e 9b       	mov	r11,r7
800041c0:	40 7c       	lddsp	r12,sp[0x1c]
800041c2:	30 ba       	mov	r10,11
800041c4:	f4 0c 18 00 	cp.b	r12,r10
800041c8:	fe 91 fe f4 	brne	80003fb0 <get_arg+0x54>
800041cc:	40 42       	lddsp	r2,sp[0x10]
800041ce:	17 8c       	ld.ub	r12,r11[0x0]
800041d0:	0a 32       	cp.w	r2,r5
800041d2:	5f 4a       	srge	r10
800041d4:	f0 0c 18 00 	cp.b	r12,r8
800041d8:	5f 1c       	srne	r12
800041da:	f9 ea 00 0a 	and	r10,r12,r10
800041de:	f0 0a 18 00 	cp.b	r10,r8
800041e2:	fe 91 fe d1 	brne	80003f84 <get_arg+0x28>
800041e6:	30 08       	mov	r8,0
800041e8:	40 4e       	lddsp	lr,sp[0x10]
800041ea:	17 8a       	ld.ub	r10,r11[0x0]
800041ec:	e2 05 00 21 	add	r1,r1,r5<<0x2
800041f0:	f0 0a 18 00 	cp.b	r10,r8
800041f4:	fc 09 17 10 	movne	r9,lr
800041f8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800041fc:	06 9e       	mov	lr,r3
800041fe:	c2 a8       	rjmp	80004252 <get_arg+0x2f6>
80004200:	62 0a       	ld.w	r10,r1[0x0]
80004202:	58 3a       	cp.w	r10,3
80004204:	c1 e0       	breq	80004240 <get_arg+0x2e4>
80004206:	e0 89 00 07 	brgt	80004214 <get_arg+0x2b8>
8000420a:	58 1a       	cp.w	r10,1
8000420c:	c1 a0       	breq	80004240 <get_arg+0x2e4>
8000420e:	58 2a       	cp.w	r10,2
80004210:	c1 81       	brne	80004240 <get_arg+0x2e4>
80004212:	c0 58       	rjmp	8000421c <get_arg+0x2c0>
80004214:	58 5a       	cp.w	r10,5
80004216:	c0 c0       	breq	8000422e <get_arg+0x2d2>
80004218:	c0 b5       	brlt	8000422e <get_arg+0x2d2>
8000421a:	c1 38       	rjmp	80004240 <get_arg+0x2e4>
8000421c:	6c 0a       	ld.w	r10,r6[0x0]
8000421e:	f4 cc ff f8 	sub	r12,r10,-8
80004222:	8d 0c       	st.w	r6[0x0],r12
80004224:	f4 e2 00 00 	ld.d	r2,r10[0]
80004228:	f0 e3 00 00 	st.d	r8[0],r2
8000422c:	c1 08       	rjmp	8000424c <get_arg+0x2f0>
8000422e:	6c 0a       	ld.w	r10,r6[0x0]
80004230:	f4 cc ff f8 	sub	r12,r10,-8
80004234:	8d 0c       	st.w	r6[0x0],r12
80004236:	f4 e2 00 00 	ld.d	r2,r10[0]
8000423a:	f0 e3 00 00 	st.d	r8[0],r2
8000423e:	c0 78       	rjmp	8000424c <get_arg+0x2f0>
80004240:	6c 0a       	ld.w	r10,r6[0x0]
80004242:	f4 cc ff fc 	sub	r12,r10,-4
80004246:	8d 0c       	st.w	r6[0x0],r12
80004248:	74 0a       	ld.w	r10,r10[0x0]
8000424a:	91 0a       	st.w	r8[0x0],r10
8000424c:	2f f5       	sub	r5,-1
8000424e:	2f 88       	sub	r8,-8
80004250:	2f c1       	sub	r1,-4
80004252:	12 35       	cp.w	r5,r9
80004254:	fe 9a ff d6 	brle	80004200 <get_arg+0x2a4>
80004258:	1c 93       	mov	r3,lr
8000425a:	40 52       	lddsp	r2,sp[0x14]
8000425c:	40 6e       	lddsp	lr,sp[0x18]
8000425e:	85 05       	st.w	r2[0x0],r5
80004260:	9d 0b       	st.w	lr[0x0],r11
80004262:	40 4b       	lddsp	r11,sp[0x10]
80004264:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004268:	2f 8d       	sub	sp,-32
8000426a:	d8 32       	popm	r0-r7,pc

8000426c <__sprint_r>:
8000426c:	d4 21       	pushm	r4-r7,lr
8000426e:	14 97       	mov	r7,r10
80004270:	74 28       	ld.w	r8,r10[0x8]
80004272:	58 08       	cp.w	r8,0
80004274:	c0 41       	brne	8000427c <__sprint_r+0x10>
80004276:	95 18       	st.w	r10[0x4],r8
80004278:	10 9c       	mov	r12,r8
8000427a:	d8 22       	popm	r4-r7,pc
8000427c:	e0 a0 18 b4 	rcall	800073e4 <__sfvwrite_r>
80004280:	30 08       	mov	r8,0
80004282:	8f 18       	st.w	r7[0x4],r8
80004284:	8f 28       	st.w	r7[0x8],r8
80004286:	d8 22       	popm	r4-r7,pc

80004288 <_vfprintf_r>:
80004288:	d4 31       	pushm	r0-r7,lr
8000428a:	fa cd 06 bc 	sub	sp,sp,1724
8000428e:	51 09       	stdsp	sp[0x40],r9
80004290:	16 91       	mov	r1,r11
80004292:	14 97       	mov	r7,r10
80004294:	18 95       	mov	r5,r12
80004296:	e0 a0 1a 1d 	rcall	800076d0 <_localeconv_r>
8000429a:	78 0c       	ld.w	r12,r12[0x0]
8000429c:	50 cc       	stdsp	sp[0x30],r12
8000429e:	58 05       	cp.w	r5,0
800042a0:	c0 70       	breq	800042ae <_vfprintf_r+0x26>
800042a2:	6a 68       	ld.w	r8,r5[0x18]
800042a4:	58 08       	cp.w	r8,0
800042a6:	c0 41       	brne	800042ae <_vfprintf_r+0x26>
800042a8:	0a 9c       	mov	r12,r5
800042aa:	e0 a0 17 3d 	rcall	80007124 <__sinit>
800042ae:	fe c8 a3 1a 	sub	r8,pc,-23782
800042b2:	10 31       	cp.w	r1,r8
800042b4:	c0 31       	brne	800042ba <_vfprintf_r+0x32>
800042b6:	6a 01       	ld.w	r1,r5[0x0]
800042b8:	c0 c8       	rjmp	800042d0 <_vfprintf_r+0x48>
800042ba:	fe c8 a3 06 	sub	r8,pc,-23802
800042be:	10 31       	cp.w	r1,r8
800042c0:	c0 31       	brne	800042c6 <_vfprintf_r+0x3e>
800042c2:	6a 11       	ld.w	r1,r5[0x4]
800042c4:	c0 68       	rjmp	800042d0 <_vfprintf_r+0x48>
800042c6:	fe c8 a2 f2 	sub	r8,pc,-23822
800042ca:	10 31       	cp.w	r1,r8
800042cc:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800042d0:	82 68       	ld.sh	r8,r1[0xc]
800042d2:	ed b8 00 03 	bld	r8,0x3
800042d6:	c0 41       	brne	800042de <_vfprintf_r+0x56>
800042d8:	62 48       	ld.w	r8,r1[0x10]
800042da:	58 08       	cp.w	r8,0
800042dc:	c0 71       	brne	800042ea <_vfprintf_r+0x62>
800042de:	02 9b       	mov	r11,r1
800042e0:	0a 9c       	mov	r12,r5
800042e2:	e0 a0 0f 5d 	rcall	8000619c <__swsetup_r>
800042e6:	e0 81 0f 54 	brne	8000618e <_vfprintf_r+0x1f06>
800042ea:	82 68       	ld.sh	r8,r1[0xc]
800042ec:	10 99       	mov	r9,r8
800042ee:	e2 19 00 1a 	andl	r9,0x1a,COH
800042f2:	58 a9       	cp.w	r9,10
800042f4:	c3 c1       	brne	8000436c <_vfprintf_r+0xe4>
800042f6:	82 79       	ld.sh	r9,r1[0xe]
800042f8:	30 0a       	mov	r10,0
800042fa:	f4 09 19 00 	cp.h	r9,r10
800042fe:	c3 75       	brlt	8000436c <_vfprintf_r+0xe4>
80004300:	a1 d8       	cbr	r8,0x1
80004302:	fb 58 05 d0 	st.h	sp[1488],r8
80004306:	62 88       	ld.w	r8,r1[0x20]
80004308:	fb 48 05 e4 	st.w	sp[1508],r8
8000430c:	62 a8       	ld.w	r8,r1[0x28]
8000430e:	fb 48 05 ec 	st.w	sp[1516],r8
80004312:	fa c8 ff bc 	sub	r8,sp,-68
80004316:	fb 48 05 d4 	st.w	sp[1492],r8
8000431a:	fb 48 05 c4 	st.w	sp[1476],r8
8000431e:	e0 68 04 00 	mov	r8,1024
80004322:	fb 48 05 d8 	st.w	sp[1496],r8
80004326:	fb 48 05 cc 	st.w	sp[1484],r8
8000432a:	30 08       	mov	r8,0
8000432c:	fb 59 05 d2 	st.h	sp[1490],r9
80004330:	0e 9a       	mov	r10,r7
80004332:	41 09       	lddsp	r9,sp[0x40]
80004334:	fa c7 fa 3c 	sub	r7,sp,-1476
80004338:	fb 48 05 dc 	st.w	sp[1500],r8
8000433c:	0a 9c       	mov	r12,r5
8000433e:	0e 9b       	mov	r11,r7
80004340:	ca 4f       	rcall	80004288 <_vfprintf_r>
80004342:	50 bc       	stdsp	sp[0x2c],r12
80004344:	c0 95       	brlt	80004356 <_vfprintf_r+0xce>
80004346:	0e 9b       	mov	r11,r7
80004348:	0a 9c       	mov	r12,r5
8000434a:	e0 a0 16 15 	rcall	80006f74 <_fflush_r>
8000434e:	40 be       	lddsp	lr,sp[0x2c]
80004350:	f9 be 01 ff 	movne	lr,-1
80004354:	50 be       	stdsp	sp[0x2c],lr
80004356:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000435a:	ed b8 00 06 	bld	r8,0x6
8000435e:	e0 81 0f 1a 	brne	80006192 <_vfprintf_r+0x1f0a>
80004362:	82 68       	ld.sh	r8,r1[0xc]
80004364:	a7 a8       	sbr	r8,0x6
80004366:	a2 68       	st.h	r1[0xc],r8
80004368:	e0 8f 0f 15 	bral	80006192 <_vfprintf_r+0x1f0a>
8000436c:	30 08       	mov	r8,0
8000436e:	fb 48 06 b4 	st.w	sp[1716],r8
80004372:	fb 48 06 90 	st.w	sp[1680],r8
80004376:	fb 48 06 8c 	st.w	sp[1676],r8
8000437a:	fb 48 06 b0 	st.w	sp[1712],r8
8000437e:	30 08       	mov	r8,0
80004380:	30 09       	mov	r9,0
80004382:	50 a7       	stdsp	sp[0x28],r7
80004384:	50 78       	stdsp	sp[0x1c],r8
80004386:	fa c3 f9 e0 	sub	r3,sp,-1568
8000438a:	3f f8       	mov	r8,-1
8000438c:	50 59       	stdsp	sp[0x14],r9
8000438e:	fb 43 06 88 	st.w	sp[1672],r3
80004392:	fb 48 05 44 	st.w	sp[1348],r8
80004396:	12 9c       	mov	r12,r9
80004398:	50 69       	stdsp	sp[0x18],r9
8000439a:	50 d9       	stdsp	sp[0x34],r9
8000439c:	50 e9       	stdsp	sp[0x38],r9
8000439e:	50 b9       	stdsp	sp[0x2c],r9
800043a0:	12 97       	mov	r7,r9
800043a2:	0a 94       	mov	r4,r5
800043a4:	40 a2       	lddsp	r2,sp[0x28]
800043a6:	32 5a       	mov	r10,37
800043a8:	30 08       	mov	r8,0
800043aa:	c0 28       	rjmp	800043ae <_vfprintf_r+0x126>
800043ac:	2f f2       	sub	r2,-1
800043ae:	05 89       	ld.ub	r9,r2[0x0]
800043b0:	f0 09 18 00 	cp.b	r9,r8
800043b4:	5f 1b       	srne	r11
800043b6:	f4 09 18 00 	cp.b	r9,r10
800043ba:	5f 19       	srne	r9
800043bc:	f3 eb 00 0b 	and	r11,r9,r11
800043c0:	f0 0b 18 00 	cp.b	r11,r8
800043c4:	cf 41       	brne	800043ac <_vfprintf_r+0x124>
800043c6:	40 ab       	lddsp	r11,sp[0x28]
800043c8:	e4 0b 01 06 	sub	r6,r2,r11
800043cc:	c1 e0       	breq	80004408 <_vfprintf_r+0x180>
800043ce:	fa f8 06 90 	ld.w	r8,sp[1680]
800043d2:	0c 08       	add	r8,r6
800043d4:	87 0b       	st.w	r3[0x0],r11
800043d6:	fb 48 06 90 	st.w	sp[1680],r8
800043da:	87 16       	st.w	r3[0x4],r6
800043dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800043e0:	2f f8       	sub	r8,-1
800043e2:	fb 48 06 8c 	st.w	sp[1676],r8
800043e6:	58 78       	cp.w	r8,7
800043e8:	e0 89 00 04 	brgt	800043f0 <_vfprintf_r+0x168>
800043ec:	2f 83       	sub	r3,-8
800043ee:	c0 a8       	rjmp	80004402 <_vfprintf_r+0x17a>
800043f0:	fa ca f9 78 	sub	r10,sp,-1672
800043f4:	02 9b       	mov	r11,r1
800043f6:	08 9c       	mov	r12,r4
800043f8:	c3 af       	rcall	8000426c <__sprint_r>
800043fa:	e0 81 0e c6 	brne	80006186 <_vfprintf_r+0x1efe>
800043fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80004402:	40 ba       	lddsp	r10,sp[0x2c]
80004404:	0c 0a       	add	r10,r6
80004406:	50 ba       	stdsp	sp[0x2c],r10
80004408:	05 89       	ld.ub	r9,r2[0x0]
8000440a:	30 08       	mov	r8,0
8000440c:	f0 09 18 00 	cp.b	r9,r8
80004410:	e0 80 0e aa 	breq	80006164 <_vfprintf_r+0x1edc>
80004414:	30 09       	mov	r9,0
80004416:	fb 68 06 bb 	st.b	sp[1723],r8
8000441a:	0e 96       	mov	r6,r7
8000441c:	e4 c8 ff ff 	sub	r8,r2,-1
80004420:	3f fe       	mov	lr,-1
80004422:	50 93       	stdsp	sp[0x24],r3
80004424:	50 41       	stdsp	sp[0x10],r1
80004426:	0e 93       	mov	r3,r7
80004428:	04 91       	mov	r1,r2
8000442a:	50 89       	stdsp	sp[0x20],r9
8000442c:	50 a8       	stdsp	sp[0x28],r8
8000442e:	50 2e       	stdsp	sp[0x8],lr
80004430:	50 39       	stdsp	sp[0xc],r9
80004432:	12 95       	mov	r5,r9
80004434:	12 90       	mov	r0,r9
80004436:	10 97       	mov	r7,r8
80004438:	08 92       	mov	r2,r4
8000443a:	c0 78       	rjmp	80004448 <_vfprintf_r+0x1c0>
8000443c:	3f fc       	mov	r12,-1
8000443e:	08 97       	mov	r7,r4
80004440:	50 2c       	stdsp	sp[0x8],r12
80004442:	c0 38       	rjmp	80004448 <_vfprintf_r+0x1c0>
80004444:	30 0b       	mov	r11,0
80004446:	50 3b       	stdsp	sp[0xc],r11
80004448:	0f 38       	ld.ub	r8,r7++
8000444a:	c0 28       	rjmp	8000444e <_vfprintf_r+0x1c6>
8000444c:	12 90       	mov	r0,r9
8000444e:	f0 c9 00 20 	sub	r9,r8,32
80004452:	e0 49 00 58 	cp.w	r9,88
80004456:	e0 8b 0a 30 	brhi	800058b6 <_vfprintf_r+0x162e>
8000445a:	fe ca a8 6e 	sub	r10,pc,-22418
8000445e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004462:	50 a7       	stdsp	sp[0x28],r7
80004464:	50 80       	stdsp	sp[0x20],r0
80004466:	0c 97       	mov	r7,r6
80004468:	04 94       	mov	r4,r2
8000446a:	06 96       	mov	r6,r3
8000446c:	02 92       	mov	r2,r1
8000446e:	fe c9 a6 46 	sub	r9,pc,-22970
80004472:	40 93       	lddsp	r3,sp[0x24]
80004474:	10 90       	mov	r0,r8
80004476:	40 41       	lddsp	r1,sp[0x10]
80004478:	50 d9       	stdsp	sp[0x34],r9
8000447a:	e0 8f 08 8e 	bral	80005596 <_vfprintf_r+0x130e>
8000447e:	30 08       	mov	r8,0
80004480:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004484:	f0 09 18 00 	cp.b	r9,r8
80004488:	ce 01       	brne	80004448 <_vfprintf_r+0x1c0>
8000448a:	32 08       	mov	r8,32
8000448c:	c6 e8       	rjmp	80004568 <_vfprintf_r+0x2e0>
8000448e:	a1 a5       	sbr	r5,0x0
80004490:	cd cb       	rjmp	80004448 <_vfprintf_r+0x1c0>
80004492:	0f 89       	ld.ub	r9,r7[0x0]
80004494:	f2 c8 00 30 	sub	r8,r9,48
80004498:	58 98       	cp.w	r8,9
8000449a:	e0 8b 00 1d 	brhi	800044d4 <_vfprintf_r+0x24c>
8000449e:	ee c8 ff ff 	sub	r8,r7,-1
800044a2:	30 0b       	mov	r11,0
800044a4:	23 09       	sub	r9,48
800044a6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800044aa:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800044ae:	11 39       	ld.ub	r9,r8++
800044b0:	f2 ca 00 30 	sub	r10,r9,48
800044b4:	58 9a       	cp.w	r10,9
800044b6:	fe 98 ff f7 	brls	800044a4 <_vfprintf_r+0x21c>
800044ba:	e0 49 00 24 	cp.w	r9,36
800044be:	cc 31       	brne	80004444 <_vfprintf_r+0x1bc>
800044c0:	e0 4b 00 20 	cp.w	r11,32
800044c4:	e0 89 0e 60 	brgt	80006184 <_vfprintf_r+0x1efc>
800044c8:	20 1b       	sub	r11,1
800044ca:	fa f9 06 b4 	ld.w	r9,sp[1716]
800044ce:	12 3b       	cp.w	r11,r9
800044d0:	c0 95       	brlt	800044e2 <_vfprintf_r+0x25a>
800044d2:	c1 08       	rjmp	800044f2 <_vfprintf_r+0x26a>
800044d4:	fa f9 06 b4 	ld.w	r9,sp[1716]
800044d8:	ec ca ff ff 	sub	r10,r6,-1
800044dc:	12 36       	cp.w	r6,r9
800044de:	c1 f5       	brlt	8000451c <_vfprintf_r+0x294>
800044e0:	c2 68       	rjmp	8000452c <_vfprintf_r+0x2a4>
800044e2:	fa ce f9 44 	sub	lr,sp,-1724
800044e6:	10 97       	mov	r7,r8
800044e8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800044ec:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800044f0:	c3 58       	rjmp	8000455a <_vfprintf_r+0x2d2>
800044f2:	10 97       	mov	r7,r8
800044f4:	fa c8 f9 50 	sub	r8,sp,-1712
800044f8:	1a d8       	st.w	--sp,r8
800044fa:	fa c8 fa b8 	sub	r8,sp,-1352
800044fe:	1a d8       	st.w	--sp,r8
80004500:	fa c8 fb b4 	sub	r8,sp,-1100
80004504:	02 9a       	mov	r10,r1
80004506:	1a d8       	st.w	--sp,r8
80004508:	04 9c       	mov	r12,r2
8000450a:	fa c8 f9 40 	sub	r8,sp,-1728
8000450e:	fa c9 ff b4 	sub	r9,sp,-76
80004512:	fe b0 fd 25 	rcall	80003f5c <get_arg>
80004516:	2f dd       	sub	sp,-12
80004518:	78 00       	ld.w	r0,r12[0x0]
8000451a:	c2 08       	rjmp	8000455a <_vfprintf_r+0x2d2>
8000451c:	fa cc f9 44 	sub	r12,sp,-1724
80004520:	14 96       	mov	r6,r10
80004522:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004526:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000452a:	c1 88       	rjmp	8000455a <_vfprintf_r+0x2d2>
8000452c:	41 08       	lddsp	r8,sp[0x40]
8000452e:	59 f9       	cp.w	r9,31
80004530:	e0 89 00 11 	brgt	80004552 <_vfprintf_r+0x2ca>
80004534:	f0 cb ff fc 	sub	r11,r8,-4
80004538:	51 0b       	stdsp	sp[0x40],r11
8000453a:	70 00       	ld.w	r0,r8[0x0]
8000453c:	fa cb f9 44 	sub	r11,sp,-1724
80004540:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004544:	f1 40 fd 88 	st.w	r8[-632],r0
80004548:	2f f9       	sub	r9,-1
8000454a:	14 96       	mov	r6,r10
8000454c:	fb 49 06 b4 	st.w	sp[1716],r9
80004550:	c0 58       	rjmp	8000455a <_vfprintf_r+0x2d2>
80004552:	70 00       	ld.w	r0,r8[0x0]
80004554:	14 96       	mov	r6,r10
80004556:	2f c8       	sub	r8,-4
80004558:	51 08       	stdsp	sp[0x40],r8
8000455a:	58 00       	cp.w	r0,0
8000455c:	fe 94 ff 76 	brge	80004448 <_vfprintf_r+0x1c0>
80004560:	5c 30       	neg	r0
80004562:	a3 a5       	sbr	r5,0x2
80004564:	c7 2b       	rjmp	80004448 <_vfprintf_r+0x1c0>
80004566:	32 b8       	mov	r8,43
80004568:	fb 68 06 bb 	st.b	sp[1723],r8
8000456c:	c6 eb       	rjmp	80004448 <_vfprintf_r+0x1c0>
8000456e:	0f 38       	ld.ub	r8,r7++
80004570:	e0 48 00 2a 	cp.w	r8,42
80004574:	c0 30       	breq	8000457a <_vfprintf_r+0x2f2>
80004576:	30 09       	mov	r9,0
80004578:	c7 98       	rjmp	8000466a <_vfprintf_r+0x3e2>
8000457a:	0f 88       	ld.ub	r8,r7[0x0]
8000457c:	f0 c9 00 30 	sub	r9,r8,48
80004580:	58 99       	cp.w	r9,9
80004582:	e0 8b 00 1f 	brhi	800045c0 <_vfprintf_r+0x338>
80004586:	ee c4 ff ff 	sub	r4,r7,-1
8000458a:	30 0b       	mov	r11,0
8000458c:	23 08       	sub	r8,48
8000458e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004592:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80004596:	09 38       	ld.ub	r8,r4++
80004598:	f0 c9 00 30 	sub	r9,r8,48
8000459c:	58 99       	cp.w	r9,9
8000459e:	fe 98 ff f7 	brls	8000458c <_vfprintf_r+0x304>
800045a2:	e0 48 00 24 	cp.w	r8,36
800045a6:	fe 91 ff 4f 	brne	80004444 <_vfprintf_r+0x1bc>
800045aa:	e0 4b 00 20 	cp.w	r11,32
800045ae:	e0 89 0d eb 	brgt	80006184 <_vfprintf_r+0x1efc>
800045b2:	20 1b       	sub	r11,1
800045b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045b8:	10 3b       	cp.w	r11,r8
800045ba:	c0 a5       	brlt	800045ce <_vfprintf_r+0x346>
800045bc:	c1 18       	rjmp	800045de <_vfprintf_r+0x356>
800045be:	d7 03       	nop
800045c0:	fa fa 06 b4 	ld.w	r10,sp[1716]
800045c4:	ec c9 ff ff 	sub	r9,r6,-1
800045c8:	14 36       	cp.w	r6,r10
800045ca:	c1 f5       	brlt	80004608 <_vfprintf_r+0x380>
800045cc:	c2 88       	rjmp	8000461c <_vfprintf_r+0x394>
800045ce:	fa ca f9 44 	sub	r10,sp,-1724
800045d2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800045d6:	f6 fb fd 88 	ld.w	r11,r11[-632]
800045da:	50 2b       	stdsp	sp[0x8],r11
800045dc:	c3 c8       	rjmp	80004654 <_vfprintf_r+0x3cc>
800045de:	fa c8 f9 50 	sub	r8,sp,-1712
800045e2:	1a d8       	st.w	--sp,r8
800045e4:	fa c8 fa b8 	sub	r8,sp,-1352
800045e8:	1a d8       	st.w	--sp,r8
800045ea:	fa c8 fb b4 	sub	r8,sp,-1100
800045ee:	02 9a       	mov	r10,r1
800045f0:	1a d8       	st.w	--sp,r8
800045f2:	04 9c       	mov	r12,r2
800045f4:	fa c8 f9 40 	sub	r8,sp,-1728
800045f8:	fa c9 ff b4 	sub	r9,sp,-76
800045fc:	fe b0 fc b0 	rcall	80003f5c <get_arg>
80004600:	2f dd       	sub	sp,-12
80004602:	78 0c       	ld.w	r12,r12[0x0]
80004604:	50 2c       	stdsp	sp[0x8],r12
80004606:	c2 78       	rjmp	80004654 <_vfprintf_r+0x3cc>
80004608:	12 96       	mov	r6,r9
8000460a:	0e 94       	mov	r4,r7
8000460c:	fa c9 f9 44 	sub	r9,sp,-1724
80004610:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004614:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004618:	50 28       	stdsp	sp[0x8],r8
8000461a:	c1 d8       	rjmp	80004654 <_vfprintf_r+0x3cc>
8000461c:	41 08       	lddsp	r8,sp[0x40]
8000461e:	59 fa       	cp.w	r10,31
80004620:	e0 89 00 14 	brgt	80004648 <_vfprintf_r+0x3c0>
80004624:	f0 cb ff fc 	sub	r11,r8,-4
80004628:	70 08       	ld.w	r8,r8[0x0]
8000462a:	51 0b       	stdsp	sp[0x40],r11
8000462c:	50 28       	stdsp	sp[0x8],r8
8000462e:	fa c6 f9 44 	sub	r6,sp,-1724
80004632:	40 2e       	lddsp	lr,sp[0x8]
80004634:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004638:	f1 4e fd 88 	st.w	r8[-632],lr
8000463c:	2f fa       	sub	r10,-1
8000463e:	0e 94       	mov	r4,r7
80004640:	fb 4a 06 b4 	st.w	sp[1716],r10
80004644:	12 96       	mov	r6,r9
80004646:	c0 78       	rjmp	80004654 <_vfprintf_r+0x3cc>
80004648:	70 0c       	ld.w	r12,r8[0x0]
8000464a:	0e 94       	mov	r4,r7
8000464c:	2f c8       	sub	r8,-4
8000464e:	50 2c       	stdsp	sp[0x8],r12
80004650:	12 96       	mov	r6,r9
80004652:	51 08       	stdsp	sp[0x40],r8
80004654:	40 2b       	lddsp	r11,sp[0x8]
80004656:	58 0b       	cp.w	r11,0
80004658:	fe 95 fe f2 	brlt	8000443c <_vfprintf_r+0x1b4>
8000465c:	08 97       	mov	r7,r4
8000465e:	cf 5a       	rjmp	80004448 <_vfprintf_r+0x1c0>
80004660:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004664:	0f 38       	ld.ub	r8,r7++
80004666:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000466a:	f0 ca 00 30 	sub	r10,r8,48
8000466e:	58 9a       	cp.w	r10,9
80004670:	fe 98 ff f8 	brls	80004660 <_vfprintf_r+0x3d8>
80004674:	3f fa       	mov	r10,-1
80004676:	f2 0a 0c 49 	max	r9,r9,r10
8000467a:	50 29       	stdsp	sp[0x8],r9
8000467c:	ce 9a       	rjmp	8000444e <_vfprintf_r+0x1c6>
8000467e:	a7 b5       	sbr	r5,0x7
80004680:	ce 4a       	rjmp	80004448 <_vfprintf_r+0x1c0>
80004682:	30 09       	mov	r9,0
80004684:	23 08       	sub	r8,48
80004686:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000468a:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000468e:	0f 38       	ld.ub	r8,r7++
80004690:	f0 ca 00 30 	sub	r10,r8,48
80004694:	58 9a       	cp.w	r10,9
80004696:	fe 98 ff f7 	brls	80004684 <_vfprintf_r+0x3fc>
8000469a:	e0 48 00 24 	cp.w	r8,36
8000469e:	fe 91 fe d7 	brne	8000444c <_vfprintf_r+0x1c4>
800046a2:	e0 49 00 20 	cp.w	r9,32
800046a6:	e0 89 0d 6f 	brgt	80006184 <_vfprintf_r+0x1efc>
800046aa:	f2 c3 00 01 	sub	r3,r9,1
800046ae:	30 19       	mov	r9,1
800046b0:	50 39       	stdsp	sp[0xc],r9
800046b2:	cc ba       	rjmp	80004448 <_vfprintf_r+0x1c0>
800046b4:	a3 b5       	sbr	r5,0x3
800046b6:	cc 9a       	rjmp	80004448 <_vfprintf_r+0x1c0>
800046b8:	a7 a5       	sbr	r5,0x6
800046ba:	cc 7a       	rjmp	80004448 <_vfprintf_r+0x1c0>
800046bc:	0a 98       	mov	r8,r5
800046be:	a5 b5       	sbr	r5,0x5
800046c0:	a5 a8       	sbr	r8,0x4
800046c2:	0f 89       	ld.ub	r9,r7[0x0]
800046c4:	36 ce       	mov	lr,108
800046c6:	fc 09 18 00 	cp.b	r9,lr
800046ca:	f7 b7 00 ff 	subeq	r7,-1
800046ce:	f0 05 17 10 	movne	r5,r8
800046d2:	cb ba       	rjmp	80004448 <_vfprintf_r+0x1c0>
800046d4:	a5 b5       	sbr	r5,0x5
800046d6:	cb 9a       	rjmp	80004448 <_vfprintf_r+0x1c0>
800046d8:	50 a7       	stdsp	sp[0x28],r7
800046da:	50 80       	stdsp	sp[0x20],r0
800046dc:	0c 97       	mov	r7,r6
800046de:	10 90       	mov	r0,r8
800046e0:	06 96       	mov	r6,r3
800046e2:	04 94       	mov	r4,r2
800046e4:	40 93       	lddsp	r3,sp[0x24]
800046e6:	02 92       	mov	r2,r1
800046e8:	0e 99       	mov	r9,r7
800046ea:	40 41       	lddsp	r1,sp[0x10]
800046ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046f0:	40 3c       	lddsp	r12,sp[0xc]
800046f2:	58 0c       	cp.w	r12,0
800046f4:	c1 d0       	breq	8000472e <_vfprintf_r+0x4a6>
800046f6:	10 36       	cp.w	r6,r8
800046f8:	c0 64       	brge	80004704 <_vfprintf_r+0x47c>
800046fa:	fa cb f9 44 	sub	r11,sp,-1724
800046fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004702:	c1 d8       	rjmp	8000473c <_vfprintf_r+0x4b4>
80004704:	fa c8 f9 50 	sub	r8,sp,-1712
80004708:	1a d8       	st.w	--sp,r8
8000470a:	fa c8 fa b8 	sub	r8,sp,-1352
8000470e:	1a d8       	st.w	--sp,r8
80004710:	fa c8 fb b4 	sub	r8,sp,-1100
80004714:	1a d8       	st.w	--sp,r8
80004716:	fa c8 f9 40 	sub	r8,sp,-1728
8000471a:	fa c9 ff b4 	sub	r9,sp,-76
8000471e:	04 9a       	mov	r10,r2
80004720:	0c 9b       	mov	r11,r6
80004722:	08 9c       	mov	r12,r4
80004724:	fe b0 fc 1c 	rcall	80003f5c <get_arg>
80004728:	2f dd       	sub	sp,-12
8000472a:	19 b8       	ld.ub	r8,r12[0x3]
8000472c:	c2 28       	rjmp	80004770 <_vfprintf_r+0x4e8>
8000472e:	2f f7       	sub	r7,-1
80004730:	10 39       	cp.w	r9,r8
80004732:	c0 84       	brge	80004742 <_vfprintf_r+0x4ba>
80004734:	fa ca f9 44 	sub	r10,sp,-1724
80004738:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000473c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004740:	c1 88       	rjmp	80004770 <_vfprintf_r+0x4e8>
80004742:	41 09       	lddsp	r9,sp[0x40]
80004744:	59 f8       	cp.w	r8,31
80004746:	e0 89 00 12 	brgt	8000476a <_vfprintf_r+0x4e2>
8000474a:	f2 ca ff fc 	sub	r10,r9,-4
8000474e:	51 0a       	stdsp	sp[0x40],r10
80004750:	72 09       	ld.w	r9,r9[0x0]
80004752:	fa c6 f9 44 	sub	r6,sp,-1724
80004756:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000475a:	2f f8       	sub	r8,-1
8000475c:	f5 49 fd 88 	st.w	r10[-632],r9
80004760:	fb 48 06 b4 	st.w	sp[1716],r8
80004764:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004768:	c0 48       	rjmp	80004770 <_vfprintf_r+0x4e8>
8000476a:	13 b8       	ld.ub	r8,r9[0x3]
8000476c:	2f c9       	sub	r9,-4
8000476e:	51 09       	stdsp	sp[0x40],r9
80004770:	fb 68 06 60 	st.b	sp[1632],r8
80004774:	30 0e       	mov	lr,0
80004776:	30 08       	mov	r8,0
80004778:	30 12       	mov	r2,1
8000477a:	fb 68 06 bb 	st.b	sp[1723],r8
8000477e:	50 2e       	stdsp	sp[0x8],lr
80004780:	e0 8f 08 ad 	bral	800058da <_vfprintf_r+0x1652>
80004784:	50 a7       	stdsp	sp[0x28],r7
80004786:	50 80       	stdsp	sp[0x20],r0
80004788:	0c 97       	mov	r7,r6
8000478a:	04 94       	mov	r4,r2
8000478c:	06 96       	mov	r6,r3
8000478e:	02 92       	mov	r2,r1
80004790:	40 93       	lddsp	r3,sp[0x24]
80004792:	10 90       	mov	r0,r8
80004794:	40 41       	lddsp	r1,sp[0x10]
80004796:	a5 a5       	sbr	r5,0x4
80004798:	c0 a8       	rjmp	800047ac <_vfprintf_r+0x524>
8000479a:	50 a7       	stdsp	sp[0x28],r7
8000479c:	50 80       	stdsp	sp[0x20],r0
8000479e:	0c 97       	mov	r7,r6
800047a0:	04 94       	mov	r4,r2
800047a2:	06 96       	mov	r6,r3
800047a4:	02 92       	mov	r2,r1
800047a6:	40 93       	lddsp	r3,sp[0x24]
800047a8:	10 90       	mov	r0,r8
800047aa:	40 41       	lddsp	r1,sp[0x10]
800047ac:	ed b5 00 05 	bld	r5,0x5
800047b0:	c5 11       	brne	80004852 <_vfprintf_r+0x5ca>
800047b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047b6:	40 3c       	lddsp	r12,sp[0xc]
800047b8:	58 0c       	cp.w	r12,0
800047ba:	c1 e0       	breq	800047f6 <_vfprintf_r+0x56e>
800047bc:	10 36       	cp.w	r6,r8
800047be:	c0 64       	brge	800047ca <_vfprintf_r+0x542>
800047c0:	fa cb f9 44 	sub	r11,sp,-1724
800047c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047c8:	c2 08       	rjmp	80004808 <_vfprintf_r+0x580>
800047ca:	fa c8 f9 50 	sub	r8,sp,-1712
800047ce:	1a d8       	st.w	--sp,r8
800047d0:	fa c8 fa b8 	sub	r8,sp,-1352
800047d4:	0c 9b       	mov	r11,r6
800047d6:	1a d8       	st.w	--sp,r8
800047d8:	fa c8 fb b4 	sub	r8,sp,-1100
800047dc:	1a d8       	st.w	--sp,r8
800047de:	fa c9 ff b4 	sub	r9,sp,-76
800047e2:	fa c8 f9 40 	sub	r8,sp,-1728
800047e6:	04 9a       	mov	r10,r2
800047e8:	08 9c       	mov	r12,r4
800047ea:	fe b0 fb b9 	rcall	80003f5c <get_arg>
800047ee:	2f dd       	sub	sp,-12
800047f0:	78 1b       	ld.w	r11,r12[0x4]
800047f2:	78 09       	ld.w	r9,r12[0x0]
800047f4:	c2 b8       	rjmp	8000484a <_vfprintf_r+0x5c2>
800047f6:	ee ca ff ff 	sub	r10,r7,-1
800047fa:	10 37       	cp.w	r7,r8
800047fc:	c0 b4       	brge	80004812 <_vfprintf_r+0x58a>
800047fe:	fa c9 f9 44 	sub	r9,sp,-1724
80004802:	14 97       	mov	r7,r10
80004804:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004808:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000480c:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004810:	c1 d8       	rjmp	8000484a <_vfprintf_r+0x5c2>
80004812:	41 09       	lddsp	r9,sp[0x40]
80004814:	59 f8       	cp.w	r8,31
80004816:	e0 89 00 14 	brgt	8000483e <_vfprintf_r+0x5b6>
8000481a:	f2 cb ff f8 	sub	r11,r9,-8
8000481e:	51 0b       	stdsp	sp[0x40],r11
80004820:	fa c6 f9 44 	sub	r6,sp,-1724
80004824:	72 1b       	ld.w	r11,r9[0x4]
80004826:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000482a:	72 09       	ld.w	r9,r9[0x0]
8000482c:	f9 4b fd 8c 	st.w	r12[-628],r11
80004830:	f9 49 fd 88 	st.w	r12[-632],r9
80004834:	2f f8       	sub	r8,-1
80004836:	14 97       	mov	r7,r10
80004838:	fb 48 06 b4 	st.w	sp[1716],r8
8000483c:	c0 78       	rjmp	8000484a <_vfprintf_r+0x5c2>
8000483e:	f2 c8 ff f8 	sub	r8,r9,-8
80004842:	72 1b       	ld.w	r11,r9[0x4]
80004844:	14 97       	mov	r7,r10
80004846:	51 08       	stdsp	sp[0x40],r8
80004848:	72 09       	ld.w	r9,r9[0x0]
8000484a:	16 98       	mov	r8,r11
8000484c:	fa e9 00 00 	st.d	sp[0],r8
80004850:	ca e8       	rjmp	800049ac <_vfprintf_r+0x724>
80004852:	ed b5 00 04 	bld	r5,0x4
80004856:	c1 71       	brne	80004884 <_vfprintf_r+0x5fc>
80004858:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000485c:	40 3e       	lddsp	lr,sp[0xc]
8000485e:	58 0e       	cp.w	lr,0
80004860:	c0 80       	breq	80004870 <_vfprintf_r+0x5e8>
80004862:	10 36       	cp.w	r6,r8
80004864:	c6 94       	brge	80004936 <_vfprintf_r+0x6ae>
80004866:	fa cc f9 44 	sub	r12,sp,-1724
8000486a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000486e:	c8 28       	rjmp	80004972 <_vfprintf_r+0x6ea>
80004870:	ee ca ff ff 	sub	r10,r7,-1
80004874:	10 37       	cp.w	r7,r8
80004876:	e0 84 00 81 	brge	80004978 <_vfprintf_r+0x6f0>
8000487a:	fa cb f9 44 	sub	r11,sp,-1724
8000487e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004882:	c7 78       	rjmp	80004970 <_vfprintf_r+0x6e8>
80004884:	ed b5 00 06 	bld	r5,0x6
80004888:	c4 b1       	brne	8000491e <_vfprintf_r+0x696>
8000488a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000488e:	40 3c       	lddsp	r12,sp[0xc]
80004890:	58 0c       	cp.w	r12,0
80004892:	c1 d0       	breq	800048cc <_vfprintf_r+0x644>
80004894:	10 36       	cp.w	r6,r8
80004896:	c0 64       	brge	800048a2 <_vfprintf_r+0x61a>
80004898:	fa cb f9 44 	sub	r11,sp,-1724
8000489c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048a0:	c1 f8       	rjmp	800048de <_vfprintf_r+0x656>
800048a2:	fa c8 f9 50 	sub	r8,sp,-1712
800048a6:	1a d8       	st.w	--sp,r8
800048a8:	fa c8 fa b8 	sub	r8,sp,-1352
800048ac:	1a d8       	st.w	--sp,r8
800048ae:	fa c8 fb b4 	sub	r8,sp,-1100
800048b2:	1a d8       	st.w	--sp,r8
800048b4:	fa c8 f9 40 	sub	r8,sp,-1728
800048b8:	fa c9 ff b4 	sub	r9,sp,-76
800048bc:	04 9a       	mov	r10,r2
800048be:	0c 9b       	mov	r11,r6
800048c0:	08 9c       	mov	r12,r4
800048c2:	fe b0 fb 4d 	rcall	80003f5c <get_arg>
800048c6:	2f dd       	sub	sp,-12
800048c8:	98 18       	ld.sh	r8,r12[0x2]
800048ca:	c2 68       	rjmp	80004916 <_vfprintf_r+0x68e>
800048cc:	ee ca ff ff 	sub	r10,r7,-1
800048d0:	10 37       	cp.w	r7,r8
800048d2:	c0 94       	brge	800048e4 <_vfprintf_r+0x65c>
800048d4:	fa c9 f9 44 	sub	r9,sp,-1724
800048d8:	14 97       	mov	r7,r10
800048da:	f2 06 00 36 	add	r6,r9,r6<<0x3
800048de:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800048e2:	c1 a8       	rjmp	80004916 <_vfprintf_r+0x68e>
800048e4:	41 09       	lddsp	r9,sp[0x40]
800048e6:	59 f8       	cp.w	r8,31
800048e8:	e0 89 00 13 	brgt	8000490e <_vfprintf_r+0x686>
800048ec:	f2 cb ff fc 	sub	r11,r9,-4
800048f0:	51 0b       	stdsp	sp[0x40],r11
800048f2:	72 09       	ld.w	r9,r9[0x0]
800048f4:	fa c6 f9 44 	sub	r6,sp,-1724
800048f8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800048fc:	2f f8       	sub	r8,-1
800048fe:	f7 49 fd 88 	st.w	r11[-632],r9
80004902:	fb 48 06 b4 	st.w	sp[1716],r8
80004906:	14 97       	mov	r7,r10
80004908:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000490c:	c0 58       	rjmp	80004916 <_vfprintf_r+0x68e>
8000490e:	92 18       	ld.sh	r8,r9[0x2]
80004910:	14 97       	mov	r7,r10
80004912:	2f c9       	sub	r9,-4
80004914:	51 09       	stdsp	sp[0x40],r9
80004916:	50 18       	stdsp	sp[0x4],r8
80004918:	bf 58       	asr	r8,0x1f
8000491a:	50 08       	stdsp	sp[0x0],r8
8000491c:	c4 88       	rjmp	800049ac <_vfprintf_r+0x724>
8000491e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004922:	40 3c       	lddsp	r12,sp[0xc]
80004924:	58 0c       	cp.w	r12,0
80004926:	c1 d0       	breq	80004960 <_vfprintf_r+0x6d8>
80004928:	10 36       	cp.w	r6,r8
8000492a:	c0 64       	brge	80004936 <_vfprintf_r+0x6ae>
8000492c:	fa cb f9 44 	sub	r11,sp,-1724
80004930:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004934:	c1 f8       	rjmp	80004972 <_vfprintf_r+0x6ea>
80004936:	fa c8 f9 50 	sub	r8,sp,-1712
8000493a:	1a d8       	st.w	--sp,r8
8000493c:	fa c8 fa b8 	sub	r8,sp,-1352
80004940:	0c 9b       	mov	r11,r6
80004942:	1a d8       	st.w	--sp,r8
80004944:	fa c8 fb b4 	sub	r8,sp,-1100
80004948:	04 9a       	mov	r10,r2
8000494a:	1a d8       	st.w	--sp,r8
8000494c:	08 9c       	mov	r12,r4
8000494e:	fa c8 f9 40 	sub	r8,sp,-1728
80004952:	fa c9 ff b4 	sub	r9,sp,-76
80004956:	fe b0 fb 03 	rcall	80003f5c <get_arg>
8000495a:	2f dd       	sub	sp,-12
8000495c:	78 0b       	ld.w	r11,r12[0x0]
8000495e:	c2 48       	rjmp	800049a6 <_vfprintf_r+0x71e>
80004960:	ee ca ff ff 	sub	r10,r7,-1
80004964:	10 37       	cp.w	r7,r8
80004966:	c0 94       	brge	80004978 <_vfprintf_r+0x6f0>
80004968:	fa c9 f9 44 	sub	r9,sp,-1724
8000496c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004970:	14 97       	mov	r7,r10
80004972:	ec fb fd 88 	ld.w	r11,r6[-632]
80004976:	c1 88       	rjmp	800049a6 <_vfprintf_r+0x71e>
80004978:	41 09       	lddsp	r9,sp[0x40]
8000497a:	59 f8       	cp.w	r8,31
8000497c:	e0 89 00 11 	brgt	8000499e <_vfprintf_r+0x716>
80004980:	f2 cb ff fc 	sub	r11,r9,-4
80004984:	51 0b       	stdsp	sp[0x40],r11
80004986:	fa c6 f9 44 	sub	r6,sp,-1724
8000498a:	72 0b       	ld.w	r11,r9[0x0]
8000498c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004990:	f3 4b fd 88 	st.w	r9[-632],r11
80004994:	2f f8       	sub	r8,-1
80004996:	14 97       	mov	r7,r10
80004998:	fb 48 06 b4 	st.w	sp[1716],r8
8000499c:	c0 58       	rjmp	800049a6 <_vfprintf_r+0x71e>
8000499e:	72 0b       	ld.w	r11,r9[0x0]
800049a0:	14 97       	mov	r7,r10
800049a2:	2f c9       	sub	r9,-4
800049a4:	51 09       	stdsp	sp[0x40],r9
800049a6:	50 1b       	stdsp	sp[0x4],r11
800049a8:	bf 5b       	asr	r11,0x1f
800049aa:	50 0b       	stdsp	sp[0x0],r11
800049ac:	fa ea 00 00 	ld.d	r10,sp[0]
800049b0:	58 0a       	cp.w	r10,0
800049b2:	5c 2b       	cpc	r11
800049b4:	c0 e4       	brge	800049d0 <_vfprintf_r+0x748>
800049b6:	30 08       	mov	r8,0
800049b8:	fa ea 00 00 	ld.d	r10,sp[0]
800049bc:	30 09       	mov	r9,0
800049be:	f0 0a 01 0a 	sub	r10,r8,r10
800049c2:	f2 0b 01 4b 	sbc	r11,r9,r11
800049c6:	32 d8       	mov	r8,45
800049c8:	fa eb 00 00 	st.d	sp[0],r10
800049cc:	fb 68 06 bb 	st.b	sp[1723],r8
800049d0:	30 18       	mov	r8,1
800049d2:	e0 8f 06 fa 	bral	800057c6 <_vfprintf_r+0x153e>
800049d6:	50 a7       	stdsp	sp[0x28],r7
800049d8:	50 80       	stdsp	sp[0x20],r0
800049da:	0c 97       	mov	r7,r6
800049dc:	04 94       	mov	r4,r2
800049de:	06 96       	mov	r6,r3
800049e0:	02 92       	mov	r2,r1
800049e2:	40 93       	lddsp	r3,sp[0x24]
800049e4:	10 90       	mov	r0,r8
800049e6:	40 41       	lddsp	r1,sp[0x10]
800049e8:	0e 99       	mov	r9,r7
800049ea:	ed b5 00 03 	bld	r5,0x3
800049ee:	c4 11       	brne	80004a70 <_vfprintf_r+0x7e8>
800049f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049f4:	40 3a       	lddsp	r10,sp[0xc]
800049f6:	58 0a       	cp.w	r10,0
800049f8:	c1 90       	breq	80004a2a <_vfprintf_r+0x7a2>
800049fa:	10 36       	cp.w	r6,r8
800049fc:	c6 45       	brlt	80004ac4 <_vfprintf_r+0x83c>
800049fe:	fa c8 f9 50 	sub	r8,sp,-1712
80004a02:	1a d8       	st.w	--sp,r8
80004a04:	fa c8 fa b8 	sub	r8,sp,-1352
80004a08:	1a d8       	st.w	--sp,r8
80004a0a:	fa c8 fb b4 	sub	r8,sp,-1100
80004a0e:	0c 9b       	mov	r11,r6
80004a10:	1a d8       	st.w	--sp,r8
80004a12:	04 9a       	mov	r10,r2
80004a14:	fa c8 f9 40 	sub	r8,sp,-1728
80004a18:	fa c9 ff b4 	sub	r9,sp,-76
80004a1c:	08 9c       	mov	r12,r4
80004a1e:	fe b0 fa 9f 	rcall	80003f5c <get_arg>
80004a22:	2f dd       	sub	sp,-12
80004a24:	78 16       	ld.w	r6,r12[0x4]
80004a26:	50 76       	stdsp	sp[0x1c],r6
80004a28:	c4 88       	rjmp	80004ab8 <_vfprintf_r+0x830>
80004a2a:	2f f7       	sub	r7,-1
80004a2c:	10 39       	cp.w	r9,r8
80004a2e:	c0 c4       	brge	80004a46 <_vfprintf_r+0x7be>
80004a30:	fa ce f9 44 	sub	lr,sp,-1724
80004a34:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004a38:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004a3c:	50 7c       	stdsp	sp[0x1c],r12
80004a3e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004a42:	50 56       	stdsp	sp[0x14],r6
80004a44:	c6 68       	rjmp	80004b10 <_vfprintf_r+0x888>
80004a46:	41 09       	lddsp	r9,sp[0x40]
80004a48:	59 f8       	cp.w	r8,31
80004a4a:	e0 89 00 10 	brgt	80004a6a <_vfprintf_r+0x7e2>
80004a4e:	f2 ca ff f8 	sub	r10,r9,-8
80004a52:	72 1b       	ld.w	r11,r9[0x4]
80004a54:	51 0a       	stdsp	sp[0x40],r10
80004a56:	72 09       	ld.w	r9,r9[0x0]
80004a58:	fa ca f9 44 	sub	r10,sp,-1724
80004a5c:	50 7b       	stdsp	sp[0x1c],r11
80004a5e:	50 59       	stdsp	sp[0x14],r9
80004a60:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004a64:	40 5b       	lddsp	r11,sp[0x14]
80004a66:	40 7a       	lddsp	r10,sp[0x1c]
80004a68:	c4 78       	rjmp	80004af6 <_vfprintf_r+0x86e>
80004a6a:	72 18       	ld.w	r8,r9[0x4]
80004a6c:	50 78       	stdsp	sp[0x1c],r8
80004a6e:	c4 c8       	rjmp	80004b06 <_vfprintf_r+0x87e>
80004a70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a74:	40 3e       	lddsp	lr,sp[0xc]
80004a76:	58 0e       	cp.w	lr,0
80004a78:	c2 30       	breq	80004abe <_vfprintf_r+0x836>
80004a7a:	10 36       	cp.w	r6,r8
80004a7c:	c0 94       	brge	80004a8e <_vfprintf_r+0x806>
80004a7e:	fa cc f9 44 	sub	r12,sp,-1724
80004a82:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004a86:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004a8a:	50 7b       	stdsp	sp[0x1c],r11
80004a8c:	cd 9b       	rjmp	80004a3e <_vfprintf_r+0x7b6>
80004a8e:	fa c8 f9 50 	sub	r8,sp,-1712
80004a92:	1a d8       	st.w	--sp,r8
80004a94:	fa c8 fa b8 	sub	r8,sp,-1352
80004a98:	04 9a       	mov	r10,r2
80004a9a:	1a d8       	st.w	--sp,r8
80004a9c:	fa c8 fb b4 	sub	r8,sp,-1100
80004aa0:	0c 9b       	mov	r11,r6
80004aa2:	1a d8       	st.w	--sp,r8
80004aa4:	08 9c       	mov	r12,r4
80004aa6:	fa c8 f9 40 	sub	r8,sp,-1728
80004aaa:	fa c9 ff b4 	sub	r9,sp,-76
80004aae:	fe b0 fa 57 	rcall	80003f5c <get_arg>
80004ab2:	2f dd       	sub	sp,-12
80004ab4:	78 1a       	ld.w	r10,r12[0x4]
80004ab6:	50 7a       	stdsp	sp[0x1c],r10
80004ab8:	78 0c       	ld.w	r12,r12[0x0]
80004aba:	50 5c       	stdsp	sp[0x14],r12
80004abc:	c2 a8       	rjmp	80004b10 <_vfprintf_r+0x888>
80004abe:	2f f7       	sub	r7,-1
80004ac0:	10 39       	cp.w	r9,r8
80004ac2:	c0 94       	brge	80004ad4 <_vfprintf_r+0x84c>
80004ac4:	fa c9 f9 44 	sub	r9,sp,-1724
80004ac8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004acc:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004ad0:	50 78       	stdsp	sp[0x1c],r8
80004ad2:	cb 6b       	rjmp	80004a3e <_vfprintf_r+0x7b6>
80004ad4:	41 09       	lddsp	r9,sp[0x40]
80004ad6:	59 f8       	cp.w	r8,31
80004ad8:	e0 89 00 15 	brgt	80004b02 <_vfprintf_r+0x87a>
80004adc:	f2 ca ff f8 	sub	r10,r9,-8
80004ae0:	72 16       	ld.w	r6,r9[0x4]
80004ae2:	72 09       	ld.w	r9,r9[0x0]
80004ae4:	51 0a       	stdsp	sp[0x40],r10
80004ae6:	50 59       	stdsp	sp[0x14],r9
80004ae8:	fa ce f9 44 	sub	lr,sp,-1724
80004aec:	50 76       	stdsp	sp[0x1c],r6
80004aee:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004af2:	40 5b       	lddsp	r11,sp[0x14]
80004af4:	0c 9a       	mov	r10,r6
80004af6:	f2 eb fd 88 	st.d	r9[-632],r10
80004afa:	2f f8       	sub	r8,-1
80004afc:	fb 48 06 b4 	st.w	sp[1716],r8
80004b00:	c0 88       	rjmp	80004b10 <_vfprintf_r+0x888>
80004b02:	72 1c       	ld.w	r12,r9[0x4]
80004b04:	50 7c       	stdsp	sp[0x1c],r12
80004b06:	f2 c8 ff f8 	sub	r8,r9,-8
80004b0a:	51 08       	stdsp	sp[0x40],r8
80004b0c:	72 09       	ld.w	r9,r9[0x0]
80004b0e:	50 59       	stdsp	sp[0x14],r9
80004b10:	40 5b       	lddsp	r11,sp[0x14]
80004b12:	40 7a       	lddsp	r10,sp[0x1c]
80004b14:	e0 a0 1c d6 	rcall	800084c0 <__isinfd>
80004b18:	18 96       	mov	r6,r12
80004b1a:	c1 70       	breq	80004b48 <_vfprintf_r+0x8c0>
80004b1c:	30 08       	mov	r8,0
80004b1e:	30 09       	mov	r9,0
80004b20:	40 5b       	lddsp	r11,sp[0x14]
80004b22:	40 7a       	lddsp	r10,sp[0x1c]
80004b24:	e0 a0 20 66 	rcall	80008bf0 <__avr32_f64_cmp_lt>
80004b28:	c0 40       	breq	80004b30 <_vfprintf_r+0x8a8>
80004b2a:	32 d8       	mov	r8,45
80004b2c:	fb 68 06 bb 	st.b	sp[1723],r8
80004b30:	fe c8 ac f4 	sub	r8,pc,-21260
80004b34:	fe c6 ac f4 	sub	r6,pc,-21260
80004b38:	a7 d5       	cbr	r5,0x7
80004b3a:	e0 40 00 47 	cp.w	r0,71
80004b3e:	f0 06 17 a0 	movle	r6,r8
80004b42:	30 32       	mov	r2,3
80004b44:	e0 8f 06 ce 	bral	800058e0 <_vfprintf_r+0x1658>
80004b48:	40 5b       	lddsp	r11,sp[0x14]
80004b4a:	40 7a       	lddsp	r10,sp[0x1c]
80004b4c:	e0 a0 1c cf 	rcall	800084ea <__isnand>
80004b50:	c0 e0       	breq	80004b6c <_vfprintf_r+0x8e4>
80004b52:	50 26       	stdsp	sp[0x8],r6
80004b54:	fe c8 ad 10 	sub	r8,pc,-21232
80004b58:	fe c6 ad 10 	sub	r6,pc,-21232
80004b5c:	a7 d5       	cbr	r5,0x7
80004b5e:	e0 40 00 47 	cp.w	r0,71
80004b62:	f0 06 17 a0 	movle	r6,r8
80004b66:	30 32       	mov	r2,3
80004b68:	e0 8f 06 c2 	bral	800058ec <_vfprintf_r+0x1664>
80004b6c:	40 2a       	lddsp	r10,sp[0x8]
80004b6e:	5b fa       	cp.w	r10,-1
80004b70:	c0 41       	brne	80004b78 <_vfprintf_r+0x8f0>
80004b72:	30 69       	mov	r9,6
80004b74:	50 29       	stdsp	sp[0x8],r9
80004b76:	c1 18       	rjmp	80004b98 <_vfprintf_r+0x910>
80004b78:	e0 40 00 47 	cp.w	r0,71
80004b7c:	5f 09       	sreq	r9
80004b7e:	e0 40 00 67 	cp.w	r0,103
80004b82:	5f 08       	sreq	r8
80004b84:	f3 e8 10 08 	or	r8,r9,r8
80004b88:	f8 08 18 00 	cp.b	r8,r12
80004b8c:	c0 60       	breq	80004b98 <_vfprintf_r+0x910>
80004b8e:	40 28       	lddsp	r8,sp[0x8]
80004b90:	58 08       	cp.w	r8,0
80004b92:	f9 b8 00 01 	moveq	r8,1
80004b96:	50 28       	stdsp	sp[0x8],r8
80004b98:	40 78       	lddsp	r8,sp[0x1c]
80004b9a:	40 59       	lddsp	r9,sp[0x14]
80004b9c:	fa e9 06 94 	st.d	sp[1684],r8
80004ba0:	a9 a5       	sbr	r5,0x8
80004ba2:	fa f8 06 94 	ld.w	r8,sp[1684]
80004ba6:	58 08       	cp.w	r8,0
80004ba8:	c0 65       	brlt	80004bb4 <_vfprintf_r+0x92c>
80004baa:	40 5e       	lddsp	lr,sp[0x14]
80004bac:	30 0c       	mov	r12,0
80004bae:	50 6e       	stdsp	sp[0x18],lr
80004bb0:	50 9c       	stdsp	sp[0x24],r12
80004bb2:	c0 78       	rjmp	80004bc0 <_vfprintf_r+0x938>
80004bb4:	40 5b       	lddsp	r11,sp[0x14]
80004bb6:	32 da       	mov	r10,45
80004bb8:	ee 1b 80 00 	eorh	r11,0x8000
80004bbc:	50 9a       	stdsp	sp[0x24],r10
80004bbe:	50 6b       	stdsp	sp[0x18],r11
80004bc0:	e0 40 00 46 	cp.w	r0,70
80004bc4:	5f 09       	sreq	r9
80004bc6:	e0 40 00 66 	cp.w	r0,102
80004bca:	5f 08       	sreq	r8
80004bcc:	f3 e8 10 08 	or	r8,r9,r8
80004bd0:	50 48       	stdsp	sp[0x10],r8
80004bd2:	c0 40       	breq	80004bda <_vfprintf_r+0x952>
80004bd4:	40 22       	lddsp	r2,sp[0x8]
80004bd6:	30 39       	mov	r9,3
80004bd8:	c1 08       	rjmp	80004bf8 <_vfprintf_r+0x970>
80004bda:	e0 40 00 45 	cp.w	r0,69
80004bde:	5f 09       	sreq	r9
80004be0:	e0 40 00 65 	cp.w	r0,101
80004be4:	5f 08       	sreq	r8
80004be6:	40 22       	lddsp	r2,sp[0x8]
80004be8:	10 49       	or	r9,r8
80004bea:	2f f2       	sub	r2,-1
80004bec:	40 46       	lddsp	r6,sp[0x10]
80004bee:	ec 09 18 00 	cp.b	r9,r6
80004bf2:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004bf6:	30 29       	mov	r9,2
80004bf8:	fa c8 f9 5c 	sub	r8,sp,-1700
80004bfc:	1a d8       	st.w	--sp,r8
80004bfe:	fa c8 f9 54 	sub	r8,sp,-1708
80004c02:	1a d8       	st.w	--sp,r8
80004c04:	fa c8 f9 4c 	sub	r8,sp,-1716
80004c08:	08 9c       	mov	r12,r4
80004c0a:	1a d8       	st.w	--sp,r8
80004c0c:	04 98       	mov	r8,r2
80004c0e:	40 9b       	lddsp	r11,sp[0x24]
80004c10:	40 aa       	lddsp	r10,sp[0x28]
80004c12:	e0 a0 0b c3 	rcall	80006398 <_dtoa_r>
80004c16:	e0 40 00 47 	cp.w	r0,71
80004c1a:	5f 19       	srne	r9
80004c1c:	e0 40 00 67 	cp.w	r0,103
80004c20:	5f 18       	srne	r8
80004c22:	18 96       	mov	r6,r12
80004c24:	2f dd       	sub	sp,-12
80004c26:	f3 e8 00 08 	and	r8,r9,r8
80004c2a:	c0 41       	brne	80004c32 <_vfprintf_r+0x9aa>
80004c2c:	ed b5 00 00 	bld	r5,0x0
80004c30:	c3 01       	brne	80004c90 <_vfprintf_r+0xa08>
80004c32:	ec 02 00 0e 	add	lr,r6,r2
80004c36:	50 3e       	stdsp	sp[0xc],lr
80004c38:	40 4c       	lddsp	r12,sp[0x10]
80004c3a:	58 0c       	cp.w	r12,0
80004c3c:	c1 50       	breq	80004c66 <_vfprintf_r+0x9de>
80004c3e:	0d 89       	ld.ub	r9,r6[0x0]
80004c40:	33 08       	mov	r8,48
80004c42:	f0 09 18 00 	cp.b	r9,r8
80004c46:	c0 b1       	brne	80004c5c <_vfprintf_r+0x9d4>
80004c48:	30 08       	mov	r8,0
80004c4a:	30 09       	mov	r9,0
80004c4c:	40 6b       	lddsp	r11,sp[0x18]
80004c4e:	40 7a       	lddsp	r10,sp[0x1c]
80004c50:	e0 a0 1f 89 	rcall	80008b62 <__avr32_f64_cmp_eq>
80004c54:	fb b2 00 01 	rsubeq	r2,1
80004c58:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004c5c:	40 3b       	lddsp	r11,sp[0xc]
80004c5e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004c62:	10 0b       	add	r11,r8
80004c64:	50 3b       	stdsp	sp[0xc],r11
80004c66:	40 6b       	lddsp	r11,sp[0x18]
80004c68:	30 08       	mov	r8,0
80004c6a:	30 09       	mov	r9,0
80004c6c:	40 7a       	lddsp	r10,sp[0x1c]
80004c6e:	e0 a0 1f 7a 	rcall	80008b62 <__avr32_f64_cmp_eq>
80004c72:	c0 90       	breq	80004c84 <_vfprintf_r+0x9fc>
80004c74:	40 3a       	lddsp	r10,sp[0xc]
80004c76:	fb 4a 06 a4 	st.w	sp[1700],r10
80004c7a:	c0 58       	rjmp	80004c84 <_vfprintf_r+0x9fc>
80004c7c:	10 c9       	st.b	r8++,r9
80004c7e:	fb 48 06 a4 	st.w	sp[1700],r8
80004c82:	c0 28       	rjmp	80004c86 <_vfprintf_r+0x9fe>
80004c84:	33 09       	mov	r9,48
80004c86:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004c8a:	40 3e       	lddsp	lr,sp[0xc]
80004c8c:	1c 38       	cp.w	r8,lr
80004c8e:	cf 73       	brcs	80004c7c <_vfprintf_r+0x9f4>
80004c90:	e0 40 00 47 	cp.w	r0,71
80004c94:	5f 09       	sreq	r9
80004c96:	e0 40 00 67 	cp.w	r0,103
80004c9a:	5f 08       	sreq	r8
80004c9c:	f3 e8 10 08 	or	r8,r9,r8
80004ca0:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004ca4:	0c 19       	sub	r9,r6
80004ca6:	50 69       	stdsp	sp[0x18],r9
80004ca8:	58 08       	cp.w	r8,0
80004caa:	c0 b0       	breq	80004cc0 <_vfprintf_r+0xa38>
80004cac:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004cb0:	5b d8       	cp.w	r8,-3
80004cb2:	c0 55       	brlt	80004cbc <_vfprintf_r+0xa34>
80004cb4:	40 2c       	lddsp	r12,sp[0x8]
80004cb6:	18 38       	cp.w	r8,r12
80004cb8:	e0 8a 00 6a 	brle	80004d8c <_vfprintf_r+0xb04>
80004cbc:	20 20       	sub	r0,2
80004cbe:	c0 58       	rjmp	80004cc8 <_vfprintf_r+0xa40>
80004cc0:	e0 40 00 65 	cp.w	r0,101
80004cc4:	e0 89 00 46 	brgt	80004d50 <_vfprintf_r+0xac8>
80004cc8:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004ccc:	fb 60 06 9c 	st.b	sp[1692],r0
80004cd0:	20 1b       	sub	r11,1
80004cd2:	fb 4b 06 ac 	st.w	sp[1708],r11
80004cd6:	c0 47       	brpl	80004cde <_vfprintf_r+0xa56>
80004cd8:	5c 3b       	neg	r11
80004cda:	32 d8       	mov	r8,45
80004cdc:	c0 28       	rjmp	80004ce0 <_vfprintf_r+0xa58>
80004cde:	32 b8       	mov	r8,43
80004ce0:	fb 68 06 9d 	st.b	sp[1693],r8
80004ce4:	58 9b       	cp.w	r11,9
80004ce6:	e0 8a 00 1d 	brle	80004d20 <_vfprintf_r+0xa98>
80004cea:	fa c9 fa 35 	sub	r9,sp,-1483
80004cee:	30 aa       	mov	r10,10
80004cf0:	12 98       	mov	r8,r9
80004cf2:	0e 9c       	mov	r12,r7
80004cf4:	0c 92       	mov	r2,r6
80004cf6:	f6 0a 0c 06 	divs	r6,r11,r10
80004cfa:	0e 9b       	mov	r11,r7
80004cfc:	2d 0b       	sub	r11,-48
80004cfe:	10 fb       	st.b	--r8,r11
80004d00:	0c 9b       	mov	r11,r6
80004d02:	58 96       	cp.w	r6,9
80004d04:	fe 99 ff f9 	brgt	80004cf6 <_vfprintf_r+0xa6e>
80004d08:	2d 0b       	sub	r11,-48
80004d0a:	18 97       	mov	r7,r12
80004d0c:	04 96       	mov	r6,r2
80004d0e:	10 fb       	st.b	--r8,r11
80004d10:	fa ca f9 62 	sub	r10,sp,-1694
80004d14:	c0 38       	rjmp	80004d1a <_vfprintf_r+0xa92>
80004d16:	11 3b       	ld.ub	r11,r8++
80004d18:	14 cb       	st.b	r10++,r11
80004d1a:	12 38       	cp.w	r8,r9
80004d1c:	cf d3       	brcs	80004d16 <_vfprintf_r+0xa8e>
80004d1e:	c0 98       	rjmp	80004d30 <_vfprintf_r+0xaa8>
80004d20:	2d 0b       	sub	r11,-48
80004d22:	33 08       	mov	r8,48
80004d24:	fb 6b 06 9f 	st.b	sp[1695],r11
80004d28:	fb 68 06 9e 	st.b	sp[1694],r8
80004d2c:	fa ca f9 60 	sub	r10,sp,-1696
80004d30:	fa c8 f9 64 	sub	r8,sp,-1692
80004d34:	f4 08 01 08 	sub	r8,r10,r8
80004d38:	50 e8       	stdsp	sp[0x38],r8
80004d3a:	10 92       	mov	r2,r8
80004d3c:	40 6b       	lddsp	r11,sp[0x18]
80004d3e:	16 02       	add	r2,r11
80004d40:	58 1b       	cp.w	r11,1
80004d42:	e0 89 00 05 	brgt	80004d4c <_vfprintf_r+0xac4>
80004d46:	ed b5 00 00 	bld	r5,0x0
80004d4a:	c3 51       	brne	80004db4 <_vfprintf_r+0xb2c>
80004d4c:	2f f2       	sub	r2,-1
80004d4e:	c3 38       	rjmp	80004db4 <_vfprintf_r+0xb2c>
80004d50:	e0 40 00 66 	cp.w	r0,102
80004d54:	c1 c1       	brne	80004d8c <_vfprintf_r+0xb04>
80004d56:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004d5a:	58 02       	cp.w	r2,0
80004d5c:	e0 8a 00 0c 	brle	80004d74 <_vfprintf_r+0xaec>
80004d60:	40 2a       	lddsp	r10,sp[0x8]
80004d62:	58 0a       	cp.w	r10,0
80004d64:	c0 41       	brne	80004d6c <_vfprintf_r+0xae4>
80004d66:	ed b5 00 00 	bld	r5,0x0
80004d6a:	c2 51       	brne	80004db4 <_vfprintf_r+0xb2c>
80004d6c:	2f f2       	sub	r2,-1
80004d6e:	40 29       	lddsp	r9,sp[0x8]
80004d70:	12 02       	add	r2,r9
80004d72:	c0 b8       	rjmp	80004d88 <_vfprintf_r+0xb00>
80004d74:	40 28       	lddsp	r8,sp[0x8]
80004d76:	58 08       	cp.w	r8,0
80004d78:	c0 61       	brne	80004d84 <_vfprintf_r+0xafc>
80004d7a:	ed b5 00 00 	bld	r5,0x0
80004d7e:	c0 30       	breq	80004d84 <_vfprintf_r+0xafc>
80004d80:	30 12       	mov	r2,1
80004d82:	c1 98       	rjmp	80004db4 <_vfprintf_r+0xb2c>
80004d84:	40 22       	lddsp	r2,sp[0x8]
80004d86:	2f e2       	sub	r2,-2
80004d88:	36 60       	mov	r0,102
80004d8a:	c1 58       	rjmp	80004db4 <_vfprintf_r+0xb2c>
80004d8c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004d90:	40 6e       	lddsp	lr,sp[0x18]
80004d92:	1c 32       	cp.w	r2,lr
80004d94:	c0 65       	brlt	80004da0 <_vfprintf_r+0xb18>
80004d96:	ed b5 00 00 	bld	r5,0x0
80004d9a:	f7 b2 00 ff 	subeq	r2,-1
80004d9e:	c0 a8       	rjmp	80004db2 <_vfprintf_r+0xb2a>
80004da0:	e4 08 11 02 	rsub	r8,r2,2
80004da4:	40 6c       	lddsp	r12,sp[0x18]
80004da6:	58 02       	cp.w	r2,0
80004da8:	f0 02 17 a0 	movle	r2,r8
80004dac:	f9 b2 09 01 	movgt	r2,1
80004db0:	18 02       	add	r2,r12
80004db2:	36 70       	mov	r0,103
80004db4:	40 9b       	lddsp	r11,sp[0x24]
80004db6:	58 0b       	cp.w	r11,0
80004db8:	e0 80 05 94 	breq	800058e0 <_vfprintf_r+0x1658>
80004dbc:	32 d8       	mov	r8,45
80004dbe:	fb 68 06 bb 	st.b	sp[1723],r8
80004dc2:	e0 8f 05 93 	bral	800058e8 <_vfprintf_r+0x1660>
80004dc6:	50 a7       	stdsp	sp[0x28],r7
80004dc8:	04 94       	mov	r4,r2
80004dca:	0c 97       	mov	r7,r6
80004dcc:	02 92       	mov	r2,r1
80004dce:	06 96       	mov	r6,r3
80004dd0:	40 41       	lddsp	r1,sp[0x10]
80004dd2:	40 93       	lddsp	r3,sp[0x24]
80004dd4:	0e 99       	mov	r9,r7
80004dd6:	ed b5 00 05 	bld	r5,0x5
80004dda:	c4 81       	brne	80004e6a <_vfprintf_r+0xbe2>
80004ddc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004de0:	40 3e       	lddsp	lr,sp[0xc]
80004de2:	58 0e       	cp.w	lr,0
80004de4:	c1 d0       	breq	80004e1e <_vfprintf_r+0xb96>
80004de6:	10 36       	cp.w	r6,r8
80004de8:	c0 64       	brge	80004df4 <_vfprintf_r+0xb6c>
80004dea:	fa cc f9 44 	sub	r12,sp,-1724
80004dee:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004df2:	c1 d8       	rjmp	80004e2c <_vfprintf_r+0xba4>
80004df4:	fa c8 f9 50 	sub	r8,sp,-1712
80004df8:	1a d8       	st.w	--sp,r8
80004dfa:	fa c8 fa b8 	sub	r8,sp,-1352
80004dfe:	04 9a       	mov	r10,r2
80004e00:	1a d8       	st.w	--sp,r8
80004e02:	fa c8 fb b4 	sub	r8,sp,-1100
80004e06:	0c 9b       	mov	r11,r6
80004e08:	1a d8       	st.w	--sp,r8
80004e0a:	08 9c       	mov	r12,r4
80004e0c:	fa c8 f9 40 	sub	r8,sp,-1728
80004e10:	fa c9 ff b4 	sub	r9,sp,-76
80004e14:	fe b0 f8 a4 	rcall	80003f5c <get_arg>
80004e18:	2f dd       	sub	sp,-12
80004e1a:	78 0a       	ld.w	r10,r12[0x0]
80004e1c:	c2 08       	rjmp	80004e5c <_vfprintf_r+0xbd4>
80004e1e:	2f f7       	sub	r7,-1
80004e20:	10 39       	cp.w	r9,r8
80004e22:	c0 84       	brge	80004e32 <_vfprintf_r+0xbaa>
80004e24:	fa cb f9 44 	sub	r11,sp,-1724
80004e28:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e2c:	ec fa fd 88 	ld.w	r10,r6[-632]
80004e30:	c1 68       	rjmp	80004e5c <_vfprintf_r+0xbd4>
80004e32:	41 09       	lddsp	r9,sp[0x40]
80004e34:	59 f8       	cp.w	r8,31
80004e36:	e0 89 00 10 	brgt	80004e56 <_vfprintf_r+0xbce>
80004e3a:	f2 ca ff fc 	sub	r10,r9,-4
80004e3e:	51 0a       	stdsp	sp[0x40],r10
80004e40:	fa c6 f9 44 	sub	r6,sp,-1724
80004e44:	72 0a       	ld.w	r10,r9[0x0]
80004e46:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e4a:	f3 4a fd 88 	st.w	r9[-632],r10
80004e4e:	2f f8       	sub	r8,-1
80004e50:	fb 48 06 b4 	st.w	sp[1716],r8
80004e54:	c0 48       	rjmp	80004e5c <_vfprintf_r+0xbd4>
80004e56:	72 0a       	ld.w	r10,r9[0x0]
80004e58:	2f c9       	sub	r9,-4
80004e5a:	51 09       	stdsp	sp[0x40],r9
80004e5c:	40 be       	lddsp	lr,sp[0x2c]
80004e5e:	1c 98       	mov	r8,lr
80004e60:	95 1e       	st.w	r10[0x4],lr
80004e62:	bf 58       	asr	r8,0x1f
80004e64:	95 08       	st.w	r10[0x0],r8
80004e66:	fe 9f fa 9f 	bral	800043a4 <_vfprintf_r+0x11c>
80004e6a:	ed b5 00 04 	bld	r5,0x4
80004e6e:	c4 80       	breq	80004efe <_vfprintf_r+0xc76>
80004e70:	e2 15 00 40 	andl	r5,0x40,COH
80004e74:	c4 50       	breq	80004efe <_vfprintf_r+0xc76>
80004e76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e7a:	40 3c       	lddsp	r12,sp[0xc]
80004e7c:	58 0c       	cp.w	r12,0
80004e7e:	c1 d0       	breq	80004eb8 <_vfprintf_r+0xc30>
80004e80:	10 36       	cp.w	r6,r8
80004e82:	c0 64       	brge	80004e8e <_vfprintf_r+0xc06>
80004e84:	fa cb f9 44 	sub	r11,sp,-1724
80004e88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e8c:	c1 d8       	rjmp	80004ec6 <_vfprintf_r+0xc3e>
80004e8e:	fa c8 f9 50 	sub	r8,sp,-1712
80004e92:	1a d8       	st.w	--sp,r8
80004e94:	fa c8 fa b8 	sub	r8,sp,-1352
80004e98:	04 9a       	mov	r10,r2
80004e9a:	1a d8       	st.w	--sp,r8
80004e9c:	fa c8 fb b4 	sub	r8,sp,-1100
80004ea0:	0c 9b       	mov	r11,r6
80004ea2:	1a d8       	st.w	--sp,r8
80004ea4:	08 9c       	mov	r12,r4
80004ea6:	fa c8 f9 40 	sub	r8,sp,-1728
80004eaa:	fa c9 ff b4 	sub	r9,sp,-76
80004eae:	fe b0 f8 57 	rcall	80003f5c <get_arg>
80004eb2:	2f dd       	sub	sp,-12
80004eb4:	78 0a       	ld.w	r10,r12[0x0]
80004eb6:	c2 08       	rjmp	80004ef6 <_vfprintf_r+0xc6e>
80004eb8:	2f f7       	sub	r7,-1
80004eba:	10 39       	cp.w	r9,r8
80004ebc:	c0 84       	brge	80004ecc <_vfprintf_r+0xc44>
80004ebe:	fa ca f9 44 	sub	r10,sp,-1724
80004ec2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004ec6:	ec fa fd 88 	ld.w	r10,r6[-632]
80004eca:	c1 68       	rjmp	80004ef6 <_vfprintf_r+0xc6e>
80004ecc:	41 09       	lddsp	r9,sp[0x40]
80004ece:	59 f8       	cp.w	r8,31
80004ed0:	e0 89 00 10 	brgt	80004ef0 <_vfprintf_r+0xc68>
80004ed4:	f2 ca ff fc 	sub	r10,r9,-4
80004ed8:	51 0a       	stdsp	sp[0x40],r10
80004eda:	fa c6 f9 44 	sub	r6,sp,-1724
80004ede:	72 0a       	ld.w	r10,r9[0x0]
80004ee0:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ee4:	f3 4a fd 88 	st.w	r9[-632],r10
80004ee8:	2f f8       	sub	r8,-1
80004eea:	fb 48 06 b4 	st.w	sp[1716],r8
80004eee:	c0 48       	rjmp	80004ef6 <_vfprintf_r+0xc6e>
80004ef0:	72 0a       	ld.w	r10,r9[0x0]
80004ef2:	2f c9       	sub	r9,-4
80004ef4:	51 09       	stdsp	sp[0x40],r9
80004ef6:	40 be       	lddsp	lr,sp[0x2c]
80004ef8:	b4 0e       	st.h	r10[0x0],lr
80004efa:	fe 9f fa 55 	bral	800043a4 <_vfprintf_r+0x11c>
80004efe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f02:	40 3c       	lddsp	r12,sp[0xc]
80004f04:	58 0c       	cp.w	r12,0
80004f06:	c1 d0       	breq	80004f40 <_vfprintf_r+0xcb8>
80004f08:	10 36       	cp.w	r6,r8
80004f0a:	c0 64       	brge	80004f16 <_vfprintf_r+0xc8e>
80004f0c:	fa cb f9 44 	sub	r11,sp,-1724
80004f10:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f14:	c1 d8       	rjmp	80004f4e <_vfprintf_r+0xcc6>
80004f16:	fa c8 f9 50 	sub	r8,sp,-1712
80004f1a:	1a d8       	st.w	--sp,r8
80004f1c:	fa c8 fa b8 	sub	r8,sp,-1352
80004f20:	04 9a       	mov	r10,r2
80004f22:	1a d8       	st.w	--sp,r8
80004f24:	fa c8 fb b4 	sub	r8,sp,-1100
80004f28:	0c 9b       	mov	r11,r6
80004f2a:	1a d8       	st.w	--sp,r8
80004f2c:	08 9c       	mov	r12,r4
80004f2e:	fa c8 f9 40 	sub	r8,sp,-1728
80004f32:	fa c9 ff b4 	sub	r9,sp,-76
80004f36:	fe b0 f8 13 	rcall	80003f5c <get_arg>
80004f3a:	2f dd       	sub	sp,-12
80004f3c:	78 0a       	ld.w	r10,r12[0x0]
80004f3e:	c2 08       	rjmp	80004f7e <_vfprintf_r+0xcf6>
80004f40:	2f f7       	sub	r7,-1
80004f42:	10 39       	cp.w	r9,r8
80004f44:	c0 84       	brge	80004f54 <_vfprintf_r+0xccc>
80004f46:	fa ca f9 44 	sub	r10,sp,-1724
80004f4a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004f4e:	ec fa fd 88 	ld.w	r10,r6[-632]
80004f52:	c1 68       	rjmp	80004f7e <_vfprintf_r+0xcf6>
80004f54:	41 09       	lddsp	r9,sp[0x40]
80004f56:	59 f8       	cp.w	r8,31
80004f58:	e0 89 00 10 	brgt	80004f78 <_vfprintf_r+0xcf0>
80004f5c:	f2 ca ff fc 	sub	r10,r9,-4
80004f60:	51 0a       	stdsp	sp[0x40],r10
80004f62:	fa c6 f9 44 	sub	r6,sp,-1724
80004f66:	72 0a       	ld.w	r10,r9[0x0]
80004f68:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f6c:	f3 4a fd 88 	st.w	r9[-632],r10
80004f70:	2f f8       	sub	r8,-1
80004f72:	fb 48 06 b4 	st.w	sp[1716],r8
80004f76:	c0 48       	rjmp	80004f7e <_vfprintf_r+0xcf6>
80004f78:	72 0a       	ld.w	r10,r9[0x0]
80004f7a:	2f c9       	sub	r9,-4
80004f7c:	51 09       	stdsp	sp[0x40],r9
80004f7e:	40 be       	lddsp	lr,sp[0x2c]
80004f80:	95 0e       	st.w	r10[0x0],lr
80004f82:	fe 9f fa 11 	bral	800043a4 <_vfprintf_r+0x11c>
80004f86:	50 a7       	stdsp	sp[0x28],r7
80004f88:	50 80       	stdsp	sp[0x20],r0
80004f8a:	0c 97       	mov	r7,r6
80004f8c:	04 94       	mov	r4,r2
80004f8e:	06 96       	mov	r6,r3
80004f90:	02 92       	mov	r2,r1
80004f92:	40 93       	lddsp	r3,sp[0x24]
80004f94:	10 90       	mov	r0,r8
80004f96:	40 41       	lddsp	r1,sp[0x10]
80004f98:	a5 a5       	sbr	r5,0x4
80004f9a:	c0 a8       	rjmp	80004fae <_vfprintf_r+0xd26>
80004f9c:	50 a7       	stdsp	sp[0x28],r7
80004f9e:	50 80       	stdsp	sp[0x20],r0
80004fa0:	0c 97       	mov	r7,r6
80004fa2:	04 94       	mov	r4,r2
80004fa4:	06 96       	mov	r6,r3
80004fa6:	02 92       	mov	r2,r1
80004fa8:	40 93       	lddsp	r3,sp[0x24]
80004faa:	10 90       	mov	r0,r8
80004fac:	40 41       	lddsp	r1,sp[0x10]
80004fae:	ed b5 00 05 	bld	r5,0x5
80004fb2:	c5 d1       	brne	8000506c <_vfprintf_r+0xde4>
80004fb4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fb8:	40 3c       	lddsp	r12,sp[0xc]
80004fba:	58 0c       	cp.w	r12,0
80004fbc:	c2 60       	breq	80005008 <_vfprintf_r+0xd80>
80004fbe:	10 36       	cp.w	r6,r8
80004fc0:	c0 a4       	brge	80004fd4 <_vfprintf_r+0xd4c>
80004fc2:	fa cb f9 44 	sub	r11,sp,-1724
80004fc6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004fca:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004fce:	fa e9 00 00 	st.d	sp[0],r8
80004fd2:	c1 88       	rjmp	80005002 <_vfprintf_r+0xd7a>
80004fd4:	fa c8 f9 50 	sub	r8,sp,-1712
80004fd8:	1a d8       	st.w	--sp,r8
80004fda:	fa c8 fa b8 	sub	r8,sp,-1352
80004fde:	04 9a       	mov	r10,r2
80004fe0:	1a d8       	st.w	--sp,r8
80004fe2:	0c 9b       	mov	r11,r6
80004fe4:	fa c8 fb b4 	sub	r8,sp,-1100
80004fe8:	08 9c       	mov	r12,r4
80004fea:	1a d8       	st.w	--sp,r8
80004fec:	fa c8 f9 40 	sub	r8,sp,-1728
80004ff0:	fa c9 ff b4 	sub	r9,sp,-76
80004ff4:	fe b0 f7 b4 	rcall	80003f5c <get_arg>
80004ff8:	2f dd       	sub	sp,-12
80004ffa:	f8 ea 00 00 	ld.d	r10,r12[0]
80004ffe:	fa eb 00 00 	st.d	sp[0],r10
80005002:	30 08       	mov	r8,0
80005004:	e0 8f 03 de 	bral	800057c0 <_vfprintf_r+0x1538>
80005008:	ee ca ff ff 	sub	r10,r7,-1
8000500c:	10 37       	cp.w	r7,r8
8000500e:	c0 b4       	brge	80005024 <_vfprintf_r+0xd9c>
80005010:	fa c9 f9 44 	sub	r9,sp,-1724
80005014:	14 97       	mov	r7,r10
80005016:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000501a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000501e:	fa eb 00 00 	st.d	sp[0],r10
80005022:	c1 88       	rjmp	80005052 <_vfprintf_r+0xdca>
80005024:	41 09       	lddsp	r9,sp[0x40]
80005026:	59 f8       	cp.w	r8,31
80005028:	e0 89 00 18 	brgt	80005058 <_vfprintf_r+0xdd0>
8000502c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005030:	f2 cb ff f8 	sub	r11,r9,-8
80005034:	fa e7 00 00 	st.d	sp[0],r6
80005038:	51 0b       	stdsp	sp[0x40],r11
8000503a:	fa c6 f9 44 	sub	r6,sp,-1724
8000503e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005042:	fa e6 00 00 	ld.d	r6,sp[0]
80005046:	f2 e7 fd 88 	st.d	r9[-632],r6
8000504a:	2f f8       	sub	r8,-1
8000504c:	14 97       	mov	r7,r10
8000504e:	fb 48 06 b4 	st.w	sp[1716],r8
80005052:	40 38       	lddsp	r8,sp[0xc]
80005054:	e0 8f 03 b6 	bral	800057c0 <_vfprintf_r+0x1538>
80005058:	f2 e6 00 00 	ld.d	r6,r9[0]
8000505c:	40 38       	lddsp	r8,sp[0xc]
8000505e:	fa e7 00 00 	st.d	sp[0],r6
80005062:	2f 89       	sub	r9,-8
80005064:	14 97       	mov	r7,r10
80005066:	51 09       	stdsp	sp[0x40],r9
80005068:	e0 8f 03 ac 	bral	800057c0 <_vfprintf_r+0x1538>
8000506c:	ed b5 00 04 	bld	r5,0x4
80005070:	c1 61       	brne	8000509c <_vfprintf_r+0xe14>
80005072:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005076:	40 3e       	lddsp	lr,sp[0xc]
80005078:	58 0e       	cp.w	lr,0
8000507a:	c0 80       	breq	8000508a <_vfprintf_r+0xe02>
8000507c:	10 36       	cp.w	r6,r8
8000507e:	c6 74       	brge	8000514c <_vfprintf_r+0xec4>
80005080:	fa cc f9 44 	sub	r12,sp,-1724
80005084:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005088:	c8 08       	rjmp	80005188 <_vfprintf_r+0xf00>
8000508a:	ee ca ff ff 	sub	r10,r7,-1
8000508e:	10 37       	cp.w	r7,r8
80005090:	c7 f4       	brge	8000518e <_vfprintf_r+0xf06>
80005092:	fa cb f9 44 	sub	r11,sp,-1724
80005096:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000509a:	c7 68       	rjmp	80005186 <_vfprintf_r+0xefe>
8000509c:	ed b5 00 06 	bld	r5,0x6
800050a0:	c4 a1       	brne	80005134 <_vfprintf_r+0xeac>
800050a2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050a6:	40 3c       	lddsp	r12,sp[0xc]
800050a8:	58 0c       	cp.w	r12,0
800050aa:	c1 d0       	breq	800050e4 <_vfprintf_r+0xe5c>
800050ac:	10 36       	cp.w	r6,r8
800050ae:	c0 64       	brge	800050ba <_vfprintf_r+0xe32>
800050b0:	fa cb f9 44 	sub	r11,sp,-1724
800050b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800050b8:	c1 f8       	rjmp	800050f6 <_vfprintf_r+0xe6e>
800050ba:	fa c8 f9 50 	sub	r8,sp,-1712
800050be:	1a d8       	st.w	--sp,r8
800050c0:	fa c8 fa b8 	sub	r8,sp,-1352
800050c4:	1a d8       	st.w	--sp,r8
800050c6:	fa c8 fb b4 	sub	r8,sp,-1100
800050ca:	1a d8       	st.w	--sp,r8
800050cc:	fa c8 f9 40 	sub	r8,sp,-1728
800050d0:	fa c9 ff b4 	sub	r9,sp,-76
800050d4:	04 9a       	mov	r10,r2
800050d6:	0c 9b       	mov	r11,r6
800050d8:	08 9c       	mov	r12,r4
800050da:	fe b0 f7 41 	rcall	80003f5c <get_arg>
800050de:	2f dd       	sub	sp,-12
800050e0:	98 18       	ld.sh	r8,r12[0x2]
800050e2:	c2 68       	rjmp	8000512e <_vfprintf_r+0xea6>
800050e4:	ee ca ff ff 	sub	r10,r7,-1
800050e8:	10 37       	cp.w	r7,r8
800050ea:	c0 94       	brge	800050fc <_vfprintf_r+0xe74>
800050ec:	fa c9 f9 44 	sub	r9,sp,-1724
800050f0:	14 97       	mov	r7,r10
800050f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800050f6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800050fa:	c1 a8       	rjmp	8000512e <_vfprintf_r+0xea6>
800050fc:	41 09       	lddsp	r9,sp[0x40]
800050fe:	59 f8       	cp.w	r8,31
80005100:	e0 89 00 13 	brgt	80005126 <_vfprintf_r+0xe9e>
80005104:	f2 cb ff fc 	sub	r11,r9,-4
80005108:	51 0b       	stdsp	sp[0x40],r11
8000510a:	72 09       	ld.w	r9,r9[0x0]
8000510c:	fa c6 f9 44 	sub	r6,sp,-1724
80005110:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005114:	2f f8       	sub	r8,-1
80005116:	f7 49 fd 88 	st.w	r11[-632],r9
8000511a:	fb 48 06 b4 	st.w	sp[1716],r8
8000511e:	14 97       	mov	r7,r10
80005120:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005124:	c0 58       	rjmp	8000512e <_vfprintf_r+0xea6>
80005126:	92 18       	ld.sh	r8,r9[0x2]
80005128:	14 97       	mov	r7,r10
8000512a:	2f c9       	sub	r9,-4
8000512c:	51 09       	stdsp	sp[0x40],r9
8000512e:	5c 78       	castu.h	r8
80005130:	50 18       	stdsp	sp[0x4],r8
80005132:	c4 68       	rjmp	800051be <_vfprintf_r+0xf36>
80005134:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005138:	40 3c       	lddsp	r12,sp[0xc]
8000513a:	58 0c       	cp.w	r12,0
8000513c:	c1 d0       	breq	80005176 <_vfprintf_r+0xeee>
8000513e:	10 36       	cp.w	r6,r8
80005140:	c0 64       	brge	8000514c <_vfprintf_r+0xec4>
80005142:	fa cb f9 44 	sub	r11,sp,-1724
80005146:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000514a:	c1 f8       	rjmp	80005188 <_vfprintf_r+0xf00>
8000514c:	fa c8 f9 50 	sub	r8,sp,-1712
80005150:	1a d8       	st.w	--sp,r8
80005152:	fa c8 fa b8 	sub	r8,sp,-1352
80005156:	0c 9b       	mov	r11,r6
80005158:	1a d8       	st.w	--sp,r8
8000515a:	fa c8 fb b4 	sub	r8,sp,-1100
8000515e:	04 9a       	mov	r10,r2
80005160:	1a d8       	st.w	--sp,r8
80005162:	08 9c       	mov	r12,r4
80005164:	fa c8 f9 40 	sub	r8,sp,-1728
80005168:	fa c9 ff b4 	sub	r9,sp,-76
8000516c:	fe b0 f6 f8 	rcall	80003f5c <get_arg>
80005170:	2f dd       	sub	sp,-12
80005172:	78 0b       	ld.w	r11,r12[0x0]
80005174:	c2 48       	rjmp	800051bc <_vfprintf_r+0xf34>
80005176:	ee ca ff ff 	sub	r10,r7,-1
8000517a:	10 37       	cp.w	r7,r8
8000517c:	c0 94       	brge	8000518e <_vfprintf_r+0xf06>
8000517e:	fa c9 f9 44 	sub	r9,sp,-1724
80005182:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005186:	14 97       	mov	r7,r10
80005188:	ec fb fd 88 	ld.w	r11,r6[-632]
8000518c:	c1 88       	rjmp	800051bc <_vfprintf_r+0xf34>
8000518e:	41 09       	lddsp	r9,sp[0x40]
80005190:	59 f8       	cp.w	r8,31
80005192:	e0 89 00 11 	brgt	800051b4 <_vfprintf_r+0xf2c>
80005196:	f2 cb ff fc 	sub	r11,r9,-4
8000519a:	51 0b       	stdsp	sp[0x40],r11
8000519c:	fa c6 f9 44 	sub	r6,sp,-1724
800051a0:	72 0b       	ld.w	r11,r9[0x0]
800051a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800051a6:	f3 4b fd 88 	st.w	r9[-632],r11
800051aa:	2f f8       	sub	r8,-1
800051ac:	14 97       	mov	r7,r10
800051ae:	fb 48 06 b4 	st.w	sp[1716],r8
800051b2:	c0 58       	rjmp	800051bc <_vfprintf_r+0xf34>
800051b4:	72 0b       	ld.w	r11,r9[0x0]
800051b6:	14 97       	mov	r7,r10
800051b8:	2f c9       	sub	r9,-4
800051ba:	51 09       	stdsp	sp[0x40],r9
800051bc:	50 1b       	stdsp	sp[0x4],r11
800051be:	30 0e       	mov	lr,0
800051c0:	50 0e       	stdsp	sp[0x0],lr
800051c2:	1c 98       	mov	r8,lr
800051c4:	e0 8f 02 fe 	bral	800057c0 <_vfprintf_r+0x1538>
800051c8:	50 a7       	stdsp	sp[0x28],r7
800051ca:	50 80       	stdsp	sp[0x20],r0
800051cc:	0c 97       	mov	r7,r6
800051ce:	04 94       	mov	r4,r2
800051d0:	06 96       	mov	r6,r3
800051d2:	02 92       	mov	r2,r1
800051d4:	40 93       	lddsp	r3,sp[0x24]
800051d6:	40 41       	lddsp	r1,sp[0x10]
800051d8:	0e 99       	mov	r9,r7
800051da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051de:	40 3c       	lddsp	r12,sp[0xc]
800051e0:	58 0c       	cp.w	r12,0
800051e2:	c1 d0       	breq	8000521c <_vfprintf_r+0xf94>
800051e4:	10 36       	cp.w	r6,r8
800051e6:	c0 64       	brge	800051f2 <_vfprintf_r+0xf6a>
800051e8:	fa cb f9 44 	sub	r11,sp,-1724
800051ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051f0:	c1 d8       	rjmp	8000522a <_vfprintf_r+0xfa2>
800051f2:	fa c8 f9 50 	sub	r8,sp,-1712
800051f6:	1a d8       	st.w	--sp,r8
800051f8:	fa c8 fa b8 	sub	r8,sp,-1352
800051fc:	1a d8       	st.w	--sp,r8
800051fe:	fa c8 fb b4 	sub	r8,sp,-1100
80005202:	1a d8       	st.w	--sp,r8
80005204:	fa c9 ff b4 	sub	r9,sp,-76
80005208:	fa c8 f9 40 	sub	r8,sp,-1728
8000520c:	04 9a       	mov	r10,r2
8000520e:	0c 9b       	mov	r11,r6
80005210:	08 9c       	mov	r12,r4
80005212:	fe b0 f6 a5 	rcall	80003f5c <get_arg>
80005216:	2f dd       	sub	sp,-12
80005218:	78 09       	ld.w	r9,r12[0x0]
8000521a:	c2 18       	rjmp	8000525c <_vfprintf_r+0xfd4>
8000521c:	2f f7       	sub	r7,-1
8000521e:	10 39       	cp.w	r9,r8
80005220:	c0 84       	brge	80005230 <_vfprintf_r+0xfa8>
80005222:	fa ca f9 44 	sub	r10,sp,-1724
80005226:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000522a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000522e:	c1 78       	rjmp	8000525c <_vfprintf_r+0xfd4>
80005230:	41 09       	lddsp	r9,sp[0x40]
80005232:	59 f8       	cp.w	r8,31
80005234:	e0 89 00 10 	brgt	80005254 <_vfprintf_r+0xfcc>
80005238:	f2 ca ff fc 	sub	r10,r9,-4
8000523c:	51 0a       	stdsp	sp[0x40],r10
8000523e:	fa c6 f9 44 	sub	r6,sp,-1724
80005242:	72 09       	ld.w	r9,r9[0x0]
80005244:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005248:	f5 49 fd 88 	st.w	r10[-632],r9
8000524c:	2f f8       	sub	r8,-1
8000524e:	fb 48 06 b4 	st.w	sp[1716],r8
80005252:	c0 58       	rjmp	8000525c <_vfprintf_r+0xfd4>
80005254:	f2 c8 ff fc 	sub	r8,r9,-4
80005258:	51 08       	stdsp	sp[0x40],r8
8000525a:	72 09       	ld.w	r9,r9[0x0]
8000525c:	33 08       	mov	r8,48
8000525e:	fb 68 06 b8 	st.b	sp[1720],r8
80005262:	37 88       	mov	r8,120
80005264:	30 0e       	mov	lr,0
80005266:	fb 68 06 b9 	st.b	sp[1721],r8
8000526a:	fe cc b4 1e 	sub	r12,pc,-19426
8000526e:	50 19       	stdsp	sp[0x4],r9
80005270:	a1 b5       	sbr	r5,0x1
80005272:	50 0e       	stdsp	sp[0x0],lr
80005274:	50 dc       	stdsp	sp[0x34],r12
80005276:	30 28       	mov	r8,2
80005278:	37 80       	mov	r0,120
8000527a:	e0 8f 02 a3 	bral	800057c0 <_vfprintf_r+0x1538>
8000527e:	50 a7       	stdsp	sp[0x28],r7
80005280:	50 80       	stdsp	sp[0x20],r0
80005282:	10 90       	mov	r0,r8
80005284:	30 08       	mov	r8,0
80005286:	fb 68 06 bb 	st.b	sp[1723],r8
8000528a:	0c 97       	mov	r7,r6
8000528c:	04 94       	mov	r4,r2
8000528e:	06 96       	mov	r6,r3
80005290:	02 92       	mov	r2,r1
80005292:	40 93       	lddsp	r3,sp[0x24]
80005294:	40 41       	lddsp	r1,sp[0x10]
80005296:	0e 99       	mov	r9,r7
80005298:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000529c:	40 3b       	lddsp	r11,sp[0xc]
8000529e:	58 0b       	cp.w	r11,0
800052a0:	c1 d0       	breq	800052da <_vfprintf_r+0x1052>
800052a2:	10 36       	cp.w	r6,r8
800052a4:	c0 64       	brge	800052b0 <_vfprintf_r+0x1028>
800052a6:	fa ca f9 44 	sub	r10,sp,-1724
800052aa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800052ae:	c1 d8       	rjmp	800052e8 <_vfprintf_r+0x1060>
800052b0:	fa c8 f9 50 	sub	r8,sp,-1712
800052b4:	1a d8       	st.w	--sp,r8
800052b6:	fa c8 fa b8 	sub	r8,sp,-1352
800052ba:	1a d8       	st.w	--sp,r8
800052bc:	fa c8 fb b4 	sub	r8,sp,-1100
800052c0:	0c 9b       	mov	r11,r6
800052c2:	1a d8       	st.w	--sp,r8
800052c4:	04 9a       	mov	r10,r2
800052c6:	fa c8 f9 40 	sub	r8,sp,-1728
800052ca:	fa c9 ff b4 	sub	r9,sp,-76
800052ce:	08 9c       	mov	r12,r4
800052d0:	fe b0 f6 46 	rcall	80003f5c <get_arg>
800052d4:	2f dd       	sub	sp,-12
800052d6:	78 06       	ld.w	r6,r12[0x0]
800052d8:	c2 08       	rjmp	80005318 <_vfprintf_r+0x1090>
800052da:	2f f7       	sub	r7,-1
800052dc:	10 39       	cp.w	r9,r8
800052de:	c0 84       	brge	800052ee <_vfprintf_r+0x1066>
800052e0:	fa c9 f9 44 	sub	r9,sp,-1724
800052e4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800052e8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800052ec:	c1 68       	rjmp	80005318 <_vfprintf_r+0x1090>
800052ee:	41 09       	lddsp	r9,sp[0x40]
800052f0:	59 f8       	cp.w	r8,31
800052f2:	e0 89 00 10 	brgt	80005312 <_vfprintf_r+0x108a>
800052f6:	f2 ca ff fc 	sub	r10,r9,-4
800052fa:	51 0a       	stdsp	sp[0x40],r10
800052fc:	72 06       	ld.w	r6,r9[0x0]
800052fe:	fa ce f9 44 	sub	lr,sp,-1724
80005302:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005306:	f3 46 fd 88 	st.w	r9[-632],r6
8000530a:	2f f8       	sub	r8,-1
8000530c:	fb 48 06 b4 	st.w	sp[1716],r8
80005310:	c0 48       	rjmp	80005318 <_vfprintf_r+0x1090>
80005312:	72 06       	ld.w	r6,r9[0x0]
80005314:	2f c9       	sub	r9,-4
80005316:	51 09       	stdsp	sp[0x40],r9
80005318:	40 2c       	lddsp	r12,sp[0x8]
8000531a:	58 0c       	cp.w	r12,0
8000531c:	c1 05       	brlt	8000533c <_vfprintf_r+0x10b4>
8000531e:	18 9a       	mov	r10,r12
80005320:	30 0b       	mov	r11,0
80005322:	0c 9c       	mov	r12,r6
80005324:	e0 a0 14 58 	rcall	80007bd4 <memchr>
80005328:	e0 80 02 df 	breq	800058e6 <_vfprintf_r+0x165e>
8000532c:	f8 06 01 02 	sub	r2,r12,r6
80005330:	40 2b       	lddsp	r11,sp[0x8]
80005332:	16 32       	cp.w	r2,r11
80005334:	e0 89 02 d9 	brgt	800058e6 <_vfprintf_r+0x165e>
80005338:	e0 8f 02 d4 	bral	800058e0 <_vfprintf_r+0x1658>
8000533c:	30 0a       	mov	r10,0
8000533e:	0c 9c       	mov	r12,r6
80005340:	50 2a       	stdsp	sp[0x8],r10
80005342:	e0 a0 19 2b 	rcall	80008598 <strlen>
80005346:	18 92       	mov	r2,r12
80005348:	e0 8f 02 d2 	bral	800058ec <_vfprintf_r+0x1664>
8000534c:	50 a7       	stdsp	sp[0x28],r7
8000534e:	50 80       	stdsp	sp[0x20],r0
80005350:	0c 97       	mov	r7,r6
80005352:	04 94       	mov	r4,r2
80005354:	06 96       	mov	r6,r3
80005356:	02 92       	mov	r2,r1
80005358:	40 93       	lddsp	r3,sp[0x24]
8000535a:	10 90       	mov	r0,r8
8000535c:	40 41       	lddsp	r1,sp[0x10]
8000535e:	a5 a5       	sbr	r5,0x4
80005360:	c0 a8       	rjmp	80005374 <_vfprintf_r+0x10ec>
80005362:	50 a7       	stdsp	sp[0x28],r7
80005364:	50 80       	stdsp	sp[0x20],r0
80005366:	0c 97       	mov	r7,r6
80005368:	04 94       	mov	r4,r2
8000536a:	06 96       	mov	r6,r3
8000536c:	02 92       	mov	r2,r1
8000536e:	40 93       	lddsp	r3,sp[0x24]
80005370:	10 90       	mov	r0,r8
80005372:	40 41       	lddsp	r1,sp[0x10]
80005374:	ed b5 00 05 	bld	r5,0x5
80005378:	c5 61       	brne	80005424 <_vfprintf_r+0x119c>
8000537a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000537e:	40 39       	lddsp	r9,sp[0xc]
80005380:	58 09       	cp.w	r9,0
80005382:	c2 10       	breq	800053c4 <_vfprintf_r+0x113c>
80005384:	10 36       	cp.w	r6,r8
80005386:	c0 74       	brge	80005394 <_vfprintf_r+0x110c>
80005388:	fa c8 f9 44 	sub	r8,sp,-1724
8000538c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005390:	c2 38       	rjmp	800053d6 <_vfprintf_r+0x114e>
80005392:	d7 03       	nop
80005394:	fa c8 f9 50 	sub	r8,sp,-1712
80005398:	1a d8       	st.w	--sp,r8
8000539a:	fa c8 fa b8 	sub	r8,sp,-1352
8000539e:	1a d8       	st.w	--sp,r8
800053a0:	fa c8 fb b4 	sub	r8,sp,-1100
800053a4:	1a d8       	st.w	--sp,r8
800053a6:	fa c8 f9 40 	sub	r8,sp,-1728
800053aa:	fa c9 ff b4 	sub	r9,sp,-76
800053ae:	04 9a       	mov	r10,r2
800053b0:	0c 9b       	mov	r11,r6
800053b2:	08 9c       	mov	r12,r4
800053b4:	fe b0 f5 d4 	rcall	80003f5c <get_arg>
800053b8:	2f dd       	sub	sp,-12
800053ba:	f8 e8 00 00 	ld.d	r8,r12[0]
800053be:	fa e9 00 00 	st.d	sp[0],r8
800053c2:	c2 e8       	rjmp	8000541e <_vfprintf_r+0x1196>
800053c4:	ee ca ff ff 	sub	r10,r7,-1
800053c8:	10 37       	cp.w	r7,r8
800053ca:	c0 b4       	brge	800053e0 <_vfprintf_r+0x1158>
800053cc:	fa c8 f9 44 	sub	r8,sp,-1724
800053d0:	14 97       	mov	r7,r10
800053d2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800053d6:	ec ea fd 88 	ld.d	r10,r6[-632]
800053da:	fa eb 00 00 	st.d	sp[0],r10
800053de:	c2 08       	rjmp	8000541e <_vfprintf_r+0x1196>
800053e0:	41 09       	lddsp	r9,sp[0x40]
800053e2:	59 f8       	cp.w	r8,31
800053e4:	e0 89 00 16 	brgt	80005410 <_vfprintf_r+0x1188>
800053e8:	f2 e6 00 00 	ld.d	r6,r9[0]
800053ec:	f2 cb ff f8 	sub	r11,r9,-8
800053f0:	fa e7 00 00 	st.d	sp[0],r6
800053f4:	51 0b       	stdsp	sp[0x40],r11
800053f6:	fa c6 f9 44 	sub	r6,sp,-1724
800053fa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800053fe:	fa e6 00 00 	ld.d	r6,sp[0]
80005402:	f2 e7 fd 88 	st.d	r9[-632],r6
80005406:	2f f8       	sub	r8,-1
80005408:	14 97       	mov	r7,r10
8000540a:	fb 48 06 b4 	st.w	sp[1716],r8
8000540e:	c0 88       	rjmp	8000541e <_vfprintf_r+0x1196>
80005410:	f2 e6 00 00 	ld.d	r6,r9[0]
80005414:	2f 89       	sub	r9,-8
80005416:	fa e7 00 00 	st.d	sp[0],r6
8000541a:	51 09       	stdsp	sp[0x40],r9
8000541c:	14 97       	mov	r7,r10
8000541e:	30 18       	mov	r8,1
80005420:	e0 8f 01 d0 	bral	800057c0 <_vfprintf_r+0x1538>
80005424:	ed b5 00 04 	bld	r5,0x4
80005428:	c1 61       	brne	80005454 <_vfprintf_r+0x11cc>
8000542a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000542e:	40 3e       	lddsp	lr,sp[0xc]
80005430:	58 0e       	cp.w	lr,0
80005432:	c0 80       	breq	80005442 <_vfprintf_r+0x11ba>
80005434:	10 36       	cp.w	r6,r8
80005436:	c6 74       	brge	80005504 <_vfprintf_r+0x127c>
80005438:	fa cc f9 44 	sub	r12,sp,-1724
8000543c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005440:	c8 08       	rjmp	80005540 <_vfprintf_r+0x12b8>
80005442:	ee ca ff ff 	sub	r10,r7,-1
80005446:	10 37       	cp.w	r7,r8
80005448:	c7 f4       	brge	80005546 <_vfprintf_r+0x12be>
8000544a:	fa cb f9 44 	sub	r11,sp,-1724
8000544e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005452:	c7 68       	rjmp	8000553e <_vfprintf_r+0x12b6>
80005454:	ed b5 00 06 	bld	r5,0x6
80005458:	c4 a1       	brne	800054ec <_vfprintf_r+0x1264>
8000545a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000545e:	40 3c       	lddsp	r12,sp[0xc]
80005460:	58 0c       	cp.w	r12,0
80005462:	c1 d0       	breq	8000549c <_vfprintf_r+0x1214>
80005464:	10 36       	cp.w	r6,r8
80005466:	c0 64       	brge	80005472 <_vfprintf_r+0x11ea>
80005468:	fa cb f9 44 	sub	r11,sp,-1724
8000546c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005470:	c1 f8       	rjmp	800054ae <_vfprintf_r+0x1226>
80005472:	fa c8 f9 50 	sub	r8,sp,-1712
80005476:	1a d8       	st.w	--sp,r8
80005478:	fa c8 fa b8 	sub	r8,sp,-1352
8000547c:	1a d8       	st.w	--sp,r8
8000547e:	fa c8 fb b4 	sub	r8,sp,-1100
80005482:	1a d8       	st.w	--sp,r8
80005484:	fa c8 f9 40 	sub	r8,sp,-1728
80005488:	fa c9 ff b4 	sub	r9,sp,-76
8000548c:	04 9a       	mov	r10,r2
8000548e:	0c 9b       	mov	r11,r6
80005490:	08 9c       	mov	r12,r4
80005492:	fe b0 f5 65 	rcall	80003f5c <get_arg>
80005496:	2f dd       	sub	sp,-12
80005498:	98 18       	ld.sh	r8,r12[0x2]
8000549a:	c2 68       	rjmp	800054e6 <_vfprintf_r+0x125e>
8000549c:	ee ca ff ff 	sub	r10,r7,-1
800054a0:	10 37       	cp.w	r7,r8
800054a2:	c0 94       	brge	800054b4 <_vfprintf_r+0x122c>
800054a4:	fa c9 f9 44 	sub	r9,sp,-1724
800054a8:	14 97       	mov	r7,r10
800054aa:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054ae:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800054b2:	c1 a8       	rjmp	800054e6 <_vfprintf_r+0x125e>
800054b4:	41 09       	lddsp	r9,sp[0x40]
800054b6:	59 f8       	cp.w	r8,31
800054b8:	e0 89 00 13 	brgt	800054de <_vfprintf_r+0x1256>
800054bc:	f2 cb ff fc 	sub	r11,r9,-4
800054c0:	51 0b       	stdsp	sp[0x40],r11
800054c2:	72 09       	ld.w	r9,r9[0x0]
800054c4:	fa c6 f9 44 	sub	r6,sp,-1724
800054c8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800054cc:	2f f8       	sub	r8,-1
800054ce:	f7 49 fd 88 	st.w	r11[-632],r9
800054d2:	fb 48 06 b4 	st.w	sp[1716],r8
800054d6:	14 97       	mov	r7,r10
800054d8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800054dc:	c0 58       	rjmp	800054e6 <_vfprintf_r+0x125e>
800054de:	92 18       	ld.sh	r8,r9[0x2]
800054e0:	14 97       	mov	r7,r10
800054e2:	2f c9       	sub	r9,-4
800054e4:	51 09       	stdsp	sp[0x40],r9
800054e6:	5c 78       	castu.h	r8
800054e8:	50 18       	stdsp	sp[0x4],r8
800054ea:	c4 68       	rjmp	80005576 <_vfprintf_r+0x12ee>
800054ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054f0:	40 3c       	lddsp	r12,sp[0xc]
800054f2:	58 0c       	cp.w	r12,0
800054f4:	c1 d0       	breq	8000552e <_vfprintf_r+0x12a6>
800054f6:	10 36       	cp.w	r6,r8
800054f8:	c0 64       	brge	80005504 <_vfprintf_r+0x127c>
800054fa:	fa cb f9 44 	sub	r11,sp,-1724
800054fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005502:	c1 f8       	rjmp	80005540 <_vfprintf_r+0x12b8>
80005504:	fa c8 f9 50 	sub	r8,sp,-1712
80005508:	1a d8       	st.w	--sp,r8
8000550a:	fa c8 fa b8 	sub	r8,sp,-1352
8000550e:	0c 9b       	mov	r11,r6
80005510:	1a d8       	st.w	--sp,r8
80005512:	fa c8 fb b4 	sub	r8,sp,-1100
80005516:	04 9a       	mov	r10,r2
80005518:	1a d8       	st.w	--sp,r8
8000551a:	08 9c       	mov	r12,r4
8000551c:	fa c8 f9 40 	sub	r8,sp,-1728
80005520:	fa c9 ff b4 	sub	r9,sp,-76
80005524:	fe b0 f5 1c 	rcall	80003f5c <get_arg>
80005528:	2f dd       	sub	sp,-12
8000552a:	78 0b       	ld.w	r11,r12[0x0]
8000552c:	c2 48       	rjmp	80005574 <_vfprintf_r+0x12ec>
8000552e:	ee ca ff ff 	sub	r10,r7,-1
80005532:	10 37       	cp.w	r7,r8
80005534:	c0 94       	brge	80005546 <_vfprintf_r+0x12be>
80005536:	fa c9 f9 44 	sub	r9,sp,-1724
8000553a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000553e:	14 97       	mov	r7,r10
80005540:	ec fb fd 88 	ld.w	r11,r6[-632]
80005544:	c1 88       	rjmp	80005574 <_vfprintf_r+0x12ec>
80005546:	41 09       	lddsp	r9,sp[0x40]
80005548:	59 f8       	cp.w	r8,31
8000554a:	e0 89 00 11 	brgt	8000556c <_vfprintf_r+0x12e4>
8000554e:	f2 cb ff fc 	sub	r11,r9,-4
80005552:	51 0b       	stdsp	sp[0x40],r11
80005554:	fa c6 f9 44 	sub	r6,sp,-1724
80005558:	72 0b       	ld.w	r11,r9[0x0]
8000555a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000555e:	f3 4b fd 88 	st.w	r9[-632],r11
80005562:	2f f8       	sub	r8,-1
80005564:	14 97       	mov	r7,r10
80005566:	fb 48 06 b4 	st.w	sp[1716],r8
8000556a:	c0 58       	rjmp	80005574 <_vfprintf_r+0x12ec>
8000556c:	72 0b       	ld.w	r11,r9[0x0]
8000556e:	14 97       	mov	r7,r10
80005570:	2f c9       	sub	r9,-4
80005572:	51 09       	stdsp	sp[0x40],r9
80005574:	50 1b       	stdsp	sp[0x4],r11
80005576:	30 0e       	mov	lr,0
80005578:	30 18       	mov	r8,1
8000557a:	50 0e       	stdsp	sp[0x0],lr
8000557c:	c2 29       	rjmp	800057c0 <_vfprintf_r+0x1538>
8000557e:	50 a7       	stdsp	sp[0x28],r7
80005580:	50 80       	stdsp	sp[0x20],r0
80005582:	0c 97       	mov	r7,r6
80005584:	04 94       	mov	r4,r2
80005586:	06 96       	mov	r6,r3
80005588:	02 92       	mov	r2,r1
8000558a:	fe cc b7 3e 	sub	r12,pc,-18626
8000558e:	40 93       	lddsp	r3,sp[0x24]
80005590:	10 90       	mov	r0,r8
80005592:	40 41       	lddsp	r1,sp[0x10]
80005594:	50 dc       	stdsp	sp[0x34],r12
80005596:	ed b5 00 05 	bld	r5,0x5
8000559a:	c5 51       	brne	80005644 <_vfprintf_r+0x13bc>
8000559c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055a0:	40 3b       	lddsp	r11,sp[0xc]
800055a2:	58 0b       	cp.w	r11,0
800055a4:	c2 20       	breq	800055e8 <_vfprintf_r+0x1360>
800055a6:	10 36       	cp.w	r6,r8
800055a8:	c0 a4       	brge	800055bc <_vfprintf_r+0x1334>
800055aa:	fa ca f9 44 	sub	r10,sp,-1724
800055ae:	f4 06 00 36 	add	r6,r10,r6<<0x3
800055b2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800055b6:	fa e9 00 00 	st.d	sp[0],r8
800055ba:	cf 28       	rjmp	8000579e <_vfprintf_r+0x1516>
800055bc:	fa c8 f9 50 	sub	r8,sp,-1712
800055c0:	1a d8       	st.w	--sp,r8
800055c2:	fa c8 fa b8 	sub	r8,sp,-1352
800055c6:	04 9a       	mov	r10,r2
800055c8:	1a d8       	st.w	--sp,r8
800055ca:	0c 9b       	mov	r11,r6
800055cc:	fa c8 fb b4 	sub	r8,sp,-1100
800055d0:	08 9c       	mov	r12,r4
800055d2:	1a d8       	st.w	--sp,r8
800055d4:	fa c8 f9 40 	sub	r8,sp,-1728
800055d8:	fa c9 ff b4 	sub	r9,sp,-76
800055dc:	fe b0 f4 c0 	rcall	80003f5c <get_arg>
800055e0:	2f dd       	sub	sp,-12
800055e2:	f8 ea 00 00 	ld.d	r10,r12[0]
800055e6:	c0 c8       	rjmp	800055fe <_vfprintf_r+0x1376>
800055e8:	ee ca ff ff 	sub	r10,r7,-1
800055ec:	10 37       	cp.w	r7,r8
800055ee:	c0 b4       	brge	80005604 <_vfprintf_r+0x137c>
800055f0:	fa c9 f9 44 	sub	r9,sp,-1724
800055f4:	14 97       	mov	r7,r10
800055f6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055fa:	ec ea fd 88 	ld.d	r10,r6[-632]
800055fe:	fa eb 00 00 	st.d	sp[0],r10
80005602:	cc e8       	rjmp	8000579e <_vfprintf_r+0x1516>
80005604:	41 09       	lddsp	r9,sp[0x40]
80005606:	59 f8       	cp.w	r8,31
80005608:	e0 89 00 16 	brgt	80005634 <_vfprintf_r+0x13ac>
8000560c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005610:	f2 cb ff f8 	sub	r11,r9,-8
80005614:	fa e7 00 00 	st.d	sp[0],r6
80005618:	51 0b       	stdsp	sp[0x40],r11
8000561a:	fa c6 f9 44 	sub	r6,sp,-1724
8000561e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005622:	fa e6 00 00 	ld.d	r6,sp[0]
80005626:	f2 e7 fd 88 	st.d	r9[-632],r6
8000562a:	2f f8       	sub	r8,-1
8000562c:	14 97       	mov	r7,r10
8000562e:	fb 48 06 b4 	st.w	sp[1716],r8
80005632:	cb 68       	rjmp	8000579e <_vfprintf_r+0x1516>
80005634:	f2 e6 00 00 	ld.d	r6,r9[0]
80005638:	2f 89       	sub	r9,-8
8000563a:	fa e7 00 00 	st.d	sp[0],r6
8000563e:	51 09       	stdsp	sp[0x40],r9
80005640:	14 97       	mov	r7,r10
80005642:	ca e8       	rjmp	8000579e <_vfprintf_r+0x1516>
80005644:	ed b5 00 04 	bld	r5,0x4
80005648:	c1 71       	brne	80005676 <_vfprintf_r+0x13ee>
8000564a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000564e:	40 3e       	lddsp	lr,sp[0xc]
80005650:	58 0e       	cp.w	lr,0
80005652:	c0 80       	breq	80005662 <_vfprintf_r+0x13da>
80005654:	10 36       	cp.w	r6,r8
80005656:	c6 94       	brge	80005728 <_vfprintf_r+0x14a0>
80005658:	fa cc f9 44 	sub	r12,sp,-1724
8000565c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005660:	c8 28       	rjmp	80005764 <_vfprintf_r+0x14dc>
80005662:	ee ca ff ff 	sub	r10,r7,-1
80005666:	10 37       	cp.w	r7,r8
80005668:	e0 84 00 81 	brge	8000576a <_vfprintf_r+0x14e2>
8000566c:	fa cb f9 44 	sub	r11,sp,-1724
80005670:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005674:	c7 78       	rjmp	80005762 <_vfprintf_r+0x14da>
80005676:	ed b5 00 06 	bld	r5,0x6
8000567a:	c4 b1       	brne	80005710 <_vfprintf_r+0x1488>
8000567c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005680:	40 3c       	lddsp	r12,sp[0xc]
80005682:	58 0c       	cp.w	r12,0
80005684:	c1 d0       	breq	800056be <_vfprintf_r+0x1436>
80005686:	10 36       	cp.w	r6,r8
80005688:	c0 64       	brge	80005694 <_vfprintf_r+0x140c>
8000568a:	fa cb f9 44 	sub	r11,sp,-1724
8000568e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005692:	c1 f8       	rjmp	800056d0 <_vfprintf_r+0x1448>
80005694:	fa c8 f9 50 	sub	r8,sp,-1712
80005698:	1a d8       	st.w	--sp,r8
8000569a:	fa c8 fa b8 	sub	r8,sp,-1352
8000569e:	1a d8       	st.w	--sp,r8
800056a0:	fa c8 fb b4 	sub	r8,sp,-1100
800056a4:	1a d8       	st.w	--sp,r8
800056a6:	fa c8 f9 40 	sub	r8,sp,-1728
800056aa:	fa c9 ff b4 	sub	r9,sp,-76
800056ae:	04 9a       	mov	r10,r2
800056b0:	0c 9b       	mov	r11,r6
800056b2:	08 9c       	mov	r12,r4
800056b4:	fe b0 f4 54 	rcall	80003f5c <get_arg>
800056b8:	2f dd       	sub	sp,-12
800056ba:	98 18       	ld.sh	r8,r12[0x2]
800056bc:	c2 78       	rjmp	8000570a <_vfprintf_r+0x1482>
800056be:	ee ca ff ff 	sub	r10,r7,-1
800056c2:	10 37       	cp.w	r7,r8
800056c4:	c0 a4       	brge	800056d8 <_vfprintf_r+0x1450>
800056c6:	fa c9 f9 44 	sub	r9,sp,-1724
800056ca:	14 97       	mov	r7,r10
800056cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800056d0:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800056d4:	c1 b8       	rjmp	8000570a <_vfprintf_r+0x1482>
800056d6:	d7 03       	nop
800056d8:	41 09       	lddsp	r9,sp[0x40]
800056da:	59 f8       	cp.w	r8,31
800056dc:	e0 89 00 13 	brgt	80005702 <_vfprintf_r+0x147a>
800056e0:	f2 cb ff fc 	sub	r11,r9,-4
800056e4:	51 0b       	stdsp	sp[0x40],r11
800056e6:	72 09       	ld.w	r9,r9[0x0]
800056e8:	fa c6 f9 44 	sub	r6,sp,-1724
800056ec:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800056f0:	2f f8       	sub	r8,-1
800056f2:	f7 49 fd 88 	st.w	r11[-632],r9
800056f6:	fb 48 06 b4 	st.w	sp[1716],r8
800056fa:	14 97       	mov	r7,r10
800056fc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005700:	c0 58       	rjmp	8000570a <_vfprintf_r+0x1482>
80005702:	92 18       	ld.sh	r8,r9[0x2]
80005704:	14 97       	mov	r7,r10
80005706:	2f c9       	sub	r9,-4
80005708:	51 09       	stdsp	sp[0x40],r9
8000570a:	5c 78       	castu.h	r8
8000570c:	50 18       	stdsp	sp[0x4],r8
8000570e:	c4 68       	rjmp	8000579a <_vfprintf_r+0x1512>
80005710:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005714:	40 3c       	lddsp	r12,sp[0xc]
80005716:	58 0c       	cp.w	r12,0
80005718:	c1 d0       	breq	80005752 <_vfprintf_r+0x14ca>
8000571a:	10 36       	cp.w	r6,r8
8000571c:	c0 64       	brge	80005728 <_vfprintf_r+0x14a0>
8000571e:	fa cb f9 44 	sub	r11,sp,-1724
80005722:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005726:	c1 f8       	rjmp	80005764 <_vfprintf_r+0x14dc>
80005728:	fa c8 f9 50 	sub	r8,sp,-1712
8000572c:	1a d8       	st.w	--sp,r8
8000572e:	fa c8 fa b8 	sub	r8,sp,-1352
80005732:	0c 9b       	mov	r11,r6
80005734:	1a d8       	st.w	--sp,r8
80005736:	fa c8 fb b4 	sub	r8,sp,-1100
8000573a:	04 9a       	mov	r10,r2
8000573c:	1a d8       	st.w	--sp,r8
8000573e:	08 9c       	mov	r12,r4
80005740:	fa c8 f9 40 	sub	r8,sp,-1728
80005744:	fa c9 ff b4 	sub	r9,sp,-76
80005748:	fe b0 f4 0a 	rcall	80003f5c <get_arg>
8000574c:	2f dd       	sub	sp,-12
8000574e:	78 0b       	ld.w	r11,r12[0x0]
80005750:	c2 48       	rjmp	80005798 <_vfprintf_r+0x1510>
80005752:	ee ca ff ff 	sub	r10,r7,-1
80005756:	10 37       	cp.w	r7,r8
80005758:	c0 94       	brge	8000576a <_vfprintf_r+0x14e2>
8000575a:	fa c9 f9 44 	sub	r9,sp,-1724
8000575e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005762:	14 97       	mov	r7,r10
80005764:	ec fb fd 88 	ld.w	r11,r6[-632]
80005768:	c1 88       	rjmp	80005798 <_vfprintf_r+0x1510>
8000576a:	41 09       	lddsp	r9,sp[0x40]
8000576c:	59 f8       	cp.w	r8,31
8000576e:	e0 89 00 11 	brgt	80005790 <_vfprintf_r+0x1508>
80005772:	f2 cb ff fc 	sub	r11,r9,-4
80005776:	51 0b       	stdsp	sp[0x40],r11
80005778:	fa c6 f9 44 	sub	r6,sp,-1724
8000577c:	72 0b       	ld.w	r11,r9[0x0]
8000577e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005782:	f3 4b fd 88 	st.w	r9[-632],r11
80005786:	2f f8       	sub	r8,-1
80005788:	14 97       	mov	r7,r10
8000578a:	fb 48 06 b4 	st.w	sp[1716],r8
8000578e:	c0 58       	rjmp	80005798 <_vfprintf_r+0x1510>
80005790:	72 0b       	ld.w	r11,r9[0x0]
80005792:	14 97       	mov	r7,r10
80005794:	2f c9       	sub	r9,-4
80005796:	51 09       	stdsp	sp[0x40],r9
80005798:	50 1b       	stdsp	sp[0x4],r11
8000579a:	30 0e       	mov	lr,0
8000579c:	50 0e       	stdsp	sp[0x0],lr
8000579e:	40 08       	lddsp	r8,sp[0x0]
800057a0:	40 1c       	lddsp	r12,sp[0x4]
800057a2:	18 48       	or	r8,r12
800057a4:	5f 19       	srne	r9
800057a6:	0a 98       	mov	r8,r5
800057a8:	eb e9 00 09 	and	r9,r5,r9
800057ac:	a1 b8       	sbr	r8,0x1
800057ae:	58 09       	cp.w	r9,0
800057b0:	c0 70       	breq	800057be <_vfprintf_r+0x1536>
800057b2:	10 95       	mov	r5,r8
800057b4:	fb 60 06 b9 	st.b	sp[1721],r0
800057b8:	33 08       	mov	r8,48
800057ba:	fb 68 06 b8 	st.b	sp[1720],r8
800057be:	30 28       	mov	r8,2
800057c0:	30 09       	mov	r9,0
800057c2:	fb 69 06 bb 	st.b	sp[1723],r9
800057c6:	0a 99       	mov	r9,r5
800057c8:	a7 d9       	cbr	r9,0x7
800057ca:	40 2b       	lddsp	r11,sp[0x8]
800057cc:	40 16       	lddsp	r6,sp[0x4]
800057ce:	58 0b       	cp.w	r11,0
800057d0:	5f 1a       	srne	r10
800057d2:	f2 05 17 40 	movge	r5,r9
800057d6:	fa c2 f9 78 	sub	r2,sp,-1672
800057da:	40 09       	lddsp	r9,sp[0x0]
800057dc:	0c 49       	or	r9,r6
800057de:	5f 19       	srne	r9
800057e0:	f5 e9 10 09 	or	r9,r10,r9
800057e4:	c5 c0       	breq	8000589c <_vfprintf_r+0x1614>
800057e6:	30 19       	mov	r9,1
800057e8:	f2 08 18 00 	cp.b	r8,r9
800057ec:	c0 60       	breq	800057f8 <_vfprintf_r+0x1570>
800057ee:	30 29       	mov	r9,2
800057f0:	f2 08 18 00 	cp.b	r8,r9
800057f4:	c0 41       	brne	800057fc <_vfprintf_r+0x1574>
800057f6:	c3 c8       	rjmp	8000586e <_vfprintf_r+0x15e6>
800057f8:	04 96       	mov	r6,r2
800057fa:	c3 08       	rjmp	8000585a <_vfprintf_r+0x15d2>
800057fc:	04 96       	mov	r6,r2
800057fe:	fa e8 00 00 	ld.d	r8,sp[0]
80005802:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005806:	2d 0a       	sub	r10,-48
80005808:	0c fa       	st.b	--r6,r10
8000580a:	f0 0b 16 03 	lsr	r11,r8,0x3
8000580e:	f2 0c 16 03 	lsr	r12,r9,0x3
80005812:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005816:	18 99       	mov	r9,r12
80005818:	16 98       	mov	r8,r11
8000581a:	58 08       	cp.w	r8,0
8000581c:	5c 29       	cpc	r9
8000581e:	cf 21       	brne	80005802 <_vfprintf_r+0x157a>
80005820:	fa e9 00 00 	st.d	sp[0],r8
80005824:	ed b5 00 00 	bld	r5,0x0
80005828:	c4 51       	brne	800058b2 <_vfprintf_r+0x162a>
8000582a:	33 09       	mov	r9,48
8000582c:	f2 0a 18 00 	cp.b	r10,r9
80005830:	c4 10       	breq	800058b2 <_vfprintf_r+0x162a>
80005832:	0c f9       	st.b	--r6,r9
80005834:	c3 f8       	rjmp	800058b2 <_vfprintf_r+0x162a>
80005836:	fa ea 00 00 	ld.d	r10,sp[0]
8000583a:	30 a8       	mov	r8,10
8000583c:	30 09       	mov	r9,0
8000583e:	e0 a0 1c cb 	rcall	800091d4 <__avr32_umod64>
80005842:	30 a8       	mov	r8,10
80005844:	2d 0a       	sub	r10,-48
80005846:	30 09       	mov	r9,0
80005848:	ac 8a       	st.b	r6[0x0],r10
8000584a:	fa ea 00 00 	ld.d	r10,sp[0]
8000584e:	e0 a0 1b 91 	rcall	80008f70 <__avr32_udiv64>
80005852:	16 99       	mov	r9,r11
80005854:	14 98       	mov	r8,r10
80005856:	fa e9 00 00 	st.d	sp[0],r8
8000585a:	20 16       	sub	r6,1
8000585c:	fa ea 00 00 	ld.d	r10,sp[0]
80005860:	58 9a       	cp.w	r10,9
80005862:	5c 2b       	cpc	r11
80005864:	fe 9b ff e9 	brhi	80005836 <_vfprintf_r+0x15ae>
80005868:	1b f8       	ld.ub	r8,sp[0x7]
8000586a:	2d 08       	sub	r8,-48
8000586c:	c2 08       	rjmp	800058ac <_vfprintf_r+0x1624>
8000586e:	04 96       	mov	r6,r2
80005870:	fa e8 00 00 	ld.d	r8,sp[0]
80005874:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005878:	40 de       	lddsp	lr,sp[0x34]
8000587a:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000587e:	0c fa       	st.b	--r6,r10
80005880:	f2 0b 16 04 	lsr	r11,r9,0x4
80005884:	f0 0a 16 04 	lsr	r10,r8,0x4
80005888:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000588c:	16 99       	mov	r9,r11
8000588e:	14 98       	mov	r8,r10
80005890:	58 08       	cp.w	r8,0
80005892:	5c 29       	cpc	r9
80005894:	cf 01       	brne	80005874 <_vfprintf_r+0x15ec>
80005896:	fa e9 00 00 	st.d	sp[0],r8
8000589a:	c0 c8       	rjmp	800058b2 <_vfprintf_r+0x162a>
8000589c:	58 08       	cp.w	r8,0
8000589e:	c0 91       	brne	800058b0 <_vfprintf_r+0x1628>
800058a0:	ed b5 00 00 	bld	r5,0x0
800058a4:	c0 61       	brne	800058b0 <_vfprintf_r+0x1628>
800058a6:	fa c6 f9 79 	sub	r6,sp,-1671
800058aa:	33 08       	mov	r8,48
800058ac:	ac 88       	st.b	r6[0x0],r8
800058ae:	c0 28       	rjmp	800058b2 <_vfprintf_r+0x162a>
800058b0:	04 96       	mov	r6,r2
800058b2:	0c 12       	sub	r2,r6
800058b4:	c1 c8       	rjmp	800058ec <_vfprintf_r+0x1664>
800058b6:	50 a7       	stdsp	sp[0x28],r7
800058b8:	50 80       	stdsp	sp[0x20],r0
800058ba:	40 93       	lddsp	r3,sp[0x24]
800058bc:	0c 97       	mov	r7,r6
800058be:	10 90       	mov	r0,r8
800058c0:	04 94       	mov	r4,r2
800058c2:	40 41       	lddsp	r1,sp[0x10]
800058c4:	58 08       	cp.w	r8,0
800058c6:	e0 80 04 4f 	breq	80006164 <_vfprintf_r+0x1edc>
800058ca:	fb 68 06 60 	st.b	sp[1632],r8
800058ce:	30 0c       	mov	r12,0
800058d0:	30 08       	mov	r8,0
800058d2:	30 12       	mov	r2,1
800058d4:	fb 68 06 bb 	st.b	sp[1723],r8
800058d8:	50 2c       	stdsp	sp[0x8],r12
800058da:	fa c6 f9 a0 	sub	r6,sp,-1632
800058de:	c0 78       	rjmp	800058ec <_vfprintf_r+0x1664>
800058e0:	30 0b       	mov	r11,0
800058e2:	50 2b       	stdsp	sp[0x8],r11
800058e4:	c0 48       	rjmp	800058ec <_vfprintf_r+0x1664>
800058e6:	40 22       	lddsp	r2,sp[0x8]
800058e8:	30 0a       	mov	r10,0
800058ea:	50 2a       	stdsp	sp[0x8],r10
800058ec:	40 29       	lddsp	r9,sp[0x8]
800058ee:	e4 09 0c 49 	max	r9,r2,r9
800058f2:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800058f6:	50 39       	stdsp	sp[0xc],r9
800058f8:	0a 9e       	mov	lr,r5
800058fa:	30 09       	mov	r9,0
800058fc:	e2 1e 00 02 	andl	lr,0x2,COH
80005900:	f2 08 18 00 	cp.b	r8,r9
80005904:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005908:	f7 b8 01 ff 	subne	r8,-1
8000590c:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005910:	0a 9b       	mov	r11,r5
80005912:	58 0e       	cp.w	lr,0
80005914:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005918:	f7 bc 01 fe 	subne	r12,-2
8000591c:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005920:	e2 1b 00 84 	andl	r11,0x84,COH
80005924:	50 fe       	stdsp	sp[0x3c],lr
80005926:	50 9b       	stdsp	sp[0x24],r11
80005928:	c4 71       	brne	800059b6 <_vfprintf_r+0x172e>
8000592a:	40 8a       	lddsp	r10,sp[0x20]
8000592c:	40 39       	lddsp	r9,sp[0xc]
8000592e:	12 1a       	sub	r10,r9
80005930:	50 4a       	stdsp	sp[0x10],r10
80005932:	58 0a       	cp.w	r10,0
80005934:	e0 89 00 20 	brgt	80005974 <_vfprintf_r+0x16ec>
80005938:	c3 f8       	rjmp	800059b6 <_vfprintf_r+0x172e>
8000593a:	2f 09       	sub	r9,-16
8000593c:	2f f8       	sub	r8,-1
8000593e:	fe ce ba da 	sub	lr,pc,-17702
80005942:	31 0c       	mov	r12,16
80005944:	fb 49 06 90 	st.w	sp[1680],r9
80005948:	87 0e       	st.w	r3[0x0],lr
8000594a:	87 1c       	st.w	r3[0x4],r12
8000594c:	fb 48 06 8c 	st.w	sp[1676],r8
80005950:	58 78       	cp.w	r8,7
80005952:	e0 89 00 04 	brgt	8000595a <_vfprintf_r+0x16d2>
80005956:	2f 83       	sub	r3,-8
80005958:	c0 b8       	rjmp	8000596e <_vfprintf_r+0x16e6>
8000595a:	fa ca f9 78 	sub	r10,sp,-1672
8000595e:	02 9b       	mov	r11,r1
80005960:	08 9c       	mov	r12,r4
80005962:	fe b0 f4 85 	rcall	8000426c <__sprint_r>
80005966:	e0 81 04 10 	brne	80006186 <_vfprintf_r+0x1efe>
8000596a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000596e:	40 4b       	lddsp	r11,sp[0x10]
80005970:	21 0b       	sub	r11,16
80005972:	50 4b       	stdsp	sp[0x10],r11
80005974:	fa f9 06 90 	ld.w	r9,sp[1680]
80005978:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000597c:	fe ca bb 18 	sub	r10,pc,-17640
80005980:	40 4e       	lddsp	lr,sp[0x10]
80005982:	59 0e       	cp.w	lr,16
80005984:	fe 99 ff db 	brgt	8000593a <_vfprintf_r+0x16b2>
80005988:	1c 09       	add	r9,lr
8000598a:	2f f8       	sub	r8,-1
8000598c:	87 0a       	st.w	r3[0x0],r10
8000598e:	fb 49 06 90 	st.w	sp[1680],r9
80005992:	87 1e       	st.w	r3[0x4],lr
80005994:	fb 48 06 8c 	st.w	sp[1676],r8
80005998:	58 78       	cp.w	r8,7
8000599a:	e0 89 00 04 	brgt	800059a2 <_vfprintf_r+0x171a>
8000599e:	2f 83       	sub	r3,-8
800059a0:	c0 b8       	rjmp	800059b6 <_vfprintf_r+0x172e>
800059a2:	fa ca f9 78 	sub	r10,sp,-1672
800059a6:	02 9b       	mov	r11,r1
800059a8:	08 9c       	mov	r12,r4
800059aa:	fe b0 f4 61 	rcall	8000426c <__sprint_r>
800059ae:	e0 81 03 ec 	brne	80006186 <_vfprintf_r+0x1efe>
800059b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800059b6:	30 09       	mov	r9,0
800059b8:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800059bc:	f2 08 18 00 	cp.b	r8,r9
800059c0:	c1 f0       	breq	800059fe <_vfprintf_r+0x1776>
800059c2:	fa f8 06 90 	ld.w	r8,sp[1680]
800059c6:	fa c9 f9 45 	sub	r9,sp,-1723
800059ca:	2f f8       	sub	r8,-1
800059cc:	87 09       	st.w	r3[0x0],r9
800059ce:	fb 48 06 90 	st.w	sp[1680],r8
800059d2:	30 19       	mov	r9,1
800059d4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059d8:	87 19       	st.w	r3[0x4],r9
800059da:	2f f8       	sub	r8,-1
800059dc:	fb 48 06 8c 	st.w	sp[1676],r8
800059e0:	58 78       	cp.w	r8,7
800059e2:	e0 89 00 04 	brgt	800059ea <_vfprintf_r+0x1762>
800059e6:	2f 83       	sub	r3,-8
800059e8:	c0 b8       	rjmp	800059fe <_vfprintf_r+0x1776>
800059ea:	fa ca f9 78 	sub	r10,sp,-1672
800059ee:	02 9b       	mov	r11,r1
800059f0:	08 9c       	mov	r12,r4
800059f2:	fe b0 f4 3d 	rcall	8000426c <__sprint_r>
800059f6:	e0 81 03 c8 	brne	80006186 <_vfprintf_r+0x1efe>
800059fa:	fa c3 f9 e0 	sub	r3,sp,-1568
800059fe:	40 fc       	lddsp	r12,sp[0x3c]
80005a00:	58 0c       	cp.w	r12,0
80005a02:	c1 f0       	breq	80005a40 <_vfprintf_r+0x17b8>
80005a04:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a08:	fa c9 f9 48 	sub	r9,sp,-1720
80005a0c:	2f e8       	sub	r8,-2
80005a0e:	87 09       	st.w	r3[0x0],r9
80005a10:	fb 48 06 90 	st.w	sp[1680],r8
80005a14:	30 29       	mov	r9,2
80005a16:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a1a:	87 19       	st.w	r3[0x4],r9
80005a1c:	2f f8       	sub	r8,-1
80005a1e:	fb 48 06 8c 	st.w	sp[1676],r8
80005a22:	58 78       	cp.w	r8,7
80005a24:	e0 89 00 04 	brgt	80005a2c <_vfprintf_r+0x17a4>
80005a28:	2f 83       	sub	r3,-8
80005a2a:	c0 b8       	rjmp	80005a40 <_vfprintf_r+0x17b8>
80005a2c:	fa ca f9 78 	sub	r10,sp,-1672
80005a30:	02 9b       	mov	r11,r1
80005a32:	08 9c       	mov	r12,r4
80005a34:	fe b0 f4 1c 	rcall	8000426c <__sprint_r>
80005a38:	e0 81 03 a7 	brne	80006186 <_vfprintf_r+0x1efe>
80005a3c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a40:	40 9b       	lddsp	r11,sp[0x24]
80005a42:	e0 4b 00 80 	cp.w	r11,128
80005a46:	c4 71       	brne	80005ad4 <_vfprintf_r+0x184c>
80005a48:	40 8a       	lddsp	r10,sp[0x20]
80005a4a:	40 39       	lddsp	r9,sp[0xc]
80005a4c:	12 1a       	sub	r10,r9
80005a4e:	50 4a       	stdsp	sp[0x10],r10
80005a50:	58 0a       	cp.w	r10,0
80005a52:	e0 89 00 20 	brgt	80005a92 <_vfprintf_r+0x180a>
80005a56:	c3 f8       	rjmp	80005ad4 <_vfprintf_r+0x184c>
80005a58:	2f 09       	sub	r9,-16
80005a5a:	2f f8       	sub	r8,-1
80005a5c:	fe ce bb e8 	sub	lr,pc,-17432
80005a60:	31 0c       	mov	r12,16
80005a62:	fb 49 06 90 	st.w	sp[1680],r9
80005a66:	87 0e       	st.w	r3[0x0],lr
80005a68:	87 1c       	st.w	r3[0x4],r12
80005a6a:	fb 48 06 8c 	st.w	sp[1676],r8
80005a6e:	58 78       	cp.w	r8,7
80005a70:	e0 89 00 04 	brgt	80005a78 <_vfprintf_r+0x17f0>
80005a74:	2f 83       	sub	r3,-8
80005a76:	c0 b8       	rjmp	80005a8c <_vfprintf_r+0x1804>
80005a78:	fa ca f9 78 	sub	r10,sp,-1672
80005a7c:	02 9b       	mov	r11,r1
80005a7e:	08 9c       	mov	r12,r4
80005a80:	fe b0 f3 f6 	rcall	8000426c <__sprint_r>
80005a84:	e0 81 03 81 	brne	80006186 <_vfprintf_r+0x1efe>
80005a88:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a8c:	40 4b       	lddsp	r11,sp[0x10]
80005a8e:	21 0b       	sub	r11,16
80005a90:	50 4b       	stdsp	sp[0x10],r11
80005a92:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a96:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a9a:	fe ca bc 26 	sub	r10,pc,-17370
80005a9e:	40 4e       	lddsp	lr,sp[0x10]
80005aa0:	59 0e       	cp.w	lr,16
80005aa2:	fe 99 ff db 	brgt	80005a58 <_vfprintf_r+0x17d0>
80005aa6:	1c 09       	add	r9,lr
80005aa8:	2f f8       	sub	r8,-1
80005aaa:	87 0a       	st.w	r3[0x0],r10
80005aac:	fb 49 06 90 	st.w	sp[1680],r9
80005ab0:	87 1e       	st.w	r3[0x4],lr
80005ab2:	fb 48 06 8c 	st.w	sp[1676],r8
80005ab6:	58 78       	cp.w	r8,7
80005ab8:	e0 89 00 04 	brgt	80005ac0 <_vfprintf_r+0x1838>
80005abc:	2f 83       	sub	r3,-8
80005abe:	c0 b8       	rjmp	80005ad4 <_vfprintf_r+0x184c>
80005ac0:	fa ca f9 78 	sub	r10,sp,-1672
80005ac4:	02 9b       	mov	r11,r1
80005ac6:	08 9c       	mov	r12,r4
80005ac8:	fe b0 f3 d2 	rcall	8000426c <__sprint_r>
80005acc:	e0 81 03 5d 	brne	80006186 <_vfprintf_r+0x1efe>
80005ad0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ad4:	40 2c       	lddsp	r12,sp[0x8]
80005ad6:	04 1c       	sub	r12,r2
80005ad8:	50 2c       	stdsp	sp[0x8],r12
80005ada:	58 0c       	cp.w	r12,0
80005adc:	e0 89 00 20 	brgt	80005b1c <_vfprintf_r+0x1894>
80005ae0:	c3 f8       	rjmp	80005b5e <_vfprintf_r+0x18d6>
80005ae2:	2f 09       	sub	r9,-16
80005ae4:	2f f8       	sub	r8,-1
80005ae6:	fe cb bc 72 	sub	r11,pc,-17294
80005aea:	31 0a       	mov	r10,16
80005aec:	fb 49 06 90 	st.w	sp[1680],r9
80005af0:	87 0b       	st.w	r3[0x0],r11
80005af2:	87 1a       	st.w	r3[0x4],r10
80005af4:	fb 48 06 8c 	st.w	sp[1676],r8
80005af8:	58 78       	cp.w	r8,7
80005afa:	e0 89 00 04 	brgt	80005b02 <_vfprintf_r+0x187a>
80005afe:	2f 83       	sub	r3,-8
80005b00:	c0 b8       	rjmp	80005b16 <_vfprintf_r+0x188e>
80005b02:	fa ca f9 78 	sub	r10,sp,-1672
80005b06:	02 9b       	mov	r11,r1
80005b08:	08 9c       	mov	r12,r4
80005b0a:	fe b0 f3 b1 	rcall	8000426c <__sprint_r>
80005b0e:	e0 81 03 3c 	brne	80006186 <_vfprintf_r+0x1efe>
80005b12:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b16:	40 29       	lddsp	r9,sp[0x8]
80005b18:	21 09       	sub	r9,16
80005b1a:	50 29       	stdsp	sp[0x8],r9
80005b1c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b20:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b24:	fe ca bc b0 	sub	r10,pc,-17232
80005b28:	40 2e       	lddsp	lr,sp[0x8]
80005b2a:	59 0e       	cp.w	lr,16
80005b2c:	fe 99 ff db 	brgt	80005ae2 <_vfprintf_r+0x185a>
80005b30:	1c 09       	add	r9,lr
80005b32:	2f f8       	sub	r8,-1
80005b34:	87 0a       	st.w	r3[0x0],r10
80005b36:	fb 49 06 90 	st.w	sp[1680],r9
80005b3a:	87 1e       	st.w	r3[0x4],lr
80005b3c:	fb 48 06 8c 	st.w	sp[1676],r8
80005b40:	58 78       	cp.w	r8,7
80005b42:	e0 89 00 04 	brgt	80005b4a <_vfprintf_r+0x18c2>
80005b46:	2f 83       	sub	r3,-8
80005b48:	c0 b8       	rjmp	80005b5e <_vfprintf_r+0x18d6>
80005b4a:	fa ca f9 78 	sub	r10,sp,-1672
80005b4e:	02 9b       	mov	r11,r1
80005b50:	08 9c       	mov	r12,r4
80005b52:	fe b0 f3 8d 	rcall	8000426c <__sprint_r>
80005b56:	e0 81 03 18 	brne	80006186 <_vfprintf_r+0x1efe>
80005b5a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b5e:	ed b5 00 08 	bld	r5,0x8
80005b62:	c0 b0       	breq	80005b78 <_vfprintf_r+0x18f0>
80005b64:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b68:	87 12       	st.w	r3[0x4],r2
80005b6a:	87 06       	st.w	r3[0x0],r6
80005b6c:	f0 02 00 02 	add	r2,r8,r2
80005b70:	fb 42 06 90 	st.w	sp[1680],r2
80005b74:	e0 8f 01 d4 	bral	80005f1c <_vfprintf_r+0x1c94>
80005b78:	e0 40 00 65 	cp.w	r0,101
80005b7c:	e0 8a 01 d6 	brle	80005f28 <_vfprintf_r+0x1ca0>
80005b80:	30 08       	mov	r8,0
80005b82:	30 09       	mov	r9,0
80005b84:	40 5b       	lddsp	r11,sp[0x14]
80005b86:	40 7a       	lddsp	r10,sp[0x1c]
80005b88:	e0 a0 17 ed 	rcall	80008b62 <__avr32_f64_cmp_eq>
80005b8c:	c7 90       	breq	80005c7e <_vfprintf_r+0x19f6>
80005b8e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b92:	fe c9 bd 32 	sub	r9,pc,-17102
80005b96:	2f f8       	sub	r8,-1
80005b98:	87 09       	st.w	r3[0x0],r9
80005b9a:	fb 48 06 90 	st.w	sp[1680],r8
80005b9e:	30 19       	mov	r9,1
80005ba0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ba4:	87 19       	st.w	r3[0x4],r9
80005ba6:	2f f8       	sub	r8,-1
80005ba8:	fb 48 06 8c 	st.w	sp[1676],r8
80005bac:	58 78       	cp.w	r8,7
80005bae:	e0 89 00 05 	brgt	80005bb8 <_vfprintf_r+0x1930>
80005bb2:	2f 83       	sub	r3,-8
80005bb4:	c0 c8       	rjmp	80005bcc <_vfprintf_r+0x1944>
80005bb6:	d7 03       	nop
80005bb8:	fa ca f9 78 	sub	r10,sp,-1672
80005bbc:	02 9b       	mov	r11,r1
80005bbe:	08 9c       	mov	r12,r4
80005bc0:	fe b0 f3 56 	rcall	8000426c <__sprint_r>
80005bc4:	e0 81 02 e1 	brne	80006186 <_vfprintf_r+0x1efe>
80005bc8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bcc:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005bd0:	40 6c       	lddsp	r12,sp[0x18]
80005bd2:	18 38       	cp.w	r8,r12
80005bd4:	c0 55       	brlt	80005bde <_vfprintf_r+0x1956>
80005bd6:	ed b5 00 00 	bld	r5,0x0
80005bda:	e0 81 02 6b 	brne	800060b0 <_vfprintf_r+0x1e28>
80005bde:	fa f8 06 90 	ld.w	r8,sp[1680]
80005be2:	2f f8       	sub	r8,-1
80005be4:	40 cb       	lddsp	r11,sp[0x30]
80005be6:	fb 48 06 90 	st.w	sp[1680],r8
80005bea:	30 19       	mov	r9,1
80005bec:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bf0:	87 0b       	st.w	r3[0x0],r11
80005bf2:	2f f8       	sub	r8,-1
80005bf4:	87 19       	st.w	r3[0x4],r9
80005bf6:	fb 48 06 8c 	st.w	sp[1676],r8
80005bfa:	58 78       	cp.w	r8,7
80005bfc:	e0 89 00 04 	brgt	80005c04 <_vfprintf_r+0x197c>
80005c00:	2f 83       	sub	r3,-8
80005c02:	c0 b8       	rjmp	80005c18 <_vfprintf_r+0x1990>
80005c04:	fa ca f9 78 	sub	r10,sp,-1672
80005c08:	02 9b       	mov	r11,r1
80005c0a:	08 9c       	mov	r12,r4
80005c0c:	fe b0 f3 30 	rcall	8000426c <__sprint_r>
80005c10:	e0 81 02 bb 	brne	80006186 <_vfprintf_r+0x1efe>
80005c14:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c18:	40 66       	lddsp	r6,sp[0x18]
80005c1a:	20 16       	sub	r6,1
80005c1c:	58 06       	cp.w	r6,0
80005c1e:	e0 89 00 1d 	brgt	80005c58 <_vfprintf_r+0x19d0>
80005c22:	e0 8f 02 47 	bral	800060b0 <_vfprintf_r+0x1e28>
80005c26:	2f 09       	sub	r9,-16
80005c28:	2f f8       	sub	r8,-1
80005c2a:	fb 49 06 90 	st.w	sp[1680],r9
80005c2e:	87 02       	st.w	r3[0x0],r2
80005c30:	87 10       	st.w	r3[0x4],r0
80005c32:	fb 48 06 8c 	st.w	sp[1676],r8
80005c36:	58 78       	cp.w	r8,7
80005c38:	e0 89 00 04 	brgt	80005c40 <_vfprintf_r+0x19b8>
80005c3c:	2f 83       	sub	r3,-8
80005c3e:	c0 b8       	rjmp	80005c54 <_vfprintf_r+0x19cc>
80005c40:	fa ca f9 78 	sub	r10,sp,-1672
80005c44:	02 9b       	mov	r11,r1
80005c46:	08 9c       	mov	r12,r4
80005c48:	fe b0 f3 12 	rcall	8000426c <__sprint_r>
80005c4c:	e0 81 02 9d 	brne	80006186 <_vfprintf_r+0x1efe>
80005c50:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c54:	21 06       	sub	r6,16
80005c56:	c0 48       	rjmp	80005c5e <_vfprintf_r+0x19d6>
80005c58:	fe c2 bd e4 	sub	r2,pc,-16924
80005c5c:	31 00       	mov	r0,16
80005c5e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c62:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c66:	fe ca bd f2 	sub	r10,pc,-16910
80005c6a:	59 06       	cp.w	r6,16
80005c6c:	fe 99 ff dd 	brgt	80005c26 <_vfprintf_r+0x199e>
80005c70:	0c 09       	add	r9,r6
80005c72:	87 0a       	st.w	r3[0x0],r10
80005c74:	fb 49 06 90 	st.w	sp[1680],r9
80005c78:	2f f8       	sub	r8,-1
80005c7a:	87 16       	st.w	r3[0x4],r6
80005c7c:	c5 39       	rjmp	80005f22 <_vfprintf_r+0x1c9a>
80005c7e:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005c82:	58 0a       	cp.w	r10,0
80005c84:	e0 89 00 92 	brgt	80005da8 <_vfprintf_r+0x1b20>
80005c88:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c8c:	fe c9 be 2c 	sub	r9,pc,-16852
80005c90:	2f f8       	sub	r8,-1
80005c92:	87 09       	st.w	r3[0x0],r9
80005c94:	fb 48 06 90 	st.w	sp[1680],r8
80005c98:	30 19       	mov	r9,1
80005c9a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c9e:	87 19       	st.w	r3[0x4],r9
80005ca0:	2f f8       	sub	r8,-1
80005ca2:	fb 48 06 8c 	st.w	sp[1676],r8
80005ca6:	58 78       	cp.w	r8,7
80005ca8:	e0 89 00 04 	brgt	80005cb0 <_vfprintf_r+0x1a28>
80005cac:	2f 83       	sub	r3,-8
80005cae:	c0 b8       	rjmp	80005cc4 <_vfprintf_r+0x1a3c>
80005cb0:	fa ca f9 78 	sub	r10,sp,-1672
80005cb4:	02 9b       	mov	r11,r1
80005cb6:	08 9c       	mov	r12,r4
80005cb8:	fe b0 f2 da 	rcall	8000426c <__sprint_r>
80005cbc:	e0 81 02 65 	brne	80006186 <_vfprintf_r+0x1efe>
80005cc0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cc4:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005cc8:	58 08       	cp.w	r8,0
80005cca:	c0 81       	brne	80005cda <_vfprintf_r+0x1a52>
80005ccc:	40 6a       	lddsp	r10,sp[0x18]
80005cce:	58 0a       	cp.w	r10,0
80005cd0:	c0 51       	brne	80005cda <_vfprintf_r+0x1a52>
80005cd2:	ed b5 00 00 	bld	r5,0x0
80005cd6:	e0 81 01 ed 	brne	800060b0 <_vfprintf_r+0x1e28>
80005cda:	40 c9       	lddsp	r9,sp[0x30]
80005cdc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ce0:	2f f8       	sub	r8,-1
80005ce2:	87 09       	st.w	r3[0x0],r9
80005ce4:	fb 48 06 90 	st.w	sp[1680],r8
80005ce8:	30 19       	mov	r9,1
80005cea:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cee:	87 19       	st.w	r3[0x4],r9
80005cf0:	2f f8       	sub	r8,-1
80005cf2:	fb 48 06 8c 	st.w	sp[1676],r8
80005cf6:	58 78       	cp.w	r8,7
80005cf8:	e0 89 00 04 	brgt	80005d00 <_vfprintf_r+0x1a78>
80005cfc:	2f 83       	sub	r3,-8
80005cfe:	c0 b8       	rjmp	80005d14 <_vfprintf_r+0x1a8c>
80005d00:	fa ca f9 78 	sub	r10,sp,-1672
80005d04:	02 9b       	mov	r11,r1
80005d06:	08 9c       	mov	r12,r4
80005d08:	fe b0 f2 b2 	rcall	8000426c <__sprint_r>
80005d0c:	e0 81 02 3d 	brne	80006186 <_vfprintf_r+0x1efe>
80005d10:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d14:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005d18:	5c 32       	neg	r2
80005d1a:	58 02       	cp.w	r2,0
80005d1c:	e0 89 00 1d 	brgt	80005d56 <_vfprintf_r+0x1ace>
80005d20:	c3 d8       	rjmp	80005d9a <_vfprintf_r+0x1b12>
80005d22:	2f 09       	sub	r9,-16
80005d24:	2f f8       	sub	r8,-1
80005d26:	31 0e       	mov	lr,16
80005d28:	fb 49 06 90 	st.w	sp[1680],r9
80005d2c:	87 00       	st.w	r3[0x0],r0
80005d2e:	87 1e       	st.w	r3[0x4],lr
80005d30:	fb 48 06 8c 	st.w	sp[1676],r8
80005d34:	58 78       	cp.w	r8,7
80005d36:	e0 89 00 04 	brgt	80005d3e <_vfprintf_r+0x1ab6>
80005d3a:	2f 83       	sub	r3,-8
80005d3c:	c0 b8       	rjmp	80005d52 <_vfprintf_r+0x1aca>
80005d3e:	fa ca f9 78 	sub	r10,sp,-1672
80005d42:	02 9b       	mov	r11,r1
80005d44:	08 9c       	mov	r12,r4
80005d46:	fe b0 f2 93 	rcall	8000426c <__sprint_r>
80005d4a:	e0 81 02 1e 	brne	80006186 <_vfprintf_r+0x1efe>
80005d4e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d52:	21 02       	sub	r2,16
80005d54:	c0 38       	rjmp	80005d5a <_vfprintf_r+0x1ad2>
80005d56:	fe c0 be e2 	sub	r0,pc,-16670
80005d5a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d5e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d62:	fe ca be ee 	sub	r10,pc,-16658
80005d66:	59 02       	cp.w	r2,16
80005d68:	fe 99 ff dd 	brgt	80005d22 <_vfprintf_r+0x1a9a>
80005d6c:	04 09       	add	r9,r2
80005d6e:	2f f8       	sub	r8,-1
80005d70:	87 0a       	st.w	r3[0x0],r10
80005d72:	fb 49 06 90 	st.w	sp[1680],r9
80005d76:	87 12       	st.w	r3[0x4],r2
80005d78:	fb 48 06 8c 	st.w	sp[1676],r8
80005d7c:	58 78       	cp.w	r8,7
80005d7e:	e0 89 00 04 	brgt	80005d86 <_vfprintf_r+0x1afe>
80005d82:	2f 83       	sub	r3,-8
80005d84:	c0 b8       	rjmp	80005d9a <_vfprintf_r+0x1b12>
80005d86:	fa ca f9 78 	sub	r10,sp,-1672
80005d8a:	02 9b       	mov	r11,r1
80005d8c:	08 9c       	mov	r12,r4
80005d8e:	fe b0 f2 6f 	rcall	8000426c <__sprint_r>
80005d92:	e0 81 01 fa 	brne	80006186 <_vfprintf_r+0x1efe>
80005d96:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d9a:	40 6c       	lddsp	r12,sp[0x18]
80005d9c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005da0:	87 06       	st.w	r3[0x0],r6
80005da2:	87 1c       	st.w	r3[0x4],r12
80005da4:	18 08       	add	r8,r12
80005da6:	cb 98       	rjmp	80005f18 <_vfprintf_r+0x1c90>
80005da8:	fa f9 06 90 	ld.w	r9,sp[1680]
80005dac:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005db0:	40 6b       	lddsp	r11,sp[0x18]
80005db2:	16 3a       	cp.w	r10,r11
80005db4:	c6 f5       	brlt	80005e92 <_vfprintf_r+0x1c0a>
80005db6:	16 09       	add	r9,r11
80005db8:	2f f8       	sub	r8,-1
80005dba:	87 06       	st.w	r3[0x0],r6
80005dbc:	fb 49 06 90 	st.w	sp[1680],r9
80005dc0:	87 1b       	st.w	r3[0x4],r11
80005dc2:	fb 48 06 8c 	st.w	sp[1676],r8
80005dc6:	58 78       	cp.w	r8,7
80005dc8:	e0 89 00 04 	brgt	80005dd0 <_vfprintf_r+0x1b48>
80005dcc:	2f 83       	sub	r3,-8
80005dce:	c0 b8       	rjmp	80005de4 <_vfprintf_r+0x1b5c>
80005dd0:	fa ca f9 78 	sub	r10,sp,-1672
80005dd4:	02 9b       	mov	r11,r1
80005dd6:	08 9c       	mov	r12,r4
80005dd8:	fe b0 f2 4a 	rcall	8000426c <__sprint_r>
80005ddc:	e0 81 01 d5 	brne	80006186 <_vfprintf_r+0x1efe>
80005de0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005de4:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005de8:	40 6a       	lddsp	r10,sp[0x18]
80005dea:	14 16       	sub	r6,r10
80005dec:	58 06       	cp.w	r6,0
80005dee:	e0 89 00 1c 	brgt	80005e26 <_vfprintf_r+0x1b9e>
80005df2:	c3 d8       	rjmp	80005e6c <_vfprintf_r+0x1be4>
80005df4:	2f 09       	sub	r9,-16
80005df6:	2f f8       	sub	r8,-1
80005df8:	fb 49 06 90 	st.w	sp[1680],r9
80005dfc:	87 02       	st.w	r3[0x0],r2
80005dfe:	87 10       	st.w	r3[0x4],r0
80005e00:	fb 48 06 8c 	st.w	sp[1676],r8
80005e04:	58 78       	cp.w	r8,7
80005e06:	e0 89 00 04 	brgt	80005e0e <_vfprintf_r+0x1b86>
80005e0a:	2f 83       	sub	r3,-8
80005e0c:	c0 b8       	rjmp	80005e22 <_vfprintf_r+0x1b9a>
80005e0e:	fa ca f9 78 	sub	r10,sp,-1672
80005e12:	02 9b       	mov	r11,r1
80005e14:	08 9c       	mov	r12,r4
80005e16:	fe b0 f2 2b 	rcall	8000426c <__sprint_r>
80005e1a:	e0 81 01 b6 	brne	80006186 <_vfprintf_r+0x1efe>
80005e1e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e22:	21 06       	sub	r6,16
80005e24:	c0 48       	rjmp	80005e2c <_vfprintf_r+0x1ba4>
80005e26:	fe c2 bf b2 	sub	r2,pc,-16462
80005e2a:	31 00       	mov	r0,16
80005e2c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e30:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e34:	fe ca bf c0 	sub	r10,pc,-16448
80005e38:	59 06       	cp.w	r6,16
80005e3a:	fe 99 ff dd 	brgt	80005df4 <_vfprintf_r+0x1b6c>
80005e3e:	0c 09       	add	r9,r6
80005e40:	2f f8       	sub	r8,-1
80005e42:	87 0a       	st.w	r3[0x0],r10
80005e44:	fb 49 06 90 	st.w	sp[1680],r9
80005e48:	87 16       	st.w	r3[0x4],r6
80005e4a:	fb 48 06 8c 	st.w	sp[1676],r8
80005e4e:	58 78       	cp.w	r8,7
80005e50:	e0 89 00 04 	brgt	80005e58 <_vfprintf_r+0x1bd0>
80005e54:	2f 83       	sub	r3,-8
80005e56:	c0 b8       	rjmp	80005e6c <_vfprintf_r+0x1be4>
80005e58:	fa ca f9 78 	sub	r10,sp,-1672
80005e5c:	02 9b       	mov	r11,r1
80005e5e:	08 9c       	mov	r12,r4
80005e60:	fe b0 f2 06 	rcall	8000426c <__sprint_r>
80005e64:	e0 81 01 91 	brne	80006186 <_vfprintf_r+0x1efe>
80005e68:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e6c:	ed b5 00 00 	bld	r5,0x0
80005e70:	e0 81 01 20 	brne	800060b0 <_vfprintf_r+0x1e28>
80005e74:	40 c9       	lddsp	r9,sp[0x30]
80005e76:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e7a:	2f f8       	sub	r8,-1
80005e7c:	87 09       	st.w	r3[0x0],r9
80005e7e:	fb 48 06 90 	st.w	sp[1680],r8
80005e82:	30 19       	mov	r9,1
80005e84:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e88:	87 19       	st.w	r3[0x4],r9
80005e8a:	2f f8       	sub	r8,-1
80005e8c:	fb 48 06 8c 	st.w	sp[1676],r8
80005e90:	c0 29       	rjmp	80006094 <_vfprintf_r+0x1e0c>
80005e92:	14 09       	add	r9,r10
80005e94:	2f f8       	sub	r8,-1
80005e96:	fb 49 06 90 	st.w	sp[1680],r9
80005e9a:	87 06       	st.w	r3[0x0],r6
80005e9c:	87 1a       	st.w	r3[0x4],r10
80005e9e:	fb 48 06 8c 	st.w	sp[1676],r8
80005ea2:	58 78       	cp.w	r8,7
80005ea4:	e0 89 00 04 	brgt	80005eac <_vfprintf_r+0x1c24>
80005ea8:	2f 83       	sub	r3,-8
80005eaa:	c0 b8       	rjmp	80005ec0 <_vfprintf_r+0x1c38>
80005eac:	fa ca f9 78 	sub	r10,sp,-1672
80005eb0:	02 9b       	mov	r11,r1
80005eb2:	08 9c       	mov	r12,r4
80005eb4:	fe b0 f1 dc 	rcall	8000426c <__sprint_r>
80005eb8:	e0 81 01 67 	brne	80006186 <_vfprintf_r+0x1efe>
80005ebc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ec0:	40 c8       	lddsp	r8,sp[0x30]
80005ec2:	87 08       	st.w	r3[0x0],r8
80005ec4:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ec8:	2f f8       	sub	r8,-1
80005eca:	30 19       	mov	r9,1
80005ecc:	fb 48 06 90 	st.w	sp[1680],r8
80005ed0:	87 19       	st.w	r3[0x4],r9
80005ed2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ed6:	2f f8       	sub	r8,-1
80005ed8:	fb 48 06 8c 	st.w	sp[1676],r8
80005edc:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005ee0:	58 78       	cp.w	r8,7
80005ee2:	e0 89 00 04 	brgt	80005eea <_vfprintf_r+0x1c62>
80005ee6:	2f 83       	sub	r3,-8
80005ee8:	c0 b8       	rjmp	80005efe <_vfprintf_r+0x1c76>
80005eea:	fa ca f9 78 	sub	r10,sp,-1672
80005eee:	02 9b       	mov	r11,r1
80005ef0:	08 9c       	mov	r12,r4
80005ef2:	fe b0 f1 bd 	rcall	8000426c <__sprint_r>
80005ef6:	e0 81 01 48 	brne	80006186 <_vfprintf_r+0x1efe>
80005efa:	fa c3 f9 e0 	sub	r3,sp,-1568
80005efe:	04 06       	add	r6,r2
80005f00:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005f04:	87 06       	st.w	r3[0x0],r6
80005f06:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f0a:	40 66       	lddsp	r6,sp[0x18]
80005f0c:	40 6e       	lddsp	lr,sp[0x18]
80005f0e:	10 16       	sub	r6,r8
80005f10:	f2 08 01 08 	sub	r8,r9,r8
80005f14:	87 16       	st.w	r3[0x4],r6
80005f16:	1c 08       	add	r8,lr
80005f18:	fb 48 06 90 	st.w	sp[1680],r8
80005f1c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f20:	2f f8       	sub	r8,-1
80005f22:	fb 48 06 8c 	st.w	sp[1676],r8
80005f26:	cb 78       	rjmp	80006094 <_vfprintf_r+0x1e0c>
80005f28:	40 6c       	lddsp	r12,sp[0x18]
80005f2a:	58 1c       	cp.w	r12,1
80005f2c:	e0 89 00 06 	brgt	80005f38 <_vfprintf_r+0x1cb0>
80005f30:	ed b5 00 00 	bld	r5,0x0
80005f34:	e0 81 00 85 	brne	8000603e <_vfprintf_r+0x1db6>
80005f38:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f3c:	2f f8       	sub	r8,-1
80005f3e:	30 19       	mov	r9,1
80005f40:	fb 48 06 90 	st.w	sp[1680],r8
80005f44:	87 06       	st.w	r3[0x0],r6
80005f46:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f4a:	87 19       	st.w	r3[0x4],r9
80005f4c:	2f f8       	sub	r8,-1
80005f4e:	fb 48 06 8c 	st.w	sp[1676],r8
80005f52:	58 78       	cp.w	r8,7
80005f54:	e0 89 00 04 	brgt	80005f5c <_vfprintf_r+0x1cd4>
80005f58:	2f 83       	sub	r3,-8
80005f5a:	c0 b8       	rjmp	80005f70 <_vfprintf_r+0x1ce8>
80005f5c:	fa ca f9 78 	sub	r10,sp,-1672
80005f60:	02 9b       	mov	r11,r1
80005f62:	08 9c       	mov	r12,r4
80005f64:	fe b0 f1 84 	rcall	8000426c <__sprint_r>
80005f68:	e0 81 01 0f 	brne	80006186 <_vfprintf_r+0x1efe>
80005f6c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f70:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f74:	2f f8       	sub	r8,-1
80005f76:	40 cb       	lddsp	r11,sp[0x30]
80005f78:	fb 48 06 90 	st.w	sp[1680],r8
80005f7c:	30 19       	mov	r9,1
80005f7e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f82:	87 0b       	st.w	r3[0x0],r11
80005f84:	2f f8       	sub	r8,-1
80005f86:	87 19       	st.w	r3[0x4],r9
80005f88:	fb 48 06 8c 	st.w	sp[1676],r8
80005f8c:	58 78       	cp.w	r8,7
80005f8e:	e0 89 00 05 	brgt	80005f98 <_vfprintf_r+0x1d10>
80005f92:	2f 83       	sub	r3,-8
80005f94:	c0 c8       	rjmp	80005fac <_vfprintf_r+0x1d24>
80005f96:	d7 03       	nop
80005f98:	fa ca f9 78 	sub	r10,sp,-1672
80005f9c:	02 9b       	mov	r11,r1
80005f9e:	08 9c       	mov	r12,r4
80005fa0:	fe b0 f1 66 	rcall	8000426c <__sprint_r>
80005fa4:	e0 81 00 f1 	brne	80006186 <_vfprintf_r+0x1efe>
80005fa8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fac:	30 08       	mov	r8,0
80005fae:	30 09       	mov	r9,0
80005fb0:	40 5b       	lddsp	r11,sp[0x14]
80005fb2:	40 7a       	lddsp	r10,sp[0x1c]
80005fb4:	e0 a0 15 d7 	rcall	80008b62 <__avr32_f64_cmp_eq>
80005fb8:	40 68       	lddsp	r8,sp[0x18]
80005fba:	20 18       	sub	r8,1
80005fbc:	58 0c       	cp.w	r12,0
80005fbe:	c0 d1       	brne	80005fd8 <_vfprintf_r+0x1d50>
80005fc0:	2f f6       	sub	r6,-1
80005fc2:	87 18       	st.w	r3[0x4],r8
80005fc4:	87 06       	st.w	r3[0x0],r6
80005fc6:	fa f6 06 90 	ld.w	r6,sp[1680]
80005fca:	10 06       	add	r6,r8
80005fcc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fd0:	fb 46 06 90 	st.w	sp[1680],r6
80005fd4:	2f f8       	sub	r8,-1
80005fd6:	c3 18       	rjmp	80006038 <_vfprintf_r+0x1db0>
80005fd8:	10 96       	mov	r6,r8
80005fda:	58 08       	cp.w	r8,0
80005fdc:	e0 89 00 1c 	brgt	80006014 <_vfprintf_r+0x1d8c>
80005fe0:	c4 b8       	rjmp	80006076 <_vfprintf_r+0x1dee>
80005fe2:	2f 09       	sub	r9,-16
80005fe4:	2f f8       	sub	r8,-1
80005fe6:	fb 49 06 90 	st.w	sp[1680],r9
80005fea:	87 02       	st.w	r3[0x0],r2
80005fec:	87 10       	st.w	r3[0x4],r0
80005fee:	fb 48 06 8c 	st.w	sp[1676],r8
80005ff2:	58 78       	cp.w	r8,7
80005ff4:	e0 89 00 04 	brgt	80005ffc <_vfprintf_r+0x1d74>
80005ff8:	2f 83       	sub	r3,-8
80005ffa:	c0 b8       	rjmp	80006010 <_vfprintf_r+0x1d88>
80005ffc:	fa ca f9 78 	sub	r10,sp,-1672
80006000:	02 9b       	mov	r11,r1
80006002:	08 9c       	mov	r12,r4
80006004:	fe b0 f1 34 	rcall	8000426c <__sprint_r>
80006008:	e0 81 00 bf 	brne	80006186 <_vfprintf_r+0x1efe>
8000600c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006010:	21 06       	sub	r6,16
80006012:	c0 48       	rjmp	8000601a <_vfprintf_r+0x1d92>
80006014:	fe c2 c1 a0 	sub	r2,pc,-15968
80006018:	31 00       	mov	r0,16
8000601a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000601e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006022:	fe ca c1 ae 	sub	r10,pc,-15954
80006026:	59 06       	cp.w	r6,16
80006028:	fe 99 ff dd 	brgt	80005fe2 <_vfprintf_r+0x1d5a>
8000602c:	0c 09       	add	r9,r6
8000602e:	87 0a       	st.w	r3[0x0],r10
80006030:	fb 49 06 90 	st.w	sp[1680],r9
80006034:	2f f8       	sub	r8,-1
80006036:	87 16       	st.w	r3[0x4],r6
80006038:	fb 48 06 8c 	st.w	sp[1676],r8
8000603c:	c0 e8       	rjmp	80006058 <_vfprintf_r+0x1dd0>
8000603e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006042:	2f f8       	sub	r8,-1
80006044:	30 19       	mov	r9,1
80006046:	fb 48 06 90 	st.w	sp[1680],r8
8000604a:	87 06       	st.w	r3[0x0],r6
8000604c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006050:	87 19       	st.w	r3[0x4],r9
80006052:	2f f8       	sub	r8,-1
80006054:	fb 48 06 8c 	st.w	sp[1676],r8
80006058:	58 78       	cp.w	r8,7
8000605a:	e0 89 00 04 	brgt	80006062 <_vfprintf_r+0x1dda>
8000605e:	2f 83       	sub	r3,-8
80006060:	c0 b8       	rjmp	80006076 <_vfprintf_r+0x1dee>
80006062:	fa ca f9 78 	sub	r10,sp,-1672
80006066:	02 9b       	mov	r11,r1
80006068:	08 9c       	mov	r12,r4
8000606a:	fe b0 f1 01 	rcall	8000426c <__sprint_r>
8000606e:	e0 81 00 8c 	brne	80006186 <_vfprintf_r+0x1efe>
80006072:	fa c3 f9 e0 	sub	r3,sp,-1568
80006076:	40 ea       	lddsp	r10,sp[0x38]
80006078:	fa f8 06 90 	ld.w	r8,sp[1680]
8000607c:	14 08       	add	r8,r10
8000607e:	fa c9 f9 64 	sub	r9,sp,-1692
80006082:	fb 48 06 90 	st.w	sp[1680],r8
80006086:	87 1a       	st.w	r3[0x4],r10
80006088:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000608c:	87 09       	st.w	r3[0x0],r9
8000608e:	2f f8       	sub	r8,-1
80006090:	fb 48 06 8c 	st.w	sp[1676],r8
80006094:	58 78       	cp.w	r8,7
80006096:	e0 89 00 04 	brgt	8000609e <_vfprintf_r+0x1e16>
8000609a:	2f 83       	sub	r3,-8
8000609c:	c0 a8       	rjmp	800060b0 <_vfprintf_r+0x1e28>
8000609e:	fa ca f9 78 	sub	r10,sp,-1672
800060a2:	02 9b       	mov	r11,r1
800060a4:	08 9c       	mov	r12,r4
800060a6:	fe b0 f0 e3 	rcall	8000426c <__sprint_r>
800060aa:	c6 e1       	brne	80006186 <_vfprintf_r+0x1efe>
800060ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800060b0:	e2 15 00 04 	andl	r5,0x4,COH
800060b4:	c3 f0       	breq	80006132 <_vfprintf_r+0x1eaa>
800060b6:	40 86       	lddsp	r6,sp[0x20]
800060b8:	40 39       	lddsp	r9,sp[0xc]
800060ba:	12 16       	sub	r6,r9
800060bc:	58 06       	cp.w	r6,0
800060be:	e0 89 00 1a 	brgt	800060f2 <_vfprintf_r+0x1e6a>
800060c2:	c3 88       	rjmp	80006132 <_vfprintf_r+0x1eaa>
800060c4:	2f 09       	sub	r9,-16
800060c6:	2f f8       	sub	r8,-1
800060c8:	fb 49 06 90 	st.w	sp[1680],r9
800060cc:	87 05       	st.w	r3[0x0],r5
800060ce:	87 12       	st.w	r3[0x4],r2
800060d0:	fb 48 06 8c 	st.w	sp[1676],r8
800060d4:	58 78       	cp.w	r8,7
800060d6:	e0 89 00 04 	brgt	800060de <_vfprintf_r+0x1e56>
800060da:	2f 83       	sub	r3,-8
800060dc:	c0 98       	rjmp	800060ee <_vfprintf_r+0x1e66>
800060de:	00 9a       	mov	r10,r0
800060e0:	02 9b       	mov	r11,r1
800060e2:	08 9c       	mov	r12,r4
800060e4:	fe b0 f0 c4 	rcall	8000426c <__sprint_r>
800060e8:	c4 f1       	brne	80006186 <_vfprintf_r+0x1efe>
800060ea:	fa c3 f9 e0 	sub	r3,sp,-1568
800060ee:	21 06       	sub	r6,16
800060f0:	c0 68       	rjmp	800060fc <_vfprintf_r+0x1e74>
800060f2:	fe c5 c2 8e 	sub	r5,pc,-15730
800060f6:	31 02       	mov	r2,16
800060f8:	fa c0 f9 78 	sub	r0,sp,-1672
800060fc:	fa f9 06 90 	ld.w	r9,sp[1680]
80006100:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006104:	fe ca c2 a0 	sub	r10,pc,-15712
80006108:	59 06       	cp.w	r6,16
8000610a:	fe 99 ff dd 	brgt	800060c4 <_vfprintf_r+0x1e3c>
8000610e:	0c 09       	add	r9,r6
80006110:	2f f8       	sub	r8,-1
80006112:	87 0a       	st.w	r3[0x0],r10
80006114:	87 16       	st.w	r3[0x4],r6
80006116:	fb 49 06 90 	st.w	sp[1680],r9
8000611a:	fb 48 06 8c 	st.w	sp[1676],r8
8000611e:	58 78       	cp.w	r8,7
80006120:	e0 8a 00 09 	brle	80006132 <_vfprintf_r+0x1eaa>
80006124:	fa ca f9 78 	sub	r10,sp,-1672
80006128:	02 9b       	mov	r11,r1
8000612a:	08 9c       	mov	r12,r4
8000612c:	fe b0 f0 a0 	rcall	8000426c <__sprint_r>
80006130:	c2 b1       	brne	80006186 <_vfprintf_r+0x1efe>
80006132:	40 bc       	lddsp	r12,sp[0x2c]
80006134:	40 36       	lddsp	r6,sp[0xc]
80006136:	40 8e       	lddsp	lr,sp[0x20]
80006138:	ec 0e 0c 48 	max	r8,r6,lr
8000613c:	10 0c       	add	r12,r8
8000613e:	50 bc       	stdsp	sp[0x2c],r12
80006140:	fa f8 06 90 	ld.w	r8,sp[1680]
80006144:	58 08       	cp.w	r8,0
80006146:	c0 80       	breq	80006156 <_vfprintf_r+0x1ece>
80006148:	fa ca f9 78 	sub	r10,sp,-1672
8000614c:	02 9b       	mov	r11,r1
8000614e:	08 9c       	mov	r12,r4
80006150:	fe b0 f0 8e 	rcall	8000426c <__sprint_r>
80006154:	c1 91       	brne	80006186 <_vfprintf_r+0x1efe>
80006156:	30 0b       	mov	r11,0
80006158:	fa c3 f9 e0 	sub	r3,sp,-1568
8000615c:	fb 4b 06 8c 	st.w	sp[1676],r11
80006160:	fe 9f f1 22 	bral	800043a4 <_vfprintf_r+0x11c>
80006164:	08 95       	mov	r5,r4
80006166:	fa f8 06 90 	ld.w	r8,sp[1680]
8000616a:	58 08       	cp.w	r8,0
8000616c:	c0 80       	breq	8000617c <_vfprintf_r+0x1ef4>
8000616e:	08 9c       	mov	r12,r4
80006170:	fa ca f9 78 	sub	r10,sp,-1672
80006174:	02 9b       	mov	r11,r1
80006176:	fe b0 f0 7b 	rcall	8000426c <__sprint_r>
8000617a:	c0 61       	brne	80006186 <_vfprintf_r+0x1efe>
8000617c:	30 08       	mov	r8,0
8000617e:	fb 48 06 8c 	st.w	sp[1676],r8
80006182:	c0 28       	rjmp	80006186 <_vfprintf_r+0x1efe>
80006184:	40 41       	lddsp	r1,sp[0x10]
80006186:	82 68       	ld.sh	r8,r1[0xc]
80006188:	ed b8 00 06 	bld	r8,0x6
8000618c:	c0 31       	brne	80006192 <_vfprintf_r+0x1f0a>
8000618e:	3f fa       	mov	r10,-1
80006190:	50 ba       	stdsp	sp[0x2c],r10
80006192:	40 bc       	lddsp	r12,sp[0x2c]
80006194:	fe 3d f9 44 	sub	sp,-1724
80006198:	d8 32       	popm	r0-r7,pc
8000619a:	d7 03       	nop

8000619c <__swsetup_r>:
8000619c:	d4 21       	pushm	r4-r7,lr
8000619e:	e0 68 01 18 	mov	r8,280
800061a2:	18 96       	mov	r6,r12
800061a4:	16 97       	mov	r7,r11
800061a6:	70 0c       	ld.w	r12,r8[0x0]
800061a8:	58 0c       	cp.w	r12,0
800061aa:	c0 60       	breq	800061b6 <__swsetup_r+0x1a>
800061ac:	78 68       	ld.w	r8,r12[0x18]
800061ae:	58 08       	cp.w	r8,0
800061b0:	c0 31       	brne	800061b6 <__swsetup_r+0x1a>
800061b2:	e0 a0 07 b9 	rcall	80007124 <__sinit>
800061b6:	fe c8 c2 22 	sub	r8,pc,-15838
800061ba:	10 37       	cp.w	r7,r8
800061bc:	c0 61       	brne	800061c8 <__swsetup_r+0x2c>
800061be:	e0 68 01 18 	mov	r8,280
800061c2:	70 08       	ld.w	r8,r8[0x0]
800061c4:	70 07       	ld.w	r7,r8[0x0]
800061c6:	c1 28       	rjmp	800061ea <__swsetup_r+0x4e>
800061c8:	fe c8 c2 14 	sub	r8,pc,-15852
800061cc:	10 37       	cp.w	r7,r8
800061ce:	c0 61       	brne	800061da <__swsetup_r+0x3e>
800061d0:	e0 68 01 18 	mov	r8,280
800061d4:	70 08       	ld.w	r8,r8[0x0]
800061d6:	70 17       	ld.w	r7,r8[0x4]
800061d8:	c0 98       	rjmp	800061ea <__swsetup_r+0x4e>
800061da:	fe c8 c2 06 	sub	r8,pc,-15866
800061de:	10 37       	cp.w	r7,r8
800061e0:	c0 51       	brne	800061ea <__swsetup_r+0x4e>
800061e2:	e0 68 01 18 	mov	r8,280
800061e6:	70 08       	ld.w	r8,r8[0x0]
800061e8:	70 27       	ld.w	r7,r8[0x8]
800061ea:	8e 68       	ld.sh	r8,r7[0xc]
800061ec:	ed b8 00 03 	bld	r8,0x3
800061f0:	c1 e0       	breq	8000622c <__swsetup_r+0x90>
800061f2:	ed b8 00 04 	bld	r8,0x4
800061f6:	c3 e1       	brne	80006272 <__swsetup_r+0xd6>
800061f8:	ed b8 00 02 	bld	r8,0x2
800061fc:	c1 51       	brne	80006226 <__swsetup_r+0x8a>
800061fe:	6e db       	ld.w	r11,r7[0x34]
80006200:	58 0b       	cp.w	r11,0
80006202:	c0 a0       	breq	80006216 <__swsetup_r+0x7a>
80006204:	ee c8 ff bc 	sub	r8,r7,-68
80006208:	10 3b       	cp.w	r11,r8
8000620a:	c0 40       	breq	80006212 <__swsetup_r+0x76>
8000620c:	0c 9c       	mov	r12,r6
8000620e:	e0 a0 08 25 	rcall	80007258 <_free_r>
80006212:	30 08       	mov	r8,0
80006214:	8f d8       	st.w	r7[0x34],r8
80006216:	8e 68       	ld.sh	r8,r7[0xc]
80006218:	e0 18 ff db 	andl	r8,0xffdb
8000621c:	ae 68       	st.h	r7[0xc],r8
8000621e:	30 08       	mov	r8,0
80006220:	8f 18       	st.w	r7[0x4],r8
80006222:	6e 48       	ld.w	r8,r7[0x10]
80006224:	8f 08       	st.w	r7[0x0],r8
80006226:	8e 68       	ld.sh	r8,r7[0xc]
80006228:	a3 b8       	sbr	r8,0x3
8000622a:	ae 68       	st.h	r7[0xc],r8
8000622c:	6e 48       	ld.w	r8,r7[0x10]
8000622e:	58 08       	cp.w	r8,0
80006230:	c0 b1       	brne	80006246 <__swsetup_r+0xaa>
80006232:	8e 68       	ld.sh	r8,r7[0xc]
80006234:	e2 18 02 80 	andl	r8,0x280,COH
80006238:	e0 48 02 00 	cp.w	r8,512
8000623c:	c0 50       	breq	80006246 <__swsetup_r+0xaa>
8000623e:	0c 9c       	mov	r12,r6
80006240:	0e 9b       	mov	r11,r7
80006242:	e0 a0 0a 4b 	rcall	800076d8 <__smakebuf_r>
80006246:	8e 69       	ld.sh	r9,r7[0xc]
80006248:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000624c:	c0 70       	breq	8000625a <__swsetup_r+0xbe>
8000624e:	30 08       	mov	r8,0
80006250:	8f 28       	st.w	r7[0x8],r8
80006252:	6e 58       	ld.w	r8,r7[0x14]
80006254:	5c 38       	neg	r8
80006256:	8f 68       	st.w	r7[0x18],r8
80006258:	c0 68       	rjmp	80006264 <__swsetup_r+0xc8>
8000625a:	ed b9 00 01 	bld	r9,0x1
8000625e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80006262:	8f 28       	st.w	r7[0x8],r8
80006264:	6e 48       	ld.w	r8,r7[0x10]
80006266:	58 08       	cp.w	r8,0
80006268:	c0 61       	brne	80006274 <__swsetup_r+0xd8>
8000626a:	8e 68       	ld.sh	r8,r7[0xc]
8000626c:	ed b8 00 07 	bld	r8,0x7
80006270:	c0 21       	brne	80006274 <__swsetup_r+0xd8>
80006272:	dc 2a       	popm	r4-r7,pc,r12=-1
80006274:	d8 2a       	popm	r4-r7,pc,r12=0
80006276:	d7 03       	nop

80006278 <quorem>:
80006278:	d4 31       	pushm	r0-r7,lr
8000627a:	20 2d       	sub	sp,8
8000627c:	18 97       	mov	r7,r12
8000627e:	78 48       	ld.w	r8,r12[0x10]
80006280:	76 46       	ld.w	r6,r11[0x10]
80006282:	0c 38       	cp.w	r8,r6
80006284:	c0 34       	brge	8000628a <quorem+0x12>
80006286:	30 0c       	mov	r12,0
80006288:	c8 58       	rjmp	80006392 <quorem+0x11a>
8000628a:	ec c2 ff fc 	sub	r2,r6,-4
8000628e:	f6 c3 ff ec 	sub	r3,r11,-20
80006292:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80006296:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000629a:	2f f9       	sub	r9,-1
8000629c:	20 16       	sub	r6,1
8000629e:	f8 09 0d 08 	divu	r8,r12,r9
800062a2:	f6 02 00 22 	add	r2,r11,r2<<0x2
800062a6:	ee c4 ff ec 	sub	r4,r7,-20
800062aa:	10 95       	mov	r5,r8
800062ac:	58 08       	cp.w	r8,0
800062ae:	c4 10       	breq	80006330 <quorem+0xb8>
800062b0:	30 09       	mov	r9,0
800062b2:	06 9a       	mov	r10,r3
800062b4:	08 98       	mov	r8,r4
800062b6:	12 91       	mov	r1,r9
800062b8:	50 0b       	stdsp	sp[0x0],r11
800062ba:	70 0e       	ld.w	lr,r8[0x0]
800062bc:	b1 8e       	lsr	lr,0x10
800062be:	50 1e       	stdsp	sp[0x4],lr
800062c0:	15 0e       	ld.w	lr,r10++
800062c2:	fc 00 16 10 	lsr	r0,lr,0x10
800062c6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800062ca:	ea 0e 03 41 	mac	r1,r5,lr
800062ce:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800062d2:	b1 81       	lsr	r1,0x10
800062d4:	40 1b       	lddsp	r11,sp[0x4]
800062d6:	ea 00 02 40 	mul	r0,r5,r0
800062da:	e2 00 00 00 	add	r0,r1,r0
800062de:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800062e2:	02 1b       	sub	r11,r1
800062e4:	50 1b       	stdsp	sp[0x4],r11
800062e6:	70 0b       	ld.w	r11,r8[0x0]
800062e8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800062ec:	02 09       	add	r9,r1
800062ee:	f2 0e 01 0e 	sub	lr,r9,lr
800062f2:	b0 1e       	st.h	r8[0x2],lr
800062f4:	fc 09 14 10 	asr	r9,lr,0x10
800062f8:	40 1e       	lddsp	lr,sp[0x4]
800062fa:	fc 09 00 09 	add	r9,lr,r9
800062fe:	b0 09       	st.h	r8[0x0],r9
80006300:	e0 01 16 10 	lsr	r1,r0,0x10
80006304:	2f c8       	sub	r8,-4
80006306:	b1 49       	asr	r9,0x10
80006308:	04 3a       	cp.w	r10,r2
8000630a:	fe 98 ff d8 	brls	800062ba <quorem+0x42>
8000630e:	40 0b       	lddsp	r11,sp[0x0]
80006310:	58 0c       	cp.w	r12,0
80006312:	c0 f1       	brne	80006330 <quorem+0xb8>
80006314:	ec c8 ff fb 	sub	r8,r6,-5
80006318:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000631c:	c0 28       	rjmp	80006320 <quorem+0xa8>
8000631e:	20 16       	sub	r6,1
80006320:	20 48       	sub	r8,4
80006322:	08 38       	cp.w	r8,r4
80006324:	e0 88 00 05 	brls	8000632e <quorem+0xb6>
80006328:	70 09       	ld.w	r9,r8[0x0]
8000632a:	58 09       	cp.w	r9,0
8000632c:	cf 90       	breq	8000631e <quorem+0xa6>
8000632e:	8f 46       	st.w	r7[0x10],r6
80006330:	0e 9c       	mov	r12,r7
80006332:	e0 a0 0c f4 	rcall	80007d1a <__mcmp>
80006336:	c2 d5       	brlt	80006390 <quorem+0x118>
80006338:	2f f5       	sub	r5,-1
8000633a:	08 98       	mov	r8,r4
8000633c:	30 09       	mov	r9,0
8000633e:	07 0b       	ld.w	r11,r3++
80006340:	f6 0a 16 10 	lsr	r10,r11,0x10
80006344:	70 0c       	ld.w	r12,r8[0x0]
80006346:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000634a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000634e:	14 1e       	sub	lr,r10
80006350:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006354:	16 1a       	sub	r10,r11
80006356:	12 0a       	add	r10,r9
80006358:	b0 1a       	st.h	r8[0x2],r10
8000635a:	b1 4a       	asr	r10,0x10
8000635c:	fc 0a 00 09 	add	r9,lr,r10
80006360:	b0 09       	st.h	r8[0x0],r9
80006362:	2f c8       	sub	r8,-4
80006364:	b1 49       	asr	r9,0x10
80006366:	04 33       	cp.w	r3,r2
80006368:	fe 98 ff eb 	brls	8000633e <quorem+0xc6>
8000636c:	ec c8 ff fb 	sub	r8,r6,-5
80006370:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006374:	58 09       	cp.w	r9,0
80006376:	c0 d1       	brne	80006390 <quorem+0x118>
80006378:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000637c:	c0 28       	rjmp	80006380 <quorem+0x108>
8000637e:	20 16       	sub	r6,1
80006380:	20 48       	sub	r8,4
80006382:	08 38       	cp.w	r8,r4
80006384:	e0 88 00 05 	brls	8000638e <quorem+0x116>
80006388:	70 09       	ld.w	r9,r8[0x0]
8000638a:	58 09       	cp.w	r9,0
8000638c:	cf 90       	breq	8000637e <quorem+0x106>
8000638e:	8f 46       	st.w	r7[0x10],r6
80006390:	0a 9c       	mov	r12,r5
80006392:	2f ed       	sub	sp,-8
80006394:	d8 32       	popm	r0-r7,pc
80006396:	d7 03       	nop

80006398 <_dtoa_r>:
80006398:	d4 31       	pushm	r0-r7,lr
8000639a:	21 ad       	sub	sp,104
8000639c:	fa c4 ff 74 	sub	r4,sp,-140
800063a0:	18 97       	mov	r7,r12
800063a2:	16 95       	mov	r5,r11
800063a4:	68 2c       	ld.w	r12,r4[0x8]
800063a6:	50 c9       	stdsp	sp[0x30],r9
800063a8:	68 16       	ld.w	r6,r4[0x4]
800063aa:	68 09       	ld.w	r9,r4[0x0]
800063ac:	50 e8       	stdsp	sp[0x38],r8
800063ae:	14 94       	mov	r4,r10
800063b0:	51 2c       	stdsp	sp[0x48],r12
800063b2:	fa e5 00 08 	st.d	sp[8],r4
800063b6:	51 59       	stdsp	sp[0x54],r9
800063b8:	6e 95       	ld.w	r5,r7[0x24]
800063ba:	58 05       	cp.w	r5,0
800063bc:	c0 91       	brne	800063ce <_dtoa_r+0x36>
800063be:	31 0c       	mov	r12,16
800063c0:	e0 a0 09 ea 	rcall	80007794 <malloc>
800063c4:	99 35       	st.w	r12[0xc],r5
800063c6:	8f 9c       	st.w	r7[0x24],r12
800063c8:	99 15       	st.w	r12[0x4],r5
800063ca:	99 25       	st.w	r12[0x8],r5
800063cc:	99 05       	st.w	r12[0x0],r5
800063ce:	6e 99       	ld.w	r9,r7[0x24]
800063d0:	72 08       	ld.w	r8,r9[0x0]
800063d2:	58 08       	cp.w	r8,0
800063d4:	c0 f0       	breq	800063f2 <_dtoa_r+0x5a>
800063d6:	72 1a       	ld.w	r10,r9[0x4]
800063d8:	91 1a       	st.w	r8[0x4],r10
800063da:	30 1a       	mov	r10,1
800063dc:	72 19       	ld.w	r9,r9[0x4]
800063de:	f4 09 09 49 	lsl	r9,r10,r9
800063e2:	10 9b       	mov	r11,r8
800063e4:	91 29       	st.w	r8[0x8],r9
800063e6:	0e 9c       	mov	r12,r7
800063e8:	e0 a0 0c b2 	rcall	80007d4c <_Bfree>
800063ec:	6e 98       	ld.w	r8,r7[0x24]
800063ee:	30 09       	mov	r9,0
800063f0:	91 09       	st.w	r8[0x0],r9
800063f2:	40 28       	lddsp	r8,sp[0x8]
800063f4:	10 94       	mov	r4,r8
800063f6:	58 08       	cp.w	r8,0
800063f8:	c0 64       	brge	80006404 <_dtoa_r+0x6c>
800063fa:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800063fe:	50 28       	stdsp	sp[0x8],r8
80006400:	30 18       	mov	r8,1
80006402:	c0 28       	rjmp	80006406 <_dtoa_r+0x6e>
80006404:	30 08       	mov	r8,0
80006406:	8d 08       	st.w	r6[0x0],r8
80006408:	fc 1c 7f f0 	movh	r12,0x7ff0
8000640c:	40 26       	lddsp	r6,sp[0x8]
8000640e:	0c 98       	mov	r8,r6
80006410:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006414:	18 38       	cp.w	r8,r12
80006416:	c2 01       	brne	80006456 <_dtoa_r+0xbe>
80006418:	e0 68 27 0f 	mov	r8,9999
8000641c:	41 5b       	lddsp	r11,sp[0x54]
8000641e:	97 08       	st.w	r11[0x0],r8
80006420:	40 3a       	lddsp	r10,sp[0xc]
80006422:	58 0a       	cp.w	r10,0
80006424:	c0 71       	brne	80006432 <_dtoa_r+0x9a>
80006426:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000642a:	c0 41       	brne	80006432 <_dtoa_r+0x9a>
8000642c:	fe cc c4 a8 	sub	r12,pc,-15192
80006430:	c0 38       	rjmp	80006436 <_dtoa_r+0x9e>
80006432:	fe cc c4 a2 	sub	r12,pc,-15198
80006436:	41 29       	lddsp	r9,sp[0x48]
80006438:	58 09       	cp.w	r9,0
8000643a:	e0 80 05 9a 	breq	80006f6e <_dtoa_r+0xbd6>
8000643e:	f8 c8 ff fd 	sub	r8,r12,-3
80006442:	f8 c9 ff f8 	sub	r9,r12,-8
80006446:	11 8b       	ld.ub	r11,r8[0x0]
80006448:	30 0a       	mov	r10,0
8000644a:	41 25       	lddsp	r5,sp[0x48]
8000644c:	f4 0b 18 00 	cp.b	r11,r10
80006450:	f2 08 17 10 	movne	r8,r9
80006454:	c1 68       	rjmp	80006480 <_dtoa_r+0xe8>
80006456:	fa ea 00 08 	ld.d	r10,sp[8]
8000645a:	30 08       	mov	r8,0
8000645c:	fa eb 00 3c 	st.d	sp[60],r10
80006460:	30 09       	mov	r9,0
80006462:	e0 a0 13 80 	rcall	80008b62 <__avr32_f64_cmp_eq>
80006466:	c1 00       	breq	80006486 <_dtoa_r+0xee>
80006468:	30 18       	mov	r8,1
8000646a:	41 5a       	lddsp	r10,sp[0x54]
8000646c:	95 08       	st.w	r10[0x0],r8
8000646e:	fe cc c6 0e 	sub	r12,pc,-14834
80006472:	41 29       	lddsp	r9,sp[0x48]
80006474:	f8 08 00 08 	add	r8,r12,r8
80006478:	58 09       	cp.w	r9,0
8000647a:	e0 80 05 7a 	breq	80006f6e <_dtoa_r+0xbd6>
8000647e:	12 95       	mov	r5,r9
80006480:	8b 08       	st.w	r5[0x0],r8
80006482:	e0 8f 05 76 	bral	80006f6e <_dtoa_r+0xbd6>
80006486:	fa c8 ff 9c 	sub	r8,sp,-100
8000648a:	fa c9 ff a0 	sub	r9,sp,-96
8000648e:	fa ea 00 3c 	ld.d	r10,sp[60]
80006492:	0e 9c       	mov	r12,r7
80006494:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006498:	e0 a0 0c ac 	rcall	80007df0 <__d2b>
8000649c:	18 93       	mov	r3,r12
8000649e:	58 05       	cp.w	r5,0
800064a0:	c0 d0       	breq	800064ba <_dtoa_r+0x122>
800064a2:	fa ea 00 3c 	ld.d	r10,sp[60]
800064a6:	30 04       	mov	r4,0
800064a8:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800064ac:	ea c5 03 ff 	sub	r5,r5,1023
800064b0:	10 9b       	mov	r11,r8
800064b2:	51 74       	stdsp	sp[0x5c],r4
800064b4:	ea 1b 3f f0 	orh	r11,0x3ff0
800064b8:	c2 58       	rjmp	80006502 <_dtoa_r+0x16a>
800064ba:	41 88       	lddsp	r8,sp[0x60]
800064bc:	41 9c       	lddsp	r12,sp[0x64]
800064be:	10 0c       	add	r12,r8
800064c0:	f8 c5 fb ce 	sub	r5,r12,-1074
800064c4:	e0 45 00 20 	cp.w	r5,32
800064c8:	e0 8a 00 0e 	brle	800064e4 <_dtoa_r+0x14c>
800064cc:	f8 cc fb ee 	sub	r12,r12,-1042
800064d0:	40 3b       	lddsp	r11,sp[0xc]
800064d2:	ea 08 11 40 	rsub	r8,r5,64
800064d6:	f6 0c 0a 4c 	lsr	r12,r11,r12
800064da:	ec 08 09 46 	lsl	r6,r6,r8
800064de:	0c 4c       	or	r12,r6
800064e0:	c0 78       	rjmp	800064ee <_dtoa_r+0x156>
800064e2:	d7 03       	nop
800064e4:	ea 0c 11 20 	rsub	r12,r5,32
800064e8:	40 3a       	lddsp	r10,sp[0xc]
800064ea:	f4 0c 09 4c 	lsl	r12,r10,r12
800064ee:	fe b0 eb 87 	rcall	80003bfc <__avr32_u32_to_f64>
800064f2:	fc 18 fe 10 	movh	r8,0xfe10
800064f6:	30 19       	mov	r9,1
800064f8:	ea c5 04 33 	sub	r5,r5,1075
800064fc:	f0 0b 00 0b 	add	r11,r8,r11
80006500:	51 79       	stdsp	sp[0x5c],r9
80006502:	30 08       	mov	r8,0
80006504:	fc 19 3f f8 	movh	r9,0x3ff8
80006508:	e0 a0 11 c2 	rcall	8000888c <__avr32_f64_sub>
8000650c:	e0 68 43 61 	mov	r8,17249
80006510:	ea 18 63 6f 	orh	r8,0x636f
80006514:	e0 69 87 a7 	mov	r9,34727
80006518:	ea 19 3f d2 	orh	r9,0x3fd2
8000651c:	fe b0 ea 86 	rcall	80003a28 <__avr32_f64_mul>
80006520:	e0 68 c8 b3 	mov	r8,51379
80006524:	ea 18 8b 60 	orh	r8,0x8b60
80006528:	e0 69 8a 28 	mov	r9,35368
8000652c:	ea 19 3f c6 	orh	r9,0x3fc6
80006530:	e0 a0 12 7c 	rcall	80008a28 <__avr32_f64_add>
80006534:	0a 9c       	mov	r12,r5
80006536:	14 90       	mov	r0,r10
80006538:	16 91       	mov	r1,r11
8000653a:	fe b0 eb 65 	rcall	80003c04 <__avr32_s32_to_f64>
8000653e:	e0 68 79 fb 	mov	r8,31227
80006542:	ea 18 50 9f 	orh	r8,0x509f
80006546:	e0 69 44 13 	mov	r9,17427
8000654a:	ea 19 3f d3 	orh	r9,0x3fd3
8000654e:	fe b0 ea 6d 	rcall	80003a28 <__avr32_f64_mul>
80006552:	14 98       	mov	r8,r10
80006554:	16 99       	mov	r9,r11
80006556:	00 9a       	mov	r10,r0
80006558:	02 9b       	mov	r11,r1
8000655a:	e0 a0 12 67 	rcall	80008a28 <__avr32_f64_add>
8000655e:	14 90       	mov	r0,r10
80006560:	16 91       	mov	r1,r11
80006562:	e0 a0 12 ed 	rcall	80008b3c <__avr32_f64_to_s32>
80006566:	30 08       	mov	r8,0
80006568:	18 96       	mov	r6,r12
8000656a:	30 09       	mov	r9,0
8000656c:	00 9a       	mov	r10,r0
8000656e:	02 9b       	mov	r11,r1
80006570:	e0 a0 13 40 	rcall	80008bf0 <__avr32_f64_cmp_lt>
80006574:	c0 c0       	breq	8000658c <_dtoa_r+0x1f4>
80006576:	0c 9c       	mov	r12,r6
80006578:	fe b0 eb 46 	rcall	80003c04 <__avr32_s32_to_f64>
8000657c:	14 98       	mov	r8,r10
8000657e:	16 99       	mov	r9,r11
80006580:	00 9a       	mov	r10,r0
80006582:	02 9b       	mov	r11,r1
80006584:	e0 a0 12 ef 	rcall	80008b62 <__avr32_f64_cmp_eq>
80006588:	f7 b6 00 01 	subeq	r6,1
8000658c:	59 66       	cp.w	r6,22
8000658e:	e0 88 00 05 	brls	80006598 <_dtoa_r+0x200>
80006592:	30 18       	mov	r8,1
80006594:	51 48       	stdsp	sp[0x50],r8
80006596:	c1 38       	rjmp	800065bc <_dtoa_r+0x224>
80006598:	fe c8 c5 50 	sub	r8,pc,-15024
8000659c:	fa ea 00 3c 	ld.d	r10,sp[60]
800065a0:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800065a4:	e0 a0 13 26 	rcall	80008bf0 <__avr32_f64_cmp_lt>
800065a8:	f9 b4 00 00 	moveq	r4,0
800065ac:	fb f4 0a 14 	st.weq	sp[0x50],r4
800065b0:	f7 b6 01 01 	subne	r6,1
800065b4:	f9 bc 01 00 	movne	r12,0
800065b8:	fb fc 1a 14 	st.wne	sp[0x50],r12
800065bc:	41 90       	lddsp	r0,sp[0x64]
800065be:	20 10       	sub	r0,1
800065c0:	0a 10       	sub	r0,r5
800065c2:	c0 46       	brmi	800065ca <_dtoa_r+0x232>
800065c4:	50 40       	stdsp	sp[0x10],r0
800065c6:	30 00       	mov	r0,0
800065c8:	c0 48       	rjmp	800065d0 <_dtoa_r+0x238>
800065ca:	30 0b       	mov	r11,0
800065cc:	5c 30       	neg	r0
800065ce:	50 4b       	stdsp	sp[0x10],r11
800065d0:	ec 02 11 00 	rsub	r2,r6,0
800065d4:	58 06       	cp.w	r6,0
800065d6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800065da:	f5 d6 e4 0a 	addge	r10,r10,r6
800065de:	fb fa 4a 04 	st.wge	sp[0x10],r10
800065e2:	fb f6 4a 11 	st.wge	sp[0x44],r6
800065e6:	f9 b2 04 00 	movge	r2,0
800065ea:	e1 d6 e5 10 	sublt	r0,r0,r6
800065ee:	f9 b9 05 00 	movlt	r9,0
800065f2:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800065f6:	40 c8       	lddsp	r8,sp[0x30]
800065f8:	58 98       	cp.w	r8,9
800065fa:	e0 8b 00 20 	brhi	8000663a <_dtoa_r+0x2a2>
800065fe:	58 58       	cp.w	r8,5
80006600:	f9 b4 0a 01 	movle	r4,1
80006604:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006608:	f7 b5 09 04 	subgt	r5,4
8000660c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80006610:	f9 b4 09 00 	movgt	r4,0
80006614:	40 cc       	lddsp	r12,sp[0x30]
80006616:	58 3c       	cp.w	r12,3
80006618:	c2 d0       	breq	80006672 <_dtoa_r+0x2da>
8000661a:	e0 89 00 05 	brgt	80006624 <_dtoa_r+0x28c>
8000661e:	58 2c       	cp.w	r12,2
80006620:	c1 01       	brne	80006640 <_dtoa_r+0x2a8>
80006622:	c1 88       	rjmp	80006652 <_dtoa_r+0x2ba>
80006624:	40 cb       	lddsp	r11,sp[0x30]
80006626:	58 4b       	cp.w	r11,4
80006628:	c0 60       	breq	80006634 <_dtoa_r+0x29c>
8000662a:	58 5b       	cp.w	r11,5
8000662c:	c0 a1       	brne	80006640 <_dtoa_r+0x2a8>
8000662e:	30 1a       	mov	r10,1
80006630:	50 da       	stdsp	sp[0x34],r10
80006632:	c2 28       	rjmp	80006676 <_dtoa_r+0x2de>
80006634:	30 19       	mov	r9,1
80006636:	50 d9       	stdsp	sp[0x34],r9
80006638:	c0 f8       	rjmp	80006656 <_dtoa_r+0x2be>
8000663a:	30 08       	mov	r8,0
8000663c:	30 14       	mov	r4,1
8000663e:	50 c8       	stdsp	sp[0x30],r8
80006640:	3f f5       	mov	r5,-1
80006642:	30 1c       	mov	r12,1
80006644:	30 0b       	mov	r11,0
80006646:	50 95       	stdsp	sp[0x24],r5
80006648:	50 dc       	stdsp	sp[0x34],r12
8000664a:	0a 91       	mov	r1,r5
8000664c:	31 28       	mov	r8,18
8000664e:	50 eb       	stdsp	sp[0x38],r11
80006650:	c2 08       	rjmp	80006690 <_dtoa_r+0x2f8>
80006652:	30 0a       	mov	r10,0
80006654:	50 da       	stdsp	sp[0x34],r10
80006656:	40 e9       	lddsp	r9,sp[0x38]
80006658:	58 09       	cp.w	r9,0
8000665a:	e0 89 00 07 	brgt	80006668 <_dtoa_r+0x2d0>
8000665e:	30 18       	mov	r8,1
80006660:	50 98       	stdsp	sp[0x24],r8
80006662:	10 91       	mov	r1,r8
80006664:	50 e8       	stdsp	sp[0x38],r8
80006666:	c1 58       	rjmp	80006690 <_dtoa_r+0x2f8>
80006668:	40 e5       	lddsp	r5,sp[0x38]
8000666a:	50 95       	stdsp	sp[0x24],r5
8000666c:	0a 91       	mov	r1,r5
8000666e:	0a 98       	mov	r8,r5
80006670:	c1 08       	rjmp	80006690 <_dtoa_r+0x2f8>
80006672:	30 0c       	mov	r12,0
80006674:	50 dc       	stdsp	sp[0x34],r12
80006676:	40 eb       	lddsp	r11,sp[0x38]
80006678:	ec 0b 00 0b 	add	r11,r6,r11
8000667c:	50 9b       	stdsp	sp[0x24],r11
8000667e:	16 98       	mov	r8,r11
80006680:	2f f8       	sub	r8,-1
80006682:	58 08       	cp.w	r8,0
80006684:	e0 89 00 05 	brgt	8000668e <_dtoa_r+0x2f6>
80006688:	10 91       	mov	r1,r8
8000668a:	30 18       	mov	r8,1
8000668c:	c0 28       	rjmp	80006690 <_dtoa_r+0x2f8>
8000668e:	10 91       	mov	r1,r8
80006690:	30 09       	mov	r9,0
80006692:	6e 9a       	ld.w	r10,r7[0x24]
80006694:	95 19       	st.w	r10[0x4],r9
80006696:	30 49       	mov	r9,4
80006698:	c0 68       	rjmp	800066a4 <_dtoa_r+0x30c>
8000669a:	d7 03       	nop
8000669c:	6a 1a       	ld.w	r10,r5[0x4]
8000669e:	a1 79       	lsl	r9,0x1
800066a0:	2f fa       	sub	r10,-1
800066a2:	8b 1a       	st.w	r5[0x4],r10
800066a4:	6e 95       	ld.w	r5,r7[0x24]
800066a6:	f2 ca ff ec 	sub	r10,r9,-20
800066aa:	10 3a       	cp.w	r10,r8
800066ac:	fe 98 ff f8 	brls	8000669c <_dtoa_r+0x304>
800066b0:	6a 1b       	ld.w	r11,r5[0x4]
800066b2:	0e 9c       	mov	r12,r7
800066b4:	e0 a0 0b 66 	rcall	80007d80 <_Balloc>
800066b8:	58 e1       	cp.w	r1,14
800066ba:	5f 88       	srls	r8
800066bc:	8b 0c       	st.w	r5[0x0],r12
800066be:	f1 e4 00 04 	and	r4,r8,r4
800066c2:	6e 98       	ld.w	r8,r7[0x24]
800066c4:	70 08       	ld.w	r8,r8[0x0]
800066c6:	50 88       	stdsp	sp[0x20],r8
800066c8:	e0 80 01 82 	breq	800069cc <_dtoa_r+0x634>
800066cc:	58 06       	cp.w	r6,0
800066ce:	e0 8a 00 43 	brle	80006754 <_dtoa_r+0x3bc>
800066d2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800066d6:	fe c8 c6 8e 	sub	r8,pc,-14706
800066da:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800066de:	fa e5 00 18 	st.d	sp[24],r4
800066e2:	ec 04 14 04 	asr	r4,r6,0x4
800066e6:	ed b4 00 04 	bld	r4,0x4
800066ea:	c0 30       	breq	800066f0 <_dtoa_r+0x358>
800066ec:	30 25       	mov	r5,2
800066ee:	c1 08       	rjmp	8000670e <_dtoa_r+0x376>
800066f0:	fe c8 c5 e0 	sub	r8,pc,-14880
800066f4:	f0 e8 00 20 	ld.d	r8,r8[32]
800066f8:	fa ea 00 3c 	ld.d	r10,sp[60]
800066fc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006700:	e0 a0 12 ac 	rcall	80008c58 <__avr32_f64_div>
80006704:	30 35       	mov	r5,3
80006706:	14 98       	mov	r8,r10
80006708:	16 99       	mov	r9,r11
8000670a:	fa e9 00 08 	st.d	sp[8],r8
8000670e:	fe cc c5 fe 	sub	r12,pc,-14850
80006712:	50 a3       	stdsp	sp[0x28],r3
80006714:	0c 93       	mov	r3,r6
80006716:	18 96       	mov	r6,r12
80006718:	c0 f8       	rjmp	80006736 <_dtoa_r+0x39e>
8000671a:	fa ea 00 18 	ld.d	r10,sp[24]
8000671e:	ed b4 00 00 	bld	r4,0x0
80006722:	c0 81       	brne	80006732 <_dtoa_r+0x39a>
80006724:	ec e8 00 00 	ld.d	r8,r6[0]
80006728:	2f f5       	sub	r5,-1
8000672a:	fe b0 e9 7f 	rcall	80003a28 <__avr32_f64_mul>
8000672e:	fa eb 00 18 	st.d	sp[24],r10
80006732:	a1 54       	asr	r4,0x1
80006734:	2f 86       	sub	r6,-8
80006736:	58 04       	cp.w	r4,0
80006738:	cf 11       	brne	8000671a <_dtoa_r+0x382>
8000673a:	fa e8 00 18 	ld.d	r8,sp[24]
8000673e:	fa ea 00 08 	ld.d	r10,sp[8]
80006742:	06 96       	mov	r6,r3
80006744:	e0 a0 12 8a 	rcall	80008c58 <__avr32_f64_div>
80006748:	40 a3       	lddsp	r3,sp[0x28]
8000674a:	14 98       	mov	r8,r10
8000674c:	16 99       	mov	r9,r11
8000674e:	fa e9 00 08 	st.d	sp[8],r8
80006752:	c2 f8       	rjmp	800067b0 <_dtoa_r+0x418>
80006754:	ec 08 11 00 	rsub	r8,r6,0
80006758:	c0 31       	brne	8000675e <_dtoa_r+0x3c6>
8000675a:	30 25       	mov	r5,2
8000675c:	c2 a8       	rjmp	800067b0 <_dtoa_r+0x418>
8000675e:	fe cc c6 4e 	sub	r12,pc,-14770
80006762:	f0 04 14 04 	asr	r4,r8,0x4
80006766:	50 1c       	stdsp	sp[0x4],r12
80006768:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000676c:	fe c9 c7 24 	sub	r9,pc,-14556
80006770:	fa ea 00 3c 	ld.d	r10,sp[60]
80006774:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006778:	fe b0 e9 58 	rcall	80003a28 <__avr32_f64_mul>
8000677c:	40 1c       	lddsp	r12,sp[0x4]
8000677e:	50 63       	stdsp	sp[0x18],r3
80006780:	30 25       	mov	r5,2
80006782:	0c 93       	mov	r3,r6
80006784:	fa eb 00 08 	st.d	sp[8],r10
80006788:	18 96       	mov	r6,r12
8000678a:	c0 f8       	rjmp	800067a8 <_dtoa_r+0x410>
8000678c:	fa ea 00 08 	ld.d	r10,sp[8]
80006790:	ed b4 00 00 	bld	r4,0x0
80006794:	c0 81       	brne	800067a4 <_dtoa_r+0x40c>
80006796:	ec e8 00 00 	ld.d	r8,r6[0]
8000679a:	2f f5       	sub	r5,-1
8000679c:	fe b0 e9 46 	rcall	80003a28 <__avr32_f64_mul>
800067a0:	fa eb 00 08 	st.d	sp[8],r10
800067a4:	a1 54       	asr	r4,0x1
800067a6:	2f 86       	sub	r6,-8
800067a8:	58 04       	cp.w	r4,0
800067aa:	cf 11       	brne	8000678c <_dtoa_r+0x3f4>
800067ac:	06 96       	mov	r6,r3
800067ae:	40 63       	lddsp	r3,sp[0x18]
800067b0:	41 4a       	lddsp	r10,sp[0x50]
800067b2:	58 0a       	cp.w	r10,0
800067b4:	c2 a0       	breq	80006808 <_dtoa_r+0x470>
800067b6:	fa e8 00 08 	ld.d	r8,sp[8]
800067ba:	58 01       	cp.w	r1,0
800067bc:	5f 94       	srgt	r4
800067be:	fa e9 00 18 	st.d	sp[24],r8
800067c2:	30 08       	mov	r8,0
800067c4:	fc 19 3f f0 	movh	r9,0x3ff0
800067c8:	fa ea 00 18 	ld.d	r10,sp[24]
800067cc:	e0 a0 12 12 	rcall	80008bf0 <__avr32_f64_cmp_lt>
800067d0:	f9 bc 00 00 	moveq	r12,0
800067d4:	f9 bc 01 01 	movne	r12,1
800067d8:	e9 ec 00 0c 	and	r12,r4,r12
800067dc:	c1 60       	breq	80006808 <_dtoa_r+0x470>
800067de:	40 98       	lddsp	r8,sp[0x24]
800067e0:	58 08       	cp.w	r8,0
800067e2:	e0 8a 00 f1 	brle	800069c4 <_dtoa_r+0x62c>
800067e6:	30 08       	mov	r8,0
800067e8:	fc 19 40 24 	movh	r9,0x4024
800067ec:	ec c4 00 01 	sub	r4,r6,1
800067f0:	fa ea 00 18 	ld.d	r10,sp[24]
800067f4:	2f f5       	sub	r5,-1
800067f6:	50 64       	stdsp	sp[0x18],r4
800067f8:	fe b0 e9 18 	rcall	80003a28 <__avr32_f64_mul>
800067fc:	40 94       	lddsp	r4,sp[0x24]
800067fe:	14 98       	mov	r8,r10
80006800:	16 99       	mov	r9,r11
80006802:	fa e9 00 08 	st.d	sp[8],r8
80006806:	c0 38       	rjmp	8000680c <_dtoa_r+0x474>
80006808:	50 66       	stdsp	sp[0x18],r6
8000680a:	02 94       	mov	r4,r1
8000680c:	0a 9c       	mov	r12,r5
8000680e:	fe b0 e9 fb 	rcall	80003c04 <__avr32_s32_to_f64>
80006812:	fa e8 00 08 	ld.d	r8,sp[8]
80006816:	fe b0 e9 09 	rcall	80003a28 <__avr32_f64_mul>
8000681a:	30 08       	mov	r8,0
8000681c:	fc 19 40 1c 	movh	r9,0x401c
80006820:	e0 a0 11 04 	rcall	80008a28 <__avr32_f64_add>
80006824:	14 98       	mov	r8,r10
80006826:	16 99       	mov	r9,r11
80006828:	fa e9 00 28 	st.d	sp[40],r8
8000682c:	fc 18 fc c0 	movh	r8,0xfcc0
80006830:	40 a5       	lddsp	r5,sp[0x28]
80006832:	10 05       	add	r5,r8
80006834:	50 a5       	stdsp	sp[0x28],r5
80006836:	58 04       	cp.w	r4,0
80006838:	c2 11       	brne	8000687a <_dtoa_r+0x4e2>
8000683a:	fa ea 00 08 	ld.d	r10,sp[8]
8000683e:	30 08       	mov	r8,0
80006840:	fc 19 40 14 	movh	r9,0x4014
80006844:	e0 a0 10 24 	rcall	8000888c <__avr32_f64_sub>
80006848:	40 bc       	lddsp	r12,sp[0x2c]
8000684a:	fa eb 00 08 	st.d	sp[8],r10
8000684e:	14 98       	mov	r8,r10
80006850:	16 99       	mov	r9,r11
80006852:	18 9a       	mov	r10,r12
80006854:	0a 9b       	mov	r11,r5
80006856:	e0 a0 11 cd 	rcall	80008bf0 <__avr32_f64_cmp_lt>
8000685a:	e0 81 02 54 	brne	80006d02 <_dtoa_r+0x96a>
8000685e:	0a 98       	mov	r8,r5
80006860:	40 b9       	lddsp	r9,sp[0x2c]
80006862:	ee 18 80 00 	eorh	r8,0x8000
80006866:	fa ea 00 08 	ld.d	r10,sp[8]
8000686a:	10 95       	mov	r5,r8
8000686c:	12 98       	mov	r8,r9
8000686e:	0a 99       	mov	r9,r5
80006870:	e0 a0 11 c0 	rcall	80008bf0 <__avr32_f64_cmp_lt>
80006874:	e0 81 02 3e 	brne	80006cf0 <_dtoa_r+0x958>
80006878:	ca 68       	rjmp	800069c4 <_dtoa_r+0x62c>
8000687a:	fe c9 c8 32 	sub	r9,pc,-14286
8000687e:	e8 c8 00 01 	sub	r8,r4,1
80006882:	40 d5       	lddsp	r5,sp[0x34]
80006884:	58 05       	cp.w	r5,0
80006886:	c4 f0       	breq	80006924 <_dtoa_r+0x58c>
80006888:	30 0c       	mov	r12,0
8000688a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000688e:	51 3c       	stdsp	sp[0x4c],r12
80006890:	30 0a       	mov	r10,0
80006892:	fc 1b 3f e0 	movh	r11,0x3fe0
80006896:	e0 a0 11 e1 	rcall	80008c58 <__avr32_f64_div>
8000689a:	fa e8 00 28 	ld.d	r8,sp[40]
8000689e:	40 85       	lddsp	r5,sp[0x20]
800068a0:	e0 a0 0f f6 	rcall	8000888c <__avr32_f64_sub>
800068a4:	fa eb 00 28 	st.d	sp[40],r10
800068a8:	fa ea 00 08 	ld.d	r10,sp[8]
800068ac:	e0 a0 11 48 	rcall	80008b3c <__avr32_f64_to_s32>
800068b0:	51 6c       	stdsp	sp[0x58],r12
800068b2:	fe b0 e9 a9 	rcall	80003c04 <__avr32_s32_to_f64>
800068b6:	14 98       	mov	r8,r10
800068b8:	16 99       	mov	r9,r11
800068ba:	fa ea 00 08 	ld.d	r10,sp[8]
800068be:	e0 a0 0f e7 	rcall	8000888c <__avr32_f64_sub>
800068c2:	fa eb 00 08 	st.d	sp[8],r10
800068c6:	41 68       	lddsp	r8,sp[0x58]
800068c8:	2d 08       	sub	r8,-48
800068ca:	0a c8       	st.b	r5++,r8
800068cc:	41 39       	lddsp	r9,sp[0x4c]
800068ce:	2f f9       	sub	r9,-1
800068d0:	51 39       	stdsp	sp[0x4c],r9
800068d2:	fa e8 00 28 	ld.d	r8,sp[40]
800068d6:	e0 a0 11 8d 	rcall	80008bf0 <__avr32_f64_cmp_lt>
800068da:	e0 81 03 39 	brne	80006f4c <_dtoa_r+0xbb4>
800068de:	fa e8 00 08 	ld.d	r8,sp[8]
800068e2:	30 0a       	mov	r10,0
800068e4:	fc 1b 3f f0 	movh	r11,0x3ff0
800068e8:	e0 a0 0f d2 	rcall	8000888c <__avr32_f64_sub>
800068ec:	fa e8 00 28 	ld.d	r8,sp[40]
800068f0:	e0 a0 11 80 	rcall	80008bf0 <__avr32_f64_cmp_lt>
800068f4:	fa ea 00 28 	ld.d	r10,sp[40]
800068f8:	30 08       	mov	r8,0
800068fa:	fc 19 40 24 	movh	r9,0x4024
800068fe:	e0 81 00 da 	brne	80006ab2 <_dtoa_r+0x71a>
80006902:	41 3c       	lddsp	r12,sp[0x4c]
80006904:	08 3c       	cp.w	r12,r4
80006906:	c5 f4       	brge	800069c4 <_dtoa_r+0x62c>
80006908:	fe b0 e8 90 	rcall	80003a28 <__avr32_f64_mul>
8000690c:	30 08       	mov	r8,0
8000690e:	fa eb 00 28 	st.d	sp[40],r10
80006912:	fc 19 40 24 	movh	r9,0x4024
80006916:	fa ea 00 08 	ld.d	r10,sp[8]
8000691a:	fe b0 e8 87 	rcall	80003a28 <__avr32_f64_mul>
8000691e:	fa eb 00 08 	st.d	sp[8],r10
80006922:	cc 3b       	rjmp	800068a8 <_dtoa_r+0x510>
80006924:	40 85       	lddsp	r5,sp[0x20]
80006926:	08 05       	add	r5,r4
80006928:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000692c:	51 35       	stdsp	sp[0x4c],r5
8000692e:	fa e8 00 28 	ld.d	r8,sp[40]
80006932:	40 85       	lddsp	r5,sp[0x20]
80006934:	fe b0 e8 7a 	rcall	80003a28 <__avr32_f64_mul>
80006938:	fa eb 00 28 	st.d	sp[40],r10
8000693c:	fa ea 00 08 	ld.d	r10,sp[8]
80006940:	e0 a0 10 fe 	rcall	80008b3c <__avr32_f64_to_s32>
80006944:	51 6c       	stdsp	sp[0x58],r12
80006946:	fe b0 e9 5f 	rcall	80003c04 <__avr32_s32_to_f64>
8000694a:	14 98       	mov	r8,r10
8000694c:	16 99       	mov	r9,r11
8000694e:	fa ea 00 08 	ld.d	r10,sp[8]
80006952:	e0 a0 0f 9d 	rcall	8000888c <__avr32_f64_sub>
80006956:	fa eb 00 08 	st.d	sp[8],r10
8000695a:	41 68       	lddsp	r8,sp[0x58]
8000695c:	2d 08       	sub	r8,-48
8000695e:	0a c8       	st.b	r5++,r8
80006960:	41 3c       	lddsp	r12,sp[0x4c]
80006962:	18 35       	cp.w	r5,r12
80006964:	c2 81       	brne	800069b4 <_dtoa_r+0x61c>
80006966:	30 08       	mov	r8,0
80006968:	fc 19 3f e0 	movh	r9,0x3fe0
8000696c:	fa ea 00 28 	ld.d	r10,sp[40]
80006970:	e0 a0 10 5c 	rcall	80008a28 <__avr32_f64_add>
80006974:	40 85       	lddsp	r5,sp[0x20]
80006976:	fa e8 00 08 	ld.d	r8,sp[8]
8000697a:	08 05       	add	r5,r4
8000697c:	e0 a0 11 3a 	rcall	80008bf0 <__avr32_f64_cmp_lt>
80006980:	e0 81 00 99 	brne	80006ab2 <_dtoa_r+0x71a>
80006984:	fa e8 00 28 	ld.d	r8,sp[40]
80006988:	30 0a       	mov	r10,0
8000698a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000698e:	e0 a0 0f 7f 	rcall	8000888c <__avr32_f64_sub>
80006992:	14 98       	mov	r8,r10
80006994:	16 99       	mov	r9,r11
80006996:	fa ea 00 08 	ld.d	r10,sp[8]
8000699a:	e0 a0 11 2b 	rcall	80008bf0 <__avr32_f64_cmp_lt>
8000699e:	c1 30       	breq	800069c4 <_dtoa_r+0x62c>
800069a0:	33 09       	mov	r9,48
800069a2:	0a 98       	mov	r8,r5
800069a4:	11 7a       	ld.ub	r10,--r8
800069a6:	f2 0a 18 00 	cp.b	r10,r9
800069aa:	e0 81 02 d1 	brne	80006f4c <_dtoa_r+0xbb4>
800069ae:	10 95       	mov	r5,r8
800069b0:	cf 9b       	rjmp	800069a2 <_dtoa_r+0x60a>
800069b2:	d7 03       	nop
800069b4:	30 08       	mov	r8,0
800069b6:	fc 19 40 24 	movh	r9,0x4024
800069ba:	fe b0 e8 37 	rcall	80003a28 <__avr32_f64_mul>
800069be:	fa eb 00 08 	st.d	sp[8],r10
800069c2:	cb db       	rjmp	8000693c <_dtoa_r+0x5a4>
800069c4:	fa ea 00 3c 	ld.d	r10,sp[60]
800069c8:	fa eb 00 08 	st.d	sp[8],r10
800069cc:	58 e6       	cp.w	r6,14
800069ce:	5f ab       	srle	r11
800069d0:	41 8a       	lddsp	r10,sp[0x60]
800069d2:	30 08       	mov	r8,0
800069d4:	f4 09 11 ff 	rsub	r9,r10,-1
800069d8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800069dc:	f0 09 18 00 	cp.b	r9,r8
800069e0:	e0 80 00 82 	breq	80006ae4 <_dtoa_r+0x74c>
800069e4:	40 ea       	lddsp	r10,sp[0x38]
800069e6:	58 01       	cp.w	r1,0
800069e8:	5f a9       	srle	r9
800069ea:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800069ee:	fe ca c9 a6 	sub	r10,pc,-13914
800069f2:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800069f6:	fa e5 00 10 	st.d	sp[16],r4
800069fa:	f0 09 18 00 	cp.b	r9,r8
800069fe:	c1 40       	breq	80006a26 <_dtoa_r+0x68e>
80006a00:	58 01       	cp.w	r1,0
80006a02:	e0 81 01 77 	brne	80006cf0 <_dtoa_r+0x958>
80006a06:	30 08       	mov	r8,0
80006a08:	fc 19 40 14 	movh	r9,0x4014
80006a0c:	08 9a       	mov	r10,r4
80006a0e:	0a 9b       	mov	r11,r5
80006a10:	fe b0 e8 0c 	rcall	80003a28 <__avr32_f64_mul>
80006a14:	fa e8 00 08 	ld.d	r8,sp[8]
80006a18:	e0 a0 10 b8 	rcall	80008b88 <__avr32_f64_cmp_ge>
80006a1c:	e0 81 01 6a 	brne	80006cf0 <_dtoa_r+0x958>
80006a20:	02 92       	mov	r2,r1
80006a22:	e0 8f 01 72 	bral	80006d06 <_dtoa_r+0x96e>
80006a26:	40 85       	lddsp	r5,sp[0x20]
80006a28:	30 14       	mov	r4,1
80006a2a:	fa e8 00 10 	ld.d	r8,sp[16]
80006a2e:	fa ea 00 08 	ld.d	r10,sp[8]
80006a32:	e0 a0 11 13 	rcall	80008c58 <__avr32_f64_div>
80006a36:	e0 a0 10 83 	rcall	80008b3c <__avr32_f64_to_s32>
80006a3a:	18 92       	mov	r2,r12
80006a3c:	fe b0 e8 e4 	rcall	80003c04 <__avr32_s32_to_f64>
80006a40:	fa e8 00 10 	ld.d	r8,sp[16]
80006a44:	fe b0 e7 f2 	rcall	80003a28 <__avr32_f64_mul>
80006a48:	14 98       	mov	r8,r10
80006a4a:	16 99       	mov	r9,r11
80006a4c:	fa ea 00 08 	ld.d	r10,sp[8]
80006a50:	e0 a0 0f 1e 	rcall	8000888c <__avr32_f64_sub>
80006a54:	fa eb 00 08 	st.d	sp[8],r10
80006a58:	e4 c8 ff d0 	sub	r8,r2,-48
80006a5c:	0a c8       	st.b	r5++,r8
80006a5e:	fc 19 40 24 	movh	r9,0x4024
80006a62:	30 08       	mov	r8,0
80006a64:	02 34       	cp.w	r4,r1
80006a66:	c3 31       	brne	80006acc <_dtoa_r+0x734>
80006a68:	fa e8 00 08 	ld.d	r8,sp[8]
80006a6c:	e0 a0 0f de 	rcall	80008a28 <__avr32_f64_add>
80006a70:	16 91       	mov	r1,r11
80006a72:	14 90       	mov	r0,r10
80006a74:	14 98       	mov	r8,r10
80006a76:	02 99       	mov	r9,r1
80006a78:	fa ea 00 10 	ld.d	r10,sp[16]
80006a7c:	e0 a0 10 ba 	rcall	80008bf0 <__avr32_f64_cmp_lt>
80006a80:	c1 a1       	brne	80006ab4 <_dtoa_r+0x71c>
80006a82:	fa e8 00 10 	ld.d	r8,sp[16]
80006a86:	00 9a       	mov	r10,r0
80006a88:	02 9b       	mov	r11,r1
80006a8a:	e0 a0 10 6c 	rcall	80008b62 <__avr32_f64_cmp_eq>
80006a8e:	e0 80 02 5e 	breq	80006f4a <_dtoa_r+0xbb2>
80006a92:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006a96:	c0 f1       	brne	80006ab4 <_dtoa_r+0x71c>
80006a98:	e0 8f 02 59 	bral	80006f4a <_dtoa_r+0xbb2>
80006a9c:	40 8a       	lddsp	r10,sp[0x20]
80006a9e:	14 38       	cp.w	r8,r10
80006aa0:	c0 30       	breq	80006aa6 <_dtoa_r+0x70e>
80006aa2:	10 95       	mov	r5,r8
80006aa4:	c0 98       	rjmp	80006ab6 <_dtoa_r+0x71e>
80006aa6:	33 08       	mov	r8,48
80006aa8:	40 89       	lddsp	r9,sp[0x20]
80006aaa:	2f f6       	sub	r6,-1
80006aac:	b2 88       	st.b	r9[0x0],r8
80006aae:	40 88       	lddsp	r8,sp[0x20]
80006ab0:	c0 88       	rjmp	80006ac0 <_dtoa_r+0x728>
80006ab2:	40 66       	lddsp	r6,sp[0x18]
80006ab4:	33 99       	mov	r9,57
80006ab6:	0a 98       	mov	r8,r5
80006ab8:	11 7a       	ld.ub	r10,--r8
80006aba:	f2 0a 18 00 	cp.b	r10,r9
80006abe:	ce f0       	breq	80006a9c <_dtoa_r+0x704>
80006ac0:	50 66       	stdsp	sp[0x18],r6
80006ac2:	11 89       	ld.ub	r9,r8[0x0]
80006ac4:	2f f9       	sub	r9,-1
80006ac6:	b0 89       	st.b	r8[0x0],r9
80006ac8:	e0 8f 02 42 	bral	80006f4c <_dtoa_r+0xbb4>
80006acc:	fe b0 e7 ae 	rcall	80003a28 <__avr32_f64_mul>
80006ad0:	2f f4       	sub	r4,-1
80006ad2:	fa eb 00 08 	st.d	sp[8],r10
80006ad6:	30 08       	mov	r8,0
80006ad8:	30 09       	mov	r9,0
80006ada:	e0 a0 10 44 	rcall	80008b62 <__avr32_f64_cmp_eq>
80006ade:	ca 60       	breq	80006a2a <_dtoa_r+0x692>
80006ae0:	e0 8f 02 35 	bral	80006f4a <_dtoa_r+0xbb2>
80006ae4:	40 d8       	lddsp	r8,sp[0x34]
80006ae6:	58 08       	cp.w	r8,0
80006ae8:	c0 51       	brne	80006af2 <_dtoa_r+0x75a>
80006aea:	04 98       	mov	r8,r2
80006aec:	00 95       	mov	r5,r0
80006aee:	40 d4       	lddsp	r4,sp[0x34]
80006af0:	c3 78       	rjmp	80006b5e <_dtoa_r+0x7c6>
80006af2:	40 c5       	lddsp	r5,sp[0x30]
80006af4:	58 15       	cp.w	r5,1
80006af6:	e0 89 00 0f 	brgt	80006b14 <_dtoa_r+0x77c>
80006afa:	41 74       	lddsp	r4,sp[0x5c]
80006afc:	58 04       	cp.w	r4,0
80006afe:	c0 40       	breq	80006b06 <_dtoa_r+0x76e>
80006b00:	f4 c9 fb cd 	sub	r9,r10,-1075
80006b04:	c0 48       	rjmp	80006b0c <_dtoa_r+0x774>
80006b06:	41 99       	lddsp	r9,sp[0x64]
80006b08:	f2 09 11 36 	rsub	r9,r9,54
80006b0c:	04 98       	mov	r8,r2
80006b0e:	00 95       	mov	r5,r0
80006b10:	c1 c8       	rjmp	80006b48 <_dtoa_r+0x7b0>
80006b12:	d7 03       	nop
80006b14:	e2 c8 00 01 	sub	r8,r1,1
80006b18:	58 01       	cp.w	r1,0
80006b1a:	e0 05 17 40 	movge	r5,r0
80006b1e:	e2 09 17 40 	movge	r9,r1
80006b22:	e1 d1 e5 15 	sublt	r5,r0,r1
80006b26:	f9 b9 05 00 	movlt	r9,0
80006b2a:	10 32       	cp.w	r2,r8
80006b2c:	e5 d8 e4 18 	subge	r8,r2,r8
80006b30:	f1 d2 e5 18 	sublt	r8,r8,r2
80006b34:	e5 d8 e5 02 	addlt	r2,r2,r8
80006b38:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006b3c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006b40:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006b44:	f9 b8 05 00 	movlt	r8,0
80006b48:	40 4b       	lddsp	r11,sp[0x10]
80006b4a:	12 0b       	add	r11,r9
80006b4c:	50 08       	stdsp	sp[0x0],r8
80006b4e:	50 4b       	stdsp	sp[0x10],r11
80006b50:	12 00       	add	r0,r9
80006b52:	30 1b       	mov	r11,1
80006b54:	0e 9c       	mov	r12,r7
80006b56:	e0 a0 0a c9 	rcall	800080e8 <__i2b>
80006b5a:	40 08       	lddsp	r8,sp[0x0]
80006b5c:	18 94       	mov	r4,r12
80006b5e:	40 4a       	lddsp	r10,sp[0x10]
80006b60:	58 05       	cp.w	r5,0
80006b62:	5f 99       	srgt	r9
80006b64:	58 0a       	cp.w	r10,0
80006b66:	5f 9a       	srgt	r10
80006b68:	f5 e9 00 09 	and	r9,r10,r9
80006b6c:	c0 80       	breq	80006b7c <_dtoa_r+0x7e4>
80006b6e:	40 4c       	lddsp	r12,sp[0x10]
80006b70:	f8 05 0d 49 	min	r9,r12,r5
80006b74:	12 1c       	sub	r12,r9
80006b76:	12 10       	sub	r0,r9
80006b78:	50 4c       	stdsp	sp[0x10],r12
80006b7a:	12 15       	sub	r5,r9
80006b7c:	58 02       	cp.w	r2,0
80006b7e:	e0 8a 00 27 	brle	80006bcc <_dtoa_r+0x834>
80006b82:	40 db       	lddsp	r11,sp[0x34]
80006b84:	58 0b       	cp.w	r11,0
80006b86:	c1 d0       	breq	80006bc0 <_dtoa_r+0x828>
80006b88:	58 08       	cp.w	r8,0
80006b8a:	e0 8a 00 17 	brle	80006bb8 <_dtoa_r+0x820>
80006b8e:	10 9a       	mov	r10,r8
80006b90:	50 08       	stdsp	sp[0x0],r8
80006b92:	08 9b       	mov	r11,r4
80006b94:	0e 9c       	mov	r12,r7
80006b96:	e0 a0 0a ef 	rcall	80008174 <__pow5mult>
80006b9a:	06 9a       	mov	r10,r3
80006b9c:	18 9b       	mov	r11,r12
80006b9e:	18 94       	mov	r4,r12
80006ba0:	0e 9c       	mov	r12,r7
80006ba2:	e0 a0 0a 23 	rcall	80007fe8 <__multiply>
80006ba6:	18 99       	mov	r9,r12
80006ba8:	06 9b       	mov	r11,r3
80006baa:	50 19       	stdsp	sp[0x4],r9
80006bac:	0e 9c       	mov	r12,r7
80006bae:	e0 a0 08 cf 	rcall	80007d4c <_Bfree>
80006bb2:	40 19       	lddsp	r9,sp[0x4]
80006bb4:	40 08       	lddsp	r8,sp[0x0]
80006bb6:	12 93       	mov	r3,r9
80006bb8:	e4 08 01 0a 	sub	r10,r2,r8
80006bbc:	c0 80       	breq	80006bcc <_dtoa_r+0x834>
80006bbe:	c0 28       	rjmp	80006bc2 <_dtoa_r+0x82a>
80006bc0:	04 9a       	mov	r10,r2
80006bc2:	06 9b       	mov	r11,r3
80006bc4:	0e 9c       	mov	r12,r7
80006bc6:	e0 a0 0a d7 	rcall	80008174 <__pow5mult>
80006bca:	18 93       	mov	r3,r12
80006bcc:	30 1b       	mov	r11,1
80006bce:	0e 9c       	mov	r12,r7
80006bd0:	e0 a0 0a 8c 	rcall	800080e8 <__i2b>
80006bd4:	41 1a       	lddsp	r10,sp[0x44]
80006bd6:	18 92       	mov	r2,r12
80006bd8:	58 0a       	cp.w	r10,0
80006bda:	e0 8a 00 07 	brle	80006be8 <_dtoa_r+0x850>
80006bde:	18 9b       	mov	r11,r12
80006be0:	0e 9c       	mov	r12,r7
80006be2:	e0 a0 0a c9 	rcall	80008174 <__pow5mult>
80006be6:	18 92       	mov	r2,r12
80006be8:	40 c9       	lddsp	r9,sp[0x30]
80006bea:	58 19       	cp.w	r9,1
80006bec:	e0 89 00 14 	brgt	80006c14 <_dtoa_r+0x87c>
80006bf0:	40 38       	lddsp	r8,sp[0xc]
80006bf2:	58 08       	cp.w	r8,0
80006bf4:	c1 01       	brne	80006c14 <_dtoa_r+0x87c>
80006bf6:	40 29       	lddsp	r9,sp[0x8]
80006bf8:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006bfc:	c0 c1       	brne	80006c14 <_dtoa_r+0x87c>
80006bfe:	12 98       	mov	r8,r9
80006c00:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006c04:	c0 80       	breq	80006c14 <_dtoa_r+0x87c>
80006c06:	40 4c       	lddsp	r12,sp[0x10]
80006c08:	30 1b       	mov	r11,1
80006c0a:	2f fc       	sub	r12,-1
80006c0c:	2f f0       	sub	r0,-1
80006c0e:	50 4c       	stdsp	sp[0x10],r12
80006c10:	50 6b       	stdsp	sp[0x18],r11
80006c12:	c0 38       	rjmp	80006c18 <_dtoa_r+0x880>
80006c14:	30 0a       	mov	r10,0
80006c16:	50 6a       	stdsp	sp[0x18],r10
80006c18:	41 19       	lddsp	r9,sp[0x44]
80006c1a:	58 09       	cp.w	r9,0
80006c1c:	c0 31       	brne	80006c22 <_dtoa_r+0x88a>
80006c1e:	30 1c       	mov	r12,1
80006c20:	c0 98       	rjmp	80006c32 <_dtoa_r+0x89a>
80006c22:	64 48       	ld.w	r8,r2[0x10]
80006c24:	2f c8       	sub	r8,-4
80006c26:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006c2a:	e0 a0 08 01 	rcall	80007c2c <__hi0bits>
80006c2e:	f8 0c 11 20 	rsub	r12,r12,32
80006c32:	40 4b       	lddsp	r11,sp[0x10]
80006c34:	f8 0b 00 08 	add	r8,r12,r11
80006c38:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006c3c:	c0 c0       	breq	80006c54 <_dtoa_r+0x8bc>
80006c3e:	f0 08 11 20 	rsub	r8,r8,32
80006c42:	58 48       	cp.w	r8,4
80006c44:	e0 8a 00 06 	brle	80006c50 <_dtoa_r+0x8b8>
80006c48:	20 48       	sub	r8,4
80006c4a:	10 0b       	add	r11,r8
80006c4c:	50 4b       	stdsp	sp[0x10],r11
80006c4e:	c0 78       	rjmp	80006c5c <_dtoa_r+0x8c4>
80006c50:	58 48       	cp.w	r8,4
80006c52:	c0 70       	breq	80006c60 <_dtoa_r+0x8c8>
80006c54:	40 4a       	lddsp	r10,sp[0x10]
80006c56:	2e 48       	sub	r8,-28
80006c58:	10 0a       	add	r10,r8
80006c5a:	50 4a       	stdsp	sp[0x10],r10
80006c5c:	10 00       	add	r0,r8
80006c5e:	10 05       	add	r5,r8
80006c60:	58 00       	cp.w	r0,0
80006c62:	e0 8a 00 08 	brle	80006c72 <_dtoa_r+0x8da>
80006c66:	06 9b       	mov	r11,r3
80006c68:	00 9a       	mov	r10,r0
80006c6a:	0e 9c       	mov	r12,r7
80006c6c:	e0 a0 09 7a 	rcall	80007f60 <__lshift>
80006c70:	18 93       	mov	r3,r12
80006c72:	40 49       	lddsp	r9,sp[0x10]
80006c74:	58 09       	cp.w	r9,0
80006c76:	e0 8a 00 08 	brle	80006c86 <_dtoa_r+0x8ee>
80006c7a:	04 9b       	mov	r11,r2
80006c7c:	12 9a       	mov	r10,r9
80006c7e:	0e 9c       	mov	r12,r7
80006c80:	e0 a0 09 70 	rcall	80007f60 <__lshift>
80006c84:	18 92       	mov	r2,r12
80006c86:	41 48       	lddsp	r8,sp[0x50]
80006c88:	58 08       	cp.w	r8,0
80006c8a:	c1 b0       	breq	80006cc0 <_dtoa_r+0x928>
80006c8c:	04 9b       	mov	r11,r2
80006c8e:	06 9c       	mov	r12,r3
80006c90:	e0 a0 08 45 	rcall	80007d1a <__mcmp>
80006c94:	c1 64       	brge	80006cc0 <_dtoa_r+0x928>
80006c96:	06 9b       	mov	r11,r3
80006c98:	30 09       	mov	r9,0
80006c9a:	30 aa       	mov	r10,10
80006c9c:	0e 9c       	mov	r12,r7
80006c9e:	e0 a0 0a 2d 	rcall	800080f8 <__multadd>
80006ca2:	20 16       	sub	r6,1
80006ca4:	18 93       	mov	r3,r12
80006ca6:	40 dc       	lddsp	r12,sp[0x34]
80006ca8:	58 0c       	cp.w	r12,0
80006caa:	c0 31       	brne	80006cb0 <_dtoa_r+0x918>
80006cac:	40 91       	lddsp	r1,sp[0x24]
80006cae:	c0 98       	rjmp	80006cc0 <_dtoa_r+0x928>
80006cb0:	08 9b       	mov	r11,r4
80006cb2:	40 91       	lddsp	r1,sp[0x24]
80006cb4:	30 09       	mov	r9,0
80006cb6:	30 aa       	mov	r10,10
80006cb8:	0e 9c       	mov	r12,r7
80006cba:	e0 a0 0a 1f 	rcall	800080f8 <__multadd>
80006cbe:	18 94       	mov	r4,r12
80006cc0:	58 01       	cp.w	r1,0
80006cc2:	5f a9       	srle	r9
80006cc4:	40 cb       	lddsp	r11,sp[0x30]
80006cc6:	58 2b       	cp.w	r11,2
80006cc8:	5f 98       	srgt	r8
80006cca:	f3 e8 00 08 	and	r8,r9,r8
80006cce:	c2 50       	breq	80006d18 <_dtoa_r+0x980>
80006cd0:	58 01       	cp.w	r1,0
80006cd2:	c1 11       	brne	80006cf4 <_dtoa_r+0x95c>
80006cd4:	04 9b       	mov	r11,r2
80006cd6:	02 99       	mov	r9,r1
80006cd8:	30 5a       	mov	r10,5
80006cda:	0e 9c       	mov	r12,r7
80006cdc:	e0 a0 0a 0e 	rcall	800080f8 <__multadd>
80006ce0:	18 92       	mov	r2,r12
80006ce2:	18 9b       	mov	r11,r12
80006ce4:	06 9c       	mov	r12,r3
80006ce6:	e0 a0 08 1a 	rcall	80007d1a <__mcmp>
80006cea:	e0 89 00 0f 	brgt	80006d08 <_dtoa_r+0x970>
80006cee:	c0 38       	rjmp	80006cf4 <_dtoa_r+0x95c>
80006cf0:	30 02       	mov	r2,0
80006cf2:	04 94       	mov	r4,r2
80006cf4:	40 ea       	lddsp	r10,sp[0x38]
80006cf6:	30 09       	mov	r9,0
80006cf8:	5c da       	com	r10
80006cfa:	40 85       	lddsp	r5,sp[0x20]
80006cfc:	50 6a       	stdsp	sp[0x18],r10
80006cfe:	50 49       	stdsp	sp[0x10],r9
80006d00:	c0 f9       	rjmp	80006f1e <_dtoa_r+0xb86>
80006d02:	08 92       	mov	r2,r4
80006d04:	40 66       	lddsp	r6,sp[0x18]
80006d06:	04 94       	mov	r4,r2
80006d08:	2f f6       	sub	r6,-1
80006d0a:	50 66       	stdsp	sp[0x18],r6
80006d0c:	33 18       	mov	r8,49
80006d0e:	40 85       	lddsp	r5,sp[0x20]
80006d10:	0a c8       	st.b	r5++,r8
80006d12:	30 08       	mov	r8,0
80006d14:	50 48       	stdsp	sp[0x10],r8
80006d16:	c0 49       	rjmp	80006f1e <_dtoa_r+0xb86>
80006d18:	40 dc       	lddsp	r12,sp[0x34]
80006d1a:	58 0c       	cp.w	r12,0
80006d1c:	e0 80 00 b5 	breq	80006e86 <_dtoa_r+0xaee>
80006d20:	58 05       	cp.w	r5,0
80006d22:	e0 8a 00 08 	brle	80006d32 <_dtoa_r+0x99a>
80006d26:	08 9b       	mov	r11,r4
80006d28:	0a 9a       	mov	r10,r5
80006d2a:	0e 9c       	mov	r12,r7
80006d2c:	e0 a0 09 1a 	rcall	80007f60 <__lshift>
80006d30:	18 94       	mov	r4,r12
80006d32:	40 6b       	lddsp	r11,sp[0x18]
80006d34:	58 0b       	cp.w	r11,0
80006d36:	c0 31       	brne	80006d3c <_dtoa_r+0x9a4>
80006d38:	08 9c       	mov	r12,r4
80006d3a:	c1 38       	rjmp	80006d60 <_dtoa_r+0x9c8>
80006d3c:	68 1b       	ld.w	r11,r4[0x4]
80006d3e:	0e 9c       	mov	r12,r7
80006d40:	e0 a0 08 20 	rcall	80007d80 <_Balloc>
80006d44:	68 4a       	ld.w	r10,r4[0x10]
80006d46:	18 95       	mov	r5,r12
80006d48:	e8 cb ff f4 	sub	r11,r4,-12
80006d4c:	2f ea       	sub	r10,-2
80006d4e:	2f 4c       	sub	r12,-12
80006d50:	a3 6a       	lsl	r10,0x2
80006d52:	fe b0 e8 3e 	rcall	80003dce <memcpy>
80006d56:	0a 9b       	mov	r11,r5
80006d58:	30 1a       	mov	r10,1
80006d5a:	0e 9c       	mov	r12,r7
80006d5c:	e0 a0 09 02 	rcall	80007f60 <__lshift>
80006d60:	50 44       	stdsp	sp[0x10],r4
80006d62:	40 3a       	lddsp	r10,sp[0xc]
80006d64:	30 19       	mov	r9,1
80006d66:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006d6a:	18 94       	mov	r4,r12
80006d6c:	50 da       	stdsp	sp[0x34],r10
80006d6e:	40 85       	lddsp	r5,sp[0x20]
80006d70:	50 99       	stdsp	sp[0x24],r9
80006d72:	50 26       	stdsp	sp[0x8],r6
80006d74:	50 e1       	stdsp	sp[0x38],r1
80006d76:	04 9b       	mov	r11,r2
80006d78:	06 9c       	mov	r12,r3
80006d7a:	fe b0 fa 7f 	rcall	80006278 <quorem>
80006d7e:	40 4b       	lddsp	r11,sp[0x10]
80006d80:	f8 c0 ff d0 	sub	r0,r12,-48
80006d84:	06 9c       	mov	r12,r3
80006d86:	e0 a0 07 ca 	rcall	80007d1a <__mcmp>
80006d8a:	08 9a       	mov	r10,r4
80006d8c:	50 6c       	stdsp	sp[0x18],r12
80006d8e:	04 9b       	mov	r11,r2
80006d90:	0e 9c       	mov	r12,r7
80006d92:	e0 a0 08 7f 	rcall	80007e90 <__mdiff>
80006d96:	18 91       	mov	r1,r12
80006d98:	78 38       	ld.w	r8,r12[0xc]
80006d9a:	58 08       	cp.w	r8,0
80006d9c:	c0 30       	breq	80006da2 <_dtoa_r+0xa0a>
80006d9e:	30 16       	mov	r6,1
80006da0:	c0 68       	rjmp	80006dac <_dtoa_r+0xa14>
80006da2:	18 9b       	mov	r11,r12
80006da4:	06 9c       	mov	r12,r3
80006da6:	e0 a0 07 ba 	rcall	80007d1a <__mcmp>
80006daa:	18 96       	mov	r6,r12
80006dac:	0e 9c       	mov	r12,r7
80006dae:	02 9b       	mov	r11,r1
80006db0:	e0 a0 07 ce 	rcall	80007d4c <_Bfree>
80006db4:	40 cc       	lddsp	r12,sp[0x30]
80006db6:	ed ec 10 08 	or	r8,r6,r12
80006dba:	c0 d1       	brne	80006dd4 <_dtoa_r+0xa3c>
80006dbc:	40 db       	lddsp	r11,sp[0x34]
80006dbe:	58 0b       	cp.w	r11,0
80006dc0:	c0 a1       	brne	80006dd4 <_dtoa_r+0xa3c>
80006dc2:	40 26       	lddsp	r6,sp[0x8]
80006dc4:	e0 40 00 39 	cp.w	r0,57
80006dc8:	c3 00       	breq	80006e28 <_dtoa_r+0xa90>
80006dca:	40 6a       	lddsp	r10,sp[0x18]
80006dcc:	58 0a       	cp.w	r10,0
80006dce:	e0 89 00 24 	brgt	80006e16 <_dtoa_r+0xa7e>
80006dd2:	c2 f8       	rjmp	80006e30 <_dtoa_r+0xa98>
80006dd4:	40 69       	lddsp	r9,sp[0x18]
80006dd6:	58 09       	cp.w	r9,0
80006dd8:	c0 85       	brlt	80006de8 <_dtoa_r+0xa50>
80006dda:	12 98       	mov	r8,r9
80006ddc:	40 cc       	lddsp	r12,sp[0x30]
80006dde:	18 48       	or	r8,r12
80006de0:	c1 d1       	brne	80006e1a <_dtoa_r+0xa82>
80006de2:	40 db       	lddsp	r11,sp[0x34]
80006de4:	58 0b       	cp.w	r11,0
80006de6:	c1 a1       	brne	80006e1a <_dtoa_r+0xa82>
80006de8:	0c 99       	mov	r9,r6
80006dea:	40 26       	lddsp	r6,sp[0x8]
80006dec:	58 09       	cp.w	r9,0
80006dee:	e0 8a 00 21 	brle	80006e30 <_dtoa_r+0xa98>
80006df2:	06 9b       	mov	r11,r3
80006df4:	30 1a       	mov	r10,1
80006df6:	0e 9c       	mov	r12,r7
80006df8:	e0 a0 08 b4 	rcall	80007f60 <__lshift>
80006dfc:	04 9b       	mov	r11,r2
80006dfe:	18 93       	mov	r3,r12
80006e00:	e0 a0 07 8d 	rcall	80007d1a <__mcmp>
80006e04:	e0 89 00 06 	brgt	80006e10 <_dtoa_r+0xa78>
80006e08:	c1 41       	brne	80006e30 <_dtoa_r+0xa98>
80006e0a:	ed b0 00 00 	bld	r0,0x0
80006e0e:	c1 11       	brne	80006e30 <_dtoa_r+0xa98>
80006e10:	e0 40 00 39 	cp.w	r0,57
80006e14:	c0 a0       	breq	80006e28 <_dtoa_r+0xa90>
80006e16:	2f f0       	sub	r0,-1
80006e18:	c0 c8       	rjmp	80006e30 <_dtoa_r+0xa98>
80006e1a:	58 06       	cp.w	r6,0
80006e1c:	e0 8a 00 0c 	brle	80006e34 <_dtoa_r+0xa9c>
80006e20:	40 26       	lddsp	r6,sp[0x8]
80006e22:	e0 40 00 39 	cp.w	r0,57
80006e26:	c0 41       	brne	80006e2e <_dtoa_r+0xa96>
80006e28:	33 98       	mov	r8,57
80006e2a:	0a c8       	st.b	r5++,r8
80006e2c:	c6 78       	rjmp	80006efa <_dtoa_r+0xb62>
80006e2e:	2f f0       	sub	r0,-1
80006e30:	0a c0       	st.b	r5++,r0
80006e32:	c7 58       	rjmp	80006f1c <_dtoa_r+0xb84>
80006e34:	0a c0       	st.b	r5++,r0
80006e36:	40 9a       	lddsp	r10,sp[0x24]
80006e38:	40 e9       	lddsp	r9,sp[0x38]
80006e3a:	12 3a       	cp.w	r10,r9
80006e3c:	c4 30       	breq	80006ec2 <_dtoa_r+0xb2a>
80006e3e:	06 9b       	mov	r11,r3
80006e40:	30 09       	mov	r9,0
80006e42:	30 aa       	mov	r10,10
80006e44:	0e 9c       	mov	r12,r7
80006e46:	e0 a0 09 59 	rcall	800080f8 <__multadd>
80006e4a:	40 48       	lddsp	r8,sp[0x10]
80006e4c:	18 93       	mov	r3,r12
80006e4e:	08 38       	cp.w	r8,r4
80006e50:	c0 91       	brne	80006e62 <_dtoa_r+0xaca>
80006e52:	10 9b       	mov	r11,r8
80006e54:	30 09       	mov	r9,0
80006e56:	30 aa       	mov	r10,10
80006e58:	0e 9c       	mov	r12,r7
80006e5a:	e0 a0 09 4f 	rcall	800080f8 <__multadd>
80006e5e:	50 4c       	stdsp	sp[0x10],r12
80006e60:	c0 e8       	rjmp	80006e7c <_dtoa_r+0xae4>
80006e62:	40 4b       	lddsp	r11,sp[0x10]
80006e64:	30 09       	mov	r9,0
80006e66:	30 aa       	mov	r10,10
80006e68:	0e 9c       	mov	r12,r7
80006e6a:	e0 a0 09 47 	rcall	800080f8 <__multadd>
80006e6e:	08 9b       	mov	r11,r4
80006e70:	50 4c       	stdsp	sp[0x10],r12
80006e72:	30 09       	mov	r9,0
80006e74:	30 aa       	mov	r10,10
80006e76:	0e 9c       	mov	r12,r7
80006e78:	e0 a0 09 40 	rcall	800080f8 <__multadd>
80006e7c:	18 94       	mov	r4,r12
80006e7e:	40 9c       	lddsp	r12,sp[0x24]
80006e80:	2f fc       	sub	r12,-1
80006e82:	50 9c       	stdsp	sp[0x24],r12
80006e84:	c7 9b       	rjmp	80006d76 <_dtoa_r+0x9de>
80006e86:	30 18       	mov	r8,1
80006e88:	06 90       	mov	r0,r3
80006e8a:	40 85       	lddsp	r5,sp[0x20]
80006e8c:	08 93       	mov	r3,r4
80006e8e:	0c 94       	mov	r4,r6
80006e90:	10 96       	mov	r6,r8
80006e92:	04 9b       	mov	r11,r2
80006e94:	00 9c       	mov	r12,r0
80006e96:	fe b0 f9 f1 	rcall	80006278 <quorem>
80006e9a:	2d 0c       	sub	r12,-48
80006e9c:	0a cc       	st.b	r5++,r12
80006e9e:	02 36       	cp.w	r6,r1
80006ea0:	c0 a4       	brge	80006eb4 <_dtoa_r+0xb1c>
80006ea2:	00 9b       	mov	r11,r0
80006ea4:	30 09       	mov	r9,0
80006ea6:	30 aa       	mov	r10,10
80006ea8:	0e 9c       	mov	r12,r7
80006eaa:	2f f6       	sub	r6,-1
80006eac:	e0 a0 09 26 	rcall	800080f8 <__multadd>
80006eb0:	18 90       	mov	r0,r12
80006eb2:	cf 0b       	rjmp	80006e92 <_dtoa_r+0xafa>
80006eb4:	08 96       	mov	r6,r4
80006eb6:	30 0b       	mov	r11,0
80006eb8:	06 94       	mov	r4,r3
80006eba:	50 4b       	stdsp	sp[0x10],r11
80006ebc:	00 93       	mov	r3,r0
80006ebe:	18 90       	mov	r0,r12
80006ec0:	c0 28       	rjmp	80006ec4 <_dtoa_r+0xb2c>
80006ec2:	40 26       	lddsp	r6,sp[0x8]
80006ec4:	06 9b       	mov	r11,r3
80006ec6:	30 1a       	mov	r10,1
80006ec8:	0e 9c       	mov	r12,r7
80006eca:	e0 a0 08 4b 	rcall	80007f60 <__lshift>
80006ece:	04 9b       	mov	r11,r2
80006ed0:	18 93       	mov	r3,r12
80006ed2:	e0 a0 07 24 	rcall	80007d1a <__mcmp>
80006ed6:	e0 89 00 12 	brgt	80006efa <_dtoa_r+0xb62>
80006eda:	c1 b1       	brne	80006f10 <_dtoa_r+0xb78>
80006edc:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006ee0:	c0 d1       	brne	80006efa <_dtoa_r+0xb62>
80006ee2:	c1 78       	rjmp	80006f10 <_dtoa_r+0xb78>
80006ee4:	40 89       	lddsp	r9,sp[0x20]
80006ee6:	12 38       	cp.w	r8,r9
80006ee8:	c0 30       	breq	80006eee <_dtoa_r+0xb56>
80006eea:	10 95       	mov	r5,r8
80006eec:	c0 88       	rjmp	80006efc <_dtoa_r+0xb64>
80006eee:	2f f6       	sub	r6,-1
80006ef0:	50 66       	stdsp	sp[0x18],r6
80006ef2:	33 18       	mov	r8,49
80006ef4:	40 8c       	lddsp	r12,sp[0x20]
80006ef6:	b8 88       	st.b	r12[0x0],r8
80006ef8:	c1 38       	rjmp	80006f1e <_dtoa_r+0xb86>
80006efa:	33 9a       	mov	r10,57
80006efc:	0a 98       	mov	r8,r5
80006efe:	11 79       	ld.ub	r9,--r8
80006f00:	f4 09 18 00 	cp.b	r9,r10
80006f04:	cf 00       	breq	80006ee4 <_dtoa_r+0xb4c>
80006f06:	2f f9       	sub	r9,-1
80006f08:	b0 89       	st.b	r8[0x0],r9
80006f0a:	c0 98       	rjmp	80006f1c <_dtoa_r+0xb84>
80006f0c:	10 95       	mov	r5,r8
80006f0e:	c0 28       	rjmp	80006f12 <_dtoa_r+0xb7a>
80006f10:	33 09       	mov	r9,48
80006f12:	0a 98       	mov	r8,r5
80006f14:	11 7a       	ld.ub	r10,--r8
80006f16:	f2 0a 18 00 	cp.b	r10,r9
80006f1a:	cf 90       	breq	80006f0c <_dtoa_r+0xb74>
80006f1c:	50 66       	stdsp	sp[0x18],r6
80006f1e:	04 9b       	mov	r11,r2
80006f20:	0e 9c       	mov	r12,r7
80006f22:	e0 a0 07 15 	rcall	80007d4c <_Bfree>
80006f26:	58 04       	cp.w	r4,0
80006f28:	c1 20       	breq	80006f4c <_dtoa_r+0xbb4>
80006f2a:	40 4b       	lddsp	r11,sp[0x10]
80006f2c:	08 3b       	cp.w	r11,r4
80006f2e:	5f 19       	srne	r9
80006f30:	58 0b       	cp.w	r11,0
80006f32:	5f 18       	srne	r8
80006f34:	f3 e8 00 08 	and	r8,r9,r8
80006f38:	c0 40       	breq	80006f40 <_dtoa_r+0xba8>
80006f3a:	0e 9c       	mov	r12,r7
80006f3c:	e0 a0 07 08 	rcall	80007d4c <_Bfree>
80006f40:	08 9b       	mov	r11,r4
80006f42:	0e 9c       	mov	r12,r7
80006f44:	e0 a0 07 04 	rcall	80007d4c <_Bfree>
80006f48:	c0 28       	rjmp	80006f4c <_dtoa_r+0xbb4>
80006f4a:	50 66       	stdsp	sp[0x18],r6
80006f4c:	0e 9c       	mov	r12,r7
80006f4e:	06 9b       	mov	r11,r3
80006f50:	e0 a0 06 fe 	rcall	80007d4c <_Bfree>
80006f54:	30 08       	mov	r8,0
80006f56:	aa 88       	st.b	r5[0x0],r8
80006f58:	40 68       	lddsp	r8,sp[0x18]
80006f5a:	41 5a       	lddsp	r10,sp[0x54]
80006f5c:	2f f8       	sub	r8,-1
80006f5e:	41 29       	lddsp	r9,sp[0x48]
80006f60:	95 08       	st.w	r10[0x0],r8
80006f62:	40 8c       	lddsp	r12,sp[0x20]
80006f64:	58 09       	cp.w	r9,0
80006f66:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006f6a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006f6e:	2e 6d       	sub	sp,-104
80006f70:	d8 32       	popm	r0-r7,pc
80006f72:	d7 03       	nop

80006f74 <_fflush_r>:
80006f74:	d4 21       	pushm	r4-r7,lr
80006f76:	16 97       	mov	r7,r11
80006f78:	18 96       	mov	r6,r12
80006f7a:	76 48       	ld.w	r8,r11[0x10]
80006f7c:	58 08       	cp.w	r8,0
80006f7e:	c7 f0       	breq	8000707c <_fflush_r+0x108>
80006f80:	58 0c       	cp.w	r12,0
80006f82:	c0 50       	breq	80006f8c <_fflush_r+0x18>
80006f84:	78 68       	ld.w	r8,r12[0x18]
80006f86:	58 08       	cp.w	r8,0
80006f88:	c0 21       	brne	80006f8c <_fflush_r+0x18>
80006f8a:	cc dc       	rcall	80007124 <__sinit>
80006f8c:	fe c8 cf f8 	sub	r8,pc,-12296
80006f90:	10 37       	cp.w	r7,r8
80006f92:	c0 31       	brne	80006f98 <_fflush_r+0x24>
80006f94:	6c 07       	ld.w	r7,r6[0x0]
80006f96:	c0 c8       	rjmp	80006fae <_fflush_r+0x3a>
80006f98:	fe c8 cf e4 	sub	r8,pc,-12316
80006f9c:	10 37       	cp.w	r7,r8
80006f9e:	c0 31       	brne	80006fa4 <_fflush_r+0x30>
80006fa0:	6c 17       	ld.w	r7,r6[0x4]
80006fa2:	c0 68       	rjmp	80006fae <_fflush_r+0x3a>
80006fa4:	fe c8 cf d0 	sub	r8,pc,-12336
80006fa8:	10 37       	cp.w	r7,r8
80006faa:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006fae:	8e 6a       	ld.sh	r10,r7[0xc]
80006fb0:	14 98       	mov	r8,r10
80006fb2:	ed ba 00 03 	bld	r10,0x3
80006fb6:	c4 20       	breq	8000703a <_fflush_r+0xc6>
80006fb8:	ab ba       	sbr	r10,0xb
80006fba:	ae 6a       	st.h	r7[0xc],r10
80006fbc:	6e 18       	ld.w	r8,r7[0x4]
80006fbe:	58 08       	cp.w	r8,0
80006fc0:	e0 89 00 06 	brgt	80006fcc <_fflush_r+0x58>
80006fc4:	6f 08       	ld.w	r8,r7[0x40]
80006fc6:	58 08       	cp.w	r8,0
80006fc8:	e0 8a 00 5a 	brle	8000707c <_fflush_r+0x108>
80006fcc:	6e b8       	ld.w	r8,r7[0x2c]
80006fce:	58 08       	cp.w	r8,0
80006fd0:	c5 60       	breq	8000707c <_fflush_r+0x108>
80006fd2:	e2 1a 10 00 	andl	r10,0x1000,COH
80006fd6:	c0 30       	breq	80006fdc <_fflush_r+0x68>
80006fd8:	6f 55       	ld.w	r5,r7[0x54]
80006fda:	c0 f8       	rjmp	80006ff8 <_fflush_r+0x84>
80006fdc:	30 19       	mov	r9,1
80006fde:	6e 8b       	ld.w	r11,r7[0x20]
80006fe0:	0c 9c       	mov	r12,r6
80006fe2:	5d 18       	icall	r8
80006fe4:	18 95       	mov	r5,r12
80006fe6:	5b fc       	cp.w	r12,-1
80006fe8:	c0 81       	brne	80006ff8 <_fflush_r+0x84>
80006fea:	6c 38       	ld.w	r8,r6[0xc]
80006fec:	59 d8       	cp.w	r8,29
80006fee:	c4 70       	breq	8000707c <_fflush_r+0x108>
80006ff0:	8e 68       	ld.sh	r8,r7[0xc]
80006ff2:	a7 a8       	sbr	r8,0x6
80006ff4:	ae 68       	st.h	r7[0xc],r8
80006ff6:	d8 22       	popm	r4-r7,pc
80006ff8:	8e 68       	ld.sh	r8,r7[0xc]
80006ffa:	ed b8 00 02 	bld	r8,0x2
80006ffe:	c0 91       	brne	80007010 <_fflush_r+0x9c>
80007000:	6e 18       	ld.w	r8,r7[0x4]
80007002:	10 15       	sub	r5,r8
80007004:	6e d8       	ld.w	r8,r7[0x34]
80007006:	58 08       	cp.w	r8,0
80007008:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000700c:	eb d8 e1 15 	subne	r5,r5,r8
80007010:	6e b8       	ld.w	r8,r7[0x2c]
80007012:	0c 9c       	mov	r12,r6
80007014:	30 09       	mov	r9,0
80007016:	0a 9a       	mov	r10,r5
80007018:	6e 8b       	ld.w	r11,r7[0x20]
8000701a:	5d 18       	icall	r8
8000701c:	8e 68       	ld.sh	r8,r7[0xc]
8000701e:	0a 3c       	cp.w	r12,r5
80007020:	c2 61       	brne	8000706c <_fflush_r+0xf8>
80007022:	ab d8       	cbr	r8,0xb
80007024:	30 0c       	mov	r12,0
80007026:	6e 49       	ld.w	r9,r7[0x10]
80007028:	ae 68       	st.h	r7[0xc],r8
8000702a:	8f 1c       	st.w	r7[0x4],r12
8000702c:	8f 09       	st.w	r7[0x0],r9
8000702e:	ed b8 00 0c 	bld	r8,0xc
80007032:	c2 51       	brne	8000707c <_fflush_r+0x108>
80007034:	ef 45 00 54 	st.w	r7[84],r5
80007038:	d8 22       	popm	r4-r7,pc
8000703a:	6e 45       	ld.w	r5,r7[0x10]
8000703c:	58 05       	cp.w	r5,0
8000703e:	c1 f0       	breq	8000707c <_fflush_r+0x108>
80007040:	6e 04       	ld.w	r4,r7[0x0]
80007042:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80007046:	8f 05       	st.w	r7[0x0],r5
80007048:	f9 b8 01 00 	movne	r8,0
8000704c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007050:	0a 14       	sub	r4,r5
80007052:	8f 28       	st.w	r7[0x8],r8
80007054:	c1 18       	rjmp	80007076 <_fflush_r+0x102>
80007056:	08 99       	mov	r9,r4
80007058:	0a 9a       	mov	r10,r5
8000705a:	6e a8       	ld.w	r8,r7[0x28]
8000705c:	6e 8b       	ld.w	r11,r7[0x20]
8000705e:	0c 9c       	mov	r12,r6
80007060:	5d 18       	icall	r8
80007062:	18 14       	sub	r4,r12
80007064:	58 0c       	cp.w	r12,0
80007066:	e0 89 00 07 	brgt	80007074 <_fflush_r+0x100>
8000706a:	8e 68       	ld.sh	r8,r7[0xc]
8000706c:	a7 a8       	sbr	r8,0x6
8000706e:	3f fc       	mov	r12,-1
80007070:	ae 68       	st.h	r7[0xc],r8
80007072:	d8 22       	popm	r4-r7,pc
80007074:	18 05       	add	r5,r12
80007076:	58 04       	cp.w	r4,0
80007078:	fe 99 ff ef 	brgt	80007056 <_fflush_r+0xe2>
8000707c:	d8 2a       	popm	r4-r7,pc,r12=0
8000707e:	d7 03       	nop

80007080 <__sfp_lock_acquire>:
80007080:	5e fc       	retal	r12

80007082 <__sfp_lock_release>:
80007082:	5e fc       	retal	r12

80007084 <_cleanup_r>:
80007084:	d4 01       	pushm	lr
80007086:	fe cb e8 7a 	sub	r11,pc,-6022
8000708a:	e0 a0 02 fd 	rcall	80007684 <_fwalk>
8000708e:	d8 02       	popm	pc

80007090 <__sfmoreglue>:
80007090:	d4 21       	pushm	r4-r7,lr
80007092:	16 95       	mov	r5,r11
80007094:	f6 06 10 5c 	mul	r6,r11,92
80007098:	ec cb ff f4 	sub	r11,r6,-12
8000709c:	e0 a0 03 84 	rcall	800077a4 <_malloc_r>
800070a0:	18 97       	mov	r7,r12
800070a2:	c0 90       	breq	800070b4 <__sfmoreglue+0x24>
800070a4:	99 15       	st.w	r12[0x4],r5
800070a6:	30 0b       	mov	r11,0
800070a8:	2f 4c       	sub	r12,-12
800070aa:	0c 9a       	mov	r10,r6
800070ac:	8f 2c       	st.w	r7[0x8],r12
800070ae:	8f 0b       	st.w	r7[0x0],r11
800070b0:	fe b0 e7 33 	rcall	80003f16 <memset>
800070b4:	0e 9c       	mov	r12,r7
800070b6:	d8 22       	popm	r4-r7,pc

800070b8 <__sfp>:
800070b8:	d4 21       	pushm	r4-r7,lr
800070ba:	fe c8 d0 c2 	sub	r8,pc,-12094
800070be:	18 96       	mov	r6,r12
800070c0:	70 07       	ld.w	r7,r8[0x0]
800070c2:	6e 68       	ld.w	r8,r7[0x18]
800070c4:	58 08       	cp.w	r8,0
800070c6:	c0 31       	brne	800070cc <__sfp+0x14>
800070c8:	0e 9c       	mov	r12,r7
800070ca:	c2 dc       	rcall	80007124 <__sinit>
800070cc:	ee c7 ff 28 	sub	r7,r7,-216
800070d0:	30 05       	mov	r5,0
800070d2:	6e 2c       	ld.w	r12,r7[0x8]
800070d4:	6e 18       	ld.w	r8,r7[0x4]
800070d6:	c0 68       	rjmp	800070e2 <__sfp+0x2a>
800070d8:	98 69       	ld.sh	r9,r12[0xc]
800070da:	ea 09 19 00 	cp.h	r9,r5
800070de:	c1 10       	breq	80007100 <__sfp+0x48>
800070e0:	2a 4c       	sub	r12,-92
800070e2:	20 18       	sub	r8,1
800070e4:	cf a7       	brpl	800070d8 <__sfp+0x20>
800070e6:	6e 08       	ld.w	r8,r7[0x0]
800070e8:	58 08       	cp.w	r8,0
800070ea:	c0 61       	brne	800070f6 <__sfp+0x3e>
800070ec:	30 4b       	mov	r11,4
800070ee:	0c 9c       	mov	r12,r6
800070f0:	cd 0f       	rcall	80007090 <__sfmoreglue>
800070f2:	8f 0c       	st.w	r7[0x0],r12
800070f4:	c0 30       	breq	800070fa <__sfp+0x42>
800070f6:	6e 07       	ld.w	r7,r7[0x0]
800070f8:	ce db       	rjmp	800070d2 <__sfp+0x1a>
800070fa:	30 c8       	mov	r8,12
800070fc:	8d 38       	st.w	r6[0xc],r8
800070fe:	d8 22       	popm	r4-r7,pc
80007100:	30 08       	mov	r8,0
80007102:	f9 48 00 4c 	st.w	r12[76],r8
80007106:	99 08       	st.w	r12[0x0],r8
80007108:	99 28       	st.w	r12[0x8],r8
8000710a:	99 18       	st.w	r12[0x4],r8
8000710c:	99 48       	st.w	r12[0x10],r8
8000710e:	99 58       	st.w	r12[0x14],r8
80007110:	99 68       	st.w	r12[0x18],r8
80007112:	99 d8       	st.w	r12[0x34],r8
80007114:	99 e8       	st.w	r12[0x38],r8
80007116:	f9 48 00 48 	st.w	r12[72],r8
8000711a:	3f f8       	mov	r8,-1
8000711c:	b8 78       	st.h	r12[0xe],r8
8000711e:	30 18       	mov	r8,1
80007120:	b8 68       	st.h	r12[0xc],r8
80007122:	d8 22       	popm	r4-r7,pc

80007124 <__sinit>:
80007124:	d4 21       	pushm	r4-r7,lr
80007126:	18 96       	mov	r6,r12
80007128:	78 67       	ld.w	r7,r12[0x18]
8000712a:	58 07       	cp.w	r7,0
8000712c:	c4 91       	brne	800071be <__sinit+0x9a>
8000712e:	fe c8 00 aa 	sub	r8,pc,170
80007132:	30 15       	mov	r5,1
80007134:	99 a8       	st.w	r12[0x28],r8
80007136:	f9 47 00 d8 	st.w	r12[216],r7
8000713a:	f9 47 00 dc 	st.w	r12[220],r7
8000713e:	f9 47 00 e0 	st.w	r12[224],r7
80007142:	99 65       	st.w	r12[0x18],r5
80007144:	cb af       	rcall	800070b8 <__sfp>
80007146:	8d 0c       	st.w	r6[0x0],r12
80007148:	0c 9c       	mov	r12,r6
8000714a:	cb 7f       	rcall	800070b8 <__sfp>
8000714c:	8d 1c       	st.w	r6[0x4],r12
8000714e:	0c 9c       	mov	r12,r6
80007150:	cb 4f       	rcall	800070b8 <__sfp>
80007152:	6c 09       	ld.w	r9,r6[0x0]
80007154:	30 48       	mov	r8,4
80007156:	93 07       	st.w	r9[0x0],r7
80007158:	b2 68       	st.h	r9[0xc],r8
8000715a:	93 17       	st.w	r9[0x4],r7
8000715c:	93 27       	st.w	r9[0x8],r7
8000715e:	6c 18       	ld.w	r8,r6[0x4]
80007160:	b2 77       	st.h	r9[0xe],r7
80007162:	93 47       	st.w	r9[0x10],r7
80007164:	93 57       	st.w	r9[0x14],r7
80007166:	93 67       	st.w	r9[0x18],r7
80007168:	93 89       	st.w	r9[0x20],r9
8000716a:	91 07       	st.w	r8[0x0],r7
8000716c:	91 17       	st.w	r8[0x4],r7
8000716e:	91 27       	st.w	r8[0x8],r7
80007170:	fe ce eb f4 	sub	lr,pc,-5132
80007174:	fe cb ec 24 	sub	r11,pc,-5084
80007178:	93 9e       	st.w	r9[0x24],lr
8000717a:	93 ab       	st.w	r9[0x28],r11
8000717c:	fe ca ec 4c 	sub	r10,pc,-5044
80007180:	fe c4 ec 58 	sub	r4,pc,-5032
80007184:	93 ba       	st.w	r9[0x2c],r10
80007186:	93 c4       	st.w	r9[0x30],r4
80007188:	30 99       	mov	r9,9
8000718a:	b0 69       	st.h	r8[0xc],r9
8000718c:	b0 75       	st.h	r8[0xe],r5
8000718e:	91 c4       	st.w	r8[0x30],r4
80007190:	91 47       	st.w	r8[0x10],r7
80007192:	91 57       	st.w	r8[0x14],r7
80007194:	91 67       	st.w	r8[0x18],r7
80007196:	91 88       	st.w	r8[0x20],r8
80007198:	91 9e       	st.w	r8[0x24],lr
8000719a:	91 ab       	st.w	r8[0x28],r11
8000719c:	91 ba       	st.w	r8[0x2c],r10
8000719e:	8d 2c       	st.w	r6[0x8],r12
800071a0:	31 28       	mov	r8,18
800071a2:	99 07       	st.w	r12[0x0],r7
800071a4:	b8 68       	st.h	r12[0xc],r8
800071a6:	99 17       	st.w	r12[0x4],r7
800071a8:	99 27       	st.w	r12[0x8],r7
800071aa:	30 28       	mov	r8,2
800071ac:	b8 78       	st.h	r12[0xe],r8
800071ae:	99 c4       	st.w	r12[0x30],r4
800071b0:	99 67       	st.w	r12[0x18],r7
800071b2:	99 9e       	st.w	r12[0x24],lr
800071b4:	99 ab       	st.w	r12[0x28],r11
800071b6:	99 ba       	st.w	r12[0x2c],r10
800071b8:	99 47       	st.w	r12[0x10],r7
800071ba:	99 57       	st.w	r12[0x14],r7
800071bc:	99 8c       	st.w	r12[0x20],r12
800071be:	d8 22       	popm	r4-r7,pc

800071c0 <_malloc_trim_r>:
800071c0:	d4 21       	pushm	r4-r7,lr
800071c2:	16 95       	mov	r5,r11
800071c4:	18 97       	mov	r7,r12
800071c6:	e0 a0 05 31 	rcall	80007c28 <__malloc_lock>
800071ca:	e0 64 01 1c 	mov	r4,284
800071ce:	68 28       	ld.w	r8,r4[0x8]
800071d0:	70 16       	ld.w	r6,r8[0x4]
800071d2:	e0 16 ff fc 	andl	r6,0xfffc
800071d6:	ec c8 ff 91 	sub	r8,r6,-111
800071da:	f0 05 01 05 	sub	r5,r8,r5
800071de:	e0 15 ff 80 	andl	r5,0xff80
800071e2:	ea c5 00 80 	sub	r5,r5,128
800071e6:	e0 45 00 7f 	cp.w	r5,127
800071ea:	e0 8a 00 25 	brle	80007234 <_malloc_trim_r+0x74>
800071ee:	30 0b       	mov	r11,0
800071f0:	0e 9c       	mov	r12,r7
800071f2:	e0 a0 09 8b 	rcall	80008508 <_sbrk_r>
800071f6:	68 28       	ld.w	r8,r4[0x8]
800071f8:	0c 08       	add	r8,r6
800071fa:	10 3c       	cp.w	r12,r8
800071fc:	c1 c1       	brne	80007234 <_malloc_trim_r+0x74>
800071fe:	ea 0b 11 00 	rsub	r11,r5,0
80007202:	0e 9c       	mov	r12,r7
80007204:	e0 a0 09 82 	rcall	80008508 <_sbrk_r>
80007208:	5b fc       	cp.w	r12,-1
8000720a:	c1 91       	brne	8000723c <_malloc_trim_r+0x7c>
8000720c:	30 0b       	mov	r11,0
8000720e:	0e 9c       	mov	r12,r7
80007210:	e0 a0 09 7c 	rcall	80008508 <_sbrk_r>
80007214:	68 28       	ld.w	r8,r4[0x8]
80007216:	f8 08 01 09 	sub	r9,r12,r8
8000721a:	58 f9       	cp.w	r9,15
8000721c:	e0 8a 00 0c 	brle	80007234 <_malloc_trim_r+0x74>
80007220:	a1 a9       	sbr	r9,0x0
80007222:	91 19       	st.w	r8[0x4],r9
80007224:	e0 68 05 28 	mov	r8,1320
80007228:	70 09       	ld.w	r9,r8[0x0]
8000722a:	e0 68 06 48 	mov	r8,1608
8000722e:	f8 09 01 09 	sub	r9,r12,r9
80007232:	91 09       	st.w	r8[0x0],r9
80007234:	0e 9c       	mov	r12,r7
80007236:	e0 a0 04 fa 	rcall	80007c2a <__malloc_unlock>
8000723a:	d8 2a       	popm	r4-r7,pc,r12=0
8000723c:	68 28       	ld.w	r8,r4[0x8]
8000723e:	0a 16       	sub	r6,r5
80007240:	a1 a6       	sbr	r6,0x0
80007242:	91 16       	st.w	r8[0x4],r6
80007244:	e0 68 06 48 	mov	r8,1608
80007248:	70 09       	ld.w	r9,r8[0x0]
8000724a:	0a 19       	sub	r9,r5
8000724c:	0e 9c       	mov	r12,r7
8000724e:	91 09       	st.w	r8[0x0],r9
80007250:	e0 a0 04 ed 	rcall	80007c2a <__malloc_unlock>
80007254:	da 2a       	popm	r4-r7,pc,r12=1
80007256:	d7 03       	nop

80007258 <_free_r>:
80007258:	d4 21       	pushm	r4-r7,lr
8000725a:	16 96       	mov	r6,r11
8000725c:	18 97       	mov	r7,r12
8000725e:	58 0b       	cp.w	r11,0
80007260:	e0 80 00 c0 	breq	800073e0 <_free_r+0x188>
80007264:	e0 a0 04 e2 	rcall	80007c28 <__malloc_lock>
80007268:	20 86       	sub	r6,8
8000726a:	e0 6a 01 1c 	mov	r10,284
8000726e:	6c 18       	ld.w	r8,r6[0x4]
80007270:	74 2e       	ld.w	lr,r10[0x8]
80007272:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80007276:	a1 c8       	cbr	r8,0x0
80007278:	ec 08 00 09 	add	r9,r6,r8
8000727c:	72 1b       	ld.w	r11,r9[0x4]
8000727e:	e0 1b ff fc 	andl	r11,0xfffc
80007282:	1c 39       	cp.w	r9,lr
80007284:	c1 e1       	brne	800072c0 <_free_r+0x68>
80007286:	f6 08 00 08 	add	r8,r11,r8
8000728a:	58 0c       	cp.w	r12,0
8000728c:	c0 81       	brne	8000729c <_free_r+0x44>
8000728e:	6c 09       	ld.w	r9,r6[0x0]
80007290:	12 16       	sub	r6,r9
80007292:	12 08       	add	r8,r9
80007294:	6c 3b       	ld.w	r11,r6[0xc]
80007296:	6c 29       	ld.w	r9,r6[0x8]
80007298:	97 29       	st.w	r11[0x8],r9
8000729a:	93 3b       	st.w	r9[0xc],r11
8000729c:	10 99       	mov	r9,r8
8000729e:	95 26       	st.w	r10[0x8],r6
800072a0:	a1 a9       	sbr	r9,0x0
800072a2:	8d 19       	st.w	r6[0x4],r9
800072a4:	e0 69 05 24 	mov	r9,1316
800072a8:	72 09       	ld.w	r9,r9[0x0]
800072aa:	12 38       	cp.w	r8,r9
800072ac:	c0 63       	brcs	800072b8 <_free_r+0x60>
800072ae:	e0 68 06 44 	mov	r8,1604
800072b2:	0e 9c       	mov	r12,r7
800072b4:	70 0b       	ld.w	r11,r8[0x0]
800072b6:	c8 5f       	rcall	800071c0 <_malloc_trim_r>
800072b8:	0e 9c       	mov	r12,r7
800072ba:	e0 a0 04 b8 	rcall	80007c2a <__malloc_unlock>
800072be:	d8 22       	popm	r4-r7,pc
800072c0:	93 1b       	st.w	r9[0x4],r11
800072c2:	58 0c       	cp.w	r12,0
800072c4:	c0 30       	breq	800072ca <_free_r+0x72>
800072c6:	30 0c       	mov	r12,0
800072c8:	c1 08       	rjmp	800072e8 <_free_r+0x90>
800072ca:	6c 0e       	ld.w	lr,r6[0x0]
800072cc:	f4 c5 ff f8 	sub	r5,r10,-8
800072d0:	1c 16       	sub	r6,lr
800072d2:	1c 08       	add	r8,lr
800072d4:	6c 2e       	ld.w	lr,r6[0x8]
800072d6:	0a 3e       	cp.w	lr,r5
800072d8:	f9 bc 00 01 	moveq	r12,1
800072dc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800072e0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800072e4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800072e8:	f2 0b 00 0e 	add	lr,r9,r11
800072ec:	7c 1e       	ld.w	lr,lr[0x4]
800072ee:	ed be 00 00 	bld	lr,0x0
800072f2:	c1 40       	breq	8000731a <_free_r+0xc2>
800072f4:	16 08       	add	r8,r11
800072f6:	58 0c       	cp.w	r12,0
800072f8:	c0 d1       	brne	80007312 <_free_r+0xba>
800072fa:	e0 6e 01 1c 	mov	lr,284
800072fe:	72 2b       	ld.w	r11,r9[0x8]
80007300:	2f 8e       	sub	lr,-8
80007302:	1c 3b       	cp.w	r11,lr
80007304:	c0 71       	brne	80007312 <_free_r+0xba>
80007306:	97 36       	st.w	r11[0xc],r6
80007308:	97 26       	st.w	r11[0x8],r6
8000730a:	8d 2b       	st.w	r6[0x8],r11
8000730c:	8d 3b       	st.w	r6[0xc],r11
8000730e:	30 1c       	mov	r12,1
80007310:	c0 58       	rjmp	8000731a <_free_r+0xc2>
80007312:	72 2b       	ld.w	r11,r9[0x8]
80007314:	72 39       	ld.w	r9,r9[0xc]
80007316:	93 2b       	st.w	r9[0x8],r11
80007318:	97 39       	st.w	r11[0xc],r9
8000731a:	10 99       	mov	r9,r8
8000731c:	ec 08 09 08 	st.w	r6[r8],r8
80007320:	a1 a9       	sbr	r9,0x0
80007322:	8d 19       	st.w	r6[0x4],r9
80007324:	58 0c       	cp.w	r12,0
80007326:	c5 a1       	brne	800073da <_free_r+0x182>
80007328:	e0 48 01 ff 	cp.w	r8,511
8000732c:	e0 8b 00 13 	brhi	80007352 <_free_r+0xfa>
80007330:	a3 98       	lsr	r8,0x3
80007332:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007336:	72 2b       	ld.w	r11,r9[0x8]
80007338:	8d 39       	st.w	r6[0xc],r9
8000733a:	8d 2b       	st.w	r6[0x8],r11
8000733c:	97 36       	st.w	r11[0xc],r6
8000733e:	93 26       	st.w	r9[0x8],r6
80007340:	a3 48       	asr	r8,0x2
80007342:	74 19       	ld.w	r9,r10[0x4]
80007344:	30 1b       	mov	r11,1
80007346:	f6 08 09 48 	lsl	r8,r11,r8
8000734a:	f3 e8 10 08 	or	r8,r9,r8
8000734e:	95 18       	st.w	r10[0x4],r8
80007350:	c4 58       	rjmp	800073da <_free_r+0x182>
80007352:	f0 0b 16 09 	lsr	r11,r8,0x9
80007356:	58 4b       	cp.w	r11,4
80007358:	e0 8b 00 06 	brhi	80007364 <_free_r+0x10c>
8000735c:	f0 0b 16 06 	lsr	r11,r8,0x6
80007360:	2c 8b       	sub	r11,-56
80007362:	c2 08       	rjmp	800073a2 <_free_r+0x14a>
80007364:	59 4b       	cp.w	r11,20
80007366:	e0 8b 00 04 	brhi	8000736e <_free_r+0x116>
8000736a:	2a 5b       	sub	r11,-91
8000736c:	c1 b8       	rjmp	800073a2 <_free_r+0x14a>
8000736e:	e0 4b 00 54 	cp.w	r11,84
80007372:	e0 8b 00 06 	brhi	8000737e <_free_r+0x126>
80007376:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000737a:	29 2b       	sub	r11,-110
8000737c:	c1 38       	rjmp	800073a2 <_free_r+0x14a>
8000737e:	e0 4b 01 54 	cp.w	r11,340
80007382:	e0 8b 00 06 	brhi	8000738e <_free_r+0x136>
80007386:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000738a:	28 9b       	sub	r11,-119
8000738c:	c0 b8       	rjmp	800073a2 <_free_r+0x14a>
8000738e:	e0 4b 05 54 	cp.w	r11,1364
80007392:	e0 88 00 05 	brls	8000739c <_free_r+0x144>
80007396:	37 eb       	mov	r11,126
80007398:	c0 58       	rjmp	800073a2 <_free_r+0x14a>
8000739a:	d7 03       	nop
8000739c:	f0 0b 16 12 	lsr	r11,r8,0x12
800073a0:	28 4b       	sub	r11,-124
800073a2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800073a6:	78 29       	ld.w	r9,r12[0x8]
800073a8:	18 39       	cp.w	r9,r12
800073aa:	c0 e1       	brne	800073c6 <_free_r+0x16e>
800073ac:	74 18       	ld.w	r8,r10[0x4]
800073ae:	a3 4b       	asr	r11,0x2
800073b0:	30 1c       	mov	r12,1
800073b2:	f8 0b 09 4b 	lsl	r11,r12,r11
800073b6:	f1 eb 10 0b 	or	r11,r8,r11
800073ba:	12 98       	mov	r8,r9
800073bc:	95 1b       	st.w	r10[0x4],r11
800073be:	c0 a8       	rjmp	800073d2 <_free_r+0x17a>
800073c0:	72 29       	ld.w	r9,r9[0x8]
800073c2:	18 39       	cp.w	r9,r12
800073c4:	c0 60       	breq	800073d0 <_free_r+0x178>
800073c6:	72 1a       	ld.w	r10,r9[0x4]
800073c8:	e0 1a ff fc 	andl	r10,0xfffc
800073cc:	14 38       	cp.w	r8,r10
800073ce:	cf 93       	brcs	800073c0 <_free_r+0x168>
800073d0:	72 38       	ld.w	r8,r9[0xc]
800073d2:	8d 38       	st.w	r6[0xc],r8
800073d4:	8d 29       	st.w	r6[0x8],r9
800073d6:	93 36       	st.w	r9[0xc],r6
800073d8:	91 26       	st.w	r8[0x8],r6
800073da:	0e 9c       	mov	r12,r7
800073dc:	e0 a0 04 27 	rcall	80007c2a <__malloc_unlock>
800073e0:	d8 22       	popm	r4-r7,pc
800073e2:	d7 03       	nop

800073e4 <__sfvwrite_r>:
800073e4:	d4 31       	pushm	r0-r7,lr
800073e6:	20 3d       	sub	sp,12
800073e8:	14 94       	mov	r4,r10
800073ea:	18 95       	mov	r5,r12
800073ec:	16 97       	mov	r7,r11
800073ee:	74 28       	ld.w	r8,r10[0x8]
800073f0:	58 08       	cp.w	r8,0
800073f2:	e0 80 01 45 	breq	8000767c <__sfvwrite_r+0x298>
800073f6:	96 68       	ld.sh	r8,r11[0xc]
800073f8:	ed b8 00 03 	bld	r8,0x3
800073fc:	c0 41       	brne	80007404 <__sfvwrite_r+0x20>
800073fe:	76 48       	ld.w	r8,r11[0x10]
80007400:	58 08       	cp.w	r8,0
80007402:	c0 c1       	brne	8000741a <__sfvwrite_r+0x36>
80007404:	0e 9b       	mov	r11,r7
80007406:	0a 9c       	mov	r12,r5
80007408:	fe b0 f6 ca 	rcall	8000619c <__swsetup_r>
8000740c:	c0 70       	breq	8000741a <__sfvwrite_r+0x36>
8000740e:	8e 68       	ld.sh	r8,r7[0xc]
80007410:	a7 a8       	sbr	r8,0x6
80007412:	ae 68       	st.h	r7[0xc],r8
80007414:	30 98       	mov	r8,9
80007416:	8b 38       	st.w	r5[0xc],r8
80007418:	c3 09       	rjmp	80007678 <__sfvwrite_r+0x294>
8000741a:	8e 63       	ld.sh	r3,r7[0xc]
8000741c:	68 00       	ld.w	r0,r4[0x0]
8000741e:	06 96       	mov	r6,r3
80007420:	e2 16 00 02 	andl	r6,0x2,COH
80007424:	c2 10       	breq	80007466 <__sfvwrite_r+0x82>
80007426:	30 03       	mov	r3,0
80007428:	e0 62 04 00 	mov	r2,1024
8000742c:	06 96       	mov	r6,r3
8000742e:	c0 48       	rjmp	80007436 <__sfvwrite_r+0x52>
80007430:	60 03       	ld.w	r3,r0[0x0]
80007432:	60 16       	ld.w	r6,r0[0x4]
80007434:	2f 80       	sub	r0,-8
80007436:	58 06       	cp.w	r6,0
80007438:	cf c0       	breq	80007430 <__sfvwrite_r+0x4c>
8000743a:	e0 46 04 00 	cp.w	r6,1024
8000743e:	ec 09 17 80 	movls	r9,r6
80007442:	e4 09 17 b0 	movhi	r9,r2
80007446:	06 9a       	mov	r10,r3
80007448:	6e a8       	ld.w	r8,r7[0x28]
8000744a:	6e 8b       	ld.w	r11,r7[0x20]
8000744c:	0a 9c       	mov	r12,r5
8000744e:	5d 18       	icall	r8
80007450:	18 16       	sub	r6,r12
80007452:	58 0c       	cp.w	r12,0
80007454:	e0 8a 01 0f 	brle	80007672 <__sfvwrite_r+0x28e>
80007458:	68 28       	ld.w	r8,r4[0x8]
8000745a:	18 18       	sub	r8,r12
8000745c:	89 28       	st.w	r4[0x8],r8
8000745e:	e0 80 01 0f 	breq	8000767c <__sfvwrite_r+0x298>
80007462:	18 03       	add	r3,r12
80007464:	ce 9b       	rjmp	80007436 <__sfvwrite_r+0x52>
80007466:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000746a:	c0 70       	breq	80007478 <__sfvwrite_r+0x94>
8000746c:	50 06       	stdsp	sp[0x0],r6
8000746e:	0c 93       	mov	r3,r6
80007470:	0c 91       	mov	r1,r6
80007472:	50 15       	stdsp	sp[0x4],r5
80007474:	08 92       	mov	r2,r4
80007476:	c9 e8       	rjmp	800075b2 <__sfvwrite_r+0x1ce>
80007478:	06 96       	mov	r6,r3
8000747a:	08 91       	mov	r1,r4
8000747c:	c0 48       	rjmp	80007484 <__sfvwrite_r+0xa0>
8000747e:	60 03       	ld.w	r3,r0[0x0]
80007480:	60 16       	ld.w	r6,r0[0x4]
80007482:	2f 80       	sub	r0,-8
80007484:	58 06       	cp.w	r6,0
80007486:	cf c0       	breq	8000747e <__sfvwrite_r+0x9a>
80007488:	8e 68       	ld.sh	r8,r7[0xc]
8000748a:	6e 24       	ld.w	r4,r7[0x8]
8000748c:	10 99       	mov	r9,r8
8000748e:	e2 19 02 00 	andl	r9,0x200,COH
80007492:	c5 50       	breq	8000753c <__sfvwrite_r+0x158>
80007494:	08 36       	cp.w	r6,r4
80007496:	c4 33       	brcs	8000751c <__sfvwrite_r+0x138>
80007498:	10 99       	mov	r9,r8
8000749a:	e2 19 04 80 	andl	r9,0x480,COH
8000749e:	c3 f0       	breq	8000751c <__sfvwrite_r+0x138>
800074a0:	6e 4b       	ld.w	r11,r7[0x10]
800074a2:	6e 09       	ld.w	r9,r7[0x0]
800074a4:	16 19       	sub	r9,r11
800074a6:	50 09       	stdsp	sp[0x0],r9
800074a8:	6e 59       	ld.w	r9,r7[0x14]
800074aa:	10 9c       	mov	r12,r8
800074ac:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800074b0:	30 28       	mov	r8,2
800074b2:	f4 08 0c 08 	divs	r8,r10,r8
800074b6:	fa e9 00 04 	st.d	sp[4],r8
800074ba:	10 94       	mov	r4,r8
800074bc:	40 09       	lddsp	r9,sp[0x0]
800074be:	e2 1c 04 00 	andl	r12,0x400,COH
800074c2:	2f f9       	sub	r9,-1
800074c4:	0c 09       	add	r9,r6
800074c6:	12 38       	cp.w	r8,r9
800074c8:	f2 04 17 30 	movlo	r4,r9
800074cc:	58 0c       	cp.w	r12,0
800074ce:	c1 00       	breq	800074ee <__sfvwrite_r+0x10a>
800074d0:	08 9b       	mov	r11,r4
800074d2:	0a 9c       	mov	r12,r5
800074d4:	c6 8d       	rcall	800077a4 <_malloc_r>
800074d6:	18 92       	mov	r2,r12
800074d8:	c1 40       	breq	80007500 <__sfvwrite_r+0x11c>
800074da:	40 0a       	lddsp	r10,sp[0x0]
800074dc:	6e 4b       	ld.w	r11,r7[0x10]
800074de:	fe b0 e4 78 	rcall	80003dce <memcpy>
800074e2:	8e 68       	ld.sh	r8,r7[0xc]
800074e4:	e0 18 fb 7f 	andl	r8,0xfb7f
800074e8:	a7 b8       	sbr	r8,0x7
800074ea:	ae 68       	st.h	r7[0xc],r8
800074ec:	c0 d8       	rjmp	80007506 <__sfvwrite_r+0x122>
800074ee:	08 9a       	mov	r10,r4
800074f0:	0a 9c       	mov	r12,r5
800074f2:	e0 a0 06 87 	rcall	80008200 <_realloc_r>
800074f6:	18 92       	mov	r2,r12
800074f8:	c0 71       	brne	80007506 <__sfvwrite_r+0x122>
800074fa:	6e 4b       	ld.w	r11,r7[0x10]
800074fc:	0a 9c       	mov	r12,r5
800074fe:	ca de       	rcall	80007258 <_free_r>
80007500:	30 c8       	mov	r8,12
80007502:	8b 38       	st.w	r5[0xc],r8
80007504:	cb 78       	rjmp	80007672 <__sfvwrite_r+0x28e>
80007506:	40 0a       	lddsp	r10,sp[0x0]
80007508:	40 09       	lddsp	r9,sp[0x0]
8000750a:	e8 0a 01 0a 	sub	r10,r4,r10
8000750e:	e4 09 00 08 	add	r8,r2,r9
80007512:	8f 54       	st.w	r7[0x14],r4
80007514:	8f 2a       	st.w	r7[0x8],r10
80007516:	8f 08       	st.w	r7[0x0],r8
80007518:	8f 42       	st.w	r7[0x10],r2
8000751a:	0c 94       	mov	r4,r6
8000751c:	08 36       	cp.w	r6,r4
8000751e:	ec 04 17 30 	movlo	r4,r6
80007522:	06 9b       	mov	r11,r3
80007524:	08 9a       	mov	r10,r4
80007526:	6e 0c       	ld.w	r12,r7[0x0]
80007528:	e0 a0 03 61 	rcall	80007bea <memmove>
8000752c:	6e 08       	ld.w	r8,r7[0x0]
8000752e:	08 08       	add	r8,r4
80007530:	8f 08       	st.w	r7[0x0],r8
80007532:	6e 28       	ld.w	r8,r7[0x8]
80007534:	08 18       	sub	r8,r4
80007536:	0c 94       	mov	r4,r6
80007538:	8f 28       	st.w	r7[0x8],r8
8000753a:	c3 08       	rjmp	8000759a <__sfvwrite_r+0x1b6>
8000753c:	08 36       	cp.w	r6,r4
8000753e:	5f ba       	srhi	r10
80007540:	6e 0c       	ld.w	r12,r7[0x0]
80007542:	6e 48       	ld.w	r8,r7[0x10]
80007544:	10 3c       	cp.w	r12,r8
80007546:	5f b8       	srhi	r8
80007548:	f5 e8 00 08 	and	r8,r10,r8
8000754c:	f2 08 18 00 	cp.b	r8,r9
80007550:	c0 e0       	breq	8000756c <__sfvwrite_r+0x188>
80007552:	06 9b       	mov	r11,r3
80007554:	08 9a       	mov	r10,r4
80007556:	e0 a0 03 4a 	rcall	80007bea <memmove>
8000755a:	6e 08       	ld.w	r8,r7[0x0]
8000755c:	08 08       	add	r8,r4
8000755e:	0e 9b       	mov	r11,r7
80007560:	8f 08       	st.w	r7[0x0],r8
80007562:	0a 9c       	mov	r12,r5
80007564:	fe b0 fd 08 	rcall	80006f74 <_fflush_r>
80007568:	c1 90       	breq	8000759a <__sfvwrite_r+0x1b6>
8000756a:	c8 48       	rjmp	80007672 <__sfvwrite_r+0x28e>
8000756c:	6e 59       	ld.w	r9,r7[0x14]
8000756e:	12 36       	cp.w	r6,r9
80007570:	c0 a3       	brcs	80007584 <__sfvwrite_r+0x1a0>
80007572:	6e a8       	ld.w	r8,r7[0x28]
80007574:	06 9a       	mov	r10,r3
80007576:	6e 8b       	ld.w	r11,r7[0x20]
80007578:	0a 9c       	mov	r12,r5
8000757a:	5d 18       	icall	r8
8000757c:	18 94       	mov	r4,r12
8000757e:	e0 89 00 0e 	brgt	8000759a <__sfvwrite_r+0x1b6>
80007582:	c7 88       	rjmp	80007672 <__sfvwrite_r+0x28e>
80007584:	0c 9a       	mov	r10,r6
80007586:	06 9b       	mov	r11,r3
80007588:	e0 a0 03 31 	rcall	80007bea <memmove>
8000758c:	6e 08       	ld.w	r8,r7[0x0]
8000758e:	0c 08       	add	r8,r6
80007590:	0c 94       	mov	r4,r6
80007592:	8f 08       	st.w	r7[0x0],r8
80007594:	6e 28       	ld.w	r8,r7[0x8]
80007596:	0c 18       	sub	r8,r6
80007598:	8f 28       	st.w	r7[0x8],r8
8000759a:	62 28       	ld.w	r8,r1[0x8]
8000759c:	08 18       	sub	r8,r4
8000759e:	83 28       	st.w	r1[0x8],r8
800075a0:	c6 e0       	breq	8000767c <__sfvwrite_r+0x298>
800075a2:	08 16       	sub	r6,r4
800075a4:	08 03       	add	r3,r4
800075a6:	c6 fb       	rjmp	80007484 <__sfvwrite_r+0xa0>
800075a8:	60 03       	ld.w	r3,r0[0x0]
800075aa:	60 11       	ld.w	r1,r0[0x4]
800075ac:	30 08       	mov	r8,0
800075ae:	2f 80       	sub	r0,-8
800075b0:	50 08       	stdsp	sp[0x0],r8
800075b2:	58 01       	cp.w	r1,0
800075b4:	cf a0       	breq	800075a8 <__sfvwrite_r+0x1c4>
800075b6:	40 0a       	lddsp	r10,sp[0x0]
800075b8:	58 0a       	cp.w	r10,0
800075ba:	c1 51       	brne	800075e4 <__sfvwrite_r+0x200>
800075bc:	e2 c6 ff ff 	sub	r6,r1,-1
800075c0:	02 9a       	mov	r10,r1
800075c2:	30 ab       	mov	r11,10
800075c4:	06 9c       	mov	r12,r3
800075c6:	e0 a0 03 07 	rcall	80007bd4 <memchr>
800075ca:	f8 c8 ff ff 	sub	r8,r12,-1
800075ce:	58 0c       	cp.w	r12,0
800075d0:	f1 d3 e1 16 	subne	r6,r8,r3
800075d4:	f9 b9 01 01 	movne	r9,1
800075d8:	fb f9 1a 00 	st.wne	sp[0x0],r9
800075dc:	f9 b8 00 01 	moveq	r8,1
800075e0:	fb f8 0a 00 	st.weq	sp[0x0],r8
800075e4:	02 36       	cp.w	r6,r1
800075e6:	ec 04 17 80 	movls	r4,r6
800075ea:	e2 04 17 b0 	movhi	r4,r1
800075ee:	6e 59       	ld.w	r9,r7[0x14]
800075f0:	6e 25       	ld.w	r5,r7[0x8]
800075f2:	f2 05 00 05 	add	r5,r9,r5
800075f6:	0a 34       	cp.w	r4,r5
800075f8:	5f 9a       	srgt	r10
800075fa:	6e 0c       	ld.w	r12,r7[0x0]
800075fc:	6e 48       	ld.w	r8,r7[0x10]
800075fe:	10 3c       	cp.w	r12,r8
80007600:	5f b8       	srhi	r8
80007602:	f5 e8 00 08 	and	r8,r10,r8
80007606:	30 0a       	mov	r10,0
80007608:	f4 08 18 00 	cp.b	r8,r10
8000760c:	c0 e0       	breq	80007628 <__sfvwrite_r+0x244>
8000760e:	06 9b       	mov	r11,r3
80007610:	0a 9a       	mov	r10,r5
80007612:	e0 a0 02 ec 	rcall	80007bea <memmove>
80007616:	6e 08       	ld.w	r8,r7[0x0]
80007618:	0a 08       	add	r8,r5
8000761a:	0e 9b       	mov	r11,r7
8000761c:	8f 08       	st.w	r7[0x0],r8
8000761e:	40 1c       	lddsp	r12,sp[0x4]
80007620:	fe b0 fc aa 	rcall	80006f74 <_fflush_r>
80007624:	c1 80       	breq	80007654 <__sfvwrite_r+0x270>
80007626:	c2 68       	rjmp	80007672 <__sfvwrite_r+0x28e>
80007628:	12 34       	cp.w	r4,r9
8000762a:	c0 a5       	brlt	8000763e <__sfvwrite_r+0x25a>
8000762c:	6e a8       	ld.w	r8,r7[0x28]
8000762e:	06 9a       	mov	r10,r3
80007630:	6e 8b       	ld.w	r11,r7[0x20]
80007632:	40 1c       	lddsp	r12,sp[0x4]
80007634:	5d 18       	icall	r8
80007636:	18 95       	mov	r5,r12
80007638:	e0 89 00 0e 	brgt	80007654 <__sfvwrite_r+0x270>
8000763c:	c1 b8       	rjmp	80007672 <__sfvwrite_r+0x28e>
8000763e:	08 9a       	mov	r10,r4
80007640:	06 9b       	mov	r11,r3
80007642:	e0 a0 02 d4 	rcall	80007bea <memmove>
80007646:	6e 08       	ld.w	r8,r7[0x0]
80007648:	08 08       	add	r8,r4
8000764a:	08 95       	mov	r5,r4
8000764c:	8f 08       	st.w	r7[0x0],r8
8000764e:	6e 28       	ld.w	r8,r7[0x8]
80007650:	08 18       	sub	r8,r4
80007652:	8f 28       	st.w	r7[0x8],r8
80007654:	0a 16       	sub	r6,r5
80007656:	c0 71       	brne	80007664 <__sfvwrite_r+0x280>
80007658:	0e 9b       	mov	r11,r7
8000765a:	40 1c       	lddsp	r12,sp[0x4]
8000765c:	fe b0 fc 8c 	rcall	80006f74 <_fflush_r>
80007660:	c0 91       	brne	80007672 <__sfvwrite_r+0x28e>
80007662:	50 06       	stdsp	sp[0x0],r6
80007664:	64 28       	ld.w	r8,r2[0x8]
80007666:	0a 18       	sub	r8,r5
80007668:	85 28       	st.w	r2[0x8],r8
8000766a:	c0 90       	breq	8000767c <__sfvwrite_r+0x298>
8000766c:	0a 11       	sub	r1,r5
8000766e:	0a 03       	add	r3,r5
80007670:	ca 1b       	rjmp	800075b2 <__sfvwrite_r+0x1ce>
80007672:	8e 68       	ld.sh	r8,r7[0xc]
80007674:	a7 a8       	sbr	r8,0x6
80007676:	ae 68       	st.h	r7[0xc],r8
80007678:	3f fc       	mov	r12,-1
8000767a:	c0 28       	rjmp	8000767e <__sfvwrite_r+0x29a>
8000767c:	30 0c       	mov	r12,0
8000767e:	2f dd       	sub	sp,-12
80007680:	d8 32       	popm	r0-r7,pc
80007682:	d7 03       	nop

80007684 <_fwalk>:
80007684:	d4 31       	pushm	r0-r7,lr
80007686:	30 05       	mov	r5,0
80007688:	16 91       	mov	r1,r11
8000768a:	f8 c7 ff 28 	sub	r7,r12,-216
8000768e:	0a 92       	mov	r2,r5
80007690:	fe b0 fc f8 	rcall	80007080 <__sfp_lock_acquire>
80007694:	3f f3       	mov	r3,-1
80007696:	c1 68       	rjmp	800076c2 <_fwalk+0x3e>
80007698:	6e 26       	ld.w	r6,r7[0x8]
8000769a:	6e 14       	ld.w	r4,r7[0x4]
8000769c:	2f 46       	sub	r6,-12
8000769e:	c0 c8       	rjmp	800076b6 <_fwalk+0x32>
800076a0:	8c 08       	ld.sh	r8,r6[0x0]
800076a2:	e4 08 19 00 	cp.h	r8,r2
800076a6:	c0 70       	breq	800076b4 <_fwalk+0x30>
800076a8:	8c 18       	ld.sh	r8,r6[0x2]
800076aa:	e6 08 19 00 	cp.h	r8,r3
800076ae:	c0 30       	breq	800076b4 <_fwalk+0x30>
800076b0:	5d 11       	icall	r1
800076b2:	18 45       	or	r5,r12
800076b4:	2a 46       	sub	r6,-92
800076b6:	20 14       	sub	r4,1
800076b8:	ec cc 00 0c 	sub	r12,r6,12
800076bc:	58 04       	cp.w	r4,0
800076be:	cf 14       	brge	800076a0 <_fwalk+0x1c>
800076c0:	6e 07       	ld.w	r7,r7[0x0]
800076c2:	58 07       	cp.w	r7,0
800076c4:	ce a1       	brne	80007698 <_fwalk+0x14>
800076c6:	fe b0 fc de 	rcall	80007082 <__sfp_lock_release>
800076ca:	0a 9c       	mov	r12,r5
800076cc:	d8 32       	popm	r0-r7,pc
800076ce:	d7 03       	nop

800076d0 <_localeconv_r>:
800076d0:	fe cc d6 d4 	sub	r12,pc,-10540
800076d4:	5e fc       	retal	r12
800076d6:	d7 03       	nop

800076d8 <__smakebuf_r>:
800076d8:	d4 21       	pushm	r4-r7,lr
800076da:	20 fd       	sub	sp,60
800076dc:	96 68       	ld.sh	r8,r11[0xc]
800076de:	16 97       	mov	r7,r11
800076e0:	18 96       	mov	r6,r12
800076e2:	e2 18 00 02 	andl	r8,0x2,COH
800076e6:	c3 c1       	brne	8000775e <__smakebuf_r+0x86>
800076e8:	96 7b       	ld.sh	r11,r11[0xe]
800076ea:	f0 0b 19 00 	cp.h	r11,r8
800076ee:	c0 55       	brlt	800076f8 <__smakebuf_r+0x20>
800076f0:	1a 9a       	mov	r10,sp
800076f2:	e0 a0 08 95 	rcall	8000881c <_fstat_r>
800076f6:	c0 f4       	brge	80007714 <__smakebuf_r+0x3c>
800076f8:	8e 65       	ld.sh	r5,r7[0xc]
800076fa:	0a 98       	mov	r8,r5
800076fc:	ab b8       	sbr	r8,0xb
800076fe:	e2 15 00 80 	andl	r5,0x80,COH
80007702:	ae 68       	st.h	r7[0xc],r8
80007704:	30 04       	mov	r4,0
80007706:	e0 68 04 00 	mov	r8,1024
8000770a:	f9 b5 01 40 	movne	r5,64
8000770e:	f0 05 17 00 	moveq	r5,r8
80007712:	c1 c8       	rjmp	8000774a <__smakebuf_r+0x72>
80007714:	40 18       	lddsp	r8,sp[0x4]
80007716:	e2 18 f0 00 	andl	r8,0xf000,COH
8000771a:	e0 48 20 00 	cp.w	r8,8192
8000771e:	5f 04       	sreq	r4
80007720:	e0 48 80 00 	cp.w	r8,32768
80007724:	c0 e1       	brne	80007740 <__smakebuf_r+0x68>
80007726:	6e b9       	ld.w	r9,r7[0x2c]
80007728:	fe c8 f1 f8 	sub	r8,pc,-3592
8000772c:	10 39       	cp.w	r9,r8
8000772e:	c0 91       	brne	80007740 <__smakebuf_r+0x68>
80007730:	8e 68       	ld.sh	r8,r7[0xc]
80007732:	e0 65 04 00 	mov	r5,1024
80007736:	ab a8       	sbr	r8,0xa
80007738:	ef 45 00 50 	st.w	r7[80],r5
8000773c:	ae 68       	st.h	r7[0xc],r8
8000773e:	c0 68       	rjmp	8000774a <__smakebuf_r+0x72>
80007740:	8e 68       	ld.sh	r8,r7[0xc]
80007742:	e0 65 04 00 	mov	r5,1024
80007746:	ab b8       	sbr	r8,0xb
80007748:	ae 68       	st.h	r7[0xc],r8
8000774a:	0a 9b       	mov	r11,r5
8000774c:	0c 9c       	mov	r12,r6
8000774e:	c2 bc       	rcall	800077a4 <_malloc_r>
80007750:	8e 68       	ld.sh	r8,r7[0xc]
80007752:	c0 d1       	brne	8000776c <__smakebuf_r+0x94>
80007754:	ed b8 00 09 	bld	r8,0x9
80007758:	c1 b0       	breq	8000778e <__smakebuf_r+0xb6>
8000775a:	a1 b8       	sbr	r8,0x1
8000775c:	ae 68       	st.h	r7[0xc],r8
8000775e:	ee c8 ff b9 	sub	r8,r7,-71
80007762:	8f 48       	st.w	r7[0x10],r8
80007764:	8f 08       	st.w	r7[0x0],r8
80007766:	30 18       	mov	r8,1
80007768:	8f 58       	st.w	r7[0x14],r8
8000776a:	c1 28       	rjmp	8000778e <__smakebuf_r+0xb6>
8000776c:	a7 b8       	sbr	r8,0x7
8000776e:	8f 4c       	st.w	r7[0x10],r12
80007770:	ae 68       	st.h	r7[0xc],r8
80007772:	8f 55       	st.w	r7[0x14],r5
80007774:	fe c8 06 f0 	sub	r8,pc,1776
80007778:	8f 0c       	st.w	r7[0x0],r12
8000777a:	8d a8       	st.w	r6[0x28],r8
8000777c:	58 04       	cp.w	r4,0
8000777e:	c0 80       	breq	8000778e <__smakebuf_r+0xb6>
80007780:	8e 7c       	ld.sh	r12,r7[0xe]
80007782:	e0 a0 07 3f 	rcall	80008600 <isatty>
80007786:	c0 40       	breq	8000778e <__smakebuf_r+0xb6>
80007788:	8e 68       	ld.sh	r8,r7[0xc]
8000778a:	a1 a8       	sbr	r8,0x0
8000778c:	ae 68       	st.h	r7[0xc],r8
8000778e:	2f 1d       	sub	sp,-60
80007790:	d8 22       	popm	r4-r7,pc
80007792:	d7 03       	nop

80007794 <malloc>:
80007794:	d4 01       	pushm	lr
80007796:	e0 68 01 18 	mov	r8,280
8000779a:	18 9b       	mov	r11,r12
8000779c:	70 0c       	ld.w	r12,r8[0x0]
8000779e:	c0 3c       	rcall	800077a4 <_malloc_r>
800077a0:	d8 02       	popm	pc
800077a2:	d7 03       	nop

800077a4 <_malloc_r>:
800077a4:	d4 31       	pushm	r0-r7,lr
800077a6:	f6 c8 ff f5 	sub	r8,r11,-11
800077aa:	18 95       	mov	r5,r12
800077ac:	10 97       	mov	r7,r8
800077ae:	e0 17 ff f8 	andl	r7,0xfff8
800077b2:	59 68       	cp.w	r8,22
800077b4:	f9 b7 08 10 	movls	r7,16
800077b8:	16 37       	cp.w	r7,r11
800077ba:	5f 38       	srlo	r8
800077bc:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800077c0:	c0 50       	breq	800077ca <_malloc_r+0x26>
800077c2:	30 c8       	mov	r8,12
800077c4:	99 38       	st.w	r12[0xc],r8
800077c6:	e0 8f 01 f7 	bral	80007bb4 <_malloc_r+0x410>
800077ca:	e0 a0 02 2f 	rcall	80007c28 <__malloc_lock>
800077ce:	e0 47 01 f7 	cp.w	r7,503
800077d2:	e0 8b 00 1d 	brhi	8000780c <_malloc_r+0x68>
800077d6:	ee 03 16 03 	lsr	r3,r7,0x3
800077da:	e0 68 01 1c 	mov	r8,284
800077de:	f0 03 00 38 	add	r8,r8,r3<<0x3
800077e2:	70 36       	ld.w	r6,r8[0xc]
800077e4:	10 36       	cp.w	r6,r8
800077e6:	c0 61       	brne	800077f2 <_malloc_r+0x4e>
800077e8:	ec c8 ff f8 	sub	r8,r6,-8
800077ec:	70 36       	ld.w	r6,r8[0xc]
800077ee:	10 36       	cp.w	r6,r8
800077f0:	c0 c0       	breq	80007808 <_malloc_r+0x64>
800077f2:	6c 18       	ld.w	r8,r6[0x4]
800077f4:	e0 18 ff fc 	andl	r8,0xfffc
800077f8:	6c 3a       	ld.w	r10,r6[0xc]
800077fa:	ec 08 00 09 	add	r9,r6,r8
800077fe:	0a 9c       	mov	r12,r5
80007800:	6c 28       	ld.w	r8,r6[0x8]
80007802:	95 28       	st.w	r10[0x8],r8
80007804:	91 3a       	st.w	r8[0xc],r10
80007806:	c4 78       	rjmp	80007894 <_malloc_r+0xf0>
80007808:	2f e3       	sub	r3,-2
8000780a:	c4 d8       	rjmp	800078a4 <_malloc_r+0x100>
8000780c:	ee 03 16 09 	lsr	r3,r7,0x9
80007810:	c0 41       	brne	80007818 <_malloc_r+0x74>
80007812:	ee 03 16 03 	lsr	r3,r7,0x3
80007816:	c2 68       	rjmp	80007862 <_malloc_r+0xbe>
80007818:	58 43       	cp.w	r3,4
8000781a:	e0 8b 00 06 	brhi	80007826 <_malloc_r+0x82>
8000781e:	ee 03 16 06 	lsr	r3,r7,0x6
80007822:	2c 83       	sub	r3,-56
80007824:	c1 f8       	rjmp	80007862 <_malloc_r+0xbe>
80007826:	59 43       	cp.w	r3,20
80007828:	e0 8b 00 04 	brhi	80007830 <_malloc_r+0x8c>
8000782c:	2a 53       	sub	r3,-91
8000782e:	c1 a8       	rjmp	80007862 <_malloc_r+0xbe>
80007830:	e0 43 00 54 	cp.w	r3,84
80007834:	e0 8b 00 06 	brhi	80007840 <_malloc_r+0x9c>
80007838:	ee 03 16 0c 	lsr	r3,r7,0xc
8000783c:	29 23       	sub	r3,-110
8000783e:	c1 28       	rjmp	80007862 <_malloc_r+0xbe>
80007840:	e0 43 01 54 	cp.w	r3,340
80007844:	e0 8b 00 06 	brhi	80007850 <_malloc_r+0xac>
80007848:	ee 03 16 0f 	lsr	r3,r7,0xf
8000784c:	28 93       	sub	r3,-119
8000784e:	c0 a8       	rjmp	80007862 <_malloc_r+0xbe>
80007850:	e0 43 05 54 	cp.w	r3,1364
80007854:	e0 88 00 04 	brls	8000785c <_malloc_r+0xb8>
80007858:	37 e3       	mov	r3,126
8000785a:	c0 48       	rjmp	80007862 <_malloc_r+0xbe>
8000785c:	ee 03 16 12 	lsr	r3,r7,0x12
80007860:	28 43       	sub	r3,-124
80007862:	e0 6a 01 1c 	mov	r10,284
80007866:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000786a:	74 36       	ld.w	r6,r10[0xc]
8000786c:	c1 98       	rjmp	8000789e <_malloc_r+0xfa>
8000786e:	6c 19       	ld.w	r9,r6[0x4]
80007870:	e0 19 ff fc 	andl	r9,0xfffc
80007874:	f2 07 01 0b 	sub	r11,r9,r7
80007878:	58 fb       	cp.w	r11,15
8000787a:	e0 8a 00 04 	brle	80007882 <_malloc_r+0xde>
8000787e:	20 13       	sub	r3,1
80007880:	c1 18       	rjmp	800078a2 <_malloc_r+0xfe>
80007882:	6c 38       	ld.w	r8,r6[0xc]
80007884:	58 0b       	cp.w	r11,0
80007886:	c0 b5       	brlt	8000789c <_malloc_r+0xf8>
80007888:	6c 2a       	ld.w	r10,r6[0x8]
8000788a:	ec 09 00 09 	add	r9,r6,r9
8000788e:	0a 9c       	mov	r12,r5
80007890:	91 2a       	st.w	r8[0x8],r10
80007892:	95 38       	st.w	r10[0xc],r8
80007894:	72 18       	ld.w	r8,r9[0x4]
80007896:	a1 a8       	sbr	r8,0x0
80007898:	93 18       	st.w	r9[0x4],r8
8000789a:	cb c8       	rjmp	80007a12 <_malloc_r+0x26e>
8000789c:	10 96       	mov	r6,r8
8000789e:	14 36       	cp.w	r6,r10
800078a0:	ce 71       	brne	8000786e <_malloc_r+0xca>
800078a2:	2f f3       	sub	r3,-1
800078a4:	e0 6a 01 1c 	mov	r10,284
800078a8:	f4 cc ff f8 	sub	r12,r10,-8
800078ac:	78 26       	ld.w	r6,r12[0x8]
800078ae:	18 36       	cp.w	r6,r12
800078b0:	c6 c0       	breq	80007988 <_malloc_r+0x1e4>
800078b2:	6c 19       	ld.w	r9,r6[0x4]
800078b4:	e0 19 ff fc 	andl	r9,0xfffc
800078b8:	f2 07 01 08 	sub	r8,r9,r7
800078bc:	58 f8       	cp.w	r8,15
800078be:	e0 89 00 8f 	brgt	800079dc <_malloc_r+0x238>
800078c2:	99 3c       	st.w	r12[0xc],r12
800078c4:	99 2c       	st.w	r12[0x8],r12
800078c6:	58 08       	cp.w	r8,0
800078c8:	c0 55       	brlt	800078d2 <_malloc_r+0x12e>
800078ca:	ec 09 00 09 	add	r9,r6,r9
800078ce:	0a 9c       	mov	r12,r5
800078d0:	ce 2b       	rjmp	80007894 <_malloc_r+0xf0>
800078d2:	e0 49 01 ff 	cp.w	r9,511
800078d6:	e0 8b 00 13 	brhi	800078fc <_malloc_r+0x158>
800078da:	a3 99       	lsr	r9,0x3
800078dc:	f4 09 00 38 	add	r8,r10,r9<<0x3
800078e0:	70 2b       	ld.w	r11,r8[0x8]
800078e2:	8d 38       	st.w	r6[0xc],r8
800078e4:	8d 2b       	st.w	r6[0x8],r11
800078e6:	97 36       	st.w	r11[0xc],r6
800078e8:	91 26       	st.w	r8[0x8],r6
800078ea:	a3 49       	asr	r9,0x2
800078ec:	74 18       	ld.w	r8,r10[0x4]
800078ee:	30 1b       	mov	r11,1
800078f0:	f6 09 09 49 	lsl	r9,r11,r9
800078f4:	f1 e9 10 09 	or	r9,r8,r9
800078f8:	95 19       	st.w	r10[0x4],r9
800078fa:	c4 78       	rjmp	80007988 <_malloc_r+0x1e4>
800078fc:	f2 0a 16 09 	lsr	r10,r9,0x9
80007900:	58 4a       	cp.w	r10,4
80007902:	e0 8b 00 07 	brhi	80007910 <_malloc_r+0x16c>
80007906:	f2 0a 16 06 	lsr	r10,r9,0x6
8000790a:	2c 8a       	sub	r10,-56
8000790c:	c2 08       	rjmp	8000794c <_malloc_r+0x1a8>
8000790e:	d7 03       	nop
80007910:	59 4a       	cp.w	r10,20
80007912:	e0 8b 00 04 	brhi	8000791a <_malloc_r+0x176>
80007916:	2a 5a       	sub	r10,-91
80007918:	c1 a8       	rjmp	8000794c <_malloc_r+0x1a8>
8000791a:	e0 4a 00 54 	cp.w	r10,84
8000791e:	e0 8b 00 06 	brhi	8000792a <_malloc_r+0x186>
80007922:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007926:	29 2a       	sub	r10,-110
80007928:	c1 28       	rjmp	8000794c <_malloc_r+0x1a8>
8000792a:	e0 4a 01 54 	cp.w	r10,340
8000792e:	e0 8b 00 06 	brhi	8000793a <_malloc_r+0x196>
80007932:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007936:	28 9a       	sub	r10,-119
80007938:	c0 a8       	rjmp	8000794c <_malloc_r+0x1a8>
8000793a:	e0 4a 05 54 	cp.w	r10,1364
8000793e:	e0 88 00 04 	brls	80007946 <_malloc_r+0x1a2>
80007942:	37 ea       	mov	r10,126
80007944:	c0 48       	rjmp	8000794c <_malloc_r+0x1a8>
80007946:	f2 0a 16 12 	lsr	r10,r9,0x12
8000794a:	28 4a       	sub	r10,-124
8000794c:	e0 6b 01 1c 	mov	r11,284
80007950:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007954:	68 28       	ld.w	r8,r4[0x8]
80007956:	08 38       	cp.w	r8,r4
80007958:	c0 e1       	brne	80007974 <_malloc_r+0x1d0>
8000795a:	76 19       	ld.w	r9,r11[0x4]
8000795c:	a3 4a       	asr	r10,0x2
8000795e:	30 1e       	mov	lr,1
80007960:	fc 0a 09 4a 	lsl	r10,lr,r10
80007964:	f3 ea 10 0a 	or	r10,r9,r10
80007968:	10 99       	mov	r9,r8
8000796a:	97 1a       	st.w	r11[0x4],r10
8000796c:	c0 a8       	rjmp	80007980 <_malloc_r+0x1dc>
8000796e:	70 28       	ld.w	r8,r8[0x8]
80007970:	08 38       	cp.w	r8,r4
80007972:	c0 60       	breq	8000797e <_malloc_r+0x1da>
80007974:	70 1a       	ld.w	r10,r8[0x4]
80007976:	e0 1a ff fc 	andl	r10,0xfffc
8000797a:	14 39       	cp.w	r9,r10
8000797c:	cf 93       	brcs	8000796e <_malloc_r+0x1ca>
8000797e:	70 39       	ld.w	r9,r8[0xc]
80007980:	8d 39       	st.w	r6[0xc],r9
80007982:	8d 28       	st.w	r6[0x8],r8
80007984:	91 36       	st.w	r8[0xc],r6
80007986:	93 26       	st.w	r9[0x8],r6
80007988:	e6 08 14 02 	asr	r8,r3,0x2
8000798c:	30 1b       	mov	r11,1
8000798e:	e0 64 01 1c 	mov	r4,284
80007992:	f6 08 09 4b 	lsl	r11,r11,r8
80007996:	68 18       	ld.w	r8,r4[0x4]
80007998:	10 3b       	cp.w	r11,r8
8000799a:	e0 8b 00 69 	brhi	80007a6c <_malloc_r+0x2c8>
8000799e:	f7 e8 00 09 	and	r9,r11,r8
800079a2:	c0 b1       	brne	800079b8 <_malloc_r+0x214>
800079a4:	e0 13 ff fc 	andl	r3,0xfffc
800079a8:	a1 7b       	lsl	r11,0x1
800079aa:	2f c3       	sub	r3,-4
800079ac:	c0 38       	rjmp	800079b2 <_malloc_r+0x20e>
800079ae:	2f c3       	sub	r3,-4
800079b0:	a1 7b       	lsl	r11,0x1
800079b2:	f7 e8 00 09 	and	r9,r11,r8
800079b6:	cf c0       	breq	800079ae <_malloc_r+0x20a>
800079b8:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800079bc:	06 92       	mov	r2,r3
800079be:	1c 91       	mov	r1,lr
800079c0:	62 36       	ld.w	r6,r1[0xc]
800079c2:	c2 d8       	rjmp	80007a1c <_malloc_r+0x278>
800079c4:	6c 1a       	ld.w	r10,r6[0x4]
800079c6:	e0 1a ff fc 	andl	r10,0xfffc
800079ca:	f4 07 01 08 	sub	r8,r10,r7
800079ce:	58 f8       	cp.w	r8,15
800079d0:	e0 8a 00 15 	brle	800079fa <_malloc_r+0x256>
800079d4:	6c 3a       	ld.w	r10,r6[0xc]
800079d6:	6c 29       	ld.w	r9,r6[0x8]
800079d8:	95 29       	st.w	r10[0x8],r9
800079da:	93 3a       	st.w	r9[0xc],r10
800079dc:	0e 99       	mov	r9,r7
800079de:	ec 07 00 07 	add	r7,r6,r7
800079e2:	a1 a9       	sbr	r9,0x0
800079e4:	99 37       	st.w	r12[0xc],r7
800079e6:	99 27       	st.w	r12[0x8],r7
800079e8:	8d 19       	st.w	r6[0x4],r9
800079ea:	ee 08 09 08 	st.w	r7[r8],r8
800079ee:	8f 2c       	st.w	r7[0x8],r12
800079f0:	8f 3c       	st.w	r7[0xc],r12
800079f2:	a1 a8       	sbr	r8,0x0
800079f4:	0a 9c       	mov	r12,r5
800079f6:	8f 18       	st.w	r7[0x4],r8
800079f8:	c0 d8       	rjmp	80007a12 <_malloc_r+0x26e>
800079fa:	6c 39       	ld.w	r9,r6[0xc]
800079fc:	58 08       	cp.w	r8,0
800079fe:	c0 e5       	brlt	80007a1a <_malloc_r+0x276>
80007a00:	ec 0a 00 0a 	add	r10,r6,r10
80007a04:	74 18       	ld.w	r8,r10[0x4]
80007a06:	a1 a8       	sbr	r8,0x0
80007a08:	0a 9c       	mov	r12,r5
80007a0a:	95 18       	st.w	r10[0x4],r8
80007a0c:	6c 28       	ld.w	r8,r6[0x8]
80007a0e:	93 28       	st.w	r9[0x8],r8
80007a10:	91 39       	st.w	r8[0xc],r9
80007a12:	c0 cd       	rcall	80007c2a <__malloc_unlock>
80007a14:	ec cc ff f8 	sub	r12,r6,-8
80007a18:	d8 32       	popm	r0-r7,pc
80007a1a:	12 96       	mov	r6,r9
80007a1c:	02 36       	cp.w	r6,r1
80007a1e:	cd 31       	brne	800079c4 <_malloc_r+0x220>
80007a20:	2f f2       	sub	r2,-1
80007a22:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007a26:	c0 30       	breq	80007a2c <_malloc_r+0x288>
80007a28:	2f 81       	sub	r1,-8
80007a2a:	cc bb       	rjmp	800079c0 <_malloc_r+0x21c>
80007a2c:	1c 98       	mov	r8,lr
80007a2e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007a32:	c0 81       	brne	80007a42 <_malloc_r+0x29e>
80007a34:	68 19       	ld.w	r9,r4[0x4]
80007a36:	f6 08 11 ff 	rsub	r8,r11,-1
80007a3a:	f3 e8 00 08 	and	r8,r9,r8
80007a3e:	89 18       	st.w	r4[0x4],r8
80007a40:	c0 78       	rjmp	80007a4e <_malloc_r+0x2aa>
80007a42:	f0 c9 00 08 	sub	r9,r8,8
80007a46:	20 13       	sub	r3,1
80007a48:	70 08       	ld.w	r8,r8[0x0]
80007a4a:	12 38       	cp.w	r8,r9
80007a4c:	cf 10       	breq	80007a2e <_malloc_r+0x28a>
80007a4e:	a1 7b       	lsl	r11,0x1
80007a50:	68 18       	ld.w	r8,r4[0x4]
80007a52:	10 3b       	cp.w	r11,r8
80007a54:	e0 8b 00 0c 	brhi	80007a6c <_malloc_r+0x2c8>
80007a58:	58 0b       	cp.w	r11,0
80007a5a:	c0 90       	breq	80007a6c <_malloc_r+0x2c8>
80007a5c:	04 93       	mov	r3,r2
80007a5e:	c0 38       	rjmp	80007a64 <_malloc_r+0x2c0>
80007a60:	2f c3       	sub	r3,-4
80007a62:	a1 7b       	lsl	r11,0x1
80007a64:	f7 e8 00 09 	and	r9,r11,r8
80007a68:	ca 81       	brne	800079b8 <_malloc_r+0x214>
80007a6a:	cf bb       	rjmp	80007a60 <_malloc_r+0x2bc>
80007a6c:	68 23       	ld.w	r3,r4[0x8]
80007a6e:	66 12       	ld.w	r2,r3[0x4]
80007a70:	e0 12 ff fc 	andl	r2,0xfffc
80007a74:	0e 32       	cp.w	r2,r7
80007a76:	5f 39       	srlo	r9
80007a78:	e4 07 01 08 	sub	r8,r2,r7
80007a7c:	58 f8       	cp.w	r8,15
80007a7e:	5f aa       	srle	r10
80007a80:	f5 e9 10 09 	or	r9,r10,r9
80007a84:	e0 80 00 9a 	breq	80007bb8 <_malloc_r+0x414>
80007a88:	e0 68 06 44 	mov	r8,1604
80007a8c:	70 01       	ld.w	r1,r8[0x0]
80007a8e:	e0 68 05 28 	mov	r8,1320
80007a92:	2f 01       	sub	r1,-16
80007a94:	70 08       	ld.w	r8,r8[0x0]
80007a96:	0e 01       	add	r1,r7
80007a98:	5b f8       	cp.w	r8,-1
80007a9a:	c0 40       	breq	80007aa2 <_malloc_r+0x2fe>
80007a9c:	28 11       	sub	r1,-127
80007a9e:	e0 11 ff 80 	andl	r1,0xff80
80007aa2:	02 9b       	mov	r11,r1
80007aa4:	0a 9c       	mov	r12,r5
80007aa6:	e0 a0 05 31 	rcall	80008508 <_sbrk_r>
80007aaa:	18 96       	mov	r6,r12
80007aac:	5b fc       	cp.w	r12,-1
80007aae:	c7 50       	breq	80007b98 <_malloc_r+0x3f4>
80007ab0:	e6 02 00 08 	add	r8,r3,r2
80007ab4:	10 3c       	cp.w	r12,r8
80007ab6:	c0 32       	brcc	80007abc <_malloc_r+0x318>
80007ab8:	08 33       	cp.w	r3,r4
80007aba:	c6 f1       	brne	80007b98 <_malloc_r+0x3f4>
80007abc:	e0 6a 06 48 	mov	r10,1608
80007ac0:	74 09       	ld.w	r9,r10[0x0]
80007ac2:	e2 09 00 09 	add	r9,r1,r9
80007ac6:	95 09       	st.w	r10[0x0],r9
80007ac8:	10 36       	cp.w	r6,r8
80007aca:	c0 a1       	brne	80007ade <_malloc_r+0x33a>
80007acc:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007ad0:	c0 71       	brne	80007ade <_malloc_r+0x33a>
80007ad2:	e2 02 00 02 	add	r2,r1,r2
80007ad6:	68 28       	ld.w	r8,r4[0x8]
80007ad8:	a1 a2       	sbr	r2,0x0
80007ada:	91 12       	st.w	r8[0x4],r2
80007adc:	c4 f8       	rjmp	80007b7a <_malloc_r+0x3d6>
80007ade:	e0 6a 05 28 	mov	r10,1320
80007ae2:	74 0b       	ld.w	r11,r10[0x0]
80007ae4:	5b fb       	cp.w	r11,-1
80007ae6:	c0 31       	brne	80007aec <_malloc_r+0x348>
80007ae8:	95 06       	st.w	r10[0x0],r6
80007aea:	c0 78       	rjmp	80007af8 <_malloc_r+0x354>
80007aec:	ec 09 00 09 	add	r9,r6,r9
80007af0:	e0 6a 06 48 	mov	r10,1608
80007af4:	10 19       	sub	r9,r8
80007af6:	95 09       	st.w	r10[0x0],r9
80007af8:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007afc:	f0 09 11 08 	rsub	r9,r8,8
80007b00:	58 08       	cp.w	r8,0
80007b02:	f2 08 17 10 	movne	r8,r9
80007b06:	ed d8 e1 06 	addne	r6,r6,r8
80007b0a:	28 08       	sub	r8,-128
80007b0c:	ec 01 00 01 	add	r1,r6,r1
80007b10:	0a 9c       	mov	r12,r5
80007b12:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007b16:	f0 01 01 01 	sub	r1,r8,r1
80007b1a:	02 9b       	mov	r11,r1
80007b1c:	e0 a0 04 f6 	rcall	80008508 <_sbrk_r>
80007b20:	e0 68 06 48 	mov	r8,1608
80007b24:	5b fc       	cp.w	r12,-1
80007b26:	ec 0c 17 00 	moveq	r12,r6
80007b2a:	f9 b1 00 00 	moveq	r1,0
80007b2e:	70 09       	ld.w	r9,r8[0x0]
80007b30:	0c 1c       	sub	r12,r6
80007b32:	89 26       	st.w	r4[0x8],r6
80007b34:	02 0c       	add	r12,r1
80007b36:	12 01       	add	r1,r9
80007b38:	a1 ac       	sbr	r12,0x0
80007b3a:	91 01       	st.w	r8[0x0],r1
80007b3c:	8d 1c       	st.w	r6[0x4],r12
80007b3e:	08 33       	cp.w	r3,r4
80007b40:	c1 d0       	breq	80007b7a <_malloc_r+0x3d6>
80007b42:	58 f2       	cp.w	r2,15
80007b44:	e0 8b 00 05 	brhi	80007b4e <_malloc_r+0x3aa>
80007b48:	30 18       	mov	r8,1
80007b4a:	8d 18       	st.w	r6[0x4],r8
80007b4c:	c2 68       	rjmp	80007b98 <_malloc_r+0x3f4>
80007b4e:	30 59       	mov	r9,5
80007b50:	20 c2       	sub	r2,12
80007b52:	e0 12 ff f8 	andl	r2,0xfff8
80007b56:	e6 02 00 08 	add	r8,r3,r2
80007b5a:	91 29       	st.w	r8[0x8],r9
80007b5c:	91 19       	st.w	r8[0x4],r9
80007b5e:	66 18       	ld.w	r8,r3[0x4]
80007b60:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b64:	e5 e8 10 08 	or	r8,r2,r8
80007b68:	87 18       	st.w	r3[0x4],r8
80007b6a:	58 f2       	cp.w	r2,15
80007b6c:	e0 88 00 07 	brls	80007b7a <_malloc_r+0x3d6>
80007b70:	e6 cb ff f8 	sub	r11,r3,-8
80007b74:	0a 9c       	mov	r12,r5
80007b76:	fe b0 fb 71 	rcall	80007258 <_free_r>
80007b7a:	e0 69 06 40 	mov	r9,1600
80007b7e:	72 0a       	ld.w	r10,r9[0x0]
80007b80:	e0 68 06 48 	mov	r8,1608
80007b84:	70 08       	ld.w	r8,r8[0x0]
80007b86:	14 38       	cp.w	r8,r10
80007b88:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007b8c:	e0 69 06 3c 	mov	r9,1596
80007b90:	72 0a       	ld.w	r10,r9[0x0]
80007b92:	14 38       	cp.w	r8,r10
80007b94:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007b98:	68 28       	ld.w	r8,r4[0x8]
80007b9a:	70 18       	ld.w	r8,r8[0x4]
80007b9c:	e0 18 ff fc 	andl	r8,0xfffc
80007ba0:	0e 38       	cp.w	r8,r7
80007ba2:	5f 39       	srlo	r9
80007ba4:	0e 18       	sub	r8,r7
80007ba6:	58 f8       	cp.w	r8,15
80007ba8:	5f aa       	srle	r10
80007baa:	f5 e9 10 09 	or	r9,r10,r9
80007bae:	c0 50       	breq	80007bb8 <_malloc_r+0x414>
80007bb0:	0a 9c       	mov	r12,r5
80007bb2:	c3 cc       	rcall	80007c2a <__malloc_unlock>
80007bb4:	d8 3a       	popm	r0-r7,pc,r12=0
80007bb6:	d7 03       	nop
80007bb8:	68 26       	ld.w	r6,r4[0x8]
80007bba:	a1 a8       	sbr	r8,0x0
80007bbc:	0e 99       	mov	r9,r7
80007bbe:	a1 a9       	sbr	r9,0x0
80007bc0:	8d 19       	st.w	r6[0x4],r9
80007bc2:	ec 07 00 07 	add	r7,r6,r7
80007bc6:	0a 9c       	mov	r12,r5
80007bc8:	89 27       	st.w	r4[0x8],r7
80007bca:	8f 18       	st.w	r7[0x4],r8
80007bcc:	c2 fc       	rcall	80007c2a <__malloc_unlock>
80007bce:	ec cc ff f8 	sub	r12,r6,-8
80007bd2:	d8 32       	popm	r0-r7,pc

80007bd4 <memchr>:
80007bd4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007bd8:	c0 68       	rjmp	80007be4 <memchr+0x10>
80007bda:	20 1a       	sub	r10,1
80007bdc:	19 88       	ld.ub	r8,r12[0x0]
80007bde:	16 38       	cp.w	r8,r11
80007be0:	5e 0c       	reteq	r12
80007be2:	2f fc       	sub	r12,-1
80007be4:	58 0a       	cp.w	r10,0
80007be6:	cf a1       	brne	80007bda <memchr+0x6>
80007be8:	5e fa       	retal	r10

80007bea <memmove>:
80007bea:	d4 01       	pushm	lr
80007bec:	18 3b       	cp.w	r11,r12
80007bee:	c1 92       	brcc	80007c20 <memmove+0x36>
80007bf0:	f6 0a 00 09 	add	r9,r11,r10
80007bf4:	12 3c       	cp.w	r12,r9
80007bf6:	c1 52       	brcc	80007c20 <memmove+0x36>
80007bf8:	f8 0a 00 0b 	add	r11,r12,r10
80007bfc:	30 08       	mov	r8,0
80007bfe:	c0 68       	rjmp	80007c0a <memmove+0x20>
80007c00:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007c04:	20 1a       	sub	r10,1
80007c06:	f6 08 0b 0e 	st.b	r11[r8],lr
80007c0a:	20 18       	sub	r8,1
80007c0c:	58 0a       	cp.w	r10,0
80007c0e:	cf 91       	brne	80007c00 <memmove+0x16>
80007c10:	d8 02       	popm	pc
80007c12:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007c16:	20 1a       	sub	r10,1
80007c18:	f8 08 0b 09 	st.b	r12[r8],r9
80007c1c:	2f f8       	sub	r8,-1
80007c1e:	c0 28       	rjmp	80007c22 <memmove+0x38>
80007c20:	30 08       	mov	r8,0
80007c22:	58 0a       	cp.w	r10,0
80007c24:	cf 71       	brne	80007c12 <memmove+0x28>
80007c26:	d8 02       	popm	pc

80007c28 <__malloc_lock>:
80007c28:	5e fc       	retal	r12

80007c2a <__malloc_unlock>:
80007c2a:	5e fc       	retal	r12

80007c2c <__hi0bits>:
80007c2c:	18 98       	mov	r8,r12
80007c2e:	e0 1c 00 00 	andl	r12,0x0
80007c32:	f0 09 15 10 	lsl	r9,r8,0x10
80007c36:	58 0c       	cp.w	r12,0
80007c38:	f2 08 17 00 	moveq	r8,r9
80007c3c:	f9 bc 00 10 	moveq	r12,16
80007c40:	f9 bc 01 00 	movne	r12,0
80007c44:	10 9a       	mov	r10,r8
80007c46:	f0 09 15 08 	lsl	r9,r8,0x8
80007c4a:	e6 1a ff 00 	andh	r10,0xff00,COH
80007c4e:	f7 bc 00 f8 	subeq	r12,-8
80007c52:	f2 08 17 00 	moveq	r8,r9
80007c56:	10 9a       	mov	r10,r8
80007c58:	f0 09 15 04 	lsl	r9,r8,0x4
80007c5c:	e6 1a f0 00 	andh	r10,0xf000,COH
80007c60:	f7 bc 00 fc 	subeq	r12,-4
80007c64:	f2 08 17 00 	moveq	r8,r9
80007c68:	10 9a       	mov	r10,r8
80007c6a:	f0 09 15 02 	lsl	r9,r8,0x2
80007c6e:	e6 1a c0 00 	andh	r10,0xc000,COH
80007c72:	f7 bc 00 fe 	subeq	r12,-2
80007c76:	f2 08 17 00 	moveq	r8,r9
80007c7a:	58 08       	cp.w	r8,0
80007c7c:	5e 5c       	retlt	r12
80007c7e:	ed b8 00 1e 	bld	r8,0x1e
80007c82:	f9 bc 01 20 	movne	r12,32
80007c86:	f7 bc 00 ff 	subeq	r12,-1
80007c8a:	5e fc       	retal	r12

80007c8c <__lo0bits>:
80007c8c:	18 99       	mov	r9,r12
80007c8e:	78 08       	ld.w	r8,r12[0x0]
80007c90:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007c94:	c1 50       	breq	80007cbe <__lo0bits+0x32>
80007c96:	ed b8 00 00 	bld	r8,0x0
80007c9a:	c0 21       	brne	80007c9e <__lo0bits+0x12>
80007c9c:	5e fd       	retal	0
80007c9e:	10 9b       	mov	r11,r8
80007ca0:	f0 0a 16 01 	lsr	r10,r8,0x1
80007ca4:	e2 1b 00 02 	andl	r11,0x2,COH
80007ca8:	a3 88       	lsr	r8,0x2
80007caa:	58 0b       	cp.w	r11,0
80007cac:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007cb0:	f9 bc 01 01 	movne	r12,1
80007cb4:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007cb8:	f9 bc 00 02 	moveq	r12,2
80007cbc:	5e fc       	retal	r12
80007cbe:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007cc2:	f0 0b 16 10 	lsr	r11,r8,0x10
80007cc6:	58 0a       	cp.w	r10,0
80007cc8:	f6 08 17 00 	moveq	r8,r11
80007ccc:	f9 bc 00 10 	moveq	r12,16
80007cd0:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007cd4:	f0 0a 16 08 	lsr	r10,r8,0x8
80007cd8:	58 0b       	cp.w	r11,0
80007cda:	f7 bc 00 f8 	subeq	r12,-8
80007cde:	f4 08 17 00 	moveq	r8,r10
80007ce2:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007ce6:	f0 0a 16 04 	lsr	r10,r8,0x4
80007cea:	58 0b       	cp.w	r11,0
80007cec:	f7 bc 00 fc 	subeq	r12,-4
80007cf0:	f4 08 17 00 	moveq	r8,r10
80007cf4:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007cf8:	f0 0a 16 02 	lsr	r10,r8,0x2
80007cfc:	58 0b       	cp.w	r11,0
80007cfe:	f7 bc 00 fe 	subeq	r12,-2
80007d02:	f4 08 17 00 	moveq	r8,r10
80007d06:	ed b8 00 00 	bld	r8,0x0
80007d0a:	c0 60       	breq	80007d16 <__lo0bits+0x8a>
80007d0c:	a1 98       	lsr	r8,0x1
80007d0e:	c0 31       	brne	80007d14 <__lo0bits+0x88>
80007d10:	32 0c       	mov	r12,32
80007d12:	5e fc       	retal	r12
80007d14:	2f fc       	sub	r12,-1
80007d16:	93 08       	st.w	r9[0x0],r8
80007d18:	5e fc       	retal	r12

80007d1a <__mcmp>:
80007d1a:	d4 01       	pushm	lr
80007d1c:	18 98       	mov	r8,r12
80007d1e:	76 49       	ld.w	r9,r11[0x10]
80007d20:	78 4c       	ld.w	r12,r12[0x10]
80007d22:	12 1c       	sub	r12,r9
80007d24:	c1 31       	brne	80007d4a <__mcmp+0x30>
80007d26:	2f b9       	sub	r9,-5
80007d28:	a3 69       	lsl	r9,0x2
80007d2a:	12 0b       	add	r11,r9
80007d2c:	f0 09 00 09 	add	r9,r8,r9
80007d30:	2e c8       	sub	r8,-20
80007d32:	13 4e       	ld.w	lr,--r9
80007d34:	17 4a       	ld.w	r10,--r11
80007d36:	14 3e       	cp.w	lr,r10
80007d38:	c0 60       	breq	80007d44 <__mcmp+0x2a>
80007d3a:	f9 bc 03 ff 	movlo	r12,-1
80007d3e:	f9 bc 02 01 	movhs	r12,1
80007d42:	d8 02       	popm	pc
80007d44:	10 39       	cp.w	r9,r8
80007d46:	fe 9b ff f6 	brhi	80007d32 <__mcmp+0x18>
80007d4a:	d8 02       	popm	pc

80007d4c <_Bfree>:
80007d4c:	d4 21       	pushm	r4-r7,lr
80007d4e:	18 97       	mov	r7,r12
80007d50:	16 95       	mov	r5,r11
80007d52:	78 96       	ld.w	r6,r12[0x24]
80007d54:	58 06       	cp.w	r6,0
80007d56:	c0 91       	brne	80007d68 <_Bfree+0x1c>
80007d58:	31 0c       	mov	r12,16
80007d5a:	fe b0 fd 1d 	rcall	80007794 <malloc>
80007d5e:	99 36       	st.w	r12[0xc],r6
80007d60:	8f 9c       	st.w	r7[0x24],r12
80007d62:	99 16       	st.w	r12[0x4],r6
80007d64:	99 26       	st.w	r12[0x8],r6
80007d66:	99 06       	st.w	r12[0x0],r6
80007d68:	58 05       	cp.w	r5,0
80007d6a:	c0 90       	breq	80007d7c <_Bfree+0x30>
80007d6c:	6a 19       	ld.w	r9,r5[0x4]
80007d6e:	6e 98       	ld.w	r8,r7[0x24]
80007d70:	70 38       	ld.w	r8,r8[0xc]
80007d72:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007d76:	8b 0a       	st.w	r5[0x0],r10
80007d78:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007d7c:	d8 22       	popm	r4-r7,pc
80007d7e:	d7 03       	nop

80007d80 <_Balloc>:
80007d80:	d4 21       	pushm	r4-r7,lr
80007d82:	18 97       	mov	r7,r12
80007d84:	16 96       	mov	r6,r11
80007d86:	78 95       	ld.w	r5,r12[0x24]
80007d88:	58 05       	cp.w	r5,0
80007d8a:	c0 91       	brne	80007d9c <_Balloc+0x1c>
80007d8c:	31 0c       	mov	r12,16
80007d8e:	fe b0 fd 03 	rcall	80007794 <malloc>
80007d92:	99 35       	st.w	r12[0xc],r5
80007d94:	8f 9c       	st.w	r7[0x24],r12
80007d96:	99 15       	st.w	r12[0x4],r5
80007d98:	99 25       	st.w	r12[0x8],r5
80007d9a:	99 05       	st.w	r12[0x0],r5
80007d9c:	6e 95       	ld.w	r5,r7[0x24]
80007d9e:	6a 38       	ld.w	r8,r5[0xc]
80007da0:	58 08       	cp.w	r8,0
80007da2:	c0 b1       	brne	80007db8 <_Balloc+0x38>
80007da4:	31 0a       	mov	r10,16
80007da6:	30 4b       	mov	r11,4
80007da8:	0e 9c       	mov	r12,r7
80007daa:	e0 a0 04 93 	rcall	800086d0 <_calloc_r>
80007dae:	8b 3c       	st.w	r5[0xc],r12
80007db0:	6e 98       	ld.w	r8,r7[0x24]
80007db2:	70 3c       	ld.w	r12,r8[0xc]
80007db4:	58 0c       	cp.w	r12,0
80007db6:	c1 b0       	breq	80007dec <_Balloc+0x6c>
80007db8:	6e 98       	ld.w	r8,r7[0x24]
80007dba:	70 38       	ld.w	r8,r8[0xc]
80007dbc:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007dc0:	70 0c       	ld.w	r12,r8[0x0]
80007dc2:	58 0c       	cp.w	r12,0
80007dc4:	c0 40       	breq	80007dcc <_Balloc+0x4c>
80007dc6:	78 09       	ld.w	r9,r12[0x0]
80007dc8:	91 09       	st.w	r8[0x0],r9
80007dca:	c0 e8       	rjmp	80007de6 <_Balloc+0x66>
80007dcc:	0e 9c       	mov	r12,r7
80007dce:	30 17       	mov	r7,1
80007dd0:	0e 9b       	mov	r11,r7
80007dd2:	ee 06 09 47 	lsl	r7,r7,r6
80007dd6:	ee ca ff fb 	sub	r10,r7,-5
80007dda:	a3 6a       	lsl	r10,0x2
80007ddc:	e0 a0 04 7a 	rcall	800086d0 <_calloc_r>
80007de0:	c0 60       	breq	80007dec <_Balloc+0x6c>
80007de2:	99 16       	st.w	r12[0x4],r6
80007de4:	99 27       	st.w	r12[0x8],r7
80007de6:	30 08       	mov	r8,0
80007de8:	99 38       	st.w	r12[0xc],r8
80007dea:	99 48       	st.w	r12[0x10],r8
80007dec:	d8 22       	popm	r4-r7,pc
80007dee:	d7 03       	nop

80007df0 <__d2b>:
80007df0:	d4 31       	pushm	r0-r7,lr
80007df2:	20 2d       	sub	sp,8
80007df4:	16 93       	mov	r3,r11
80007df6:	12 96       	mov	r6,r9
80007df8:	10 95       	mov	r5,r8
80007dfa:	14 92       	mov	r2,r10
80007dfc:	30 1b       	mov	r11,1
80007dfe:	cc 1f       	rcall	80007d80 <_Balloc>
80007e00:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007e04:	50 09       	stdsp	sp[0x0],r9
80007e06:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007e0a:	b5 a9       	sbr	r9,0x14
80007e0c:	f0 01 16 14 	lsr	r1,r8,0x14
80007e10:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007e14:	18 94       	mov	r4,r12
80007e16:	58 02       	cp.w	r2,0
80007e18:	c1 d0       	breq	80007e52 <__d2b+0x62>
80007e1a:	fa cc ff f8 	sub	r12,sp,-8
80007e1e:	18 d2       	st.w	--r12,r2
80007e20:	c3 6f       	rcall	80007c8c <__lo0bits>
80007e22:	40 18       	lddsp	r8,sp[0x4]
80007e24:	c0 d0       	breq	80007e3e <__d2b+0x4e>
80007e26:	40 09       	lddsp	r9,sp[0x0]
80007e28:	f8 0a 11 20 	rsub	r10,r12,32
80007e2c:	f2 0a 09 4a 	lsl	r10,r9,r10
80007e30:	f5 e8 10 08 	or	r8,r10,r8
80007e34:	89 58       	st.w	r4[0x14],r8
80007e36:	f2 0c 0a 49 	lsr	r9,r9,r12
80007e3a:	50 09       	stdsp	sp[0x0],r9
80007e3c:	c0 28       	rjmp	80007e40 <__d2b+0x50>
80007e3e:	89 58       	st.w	r4[0x14],r8
80007e40:	40 08       	lddsp	r8,sp[0x0]
80007e42:	58 08       	cp.w	r8,0
80007e44:	f9 b3 01 02 	movne	r3,2
80007e48:	f9 b3 00 01 	moveq	r3,1
80007e4c:	89 68       	st.w	r4[0x18],r8
80007e4e:	89 43       	st.w	r4[0x10],r3
80007e50:	c0 88       	rjmp	80007e60 <__d2b+0x70>
80007e52:	1a 9c       	mov	r12,sp
80007e54:	c1 cf       	rcall	80007c8c <__lo0bits>
80007e56:	30 13       	mov	r3,1
80007e58:	40 08       	lddsp	r8,sp[0x0]
80007e5a:	2e 0c       	sub	r12,-32
80007e5c:	89 43       	st.w	r4[0x10],r3
80007e5e:	89 58       	st.w	r4[0x14],r8
80007e60:	58 01       	cp.w	r1,0
80007e62:	c0 90       	breq	80007e74 <__d2b+0x84>
80007e64:	e2 c1 04 33 	sub	r1,r1,1075
80007e68:	18 01       	add	r1,r12
80007e6a:	8d 01       	st.w	r6[0x0],r1
80007e6c:	f8 0c 11 35 	rsub	r12,r12,53
80007e70:	8b 0c       	st.w	r5[0x0],r12
80007e72:	c0 c8       	rjmp	80007e8a <__d2b+0x9a>
80007e74:	e6 c8 ff fc 	sub	r8,r3,-4
80007e78:	f8 cc 04 32 	sub	r12,r12,1074
80007e7c:	a5 73       	lsl	r3,0x5
80007e7e:	8d 0c       	st.w	r6[0x0],r12
80007e80:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007e84:	cd 4e       	rcall	80007c2c <__hi0bits>
80007e86:	18 13       	sub	r3,r12
80007e88:	8b 03       	st.w	r5[0x0],r3
80007e8a:	08 9c       	mov	r12,r4
80007e8c:	2f ed       	sub	sp,-8
80007e8e:	d8 32       	popm	r0-r7,pc

80007e90 <__mdiff>:
80007e90:	d4 31       	pushm	r0-r7,lr
80007e92:	74 48       	ld.w	r8,r10[0x10]
80007e94:	76 45       	ld.w	r5,r11[0x10]
80007e96:	16 97       	mov	r7,r11
80007e98:	14 96       	mov	r6,r10
80007e9a:	10 15       	sub	r5,r8
80007e9c:	c1 31       	brne	80007ec2 <__mdiff+0x32>
80007e9e:	2f b8       	sub	r8,-5
80007ea0:	ee ce ff ec 	sub	lr,r7,-20
80007ea4:	a3 68       	lsl	r8,0x2
80007ea6:	f4 08 00 0b 	add	r11,r10,r8
80007eaa:	ee 08 00 08 	add	r8,r7,r8
80007eae:	11 4a       	ld.w	r10,--r8
80007eb0:	17 49       	ld.w	r9,--r11
80007eb2:	12 3a       	cp.w	r10,r9
80007eb4:	c0 30       	breq	80007eba <__mdiff+0x2a>
80007eb6:	c0 e2       	brcc	80007ed2 <__mdiff+0x42>
80007eb8:	c0 78       	rjmp	80007ec6 <__mdiff+0x36>
80007eba:	1c 38       	cp.w	r8,lr
80007ebc:	fe 9b ff f9 	brhi	80007eae <__mdiff+0x1e>
80007ec0:	c4 98       	rjmp	80007f52 <__mdiff+0xc2>
80007ec2:	58 05       	cp.w	r5,0
80007ec4:	c0 64       	brge	80007ed0 <__mdiff+0x40>
80007ec6:	0e 98       	mov	r8,r7
80007ec8:	30 15       	mov	r5,1
80007eca:	0c 97       	mov	r7,r6
80007ecc:	10 96       	mov	r6,r8
80007ece:	c0 28       	rjmp	80007ed2 <__mdiff+0x42>
80007ed0:	30 05       	mov	r5,0
80007ed2:	6e 1b       	ld.w	r11,r7[0x4]
80007ed4:	c5 6f       	rcall	80007d80 <_Balloc>
80007ed6:	6e 49       	ld.w	r9,r7[0x10]
80007ed8:	6c 44       	ld.w	r4,r6[0x10]
80007eda:	99 35       	st.w	r12[0xc],r5
80007edc:	2f b4       	sub	r4,-5
80007ede:	f2 c5 ff fb 	sub	r5,r9,-5
80007ee2:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007ee6:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007eea:	2e c6       	sub	r6,-20
80007eec:	2e c7       	sub	r7,-20
80007eee:	f8 c8 ff ec 	sub	r8,r12,-20
80007ef2:	30 0a       	mov	r10,0
80007ef4:	0f 0e       	ld.w	lr,r7++
80007ef6:	0d 0b       	ld.w	r11,r6++
80007ef8:	fc 02 16 10 	lsr	r2,lr,0x10
80007efc:	f6 03 16 10 	lsr	r3,r11,0x10
80007f00:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007f04:	e4 03 01 03 	sub	r3,r2,r3
80007f08:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007f0c:	fc 0b 01 0b 	sub	r11,lr,r11
80007f10:	f6 0a 00 0a 	add	r10,r11,r10
80007f14:	b0 1a       	st.h	r8[0x2],r10
80007f16:	b1 4a       	asr	r10,0x10
80007f18:	e6 0a 00 0a 	add	r10,r3,r10
80007f1c:	b0 0a       	st.h	r8[0x0],r10
80007f1e:	2f c8       	sub	r8,-4
80007f20:	b1 4a       	asr	r10,0x10
80007f22:	08 36       	cp.w	r6,r4
80007f24:	ce 83       	brcs	80007ef4 <__mdiff+0x64>
80007f26:	c0 d8       	rjmp	80007f40 <__mdiff+0xb0>
80007f28:	0f 0b       	ld.w	r11,r7++
80007f2a:	f6 0e 16 10 	lsr	lr,r11,0x10
80007f2e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007f32:	16 0a       	add	r10,r11
80007f34:	b0 1a       	st.h	r8[0x2],r10
80007f36:	b1 4a       	asr	r10,0x10
80007f38:	1c 0a       	add	r10,lr
80007f3a:	b0 0a       	st.h	r8[0x0],r10
80007f3c:	2f c8       	sub	r8,-4
80007f3e:	b1 4a       	asr	r10,0x10
80007f40:	0a 37       	cp.w	r7,r5
80007f42:	cf 33       	brcs	80007f28 <__mdiff+0x98>
80007f44:	c0 28       	rjmp	80007f48 <__mdiff+0xb8>
80007f46:	20 19       	sub	r9,1
80007f48:	11 4a       	ld.w	r10,--r8
80007f4a:	58 0a       	cp.w	r10,0
80007f4c:	cf d0       	breq	80007f46 <__mdiff+0xb6>
80007f4e:	99 49       	st.w	r12[0x10],r9
80007f50:	d8 32       	popm	r0-r7,pc
80007f52:	30 0b       	mov	r11,0
80007f54:	c1 6f       	rcall	80007d80 <_Balloc>
80007f56:	30 18       	mov	r8,1
80007f58:	99 48       	st.w	r12[0x10],r8
80007f5a:	30 08       	mov	r8,0
80007f5c:	99 58       	st.w	r12[0x14],r8
80007f5e:	d8 32       	popm	r0-r7,pc

80007f60 <__lshift>:
80007f60:	d4 31       	pushm	r0-r7,lr
80007f62:	16 97       	mov	r7,r11
80007f64:	76 46       	ld.w	r6,r11[0x10]
80007f66:	f4 02 14 05 	asr	r2,r10,0x5
80007f6a:	2f f6       	sub	r6,-1
80007f6c:	14 93       	mov	r3,r10
80007f6e:	18 94       	mov	r4,r12
80007f70:	04 06       	add	r6,r2
80007f72:	76 1b       	ld.w	r11,r11[0x4]
80007f74:	6e 28       	ld.w	r8,r7[0x8]
80007f76:	c0 38       	rjmp	80007f7c <__lshift+0x1c>
80007f78:	2f fb       	sub	r11,-1
80007f7a:	a1 78       	lsl	r8,0x1
80007f7c:	10 36       	cp.w	r6,r8
80007f7e:	fe 99 ff fd 	brgt	80007f78 <__lshift+0x18>
80007f82:	08 9c       	mov	r12,r4
80007f84:	cf ee       	rcall	80007d80 <_Balloc>
80007f86:	30 09       	mov	r9,0
80007f88:	18 95       	mov	r5,r12
80007f8a:	f8 c8 ff ec 	sub	r8,r12,-20
80007f8e:	12 9a       	mov	r10,r9
80007f90:	c0 38       	rjmp	80007f96 <__lshift+0x36>
80007f92:	10 aa       	st.w	r8++,r10
80007f94:	2f f9       	sub	r9,-1
80007f96:	04 39       	cp.w	r9,r2
80007f98:	cf d5       	brlt	80007f92 <__lshift+0x32>
80007f9a:	6e 4b       	ld.w	r11,r7[0x10]
80007f9c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007fa0:	2f bb       	sub	r11,-5
80007fa2:	ee c9 ff ec 	sub	r9,r7,-20
80007fa6:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007faa:	58 03       	cp.w	r3,0
80007fac:	c1 30       	breq	80007fd2 <__lshift+0x72>
80007fae:	e6 0c 11 20 	rsub	r12,r3,32
80007fb2:	30 0a       	mov	r10,0
80007fb4:	72 02       	ld.w	r2,r9[0x0]
80007fb6:	e4 03 09 42 	lsl	r2,r2,r3
80007fba:	04 4a       	or	r10,r2
80007fbc:	10 aa       	st.w	r8++,r10
80007fbe:	13 0a       	ld.w	r10,r9++
80007fc0:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007fc4:	16 39       	cp.w	r9,r11
80007fc6:	cf 73       	brcs	80007fb4 <__lshift+0x54>
80007fc8:	91 0a       	st.w	r8[0x0],r10
80007fca:	58 0a       	cp.w	r10,0
80007fcc:	c0 70       	breq	80007fda <__lshift+0x7a>
80007fce:	2f f6       	sub	r6,-1
80007fd0:	c0 58       	rjmp	80007fda <__lshift+0x7a>
80007fd2:	13 0a       	ld.w	r10,r9++
80007fd4:	10 aa       	st.w	r8++,r10
80007fd6:	16 39       	cp.w	r9,r11
80007fd8:	cf d3       	brcs	80007fd2 <__lshift+0x72>
80007fda:	08 9c       	mov	r12,r4
80007fdc:	20 16       	sub	r6,1
80007fde:	0e 9b       	mov	r11,r7
80007fe0:	8b 46       	st.w	r5[0x10],r6
80007fe2:	cb 5e       	rcall	80007d4c <_Bfree>
80007fe4:	0a 9c       	mov	r12,r5
80007fe6:	d8 32       	popm	r0-r7,pc

80007fe8 <__multiply>:
80007fe8:	d4 31       	pushm	r0-r7,lr
80007fea:	20 2d       	sub	sp,8
80007fec:	76 49       	ld.w	r9,r11[0x10]
80007fee:	74 48       	ld.w	r8,r10[0x10]
80007ff0:	16 96       	mov	r6,r11
80007ff2:	14 95       	mov	r5,r10
80007ff4:	10 39       	cp.w	r9,r8
80007ff6:	ec 08 17 50 	movlt	r8,r6
80007ffa:	ea 06 17 50 	movlt	r6,r5
80007ffe:	f0 05 17 50 	movlt	r5,r8
80008002:	6c 28       	ld.w	r8,r6[0x8]
80008004:	76 43       	ld.w	r3,r11[0x10]
80008006:	74 42       	ld.w	r2,r10[0x10]
80008008:	76 1b       	ld.w	r11,r11[0x4]
8000800a:	e4 03 00 07 	add	r7,r2,r3
8000800e:	10 37       	cp.w	r7,r8
80008010:	f7 bb 09 ff 	subgt	r11,-1
80008014:	cb 6e       	rcall	80007d80 <_Balloc>
80008016:	ee c4 ff fb 	sub	r4,r7,-5
8000801a:	f8 c9 ff ec 	sub	r9,r12,-20
8000801e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80008022:	30 0a       	mov	r10,0
80008024:	12 98       	mov	r8,r9
80008026:	c0 28       	rjmp	8000802a <__multiply+0x42>
80008028:	10 aa       	st.w	r8++,r10
8000802a:	08 38       	cp.w	r8,r4
8000802c:	cf e3       	brcs	80008028 <__multiply+0x40>
8000802e:	2f b3       	sub	r3,-5
80008030:	2f b2       	sub	r2,-5
80008032:	ec 03 00 23 	add	r3,r6,r3<<0x2
80008036:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000803a:	ec cb ff ec 	sub	r11,r6,-20
8000803e:	50 12       	stdsp	sp[0x4],r2
80008040:	ea ca ff ec 	sub	r10,r5,-20
80008044:	c4 48       	rjmp	800080cc <__multiply+0xe4>
80008046:	94 95       	ld.uh	r5,r10[0x2]
80008048:	58 05       	cp.w	r5,0
8000804a:	c2 00       	breq	8000808a <__multiply+0xa2>
8000804c:	12 98       	mov	r8,r9
8000804e:	16 96       	mov	r6,r11
80008050:	30 0e       	mov	lr,0
80008052:	50 09       	stdsp	sp[0x0],r9
80008054:	0d 02       	ld.w	r2,r6++
80008056:	e4 00 16 10 	lsr	r0,r2,0x10
8000805a:	70 01       	ld.w	r1,r8[0x0]
8000805c:	70 09       	ld.w	r9,r8[0x0]
8000805e:	b1 81       	lsr	r1,0x10
80008060:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80008064:	e0 05 03 41 	mac	r1,r0,r5
80008068:	ab 32       	mul	r2,r5
8000806a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000806e:	00 02       	add	r2,r0
80008070:	e4 0e 00 0e 	add	lr,r2,lr
80008074:	b0 1e       	st.h	r8[0x2],lr
80008076:	b1 8e       	lsr	lr,0x10
80008078:	1c 01       	add	r1,lr
8000807a:	b0 01       	st.h	r8[0x0],r1
8000807c:	e2 0e 16 10 	lsr	lr,r1,0x10
80008080:	2f c8       	sub	r8,-4
80008082:	06 36       	cp.w	r6,r3
80008084:	ce 83       	brcs	80008054 <__multiply+0x6c>
80008086:	40 09       	lddsp	r9,sp[0x0]
80008088:	91 0e       	st.w	r8[0x0],lr
8000808a:	94 86       	ld.uh	r6,r10[0x0]
8000808c:	58 06       	cp.w	r6,0
8000808e:	c1 d0       	breq	800080c8 <__multiply+0xe0>
80008090:	72 02       	ld.w	r2,r9[0x0]
80008092:	12 98       	mov	r8,r9
80008094:	16 9e       	mov	lr,r11
80008096:	30 05       	mov	r5,0
80008098:	b0 12       	st.h	r8[0x2],r2
8000809a:	1d 01       	ld.w	r1,lr++
8000809c:	90 82       	ld.uh	r2,r8[0x0]
8000809e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800080a2:	ad 30       	mul	r0,r6
800080a4:	e0 02 00 02 	add	r2,r0,r2
800080a8:	e4 05 00 05 	add	r5,r2,r5
800080ac:	b0 05       	st.h	r8[0x0],r5
800080ae:	b1 85       	lsr	r5,0x10
800080b0:	b1 81       	lsr	r1,0x10
800080b2:	2f c8       	sub	r8,-4
800080b4:	ad 31       	mul	r1,r6
800080b6:	90 92       	ld.uh	r2,r8[0x2]
800080b8:	e2 02 00 02 	add	r2,r1,r2
800080bc:	0a 02       	add	r2,r5
800080be:	e4 05 16 10 	lsr	r5,r2,0x10
800080c2:	06 3e       	cp.w	lr,r3
800080c4:	ce a3       	brcs	80008098 <__multiply+0xb0>
800080c6:	91 02       	st.w	r8[0x0],r2
800080c8:	2f ca       	sub	r10,-4
800080ca:	2f c9       	sub	r9,-4
800080cc:	40 18       	lddsp	r8,sp[0x4]
800080ce:	10 3a       	cp.w	r10,r8
800080d0:	cb b3       	brcs	80008046 <__multiply+0x5e>
800080d2:	c0 28       	rjmp	800080d6 <__multiply+0xee>
800080d4:	20 17       	sub	r7,1
800080d6:	58 07       	cp.w	r7,0
800080d8:	e0 8a 00 05 	brle	800080e2 <__multiply+0xfa>
800080dc:	09 48       	ld.w	r8,--r4
800080de:	58 08       	cp.w	r8,0
800080e0:	cf a0       	breq	800080d4 <__multiply+0xec>
800080e2:	99 47       	st.w	r12[0x10],r7
800080e4:	2f ed       	sub	sp,-8
800080e6:	d8 32       	popm	r0-r7,pc

800080e8 <__i2b>:
800080e8:	d4 21       	pushm	r4-r7,lr
800080ea:	16 97       	mov	r7,r11
800080ec:	30 1b       	mov	r11,1
800080ee:	c4 9e       	rcall	80007d80 <_Balloc>
800080f0:	30 19       	mov	r9,1
800080f2:	99 57       	st.w	r12[0x14],r7
800080f4:	99 49       	st.w	r12[0x10],r9
800080f6:	d8 22       	popm	r4-r7,pc

800080f8 <__multadd>:
800080f8:	d4 31       	pushm	r0-r7,lr
800080fa:	30 08       	mov	r8,0
800080fc:	12 95       	mov	r5,r9
800080fe:	16 97       	mov	r7,r11
80008100:	18 96       	mov	r6,r12
80008102:	76 44       	ld.w	r4,r11[0x10]
80008104:	f6 c9 ff ec 	sub	r9,r11,-20
80008108:	72 0b       	ld.w	r11,r9[0x0]
8000810a:	f6 0c 16 10 	lsr	r12,r11,0x10
8000810e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008112:	f4 0c 02 4c 	mul	r12,r10,r12
80008116:	f4 0b 03 45 	mac	r5,r10,r11
8000811a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000811e:	b1 85       	lsr	r5,0x10
80008120:	18 05       	add	r5,r12
80008122:	ea 0c 15 10 	lsl	r12,r5,0x10
80008126:	f8 0b 00 0b 	add	r11,r12,r11
8000812a:	12 ab       	st.w	r9++,r11
8000812c:	2f f8       	sub	r8,-1
8000812e:	b1 85       	lsr	r5,0x10
80008130:	08 38       	cp.w	r8,r4
80008132:	ce b5       	brlt	80008108 <__multadd+0x10>
80008134:	58 05       	cp.w	r5,0
80008136:	c1 c0       	breq	8000816e <__multadd+0x76>
80008138:	6e 28       	ld.w	r8,r7[0x8]
8000813a:	10 34       	cp.w	r4,r8
8000813c:	c1 35       	brlt	80008162 <__multadd+0x6a>
8000813e:	6e 1b       	ld.w	r11,r7[0x4]
80008140:	0c 9c       	mov	r12,r6
80008142:	2f fb       	sub	r11,-1
80008144:	c1 ee       	rcall	80007d80 <_Balloc>
80008146:	6e 4a       	ld.w	r10,r7[0x10]
80008148:	ee cb ff f4 	sub	r11,r7,-12
8000814c:	18 93       	mov	r3,r12
8000814e:	2f ea       	sub	r10,-2
80008150:	2f 4c       	sub	r12,-12
80008152:	a3 6a       	lsl	r10,0x2
80008154:	fe b0 de 3d 	rcall	80003dce <memcpy>
80008158:	0e 9b       	mov	r11,r7
8000815a:	0c 9c       	mov	r12,r6
8000815c:	fe b0 fd f8 	rcall	80007d4c <_Bfree>
80008160:	06 97       	mov	r7,r3
80008162:	e8 c8 ff ff 	sub	r8,r4,-1
80008166:	2f b4       	sub	r4,-5
80008168:	8f 48       	st.w	r7[0x10],r8
8000816a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000816e:	0e 9c       	mov	r12,r7
80008170:	d8 32       	popm	r0-r7,pc
80008172:	d7 03       	nop

80008174 <__pow5mult>:
80008174:	d4 31       	pushm	r0-r7,lr
80008176:	14 96       	mov	r6,r10
80008178:	18 97       	mov	r7,r12
8000817a:	16 94       	mov	r4,r11
8000817c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008180:	c0 90       	breq	80008192 <__pow5mult+0x1e>
80008182:	20 18       	sub	r8,1
80008184:	fe c9 e1 48 	sub	r9,pc,-7864
80008188:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000818c:	30 09       	mov	r9,0
8000818e:	cb 5f       	rcall	800080f8 <__multadd>
80008190:	18 94       	mov	r4,r12
80008192:	a3 46       	asr	r6,0x2
80008194:	c3 40       	breq	800081fc <__pow5mult+0x88>
80008196:	6e 95       	ld.w	r5,r7[0x24]
80008198:	58 05       	cp.w	r5,0
8000819a:	c0 91       	brne	800081ac <__pow5mult+0x38>
8000819c:	31 0c       	mov	r12,16
8000819e:	fe b0 fa fb 	rcall	80007794 <malloc>
800081a2:	99 35       	st.w	r12[0xc],r5
800081a4:	8f 9c       	st.w	r7[0x24],r12
800081a6:	99 15       	st.w	r12[0x4],r5
800081a8:	99 25       	st.w	r12[0x8],r5
800081aa:	99 05       	st.w	r12[0x0],r5
800081ac:	6e 93       	ld.w	r3,r7[0x24]
800081ae:	66 25       	ld.w	r5,r3[0x8]
800081b0:	58 05       	cp.w	r5,0
800081b2:	c0 c1       	brne	800081ca <__pow5mult+0x56>
800081b4:	e0 6b 02 71 	mov	r11,625
800081b8:	0e 9c       	mov	r12,r7
800081ba:	c9 7f       	rcall	800080e8 <__i2b>
800081bc:	87 2c       	st.w	r3[0x8],r12
800081be:	30 08       	mov	r8,0
800081c0:	18 95       	mov	r5,r12
800081c2:	99 08       	st.w	r12[0x0],r8
800081c4:	c0 38       	rjmp	800081ca <__pow5mult+0x56>
800081c6:	06 9c       	mov	r12,r3
800081c8:	18 95       	mov	r5,r12
800081ca:	ed b6 00 00 	bld	r6,0x0
800081ce:	c0 b1       	brne	800081e4 <__pow5mult+0x70>
800081d0:	08 9b       	mov	r11,r4
800081d2:	0a 9a       	mov	r10,r5
800081d4:	0e 9c       	mov	r12,r7
800081d6:	c0 9f       	rcall	80007fe8 <__multiply>
800081d8:	08 9b       	mov	r11,r4
800081da:	18 93       	mov	r3,r12
800081dc:	0e 9c       	mov	r12,r7
800081de:	06 94       	mov	r4,r3
800081e0:	fe b0 fd b6 	rcall	80007d4c <_Bfree>
800081e4:	a1 56       	asr	r6,0x1
800081e6:	c0 b0       	breq	800081fc <__pow5mult+0x88>
800081e8:	6a 03       	ld.w	r3,r5[0x0]
800081ea:	58 03       	cp.w	r3,0
800081ec:	ce d1       	brne	800081c6 <__pow5mult+0x52>
800081ee:	0a 9a       	mov	r10,r5
800081f0:	0a 9b       	mov	r11,r5
800081f2:	0e 9c       	mov	r12,r7
800081f4:	cf ae       	rcall	80007fe8 <__multiply>
800081f6:	8b 0c       	st.w	r5[0x0],r12
800081f8:	99 03       	st.w	r12[0x0],r3
800081fa:	ce 7b       	rjmp	800081c8 <__pow5mult+0x54>
800081fc:	08 9c       	mov	r12,r4
800081fe:	d8 32       	popm	r0-r7,pc

80008200 <_realloc_r>:
80008200:	d4 31       	pushm	r0-r7,lr
80008202:	20 1d       	sub	sp,4
80008204:	16 94       	mov	r4,r11
80008206:	18 92       	mov	r2,r12
80008208:	14 9b       	mov	r11,r10
8000820a:	58 04       	cp.w	r4,0
8000820c:	c0 51       	brne	80008216 <_realloc_r+0x16>
8000820e:	fe b0 fa cb 	rcall	800077a4 <_malloc_r>
80008212:	18 95       	mov	r5,r12
80008214:	c5 39       	rjmp	800084ba <_realloc_r+0x2ba>
80008216:	50 0a       	stdsp	sp[0x0],r10
80008218:	fe b0 fd 08 	rcall	80007c28 <__malloc_lock>
8000821c:	40 0b       	lddsp	r11,sp[0x0]
8000821e:	f6 c8 ff f5 	sub	r8,r11,-11
80008222:	e8 c1 00 08 	sub	r1,r4,8
80008226:	10 96       	mov	r6,r8
80008228:	62 1c       	ld.w	r12,r1[0x4]
8000822a:	e0 16 ff f8 	andl	r6,0xfff8
8000822e:	59 68       	cp.w	r8,22
80008230:	f9 b6 08 10 	movls	r6,16
80008234:	16 36       	cp.w	r6,r11
80008236:	5f 38       	srlo	r8
80008238:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000823c:	c0 50       	breq	80008246 <_realloc_r+0x46>
8000823e:	30 c8       	mov	r8,12
80008240:	30 05       	mov	r5,0
80008242:	85 38       	st.w	r2[0xc],r8
80008244:	c3 b9       	rjmp	800084ba <_realloc_r+0x2ba>
80008246:	18 90       	mov	r0,r12
80008248:	e0 10 ff fc 	andl	r0,0xfffc
8000824c:	0c 30       	cp.w	r0,r6
8000824e:	e0 84 01 0b 	brge	80008464 <_realloc_r+0x264>
80008252:	e0 68 01 1c 	mov	r8,284
80008256:	e2 00 00 09 	add	r9,r1,r0
8000825a:	70 25       	ld.w	r5,r8[0x8]
8000825c:	0a 39       	cp.w	r9,r5
8000825e:	c0 90       	breq	80008270 <_realloc_r+0x70>
80008260:	72 1a       	ld.w	r10,r9[0x4]
80008262:	a1 ca       	cbr	r10,0x0
80008264:	f2 0a 00 0a 	add	r10,r9,r10
80008268:	74 1a       	ld.w	r10,r10[0x4]
8000826a:	ed ba 00 00 	bld	r10,0x0
8000826e:	c2 20       	breq	800082b2 <_realloc_r+0xb2>
80008270:	72 1a       	ld.w	r10,r9[0x4]
80008272:	e0 1a ff fc 	andl	r10,0xfffc
80008276:	f4 00 00 03 	add	r3,r10,r0
8000827a:	0a 39       	cp.w	r9,r5
8000827c:	c1 31       	brne	800082a2 <_realloc_r+0xa2>
8000827e:	ec c7 ff f0 	sub	r7,r6,-16
80008282:	0e 33       	cp.w	r3,r7
80008284:	c1 95       	brlt	800082b6 <_realloc_r+0xb6>
80008286:	e2 06 00 09 	add	r9,r1,r6
8000828a:	0c 13       	sub	r3,r6
8000828c:	a1 a3       	sbr	r3,0x0
8000828e:	93 13       	st.w	r9[0x4],r3
80008290:	91 29       	st.w	r8[0x8],r9
80008292:	04 9c       	mov	r12,r2
80008294:	62 18       	ld.w	r8,r1[0x4]
80008296:	08 95       	mov	r5,r4
80008298:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000829c:	10 46       	or	r6,r8
8000829e:	83 16       	st.w	r1[0x4],r6
800082a0:	c0 b9       	rjmp	800084b6 <_realloc_r+0x2b6>
800082a2:	0c 33       	cp.w	r3,r6
800082a4:	c0 95       	brlt	800082b6 <_realloc_r+0xb6>
800082a6:	72 28       	ld.w	r8,r9[0x8]
800082a8:	02 97       	mov	r7,r1
800082aa:	72 39       	ld.w	r9,r9[0xc]
800082ac:	93 28       	st.w	r9[0x8],r8
800082ae:	91 39       	st.w	r8[0xc],r9
800082b0:	cd c8       	rjmp	80008468 <_realloc_r+0x268>
800082b2:	30 0a       	mov	r10,0
800082b4:	14 99       	mov	r9,r10
800082b6:	ed bc 00 00 	bld	r12,0x0
800082ba:	e0 80 00 95 	breq	800083e4 <_realloc_r+0x1e4>
800082be:	62 07       	ld.w	r7,r1[0x0]
800082c0:	e2 07 01 07 	sub	r7,r1,r7
800082c4:	6e 1c       	ld.w	r12,r7[0x4]
800082c6:	e0 1c ff fc 	andl	r12,0xfffc
800082ca:	58 09       	cp.w	r9,0
800082cc:	c5 60       	breq	80008378 <_realloc_r+0x178>
800082ce:	f8 00 00 03 	add	r3,r12,r0
800082d2:	0a 39       	cp.w	r9,r5
800082d4:	c4 81       	brne	80008364 <_realloc_r+0x164>
800082d6:	14 03       	add	r3,r10
800082d8:	ec c9 ff f0 	sub	r9,r6,-16
800082dc:	12 33       	cp.w	r3,r9
800082de:	c4 d5       	brlt	80008378 <_realloc_r+0x178>
800082e0:	6e 3a       	ld.w	r10,r7[0xc]
800082e2:	6e 29       	ld.w	r9,r7[0x8]
800082e4:	95 29       	st.w	r10[0x8],r9
800082e6:	93 3a       	st.w	r9[0xc],r10
800082e8:	ee c5 ff f8 	sub	r5,r7,-8
800082ec:	e0 ca 00 04 	sub	r10,r0,4
800082f0:	e0 4a 00 24 	cp.w	r10,36
800082f4:	e0 8b 00 25 	brhi	8000833e <_realloc_r+0x13e>
800082f8:	0a 99       	mov	r9,r5
800082fa:	59 3a       	cp.w	r10,19
800082fc:	e0 88 00 1a 	brls	80008330 <_realloc_r+0x130>
80008300:	09 09       	ld.w	r9,r4++
80008302:	8b 09       	st.w	r5[0x0],r9
80008304:	09 09       	ld.w	r9,r4++
80008306:	8f 39       	st.w	r7[0xc],r9
80008308:	ee c9 ff f0 	sub	r9,r7,-16
8000830c:	59 ba       	cp.w	r10,27
8000830e:	e0 88 00 11 	brls	80008330 <_realloc_r+0x130>
80008312:	09 0b       	ld.w	r11,r4++
80008314:	93 0b       	st.w	r9[0x0],r11
80008316:	09 09       	ld.w	r9,r4++
80008318:	8f 59       	st.w	r7[0x14],r9
8000831a:	ee c9 ff e8 	sub	r9,r7,-24
8000831e:	e0 4a 00 24 	cp.w	r10,36
80008322:	c0 71       	brne	80008330 <_realloc_r+0x130>
80008324:	09 0a       	ld.w	r10,r4++
80008326:	93 0a       	st.w	r9[0x0],r10
80008328:	ee c9 ff e0 	sub	r9,r7,-32
8000832c:	09 0a       	ld.w	r10,r4++
8000832e:	8f 7a       	st.w	r7[0x1c],r10
80008330:	09 0a       	ld.w	r10,r4++
80008332:	12 aa       	st.w	r9++,r10
80008334:	68 0a       	ld.w	r10,r4[0x0]
80008336:	93 0a       	st.w	r9[0x0],r10
80008338:	68 1a       	ld.w	r10,r4[0x4]
8000833a:	93 1a       	st.w	r9[0x4],r10
8000833c:	c0 78       	rjmp	8000834a <_realloc_r+0x14a>
8000833e:	50 08       	stdsp	sp[0x0],r8
80008340:	08 9b       	mov	r11,r4
80008342:	0a 9c       	mov	r12,r5
80008344:	fe b0 fc 53 	rcall	80007bea <memmove>
80008348:	40 08       	lddsp	r8,sp[0x0]
8000834a:	ee 06 00 09 	add	r9,r7,r6
8000834e:	0c 13       	sub	r3,r6
80008350:	a1 a3       	sbr	r3,0x0
80008352:	93 13       	st.w	r9[0x4],r3
80008354:	91 29       	st.w	r8[0x8],r9
80008356:	04 9c       	mov	r12,r2
80008358:	6e 18       	ld.w	r8,r7[0x4]
8000835a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000835e:	10 46       	or	r6,r8
80008360:	8f 16       	st.w	r7[0x4],r6
80008362:	ca a8       	rjmp	800084b6 <_realloc_r+0x2b6>
80008364:	14 03       	add	r3,r10
80008366:	0c 33       	cp.w	r3,r6
80008368:	c0 85       	brlt	80008378 <_realloc_r+0x178>
8000836a:	72 28       	ld.w	r8,r9[0x8]
8000836c:	72 39       	ld.w	r9,r9[0xc]
8000836e:	93 28       	st.w	r9[0x8],r8
80008370:	91 39       	st.w	r8[0xc],r9
80008372:	6e 28       	ld.w	r8,r7[0x8]
80008374:	6e 39       	ld.w	r9,r7[0xc]
80008376:	c0 78       	rjmp	80008384 <_realloc_r+0x184>
80008378:	f8 00 00 03 	add	r3,r12,r0
8000837c:	0c 33       	cp.w	r3,r6
8000837e:	c3 35       	brlt	800083e4 <_realloc_r+0x1e4>
80008380:	6e 39       	ld.w	r9,r7[0xc]
80008382:	6e 28       	ld.w	r8,r7[0x8]
80008384:	93 28       	st.w	r9[0x8],r8
80008386:	91 39       	st.w	r8[0xc],r9
80008388:	e0 ca 00 04 	sub	r10,r0,4
8000838c:	ee cc ff f8 	sub	r12,r7,-8
80008390:	e0 4a 00 24 	cp.w	r10,36
80008394:	e0 8b 00 24 	brhi	800083dc <_realloc_r+0x1dc>
80008398:	59 3a       	cp.w	r10,19
8000839a:	e0 88 00 1a 	brls	800083ce <_realloc_r+0x1ce>
8000839e:	09 08       	ld.w	r8,r4++
800083a0:	99 08       	st.w	r12[0x0],r8
800083a2:	09 08       	ld.w	r8,r4++
800083a4:	8f 38       	st.w	r7[0xc],r8
800083a6:	ee cc ff f0 	sub	r12,r7,-16
800083aa:	59 ba       	cp.w	r10,27
800083ac:	e0 88 00 11 	brls	800083ce <_realloc_r+0x1ce>
800083b0:	09 08       	ld.w	r8,r4++
800083b2:	99 08       	st.w	r12[0x0],r8
800083b4:	09 08       	ld.w	r8,r4++
800083b6:	8f 58       	st.w	r7[0x14],r8
800083b8:	ee cc ff e8 	sub	r12,r7,-24
800083bc:	e0 4a 00 24 	cp.w	r10,36
800083c0:	c0 71       	brne	800083ce <_realloc_r+0x1ce>
800083c2:	09 08       	ld.w	r8,r4++
800083c4:	99 08       	st.w	r12[0x0],r8
800083c6:	ee cc ff e0 	sub	r12,r7,-32
800083ca:	09 08       	ld.w	r8,r4++
800083cc:	8f 78       	st.w	r7[0x1c],r8
800083ce:	09 08       	ld.w	r8,r4++
800083d0:	18 a8       	st.w	r12++,r8
800083d2:	68 08       	ld.w	r8,r4[0x0]
800083d4:	99 08       	st.w	r12[0x0],r8
800083d6:	68 18       	ld.w	r8,r4[0x4]
800083d8:	99 18       	st.w	r12[0x4],r8
800083da:	c4 78       	rjmp	80008468 <_realloc_r+0x268>
800083dc:	08 9b       	mov	r11,r4
800083de:	fe b0 fc 06 	rcall	80007bea <memmove>
800083e2:	c4 38       	rjmp	80008468 <_realloc_r+0x268>
800083e4:	04 9c       	mov	r12,r2
800083e6:	fe b0 f9 df 	rcall	800077a4 <_malloc_r>
800083ea:	18 95       	mov	r5,r12
800083ec:	c3 a0       	breq	80008460 <_realloc_r+0x260>
800083ee:	62 18       	ld.w	r8,r1[0x4]
800083f0:	f8 c9 00 08 	sub	r9,r12,8
800083f4:	a1 c8       	cbr	r8,0x0
800083f6:	e2 08 00 08 	add	r8,r1,r8
800083fa:	10 39       	cp.w	r9,r8
800083fc:	c0 71       	brne	8000840a <_realloc_r+0x20a>
800083fe:	72 13       	ld.w	r3,r9[0x4]
80008400:	02 97       	mov	r7,r1
80008402:	e0 13 ff fc 	andl	r3,0xfffc
80008406:	00 03       	add	r3,r0
80008408:	c3 08       	rjmp	80008468 <_realloc_r+0x268>
8000840a:	e0 ca 00 04 	sub	r10,r0,4
8000840e:	e0 4a 00 24 	cp.w	r10,36
80008412:	e0 8b 00 20 	brhi	80008452 <_realloc_r+0x252>
80008416:	08 99       	mov	r9,r4
80008418:	18 98       	mov	r8,r12
8000841a:	59 3a       	cp.w	r10,19
8000841c:	e0 88 00 14 	brls	80008444 <_realloc_r+0x244>
80008420:	13 0b       	ld.w	r11,r9++
80008422:	10 ab       	st.w	r8++,r11
80008424:	13 0b       	ld.w	r11,r9++
80008426:	10 ab       	st.w	r8++,r11
80008428:	59 ba       	cp.w	r10,27
8000842a:	e0 88 00 0d 	brls	80008444 <_realloc_r+0x244>
8000842e:	13 0b       	ld.w	r11,r9++
80008430:	10 ab       	st.w	r8++,r11
80008432:	13 0b       	ld.w	r11,r9++
80008434:	10 ab       	st.w	r8++,r11
80008436:	e0 4a 00 24 	cp.w	r10,36
8000843a:	c0 51       	brne	80008444 <_realloc_r+0x244>
8000843c:	13 0a       	ld.w	r10,r9++
8000843e:	10 aa       	st.w	r8++,r10
80008440:	13 0a       	ld.w	r10,r9++
80008442:	10 aa       	st.w	r8++,r10
80008444:	13 0a       	ld.w	r10,r9++
80008446:	10 aa       	st.w	r8++,r10
80008448:	72 0a       	ld.w	r10,r9[0x0]
8000844a:	91 0a       	st.w	r8[0x0],r10
8000844c:	72 19       	ld.w	r9,r9[0x4]
8000844e:	91 19       	st.w	r8[0x4],r9
80008450:	c0 48       	rjmp	80008458 <_realloc_r+0x258>
80008452:	08 9b       	mov	r11,r4
80008454:	fe b0 fb cb 	rcall	80007bea <memmove>
80008458:	08 9b       	mov	r11,r4
8000845a:	04 9c       	mov	r12,r2
8000845c:	fe b0 f6 fe 	rcall	80007258 <_free_r>
80008460:	04 9c       	mov	r12,r2
80008462:	c2 a8       	rjmp	800084b6 <_realloc_r+0x2b6>
80008464:	00 93       	mov	r3,r0
80008466:	02 97       	mov	r7,r1
80008468:	e6 06 01 09 	sub	r9,r3,r6
8000846c:	6e 18       	ld.w	r8,r7[0x4]
8000846e:	58 f9       	cp.w	r9,15
80008470:	e0 88 00 16 	brls	8000849c <_realloc_r+0x29c>
80008474:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008478:	ed e8 10 08 	or	r8,r6,r8
8000847c:	8f 18       	st.w	r7[0x4],r8
8000847e:	12 98       	mov	r8,r9
80008480:	a1 a8       	sbr	r8,0x0
80008482:	ee 06 00 0b 	add	r11,r7,r6
80008486:	f6 09 00 09 	add	r9,r11,r9
8000848a:	97 18       	st.w	r11[0x4],r8
8000848c:	72 18       	ld.w	r8,r9[0x4]
8000848e:	a1 a8       	sbr	r8,0x0
80008490:	2f 8b       	sub	r11,-8
80008492:	93 18       	st.w	r9[0x4],r8
80008494:	04 9c       	mov	r12,r2
80008496:	fe b0 f6 e1 	rcall	80007258 <_free_r>
8000849a:	c0 b8       	rjmp	800084b0 <_realloc_r+0x2b0>
8000849c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084a0:	e7 e8 10 08 	or	r8,r3,r8
800084a4:	8f 18       	st.w	r7[0x4],r8
800084a6:	ee 03 00 03 	add	r3,r7,r3
800084aa:	66 18       	ld.w	r8,r3[0x4]
800084ac:	a1 a8       	sbr	r8,0x0
800084ae:	87 18       	st.w	r3[0x4],r8
800084b0:	04 9c       	mov	r12,r2
800084b2:	ee c5 ff f8 	sub	r5,r7,-8
800084b6:	fe b0 fb ba 	rcall	80007c2a <__malloc_unlock>
800084ba:	0a 9c       	mov	r12,r5
800084bc:	2f fd       	sub	sp,-4
800084be:	d8 32       	popm	r0-r7,pc

800084c0 <__isinfd>:
800084c0:	14 98       	mov	r8,r10
800084c2:	fc 19 7f f0 	movh	r9,0x7ff0
800084c6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800084ca:	f0 0b 11 00 	rsub	r11,r8,0
800084ce:	f7 e8 10 08 	or	r8,r11,r8
800084d2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800084d6:	f2 08 01 08 	sub	r8,r9,r8
800084da:	f0 0c 11 00 	rsub	r12,r8,0
800084de:	f9 e8 10 08 	or	r8,r12,r8
800084e2:	f0 0c 14 1f 	asr	r12,r8,0x1f
800084e6:	2f fc       	sub	r12,-1
800084e8:	5e fc       	retal	r12

800084ea <__isnand>:
800084ea:	14 98       	mov	r8,r10
800084ec:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800084f0:	f0 0c 11 00 	rsub	r12,r8,0
800084f4:	10 4c       	or	r12,r8
800084f6:	fc 18 7f f0 	movh	r8,0x7ff0
800084fa:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800084fe:	f0 0c 01 0c 	sub	r12,r8,r12
80008502:	bf 9c       	lsr	r12,0x1f
80008504:	5e fc       	retal	r12
80008506:	d7 03       	nop

80008508 <_sbrk_r>:
80008508:	d4 21       	pushm	r4-r7,lr
8000850a:	30 08       	mov	r8,0
8000850c:	18 97       	mov	r7,r12
8000850e:	e0 66 07 4c 	mov	r6,1868
80008512:	16 9c       	mov	r12,r11
80008514:	8d 08       	st.w	r6[0x0],r8
80008516:	ca fc       	rcall	80008674 <_sbrk>
80008518:	5b fc       	cp.w	r12,-1
8000851a:	c0 51       	brne	80008524 <_sbrk_r+0x1c>
8000851c:	6c 08       	ld.w	r8,r6[0x0]
8000851e:	58 08       	cp.w	r8,0
80008520:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008524:	d8 22       	popm	r4-r7,pc
80008526:	d7 03       	nop

80008528 <__sclose>:
80008528:	d4 01       	pushm	lr
8000852a:	96 7b       	ld.sh	r11,r11[0xe]
8000852c:	cf ec       	rcall	80008728 <_close_r>
8000852e:	d8 02       	popm	pc

80008530 <__sseek>:
80008530:	d4 21       	pushm	r4-r7,lr
80008532:	16 97       	mov	r7,r11
80008534:	96 7b       	ld.sh	r11,r11[0xe]
80008536:	c8 5d       	rcall	80008840 <_lseek_r>
80008538:	8e 68       	ld.sh	r8,r7[0xc]
8000853a:	10 99       	mov	r9,r8
8000853c:	ad c8       	cbr	r8,0xc
8000853e:	ad a9       	sbr	r9,0xc
80008540:	5b fc       	cp.w	r12,-1
80008542:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008546:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000854a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000854e:	d8 22       	popm	r4-r7,pc

80008550 <__swrite>:
80008550:	d4 21       	pushm	r4-r7,lr
80008552:	96 68       	ld.sh	r8,r11[0xc]
80008554:	16 97       	mov	r7,r11
80008556:	14 95       	mov	r5,r10
80008558:	12 94       	mov	r4,r9
8000855a:	e2 18 01 00 	andl	r8,0x100,COH
8000855e:	18 96       	mov	r6,r12
80008560:	c0 50       	breq	8000856a <__swrite+0x1a>
80008562:	30 29       	mov	r9,2
80008564:	30 0a       	mov	r10,0
80008566:	96 7b       	ld.sh	r11,r11[0xe]
80008568:	c6 cd       	rcall	80008840 <_lseek_r>
8000856a:	8e 68       	ld.sh	r8,r7[0xc]
8000856c:	ad c8       	cbr	r8,0xc
8000856e:	08 99       	mov	r9,r4
80008570:	0a 9a       	mov	r10,r5
80008572:	8e 7b       	ld.sh	r11,r7[0xe]
80008574:	0c 9c       	mov	r12,r6
80008576:	ae 68       	st.h	r7[0xc],r8
80008578:	c9 ac       	rcall	800086ac <_write_r>
8000857a:	d8 22       	popm	r4-r7,pc

8000857c <__sread>:
8000857c:	d4 21       	pushm	r4-r7,lr
8000857e:	16 97       	mov	r7,r11
80008580:	96 7b       	ld.sh	r11,r11[0xe]
80008582:	c7 1d       	rcall	80008864 <_read_r>
80008584:	c0 65       	brlt	80008590 <__sread+0x14>
80008586:	6f 58       	ld.w	r8,r7[0x54]
80008588:	18 08       	add	r8,r12
8000858a:	ef 48 00 54 	st.w	r7[84],r8
8000858e:	d8 22       	popm	r4-r7,pc
80008590:	8e 68       	ld.sh	r8,r7[0xc]
80008592:	ad c8       	cbr	r8,0xc
80008594:	ae 68       	st.h	r7[0xc],r8
80008596:	d8 22       	popm	r4-r7,pc

80008598 <strlen>:
80008598:	30 09       	mov	r9,0
8000859a:	18 98       	mov	r8,r12
8000859c:	c0 28       	rjmp	800085a0 <strlen+0x8>
8000859e:	2f f8       	sub	r8,-1
800085a0:	11 8a       	ld.ub	r10,r8[0x0]
800085a2:	f2 0a 18 00 	cp.b	r10,r9
800085a6:	cf c1       	brne	8000859e <strlen+0x6>
800085a8:	f0 0c 01 0c 	sub	r12,r8,r12
800085ac:	5e fc       	retal	r12
800085ae:	d7 03       	nop

800085b0 <_close>:
800085b0:	30 28       	mov	r8,2
800085b2:	d6 73       	breakpoint
800085b4:	3f fc       	mov	r12,-1
800085b6:	35 8b       	mov	r11,88
800085b8:	58 0c       	cp.w	r12,0
800085ba:	5e 4c       	retge	r12
800085bc:	e0 6a 07 4c 	mov	r10,1868
800085c0:	95 0b       	st.w	r10[0x0],r11
800085c2:	5e fc       	retal	r12

800085c4 <_lseek>:
800085c4:	30 58       	mov	r8,5
800085c6:	d6 73       	breakpoint
800085c8:	3f fc       	mov	r12,-1
800085ca:	35 8b       	mov	r11,88
800085cc:	58 0c       	cp.w	r12,0
800085ce:	5e 4c       	retge	r12
800085d0:	e0 6a 07 4c 	mov	r10,1868
800085d4:	95 0b       	st.w	r10[0x0],r11
800085d6:	5e fc       	retal	r12

800085d8 <_read>:
800085d8:	30 38       	mov	r8,3
800085da:	d6 73       	breakpoint
800085dc:	3f fc       	mov	r12,-1
800085de:	35 8b       	mov	r11,88
800085e0:	58 0c       	cp.w	r12,0
800085e2:	5e 4c       	retge	r12
800085e4:	e0 6a 07 4c 	mov	r10,1868
800085e8:	95 0b       	st.w	r10[0x0],r11
800085ea:	5e fc       	retal	r12

800085ec <_write>:
800085ec:	30 48       	mov	r8,4
800085ee:	d6 73       	breakpoint
800085f0:	3f fc       	mov	r12,-1
800085f2:	35 8b       	mov	r11,88
800085f4:	58 0c       	cp.w	r12,0
800085f6:	5e 4c       	retge	r12
800085f8:	e0 6a 07 4c 	mov	r10,1868
800085fc:	95 0b       	st.w	r10[0x0],r11
800085fe:	5e fc       	retal	r12

80008600 <isatty>:
80008600:	30 b8       	mov	r8,11
80008602:	d6 73       	breakpoint
80008604:	3f fc       	mov	r12,-1
80008606:	35 8b       	mov	r11,88
80008608:	58 0c       	cp.w	r12,0
8000860a:	5e 4c       	retge	r12
8000860c:	e0 6a 07 4c 	mov	r10,1868
80008610:	95 0b       	st.w	r10[0x0],r11
80008612:	5e fc       	retal	r12

80008614 <_fstat_host>:
80008614:	30 98       	mov	r8,9
80008616:	d6 73       	breakpoint
80008618:	3f fc       	mov	r12,-1
8000861a:	35 8b       	mov	r11,88
8000861c:	58 0c       	cp.w	r12,0
8000861e:	5e 4c       	retge	r12
80008620:	e0 6a 07 4c 	mov	r10,1868
80008624:	95 0b       	st.w	r10[0x0],r11
80008626:	5e fc       	retal	r12

80008628 <_fstat>:
80008628:	d4 21       	pushm	r4-r7,lr
8000862a:	21 0d       	sub	sp,64
8000862c:	16 97       	mov	r7,r11
8000862e:	1a 9b       	mov	r11,sp
80008630:	cf 2f       	rcall	80008614 <_fstat_host>
80008632:	c0 34       	brge	80008638 <_fstat+0x10>
80008634:	3f fc       	mov	r12,-1
80008636:	c1 c8       	rjmp	8000866e <_fstat+0x46>
80008638:	40 08       	lddsp	r8,sp[0x0]
8000863a:	ae 08       	st.h	r7[0x0],r8
8000863c:	40 18       	lddsp	r8,sp[0x4]
8000863e:	ae 18       	st.h	r7[0x2],r8
80008640:	40 28       	lddsp	r8,sp[0x8]
80008642:	8f 18       	st.w	r7[0x4],r8
80008644:	40 38       	lddsp	r8,sp[0xc]
80008646:	ae 48       	st.h	r7[0x8],r8
80008648:	40 48       	lddsp	r8,sp[0x10]
8000864a:	ae 58       	st.h	r7[0xa],r8
8000864c:	40 58       	lddsp	r8,sp[0x14]
8000864e:	ae 68       	st.h	r7[0xc],r8
80008650:	40 68       	lddsp	r8,sp[0x18]
80008652:	ae 78       	st.h	r7[0xe],r8
80008654:	40 88       	lddsp	r8,sp[0x20]
80008656:	8f 48       	st.w	r7[0x10],r8
80008658:	40 a8       	lddsp	r8,sp[0x28]
8000865a:	8f b8       	st.w	r7[0x2c],r8
8000865c:	40 c8       	lddsp	r8,sp[0x30]
8000865e:	8f c8       	st.w	r7[0x30],r8
80008660:	40 d8       	lddsp	r8,sp[0x34]
80008662:	8f 58       	st.w	r7[0x14],r8
80008664:	40 e8       	lddsp	r8,sp[0x38]
80008666:	30 0c       	mov	r12,0
80008668:	8f 78       	st.w	r7[0x1c],r8
8000866a:	40 f8       	lddsp	r8,sp[0x3c]
8000866c:	8f 98       	st.w	r7[0x24],r8
8000866e:	2f 0d       	sub	sp,-64
80008670:	d8 22       	popm	r4-r7,pc
80008672:	d7 03       	nop

80008674 <_sbrk>:
80008674:	d4 01       	pushm	lr
80008676:	e0 68 06 70 	mov	r8,1648
8000867a:	70 09       	ld.w	r9,r8[0x0]
8000867c:	58 09       	cp.w	r9,0
8000867e:	c0 41       	brne	80008686 <_sbrk+0x12>
80008680:	e0 69 07 50 	mov	r9,1872
80008684:	91 09       	st.w	r8[0x0],r9
80008686:	e0 69 06 70 	mov	r9,1648
8000868a:	e0 6a 30 00 	mov	r10,12288
8000868e:	72 08       	ld.w	r8,r9[0x0]
80008690:	f0 0c 00 0c 	add	r12,r8,r12
80008694:	14 3c       	cp.w	r12,r10
80008696:	e0 8b 00 04 	brhi	8000869e <_sbrk+0x2a>
8000869a:	93 0c       	st.w	r9[0x0],r12
8000869c:	c0 58       	rjmp	800086a6 <_sbrk+0x32>
8000869e:	c5 5c       	rcall	80008748 <__errno>
800086a0:	30 c8       	mov	r8,12
800086a2:	99 08       	st.w	r12[0x0],r8
800086a4:	3f f8       	mov	r8,-1
800086a6:	10 9c       	mov	r12,r8
800086a8:	d8 02       	popm	pc
800086aa:	d7 03       	nop

800086ac <_write_r>:
800086ac:	d4 21       	pushm	r4-r7,lr
800086ae:	16 98       	mov	r8,r11
800086b0:	18 97       	mov	r7,r12
800086b2:	10 9c       	mov	r12,r8
800086b4:	30 08       	mov	r8,0
800086b6:	14 9b       	mov	r11,r10
800086b8:	e0 66 07 4c 	mov	r6,1868
800086bc:	12 9a       	mov	r10,r9
800086be:	8d 08       	st.w	r6[0x0],r8
800086c0:	c9 6f       	rcall	800085ec <_write>
800086c2:	5b fc       	cp.w	r12,-1
800086c4:	c0 51       	brne	800086ce <_write_r+0x22>
800086c6:	6c 08       	ld.w	r8,r6[0x0]
800086c8:	58 08       	cp.w	r8,0
800086ca:	ef f8 1a 03 	st.wne	r7[0xc],r8
800086ce:	d8 22       	popm	r4-r7,pc

800086d0 <_calloc_r>:
800086d0:	d4 21       	pushm	r4-r7,lr
800086d2:	f4 0b 02 4b 	mul	r11,r10,r11
800086d6:	fe b0 f8 67 	rcall	800077a4 <_malloc_r>
800086da:	18 97       	mov	r7,r12
800086dc:	c2 30       	breq	80008722 <_calloc_r+0x52>
800086de:	f8 fa ff fc 	ld.w	r10,r12[-4]
800086e2:	e0 1a ff fc 	andl	r10,0xfffc
800086e6:	20 4a       	sub	r10,4
800086e8:	e0 4a 00 24 	cp.w	r10,36
800086ec:	e0 8b 00 18 	brhi	8000871c <_calloc_r+0x4c>
800086f0:	18 98       	mov	r8,r12
800086f2:	59 3a       	cp.w	r10,19
800086f4:	e0 88 00 0f 	brls	80008712 <_calloc_r+0x42>
800086f8:	30 09       	mov	r9,0
800086fa:	10 a9       	st.w	r8++,r9
800086fc:	10 a9       	st.w	r8++,r9
800086fe:	59 ba       	cp.w	r10,27
80008700:	e0 88 00 09 	brls	80008712 <_calloc_r+0x42>
80008704:	10 a9       	st.w	r8++,r9
80008706:	10 a9       	st.w	r8++,r9
80008708:	e0 4a 00 24 	cp.w	r10,36
8000870c:	c0 31       	brne	80008712 <_calloc_r+0x42>
8000870e:	10 a9       	st.w	r8++,r9
80008710:	10 a9       	st.w	r8++,r9
80008712:	30 09       	mov	r9,0
80008714:	10 a9       	st.w	r8++,r9
80008716:	91 19       	st.w	r8[0x4],r9
80008718:	91 09       	st.w	r8[0x0],r9
8000871a:	c0 48       	rjmp	80008722 <_calloc_r+0x52>
8000871c:	30 0b       	mov	r11,0
8000871e:	fe b0 db fc 	rcall	80003f16 <memset>
80008722:	0e 9c       	mov	r12,r7
80008724:	d8 22       	popm	r4-r7,pc
80008726:	d7 03       	nop

80008728 <_close_r>:
80008728:	d4 21       	pushm	r4-r7,lr
8000872a:	30 08       	mov	r8,0
8000872c:	18 97       	mov	r7,r12
8000872e:	e0 66 07 4c 	mov	r6,1868
80008732:	16 9c       	mov	r12,r11
80008734:	8d 08       	st.w	r6[0x0],r8
80008736:	c3 df       	rcall	800085b0 <_close>
80008738:	5b fc       	cp.w	r12,-1
8000873a:	c0 51       	brne	80008744 <_close_r+0x1c>
8000873c:	6c 08       	ld.w	r8,r6[0x0]
8000873e:	58 08       	cp.w	r8,0
80008740:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008744:	d8 22       	popm	r4-r7,pc
80008746:	d7 03       	nop

80008748 <__errno>:
80008748:	e0 68 01 18 	mov	r8,280
8000874c:	70 0c       	ld.w	r12,r8[0x0]
8000874e:	2f 4c       	sub	r12,-12
80008750:	5e fc       	retal	r12
80008752:	d7 03       	nop

80008754 <_fclose_r>:
80008754:	d4 21       	pushm	r4-r7,lr
80008756:	18 96       	mov	r6,r12
80008758:	16 97       	mov	r7,r11
8000875a:	58 0b       	cp.w	r11,0
8000875c:	c0 31       	brne	80008762 <_fclose_r+0xe>
8000875e:	16 95       	mov	r5,r11
80008760:	c5 38       	rjmp	80008806 <_fclose_r+0xb2>
80008762:	fe b0 f4 8f 	rcall	80007080 <__sfp_lock_acquire>
80008766:	58 06       	cp.w	r6,0
80008768:	c0 70       	breq	80008776 <_fclose_r+0x22>
8000876a:	6c 68       	ld.w	r8,r6[0x18]
8000876c:	58 08       	cp.w	r8,0
8000876e:	c0 41       	brne	80008776 <_fclose_r+0x22>
80008770:	0c 9c       	mov	r12,r6
80008772:	fe b0 f4 d9 	rcall	80007124 <__sinit>
80008776:	fe c8 e7 e2 	sub	r8,pc,-6174
8000877a:	10 37       	cp.w	r7,r8
8000877c:	c0 31       	brne	80008782 <_fclose_r+0x2e>
8000877e:	6c 07       	ld.w	r7,r6[0x0]
80008780:	c0 c8       	rjmp	80008798 <_fclose_r+0x44>
80008782:	fe c8 e7 ce 	sub	r8,pc,-6194
80008786:	10 37       	cp.w	r7,r8
80008788:	c0 31       	brne	8000878e <_fclose_r+0x3a>
8000878a:	6c 17       	ld.w	r7,r6[0x4]
8000878c:	c0 68       	rjmp	80008798 <_fclose_r+0x44>
8000878e:	fe c8 e7 ba 	sub	r8,pc,-6214
80008792:	10 37       	cp.w	r7,r8
80008794:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008798:	8e 69       	ld.sh	r9,r7[0xc]
8000879a:	30 08       	mov	r8,0
8000879c:	f0 09 19 00 	cp.h	r9,r8
800087a0:	c0 51       	brne	800087aa <_fclose_r+0x56>
800087a2:	fe b0 f4 70 	rcall	80007082 <__sfp_lock_release>
800087a6:	30 05       	mov	r5,0
800087a8:	c2 f8       	rjmp	80008806 <_fclose_r+0xb2>
800087aa:	0e 9b       	mov	r11,r7
800087ac:	0c 9c       	mov	r12,r6
800087ae:	fe b0 f3 e3 	rcall	80006f74 <_fflush_r>
800087b2:	6e c8       	ld.w	r8,r7[0x30]
800087b4:	18 95       	mov	r5,r12
800087b6:	58 08       	cp.w	r8,0
800087b8:	c0 60       	breq	800087c4 <_fclose_r+0x70>
800087ba:	6e 8b       	ld.w	r11,r7[0x20]
800087bc:	0c 9c       	mov	r12,r6
800087be:	5d 18       	icall	r8
800087c0:	f9 b5 05 ff 	movlt	r5,-1
800087c4:	8e 68       	ld.sh	r8,r7[0xc]
800087c6:	ed b8 00 07 	bld	r8,0x7
800087ca:	c0 51       	brne	800087d4 <_fclose_r+0x80>
800087cc:	6e 4b       	ld.w	r11,r7[0x10]
800087ce:	0c 9c       	mov	r12,r6
800087d0:	fe b0 f5 44 	rcall	80007258 <_free_r>
800087d4:	6e db       	ld.w	r11,r7[0x34]
800087d6:	58 0b       	cp.w	r11,0
800087d8:	c0 a0       	breq	800087ec <_fclose_r+0x98>
800087da:	ee c8 ff bc 	sub	r8,r7,-68
800087de:	10 3b       	cp.w	r11,r8
800087e0:	c0 40       	breq	800087e8 <_fclose_r+0x94>
800087e2:	0c 9c       	mov	r12,r6
800087e4:	fe b0 f5 3a 	rcall	80007258 <_free_r>
800087e8:	30 08       	mov	r8,0
800087ea:	8f d8       	st.w	r7[0x34],r8
800087ec:	6f 2b       	ld.w	r11,r7[0x48]
800087ee:	58 0b       	cp.w	r11,0
800087f0:	c0 70       	breq	800087fe <_fclose_r+0xaa>
800087f2:	0c 9c       	mov	r12,r6
800087f4:	fe b0 f5 32 	rcall	80007258 <_free_r>
800087f8:	30 08       	mov	r8,0
800087fa:	ef 48 00 48 	st.w	r7[72],r8
800087fe:	30 08       	mov	r8,0
80008800:	ae 68       	st.h	r7[0xc],r8
80008802:	fe b0 f4 40 	rcall	80007082 <__sfp_lock_release>
80008806:	0a 9c       	mov	r12,r5
80008808:	d8 22       	popm	r4-r7,pc
8000880a:	d7 03       	nop

8000880c <fclose>:
8000880c:	d4 01       	pushm	lr
8000880e:	e0 68 01 18 	mov	r8,280
80008812:	18 9b       	mov	r11,r12
80008814:	70 0c       	ld.w	r12,r8[0x0]
80008816:	c9 ff       	rcall	80008754 <_fclose_r>
80008818:	d8 02       	popm	pc
8000881a:	d7 03       	nop

8000881c <_fstat_r>:
8000881c:	d4 21       	pushm	r4-r7,lr
8000881e:	16 98       	mov	r8,r11
80008820:	18 97       	mov	r7,r12
80008822:	10 9c       	mov	r12,r8
80008824:	30 08       	mov	r8,0
80008826:	e0 66 07 4c 	mov	r6,1868
8000882a:	14 9b       	mov	r11,r10
8000882c:	8d 08       	st.w	r6[0x0],r8
8000882e:	cf de       	rcall	80008628 <_fstat>
80008830:	5b fc       	cp.w	r12,-1
80008832:	c0 51       	brne	8000883c <_fstat_r+0x20>
80008834:	6c 08       	ld.w	r8,r6[0x0]
80008836:	58 08       	cp.w	r8,0
80008838:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000883c:	d8 22       	popm	r4-r7,pc
8000883e:	d7 03       	nop

80008840 <_lseek_r>:
80008840:	d4 21       	pushm	r4-r7,lr
80008842:	16 98       	mov	r8,r11
80008844:	18 97       	mov	r7,r12
80008846:	10 9c       	mov	r12,r8
80008848:	30 08       	mov	r8,0
8000884a:	14 9b       	mov	r11,r10
8000884c:	e0 66 07 4c 	mov	r6,1868
80008850:	12 9a       	mov	r10,r9
80008852:	8d 08       	st.w	r6[0x0],r8
80008854:	cb 8e       	rcall	800085c4 <_lseek>
80008856:	5b fc       	cp.w	r12,-1
80008858:	c0 51       	brne	80008862 <_lseek_r+0x22>
8000885a:	6c 08       	ld.w	r8,r6[0x0]
8000885c:	58 08       	cp.w	r8,0
8000885e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008862:	d8 22       	popm	r4-r7,pc

80008864 <_read_r>:
80008864:	d4 21       	pushm	r4-r7,lr
80008866:	16 98       	mov	r8,r11
80008868:	18 97       	mov	r7,r12
8000886a:	10 9c       	mov	r12,r8
8000886c:	30 08       	mov	r8,0
8000886e:	14 9b       	mov	r11,r10
80008870:	e0 66 07 4c 	mov	r6,1868
80008874:	12 9a       	mov	r10,r9
80008876:	8d 08       	st.w	r6[0x0],r8
80008878:	cb 0e       	rcall	800085d8 <_read>
8000887a:	5b fc       	cp.w	r12,-1
8000887c:	c0 51       	brne	80008886 <_read_r+0x22>
8000887e:	6c 08       	ld.w	r8,r6[0x0]
80008880:	58 08       	cp.w	r8,0
80008882:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008886:	d8 22       	popm	r4-r7,pc

80008888 <__avr32_f64_sub_from_add>:
80008888:	ee 19 80 00 	eorh	r9,0x8000

8000888c <__avr32_f64_sub>:
8000888c:	f7 e9 20 0c 	eor	r12,r11,r9
80008890:	e0 86 00 ca 	brmi	80008a24 <__avr32_f64_add_from_sub>
80008894:	eb cd 40 e0 	pushm	r5-r7,lr
80008898:	16 9c       	mov	r12,r11
8000889a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000889e:	bf db       	cbr	r11,0x1f
800088a0:	bf d9       	cbr	r9,0x1f
800088a2:	10 3a       	cp.w	r10,r8
800088a4:	f2 0b 13 00 	cpc	r11,r9
800088a8:	c0 92       	brcc	800088ba <__avr32_f64_sub+0x2e>
800088aa:	16 97       	mov	r7,r11
800088ac:	12 9b       	mov	r11,r9
800088ae:	0e 99       	mov	r9,r7
800088b0:	14 97       	mov	r7,r10
800088b2:	10 9a       	mov	r10,r8
800088b4:	0e 98       	mov	r8,r7
800088b6:	ee 1c 80 00 	eorh	r12,0x8000
800088ba:	f6 07 16 14 	lsr	r7,r11,0x14
800088be:	ab 7b       	lsl	r11,0xb
800088c0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800088c4:	ab 7a       	lsl	r10,0xb
800088c6:	bf bb       	sbr	r11,0x1f
800088c8:	f2 06 16 14 	lsr	r6,r9,0x14
800088cc:	c4 40       	breq	80008954 <__avr32_f64_sub_opL_subnormal>
800088ce:	ab 79       	lsl	r9,0xb
800088d0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800088d4:	ab 78       	lsl	r8,0xb
800088d6:	bf b9       	sbr	r9,0x1f

800088d8 <__avr32_f64_sub_opL_subnormal_done>:
800088d8:	e0 47 07 ff 	cp.w	r7,2047
800088dc:	c4 f0       	breq	8000897a <__avr32_f64_sub_opH_nan_or_inf>
800088de:	0e 26       	rsub	r6,r7
800088e0:	c1 20       	breq	80008904 <__avr32_f64_sub_shift_done>
800088e2:	ec 05 11 20 	rsub	r5,r6,32
800088e6:	e0 46 00 20 	cp.w	r6,32
800088ea:	c7 c2       	brcc	800089e2 <__avr32_f64_sub_longshift>
800088ec:	f0 05 09 4e 	lsl	lr,r8,r5
800088f0:	f2 05 09 45 	lsl	r5,r9,r5
800088f4:	f0 06 0a 48 	lsr	r8,r8,r6
800088f8:	f2 06 0a 49 	lsr	r9,r9,r6
800088fc:	0a 48       	or	r8,r5
800088fe:	58 0e       	cp.w	lr,0
80008900:	5f 1e       	srne	lr
80008902:	1c 48       	or	r8,lr

80008904 <__avr32_f64_sub_shift_done>:
80008904:	10 1a       	sub	r10,r8
80008906:	f6 09 01 4b 	sbc	r11,r11,r9
8000890a:	f6 06 12 00 	clz	r6,r11
8000890e:	c0 e0       	breq	8000892a <__avr32_f64_sub_longnormalize_done>
80008910:	c7 83       	brcs	80008a00 <__avr32_f64_sub_longnormalize>
80008912:	ec 0e 11 20 	rsub	lr,r6,32
80008916:	f6 06 09 4b 	lsl	r11,r11,r6
8000891a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000891e:	1c 4b       	or	r11,lr
80008920:	f4 06 09 4a 	lsl	r10,r10,r6
80008924:	0c 17       	sub	r7,r6
80008926:	e0 8a 00 39 	brle	80008998 <__avr32_f64_sub_subnormal_result>

8000892a <__avr32_f64_sub_longnormalize_done>:
8000892a:	f4 09 15 15 	lsl	r9,r10,0x15
8000892e:	ab 9a       	lsr	r10,0xb
80008930:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008934:	ab 9b       	lsr	r11,0xb
80008936:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000893a:	18 4b       	or	r11,r12

8000893c <__avr32_f64_sub_round>:
8000893c:	fc 17 80 00 	movh	r7,0x8000
80008940:	ed ba 00 00 	bld	r10,0x0
80008944:	f7 b7 01 ff 	subne	r7,-1
80008948:	0e 39       	cp.w	r9,r7
8000894a:	5f 29       	srhs	r9
8000894c:	12 0a       	add	r10,r9
8000894e:	5c 0b       	acr	r11
80008950:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008954 <__avr32_f64_sub_opL_subnormal>:
80008954:	ab 79       	lsl	r9,0xb
80008956:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000895a:	ab 78       	lsl	r8,0xb
8000895c:	f3 e8 10 0e 	or	lr,r9,r8
80008960:	f9 b6 01 01 	movne	r6,1
80008964:	ee 0e 11 00 	rsub	lr,r7,0
80008968:	f9 b7 00 01 	moveq	r7,1
8000896c:	ef bb 00 1f 	bst	r11,0x1f
80008970:	f7 ea 10 0e 	or	lr,r11,r10
80008974:	f9 b7 00 00 	moveq	r7,0
80008978:	cb 0b       	rjmp	800088d8 <__avr32_f64_sub_opL_subnormal_done>

8000897a <__avr32_f64_sub_opH_nan_or_inf>:
8000897a:	bf db       	cbr	r11,0x1f
8000897c:	f7 ea 10 0e 	or	lr,r11,r10
80008980:	c0 81       	brne	80008990 <__avr32_f64_sub_return_nan>
80008982:	e0 46 07 ff 	cp.w	r6,2047
80008986:	c0 50       	breq	80008990 <__avr32_f64_sub_return_nan>
80008988:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000898c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008990 <__avr32_f64_sub_return_nan>:
80008990:	3f fa       	mov	r10,-1
80008992:	3f fb       	mov	r11,-1
80008994:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008998 <__avr32_f64_sub_subnormal_result>:
80008998:	5c 37       	neg	r7
8000899a:	2f f7       	sub	r7,-1
8000899c:	f1 b7 04 c0 	satu	r7,0x6
800089a0:	e0 47 00 20 	cp.w	r7,32
800089a4:	c1 14       	brge	800089c6 <__avr32_f64_sub_subnormal_result+0x2e>
800089a6:	ee 08 11 20 	rsub	r8,r7,32
800089aa:	f4 08 09 49 	lsl	r9,r10,r8
800089ae:	5f 16       	srne	r6
800089b0:	f4 07 0a 4a 	lsr	r10,r10,r7
800089b4:	0c 4a       	or	r10,r6
800089b6:	f6 08 09 49 	lsl	r9,r11,r8
800089ba:	f5 e9 10 0a 	or	r10,r10,r9
800089be:	f4 07 0a 4b 	lsr	r11,r10,r7
800089c2:	30 07       	mov	r7,0
800089c4:	cb 3b       	rjmp	8000892a <__avr32_f64_sub_longnormalize_done>
800089c6:	ee 08 11 40 	rsub	r8,r7,64
800089ca:	f6 08 09 49 	lsl	r9,r11,r8
800089ce:	14 49       	or	r9,r10
800089d0:	5f 16       	srne	r6
800089d2:	f6 07 0a 4a 	lsr	r10,r11,r7
800089d6:	0c 4a       	or	r10,r6
800089d8:	30 0b       	mov	r11,0
800089da:	30 07       	mov	r7,0
800089dc:	ca 7b       	rjmp	8000892a <__avr32_f64_sub_longnormalize_done>
800089de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800089e2 <__avr32_f64_sub_longshift>:
800089e2:	f1 b6 04 c0 	satu	r6,0x6
800089e6:	f0 0e 17 00 	moveq	lr,r8
800089ea:	c0 40       	breq	800089f2 <__avr32_f64_sub_longshift+0x10>
800089ec:	f2 05 09 4e 	lsl	lr,r9,r5
800089f0:	10 4e       	or	lr,r8
800089f2:	f2 06 0a 48 	lsr	r8,r9,r6
800089f6:	30 09       	mov	r9,0
800089f8:	58 0e       	cp.w	lr,0
800089fa:	5f 1e       	srne	lr
800089fc:	1c 48       	or	r8,lr
800089fe:	c8 3b       	rjmp	80008904 <__avr32_f64_sub_shift_done>

80008a00 <__avr32_f64_sub_longnormalize>:
80008a00:	f4 06 12 00 	clz	r6,r10
80008a04:	f9 b7 03 00 	movlo	r7,0
80008a08:	f9 b6 03 00 	movlo	r6,0
80008a0c:	f9 bc 03 00 	movlo	r12,0
80008a10:	f7 b6 02 e0 	subhs	r6,-32
80008a14:	f4 06 09 4b 	lsl	r11,r10,r6
80008a18:	30 0a       	mov	r10,0
80008a1a:	0c 17       	sub	r7,r6
80008a1c:	fe 9a ff be 	brle	80008998 <__avr32_f64_sub_subnormal_result>
80008a20:	c8 5b       	rjmp	8000892a <__avr32_f64_sub_longnormalize_done>
80008a22:	d7 03       	nop

80008a24 <__avr32_f64_add_from_sub>:
80008a24:	ee 19 80 00 	eorh	r9,0x8000

80008a28 <__avr32_f64_add>:
80008a28:	f7 e9 20 0c 	eor	r12,r11,r9
80008a2c:	fe 96 ff 2e 	brmi	80008888 <__avr32_f64_sub_from_add>
80008a30:	eb cd 40 e0 	pushm	r5-r7,lr
80008a34:	16 9c       	mov	r12,r11
80008a36:	e6 1c 80 00 	andh	r12,0x8000,COH
80008a3a:	bf db       	cbr	r11,0x1f
80008a3c:	bf d9       	cbr	r9,0x1f
80008a3e:	12 3b       	cp.w	r11,r9
80008a40:	c0 72       	brcc	80008a4e <__avr32_f64_add+0x26>
80008a42:	16 97       	mov	r7,r11
80008a44:	12 9b       	mov	r11,r9
80008a46:	0e 99       	mov	r9,r7
80008a48:	14 97       	mov	r7,r10
80008a4a:	10 9a       	mov	r10,r8
80008a4c:	0e 98       	mov	r8,r7
80008a4e:	30 0e       	mov	lr,0
80008a50:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008a54:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008a58:	b5 ab       	sbr	r11,0x14
80008a5a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008a5e:	c6 20       	breq	80008b22 <__avr32_f64_add_op2_subnormal>
80008a60:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008a64:	b5 a9       	sbr	r9,0x14
80008a66:	e0 47 07 ff 	cp.w	r7,2047
80008a6a:	c2 80       	breq	80008aba <__avr32_f64_add_opH_nan_or_inf>
80008a6c:	0e 26       	rsub	r6,r7
80008a6e:	c1 20       	breq	80008a92 <__avr32_f64_add_shift_done>
80008a70:	e0 46 00 36 	cp.w	r6,54
80008a74:	c1 52       	brcc	80008a9e <__avr32_f64_add_res_of_done>
80008a76:	ec 05 11 20 	rsub	r5,r6,32
80008a7a:	e0 46 00 20 	cp.w	r6,32
80008a7e:	c3 52       	brcc	80008ae8 <__avr32_f64_add_longshift>
80008a80:	f0 05 09 4e 	lsl	lr,r8,r5
80008a84:	f2 05 09 45 	lsl	r5,r9,r5
80008a88:	f0 06 0a 48 	lsr	r8,r8,r6
80008a8c:	f2 06 0a 49 	lsr	r9,r9,r6
80008a90:	0a 48       	or	r8,r5

80008a92 <__avr32_f64_add_shift_done>:
80008a92:	10 0a       	add	r10,r8
80008a94:	f6 09 00 4b 	adc	r11,r11,r9
80008a98:	ed bb 00 15 	bld	r11,0x15
80008a9c:	c3 40       	breq	80008b04 <__avr32_f64_add_res_of>

80008a9e <__avr32_f64_add_res_of_done>:
80008a9e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008aa2:	18 4b       	or	r11,r12

80008aa4 <__avr32_f64_add_round>:
80008aa4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008aa8:	18 4e       	or	lr,r12
80008aaa:	ee 1e 80 00 	eorh	lr,0x8000
80008aae:	f1 be 04 20 	satu	lr,0x1
80008ab2:	1c 0a       	add	r10,lr
80008ab4:	5c 0b       	acr	r11
80008ab6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008aba <__avr32_f64_add_opH_nan_or_inf>:
80008aba:	b5 cb       	cbr	r11,0x14
80008abc:	f7 ea 10 0e 	or	lr,r11,r10
80008ac0:	c1 01       	brne	80008ae0 <__avr32_f64_add_return_nan>
80008ac2:	e0 46 07 ff 	cp.w	r6,2047
80008ac6:	c0 30       	breq	80008acc <__avr32_f64_add_opL_nan_or_inf>
80008ac8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008acc <__avr32_f64_add_opL_nan_or_inf>:
80008acc:	b5 c9       	cbr	r9,0x14
80008ace:	f3 e8 10 0e 	or	lr,r9,r8
80008ad2:	c0 71       	brne	80008ae0 <__avr32_f64_add_return_nan>
80008ad4:	30 0a       	mov	r10,0
80008ad6:	fc 1b 7f f0 	movh	r11,0x7ff0
80008ada:	18 4b       	or	r11,r12
80008adc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ae0 <__avr32_f64_add_return_nan>:
80008ae0:	3f fa       	mov	r10,-1
80008ae2:	3f fb       	mov	r11,-1
80008ae4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ae8 <__avr32_f64_add_longshift>:
80008ae8:	f1 b6 04 c0 	satu	r6,0x6
80008aec:	f0 0e 17 00 	moveq	lr,r8
80008af0:	c0 60       	breq	80008afc <__avr32_f64_add_longshift+0x14>
80008af2:	f2 05 09 4e 	lsl	lr,r9,r5
80008af6:	58 08       	cp.w	r8,0
80008af8:	5f 18       	srne	r8
80008afa:	10 4e       	or	lr,r8
80008afc:	f2 06 0a 48 	lsr	r8,r9,r6
80008b00:	30 09       	mov	r9,0
80008b02:	cc 8b       	rjmp	80008a92 <__avr32_f64_add_shift_done>

80008b04 <__avr32_f64_add_res_of>:
80008b04:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008b08:	a1 9b       	lsr	r11,0x1
80008b0a:	5d 0a       	ror	r10
80008b0c:	5d 0e       	ror	lr
80008b0e:	2f f7       	sub	r7,-1
80008b10:	e0 47 07 ff 	cp.w	r7,2047
80008b14:	f9 ba 00 00 	moveq	r10,0
80008b18:	f9 bb 00 00 	moveq	r11,0
80008b1c:	f9 be 00 00 	moveq	lr,0
80008b20:	cb fb       	rjmp	80008a9e <__avr32_f64_add_res_of_done>

80008b22 <__avr32_f64_add_op2_subnormal>:
80008b22:	30 16       	mov	r6,1
80008b24:	58 07       	cp.w	r7,0
80008b26:	ca 01       	brne	80008a66 <__avr32_f64_add+0x3e>
80008b28:	b5 cb       	cbr	r11,0x14
80008b2a:	10 0a       	add	r10,r8
80008b2c:	f6 09 00 4b 	adc	r11,r11,r9
80008b30:	18 4b       	or	r11,r12
80008b32:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008b36:	d7 03       	nop

80008b38 <__avr32_f64_to_u32>:
80008b38:	58 0b       	cp.w	r11,0
80008b3a:	5e 6d       	retmi	0

80008b3c <__avr32_f64_to_s32>:
80008b3c:	f6 0c 15 01 	lsl	r12,r11,0x1
80008b40:	b5 9c       	lsr	r12,0x15
80008b42:	e0 2c 03 ff 	sub	r12,1023
80008b46:	5e 3d       	retlo	0
80008b48:	f8 0c 11 1f 	rsub	r12,r12,31
80008b4c:	16 99       	mov	r9,r11
80008b4e:	ab 7b       	lsl	r11,0xb
80008b50:	bf bb       	sbr	r11,0x1f
80008b52:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008b56:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008b5a:	a1 79       	lsl	r9,0x1
80008b5c:	5e 2b       	reths	r11
80008b5e:	5c 3b       	neg	r11
80008b60:	5e fb       	retal	r11

80008b62 <__avr32_f64_cmp_eq>:
80008b62:	10 3a       	cp.w	r10,r8
80008b64:	f2 0b 13 00 	cpc	r11,r9
80008b68:	c0 80       	breq	80008b78 <__avr32_f64_cmp_eq+0x16>
80008b6a:	a1 7b       	lsl	r11,0x1
80008b6c:	a1 79       	lsl	r9,0x1
80008b6e:	14 4b       	or	r11,r10
80008b70:	12 4b       	or	r11,r9
80008b72:	10 4b       	or	r11,r8
80008b74:	5e 0f       	reteq	1
80008b76:	5e fd       	retal	0
80008b78:	a1 7b       	lsl	r11,0x1
80008b7a:	fc 1c ff e0 	movh	r12,0xffe0
80008b7e:	58 0a       	cp.w	r10,0
80008b80:	f8 0b 13 00 	cpc	r11,r12
80008b84:	5e 8f       	retls	1
80008b86:	5e fd       	retal	0

80008b88 <__avr32_f64_cmp_ge>:
80008b88:	1a de       	st.w	--sp,lr
80008b8a:	1a d7       	st.w	--sp,r7
80008b8c:	a1 7b       	lsl	r11,0x1
80008b8e:	5f 3c       	srlo	r12
80008b90:	a1 79       	lsl	r9,0x1
80008b92:	5f 37       	srlo	r7
80008b94:	5c fc       	rol	r12
80008b96:	fc 1e ff e0 	movh	lr,0xffe0
80008b9a:	58 0a       	cp.w	r10,0
80008b9c:	fc 0b 13 00 	cpc	r11,lr
80008ba0:	e0 8b 00 1d 	brhi	80008bda <__avr32_f64_cmp_ge+0x52>
80008ba4:	58 08       	cp.w	r8,0
80008ba6:	fc 09 13 00 	cpc	r9,lr
80008baa:	e0 8b 00 18 	brhi	80008bda <__avr32_f64_cmp_ge+0x52>
80008bae:	58 0b       	cp.w	r11,0
80008bb0:	f5 ba 00 00 	subfeq	r10,0
80008bb4:	c1 50       	breq	80008bde <__avr32_f64_cmp_ge+0x56>
80008bb6:	1b 07       	ld.w	r7,sp++
80008bb8:	1b 0e       	ld.w	lr,sp++
80008bba:	58 3c       	cp.w	r12,3
80008bbc:	c0 a0       	breq	80008bd0 <__avr32_f64_cmp_ge+0x48>
80008bbe:	58 1c       	cp.w	r12,1
80008bc0:	c0 33       	brcs	80008bc6 <__avr32_f64_cmp_ge+0x3e>
80008bc2:	5e 0f       	reteq	1
80008bc4:	5e 1d       	retne	0
80008bc6:	10 3a       	cp.w	r10,r8
80008bc8:	f2 0b 13 00 	cpc	r11,r9
80008bcc:	5e 2f       	reths	1
80008bce:	5e 3d       	retlo	0
80008bd0:	14 38       	cp.w	r8,r10
80008bd2:	f6 09 13 00 	cpc	r9,r11
80008bd6:	5e 2f       	reths	1
80008bd8:	5e 3d       	retlo	0
80008bda:	1b 07       	ld.w	r7,sp++
80008bdc:	d8 0a       	popm	pc,r12=0
80008bde:	58 17       	cp.w	r7,1
80008be0:	5f 0c       	sreq	r12
80008be2:	58 09       	cp.w	r9,0
80008be4:	f5 b8 00 00 	subfeq	r8,0
80008be8:	1b 07       	ld.w	r7,sp++
80008bea:	1b 0e       	ld.w	lr,sp++
80008bec:	5e 0f       	reteq	1
80008bee:	5e fc       	retal	r12

80008bf0 <__avr32_f64_cmp_lt>:
80008bf0:	1a de       	st.w	--sp,lr
80008bf2:	1a d7       	st.w	--sp,r7
80008bf4:	a1 7b       	lsl	r11,0x1
80008bf6:	5f 3c       	srlo	r12
80008bf8:	a1 79       	lsl	r9,0x1
80008bfa:	5f 37       	srlo	r7
80008bfc:	5c fc       	rol	r12
80008bfe:	fc 1e ff e0 	movh	lr,0xffe0
80008c02:	58 0a       	cp.w	r10,0
80008c04:	fc 0b 13 00 	cpc	r11,lr
80008c08:	e0 8b 00 1d 	brhi	80008c42 <__avr32_f64_cmp_lt+0x52>
80008c0c:	58 08       	cp.w	r8,0
80008c0e:	fc 09 13 00 	cpc	r9,lr
80008c12:	e0 8b 00 18 	brhi	80008c42 <__avr32_f64_cmp_lt+0x52>
80008c16:	58 0b       	cp.w	r11,0
80008c18:	f5 ba 00 00 	subfeq	r10,0
80008c1c:	c1 50       	breq	80008c46 <__avr32_f64_cmp_lt+0x56>
80008c1e:	1b 07       	ld.w	r7,sp++
80008c20:	1b 0e       	ld.w	lr,sp++
80008c22:	58 3c       	cp.w	r12,3
80008c24:	c0 a0       	breq	80008c38 <__avr32_f64_cmp_lt+0x48>
80008c26:	58 1c       	cp.w	r12,1
80008c28:	c0 33       	brcs	80008c2e <__avr32_f64_cmp_lt+0x3e>
80008c2a:	5e 0d       	reteq	0
80008c2c:	5e 1f       	retne	1
80008c2e:	10 3a       	cp.w	r10,r8
80008c30:	f2 0b 13 00 	cpc	r11,r9
80008c34:	5e 2d       	reths	0
80008c36:	5e 3f       	retlo	1
80008c38:	14 38       	cp.w	r8,r10
80008c3a:	f6 09 13 00 	cpc	r9,r11
80008c3e:	5e 2d       	reths	0
80008c40:	5e 3f       	retlo	1
80008c42:	1b 07       	ld.w	r7,sp++
80008c44:	d8 0a       	popm	pc,r12=0
80008c46:	58 17       	cp.w	r7,1
80008c48:	5f 1c       	srne	r12
80008c4a:	58 09       	cp.w	r9,0
80008c4c:	f5 b8 00 00 	subfeq	r8,0
80008c50:	1b 07       	ld.w	r7,sp++
80008c52:	1b 0e       	ld.w	lr,sp++
80008c54:	5e 0d       	reteq	0
80008c56:	5e fc       	retal	r12

80008c58 <__avr32_f64_div>:
80008c58:	eb cd 40 ff 	pushm	r0-r7,lr
80008c5c:	f7 e9 20 0e 	eor	lr,r11,r9
80008c60:	f6 07 16 14 	lsr	r7,r11,0x14
80008c64:	a9 7b       	lsl	r11,0x9
80008c66:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008c6a:	a9 7a       	lsl	r10,0x9
80008c6c:	bd bb       	sbr	r11,0x1d
80008c6e:	e4 1b 3f ff 	andh	r11,0x3fff
80008c72:	ab d7       	cbr	r7,0xb
80008c74:	e0 80 00 cc 	breq	80008e0c <__avr32_f64_div_round_subnormal+0x54>
80008c78:	e0 47 07 ff 	cp.w	r7,2047
80008c7c:	e0 84 00 b5 	brge	80008de6 <__avr32_f64_div_round_subnormal+0x2e>
80008c80:	f2 06 16 14 	lsr	r6,r9,0x14
80008c84:	a9 79       	lsl	r9,0x9
80008c86:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008c8a:	a9 78       	lsl	r8,0x9
80008c8c:	bd b9       	sbr	r9,0x1d
80008c8e:	e4 19 3f ff 	andh	r9,0x3fff
80008c92:	ab d6       	cbr	r6,0xb
80008c94:	e0 80 00 e2 	breq	80008e58 <__avr32_f64_div_round_subnormal+0xa0>
80008c98:	e0 46 07 ff 	cp.w	r6,2047
80008c9c:	e0 84 00 b2 	brge	80008e00 <__avr32_f64_div_round_subnormal+0x48>
80008ca0:	0c 17       	sub	r7,r6
80008ca2:	fe 37 fc 01 	sub	r7,-1023
80008ca6:	fc 1c 80 00 	movh	r12,0x8000
80008caa:	f8 03 16 01 	lsr	r3,r12,0x1
80008cae:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008cb2:	5c d4       	com	r4
80008cb4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008cb8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008cbc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008cc0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008cc4:	ea 03 15 02 	lsl	r3,r5,0x2
80008cc8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008ccc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008cd0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008cd4:	ea 03 15 02 	lsl	r3,r5,0x2
80008cd8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008cdc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008ce0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008ce4:	ea 03 15 02 	lsl	r3,r5,0x2
80008ce8:	e6 08 06 40 	mulu.d	r0,r3,r8
80008cec:	e4 09 07 40 	macu.d	r0,r2,r9
80008cf0:	e6 09 06 44 	mulu.d	r4,r3,r9
80008cf4:	02 04       	add	r4,r1
80008cf6:	5c 05       	acr	r5
80008cf8:	a3 65       	lsl	r5,0x2
80008cfa:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008cfe:	a3 64       	lsl	r4,0x2
80008d00:	5c 34       	neg	r4
80008d02:	f8 05 01 45 	sbc	r5,r12,r5
80008d06:	e6 04 06 40 	mulu.d	r0,r3,r4
80008d0a:	e4 05 07 40 	macu.d	r0,r2,r5
80008d0e:	e6 05 06 44 	mulu.d	r4,r3,r5
80008d12:	02 04       	add	r4,r1
80008d14:	5c 05       	acr	r5
80008d16:	ea 03 15 02 	lsl	r3,r5,0x2
80008d1a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008d1e:	e8 02 15 02 	lsl	r2,r4,0x2
80008d22:	e6 08 06 40 	mulu.d	r0,r3,r8
80008d26:	e4 09 07 40 	macu.d	r0,r2,r9
80008d2a:	e6 09 06 44 	mulu.d	r4,r3,r9
80008d2e:	02 04       	add	r4,r1
80008d30:	5c 05       	acr	r5
80008d32:	a3 65       	lsl	r5,0x2
80008d34:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008d38:	a3 64       	lsl	r4,0x2
80008d3a:	5c 34       	neg	r4
80008d3c:	f8 05 01 45 	sbc	r5,r12,r5
80008d40:	e6 04 06 40 	mulu.d	r0,r3,r4
80008d44:	e4 05 07 40 	macu.d	r0,r2,r5
80008d48:	e6 05 06 44 	mulu.d	r4,r3,r5
80008d4c:	02 04       	add	r4,r1
80008d4e:	5c 05       	acr	r5
80008d50:	ea 03 15 02 	lsl	r3,r5,0x2
80008d54:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008d58:	e8 02 15 02 	lsl	r2,r4,0x2
80008d5c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008d60:	e4 0b 07 40 	macu.d	r0,r2,r11
80008d64:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008d68:	02 02       	add	r2,r1
80008d6a:	5c 03       	acr	r3
80008d6c:	ed b3 00 1c 	bld	r3,0x1c
80008d70:	c0 90       	breq	80008d82 <__avr32_f64_div+0x12a>
80008d72:	a1 72       	lsl	r2,0x1
80008d74:	5c f3       	rol	r3
80008d76:	20 17       	sub	r7,1
80008d78:	a3 9a       	lsr	r10,0x3
80008d7a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008d7e:	a3 9b       	lsr	r11,0x3
80008d80:	c0 58       	rjmp	80008d8a <__avr32_f64_div+0x132>
80008d82:	a5 8a       	lsr	r10,0x4
80008d84:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008d88:	a5 8b       	lsr	r11,0x4
80008d8a:	58 07       	cp.w	r7,0
80008d8c:	e0 8a 00 8b 	brle	80008ea2 <__avr32_f64_div_res_subnormal>
80008d90:	e0 12 ff 00 	andl	r2,0xff00
80008d94:	e8 12 00 80 	orl	r2,0x80
80008d98:	e6 08 06 40 	mulu.d	r0,r3,r8
80008d9c:	e4 09 07 40 	macu.d	r0,r2,r9
80008da0:	e4 08 06 44 	mulu.d	r4,r2,r8
80008da4:	e6 09 06 48 	mulu.d	r8,r3,r9
80008da8:	00 05       	add	r5,r0
80008daa:	f0 01 00 48 	adc	r8,r8,r1
80008dae:	5c 09       	acr	r9
80008db0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008db4:	58 04       	cp.w	r4,0
80008db6:	5c 25       	cpc	r5

80008db8 <__avr32_f64_div_round_subnormal>:
80008db8:	f4 08 13 00 	cpc	r8,r10
80008dbc:	f6 09 13 00 	cpc	r9,r11
80008dc0:	5f 36       	srlo	r6
80008dc2:	f8 06 17 00 	moveq	r6,r12
80008dc6:	e4 0a 16 08 	lsr	r10,r2,0x8
80008dca:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008dce:	e6 0b 16 08 	lsr	r11,r3,0x8
80008dd2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008dd6:	ed be 00 1f 	bld	lr,0x1f
80008dda:	ef bb 00 1f 	bst	r11,0x1f
80008dde:	0c 0a       	add	r10,r6
80008de0:	5c 0b       	acr	r11
80008de2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008de6:	e4 1b 00 0f 	andh	r11,0xf
80008dea:	14 4b       	or	r11,r10
80008dec:	e0 81 00 a7 	brne	80008f3a <__avr32_f64_div_res_subnormal+0x98>
80008df0:	f2 06 16 14 	lsr	r6,r9,0x14
80008df4:	ab d6       	cbr	r6,0xb
80008df6:	e0 46 07 ff 	cp.w	r6,2047
80008dfa:	e0 81 00 a4 	brne	80008f42 <__avr32_f64_div_res_subnormal+0xa0>
80008dfe:	c9 e8       	rjmp	80008f3a <__avr32_f64_div_res_subnormal+0x98>
80008e00:	e4 19 00 0f 	andh	r9,0xf
80008e04:	10 49       	or	r9,r8
80008e06:	e0 81 00 9a 	brne	80008f3a <__avr32_f64_div_res_subnormal+0x98>
80008e0a:	c9 28       	rjmp	80008f2e <__avr32_f64_div_res_subnormal+0x8c>
80008e0c:	a3 7b       	lsl	r11,0x3
80008e0e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008e12:	a3 7a       	lsl	r10,0x3
80008e14:	f5 eb 10 04 	or	r4,r10,r11
80008e18:	e0 80 00 a0 	breq	80008f58 <__avr32_f64_div_op1_zero>
80008e1c:	f6 04 12 00 	clz	r4,r11
80008e20:	c1 70       	breq	80008e4e <__avr32_f64_div_round_subnormal+0x96>
80008e22:	c0 c3       	brcs	80008e3a <__avr32_f64_div_round_subnormal+0x82>
80008e24:	e8 05 11 20 	rsub	r5,r4,32
80008e28:	f6 04 09 4b 	lsl	r11,r11,r4
80008e2c:	f4 05 0a 45 	lsr	r5,r10,r5
80008e30:	0a 4b       	or	r11,r5
80008e32:	f4 04 09 4a 	lsl	r10,r10,r4
80008e36:	08 17       	sub	r7,r4
80008e38:	c0 b8       	rjmp	80008e4e <__avr32_f64_div_round_subnormal+0x96>
80008e3a:	f4 04 12 00 	clz	r4,r10
80008e3e:	f9 b4 03 00 	movlo	r4,0
80008e42:	f7 b4 02 e0 	subhs	r4,-32
80008e46:	f4 04 09 4b 	lsl	r11,r10,r4
80008e4a:	30 0a       	mov	r10,0
80008e4c:	08 17       	sub	r7,r4
80008e4e:	a3 8a       	lsr	r10,0x2
80008e50:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008e54:	a3 8b       	lsr	r11,0x2
80008e56:	c1 1b       	rjmp	80008c78 <__avr32_f64_div+0x20>
80008e58:	a3 79       	lsl	r9,0x3
80008e5a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008e5e:	a3 78       	lsl	r8,0x3
80008e60:	f3 e8 10 04 	or	r4,r9,r8
80008e64:	c6 f0       	breq	80008f42 <__avr32_f64_div_res_subnormal+0xa0>
80008e66:	f2 04 12 00 	clz	r4,r9
80008e6a:	c1 70       	breq	80008e98 <__avr32_f64_div_round_subnormal+0xe0>
80008e6c:	c0 c3       	brcs	80008e84 <__avr32_f64_div_round_subnormal+0xcc>
80008e6e:	e8 05 11 20 	rsub	r5,r4,32
80008e72:	f2 04 09 49 	lsl	r9,r9,r4
80008e76:	f0 05 0a 45 	lsr	r5,r8,r5
80008e7a:	0a 49       	or	r9,r5
80008e7c:	f0 04 09 48 	lsl	r8,r8,r4
80008e80:	08 16       	sub	r6,r4
80008e82:	c0 b8       	rjmp	80008e98 <__avr32_f64_div_round_subnormal+0xe0>
80008e84:	f0 04 12 00 	clz	r4,r8
80008e88:	f9 b4 03 00 	movlo	r4,0
80008e8c:	f7 b4 02 e0 	subhs	r4,-32
80008e90:	f0 04 09 49 	lsl	r9,r8,r4
80008e94:	30 08       	mov	r8,0
80008e96:	08 16       	sub	r6,r4
80008e98:	a3 88       	lsr	r8,0x2
80008e9a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008e9e:	a3 89       	lsr	r9,0x2
80008ea0:	cf ca       	rjmp	80008c98 <__avr32_f64_div+0x40>

80008ea2 <__avr32_f64_div_res_subnormal>:
80008ea2:	5c 37       	neg	r7
80008ea4:	2f f7       	sub	r7,-1
80008ea6:	f1 b7 04 c0 	satu	r7,0x6
80008eaa:	e0 47 00 20 	cp.w	r7,32
80008eae:	c1 54       	brge	80008ed8 <__avr32_f64_div_res_subnormal+0x36>
80008eb0:	ee 06 11 20 	rsub	r6,r7,32
80008eb4:	e4 07 0a 42 	lsr	r2,r2,r7
80008eb8:	e6 06 09 4c 	lsl	r12,r3,r6
80008ebc:	18 42       	or	r2,r12
80008ebe:	e6 07 0a 43 	lsr	r3,r3,r7
80008ec2:	f4 06 09 41 	lsl	r1,r10,r6
80008ec6:	f4 07 0a 4a 	lsr	r10,r10,r7
80008eca:	f6 06 09 4c 	lsl	r12,r11,r6
80008ece:	18 4a       	or	r10,r12
80008ed0:	f6 07 0a 4b 	lsr	r11,r11,r7
80008ed4:	30 00       	mov	r0,0
80008ed6:	c1 58       	rjmp	80008f00 <__avr32_f64_div_res_subnormal+0x5e>
80008ed8:	ee 06 11 20 	rsub	r6,r7,32
80008edc:	f9 b0 00 00 	moveq	r0,0
80008ee0:	f9 bc 00 00 	moveq	r12,0
80008ee4:	c0 50       	breq	80008eee <__avr32_f64_div_res_subnormal+0x4c>
80008ee6:	f4 06 09 40 	lsl	r0,r10,r6
80008eea:	f6 06 09 4c 	lsl	r12,r11,r6
80008eee:	e6 07 0a 42 	lsr	r2,r3,r7
80008ef2:	30 03       	mov	r3,0
80008ef4:	f4 07 0a 41 	lsr	r1,r10,r7
80008ef8:	18 41       	or	r1,r12
80008efa:	f6 07 0a 4a 	lsr	r10,r11,r7
80008efe:	30 0b       	mov	r11,0
80008f00:	e0 12 ff 00 	andl	r2,0xff00
80008f04:	e8 12 00 80 	orl	r2,0x80
80008f08:	e6 08 06 46 	mulu.d	r6,r3,r8
80008f0c:	e4 09 07 46 	macu.d	r6,r2,r9
80008f10:	e4 08 06 44 	mulu.d	r4,r2,r8
80008f14:	e6 09 06 48 	mulu.d	r8,r3,r9
80008f18:	0c 05       	add	r5,r6
80008f1a:	f0 07 00 48 	adc	r8,r8,r7
80008f1e:	5c 09       	acr	r9
80008f20:	30 07       	mov	r7,0
80008f22:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008f26:	00 34       	cp.w	r4,r0
80008f28:	e2 05 13 00 	cpc	r5,r1
80008f2c:	c4 6b       	rjmp	80008db8 <__avr32_f64_div_round_subnormal>
80008f2e:	1c 9b       	mov	r11,lr
80008f30:	e6 1b 80 00 	andh	r11,0x8000,COH
80008f34:	30 0a       	mov	r10,0
80008f36:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008f3a:	3f fb       	mov	r11,-1
80008f3c:	30 0a       	mov	r10,0
80008f3e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008f42:	f5 eb 10 04 	or	r4,r10,r11
80008f46:	c0 90       	breq	80008f58 <__avr32_f64_div_op1_zero>
80008f48:	1c 9b       	mov	r11,lr
80008f4a:	e6 1b 80 00 	andh	r11,0x8000,COH
80008f4e:	ea 1b 7f f0 	orh	r11,0x7ff0
80008f52:	30 0a       	mov	r10,0
80008f54:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008f58 <__avr32_f64_div_op1_zero>:
80008f58:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008f5c:	ce f0       	breq	80008f3a <__avr32_f64_div_res_subnormal+0x98>
80008f5e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008f62:	e0 44 07 ff 	cp.w	r4,2047
80008f66:	ce 41       	brne	80008f2e <__avr32_f64_div_res_subnormal+0x8c>
80008f68:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008f6c:	ce 10       	breq	80008f2e <__avr32_f64_div_res_subnormal+0x8c>
80008f6e:	ce 6b       	rjmp	80008f3a <__avr32_f64_div_res_subnormal+0x98>

80008f70 <__avr32_udiv64>:
80008f70:	d4 31       	pushm	r0-r7,lr
80008f72:	1a 97       	mov	r7,sp
80008f74:	20 3d       	sub	sp,12
80008f76:	10 9c       	mov	r12,r8
80008f78:	12 9e       	mov	lr,r9
80008f7a:	14 93       	mov	r3,r10
80008f7c:	58 09       	cp.w	r9,0
80008f7e:	e0 81 00 bd 	brne	800090f8 <__avr32_udiv64+0x188>
80008f82:	16 38       	cp.w	r8,r11
80008f84:	e0 88 00 40 	brls	80009004 <__avr32_udiv64+0x94>
80008f88:	f0 08 12 00 	clz	r8,r8
80008f8c:	c0 d0       	breq	80008fa6 <__avr32_udiv64+0x36>
80008f8e:	f6 08 09 4b 	lsl	r11,r11,r8
80008f92:	f0 09 11 20 	rsub	r9,r8,32
80008f96:	f8 08 09 4c 	lsl	r12,r12,r8
80008f9a:	f4 09 0a 49 	lsr	r9,r10,r9
80008f9e:	f4 08 09 43 	lsl	r3,r10,r8
80008fa2:	f3 eb 10 0b 	or	r11,r9,r11
80008fa6:	f8 0e 16 10 	lsr	lr,r12,0x10
80008faa:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008fae:	f6 0e 0d 00 	divu	r0,r11,lr
80008fb2:	e6 0b 16 10 	lsr	r11,r3,0x10
80008fb6:	00 99       	mov	r9,r0
80008fb8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008fbc:	e0 0a 02 48 	mul	r8,r0,r10
80008fc0:	10 3b       	cp.w	r11,r8
80008fc2:	c0 a2       	brcc	80008fd6 <__avr32_udiv64+0x66>
80008fc4:	20 19       	sub	r9,1
80008fc6:	18 0b       	add	r11,r12
80008fc8:	18 3b       	cp.w	r11,r12
80008fca:	c0 63       	brcs	80008fd6 <__avr32_udiv64+0x66>
80008fcc:	10 3b       	cp.w	r11,r8
80008fce:	f7 b9 03 01 	sublo	r9,1
80008fd2:	f7 dc e3 0b 	addcs	r11,r11,r12
80008fd6:	f6 08 01 01 	sub	r1,r11,r8
80008fda:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008fde:	e2 0e 0d 00 	divu	r0,r1,lr
80008fe2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008fe6:	00 98       	mov	r8,r0
80008fe8:	e0 0a 02 4a 	mul	r10,r0,r10
80008fec:	14 33       	cp.w	r3,r10
80008fee:	c0 82       	brcc	80008ffe <__avr32_udiv64+0x8e>
80008ff0:	20 18       	sub	r8,1
80008ff2:	18 03       	add	r3,r12
80008ff4:	18 33       	cp.w	r3,r12
80008ff6:	c0 43       	brcs	80008ffe <__avr32_udiv64+0x8e>
80008ff8:	14 33       	cp.w	r3,r10
80008ffa:	f7 b8 03 01 	sublo	r8,1
80008ffe:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80009002:	cd f8       	rjmp	800091c0 <__avr32_udiv64+0x250>
80009004:	58 08       	cp.w	r8,0
80009006:	c0 51       	brne	80009010 <__avr32_udiv64+0xa0>
80009008:	30 19       	mov	r9,1
8000900a:	f2 08 0d 08 	divu	r8,r9,r8
8000900e:	10 9c       	mov	r12,r8
80009010:	f8 06 12 00 	clz	r6,r12
80009014:	c0 41       	brne	8000901c <__avr32_udiv64+0xac>
80009016:	18 1b       	sub	r11,r12
80009018:	30 19       	mov	r9,1
8000901a:	c4 08       	rjmp	8000909a <__avr32_udiv64+0x12a>
8000901c:	ec 01 11 20 	rsub	r1,r6,32
80009020:	f4 01 0a 49 	lsr	r9,r10,r1
80009024:	f8 06 09 4c 	lsl	r12,r12,r6
80009028:	f6 06 09 48 	lsl	r8,r11,r6
8000902c:	f6 01 0a 41 	lsr	r1,r11,r1
80009030:	f3 e8 10 08 	or	r8,r9,r8
80009034:	f8 03 16 10 	lsr	r3,r12,0x10
80009038:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000903c:	e2 03 0d 00 	divu	r0,r1,r3
80009040:	f0 0b 16 10 	lsr	r11,r8,0x10
80009044:	00 9e       	mov	lr,r0
80009046:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000904a:	e0 05 02 49 	mul	r9,r0,r5
8000904e:	12 3b       	cp.w	r11,r9
80009050:	c0 a2       	brcc	80009064 <__avr32_udiv64+0xf4>
80009052:	20 1e       	sub	lr,1
80009054:	18 0b       	add	r11,r12
80009056:	18 3b       	cp.w	r11,r12
80009058:	c0 63       	brcs	80009064 <__avr32_udiv64+0xf4>
8000905a:	12 3b       	cp.w	r11,r9
8000905c:	f7 be 03 01 	sublo	lr,1
80009060:	f7 dc e3 0b 	addcs	r11,r11,r12
80009064:	12 1b       	sub	r11,r9
80009066:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000906a:	f6 03 0d 02 	divu	r2,r11,r3
8000906e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80009072:	04 99       	mov	r9,r2
80009074:	e4 05 02 4b 	mul	r11,r2,r5
80009078:	16 38       	cp.w	r8,r11
8000907a:	c0 a2       	brcc	8000908e <__avr32_udiv64+0x11e>
8000907c:	20 19       	sub	r9,1
8000907e:	18 08       	add	r8,r12
80009080:	18 38       	cp.w	r8,r12
80009082:	c0 63       	brcs	8000908e <__avr32_udiv64+0x11e>
80009084:	16 38       	cp.w	r8,r11
80009086:	f7 b9 03 01 	sublo	r9,1
8000908a:	f1 dc e3 08 	addcs	r8,r8,r12
8000908e:	f4 06 09 43 	lsl	r3,r10,r6
80009092:	f0 0b 01 0b 	sub	r11,r8,r11
80009096:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000909a:	f8 06 16 10 	lsr	r6,r12,0x10
8000909e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800090a2:	f6 06 0d 00 	divu	r0,r11,r6
800090a6:	e6 0b 16 10 	lsr	r11,r3,0x10
800090aa:	00 9a       	mov	r10,r0
800090ac:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800090b0:	e0 0e 02 48 	mul	r8,r0,lr
800090b4:	10 3b       	cp.w	r11,r8
800090b6:	c0 a2       	brcc	800090ca <__avr32_udiv64+0x15a>
800090b8:	20 1a       	sub	r10,1
800090ba:	18 0b       	add	r11,r12
800090bc:	18 3b       	cp.w	r11,r12
800090be:	c0 63       	brcs	800090ca <__avr32_udiv64+0x15a>
800090c0:	10 3b       	cp.w	r11,r8
800090c2:	f7 ba 03 01 	sublo	r10,1
800090c6:	f7 dc e3 0b 	addcs	r11,r11,r12
800090ca:	f6 08 01 01 	sub	r1,r11,r8
800090ce:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800090d2:	e2 06 0d 00 	divu	r0,r1,r6
800090d6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800090da:	00 98       	mov	r8,r0
800090dc:	e0 0e 02 4b 	mul	r11,r0,lr
800090e0:	16 33       	cp.w	r3,r11
800090e2:	c0 82       	brcc	800090f2 <__avr32_udiv64+0x182>
800090e4:	20 18       	sub	r8,1
800090e6:	18 03       	add	r3,r12
800090e8:	18 33       	cp.w	r3,r12
800090ea:	c0 43       	brcs	800090f2 <__avr32_udiv64+0x182>
800090ec:	16 33       	cp.w	r3,r11
800090ee:	f7 b8 03 01 	sublo	r8,1
800090f2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800090f6:	c6 98       	rjmp	800091c8 <__avr32_udiv64+0x258>
800090f8:	16 39       	cp.w	r9,r11
800090fa:	e0 8b 00 65 	brhi	800091c4 <__avr32_udiv64+0x254>
800090fe:	f2 09 12 00 	clz	r9,r9
80009102:	c0 b1       	brne	80009118 <__avr32_udiv64+0x1a8>
80009104:	10 3a       	cp.w	r10,r8
80009106:	5f 2a       	srhs	r10
80009108:	1c 3b       	cp.w	r11,lr
8000910a:	5f b8       	srhi	r8
8000910c:	10 4a       	or	r10,r8
8000910e:	f2 0a 18 00 	cp.b	r10,r9
80009112:	c5 90       	breq	800091c4 <__avr32_udiv64+0x254>
80009114:	30 18       	mov	r8,1
80009116:	c5 98       	rjmp	800091c8 <__avr32_udiv64+0x258>
80009118:	f0 09 09 46 	lsl	r6,r8,r9
8000911c:	f2 03 11 20 	rsub	r3,r9,32
80009120:	fc 09 09 4e 	lsl	lr,lr,r9
80009124:	f0 03 0a 48 	lsr	r8,r8,r3
80009128:	f6 09 09 4c 	lsl	r12,r11,r9
8000912c:	f4 03 0a 42 	lsr	r2,r10,r3
80009130:	ef 46 ff f4 	st.w	r7[-12],r6
80009134:	f6 03 0a 43 	lsr	r3,r11,r3
80009138:	18 42       	or	r2,r12
8000913a:	f1 ee 10 0c 	or	r12,r8,lr
8000913e:	f8 01 16 10 	lsr	r1,r12,0x10
80009142:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009146:	e6 01 0d 04 	divu	r4,r3,r1
8000914a:	e4 03 16 10 	lsr	r3,r2,0x10
8000914e:	08 9e       	mov	lr,r4
80009150:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009154:	e8 06 02 48 	mul	r8,r4,r6
80009158:	10 33       	cp.w	r3,r8
8000915a:	c0 a2       	brcc	8000916e <__avr32_udiv64+0x1fe>
8000915c:	20 1e       	sub	lr,1
8000915e:	18 03       	add	r3,r12
80009160:	18 33       	cp.w	r3,r12
80009162:	c0 63       	brcs	8000916e <__avr32_udiv64+0x1fe>
80009164:	10 33       	cp.w	r3,r8
80009166:	f7 be 03 01 	sublo	lr,1
8000916a:	e7 dc e3 03 	addcs	r3,r3,r12
8000916e:	10 13       	sub	r3,r8
80009170:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80009174:	e6 01 0d 00 	divu	r0,r3,r1
80009178:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000917c:	00 98       	mov	r8,r0
8000917e:	e0 06 02 46 	mul	r6,r0,r6
80009182:	0c 3b       	cp.w	r11,r6
80009184:	c0 a2       	brcc	80009198 <__avr32_udiv64+0x228>
80009186:	20 18       	sub	r8,1
80009188:	18 0b       	add	r11,r12
8000918a:	18 3b       	cp.w	r11,r12
8000918c:	c0 63       	brcs	80009198 <__avr32_udiv64+0x228>
8000918e:	0c 3b       	cp.w	r11,r6
80009190:	f7 dc e3 0b 	addcs	r11,r11,r12
80009194:	f7 b8 03 01 	sublo	r8,1
80009198:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000919c:	ee f4 ff f4 	ld.w	r4,r7[-12]
800091a0:	0c 1b       	sub	r11,r6
800091a2:	f0 04 06 42 	mulu.d	r2,r8,r4
800091a6:	06 95       	mov	r5,r3
800091a8:	16 35       	cp.w	r5,r11
800091aa:	e0 8b 00 0a 	brhi	800091be <__avr32_udiv64+0x24e>
800091ae:	5f 0b       	sreq	r11
800091b0:	f4 09 09 49 	lsl	r9,r10,r9
800091b4:	12 32       	cp.w	r2,r9
800091b6:	5f b9       	srhi	r9
800091b8:	f7 e9 00 09 	and	r9,r11,r9
800091bc:	c0 60       	breq	800091c8 <__avr32_udiv64+0x258>
800091be:	20 18       	sub	r8,1
800091c0:	30 09       	mov	r9,0
800091c2:	c0 38       	rjmp	800091c8 <__avr32_udiv64+0x258>
800091c4:	30 09       	mov	r9,0
800091c6:	12 98       	mov	r8,r9
800091c8:	10 9a       	mov	r10,r8
800091ca:	12 93       	mov	r3,r9
800091cc:	10 92       	mov	r2,r8
800091ce:	12 9b       	mov	r11,r9
800091d0:	2f dd       	sub	sp,-12
800091d2:	d8 32       	popm	r0-r7,pc

800091d4 <__avr32_umod64>:
800091d4:	d4 31       	pushm	r0-r7,lr
800091d6:	1a 97       	mov	r7,sp
800091d8:	20 3d       	sub	sp,12
800091da:	10 9c       	mov	r12,r8
800091dc:	12 95       	mov	r5,r9
800091de:	14 9e       	mov	lr,r10
800091e0:	16 91       	mov	r1,r11
800091e2:	16 96       	mov	r6,r11
800091e4:	58 09       	cp.w	r9,0
800091e6:	e0 81 00 81 	brne	800092e8 <__avr32_umod64+0x114>
800091ea:	16 38       	cp.w	r8,r11
800091ec:	e0 88 00 12 	brls	80009210 <__avr32_umod64+0x3c>
800091f0:	f0 08 12 00 	clz	r8,r8
800091f4:	c4 e0       	breq	80009290 <__avr32_umod64+0xbc>
800091f6:	f6 08 09 46 	lsl	r6,r11,r8
800091fa:	f8 08 09 4c 	lsl	r12,r12,r8
800091fe:	f0 0b 11 20 	rsub	r11,r8,32
80009202:	f4 08 09 4e 	lsl	lr,r10,r8
80009206:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000920a:	f7 e6 10 06 	or	r6,r11,r6
8000920e:	c4 18       	rjmp	80009290 <__avr32_umod64+0xbc>
80009210:	58 08       	cp.w	r8,0
80009212:	c0 51       	brne	8000921c <__avr32_umod64+0x48>
80009214:	30 19       	mov	r9,1
80009216:	f2 08 0d 08 	divu	r8,r9,r8
8000921a:	10 9c       	mov	r12,r8
8000921c:	f8 08 12 00 	clz	r8,r12
80009220:	c0 31       	brne	80009226 <__avr32_umod64+0x52>
80009222:	18 16       	sub	r6,r12
80009224:	c3 68       	rjmp	80009290 <__avr32_umod64+0xbc>
80009226:	f0 03 11 20 	rsub	r3,r8,32
8000922a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000922e:	f8 08 09 4c 	lsl	r12,r12,r8
80009232:	ec 08 09 49 	lsl	r9,r6,r8
80009236:	ec 03 0a 43 	lsr	r3,r6,r3
8000923a:	f7 e9 10 09 	or	r9,r11,r9
8000923e:	f8 05 16 10 	lsr	r5,r12,0x10
80009242:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009246:	e6 05 0d 02 	divu	r2,r3,r5
8000924a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000924e:	ec 02 02 4b 	mul	r11,r6,r2
80009252:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009256:	16 3e       	cp.w	lr,r11
80009258:	c0 72       	brcc	80009266 <__avr32_umod64+0x92>
8000925a:	18 0e       	add	lr,r12
8000925c:	18 3e       	cp.w	lr,r12
8000925e:	c0 43       	brcs	80009266 <__avr32_umod64+0x92>
80009260:	16 3e       	cp.w	lr,r11
80009262:	fd dc e3 0e 	addcs	lr,lr,r12
80009266:	fc 0b 01 03 	sub	r3,lr,r11
8000926a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000926e:	e6 05 0d 02 	divu	r2,r3,r5
80009272:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009276:	a5 36       	mul	r6,r2
80009278:	0c 39       	cp.w	r9,r6
8000927a:	c0 72       	brcc	80009288 <__avr32_umod64+0xb4>
8000927c:	18 09       	add	r9,r12
8000927e:	18 39       	cp.w	r9,r12
80009280:	c0 43       	brcs	80009288 <__avr32_umod64+0xb4>
80009282:	0c 39       	cp.w	r9,r6
80009284:	f3 dc e3 09 	addcs	r9,r9,r12
80009288:	f2 06 01 06 	sub	r6,r9,r6
8000928c:	f4 08 09 4e 	lsl	lr,r10,r8
80009290:	f8 0a 16 10 	lsr	r10,r12,0x10
80009294:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009298:	ec 0a 0d 02 	divu	r2,r6,r10
8000929c:	fc 09 16 10 	lsr	r9,lr,0x10
800092a0:	ea 02 02 4b 	mul	r11,r5,r2
800092a4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800092a8:	16 39       	cp.w	r9,r11
800092aa:	c0 72       	brcc	800092b8 <__avr32_umod64+0xe4>
800092ac:	18 09       	add	r9,r12
800092ae:	18 39       	cp.w	r9,r12
800092b0:	c0 43       	brcs	800092b8 <__avr32_umod64+0xe4>
800092b2:	16 39       	cp.w	r9,r11
800092b4:	f3 dc e3 09 	addcs	r9,r9,r12
800092b8:	f2 0b 01 0b 	sub	r11,r9,r11
800092bc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800092c0:	f6 0a 0d 0a 	divu	r10,r11,r10
800092c4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800092c8:	ea 0a 02 4a 	mul	r10,r5,r10
800092cc:	14 3e       	cp.w	lr,r10
800092ce:	c0 72       	brcc	800092dc <__avr32_umod64+0x108>
800092d0:	18 0e       	add	lr,r12
800092d2:	18 3e       	cp.w	lr,r12
800092d4:	c0 43       	brcs	800092dc <__avr32_umod64+0x108>
800092d6:	14 3e       	cp.w	lr,r10
800092d8:	fd dc e3 0e 	addcs	lr,lr,r12
800092dc:	fc 0a 01 0a 	sub	r10,lr,r10
800092e0:	30 0b       	mov	r11,0
800092e2:	f4 08 0a 4a 	lsr	r10,r10,r8
800092e6:	c7 b8       	rjmp	800093dc <__avr32_umod64+0x208>
800092e8:	16 39       	cp.w	r9,r11
800092ea:	e0 8b 00 79 	brhi	800093dc <__avr32_umod64+0x208>
800092ee:	f2 09 12 00 	clz	r9,r9
800092f2:	c1 21       	brne	80009316 <__avr32_umod64+0x142>
800092f4:	10 3a       	cp.w	r10,r8
800092f6:	5f 2b       	srhs	r11
800092f8:	0a 31       	cp.w	r1,r5
800092fa:	5f ba       	srhi	r10
800092fc:	f7 ea 10 0a 	or	r10,r11,r10
80009300:	f2 0a 18 00 	cp.b	r10,r9
80009304:	c0 60       	breq	80009310 <__avr32_umod64+0x13c>
80009306:	fc 08 01 0c 	sub	r12,lr,r8
8000930a:	e2 05 01 46 	sbc	r6,r1,r5
8000930e:	18 9e       	mov	lr,r12
80009310:	0c 9b       	mov	r11,r6
80009312:	1c 9a       	mov	r10,lr
80009314:	c6 48       	rjmp	800093dc <__avr32_umod64+0x208>
80009316:	ea 09 09 4c 	lsl	r12,r5,r9
8000931a:	f2 06 11 20 	rsub	r6,r9,32
8000931e:	f6 09 09 4b 	lsl	r11,r11,r9
80009322:	f0 09 09 42 	lsl	r2,r8,r9
80009326:	ef 46 ff f4 	st.w	r7[-12],r6
8000932a:	f0 06 0a 48 	lsr	r8,r8,r6
8000932e:	18 48       	or	r8,r12
80009330:	e2 06 0a 4c 	lsr	r12,r1,r6
80009334:	f4 09 09 43 	lsl	r3,r10,r9
80009338:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000933c:	f4 06 0a 4a 	lsr	r10,r10,r6
80009340:	16 4a       	or	r10,r11
80009342:	f0 0b 16 10 	lsr	r11,r8,0x10
80009346:	f8 0b 0d 04 	divu	r4,r12,r11
8000934a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000934e:	08 91       	mov	r1,r4
80009350:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009354:	e8 0e 02 46 	mul	r6,r4,lr
80009358:	0c 3c       	cp.w	r12,r6
8000935a:	c0 a2       	brcc	8000936e <__avr32_umod64+0x19a>
8000935c:	20 11       	sub	r1,1
8000935e:	10 0c       	add	r12,r8
80009360:	10 3c       	cp.w	r12,r8
80009362:	c0 63       	brcs	8000936e <__avr32_umod64+0x19a>
80009364:	0c 3c       	cp.w	r12,r6
80009366:	f7 b1 03 01 	sublo	r1,1
8000936a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000936e:	0c 1c       	sub	r12,r6
80009370:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009374:	f8 0b 0d 04 	divu	r4,r12,r11
80009378:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000937c:	08 96       	mov	r6,r4
8000937e:	e8 0e 02 4e 	mul	lr,r4,lr
80009382:	1c 3b       	cp.w	r11,lr
80009384:	c0 a2       	brcc	80009398 <__avr32_umod64+0x1c4>
80009386:	20 16       	sub	r6,1
80009388:	10 0b       	add	r11,r8
8000938a:	10 3b       	cp.w	r11,r8
8000938c:	c0 63       	brcs	80009398 <__avr32_umod64+0x1c4>
8000938e:	1c 3b       	cp.w	r11,lr
80009390:	f7 b6 03 01 	sublo	r6,1
80009394:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009398:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000939c:	1c 1b       	sub	r11,lr
8000939e:	e2 02 06 40 	mulu.d	r0,r1,r2
800093a2:	00 9e       	mov	lr,r0
800093a4:	02 9c       	mov	r12,r1
800093a6:	16 3c       	cp.w	r12,r11
800093a8:	e0 8b 00 08 	brhi	800093b8 <__avr32_umod64+0x1e4>
800093ac:	5f 06       	sreq	r6
800093ae:	06 30       	cp.w	r0,r3
800093b0:	5f ba       	srhi	r10
800093b2:	ed ea 00 0a 	and	r10,r6,r10
800093b6:	c0 60       	breq	800093c2 <__avr32_umod64+0x1ee>
800093b8:	fc 02 01 04 	sub	r4,lr,r2
800093bc:	f8 08 01 4c 	sbc	r12,r12,r8
800093c0:	08 9e       	mov	lr,r4
800093c2:	e6 0e 01 0a 	sub	r10,r3,lr
800093c6:	f6 0c 01 4c 	sbc	r12,r11,r12
800093ca:	ee f1 ff f4 	ld.w	r1,r7[-12]
800093ce:	f8 09 0a 4b 	lsr	r11,r12,r9
800093d2:	f4 09 0a 4a 	lsr	r10,r10,r9
800093d6:	f8 01 09 4c 	lsl	r12,r12,r1
800093da:	18 4a       	or	r10,r12
800093dc:	2f dd       	sub	sp,-12
800093de:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009400:	c0 08       	rjmp	80009400 <_evba>
	...

80009404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009404:	c0 08       	rjmp	80009404 <_handle_TLB_Multiple_Hit>
	...

80009408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009408:	c0 08       	rjmp	80009408 <_handle_Bus_Error_Data_Fetch>
	...

8000940c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000940c:	c0 08       	rjmp	8000940c <_handle_Bus_Error_Instruction_Fetch>
	...

80009410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009410:	c0 08       	rjmp	80009410 <_handle_NMI>
	...

80009414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009414:	c0 08       	rjmp	80009414 <_handle_Instruction_Address>
	...

80009418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009418:	c0 08       	rjmp	80009418 <_handle_ITLB_Protection>
	...

8000941c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000941c:	c0 08       	rjmp	8000941c <_handle_Breakpoint>
	...

80009420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009420:	c0 08       	rjmp	80009420 <_handle_Illegal_Opcode>
	...

80009424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009424:	c0 08       	rjmp	80009424 <_handle_Unimplemented_Instruction>
	...

80009428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009428:	c0 08       	rjmp	80009428 <_handle_Privilege_Violation>
	...

8000942c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000942c:	c0 08       	rjmp	8000942c <_handle_Floating_Point>
	...

80009430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009430:	c0 08       	rjmp	80009430 <_handle_Coprocessor_Absent>
	...

80009434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009434:	c0 08       	rjmp	80009434 <_handle_Data_Address_Read>
	...

80009438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009438:	c0 08       	rjmp	80009438 <_handle_Data_Address_Write>
	...

8000943c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000943c:	c0 08       	rjmp	8000943c <_handle_DTLB_Protection_Read>
	...

80009440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009440:	c0 08       	rjmp	80009440 <_handle_DTLB_Protection_Write>
	...

80009444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009444:	c0 08       	rjmp	80009444 <_handle_DTLB_Modified>
	...

80009450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009450:	c0 08       	rjmp	80009450 <_handle_ITLB_Miss>
	...

80009460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009460:	c0 08       	rjmp	80009460 <_handle_DTLB_Miss_Read>
	...

80009470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009470:	c0 08       	rjmp	80009470 <_handle_DTLB_Miss_Write>
	...

80009500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009500:	c0 08       	rjmp	80009500 <_handle_Supervisor_Call>
80009502:	d7 03       	nop

80009504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009504:	30 0c       	mov	r12,0
80009506:	fe b0 c9 55 	rcall	800027b0 <_get_interrupt_handler>
8000950a:	58 0c       	cp.w	r12,0
8000950c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009510:	d6 03       	rete

80009512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009512:	30 1c       	mov	r12,1
80009514:	fe b0 c9 4e 	rcall	800027b0 <_get_interrupt_handler>
80009518:	58 0c       	cp.w	r12,0
8000951a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000951e:	d6 03       	rete

80009520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009520:	30 2c       	mov	r12,2
80009522:	fe b0 c9 47 	rcall	800027b0 <_get_interrupt_handler>
80009526:	58 0c       	cp.w	r12,0
80009528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000952c:	d6 03       	rete

8000952e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000952e:	30 3c       	mov	r12,3
80009530:	fe b0 c9 40 	rcall	800027b0 <_get_interrupt_handler>
80009534:	58 0c       	cp.w	r12,0
80009536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000953a:	d6 03       	rete
8000953c:	d7 03       	nop
8000953e:	d7 03       	nop
80009540:	d7 03       	nop
80009542:	d7 03       	nop
80009544:	d7 03       	nop
80009546:	d7 03       	nop
80009548:	d7 03       	nop
8000954a:	d7 03       	nop
8000954c:	d7 03       	nop
8000954e:	d7 03       	nop
80009550:	d7 03       	nop
80009552:	d7 03       	nop
80009554:	d7 03       	nop
80009556:	d7 03       	nop
80009558:	d7 03       	nop
8000955a:	d7 03       	nop
8000955c:	d7 03       	nop
8000955e:	d7 03       	nop
80009560:	d7 03       	nop
80009562:	d7 03       	nop
80009564:	d7 03       	nop
80009566:	d7 03       	nop
80009568:	d7 03       	nop
8000956a:	d7 03       	nop
8000956c:	d7 03       	nop
8000956e:	d7 03       	nop
80009570:	d7 03       	nop
80009572:	d7 03       	nop
80009574:	d7 03       	nop
80009576:	d7 03       	nop
80009578:	d7 03       	nop
8000957a:	d7 03       	nop
8000957c:	d7 03       	nop
8000957e:	d7 03       	nop
80009580:	d7 03       	nop
80009582:	d7 03       	nop
80009584:	d7 03       	nop
80009586:	d7 03       	nop
80009588:	d7 03       	nop
8000958a:	d7 03       	nop
8000958c:	d7 03       	nop
8000958e:	d7 03       	nop
80009590:	d7 03       	nop
80009592:	d7 03       	nop
80009594:	d7 03       	nop
80009596:	d7 03       	nop
80009598:	d7 03       	nop
8000959a:	d7 03       	nop
8000959c:	d7 03       	nop
8000959e:	d7 03       	nop
800095a0:	d7 03       	nop
800095a2:	d7 03       	nop
800095a4:	d7 03       	nop
800095a6:	d7 03       	nop
800095a8:	d7 03       	nop
800095aa:	d7 03       	nop
800095ac:	d7 03       	nop
800095ae:	d7 03       	nop
800095b0:	d7 03       	nop
800095b2:	d7 03       	nop
800095b4:	d7 03       	nop
800095b6:	d7 03       	nop
800095b8:	d7 03       	nop
800095ba:	d7 03       	nop
800095bc:	d7 03       	nop
800095be:	d7 03       	nop
800095c0:	d7 03       	nop
800095c2:	d7 03       	nop
800095c4:	d7 03       	nop
800095c6:	d7 03       	nop
800095c8:	d7 03       	nop
800095ca:	d7 03       	nop
800095cc:	d7 03       	nop
800095ce:	d7 03       	nop
800095d0:	d7 03       	nop
800095d2:	d7 03       	nop
800095d4:	d7 03       	nop
800095d6:	d7 03       	nop
800095d8:	d7 03       	nop
800095da:	d7 03       	nop
800095dc:	d7 03       	nop
800095de:	d7 03       	nop
800095e0:	d7 03       	nop
800095e2:	d7 03       	nop
800095e4:	d7 03       	nop
800095e6:	d7 03       	nop
800095e8:	d7 03       	nop
800095ea:	d7 03       	nop
800095ec:	d7 03       	nop
800095ee:	d7 03       	nop
800095f0:	d7 03       	nop
800095f2:	d7 03       	nop
800095f4:	d7 03       	nop
800095f6:	d7 03       	nop
800095f8:	d7 03       	nop
800095fa:	d7 03       	nop
800095fc:	d7 03       	nop
800095fe:	d7 03       	nop
